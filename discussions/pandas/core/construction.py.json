[
  {
    "id" : "bdaad410-53da-42dc-9bc1-b2a53ee37598",
    "prId" : 27551,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27551#pullrequestreview-266108052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08b54278-3a7c-4775-b5fd-352a47380bb2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, I would have left this where it was I think. what is the reasoning for moving this all to construction? (the array parts I am talking)",
        "createdAt" : "2019-07-24T11:52:23Z",
        "updatedAt" : "2019-07-24T16:32:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "41427ca0-e533-4cba-9740-18ac4b827ce3",
        "parentId" : "08b54278-3a7c-4775-b5fd-352a47380bb2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "after trying to move this back im remembering: because `core.arrays.__init__` imports a bunch of stuff keeping it there makes import order a hassle",
        "createdAt" : "2019-07-24T15:35:20Z",
        "updatedAt" : "2019-07-24T16:32:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a8dc367592aab485a123d66b430c334e694769d",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +0,4 @@\"\"\"\nConstructor functions intended to be shared by pd.array, Series.__init__,\nand Index.__new__.\n"
  },
  {
    "id" : "db857269-9fb3-4912-a663-a6139964c822",
    "prId" : 27551,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27551#pullrequestreview-266018325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d17f3f4-f985-4516-82b3-1532d83f751b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "+1 on combing these routines *into* array module",
        "createdAt" : "2019-07-24T11:53:07Z",
        "updatedAt" : "2019-07-24T16:32:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5a526df2-7d79-411b-8bbb-1e8cfe0ba1f8",
        "parentId" : "4d17f3f4-f985-4516-82b3-1532d83f751b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sure",
        "createdAt" : "2019-07-24T13:27:57Z",
        "updatedAt" : "2019-07-24T16:32:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ee95c9f2-3e01-45da-a130-44b1dd27188c",
        "parentId" : "4d17f3f4-f985-4516-82b3-1532d83f751b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "though im not wild about that name (hard to grep for)",
        "createdAt" : "2019-07-24T13:28:17Z",
        "updatedAt" : "2019-07-24T16:32:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a8dc367592aab485a123d66b430c334e694769d",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +314,318 @@    return result\n\n\ndef extract_array(obj, extract_numpy=False):\n    \"\"\""
  },
  {
    "id" : "dab5beca-cad0-466e-950a-77f0c7d6e4d0",
    "prId" : 28361,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28361#pullrequestreview-285666861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93390be9-6da8-4b57-9b76-9ec841ba3a1e",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "How come we don't need this `try` anymore?",
        "createdAt" : "2019-09-09T16:13:09Z",
        "updatedAt" : "2019-09-09T16:13:10Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "7a76190f-6881-4edb-9a55-65da3dcbe01e",
        "parentId" : "93390be9-6da8-4b57-9b76-9ec841ba3a1e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We don't have any test cases that make it past here.  I'm planning to put some more effort into trying to think up a case that would, but if I/we can't, then this is unnecessary.",
        "createdAt" : "2019-09-09T17:32:11Z",
        "updatedAt" : "2019-09-09T17:32:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a15a224a35c984438588df8ab7bbbdec5efe564",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +414,418 @@    elif isinstance(data, (list, tuple)) and len(data) > 0:\n        if dtype is not None:\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n        else:\n            subarr = maybe_convert_platform(data)"
  },
  {
    "id" : "4a1c5c75-1afe-41a2-904b-3e95fa96be63",
    "prId" : 28399,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28399#pullrequestreview-287229594",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4828b2b9-0427-4190-aa28-6e118b7cf5a0",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Does this path need to catch extension scalars in general? e.g. Do Categoricals also fail here?",
        "createdAt" : "2019-09-12T05:47:37Z",
        "updatedAt" : "2020-01-05T22:12:33Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "10402a01-e2e7-4787-a095-997192686eed",
        "parentId" : "4828b2b9-0427-4190-aa28-6e118b7cf5a0",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "`Categorical` shouldn't hit this code path since they need to be specified with a dtype, either by passing in a `Categorial` itself as the data, or a `CategoricalDtype` for the dtype, which should prevent the `if` block containing this code from being entered.\r\n\r\nLooks like lists of tz-aware `Timestamp` objects are fine as well, as there is a `maybe_cast_to_datetime` earlier on that catches them.  This does suggest that maybe this logic could be condensed, so I'll look into that next evening or so.",
        "createdAt" : "2019-09-12T07:10:38Z",
        "updatedAt" : "2020-01-05T22:12:33Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ece42763dd890fdfcdd6441eb523f12035549b57",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +498,502 @@        if is_object_dtype(subarr.dtype) and not is_object_dtype(dtype):\n            inferred = lib.infer_dtype(subarr, skipna=False)\n            if inferred in {\"interval\", \"period\"}:\n                subarr = array(subarr)\n"
  },
  {
    "id" : "6d98606b-77e7-43a1-8748-77374e6f8be9",
    "prId" : 28399,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28399#pullrequestreview-338425073",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4b06127-0b5b-46b2-9c16-ffc9c58b679d",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Hmm, I'm just noticing something about this code: This is doing dtype inference twice, right? Once on L477, and once in `pd.array`?\r\n\r\nPerhaps for `Period` that's unavoidable, since we need to determine the `freq`. But for `IntervalDtype` can you pass `dtype=\"interval\"` and skip the second inference?",
        "createdAt" : "2019-09-12T18:38:50Z",
        "updatedAt" : "2020-01-05T22:12:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c76a383b-aa98-4fe6-8519-8cfc73e952c1",
        "parentId" : "f4b06127-0b5b-46b2-9c16-ffc9c58b679d",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "> But for IntervalDtype can you pass dtype=\"interval\" and skip the second inference?\r\n\r\nNeed to infer `closed` for interval and handle the case of mixed closed intervals (object dtype instead of interval dtype, similar to how mixed freq periods are handled).\r\n\r\nCould do something similar to the existing logic, where we'd keep the deleted `if inferred == \"period\":` block with the `try` statement around `period_array` and have an `elif` with the interval equivalent of this logic.  Seems a bit repetitive but maybe a little more performant?",
        "createdAt" : "2019-09-12T22:49:26Z",
        "updatedAt" : "2020-01-05T22:12:33Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "68f372a0-826f-43bc-b63d-677febb23953",
        "parentId" : "f4b06127-0b5b-46b2-9c16-ffc9c58b679d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'm happy to ignore performance for now, if it's too awkward.",
        "createdAt" : "2019-09-13T21:08:04Z",
        "updatedAt" : "2020-01-05T22:12:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "faaf209a-4a8a-4146-85a1-289349d946c9",
        "parentId" : "f4b06127-0b5b-46b2-9c16-ffc9c58b679d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, can we simply try to use ``pa.array`` here as a general case (as it handles all of the local inference of EAs from list-likes)",
        "createdAt" : "2020-01-01T17:47:48Z",
        "updatedAt" : "2020-01-05T22:12:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "481f18dc-bd6c-4513-bc61-56cce6ee3403",
        "parentId" : "f4b06127-0b5b-46b2-9c16-ffc9c58b679d",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "I tried pushing `pd.array` further up as a more general case but kept running into issues. I suspect it probably could be done but might involve a bit more refactoring of the logic here.",
        "createdAt" : "2020-01-05T22:14:22Z",
        "updatedAt" : "2020-01-05T22:14:23Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "b672ac5e-c002-4e83-94a3-7a0e8dfee060",
        "parentId" : "f4b06127-0b5b-46b2-9c16-ffc9c58b679d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k great follow up to simplify would be great",
        "createdAt" : "2020-01-05T22:26:10Z",
        "updatedAt" : "2020-01-05T22:26:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ece42763dd890fdfcdd6441eb523f12035549b57",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +499,503 @@            inferred = lib.infer_dtype(subarr, skipna=False)\n            if inferred in {\"interval\", \"period\"}:\n                subarr = array(subarr)\n\n    return subarr"
  },
  {
    "id" : "9f8c18d1-c236-4199-b16d-c64d82aa33b7",
    "prId" : 28563,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28563#pullrequestreview-291511835",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e581076f-4d88-4f0d-bfec-cc142fe1b3b0",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "For everyone's edification: why are we doing this?  Same for the similar cast a few lines above.",
        "createdAt" : "2019-09-22T10:13:16Z",
        "updatedAt" : "2019-09-22T10:13:16Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "d9a44b4e-b5d4-4c3a-a657-d252d143d796",
        "parentId" : "e581076f-4d88-4f0d-bfec-cc142fe1b3b0",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is to keep mypy from complaining",
        "createdAt" : "2019-09-22T14:36:32Z",
        "updatedAt" : "2019-09-22T14:36:33Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "81b9dbf6d4d0786c665ef8b44167272a53902ac6",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +543,547 @@        elif is_extension_array_dtype(dtype):\n            # create an extension array from its dtype\n            dtype = cast(ExtensionDtype, dtype)\n            array_type = dtype.construct_array_type()._from_sequence\n            subarr = array_type(arr, dtype=dtype, copy=copy)"
  },
  {
    "id" : "380a95ed-2756-4fab-91ae-87db503a3b9f",
    "prId" : 29405,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29405#pullrequestreview-325055482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9a35a46-596f-49f3-b5c2-779049c01727",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a full doc-string (e.g. the paramters section)",
        "createdAt" : "2019-12-01T23:45:08Z",
        "updatedAt" : "2019-12-05T15:49:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f1d3e6f6-3be2-4e19-a767-75ae93efe0d8",
        "parentId" : "f9a35a46-596f-49f3-b5c2-779049c01727",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "There are just the same as Series, so I wouldn't copy the full docstring, but just document the additional keyword (`dtype_if_empty`) and refer to Series docstring for the others",
        "createdAt" : "2019-12-02T07:44:18Z",
        "updatedAt" : "2019-12-05T15:49:48Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "363c6980-c0e1-4547-a851-dbe0099a26aa",
        "parentId" : "f9a35a46-596f-49f3-b5c2-779049c01727",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : ">  refer to Series docstring for the others\r\n\r\nwhich is actually already done",
        "createdAt" : "2019-12-02T07:44:41Z",
        "updatedAt" : "2019-12-05T15:49:48Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce80f485ed207de63d00d93f07c0165af56f63c3",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +603,607 @@) -> \"Series\":\n    \"\"\"\n    Helper to pass an explicit dtype when instantiating an empty Series.\n\n    This silences a DeprecationWarning described in GitHub-17261."
  },
  {
    "id" : "47f8dd7f-ea4c-434f-981d-8835437b6464",
    "prId" : 29405,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29405#pullrequestreview-324973126",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a8a334f-b61c-4eac-987c-42a7cafe21c5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add parmaters / returns section & type.",
        "createdAt" : "2019-12-01T23:49:42Z",
        "updatedAt" : "2019-12-05T15:49:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce80f485ed207de63d00d93f07c0165af56f63c3",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +574,578 @@\ndef is_empty_data(data: Any) -> bool:\n    \"\"\"\n    Utility to check if a Series is instantiated with empty data,\n    which does not contain dtype information."
  },
  {
    "id" : "6eeb8b37-d0b7-4f39-8d10-915089062f62",
    "prId" : 29799,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29799#pullrequestreview-321768662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22f7b154-dce6-4278-be90-af181a06ca4f",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The documentation stated that we use the `dtype` for Series, Index, and ExtensionArrays. Moved this up here to get the dtype from these before extracting.\r\n\r\nThis is important for the following:\r\n\r\n```python\r\nIn [3]: s = pd.Series([1, 2])\r\n\r\nIn [4]: pd.array(s)\r\nOut[4]:\r\n<PandasArray>\r\n[1, 2]\r\nLength: 2, dtype: int64\r\n```\r\n\r\n\r\nWithout this change, we would extract the data to an int64 ndarray. We ignore the dtype for ndarrays, so we would have `pd.array(pd.Series([1, 2]))` inferring `Int64Dtype()`, rather than NumPy's int64.",
        "createdAt" : "2019-11-22T19:45:50Z",
        "updatedAt" : "2019-12-02T12:22:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0f3082ce4d2ca66533cdc0b4dabc2612b8e6e04",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +264,268 @@        raise ValueError(msg.format(data))\n\n    if dtype is None and isinstance(\n        data, (ABCSeries, ABCIndexClass, ABCExtensionArray)\n    ):"
  },
  {
    "id" : "576ab942-c532-446f-b282-55e9bf00808d",
    "prId" : 29799,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29799#pullrequestreview-321787019",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af07bea1-c180-431f-81aa-faf93cf50388",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "why is this moved below the dtype-extraction?",
        "createdAt" : "2019-11-22T19:45:53Z",
        "updatedAt" : "2019-12-02T12:22:10Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "35753392-8538-4f75-97db-75f55be47b18",
        "parentId" : "af07bea1-c180-431f-81aa-faf93cf50388",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "See https://github.com/pandas-dev/pandas/pull/29799#discussion_r349765386",
        "createdAt" : "2019-11-22T20:17:38Z",
        "updatedAt" : "2019-12-02T12:22:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0f3082ce4d2ca66533cdc0b4dabc2612b8e6e04",
    "line" : 142,
    "diffHunk" : "@@ -1,1 +269,273 @@        dtype = data.dtype\n\n    data = extract_array(data, extract_numpy=True)\n\n    # this returns None for not-found dtypes."
  },
  {
    "id" : "bbec4833-da19-4c57-9875-6a25c3e58599",
    "prId" : 29799,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29799#pullrequestreview-321900807",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71083816-43da-4554-bbf9-2786b7129928",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "IIUC the IntegerArray part doesnt depend on the lib.inferr_dtype change?",
        "createdAt" : "2019-11-22T19:46:38Z",
        "updatedAt" : "2019-12-02T12:22:10Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "533b3f27-11f4-4c47-b79d-728d8e84e482",
        "parentId" : "71083816-43da-4554-bbf9-2786b7129928",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We already infer `[1, None]` as `mixed-integer`. The only change necessary was handling that case here, rather than falling through to PandasArray.",
        "createdAt" : "2019-11-22T19:50:04Z",
        "updatedAt" : "2019-12-02T12:22:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "75d9993b-fb9c-4904-9c31-6ca160546fde",
        "parentId" : "71083816-43da-4554-bbf9-2786b7129928",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "To repeat here what I just commented on the issue: shouldn't we be inferrring the dtype with `skipna=True`? Then [1, None] will also give 'integer' and not 'mixed-integer'",
        "createdAt" : "2019-11-23T08:36:47Z",
        "updatedAt" : "2019-12-02T12:22:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0f3082ce4d2ca66533cdc0b4dabc2612b8e6e04",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +312,316 @@\n        elif inferred_dtype == \"integer\":\n            return IntegerArray._from_sequence(data, copy=copy)\n\n        elif inferred_dtype == \"boolean\":"
  },
  {
    "id" : "95fac836-9857-43d8-aff3-7dee6692146a",
    "prId" : 29799,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29799#pullrequestreview-324096109",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "106018f1-f257-493f-b1b4-ae08fe783950",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Should we mention that this can still change in the future? (eg that more types start to get inferred, so basically that you should not rely on the fact of `pd.array` returning a PandasArray when no dtype is specified)",
        "createdAt" : "2019-11-28T07:32:14Z",
        "updatedAt" : "2019-12-02T12:22:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0f3082ce4d2ca66533cdc0b4dabc2612b8e6e04",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +223,227 @@\n    If pandas does not infer a dedicated extension type a\n    :class:`arrays.PandasArray` is returned.\n\n    >>> pd.array([1.1, 2.2])"
  },
  {
    "id" : "c90006f7-2ba9-4249-ad12-e7997e343fea",
    "prId" : 29799,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29799#pullrequestreview-325393188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77992f7e-2fd6-478b-a503-a8646698d549",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so my issue with this PR is that is duplicating a lot of logic that is already held here: https://github.com/pandas-dev/pandas/blob/master/pandas/_libs/lib.pyx#L1948, so now we have 2 places with slightly different ways of doing things.\r\n\r\nThis routine is slightly more 'high-level', but myabe_convert_objects is way more used internally. So how to reconcile these things?\r\n\r\n@jorisvandenbossche @TomAugspurger ",
        "createdAt" : "2019-11-29T23:16:04Z",
        "updatedAt" : "2019-12-02T12:22:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "38dbad81-b450-44ab-9dd9-00d7aeecbb11",
        "parentId" : "77992f7e-2fd6-478b-a503-a8646698d549",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'm not familiar with `maybe_convert_objects`, but what's the duplicate logic between the two? At a glance, it seems like `maybe_convert_objects` is mixing two things\r\n\r\n1. type inference (the sole purpose of `lib.infer_dtype`)\r\n2. array construction (which may be `pd.array`? Or move the core to some `_libs` method?).\r\n\r\nShould we update `maybe_infer_objects` to use `array` internally? I don't have a feel for whether that's even possible, do you?\r\n\r\nI do see the similarity in purpose though. They're both for taking potentially untyped things and converting them to a typed array.",
        "createdAt" : "2019-12-02T12:22:01Z",
        "updatedAt" : "2019-12-02T12:24:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "a3c42652-8285-424a-835e-d735ded4eaeb",
        "parentId" : "77992f7e-2fd6-478b-a503-a8646698d549",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> Should we update maybe_infer_objects to use array internally? I don't have a feel for whether that's even possible, do you?\r\n\r\nProbably not in the short term.  Best guess for de-duplication for the discussed functions will look something like:\r\n\r\n- `lib.maybe_convert_objects` is made to back `lib.infer_dtype`\r\n  - Note: `lib.maybe_convert_objects` involves two runtime non-cython imports that I'd really like to find a way to avoid (one will be easy, the other very much not)\r\n- `pd.array` calls `maybe_convert_objects` instead of `infer_dtype`\r\n  - More generally, many places where we call infer_dtype followed by casting can be replaced to be one-pass instead of two-pass.\r\n- `Series` constructor is backed by `pd.array`\r\n- `Index.__new__` is backed by `pd.array` (we'd need something like `RangeArray` first)",
        "createdAt" : "2019-12-02T17:07:15Z",
        "updatedAt" : "2019-12-02T17:07:15Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0f3082ce4d2ca66533cdc0b4dabc2612b8e6e04",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +280,284 @@\n    if dtype is None:\n        inferred_dtype = lib.infer_dtype(data, skipna=True)\n        if inferred_dtype == \"period\":\n            try:"
  },
  {
    "id" : "d4715552-d483-424a-a34a-8356458301af",
    "prId" : 36054,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36054#pullrequestreview-480158239",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43128bb8-9a02-4736-8d60-7e0d3ec57dbe",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can you add a comment here about dict_keys being abc.Set but not set",
        "createdAt" : "2020-09-01T22:23:01Z",
        "updatedAt" : "2020-09-05T21:29:15Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "96845ff52a6d7a0f060482cbc41eeed43cbb3afe",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +442,446 @@        if isinstance(data, set):\n            # Raise only for unordered sets, e.g., not for dict_keys\n            raise TypeError(\"Set type is unordered\")\n        data = list(data)\n"
  },
  {
    "id" : "b0061480-edfb-4b56-a5cd-2350f08a52fc",
    "prId" : 36098,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36098#pullrequestreview-482840622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "def8bed7-dd13-4dfc-8b60-ad1d51eff6bd",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Could we avoid this by assigning to a new name before returning?",
        "createdAt" : "2020-09-04T15:53:57Z",
        "updatedAt" : "2020-09-04T15:53:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9ad1fc12-dd9c-45e1-aa49-929874f2d52d",
        "parentId" : "def8bed7-dd13-4dfc-8b60-ad1d51eff6bd",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I'll look some more, but we are using ABC types here which always create issues with eliminating types so I just added the ignore for now so that the return types can be added.",
        "createdAt" : "2020-09-04T17:40:36Z",
        "updatedAt" : "2020-09-04T17:40:36Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "db640fa2537ff18bf4d9da6cf7443b05cdae053e",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +385,389 @@\n    # error: Incompatible return value type (got \"Index\", expected \"ExtensionArray\")\n    # error: Incompatible return value type (got \"Series\", expected \"ExtensionArray\")\n    return obj  # type: ignore[return-value]\n"
  },
  {
    "id" : "9dd1df20-358e-4df9-9b77-85b14a3e0961",
    "prId" : 38398,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38398#pullrequestreview-548778459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79dda509-7662-4365-82d0-58a33e7ebe28",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "removing this copy does not break any tests, not clear why it is needed",
        "createdAt" : "2020-12-10T02:47:21Z",
        "updatedAt" : "2020-12-10T19:48:25Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "06e467ccf10037d29553e6ef566598bb64880a09",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +431,435 @@        data[mask] = fill_value\n    else:\n        data = data.copy()\n    return data\n"
  },
  {
    "id" : "cd380684-11fc-4fdf-bfd5-02a9dce61680",
    "prId" : 38553,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38553#pullrequestreview-555687639",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "002f781a-4e04-4079-9a32-44973fcc9e5b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "intent is to try to deduplicate with other things we have in core/dtypes/cast ?",
        "createdAt" : "2020-12-18T17:39:29Z",
        "updatedAt" : "2020-12-18T17:39:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9a3f90ed-d744-4b03-8437-78b1731fc07a",
        "parentId" : "002f781a-4e04-4079-9a32-44973fcc9e5b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "partially.  more immediately i'm focused on trying to isolate scalar cases so we can rule them out elsewhere",
        "createdAt" : "2020-12-18T17:42:58Z",
        "updatedAt" : "2020-12-18T17:42:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "62acb0d15ca3868d6b0d8bccb57a3e97851c5a0f",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +529,533 @@\n\ndef _sanitize_str_dtypes(\n    result: np.ndarray, data, dtype: Optional[DtypeObj], copy: bool\n) -> np.ndarray:"
  },
  {
    "id" : "042dc70e-0182-49db-8f29-e8e3f83a4e8d",
    "prId" : 39357,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39357#pullrequestreview-575710300",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cd8b6c3-a280-470f-b3ef-d2b1f59d6bcf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could pull this (L536) out to before L534 but can wait for later",
        "createdAt" : "2021-01-25T14:14:42Z",
        "updatedAt" : "2021-01-25T14:15:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "028e3222-f9cf-4356-ba00-fc7ab7388ac2",
        "parentId" : "5cd8b6c3-a280-470f-b3ef-d2b1f59d6bcf",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "not clear to me why that would be beneficial",
        "createdAt" : "2021-01-25T18:53:31Z",
        "updatedAt" : "2021-01-25T18:53:31Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "693687f316d323f5ac3d53eadda6ddb4bdf98ab8",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +534,538 @@        if is_object_dtype(dtype) and isinstance(dtype, ExtensionDtype):\n            # i.e. PandasDtype(\"O\")\n            result = com.asarray_tuplesafe(data, dtype=object)\n            cls = dtype.construct_array_type()\n            result = cls._from_sequence(result, dtype=dtype)"
  },
  {
    "id" : "784bd315-8b0a-46f7-a44e-d0283cdccced",
    "prId" : 39908,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39908#pullrequestreview-676771437",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2d2dd0b-6f6e-4b55-8191-7e69f1fd972f",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`ArrowStringArray` is not added to the API docs, so this link won't work right now",
        "createdAt" : "2021-06-02T10:51:13Z",
        "updatedAt" : "2021-06-02T11:05:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "cfc78973-33ac-49d6-8594-27134dcb067d",
        "parentId" : "b2d2dd0b-6f6e-4b55-8191-7e69f1fd972f",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "maybe should merge #40962 first (or cut down alternative) bit of chicken and egg, before this is merged naming can change, and vice-versa, I guess having both in the same PR is the only good solution even if more to review.",
        "createdAt" : "2021-06-02T11:55:56Z",
        "updatedAt" : "2021-06-02T11:55:56Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "245747e6-7ecb-4531-8acb-27c5dda684ed",
        "parentId" : "b2d2dd0b-6f6e-4b55-8191-7e69f1fd972f",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I _think_ we are all agreed with the name ArrowStringArray. so perhaps nothing stopping us making it public now.",
        "createdAt" : "2021-06-02T14:13:58Z",
        "updatedAt" : "2021-06-02T14:13:58Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "9ac4c54e-6e40-4137-95f2-26c3f28bd008",
        "parentId" : "b2d2dd0b-6f6e-4b55-8191-7e69f1fd972f",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "done in 4a37470d4802df49ea03982178d939348016bea3",
        "createdAt" : "2021-06-02T16:02:13Z",
        "updatedAt" : "2021-06-02T16:02:13Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "bcd46756-dc74-4f62-8d4a-58c22c616adc",
        "parentId" : "b2d2dd0b-6f6e-4b55-8191-7e69f1fd972f",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "this is an implementation detail. hopefully we can revert",
        "createdAt" : "2021-06-05T11:02:02Z",
        "updatedAt" : "2021-06-05T11:02:03Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef02a435ec481eeac62fe00ebc87d501489e13fc",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +120,124 @@        :class:`float`                 :class:`pandas.arrays.FloatingArray`\n        :class:`str`                   :class:`pandas.arrays.StringArray` or\n                                       :class:`pandas.arrays.ArrowStringArray`\n        :class:`bool`                  :class:`pandas.arrays.BooleanArray`\n        ============================== ======================================="
  }
]