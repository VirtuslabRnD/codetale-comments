[
  {
    "id" : "bdaad410-53da-42dc-9bc1-b2a53ee37598",
    "prId" : 27551,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27551#pullrequestreview-266108052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08b54278-3a7c-4775-b5fd-352a47380bb2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, I would have left this where it was I think. what is the reasoning for moving this all to construction? (the array parts I am talking)",
        "createdAt" : "2019-07-24T11:52:23Z",
        "updatedAt" : "2019-07-24T16:32:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "41427ca0-e533-4cba-9740-18ac4b827ce3",
        "parentId" : "08b54278-3a7c-4775-b5fd-352a47380bb2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "after trying to move this back im remembering: because `core.arrays.__init__` imports a bunch of stuff keeping it there makes import order a hassle",
        "createdAt" : "2019-07-24T15:35:20Z",
        "updatedAt" : "2019-07-24T16:32:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a8dc367592aab485a123d66b430c334e694769d",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +0,4 @@\"\"\"\nConstructor functions intended to be shared by pd.array, Series.__init__,\nand Index.__new__.\n"
  },
  {
    "id" : "db857269-9fb3-4912-a663-a6139964c822",
    "prId" : 27551,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27551#pullrequestreview-266018325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d17f3f4-f985-4516-82b3-1532d83f751b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "+1 on combing these routines *into* array module",
        "createdAt" : "2019-07-24T11:53:07Z",
        "updatedAt" : "2019-07-24T16:32:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5a526df2-7d79-411b-8bbb-1e8cfe0ba1f8",
        "parentId" : "4d17f3f4-f985-4516-82b3-1532d83f751b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sure",
        "createdAt" : "2019-07-24T13:27:57Z",
        "updatedAt" : "2019-07-24T16:32:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ee95c9f2-3e01-45da-a130-44b1dd27188c",
        "parentId" : "4d17f3f4-f985-4516-82b3-1532d83f751b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "though im not wild about that name (hard to grep for)",
        "createdAt" : "2019-07-24T13:28:17Z",
        "updatedAt" : "2019-07-24T16:32:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a8dc367592aab485a123d66b430c334e694769d",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +314,318 @@    return result\n\n\ndef extract_array(obj, extract_numpy=False):\n    \"\"\""
  },
  {
    "id" : "dab5beca-cad0-466e-950a-77f0c7d6e4d0",
    "prId" : 28361,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28361#pullrequestreview-285666861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93390be9-6da8-4b57-9b76-9ec841ba3a1e",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "How come we don't need this `try` anymore?",
        "createdAt" : "2019-09-09T16:13:09Z",
        "updatedAt" : "2019-09-09T16:13:10Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "7a76190f-6881-4edb-9a55-65da3dcbe01e",
        "parentId" : "93390be9-6da8-4b57-9b76-9ec841ba3a1e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We don't have any test cases that make it past here.  I'm planning to put some more effort into trying to think up a case that would, but if I/we can't, then this is unnecessary.",
        "createdAt" : "2019-09-09T17:32:11Z",
        "updatedAt" : "2019-09-09T17:32:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a15a224a35c984438588df8ab7bbbdec5efe564",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +414,418 @@    elif isinstance(data, (list, tuple)) and len(data) > 0:\n        if dtype is not None:\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n        else:\n            subarr = maybe_convert_platform(data)"
  },
  {
    "id" : "4a1c5c75-1afe-41a2-904b-3e95fa96be63",
    "prId" : 28399,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28399#pullrequestreview-287229594",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4828b2b9-0427-4190-aa28-6e118b7cf5a0",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Does this path need to catch extension scalars in general? e.g. Do Categoricals also fail here?",
        "createdAt" : "2019-09-12T05:47:37Z",
        "updatedAt" : "2020-01-05T22:12:33Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "10402a01-e2e7-4787-a095-997192686eed",
        "parentId" : "4828b2b9-0427-4190-aa28-6e118b7cf5a0",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "`Categorical` shouldn't hit this code path since they need to be specified with a dtype, either by passing in a `Categorial` itself as the data, or a `CategoricalDtype` for the dtype, which should prevent the `if` block containing this code from being entered.\r\n\r\nLooks like lists of tz-aware `Timestamp` objects are fine as well, as there is a `maybe_cast_to_datetime` earlier on that catches them.  This does suggest that maybe this logic could be condensed, so I'll look into that next evening or so.",
        "createdAt" : "2019-09-12T07:10:38Z",
        "updatedAt" : "2020-01-05T22:12:33Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ece42763dd890fdfcdd6441eb523f12035549b57",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +498,502 @@        if is_object_dtype(subarr.dtype) and not is_object_dtype(dtype):\n            inferred = lib.infer_dtype(subarr, skipna=False)\n            if inferred in {\"interval\", \"period\"}:\n                subarr = array(subarr)\n"
  },
  {
    "id" : "6d98606b-77e7-43a1-8748-77374e6f8be9",
    "prId" : 28399,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28399#pullrequestreview-338425073",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4b06127-0b5b-46b2-9c16-ffc9c58b679d",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Hmm, I'm just noticing something about this code: This is doing dtype inference twice, right? Once on L477, and once in `pd.array`?\r\n\r\nPerhaps for `Period` that's unavoidable, since we need to determine the `freq`. But for `IntervalDtype` can you pass `dtype=\"interval\"` and skip the second inference?",
        "createdAt" : "2019-09-12T18:38:50Z",
        "updatedAt" : "2020-01-05T22:12:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c76a383b-aa98-4fe6-8519-8cfc73e952c1",
        "parentId" : "f4b06127-0b5b-46b2-9c16-ffc9c58b679d",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "> But for IntervalDtype can you pass dtype=\"interval\" and skip the second inference?\r\n\r\nNeed to infer `closed` for interval and handle the case of mixed closed intervals (object dtype instead of interval dtype, similar to how mixed freq periods are handled).\r\n\r\nCould do something similar to the existing logic, where we'd keep the deleted `if inferred == \"period\":` block with the `try` statement around `period_array` and have an `elif` with the interval equivalent of this logic.  Seems a bit repetitive but maybe a little more performant?",
        "createdAt" : "2019-09-12T22:49:26Z",
        "updatedAt" : "2020-01-05T22:12:33Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "68f372a0-826f-43bc-b63d-677febb23953",
        "parentId" : "f4b06127-0b5b-46b2-9c16-ffc9c58b679d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'm happy to ignore performance for now, if it's too awkward.",
        "createdAt" : "2019-09-13T21:08:04Z",
        "updatedAt" : "2020-01-05T22:12:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "faaf209a-4a8a-4146-85a1-289349d946c9",
        "parentId" : "f4b06127-0b5b-46b2-9c16-ffc9c58b679d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, can we simply try to use ``pa.array`` here as a general case (as it handles all of the local inference of EAs from list-likes)",
        "createdAt" : "2020-01-01T17:47:48Z",
        "updatedAt" : "2020-01-05T22:12:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "481f18dc-bd6c-4513-bc61-56cce6ee3403",
        "parentId" : "f4b06127-0b5b-46b2-9c16-ffc9c58b679d",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "I tried pushing `pd.array` further up as a more general case but kept running into issues. I suspect it probably could be done but might involve a bit more refactoring of the logic here.",
        "createdAt" : "2020-01-05T22:14:22Z",
        "updatedAt" : "2020-01-05T22:14:23Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "b672ac5e-c002-4e83-94a3-7a0e8dfee060",
        "parentId" : "f4b06127-0b5b-46b2-9c16-ffc9c58b679d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k great follow up to simplify would be great",
        "createdAt" : "2020-01-05T22:26:10Z",
        "updatedAt" : "2020-01-05T22:26:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ece42763dd890fdfcdd6441eb523f12035549b57",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +499,503 @@            inferred = lib.infer_dtype(subarr, skipna=False)\n            if inferred in {\"interval\", \"period\"}:\n                subarr = array(subarr)\n\n    return subarr"
  }
]