[
  {
    "id" : "f33369ce-b3d2-47f3-8f4c-0a8522fa418a",
    "prId" : 39948,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39948#pullrequestreview-596422681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41c56618-ae67-44ad-abbb-cd38d0e7df1e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "\"array algos\" should only deal with arrays IMO",
        "createdAt" : "2021-02-23T13:30:56Z",
        "updatedAt" : "2021-02-23T13:30:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "17eb5f08-ae1b-4217-93b7-143d1750a866",
        "parentId" : "41c56618-ae67-44ad-abbb-cd38d0e7df1e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "good catch, will fix in follow-up",
        "createdAt" : "2021-02-23T14:53:20Z",
        "updatedAt" : "2021-02-23T14:53:20Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce9e010ef564479830529bf65e6bd0729b749233",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +64,68 @@        fill_value = na_value_for_dtype(arr.dtype, compat=False)\n\n    arr = extract_array(arr, extract_numpy=True)\n\n    if not isinstance(arr, np.ndarray):"
  },
  {
    "id" : "89e9ccb7-6f6d-46a4-96d8-7eb39036e633",
    "prId" : 40000,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40000#pullrequestreview-596996157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4d5bfbb-2d0f-45d1-a897-26a52e739c3f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is purely for typing right?",
        "createdAt" : "2021-02-24T00:36:27Z",
        "updatedAt" : "2021-02-24T00:36:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fa86cf35-ccf8-4572-ab52-29f680c6c499",
        "parentId" : "a4d5bfbb-2d0f-45d1-a897-26a52e739c3f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yah mypy complained without it",
        "createdAt" : "2021-02-24T01:20:27Z",
        "updatedAt" : "2021-02-24T01:20:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ca69b87b-4e7b-4b95-a1bb-5e0c412b5800",
        "parentId" : "a4d5bfbb-2d0f-45d1-a897-26a52e739c3f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can't just cast here?",
        "createdAt" : "2021-02-24T01:56:02Z",
        "updatedAt" : "2021-02-24T01:56:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c7b182fe-8658-40d4-a471-5023025adcae",
        "parentId" : "a4d5bfbb-2d0f-45d1-a897-26a52e739c3f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "simon explained a couple days ago in a different thread that it involves ArrayLike being a TypeVar and not a union",
        "createdAt" : "2021-02-24T01:59:56Z",
        "updatedAt" : "2021-02-24T01:59:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "34f6847f-08c6-4535-ad56-6b503097b395",
        "parentId" : "a4d5bfbb-2d0f-45d1-a897-26a52e739c3f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok then",
        "createdAt" : "2021-02-24T02:01:15Z",
        "updatedAt" : "2021-02-24T02:01:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "31ad8cadbb07d7b19c4bccd7ef053afc8a277fea",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +73,77 @@\n\ndef _take_nd_ndarray(\n    arr: np.ndarray,\n    indexer,"
  },
  {
    "id" : "b4d2ebd7-8e8e-4616-94ba-9c642f746849",
    "prId" : 40149,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40149#pullrequestreview-626511831",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f77fa8d5-7415-4e34-b569-aeeb7fcba85b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you change these conditions to be a positive one, eg. isinstance(..., (DatetimeArray, TimedeltaArray))?",
        "createdAt" : "2021-03-26T21:28:23Z",
        "updatedAt" : "2021-05-09T21:43:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1c06a330-e743-41d1-bf55-50507a58ad93",
        "parentId" : "f77fa8d5-7415-4e34-b569-aeeb7fcba85b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i can flip is_1d_only_ea_obj to is_2d_compat_ea_obj i guess; i like having a function for this so that a) it can potentially be expanded and b) it is easy to find where it is used",
        "createdAt" : "2021-03-26T21:53:01Z",
        "updatedAt" : "2021-05-09T21:43:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "1f1bc30e-5938-46b7-8b6d-6f183e6e52e1",
        "parentId" : "f77fa8d5-7415-4e34-b569-aeeb7fcba85b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i looked at this and it ended up making things more verbose",
        "createdAt" : "2021-04-01T17:50:12Z",
        "updatedAt" : "2021-05-09T21:43:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6fded81dd3741ba725d9c0c9e97fc2f026f3e47d",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +96,100 @@        # i.e. ExtensionArray,\n        # includes for EA to catch DatetimeArray, TimedeltaArray\n        if not is_1d_only_ea_obj(arr):\n            # i.e. DatetimeArray, TimedeltaArray\n            arr = cast(\"NDArrayBackedExtensionArray\", arr)"
  },
  {
    "id" : "a9146f21-a2cd-4618-a464-25cace896981",
    "prId" : 40246,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40246#pullrequestreview-605322914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c741f0e-210d-4d74-a050-1e7329a17003",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "conversely, if we end up with only-AM, could we remove non-this functions?",
        "createdAt" : "2021-03-05T15:05:24Z",
        "updatedAt" : "2021-03-05T19:08:45Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "652d1be9-c1db-4ecd-9673-b288f4b8fdb9",
        "parentId" : "8c741f0e-210d-4d74-a050-1e7329a17003",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Possibly, yes (I would need to check where take_nd is used to be sure that all such cases would become 1D)",
        "createdAt" : "2021-03-05T15:13:14Z",
        "updatedAt" : "2021-03-05T19:08:45Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6ce02ab50a71ccb994c0db9dc6f1cbb95b64496",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +137,141 @@\n    TODO(ArrayManager): mainly useful for ArrayManager, otherwise can potentially\n    be removed again if we don't end up with ArrayManager.\n    \"\"\"\n    if not isinstance(arr, np.ndarray):"
  },
  {
    "id" : "352068b8-78ad-4f11-8820-0011b7379fb7",
    "prId" : 40300,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40300#pullrequestreview-606092682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92121fe9-ef3a-466b-af36-120dea9f9f35",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Nothing changed in those lines of the code; it's only a change in indentation (which github does't seem to detect nicely). \r\n\r\nOnly the first lines:\r\n\r\n```\r\n    if indexer is None:\r\n        indexer = np.arange(arr.shape[axis], dtype=np.int64)\r\n        dtype, fill_value = arr.dtype, arr.dtype.type()\r\n    else:\r\n        indexer = ensure_int64(indexer, copy=False)\r\n```\r\nhave been moved out into `_take_nd_ndarray`",
        "createdAt" : "2021-03-08T09:17:14Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f933ff455f33717cf56b8c9cf830d9ab2348b6",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +544,548 @@                # (it won't be used but we don't want the cython code\n                # to crash when trying to cast it to dtype)\n                dtype, fill_value = arr.dtype, arr.dtype.type()\n\n    return indexer, dtype, fill_value, mask_info"
  },
  {
    "id" : "d5c7b0a9-cbbc-4c16-8f64-356bd883c8ae",
    "prId" : 40300,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40300#pullrequestreview-606093273",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb673816-1348-4d25-9ac6-a1df30c515b8",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This part is copied from `_take_preprocess_indexer_and_fill_value`, so we can avoid doing that in `take_1d`",
        "createdAt" : "2021-03-08T09:18:01Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f933ff455f33717cf56b8c9cf830d9ab2348b6",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +121,125 @@        dtype, fill_value = arr.dtype, arr.dtype.type()\n    else:\n        indexer = ensure_int64(indexer, copy=False)\n    indexer, dtype, fill_value, mask_info = _take_preprocess_indexer_and_fill_value(\n        arr, indexer, out, fill_value, allow_fill"
  },
  {
    "id" : "6d23e978-22ee-4d97-8c08-52fe0568d428",
    "prId" : 40300,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40300#pullrequestreview-610333286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d60bce1-ed8b-4336-aa24-82b86ed846f7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you put asserts for these conditions",
        "createdAt" : "2021-03-08T13:08:45Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fdb6127c-65fd-428d-b39e-aa320e06c0e9",
        "parentId" : "1d60bce1-ed8b-4336-aa24-82b86ed846f7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Not really, as it's the point of this function to *not* do those asserts, but do them a level higher up in the calling code (and to be clear, this would just give a TypeError or AttributeError, it's not that it would segfault or so in case wrongly typed arguments are passed). ",
        "createdAt" : "2021-03-08T13:17:06Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4446afe9-c4d1-4bb0-bf03-822b0fc733d3",
        "parentId" : "1d60bce1-ed8b-4336-aa24-82b86ed846f7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sure you can we have asserts all of the place to enforce internal conditions, that's the point",
        "createdAt" : "2021-03-08T14:11:23Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9f2fa465-ffac-450d-aaeb-9228e9e5211e",
        "parentId" : "1d60bce1-ed8b-4336-aa24-82b86ed846f7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "So the place where this function is called already has a `indexer = ensure_int64(indexer, copy=False)`. So adding a `assert indexer.dtype == \"int64\"` on the next line is then superfluous.",
        "createdAt" : "2021-03-10T14:33:41Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f8a6c653-4dab-4269-9313-f2b993583670",
        "parentId" : "1d60bce1-ed8b-4336-aa24-82b86ed846f7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pls do the asserts. documenting this is good, but an assert is way better.",
        "createdAt" : "2021-03-10T15:02:25Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "87e71372-303d-49ed-a086-bb8a8ab7ee67",
        "parentId" : "1d60bce1-ed8b-4336-aa24-82b86ed846f7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Have you read my response? \r\nThe point of the changes in this PR is that we don't need to do those assertions 1000 times on the same data, but only once in the code calling this function. \r\n\r\nAnd the code calling this function asserts that the indexer is int64. And ensures that the input is an ndarray or EA.  ",
        "createdAt" : "2021-03-10T15:14:13Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2857ec7b-c298-4057-a665-0dc107ce030f",
        "parentId" : "1d60bce1-ed8b-4336-aa24-82b86ed846f7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does this actually change the perf? asserts should not do that\nif so that is a different issue\n\nyour comments don't change my mind here\n",
        "createdAt" : "2021-03-10T15:34:46Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d4aa4a46-09f7-4015-82c8-3c81ace8b905",
        "parentId" : "1d60bce1-ed8b-4336-aa24-82b86ed846f7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Of course adding those asserts gives a performance overhead. Maybe not much for a single call, but the point is that we call this function *repeatedly* on partly the same input, and then this overhead adds up (eg in the unstack benchmark that I reference in the top post, the `take_1d` is called 100_000 times for a single unstack operation, while we can do those asserts a single time inside `unstack`). \r\nIt's not necessarily the `assert` itself, but the actual check after the assert takes some time. For example, see the following call of `take_1d` using the current branch of this PR. With this PR, a single call (using data similarly as would be used in the referenced unstack operation) takes a bit more than 500ns:\r\n\r\n```python\r\nIn [1]: from pandas.core.array_algos.take import take_1d\r\n\r\nIn [2]: from pandas.api.extensions import ExtensionArray\r\n\r\nIn [3]: arr = np.random.randn(10000)\r\n\r\nIn [4]: indexer = np.arange(100, dtype=\"int64\")\r\n\r\nIn [5]: %timeit take_1d(arr, indexer, allow_fill=False)\r\n561 ns ± 5.32 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\r\n\r\nIn [6]: %timeit assert isinstance(arr, (np.ndarray, ExtensionArray))\r\n92.7 ns ± 1.01 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)\r\n\r\nIn [7]: %timeit assert isinstance(indexer, np.ndarray)\r\n70.1 ns ± 3.73 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)\r\n\r\nIn [8]: %timeit assert indexer.dtype == \"int64\"\r\n287 ns ± 1.72 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\r\n```\r\n\r\nDoing all the assertions as I now documented them (ensuring it are actual arrays, ensuring the dtype of the indexer), would together give an almost 2x slowdown in this case. Only checking for ndarray would still give an almost 20% slowdown.\r\n\r\n",
        "createdAt" : "2021-03-11T11:08:10Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "04ca4fde-f6ee-472f-a0a1-859900d0cb96",
        "parentId" : "1d60bce1-ed8b-4336-aa24-82b86ed846f7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "(as another example, we don't actually check that indices are within bounds in take_nd/take_1d, which would actually silently give garbage data if passed a wrong indexer, while a wrong dtype for the indexer just gives a normal error message already)",
        "createdAt" : "2021-03-11T11:50:42Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "8c7b0c4c-daec-4cd8-a0a1-59112ea9aedd",
        "parentId" : "1d60bce1-ed8b-4336-aa24-82b86ed846f7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok. note that maybe we should do release builds to avoid this issue generally. but i guess this is fine.",
        "createdAt" : "2021-03-11T23:43:31Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f933ff455f33717cf56b8c9cf830d9ab2348b6",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +170,174 @@    Specialized version for 1D arrays. Differences compared to `take_nd`:\n\n    - Assumes input array has already been converted to numpy array / EA\n    - Assumes indexer is already guaranteed to be int64 dtype ndarray\n    - Only works for 1D arrays"
  },
  {
    "id" : "5968384c-b7bd-4267-aa53-5fad6c5dd404",
    "prId" : 40300,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40300#pullrequestreview-610340616",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5da25eba-d05d-4dbe-831a-3387510cb97b",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "entry for 'validate_indices has already been checked'?",
        "createdAt" : "2021-03-10T15:26:17Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "55a399c5-3601-4871-a673-bc10444e9924",
        "parentId" : "5da25eba-d05d-4dbe-831a-3387510cb97b",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> entry for 'validate_indices has already been checked'?\r\n\r\nAdded (that's the same for `take_nd` as well though, so it's not a difference with take_nd)",
        "createdAt" : "2021-03-11T10:48:36Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a4ddd916-cba5-41d8-af02-8fc62dfca0d3",
        "parentId" : "5da25eba-d05d-4dbe-831a-3387510cb97b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "thanks.  I _think_ calling take_1d without having done this check was the source of the segfaults i was getting",
        "createdAt" : "2021-03-11T23:54:45Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f933ff455f33717cf56b8c9cf830d9ab2348b6",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +173,177 @@    - Assumes indexer is already guaranteed to be int64 dtype ndarray\n    - Only works for 1D arrays\n\n    To ensure the lowest possible overhead.\n"
  },
  {
    "id" : "50e5ce4d-b220-437c-9a73-5d34f78e6c85",
    "prId" : 40300,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40300#pullrequestreview-608842024",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16d255b0-b7b5-4f55-9a3a-7b3e9de32af5",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "good!  i was gonna mention i got segfaults when i tried using this elsewhere in this case",
        "createdAt" : "2021-03-10T15:26:54Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f933ff455f33717cf56b8c9cf830d9ab2348b6",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +193,197 @@        )\n\n    if not allow_fill:\n        return arr.take(indexer)\n"
  },
  {
    "id" : "1ca3b245-7b9c-48cf-b990-9285d3a6118f",
    "prId" : 40300,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40300#pullrequestreview-609645459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b102ac3f-ee5f-48b9-95ab-cb3858571210",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "do we ever get to _take_preprocess_indexer_and_fill_value with allow_fill=False?",
        "createdAt" : "2021-03-10T15:27:23Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f358194a-87c9-4a65-9bfa-a4987e55b747",
        "parentId" : "b102ac3f-ee5f-48b9-95ab-cb3858571210",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, that's currently possible in `take_nd`, and a quick search reveals that we have a few cases throughout pandas that calls `take_nd` specifying this argument. That's probably something to optimize though. ",
        "createdAt" : "2021-03-11T11:11:23Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f933ff455f33717cf56b8c9cf830d9ab2348b6",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +197,201 @@\n    indexer, dtype, fill_value, mask_info = _take_preprocess_indexer_and_fill_value(\n        arr, indexer, None, fill_value, allow_fill\n    )\n"
  }
]