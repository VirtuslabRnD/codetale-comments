[
  {
    "id" : "79378075-abb9-4f82-b537-5d000011d283",
    "prId" : 30982,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30982#pullrequestreview-381870630",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0924ded2-d036-4f1d-8e5d-3a487bb18c5e",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "skipna is a required parameter. Should this default be included in the function signature?",
        "createdAt" : "2020-03-26T10:18:21Z",
        "updatedAt" : "2020-03-26T16:17:54Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "5ef5a441-5a2a-41ac-abd6-0050f5c15f10",
        "parentId" : "0924ded2-d036-4f1d-8e5d-3a487bb18c5e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "done",
        "createdAt" : "2020-03-26T10:20:41Z",
        "updatedAt" : "2020-03-26T16:17:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a43e1058cdc12fc0a05e7a990a16e11f463e45d",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@    mask : np.ndarray\n        Boolean numpy array (True values indicate missing values).\n    skipna : bool, default True\n        Whether to skip NA.\n    min_count : int, default 0"
  },
  {
    "id" : "63716513-9bcb-4089-a6ab-285633d8ab6f",
    "prId" : 30982,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30982#pullrequestreview-382323550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef32e665-4d54-436b-a0dc-78f526173a5f",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can we avoid overriding a builtin-in name?",
        "createdAt" : "2020-03-26T15:50:06Z",
        "updatedAt" : "2020-03-26T16:17:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "fe1fee96-b5bc-4655-ada4-781fa548cb21",
        "parentId" : "ef32e665-4d54-436b-a0dc-78f526173a5f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> can we avoid overriding a builtin-in name?\r\n\r\nDo we care? In practice this is only used as `masked_reductions.sum(..)`, so there is no risk of confusing it (eg numpy also has a sum ..).",
        "createdAt" : "2020-03-26T16:11:12Z",
        "updatedAt" : "2020-03-26T16:17:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "aa04dbfb-7c67-48fe-bbee-1473d7960b61",
        "parentId" : "ef32e665-4d54-436b-a0dc-78f526173a5f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I also don't have a problem with renaming it to eg `masked_sum`, though (but all together it then becomes a bit long `masked_reductions.masked_sum(..)`)",
        "createdAt" : "2020-03-26T16:15:12Z",
        "updatedAt" : "2020-03-26T16:17:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "928d6cb7-3374-4dc1-9ced-8de8de21cde9",
        "parentId" : "ef32e665-4d54-436b-a0dc-78f526173a5f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "`nansum`?  Not a strong enough opinion to be a blocker.",
        "createdAt" : "2020-03-26T18:48:54Z",
        "updatedAt" : "2020-03-26T18:48:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7692b74f-2ee2-4b7e-9f8b-6e64d7f40ca8",
        "parentId" : "ef32e665-4d54-436b-a0dc-78f526173a5f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "There are no nan's involved here ;), that's exactly the difference with nanops",
        "createdAt" : "2020-03-26T18:56:09Z",
        "updatedAt" : "2020-03-26T18:56:09Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2bc5fffd-a370-436a-a373-d1df23cc2de1",
        "parentId" : "ef32e665-4d54-436b-a0dc-78f526173a5f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "ha, sounds good",
        "createdAt" : "2020-03-26T18:58:41Z",
        "updatedAt" : "2020-03-26T18:58:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a43e1058cdc12fc0a05e7a990a16e11f463e45d",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@\n\ndef sum(\n    values: np.ndarray, mask: np.ndarray, skipna: bool = True, min_count: int = 0,\n):"
  },
  {
    "id" : "1454772e-5366-44d8-b4de-b9dc34e9ad92",
    "prId" : 30982,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30982#pullrequestreview-382173294",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98cb2e8d-1bc0-4951-8f9c-36543cc100dc",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "required >=0?",
        "createdAt" : "2020-03-26T15:50:31Z",
        "updatedAt" : "2020-03-26T16:17:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7835f53e-460b-49fb-9656-0abac90856c2",
        "parentId" : "98cb2e8d-1bc0-4951-8f9c-36543cc100dc",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It's a count, so yes",
        "createdAt" : "2020-03-26T16:16:08Z",
        "updatedAt" : "2020-03-26T16:17:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a43e1058cdc12fc0a05e7a990a16e11f463e45d",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +27,31 @@    skipna : bool, default True\n        Whether to skip NA.\n    min_count : int, default 0\n        The required number of valid values to perform the operation. If fewer than\n        ``min_count`` non-NA values are present the result will be NA."
  },
  {
    "id" : "398a413b-17c4-47b2-b004-83c9d54b6f89",
    "prId" : 30982,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30982#pullrequestreview-383579263",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e186ab8e-8c03-4709-a45b-d8179742f728",
        "parentId" : null,
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "@jorisvandenbossche This seems like a useful pattern for other reductions like min and max (maybe a special case is needed if we have a `min_count`?), wondering if it might make sense to generalize this to those? Could be more performant than using `nanops`, and could also be done in a way that's extensible to string dtype (where `nanops` can't be used)",
        "createdAt" : "2020-03-29T21:10:42Z",
        "updatedAt" : "2020-03-29T21:10:42Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "9a0c22aa-f6a9-423d-8537-e5180b5f910b",
        "parentId" : "e186ab8e-8c03-4709-a45b-d8179742f728",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, that's indeed the goal of this PR (I just wanted to limit it to a single function for the initial PR). For min/max, I think it will be better to write a separate function in module since they don't use `min_count`, but `prod` should be able to reuse this. \r\nI was planning to do follow-up PRs the and of this week, but feel free to pick it up!",
        "createdAt" : "2020-03-30T07:07:43Z",
        "updatedAt" : "2020-03-30T07:07:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a43e1058cdc12fc0a05e7a990a16e11f463e45d",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +45,49 @@            return np.sum(values[~mask])\n        else:\n            return np.sum(values, where=~mask)"
  },
  {
    "id" : "a058d9c9-1f6a-4fd9-8378-624f4884f2d6",
    "prId" : 34814,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34814#pullrequestreview-488967986",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f3e31da-3641-4c41-ba3c-14e516224718",
        "parentId" : null,
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "We also need to worry about division by zero (a case of non-empty but all missing should also return NA). Maybe you could `if not values.size or mask.all()` above, then you have non-empty with at least one non-missing value below.",
        "createdAt" : "2020-09-15T18:36:45Z",
        "updatedAt" : "2020-12-28T13:40:45Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "5720cb27-acf2-426b-8b87-1da35d73491c",
        "parentId" : "4f3e31da-3641-4c41-ba3c-14e516224718",
        "authorId" : "26afdcf3-1fb0-414b-9e9c-b50a93808ae7",
        "body" : "I could add mask.all() then?",
        "createdAt" : "2020-09-15T18:46:40Z",
        "updatedAt" : "2020-12-28T13:40:46Z",
        "lastEditedBy" : "26afdcf3-1fb0-414b-9e9c-b50a93808ae7",
        "tags" : [
        ]
      },
      {
        "id" : "88efcb8a-ff6a-4a75-841a-a468433b4eb2",
        "parentId" : "4f3e31da-3641-4c41-ba3c-14e516224718",
        "authorId" : "26afdcf3-1fb0-414b-9e9c-b50a93808ae7",
        "body" : "yes exactly\r\n",
        "createdAt" : "2020-09-15T18:46:57Z",
        "updatedAt" : "2020-12-28T13:40:46Z",
        "lastEditedBy" : "26afdcf3-1fb0-414b-9e9c-b50a93808ae7",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8e80a1d243f248365a024614d346a20c18a975e",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +114,118 @@        return libmissing.NA\n    _sum = _sumprod(np.sum, values=values, mask=mask, skipna=skipna)\n    count = np.count_nonzero(~mask)\n    mean_value = _sum / count\n    return mean_value"
  },
  {
    "id" : "7b01b214-07a8-4ae8-ac54-467bd8c2da20",
    "prId" : 34814,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34814#pullrequestreview-551403106",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71b80bc1-9c1c-4c8c-a2d4-984538364fe9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you type the result Union[Scalar libmissing.NA], though maybe that's best done in another pass.",
        "createdAt" : "2020-10-31T18:03:28Z",
        "updatedAt" : "2020-12-28T13:40:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2d04eb08-4594-408f-907b-02c81fb95c0a",
        "parentId" : "71b80bc1-9c1c-4c8c-a2d4-984538364fe9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you do this",
        "createdAt" : "2020-12-14T14:06:07Z",
        "updatedAt" : "2020-12-28T13:40:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dc3e5b6a-8820-46bf-9af3-0de6e38d3633",
        "parentId" : "71b80bc1-9c1c-4c8c-a2d4-984538364fe9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we need to support min_count here (just pass it thru to _sumprod)",
        "createdAt" : "2020-12-14T14:06:47Z",
        "updatedAt" : "2020-12-28T13:40:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bfc47f79-b3bc-4abd-9946-8885b7982090",
        "parentId" : "71b80bc1-9c1c-4c8c-a2d4-984538364fe9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Let's leave the output types for another PR (none of the other functions here have output types, they all only are typed for the input)\r\n\r\n> we need to support min_count here (just pass it thru to _sumprod)\r\n\r\n`min_count` is not an argument for `mean` (check eg `Series.mean`, we only have the keyword for prod/sum)\r\n\r\n\r\n",
        "createdAt" : "2020-12-14T14:12:20Z",
        "updatedAt" : "2020-12-28T13:40:46Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8e80a1d243f248365a024614d346a20c18a975e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +110,114 @@\n\ndef mean(values: np.ndarray, mask: np.ndarray, skipna: bool = True):\n    if not values.size or mask.all():\n        return libmissing.NA"
  },
  {
    "id" : "07f93014-c2a8-41ef-bce0-bcff15f7571f",
    "prId" : 34814,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34814#pullrequestreview-553503826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "180c747a-c5aa-4b32-a1ef-2dfbb4209842",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "just `(~mask).sum()` no?",
        "createdAt" : "2020-12-14T14:07:39Z",
        "updatedAt" : "2020-12-28T13:40:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5cb1b6e2-d383-4b4e-8a73-4e19595d48dc",
        "parentId" : "180c747a-c5aa-4b32-a1ef-2dfbb4209842",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Just checked, and `np.count_nonzero` appears to be quite a bit faster (for some reason):\r\n\r\n```\r\nIn [10]: mask = pd.array([1, 2, 3, 4, pd.NA]*1_000_000)._mask\r\n\r\nIn [12]: %timeit np.count_nonzero(~mask)\r\n807 µs ± 54.2 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\r\n\r\nIn [13]: %timeit (~mask).sum()\r\n4.33 ms ± 152 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\r\n```\r\n",
        "createdAt" : "2020-12-16T09:32:52Z",
        "updatedAt" : "2020-12-28T13:40:46Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8e80a1d243f248365a024614d346a20c18a975e",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +114,118 @@        return libmissing.NA\n    _sum = _sumprod(np.sum, values=values, mask=mask, skipna=skipna)\n    count = np.count_nonzero(~mask)\n    mean_value = _sum / count\n    return mean_value"
  }
]