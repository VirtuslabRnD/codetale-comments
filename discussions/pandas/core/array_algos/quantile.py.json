[
  {
    "id" : "e826feb5-0bda-40f0-b9ce-39a2d7638b6d",
    "prId" : 39606,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39606#pullrequestreview-584566906",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cfb4ad1-d2d5-45e8-a46d-9c6a81b363eb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Could also call this `na_value` ? (like nanpercentile does) \r\n\r\n(I know we use both fill_value and na_value in many places, and somewhat interchangeably, but here I personally find na_value clearer)",
        "createdAt" : "2021-02-05T14:21:50Z",
        "updatedAt" : "2021-02-11T22:59:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ae397ca0-b37f-4a50-ab2e-9387f2971c76",
        "parentId" : "5cfb4ad1-d2d5-45e8-a46d-9c6a81b363eb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I thought about this and decided on fill_value on the theory that \"na_value\" means \"the value that, when we see it, indicates we have an NA\" and \"fill_value\" means \"the value that we use when we need to fill in an NA value\".\r\n\r\ne.g. we get here with fill_value=iNaT, which would be weird to have as an na_value",
        "createdAt" : "2021-02-05T17:46:24Z",
        "updatedAt" : "2021-02-11T22:59:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d09fc5e4e24e58214041b7fa81cd2d939bb1afd8",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +26,30 @@        mask = isna(values)\n        For ExtensionArray, this is computed before calling _value_for_factorize\n    fill_value : Scalar\n        The value to interpret fill NA entries with\n        For ExtensionArray, this is _values_for_factorize()[1]"
  },
  {
    "id" : "99118499-92ba-4c34-92de-3f88ce448075",
    "prId" : 40189,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40189#pullrequestreview-604726708",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b05873c-5d2d-4ef9-a4d0-3ffe1b9e1f06",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is all super gross. i guess moving it here and then going to clean in future?",
        "createdAt" : "2021-03-05T01:13:11Z",
        "updatedAt" : "2021-03-05T01:42:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cb5a8c26-1396-438d-9770-582cc0d9f926",
        "parentId" : "1b05873c-5d2d-4ef9-a4d0-3ffe1b9e1f06",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "depends on a few things: this can become somewhat less gross with 2D EAs (or 1D ndarrays in an ArrayManager world).  There's also the fact that values_for_factorize used here doesnt work for IntegerArray/FloatingArray.",
        "createdAt" : "2021-03-05T01:33:12Z",
        "updatedAt" : "2021-03-05T01:42:20Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d01d8278-b56f-47a7-9e8d-20d663234692",
        "parentId" : "1b05873c-5d2d-4ef9-a4d0-3ffe1b9e1f06",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can this be better if we expose a .quantile() on EAs?",
        "createdAt" : "2021-03-05T01:36:50Z",
        "updatedAt" : "2021-03-05T01:42:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c123f6c7-978b-4163-b4a2-271d0abf2f2c",
        "parentId" : "1b05873c-5d2d-4ef9-a4d0-3ffe1b9e1f06",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "that may eventually be the way to go.  will see if thats what it takes to get the IntegerArray/FloatingArray working again",
        "createdAt" : "2021-03-05T01:42:47Z",
        "updatedAt" : "2021-03-05T01:42:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d80803f3af783b93f7901eef9896839be7b616d",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +118,122 @@\ndef quantile_ea_compat(\n    values: ExtensionArray, qs, interpolation: str, axis: int\n) -> ExtensionArray:\n    \"\"\""
  },
  {
    "id" : "4d662595-420c-481a-96b6-cda7cfd6467a",
    "prId" : 40189,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40189#pullrequestreview-604795535",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cf8247f-2e38-410f-84ce-05b3c3b81326",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "would make sense to unify these signature (e.g. put mask / fill_value) as keywords (at the end) or pass to the ea_compat (and ignore them).\r\n\r\ni would also compute these *inside* quantile_with_mask (if these are not passed), then thi function becomes way simpler (this can be a followon)",
        "createdAt" : "2021-03-05T01:53:30Z",
        "updatedAt" : "2021-03-05T01:53:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a64048aa-72e9-4973-b842-9e1498f6918f",
        "parentId" : "1cf8247f-2e38-410f-84ce-05b3c3b81326",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "worth doing here?",
        "createdAt" : "2021-03-05T04:21:27Z",
        "updatedAt" : "2021-03-05T04:21:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2a2ac627-646c-44d5-adf3-2561c6d5d559",
        "parentId" : "1cf8247f-2e38-410f-84ce-05b3c3b81326",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "im gonna have to do at least one more pass anyway, so id rather get this in and revisit in the next one",
        "createdAt" : "2021-03-05T04:26:07Z",
        "updatedAt" : "2021-03-05T04:26:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d80803f3af783b93f7901eef9896839be7b616d",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +39,43 @@    \"\"\"\n    if isinstance(values, np.ndarray):\n        fill_value = na_value_for_dtype(values.dtype, compat=False)\n        mask = isna(values)\n        result = quantile_with_mask(values, mask, fill_value, qs, interpolation, axis)"
  }
]