[
  {
    "id" : "11218004-b9b8-4175-9353-d5471d822228",
    "prId" : 21541,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21541#pullrequestreview-129928888",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d735047c-2d0c-4e48-bb06-19174222802b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you comment on the purpose of the loop",
        "createdAt" : "2018-06-19T11:21:40Z",
        "updatedAt" : "2018-06-20T10:25:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "47a9400f-527c-41f9-b23d-ad3efea70441",
        "parentId" : "d735047c-2d0c-4e48-bb06-19174222802b",
        "authorId" : "0f77fbd0-b378-4782-9236-d5e75325b81b",
        "body" : "I would try, though I'm not the author of original code - I've just changed it from recursion to loop, so I can't be sure I understand 100% all the nuances here...",
        "createdAt" : "2018-06-19T11:36:32Z",
        "updatedAt" : "2018-06-20T10:25:13Z",
        "lastEditedBy" : "0f77fbd0-b378-4782-9236-d5e75325b81b",
        "tags" : [
        ]
      }
    ],
    "commit" : "eebb8cf57709b679660b9b48c4db6594279a8b87",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +64,68 @@    labels = list(labels)\n    shape = list(shape)\n\n    # Iteratively process all the labels in chunks sized so less\n    # than _INT64_MAX unique int ids will be required for each chunk"
  },
  {
    "id" : "43ace799-d8af-457f-ab82-fa9dcf3b005e",
    "prId" : 21541,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21541#pullrequestreview-129927172",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce5c84e8-2b5b-4428-9246-6573cc6c5060",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does out need a definition outside of the loop? e.g. is it *always* defined",
        "createdAt" : "2018-06-19T11:22:14Z",
        "updatedAt" : "2018-06-20T10:25:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1086ee06-af06-4dd2-a1b5-ba4f608e8290",
        "parentId" : "ce5c84e8-2b5b-4428-9246-6573cc6c5060",
        "authorId" : "0f77fbd0-b378-4782-9236-d5e75325b81b",
        "body" : "it is always defined here - out is assigned before the exit from the loop can happen.\r\nAnd if something (though I don't know what in this case) throw an Exception - we will bypass return alltogether",
        "createdAt" : "2018-06-19T11:30:23Z",
        "updatedAt" : "2018-06-20T10:25:13Z",
        "lastEditedBy" : "0f77fbd0-b378-4782-9236-d5e75325b81b",
        "tags" : [
        ]
      }
    ],
    "commit" : "eebb8cf57709b679660b9b48c4db6594279a8b87",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +98,102 @@        shape = [len(obs_ids)] + shape[nlev:]\n\n    return out\n\n"
  },
  {
    "id" : "b1a5cbbd-89cc-40ec-b8dc-900258351ff4",
    "prId" : 22640,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22640#pullrequestreview-153566462",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3d74a52-ea29-41d5-a914-63e417943a38",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we not have a .sort_values on Categorical that accepts na_position already?\r\n\r\nif we donâ€™t all of this code should live there anyhow",
        "createdAt" : "2018-09-08T21:55:18Z",
        "updatedAt" : "2018-10-17T23:08:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3d110f0d-a4f1-4b97-96cd-440b03395d3c",
        "parentId" : "e3d74a52-ea29-41d5-a914-63e417943a38",
        "authorId" : "5b382735-f2e9-48b7-986b-35115a020a26",
        "body" : "the way I see it, `df.sort_values` is not calling `sort_values` method from column objects, it's calling `nargsort`. Since `pd.Series` also doesn't have `nargsort`, I feel it may fit better in here rather than `Categorical.nargsort` ",
        "createdAt" : "2018-09-08T22:29:46Z",
        "updatedAt" : "2018-10-17T23:08:55Z",
        "lastEditedBy" : "5b382735-f2e9-48b7-986b-35115a020a26",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d4aedcef86aa232487fb3c6a1e685f2b3a2873e",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +247,251 @@        mask = isna(items)\n        cnt_null = mask.sum()\n        sorted_idx = items.argsort(ascending=ascending, kind=kind)\n        if ascending and na_position == 'last':\n            # NaN is coded as -1 and is listed in front after sorting"
  },
  {
    "id" : "63febf0a-8789-4b20-9933-22f6778381a1",
    "prId" : 22640,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22640#pullrequestreview-156336782",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a0e1f85-5de8-4a2f-aa76-f2fd2e1f8853",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "blank line here",
        "createdAt" : "2018-09-18T12:20:10Z",
        "updatedAt" : "2018-10-17T23:08:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d4aedcef86aa232487fb3c6a1e685f2b3a2873e",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +245,249 @@            raise ValueError('invalid na_position: {!r}'.format(na_position))\n\n        mask = isna(items)\n        cnt_null = mask.sum()\n        sorted_idx = items.argsort(ascending=ascending, kind=kind)"
  },
  {
    "id" : "ce504626-035a-43d1-b08a-119ccd4e469d",
    "prId" : 22640,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22640#pullrequestreview-160003278",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02f6f664-dd77-4c1e-843b-b9cc9daff151",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this duplicates some code in ``Categorical.sort_values`` is it not possible to refactor this to a function, and then call this from Categorical.sort_values (as this works with the raw indexer), while Categorical.sort_values reconstructs a Categorical?",
        "createdAt" : "2018-09-18T12:24:03Z",
        "updatedAt" : "2018-10-17T23:08:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "09e6d40f-6f83-4ecc-9e7f-90a0bc7fd7a8",
        "parentId" : "02f6f664-dd77-4c1e-843b-b9cc9daff151",
        "authorId" : "5b382735-f2e9-48b7-986b-35115a020a26",
        "body" : "great suggestion. updated.",
        "createdAt" : "2018-09-28T19:57:11Z",
        "updatedAt" : "2018-10-17T23:08:55Z",
        "lastEditedBy" : "5b382735-f2e9-48b7-986b-35115a020a26",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d4aedcef86aa232487fb3c6a1e685f2b3a2873e",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +249,253 @@        sorted_idx = items.argsort(ascending=ascending, kind=kind)\n        if ascending and na_position == 'last':\n            # NaN is coded as -1 and is listed in front after sorting\n            sorted_idx = np.roll(sorted_idx, -cnt_null)\n        elif not ascending and na_position == 'first':"
  },
  {
    "id" : "949d6ce7-7057-4871-bbac-ee5fdfd149df",
    "prId" : 25629,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25629#pullrequestreview-212810282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "673b4bd1-2345-4c1e-9ea5-b319ceeeac9b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why don't we call ``.to_numpy()`` here instead? (I think think *always* is an index), or is this a performance issue? (until we have real EA support)",
        "createdAt" : "2019-03-10T15:30:23Z",
        "updatedAt" : "2019-03-10T15:31:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c989f748-e527-409f-b529-0db24945cbf7",
        "parentId" : "673b4bd1-2345-4c1e-9ea5-b319ceeeac9b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I am not opposed to this as an interim solution, just want to understand",
        "createdAt" : "2019-03-10T15:31:57Z",
        "updatedAt" : "2019-03-10T15:31:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fd5ca633-3664-4797-8303-c930c172f12b",
        "parentId" : "673b4bd1-2345-4c1e-9ea5-b319ceeeac9b",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "As far as I understand, `to_numpy` has the future behaviour (i.e. converting to object dtype), while here we want to have the current M8[ns] ",
        "createdAt" : "2019-03-10T20:04:48Z",
        "updatedAt" : "2019-03-10T20:04:48Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "bf4181ff-2ca6-4dc5-9a61-e5693507ff3c",
        "parentId" : "673b4bd1-2345-4c1e-9ea5-b319ceeeac9b",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But of course, with `to_numpy(dtype='datetime64[ns]')`, you can get that.\r\n\r\nIn that case, we have to do a check here for datetimetz data; something like:\r\n\r\n```\r\nif is_datetimetz_dtype(items):\r\n    items = items.to_numpy(dtype='datetime64[ns]')\r\nelse:\r\n    items = np.asanyarray(items)\r\n```\r\n\r\nIt's also custom code for this case, but if the above is preferable, happy to change (personally don't have a strong favor for either of them). ",
        "createdAt" : "2019-03-10T20:07:53Z",
        "updatedAt" : "2019-03-10T20:07:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a53063a8-c78c-4246-90de-93f294c4d5d6",
        "parentId" : "673b4bd1-2345-4c1e-9ea5-b319ceeeac9b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah i think this needs to be sorted, but ok for now with your existing.",
        "createdAt" : "2019-03-10T21:13:06Z",
        "updatedAt" : "2019-03-10T21:13:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "76b64126-2a4f-4d33-b28d-fb5f0f089aee",
        "parentId" : "673b4bd1-2345-4c1e-9ea5-b319ceeeac9b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "however, shall we leave this or a follow-on open to fix this/",
        "createdAt" : "2019-03-10T21:13:41Z",
        "updatedAt" : "2019-03-10T21:13:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d085ebb4-8ad0-478f-8e1f-6facc0c3b288",
        "parentId" : "673b4bd1-2345-4c1e-9ea5-b319ceeeac9b",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would like to expand PR https://github.com/pandas-dev/pandas/pull/25595 to include a proper fix (for 0.25.0), involving a clean-up of EA.argsort, which will be the follow-up on this. \r\nAnd apparently, I already opened an issue about the argsort API problem a few months ago: https://github.com/pandas-dev/pandas/issues/21801 (will update that issue with the new information)",
        "createdAt" : "2019-03-11T09:39:22Z",
        "updatedAt" : "2019-03-11T09:39:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "23fde48d-ef87-4b20-b71c-22a769b300e0",
        "parentId" : "673b4bd1-2345-4c1e-9ea5-b319ceeeac9b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok cool.",
        "createdAt" : "2019-03-11T12:41:11Z",
        "updatedAt" : "2019-03-11T12:41:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd11341b1441150721e7e4823b32bbcb0fae4ef7",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +259,263 @@        # https://github.com/pandas-dev/pandas/issues/25439\n        # can be removed once ExtensionArrays are properly handled by nargsort\n        warnings.filterwarnings(\n            \"ignore\", category=FutureWarning,\n            message=\"Converting timezone-aware DatetimeArray to\")"
  },
  {
    "id" : "3bd011b6-903e-416d-a5d6-a46e63d075bf",
    "prId" : 25696,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25696#pullrequestreview-213643232",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a2bafe7-1374-4057-895b-f55fd8b64506",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "would rather just fix take_1d",
        "createdAt" : "2019-03-12T20:53:02Z",
        "updatedAt" : "2019-05-06T18:52:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "151aa6ae5d3584042f21b9a3438d8f2ce2453c13",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +503,507 @@        sorter = ensure_platform_int(t.lookup(ordered))\n\n    if na_sentinel == -1:\n        # take_1d is faster, but only works for na_sentinels of -1\n        order2 = sorter.argsort()"
  },
  {
    "id" : "7256880c-3fe9-495a-987d-b79c937a4c11",
    "prId" : 27237,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27237#pullrequestreview-324971224",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "daadc6cb-4ed5-4884-8ce3-1d0b210bbaef",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i would push the logic to nanargsort",
        "createdAt" : "2019-12-01T23:21:17Z",
        "updatedAt" : "2020-04-27T02:11:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d5ba530d4cffea873ba501cbda3a1d50ea172af",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +283,287 @@    key : Optional[Callable], default None\n    \"\"\"\n\n    if key is not None:\n        items = ensure_key_mapped(items, key)"
  },
  {
    "id" : "16a7c056-65d6-42b5-948f-9b64657d9e6b",
    "prId" : 27237,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27237#pullrequestreview-349495759",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46975242-a2a7-4c26-ad17-e72323619af5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we donâ€™t actually care about the types here right?\r\nmeaning if values is a Categoral\r\nthen result might be of might not be ",
        "createdAt" : "2020-01-28T03:24:54Z",
        "updatedAt" : "2020-04-27T02:11:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "37c05d40-a1d2-4203-baf7-b8c4bc6e755a",
        "parentId" : "46975242-a2a7-4c26-ad17-e72323619af5",
        "authorId" : "e3663fd4-6ec5-41f6-a788-8c61749efa01",
        "body" : "No. We could enforce types if we wanted, but it hasn't seemed necessary.",
        "createdAt" : "2020-01-28T03:40:37Z",
        "updatedAt" : "2020-04-27T02:11:38Z",
        "lastEditedBy" : "e3663fd4-6ec5-41f6-a788-8c61749efa01",
        "tags" : [
        ]
      },
      {
        "id" : "ba55838e-aedb-4588-a10e-2f64f2d93540",
        "parentId" : "46975242-a2a7-4c26-ad17-e72323619af5",
        "authorId" : "e3663fd4-6ec5-41f6-a788-8c61749efa01",
        "body" : "@TomAugspurger can you explain what the `TODO: should ensure_key_mapped convert to an array?` was referring to? `ensure_key_mapped` needs to return an Index so we can call methods like `sortlevel`. ",
        "createdAt" : "2020-01-28T03:43:44Z",
        "updatedAt" : "2020-04-27T02:11:38Z",
        "lastEditedBy" : "e3663fd4-6ec5-41f6-a788-8c61749efa01",
        "tags" : [
        ]
      },
      {
        "id" : "0a0c9842-823b-4053-813d-17e3c981c982",
        "parentId" : "46975242-a2a7-4c26-ad17-e72323619af5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "> No. We could enforce types if we wanted, but it hasn't seemed necessary.\r\n\r\nif we are not enforcing types (ok by me); then update the doc string (eg a Categorical is not required only a same length array-like)",
        "createdAt" : "2020-01-28T09:55:45Z",
        "updatedAt" : "2020-04-27T02:11:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2694e0f9-0b2a-4f23-9f49-f95b61153ee0",
        "parentId" : "46975242-a2a7-4c26-ad17-e72323619af5",
        "authorId" : "e3663fd4-6ec5-41f6-a788-8c61749efa01",
        "body" : "Ok. The only problem is that it can violate the return type â€“ we don't type annotate it, but the documentation specifies that it returns a `Categorical` or None. But I updated the documentation.",
        "createdAt" : "2020-01-28T16:02:03Z",
        "updatedAt" : "2020-04-27T02:11:38Z",
        "lastEditedBy" : "e3663fd4-6ec5-41f6-a788-8c61749efa01",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d5ba530d4cffea873ba501cbda3a1d50ea172af",
    "line" : 187,
    "diffHunk" : "@@ -1,1 +392,396 @@\n    result = key(values.copy())\n    if len(result) != len(values):\n        raise ValueError(\n            \"User-provided `key` function must not change the shape of the array.\""
  },
  {
    "id" : "6d4d8560-1de0-4af6-ae07-b26a46b3b825",
    "prId" : 27237,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27237#pullrequestreview-391732834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2561180b-576e-4bd6-9ac5-d80c201751c3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would move MultiIndex.apply_key here and make it a function that takes a MI and simply call this from ensure_key_mapper.",
        "createdAt" : "2020-04-10T17:20:41Z",
        "updatedAt" : "2020-04-27T02:11:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9c2475e2-e6d2-45aa-b7cb-42a94c54ae1b",
        "parentId" : "2561180b-576e-4bd6-9ac5-d80c201751c3",
        "authorId" : "e3663fd4-6ec5-41f6-a788-8c61749efa01",
        "body" : "My reasoning for keeping this outside of `ensure_key_mapped` is simply that we want `ensure_key_mapped` to be a generic function that takes any object and tries to apply a key function to it. My feeling for the API is that calling functions should be responsible for handling any kind of preprocessing they want to do, instead of cluttering it with `isinstance` checks. I also though the `MultiIndex.apply_key` was a useful function, sort of like map that allows you to transform a `MultiIndex`. If you think this is best, I'm happy to do it though.",
        "createdAt" : "2020-04-10T21:19:36Z",
        "updatedAt" : "2020-04-27T02:11:38Z",
        "lastEditedBy" : "e3663fd4-6ec5-41f6-a788-8c61749efa01",
        "tags" : [
        ]
      },
      {
        "id" : "2e1aabeb-9da9-4abf-97a1-2dcb91e18cc7",
        "parentId" : "2561180b-576e-4bd6-9ac5-d80c201751c3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I don think its a generally useful function and is very specific to this case. we want to move all unecessary logic out of the sorting functions.",
        "createdAt" : "2020-04-10T22:23:26Z",
        "updatedAt" : "2020-04-27T02:11:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7c01d490-2772-40d9-9bff-5ca55aa7afa4",
        "parentId" : "2561180b-576e-4bd6-9ac5-d80c201751c3",
        "authorId" : "e3663fd4-6ec5-41f6-a788-8c61749efa01",
        "body" : "Ok I moved it to `sorting.py` and added a ton of documentation. And dealt with some crazy linting issues.",
        "createdAt" : "2020-04-11T03:47:04Z",
        "updatedAt" : "2020-04-27T02:11:38Z",
        "lastEditedBy" : "e3663fd4-6ec5-41f6-a788-8c61749efa01",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d5ba530d4cffea873ba501cbda3a1d50ea172af",
    "line" : 209,
    "diffHunk" : "@@ -1,1 +414,418 @@\n    return result\n\n\nclass _KeyMapper:"
  }
]