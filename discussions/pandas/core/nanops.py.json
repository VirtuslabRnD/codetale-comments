[
  {
    "id" : "c17f2f5d-599d-4793-8e9b-4121c65498a0",
    "prId" : 4985,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01935108-1e9c-4cb7-8e34-ce5e16818fa5",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "is the `float` value here somehow guaranteed to not have a fractional part? seems strange to just smash it to `int`\n",
        "createdAt" : "2013-09-25T19:17:54Z",
        "updatedAt" : "2013-09-25T19:44:52Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "ac20231c-3d3f-46ab-86b1-cbfcf3a30fcd",
        "parentId" : "01935108-1e9c-4cb7-8e34-ce5e16818fa5",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "ah just read your comment in the issue thread\n",
        "createdAt" : "2013-09-25T19:19:05Z",
        "updatedAt" : "2013-09-25T19:44:52Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "18ff5636-188e-4714-9e61-8397e8c686c2",
        "parentId" : "01935108-1e9c-4cb7-8e34-ce5e16818fa5",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "we'll have to revisit this in the future if a finer timescale is desired\n",
        "createdAt" : "2013-09-25T19:20:29Z",
        "updatedAt" : "2013-09-25T19:44:52Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "8cc9f58c-4d25-4a95-b840-b6ec6a78c39d",
        "parentId" : "01935108-1e9c-4cb7-8e34-ce5e16818fa5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "at worse it kills a fractional ns...and that is below our precision anyhow\n",
        "createdAt" : "2013-09-25T19:25:06Z",
        "updatedAt" : "2013-09-25T19:44:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f80836ea-36f3-4a58-9285-b9fab610432a",
        "parentId" : "01935108-1e9c-4cb7-8e34-ce5e16818fa5",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "yep\n",
        "createdAt" : "2013-09-25T19:27:55Z",
        "updatedAt" : "2013-09-25T19:44:52Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "31a774206a2408f932447bf3190bfe642273d440",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +192,196 @@            # coerce float to results\n            if is_float(result):\n                result = int(result)\n            result = Series([result],dtype='timedelta64[ns]')\n        else:"
  },
  {
    "id" : "0c0dba14-fd07-425a-90df-421e65e81b1f",
    "prId" : 7461,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00c8b97b-5ab2-4396-a2a9-db0ef4df57e4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "u can use com.is_integer_dtype here (if u can replace anything else with the com.is_ functions would be gr8)\n",
        "createdAt" : "2014-06-14T14:29:08Z",
        "updatedAt" : "2014-06-14T14:31:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "089c9a67-fc35-4d18-8463-0f3effb17f0f",
        "parentId" : "00c8b97b-5ab2-4396-a2a9-db0ef4df57e4",
        "authorId" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "body" : "I can do a separate code cleanup in another pull request, but for triaging purposes I think it would be best to restrict this pull request to only stylistic (non-functional) changes.  Ideally changes like you suggested should not have an affect, but they still alter the code paths to some degree so I think they should be kept separate.\n",
        "createdAt" : "2014-06-15T06:20:14Z",
        "updatedAt" : "2014-06-15T06:20:34Z",
        "lastEditedBy" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "tags" : [
        ]
      }
    ],
    "commit" : "95f0095a1f89fef8ac126947ba481e92d14cede2",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +178,182 @@    dtype_max = dtype\n    if dtype.kind == 'i' and not issubclass(dtype.type, (np.bool,\n                                                         np.datetime64,\n                                                         np.timedelta64)):\n        dtype_max = np.int64"
  },
  {
    "id" : "11027553-575e-4771-9b8d-9f53208f345c",
    "prId" : 11245,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "842dc096-43e7-4870-885a-efe8d2f50bd4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if we started with `M8/m8` and then do a `.view('i8')` this needs to be compared to `pd.lib.iNaT`, not sure why you are not hitting this here\n",
        "createdAt" : "2015-10-07T18:52:03Z",
        "updatedAt" : "2015-10-11T00:35:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c6ea1c95-6c48-4571-b7ff-b6d3d1f23596",
        "parentId" : "842dc096-43e7-4870-885a-efe8d2f50bd4",
        "authorId" : "748717f9-0c44-48ab-a877-9c48eac224ca",
        "body" : "so this should be `elif not (result is tslib.NaT or result is tslib.iNaT)`?\n",
        "createdAt" : "2015-10-07T19:09:20Z",
        "updatedAt" : "2015-10-11T00:35:54Z",
        "lastEditedBy" : "748717f9-0c44-48ab-a877-9c48eac224ca",
        "tags" : [
        ]
      },
      {
        "id" : "e6aab1c2-9e1e-49ec-bc0e-b139e572950f",
        "parentId" : "842dc096-43e7-4870-885a-efe8d2f50bd4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "== tslib.iNaT\n\nbut puzzled why a NaT is there\nas I don't think it's wrapped yet\n",
        "createdAt" : "2015-10-07T19:46:04Z",
        "updatedAt" : "2015-10-11T00:35:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "08920dee-00a9-4145-a174-57bea80083c6",
        "parentId" : "842dc096-43e7-4870-885a-efe8d2f50bd4",
        "authorId" : "748717f9-0c44-48ab-a877-9c48eac224ca",
        "body" : "If you take a ts and take a view as an int and then reduce, I think you still want `nan`. The only reason that you would want a `NaT` is that the dtype of the sequence being reduced is `datetime64`.\n",
        "createdAt" : "2015-10-07T19:46:33Z",
        "updatedAt" : "2015-10-11T00:35:54Z",
        "lastEditedBy" : "748717f9-0c44-48ab-a877-9c48eac224ca",
        "tags" : [
        ]
      },
      {
        "id" : "6a465723-4b2a-4007-b030-54be705f2d66",
        "parentId" : "842dc096-43e7-4870-885a-efe8d2f50bd4",
        "authorId" : "748717f9-0c44-48ab-a877-9c48eac224ca",
        "body" : "Oh, I see what you are saying, you were suggesting:\n\n``` python\nelif result.view('i8') == tslib.iNaT\n```\n\nIt looks like result is still just a timestamp at this point so it will be the `NaT` object. I don't know if this is a guarantee or not.\n",
        "createdAt" : "2015-10-07T19:51:47Z",
        "updatedAt" : "2015-10-11T00:35:54Z",
        "lastEditedBy" : "748717f9-0c44-48ab-a877-9c48eac224ca",
        "tags" : [
        ]
      },
      {
        "id" : "34e5afb8-8ddb-4024-98ab-fc46714bbd41",
        "parentId" : "842dc096-43e7-4870-885a-efe8d2f50bd4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no I mean result should already be an int if it's M8 as wrapping is the last step\n",
        "createdAt" : "2015-10-07T19:53:31Z",
        "updatedAt" : "2015-10-11T00:35:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "31ba1a70-1319-461f-94b0-1d4fc802fd5e",
        "parentId" : "842dc096-43e7-4870-885a-efe8d2f50bd4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok then \n",
        "createdAt" : "2015-10-07T19:59:35Z",
        "updatedAt" : "2015-10-11T00:35:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "40c8fcf86a3fa94c1a13e6e1709b6b3fbc40c52c",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +607,611 @@                result = result.astype('f8')\n            result[null_mask] = np.nan\n    elif result is not tslib.NaT:\n        null_mask = mask.size - mask.sum()\n        if null_mask == 0:"
  },
  {
    "id" : "33cf3ce6-72f0-41da-9c8e-fd06838b119b",
    "prId" : 11245,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b2a0339-21b8-4573-851f-6ef842f26670",
        "parentId" : null,
        "authorId" : "748717f9-0c44-48ab-a877-9c48eac224ca",
        "body" : "We have already wrapped the types by the time we call maybe_null_out. The result will already be coerced so I think the `is` check is safe.\n",
        "createdAt" : "2015-10-07T19:57:51Z",
        "updatedAt" : "2015-10-11T00:35:54Z",
        "lastEditedBy" : "748717f9-0c44-48ab-a877-9c48eac224ca",
        "tags" : [
        ]
      },
      {
        "id" : "70ddbed7-cb9d-4600-b5d8-fea20e45489d",
        "parentId" : "3b2a0339-21b8-4573-851f-6ef842f26670",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, then your check is good. thxs\n",
        "createdAt" : "2015-10-07T20:43:06Z",
        "updatedAt" : "2015-10-11T00:35:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "40c8fcf86a3fa94c1a13e6e1709b6b3fbc40c52c",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +446,450 @@\n        result = _wrap_results(result, dtype)\n        return _maybe_null_out(result, axis, mask)\n\n    reduction.__name__ = 'nan' + meth"
  },
  {
    "id" : "aab6fe11-24d9-409a-8b65-c7e9a745dd13",
    "prId" : 16157,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16157#pullrequestreview-35080230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd68eca7-5341-43b7-861a-38945ff577fb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Should we warn here if ``v`` is False and bottleneck is not installed ?",
        "createdAt" : "2017-04-27T11:43:58Z",
        "updatedAt" : "2017-04-27T13:02:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5af81715b04bad8a95b85bb4e7749f397d89b9",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +34,38 @@    global _USE_BOTTLENECK\n    if _BOTTLENECK_INSTALLED:\n        _USE_BOTTLENECK = v\n\n"
  },
  {
    "id" : "222124ea-0d7a-4752-9c7e-7ceda5c9a40a",
    "prId" : 18876,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18876#pullrequestreview-85682750",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cf27bfd-abae-4103-ad47-f182c5df0579",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you just substract here something if `null_mask` is later on used for indexing into `result` ?",
        "createdAt" : "2017-12-22T15:01:23Z",
        "updatedAt" : "2017-12-28T12:36:26Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f018062f-55e8-4b94-8366-bb2cb7dd64db",
        "parentId" : "8cf27bfd-abae-4103-ad47-f182c5df0579",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'm not sure what you mean here. `null_mask` will be a boolean array of which values in the output should be null because they have too few valid values.",
        "createdAt" : "2017-12-27T14:45:00Z",
        "updatedAt" : "2017-12-28T12:36:26Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e954f84d5e5b2eae643472031c7890da3d98814",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +690,694 @@def _maybe_null_out(result, axis, mask, min_count=1):\n    if axis is not None and getattr(result, 'ndim', False):\n        null_mask = (mask.shape[axis] - mask.sum(axis) - min_count) < 0\n        if np.any(null_mask):\n            if is_numeric_dtype(result):"
  },
  {
    "id" : "eecb4ffa-42dd-46f7-92e7-a38a118e27de",
    "prId" : 18921,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18921#pullrequestreview-85876251",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5690d7cf-b8d6-44ea-9055-509136b40d69",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a TODO here (and maybe create an issue for this)? (can change later)",
        "createdAt" : "2017-12-28T19:00:11Z",
        "updatedAt" : "2017-12-29T12:24:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d139a48f-f3f0-4969-b8b9-65f5e9e6f7d1",
        "parentId" : "5690d7cf-b8d6-44ea-9055-509136b40d69",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "You mean for having all the `nan*` methods just correctly handle empty inputs?",
        "createdAt" : "2017-12-28T19:34:56Z",
        "updatedAt" : "2017-12-29T12:24:42Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "db64ba05-59d0-4d75-8b5c-e2913c077ec2",
        "parentId" : "5690d7cf-b8d6-44ea-9055-509136b40d69",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes, for your 1, 2, 3 options. we don't need to change this now, can be done in 0.23",
        "createdAt" : "2017-12-28T20:01:31Z",
        "updatedAt" : "2017-12-29T12:24:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a97e133bbe3e8bbc74fa8ecbc6331c4c7bfc4b77",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +109,113 @@            try:\n                if values.size == 0 and kwds.get('min_count') is None:\n                    # We are empty, returning NA for our type\n                    # Only applies for the default `min_count` of None\n                    # since that affects how empty arrays are handled."
  },
  {
    "id" : "4f423041-74c0-4d21-a04a-3eb84451da68",
    "prId" : 22684,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22684#pullrequestreview-157219410",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bf5d5e9-5c3a-4b1f-9dcb-21b5b158c22c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "elif",
        "createdAt" : "2018-09-18T14:29:24Z",
        "updatedAt" : "2018-09-26T02:23:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f869c72f-c951-46d1-bb65-14aed58ea3c9",
        "parentId" : "7bf5d5e9-5c3a-4b1f-9dcb-21b5b158c22c",
        "authorId" : "2168b726-a3a4-4844-9740-7c45b2d39bea",
        "body" : "done",
        "createdAt" : "2018-09-20T11:14:02Z",
        "updatedAt" : "2018-09-26T02:23:27Z",
        "lastEditedBy" : "2168b726-a3a4-4844-9740-7c45b2d39bea",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbfd95fb18bb6b0322c7130a59f5272ad2eef43a",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +765,769 @@\ndef get_corr_func(method):\n    if method in ['kendall', 'spearman']:\n        from scipy.stats import kendalltau, spearmanr\n    elif callable(method):"
  },
  {
    "id" : "8376090e-8f49-4d1f-b467-57bba286da73",
    "prId" : 22865,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22865#pullrequestreview-159820083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0f7844f-c5a5-4bbd-af9e-96afbea7079e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can add a Returns to these as well (will be same dtype as input)",
        "createdAt" : "2018-09-28T11:27:57Z",
        "updatedAt" : "2018-10-02T21:33:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "dacdbec03c57d531d11bd1524610e313ab49b2fd",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +402,406 @@    -------\n    result : dtype\n\n    Examples\n    --------"
  },
  {
    "id" : "cf66405f-4d25-49ff-92e1-8f84e37de412",
    "prId" : 23289,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23289#pullrequestreview-168637859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c5a2b7c-3669-49dd-9801-c7044e4ee348",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is it assumed that `fill_value` is not NA? If not, this will be wrong, since `fill_value` will never equal `fill_value`.\r\n\r\nShould we assert that it's not NA?",
        "createdAt" : "2018-10-25T20:25:22Z",
        "updatedAt" : "2018-10-26T21:59:55Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "6993a768-b793-49e1-8607-23dded2f9579",
        "parentId" : "9c5a2b7c-3669-49dd-9801-c7044e4ee348",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so this can't be for an i8 type by definition. but yes we can assert it.",
        "createdAt" : "2018-10-26T00:37:49Z",
        "updatedAt" : "2018-10-26T21:59:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a70b90382954f2ae032d80d29325cf018174d911",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +273,277 @@        if not isinstance(result, np.ndarray):\n            assert not isna(fill_value), \"Expected non-null fill_value\"\n            if result == fill_value:\n                result = np.nan\n            result = tslibs.Timestamp(result)"
  },
  {
    "id" : "4e31e35b-60be-461b-8df4-c9019ea3f0f8",
    "prId" : 24293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24293#pullrequestreview-185365283",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1c32ae6-9bfc-4413-bccb-3f94b32abaf6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use needs_i8_conversion",
        "createdAt" : "2018-12-15T19:14:02Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3bfd072b-bd28-4460-a179-34df8df89a45",
        "parentId" : "e1c32ae6-9bfc-4413-bccb-3f94b32abaf6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "that includes PeriodDType, which isn't implemented yet (again, #23890 gets these all-at-once by implementing reductions directly on the arrays)",
        "createdAt" : "2018-12-15T19:54:08Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4028a14ef585dae19805f05db74ad1495e09e8",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +466,470 @@    dtype_sum = dtype_max\n    dtype_count = np.float64\n    if (is_integer_dtype(dtype) or is_timedelta64_dtype(dtype) or\n            is_datetime64_dtype(dtype) or is_datetime64tz_dtype(dtype)):\n        dtype_sum = np.float64"
  },
  {
    "id" : "3868b2ad-3d68-4eb3-919c-5f24361180ff",
    "prId" : 24597,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24597#pullrequestreview-189156635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36a79b66-0bee-4664-925f-a57f191d6d4a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add doc-strings",
        "createdAt" : "2019-01-03T19:33:30Z",
        "updatedAt" : "2019-01-03T22:03:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f6ac34aa-6055-48f6-9c95-0a6a76f109f4",
        "parentId" : "36a79b66-0bee-4664-925f-a57f191d6d4a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "just pushed with docstrings.  We're going to simplify the tar out of these methods if/when #24600 gets fixed.",
        "createdAt" : "2019-01-03T19:47:01Z",
        "updatedAt" : "2019-01-03T22:03:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "11af1ddd1f204208cc6f0290a6329647cec92e92",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1216,1220 @@    quantiles : scalar or array\n    \"\"\"\n    # mask is Union[ExtensionArray, ndarray]\n    values = values[~mask]\n"
  },
  {
    "id" : "5864044a-1774-44f6-b1c2-84c19f8309e5",
    "prId" : 25070,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25070#pullrequestreview-231518279",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57789a20-12cf-48b7-9473-6c855c028b87",
        "parentId" : null,
        "authorId" : "d27357e5-3013-4027-a032-3a633c4de0f3",
        "body" : "`mypy` analysis needed an extra hint for the following line. It deduced that `mask2: Union[bool, np.ndarray]` and throws an error as `bool` does not have an `any()` function.",
        "createdAt" : "2019-04-29T05:27:07Z",
        "updatedAt" : "2019-04-29T05:29:13Z",
        "lastEditedBy" : "d27357e5-3013-4027-a032-3a633c4de0f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "0387154dc811843c9141fd9aabf8fedbfd0c6a95",
    "line" : 253,
    "diffHunk" : "@@ -1,1 +665,669 @@            d = np.nan\n    else:\n        mask2 = count <= ddof  # type: np.ndarray\n        if mask2.any():\n            np.putmask(d, mask2, np.nan)"
  },
  {
    "id" : "60a84c29-f0ca-439c-872f-ca1ec8c16a2d",
    "prId" : 27411,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27411#pullrequestreview-265060510",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d5fbf09-5d82-4804-b19b-b0393e930f0a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why are you not letting this then fall thru, e.g. if there is masking here?",
        "createdAt" : "2019-07-16T19:46:58Z",
        "updatedAt" : "2019-07-16T19:47:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "99cde0f1-0f12-4bb1-96ff-4d51e5d2378a",
        "parentId" : "7d5fbf09-5d82-4804-b19b-b0393e930f0a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "If we just return `result` here, at this point it is in general float64.  In the calling function we're going to do a `result.view(values.dtype)`, which will be incorrect",
        "createdAt" : "2019-07-16T20:47:49Z",
        "updatedAt" : "2019-07-16T20:47:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "aa302533-8897-4e99-9cdc-f64b3d031d71",
        "parentId" : "7d5fbf09-5d82-4804-b19b-b0393e930f0a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right my point is to do this *later* in the function after masking and checking for 0-len.",
        "createdAt" : "2019-07-20T19:56:58Z",
        "updatedAt" : "2019-07-20T19:57:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f2693903-5d2c-45f6-b1b4-4e3b0e397dd4",
        "parentId" : "7d5fbf09-5d82-4804-b19b-b0393e930f0a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "just tried that, breaks because it ends up double-masking",
        "createdAt" : "2019-07-20T23:40:30Z",
        "updatedAt" : "2019-07-20T23:40:31Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "34d1693b-a268-4ffc-b690-8d69d84e0569",
        "parentId" : "7d5fbf09-5d82-4804-b19b-b0393e930f0a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i wouldnt hang up on this too much, since we're going to have to move this to earlier in the call stack in #27428",
        "createdAt" : "2019-07-21T01:14:34Z",
        "updatedAt" : "2019-07-21T01:14:34Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ce5bd0f4-382e-4564-b8ab-352978be50e2",
        "parentId" : "7d5fbf09-5d82-4804-b19b-b0393e930f0a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, if  you can clean this up later would be great.",
        "createdAt" : "2019-07-22T21:13:33Z",
        "updatedAt" : "2019-07-22T21:13:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1043a205d197739500d6c75a9dbc40abf713837e",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1369,1373 @@        # Note: we have to do do `astype` and not view because in general we\n        #  have float result at this point, not i8\n        return result.astype(values.dtype)\n\n    values = values[~mask]"
  },
  {
    "id" : "70858b86-14a4-4d76-879e-319354610077",
    "prId" : 28289,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28289#pullrequestreview-285090501",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dea7f421-11f4-4ea2-9db9-364a463aa4bb",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is this fixing `std` behavior in some way? If so do we need a test for this?",
        "createdAt" : "2019-09-06T15:42:04Z",
        "updatedAt" : "2019-10-26T00:10:48Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "385e1239-16dc-4ea5-8086-1582d0f7c7d7",
        "parentId" : "dea7f421-11f4-4ea2-9db9-364a463aa4bb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "No, this is a workaround because we have to pass i8 values to nanvar in this case",
        "createdAt" : "2019-09-06T16:29:25Z",
        "updatedAt" : "2019-10-26T00:10:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ce875c6b-086c-4ce7-9bc6-841598a2f2f9",
        "parentId" : "dea7f421-11f4-4ea2-9db9-364a463aa4bb",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm I think I got it - so previously this would get a junk return value for time delta from the nan call and now we are sending it a mask right? If so is there a reason to even have that call in the first place?",
        "createdAt" : "2019-09-06T17:30:56Z",
        "updatedAt" : "2019-10-26T00:10:48Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "83e4e28b-5ebc-4999-adad-7f9df760db9a",
        "parentId" : "dea7f421-11f4-4ea2-9db9-364a463aa4bb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> and now we are sending it a mask right\r\n\r\nRight.  And this is made necessary because we are passing the values as i8 instead of m8[ns].\r\n\r\n> If so is there a reason to even have that call in the first place?\r\n\r\nNot sure I understand the question.",
        "createdAt" : "2019-09-06T17:40:57Z",
        "updatedAt" : "2019-10-26T00:10:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "50f137c3-8d28-4242-9878-16e74cb13191",
        "parentId" : "dea7f421-11f4-4ea2-9db9-364a463aa4bb",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "You can ignore - I was misreading `i8` as an 8 bit integer hence my confusion",
        "createdAt" : "2019-09-06T20:44:20Z",
        "updatedAt" : "2019-10-26T00:10:48Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6c6b87a32587a44344dbd46695b0eed6cc50b01",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +705,709 @@    1.0\n    \"\"\"\n    orig_dtype = values.dtype\n    values, mask, dtype, dtype_max, fill_value = _get_values(values, skipna, mask=mask)\n"
  }
]