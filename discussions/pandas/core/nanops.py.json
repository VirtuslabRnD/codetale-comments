[
  {
    "id" : "c17f2f5d-599d-4793-8e9b-4121c65498a0",
    "prId" : 4985,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01935108-1e9c-4cb7-8e34-ce5e16818fa5",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "is the `float` value here somehow guaranteed to not have a fractional part? seems strange to just smash it to `int`\n",
        "createdAt" : "2013-09-25T19:17:54Z",
        "updatedAt" : "2013-09-25T19:44:52Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "ac20231c-3d3f-46ab-86b1-cbfcf3a30fcd",
        "parentId" : "01935108-1e9c-4cb7-8e34-ce5e16818fa5",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "ah just read your comment in the issue thread\n",
        "createdAt" : "2013-09-25T19:19:05Z",
        "updatedAt" : "2013-09-25T19:44:52Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "18ff5636-188e-4714-9e61-8397e8c686c2",
        "parentId" : "01935108-1e9c-4cb7-8e34-ce5e16818fa5",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "we'll have to revisit this in the future if a finer timescale is desired\n",
        "createdAt" : "2013-09-25T19:20:29Z",
        "updatedAt" : "2013-09-25T19:44:52Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "8cc9f58c-4d25-4a95-b840-b6ec6a78c39d",
        "parentId" : "01935108-1e9c-4cb7-8e34-ce5e16818fa5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "at worse it kills a fractional ns...and that is below our precision anyhow\n",
        "createdAt" : "2013-09-25T19:25:06Z",
        "updatedAt" : "2013-09-25T19:44:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f80836ea-36f3-4a58-9285-b9fab610432a",
        "parentId" : "01935108-1e9c-4cb7-8e34-ce5e16818fa5",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "yep\n",
        "createdAt" : "2013-09-25T19:27:55Z",
        "updatedAt" : "2013-09-25T19:44:52Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "31a774206a2408f932447bf3190bfe642273d440",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +192,196 @@            # coerce float to results\n            if is_float(result):\n                result = int(result)\n            result = Series([result],dtype='timedelta64[ns]')\n        else:"
  },
  {
    "id" : "0c0dba14-fd07-425a-90df-421e65e81b1f",
    "prId" : 7461,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00c8b97b-5ab2-4396-a2a9-db0ef4df57e4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "u can use com.is_integer_dtype here (if u can replace anything else with the com.is_ functions would be gr8)\n",
        "createdAt" : "2014-06-14T14:29:08Z",
        "updatedAt" : "2014-06-14T14:31:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "089c9a67-fc35-4d18-8463-0f3effb17f0f",
        "parentId" : "00c8b97b-5ab2-4396-a2a9-db0ef4df57e4",
        "authorId" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "body" : "I can do a separate code cleanup in another pull request, but for triaging purposes I think it would be best to restrict this pull request to only stylistic (non-functional) changes.  Ideally changes like you suggested should not have an affect, but they still alter the code paths to some degree so I think they should be kept separate.\n",
        "createdAt" : "2014-06-15T06:20:14Z",
        "updatedAt" : "2014-06-15T06:20:34Z",
        "lastEditedBy" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "tags" : [
        ]
      }
    ],
    "commit" : "95f0095a1f89fef8ac126947ba481e92d14cede2",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +178,182 @@    dtype_max = dtype\n    if dtype.kind == 'i' and not issubclass(dtype.type, (np.bool,\n                                                         np.datetime64,\n                                                         np.timedelta64)):\n        dtype_max = np.int64"
  },
  {
    "id" : "11027553-575e-4771-9b8d-9f53208f345c",
    "prId" : 11245,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "842dc096-43e7-4870-885a-efe8d2f50bd4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if we started with `M8/m8` and then do a `.view('i8')` this needs to be compared to `pd.lib.iNaT`, not sure why you are not hitting this here\n",
        "createdAt" : "2015-10-07T18:52:03Z",
        "updatedAt" : "2015-10-11T00:35:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c6ea1c95-6c48-4571-b7ff-b6d3d1f23596",
        "parentId" : "842dc096-43e7-4870-885a-efe8d2f50bd4",
        "authorId" : "748717f9-0c44-48ab-a877-9c48eac224ca",
        "body" : "so this should be `elif not (result is tslib.NaT or result is tslib.iNaT)`?\n",
        "createdAt" : "2015-10-07T19:09:20Z",
        "updatedAt" : "2015-10-11T00:35:54Z",
        "lastEditedBy" : "748717f9-0c44-48ab-a877-9c48eac224ca",
        "tags" : [
        ]
      },
      {
        "id" : "e6aab1c2-9e1e-49ec-bc0e-b139e572950f",
        "parentId" : "842dc096-43e7-4870-885a-efe8d2f50bd4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "== tslib.iNaT\n\nbut puzzled why a NaT is there\nas I don't think it's wrapped yet\n",
        "createdAt" : "2015-10-07T19:46:04Z",
        "updatedAt" : "2015-10-11T00:35:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "08920dee-00a9-4145-a174-57bea80083c6",
        "parentId" : "842dc096-43e7-4870-885a-efe8d2f50bd4",
        "authorId" : "748717f9-0c44-48ab-a877-9c48eac224ca",
        "body" : "If you take a ts and take a view as an int and then reduce, I think you still want `nan`. The only reason that you would want a `NaT` is that the dtype of the sequence being reduced is `datetime64`.\n",
        "createdAt" : "2015-10-07T19:46:33Z",
        "updatedAt" : "2015-10-11T00:35:54Z",
        "lastEditedBy" : "748717f9-0c44-48ab-a877-9c48eac224ca",
        "tags" : [
        ]
      },
      {
        "id" : "6a465723-4b2a-4007-b030-54be705f2d66",
        "parentId" : "842dc096-43e7-4870-885a-efe8d2f50bd4",
        "authorId" : "748717f9-0c44-48ab-a877-9c48eac224ca",
        "body" : "Oh, I see what you are saying, you were suggesting:\n\n``` python\nelif result.view('i8') == tslib.iNaT\n```\n\nIt looks like result is still just a timestamp at this point so it will be the `NaT` object. I don't know if this is a guarantee or not.\n",
        "createdAt" : "2015-10-07T19:51:47Z",
        "updatedAt" : "2015-10-11T00:35:54Z",
        "lastEditedBy" : "748717f9-0c44-48ab-a877-9c48eac224ca",
        "tags" : [
        ]
      },
      {
        "id" : "34e5afb8-8ddb-4024-98ab-fc46714bbd41",
        "parentId" : "842dc096-43e7-4870-885a-efe8d2f50bd4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no I mean result should already be an int if it's M8 as wrapping is the last step\n",
        "createdAt" : "2015-10-07T19:53:31Z",
        "updatedAt" : "2015-10-11T00:35:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "31ba1a70-1319-461f-94b0-1d4fc802fd5e",
        "parentId" : "842dc096-43e7-4870-885a-efe8d2f50bd4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok then \n",
        "createdAt" : "2015-10-07T19:59:35Z",
        "updatedAt" : "2015-10-11T00:35:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "40c8fcf86a3fa94c1a13e6e1709b6b3fbc40c52c",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +607,611 @@                result = result.astype('f8')\n            result[null_mask] = np.nan\n    elif result is not tslib.NaT:\n        null_mask = mask.size - mask.sum()\n        if null_mask == 0:"
  },
  {
    "id" : "33cf3ce6-72f0-41da-9c8e-fd06838b119b",
    "prId" : 11245,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b2a0339-21b8-4573-851f-6ef842f26670",
        "parentId" : null,
        "authorId" : "748717f9-0c44-48ab-a877-9c48eac224ca",
        "body" : "We have already wrapped the types by the time we call maybe_null_out. The result will already be coerced so I think the `is` check is safe.\n",
        "createdAt" : "2015-10-07T19:57:51Z",
        "updatedAt" : "2015-10-11T00:35:54Z",
        "lastEditedBy" : "748717f9-0c44-48ab-a877-9c48eac224ca",
        "tags" : [
        ]
      },
      {
        "id" : "70ddbed7-cb9d-4600-b5d8-fea20e45489d",
        "parentId" : "3b2a0339-21b8-4573-851f-6ef842f26670",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, then your check is good. thxs\n",
        "createdAt" : "2015-10-07T20:43:06Z",
        "updatedAt" : "2015-10-11T00:35:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "40c8fcf86a3fa94c1a13e6e1709b6b3fbc40c52c",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +446,450 @@\n        result = _wrap_results(result, dtype)\n        return _maybe_null_out(result, axis, mask)\n\n    reduction.__name__ = 'nan' + meth"
  },
  {
    "id" : "aab6fe11-24d9-409a-8b65-c7e9a745dd13",
    "prId" : 16157,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16157#pullrequestreview-35080230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd68eca7-5341-43b7-861a-38945ff577fb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Should we warn here if ``v`` is False and bottleneck is not installed ?",
        "createdAt" : "2017-04-27T11:43:58Z",
        "updatedAt" : "2017-04-27T13:02:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5af81715b04bad8a95b85bb4e7749f397d89b9",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +34,38 @@    global _USE_BOTTLENECK\n    if _BOTTLENECK_INSTALLED:\n        _USE_BOTTLENECK = v\n\n"
  },
  {
    "id" : "222124ea-0d7a-4752-9c7e-7ceda5c9a40a",
    "prId" : 18876,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18876#pullrequestreview-85682750",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cf27bfd-abae-4103-ad47-f182c5df0579",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you just substract here something if `null_mask` is later on used for indexing into `result` ?",
        "createdAt" : "2017-12-22T15:01:23Z",
        "updatedAt" : "2017-12-28T12:36:26Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f018062f-55e8-4b94-8366-bb2cb7dd64db",
        "parentId" : "8cf27bfd-abae-4103-ad47-f182c5df0579",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'm not sure what you mean here. `null_mask` will be a boolean array of which values in the output should be null because they have too few valid values.",
        "createdAt" : "2017-12-27T14:45:00Z",
        "updatedAt" : "2017-12-28T12:36:26Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e954f84d5e5b2eae643472031c7890da3d98814",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +690,694 @@def _maybe_null_out(result, axis, mask, min_count=1):\n    if axis is not None and getattr(result, 'ndim', False):\n        null_mask = (mask.shape[axis] - mask.sum(axis) - min_count) < 0\n        if np.any(null_mask):\n            if is_numeric_dtype(result):"
  },
  {
    "id" : "eecb4ffa-42dd-46f7-92e7-a38a118e27de",
    "prId" : 18921,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18921#pullrequestreview-85876251",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5690d7cf-b8d6-44ea-9055-509136b40d69",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a TODO here (and maybe create an issue for this)? (can change later)",
        "createdAt" : "2017-12-28T19:00:11Z",
        "updatedAt" : "2017-12-29T12:24:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d139a48f-f3f0-4969-b8b9-65f5e9e6f7d1",
        "parentId" : "5690d7cf-b8d6-44ea-9055-509136b40d69",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "You mean for having all the `nan*` methods just correctly handle empty inputs?",
        "createdAt" : "2017-12-28T19:34:56Z",
        "updatedAt" : "2017-12-29T12:24:42Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "db64ba05-59d0-4d75-8b5c-e2913c077ec2",
        "parentId" : "5690d7cf-b8d6-44ea-9055-509136b40d69",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes, for your 1, 2, 3 options. we don't need to change this now, can be done in 0.23",
        "createdAt" : "2017-12-28T20:01:31Z",
        "updatedAt" : "2017-12-29T12:24:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a97e133bbe3e8bbc74fa8ecbc6331c4c7bfc4b77",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +109,113 @@            try:\n                if values.size == 0 and kwds.get('min_count') is None:\n                    # We are empty, returning NA for our type\n                    # Only applies for the default `min_count` of None\n                    # since that affects how empty arrays are handled."
  },
  {
    "id" : "4f423041-74c0-4d21-a04a-3eb84451da68",
    "prId" : 22684,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22684#pullrequestreview-157219410",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bf5d5e9-5c3a-4b1f-9dcb-21b5b158c22c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "elif",
        "createdAt" : "2018-09-18T14:29:24Z",
        "updatedAt" : "2018-09-26T02:23:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f869c72f-c951-46d1-bb65-14aed58ea3c9",
        "parentId" : "7bf5d5e9-5c3a-4b1f-9dcb-21b5b158c22c",
        "authorId" : "2168b726-a3a4-4844-9740-7c45b2d39bea",
        "body" : "done",
        "createdAt" : "2018-09-20T11:14:02Z",
        "updatedAt" : "2018-09-26T02:23:27Z",
        "lastEditedBy" : "2168b726-a3a4-4844-9740-7c45b2d39bea",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbfd95fb18bb6b0322c7130a59f5272ad2eef43a",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +765,769 @@\ndef get_corr_func(method):\n    if method in ['kendall', 'spearman']:\n        from scipy.stats import kendalltau, spearmanr\n    elif callable(method):"
  },
  {
    "id" : "8376090e-8f49-4d1f-b467-57bba286da73",
    "prId" : 22865,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22865#pullrequestreview-159820083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0f7844f-c5a5-4bbd-af9e-96afbea7079e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can add a Returns to these as well (will be same dtype as input)",
        "createdAt" : "2018-09-28T11:27:57Z",
        "updatedAt" : "2018-10-02T21:33:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "dacdbec03c57d531d11bd1524610e313ab49b2fd",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +402,406 @@    -------\n    result : dtype\n\n    Examples\n    --------"
  },
  {
    "id" : "cf66405f-4d25-49ff-92e1-8f84e37de412",
    "prId" : 23289,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23289#pullrequestreview-168637859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c5a2b7c-3669-49dd-9801-c7044e4ee348",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is it assumed that `fill_value` is not NA? If not, this will be wrong, since `fill_value` will never equal `fill_value`.\r\n\r\nShould we assert that it's not NA?",
        "createdAt" : "2018-10-25T20:25:22Z",
        "updatedAt" : "2018-10-26T21:59:55Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "6993a768-b793-49e1-8607-23dded2f9579",
        "parentId" : "9c5a2b7c-3669-49dd-9801-c7044e4ee348",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so this can't be for an i8 type by definition. but yes we can assert it.",
        "createdAt" : "2018-10-26T00:37:49Z",
        "updatedAt" : "2018-10-26T21:59:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a70b90382954f2ae032d80d29325cf018174d911",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +273,277 @@        if not isinstance(result, np.ndarray):\n            assert not isna(fill_value), \"Expected non-null fill_value\"\n            if result == fill_value:\n                result = np.nan\n            result = tslibs.Timestamp(result)"
  },
  {
    "id" : "4e31e35b-60be-461b-8df4-c9019ea3f0f8",
    "prId" : 24293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24293#pullrequestreview-185365283",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1c32ae6-9bfc-4413-bccb-3f94b32abaf6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use needs_i8_conversion",
        "createdAt" : "2018-12-15T19:14:02Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3bfd072b-bd28-4460-a179-34df8df89a45",
        "parentId" : "e1c32ae6-9bfc-4413-bccb-3f94b32abaf6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "that includes PeriodDType, which isn't implemented yet (again, #23890 gets these all-at-once by implementing reductions directly on the arrays)",
        "createdAt" : "2018-12-15T19:54:08Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4028a14ef585dae19805f05db74ad1495e09e8",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +466,470 @@    dtype_sum = dtype_max\n    dtype_count = np.float64\n    if (is_integer_dtype(dtype) or is_timedelta64_dtype(dtype) or\n            is_datetime64_dtype(dtype) or is_datetime64tz_dtype(dtype)):\n        dtype_sum = np.float64"
  },
  {
    "id" : "3868b2ad-3d68-4eb3-919c-5f24361180ff",
    "prId" : 24597,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24597#pullrequestreview-189156635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36a79b66-0bee-4664-925f-a57f191d6d4a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add doc-strings",
        "createdAt" : "2019-01-03T19:33:30Z",
        "updatedAt" : "2019-01-03T22:03:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f6ac34aa-6055-48f6-9c95-0a6a76f109f4",
        "parentId" : "36a79b66-0bee-4664-925f-a57f191d6d4a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "just pushed with docstrings.  We're going to simplify the tar out of these methods if/when #24600 gets fixed.",
        "createdAt" : "2019-01-03T19:47:01Z",
        "updatedAt" : "2019-01-03T22:03:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "11af1ddd1f204208cc6f0290a6329647cec92e92",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1216,1220 @@    quantiles : scalar or array\n    \"\"\"\n    # mask is Union[ExtensionArray, ndarray]\n    values = values[~mask]\n"
  },
  {
    "id" : "5864044a-1774-44f6-b1c2-84c19f8309e5",
    "prId" : 25070,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25070#pullrequestreview-231518279",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57789a20-12cf-48b7-9473-6c855c028b87",
        "parentId" : null,
        "authorId" : "d27357e5-3013-4027-a032-3a633c4de0f3",
        "body" : "`mypy` analysis needed an extra hint for the following line. It deduced that `mask2: Union[bool, np.ndarray]` and throws an error as `bool` does not have an `any()` function.",
        "createdAt" : "2019-04-29T05:27:07Z",
        "updatedAt" : "2019-04-29T05:29:13Z",
        "lastEditedBy" : "d27357e5-3013-4027-a032-3a633c4de0f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "0387154dc811843c9141fd9aabf8fedbfd0c6a95",
    "line" : 253,
    "diffHunk" : "@@ -1,1 +665,669 @@            d = np.nan\n    else:\n        mask2 = count <= ddof  # type: np.ndarray\n        if mask2.any():\n            np.putmask(d, mask2, np.nan)"
  },
  {
    "id" : "60a84c29-f0ca-439c-872f-ca1ec8c16a2d",
    "prId" : 27411,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27411#pullrequestreview-265060510",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d5fbf09-5d82-4804-b19b-b0393e930f0a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why are you not letting this then fall thru, e.g. if there is masking here?",
        "createdAt" : "2019-07-16T19:46:58Z",
        "updatedAt" : "2019-07-16T19:47:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "99cde0f1-0f12-4bb1-96ff-4d51e5d2378a",
        "parentId" : "7d5fbf09-5d82-4804-b19b-b0393e930f0a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "If we just return `result` here, at this point it is in general float64.  In the calling function we're going to do a `result.view(values.dtype)`, which will be incorrect",
        "createdAt" : "2019-07-16T20:47:49Z",
        "updatedAt" : "2019-07-16T20:47:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "aa302533-8897-4e99-9cdc-f64b3d031d71",
        "parentId" : "7d5fbf09-5d82-4804-b19b-b0393e930f0a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right my point is to do this *later* in the function after masking and checking for 0-len.",
        "createdAt" : "2019-07-20T19:56:58Z",
        "updatedAt" : "2019-07-20T19:57:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f2693903-5d2c-45f6-b1b4-4e3b0e397dd4",
        "parentId" : "7d5fbf09-5d82-4804-b19b-b0393e930f0a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "just tried that, breaks because it ends up double-masking",
        "createdAt" : "2019-07-20T23:40:30Z",
        "updatedAt" : "2019-07-20T23:40:31Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "34d1693b-a268-4ffc-b690-8d69d84e0569",
        "parentId" : "7d5fbf09-5d82-4804-b19b-b0393e930f0a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i wouldnt hang up on this too much, since we're going to have to move this to earlier in the call stack in #27428",
        "createdAt" : "2019-07-21T01:14:34Z",
        "updatedAt" : "2019-07-21T01:14:34Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ce5bd0f4-382e-4564-b8ab-352978be50e2",
        "parentId" : "7d5fbf09-5d82-4804-b19b-b0393e930f0a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, if  you can clean this up later would be great.",
        "createdAt" : "2019-07-22T21:13:33Z",
        "updatedAt" : "2019-07-22T21:13:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1043a205d197739500d6c75a9dbc40abf713837e",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1369,1373 @@        # Note: we have to do do `astype` and not view because in general we\n        #  have float result at this point, not i8\n        return result.astype(values.dtype)\n\n    values = values[~mask]"
  },
  {
    "id" : "70858b86-14a4-4d76-879e-319354610077",
    "prId" : 28289,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28289#pullrequestreview-285090501",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dea7f421-11f4-4ea2-9db9-364a463aa4bb",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is this fixing `std` behavior in some way? If so do we need a test for this?",
        "createdAt" : "2019-09-06T15:42:04Z",
        "updatedAt" : "2019-10-26T00:10:48Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "385e1239-16dc-4ea5-8086-1582d0f7c7d7",
        "parentId" : "dea7f421-11f4-4ea2-9db9-364a463aa4bb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "No, this is a workaround because we have to pass i8 values to nanvar in this case",
        "createdAt" : "2019-09-06T16:29:25Z",
        "updatedAt" : "2019-10-26T00:10:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ce875c6b-086c-4ce7-9bc6-841598a2f2f9",
        "parentId" : "dea7f421-11f4-4ea2-9db9-364a463aa4bb",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm I think I got it - so previously this would get a junk return value for time delta from the nan call and now we are sending it a mask right? If so is there a reason to even have that call in the first place?",
        "createdAt" : "2019-09-06T17:30:56Z",
        "updatedAt" : "2019-10-26T00:10:48Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "83e4e28b-5ebc-4999-adad-7f9df760db9a",
        "parentId" : "dea7f421-11f4-4ea2-9db9-364a463aa4bb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> and now we are sending it a mask right\r\n\r\nRight.  And this is made necessary because we are passing the values as i8 instead of m8[ns].\r\n\r\n> If so is there a reason to even have that call in the first place?\r\n\r\nNot sure I understand the question.",
        "createdAt" : "2019-09-06T17:40:57Z",
        "updatedAt" : "2019-10-26T00:10:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "50f137c3-8d28-4242-9878-16e74cb13191",
        "parentId" : "dea7f421-11f4-4ea2-9db9-364a463aa4bb",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "You can ignore - I was misreading `i8` as an 8 bit integer hence my confusion",
        "createdAt" : "2019-09-06T20:44:20Z",
        "updatedAt" : "2019-10-26T00:10:48Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6c6b87a32587a44344dbd46695b0eed6cc50b01",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +705,709 @@    1.0\n    \"\"\"\n    orig_dtype = values.dtype\n    values, mask, dtype, dtype_max, fill_value = _get_values(values, skipna, mask=mask)\n"
  },
  {
    "id" : "6d5d0993-9af7-4dd0-8a94-20d1a3afe806",
    "prId" : 29178,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29178#pullrequestreview-305945819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13602774-b5ad-477d-b3b6-eb1f47598c7a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should be = None then",
        "createdAt" : "2019-10-23T11:45:39Z",
        "updatedAt" : "2019-10-25T02:03:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2e991967-b01c-4042-be67-f68e603f64c3",
        "parentId" : "13602774-b5ad-477d-b3b6-eb1f47598c7a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "we're requiring the caller to pass something though",
        "createdAt" : "2019-10-23T14:39:49Z",
        "updatedAt" : "2019-10-25T02:03:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "633c583a4d14fb56e60a542664ded82cdb0504a4",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +368,372 @@\n\ndef _na_for_min_count(values, axis: Optional[int]):\n    \"\"\"\n    Return the missing value for `values`."
  },
  {
    "id" : "50b0fe8d-548f-4475-9ec2-f015f938af10",
    "prId" : 29178,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29178#pullrequestreview-305966002",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cdd0375-97cc-4e30-b8be-232dfe36c4bf",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Not sure if applicable here but you could use the `Axis` definition from pandas._typing, if this can accept both integers and \"index\"/\"columns\"\r\n\r\nAnnotated `bool` return value for this and below would be great too",
        "createdAt" : "2019-10-23T15:11:21Z",
        "updatedAt" : "2019-10-25T02:03:49Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "633c583a4d14fb56e60a542664ded82cdb0504a4",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +399,403 @@\n\ndef nanany(values, axis=None, skipna: bool = True, mask=None):\n    \"\"\"\n    Check if any elements along an axis evaluate to True."
  },
  {
    "id" : "fd3ce0af-6d87-45cd-8436-487fbfac085d",
    "prId" : 29941,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29941#pullrequestreview-344969451",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de0333a9-e4a6-4413-bf05-ffd60fbb2caf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you document this at some point. also likely this should be merged put in pandas.core.dtypes.common (e.g. the ensure_* functions)",
        "createdAt" : "2019-12-27T16:48:30Z",
        "updatedAt" : "2020-02-09T17:38:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ed892071-56cf-4361-bfea-d01f334c5b04",
        "parentId" : "de0333a9-e4a6-4413-bf05-ffd60fbb2caf",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yah, i keep meaning to do a few passes to clean up nanops, maybe after the current indexing kick",
        "createdAt" : "2020-01-19T00:42:53Z",
        "updatedAt" : "2020-02-09T17:38:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "43cc7845244fb6e01d41e2c2aa935453602b6fbe",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +1361,1365 @@                x = x.astype(np.complex128)\n            except (TypeError, ValueError):\n                try:\n                    x = x.astype(np.float64)\n                except ValueError:"
  },
  {
    "id" : "cca50d64-c20b-47e1-8b83-24ee6699dfec",
    "prId" : 29941,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29941#pullrequestreview-336868819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cac3fc88-e6ed-4100-8921-fee033045507",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you use _ensure_numeric?",
        "createdAt" : "2019-12-27T16:48:48Z",
        "updatedAt" : "2020-02-09T17:38:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c5b64b6e-2e27-4918-8be7-ac727e54a80f",
        "parentId" : "cac3fc88-e6ed-4100-8921-fee033045507",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "will give it a shot.  that would change behavior if we have complex dtype, which i dont think median should support",
        "createdAt" : "2019-12-27T20:27:53Z",
        "updatedAt" : "2020-02-09T17:38:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0b1b0b96-c5a9-448a-a314-bc16e388ef5d",
        "parentId" : "cac3fc88-e6ed-4100-8921-fee033045507",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "changing this doesnt appear to break any tests.  will change in a follow-up (dont want to push if i can avoid it since the CI is failing for unrelated reasons)",
        "createdAt" : "2019-12-27T20:55:52Z",
        "updatedAt" : "2020-02-09T17:38:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "43cc7845244fb6e01d41e2c2aa935453602b6fbe",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +609,613 @@    values, mask, dtype, dtype_max, _ = _get_values(values, skipna, mask=mask)\n    if not is_float_dtype(values.dtype):\n        try:\n            values = values.astype(\"f8\")\n        except ValueError:"
  },
  {
    "id" : "813af832-609d-40f3-ac16-216b9c017710",
    "prId" : 29953,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29953#pullrequestreview-326872892",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0a8556b-09df-4d26-ab79-d20793f684da",
        "parentId" : null,
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "Can anyone think of a better name? it's just seems wrong.",
        "createdAt" : "2019-12-02T01:32:00Z",
        "updatedAt" : "2019-12-09T11:15:18Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "b91110a0-e488-4d8f-b8e6-0cd064941c8d",
        "parentId" : "f0a8556b-09df-4d26-ab79-d20793f684da",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "its fine",
        "createdAt" : "2019-12-04T14:10:46Z",
        "updatedAt" : "2019-12-09T11:15:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "aea8b84ffb11c1f00976781aa626c19ce67ee0e0",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +61,65 @@            obj_iter = itertools.chain(args, kwargs.values())\n            if any(self.check(obj) for obj in obj_iter):\n                f_name = f.__name__.replace(\"nan\", \"\")\n                raise TypeError(\n                    f\"reduction operation '{f_name}' not allowed for this dtype\""
  },
  {
    "id" : "d1836595-0cf2-4545-b7a4-183676c6d001",
    "prId" : 30461,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30461#pullrequestreview-337363463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d46608e3-242c-43b9-a4ba-179aa86d9533",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@simonjayhawkins my read of Dtype is that `float` shouldn't be included.  Is this not-failing because np.dtype resolves to Any?",
        "createdAt" : "2019-12-28T18:09:26Z",
        "updatedAt" : "2020-01-20T10:38:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8a70fea2-9b9a-4477-86ec-c5dbbba67101",
        "parentId" : "d46608e3-242c-43b9-a4ba-179aa86d9533",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "yes, definition of Dtype alias is being updated in #29046 to allow this.",
        "createdAt" : "2019-12-31T11:41:37Z",
        "updatedAt" : "2020-01-20T10:38:54Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "0ba3312d-7422-444e-ae83-663c904fd50e",
        "parentId" : "d46608e3-242c-43b9-a4ba-179aa86d9533",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "So keep the ```Dtype``` typing here? or remove it?",
        "createdAt" : "2019-12-31T11:56:34Z",
        "updatedAt" : "2020-01-20T10:38:54Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "b6114428-8696-46c6-bad4-287e271410fa",
        "parentId" : "d46608e3-242c-43b9-a4ba-179aa86d9533",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "OK to keep IMO",
        "createdAt" : "2019-12-31T12:13:50Z",
        "updatedAt" : "2020-01-20T10:38:54Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "d74a87397451779e375ec59d9f43ef3d6315919c",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +653,657 @@    axis: Optional[int],\n    ddof: int,\n    dtype: Dtype = float,\n) -> Tuple[Union[int, np.ndarray], Union[int, np.ndarray]]:\n    \"\"\" Get the count of non-null values along an axis, accounting"
  },
  {
    "id" : "837f56dd-3647-46be-83c8-3cef52026963",
    "prId" : 30461,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30461#pullrequestreview-336925464",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bec6e25-10b3-4f57-9f72-42b64a5c05d3",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can method be typed as str?",
        "createdAt" : "2019-12-28T18:11:26Z",
        "updatedAt" : "2020-01-20T10:38:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d74a87397451779e375ec59d9f43ef3d6315919c",
    "line" : 282,
    "diffHunk" : "@@ -1,1 +1283,1287 @@@disallow(\"M8\", \"m8\")\ndef nancorr(\n    a: np.ndarray, b: np.ndarray, method=\"pearson\", min_periods: Optional[int] = None,\n):\n    \"\"\""
  },
  {
    "id" : "9dbe59bb-4a79-4f3f-8461-ffb1adbdd780",
    "prId" : 30461,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30461#pullrequestreview-344966383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d996a0a3-a296-4031-a1bf-668fc49e9615",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "method: str ?",
        "createdAt" : "2020-01-18T19:18:00Z",
        "updatedAt" : "2020-01-20T10:38:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "915e7e1f-da54-4b0e-a25a-34ffae734d42",
        "parentId" : "d996a0a3-a296-4031-a1bf-668fc49e9615",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "or Union[str, Callable] ",
        "createdAt" : "2020-01-18T19:18:33Z",
        "updatedAt" : "2020-01-20T10:38:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a107b532-542d-4c1c-a289-846766fa46fd",
        "parentId" : "d996a0a3-a296-4031-a1bf-668fc49e9615",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "In https://github.com/pandas-dev/pandas/pull/30461/commits/7442310a426f9160abab5e201c10b8ad4590b25d I removed all annotations of ```str``` and ```Callable``` that were added in this PR.\r\n\r\nNo matter what annotation I try, mypy will complain, I will maybe be able to address this annotation in another PR, but I think that is out of scope for this PR at least.",
        "createdAt" : "2020-01-18T22:50:23Z",
        "updatedAt" : "2020-01-20T10:38:54Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      }
    ],
    "commit" : "d74a87397451779e375ec59d9f43ef3d6315919c",
    "line" : 282,
    "diffHunk" : "@@ -1,1 +1283,1287 @@@disallow(\"M8\", \"m8\")\ndef nancorr(\n    a: np.ndarray, b: np.ndarray, method=\"pearson\", min_periods: Optional[int] = None,\n):\n    \"\"\""
  },
  {
    "id" : "83e4bcc8-2647-4808-b6fc-dd3fb170b9d5",
    "prId" : 30603,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30603#pullrequestreview-337519891",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c15c5ea-6b72-45fc-833a-818b07325456",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a test that hits this (likely just calling .corr(method='foo') would do it",
        "createdAt" : "2020-01-02T02:43:39Z",
        "updatedAt" : "2020-01-06T10:05:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9571c3ba3cc1e2be6aa16fce0a379ae5c5bd0bef",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1250,1254 @@    else:\n        raise ValueError(\n            f\"Unkown method '{method}', expected one of 'kendall', 'spearman'\"\n        )\n"
  },
  {
    "id" : "75392308-e88e-4728-85ac-8d43da7a33f1",
    "prId" : 32426,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32426#pullrequestreview-370839611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77f12313-f971-451b-8494-3c26c87106a9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "comment is out-dated",
        "createdAt" : "2020-03-08T15:49:34Z",
        "updatedAt" : "2020-03-09T23:17:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1017b081dd102885abde4675815c90528cd6508c",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +324,328 @@\ndef _na_ok_dtype(dtype) -> bool:\n    if needs_i8_conversion(dtype):\n        return False\n    return not issubclass(dtype.type, np.integer)"
  },
  {
    "id" : "79600c5b-8f3c-439a-ae78-391dabbb716f",
    "prId" : 32508,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32508#pullrequestreview-375302709",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61149911-0ae0-4316-bd11-175f168a31e5",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "According to the typing and docstring, `values` is always an ndarray, so if those are correct, this should not be needed",
        "createdAt" : "2020-03-16T13:26:10Z",
        "updatedAt" : "2020-03-16T13:32:29Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "91040b03-5eea-4eed-aa12-9a7ddce62682",
        "parentId" : "61149911-0ae0-4316-bd11-175f168a31e5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> so if those are correct\r\n\r\nthey are not.",
        "createdAt" : "2020-03-16T15:03:05Z",
        "updatedAt" : "2020-03-16T15:03:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c5c091dae7500df019e9ddd9b7dfc28e98e51df",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +287,291 @@    mask = _maybe_get_mask(values, skipna, mask)\n\n    values = extract_array(values, extract_numpy=True)\n    dtype = values.dtype\n"
  },
  {
    "id" : "9a4c5fbd-cffa-42f9-9f1b-c25aa793e128",
    "prId" : 33244,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33244#pullrequestreview-387858161",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc312f29-0cfb-4a61-b40d-9f2c4fc5890a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i would make all of these lambda, e.g.(for all 3 cases)\r\n```\r\nreturn lambda a, b: kendaltau(a, b)[0]\r\n```",
        "createdAt" : "2020-04-05T20:18:51Z",
        "updatedAt" : "2020-04-06T22:38:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ce5c6fca-74bc-4c02-bfa4-8a9bb8a4c8ac",
        "parentId" : "bc312f29-0cfb-4a61-b40d-9f2c4fc5890a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "hah, i asked for these to be changed from lambda to non-lambdas for nicer tracebacks",
        "createdAt" : "2020-04-05T20:24:45Z",
        "updatedAt" : "2020-04-06T22:38:46Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d2511d3b-dae0-41ad-8a4e-7884afbce772",
        "parentId" : "bc312f29-0cfb-4a61-b40d-9f2c4fc5890a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh really it does? hmm, ok, then that's fine",
        "createdAt" : "2020-04-05T20:33:13Z",
        "updatedAt" : "2020-04-06T22:38:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "12a91a22db7b741c8dd9cbc7f44fb13628f2684b",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1339,1343 @@            return kendalltau(a, b)[0]\n\n        return func\n    elif method == \"spearman\":\n        from scipy.stats import spearmanr"
  },
  {
    "id" : "96a639a0-e94c-4c9d-85a6-57082ae4c8b4",
    "prId" : 33911,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33911#pullrequestreview-407746180",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c36856e4-58e5-4413-9492-7301f3e89978",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what hits each of these branches?",
        "createdAt" : "2020-05-06T23:10:36Z",
        "updatedAt" : "2020-05-07T22:16:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b68d70ed-a738-47c7-89db-33054fa726a5",
        "parentId" : "c36856e4-58e5-4413-9492-7301f3e89978",
        "authorId" : "d0eb539f-7aed-425a-ae47-bb8603bd9118",
        "body" : "when `np.full` is called with the parameter `dtype=np.datetime64` and `fill_value=pd.NaT` a ValueError `ValueError: cannot convert float NaN to integer`. In this case I don't call `np.full` without an explicit `dtype`. Giving the array `result` an explicit dtype does not have an effect on the DataFrame column but I thought it is cleaner if I at least try to give it the correct one. I hoped the comment explains this. But if not, I'm gonna make it gonna improve the comment.",
        "createdAt" : "2020-05-07T18:51:39Z",
        "updatedAt" : "2020-05-07T23:11:10Z",
        "lastEditedBy" : "d0eb539f-7aed-425a-ae47-bb8603bd9118",
        "tags" : [
        ]
      }
    ],
    "commit" : "6dfec8f81d2d2847f5bcbee68a4518504b0e08b7",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +388,392 @@        # with dtype=np.datetime64 and and fill_value=pd.NaT\n        try:\n            result = np.full(result_shape, fill_value, dtype=values.dtype)\n        except ValueError:\n            result = np.full(result_shape, fill_value)"
  },
  {
    "id" : "229b77aa-746f-45e0-bd9d-b09424211285",
    "prId" : 34689,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34689#pullrequestreview-428687682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "267a5c3c-1444-4fe1-a54b-c0a3049f88ba",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What is the cast required here for? Wouldn't the return annotation already provide this info?",
        "createdAt" : "2020-06-10T15:48:19Z",
        "updatedAt" : "2020-06-13T09:21:24Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "9d4b461a-1b8f-4d9e-ac54-269c36a920b9",
        "parentId" : "267a5c3c-1444-4fe1-a54b-c0a3049f88ba",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "This is how we have been typing all our decorators to preserve the signature. Its recommended best practice. https://mypy.readthedocs.io/en/stable/generics.html#declaring-decorators\r\n\r\nif we don't cast, we get a mypy error `pandas\\core\\nanops.py:133: error: Incompatible return value type (got \"Callable[..., Any]\", expected \"F\")`",
        "createdAt" : "2020-06-11T08:12:53Z",
        "updatedAt" : "2020-06-13T09:21:24Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "23e7737e0fc3373fe0ed3c532f22e1fbeb8dff48",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +131,135 @@            return result\n\n        return cast(F, f)\n\n"
  },
  {
    "id" : "4a52b09d-782a-407a-98d2-330738d012b0",
    "prId" : 37148,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37148#pullrequestreview-516152828",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd6183e1-adf1-47c1-b353-20e3d717eb34",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why don;t you have this take the original values (rather than just the dtype) and compute the mask if needed (e.g. make it optional), rn the caller is responsible for that in multiple places.",
        "createdAt" : "2020-10-17T16:07:15Z",
        "updatedAt" : "2020-10-19T02:00:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4835540f-0fb7-47fe-be36-95a94779a944",
        "parentId" : "cd6183e1-adf1-47c1-b353-20e3d717eb34",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "if we get to here, we always need the mask",
        "createdAt" : "2020-10-18T00:03:55Z",
        "updatedAt" : "2020-10-19T02:00:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "cf06f60f-6df7-40c7-8f5a-747a146c8f6a",
        "parentId" : "cd6183e1-adf1-47c1-b353-20e3d717eb34",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you didn't answer the question. you are adding multiple code blocks which do the same thing; if you are going to consolidate to a function then it makes sense to avoid that yes?",
        "createdAt" : "2020-10-18T15:04:45Z",
        "updatedAt" : "2020-10-19T02:00:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6399167f-bdb6-44dd-bf01-b90c06e2ff0f",
        "parentId" : "cd6183e1-adf1-47c1-b353-20e3d717eb34",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "apparently i dont understand the question.  IIUC the alternative you're suggesting looks like\r\n\r\n```\r\ndef _mask_datetimelike_result(result, axis, mask, orig_values):\r\n    if mask is None:\r\n        mask = isna(orig_values)\r\n    [what we have here now]\r\n```\r\n\r\nand remove the `if mask is None and not skipna: mask = isna(orig_values)` on L516-517.  This is 2 lines of code either way, so not a big deal.  ill change it if you really care.\r\n\r\nlonger-term this should probably go into `_get_values`, but i want to do that carefully since that may affect other functions",
        "createdAt" : "2020-10-18T17:55:20Z",
        "updatedAt" : "2020-10-19T02:00:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8803b010-b7a9-4476-a017-f73e504131ab",
        "parentId" : "cd6183e1-adf1-47c1-b353-20e3d717eb34",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok i guess - i am thinking u r going to refactor this anyhow as this adds a fair amount of duplication ",
        "createdAt" : "2020-10-24T02:46:15Z",
        "updatedAt" : "2020-10-24T02:46:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3987063c84173a510ebfca6a4568ddeac57640af",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +524,528 @@\n\ndef _mask_datetimelike_result(\n    result: Union[np.ndarray, np.datetime64, np.timedelta64],\n    axis: Optional[int],"
  },
  {
    "id" : "4218787d-0230-4bad-8619-9f2fb7e90950",
    "prId" : 37148,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37148#pullrequestreview-511023002",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10f34a8b-1720-4b3c-b867-832659f5fa00",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add Parametes to the doc-string",
        "createdAt" : "2020-10-17T16:08:10Z",
        "updatedAt" : "2020-10-19T02:00:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "90317c1c-79b3-4302-80c8-c2b96267733e",
        "parentId" : "10f34a8b-1720-4b3c-b867-832659f5fa00",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sure, just pushed",
        "createdAt" : "2020-10-18T00:05:19Z",
        "updatedAt" : "2020-10-19T02:00:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3987063c84173a510ebfca6a4568ddeac57640af",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +701,705 @@    np.ndarray\n    \"\"\"\n    shp = np.array(shape)\n    dims = np.arange(len(shape))\n    ret = np.empty(shp[dims != axis], dtype=dtype)"
  },
  {
    "id" : "5e973079-1faf-4030-ac43-6b8fc86ad2fb",
    "prId" : 37425,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37425#pullrequestreview-517816750",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "692f003c-2aed-4c26-805e-3fcc9dab465e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "_maybe_null_out should just do this (e.g. just pass int he orig_values.dtype)",
        "createdAt" : "2020-10-27T13:08:11Z",
        "updatedAt" : "2020-10-28T14:55:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b6f6421a-e9f2-4abd-885e-a4c7b13c2371",
        "parentId" : "692f003c-2aed-4c26-805e-3fcc9dab465e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i think it may belong in _wrap_results; not all these funcs call _maybe_null_out.  ive got a branch working on cleaning these up",
        "createdAt" : "2020-10-27T15:11:32Z",
        "updatedAt" : "2020-10-28T14:55:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd8b2f3cc040e90f57dbc0ed4b511352f6b0e301",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +941,945 @@\n        if datetimelike and not skipna:\n            result = _mask_datetimelike_result(result, axis, mask, orig_values)\n\n        return result"
  },
  {
    "id" : "3b92fe66-73c9-4ada-ab3e-729b4622f106",
    "prId" : 37436,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37436#pullrequestreview-517809351",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e373906-cca4-4c89-b3a7-523284b462ab",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't this be done in _get_values?",
        "createdAt" : "2020-10-27T12:58:17Z",
        "updatedAt" : "2020-10-30T02:02:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c9c36cd3-d959-4c3a-9f43-54c1663f4c3b",
        "parentId" : "9e373906-cca4-4c89-b3a7-523284b462ab",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this is specific to std",
        "createdAt" : "2020-10-27T15:04:56Z",
        "updatedAt" : "2020-10-30T02:02:42Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcc4ee12dcffec916d5cdd402f9941b2e5cf4924",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +786,790 @@    1.0\n    \"\"\"\n    if values.dtype == \"M8[ns]\":\n        values = values.view(\"m8[ns]\")\n"
  }
]