[
  {
    "id" : "0fda4ad8-fe1a-45f8-96d3-c87705256b3b",
    "prId" : 4092,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ba0c6bb-cd03-4841-ac19-b00e56ec0998",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "should this be `super(PandasObject, self).__repr__()`?\n",
        "createdAt" : "2013-07-01T03:02:27Z",
        "updatedAt" : "2013-07-01T22:09:33Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "012308e2-f6bb-4507-b0f1-f06bb72c18a4",
        "parentId" : "7ba0c6bb-cd03-4841-ac19-b00e56ec0998",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "No. That would be an infinite loop. (because StringMixin calls `__str__`, etc.) That's the only awkward part of this setup...but for most PandasObjects, it works out okay.\n",
        "createdAt" : "2013-07-01T03:03:52Z",
        "updatedAt" : "2013-07-01T22:09:33Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "600a4093-251a-46b6-acab-dd1ca4cda2f3",
        "parentId" : "7ba0c6bb-cd03-4841-ac19-b00e56ec0998",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "oh whoops blah sorry\n",
        "createdAt" : "2013-07-01T03:04:31Z",
        "updatedAt" : "2013-07-01T22:09:33Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5583141404ddf91516e70dade7942c315cb3646",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +56,60 @@        \"\"\"\n        # Should be overwritten by base classes\n        return object.__repr__(self)"
  },
  {
    "id" : "d45b69f7-129c-447e-b053-e9c5c900a739",
    "prId" : 6380,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87e0af26-cf1e-4f63-9703-0d3c881330c1",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "Did you mean to use `@wraps` here?\n",
        "createdAt" : "2014-02-18T00:13:29Z",
        "updatedAt" : "2014-02-18T00:26:28Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "7cdc7fb6-fdee-42ed-bd39-8643f30d0417",
        "parentId" : "87e0af26-cf1e-4f63-9703-0d3c881330c1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think I originally did, but sort of did it 'manually' by assigning name/doc string....bad?\n",
        "createdAt" : "2014-02-18T00:18:56Z",
        "updatedAt" : "2014-02-18T00:26:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "92daab15-c183-4414-911a-2ffca41180df",
        "parentId" : "87e0af26-cf1e-4f63-9703-0d3c881330c1",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "Looking at the source for `wraps` it basically does that ... only diff is that it updates the `__module__` attribute and copies the `__dict__` attribute. Not \"bad\" per se.\n",
        "createdAt" : "2014-02-18T00:29:55Z",
        "updatedAt" : "2014-02-18T00:30:26Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "1e5d4386-b479-4076-938c-aa2d99928aa8",
        "parentId" : "87e0af26-cf1e-4f63-9703-0d3c881330c1",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "This is fine ... I was just asking.\n",
        "createdAt" : "2014-02-18T00:30:46Z",
        "updatedAt" : "2014-02-18T00:30:46Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "6590fc0ffa41b6aba02760c978eb84d07063e4bb",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +205,209 @@def _field_accessor(name, docstring=None):\n    op_accessor = '_{0}'.format(name)\n    def f(self):\n        return self._ops_compat(name,op_accessor)\n"
  },
  {
    "id" : "a2d3397e-78eb-4c0f-b77b-9202f08c76f1",
    "prId" : 7424,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a48f1d6f-1905-4d8a-a03a-55f9461497ee",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "same here\n",
        "createdAt" : "2014-06-17T12:52:03Z",
        "updatedAt" : "2014-06-17T12:52:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "26139f3804cdc25d29325972a24c55e10cd2567f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +264,268 @@            Rather than count values, group them into half-open bins,\n            a convenience for pd.cut, only works with numeric data\n        dropna : boolean, default False\n            Don't include counts of NaN\n"
  },
  {
    "id" : "37e808fd-9a5e-42a2-b89d-3e1ac41ce93e",
    "prId" : 7424,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8583384-f456-439c-8abc-68147ed93360",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Should add explanation of the new parameter (just as in `value_counts`)\n",
        "createdAt" : "2014-06-17T12:53:16Z",
        "updatedAt" : "2014-06-17T12:53:16Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d4ac8b62-e782-45e4-ab55-4c99cb70e73f",
        "parentId" : "d8583384-f456-439c-8abc-68147ed93360",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "that looks right (should be `True`) as then keeps the API the same. you want to fix?\n",
        "createdAt" : "2014-06-17T12:53:46Z",
        "updatedAt" : "2014-06-17T12:53:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "26139f3804cdc25d29325972a24c55e10cd2567f",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +290,294 @@        \"\"\"\n        Return count of unique elements in the object. Excludes NA values.\n\n        Returns\n        -------"
  },
  {
    "id" : "8b0470ef-c0a1-43a1-80dd-e8901299c387",
    "prId" : 7979,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5142763-3960-4105-bb5c-876f2e30cd5f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is very awkward to do. Maybe just put the immutable definition in base and override the definition in series. prob simpler?\n",
        "createdAt" : "2014-08-12T13:30:34Z",
        "updatedAt" : "2014-08-13T12:21:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "42aab36d-a115-4b3f-bba2-c1354ef1e924",
        "parentId" : "f5142763-3960-4105-bb5c-876f2e30cd5f",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "OK, fixed to centralize the logic to `IndexOpsMixin`. Even though `update_inplace` is defined in both `IndexOpsMixin` and `Index`, it will never called in `drop_duplicates` case (`Index.drop_duplicates` blocks `inplace` kw, and it is better for proper `docstring`)\n",
        "createdAt" : "2014-08-13T02:22:50Z",
        "updatedAt" : "2014-08-13T12:21:27Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "54d3e4d24190c80107516bb4b67bd7b594e75541",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +524,528 @@            return self._constructor(duplicated,\n                                     index=self.index).__finalize__(self)\n        except AttributeError:\n            from pandas.core.index import Index\n            return Index(duplicated)"
  },
  {
    "id" : "12b27cbd-47ad-484d-9a6f-534bdde45538",
    "prId" : 9112,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54ad851f-3812-4dea-8096-7dd4933b7ba0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok with changing to this, though using `(~values).astype(bool)` is quite common in the code base - if someone wanted to clean up this would be appreciated\n",
        "createdAt" : "2014-12-20T20:08:00Z",
        "updatedAt" : "2014-12-20T20:08:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "83fd0b47afb204aa1fd6b1c9054f45705282c880",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +488,492 @@    def drop_duplicates(self, take_last=False, inplace=False):\n        duplicated = self.duplicated(take_last=take_last)\n        result = self[np.logical_not(duplicated)]\n        if inplace:\n            return self._update_inplace(result)"
  },
  {
    "id" : "c0367cdb-0142-464c-b2bb-005b7715849b",
    "prId" : 9667,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84ad6d86-7ee4-4e08-ab76-aa3809ab0d14",
        "parentId" : null,
        "authorId" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "body" : "@shoyer @jreback I improved the checking here according to your recommendations - in the case of `Series` it's the same logic as before and in the case of `Index` it uses the `inferred_type` attribute \n",
        "createdAt" : "2015-04-02T19:16:52Z",
        "updatedAt" : "2015-04-10T07:28:25Z",
        "lastEditedBy" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f98bcb8b0ccfbf1b494154b22e2d455c584a1026",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +514,518 @@                                 \"values (i.e. inferred_type is 'string')\")\n        return StringMethods(self)\n\n    str = AccessorProperty(StringMethods, _make_str_accessor)\n"
  },
  {
    "id" : "0a29a14d-2ec1-48e5-b271-2e323bcd1e03",
    "prId" : 10031,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "713e6eb4-ffd9-400d-8c29-f23968bcff25",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I don't think you can accept `mixed-integer`, as these are in general python integer objects which need stringification first (which we _could_ do, but that's a separate issue).\n\n```\nIn [10]: pd.lib.infer_dtype([1,2,'a'])\nOut[10]: 'mixed-integer'\n```\n",
        "createdAt" : "2015-05-05T10:49:07Z",
        "updatedAt" : "2015-05-05T10:49:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dcb5939c-877f-4f4c-a434-6dab40331bd0",
        "parentId" : "713e6eb4-ffd9-400d-8c29-f23968bcff25",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "@jreback It is to be compat with current `Series` behavior. In above case, `Series.str` is applied to all the elements and leave non-str as `NaN`.\n\n```\ns = pd.Series([1, 2, 'a'])\ns.str.len()\n# 0   NaN\n# 1   NaN\n# 2     1\n# dtype: float64\n```\n",
        "createdAt" : "2015-05-06T02:41:08Z",
        "updatedAt" : "2015-05-06T02:41:08Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "2b5af9a5-6fe2-4d10-a8b7-18afda8a302e",
        "parentId" : "713e6eb4-ffd9-400d-8c29-f23968bcff25",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i c...ok\n",
        "createdAt" : "2015-05-06T10:39:31Z",
        "updatedAt" : "2015-05-06T10:39:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "84afe26aa513c29f8511f82dc2dd1679cb3d9176",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +523,527 @@            if self.inferred_type not in allowed_types:\n                message = (\"Can only use .str accessor with string values \"\n                           \"(i.e. inferred_type is 'string', 'unicode' or 'mixed')\")\n                raise AttributeError(message)\n            if self.nlevels > 1:"
  },
  {
    "id" : "ae8c257e-b0f5-49df-8032-d010e79602a1",
    "prId" : 11603,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2469297-b48d-409f-9bc5-5bf21458085d",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "I would leave this whole block indented (to keep the code formatted nicely) but use `textwrap.dedent`: https://docs.python.org/2/library/textwrap.html#textwrap.dedent\n",
        "createdAt" : "2015-11-25T23:11:47Z",
        "updatedAt" : "2015-12-19T13:51:47Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "7395fd98-aa03-4935-9aef-34e439f1c4db",
        "parentId" : "a2469297-b48d-409f-9bc5-5bf21458085d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I couldn't get this to work properly when I was doing Appender. It was offseting slightly. This doc-string stuff is a PITA.\n",
        "createdAt" : "2015-11-25T23:14:26Z",
        "updatedAt" : "2015-12-19T13:51:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f61e429f-4d5b-4956-aaf3-430c1f046a17",
        "parentId" : "a2469297-b48d-409f-9bc5-5bf21458085d",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "agreed its a PITA\n",
        "createdAt" : "2015-11-25T23:24:54Z",
        "updatedAt" : "2015-12-19T13:51:47Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1890a88d4d1b2926e45f631330f6191642bef773",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +330,334 @@        raise AbstractMethodError(self)\n\n    _agg_doc = \"\"\"Aggregate using input function or dict of {column -> function}\n\nParameters"
  },
  {
    "id" : "ca5b82f2-e9a3-4fb2-9a3f-5638a99b7b30",
    "prId" : 13979,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9809cfa3-38c2-4d5d-8428-3c377f8cd596",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "while updating. let's add that uniques are preserved in the order as seen (I know we had discussed this), but let's document the behavior at least. @jorisvandenbossche @shoyer \n",
        "createdAt" : "2016-08-25T10:22:39Z",
        "updatedAt" : "2016-08-29T01:46:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2d2035be-ee09-4ffb-9758-80e1b3b22f89",
        "parentId" : "9809cfa3-38c2-4d5d-8428-3c377f8cd596",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> while updating. let's add that uniques are preserved in the order as seen (I know we had discussed this), but let's document the behavior at least.\n\nyes, +1 \nThe issue for this is https://github.com/pydata/pandas/issues/9346\n",
        "createdAt" : "2016-08-27T15:32:32Z",
        "updatedAt" : "2016-08-29T01:46:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a27815690571a978fac9037ebded0214ac2be5",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +955,959 @@        \"\"\"\n        Return %(unique)s of unique values in the object.\n        Significantly faster than numpy.unique. Includes NA values.\n        The order of the original is preserved.\n"
  },
  {
    "id" : "48353713-02e2-40ec-a89b-9586b8a08258",
    "prId" : 15931,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15931#pullrequestreview-32509949",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a61b1ad8-c674-4828-bea4-a6e8e93c0cc3",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is this a new error message? (and in case so, just checking if there is a test added for it?)",
        "createdAt" : "2017-04-12T13:47:37Z",
        "updatedAt" : "2017-04-12T22:43:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c3ef6629-c701-41a6-a3e2-cd7dcb5b95a9",
        "parentId" : "a61b1ad8-c674-4828-bea4-a6e8e93c0cc3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this are used in .agg changes (which are on top of this). They aren't used in this PR, but were in the same file so left them.",
        "createdAt" : "2017-04-12T22:31:22Z",
        "updatedAt" : "2017-04-12T22:43:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff1a5f66fe4f7a225945e5a12c2b8063e163f954",
    "line" : 166,
    "diffHunk" : "@@ -1,1 +640,644 @@                    raise ValueError(\"cannot perform both aggregation \"\n                                     \"and transformation operations \"\n                                     \"simultaneously\")\n\n                return result, True"
  },
  {
    "id" : "cffbacdd-d3ae-4bdd-b3a4-c6fe3e6c78bb",
    "prId" : 17491,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17491#pullrequestreview-62168567",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f8858c5-9a81-45d0-adc9-a84d518ce295",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you put a bit more explanation that python scalar types are returned?",
        "createdAt" : "2017-09-12T15:28:37Z",
        "updatedAt" : "2017-09-12T15:42:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "05f8a6f6b192e9037747d2d0251b8506b53a70d1",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +893,897 @@    def tolist(self):\n        \"\"\"\n        return a list of the values; box to scalars\n        \"\"\"\n        return list(self.__iter__())"
  },
  {
    "id" : "b1ea86f4-6b6f-4fae-a32d-2a6c436501c5",
    "prId" : 17491,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17491#pullrequestreview-62290714",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86b1792c-b4a6-470b-8772-b6fe30de582f",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "For the `tolist` implementation, this seems a bit double work: values are converted to list, then iterateted over, and then again converted to list.",
        "createdAt" : "2017-09-12T15:30:00Z",
        "updatedAt" : "2017-09-12T15:42:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "3cde0510-5181-4265-82e0-c0647710d861",
        "parentId" : "86b1792c-b4a6-470b-8772-b6fe30de582f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "fixed",
        "createdAt" : "2017-09-12T23:01:27Z",
        "updatedAt" : "2017-09-12T23:01:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "05f8a6f6b192e9037747d2d0251b8506b53a70d1",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +904,908 @@            return (_maybe_box_datetimelike(x) for x in self._values)\n        else:\n            return iter(self._values.tolist())\n\n    @cache_readonly"
  },
  {
    "id" : "f2231ca7-64ba-4824-a3bc-aa8cea612709",
    "prId" : 19552,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19552#pullrequestreview-94671372",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32b237a9-5d37-4ad0-bb0b-960c2116ec44",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actuallly I think this should be a KeyError. can you do another PR to fix?",
        "createdAt" : "2018-02-07T11:14:32Z",
        "updatedAt" : "2018-02-07T11:14:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d142bc173f43638e2601d40dcb13d7f3028b45e0",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +395,399 @@                    elif isinstance(obj, ABCDataFrame) and \\\n                            k not in obj.columns:\n                        raise ValueError(\n                            \"Column '{col}' does not exist!\".format(col=k))\n"
  },
  {
    "id" : "ce7b7817-6d13-4310-822f-75e07ca41f96",
    "prId" : 20796,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20796#pullrequestreview-123851932",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbb34b60-3537-40d7-ab2d-1da3dd239100",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here on the impl, noting that we are explicity making element iterators",
        "createdAt" : "2018-05-08T10:32:56Z",
        "updatedAt" : "2018-12-24T01:37:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "466186df-dfc3-4a5f-be2c-bec1f114bd8a",
        "parentId" : "dbb34b60-3537-40d7-ab2d-1da3dd239100",
        "authorId" : "073065c9-84be-4b9e-82f5-b66208fa9843",
        "body" : "Added. If I understood you correctly what you are asking for.",
        "createdAt" : "2018-05-29T05:32:57Z",
        "updatedAt" : "2018-12-24T01:37:36Z",
        "lastEditedBy" : "073065c9-84be-4b9e-82f5-b66208fa9843",
        "tags" : [
        ]
      }
    ],
    "commit" : "766ba8f257efd683a09db2e1b768140afdf34090",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1074,1078 @@        \"\"\"\n        # We are explicity making element iterators.\n        if is_datetimelike(self._values):\n            return map(com.maybe_box_datetimelike, self._values)\n        elif is_extension_array_dtype(self._values):"
  },
  {
    "id" : "d9b7b66d-f460-42d6-bffe-86d6a8442ae9",
    "prId" : 20796,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20796#pullrequestreview-139838370",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65f2c723-e0f5-427d-b3be-077986366efd",
        "parentId" : null,
        "authorId" : "073065c9-84be-4b9e-82f5-b66208fa9843",
        "body" : "Maybe the issue is here. Because DataFrame wants Python types, we have to convert from numpy to Python types. Before, this was done inside C (inside tolist call), now it is done in Python.\r\n\r\nSo in some way, this might require numpy to have an iterator reading out Python values, implemented in C, to make this same efficiency.",
        "createdAt" : "2018-05-29T10:54:03Z",
        "updatedAt" : "2018-12-24T01:37:36Z",
        "lastEditedBy" : "073065c9-84be-4b9e-82f5-b66208fa9843",
        "tags" : [
        ]
      },
      {
        "id" : "c3931b00-6856-4ffe-8f07-6cd931cdb7cd",
        "parentId" : "65f2c723-e0f5-427d-b3be-077986366efd",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "I would say that even leaving aside language differences, we are now making ``len(self._values)`` separate calls rather than a single one. We know numpy indexing has overhead, and I think this is perfectly acceptable.\r\n\r\n**EDIT** I was missing the point, see my [last comment](https://github.com/pandas-dev/pandas/pull/20796#issuecomment-407388461).",
        "createdAt" : "2018-07-24T11:04:18Z",
        "updatedAt" : "2018-12-24T01:37:36Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "766ba8f257efd683a09db2e1b768140afdf34090",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1079,1083 @@            return iter(self._values)\n        else:\n            return map(self._values.item, range(self._values.size))\n\n    @cache_readonly"
  },
  {
    "id" : "9a00396c-549b-4af2-9aa8-6c73db09073e",
    "prId" : 20796,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20796#pullrequestreview-185401091",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d270543-24ac-4634-b274-8be55cd29f0f",
        "parentId" : null,
        "authorId" : "073065c9-84be-4b9e-82f5-b66208fa9843",
        "body" : "Ha, I am looking at this now and I do not get anymore why we are mapping over a range here? We should map over values of `self._values` to cast them to Python using `self._values.item`. Was this my original code?",
        "createdAt" : "2018-12-16T18:48:10Z",
        "updatedAt" : "2018-12-24T01:37:36Z",
        "lastEditedBy" : "073065c9-84be-4b9e-82f5-b66208fa9843",
        "tags" : [
        ]
      },
      {
        "id" : "38646fbc-ede3-4d1a-bdc8-e022ce620d7f",
        "parentId" : "5d270543-24ac-4634-b274-8be55cd29f0f",
        "authorId" : "696b0401-2fad-49d5-8320-5543e6985adb",
        "body" : "Yeah, [here's](https://github.com/pandas-dev/pandas/commit/2773e3473cbf0a6cc875dc7c065172b7656f1f53) your commit.",
        "createdAt" : "2018-12-16T19:15:21Z",
        "updatedAt" : "2018-12-24T01:37:36Z",
        "lastEditedBy" : "696b0401-2fad-49d5-8320-5543e6985adb",
        "tags" : [
        ]
      },
      {
        "id" : "f4cb6eef-72ae-4bd9-ae1a-afbf15779297",
        "parentId" : "5d270543-24ac-4634-b274-8be55cd29f0f",
        "authorId" : "073065c9-84be-4b9e-82f5-b66208fa9843",
        "body" : "Oh, I know. `item` wants an index of the item you want to get back.",
        "createdAt" : "2018-12-16T19:50:31Z",
        "updatedAt" : "2018-12-24T01:37:36Z",
        "lastEditedBy" : "073065c9-84be-4b9e-82f5-b66208fa9843",
        "tags" : [
        ]
      }
    ],
    "commit" : "766ba8f257efd683a09db2e1b768140afdf34090",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1079,1083 @@            return iter(self._values)\n        else:\n            return map(self._values.item, range(self._values.size))\n\n    @cache_readonly"
  },
  {
    "id" : "c76e86ce-fa9b-444e-a404-52bc435ab9f5",
    "prId" : 23623,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23623#pullrequestreview-178697400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb4e2da8-300f-4026-8f54-9b0644ee87d8",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would add here explicitly in the text a reference to `array` being the equivalent in case you always want a no-copy array-like (I know it is already in the See Also, but I think it would be nice to have it more explicit here as well)",
        "createdAt" : "2018-11-27T20:36:55Z",
        "updatedAt" : "2018-11-29T12:19:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9eee65e64ae815b320f5a8bd3a8701e264f15f6",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +871,875 @@        expensive. When you need a no-copy reference to the underlying data,\n        :attr:`Series.array` should be used instead.\n\n        This table lays out the different dtypes and return types of\n        ``to_numpy()`` for various dtypes within pandas."
  },
  {
    "id" : "6bbb1ca9-97a5-4cce-ac19-395aefb37d40",
    "prId" : 23801,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23801#pullrequestreview-185858795",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8899ebe2-2ce2-4deb-a0b8-81510bd08c54",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@datapythonista is this the correct format?",
        "createdAt" : "2018-12-17T13:05:43Z",
        "updatedAt" : "2018-12-21T16:05:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "593e7f24-ab23-44d3-983f-772494fb4b89",
        "parentId" : "8899ebe2-2ce2-4deb-a0b8-81510bd08c54",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "looks good, but can you use `int or array of int` (I'd like to parse at some point the types from these, so I prefer the type name `int` over `ints`)",
        "createdAt" : "2018-12-18T00:17:58Z",
        "updatedAt" : "2018-12-21T16:05:07Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "c09a4117be7e763680091cd5180f92d1c34dcd0c",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1353,1357 @@        int or array of int\n            A scalar or array of insertion points with the\n            same shape as `value`.\n\n            .. versionchanged :: 0.24.0"
  },
  {
    "id" : "9a374ee8-f90b-43f3-a3ea-ba3f4faa01ba",
    "prId" : 24293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24293#pullrequestreview-185365081",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db1e1901-61f5-4dd2-85ee-ae0fd7c060a6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should think about wether we can / should move these checks into the nanops themselves",
        "createdAt" : "2018-12-15T19:10:28Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d6494c71-6a8b-4fb8-b67e-c1f594e6dad0",
        "parentId" : "db1e1901-61f5-4dd2-85ee-ae0fd7c060a6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "previously discussed, this check is only for 1-d objects where `axis` is a dummy attribute",
        "createdAt" : "2018-12-15T19:47:19Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4028a14ef585dae19805f05db74ad1495e09e8",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +1085,1089 @@        numpy.ndarray.argmin\n        \"\"\"\n        nv.validate_minmax_axis(axis)\n        return nanops.nanargmin(self._values, skipna=skipna)\n"
  },
  {
    "id" : "e245e23c-515f-432a-bb0c-ad8d08671f45",
    "prId" : 24293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24293#pullrequestreview-187634498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ac51390-0573-4083-9ff2-cb7af14389a1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use **kwargs I think is consistent with how we do this elsewhere, IOW we don't explicity list the numpy support args (basically remove axis)",
        "createdAt" : "2018-12-23T19:15:44Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ed96725f-a339-4542-b534-9ec1c7e8f66c",
        "parentId" : "8ac51390-0573-4083-9ff2-cb7af14389a1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Adding kwargs kinda makes sense (as long as we dont ignore them silently), but taking axis out seems weird; a big part of the goal is to make the signatures match across the different classes",
        "createdAt" : "2018-12-23T22:14:34Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "33b710fe-f01f-467a-8f2f-1b769b5bde73",
        "parentId" : "8ac51390-0573-4083-9ff2-cb7af14389a1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "look at the signatures in Series\r\nthat is what we should be matching",
        "createdAt" : "2018-12-23T22:27:50Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5e0d7412-b7d1-416f-b520-67cc97f41268",
        "parentId" : "8ac51390-0573-4083-9ff2-cb7af14389a1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "right, the series reduction method have `axis` in their sigatures\r\n\r\n```\r\n>>> inspect.getargspec(pd.Series.max)\r\nArgSpec(args=['self', 'axis', 'skipna', 'level', 'numeric_only'], varargs=None, keywords='kwargs', defaults=(None, None, None, None))\r\n```",
        "createdAt" : "2018-12-23T22:34:59Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4028a14ef585dae19805f05db74ad1495e09e8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +974,978 @@        return not self.size\n\n    def max(self, axis=None, skipna=True):\n        \"\"\"\n        Return the maximum value of the Index."
  },
  {
    "id" : "32a06135-a361-45d1-a2fc-6f98fac29145",
    "prId" : 24293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24293#pullrequestreview-187630325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25b2ffe0-21dd-40aa-a56f-d9be3c18a7dd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "also we have similar things in pandas/core/base, these should change as well.",
        "createdAt" : "2018-12-23T19:16:03Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4028a14ef585dae19805f05db74ad1495e09e8",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +978,982 @@        Return the maximum value of the Index.\n\n        Parameters\n        ----------\n        axis : int, optional"
  },
  {
    "id" : "3233dfab-db70-49ee-9316-73f2343b0526",
    "prId" : 24293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24293#pullrequestreview-188183055",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39ce4d36-0c4b-43d6-9049-f7f1b26f0dff",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should be consisten about the See Also, e.g. make sure in all, and add a refernce to the Series.min function as well (as appropriate)",
        "createdAt" : "2018-12-27T21:52:32Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4028a14ef585dae19805f05db74ad1495e09e8",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1024,1028 @@        skipna : bool, default True\n\n        See Also\n        --------\n        numpy.ndarray.argmax"
  },
  {
    "id" : "b19dc22f-47d9-41d7-8749-336e1ccb8887",
    "prId" : 24341,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24341#pullrequestreview-186255873",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0af5e071-a3e3-4f77-b652-abb36ab86edd",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Note that the *default* behavior right now is the same as `dtype=\"datetime64[ns]\"`, i.e. the timezone info is lost. I don't think that's what we want, but I'm waiting on #24024 to be done before making that change.\r\n\r\nI also have a branch (https://github.com/TomAugspurger/pandas/pull/new/dt-array-3) that's deprecating the behavior for Series.__array__ and Index.__array__ returning datetime64[ns] for tz-aware values. That's currently blocked by #24024.",
        "createdAt" : "2018-12-18T19:59:45Z",
        "updatedAt" : "2018-12-18T22:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a61b1adc01540416cb8fad4c2be519cf5345ae7c",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +913,917 @@\n        >>> ser = pd.Series(pd.date_range('2000', periods=2, tz=\"CET\"))\n        >>> ser.to_numpy(dtype=object)\n        array([Timestamp('2000-01-01 00:00:00+0100', tz='CET', freq='D'),\n               Timestamp('2000-01-02 00:00:00+0100', tz='CET', freq='D')],"
  },
  {
    "id" : "fdb2972c-9284-43cc-8cc8-79f42193ad5d",
    "prId" : 24341,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24341#pullrequestreview-186312107",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7244692-e12f-4dae-a22d-aac633c12c2e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "technically this could cause a copy, right? so should we set copy=False if ``dtype`` is not None?",
        "createdAt" : "2018-12-18T21:08:53Z",
        "updatedAt" : "2018-12-18T22:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "970f5a7b-4918-43dd-9a34-bbff432b81a9",
        "parentId" : "c7244692-e12f-4dae-a22d-aac633c12c2e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Correct, we may be double copying. I'm not quite sure how to detect that. I'm not sure how to best handle this.\r\n\r\nOne option I considered is adding a method to the EA interface `_to_numpy` that returns `(ndarray, did_copy)`. Then this could be written as\r\n\r\n```python\r\nif is_extension_array_dtype(self.dtype):\r\n    result, copied = self.array._to_numpy(dtype, copy)\r\n\r\nif copy and not copied:\r\n    return result\r\n```\r\n\r\nDo you think avoiding the double-copy is worth that complexity? Or perhaps there's a cleaner way I haven't thought of.",
        "createdAt" : "2018-12-18T21:14:55Z",
        "updatedAt" : "2018-12-18T22:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b902c2e2-ad51-495e-b052-6b85fd6d5ffa",
        "parentId" : "c7244692-e12f-4dae-a22d-aac633c12c2e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no ok for now, though maybe add a comment. note that @jbrockmendel basically does this in the in various parts of the datetimelike constructors.",
        "createdAt" : "2018-12-18T22:26:49Z",
        "updatedAt" : "2018-12-18T22:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a61b1adc01540416cb8fad4c2be519cf5345ae7c",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +931,935 @@            # TODO(DatetimeArray): remove the second clause.\n            # TODO(GH-24345): Avoid potential double copy\n            result = np.asarray(self._values, dtype=dtype)\n        else:\n            result = self._values"
  }
]