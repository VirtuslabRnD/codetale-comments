[
  {
    "id" : "0fda4ad8-fe1a-45f8-96d3-c87705256b3b",
    "prId" : 4092,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ba0c6bb-cd03-4841-ac19-b00e56ec0998",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "should this be `super(PandasObject, self).__repr__()`?\n",
        "createdAt" : "2013-07-01T03:02:27Z",
        "updatedAt" : "2013-07-01T22:09:33Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "012308e2-f6bb-4507-b0f1-f06bb72c18a4",
        "parentId" : "7ba0c6bb-cd03-4841-ac19-b00e56ec0998",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "No. That would be an infinite loop. (because StringMixin calls `__str__`, etc.) That's the only awkward part of this setup...but for most PandasObjects, it works out okay.\n",
        "createdAt" : "2013-07-01T03:03:52Z",
        "updatedAt" : "2013-07-01T22:09:33Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "600a4093-251a-46b6-acab-dd1ca4cda2f3",
        "parentId" : "7ba0c6bb-cd03-4841-ac19-b00e56ec0998",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "oh whoops blah sorry\n",
        "createdAt" : "2013-07-01T03:04:31Z",
        "updatedAt" : "2013-07-01T22:09:33Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5583141404ddf91516e70dade7942c315cb3646",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +56,60 @@        \"\"\"\n        # Should be overwritten by base classes\n        return object.__repr__(self)"
  },
  {
    "id" : "d45b69f7-129c-447e-b053-e9c5c900a739",
    "prId" : 6380,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87e0af26-cf1e-4f63-9703-0d3c881330c1",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "Did you mean to use `@wraps` here?\n",
        "createdAt" : "2014-02-18T00:13:29Z",
        "updatedAt" : "2014-02-18T00:26:28Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "7cdc7fb6-fdee-42ed-bd39-8643f30d0417",
        "parentId" : "87e0af26-cf1e-4f63-9703-0d3c881330c1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think I originally did, but sort of did it 'manually' by assigning name/doc string....bad?\n",
        "createdAt" : "2014-02-18T00:18:56Z",
        "updatedAt" : "2014-02-18T00:26:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "92daab15-c183-4414-911a-2ffca41180df",
        "parentId" : "87e0af26-cf1e-4f63-9703-0d3c881330c1",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "Looking at the source for `wraps` it basically does that ... only diff is that it updates the `__module__` attribute and copies the `__dict__` attribute. Not \"bad\" per se.\n",
        "createdAt" : "2014-02-18T00:29:55Z",
        "updatedAt" : "2014-02-18T00:30:26Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "1e5d4386-b479-4076-938c-aa2d99928aa8",
        "parentId" : "87e0af26-cf1e-4f63-9703-0d3c881330c1",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "This is fine ... I was just asking.\n",
        "createdAt" : "2014-02-18T00:30:46Z",
        "updatedAt" : "2014-02-18T00:30:46Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "6590fc0ffa41b6aba02760c978eb84d07063e4bb",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +205,209 @@def _field_accessor(name, docstring=None):\n    op_accessor = '_{0}'.format(name)\n    def f(self):\n        return self._ops_compat(name,op_accessor)\n"
  },
  {
    "id" : "a2d3397e-78eb-4c0f-b77b-9202f08c76f1",
    "prId" : 7424,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a48f1d6f-1905-4d8a-a03a-55f9461497ee",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "same here\n",
        "createdAt" : "2014-06-17T12:52:03Z",
        "updatedAt" : "2014-06-17T12:52:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "26139f3804cdc25d29325972a24c55e10cd2567f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +264,268 @@            Rather than count values, group them into half-open bins,\n            a convenience for pd.cut, only works with numeric data\n        dropna : boolean, default False\n            Don't include counts of NaN\n"
  },
  {
    "id" : "37e808fd-9a5e-42a2-b89d-3e1ac41ce93e",
    "prId" : 7424,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8583384-f456-439c-8abc-68147ed93360",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Should add explanation of the new parameter (just as in `value_counts`)\n",
        "createdAt" : "2014-06-17T12:53:16Z",
        "updatedAt" : "2014-06-17T12:53:16Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d4ac8b62-e782-45e4-ab55-4c99cb70e73f",
        "parentId" : "d8583384-f456-439c-8abc-68147ed93360",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "that looks right (should be `True`) as then keeps the API the same. you want to fix?\n",
        "createdAt" : "2014-06-17T12:53:46Z",
        "updatedAt" : "2014-06-17T12:53:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "26139f3804cdc25d29325972a24c55e10cd2567f",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +290,294 @@        \"\"\"\n        Return count of unique elements in the object. Excludes NA values.\n\n        Returns\n        -------"
  },
  {
    "id" : "8b0470ef-c0a1-43a1-80dd-e8901299c387",
    "prId" : 7979,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5142763-3960-4105-bb5c-876f2e30cd5f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is very awkward to do. Maybe just put the immutable definition in base and override the definition in series. prob simpler?\n",
        "createdAt" : "2014-08-12T13:30:34Z",
        "updatedAt" : "2014-08-13T12:21:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "42aab36d-a115-4b3f-bba2-c1354ef1e924",
        "parentId" : "f5142763-3960-4105-bb5c-876f2e30cd5f",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "OK, fixed to centralize the logic to `IndexOpsMixin`. Even though `update_inplace` is defined in both `IndexOpsMixin` and `Index`, it will never called in `drop_duplicates` case (`Index.drop_duplicates` blocks `inplace` kw, and it is better for proper `docstring`)\n",
        "createdAt" : "2014-08-13T02:22:50Z",
        "updatedAt" : "2014-08-13T12:21:27Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "54d3e4d24190c80107516bb4b67bd7b594e75541",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +524,528 @@            return self._constructor(duplicated,\n                                     index=self.index).__finalize__(self)\n        except AttributeError:\n            from pandas.core.index import Index\n            return Index(duplicated)"
  },
  {
    "id" : "12b27cbd-47ad-484d-9a6f-534bdde45538",
    "prId" : 9112,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54ad851f-3812-4dea-8096-7dd4933b7ba0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok with changing to this, though using `(~values).astype(bool)` is quite common in the code base - if someone wanted to clean up this would be appreciated\n",
        "createdAt" : "2014-12-20T20:08:00Z",
        "updatedAt" : "2014-12-20T20:08:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "83fd0b47afb204aa1fd6b1c9054f45705282c880",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +488,492 @@    def drop_duplicates(self, take_last=False, inplace=False):\n        duplicated = self.duplicated(take_last=take_last)\n        result = self[np.logical_not(duplicated)]\n        if inplace:\n            return self._update_inplace(result)"
  },
  {
    "id" : "c0367cdb-0142-464c-b2bb-005b7715849b",
    "prId" : 9667,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84ad6d86-7ee4-4e08-ab76-aa3809ab0d14",
        "parentId" : null,
        "authorId" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "body" : "@shoyer @jreback I improved the checking here according to your recommendations - in the case of `Series` it's the same logic as before and in the case of `Index` it uses the `inferred_type` attribute \n",
        "createdAt" : "2015-04-02T19:16:52Z",
        "updatedAt" : "2015-04-10T07:28:25Z",
        "lastEditedBy" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f98bcb8b0ccfbf1b494154b22e2d455c584a1026",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +514,518 @@                                 \"values (i.e. inferred_type is 'string')\")\n        return StringMethods(self)\n\n    str = AccessorProperty(StringMethods, _make_str_accessor)\n"
  },
  {
    "id" : "0a29a14d-2ec1-48e5-b271-2e323bcd1e03",
    "prId" : 10031,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "713e6eb4-ffd9-400d-8c29-f23968bcff25",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I don't think you can accept `mixed-integer`, as these are in general python integer objects which need stringification first (which we _could_ do, but that's a separate issue).\n\n```\nIn [10]: pd.lib.infer_dtype([1,2,'a'])\nOut[10]: 'mixed-integer'\n```\n",
        "createdAt" : "2015-05-05T10:49:07Z",
        "updatedAt" : "2015-05-05T10:49:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dcb5939c-877f-4f4c-a434-6dab40331bd0",
        "parentId" : "713e6eb4-ffd9-400d-8c29-f23968bcff25",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "@jreback It is to be compat with current `Series` behavior. In above case, `Series.str` is applied to all the elements and leave non-str as `NaN`.\n\n```\ns = pd.Series([1, 2, 'a'])\ns.str.len()\n# 0   NaN\n# 1   NaN\n# 2     1\n# dtype: float64\n```\n",
        "createdAt" : "2015-05-06T02:41:08Z",
        "updatedAt" : "2015-05-06T02:41:08Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "2b5af9a5-6fe2-4d10-a8b7-18afda8a302e",
        "parentId" : "713e6eb4-ffd9-400d-8c29-f23968bcff25",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i c...ok\n",
        "createdAt" : "2015-05-06T10:39:31Z",
        "updatedAt" : "2015-05-06T10:39:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "84afe26aa513c29f8511f82dc2dd1679cb3d9176",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +523,527 @@            if self.inferred_type not in allowed_types:\n                message = (\"Can only use .str accessor with string values \"\n                           \"(i.e. inferred_type is 'string', 'unicode' or 'mixed')\")\n                raise AttributeError(message)\n            if self.nlevels > 1:"
  },
  {
    "id" : "ae8c257e-b0f5-49df-8032-d010e79602a1",
    "prId" : 11603,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2469297-b48d-409f-9bc5-5bf21458085d",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "I would leave this whole block indented (to keep the code formatted nicely) but use `textwrap.dedent`: https://docs.python.org/2/library/textwrap.html#textwrap.dedent\n",
        "createdAt" : "2015-11-25T23:11:47Z",
        "updatedAt" : "2015-12-19T13:51:47Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "7395fd98-aa03-4935-9aef-34e439f1c4db",
        "parentId" : "a2469297-b48d-409f-9bc5-5bf21458085d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I couldn't get this to work properly when I was doing Appender. It was offseting slightly. This doc-string stuff is a PITA.\n",
        "createdAt" : "2015-11-25T23:14:26Z",
        "updatedAt" : "2015-12-19T13:51:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f61e429f-4d5b-4956-aaf3-430c1f046a17",
        "parentId" : "a2469297-b48d-409f-9bc5-5bf21458085d",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "agreed its a PITA\n",
        "createdAt" : "2015-11-25T23:24:54Z",
        "updatedAt" : "2015-12-19T13:51:47Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1890a88d4d1b2926e45f631330f6191642bef773",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +330,334 @@        raise AbstractMethodError(self)\n\n    _agg_doc = \"\"\"Aggregate using input function or dict of {column -> function}\n\nParameters"
  }
]