[
  {
    "id" : "2784553a-fa2d-4934-ab18-072c9fd84c74",
    "prId" : 16968,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16968#pullrequestreview-67256739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "rather than do this (which is incorrect because the result doesn't have the correct index).\r\n\r\njust change next statement to \r\n\r\n```\r\nif len(df) and values is None:\r\n....\r\n```",
        "createdAt" : "2017-10-02T12:47:23Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6e0b260c-e12a-4d8e-99e2-b48b7b0360c9",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "body" : "I think I tried that and got an assertion error because the test was using a new empty dataframe as expected value, and the return value was an empty dataframe with a different index. I'll check again, and if it still breaks I'll change the expected value accordingly, assuming no other tests break.",
        "createdAt" : "2017-10-02T15:17:17Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "tags" : [
        ]
      },
      {
        "id" : "b65946bc-6bb1-4fd1-944d-d8bc45f4837a",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "body" : "Changing the statement to `if len(df) and values is None:` stills makes the crosstab raise the ValueError I'm implementing in this PR, because in this test len(df) is 0 and values IS None, so when it falls to:\r\n``` python\r\nelse:\r\n        df['__dummy__'] = values\r\n        kwargs = {'aggfunc': aggfunc}\r\n```\r\nit's basically doing  `df['__dummy__'] = None` which is what raises the error.\r\n\r\nWhat I think would fix it and preserve the index would be this:\r\n``` python\r\nif not len(df):\r\n    return df\r\n```",
        "createdAt" : "2017-10-02T15:45:01Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "tags" : [
        ]
      },
      {
        "id" : "26d00219-a8d8-48a9-ba39-96d5428ef68e",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see my comment below. ",
        "createdAt" : "2017-10-02T15:47:59Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "759926a0-f981-4d4c-8f8a-9663be8b754e",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually just return did here i think is ok (and u had that before)\r\n\r\nchange and ping on green",
        "createdAt" : "2017-10-03T08:19:42Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "344a15dd-b73d-4fc0-a228-dbd11ae5b749",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "body" : "I'm sorry, I'm not sure I understand what you mean. Should I change it back to return an empty DataFrame?",
        "createdAt" : "2017-10-04T15:13:58Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "tags" : [
        ]
      },
      {
        "id" : "eb930059-0873-4234-8609-ff4ecae09569",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no change back to \r\n\r\n```\r\nif not len(df)\r\n    return df\r\n```\r\nyou need to return the DataFrame with the correct index.",
        "createdAt" : "2017-10-05T00:14:55Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d5b6c879-90e1-413d-acae-61df715a3278",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "body" : "Ok, changed it back :)",
        "createdAt" : "2017-10-05T02:32:33Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "tags" : [
        ]
      }
    ],
    "commit" : "e86db7f3e0adf93c1ce94e31a4ff2ab4748ce702",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +455,459 @@    from pandas import DataFrame\n    df = DataFrame(data, index=common_idx)\n    if not len(df):\n        return DataFrame(index=common_idx)\n"
  },
  {
    "id" : "2b35560f-5be8-4d3b-9007-108898ee1530",
    "prId" : 17011,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17011#pullrequestreview-50858117",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf47b1f6-7a7c-44bf-8de1-dc2336e5bed9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think might be nicer to fix ``_get_combined_index`` to ignore ``None`` in the array",
        "createdAt" : "2017-07-18T11:44:52Z",
        "updatedAt" : "2017-07-19T09:29:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "63f1747d-04d0-48b5-b8fd-9920209efb16",
        "parentId" : "bf47b1f6-7a7c-44bf-8de1-dc2336e5bed9",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Not a fan of this solution (the list comprehension would look only slightly better). What about adding a new method ``_get_objs_combined_index`` which gets a list of objects (with or without index) and does the above? It would also be used in the ``DataFrame`` constructor.",
        "createdAt" : "2017-07-18T17:42:38Z",
        "updatedAt" : "2017-07-19T09:29:30Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "302b5b2c-a8e1-4ea9-b793-649e4b57b7fc",
        "parentId" : "bf47b1f6-7a7c-44bf-8de1-dc2336e5bed9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "let's see what that looks like / simplifies as a separate PR",
        "createdAt" : "2017-07-19T09:57:13Z",
        "updatedAt" : "2017-07-19T09:57:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5085d22557f4a54a83eede6fd277aaded652e6c",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +495,499 @@    colnames = _get_names(columns, colnames, prefix='col')\n\n    obs_idxes = [obj.index for objs in (index, columns) for obj in objs\n                 if hasattr(obj, 'index')]\n    if obs_idxes:"
  },
  {
    "id" : "77ddbcf2-1aed-41eb-85d9-6486171373ee",
    "prId" : 17011,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17011#pullrequestreview-51441024",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1e78104-1088-496d-9e0b-911efcd5ea11",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you shouldn't need the astype, fillna already does inference. or does something break?",
        "createdAt" : "2017-07-19T09:54:28Z",
        "updatedAt" : "2017-07-19T09:57:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b4fdc1c6-9f06-42ff-87cd-2729c79da4fa",
        "parentId" : "d1e78104-1088-496d-9e0b-911efcd5ea11",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this needed when not margins as well?",
        "createdAt" : "2017-07-19T09:56:26Z",
        "updatedAt" : "2017-07-19T09:57:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "136de446-b705-4563-8ebe-fdaa884808b0",
        "parentId" : "d1e78104-1088-496d-9e0b-911efcd5ea11",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "> fillna already does inference\r\n\r\nNot following you... if ``table`` is float, ``fillna`` can't know that it in fact contains (``NaN``s and) ints\r\n\r\n\r\n> is this needed when not margins as well?\r\n\r\nNow that I added the ``fill_value`` to the ``pivot_table`` call above, this shouldn't be needed at all, except that, due to #17013, ``table`` is still float when ``margins=True``.",
        "createdAt" : "2017-07-19T12:15:02Z",
        "updatedAt" : "2017-07-19T12:15:02Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "b01a3edc-4662-4592-bfd5-4f41763d2368",
        "parentId" : "d1e78104-1088-496d-9e0b-911efcd5ea11",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok",
        "createdAt" : "2017-07-21T10:37:25Z",
        "updatedAt" : "2017-07-21T10:37:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5085d22557f4a54a83eede6fd277aaded652e6c",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +526,530 @@    # GH 17013:\n    if values is None and margins:\n        table = table.fillna(0).astype(np.int64)\n\n    # Post-process"
  },
  {
    "id" : "01872d78-e815-41c1-96ad-d157e8c3a559",
    "prId" : 20583,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20583#pullrequestreview-115550632",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3629f131-86c9-4fca-b5ac-8d19bd6a5d0e",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Need to think about this a bit. Are we all OK with \"overloading\" `dropna` to serve two purposes? I think it's ok...",
        "createdAt" : "2018-04-26T02:01:24Z",
        "updatedAt" : "2018-05-01T10:07:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c76e12da-46d9-496b-9d63-01f288e499ec",
        "parentId" : "3629f131-86c9-4fca-b5ac-8d19bd6a5d0e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes, but that's the meaning of the ``dropna`` now here anyhow",
        "createdAt" : "2018-04-26T12:27:46Z",
        "updatedAt" : "2018-05-01T10:07:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdf7525812ca670f9406ab8df333030d36d30947",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +80,84 @@        values = list(values)\n\n    grouped = data.groupby(keys, observed=dropna)\n    agged = grouped.agg(aggfunc)\n"
  },
  {
    "id" : "249778b3-edf3-4cd0-a01b-25f9fb69a9e9",
    "prId" : 20583,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20583#pullrequestreview-115407912",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c07ad27-a42c-450d-867d-fb7ca7b03709",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "`observed=True` for these changes are all backwards compatible?",
        "createdAt" : "2018-04-26T02:02:50Z",
        "updatedAt" : "2018-05-01T10:07:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdf7525812ca670f9406ab8df333030d36d30947",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +245,249 @@\n        if len(rows) > 0:\n            margin = data[rows + values].groupby(\n                rows, observed=observed).agg(aggfunc)\n            cat_axis = 1"
  },
  {
    "id" : "e9f52432-4c50-479a-bfd1-1b9721df05a1",
    "prId" : 21252,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21252#pullrequestreview-126365450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec7d0cc4-2a0f-4aaa-84ce-98654c04a8d3",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I have the feeling this workaround would not be needed if the bug in groupby would be solved? (https://github.com/pandas-dev/pandas/issues/21151)",
        "createdAt" : "2018-05-31T10:56:59Z",
        "updatedAt" : "2018-06-07T22:04:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b479b4a5-37a4-4c13-9ae7-89bc73750fe2",
        "parentId" : "ec7d0cc4-2a0f-4aaa-84ce-98654c04a8d3",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback ?",
        "createdAt" : "2018-06-06T13:08:06Z",
        "updatedAt" : "2018-06-07T22:04:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "683fd9e578bdfcd03d222551429cbf0fdaa8d76f",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +84,88 @@    # group by the cartesian product of the grouper\n    # if we have a categorical\n    grouped = data.groupby(keys, observed=False)\n    agged = grouped.agg(aggfunc)\n    if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):"
  },
  {
    "id" : "e8d64d6c-0b22-4a0f-995c-b800e33b78af",
    "prId" : 28248,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28248#pullrequestreview-283571367",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b35dd95-5f52-4346-983a-44ad5b42abe3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here about what is going on",
        "createdAt" : "2019-09-04T12:15:52Z",
        "updatedAt" : "2019-11-23T20:43:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c957d01987bc8cce9a643f7b69ba4d1a0e8e8bc2",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +261,265 @@\n    row_names = result.index.names\n    try:\n        # check the result column and leave floats\n        for dtype in set(result.dtypes):"
  },
  {
    "id" : "2c854d3f-52bc-4fb8-bd2a-6636d9ffffc2",
    "prId" : 29656,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29656#pullrequestreview-317988415",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62928593-d8e6-412a-a403-21f1ef0c97d1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i see what you are doing here, i guess ok, this is slightly awkward because get_objs_combined_axis now can't take an empty list.",
        "createdAt" : "2019-11-16T20:49:14Z",
        "updatedAt" : "2019-11-16T20:49:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c43a25695668984f121c21c10dedeedb616c50d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +544,548 @@    common_idx = None\n    pass_objs = [x for x in index + columns if isinstance(x, (ABCSeries, ABCDataFrame))]\n    if pass_objs:\n        common_idx = get_objs_combined_axis(pass_objs, intersect=True, sort=False)\n"
  }
]