[
  {
    "id" : "2784553a-fa2d-4934-ab18-072c9fd84c74",
    "prId" : 16968,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16968#pullrequestreview-67256739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "rather than do this (which is incorrect because the result doesn't have the correct index).\r\n\r\njust change next statement to \r\n\r\n```\r\nif len(df) and values is None:\r\n....\r\n```",
        "createdAt" : "2017-10-02T12:47:23Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6e0b260c-e12a-4d8e-99e2-b48b7b0360c9",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "body" : "I think I tried that and got an assertion error because the test was using a new empty dataframe as expected value, and the return value was an empty dataframe with a different index. I'll check again, and if it still breaks I'll change the expected value accordingly, assuming no other tests break.",
        "createdAt" : "2017-10-02T15:17:17Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "tags" : [
        ]
      },
      {
        "id" : "b65946bc-6bb1-4fd1-944d-d8bc45f4837a",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "body" : "Changing the statement to `if len(df) and values is None:` stills makes the crosstab raise the ValueError I'm implementing in this PR, because in this test len(df) is 0 and values IS None, so when it falls to:\r\n``` python\r\nelse:\r\n        df['__dummy__'] = values\r\n        kwargs = {'aggfunc': aggfunc}\r\n```\r\nit's basically doing  `df['__dummy__'] = None` which is what raises the error.\r\n\r\nWhat I think would fix it and preserve the index would be this:\r\n``` python\r\nif not len(df):\r\n    return df\r\n```",
        "createdAt" : "2017-10-02T15:45:01Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "tags" : [
        ]
      },
      {
        "id" : "26d00219-a8d8-48a9-ba39-96d5428ef68e",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see my comment below. ",
        "createdAt" : "2017-10-02T15:47:59Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "759926a0-f981-4d4c-8f8a-9663be8b754e",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually just return did here i think is ok (and u had that before)\r\n\r\nchange and ping on green",
        "createdAt" : "2017-10-03T08:19:42Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "344a15dd-b73d-4fc0-a228-dbd11ae5b749",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "body" : "I'm sorry, I'm not sure I understand what you mean. Should I change it back to return an empty DataFrame?",
        "createdAt" : "2017-10-04T15:13:58Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "tags" : [
        ]
      },
      {
        "id" : "eb930059-0873-4234-8609-ff4ecae09569",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no change back to \r\n\r\n```\r\nif not len(df)\r\n    return df\r\n```\r\nyou need to return the DataFrame with the correct index.",
        "createdAt" : "2017-10-05T00:14:55Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d5b6c879-90e1-413d-acae-61df715a3278",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "body" : "Ok, changed it back :)",
        "createdAt" : "2017-10-05T02:32:33Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "tags" : [
        ]
      }
    ],
    "commit" : "e86db7f3e0adf93c1ce94e31a4ff2ab4748ce702",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +455,459 @@    from pandas import DataFrame\n    df = DataFrame(data, index=common_idx)\n    if not len(df):\n        return DataFrame(index=common_idx)\n"
  },
  {
    "id" : "2b35560f-5be8-4d3b-9007-108898ee1530",
    "prId" : 17011,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17011#pullrequestreview-50858117",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf47b1f6-7a7c-44bf-8de1-dc2336e5bed9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think might be nicer to fix ``_get_combined_index`` to ignore ``None`` in the array",
        "createdAt" : "2017-07-18T11:44:52Z",
        "updatedAt" : "2017-07-19T09:29:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "63f1747d-04d0-48b5-b8fd-9920209efb16",
        "parentId" : "bf47b1f6-7a7c-44bf-8de1-dc2336e5bed9",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Not a fan of this solution (the list comprehension would look only slightly better). What about adding a new method ``_get_objs_combined_index`` which gets a list of objects (with or without index) and does the above? It would also be used in the ``DataFrame`` constructor.",
        "createdAt" : "2017-07-18T17:42:38Z",
        "updatedAt" : "2017-07-19T09:29:30Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "302b5b2c-a8e1-4ea9-b793-649e4b57b7fc",
        "parentId" : "bf47b1f6-7a7c-44bf-8de1-dc2336e5bed9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "let's see what that looks like / simplifies as a separate PR",
        "createdAt" : "2017-07-19T09:57:13Z",
        "updatedAt" : "2017-07-19T09:57:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5085d22557f4a54a83eede6fd277aaded652e6c",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +495,499 @@    colnames = _get_names(columns, colnames, prefix='col')\n\n    obs_idxes = [obj.index for objs in (index, columns) for obj in objs\n                 if hasattr(obj, 'index')]\n    if obs_idxes:"
  },
  {
    "id" : "77ddbcf2-1aed-41eb-85d9-6486171373ee",
    "prId" : 17011,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17011#pullrequestreview-51441024",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1e78104-1088-496d-9e0b-911efcd5ea11",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you shouldn't need the astype, fillna already does inference. or does something break?",
        "createdAt" : "2017-07-19T09:54:28Z",
        "updatedAt" : "2017-07-19T09:57:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b4fdc1c6-9f06-42ff-87cd-2729c79da4fa",
        "parentId" : "d1e78104-1088-496d-9e0b-911efcd5ea11",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this needed when not margins as well?",
        "createdAt" : "2017-07-19T09:56:26Z",
        "updatedAt" : "2017-07-19T09:57:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "136de446-b705-4563-8ebe-fdaa884808b0",
        "parentId" : "d1e78104-1088-496d-9e0b-911efcd5ea11",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "> fillna already does inference\r\n\r\nNot following you... if ``table`` is float, ``fillna`` can't know that it in fact contains (``NaN``s and) ints\r\n\r\n\r\n> is this needed when not margins as well?\r\n\r\nNow that I added the ``fill_value`` to the ``pivot_table`` call above, this shouldn't be needed at all, except that, due to #17013, ``table`` is still float when ``margins=True``.",
        "createdAt" : "2017-07-19T12:15:02Z",
        "updatedAt" : "2017-07-19T12:15:02Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "b01a3edc-4662-4592-bfd5-4f41763d2368",
        "parentId" : "d1e78104-1088-496d-9e0b-911efcd5ea11",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok",
        "createdAt" : "2017-07-21T10:37:25Z",
        "updatedAt" : "2017-07-21T10:37:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5085d22557f4a54a83eede6fd277aaded652e6c",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +526,530 @@    # GH 17013:\n    if values is None and margins:\n        table = table.fillna(0).astype(np.int64)\n\n    # Post-process"
  }
]