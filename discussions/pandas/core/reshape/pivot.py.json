[
  {
    "id" : "2784553a-fa2d-4934-ab18-072c9fd84c74",
    "prId" : 16968,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16968#pullrequestreview-67256739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "rather than do this (which is incorrect because the result doesn't have the correct index).\r\n\r\njust change next statement to \r\n\r\n```\r\nif len(df) and values is None:\r\n....\r\n```",
        "createdAt" : "2017-10-02T12:47:23Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6e0b260c-e12a-4d8e-99e2-b48b7b0360c9",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "body" : "I think I tried that and got an assertion error because the test was using a new empty dataframe as expected value, and the return value was an empty dataframe with a different index. I'll check again, and if it still breaks I'll change the expected value accordingly, assuming no other tests break.",
        "createdAt" : "2017-10-02T15:17:17Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "tags" : [
        ]
      },
      {
        "id" : "b65946bc-6bb1-4fd1-944d-d8bc45f4837a",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "body" : "Changing the statement to `if len(df) and values is None:` stills makes the crosstab raise the ValueError I'm implementing in this PR, because in this test len(df) is 0 and values IS None, so when it falls to:\r\n``` python\r\nelse:\r\n        df['__dummy__'] = values\r\n        kwargs = {'aggfunc': aggfunc}\r\n```\r\nit's basically doing  `df['__dummy__'] = None` which is what raises the error.\r\n\r\nWhat I think would fix it and preserve the index would be this:\r\n``` python\r\nif not len(df):\r\n    return df\r\n```",
        "createdAt" : "2017-10-02T15:45:01Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "tags" : [
        ]
      },
      {
        "id" : "26d00219-a8d8-48a9-ba39-96d5428ef68e",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see my comment below. ",
        "createdAt" : "2017-10-02T15:47:59Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "759926a0-f981-4d4c-8f8a-9663be8b754e",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually just return did here i think is ok (and u had that before)\r\n\r\nchange and ping on green",
        "createdAt" : "2017-10-03T08:19:42Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "344a15dd-b73d-4fc0-a228-dbd11ae5b749",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "body" : "I'm sorry, I'm not sure I understand what you mean. Should I change it back to return an empty DataFrame?",
        "createdAt" : "2017-10-04T15:13:58Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "tags" : [
        ]
      },
      {
        "id" : "eb930059-0873-4234-8609-ff4ecae09569",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no change back to \r\n\r\n```\r\nif not len(df)\r\n    return df\r\n```\r\nyou need to return the DataFrame with the correct index.",
        "createdAt" : "2017-10-05T00:14:55Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d5b6c879-90e1-413d-acae-61df715a3278",
        "parentId" : "3082cd46-5ef9-48eb-96ac-ba96b80ae8f8",
        "authorId" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "body" : "Ok, changed it back :)",
        "createdAt" : "2017-10-05T02:32:33Z",
        "updatedAt" : "2017-10-08T16:21:21Z",
        "lastEditedBy" : "53a1cfa5-523e-40ca-9f94-50382296a039",
        "tags" : [
        ]
      }
    ],
    "commit" : "e86db7f3e0adf93c1ce94e31a4ff2ab4748ce702",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +455,459 @@    from pandas import DataFrame\n    df = DataFrame(data, index=common_idx)\n    if not len(df):\n        return DataFrame(index=common_idx)\n"
  },
  {
    "id" : "2b35560f-5be8-4d3b-9007-108898ee1530",
    "prId" : 17011,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17011#pullrequestreview-50858117",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf47b1f6-7a7c-44bf-8de1-dc2336e5bed9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think might be nicer to fix ``_get_combined_index`` to ignore ``None`` in the array",
        "createdAt" : "2017-07-18T11:44:52Z",
        "updatedAt" : "2017-07-19T09:29:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "63f1747d-04d0-48b5-b8fd-9920209efb16",
        "parentId" : "bf47b1f6-7a7c-44bf-8de1-dc2336e5bed9",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Not a fan of this solution (the list comprehension would look only slightly better). What about adding a new method ``_get_objs_combined_index`` which gets a list of objects (with or without index) and does the above? It would also be used in the ``DataFrame`` constructor.",
        "createdAt" : "2017-07-18T17:42:38Z",
        "updatedAt" : "2017-07-19T09:29:30Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "302b5b2c-a8e1-4ea9-b793-649e4b57b7fc",
        "parentId" : "bf47b1f6-7a7c-44bf-8de1-dc2336e5bed9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "let's see what that looks like / simplifies as a separate PR",
        "createdAt" : "2017-07-19T09:57:13Z",
        "updatedAt" : "2017-07-19T09:57:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5085d22557f4a54a83eede6fd277aaded652e6c",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +495,499 @@    colnames = _get_names(columns, colnames, prefix='col')\n\n    obs_idxes = [obj.index for objs in (index, columns) for obj in objs\n                 if hasattr(obj, 'index')]\n    if obs_idxes:"
  },
  {
    "id" : "77ddbcf2-1aed-41eb-85d9-6486171373ee",
    "prId" : 17011,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17011#pullrequestreview-51441024",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1e78104-1088-496d-9e0b-911efcd5ea11",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you shouldn't need the astype, fillna already does inference. or does something break?",
        "createdAt" : "2017-07-19T09:54:28Z",
        "updatedAt" : "2017-07-19T09:57:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b4fdc1c6-9f06-42ff-87cd-2729c79da4fa",
        "parentId" : "d1e78104-1088-496d-9e0b-911efcd5ea11",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this needed when not margins as well?",
        "createdAt" : "2017-07-19T09:56:26Z",
        "updatedAt" : "2017-07-19T09:57:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "136de446-b705-4563-8ebe-fdaa884808b0",
        "parentId" : "d1e78104-1088-496d-9e0b-911efcd5ea11",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "> fillna already does inference\r\n\r\nNot following you... if ``table`` is float, ``fillna`` can't know that it in fact contains (``NaN``s and) ints\r\n\r\n\r\n> is this needed when not margins as well?\r\n\r\nNow that I added the ``fill_value`` to the ``pivot_table`` call above, this shouldn't be needed at all, except that, due to #17013, ``table`` is still float when ``margins=True``.",
        "createdAt" : "2017-07-19T12:15:02Z",
        "updatedAt" : "2017-07-19T12:15:02Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "b01a3edc-4662-4592-bfd5-4f41763d2368",
        "parentId" : "d1e78104-1088-496d-9e0b-911efcd5ea11",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok",
        "createdAt" : "2017-07-21T10:37:25Z",
        "updatedAt" : "2017-07-21T10:37:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5085d22557f4a54a83eede6fd277aaded652e6c",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +526,530 @@    # GH 17013:\n    if values is None and margins:\n        table = table.fillna(0).astype(np.int64)\n\n    # Post-process"
  },
  {
    "id" : "01872d78-e815-41c1-96ad-d157e8c3a559",
    "prId" : 20583,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20583#pullrequestreview-115550632",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3629f131-86c9-4fca-b5ac-8d19bd6a5d0e",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Need to think about this a bit. Are we all OK with \"overloading\" `dropna` to serve two purposes? I think it's ok...",
        "createdAt" : "2018-04-26T02:01:24Z",
        "updatedAt" : "2018-05-01T10:07:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c76e12da-46d9-496b-9d63-01f288e499ec",
        "parentId" : "3629f131-86c9-4fca-b5ac-8d19bd6a5d0e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes, but that's the meaning of the ``dropna`` now here anyhow",
        "createdAt" : "2018-04-26T12:27:46Z",
        "updatedAt" : "2018-05-01T10:07:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdf7525812ca670f9406ab8df333030d36d30947",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +80,84 @@        values = list(values)\n\n    grouped = data.groupby(keys, observed=dropna)\n    agged = grouped.agg(aggfunc)\n"
  },
  {
    "id" : "249778b3-edf3-4cd0-a01b-25f9fb69a9e9",
    "prId" : 20583,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20583#pullrequestreview-115407912",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c07ad27-a42c-450d-867d-fb7ca7b03709",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "`observed=True` for these changes are all backwards compatible?",
        "createdAt" : "2018-04-26T02:02:50Z",
        "updatedAt" : "2018-05-01T10:07:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdf7525812ca670f9406ab8df333030d36d30947",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +245,249 @@\n        if len(rows) > 0:\n            margin = data[rows + values].groupby(\n                rows, observed=observed).agg(aggfunc)\n            cat_axis = 1"
  },
  {
    "id" : "e9f52432-4c50-479a-bfd1-1b9721df05a1",
    "prId" : 21252,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21252#pullrequestreview-126365450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec7d0cc4-2a0f-4aaa-84ce-98654c04a8d3",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I have the feeling this workaround would not be needed if the bug in groupby would be solved? (https://github.com/pandas-dev/pandas/issues/21151)",
        "createdAt" : "2018-05-31T10:56:59Z",
        "updatedAt" : "2018-06-07T22:04:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b479b4a5-37a4-4c13-9ae7-89bc73750fe2",
        "parentId" : "ec7d0cc4-2a0f-4aaa-84ce-98654c04a8d3",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback ?",
        "createdAt" : "2018-06-06T13:08:06Z",
        "updatedAt" : "2018-06-07T22:04:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "683fd9e578bdfcd03d222551429cbf0fdaa8d76f",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +84,88 @@    # group by the cartesian product of the grouper\n    # if we have a categorical\n    grouped = data.groupby(keys, observed=False)\n    agged = grouped.agg(aggfunc)\n    if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):"
  },
  {
    "id" : "e8d64d6c-0b22-4a0f-995c-b800e33b78af",
    "prId" : 28248,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28248#pullrequestreview-283571367",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b35dd95-5f52-4346-983a-44ad5b42abe3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here about what is going on",
        "createdAt" : "2019-09-04T12:15:52Z",
        "updatedAt" : "2019-11-23T20:43:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c957d01987bc8cce9a643f7b69ba4d1a0e8e8bc2",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +261,265 @@\n    row_names = result.index.names\n    try:\n        # check the result column and leave floats\n        for dtype in set(result.dtypes):"
  },
  {
    "id" : "2c854d3f-52bc-4fb8-bd2a-6636d9ffffc2",
    "prId" : 29656,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29656#pullrequestreview-317988415",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62928593-d8e6-412a-a403-21f1ef0c97d1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i see what you are doing here, i guess ok, this is slightly awkward because get_objs_combined_axis now can't take an empty list.",
        "createdAt" : "2019-11-16T20:49:14Z",
        "updatedAt" : "2019-11-16T20:49:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c43a25695668984f121c21c10dedeedb616c50d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +544,548 @@    common_idx = None\n    pass_objs = [x for x in index + columns if isinstance(x, (ABCSeries, ABCDataFrame))]\n    if pass_objs:\n        common_idx = get_objs_combined_axis(pass_objs, intersect=True, sort=False)\n"
  },
  {
    "id" : "f864f6e1-ff9d-494c-838c-13b579fd03c7",
    "prId" : 30928,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30928#pullrequestreview-345564104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a30660bb-fb10-49bb-a142-13ef5f484b74",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think you want `List[Label]` (import from pandas._typing) to allow anything column name, unless this really does have to be string-only",
        "createdAt" : "2020-01-20T22:12:52Z",
        "updatedAt" : "2020-02-02T19:24:01Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "fcd6f436-85ef-4378-8841-215aa2a489a0",
        "parentId" : "a30660bb-fb10-49bb-a142-13ef5f484b74",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i don't think this will matter until we type the signature, so ok with handling this as a followon.",
        "createdAt" : "2020-01-20T23:00:22Z",
        "updatedAt" : "2020-02-02T19:24:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c70230b902a9dc23b3fd0023d0b036fda762b374",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +429,433 @@\n    if values is None:\n        cols: List[str] = []\n        if index is None:\n            pass"
  },
  {
    "id" : "1eee3280-0853-4487-b6c7-bf96aa839aa8",
    "prId" : 30928,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30928#pullrequestreview-345564104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2877897-aa56-437b-8c3d-406be4a6d447",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "asa followon can you try to type tings in the signature",
        "createdAt" : "2020-01-20T22:59:45Z",
        "updatedAt" : "2020-02-02T19:24:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c70230b902a9dc23b3fd0023d0b036fda762b374",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +426,430 @@    if columns is None:\n        raise TypeError(\"pivot() missing 1 required argument: 'columns'\")\n    columns = columns if is_list_like(columns) else [columns]\n\n    if values is None:"
  },
  {
    "id" : "7d4f3071-df1e-48db-bc66-e550a0356ea9",
    "prId" : 31088,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31088#pullrequestreview-344260817",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6b40978-f84f-4d09-8342-e6bec0c2bb47",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Does this have any performance impacts?",
        "createdAt" : "2020-01-16T21:43:02Z",
        "updatedAt" : "2020-01-18T18:20:54Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "0d41a972-6c0c-4143-8485-292ea52cd916",
        "parentId" : "b6b40978-f84f-4d09-8342-e6bec0c2bb47",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "might be? i was thinking of it as well\r\n\r\nhow to measure it? do you mean create a giant mock dataset and time it? any suggestions? would like to test it out!",
        "createdAt" : "2020-01-16T21:47:54Z",
        "updatedAt" : "2020-01-18T18:20:54Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      },
      {
        "id" : "0cb25a35-e9ed-4acb-b8be-a0a3861c8c67",
        "parentId" : "b6b40978-f84f-4d09-8342-e6bec0c2bb47",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "We have asvs in benchmarks/reshape.py that would be good to run here at least",
        "createdAt" : "2020-01-16T21:49:39Z",
        "updatedAt" : "2020-01-18T18:20:54Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "68b23e7d-7af3-46a5-af22-900f9f7e2f80",
        "parentId" : "b6b40978-f84f-4d09-8342-e6bec0c2bb47",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "thanks! @WillAyd i am not very familiar with asv bench, but i see some tests starting with `time_pivot****`, shall I add a new test in there?",
        "createdAt" : "2020-01-16T21:54:33Z",
        "updatedAt" : "2020-01-18T18:20:54Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      },
      {
        "id" : "d3580ed8-6d63-4617-b089-efdf5aacf6b2",
        "parentId" : "b6b40978-f84f-4d09-8342-e6bec0c2bb47",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Run the existing ones first:\r\n\r\n```sh\r\ncd asv_bench\r\nasv continuous upstream/master HEAD -b reshape.PivotTable\r\n```",
        "createdAt" : "2020-01-16T21:56:12Z",
        "updatedAt" : "2020-01-18T18:20:54Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "3f595ab6-d8af-434d-a895-760707b7ae9e",
        "parentId" : "b6b40978-f84f-4d09-8342-e6bec0c2bb47",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "![Screen Shot 2020-01-16 at 10 58 20 PM](https://user-images.githubusercontent.com/9269816/72566218-b8dcc900-38b3-11ea-8e33-2e66e8cd39b6.png)\r\n\r\njust copied and pasted and tested a bit",
        "createdAt" : "2020-01-16T21:58:52Z",
        "updatedAt" : "2020-01-18T18:20:54Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      },
      {
        "id" : "84ea8c65-540c-4d3d-88af-c449a65f5c7d",
        "parentId" : "b6b40978-f84f-4d09-8342-e6bec0c2bb47",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "> Run the existing ones first:\r\n> \r\n> ```shell\r\n> cd asv_bench\r\n> asv continuous upstream/master HEAD -b reshape.PivotTable\r\n> ```\r\n\r\noops! thanks for the tip!! did not see it 😅 will run",
        "createdAt" : "2020-01-16T21:59:26Z",
        "updatedAt" : "2020-01-18T18:20:54Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      },
      {
        "id" : "3148f11b-d1e7-4c8f-8a07-0f118c7e6625",
        "parentId" : "b6b40978-f84f-4d09-8342-e6bec0c2bb47",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "running asv on current i get: `BENCHMARKS NOT SIGNIFICANTLY CHANGED.`\r\n\r\nbut i do find an issue with self-review, will investigate and fix tomorrow. thanks for the help on asv @WillAyd ",
        "createdAt" : "2020-01-16T22:31:46Z",
        "updatedAt" : "2020-01-18T18:20:54Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c01d714242c91a075c013c8666520d4a95b95300",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +341,345 @@                # GH31016 this is to calculate margin for each group, and assign\n                # corresponded key as index\n                transformed_piece = DataFrame(piece.apply(aggfunc)).T\n                transformed_piece.index = Index([all_key], name=piece.index.name)\n"
  },
  {
    "id" : "82ded620-82d6-4592-8590-bd65b58327af",
    "prId" : 31088,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31088#pullrequestreview-698264349",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a036e25-c1d9-44c4-b79a-09681bfb5574",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@charlesdong1991 what if piece.index is a MultiIndex?  .name here will be None.  Do we need to use .names somewhere?",
        "createdAt" : "2021-07-01T16:44:45Z",
        "updatedAt" : "2021-07-01T16:44:45Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "419ebf25-2ffe-42d4-955a-693bb46f4d4e",
        "parentId" : "4a036e25-c1d9-44c4-b79a-09681bfb5574",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "you are right, it will be `None` if it is a MultiIndex. Need to have a deeper look to see it is reasonable to use `.names` because if using it, then that's a frozen list iirc, and we could not assign to `index.name`. Also if a MI here, then maybe also need to use `MultiIndex` instead of `Index`.",
        "createdAt" : "2021-07-02T14:50:29Z",
        "updatedAt" : "2021-07-03T06:49:58Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c01d714242c91a075c013c8666520d4a95b95300",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +342,346 @@                # corresponded key as index\n                transformed_piece = DataFrame(piece.apply(aggfunc)).T\n                transformed_piece.index = Index([all_key], name=piece.index.name)\n\n                # append piece for margin into table_piece"
  },
  {
    "id" : "99751414-c68a-4789-b41c-562ada7b2ed7",
    "prId" : 31126,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31126#pullrequestreview-345560276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1324c3e-43d7-493d-92b8-99e1c381e01d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could be ArrayLike? (not sure it matters, but can update in followon if this works)",
        "createdAt" : "2020-01-20T15:38:43Z",
        "updatedAt" : "2020-01-22T21:38:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "36b602c0-bd6c-45e4-8821-bfbf8259b2ea",
        "parentId" : "c1324c3e-43d7-493d-92b8-99e1c381e01d",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "That would not work, because ``Union[List, Index]`` is the precise type of this.",
        "createdAt" : "2020-01-20T22:43:19Z",
        "updatedAt" : "2020-01-22T21:38:22Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "745d7e1f4b60fa508e8ab755075b0319a45505ab",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +374,378 @@    if len(cols) > 0:\n        # need to \"interleave\" the margins\n        margin_keys: Union[List, Index] = []\n\n        def _all_key():"
  },
  {
    "id" : "07c27518-530f-4af4-82bb-2093087adce8",
    "prId" : 32197,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32197#pullrequestreview-395420601",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58bf4f96-0979-4b07-8942-1eeaa794498e",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "if this is a required kwarg, should the Optional be removed from the signature?  cc @simonjayhawkins not sure how to handle this given that the default value is None",
        "createdAt" : "2020-04-09T19:43:53Z",
        "updatedAt" : "2020-05-18T19:53:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f5191307-9c75-4639-8c22-c8a5c7cf9e21",
        "parentId" : "58bf4f96-0979-4b07-8942-1eeaa794498e",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "There are a few considerations here. \r\n\r\n`Optional` is normally included to represent a keyword argument that defaults to None. Since `index` is a keyword argument, `columns` must be a keyword argument (non-default argument follows default argument). but because Label already includes None (due to an issue with Hashable) the Optional isn't actually required in this case (This is the reason to exclude Optional from aliases in general).\r\n\r\nIf Optional was omitted, this could add to the confusion.\r\n\r\nSince columns should allow None, if a column is named None. \r\n\r\nso the default and check here should probably be _lib.no_default.\r\n\r\n _lib.no_default currently resolves to Any (defined in cython with no stubs) so is compatible with anything.\r\n\r\nIf we typed _lib.no_default which is currently object() we wouldn't be able to type parameters precisely since object() wouldn't be compatible.  In the future we may wish to define using Enums but this would add to the noise of the function signature from an end user perspective.\r\n\r\nfrom https://www.python.org/dev/peps/pep-0484/#support-for-singleton-types-in-unions\r\n\r\n> To allow precise typing in such situations, the user should use the Union type in conjunction with the enum.Enum class provided by the standard library, so that type errors can be caught statically:",
        "createdAt" : "2020-04-17T12:45:10Z",
        "updatedAt" : "2020-05-18T19:53:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "65b45a00235249eec0740ce80f7a989937365126",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +443,447 @@) -> \"DataFrame\":\n    if columns is None:\n        raise TypeError(\"pivot() missing 1 required argument: 'columns'\")\n\n    columns = com.convert_to_list_like(columns)"
  },
  {
    "id" : "bacbbb4d-5d73-4338-86c3-1e05d23ea961",
    "prId" : 32197,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32197#pullrequestreview-413686116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5881e0e1-07bb-41b5-a2fc-6d1dc6a4012e",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "you should be able to get rid of the is_list_like now?",
        "createdAt" : "2020-05-18T15:00:39Z",
        "updatedAt" : "2020-05-18T19:53:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "30b3b0c3-23bc-43b4-9d80-5e5e17a8d483",
        "parentId" : "5881e0e1-07bb-41b5-a2fc-6d1dc6a4012e",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "good point!",
        "createdAt" : "2020-05-18T15:08:23Z",
        "updatedAt" : "2020-05-18T19:53:52Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "65b45a00235249eec0740ce80f7a989937365126",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +449,453 @@    if values is None:\n        if index is not None:\n            cols = com.convert_to_list_like(index)\n        else:\n            cols = []"
  },
  {
    "id" : "54278ef7-f44b-4446-9a76-d1545cc898cc",
    "prId" : 32197,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32197#pullrequestreview-413711310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d68db44-c8dc-4e74-b33a-318da8b29324",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "i think this block can now be further simplified to avoid the pass statement, also probably don't need the variable annotation?",
        "createdAt" : "2020-05-18T15:10:34Z",
        "updatedAt" : "2020-05-18T19:53:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "ea28811f-98c7-4bb5-ac68-c375d83457f8",
        "parentId" : "5d68db44-c8dc-4e74-b33a-318da8b29324",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "yeah, changed and remove variable annotation\r\n```python\r\nif index is not None:\r\n    cols = com.convert_to_list_like(index)\r\n```",
        "createdAt" : "2020-05-18T15:22:38Z",
        "updatedAt" : "2020-05-18T19:53:52Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      },
      {
        "id" : "66ac3bb5-f1d0-42d6-9597-af6622f1f283",
        "parentId" : "5d68db44-c8dc-4e74-b33a-318da8b29324",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "still need\r\n\r\n```\r\nelse:\r\n    cols = []\r\n```\r\nreversing the order of assignment so that the empty list is further down (in static analysis terms) should negate the need for the variable annotation since the empy list is compatible with the list defined above",
        "createdAt" : "2020-05-18T15:33:04Z",
        "updatedAt" : "2020-05-18T19:53:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "a2e62616-bbc7-4756-ad50-925656ea3aca",
        "parentId" : "5d68db44-c8dc-4e74-b33a-318da8b29324",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "yeah, just found out in the failed test",
        "createdAt" : "2020-05-18T15:36:46Z",
        "updatedAt" : "2020-05-18T19:53:52Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "65b45a00235249eec0740ce80f7a989937365126",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +449,453 @@    if values is None:\n        if index is not None:\n            cols = com.convert_to_list_like(index)\n        else:\n            cols = []"
  },
  {
    "id" : "6acb2a99-8fc1-4cd7-90b3-25e49c38725c",
    "prId" : 37997,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37997#pullrequestreview-539696513",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83361ee1-c12c-4335-842a-d92452dd7dc3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string here",
        "createdAt" : "2020-11-26T16:42:33Z",
        "updatedAt" : "2020-11-27T03:54:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "98c8c005-10a1-460d-a495-bc7256b992ff",
        "parentId" : "83361ee1-c12c-4335-842a-d92452dd7dc3",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "Done",
        "createdAt" : "2020-11-27T04:03:12Z",
        "updatedAt" : "2020-11-27T04:03:13Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ca044771d0a718a61e5a06309cdd3a3cc3ebe5d",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +776,780 @@    \"\"\"\n\n    def get_duplicates(names):\n        seen: Set = set()\n        return {name for name in names if name not in seen}"
  }
]