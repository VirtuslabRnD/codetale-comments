[
  {
    "id" : "ee1ab06d-5bb5-423b-9faf-904a3103781d",
    "prId" : 17628,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17628#pullrequestreview-79004210",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2385ea67-96ee-4856-b111-8d1dada31746",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would add an example here (in the doc-string); I think all the other examples are resulting as strings anyhow (could also modify an example to avoid making this longer). you can check docs in reshape.rst to see if anything needs updating.",
        "createdAt" : "2017-11-25T14:33:32Z",
        "updatedAt" : "2017-12-10T16:20:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9d3e6249553a10ba6c4f894f85ebfef3990e1a2",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +200,204 @@\n        .. versionadded:: 0.20.0\n\n        .. versionchanged:: 0.22.0\n            When all suffixes are numeric, they are cast to int64/float64."
  },
  {
    "id" : "3d6e9e21-df0f-404a-9b57-eb9fb47b7adc",
    "prId" : 18148,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18148#pullrequestreview-74759967",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5075a69c-e6b1-4868-8de3-e81056b79454",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is all cut/paste?",
        "createdAt" : "2017-11-07T13:18:23Z",
        "updatedAt" : "2017-11-10T20:41:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "62847b8c-b606-4e30-8c28-dc99abc516a2",
        "parentId" : "5075a69c-e6b1-4868-8de3-e81056b79454",
        "authorId" : "dd91acbe-4e02-4218-900e-2b4ee08a0444",
        "body" : "Yes, I just cut and pasted everything. I thought that's what you wanted. Let me know if you wanted something else.",
        "createdAt" : "2017-11-07T13:49:23Z",
        "updatedAt" : "2017-11-10T20:41:23Z",
        "lastEditedBy" : "dd91acbe-4e02-4218-900e-2b4ee08a0444",
        "tags" : [
        ]
      },
      {
        "id" : "c8109733-fafe-4e18-bfad-4d642f6fac68",
        "parentId" : "5075a69c-e6b1-4868-8de3-e81056b79454",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes just confirming",
        "createdAt" : "2017-11-07T14:14:05Z",
        "updatedAt" : "2017-11-10T20:41:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5860a1748c4034b67cf5a52b4fb56d9281b4bab",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +24,28 @@def melt(frame, id_vars=None, value_vars=None, var_name=None,\n         value_name='value', col_level=None):\n    # TODO: what about the existing index?\n    if id_vars is not None:\n        if not is_list_like(id_vars):"
  },
  {
    "id" : "17b3bb31-fe01-4bfd-850b-91f84552792b",
    "prId" : 18148,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18148#pullrequestreview-75877113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bec47f0-0365-4249-a932-55a63605826e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can do this now, or can in a followup. These top-level imports needs to be from the pandas namespace; some can be ``ABC``, e.g. ``ABCMultiIndex``, which you can import here. The others should be imported *inside* the functions themselves if needed. This allows this module to be imported irrespective of its import ordering.",
        "createdAt" : "2017-11-10T20:50:06Z",
        "updatedAt" : "2017-11-10T20:52:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5860a1748c4034b67cf5a52b4fb56d9281b4bab",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +8,12 @@\nfrom pandas.core.frame import DataFrame\nfrom pandas.core.index import MultiIndex\n\nfrom pandas.core.frame import _shared_docs"
  },
  {
    "id" : "d183be04-27a9-493c-b4da-9637a0a64fdc",
    "prId" : 18148,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18148#pullrequestreview-75877113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "712901ec-9ddf-4239-b483-753d74efece1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ABCMultiIndex",
        "createdAt" : "2017-11-10T20:50:22Z",
        "updatedAt" : "2017-11-10T20:52:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5860a1748c4034b67cf5a52b4fb56d9281b4bab",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@        if not is_list_like(id_vars):\n            id_vars = [id_vars]\n        elif (isinstance(frame.columns, MultiIndex) and\n              not isinstance(id_vars, list)):\n            raise ValueError('id_vars must be a list of tuples when columns'"
  },
  {
    "id" : "26ce2fe7-632a-4ed4-a024-070396248873",
    "prId" : 18148,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18148#pullrequestreview-75877113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe2452f1-6d01-4ecd-a881-563184c93a2d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2017-11-10T20:50:28Z",
        "updatedAt" : "2017-11-10T20:52:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5860a1748c4034b67cf5a52b4fb56d9281b4bab",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +40,44 @@        if not is_list_like(value_vars):\n            value_vars = [value_vars]\n        elif (isinstance(frame.columns, MultiIndex) and\n              not isinstance(value_vars, list)):\n            raise ValueError('value_vars must be a list of tuples when'"
  },
  {
    "id" : "4d328067-233e-463d-b9d4-ecbda519996d",
    "prId" : 18148,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18148#pullrequestreview-75877113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32c0ab4b-2bdd-440f-ae7c-905afe92765d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2017-11-10T20:50:37Z",
        "updatedAt" : "2017-11-10T20:52:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5860a1748c4034b67cf5a52b4fb56d9281b4bab",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +55,59 @@\n    if var_name is None:\n        if isinstance(frame.columns, MultiIndex):\n            if len(frame.columns.names) == len(set(frame.columns.names)):\n                var_name = frame.columns.names"
  },
  {
    "id" : "c9b60fd7-ced3-4fce-9c83-e9b4dfcf5c13",
    "prId" : 18148,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18148#pullrequestreview-75877113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8178d28-bd10-41eb-8376-bc989744a198",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can \r\n\r\n``from pandas import DataFrame`` here",
        "createdAt" : "2017-11-10T20:50:56Z",
        "updatedAt" : "2017-11-10T20:52:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5860a1748c4034b67cf5a52b4fb56d9281b4bab",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +82,86 @@                                   ._get_level_values(i)).repeat(N)\n\n    return DataFrame(mdata, columns=mcolumns)\n\n"
  },
  {
    "id" : "5f167759-207e-425e-971d-9674334cd44e",
    "prId" : 18148,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18148#pullrequestreview-75877113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "487b787e-4b29-4374-9d71-49cb353be82b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can \r\n``from pandas.core.dtypes.concat import _concat`` here",
        "createdAt" : "2017-11-10T20:51:25Z",
        "updatedAt" : "2017-11-10T20:52:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5860a1748c4034b67cf5a52b4fb56d9281b4bab",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +136,140 @@    pivot_cols = []\n\n    for target, names in zip(keys, values):\n        to_concat = [data[col].values for col in names]\n        mdata[target] = _concat._concat_compat(to_concat)"
  },
  {
    "id" : "821c95f6-fefd-4e61-b6de-f8fcb303b8c5",
    "prId" : 18148,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18148#pullrequestreview-75877113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79c7c5a2-4a2e-4bcb-bdca-c96898fe0005",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "``from pandas import DataFrame``",
        "createdAt" : "2017-11-10T20:51:32Z",
        "updatedAt" : "2017-11-10T20:52:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5860a1748c4034b67cf5a52b4fb56d9281b4bab",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +151,155 @@            mdata = dict((k, v[mask]) for k, v in compat.iteritems(mdata))\n\n    return DataFrame(mdata, columns=id_cols + pivot_cols)\n\n"
  },
  {
    "id" : "ec097af0-a011-4e08-9c3e-685209775047",
    "prId" : 23575,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23575#pullrequestreview-174976233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14ca2e80-9432-4e0e-b86d-d642822defdf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you do this check just once?",
        "createdAt" : "2018-11-14T14:22:37Z",
        "updatedAt" : "2018-11-21T16:01:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0f592903-6e02-4779-861a-d2fe8da6b9a0",
        "parentId" : "14ca2e80-9432-4e0e-b86d-d642822defdf",
        "authorId" : "bb3a4eba-ed7e-454e-961a-a05a96110abd",
        "body" : "This is a bit tricky since there are other checks on `id_vars` and `value_vars` independently, like these\r\nhttps://github.com/pandas-dev/pandas/blob/c75ab23bdf237a9966a28f0b6941dea3ea5e0398/pandas/core/reshape/melt.py#L33\r\nhttps://github.com/pandas-dev/pandas/blob/c75ab23bdf237a9966a28f0b6941dea3ea5e0398/pandas/core/reshape/melt.py#L51\r\nSo checking that all columns are present before these individual checks (like at L27) fails the test that addresses the above check.\r\n\r\nTrying to check the columns after these checks (like at L64) works, but throws this warning:\r\n`Passing list-likes to .loc or [] with any missing label will raise\r\nKeyError in the future, you can use .reindex() as an alternative.`\r\n\r\nBecause of this line:\r\nhttps://github.com/pandas-dev/pandas/blob/c75ab23bdf237a9966a28f0b6941dea3ea5e0398/pandas/core/reshape/melt.py#L61\r\n\r\nWhich is what I'm trying to avoid. \r\n\r\nSince the check needs to happen before L61 (to prevent the warning) and after the Multiindex checks (L33 and 51) I think doing them separately may be the easiest.\r\n",
        "createdAt" : "2018-11-14T15:27:40Z",
        "updatedAt" : "2018-11-21T16:01:27Z",
        "lastEditedBy" : "bb3a4eba-ed7e-454e-961a-a05a96110abd",
        "tags" : [
        ]
      },
      {
        "id" : "273dfa68-2678-4ec1-b842-1a0dbf2499f2",
        "parentId" : "14ca2e80-9432-4e0e-b86d-d642822defdf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok that's fine. something failing, so merge master and ping on green.",
        "createdAt" : "2018-11-14T17:10:13Z",
        "updatedAt" : "2018-11-21T16:01:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0db8838e26f74caec9fef7e604ab530437cd9fcc",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +61,65 @@            # Check that `value_vars` are in frame\n            missing = Index(np.ravel(value_vars)).difference(cols)\n            if not missing.empty:\n                raise KeyError(\"The following 'value_vars' are not present in\"\n                               \" the DataFrame: {missing}\""
  },
  {
    "id" : "526932e5-00c3-46fe-99ec-9b3073c03254",
    "prId" : 23575,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23575#pullrequestreview-176476387",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cdcf158-40f9-43fc-b249-47f0f161de7e",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'm not especially familiar with melt and multi-index columns, but I don't think this is quite right.\r\n\r\nIt seems like you need to specify `col_level` when you have a MI in the columns, so you should probably just be checks against `frame.columns.levels[col_level]` when you have a MI.\r\n\r\nHowever, it doesn't quite seem that a `col_level` is *required* when there's a MI in the columns. The default of `pd.melt(df)` seems to work, but any time I specified an `id_vars` or `value_vars` without col_level I get an uninformative error message. I'm not sure what's going on.",
        "createdAt" : "2018-11-16T19:59:49Z",
        "updatedAt" : "2018-11-21T16:01:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "eff2731d-076b-4377-a16b-aab2ecb15fd1",
        "parentId" : "4cdcf158-40f9-43fc-b249-47f0f161de7e",
        "authorId" : "bb3a4eba-ed7e-454e-961a-a05a96110abd",
        "body" : "I think you need to provide `col_level` for MI when only melting on one level like this example from the docstring (that I added a new test for):\r\n\r\n`pd.melt(df, col_level=0, id_vars=['A'], value_vars=['B'])`\r\n\r\nBut you don't need to specify `col_level` when using all levels of MI:\r\n`pd.melt(df, id_vars=[('A', 'D')], value_vars=[('B', 'E')])`",
        "createdAt" : "2018-11-16T20:05:44Z",
        "updatedAt" : "2018-11-21T16:01:27Z",
        "lastEditedBy" : "bb3a4eba-ed7e-454e-961a-a05a96110abd",
        "tags" : [
        ]
      },
      {
        "id" : "e1d604e7-a70b-4dd9-9b16-f087832e3d47",
        "parentId" : "4cdcf158-40f9-43fc-b249-47f0f161de7e",
        "authorId" : "bb3a4eba-ed7e-454e-961a-a05a96110abd",
        "body" : "All I am doing at L28 is gathering column names from all levels. There are other checks to make sure that melting is performed properly, this will just check to make sure that whatever you pass, it is in your df",
        "createdAt" : "2018-11-16T20:07:16Z",
        "updatedAt" : "2018-11-21T16:01:27Z",
        "lastEditedBy" : "bb3a4eba-ed7e-454e-961a-a05a96110abd",
        "tags" : [
        ]
      },
      {
        "id" : "5b503223-1848-4f0b-af61-7eaa056ef7d9",
        "parentId" : "4cdcf158-40f9-43fc-b249-47f0f161de7e",
        "authorId" : "bb3a4eba-ed7e-454e-961a-a05a96110abd",
        "body" : "Thoughts?",
        "createdAt" : "2018-11-19T19:33:13Z",
        "updatedAt" : "2018-11-21T16:01:27Z",
        "lastEditedBy" : "bb3a4eba-ed7e-454e-961a-a05a96110abd",
        "tags" : [
        ]
      },
      {
        "id" : "cace44ca-9274-4911-b024-bdd8e82bfb72",
        "parentId" : "4cdcf158-40f9-43fc-b249-47f0f161de7e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah i think this is ok, can you provdie a comment on what is going on.",
        "createdAt" : "2018-11-19T20:29:47Z",
        "updatedAt" : "2018-11-21T16:01:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0db8838e26f74caec9fef7e604ab530437cd9fcc",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +28,32 @@    # If multiindex, gather names of columns on all level for checking presence\n    # of `id_vars` and `value_vars`\n    if isinstance(frame.columns, ABCMultiIndex):\n        cols = [x for c in frame.columns for x in c]\n    else:"
  },
  {
    "id" : "6880b9ca-0689-4c86-9620-5602ea5efdf2",
    "prId" : 29627,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29627#pullrequestreview-319821460",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "056fdecf-5fc7-4308-b2e0-e1006e4a4830",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should deprecate / remove this",
        "createdAt" : "2019-11-16T21:15:21Z",
        "updatedAt" : "2019-11-17T15:43:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "505aae6c-ba9e-48f8-ad16-6a8fab9f4eb6",
        "parentId" : "056fdecf-5fc7-4308-b2e0-e1006e4a4830",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you create an issue",
        "createdAt" : "2019-11-17T14:19:04Z",
        "updatedAt" : "2019-11-17T15:43:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "629c4728-1c54-42fe-8569-1c7caa81823e",
        "parentId" : "056fdecf-5fc7-4308-b2e0-e1006e4a4830",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you create an issue to deprecate this",
        "createdAt" : "2019-11-20T13:01:41Z",
        "updatedAt" : "2019-11-20T13:01:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4895d19e04309d576f133c4cef11570f87c5dcd6",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +132,136 @@        {new_name : list_of_columns}\n    dropna : boolean, default True\n    label : object, default None\n        Dummy kwarg, not used.\n"
  },
  {
    "id" : "ee3cd150-b9f5-4389-960c-ee1fde34d522",
    "prId" : 34329,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34329#pullrequestreview-418274302",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20144146-7fd1-44bd-96fc-fb4cb8c80bee",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can you use `.get_indexer` in both cases and *always* use `.iloc`?",
        "createdAt" : "2020-05-25T16:32:30Z",
        "updatedAt" : "2020-05-26T13:00:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3de99783-a9df-4cba-8c84-be43e667323f",
        "parentId" : "20144146-7fd1-44bd-96fc-fb4cb8c80bee",
        "authorId" : "93b6e80c-cee5-49e9-a33e-b216ddbf357a",
        "body" : "yes, better to be consistent. Done!",
        "createdAt" : "2020-05-26T13:02:57Z",
        "updatedAt" : "2020-05-26T13:02:57Z",
        "lastEditedBy" : "93b6e80c-cee5-49e9-a33e-b216ddbf357a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c85279210e477461c2a419e741efda6b4c33df1b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +73,77 @@                    f\"the DataFrame: {list(missing)}\"\n                )\n        if col_level is not None:\n            idx = frame.columns.get_level_values(col_level).get_indexer(\n                id_vars + value_vars"
  }
]