[
  {
    "id" : "2aac73c3-509f-4633-80ee-9806fc632821",
    "prId" : 4641,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6b1c9d7-cff9-46df-b303-5365bd9fec3d",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "am I reading this wrong, or are you converting other to `None` unless it's a `PeriodIndex` or `DatetimeIndex`?\n",
        "createdAt" : "2013-08-23T01:36:26Z",
        "updatedAt" : "2013-08-23T01:56:15Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "e4474581-e019-43f9-bd0d-375e8dfa1e50",
        "parentId" : "c6b1c9d7-cff9-46df-b303-5365bd9fec3d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "nope...it comes in an out as the same (unless the date/period indexdex convert it)...I needed to do this because its needed below...a bit hacky, but didn't see a better way around it\n",
        "createdAt" : "2013-08-23T01:38:08Z",
        "updatedAt" : "2013-08-23T01:56:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0990a750a8ead5aa4f073ca83b7a7132b3ad0eba",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +143,147 @@            # convert lhs and rhs\n            lvalues,_ = convert_to_array(lvalues)\n            rvalues,other = convert_to_array(rvalues,other)\n\n            is_datetime_rhs  = com.is_datetime64_dtype(rvalues)"
  },
  {
    "id" : "e6132009-bba8-4b27-b5e1-8884f24f37f1",
    "prId" : 5164,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bef8e950-12bf-4550-950f-ffb9ac7f2b3b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "change this around a bit. The passed name should substitute for the series name (if it has one). and need a correspodning test for this as well.\n",
        "createdAt" : "2013-10-09T20:19:02Z",
        "updatedAt" : "2013-10-10T01:44:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "81a2548d-3191-4ba8-8b39-b0874933fc5d",
        "parentId" : "bef8e950-12bf-4550-950f-ffb9ac7f2b3b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "`name = name if name is not None else self.name`\n",
        "createdAt" : "2013-10-09T20:22:17Z",
        "updatedAt" : "2013-10-10T01:44:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5ec444e4-11b0-4e37-8b6a-ce925a907c85",
        "parentId" : "bef8e950-12bf-4550-950f-ffb9ac7f2b3b",
        "authorId" : "8b819cb5-221d-4500-bd28-9fbce6a3382c",
        "body" : "I'll update with feedback. Thanks.\n\nOn Wednesday, October 9, 2013, jreback wrote:\n\n> In pandas/core/series.py:\n> \n> > -    def to_dataframe(self, name=None):\n> > -        \"\"\"\n> > -        Convert Series to DataFrame\n> >   +\n> > -        Parameters\n> > -        ----------\n> > -        name : object, default None\n> > -            The name of the column corresponding to the Series values\n> >   +\n> > -        Returns\n> > -        -------\n> > -        data_frame : DataFrame\n> > -        \"\"\"\n> > -        from pandas.core.frame import DataFrame\n> > -        if name is None:\n> > -            df = DataFrame(self)\n> \n> name = name if name is not None else self.name\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/pydata/pandas/pull/5164/files#r6869332\n> .\n\n## \n\nDavid Rasch\nrasch@raschnet.com\n",
        "createdAt" : "2013-10-09T21:57:27Z",
        "updatedAt" : "2013-10-10T01:44:31Z",
        "lastEditedBy" : "8b819cb5-221d-4500-bd28-9fbce6a3382c",
        "tags" : [
        ]
      },
      {
        "id" : "d88362e0-9db2-4087-9744-e8193ad91d7d",
        "parentId" : "bef8e950-12bf-4550-950f-ffb9ac7f2b3b",
        "authorId" : "8b819cb5-221d-4500-bd28-9fbce6a3382c",
        "body" : "This was copied from above, I'm not sure that \n\n```\nname = name if name is not None else self.name\n```\n\nwill work when self.name = None\n\nYou end up with 'None' as the column index instead of 0.\n\nI'm adding a test for this case too.\n",
        "createdAt" : "2013-10-10T01:02:37Z",
        "updatedAt" : "2013-10-10T01:44:31Z",
        "lastEditedBy" : "8b819cb5-221d-4500-bd28-9fbce6a3382c",
        "tags" : [
        ]
      },
      {
        "id" : "ffc414b7-6722-484c-bdea-4cce700d825c",
        "parentId" : "bef8e950-12bf-4550-950f-ffb9ac7f2b3b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes if name is none then just do Dataframe(self)\n\nthe name parameter that u r passing should override the name of the series I think\n",
        "createdAt" : "2013-10-10T01:08:50Z",
        "updatedAt" : "2013-10-10T01:44:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "844bcff0917af28907483be3cd927a07edb8f53d",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1039,1043 @@        from pandas.core.frame import DataFrame\n        if name is None:\n            df = DataFrame(self)\n        else:\n            df = DataFrame({name: self})"
  },
  {
    "id" : "675a58a6-30fa-44bb-98d5-44b63e9f781b",
    "prId" : 6861,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccd55550-615c-4a23-a8c7-968eda22a82c",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add an explanation here? Something like `Series.order : equivalent method but not in-place by default`\n",
        "createdAt" : "2014-04-10T14:25:19Z",
        "updatedAt" : "2014-04-10T15:50:29Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "50d6f9d3-699c-4bf1-b150-230af46f1a4a",
        "parentId" : "ccd55550-615c-4a23-a8c7-968eda22a82c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "and the same in the order docstring but then the inverse.\n",
        "createdAt" : "2014-04-10T14:25:43Z",
        "updatedAt" : "2014-04-10T15:50:29Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "60530c5d-791e-4de3-911a-261e1c263c19",
        "parentId" : "ccd55550-615c-4a23-a8c7-968eda22a82c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sure\n",
        "createdAt" : "2014-04-10T14:26:27Z",
        "updatedAt" : "2014-04-10T15:50:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2f8a0ec4-a912-4136-9cd7-0787e328186e",
        "parentId" : "ccd55550-615c-4a23-a8c7-968eda22a82c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "done\n",
        "createdAt" : "2014-04-10T14:30:38Z",
        "updatedAt" : "2014-04-10T15:50:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "15c3b9f2a3a11a3b359afe02e0ba98a832f9d721",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +1681,1685 @@        See Also\n        --------\n        Series.order\n        \"\"\"\n        return self.order(ascending=ascending,"
  },
  {
    "id" : "76f388ee-279e-4554-82a9-e352c386d342",
    "prId" : 8492,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10a3975f-fcb8-4408-b334-b17a7be7b9de",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback had to handle None, or is there a better way that `_ensure_platform_int` can handle None?\n",
        "createdAt" : "2014-10-06T20:43:38Z",
        "updatedAt" : "2014-10-06T20:43:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d4f350fb-e631-4041-abda-2c8398c6d380",
        "parentId" : "10a3975f-fcb8-4408-b334-b17a7be7b9de",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no that is right\n",
        "createdAt" : "2014-10-06T20:58:17Z",
        "updatedAt" : "2014-10-06T20:58:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b94968fb3d2b91c62b984938d420fac07652a4b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1431,1435 @@        \"\"\"\n        if sorter is not None:\n            sorter = com._ensure_platform_int(sorter)\n\n        return self.values.searchsorted(Series(v).values, side=side,"
  },
  {
    "id" : "f6653d12-5265-40b8-bbd1-492a9747629a",
    "prId" : 8909,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33b27576-38a7-4825-863b-604bb4f59568",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so `isinstance(data, (types.GeneratorType, map))` doesn't work?\n",
        "createdAt" : "2014-11-27T17:43:08Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d0f7a643-897c-45b5-8be6-1d5135df9d53",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "try also with `collections.Iterable` here\n",
        "createdAt" : "2014-11-27T17:43:40Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8cae9224-0d2d-4329-9fb6-b4beb1201a7a",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "49780b90-c500-463a-a606-80d5cc8edaaf",
        "body" : "it doesn't work because python2's map is just a function. python3's map is a class.\n",
        "createdAt" : "2014-11-27T17:48:58Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "49780b90-c500-463a-a606-80d5cc8edaaf",
        "tags" : [
        ]
      },
      {
        "id" : "1933b696-6993-4f69-9d77-171d85dec5b9",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ahh ok, what about adding `collections.Iterable` alongside GeneratorType as well?\n",
        "createdAt" : "2014-11-27T17:51:50Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "32a475f9-bf75-45a8-abd0-6d9a3d7bd20d",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "49780b90-c500-463a-a606-80d5cc8edaaf",
        "body" : "ideally I'd love to make Series just accept any iterable but the way it's working now it raises an exception for sets or frozensets. I didn't want to change that without discussing the reason why it was decided this way.\n",
        "createdAt" : "2014-11-27T17:52:32Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "49780b90-c500-463a-a606-80d5cc8edaaf",
        "tags" : [
        ]
      },
      {
        "id" : "32952150-05b5-43d1-a31f-2de88495660e",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "You could do `isinstance(v, collections.Iterable) and not isinstance(v, (collections.Set, collections.Mapping))`\n",
        "createdAt" : "2014-11-27T17:55:12Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      },
      {
        "id" : "b0e55582-7969-4d39-ae50-82d1015bff8e",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sets and frozensets are iterable but non-orderable, so doesn't make sense for Series to directly accept them (e.g. you need to be a list-list or a dictionary-like which maps keys->values)\n",
        "createdAt" : "2014-11-27T18:04:02Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3c557391-c845-43d6-bba3-b8e5f1825107",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "49780b90-c500-463a-a606-80d5cc8edaaf",
        "body" : "this is a reasonable argument, but I don't think this is the way python works in general.\n\npython doesn't throw exceptions for things like these. I mean, you don't need to wrap sets with list(some_set) or iter(some_set) in most cases. python just uses the \"order\" it gets from iterating the set.\n\nI think zip is a bit similar to Series, and it works fine if you just use sets with it.\n\nand it's not just a way to conform with python idioms, I think a reasonable amount of code in the constructors could be simplified if you just ask these objects to be iterable.\n",
        "createdAt" : "2014-11-27T19:02:05Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "49780b90-c500-463a-a606-80d5cc8edaaf",
        "tags" : [
        ]
      }
    ],
    "commit" : "867b288e9272f30596eae43cc99a039368045de1",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +185,189 @@                    name = data.name\n            elif (isinstance(data, types.GeneratorType) or\n                  (compat.PY3 and isinstance(data, map))):\n                data = list(data)\n            elif isinstance(data, (set, frozenset)):"
  },
  {
    "id" : "bd477d40-9087-4aef-a0c1-e3277abc7489",
    "prId" : 9321,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fd4d24a-d6ea-46dc-8a38-f3a4501bb047",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "deprecate `.hist` ? (see above)\n",
        "createdAt" : "2015-09-10T10:55:30Z",
        "updatedAt" : "2015-09-10T21:31:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a65bd5ad7931114fd61f10db51d887ca31b5f3a",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2885,2889 @@Series.plot = base.AccessorProperty(_gfx.SeriesPlotMethods, _gfx.SeriesPlotMethods)\nSeries.hist = _gfx.hist_series\n\n# Add arithmetic!\nops.add_flex_arithmetic_methods(Series, **ops.series_flex_funcs)"
  },
  {
    "id" : "3320d417-0355-4ff6-ae38-c6ffea6d31e2",
    "prId" : 9322,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5edf1cb7-c6e7-4799-8e1e-ef711bb383dc",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "perhaps we should insert some sort of check here? Something like?\n\n``` python\n# pandas represents strings as object dtype\nif self.dtype.kind != 'O':\n    raise TypeError\n```\n",
        "createdAt" : "2015-01-22T09:28:22Z",
        "updatedAt" : "2015-01-23T08:06:40Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "b8cc78d7-34cc-4dd9-8287-2c09a7d7f276",
        "parentId" : "5edf1cb7-c6e7-4799-8e1e-ef711bb383dc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I had the same question. Use `core.common.is_object_dtype` (of course nice error message and tests)\n",
        "createdAt" : "2015-01-22T23:41:44Z",
        "updatedAt" : "2015-01-23T08:06:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7a6d1bf73c08b96c616c52fc71483193e9bf10e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2512,2516 @@            raise TypeError(\"Can only use .str accessor with string values, \"\n                            \"which use np.object_ dtype in pandas\")\n        return StringMethods(self)\n\n    str = base.AccessorProperty(StringMethods, _make_str_accessor)"
  },
  {
    "id" : "bbd77af0-488a-4442-8201-5b990ffb76a1",
    "prId" : 10719,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e9aae90-cda5-444b-9571-cfc3419a50fb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add here a docstring like:\n\n```\n\"\"\"DEPRECATED. Use ``.iloc[i]`` or ``.iat[i]`` instead\"\"\"\n```\n\nto every of those functions? (and maybe also for the ones in frame.py) \nBecause they will still appear on the automatically generated API pages, and then it is more clear you shouldn't use instead of no docstring.\n",
        "createdAt" : "2015-08-02T11:28:48Z",
        "updatedAt" : "2015-08-02T14:49:30Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "b69bde6d9485fdd139ace82f4e84f2944fe30bbe",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +782,786 @@        return self.values.reshape(shape, **kwargs)\n\n    def iget_value(self, i, axis=0):\n        \"\"\"\n        DEPRECATED. Use ``.iloc[i]`` or ``.iat[i]`` instead"
  },
  {
    "id" : "07a8a6c9-30b8-4e6f-b60f-63fb66a3c75d",
    "prId" : 13979,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a95b43e-d901-4b29-93d5-641e45508c69",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "any way to do this in the super? IOW `unique1d` should return the underlying correctly\n",
        "createdAt" : "2016-08-25T10:25:04Z",
        "updatedAt" : "2016-08-29T01:46:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c37af4f6-7d3c-4e50-9c33-2488db490960",
        "parentId" : "6a95b43e-d901-4b29-93d5-641e45508c69",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Because `Series.unique` definition is required for docstring after all, performing `Series` specific process here looks clearer.\n",
        "createdAt" : "2016-08-26T23:20:37Z",
        "updatedAt" : "2016-08-29T01:46:56Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "380afba7-cafd-4a69-b3f1-8e23c4ae5b3f",
        "parentId" : "6a95b43e-d901-4b29-93d5-641e45508c69",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok then\n\nadd a big TODO here with the issue reference saying this should really return a dtype compat array-like in future versions\n",
        "createdAt" : "2016-08-26T23:22:51Z",
        "updatedAt" : "2016-08-29T01:46:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a27815690571a978fac9037ebded0214ac2be5",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1235,1239 @@    @Appender(base._shared_docs['unique'] % _shared_doc_kwargs)\n    def unique(self):\n        result = super(Series, self).unique()\n        if is_datetime64tz_dtype(self.dtype):\n            # to return array of Timestamp with tz"
  },
  {
    "id" : "f5aa1528-d701-4555-bad5-9ff4c8be7af7",
    "prId" : 14445,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14445#pullrequestreview-6143005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e0787fb-21c6-48d7-9a87-dcb712ee0686",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you put:\n\n```\nindexer = _ensure_platform_int(indexer)\nnew_index = index.take(indexer)\n```\n\noutside the if-else block\n",
        "createdAt" : "2016-10-26T10:38:45Z",
        "updatedAt" : "2016-12-02T23:37:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5159b4ed-6e79-4dd5-bcb9-c0d3a206b37b",
        "parentId" : "5e0787fb-21c6-48d7-9a87-dcb712ee0686",
        "authorId" : "97761d92-66e3-47ae-9f19-842d628d22c1",
        "body" : "Yes; moved.\n",
        "createdAt" : "2016-10-27T20:49:23Z",
        "updatedAt" : "2016-12-02T23:37:25Z",
        "lastEditedBy" : "97761d92-66e3-47ae-9f19-842d628d22c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "05e9e526bfaa3e7ac9599c3f15321a2b7fc7859f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1784,1788 @@            from pandas.core.groupby import _lexsort_indexer\n            indexer = _lexsort_indexer(index.labels, orders=ascending)\n        else:\n            from pandas.core.groupby import _nargsort\n            indexer = _nargsort(index, kind=kind, ascending=ascending,"
  }
]