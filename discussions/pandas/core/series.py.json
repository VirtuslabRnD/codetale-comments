[
  {
    "id" : "2aac73c3-509f-4633-80ee-9806fc632821",
    "prId" : 4641,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6b1c9d7-cff9-46df-b303-5365bd9fec3d",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "am I reading this wrong, or are you converting other to `None` unless it's a `PeriodIndex` or `DatetimeIndex`?\n",
        "createdAt" : "2013-08-23T01:36:26Z",
        "updatedAt" : "2013-08-23T01:56:15Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "e4474581-e019-43f9-bd0d-375e8dfa1e50",
        "parentId" : "c6b1c9d7-cff9-46df-b303-5365bd9fec3d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "nope...it comes in an out as the same (unless the date/period indexdex convert it)...I needed to do this because its needed below...a bit hacky, but didn't see a better way around it\n",
        "createdAt" : "2013-08-23T01:38:08Z",
        "updatedAt" : "2013-08-23T01:56:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0990a750a8ead5aa4f073ca83b7a7132b3ad0eba",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +143,147 @@            # convert lhs and rhs\n            lvalues,_ = convert_to_array(lvalues)\n            rvalues,other = convert_to_array(rvalues,other)\n\n            is_datetime_rhs  = com.is_datetime64_dtype(rvalues)"
  },
  {
    "id" : "e6132009-bba8-4b27-b5e1-8884f24f37f1",
    "prId" : 5164,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bef8e950-12bf-4550-950f-ffb9ac7f2b3b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "change this around a bit. The passed name should substitute for the series name (if it has one). and need a correspodning test for this as well.\n",
        "createdAt" : "2013-10-09T20:19:02Z",
        "updatedAt" : "2013-10-10T01:44:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "81a2548d-3191-4ba8-8b39-b0874933fc5d",
        "parentId" : "bef8e950-12bf-4550-950f-ffb9ac7f2b3b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "`name = name if name is not None else self.name`\n",
        "createdAt" : "2013-10-09T20:22:17Z",
        "updatedAt" : "2013-10-10T01:44:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5ec444e4-11b0-4e37-8b6a-ce925a907c85",
        "parentId" : "bef8e950-12bf-4550-950f-ffb9ac7f2b3b",
        "authorId" : "8b819cb5-221d-4500-bd28-9fbce6a3382c",
        "body" : "I'll update with feedback. Thanks.\n\nOn Wednesday, October 9, 2013, jreback wrote:\n\n> In pandas/core/series.py:\n> \n> > -    def to_dataframe(self, name=None):\n> > -        \"\"\"\n> > -        Convert Series to DataFrame\n> >   +\n> > -        Parameters\n> > -        ----------\n> > -        name : object, default None\n> > -            The name of the column corresponding to the Series values\n> >   +\n> > -        Returns\n> > -        -------\n> > -        data_frame : DataFrame\n> > -        \"\"\"\n> > -        from pandas.core.frame import DataFrame\n> > -        if name is None:\n> > -            df = DataFrame(self)\n> \n> name = name if name is not None else self.name\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/pydata/pandas/pull/5164/files#r6869332\n> .\n\n## \n\nDavid Rasch\nrasch@raschnet.com\n",
        "createdAt" : "2013-10-09T21:57:27Z",
        "updatedAt" : "2013-10-10T01:44:31Z",
        "lastEditedBy" : "8b819cb5-221d-4500-bd28-9fbce6a3382c",
        "tags" : [
        ]
      },
      {
        "id" : "d88362e0-9db2-4087-9744-e8193ad91d7d",
        "parentId" : "bef8e950-12bf-4550-950f-ffb9ac7f2b3b",
        "authorId" : "8b819cb5-221d-4500-bd28-9fbce6a3382c",
        "body" : "This was copied from above, I'm not sure that \n\n```\nname = name if name is not None else self.name\n```\n\nwill work when self.name = None\n\nYou end up with 'None' as the column index instead of 0.\n\nI'm adding a test for this case too.\n",
        "createdAt" : "2013-10-10T01:02:37Z",
        "updatedAt" : "2013-10-10T01:44:31Z",
        "lastEditedBy" : "8b819cb5-221d-4500-bd28-9fbce6a3382c",
        "tags" : [
        ]
      },
      {
        "id" : "ffc414b7-6722-484c-bdea-4cce700d825c",
        "parentId" : "bef8e950-12bf-4550-950f-ffb9ac7f2b3b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes if name is none then just do Dataframe(self)\n\nthe name parameter that u r passing should override the name of the series I think\n",
        "createdAt" : "2013-10-10T01:08:50Z",
        "updatedAt" : "2013-10-10T01:44:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "844bcff0917af28907483be3cd927a07edb8f53d",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1039,1043 @@        from pandas.core.frame import DataFrame\n        if name is None:\n            df = DataFrame(self)\n        else:\n            df = DataFrame({name: self})"
  },
  {
    "id" : "675a58a6-30fa-44bb-98d5-44b63e9f781b",
    "prId" : 6861,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccd55550-615c-4a23-a8c7-968eda22a82c",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add an explanation here? Something like `Series.order : equivalent method but not in-place by default`\n",
        "createdAt" : "2014-04-10T14:25:19Z",
        "updatedAt" : "2014-04-10T15:50:29Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "50d6f9d3-699c-4bf1-b150-230af46f1a4a",
        "parentId" : "ccd55550-615c-4a23-a8c7-968eda22a82c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "and the same in the order docstring but then the inverse.\n",
        "createdAt" : "2014-04-10T14:25:43Z",
        "updatedAt" : "2014-04-10T15:50:29Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "60530c5d-791e-4de3-911a-261e1c263c19",
        "parentId" : "ccd55550-615c-4a23-a8c7-968eda22a82c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sure\n",
        "createdAt" : "2014-04-10T14:26:27Z",
        "updatedAt" : "2014-04-10T15:50:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2f8a0ec4-a912-4136-9cd7-0787e328186e",
        "parentId" : "ccd55550-615c-4a23-a8c7-968eda22a82c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "done\n",
        "createdAt" : "2014-04-10T14:30:38Z",
        "updatedAt" : "2014-04-10T15:50:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "15c3b9f2a3a11a3b359afe02e0ba98a832f9d721",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +1681,1685 @@        See Also\n        --------\n        Series.order\n        \"\"\"\n        return self.order(ascending=ascending,"
  },
  {
    "id" : "76f388ee-279e-4554-82a9-e352c386d342",
    "prId" : 8492,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10a3975f-fcb8-4408-b334-b17a7be7b9de",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback had to handle None, or is there a better way that `_ensure_platform_int` can handle None?\n",
        "createdAt" : "2014-10-06T20:43:38Z",
        "updatedAt" : "2014-10-06T20:43:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d4f350fb-e631-4041-abda-2c8398c6d380",
        "parentId" : "10a3975f-fcb8-4408-b334-b17a7be7b9de",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no that is right\n",
        "createdAt" : "2014-10-06T20:58:17Z",
        "updatedAt" : "2014-10-06T20:58:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b94968fb3d2b91c62b984938d420fac07652a4b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1431,1435 @@        \"\"\"\n        if sorter is not None:\n            sorter = com._ensure_platform_int(sorter)\n\n        return self.values.searchsorted(Series(v).values, side=side,"
  },
  {
    "id" : "f6653d12-5265-40b8-bbd1-492a9747629a",
    "prId" : 8909,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33b27576-38a7-4825-863b-604bb4f59568",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so `isinstance(data, (types.GeneratorType, map))` doesn't work?\n",
        "createdAt" : "2014-11-27T17:43:08Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d0f7a643-897c-45b5-8be6-1d5135df9d53",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "try also with `collections.Iterable` here\n",
        "createdAt" : "2014-11-27T17:43:40Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8cae9224-0d2d-4329-9fb6-b4beb1201a7a",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "49780b90-c500-463a-a606-80d5cc8edaaf",
        "body" : "it doesn't work because python2's map is just a function. python3's map is a class.\n",
        "createdAt" : "2014-11-27T17:48:58Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "49780b90-c500-463a-a606-80d5cc8edaaf",
        "tags" : [
        ]
      },
      {
        "id" : "1933b696-6993-4f69-9d77-171d85dec5b9",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ahh ok, what about adding `collections.Iterable` alongside GeneratorType as well?\n",
        "createdAt" : "2014-11-27T17:51:50Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "32a475f9-bf75-45a8-abd0-6d9a3d7bd20d",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "49780b90-c500-463a-a606-80d5cc8edaaf",
        "body" : "ideally I'd love to make Series just accept any iterable but the way it's working now it raises an exception for sets or frozensets. I didn't want to change that without discussing the reason why it was decided this way.\n",
        "createdAt" : "2014-11-27T17:52:32Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "49780b90-c500-463a-a606-80d5cc8edaaf",
        "tags" : [
        ]
      },
      {
        "id" : "32952150-05b5-43d1-a31f-2de88495660e",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "You could do `isinstance(v, collections.Iterable) and not isinstance(v, (collections.Set, collections.Mapping))`\n",
        "createdAt" : "2014-11-27T17:55:12Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      },
      {
        "id" : "b0e55582-7969-4d39-ae50-82d1015bff8e",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sets and frozensets are iterable but non-orderable, so doesn't make sense for Series to directly accept them (e.g. you need to be a list-list or a dictionary-like which maps keys->values)\n",
        "createdAt" : "2014-11-27T18:04:02Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3c557391-c845-43d6-bba3-b8e5f1825107",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "49780b90-c500-463a-a606-80d5cc8edaaf",
        "body" : "this is a reasonable argument, but I don't think this is the way python works in general.\n\npython doesn't throw exceptions for things like these. I mean, you don't need to wrap sets with list(some_set) or iter(some_set) in most cases. python just uses the \"order\" it gets from iterating the set.\n\nI think zip is a bit similar to Series, and it works fine if you just use sets with it.\n\nand it's not just a way to conform with python idioms, I think a reasonable amount of code in the constructors could be simplified if you just ask these objects to be iterable.\n",
        "createdAt" : "2014-11-27T19:02:05Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "49780b90-c500-463a-a606-80d5cc8edaaf",
        "tags" : [
        ]
      }
    ],
    "commit" : "867b288e9272f30596eae43cc99a039368045de1",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +185,189 @@                    name = data.name\n            elif (isinstance(data, types.GeneratorType) or\n                  (compat.PY3 and isinstance(data, map))):\n                data = list(data)\n            elif isinstance(data, (set, frozenset)):"
  },
  {
    "id" : "bd477d40-9087-4aef-a0c1-e3277abc7489",
    "prId" : 9321,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fd4d24a-d6ea-46dc-8a38-f3a4501bb047",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "deprecate `.hist` ? (see above)\n",
        "createdAt" : "2015-09-10T10:55:30Z",
        "updatedAt" : "2015-09-10T21:31:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a65bd5ad7931114fd61f10db51d887ca31b5f3a",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2885,2889 @@Series.plot = base.AccessorProperty(_gfx.SeriesPlotMethods, _gfx.SeriesPlotMethods)\nSeries.hist = _gfx.hist_series\n\n# Add arithmetic!\nops.add_flex_arithmetic_methods(Series, **ops.series_flex_funcs)"
  },
  {
    "id" : "3320d417-0355-4ff6-ae38-c6ffea6d31e2",
    "prId" : 9322,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5edf1cb7-c6e7-4799-8e1e-ef711bb383dc",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "perhaps we should insert some sort of check here? Something like?\n\n``` python\n# pandas represents strings as object dtype\nif self.dtype.kind != 'O':\n    raise TypeError\n```\n",
        "createdAt" : "2015-01-22T09:28:22Z",
        "updatedAt" : "2015-01-23T08:06:40Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "b8cc78d7-34cc-4dd9-8287-2c09a7d7f276",
        "parentId" : "5edf1cb7-c6e7-4799-8e1e-ef711bb383dc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I had the same question. Use `core.common.is_object_dtype` (of course nice error message and tests)\n",
        "createdAt" : "2015-01-22T23:41:44Z",
        "updatedAt" : "2015-01-23T08:06:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7a6d1bf73c08b96c616c52fc71483193e9bf10e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2512,2516 @@            raise TypeError(\"Can only use .str accessor with string values, \"\n                            \"which use np.object_ dtype in pandas\")\n        return StringMethods(self)\n\n    str = base.AccessorProperty(StringMethods, _make_str_accessor)"
  },
  {
    "id" : "bbd77af0-488a-4442-8201-5b990ffb76a1",
    "prId" : 10719,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e9aae90-cda5-444b-9571-cfc3419a50fb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add here a docstring like:\n\n```\n\"\"\"DEPRECATED. Use ``.iloc[i]`` or ``.iat[i]`` instead\"\"\"\n```\n\nto every of those functions? (and maybe also for the ones in frame.py) \nBecause they will still appear on the automatically generated API pages, and then it is more clear you shouldn't use instead of no docstring.\n",
        "createdAt" : "2015-08-02T11:28:48Z",
        "updatedAt" : "2015-08-02T14:49:30Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "b69bde6d9485fdd139ace82f4e84f2944fe30bbe",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +782,786 @@        return self.values.reshape(shape, **kwargs)\n\n    def iget_value(self, i, axis=0):\n        \"\"\"\n        DEPRECATED. Use ``.iloc[i]`` or ``.iat[i]`` instead"
  },
  {
    "id" : "07a8a6c9-30b8-4e6f-b60f-63fb66a3c75d",
    "prId" : 13979,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a95b43e-d901-4b29-93d5-641e45508c69",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "any way to do this in the super? IOW `unique1d` should return the underlying correctly\n",
        "createdAt" : "2016-08-25T10:25:04Z",
        "updatedAt" : "2016-08-29T01:46:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c37af4f6-7d3c-4e50-9c33-2488db490960",
        "parentId" : "6a95b43e-d901-4b29-93d5-641e45508c69",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Because `Series.unique` definition is required for docstring after all, performing `Series` specific process here looks clearer.\n",
        "createdAt" : "2016-08-26T23:20:37Z",
        "updatedAt" : "2016-08-29T01:46:56Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "380afba7-cafd-4a69-b3f1-8e23c4ae5b3f",
        "parentId" : "6a95b43e-d901-4b29-93d5-641e45508c69",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok then\n\nadd a big TODO here with the issue reference saying this should really return a dtype compat array-like in future versions\n",
        "createdAt" : "2016-08-26T23:22:51Z",
        "updatedAt" : "2016-08-29T01:46:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a27815690571a978fac9037ebded0214ac2be5",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1235,1239 @@    @Appender(base._shared_docs['unique'] % _shared_doc_kwargs)\n    def unique(self):\n        result = super(Series, self).unique()\n        if is_datetime64tz_dtype(self.dtype):\n            # to return array of Timestamp with tz"
  },
  {
    "id" : "f5aa1528-d701-4555-bad5-9ff4c8be7af7",
    "prId" : 14445,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14445#pullrequestreview-6143005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e0787fb-21c6-48d7-9a87-dcb712ee0686",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you put:\n\n```\nindexer = _ensure_platform_int(indexer)\nnew_index = index.take(indexer)\n```\n\noutside the if-else block\n",
        "createdAt" : "2016-10-26T10:38:45Z",
        "updatedAt" : "2016-12-02T23:37:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5159b4ed-6e79-4dd5-bcb9-c0d3a206b37b",
        "parentId" : "5e0787fb-21c6-48d7-9a87-dcb712ee0686",
        "authorId" : "97761d92-66e3-47ae-9f19-842d628d22c1",
        "body" : "Yes; moved.\n",
        "createdAt" : "2016-10-27T20:49:23Z",
        "updatedAt" : "2016-12-02T23:37:25Z",
        "lastEditedBy" : "97761d92-66e3-47ae-9f19-842d628d22c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "05e9e526bfaa3e7ac9599c3f15321a2b7fc7859f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1784,1788 @@            from pandas.core.groupby import _lexsort_indexer\n            indexer = _lexsort_indexer(index.labels, orders=ascending)\n        else:\n            from pandas.core.groupby import _nargsort\n            indexer = _nargsort(index, kind=kind, ascending=ascending,"
  },
  {
    "id" : "0773f001-e2e6-4423-bf5f-02bbeb2b6946",
    "prId" : 14668,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14668#pullrequestreview-12350370",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "498bfcad-7607-4df4-8319-117cf9b1ef87",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Do you have an example of where apply fails and this is needed? (i.e. is this covered in the test cases?)",
        "createdAt" : "2016-12-10T12:27:04Z",
        "updatedAt" : "2017-04-14T13:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "566d6fa5-ca05-4637-873a-741bbd105313",
        "parentId" : "498bfcad-7607-4df4-8319-117cf9b1ef87",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes, something like this (its because Series will row-by-row application)\r\n\r\n```\r\nIn [4]: Series(range(5)).apply(lambda x: x-x.min())\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-4-e65bceda88a4> in <module>()\r\n----> 1 Series(range(5)).apply(lambda x: x-x.min())\r\n\r\n/Users/jreback/miniconda3/envs/pandas/lib/python3.5/site-packages/pandas/core/series.py in apply(self, func, convert_dtype, args, **kwds)\r\n   2290             else:\r\n   2291                 values = self.asobject\r\n-> 2292                 mapped = lib.map_infer(values, f, convert=convert_dtype)\r\n   2293 \r\n   2294         if len(mapped) and isinstance(mapped[0], Series):\r\n\r\npandas/src/inference.pyx in pandas.lib.map_infer (pandas/lib.c:66116)()\r\n\r\n<ipython-input-4-e65bceda88a4> in <lambda>(x)\r\n----> 1 Series(range(5)).apply(lambda x: x-x.min())\r\n\r\nAttributeError: 'int' object has no attribute 'min'\r\n```",
        "createdAt" : "2016-12-10T16:19:25Z",
        "updatedAt" : "2017-04-14T13:45:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae6c6f6cbd4b760ec70b1d48b27fe53b6644e208",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +2182,2186 @@                result = self.apply(func, *args, **kwargs)\n            except (ValueError, AttributeError, TypeError):\n                result = func(self, *args, **kwargs)\n\n        return result"
  },
  {
    "id" : "b009e3bd-84c1-4b1d-b15f-4f9ef80e4be4",
    "prId" : 14780,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14780#pullrequestreview-10958238",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f9a5166-2a01-431e-9495-5464c510ff63",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use shared docs here to avoid repeating everything",
        "createdAt" : "2016-12-01T11:55:40Z",
        "updatedAt" : "2016-12-05T06:18:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2f95b39f-4cf6-4b17-9c5d-7945f8fe4428",
        "parentId" : "5f9a5166-2a01-431e-9495-5464c510ff63",
        "authorId" : "0a464613-e916-4495-9db3-6b1046ae03a3",
        "body" : "Could you show me an example?",
        "createdAt" : "2016-12-01T12:29:31Z",
        "updatedAt" : "2016-12-05T06:18:54Z",
        "lastEditedBy" : "0a464613-e916-4495-9db3-6b1046ae03a3",
        "tags" : [
        ]
      },
      {
        "id" : "f55c8c26-14dc-41b9-8bf1-c512595a1c69",
        "parentId" : "5f9a5166-2a01-431e-9495-5464c510ff63",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "look for shared_doc",
        "createdAt" : "2016-12-01T12:44:23Z",
        "updatedAt" : "2016-12-05T06:18:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0e1025a2-54a1-442f-9245-ee0f61d3f3a9",
        "parentId" : "5f9a5166-2a01-431e-9495-5464c510ff63",
        "authorId" : "0a464613-e916-4495-9db3-6b1046ae03a3",
        "body" : "Should this shared docstring be in `pandas/io/excel.py` or somewhere else?",
        "createdAt" : "2016-12-01T12:54:11Z",
        "updatedAt" : "2016-12-05T06:18:54Z",
        "lastEditedBy" : "0a464613-e916-4495-9db3-6b1046ae03a3",
        "tags" : [
        ]
      }
    ],
    "commit" : "605b9cebba9146f920d321f845d80f995845636e",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +2631,2635 @@                    header=header, index=index, index_label=index_label,\n                    startrow=startrow, startcol=startcol, engine=engine,\n                    merge_cells=merge_cells, encoding=encoding,\n                    inf_rep=inf_rep, verbose=verbose)\n"
  },
  {
    "id" : "ab0428fd-3531-43e0-a937-f6fe8190958c",
    "prId" : 14780,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14780#pullrequestreview-10983722",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0ec5c4e-4399-4a64-ae40-ac040b80d422",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add to the doc-string a versionadded tag (0.20.)",
        "createdAt" : "2016-12-01T15:12:45Z",
        "updatedAt" : "2016-12-05T06:18:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "605b9cebba9146f920d321f845d80f995845636e",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +2622,2626 @@\n    @Appender(generic._shared_docs['to_excel'] % _shared_doc_kwargs)\n    def to_excel(self, excel_writer, sheet_name='Sheet1', na_rep='',\n                 float_format=None, columns=None, header=True, index=True,\n                 index_label=None, startrow=0, startcol=0, engine=None,"
  },
  {
    "id" : "d3463caa-0b98-46af-89ef-74c4073a689e",
    "prId" : 16002,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16002#pullrequestreview-32897276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7001aecf-9864-4325-a59f-7166bd7f457b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a 1-line comment here on what you are doing",
        "createdAt" : "2017-04-14T21:02:44Z",
        "updatedAt" : "2017-04-15T00:28:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "79cfd11c807884d41e4b725dcef095a0f839d883",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +2148,2152 @@                map_f = lib.map_infer\n\n        if isinstance(arg, dict):\n            if hasattr(arg, '__missing__'):\n                # If a dictionary subclass defines a default value method,"
  },
  {
    "id" : "90b36534-8544-46da-92b2-74cdaa11ed19",
    "prId" : 18600,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18600#pullrequestreview-108521283",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa1c430f-a140-493e-85ac-da371db110c6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is pretty hard to read, but ok for now, see if can simplify in the future",
        "createdAt" : "2018-04-01T14:15:34Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cd6145e4-b677-4936-8ea4-d1eaee15ec86",
        "parentId" : "fa1c430f-a140-493e-85ac-da371db110c6",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Yes, for sure we will need some unified mechanism to process iterators",
        "createdAt" : "2018-04-01T15:18:16Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "22701fcf9e2f9daae4020d50af1ff9042803691b",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +4048,4052 @@            # Take care in creating object arrays (but iterators are not\n            # supported):\n            if is_object_dtype(dtype) and (is_list_like(subarr) and\n                                           not (is_iterator(subarr) or\n                                           isinstance(subarr, np.ndarray))):"
  },
  {
    "id" : "64a26cd5-fa51-4500-8202-61e682c3579e",
    "prId" : 19035,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19035#pullrequestreview-107505760",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f572c44-0bf0-45cd-90c1-e1fd689dfd25",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can u update the .dot doc string that ‘@‘ operator is supported in >=3.5",
        "createdAt" : "2018-01-06T23:42:47Z",
        "updatedAt" : "2018-03-30T21:55:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5243f7c3-359a-4510-bce8-b5ed26b15806",
        "parentId" : "0f572c44-0bf0-45cd-90c1-e1fd689dfd25",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you do this",
        "createdAt" : "2018-03-25T23:01:20Z",
        "updatedAt" : "2018-03-30T21:55:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dcb0ca27-ba74-4aa8-a2bb-81c93ff2c707",
        "parentId" : "0f572c44-0bf0-45cd-90c1-e1fd689dfd25",
        "authorId" : "b166bda0-b3db-486d-a68e-b39350a7613e",
        "body" : "You mean update the .dot doc string? I believe that is done",
        "createdAt" : "2018-03-27T23:47:57Z",
        "updatedAt" : "2018-03-30T21:55:06Z",
        "lastEditedBy" : "b166bda0-b3db-486d-a68e-b39350a7613e",
        "tags" : [
        ]
      }
    ],
    "commit" : "c036ed0da8f147790529f123106f46e4c23cdd36",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +2034,2038 @@            raise TypeError('unsupported type: %s' % type(other))\n\n    def __matmul__(self, other):\n        \"\"\" Matrix multiplication using binary `@` operator in Python>=3.5 \"\"\"\n        return self.dot(other)"
  },
  {
    "id" : "33533c01-7df7-4ab4-ba2a-7aca2c0103a7",
    "prId" : 19338,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19338#pullrequestreview-90516569",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4c41d91-4f1c-4f94-bad6-c5e2da002d9a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "If anything this would be an AssertionError. But is this code path actually hit by *any* tests? ",
        "createdAt" : "2018-01-22T11:04:47Z",
        "updatedAt" : "2018-01-23T17:59:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2b38fbad-7c5c-4136-8594-2297a5739eef",
        "parentId" : "f4c41d91-4f1c-4f94-bad6-c5e2da002d9a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Nope. <b>update</b> This never raises in tests because the only times `Series.__init__` is called with a `SingleBlockManager` as the `data` kwarg also has `index=data.index`  Because a) users shouldn't be passing `SingleBlockManager` around anyway and b) if they ever did pass one and pass a non-matching it would raise because `BlockManager.reindex` is broken, better to just disallow the broken case and enforce it early on, then delete the broken code.\r\n\r\nI'm fine with raising an AssertionError.",
        "createdAt" : "2018-01-22T15:42:55Z",
        "updatedAt" : "2018-01-23T17:59:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7eab6d963327f59e40042e728fe5f4d408546be",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +200,204 @@                elif not data.index.equals(index) or copy:\n                    # GH#19275 SingleBlockManager input should only be called\n                    # internally\n                    raise AssertionError('Cannot pass both SingleBlockManager '\n                                         '`data` argument and a different '"
  },
  {
    "id" : "6d1749cf-08d3-4e8e-b2ce-0f06d94fca76",
    "prId" : 19520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19520#pullrequestreview-97383342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee4fb32f-a0f7-4f08-8168-717825f33af2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment. This interface is now really smelly. I thought the purpose of ``._values`` was to do this on ALL index classes? to return the 'data' in a dtype appropraite manner? if that is not the case then this needs fixing.",
        "createdAt" : "2018-02-16T17:48:00Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "efd00073-e22e-47d2-8feb-5f1dcea90fee",
        "parentId" : "ee4fb32f-a0f7-4f08-8168-717825f33af2",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "What's the issue here? That's exactly what `._values` did. I changed the two elifs into the one.\r\n\r\nI can't remove any more since the `if` branch is dealing with copys and the `else` goes on to do more stuff in `_sanitize_arrary`.",
        "createdAt" : "2018-02-17T03:32:33Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "e94bba5a-4282-4275-a89e-3e36cc3cf146",
        "parentId" : "ee4fb32f-a0f7-4f08-8168-717825f33af2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`_to_embed` previously took a copy, while now `data._values` does not? (but don't know if this is needed in this context here)",
        "createdAt" : "2018-02-17T15:39:03Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "10c17aa3-4093-4af6-a8c4-4ca745b76c93",
        "parentId" : "ee4fb32f-a0f7-4f08-8168-717825f33af2",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Let's copy if copy is True.",
        "createdAt" : "2018-02-17T19:48:50Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5562b99d55062b2bb0a5b359bd5375adb3a46e",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +3122,3126 @@    if isinstance(data, ABCIndexClass) and not copy:\n        pass\n    elif isinstance(data, (PeriodIndex, DatetimeIndex)):\n        data = data._values\n        if copy:"
  },
  {
    "id" : "5c5335b1-d869-4584-a6d7-e21fcb821101",
    "prId" : 19520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19520#pullrequestreview-98566544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebdedadb-0432-4997-80f8-241dfde0431a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Side note (maybe I should open an issue, if there is none yet), but `is_dtype` will always return True for Categoricals, whatever the categories/ordered attributes, I think? Is this actually what we want? As currently doing `pd.Series(pd.Categorical(['a', 'b']), dtype=CategoricalDType(categories=['A', 'B']))` will just ignore the `dtype` instead of raising an error / coercing.",
        "createdAt" : "2018-02-17T15:36:28Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "bb14d4af-2c73-478e-af79-3d04a5f1e379",
        "parentId" : "ebdedadb-0432-4997-80f8-241dfde0431a",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I thought there was an issue about this recently, though I couldn't find it easily.\r\n\r\nThis could be a hole in our ExtensionDtype API. We have `is_dtype` for seeing if the dtypes are the same kind, but we might want an `is_dtype_equal` for checking parametrized dtypes.\r\n\r\nhttps://github.com/pandas-dev/pandas/issues/19741\r\n",
        "createdAt" : "2018-02-17T19:46:07Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "238d8c29-e00e-483d-883e-56b34f6a53db",
        "parentId" : "ebdedadb-0432-4997-80f8-241dfde0431a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think we discussed/fixed this for `Series[cat].astype(cat)`, see https://github.com/pandas-dev/pandas/pull/18710 and referenced issues. But probably `Series(cat, dtype=cat)` should do something similar? Or should that be more strict.\r\n\r\n(I like your proposal to add `is_dtype_equal` to be more strict)",
        "createdAt" : "2018-02-17T19:55:48Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0f2c3780-bc67-4bcd-8bbe-f7b836ec0c73",
        "parentId" : "ebdedadb-0432-4997-80f8-241dfde0431a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is much nicer",
        "createdAt" : "2018-02-22T01:28:34Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6f90f297-4b59-4b11-843f-4a2ceb654115",
        "parentId" : "ebdedadb-0432-4997-80f8-241dfde0431a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "What is much nicer?",
        "createdAt" : "2018-02-22T13:41:04Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5562b99d55062b2bb0a5b359bd5375adb3a46e",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +215,219 @@                # GH12574: Allow dtype=category only, otherwise error\n                if not data.dtype.is_dtype(dtype):\n                    raise ValueError(\"Cannot specify a dtype '{}' with an \"\n                                     \"extension array of a different \"\n                                     \"dtype ('{}').\".format(dtype,"
  },
  {
    "id" : "74df27e7-5bab-435d-b09a-f6af5749894c",
    "prId" : 19520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19520#pullrequestreview-97864446",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40d3a66b-265a-45e7-ad83-653916b17f67",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this tested?",
        "createdAt" : "2018-02-20T13:35:17Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d317f58b-70ae-4af0-b59e-456352927e6d",
        "parentId" : "40d3a66b-265a-45e7-ad83-653916b17f67",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "`test_decimal::test_series_constructor_coerce_data_to_extension_dtype_raises`",
        "createdAt" : "2018-02-20T15:21:12Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5562b99d55062b2bb0a5b359bd5375adb3a46e",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +3173,3177 @@                # We don't allow casting to third party dtypes, since we don't\n                # know what array belongs to which type.\n                msg = (\"Cannot cast data to extension dtype '{}'. \"\n                       \"Pass the extension array directly.\".format(dtype))\n                raise ValueError(msg)"
  },
  {
    "id" : "0dd12411-c959-4274-bccf-ee62edbf7e2c",
    "prId" : 19520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19520#pullrequestreview-97864595",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51be29f3-6632-4ab6-93bb-0b6ebb897438",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "tested?",
        "createdAt" : "2018-02-20T13:35:25Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1791780b-a5d3-4d9e-aa65-db6f278eb0eb",
        "parentId" : "51be29f3-6632-4ab6-93bb-0b6ebb897438",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "`test_decimal::test_dataframe_constructor_with_different_dtype_raises`",
        "createdAt" : "2018-02-20T15:21:34Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5562b99d55062b2bb0a5b359bd5375adb3a46e",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +3212,3216 @@\n        if dtype is not None and not data.dtype.is_dtype(dtype):\n            msg = (\"Cannot coerce extension array to dtype '{typ}'. \"\n                   \"Do the coercion before passing to the constructor \"\n                   \"instead.\".format(typ=dtype))"
  },
  {
    "id" : "f12742a0-f405-4a00-b5fb-da28d17c1dd9",
    "prId" : 19744,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19744#pullrequestreview-98405395",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37171103-0897-43c7-8e53-71e988e97693",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "clearly this is not used, so on next pass can you remove",
        "createdAt" : "2018-02-21T23:52:24Z",
        "updatedAt" : "2018-02-21T23:52:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "249b7ba8c4767c487abf73e2ab10cb6c85616b51",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1815,1819 @@        other = other.reindex(new_index, copy=False)\n        # TODO: do we need name?\n        name = ops.get_op_result_name(self, other)  # noqa\n        rs_vals = com._where_compat(isna(this), other._values, this._values)\n        return self._constructor(rs_vals, index=new_index).__finalize__(self)"
  },
  {
    "id" : "b5500460-8efd-48d4-9ad8-62d72d061069",
    "prId" : 20204,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20204#pullrequestreview-102952044",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ee249c6-643a-46ae-b997-c4bfa59cae30",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so we should just remove kwargs entirely (and need to remove the check in the code as well). This was originally fro compat with DataFrame but I think its ok (its possible that we are testing this though, so may need to modify a test). Could do this in a followup. cc @jorisvandenbossche ",
        "createdAt" : "2018-03-11T14:55:02Z",
        "updatedAt" : "2018-03-16T20:56:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d5bfaddd-2cac-4f35-b567-947236864b46",
        "parentId" : "2ee249c6-643a-46ae-b997-c4bfa59cae30",
        "authorId" : "58b2d3bf-9687-4c4d-858b-88128347234c",
        "body" : "So should I delete the **kwargs from the docstring already, or later when the code is fixed? And can I do the follow-up PR on this issue in the code base, or will you do it when the testing is clarified?",
        "createdAt" : "2018-03-11T19:21:26Z",
        "updatedAt" : "2018-03-16T20:56:46Z",
        "lastEditedBy" : "58b2d3bf-9687-4c4d-858b-88128347234c",
        "tags" : [
        ]
      },
      {
        "id" : "240cff27-33ae-4aed-8ce2-758634057d89",
        "parentId" : "2ee249c6-643a-46ae-b997-c4bfa59cae30",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Let's do this in a follow-up, and keep this PR purely docstring. So @donK23 you can leave it as is for now. \r\nAnd certainly welcome to do such a follow-up PR",
        "createdAt" : "2018-03-12T08:37:49Z",
        "updatedAt" : "2018-03-16T20:56:46Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "305f693495a656521ed928775ad5ddf5f91fd54d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +3051,3055 @@        inplace : bool, default False\n            If True, do operation inplace and return None.\n        **kwargs\n            Not in use.\n"
  },
  {
    "id" : "0822978b-50ce-4b34-804e-ad555236f3f4",
    "prId" : 20220,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20220#pullrequestreview-102883101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41924086-626d-43e6-b342-da409428acbb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I don't really like this note (I mean, the explanation is fine and correct, but we should just correct the code to not do this), but fine for now and I will open an issue to eg disallow not specifying a dtype, or if dtype=None to use `self.dtype`",
        "createdAt" : "2018-03-11T13:59:33Z",
        "updatedAt" : "2018-03-11T13:59:33Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "65dccb28-4ad2-44e5-877a-6dbf402e7216",
        "parentId" : "41924086-626d-43e6-b342-da409428acbb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see #20251 yes let's remove most of this text. This method should be deprecated anyhow.",
        "createdAt" : "2018-03-11T14:01:12Z",
        "updatedAt" : "2018-03-11T14:01:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bcff6980-0a24-4a58-834a-8e3f566415fc",
        "parentId" : "41924086-626d-43e6-b342-da409428acbb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The current text is correct, so let's remove *when* we deprecate it.",
        "createdAt" : "2018-03-11T14:03:41Z",
        "updatedAt" : "2018-03-11T14:03:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4362e383fc34ed9144fa160126ae85fd8e77015e",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +577,581 @@        the original array, ``Series.view()`` (without specified dtype)\n        will try using ``float64`` and may fail if the original data type size\n        in bytes is not the same.\n\n        Examples"
  },
  {
    "id" : "ff4de565-049e-4980-ae72-3d24eab2b81d",
    "prId" : 20286,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20286#pullrequestreview-103028421",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "202dee81-8daf-48a4-9e96-497c844599ee",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you also add Series.replace ?",
        "createdAt" : "2018-03-12T10:33:26Z",
        "updatedAt" : "2018-03-21T21:27:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "46196ca0-4f68-4779-b6d3-c5e3395120f9",
        "parentId" : "202dee81-8daf-48a4-9e96-497c844599ee",
        "authorId" : "eecf82eb-183f-4c88-ae92-95faec0cffd7",
        "body" : "This is outside the original scope of the contribution, see first PR comment.",
        "createdAt" : "2018-03-12T12:52:55Z",
        "updatedAt" : "2018-03-21T21:27:02Z",
        "lastEditedBy" : "eecf82eb-183f-4c88-ae92-95faec0cffd7",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecbaca0dbdd2d2d743c10c523b72ea9935f6ad26",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +2904,2908 @@        Series.apply : For applying more complex functions on a Series.\n        DataFrame.apply : Apply a function row-/column-wise.\n        DataFrame.applymap : Apply a function elementwise on a whole DataFrame.\n\n        Notes"
  },
  {
    "id" : "e9af2fdd-36ec-439d-9c64-b4b01cf55331",
    "prId" : 20286,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20286#pullrequestreview-103028471",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be29942c-908f-4c2b-983c-f443467a9858",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think we should add here some details on how a dict and Series are handled.",
        "createdAt" : "2018-03-12T10:35:48Z",
        "updatedAt" : "2018-03-21T21:27:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "916d0b6b-f598-44f7-91dd-092505cc1d06",
        "parentId" : "be29942c-908f-4c2b-983c-f443467a9858",
        "authorId" : "eecf82eb-183f-4c88-ae92-95faec0cffd7",
        "body" : "This is outside the original scope of the contribution, see first PR comment.",
        "createdAt" : "2018-03-12T12:53:06Z",
        "updatedAt" : "2018-03-21T21:27:02Z",
        "lastEditedBy" : "eecf82eb-183f-4c88-ae92-95faec0cffd7",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecbaca0dbdd2d2d743c10c523b72ea9935f6ad26",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +2838,2842 @@        ----------\n        arg : function, dict, or Series\n            Mapping correspondence.\n        na_action : {None, 'ignore'}\n            If 'ignore', propagate NA values, without passing them to the"
  },
  {
    "id" : "7cc4c87a-4ac2-4df8-ab21-20e1a15f03fe",
    "prId" : 20401,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20401#pullrequestreview-107106872",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75624d6c-e12c-43e6-b26f-6a483d7d905c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this additional check actually needed? (is_scalar)",
        "createdAt" : "2018-03-25T14:34:44Z",
        "updatedAt" : "2018-03-25T14:35:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "aa145bfe-b509-42af-8485-431be49d5622",
        "parentId" : "75624d6c-e12c-43e6-b26f-6a483d7d905c",
        "authorId" : "8ab1a939-8169-4378-a8bd-61f3790b0eca",
        "body" : "Yes. If it is scalar, no other change is needed, since `subarr` has the correct result. If it is not scalar, then it does the conversion \r\n```python\r\ndata = np.array(data, dtype=dtype, copy=False)\r\n```\r\n(That conversion was there already)",
        "createdAt" : "2018-03-25T19:41:25Z",
        "updatedAt" : "2018-03-25T19:41:25Z",
        "lastEditedBy" : "8ab1a939-8169-4378-a8bd-61f3790b0eca",
        "tags" : [
        ]
      },
      {
        "id" : "57ff35e4-8fcf-464e-8a4d-959bd153edc7",
        "parentId" : "75624d6c-e12c-43e6-b26f-6a483d7d905c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "my point is that do you actually need to add this check? when you take it out (but fix the ``np.any``) is there any problem?",
        "createdAt" : "2018-03-25T22:58:16Z",
        "updatedAt" : "2018-03-25T22:58:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "42b3a27e-af0f-48ed-973c-520d39e5ff80",
        "parentId" : "75624d6c-e12c-43e6-b26f-6a483d7d905c",
        "authorId" : "8ab1a939-8169-4378-a8bd-61f3790b0eca",
        "body" : "If I take out, then this https://github.com/pandas-dev/pandas/pull/20401/files#diff-3bbe4551f20de6060dce38a95d0adc80R114 will raise\r\n```\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n../core/series.py:270: in __init__\r\n    data = SingleBlockManager(data, index, fastpath=True)\r\n../core/internals.py:4632: in __init__\r\n    block = make_block(block, placement=slice(0, len(axis)), ndim=1)\r\n../core/internals.py:3161: in make_block\r\n    return klass(values, ndim=ndim, placement=placement)\r\n../core/internals.py:2268: in __init__\r\n    placement=placement)\r\n../core/internals.py:117: in __init__\r\n    self.ndim = self._check_ndim(values, ndim)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <[AttributeError(\"ndim\") raised in repr()] ObjectBlock object at 0x7f1ae266da98>\r\nvalues = array('', dtype=object), ndim = 1\r\n\r\n    def _check_ndim(self, values, ndim):\r\n        \"\"\"ndim inference and validation.\r\n    \r\n            Infers ndim from 'values' if not provided to __init__.\r\n            Validates that values.ndim and ndim are consistent if and only if\r\n            the class variable '_validate_ndim' is True.\r\n    \r\n            Parameters\r\n            ----------\r\n            values : array-like\r\n            ndim : int or None\r\n    \r\n            Returns\r\n            -------\r\n            ndim : int\r\n    \r\n            Raises\r\n            ------\r\n            ValueError : the number of dimensions do not match\r\n            \"\"\"\r\n        if ndim is None:\r\n            ndim = values.ndim\r\n    \r\n        if self._validate_ndim and values.ndim != ndim:\r\n            msg = (\"Wrong number of dimensions. values.ndim != ndim \"\r\n                   \"[{} != {}]\")\r\n>           raise ValueError(msg.format(values.ndim, ndim))\r\nE           ValueError: Wrong number of dimensions. values.ndim != ndim [0 != 1]\r\n\r\n../core/internals.py:153: ValueError\r\n```",
        "createdAt" : "2018-03-26T23:21:27Z",
        "updatedAt" : "2018-03-26T23:21:27Z",
        "lastEditedBy" : "8ab1a939-8169-4378-a8bd-61f3790b0eca",
        "tags" : [
        ]
      }
    ],
    "commit" : "41d35cac535d81c0ebd0fa488b2a004758c57b7d",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +4061,4065 @@        # If not empty convert the data to dtype\n        # GH 19853: If data is a scalar, subarr has already the result\n        if not is_scalar(data):\n            if not np.all(isna(data)):\n                data = np.array(data, dtype=dtype, copy=False)"
  },
  {
    "id" : "772ede58-d795-4339-9038-417c4c5b5417",
    "prId" : 20474,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20474#pullrequestreview-106753147",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f313506-2073-46a8-8d9f-6f6f4458675c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "it might be worth trying to share this doc-string with ``pd.unique`` (at least the examples) no?",
        "createdAt" : "2018-03-24T22:23:51Z",
        "updatedAt" : "2018-03-27T20:49:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "59327901-f736-4d7e-942d-9f2b9e1b71c7",
        "parentId" : "6f313506-2073-46a8-8d9f-6f6f4458675c",
        "authorId" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "body" : "good point but they have some differences:\r\n* pd.unique takes param and Series.unique doesn't take.\r\n* pd.unique handles 1d array-like objects including Index and Series.unique applies on self.\r\n* pd.unique examples contain more and Series.unique only series examples\r\n\r\ndo we have pattern somewhere in regards to conditionally show docstring lines?",
        "createdAt" : "2018-03-24T22:46:30Z",
        "updatedAt" : "2018-03-27T20:49:26Z",
        "lastEditedBy" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "tags" : [
        ]
      },
      {
        "id" : "e61c35c1-dba7-441d-9e83-f42bfdb0b08a",
        "parentId" : "6f313506-2073-46a8-8d9f-6f6f4458675c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "https://github.com/pandas-dev/pandas/pull/20361/files is doing something similar for factorize. It's somewhat complex, since we have `pd.unique`, `Series/Index.unique`, and `Categorical.unique`. I'd be OK with improving the docstring here, and merging theme later.",
        "createdAt" : "2018-03-24T23:20:07Z",
        "updatedAt" : "2018-03-27T20:49:26Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "2e860db7-cb57-49d2-a76b-7bed7507b6d2",
        "parentId" : "6f313506-2073-46a8-8d9f-6f6f4458675c",
        "authorId" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "body" : "agree, this PR is mainly about improve docstring. and should be another PR synthesising docs of all unique methods.",
        "createdAt" : "2018-03-25T21:54:58Z",
        "updatedAt" : "2018-03-27T20:49:26Z",
        "lastEditedBy" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "tags" : [
        ]
      },
      {
        "id" : "ad5ab374-0d57-4216-a6c3-5d761b3ebc8e",
        "parentId" : "6f313506-2073-46a8-8d9f-6f6f4458675c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "that's fine too",
        "createdAt" : "2018-03-26T01:18:31Z",
        "updatedAt" : "2018-03-27T20:49:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4931fcf40d207358578ae9f35bbae8eeeeb14c10",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1431,1435 @@\n    def unique(self):\n        \"\"\"\n        Return unique values of Series object.\n"
  },
  {
    "id" : "65069b0a-dc7b-4c9e-989b-8934c5acd3bb",
    "prId" : 20841,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20841#pullrequestreview-116116176",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38137022-59fb-4843-9757-c5166efad913",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so you changed the default? it was True before",
        "createdAt" : "2018-04-28T01:18:23Z",
        "updatedAt" : "2018-04-30T11:17:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b5071efd-d7c5-4b8f-a0d5-b3fe46ed29c0",
        "parentId" : "38137022-59fb-4843-9757-c5166efad913",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The fact that `take=False` wasn't passed through here was a regression from 0.20. The default for Categorical.take is still True (None -> warning -> True).",
        "createdAt" : "2018-04-28T01:23:56Z",
        "updatedAt" : "2018-04-30T11:17:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "90c023be-21d4-4411-99a1-55e6f3f3d444",
        "parentId" : "38137022-59fb-4843-9757-c5166efad913",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Though since allow_fill isn't a keyword for `_take` we can just pass it unconditionally here.",
        "createdAt" : "2018-04-28T01:28:01Z",
        "updatedAt" : "2018-04-30T11:17:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "86c4ea38-2efc-48c0-aaee-604879f2853d",
        "parentId" : "38137022-59fb-4843-9757-c5166efad913",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Ah nevermind. allow_fill isn't a keyword for ndarray.take. That's why the kwargs is needed.\r\n",
        "createdAt" : "2018-04-28T01:29:01Z",
        "updatedAt" : "2018-04-30T11:17:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "12485c525cd18f967c473ccb5f99c887e4f972b2",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +3505,3509 @@            # TODO: remove when the default Categorical.take behavior changes\n            kwargs = {'allow_fill': False}\n        else:\n            kwargs = {}\n        new_values = self._values.take(indices, **kwargs)"
  },
  {
    "id" : "ecdda436-0d2a-4c7a-82d5-08e31bcd9ddb",
    "prId" : 21183,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21183#pullrequestreview-126416870",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c681bd8-10a3-442e-9f12-8262a060317a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does this need a versionchanged?",
        "createdAt" : "2018-06-05T21:27:07Z",
        "updatedAt" : "2018-06-07T15:45:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6e8cb857-670a-4502-a043-39a7b2cd39dd",
        "parentId" : "1c681bd8-10a3-442e-9f12-8262a060317a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "There should be no change in behaviour for normal Series I think, as the `na_value_for_dtype`will give NaN/NaT (which was the default before). It's only for extension arrays that it might give another value, depending on what the extension array defined its missing value to be.\r\n",
        "createdAt" : "2018-06-05T21:42:05Z",
        "updatedAt" : "2018-06-07T15:45:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "593dd2a5-94b8-45cc-94b1-92efd1ddde44",
        "parentId" : "1c681bd8-10a3-442e-9f12-8262a060317a",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "I agree with @jorisvandenbossche ",
        "createdAt" : "2018-06-06T15:01:31Z",
        "updatedAt" : "2018-06-07T15:45:34Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ca28b2c672a7a0401474ba26e6719d63fb55de1",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2218,2222 @@        fill_value : scalar value\n            The default specifies to use the appropriate NaN value for\n            the underlying dtype of the Series\n\n        Returns"
  },
  {
    "id" : "4a4ca7c1-f401-4c51-9d32-2c51cee8bff6",
    "prId" : 21183,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21183#pullrequestreview-126417861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55476586-6ce1-49bc-bed1-f800d837bfc4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you put a comment on what is going on here",
        "createdAt" : "2018-06-05T21:27:34Z",
        "updatedAt" : "2018-06-07T15:45:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "03fea337-1e5a-4d0c-b3b5-e134966eef13",
        "parentId" : "55476586-6ce1-49bc-bed1-f800d837bfc4",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "done",
        "createdAt" : "2018-06-06T15:03:39Z",
        "updatedAt" : "2018-06-07T15:45:34Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ca28b2c672a7a0401474ba26e6719d63fb55de1",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +2259,2263 @@                new_values = [func(lv, other) for lv in self._values]\n            new_name = self.name\n\n        if is_categorical_dtype(self.values):\n            pass"
  },
  {
    "id" : "4db991c8-a53a-4882-a20e-59a443fea45a",
    "prId" : 21366,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21366#pullrequestreview-127229636",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b94c55b-a0b4-43c6-8076-9b0a5b108360",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "@jreback refactored to this.",
        "createdAt" : "2018-06-08T13:07:41Z",
        "updatedAt" : "2018-06-08T13:07:41Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "d5df66e1-98b6-4852-8e23-d1393062a8ac",
        "parentId" : "6b94c55b-a0b4-43c6-8076-9b0a5b108360",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k cool",
        "createdAt" : "2018-06-08T16:26:34Z",
        "updatedAt" : "2018-06-08T16:26:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4de6f7a8b1079ff0252df4d87c5c003150dd6e4a",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +4076,4080 @@                subarr = construct_1d_object_array_from_listlike(subarr)\n            elif not is_extension_type(subarr):\n                subarr = construct_1d_ndarray_preserving_na(subarr, dtype,\n                                                            copy=copy)\n        except (ValueError, TypeError):"
  },
  {
    "id" : "ab6f1998-280f-4066-a6c6-d36d88476e9f",
    "prId" : 21986,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21986#pullrequestreview-139032789",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb13ea94-bc61-483f-a0b0-8b545f0318f6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same with all of these",
        "createdAt" : "2018-07-20T12:16:48Z",
        "updatedAt" : "2018-07-28T18:53:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "05e4a36cd7d5c8449e362fc30fca03cf867144e0",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +2652,2656 @@        # TODO: this can be combined with DataFrame.sort_index impl as\n        # almost identical\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        # Validate the axis parameter\n        self._get_axis_number(axis)"
  },
  {
    "id" : "d1201408-501a-430d-a1b5-3ae3412c1d2b",
    "prId" : 22641,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22641#pullrequestreview-155383010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1375451d-7b2f-4af9-b261-d11a43ba559b",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What's the point of this statement?",
        "createdAt" : "2018-09-13T23:42:57Z",
        "updatedAt" : "2018-09-17T18:40:13Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "71e2f7cc-a3bc-4eee-9b0c-d517106d7500",
        "parentId" : "1375451d-7b2f-4af9-b261-d11a43ba559b",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "This checks that the value passed to axis is 0 or “index”, else an exception is raised. So, a minor check for consistency.",
        "createdAt" : "2018-09-14T07:41:16Z",
        "updatedAt" : "2018-09-17T18:40:13Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbe270c5b29da5f7ba392d213795b4320466a54f",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +3100,3104 @@    def transform(self, func, axis=0, *args, **kwargs):\n        # Validate the axis parameter\n        self._get_axis_number(axis)\n        return super(Series, self).transform(func, *args, **kwargs)\n"
  },
  {
    "id" : "6ee57a36-5078-423e-a2d6-1c8e61e07ce4",
    "prId" : 22684,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22684#pullrequestreview-157283722",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0713e227-a359-49b7-8f6e-352b42df6bbe",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I am not sure how to doc-string this signature here",
        "createdAt" : "2018-09-18T14:29:43Z",
        "updatedAt" : "2018-09-26T02:23:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "87e47263-976f-4979-b56d-af73eafdef9a",
        "parentId" : "0713e227-a359-49b7-8f6e-352b42df6bbe",
        "authorId" : "2168b726-a3a4-4844-9740-7c45b2d39bea",
        "body" : "Should I just leave it as is?",
        "createdAt" : "2018-09-20T11:12:36Z",
        "updatedAt" : "2018-09-26T02:23:27Z",
        "lastEditedBy" : "2168b726-a3a4-4844-9740-7c45b2d39bea",
        "tags" : [
        ]
      },
      {
        "id" : "8b00065f-9f6a-405e-aca8-9d7442fe4a7c",
        "parentId" : "0713e227-a359-49b7-8f6e-352b42df6bbe",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Probably fine as is. The type would be `Callable[[ndarray, ndarray], float]`, but I'm not sure how familiar people are with typing yet.",
        "createdAt" : "2018-09-20T13:59:13Z",
        "updatedAt" : "2018-09-26T02:23:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbfd95fb18bb6b0322c7130a59f5272ad2eef43a",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1915,1919 @@            * kendall : Kendall Tau correlation coefficient\n            * spearman : Spearman rank correlation\n            * callable: callable with input two 1d ndarray\n                and returning a float\n                .. versionadded:: 0.24.0"
  },
  {
    "id" : "96aca71b-c9b8-413c-b8e9-6de7bebb4db9",
    "prId" : 22731,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22731#pullrequestreview-156083738",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43950f23-6119-45cc-bd0f-a91bc3e280b6",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is the period here on the last bullet required to pass the docstring validation as-is? *Shouldn't* be necessary but if that's the intent here just something we should address separately @datapythonista ",
        "createdAt" : "2018-09-17T16:59:23Z",
        "updatedAt" : "2018-09-18T11:57:59Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e2ef5044-aa4a-42fe-8908-373b3541356d",
        "parentId" : "43950f23-6119-45cc-bd0f-a91bc3e280b6",
        "authorId" : "094def1e-c087-4e59-a219-4af39bf6adf5",
        "body" : "I confirm that the validation fails if the last period is not present.",
        "createdAt" : "2018-09-17T19:33:40Z",
        "updatedAt" : "2018-09-18T11:57:59Z",
        "lastEditedBy" : "094def1e-c087-4e59-a219-4af39bf6adf5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f311f9e7176475d6940074475804117d1982639",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +2752,2756 @@            - ``last`` : take the last occurrences based on the index order\n            - ``all`` : keep all occurrences. This can result in a Series of\n                size larger than `n`.\n\n        Returns"
  },
  {
    "id" : "25636cf4-a0a6-4534-b098-8f06364c3265",
    "prId" : 22731,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22731#pullrequestreview-156301400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3972c5cf-b523-4ad6-ab6b-154b1df943ee",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I'd add `sort_values` and `head` here, as they're mentioned in the notes. In both docstrings.",
        "createdAt" : "2018-09-18T10:33:11Z",
        "updatedAt" : "2018-09-18T11:57:59Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f311f9e7176475d6940074475804117d1982639",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +2766,2770 @@        See Also\n        --------\n        Series.nsmallest: Get the `n` smallest elements.\n        Series.sort_values: Sort Series by values.\n        Series.head: Return the first `n` rows."
  },
  {
    "id" : "ab33afd1-59a2-4f74-9805-b9b9e6f8c8e7",
    "prId" : 22762,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22762#pullrequestreview-160325775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ad7d8f4-c81a-4963-b64f-4983133bfcfa",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The final `delegate._reduce` (a couple of lines below), is that for the ones where `_values` currently is an index? \r\nIf so, can you add a comment like `# TODO(EA) remove once all internals extension types are moved to ExtensionArrays` ?",
        "createdAt" : "2018-10-01T14:59:01Z",
        "updatedAt" : "2018-10-12T11:40:31Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "aeaf5f32c0939d6bedc99240b47dd54252dda96a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +3402,3406 @@\n        # dispatch to numpy arrays\n        elif isinstance(delegate, np.ndarray):\n            if numeric_only:\n                raise NotImplementedError('Series.{0} does not implement '"
  },
  {
    "id" : "2d491cd5-64a5-4846-8ceb-0ca46258f86e",
    "prId" : 22838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22838#pullrequestreview-159075958",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c28b1ca8-f074-41f9-9c55-3493c0063859",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "+1 on `doctest: +ELLIPSES`",
        "createdAt" : "2018-09-26T16:03:30Z",
        "updatedAt" : "2018-09-26T16:24:42Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9b1921e269d13186a6d23834fe5a2f4827db858",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +2069,2073 @@        0.10355...\n        >>> s.autocorr(lag=2)  # doctest: +ELLIPSIS\n        -0.99999...\n\n        If the Pearson correlation is not well defined, then 'NaN' is returned."
  },
  {
    "id" : "bd5cfc15-03e0-4a5c-b39b-1b528c9b2b7e",
    "prId" : 22890,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22890#pullrequestreview-160090877",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6222eb9-feae-4b98-9c68-929c00ea5777",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think it probably makes more sense to show an example with a numpy array, more than with Python lists. I don't think (may be I'm wrong) in real cases it's so common to make operations between Python lists and pandas objects.\r\n\r\nBut I'll leave that to you, whatever you think it makes more sense.",
        "createdAt" : "2018-09-29T19:18:10Z",
        "updatedAt" : "2018-10-07T11:30:26Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "887d72dd2d839d98568318f9b509279e44000a93",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +2127,2131 @@        >>> arr = np.array([[0, 1], [-2, 3], [4, -5], [6, 7]])\n        >>> s.dot(arr)\n        array([24, 14])\n        \"\"\"\n        from pandas.core.frame import DataFrame"
  },
  {
    "id" : "a338c314-e6f8-4a60-8522-6dd2041cfac0",
    "prId" : 22936,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22936#pullrequestreview-160948626",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "822d1d95-c072-43da-ba2b-192349aefff8",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Can you add a comment here linking to this PR.  Inevitably I'm going to forget why this isn't catching something more specific.",
        "createdAt" : "2018-10-02T22:27:41Z",
        "updatedAt" : "2018-10-03T15:13:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7714e79a512f5d13f52c286458fcc9bac8b40bd0",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +2327,2331 @@            try:\n                new_values = self._values._from_sequence(new_values)\n            except Exception:\n                # https://github.com/pandas-dev/pandas/issues/22850\n                # pandas has no control over what 3rd-party ExtensionArrays"
  },
  {
    "id" : "e79598ea-f0b3-4528-ba3a-859a22850d11",
    "prId" : 23293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23293#pullrequestreview-255355079",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a23dd68f-1804-40f5-b924-23d5c0438a9b",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Do we need to handle scalars here as well?",
        "createdAt" : "2019-06-26T20:38:40Z",
        "updatedAt" : "2019-07-01T18:47:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a719f980-9d51-4c57-a327-61703c3f4d2f",
        "parentId" : "a23dd68f-1804-40f5-b924-23d5c0438a9b",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah... I'm a bit worried about all the issues we've had with `lib.is_scalar` :/",
        "createdAt" : "2019-06-27T16:54:27Z",
        "updatedAt" : "2019-07-01T18:47:58Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "7486d260178176f9e9674c8036bc3063a067b24a",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +781,785 @@            if lib.is_scalar(result):\n                return result\n            return self._constructor(result,\n                                     index=index,\n                                     name=name,"
  },
  {
    "id" : "ab767310-5bfc-4e39-923c-36a1bead299f",
    "prId" : 23293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23293#pullrequestreview-256331586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb70e71f-1f61-4bee-89d9-39201c7873cb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you move this import to the top?",
        "createdAt" : "2019-07-01T13:16:40Z",
        "updatedAt" : "2019-07-01T18:47:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c8a697cf-678a-41e6-8d81-236a4037b99f",
        "parentId" : "eb70e71f-1f61-4bee-89d9-39201c7873cb",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "No, circular import.",
        "createdAt" : "2019-07-01T13:20:38Z",
        "updatedAt" : "2019-07-01T18:47:58Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "7486d260178176f9e9674c8036bc3063a067b24a",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +726,730 @@    ):\n        # TODO: handle DataFrame\n        from pandas.core.internals.construction import extract_array\n        cls = type(self)\n"
  },
  {
    "id" : "200b00d4-2053-4e3a-acde-51e1cfce7501",
    "prId" : 23293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23293#pullrequestreview-256331718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "167134b8-a9b4-49b1-ac31-4b51ec8c7f86",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are we not *always* alignable? when would not be",
        "createdAt" : "2019-07-01T13:17:10Z",
        "updatedAt" : "2019-07-01T18:47:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "20f6ded1-adb2-474e-a62d-0318d65a24b1",
        "parentId" : "167134b8-a9b4-49b1-ac31-4b51ec8c7f86",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "e.g. `np.add(Series, ndarray)` or `np.add(Series, Index)` will not align.",
        "createdAt" : "2019-07-01T13:20:52Z",
        "updatedAt" : "2019-07-01T18:47:58Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "7486d260178176f9e9674c8036bc3063a067b24a",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +757,761 @@        alignable = [x for x, t in zip(inputs, types) if issubclass(t, Series)]\n\n        if len(alignable) > 1:\n            # This triggers alignment.\n            # At the moment, there aren't any ufuncs with more than two inputs"
  },
  {
    "id" : "3b12308d-569c-48c0-b301-b1fb233ce204",
    "prId" : 24048,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24048#pullrequestreview-180571025",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e3a03ce-963d-4cb4-8b58-c838825c80aa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you show what it is replaced by here",
        "createdAt" : "2018-12-02T17:56:33Z",
        "updatedAt" : "2019-01-05T21:23:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "541e816bd3ab934c83415ad64b50d0592f1f041a",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +573,577 @@        dtype: int64\n        \"\"\"\n        msg = (\"Series.nonzero() is deprecated \"\n               \"and will be removed in a future version.\"\n               \"Use Series.to_numpy().nonzero() instead\")"
  },
  {
    "id" : "ef6ccc54-4373-4332-83eb-c2f2b79fcb5d",
    "prId" : 24048,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24048#pullrequestreview-189599391",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fe7c8d2-cc6b-42ee-9e80-3bddc886fe19",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add what this is replaced here as well",
        "createdAt" : "2019-01-05T15:14:04Z",
        "updatedAt" : "2019-01-05T21:23:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "541e816bd3ab934c83415ad64b50d0592f1f041a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +541,545 @@        Return the *integer* indices of the elements that are non-zero.\n\n        .. deprecated:: 0.24.0\n           Please use .to_numpy().nonzero() as a replacement.\n"
  },
  {
    "id" : "8061ec4f-1fa9-472c-a60a-8cc4a44efde7",
    "prId" : 24293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24293#pullrequestreview-187734511",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f61f3c2-aa40-4d22-ac64-f307118bca4d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should this be first? ",
        "createdAt" : "2018-12-24T00:36:31Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1a5ac17e-d79e-4276-897b-b5c56ca0c8d5",
        "parentId" : "3f61f3c2-aa40-4d22-ac64-f307118bca4d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "it isn't clear to me that it would make a difference",
        "createdAt" : "2018-12-24T23:14:03Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4028a14ef585dae19805f05db74ad1495e09e8",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +3539,3543 @@        if isinstance(delegate, ExtensionArray):\n            return delegate._reduce(name, skipna=skipna, **kwds)\n        elif is_datetime64_dtype(delegate):\n            # use DatetimeIndex implementation to handle skipna correctly\n            delegate = DatetimeIndex(delegate)"
  },
  {
    "id" : "577ffa0e-b69a-4976-ab44-86f3ff639dad",
    "prId" : 24395,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24395#pullrequestreview-187632640",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "646a7a8a-7bde-4b4a-8714-171f8ddcccef",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "any way to re-use the doc-string you defined for EA (meaning here and for Index), maybe make it even more generic and parametrize on the types? (ok that we are duplicating code, but the more can share the better).\r\ncc @datapythonista ",
        "createdAt" : "2018-12-23T15:03:10Z",
        "updatedAt" : "2018-12-23T21:02:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e3dc0ca1-9498-46a0-99ed-2ae647263230",
        "parentId" : "646a7a8a-7bde-4b4a-8714-171f8ddcccef",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Had the same thought but was unsure how to do it in a clean way.  I think you could split the docstring to reuse to everything but the See Also and Examples section, then separately define only those sections for EA/Index/Series.  Seems a bit convoluted though; certainly interested to hear if there's a better way.",
        "createdAt" : "2018-12-23T21:09:43Z",
        "updatedAt" : "2018-12-23T21:09:43Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "88ab2853eb56bcb8c595680cc33449534a84f5f6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1039,1043 @@    def repeat(self, repeats, *args, **kwargs):\n        \"\"\"\n        Repeat elements of a Series.\n\n        Returns a new Series where each element of the current Series"
  },
  {
    "id" : "3d336da8-f0a2-4aaa-bc6d-d9cf00df0c75",
    "prId" : 24527,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24527#pullrequestreview-188559782",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "111ed90b-908e-4ae3-8e54-84d1b7e33969",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "IntegerNA ?",
        "createdAt" : "2019-01-01T02:57:07Z",
        "updatedAt" : "2019-01-01T15:05:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "04caab76-cc88-4802-bd8c-e04af775ba76",
        "parentId" : "111ed90b-908e-4ae3-8e54-84d1b7e33969",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "will edit.  note otherwise this is verbatim from 24024",
        "createdAt" : "2019-01-01T15:05:09Z",
        "updatedAt" : "2019-01-01T15:05:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7b7b677efc8c2fe4da11e3c42338da720b4539e",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1564,1568 @@            * Categorical\n            * Period\n            * Datetime with Timezone\n            * Interval\n            * Sparse"
  },
  {
    "id" : "2fb011a2-d25e-4d00-8198-f7d6d099112b",
    "prId" : 24534,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24534#pullrequestreview-188568015",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a652a28-598f-438f-ab77-7625c61dddc6",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this should also be removeable in 24024",
        "createdAt" : "2019-01-01T21:23:38Z",
        "updatedAt" : "2019-01-01T21:23:38Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bcaf77727a3ec2d7468d1a71033907402c633e6",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +481,485 @@        if isinstance(result, DatetimeIndex):\n            result = result._eadata\n        return result\n\n    def _formatting_values(self):"
  },
  {
    "id" : "b65e1e0e-541a-422c-b41e-64addff563df",
    "prId" : 24596,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24596#pullrequestreview-189480685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9adfb35-8492-495a-9ed4-ebbc2910f0cb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "link to pd.array",
        "createdAt" : "2019-01-04T18:41:15Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f4fbde4472700525959dbb7255185e36155f21",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +687,691 @@        Series.array : Zero-copy view to the array backing the Series.\n        Series.to_numpy : Series method for similar behavior.\n\n        Examples\n        --------"
  },
  {
    "id" : "c176cbbb-7bd5-431e-a971-f93b71e8d6d7",
    "prId" : 24757,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24757#pullrequestreview-194371643",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ddc2ebe-2bdd-44e3-8200-adff7d5b6ea9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why would you need to check if the method exists we don't do this for any other types",
        "createdAt" : "2019-01-14T13:42:27Z",
        "updatedAt" : "2019-06-03T18:18:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bfafaffd-6a77-4b9d-9d37-1f072dce6985",
        "parentId" : "7ddc2ebe-2bdd-44e3-8200-adff7d5b6ea9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "otherwise this breaks for e.g. `std`",
        "createdAt" : "2019-01-14T16:34:41Z",
        "updatedAt" : "2019-06-03T18:18:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3d21318b-d205-441e-bdde-e73f6ca784ae",
        "parentId" : "7ddc2ebe-2bdd-44e3-8200-adff7d5b6ea9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "but it doesn't break for datetime64, so puzzled why this is needed here",
        "createdAt" : "2019-01-16T01:37:26Z",
        "updatedAt" : "2019-06-03T18:18:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "168ed2b3-4e1c-4526-89c0-7fb8f9ca5330",
        "parentId" : "7ddc2ebe-2bdd-44e3-8200-adff7d5b6ea9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "?",
        "createdAt" : "2019-01-17T12:52:50Z",
        "updatedAt" : "2019-06-03T18:18:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b2d43ee4-da23-4b59-b8c1-1580869c3c7c",
        "parentId" : "7ddc2ebe-2bdd-44e3-8200-adff7d5b6ea9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "not sure what you're asking for here, buddy.",
        "createdAt" : "2019-01-17T23:57:00Z",
        "updatedAt" : "2019-06-03T18:18:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "1ba1c19a-ab76-4494-a28b-0fd315e35223",
        "parentId" : "7ddc2ebe-2bdd-44e3-8200-adff7d5b6ea9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "eel my comment is why are you checking if the method exists when we don’t use this anywhere else",
        "createdAt" : "2019-01-18T00:18:50Z",
        "updatedAt" : "2019-06-03T18:18:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dcc3d823-ca6c-4673-82ef-22c60a1183bb",
        "parentId" : "7ddc2ebe-2bdd-44e3-8200-adff7d5b6ea9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "because failing to check for this causes a test failure.  In particular, for `std`, where a timedelta64 ndarray has the method but TDA doesn't yet",
        "createdAt" : "2019-01-18T00:20:29Z",
        "updatedAt" : "2019-06-03T18:18:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "215af963-d65d-4b4f-9f26-ae831631cea1",
        "parentId" : "7ddc2ebe-2bdd-44e3-8200-adff7d5b6ea9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "the is true for DTA so your answer doesn’t make sense ",
        "createdAt" : "2019-01-18T00:38:48Z",
        "updatedAt" : "2019-06-03T18:18:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5edb5c8c-db98-469d-ac0b-26039f141000",
        "parentId" : "7ddc2ebe-2bdd-44e3-8200-adff7d5b6ea9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "`std` is _supposed_ to raise for datetime64 in the status quo, so we don't test it",
        "createdAt" : "2019-01-18T00:47:15Z",
        "updatedAt" : "2019-06-03T18:18:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "12653523-a1b7-414e-97bd-bfd720b6cc23",
        "parentId" : "7ddc2ebe-2bdd-44e3-8200-adff7d5b6ea9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "still this is just smelly. I don't see a problem delegating to TDI here if its a timedelta type. there must be something else wrong if you need this check.",
        "createdAt" : "2019-01-19T21:59:12Z",
        "updatedAt" : "2019-06-03T18:18:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "111c345f211f6675bc76072b858c4a3880a21c88",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3730,3734 @@            # use DatetimeIndex implementation to handle skipna correctly\n            delegate = DatetimeIndex(delegate)\n        elif is_timedelta64_dtype(delegate) and hasattr(TimedeltaIndex, name):\n            # use TimedeltaIndex to handle skipna correctly\n            # TODO: remove hasattr check after TimedeltaIndex has `std` method"
  },
  {
    "id" : "0d4b83b2-ea73-426b-bf27-152f04d49991",
    "prId" : 25132,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25132#pullrequestreview-206426625",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15a77f02-51e1-42af-b36d-d1153c5ec325",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "blank line before this",
        "createdAt" : "2019-02-21T17:02:58Z",
        "updatedAt" : "2019-02-28T01:28:41Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d62018b4d83c2c3eebfb61ae786e9cdd41172d0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1670,1674 @@            * IntegerNA\n\n        See Examples section.\n\n        Examples"
  },
  {
    "id" : "f008f6a1-3432-4843-af2f-1276a06e416a",
    "prId" : 25304,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25304#pullrequestreview-204228734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9312114d-85f5-4724-9efb-b2fe43f6dd24",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why are u adding a code path here? the original is much more generic ; need to avoid special cases like this\r\nif u need to handle this specially then the place is in the Categirical itself",
        "createdAt" : "2019-02-15T12:01:49Z",
        "updatedAt" : "2019-02-15T12:32:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "05bac8b0-09f6-41d6-ac87-e8d8f69dc4ae",
        "parentId" : "9312114d-85f5-4724-9efb-b2fe43f6dd24",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is because Categorical deviates here from the standard ExtensionArray (see https://github.com/pandas-dev/pandas/issues/25303 for the issue about that). \r\nI personally find it clearer with this special case, making it explicit that Categorical has a different signature. And after the deprecation period, we can remove this special case.\r\n\r\nIf you feel strongly about it, it can indeed be handled inside Categorical. But that means that all the other arrays' `_reduce` method needs to be updated as well to handle (=ignore) `numeric_only`, which is also not clean (and the special case here is only temporarily anyway).\r\n\r\n",
        "createdAt" : "2019-02-15T12:09:39Z",
        "updatedAt" : "2019-02-15T12:32:26Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "eeb21b57-2358-42ab-af88-9eaa22b7659b",
        "parentId" : "9312114d-85f5-4724-9efb-b2fe43f6dd24",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is not more clear and leads to future issues\r\npls move to _reduce",
        "createdAt" : "2019-02-15T12:12:08Z",
        "updatedAt" : "2019-02-15T12:32:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "844c0a09-01cd-4533-9fa6-34559b83901c",
        "parentId" : "9312114d-85f5-4724-9efb-b2fe43f6dd24",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not sure why the others need to change at all you’re logic is circular",
        "createdAt" : "2019-02-15T12:12:54Z",
        "updatedAt" : "2019-02-15T12:32:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "23ee20ad-7ca3-4bf4-8e45-cfaa6b9b13d5",
        "parentId" : "9312114d-85f5-4724-9efb-b2fe43f6dd24",
        "authorId" : "f95492b7-d2d5-4a39-8396-4128fa81a35c",
        "body" : "This would cause more changes, since the problem is actually that the argument `numeric_only` is not passed currently. If we would add it for every `ExtensionArray` call we get problems at the other reduction methods. For instance here: https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/numpy_.py#L322 (they don't have `numeric_only`, or `**kwargs` in the method definition). \r\n\r\nSo we could change the call for every `ExtenensionArray` to:\r\n\r\n`return delegate._reduce(name, skipna=skipna, numeric_only=numeric_only, **kwds)`\r\n\r\nbut then we would need to make sure every child of ExtensionArray supports this and this is currently not the case.",
        "createdAt" : "2019-02-15T12:14:51Z",
        "updatedAt" : "2019-02-15T12:32:26Z",
        "lastEditedBy" : "f95492b7-d2d5-4a39-8396-4128fa81a35c",
        "tags" : [
        ]
      },
      {
        "id" : "63da51c2-f441-4939-b314-8607aeb35309",
        "parentId" : "9312114d-85f5-4724-9efb-b2fe43f6dd24",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@arnov explained it well. I think we don't want to change the EA interface (`_reduce` is an official part of it) just for this back-compat special case we are going to deprecate. Hence, categorical needs to be handled separately here (but again, this is only temporary)",
        "createdAt" : "2019-02-15T12:42:29Z",
        "updatedAt" : "2019-02-15T12:42:29Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1cc39a7f-3835-4ebb-b10a-57456e178a66",
        "parentId" : "9312114d-85f5-4724-9efb-b2fe43f6dd24",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "disagree numeric_only is likely not going away anytime soon and even so\r\nthe EA simply need to accept it (they can ignore it)",
        "createdAt" : "2019-02-15T12:48:40Z",
        "updatedAt" : "2019-02-15T12:48:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6376716f-3cc2-4140-8714-e74206393d39",
        "parentId" : "9312114d-85f5-4724-9efb-b2fe43f6dd24",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback this is *not* about the numeric_only in DataFrame/Series reductions that determines for which columns the reduction is calculated. This is another meaning of  the keyword *only* for categorical that determines whether NaNs should be skipped or not. Please read https://github.com/pandas-dev/pandas/issues/25303\r\n\r\nSo we are not speaking about removing that general use case of `numeric_only`, but only the one in Categorical.min/max.",
        "createdAt" : "2019-02-15T12:51:23Z",
        "updatedAt" : "2019-02-15T12:51:23Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "50b94cc5-ea8f-4387-8408-dd2661558b9e",
        "parentId" : "9312114d-85f5-4724-9efb-b2fe43f6dd24",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i’ll look closer but am still -1 on any handling as a special case in the Series call\r\nthe point is that pass on kwargs; EA can ignore or not as required",
        "createdAt" : "2019-02-15T13:02:11Z",
        "updatedAt" : "2019-02-15T13:02:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9137e80c-2204-436a-88ea-f73bc629eca0",
        "parentId" : "9312114d-85f5-4724-9efb-b2fe43f6dd24",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK, to take a step back: @jreback do you agree that in the *long term* we can deprecate this `numeric_only` keyword for Categorical.min/max? \r\n(it's the only EA that now uses it, while the others all use `skipna` for the same thing)",
        "createdAt" : "2019-02-15T13:04:39Z",
        "updatedAt" : "2019-02-15T13:04:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec1fa9f5cab13e4378746a4654262594597e250c",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +3679,3683 @@            self._get_axis_number(axis)\n\n        if isinstance(delegate, Categorical):\n            # TODO deprecate numeric_only argument for Categorical and use\n            # skipna as well, see GH25303"
  },
  {
    "id" : "fe485e0c-62f2-4a6b-a550-8c305c7762c2",
    "prId" : 25358,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25358#pullrequestreview-209892993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f195688-92c7-4ca3-bf81-f18e074ff49c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "was this a typo?",
        "createdAt" : "2019-03-03T02:27:12Z",
        "updatedAt" : "2019-03-03T05:29:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a2da0878-fbaa-4611-b99a-b3874adcf220",
        "parentId" : "2f195688-92c7-4ca3-bf81-f18e074ff49c",
        "authorId" : "abb2f4cc-466a-49a8-a19c-1bce5328a960",
        "body" : "This comes under the definition of `nsmallest`, so I hope I *corrected* a typo and didn't *make* one. If otherwise, please suggest a correction @jreback",
        "createdAt" : "2019-03-03T03:30:08Z",
        "updatedAt" : "2019-03-03T05:29:32Z",
        "lastEditedBy" : "abb2f4cc-466a-49a8-a19c-1bce5328a960",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a8367d638aba233e1f360fe00eedffe492a18d1",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +3241,3245 @@        dtype: int64\n\n        The `n` smallest elements where ``n=5`` by default.\n\n        >>> s.nsmallest()"
  }
]