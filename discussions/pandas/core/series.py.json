[
  {
    "id" : "2aac73c3-509f-4633-80ee-9806fc632821",
    "prId" : 4641,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6b1c9d7-cff9-46df-b303-5365bd9fec3d",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "am I reading this wrong, or are you converting other to `None` unless it's a `PeriodIndex` or `DatetimeIndex`?\n",
        "createdAt" : "2013-08-23T01:36:26Z",
        "updatedAt" : "2013-08-23T01:56:15Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "e4474581-e019-43f9-bd0d-375e8dfa1e50",
        "parentId" : "c6b1c9d7-cff9-46df-b303-5365bd9fec3d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "nope...it comes in an out as the same (unless the date/period indexdex convert it)...I needed to do this because its needed below...a bit hacky, but didn't see a better way around it\n",
        "createdAt" : "2013-08-23T01:38:08Z",
        "updatedAt" : "2013-08-23T01:56:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0990a750a8ead5aa4f073ca83b7a7132b3ad0eba",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +143,147 @@            # convert lhs and rhs\n            lvalues,_ = convert_to_array(lvalues)\n            rvalues,other = convert_to_array(rvalues,other)\n\n            is_datetime_rhs  = com.is_datetime64_dtype(rvalues)"
  },
  {
    "id" : "e6132009-bba8-4b27-b5e1-8884f24f37f1",
    "prId" : 5164,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bef8e950-12bf-4550-950f-ffb9ac7f2b3b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "change this around a bit. The passed name should substitute for the series name (if it has one). and need a correspodning test for this as well.\n",
        "createdAt" : "2013-10-09T20:19:02Z",
        "updatedAt" : "2013-10-10T01:44:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "81a2548d-3191-4ba8-8b39-b0874933fc5d",
        "parentId" : "bef8e950-12bf-4550-950f-ffb9ac7f2b3b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "`name = name if name is not None else self.name`\n",
        "createdAt" : "2013-10-09T20:22:17Z",
        "updatedAt" : "2013-10-10T01:44:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5ec444e4-11b0-4e37-8b6a-ce925a907c85",
        "parentId" : "bef8e950-12bf-4550-950f-ffb9ac7f2b3b",
        "authorId" : "8b819cb5-221d-4500-bd28-9fbce6a3382c",
        "body" : "I'll update with feedback. Thanks.\n\nOn Wednesday, October 9, 2013, jreback wrote:\n\n> In pandas/core/series.py:\n> \n> > -    def to_dataframe(self, name=None):\n> > -        \"\"\"\n> > -        Convert Series to DataFrame\n> >   +\n> > -        Parameters\n> > -        ----------\n> > -        name : object, default None\n> > -            The name of the column corresponding to the Series values\n> >   +\n> > -        Returns\n> > -        -------\n> > -        data_frame : DataFrame\n> > -        \"\"\"\n> > -        from pandas.core.frame import DataFrame\n> > -        if name is None:\n> > -            df = DataFrame(self)\n> \n> name = name if name is not None else self.name\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/pydata/pandas/pull/5164/files#r6869332\n> .\n\n## \n\nDavid Rasch\nrasch@raschnet.com\n",
        "createdAt" : "2013-10-09T21:57:27Z",
        "updatedAt" : "2013-10-10T01:44:31Z",
        "lastEditedBy" : "8b819cb5-221d-4500-bd28-9fbce6a3382c",
        "tags" : [
        ]
      },
      {
        "id" : "d88362e0-9db2-4087-9744-e8193ad91d7d",
        "parentId" : "bef8e950-12bf-4550-950f-ffb9ac7f2b3b",
        "authorId" : "8b819cb5-221d-4500-bd28-9fbce6a3382c",
        "body" : "This was copied from above, I'm not sure that \n\n```\nname = name if name is not None else self.name\n```\n\nwill work when self.name = None\n\nYou end up with 'None' as the column index instead of 0.\n\nI'm adding a test for this case too.\n",
        "createdAt" : "2013-10-10T01:02:37Z",
        "updatedAt" : "2013-10-10T01:44:31Z",
        "lastEditedBy" : "8b819cb5-221d-4500-bd28-9fbce6a3382c",
        "tags" : [
        ]
      },
      {
        "id" : "ffc414b7-6722-484c-bdea-4cce700d825c",
        "parentId" : "bef8e950-12bf-4550-950f-ffb9ac7f2b3b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes if name is none then just do Dataframe(self)\n\nthe name parameter that u r passing should override the name of the series I think\n",
        "createdAt" : "2013-10-10T01:08:50Z",
        "updatedAt" : "2013-10-10T01:44:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "844bcff0917af28907483be3cd927a07edb8f53d",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1039,1043 @@        from pandas.core.frame import DataFrame\n        if name is None:\n            df = DataFrame(self)\n        else:\n            df = DataFrame({name: self})"
  },
  {
    "id" : "675a58a6-30fa-44bb-98d5-44b63e9f781b",
    "prId" : 6861,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccd55550-615c-4a23-a8c7-968eda22a82c",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add an explanation here? Something like `Series.order : equivalent method but not in-place by default`\n",
        "createdAt" : "2014-04-10T14:25:19Z",
        "updatedAt" : "2014-04-10T15:50:29Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "50d6f9d3-699c-4bf1-b150-230af46f1a4a",
        "parentId" : "ccd55550-615c-4a23-a8c7-968eda22a82c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "and the same in the order docstring but then the inverse.\n",
        "createdAt" : "2014-04-10T14:25:43Z",
        "updatedAt" : "2014-04-10T15:50:29Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "60530c5d-791e-4de3-911a-261e1c263c19",
        "parentId" : "ccd55550-615c-4a23-a8c7-968eda22a82c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sure\n",
        "createdAt" : "2014-04-10T14:26:27Z",
        "updatedAt" : "2014-04-10T15:50:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2f8a0ec4-a912-4136-9cd7-0787e328186e",
        "parentId" : "ccd55550-615c-4a23-a8c7-968eda22a82c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "done\n",
        "createdAt" : "2014-04-10T14:30:38Z",
        "updatedAt" : "2014-04-10T15:50:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "15c3b9f2a3a11a3b359afe02e0ba98a832f9d721",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +1681,1685 @@        See Also\n        --------\n        Series.order\n        \"\"\"\n        return self.order(ascending=ascending,"
  },
  {
    "id" : "76f388ee-279e-4554-82a9-e352c386d342",
    "prId" : 8492,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10a3975f-fcb8-4408-b334-b17a7be7b9de",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback had to handle None, or is there a better way that `_ensure_platform_int` can handle None?\n",
        "createdAt" : "2014-10-06T20:43:38Z",
        "updatedAt" : "2014-10-06T20:43:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d4f350fb-e631-4041-abda-2c8398c6d380",
        "parentId" : "10a3975f-fcb8-4408-b334-b17a7be7b9de",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no that is right\n",
        "createdAt" : "2014-10-06T20:58:17Z",
        "updatedAt" : "2014-10-06T20:58:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b94968fb3d2b91c62b984938d420fac07652a4b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1431,1435 @@        \"\"\"\n        if sorter is not None:\n            sorter = com._ensure_platform_int(sorter)\n\n        return self.values.searchsorted(Series(v).values, side=side,"
  },
  {
    "id" : "f6653d12-5265-40b8-bbd1-492a9747629a",
    "prId" : 8909,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33b27576-38a7-4825-863b-604bb4f59568",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so `isinstance(data, (types.GeneratorType, map))` doesn't work?\n",
        "createdAt" : "2014-11-27T17:43:08Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d0f7a643-897c-45b5-8be6-1d5135df9d53",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "try also with `collections.Iterable` here\n",
        "createdAt" : "2014-11-27T17:43:40Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8cae9224-0d2d-4329-9fb6-b4beb1201a7a",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "49780b90-c500-463a-a606-80d5cc8edaaf",
        "body" : "it doesn't work because python2's map is just a function. python3's map is a class.\n",
        "createdAt" : "2014-11-27T17:48:58Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "49780b90-c500-463a-a606-80d5cc8edaaf",
        "tags" : [
        ]
      },
      {
        "id" : "1933b696-6993-4f69-9d77-171d85dec5b9",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ahh ok, what about adding `collections.Iterable` alongside GeneratorType as well?\n",
        "createdAt" : "2014-11-27T17:51:50Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "32a475f9-bf75-45a8-abd0-6d9a3d7bd20d",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "49780b90-c500-463a-a606-80d5cc8edaaf",
        "body" : "ideally I'd love to make Series just accept any iterable but the way it's working now it raises an exception for sets or frozensets. I didn't want to change that without discussing the reason why it was decided this way.\n",
        "createdAt" : "2014-11-27T17:52:32Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "49780b90-c500-463a-a606-80d5cc8edaaf",
        "tags" : [
        ]
      },
      {
        "id" : "32952150-05b5-43d1-a31f-2de88495660e",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "You could do `isinstance(v, collections.Iterable) and not isinstance(v, (collections.Set, collections.Mapping))`\n",
        "createdAt" : "2014-11-27T17:55:12Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      },
      {
        "id" : "b0e55582-7969-4d39-ae50-82d1015bff8e",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sets and frozensets are iterable but non-orderable, so doesn't make sense for Series to directly accept them (e.g. you need to be a list-list or a dictionary-like which maps keys->values)\n",
        "createdAt" : "2014-11-27T18:04:02Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3c557391-c845-43d6-bba3-b8e5f1825107",
        "parentId" : "33b27576-38a7-4825-863b-604bb4f59568",
        "authorId" : "49780b90-c500-463a-a606-80d5cc8edaaf",
        "body" : "this is a reasonable argument, but I don't think this is the way python works in general.\n\npython doesn't throw exceptions for things like these. I mean, you don't need to wrap sets with list(some_set) or iter(some_set) in most cases. python just uses the \"order\" it gets from iterating the set.\n\nI think zip is a bit similar to Series, and it works fine if you just use sets with it.\n\nand it's not just a way to conform with python idioms, I think a reasonable amount of code in the constructors could be simplified if you just ask these objects to be iterable.\n",
        "createdAt" : "2014-11-27T19:02:05Z",
        "updatedAt" : "2014-11-30T23:35:58Z",
        "lastEditedBy" : "49780b90-c500-463a-a606-80d5cc8edaaf",
        "tags" : [
        ]
      }
    ],
    "commit" : "867b288e9272f30596eae43cc99a039368045de1",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +185,189 @@                    name = data.name\n            elif (isinstance(data, types.GeneratorType) or\n                  (compat.PY3 and isinstance(data, map))):\n                data = list(data)\n            elif isinstance(data, (set, frozenset)):"
  },
  {
    "id" : "bd477d40-9087-4aef-a0c1-e3277abc7489",
    "prId" : 9321,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fd4d24a-d6ea-46dc-8a38-f3a4501bb047",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "deprecate `.hist` ? (see above)\n",
        "createdAt" : "2015-09-10T10:55:30Z",
        "updatedAt" : "2015-09-10T21:31:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a65bd5ad7931114fd61f10db51d887ca31b5f3a",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2885,2889 @@Series.plot = base.AccessorProperty(_gfx.SeriesPlotMethods, _gfx.SeriesPlotMethods)\nSeries.hist = _gfx.hist_series\n\n# Add arithmetic!\nops.add_flex_arithmetic_methods(Series, **ops.series_flex_funcs)"
  },
  {
    "id" : "3320d417-0355-4ff6-ae38-c6ffea6d31e2",
    "prId" : 9322,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5edf1cb7-c6e7-4799-8e1e-ef711bb383dc",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "perhaps we should insert some sort of check here? Something like?\n\n``` python\n# pandas represents strings as object dtype\nif self.dtype.kind != 'O':\n    raise TypeError\n```\n",
        "createdAt" : "2015-01-22T09:28:22Z",
        "updatedAt" : "2015-01-23T08:06:40Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "b8cc78d7-34cc-4dd9-8287-2c09a7d7f276",
        "parentId" : "5edf1cb7-c6e7-4799-8e1e-ef711bb383dc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I had the same question. Use `core.common.is_object_dtype` (of course nice error message and tests)\n",
        "createdAt" : "2015-01-22T23:41:44Z",
        "updatedAt" : "2015-01-23T08:06:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7a6d1bf73c08b96c616c52fc71483193e9bf10e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2512,2516 @@            raise TypeError(\"Can only use .str accessor with string values, \"\n                            \"which use np.object_ dtype in pandas\")\n        return StringMethods(self)\n\n    str = base.AccessorProperty(StringMethods, _make_str_accessor)"
  },
  {
    "id" : "bbd77af0-488a-4442-8201-5b990ffb76a1",
    "prId" : 10719,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e9aae90-cda5-444b-9571-cfc3419a50fb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add here a docstring like:\n\n```\n\"\"\"DEPRECATED. Use ``.iloc[i]`` or ``.iat[i]`` instead\"\"\"\n```\n\nto every of those functions? (and maybe also for the ones in frame.py) \nBecause they will still appear on the automatically generated API pages, and then it is more clear you shouldn't use instead of no docstring.\n",
        "createdAt" : "2015-08-02T11:28:48Z",
        "updatedAt" : "2015-08-02T14:49:30Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "b69bde6d9485fdd139ace82f4e84f2944fe30bbe",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +782,786 @@        return self.values.reshape(shape, **kwargs)\n\n    def iget_value(self, i, axis=0):\n        \"\"\"\n        DEPRECATED. Use ``.iloc[i]`` or ``.iat[i]`` instead"
  },
  {
    "id" : "07a8a6c9-30b8-4e6f-b60f-63fb66a3c75d",
    "prId" : 13979,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a95b43e-d901-4b29-93d5-641e45508c69",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "any way to do this in the super? IOW `unique1d` should return the underlying correctly\n",
        "createdAt" : "2016-08-25T10:25:04Z",
        "updatedAt" : "2016-08-29T01:46:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c37af4f6-7d3c-4e50-9c33-2488db490960",
        "parentId" : "6a95b43e-d901-4b29-93d5-641e45508c69",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Because `Series.unique` definition is required for docstring after all, performing `Series` specific process here looks clearer.\n",
        "createdAt" : "2016-08-26T23:20:37Z",
        "updatedAt" : "2016-08-29T01:46:56Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "380afba7-cafd-4a69-b3f1-8e23c4ae5b3f",
        "parentId" : "6a95b43e-d901-4b29-93d5-641e45508c69",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok then\n\nadd a big TODO here with the issue reference saying this should really return a dtype compat array-like in future versions\n",
        "createdAt" : "2016-08-26T23:22:51Z",
        "updatedAt" : "2016-08-29T01:46:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a27815690571a978fac9037ebded0214ac2be5",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1235,1239 @@    @Appender(base._shared_docs['unique'] % _shared_doc_kwargs)\n    def unique(self):\n        result = super(Series, self).unique()\n        if is_datetime64tz_dtype(self.dtype):\n            # to return array of Timestamp with tz"
  },
  {
    "id" : "f5aa1528-d701-4555-bad5-9ff4c8be7af7",
    "prId" : 14445,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14445#pullrequestreview-6143005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e0787fb-21c6-48d7-9a87-dcb712ee0686",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you put:\n\n```\nindexer = _ensure_platform_int(indexer)\nnew_index = index.take(indexer)\n```\n\noutside the if-else block\n",
        "createdAt" : "2016-10-26T10:38:45Z",
        "updatedAt" : "2016-12-02T23:37:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5159b4ed-6e79-4dd5-bcb9-c0d3a206b37b",
        "parentId" : "5e0787fb-21c6-48d7-9a87-dcb712ee0686",
        "authorId" : "97761d92-66e3-47ae-9f19-842d628d22c1",
        "body" : "Yes; moved.\n",
        "createdAt" : "2016-10-27T20:49:23Z",
        "updatedAt" : "2016-12-02T23:37:25Z",
        "lastEditedBy" : "97761d92-66e3-47ae-9f19-842d628d22c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "05e9e526bfaa3e7ac9599c3f15321a2b7fc7859f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1784,1788 @@            from pandas.core.groupby import _lexsort_indexer\n            indexer = _lexsort_indexer(index.labels, orders=ascending)\n        else:\n            from pandas.core.groupby import _nargsort\n            indexer = _nargsort(index, kind=kind, ascending=ascending,"
  },
  {
    "id" : "0773f001-e2e6-4423-bf5f-02bbeb2b6946",
    "prId" : 14668,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14668#pullrequestreview-12350370",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "498bfcad-7607-4df4-8319-117cf9b1ef87",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Do you have an example of where apply fails and this is needed? (i.e. is this covered in the test cases?)",
        "createdAt" : "2016-12-10T12:27:04Z",
        "updatedAt" : "2017-04-14T13:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "566d6fa5-ca05-4637-873a-741bbd105313",
        "parentId" : "498bfcad-7607-4df4-8319-117cf9b1ef87",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes, something like this (its because Series will row-by-row application)\r\n\r\n```\r\nIn [4]: Series(range(5)).apply(lambda x: x-x.min())\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-4-e65bceda88a4> in <module>()\r\n----> 1 Series(range(5)).apply(lambda x: x-x.min())\r\n\r\n/Users/jreback/miniconda3/envs/pandas/lib/python3.5/site-packages/pandas/core/series.py in apply(self, func, convert_dtype, args, **kwds)\r\n   2290             else:\r\n   2291                 values = self.asobject\r\n-> 2292                 mapped = lib.map_infer(values, f, convert=convert_dtype)\r\n   2293 \r\n   2294         if len(mapped) and isinstance(mapped[0], Series):\r\n\r\npandas/src/inference.pyx in pandas.lib.map_infer (pandas/lib.c:66116)()\r\n\r\n<ipython-input-4-e65bceda88a4> in <lambda>(x)\r\n----> 1 Series(range(5)).apply(lambda x: x-x.min())\r\n\r\nAttributeError: 'int' object has no attribute 'min'\r\n```",
        "createdAt" : "2016-12-10T16:19:25Z",
        "updatedAt" : "2017-04-14T13:45:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae6c6f6cbd4b760ec70b1d48b27fe53b6644e208",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +2182,2186 @@                result = self.apply(func, *args, **kwargs)\n            except (ValueError, AttributeError, TypeError):\n                result = func(self, *args, **kwargs)\n\n        return result"
  },
  {
    "id" : "b009e3bd-84c1-4b1d-b15f-4f9ef80e4be4",
    "prId" : 14780,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14780#pullrequestreview-10958238",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f9a5166-2a01-431e-9495-5464c510ff63",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use shared docs here to avoid repeating everything",
        "createdAt" : "2016-12-01T11:55:40Z",
        "updatedAt" : "2016-12-05T06:18:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2f95b39f-4cf6-4b17-9c5d-7945f8fe4428",
        "parentId" : "5f9a5166-2a01-431e-9495-5464c510ff63",
        "authorId" : "0a464613-e916-4495-9db3-6b1046ae03a3",
        "body" : "Could you show me an example?",
        "createdAt" : "2016-12-01T12:29:31Z",
        "updatedAt" : "2016-12-05T06:18:54Z",
        "lastEditedBy" : "0a464613-e916-4495-9db3-6b1046ae03a3",
        "tags" : [
        ]
      },
      {
        "id" : "f55c8c26-14dc-41b9-8bf1-c512595a1c69",
        "parentId" : "5f9a5166-2a01-431e-9495-5464c510ff63",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "look for shared_doc",
        "createdAt" : "2016-12-01T12:44:23Z",
        "updatedAt" : "2016-12-05T06:18:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0e1025a2-54a1-442f-9245-ee0f61d3f3a9",
        "parentId" : "5f9a5166-2a01-431e-9495-5464c510ff63",
        "authorId" : "0a464613-e916-4495-9db3-6b1046ae03a3",
        "body" : "Should this shared docstring be in `pandas/io/excel.py` or somewhere else?",
        "createdAt" : "2016-12-01T12:54:11Z",
        "updatedAt" : "2016-12-05T06:18:54Z",
        "lastEditedBy" : "0a464613-e916-4495-9db3-6b1046ae03a3",
        "tags" : [
        ]
      }
    ],
    "commit" : "605b9cebba9146f920d321f845d80f995845636e",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +2631,2635 @@                    header=header, index=index, index_label=index_label,\n                    startrow=startrow, startcol=startcol, engine=engine,\n                    merge_cells=merge_cells, encoding=encoding,\n                    inf_rep=inf_rep, verbose=verbose)\n"
  },
  {
    "id" : "ab0428fd-3531-43e0-a937-f6fe8190958c",
    "prId" : 14780,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14780#pullrequestreview-10983722",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0ec5c4e-4399-4a64-ae40-ac040b80d422",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add to the doc-string a versionadded tag (0.20.)",
        "createdAt" : "2016-12-01T15:12:45Z",
        "updatedAt" : "2016-12-05T06:18:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "605b9cebba9146f920d321f845d80f995845636e",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +2622,2626 @@\n    @Appender(generic._shared_docs['to_excel'] % _shared_doc_kwargs)\n    def to_excel(self, excel_writer, sheet_name='Sheet1', na_rep='',\n                 float_format=None, columns=None, header=True, index=True,\n                 index_label=None, startrow=0, startcol=0, engine=None,"
  },
  {
    "id" : "d3463caa-0b98-46af-89ef-74c4073a689e",
    "prId" : 16002,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16002#pullrequestreview-32897276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7001aecf-9864-4325-a59f-7166bd7f457b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a 1-line comment here on what you are doing",
        "createdAt" : "2017-04-14T21:02:44Z",
        "updatedAt" : "2017-04-15T00:28:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "79cfd11c807884d41e4b725dcef095a0f839d883",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +2148,2152 @@                map_f = lib.map_infer\n\n        if isinstance(arg, dict):\n            if hasattr(arg, '__missing__'):\n                # If a dictionary subclass defines a default value method,"
  },
  {
    "id" : "90b36534-8544-46da-92b2-74cdaa11ed19",
    "prId" : 18600,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18600#pullrequestreview-108521283",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa1c430f-a140-493e-85ac-da371db110c6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is pretty hard to read, but ok for now, see if can simplify in the future",
        "createdAt" : "2018-04-01T14:15:34Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cd6145e4-b677-4936-8ea4-d1eaee15ec86",
        "parentId" : "fa1c430f-a140-493e-85ac-da371db110c6",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Yes, for sure we will need some unified mechanism to process iterators",
        "createdAt" : "2018-04-01T15:18:16Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "22701fcf9e2f9daae4020d50af1ff9042803691b",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +4048,4052 @@            # Take care in creating object arrays (but iterators are not\n            # supported):\n            if is_object_dtype(dtype) and (is_list_like(subarr) and\n                                           not (is_iterator(subarr) or\n                                           isinstance(subarr, np.ndarray))):"
  },
  {
    "id" : "64a26cd5-fa51-4500-8202-61e682c3579e",
    "prId" : 19035,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19035#pullrequestreview-107505760",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f572c44-0bf0-45cd-90c1-e1fd689dfd25",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can u update the .dot doc string that â€˜@â€˜ operator is supported in >=3.5",
        "createdAt" : "2018-01-06T23:42:47Z",
        "updatedAt" : "2018-03-30T21:55:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5243f7c3-359a-4510-bce8-b5ed26b15806",
        "parentId" : "0f572c44-0bf0-45cd-90c1-e1fd689dfd25",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you do this",
        "createdAt" : "2018-03-25T23:01:20Z",
        "updatedAt" : "2018-03-30T21:55:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dcb0ca27-ba74-4aa8-a2bb-81c93ff2c707",
        "parentId" : "0f572c44-0bf0-45cd-90c1-e1fd689dfd25",
        "authorId" : "b166bda0-b3db-486d-a68e-b39350a7613e",
        "body" : "You mean update the .dot doc string? I believe that is done",
        "createdAt" : "2018-03-27T23:47:57Z",
        "updatedAt" : "2018-03-30T21:55:06Z",
        "lastEditedBy" : "b166bda0-b3db-486d-a68e-b39350a7613e",
        "tags" : [
        ]
      }
    ],
    "commit" : "c036ed0da8f147790529f123106f46e4c23cdd36",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +2034,2038 @@            raise TypeError('unsupported type: %s' % type(other))\n\n    def __matmul__(self, other):\n        \"\"\" Matrix multiplication using binary `@` operator in Python>=3.5 \"\"\"\n        return self.dot(other)"
  },
  {
    "id" : "33533c01-7df7-4ab4-ba2a-7aca2c0103a7",
    "prId" : 19338,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19338#pullrequestreview-90516569",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4c41d91-4f1c-4f94-bad6-c5e2da002d9a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "If anything this would be an AssertionError. But is this code path actually hit by *any* tests? ",
        "createdAt" : "2018-01-22T11:04:47Z",
        "updatedAt" : "2018-01-23T17:59:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2b38fbad-7c5c-4136-8594-2297a5739eef",
        "parentId" : "f4c41d91-4f1c-4f94-bad6-c5e2da002d9a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Nope. <b>update</b> This never raises in tests because the only times `Series.__init__` is called with a `SingleBlockManager` as the `data` kwarg also has `index=data.index`  Because a) users shouldn't be passing `SingleBlockManager` around anyway and b) if they ever did pass one and pass a non-matching it would raise because `BlockManager.reindex` is broken, better to just disallow the broken case and enforce it early on, then delete the broken code.\r\n\r\nI'm fine with raising an AssertionError.",
        "createdAt" : "2018-01-22T15:42:55Z",
        "updatedAt" : "2018-01-23T17:59:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7eab6d963327f59e40042e728fe5f4d408546be",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +200,204 @@                elif not data.index.equals(index) or copy:\n                    # GH#19275 SingleBlockManager input should only be called\n                    # internally\n                    raise AssertionError('Cannot pass both SingleBlockManager '\n                                         '`data` argument and a different '"
  },
  {
    "id" : "6d1749cf-08d3-4e8e-b2ce-0f06d94fca76",
    "prId" : 19520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19520#pullrequestreview-97383342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee4fb32f-a0f7-4f08-8168-717825f33af2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment. This interface is now really smelly. I thought the purpose of ``._values`` was to do this on ALL index classes? to return the 'data' in a dtype appropraite manner? if that is not the case then this needs fixing.",
        "createdAt" : "2018-02-16T17:48:00Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "efd00073-e22e-47d2-8feb-5f1dcea90fee",
        "parentId" : "ee4fb32f-a0f7-4f08-8168-717825f33af2",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "What's the issue here? That's exactly what `._values` did. I changed the two elifs into the one.\r\n\r\nI can't remove any more since the `if` branch is dealing with copys and the `else` goes on to do more stuff in `_sanitize_arrary`.",
        "createdAt" : "2018-02-17T03:32:33Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "e94bba5a-4282-4275-a89e-3e36cc3cf146",
        "parentId" : "ee4fb32f-a0f7-4f08-8168-717825f33af2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`_to_embed` previously took a copy, while now `data._values` does not? (but don't know if this is needed in this context here)",
        "createdAt" : "2018-02-17T15:39:03Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "10c17aa3-4093-4af6-a8c4-4ca745b76c93",
        "parentId" : "ee4fb32f-a0f7-4f08-8168-717825f33af2",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Let's copy if copy is True.",
        "createdAt" : "2018-02-17T19:48:50Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5562b99d55062b2bb0a5b359bd5375adb3a46e",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +3122,3126 @@    if isinstance(data, ABCIndexClass) and not copy:\n        pass\n    elif isinstance(data, (PeriodIndex, DatetimeIndex)):\n        data = data._values\n        if copy:"
  },
  {
    "id" : "5c5335b1-d869-4584-a6d7-e21fcb821101",
    "prId" : 19520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19520#pullrequestreview-98566544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebdedadb-0432-4997-80f8-241dfde0431a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Side note (maybe I should open an issue, if there is none yet), but `is_dtype` will always return True for Categoricals, whatever the categories/ordered attributes, I think? Is this actually what we want? As currently doing `pd.Series(pd.Categorical(['a', 'b']), dtype=CategoricalDType(categories=['A', 'B']))` will just ignore the `dtype` instead of raising an error / coercing.",
        "createdAt" : "2018-02-17T15:36:28Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "bb14d4af-2c73-478e-af79-3d04a5f1e379",
        "parentId" : "ebdedadb-0432-4997-80f8-241dfde0431a",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I thought there was an issue about this recently, though I couldn't find it easily.\r\n\r\nThis could be a hole in our ExtensionDtype API. We have `is_dtype` for seeing if the dtypes are the same kind, but we might want an `is_dtype_equal` for checking parametrized dtypes.\r\n\r\nhttps://github.com/pandas-dev/pandas/issues/19741\r\n",
        "createdAt" : "2018-02-17T19:46:07Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "238d8c29-e00e-483d-883e-56b34f6a53db",
        "parentId" : "ebdedadb-0432-4997-80f8-241dfde0431a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think we discussed/fixed this for `Series[cat].astype(cat)`, see https://github.com/pandas-dev/pandas/pull/18710 and referenced issues. But probably `Series(cat, dtype=cat)` should do something similar? Or should that be more strict.\r\n\r\n(I like your proposal to add `is_dtype_equal` to be more strict)",
        "createdAt" : "2018-02-17T19:55:48Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0f2c3780-bc67-4bcd-8bbe-f7b836ec0c73",
        "parentId" : "ebdedadb-0432-4997-80f8-241dfde0431a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is much nicer",
        "createdAt" : "2018-02-22T01:28:34Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6f90f297-4b59-4b11-843f-4a2ceb654115",
        "parentId" : "ebdedadb-0432-4997-80f8-241dfde0431a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "What is much nicer?",
        "createdAt" : "2018-02-22T13:41:04Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5562b99d55062b2bb0a5b359bd5375adb3a46e",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +215,219 @@                # GH12574: Allow dtype=category only, otherwise error\n                if not data.dtype.is_dtype(dtype):\n                    raise ValueError(\"Cannot specify a dtype '{}' with an \"\n                                     \"extension array of a different \"\n                                     \"dtype ('{}').\".format(dtype,"
  },
  {
    "id" : "74df27e7-5bab-435d-b09a-f6af5749894c",
    "prId" : 19520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19520#pullrequestreview-97864446",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40d3a66b-265a-45e7-ad83-653916b17f67",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this tested?",
        "createdAt" : "2018-02-20T13:35:17Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d317f58b-70ae-4af0-b59e-456352927e6d",
        "parentId" : "40d3a66b-265a-45e7-ad83-653916b17f67",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "`test_decimal::test_series_constructor_coerce_data_to_extension_dtype_raises`",
        "createdAt" : "2018-02-20T15:21:12Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5562b99d55062b2bb0a5b359bd5375adb3a46e",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +3173,3177 @@                # We don't allow casting to third party dtypes, since we don't\n                # know what array belongs to which type.\n                msg = (\"Cannot cast data to extension dtype '{}'. \"\n                       \"Pass the extension array directly.\".format(dtype))\n                raise ValueError(msg)"
  },
  {
    "id" : "0dd12411-c959-4274-bccf-ee62edbf7e2c",
    "prId" : 19520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19520#pullrequestreview-97864595",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51be29f3-6632-4ab6-93bb-0b6ebb897438",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "tested?",
        "createdAt" : "2018-02-20T13:35:25Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1791780b-a5d3-4d9e-aa65-db6f278eb0eb",
        "parentId" : "51be29f3-6632-4ab6-93bb-0b6ebb897438",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "`test_decimal::test_dataframe_constructor_with_different_dtype_raises`",
        "createdAt" : "2018-02-20T15:21:34Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5562b99d55062b2bb0a5b359bd5375adb3a46e",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +3212,3216 @@\n        if dtype is not None and not data.dtype.is_dtype(dtype):\n            msg = (\"Cannot coerce extension array to dtype '{typ}'. \"\n                   \"Do the coercion before passing to the constructor \"\n                   \"instead.\".format(typ=dtype))"
  },
  {
    "id" : "f12742a0-f405-4a00-b5fb-da28d17c1dd9",
    "prId" : 19744,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19744#pullrequestreview-98405395",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37171103-0897-43c7-8e53-71e988e97693",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "clearly this is not used, so on next pass can you remove",
        "createdAt" : "2018-02-21T23:52:24Z",
        "updatedAt" : "2018-02-21T23:52:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "249b7ba8c4767c487abf73e2ab10cb6c85616b51",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1815,1819 @@        other = other.reindex(new_index, copy=False)\n        # TODO: do we need name?\n        name = ops.get_op_result_name(self, other)  # noqa\n        rs_vals = com._where_compat(isna(this), other._values, this._values)\n        return self._constructor(rs_vals, index=new_index).__finalize__(self)"
  },
  {
    "id" : "b5500460-8efd-48d4-9ad8-62d72d061069",
    "prId" : 20204,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20204#pullrequestreview-102952044",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ee249c6-643a-46ae-b997-c4bfa59cae30",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so we should just remove kwargs entirely (and need to remove the check in the code as well). This was originally fro compat with DataFrame but I think its ok (its possible that we are testing this though, so may need to modify a test). Could do this in a followup. cc @jorisvandenbossche ",
        "createdAt" : "2018-03-11T14:55:02Z",
        "updatedAt" : "2018-03-16T20:56:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d5bfaddd-2cac-4f35-b567-947236864b46",
        "parentId" : "2ee249c6-643a-46ae-b997-c4bfa59cae30",
        "authorId" : "58b2d3bf-9687-4c4d-858b-88128347234c",
        "body" : "So should I delete the **kwargs from the docstring already, or later when the code is fixed? And can I do the follow-up PR on this issue in the code base, or will you do it when the testing is clarified?",
        "createdAt" : "2018-03-11T19:21:26Z",
        "updatedAt" : "2018-03-16T20:56:46Z",
        "lastEditedBy" : "58b2d3bf-9687-4c4d-858b-88128347234c",
        "tags" : [
        ]
      },
      {
        "id" : "240cff27-33ae-4aed-8ce2-758634057d89",
        "parentId" : "2ee249c6-643a-46ae-b997-c4bfa59cae30",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Let's do this in a follow-up, and keep this PR purely docstring. So @donK23 you can leave it as is for now. \r\nAnd certainly welcome to do such a follow-up PR",
        "createdAt" : "2018-03-12T08:37:49Z",
        "updatedAt" : "2018-03-16T20:56:46Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "305f693495a656521ed928775ad5ddf5f91fd54d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +3051,3055 @@        inplace : bool, default False\n            If True, do operation inplace and return None.\n        **kwargs\n            Not in use.\n"
  },
  {
    "id" : "0822978b-50ce-4b34-804e-ad555236f3f4",
    "prId" : 20220,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20220#pullrequestreview-102883101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41924086-626d-43e6-b342-da409428acbb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I don't really like this note (I mean, the explanation is fine and correct, but we should just correct the code to not do this), but fine for now and I will open an issue to eg disallow not specifying a dtype, or if dtype=None to use `self.dtype`",
        "createdAt" : "2018-03-11T13:59:33Z",
        "updatedAt" : "2018-03-11T13:59:33Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "65dccb28-4ad2-44e5-877a-6dbf402e7216",
        "parentId" : "41924086-626d-43e6-b342-da409428acbb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see #20251 yes let's remove most of this text. This method should be deprecated anyhow.",
        "createdAt" : "2018-03-11T14:01:12Z",
        "updatedAt" : "2018-03-11T14:01:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bcff6980-0a24-4a58-834a-8e3f566415fc",
        "parentId" : "41924086-626d-43e6-b342-da409428acbb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The current text is correct, so let's remove *when* we deprecate it.",
        "createdAt" : "2018-03-11T14:03:41Z",
        "updatedAt" : "2018-03-11T14:03:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4362e383fc34ed9144fa160126ae85fd8e77015e",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +577,581 @@        the original array, ``Series.view()`` (without specified dtype)\n        will try using ``float64`` and may fail if the original data type size\n        in bytes is not the same.\n\n        Examples"
  }
]