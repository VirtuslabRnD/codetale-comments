[
  {
    "id" : "9f34a204-be2a-4a38-877e-923d33811309",
    "prId" : 16821,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16821#pullrequestreview-50139783",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4282336-8bd3-445e-aaa0-d5f46475120b",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Repeated this sentance",
        "createdAt" : "2017-07-14T15:06:35Z",
        "updatedAt" : "2017-07-20T10:30:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f361e6db-51dd-4a99-8bb9-df6cced75fc4",
        "parentId" : "d4282336-8bd3-445e-aaa0-d5f46475120b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what do you mean?",
        "createdAt" : "2017-07-14T20:04:50Z",
        "updatedAt" : "2017-07-20T10:30:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "676b77380c6704a183a27bd7154795ef8188e39b",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +337,341 @@def infer_dtype_from(val, pandas_dtype=False):\n    \"\"\"\n    interpret the dtype from a scalar or array. This is a convenience\n    routines to infer dtype from a scalar or an array\n"
  },
  {
    "id" : "c77c5649-e90e-478b-93fd-da84c96ebe5c",
    "prId" : 16821,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16821#pullrequestreview-50140168",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8c985f7-1bf3-49b7-843a-2bad42379a8a",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Seems to be untested, according to code-cov.",
        "createdAt" : "2017-07-14T15:07:03Z",
        "updatedAt" : "2017-07-20T10:30:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b9c3af08-f43a-4ce5-b63c-ac02f9968509",
        "parentId" : "b8c985f7-1bf3-49b7-843a-2bad42379a8a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "done",
        "createdAt" : "2017-07-14T20:07:01Z",
        "updatedAt" : "2017-07-20T10:30:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "676b77380c6704a183a27bd7154795ef8188e39b",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +370,374 @@        msg = \"invalid ndarray passed to _infer_dtype_from_scalar\"\n        if val.ndim != 0:\n            raise ValueError(msg)\n\n        dtype = val.dtype"
  },
  {
    "id" : "04189318-ea4a-4524-b6a2-85740c31ed93",
    "prId" : 18769,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18769#pullrequestreview-84425687",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15de9f70-7a81-45a2-af4c-d88757b45f31",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "would not object to an\r\n``assert is_iterable(values)`` with a nice error message",
        "createdAt" : "2017-12-18T14:06:57Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "abfad408-eb11-411e-b912-6855ec967666",
        "parentId" : "15de9f70-7a81-45a2-af4c-d88757b45f31",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "The thing is: I can't think of any code path which could be hitting it. Scalar input to a ``Series()`` is (considered valid and) recasted to a 1-d before calling this. Similarly, an operation such as ``Series([1,2]) + 3`` transforms 3 before hitting this. So I don't know what the error message could actually say.",
        "createdAt" : "2017-12-18T14:43:28Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "333f75c5-7799-4162-af99-dbf985ecc214",
        "parentId" : "15de9f70-7a81-45a2-af4c-d88757b45f31",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not what i am asking\r\n\r\nthis is a completely internal\r\nroutine\r\nit should fail with invalid input ",
        "createdAt" : "2017-12-18T14:46:56Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "932574fb-12c5-4e9d-ac44-73d2b25dd6d1",
        "parentId" : "15de9f70-7a81-45a2-af4c-d88757b45f31",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "> it should fail with invalid input\r\n\r\nSure it does, ``TypeError: object of type 'int' has no len()``. Which is pretty clear, considering the docstring, and precisely in light of the fact that this is an internal routine. That said, feel free to suggest an error message which is worth the cost of the additional ``assert``.",
        "createdAt" : "2017-12-18T15:11:14Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "6f9c7414-376b-42a2-bd57-449a6444748b",
        "parentId" : "15de9f70-7a81-45a2-af4c-d88757b45f31",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a raises section to the doc-string",
        "createdAt" : "2017-12-19T12:02:13Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a6e48a703db106e7ca7caf5620390debff3080",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +1182,1186 @@    -------\n    1-dimensional numpy array of dtype object\n    \"\"\"\n    # numpy will try to interpret nested lists as further dimensions, hence\n    # making a 1D array that contains list-likes is a bit tricky:"
  },
  {
    "id" : "a6659f72-439b-4442-8fcc-4f6e61245742",
    "prId" : 21185,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21185#pullrequestreview-123197187",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f42840c9-c461-4a17-96f2-6751d6bc70c7",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "should there be any validation about `arr` ? Eg that it is 1D?",
        "createdAt" : "2018-05-24T16:28:32Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e4e50cab-c575-4cad-b316-bd7037e82023",
        "parentId" : "f42840c9-c461-4a17-96f2-6751d6bc70c7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this validation is a contract of the Array itself",
        "createdAt" : "2018-05-24T22:41:36Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2c91d706510b16a8a9f82dbeafa7d35396697d1",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +652,656 @@    # dispatch on extension dtype if needed\n    if is_extension_array_dtype(dtype):\n        return dtype.array_type._from_sequence(arr, copy=copy)\n\n    if not isinstance(dtype, np.dtype):"
  },
  {
    "id" : "912ff9ab-1935-4ac5-aa1c-f86a166b0aa2",
    "prId" : 21456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21456#pullrequestreview-128251843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51369a51-12d5-4a20-aaf0-37ecb6456c26",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "![numpy-self-warning](https://user-images.githubusercontent.com/9273653/41335857-21c371de-6e9f-11e8-9f4d-3e816a37a3cf.PNG)\r\n\r\nSince this is in part due to `numpy`'s self-conflict regarding element-wise comparisons, should we care about this showing up (perhaps we swallow the warning)?",
        "createdAt" : "2018-06-13T07:18:12Z",
        "updatedAt" : "2018-06-19T17:01:00Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "27caec97a7367fde1a2b4f8a9d441b9f86ab86ab",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +1325,1329 @@                            \"casted to the dtype {dtype}\".format(dtype=dtype))\n\n    if np.array_equal(arr, casted):\n        return casted\n"
  },
  {
    "id" : "0e4e4bc8-4083-498b-804b-de60afeb5efa",
    "prId" : 21456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21456#pullrequestreview-128568083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "801f89bf-0d8c-4c99-b481-33beea9d82ea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this duplicates maybe_downcast_to_dtype which is used internally, rather have the doc-string of that updated / examples (and can add the copy=)",
        "createdAt" : "2018-06-13T10:28:10Z",
        "updatedAt" : "2018-06-19T17:01:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6418cff6-1d8d-4e8a-b71b-6f0eca7c112d",
        "parentId" : "801f89bf-0d8c-4c99-b481-33beea9d82ea",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Not quite.  We're not always down-casting e.g.\r\n\r\n~~~python\r\nSeries(np.array([1, 2], dtype=\"int32\"), dtype=\"int64\")\r\n~~~\r\n\r\nSilly?  Yes, but it should work.",
        "createdAt" : "2018-06-13T21:16:38Z",
        "updatedAt" : "2018-06-19T17:01:00Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "27caec97a7367fde1a2b4f8a9d441b9f86ab86ab",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1279,1283 @@\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------"
  },
  {
    "id" : "5593ce49-4103-48eb-95bb-f2012db1f5e8",
    "prId" : 21456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21456#pullrequestreview-129783622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85115f9e-dcc2-45db-94a7-4acaca9d664a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why do you need this? at this point its either an ndarray, Series, Index, which is all ok here",
        "createdAt" : "2018-06-19T00:20:42Z",
        "updatedAt" : "2018-06-19T17:01:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e7545f45-124e-4c4a-9c61-8ef4c7756a2b",
        "parentId" : "85115f9e-dcc2-45db-94a7-4acaca9d664a",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Not quite.  `list` can also propagate here.  This was prompted by #21432, which introduced an annoying but necessary corner case with `uint64`.",
        "createdAt" : "2018-06-19T00:27:38Z",
        "updatedAt" : "2018-06-19T17:01:00Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "27caec97a7367fde1a2b4f8a9d441b9f86ab86ab",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +1333,1337 @@    # We didn't do this earlier because NumPy\n    # doesn't handle `uint64` correctly.\n    arr = np.asarray(arr)\n\n    if is_unsigned_integer_dtype(dtype) and (arr < 0).any():"
  },
  {
    "id" : "90e8943c-d58a-4634-8361-8ef19fc1e04c",
    "prId" : 21456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21456#pullrequestreview-556037014",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0b60f6e-a443-46a2-8fff-85dd018a09c2",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@gfyoung should maybe_cast_to_integer_array also check for overflows like\r\n\r\n```\r\narr = np.array([1, 200, 923442])\r\ndtype = np.dtype(np.int8)\r\n```\r\n\r\n?",
        "createdAt" : "2020-12-20T17:34:51Z",
        "updatedAt" : "2020-12-20T17:34:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "27caec97a7367fde1a2b4f8a9d441b9f86ab86ab",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +1337,1341 @@    if is_unsigned_integer_dtype(dtype) and (arr < 0).any():\n        raise OverflowError(\"Trying to coerce negative values \"\n                            \"to unsigned integers\")\n\n    if is_integer_dtype(dtype) and (is_float_dtype(arr) or"
  },
  {
    "id" : "faf9f63b-c3b2-4e2f-b74c-f838b94a0652",
    "prId" : 22343,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22343#pullrequestreview-146799510",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62e4962f-f996-4bf8-84f9-a88f431e5e0d",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you specify here what happens with False? (will always do view (except for object), even if the itemsize is incompatible)",
        "createdAt" : "2018-08-16T11:23:20Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "2606d02bb738fa914d48d5b460725b506d8e0a0a",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +654,658 @@    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the itemsizes don't align."
  },
  {
    "id" : "c25605b8-d949-4155-9c6b-489da1248093",
    "prId" : 22564,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22564#pullrequestreview-152983521",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db7eb847-174d-4698-a634-4cdfae32adbe",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "prefer to have all of the dtype checking in the if/elif/else and then construct the subarr after",
        "createdAt" : "2018-09-04T11:21:31Z",
        "updatedAt" : "2018-11-20T13:17:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ebf3ec7c-f44b-499c-bac8-292d3013effc",
        "parentId" : "db7eb847-174d-4698-a634-4cdfae32adbe",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In that case, `dtype` needs to be overwritten with `object` because we don't want actual string dtypes (which is easy to do, just noting :-))",
        "createdAt" : "2018-09-06T15:18:04Z",
        "updatedAt" : "2018-11-20T13:17:26Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0692db00f91ea5e9a19d2f3cd02238dae4bd2935",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1225,1229 @@            dtype = object\n            if not isna(value):\n                value = to_str(value)\n\n        subarr = np.empty(length, dtype=dtype)"
  },
  {
    "id" : "a64fc093-4d12-44e4-a138-50783f3d0cf9",
    "prId" : 23392,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23392#pullrequestreview-169105930",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85ff2c48-df19-48c5-b66c-1ef39896ad7a",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "extra space after \"datetime\"\r\n\r\nThis includes timedelta, but the whatsnew note does not.\r\n\r\nMaybe specify datetime64/timedelta64 so as to avoid confusion with stdlib scalars?\r\n\r\nHere and elsewhere: consider \"unit\" instead of \"frequency\"",
        "createdAt" : "2018-10-28T16:25:26Z",
        "updatedAt" : "2018-10-28T16:25:26Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0a717769-c716-445a-ac78-14593a536ec5",
        "parentId" : "85ff2c48-df19-48c5-b66c-1ef39896ad7a",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Addressed in #23401.",
        "createdAt" : "2018-10-28T19:31:11Z",
        "updatedAt" : "2018-10-28T19:31:11Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c0d8820491b6fd959f4c2e652a8c8dda88726a1",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +668,672 @@    ------\n    ValueError\n        The dtype was a datetime /timedelta dtype, but it had no frequency.\n    \"\"\"\n"
  },
  {
    "id" : "f460e7d5-e7f3-4074-92e3-6cea7457b5c6",
    "prId" : 24486,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24486#pullrequestreview-194371386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9672e734-34d6-4b66-8caa-90bee4ee1235",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we *may* not actually need to do this as the caller might be more friendly now-a-days",
        "createdAt" : "2019-01-06T16:35:19Z",
        "updatedAt" : "2019-03-12T15:22:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4d271520-b795-4787-9fc5-57a7455c4f0f",
        "parentId" : "9672e734-34d6-4b66-8caa-90bee4ee1235",
        "authorId" : "0225e96c-0332-4963-b35c-6122e27e088f",
        "body" : "You mean that we may not need to convert to ndarray?\r\n\r\nCurrently, one test fails due to a failed assertion in an internal function: pandas/core/internals/blocks.py:2120\r\nThe failing test is series.test_internals.TestSeriesInternals.test_convert",
        "createdAt" : "2019-01-18T23:38:13Z",
        "updatedAt" : "2019-03-12T15:22:52Z",
        "lastEditedBy" : "0225e96c-0332-4963-b35c-6122e27e088f",
        "tags" : [
        ]
      },
      {
        "id" : "b5daaa77-fdee-49e5-8b9d-6989b52c0696",
        "parentId" : "9672e734-34d6-4b66-8caa-90bee4ee1235",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "of its just an internal function, then pls just change it.",
        "createdAt" : "2019-01-19T21:49:20Z",
        "updatedAt" : "2019-03-12T15:22:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d6e0d3c48dd4896fc6f0d9b33e02448c6f4f033",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +795,799 @@        if datetime:\n            from pandas import to_datetime\n            return to_datetime(values, errors='coerce').to_numpy()\n        elif timedelta:\n            from pandas import to_timedelta"
  },
  {
    "id" : "62d9b3f6-87c5-4a29-a637-1cde73c878b7",
    "prId" : 24486,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24486#pullrequestreview-194371386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11d2d35d-da47-422a-b7a7-cc36d52c164e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you might also be able to take this off as well",
        "createdAt" : "2019-01-19T21:49:40Z",
        "updatedAt" : "2019-03-12T15:22:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d6e0d3c48dd4896fc6f0d9b33e02448c6f4f033",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +798,802 @@        elif timedelta:\n            from pandas import to_timedelta\n            return to_timedelta(values, errors='coerce').to_numpy()\n        elif numeric:\n            from pandas import to_numeric"
  },
  {
    "id" : "5b4d23b1-834e-4510-bf86-0ace186db2c9",
    "prId" : 24596,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24596#pullrequestreview-189117466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3e7978b-979c-499b-9e24-31c6968979e7",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Need to look at this closer. `maybe_cast_to_datetime` seems in need of an overhaul (along with all of `sanitize_array`) but this at least avoids the warning.",
        "createdAt" : "2019-01-03T17:57:42Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f4fbde4472700525959dbb7255185e36155f21",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1021,1025 @@                            # be localized to the timezone.\n                            is_dt_string = is_string_dtype(value)\n                            value = to_datetime(value, errors=errors).array\n                            if is_dt_string:\n                                # Strings here are naive, so directly localize"
  },
  {
    "id" : "17fb807e-7c36-4293-980e-f208259ab5b0",
    "prId" : 24793,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24793#pullrequestreview-192957154",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03604c47-eb49-4a29-8c3b-be31ff1e27be",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "btw an upcoming PR is going to make the try/except part of this function unnecessary.",
        "createdAt" : "2019-01-16T03:02:28Z",
        "updatedAt" : "2019-01-17T00:01:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7b01698275fa56a60ff91ecd497d16913e4ca76",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +571,575 @@\n    def conv(r, dtype):\n        try:\n            if isna(r):\n                pass"
  },
  {
    "id" : "ee939ba5-4451-462b-8d9e-ebdc674a50e2",
    "prId" : 26848,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26848#pullrequestreview-250446935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99d32a75-ca27-48fc-88ca-3e3a8e2d62ff",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this will *also* catch the datetime.datetime case (as we have ``errors='raise'`` passed to ``to_datetime``, which will then re-raise, do we actually hit this case in testing?\r\n",
        "createdAt" : "2019-06-17T11:23:19Z",
        "updatedAt" : "2019-06-21T06:16:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c52d94bb-fd69-44d4-8079-8a0dd7564ac6",
        "parentId" : "99d32a75-ca27-48fc-88ca-3e3a8e2d62ff",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "See the tests that I added, that should be covered. \r\n\r\nThe reason that works is because this code path you are commenting on is only taken if the original data already has a np.datetime64 dtype. If you pass `maybe_cast_to_datetime` an object array of (out of bound) datetime.datetime, it will return that object array, and not raise.",
        "createdAt" : "2019-06-17T11:44:33Z",
        "updatedAt" : "2019-06-21T06:16:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "bcade9f0-1e10-4a2c-9709-59216deb8262",
        "parentId" : "99d32a75-ca27-48fc-88ca-3e3a8e2d62ff",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k fair enough. This code is *very* complicated, ideally like to simplify as much as possible.",
        "createdAt" : "2019-06-17T11:46:43Z",
        "updatedAt" : "2019-06-21T06:16:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f454065e-c6e6-432e-a2fa-cd5946c03d16",
        "parentId" : "99d32a75-ca27-48fc-88ca-3e3a8e2d62ff",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Fully agree on the code complexity .. (have another change that simplifies some of this code, but since it is unrelated to this actual bug fix, will keep that for another PR)",
        "createdAt" : "2019-06-17T11:50:05Z",
        "updatedAt" : "2019-06-21T06:16:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "369eeadce0a8c8539aa937e19002901cc98091f7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1039,1043 @@                        elif is_timedelta64:\n                            value = to_timedelta(value, errors=errors)._values\n                    except OutOfBoundsDatetime:\n                        raise\n                    except (AttributeError, ValueError, TypeError):"
  },
  {
    "id" : "4737647d-326b-4e2b-86fa-4b7293d061c0",
    "prId" : 27444,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27444#pullrequestreview-264509151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0571418d-97a3-4280-930a-0be42ba3ffc3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add Parameters / Returns to the doc-string",
        "createdAt" : "2019-07-20T19:37:46Z",
        "updatedAt" : "2019-07-20T20:23:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ed1dce89-ac82-46e1-a4a7-8a88b0457d0d",
        "parentId" : "0571418d-97a3-4280-930a-0be42ba3ffc3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sure",
        "createdAt" : "2019-07-20T19:49:04Z",
        "updatedAt" : "2019-07-20T20:23:26Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b32f6521b8c9c802049c88d3868eb532954c60d0",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +742,746 @@    ndarray or DatetimeIndex\n    \"\"\"\n    validate_bool_kwarg(convert_numeric, \"convert_numeric\")\n\n    orig_values = values"
  },
  {
    "id" : "1a751203-6829-4445-9567-3df60c4ca754",
    "prId" : 27714,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27714#pullrequestreview-270286601",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1631ffd4-2407-49bb-bc68-70e39459d19a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "rather than doing this, I would pass in a callable directly",
        "createdAt" : "2019-08-02T16:20:35Z",
        "updatedAt" : "2019-08-02T16:50:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d7bb2afd-8e7b-46d9-9e36-4755f71527c9",
        "parentId" : "1631ffd4-2407-49bb-bc68-70e39459d19a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "that gives a lot more degrees of freedom to the caller, I'd rather it just be a bool kwarg until/unless we need something more",
        "createdAt" : "2019-08-02T16:49:43Z",
        "updatedAt" : "2019-08-02T16:50:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "44bf1e464bb8dec082deff3bfa5d2f9e8c88513f",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +182,186 @@        result = np.array(result)\n\n    def trans(x):\n        if do_round:\n            return x.round()"
  },
  {
    "id" : "e076b318-2bfd-41e9-89d8-18478ca466f0",
    "prId" : 27714,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27714#pullrequestreview-270286172",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3dc62387-276d-46a3-9ef3-b491676a7d1b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is very similar to to_numeric; would plan as a followup to move to_numeric logic here and call this.",
        "createdAt" : "2019-08-02T16:22:09Z",
        "updatedAt" : "2019-08-02T16:50:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "65acc51d-afc7-4d34-8dfb-085f25b26eb3",
        "parentId" : "3dc62387-276d-46a3-9ef3-b491676a7d1b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "good idea",
        "createdAt" : "2019-08-02T16:48:48Z",
        "updatedAt" : "2019-08-02T16:50:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "44bf1e464bb8dec082deff3bfa5d2f9e8c88513f",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +159,163 @@\n\ndef maybe_downcast_numeric(result, dtype, do_round: bool = False):\n    \"\"\"\n    Subset of maybe_downcast_to_dtype restricted to numeric dtypes."
  },
  {
    "id" : "d67f5244-5e24-4fa8-9f6e-e7a6899c9aca",
    "prId" : 27928,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27928#pullrequestreview-287426550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdef3835-94e1-466c-8573-cbf9a57963ed",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "What does `<=` do for numpy dtypes? Check if it's a subtype?",
        "createdAt" : "2019-09-11T20:22:09Z",
        "updatedAt" : "2019-09-13T11:55:15Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b75c03d0-c433-4f34-8ab7-cff21b24acd1",
        "parentId" : "fdef3835-94e1-466c-8573-cbf9a57963ed",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not clear to me either:\r\n\r\n```\r\n>>> \"timedelta64[ns]\" < np.dtype(\"m8[ns]\")\r\nFalse\r\n>>> \"timedelta64[us]\" < np.dtype(\"m8[ns]\")\r\nTrue\r\n>>> \"timedelta64[ps]\" > np.dtype(\"m8[ns]\")\r\nTrue\r\n>>> \"timedelta64\" < np.dtype(\"m8[ns]\")\r\nTrue\r\n```",
        "createdAt" : "2019-09-11T21:44:44Z",
        "updatedAt" : "2019-09-13T11:55:15Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "87db5544-416a-4d47-be2f-28fc7829c666",
        "parentId" : "fdef3835-94e1-466c-8573-cbf9a57963ed",
        "authorId" : "9e4fa26b-3909-4ade-a15d-4e629bb9afc1",
        "body" : "@TomAugspurger @jbrockmendel \r\nIt checks whether the dtype timespan is longer than `[ns]` or shorter. (FYI, https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html#datetime-units)",
        "createdAt" : "2019-09-12T12:46:50Z",
        "updatedAt" : "2019-09-13T11:55:15Z",
        "lastEditedBy" : "9e4fa26b-3909-4ade-a15d-4e629bb9afc1",
        "tags" : [
        ]
      },
      {
        "id" : "59b1b81e-54fa-4899-ba6d-68fbe561db29",
        "parentId" : "fdef3835-94e1-466c-8573-cbf9a57963ed",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment to this effect (in both places)",
        "createdAt" : "2019-09-12T13:26:31Z",
        "updatedAt" : "2019-09-13T11:55:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8eb91f46a1166ad6c81a4f778cea0e4090059e5",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1033,1037 @@                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"M8[ns]\"):\n                    if dtype.name == \"datetime64\":\n                        raise ValueError(msg.format(dtype=dtype.name))"
  },
  {
    "id" : "7c31d69b-8f15-4ed4-8086-cec057233372",
    "prId" : 28492,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28492#pullrequestreview-290265006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b212af43-3b21-41cf-ac33-c26a69757c92",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this likely needs to be is_integer_dtype(dtype)",
        "createdAt" : "2019-09-18T11:53:44Z",
        "updatedAt" : "2019-12-30T21:50:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ec339ab0-73d1-41de-9a10-0dc560e80eca",
        "parentId" : "b212af43-3b21-41cf-ac33-c26a69757c92",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "I think this might actually need to be `np.int64` since above we check for `datetime64` (getting some weird test failures after this change).  Looking at the `numpy` documentation it seems the output of `view` is \"unpredictable\" when the precision differs between the data types (the _shape_ of the output can even change).",
        "createdAt" : "2019-09-19T00:07:13Z",
        "updatedAt" : "2019-12-30T21:50:46Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "931e8c5e85046b1e87f89733bf9cde92134cb337",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +823,827 @@        if is_object_dtype(dtype):\n            return tslib.ints_to_pydatetime(arr.view(np.int64))\n        elif dtype == np.int64:\n            if isna(arr).any():\n                raise ValueError(\"Cannot convert NaT values to integer\")"
  },
  {
    "id" : "f16fce35-de97-4b61-99bd-1958bc09a466",
    "prId" : 28564,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28564#pullrequestreview-295603422",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7397127a-c417-4a12-9722-f0550a271f08",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is nice, though I think we have several implementation of this (or maybe for the array form) in this file, in the future would be nice to consolidate.",
        "createdAt" : "2019-10-01T13:05:45Z",
        "updatedAt" : "2019-10-01T13:05:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "730ae6ab-9927-4742-91f3-e68e8e066470",
        "parentId" : "7397127a-c417-4a12-9722-f0550a271f08",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "will take a look.  plenty of follow-ups coming up for this.  hopefully will be orthogonal and small.",
        "createdAt" : "2019-10-01T13:30:43Z",
        "updatedAt" : "2019-10-01T13:30:43Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7267be451590dbdf0aea5d0345e0bd5f574ba170",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +412,416 @@\n\ndef _check_lossless_cast(value, dtype: np.dtype) -> bool:\n    \"\"\"\n    Check if we can cast the given value to the given dtype _losslesly_."
  },
  {
    "id" : "ba3c50e6-6506-4b1e-8088-11a913dcae78",
    "prId" : 28725,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28725#pullrequestreview-295748572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36ce36a5-b22e-4d70-b850-2584472b1441",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "really? should we add one instead of this?",
        "createdAt" : "2019-10-01T16:43:56Z",
        "updatedAt" : "2019-10-01T16:45:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bbdd8d4d-62a9-478d-ae17-4092e5a39c66",
        "parentId" : "36ce36a5-b22e-4d70-b850-2584472b1441",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "NaT is pretty specifically a datetime.  I think adding this there would muddy the waters",
        "createdAt" : "2019-10-01T16:55:01Z",
        "updatedAt" : "2019-10-01T16:55:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5604e2b2-7f28-4355-a536-a7ad8fa4af06",
        "parentId" : "36ce36a5-b22e-4d70-b850-2584472b1441",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok",
        "createdAt" : "2019-10-01T16:55:36Z",
        "updatedAt" : "2019-10-01T16:55:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca143507947962f10524840f367d2df9b6205f63",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +355,359 @@        fv = tslibs.Timedelta(fill_value)\n        if fv is NaT:\n            # NaT has no `to_timedelta6` method\n            fill_value = np.timedelta64(\"NaT\", \"ns\")\n        else:"
  },
  {
    "id" : "5f533d23-35a4-4b45-98e6-fe9ff9230fa8",
    "prId" : 28725,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28725#pullrequestreview-295749675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f02f615a-47fc-4689-b6c5-8a5f0973cf7e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "would it be better to branch this to be explict (e.g. datetime and timedelta branches)",
        "createdAt" : "2019-10-01T16:44:25Z",
        "updatedAt" : "2019-10-01T16:45:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "88d79bb3-3d09-4eda-ac22-0b6f7025b379",
        "parentId" : "f02f615a-47fc-4689-b6c5-8a5f0973cf7e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually why do we have a branch for a subclass of np.datetime64 AND this one (and same for timedelta)?",
        "createdAt" : "2019-10-01T16:45:09Z",
        "updatedAt" : "2019-10-01T16:45:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1d489193-55ae-40f9-af87-9c6b0bf63840",
        "parentId" : "f02f615a-47fc-4689-b6c5-8a5f0973cf7e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "not clear.  my current plan is to do a couple more small PRs of xfail-fixing before getting into refactoring",
        "createdAt" : "2019-10-01T16:57:25Z",
        "updatedAt" : "2019-10-01T16:57:25Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca143507947962f10524840f367d2df9b6205f63",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +398,402 @@            dtype = np.float64\n            fill_value = np.nan\n        elif is_datetime_or_timedelta_dtype(dtype):\n            fill_value = dtype.type(\"NaT\", \"ns\")\n        else:"
  },
  {
    "id" : "35236876-844d-417c-a741-8309227ca5fe",
    "prId" : 28776,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28776#pullrequestreview-297575737",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2514b9c9-99c1-4f1c-8e0a-c94a04bac556",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Excuse my lack of familiarity but would it be possible for a non-numeric fill_value to hit this condition? If so I think would cause a ValueError",
        "createdAt" : "2019-10-04T15:49:33Z",
        "updatedAt" : "2019-10-04T15:49:36Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "9cf98003-f0a5-4881-a27f-651c273a8b72",
        "parentId" : "2514b9c9-99c1-4f1c-8e0a-c94a04bac556",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "No, a few lines up we condition on fill_value being float scalar",
        "createdAt" : "2019-10-04T16:09:02Z",
        "updatedAt" : "2019-10-04T16:09:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8b5721e14260b67337baf7623928181cffc24a5",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +378,382 @@            dtype = np.dtype(np.float64)\n            if not isna(fill_value):\n                fill_value = dtype.type(fill_value)\n    elif is_bool(fill_value):\n        if not issubclass(dtype.type, np.bool_):"
  },
  {
    "id" : "93069bf2-1729-49fd-a182-79fadd8332f3",
    "prId" : 28897,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28897#pullrequestreview-300908649",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b241d6a8-bb9a-487d-9baf-6b785455d413",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could be elif",
        "createdAt" : "2019-10-11T12:25:17Z",
        "updatedAt" : "2019-10-11T15:23:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1f24ead9-cef6-49b8-9713-2097c7128e33",
        "parentId" : "b241d6a8-bb9a-487d-9baf-6b785455d413",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "changed",
        "createdAt" : "2019-10-11T20:22:45Z",
        "updatedAt" : "2019-10-11T20:22:45Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "734bab201d173e459bcefe60db2ab14e03d06878",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +482,486 @@\n    # Start with exceptions in which we do _not_ cast to numpy types\n    if is_extension_array_dtype(dtype):\n        return value\n    elif dtype == np.object_:"
  },
  {
    "id" : "b87e793e-7879-4835-9947-69d753c41462",
    "prId" : 29332,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29332#pullrequestreview-310775657",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b34fe180-c430-443c-b8e8-9e75f4e6cb44",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you type other here?",
        "createdAt" : "2019-11-02T15:31:06Z",
        "updatedAt" : "2019-11-02T15:31:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f4096d95-940c-4874-869b-4d2ddd653017",
        "parentId" : "b34fe180-c430-443c-b8e8-9e75f4e6cb44",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "looks like ill be doing a branch of just follow-ups soon",
        "createdAt" : "2019-11-02T15:33:56Z",
        "updatedAt" : "2019-11-02T15:33:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ee81a5a77149e143549c69bd7d1d5e2b78be7bf",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +233,237 @@\n\ndef maybe_upcast_putmask(result: np.ndarray, mask: np.ndarray, other):\n    \"\"\"\n    A safe version of putmask that potentially upcasts the result."
  },
  {
    "id" : "66e0afe7-2d30-4c85-b86c-dbde5eb1500c",
    "prId" : 30260,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30260#pullrequestreview-332289258",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b8b2ea3-ad23-4378-8ebf-6e9e4ff07df5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should type at some point",
        "createdAt" : "2019-12-15T21:40:03Z",
        "updatedAt" : "2019-12-15T21:43:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6cd691cec862a50f00ebc1d415eae4881f46e7c",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +338,342 @@\ndef maybe_promote(dtype, fill_value=np.nan):\n    \"\"\"\n    Find the minimal dtype that can hold both the given dtype and fill_value.\n"
  },
  {
    "id" : "064e79b8-e07a-4c63-a860-9b43fca21c82",
    "prId" : 30260,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30260#pullrequestreview-332289258",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "846eb1d0-54ae-4c0f-a93c-a66a2d0c6b96",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ideally type these at some point",
        "createdAt" : "2019-12-15T21:40:20Z",
        "updatedAt" : "2019-12-15T21:43:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6cd691cec862a50f00ebc1d415eae4881f46e7c",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +701,705 @@    Parameters\n    ----------\n    values : ndarray or ExtensionArray\n        The array that we want to maybe upcast.\n    fill_value : what we want to fill with"
  }
]