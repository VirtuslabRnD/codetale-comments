[
  {
    "id" : "9f34a204-be2a-4a38-877e-923d33811309",
    "prId" : 16821,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16821#pullrequestreview-50139783",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4282336-8bd3-445e-aaa0-d5f46475120b",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Repeated this sentance",
        "createdAt" : "2017-07-14T15:06:35Z",
        "updatedAt" : "2017-07-20T10:30:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f361e6db-51dd-4a99-8bb9-df6cced75fc4",
        "parentId" : "d4282336-8bd3-445e-aaa0-d5f46475120b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what do you mean?",
        "createdAt" : "2017-07-14T20:04:50Z",
        "updatedAt" : "2017-07-20T10:30:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "676b77380c6704a183a27bd7154795ef8188e39b",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +337,341 @@def infer_dtype_from(val, pandas_dtype=False):\n    \"\"\"\n    interpret the dtype from a scalar or array. This is a convenience\n    routines to infer dtype from a scalar or an array\n"
  },
  {
    "id" : "c77c5649-e90e-478b-93fd-da84c96ebe5c",
    "prId" : 16821,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16821#pullrequestreview-50140168",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8c985f7-1bf3-49b7-843a-2bad42379a8a",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Seems to be untested, according to code-cov.",
        "createdAt" : "2017-07-14T15:07:03Z",
        "updatedAt" : "2017-07-20T10:30:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b9c3af08-f43a-4ce5-b63c-ac02f9968509",
        "parentId" : "b8c985f7-1bf3-49b7-843a-2bad42379a8a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "done",
        "createdAt" : "2017-07-14T20:07:01Z",
        "updatedAt" : "2017-07-20T10:30:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "676b77380c6704a183a27bd7154795ef8188e39b",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +370,374 @@        msg = \"invalid ndarray passed to _infer_dtype_from_scalar\"\n        if val.ndim != 0:\n            raise ValueError(msg)\n\n        dtype = val.dtype"
  },
  {
    "id" : "04189318-ea4a-4524-b6a2-85740c31ed93",
    "prId" : 18769,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18769#pullrequestreview-84425687",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15de9f70-7a81-45a2-af4c-d88757b45f31",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "would not object to an\r\n``assert is_iterable(values)`` with a nice error message",
        "createdAt" : "2017-12-18T14:06:57Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "abfad408-eb11-411e-b912-6855ec967666",
        "parentId" : "15de9f70-7a81-45a2-af4c-d88757b45f31",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "The thing is: I can't think of any code path which could be hitting it. Scalar input to a ``Series()`` is (considered valid and) recasted to a 1-d before calling this. Similarly, an operation such as ``Series([1,2]) + 3`` transforms 3 before hitting this. So I don't know what the error message could actually say.",
        "createdAt" : "2017-12-18T14:43:28Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "333f75c5-7799-4162-af99-dbf985ecc214",
        "parentId" : "15de9f70-7a81-45a2-af4c-d88757b45f31",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not what i am asking\r\n\r\nthis is a completely internal\r\nroutine\r\nit should fail with invalid input ",
        "createdAt" : "2017-12-18T14:46:56Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "932574fb-12c5-4e9d-ac44-73d2b25dd6d1",
        "parentId" : "15de9f70-7a81-45a2-af4c-d88757b45f31",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "> it should fail with invalid input\r\n\r\nSure it does, ``TypeError: object of type 'int' has no len()``. Which is pretty clear, considering the docstring, and precisely in light of the fact that this is an internal routine. That said, feel free to suggest an error message which is worth the cost of the additional ``assert``.",
        "createdAt" : "2017-12-18T15:11:14Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "6f9c7414-376b-42a2-bd57-449a6444748b",
        "parentId" : "15de9f70-7a81-45a2-af4c-d88757b45f31",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a raises section to the doc-string",
        "createdAt" : "2017-12-19T12:02:13Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a6e48a703db106e7ca7caf5620390debff3080",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +1182,1186 @@    -------\n    1-dimensional numpy array of dtype object\n    \"\"\"\n    # numpy will try to interpret nested lists as further dimensions, hence\n    # making a 1D array that contains list-likes is a bit tricky:"
  },
  {
    "id" : "a6659f72-439b-4442-8fcc-4f6e61245742",
    "prId" : 21185,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21185#pullrequestreview-123197187",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f42840c9-c461-4a17-96f2-6751d6bc70c7",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "should there be any validation about `arr` ? Eg that it is 1D?",
        "createdAt" : "2018-05-24T16:28:32Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e4e50cab-c575-4cad-b316-bd7037e82023",
        "parentId" : "f42840c9-c461-4a17-96f2-6751d6bc70c7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this validation is a contract of the Array itself",
        "createdAt" : "2018-05-24T22:41:36Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2c91d706510b16a8a9f82dbeafa7d35396697d1",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +652,656 @@    # dispatch on extension dtype if needed\n    if is_extension_array_dtype(dtype):\n        return dtype.array_type._from_sequence(arr, copy=copy)\n\n    if not isinstance(dtype, np.dtype):"
  },
  {
    "id" : "912ff9ab-1935-4ac5-aa1c-f86a166b0aa2",
    "prId" : 21456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21456#pullrequestreview-128251843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51369a51-12d5-4a20-aaf0-37ecb6456c26",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "![numpy-self-warning](https://user-images.githubusercontent.com/9273653/41335857-21c371de-6e9f-11e8-9f4d-3e816a37a3cf.PNG)\r\n\r\nSince this is in part due to `numpy`'s self-conflict regarding element-wise comparisons, should we care about this showing up (perhaps we swallow the warning)?",
        "createdAt" : "2018-06-13T07:18:12Z",
        "updatedAt" : "2018-06-19T17:01:00Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "27caec97a7367fde1a2b4f8a9d441b9f86ab86ab",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +1325,1329 @@                            \"casted to the dtype {dtype}\".format(dtype=dtype))\n\n    if np.array_equal(arr, casted):\n        return casted\n"
  },
  {
    "id" : "0e4e4bc8-4083-498b-804b-de60afeb5efa",
    "prId" : 21456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21456#pullrequestreview-128568083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "801f89bf-0d8c-4c99-b481-33beea9d82ea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this duplicates maybe_downcast_to_dtype which is used internally, rather have the doc-string of that updated / examples (and can add the copy=)",
        "createdAt" : "2018-06-13T10:28:10Z",
        "updatedAt" : "2018-06-19T17:01:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6418cff6-1d8d-4e8a-b71b-6f0eca7c112d",
        "parentId" : "801f89bf-0d8c-4c99-b481-33beea9d82ea",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Not quite.  We're not always down-casting e.g.\r\n\r\n~~~python\r\nSeries(np.array([1, 2], dtype=\"int32\"), dtype=\"int64\")\r\n~~~\r\n\r\nSilly?  Yes, but it should work.",
        "createdAt" : "2018-06-13T21:16:38Z",
        "updatedAt" : "2018-06-19T17:01:00Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "27caec97a7367fde1a2b4f8a9d441b9f86ab86ab",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1279,1283 @@\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------"
  },
  {
    "id" : "5593ce49-4103-48eb-95bb-f2012db1f5e8",
    "prId" : 21456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21456#pullrequestreview-129783622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85115f9e-dcc2-45db-94a7-4acaca9d664a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why do you need this? at this point its either an ndarray, Series, Index, which is all ok here",
        "createdAt" : "2018-06-19T00:20:42Z",
        "updatedAt" : "2018-06-19T17:01:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e7545f45-124e-4c4a-9c61-8ef4c7756a2b",
        "parentId" : "85115f9e-dcc2-45db-94a7-4acaca9d664a",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Not quite.  `list` can also propagate here.  This was prompted by #21432, which introduced an annoying but necessary corner case with `uint64`.",
        "createdAt" : "2018-06-19T00:27:38Z",
        "updatedAt" : "2018-06-19T17:01:00Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "27caec97a7367fde1a2b4f8a9d441b9f86ab86ab",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +1333,1337 @@    # We didn't do this earlier because NumPy\n    # doesn't handle `uint64` correctly.\n    arr = np.asarray(arr)\n\n    if is_unsigned_integer_dtype(dtype) and (arr < 0).any():"
  },
  {
    "id" : "90e8943c-d58a-4634-8361-8ef19fc1e04c",
    "prId" : 21456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21456#pullrequestreview-556037014",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0b60f6e-a443-46a2-8fff-85dd018a09c2",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@gfyoung should maybe_cast_to_integer_array also check for overflows like\r\n\r\n```\r\narr = np.array([1, 200, 923442])\r\ndtype = np.dtype(np.int8)\r\n```\r\n\r\n?",
        "createdAt" : "2020-12-20T17:34:51Z",
        "updatedAt" : "2020-12-20T17:34:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "27caec97a7367fde1a2b4f8a9d441b9f86ab86ab",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +1337,1341 @@    if is_unsigned_integer_dtype(dtype) and (arr < 0).any():\n        raise OverflowError(\"Trying to coerce negative values \"\n                            \"to unsigned integers\")\n\n    if is_integer_dtype(dtype) and (is_float_dtype(arr) or"
  },
  {
    "id" : "faf9f63b-c3b2-4e2f-b74c-f838b94a0652",
    "prId" : 22343,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22343#pullrequestreview-146799510",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62e4962f-f996-4bf8-84f9-a88f431e5e0d",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you specify here what happens with False? (will always do view (except for object), even if the itemsize is incompatible)",
        "createdAt" : "2018-08-16T11:23:20Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "2606d02bb738fa914d48d5b460725b506d8e0a0a",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +654,658 @@    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the itemsizes don't align."
  },
  {
    "id" : "c25605b8-d949-4155-9c6b-489da1248093",
    "prId" : 22564,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22564#pullrequestreview-152983521",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db7eb847-174d-4698-a634-4cdfae32adbe",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "prefer to have all of the dtype checking in the if/elif/else and then construct the subarr after",
        "createdAt" : "2018-09-04T11:21:31Z",
        "updatedAt" : "2018-11-20T13:17:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ebf3ec7c-f44b-499c-bac8-292d3013effc",
        "parentId" : "db7eb847-174d-4698-a634-4cdfae32adbe",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In that case, `dtype` needs to be overwritten with `object` because we don't want actual string dtypes (which is easy to do, just noting :-))",
        "createdAt" : "2018-09-06T15:18:04Z",
        "updatedAt" : "2018-11-20T13:17:26Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0692db00f91ea5e9a19d2f3cd02238dae4bd2935",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1225,1229 @@            dtype = object\n            if not isna(value):\n                value = to_str(value)\n\n        subarr = np.empty(length, dtype=dtype)"
  },
  {
    "id" : "a64fc093-4d12-44e4-a138-50783f3d0cf9",
    "prId" : 23392,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23392#pullrequestreview-169105930",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85ff2c48-df19-48c5-b66c-1ef39896ad7a",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "extra space after \"datetime\"\r\n\r\nThis includes timedelta, but the whatsnew note does not.\r\n\r\nMaybe specify datetime64/timedelta64 so as to avoid confusion with stdlib scalars?\r\n\r\nHere and elsewhere: consider \"unit\" instead of \"frequency\"",
        "createdAt" : "2018-10-28T16:25:26Z",
        "updatedAt" : "2018-10-28T16:25:26Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0a717769-c716-445a-ac78-14593a536ec5",
        "parentId" : "85ff2c48-df19-48c5-b66c-1ef39896ad7a",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Addressed in #23401.",
        "createdAt" : "2018-10-28T19:31:11Z",
        "updatedAt" : "2018-10-28T19:31:11Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c0d8820491b6fd959f4c2e652a8c8dda88726a1",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +668,672 @@    ------\n    ValueError\n        The dtype was a datetime /timedelta dtype, but it had no frequency.\n    \"\"\"\n"
  },
  {
    "id" : "f460e7d5-e7f3-4074-92e3-6cea7457b5c6",
    "prId" : 24486,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24486#pullrequestreview-194371386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9672e734-34d6-4b66-8caa-90bee4ee1235",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we *may* not actually need to do this as the caller might be more friendly now-a-days",
        "createdAt" : "2019-01-06T16:35:19Z",
        "updatedAt" : "2019-03-12T15:22:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4d271520-b795-4787-9fc5-57a7455c4f0f",
        "parentId" : "9672e734-34d6-4b66-8caa-90bee4ee1235",
        "authorId" : "0225e96c-0332-4963-b35c-6122e27e088f",
        "body" : "You mean that we may not need to convert to ndarray?\r\n\r\nCurrently, one test fails due to a failed assertion in an internal function: pandas/core/internals/blocks.py:2120\r\nThe failing test is series.test_internals.TestSeriesInternals.test_convert",
        "createdAt" : "2019-01-18T23:38:13Z",
        "updatedAt" : "2019-03-12T15:22:52Z",
        "lastEditedBy" : "0225e96c-0332-4963-b35c-6122e27e088f",
        "tags" : [
        ]
      },
      {
        "id" : "b5daaa77-fdee-49e5-8b9d-6989b52c0696",
        "parentId" : "9672e734-34d6-4b66-8caa-90bee4ee1235",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "of its just an internal function, then pls just change it.",
        "createdAt" : "2019-01-19T21:49:20Z",
        "updatedAt" : "2019-03-12T15:22:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d6e0d3c48dd4896fc6f0d9b33e02448c6f4f033",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +795,799 @@        if datetime:\n            from pandas import to_datetime\n            return to_datetime(values, errors='coerce').to_numpy()\n        elif timedelta:\n            from pandas import to_timedelta"
  },
  {
    "id" : "62d9b3f6-87c5-4a29-a637-1cde73c878b7",
    "prId" : 24486,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24486#pullrequestreview-194371386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11d2d35d-da47-422a-b7a7-cc36d52c164e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you might also be able to take this off as well",
        "createdAt" : "2019-01-19T21:49:40Z",
        "updatedAt" : "2019-03-12T15:22:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d6e0d3c48dd4896fc6f0d9b33e02448c6f4f033",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +798,802 @@        elif timedelta:\n            from pandas import to_timedelta\n            return to_timedelta(values, errors='coerce').to_numpy()\n        elif numeric:\n            from pandas import to_numeric"
  },
  {
    "id" : "5b4d23b1-834e-4510-bf86-0ace186db2c9",
    "prId" : 24596,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24596#pullrequestreview-189117466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3e7978b-979c-499b-9e24-31c6968979e7",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Need to look at this closer. `maybe_cast_to_datetime` seems in need of an overhaul (along with all of `sanitize_array`) but this at least avoids the warning.",
        "createdAt" : "2019-01-03T17:57:42Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f4fbde4472700525959dbb7255185e36155f21",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1021,1025 @@                            # be localized to the timezone.\n                            is_dt_string = is_string_dtype(value)\n                            value = to_datetime(value, errors=errors).array\n                            if is_dt_string:\n                                # Strings here are naive, so directly localize"
  },
  {
    "id" : "17fb807e-7c36-4293-980e-f208259ab5b0",
    "prId" : 24793,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24793#pullrequestreview-192957154",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03604c47-eb49-4a29-8c3b-be31ff1e27be",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "btw an upcoming PR is going to make the try/except part of this function unnecessary.",
        "createdAt" : "2019-01-16T03:02:28Z",
        "updatedAt" : "2019-01-17T00:01:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7b01698275fa56a60ff91ecd497d16913e4ca76",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +571,575 @@\n    def conv(r, dtype):\n        try:\n            if isna(r):\n                pass"
  },
  {
    "id" : "ee939ba5-4451-462b-8d9e-ebdc674a50e2",
    "prId" : 26848,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26848#pullrequestreview-250446935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99d32a75-ca27-48fc-88ca-3e3a8e2d62ff",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this will *also* catch the datetime.datetime case (as we have ``errors='raise'`` passed to ``to_datetime``, which will then re-raise, do we actually hit this case in testing?\r\n",
        "createdAt" : "2019-06-17T11:23:19Z",
        "updatedAt" : "2019-06-21T06:16:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c52d94bb-fd69-44d4-8079-8a0dd7564ac6",
        "parentId" : "99d32a75-ca27-48fc-88ca-3e3a8e2d62ff",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "See the tests that I added, that should be covered. \r\n\r\nThe reason that works is because this code path you are commenting on is only taken if the original data already has a np.datetime64 dtype. If you pass `maybe_cast_to_datetime` an object array of (out of bound) datetime.datetime, it will return that object array, and not raise.",
        "createdAt" : "2019-06-17T11:44:33Z",
        "updatedAt" : "2019-06-21T06:16:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "bcade9f0-1e10-4a2c-9709-59216deb8262",
        "parentId" : "99d32a75-ca27-48fc-88ca-3e3a8e2d62ff",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k fair enough. This code is *very* complicated, ideally like to simplify as much as possible.",
        "createdAt" : "2019-06-17T11:46:43Z",
        "updatedAt" : "2019-06-21T06:16:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f454065e-c6e6-432e-a2fa-cd5946c03d16",
        "parentId" : "99d32a75-ca27-48fc-88ca-3e3a8e2d62ff",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Fully agree on the code complexity .. (have another change that simplifies some of this code, but since it is unrelated to this actual bug fix, will keep that for another PR)",
        "createdAt" : "2019-06-17T11:50:05Z",
        "updatedAt" : "2019-06-21T06:16:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "369eeadce0a8c8539aa937e19002901cc98091f7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1039,1043 @@                        elif is_timedelta64:\n                            value = to_timedelta(value, errors=errors)._values\n                    except OutOfBoundsDatetime:\n                        raise\n                    except (AttributeError, ValueError, TypeError):"
  },
  {
    "id" : "4737647d-326b-4e2b-86fa-4b7293d061c0",
    "prId" : 27444,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27444#pullrequestreview-264509151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0571418d-97a3-4280-930a-0be42ba3ffc3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add Parameters / Returns to the doc-string",
        "createdAt" : "2019-07-20T19:37:46Z",
        "updatedAt" : "2019-07-20T20:23:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ed1dce89-ac82-46e1-a4a7-8a88b0457d0d",
        "parentId" : "0571418d-97a3-4280-930a-0be42ba3ffc3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sure",
        "createdAt" : "2019-07-20T19:49:04Z",
        "updatedAt" : "2019-07-20T20:23:26Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b32f6521b8c9c802049c88d3868eb532954c60d0",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +742,746 @@    ndarray or DatetimeIndex\n    \"\"\"\n    validate_bool_kwarg(convert_numeric, \"convert_numeric\")\n\n    orig_values = values"
  },
  {
    "id" : "1a751203-6829-4445-9567-3df60c4ca754",
    "prId" : 27714,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27714#pullrequestreview-270286601",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1631ffd4-2407-49bb-bc68-70e39459d19a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "rather than doing this, I would pass in a callable directly",
        "createdAt" : "2019-08-02T16:20:35Z",
        "updatedAt" : "2019-08-02T16:50:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d7bb2afd-8e7b-46d9-9e36-4755f71527c9",
        "parentId" : "1631ffd4-2407-49bb-bc68-70e39459d19a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "that gives a lot more degrees of freedom to the caller, I'd rather it just be a bool kwarg until/unless we need something more",
        "createdAt" : "2019-08-02T16:49:43Z",
        "updatedAt" : "2019-08-02T16:50:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "44bf1e464bb8dec082deff3bfa5d2f9e8c88513f",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +182,186 @@        result = np.array(result)\n\n    def trans(x):\n        if do_round:\n            return x.round()"
  },
  {
    "id" : "e076b318-2bfd-41e9-89d8-18478ca466f0",
    "prId" : 27714,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27714#pullrequestreview-270286172",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3dc62387-276d-46a3-9ef3-b491676a7d1b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is very similar to to_numeric; would plan as a followup to move to_numeric logic here and call this.",
        "createdAt" : "2019-08-02T16:22:09Z",
        "updatedAt" : "2019-08-02T16:50:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "65acc51d-afc7-4d34-8dfb-085f25b26eb3",
        "parentId" : "3dc62387-276d-46a3-9ef3-b491676a7d1b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "good idea",
        "createdAt" : "2019-08-02T16:48:48Z",
        "updatedAt" : "2019-08-02T16:50:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "44bf1e464bb8dec082deff3bfa5d2f9e8c88513f",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +159,163 @@\n\ndef maybe_downcast_numeric(result, dtype, do_round: bool = False):\n    \"\"\"\n    Subset of maybe_downcast_to_dtype restricted to numeric dtypes."
  },
  {
    "id" : "d67f5244-5e24-4fa8-9f6e-e7a6899c9aca",
    "prId" : 27928,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27928#pullrequestreview-287426550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdef3835-94e1-466c-8573-cbf9a57963ed",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "What does `<=` do for numpy dtypes? Check if it's a subtype?",
        "createdAt" : "2019-09-11T20:22:09Z",
        "updatedAt" : "2019-09-13T11:55:15Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b75c03d0-c433-4f34-8ab7-cff21b24acd1",
        "parentId" : "fdef3835-94e1-466c-8573-cbf9a57963ed",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not clear to me either:\r\n\r\n```\r\n>>> \"timedelta64[ns]\" < np.dtype(\"m8[ns]\")\r\nFalse\r\n>>> \"timedelta64[us]\" < np.dtype(\"m8[ns]\")\r\nTrue\r\n>>> \"timedelta64[ps]\" > np.dtype(\"m8[ns]\")\r\nTrue\r\n>>> \"timedelta64\" < np.dtype(\"m8[ns]\")\r\nTrue\r\n```",
        "createdAt" : "2019-09-11T21:44:44Z",
        "updatedAt" : "2019-09-13T11:55:15Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "87db5544-416a-4d47-be2f-28fc7829c666",
        "parentId" : "fdef3835-94e1-466c-8573-cbf9a57963ed",
        "authorId" : "9e4fa26b-3909-4ade-a15d-4e629bb9afc1",
        "body" : "@TomAugspurger @jbrockmendel \r\nIt checks whether the dtype timespan is longer than `[ns]` or shorter. (FYI, https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html#datetime-units)",
        "createdAt" : "2019-09-12T12:46:50Z",
        "updatedAt" : "2019-09-13T11:55:15Z",
        "lastEditedBy" : "9e4fa26b-3909-4ade-a15d-4e629bb9afc1",
        "tags" : [
        ]
      },
      {
        "id" : "59b1b81e-54fa-4899-ba6d-68fbe561db29",
        "parentId" : "fdef3835-94e1-466c-8573-cbf9a57963ed",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment to this effect (in both places)",
        "createdAt" : "2019-09-12T13:26:31Z",
        "updatedAt" : "2019-09-13T11:55:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8eb91f46a1166ad6c81a4f778cea0e4090059e5",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1033,1037 @@                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"M8[ns]\"):\n                    if dtype.name == \"datetime64\":\n                        raise ValueError(msg.format(dtype=dtype.name))"
  },
  {
    "id" : "7c31d69b-8f15-4ed4-8086-cec057233372",
    "prId" : 28492,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28492#pullrequestreview-290265006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b212af43-3b21-41cf-ac33-c26a69757c92",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this likely needs to be is_integer_dtype(dtype)",
        "createdAt" : "2019-09-18T11:53:44Z",
        "updatedAt" : "2019-12-30T21:50:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ec339ab0-73d1-41de-9a10-0dc560e80eca",
        "parentId" : "b212af43-3b21-41cf-ac33-c26a69757c92",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "I think this might actually need to be `np.int64` since above we check for `datetime64` (getting some weird test failures after this change).  Looking at the `numpy` documentation it seems the output of `view` is \"unpredictable\" when the precision differs between the data types (the _shape_ of the output can even change).",
        "createdAt" : "2019-09-19T00:07:13Z",
        "updatedAt" : "2019-12-30T21:50:46Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "931e8c5e85046b1e87f89733bf9cde92134cb337",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +823,827 @@        if is_object_dtype(dtype):\n            return tslib.ints_to_pydatetime(arr.view(np.int64))\n        elif dtype == np.int64:\n            if isna(arr).any():\n                raise ValueError(\"Cannot convert NaT values to integer\")"
  },
  {
    "id" : "f16fce35-de97-4b61-99bd-1958bc09a466",
    "prId" : 28564,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28564#pullrequestreview-295603422",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7397127a-c417-4a12-9722-f0550a271f08",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is nice, though I think we have several implementation of this (or maybe for the array form) in this file, in the future would be nice to consolidate.",
        "createdAt" : "2019-10-01T13:05:45Z",
        "updatedAt" : "2019-10-01T13:05:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "730ae6ab-9927-4742-91f3-e68e8e066470",
        "parentId" : "7397127a-c417-4a12-9722-f0550a271f08",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "will take a look.  plenty of follow-ups coming up for this.  hopefully will be orthogonal and small.",
        "createdAt" : "2019-10-01T13:30:43Z",
        "updatedAt" : "2019-10-01T13:30:43Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7267be451590dbdf0aea5d0345e0bd5f574ba170",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +412,416 @@\n\ndef _check_lossless_cast(value, dtype: np.dtype) -> bool:\n    \"\"\"\n    Check if we can cast the given value to the given dtype _losslesly_."
  },
  {
    "id" : "ba3c50e6-6506-4b1e-8088-11a913dcae78",
    "prId" : 28725,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28725#pullrequestreview-295748572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36ce36a5-b22e-4d70-b850-2584472b1441",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "really? should we add one instead of this?",
        "createdAt" : "2019-10-01T16:43:56Z",
        "updatedAt" : "2019-10-01T16:45:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bbdd8d4d-62a9-478d-ae17-4092e5a39c66",
        "parentId" : "36ce36a5-b22e-4d70-b850-2584472b1441",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "NaT is pretty specifically a datetime.  I think adding this there would muddy the waters",
        "createdAt" : "2019-10-01T16:55:01Z",
        "updatedAt" : "2019-10-01T16:55:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5604e2b2-7f28-4355-a536-a7ad8fa4af06",
        "parentId" : "36ce36a5-b22e-4d70-b850-2584472b1441",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok",
        "createdAt" : "2019-10-01T16:55:36Z",
        "updatedAt" : "2019-10-01T16:55:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca143507947962f10524840f367d2df9b6205f63",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +355,359 @@        fv = tslibs.Timedelta(fill_value)\n        if fv is NaT:\n            # NaT has no `to_timedelta6` method\n            fill_value = np.timedelta64(\"NaT\", \"ns\")\n        else:"
  },
  {
    "id" : "5f533d23-35a4-4b45-98e6-fe9ff9230fa8",
    "prId" : 28725,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28725#pullrequestreview-295749675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f02f615a-47fc-4689-b6c5-8a5f0973cf7e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "would it be better to branch this to be explict (e.g. datetime and timedelta branches)",
        "createdAt" : "2019-10-01T16:44:25Z",
        "updatedAt" : "2019-10-01T16:45:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "88d79bb3-3d09-4eda-ac22-0b6f7025b379",
        "parentId" : "f02f615a-47fc-4689-b6c5-8a5f0973cf7e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually why do we have a branch for a subclass of np.datetime64 AND this one (and same for timedelta)?",
        "createdAt" : "2019-10-01T16:45:09Z",
        "updatedAt" : "2019-10-01T16:45:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1d489193-55ae-40f9-af87-9c6b0bf63840",
        "parentId" : "f02f615a-47fc-4689-b6c5-8a5f0973cf7e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "not clear.  my current plan is to do a couple more small PRs of xfail-fixing before getting into refactoring",
        "createdAt" : "2019-10-01T16:57:25Z",
        "updatedAt" : "2019-10-01T16:57:25Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca143507947962f10524840f367d2df9b6205f63",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +398,402 @@            dtype = np.float64\n            fill_value = np.nan\n        elif is_datetime_or_timedelta_dtype(dtype):\n            fill_value = dtype.type(\"NaT\", \"ns\")\n        else:"
  },
  {
    "id" : "35236876-844d-417c-a741-8309227ca5fe",
    "prId" : 28776,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28776#pullrequestreview-297575737",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2514b9c9-99c1-4f1c-8e0a-c94a04bac556",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Excuse my lack of familiarity but would it be possible for a non-numeric fill_value to hit this condition? If so I think would cause a ValueError",
        "createdAt" : "2019-10-04T15:49:33Z",
        "updatedAt" : "2019-10-04T15:49:36Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "9cf98003-f0a5-4881-a27f-651c273a8b72",
        "parentId" : "2514b9c9-99c1-4f1c-8e0a-c94a04bac556",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "No, a few lines up we condition on fill_value being float scalar",
        "createdAt" : "2019-10-04T16:09:02Z",
        "updatedAt" : "2019-10-04T16:09:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8b5721e14260b67337baf7623928181cffc24a5",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +378,382 @@            dtype = np.dtype(np.float64)\n            if not isna(fill_value):\n                fill_value = dtype.type(fill_value)\n    elif is_bool(fill_value):\n        if not issubclass(dtype.type, np.bool_):"
  },
  {
    "id" : "93069bf2-1729-49fd-a182-79fadd8332f3",
    "prId" : 28897,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28897#pullrequestreview-300908649",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b241d6a8-bb9a-487d-9baf-6b785455d413",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could be elif",
        "createdAt" : "2019-10-11T12:25:17Z",
        "updatedAt" : "2019-10-11T15:23:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1f24ead9-cef6-49b8-9713-2097c7128e33",
        "parentId" : "b241d6a8-bb9a-487d-9baf-6b785455d413",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "changed",
        "createdAt" : "2019-10-11T20:22:45Z",
        "updatedAt" : "2019-10-11T20:22:45Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "734bab201d173e459bcefe60db2ab14e03d06878",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +482,486 @@\n    # Start with exceptions in which we do _not_ cast to numpy types\n    if is_extension_array_dtype(dtype):\n        return value\n    elif dtype == np.object_:"
  },
  {
    "id" : "b87e793e-7879-4835-9947-69d753c41462",
    "prId" : 29332,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29332#pullrequestreview-310775657",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b34fe180-c430-443c-b8e8-9e75f4e6cb44",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you type other here?",
        "createdAt" : "2019-11-02T15:31:06Z",
        "updatedAt" : "2019-11-02T15:31:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f4096d95-940c-4874-869b-4d2ddd653017",
        "parentId" : "b34fe180-c430-443c-b8e8-9e75f4e6cb44",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "looks like ill be doing a branch of just follow-ups soon",
        "createdAt" : "2019-11-02T15:33:56Z",
        "updatedAt" : "2019-11-02T15:33:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ee81a5a77149e143549c69bd7d1d5e2b78be7bf",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +233,237 @@\n\ndef maybe_upcast_putmask(result: np.ndarray, mask: np.ndarray, other):\n    \"\"\"\n    A safe version of putmask that potentially upcasts the result."
  },
  {
    "id" : "66e0afe7-2d30-4c85-b86c-dbde5eb1500c",
    "prId" : 30260,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30260#pullrequestreview-332289258",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b8b2ea3-ad23-4378-8ebf-6e9e4ff07df5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should type at some point",
        "createdAt" : "2019-12-15T21:40:03Z",
        "updatedAt" : "2019-12-15T21:43:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6cd691cec862a50f00ebc1d415eae4881f46e7c",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +338,342 @@\ndef maybe_promote(dtype, fill_value=np.nan):\n    \"\"\"\n    Find the minimal dtype that can hold both the given dtype and fill_value.\n"
  },
  {
    "id" : "064e79b8-e07a-4c63-a860-9b43fca21c82",
    "prId" : 30260,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30260#pullrequestreview-332289258",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "846eb1d0-54ae-4c0f-a93c-a66a2d0c6b96",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ideally type these at some point",
        "createdAt" : "2019-12-15T21:40:20Z",
        "updatedAt" : "2019-12-15T21:43:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6cd691cec862a50f00ebc1d415eae4881f46e7c",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +701,705 @@    Parameters\n    ----------\n    values : ndarray or ExtensionArray\n        The array that we want to maybe upcast.\n    fill_value : what we want to fill with"
  },
  {
    "id" : "1c800d9e-18e3-4eec-81fc-c1eb885358d4",
    "prId" : 30506,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30506#pullrequestreview-336820411",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3603e277-da28-4c5a-a488-3cfdc31841cf",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What is your apprehension with this comment?",
        "createdAt" : "2019-12-27T13:41:19Z",
        "updatedAt" : "2019-12-27T13:41:19Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "95e6be85-b226-4b7c-bd41-4c45fde8ee1a",
        "parentId" : "3603e277-da28-4c5a-a488-3cfdc31841cf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually you likley remove line 415 as None vs a tz will also not compare.",
        "createdAt" : "2019-12-27T14:45:58Z",
        "updatedAt" : "2019-12-27T14:46:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ccf57d4b-3bc5-4924-b3d1-536c1d1cee95",
        "parentId" : "3603e277-da28-4c5a-a488-3cfdc31841cf",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> What is your apprehension with this comment?\r\n\r\nFor something like setitem, using a timestamp with a different tz is fine, so wouldn't cast to object.  so im a bit wary about doing this without having any real use cases that get here \r\n",
        "createdAt" : "2019-12-27T16:48:21Z",
        "updatedAt" : "2019-12-27T16:48:21Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5310784d-7163-4fa8-9068-0059da706890",
        "parentId" : "3603e277-da28-4c5a-a488-3cfdc31841cf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k",
        "createdAt" : "2019-12-27T16:51:38Z",
        "updatedAt" : "2019-12-27T16:51:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a06d2c15f1ca9b625e2f78f914d552dc36279145",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +416,420 @@            dtype = np.dtype(np.object_)\n        elif not tz_compare(fill_value.tzinfo, dtype.tz):\n            # TODO: sure we want to cast here?\n            dtype = np.dtype(np.object_)\n"
  },
  {
    "id" : "7de4a111-78cb-4beb-add3-fb6f0bba6fb3",
    "prId" : 30929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30929#pullrequestreview-345561574",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15c8d172-8c5b-457d-871f-9eb04ef108d2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you comment on this case here",
        "createdAt" : "2020-01-20T20:07:49Z",
        "updatedAt" : "2020-01-24T02:29:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "88d579db-b1af-4d9f-9da6-63c5d2930a42",
        "parentId" : "15c8d172-8c5b-457d-871f-9eb04ef108d2",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "I added a comment, but discussion is here https://github.com/pandas-dev/pandas/pull/30929#discussion_r366465412\r\n\r\nThe issue is that if you pass in a `Period` to `lib.infer_dtype()` you get a `ValueError`. Reported in #23553 ",
        "createdAt" : "2020-01-20T22:20:22Z",
        "updatedAt" : "2020-01-24T02:29:44Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      },
      {
        "id" : "7b6fe2df-b51f-4738-a437-8073dbfd3e14",
        "parentId" : "15c8d172-8c5b-457d-871f-9eb04ef108d2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in-line comments are *way* more useful than a github comment as they are readable by anyone (you can link to that discussion if you want)",
        "createdAt" : "2020-01-20T22:43:20Z",
        "updatedAt" : "2020-01-24T02:29:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ace8e422-7c91-4160-bb35-b482631fe043",
        "parentId" : "15c8d172-8c5b-457d-871f-9eb04ef108d2",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "I've added an inline comment with a ref to the Github issue. ",
        "createdAt" : "2020-01-20T22:48:22Z",
        "updatedAt" : "2020-01-24T02:29:44Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa93a84474079de79d9cf101cc9d708ceeec2fab",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +1054,1058 @@            inferred_dtype = input_array.dtype\n\n        if not convert_string and is_string_dtype(inferred_dtype):\n            inferred_dtype = input_array.dtype\n"
  },
  {
    "id" : "a31938ac-8000-405e-a33b-4d51f6e09375",
    "prId" : 30929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30929#pullrequestreview-347720554",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd94d755-f600-4fc4-81b1-775bebd2815b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we type this Union[EA, PA] (do we have a type for this)?",
        "createdAt" : "2020-01-24T00:53:37Z",
        "updatedAt" : "2020-01-24T02:29:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "67ce5565-7113-47bd-a8d0-c7512d0f22e4",
        "parentId" : "bd94d755-f600-4fc4-81b1-775bebd2815b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you type the return: Dtype ?",
        "createdAt" : "2020-01-24T00:54:55Z",
        "updatedAt" : "2020-01-24T02:29:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "081a77c0-782f-42cc-b58a-5ca6279cc4b9",
        "parentId" : "bd94d755-f600-4fc4-81b1-775bebd2815b",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "> can we type this Union[EA, PA] (do we have a type for this)?\r\n\r\nCurrently no type for `PandasArray`, so I'm a bit hesitant to muck around with `_typing.py` to try to get that to work.\r\n\r\n> can you type the return: Dtype ?\r\n\r\nDone",
        "createdAt" : "2020-01-24T02:07:55Z",
        "updatedAt" : "2020-01-24T02:29:44Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa93a84474079de79d9cf101cc9d708ceeec2fab",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1022,1026 @@\ndef convert_dtypes(\n    input_array,\n    convert_string: bool = True,\n    convert_integer: bool = True,"
  },
  {
    "id" : "bba08608-9432-41de-8861-992c72d42451",
    "prId" : 30929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30929#pullrequestreview-349695806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "609514ba-b481-43d0-90c2-5b5f0c199ca8",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "\"ExtensionArray or PandasArray\" is redundant, isnt it?  is ndarray not allowed?  either way, can input_array be annotated?",
        "createdAt" : "2020-01-26T18:07:40Z",
        "updatedAt" : "2020-01-26T18:07:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "c0f1624d-17c7-429c-8a13-6e76a4dd685f",
        "parentId" : "609514ba-b481-43d0-90c2-5b5f0c199ca8",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "@jbrockmendel You're correct about the redundancy (this description resulted after lots of discussion above), and I think an ndarray would work, but it is probably untested. \r\n\r\nWith respect to annotation, the issue here is the ordering of imports, so if it were to be typed, it requires changes to `_typing.py` and I didn't want to introduce that complexity to the PR.\r\n\r\n",
        "createdAt" : "2020-01-27T15:24:10Z",
        "updatedAt" : "2020-01-27T15:24:10Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      },
      {
        "id" : "c08a6fc6-de24-4563-b3fd-56e94ceb389b",
        "parentId" : "609514ba-b481-43d0-90c2-5b5f0c199ca8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "thanks for explaining, my mistake not following the thread in real-time.",
        "createdAt" : "2020-01-28T20:56:46Z",
        "updatedAt" : "2020-01-28T20:56:46Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa93a84474079de79d9cf101cc9d708ceeec2fab",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +1033,1037 @@    Parameters\n    ----------\n    input_array : ExtensionArray or PandasArray\n    convert_string : bool, default True\n        Whether object dtypes should be converted to ``StringDtype()``."
  },
  {
    "id" : "297de13c-ba23-494f-af40-9c94fffcf4cd",
    "prId" : 30929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30929#pullrequestreview-348746790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aec8acd0-9123-4750-9ec7-fae904c2e034",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "we really need to get a DtypeObject in pandas._typing that excludes strings",
        "createdAt" : "2020-01-26T18:08:19Z",
        "updatedAt" : "2020-01-26T18:08:20Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2fa1ba27-82f5-4891-9179-ae7fad27b147",
        "parentId" : "aec8acd0-9123-4750-9ec7-fae904c2e034",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "PR welcome!  (heh, heh)",
        "createdAt" : "2020-01-27T15:24:35Z",
        "updatedAt" : "2020-01-27T15:24:35Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa93a84474079de79d9cf101cc9d708ceeec2fab",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1026,1030 @@    convert_integer: bool = True,\n    convert_boolean: bool = True,\n) -> Dtype:\n    \"\"\"\n    Convert objects to best possible type, and optionally,"
  },
  {
    "id" : "64a8e75b-d56b-4233-9769-9e0c2df817cf",
    "prId" : 32894,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32894#pullrequestreview-382450922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "343f0e6a-3778-47d0-9e57-1671d0dcc2b0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "also add\r\n`assert isinstance(cls, type), f\"must pass a type: {cls}\"`",
        "createdAt" : "2020-03-26T22:01:48Z",
        "updatedAt" : "2020-03-26T23:02:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b32d0eda7d2d25352d89e558557ef56243bc6a4",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +328,332 @@    -------\n    ExtensionArray or obj\n    \"\"\"\n    assert isinstance(cls, type), f\"must pass a type: {cls}\"\n    try:"
  },
  {
    "id" : "92e2a1c6-f85e-43ec-a8f4-216025f09fc5",
    "prId" : 32894,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32894#pullrequestreview-384267173",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8eed8664-3a2e-4699-981c-7f03e0871820",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "for future reference, typing as ABCSeries is less useful than typing as \"Series\" via TYPE_CHECKING",
        "createdAt" : "2020-03-28T01:10:14Z",
        "updatedAt" : "2020-03-28T01:10:14Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "44dd11bb-3b10-425d-836b-5cf54633a4d2",
        "parentId" : "8eed8664-3a2e-4699-981c-7f03e0871820",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "I attempted making this change, but mypy is saying that argument 2 in groupby.generic._transform_fast (below) is of type NDFrame. Is there still a better type hint to use here than ABCSeries?\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/60b0e9fbcfcea7a2bf3e944670ba0c7131c9e332/pandas/core/groupby/generic.py#L522-L532",
        "createdAt" : "2020-03-28T23:14:15Z",
        "updatedAt" : "2020-03-28T23:16:10Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "5ac465e9-6934-4e95-980a-d10f22945e2d",
        "parentId" : "8eed8664-3a2e-4699-981c-7f03e0871820",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "im pretty sure that self.obj is a Series here, so this indicates that we need to get mypy to understand that",
        "createdAt" : "2020-03-30T18:26:19Z",
        "updatedAt" : "2020-03-30T18:26:20Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5eb4c8fc-8180-4cab-80f4-0c1e56f24f0a",
        "parentId" : "8eed8664-3a2e-4699-981c-7f03e0871820",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "I added an assert for this and ran the tests; indeed you're right - thanks. I'll be fixing in a subsequent PR.",
        "createdAt" : "2020-03-30T22:08:02Z",
        "updatedAt" : "2020-03-30T22:08:03Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b32d0eda7d2d25352d89e558557ef56243bc6a4",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +248,252 @@\ndef maybe_cast_result(\n    result, obj: ABCSeries, numeric_only: bool = False, how: str = \"\"\n):\n    \"\"\""
  },
  {
    "id" : "cf7d6b78-1854-416c-a26e-cd02a524a1b7",
    "prId" : 32894,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32894#pullrequestreview-383356469",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdec590d-f316-4c42-9601-af3ea8c9a593",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Does \"array-like\" in this context mean \"ndarray or EA\" or does it include Index/Series/??.  If its just the first two, then we can annotate `result` as `ArrayLike`",
        "createdAt" : "2020-03-28T01:11:20Z",
        "updatedAt" : "2020-03-28T01:11:21Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2a105474-5cd3-4acc-9157-69dbfdf3fd81",
        "parentId" : "bdec590d-f316-4c42-9601-af3ea8c9a593",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "I added the line:\r\n\r\n    assert is_extension_array_dtype(result) or isinstance(result, np.ndarray)\r\n\r\nto this function and ran the tests and got 7 failures. One of which was \r\n\r\n    tests.resample.test_datetime_index.test_resample_median_bug_1688\r\n\r\nwhere the type is Series.",
        "createdAt" : "2020-03-28T22:51:33Z",
        "updatedAt" : "2020-03-28T22:51:34Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b32d0eda7d2d25352d89e558557ef56243bc6a4",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +255,259 @@    Parameters\n    ----------\n    result : array-like\n        Result to cast.\n    obj : ABCSeries"
  },
  {
    "id" : "d7fd44cd-6e87-4f3c-86f0-ab81c1b24972",
    "prId" : 32894,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32894#pullrequestreview-383268516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a017701a-3c9f-4244-a745-799c6459f601",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "ABCSeries -> Series",
        "createdAt" : "2020-03-28T01:11:29Z",
        "updatedAt" : "2020-03-28T01:11:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b32d0eda7d2d25352d89e558557ef56243bc6a4",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +257,261 @@    result : array-like\n        Result to cast.\n    obj : ABCSeries\n        Input series from which result was calculated.\n    numeric_only : bool, default False"
  },
  {
    "id" : "956a3203-464c-48f6-a143-7de2ee0bfb18",
    "prId" : 32894,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32894#pullrequestreview-383268535",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2410ceae-3dfa-4f87-b9f9-1d78af6a2b03",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "series -> Series",
        "createdAt" : "2020-03-28T01:11:36Z",
        "updatedAt" : "2020-03-28T01:11:36Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b32d0eda7d2d25352d89e558557ef56243bc6a4",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +258,262 @@        Result to cast.\n    obj : ABCSeries\n        Input series from which result was calculated.\n    numeric_only : bool, default False\n        Whether to cast only numerics or datetimes as well."
  },
  {
    "id" : "1b1be191-5293-43b3-82ed-090a59fdcecb",
    "prId" : 33089,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33089#pullrequestreview-383649454",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a33ecb92-b368-440b-a297-ef20da1b2640",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "again instead of expanding this check, i would completely remove it; it be encompassed in maybe_cast_result_type, which is the point of that function",
        "createdAt" : "2020-03-29T15:00:34Z",
        "updatedAt" : "2020-04-07T01:25:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e3dba584-f6f6-4636-b40e-ab317470357d",
        "parentId" : "a33ecb92-b368-440b-a297-ef20da1b2640",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "I'm not sure if we can completely move this logic into `maybe_cast_result_dtype`; e.g., for something like `agg(pd.Series.nunique)` performed on a categorical, we end up with integer counts with an original dtype of categorical, but we don't actually know \"how\" we got there, so we can't say that the dtype should still be integer based on the kind of operation that was performed.\r\n\r\nThe datetime check seems to be another issue with not being able to introspect a user-provided function like `agg(lambda g: g.iloc[0].year)` and know that the output should still be an int and not a datetime.",
        "createdAt" : "2020-03-29T19:07:33Z",
        "updatedAt" : "2020-04-07T01:25:11Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "0dcea09c-9c0d-4cd8-9851-63792f7fa5b7",
        "parentId" : "a33ecb92-b368-440b-a297-ef20da1b2640",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "this is tagged as 1.0.4 at the moment just in case we do another patch release. If so, the changes in this PR should be kept to a minimum?",
        "createdAt" : "2020-03-30T08:51:12Z",
        "updatedAt" : "2020-04-07T01:25:11Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "e55a0d463def16ae3a5f14bc2ca6606c000a59d2",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +281,285 @@\n    if not is_scalar(result):\n        if (\n            is_extension_array_dtype(dtype)\n            and not is_categorical_dtype(dtype)"
  },
  {
    "id" : "f1772919-be3f-477e-91fb-dce82ef09d86",
    "prId" : 33286,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33286#pullrequestreview-387799983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51212194-0724-4707-a99c-07624ce55130",
        "parentId" : null,
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Is the assert here still necessary, or does the type hint now make this redundant?",
        "createdAt" : "2020-04-04T16:19:51Z",
        "updatedAt" : "2020-04-05T14:20:03Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "38988561-b83d-4859-88c6-c592e840142a",
        "parentId" : "51212194-0724-4707-a99c-07624ce55130",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "@simonjayhawkins Would like your thoughts on this.",
        "createdAt" : "2020-04-04T16:59:04Z",
        "updatedAt" : "2020-04-05T14:20:03Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "820665bb-0bfa-46cc-90aa-05b30ae54a57",
        "parentId" : "51212194-0724-4707-a99c-07624ce55130",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "the type hint is sufficient for the static checking (so that mypy doesn't report any errors). For the assert, it depends on the desired runtime behaviour.",
        "createdAt" : "2020-04-05T09:44:13Z",
        "updatedAt" : "2020-04-05T14:20:03Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "52bd752941575a5f03969084a63868277c7ddaa8",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +335,339 @@    assert isinstance(cls, type), f\"must pass a type: {cls}\"\n    assertion_msg = f\"must pass a subclass of ExtensionArray: {cls}\"\n    assert issubclass(cls, ABCExtensionArray), assertion_msg\n    try:\n        result = cls._from_sequence(obj, dtype=dtype)"
  },
  {
    "id" : "6f76dc6a-a16f-4f8b-b2b8-9bce57463387",
    "prId" : 33607,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33607#pullrequestreview-395547490",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9d0bfc0-010a-41e4-872f-61be60ca49d8",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i like having this logic live here.\r\n\r\n@TomAugspurger the \"negotiation protocol\" would affect what order we iterate over types?",
        "createdAt" : "2020-04-17T14:43:48Z",
        "updatedAt" : "2020-05-01T13:46:34Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "620a47fc-8812-46a6-81e6-b0a7b1e24e46",
        "parentId" : "c9d0bfc0-010a-41e4-872f-61be60ca49d8",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Dunno, but I doubt it. At the end of the day we have established behavior that order matters (I think).",
        "createdAt" : "2020-04-17T15:20:26Z",
        "updatedAt" : "2020-05-01T13:46:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "e19e3ef93d95a5d96f47812371d47c36af814245",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +1460,1464 @@                if res is not None:\n                    return res\n        return np.dtype(\"object\")\n\n    # take lowest unit"
  },
  {
    "id" : "8407705a-57a6-48b3-a47d-13c1c82b7dfc",
    "prId" : 33607,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33607#pullrequestreview-404370075",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c637f8f0-9f23-4322-9ef3-354b0cd6570d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this seems a bit arbitrary. we try the types in order to see if they are a unifying type? do we actually test this?",
        "createdAt" : "2020-05-01T19:43:48Z",
        "updatedAt" : "2020-05-01T19:46:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "19ff9eca-de9d-4b11-a24b-fd553d2bb6a5",
        "parentId" : "c637f8f0-9f23-4322-9ef3-354b0cd6570d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, so it is not arbitrary, but in order. \r\n(eg the order of the arguments passed to concat. This order for example also determines the class used for the return value)\r\n\r\nI don't think we have internally dtypes where this order actually matters, right now (meaning, where a different order would give a different result). So we don't *really* test the order-dependency. ",
        "createdAt" : "2020-05-01T19:58:37Z",
        "updatedAt" : "2020-05-01T19:58:37Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "cfce9244-dd61-463d-be0a-c353fbe22117",
        "parentId" : "c637f8f0-9f23-4322-9ef3-354b0cd6570d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Tom and I also had some discussion about this in https://github.com/pandas-dev/pandas/issues/22994#issuecomment-614203960",
        "createdAt" : "2020-05-01T20:00:44Z",
        "updatedAt" : "2020-05-01T20:00:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "e19e3ef93d95a5d96f47812371d47c36af814245",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1456,1460 @@    if any(isinstance(t, ExtensionDtype) for t in types):\n        for t in types:\n            if isinstance(t, ExtensionDtype):\n                res = t._get_common_dtype(types)\n                if res is not None:"
  },
  {
    "id" : "cacab2d6-300a-4e5d-a243-a1dc132b84dd",
    "prId" : 33725,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33725#pullrequestreview-398338808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27b45b62-69c7-448e-9674-ff07ab288188",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "maybe a TODO: that the Any is to ensure a two tuple and not to represent dynamic typing and that further refinement is required.",
        "createdAt" : "2020-04-22T16:04:41Z",
        "updatedAt" : "2020-04-23T15:55:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "76cbebb30ffba14c6bedc9157450308eeac794bc",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +709,713 @@\n# TODO: try to make the Any in the return annotation more specific\ndef infer_dtype_from_array(arr, pandas_dtype: bool = False) -> Tuple[DtypeObj, Any]:\n    \"\"\"\n    Infer the dtype from an array."
  },
  {
    "id" : "357d4877-ac21-4509-8367-da4fb23c2e3e",
    "prId" : 33725,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33725#pullrequestreview-399223040",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77fc2f6e-4846-4d91-9a81-7c8fe6e45831",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "IIUC correctly, in master the return type could be an instance or a type. There is obviously merit in refining types, but what is the advantanges/disadvantages of always returning instances instead of always returning types.",
        "createdAt" : "2020-04-23T09:58:26Z",
        "updatedAt" : "2020-04-23T15:55:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "fee1156f-2276-4d01-8adf-850745e38dc7",
        "parentId" : "77fc2f6e-4846-4d91-9a81-7c8fe6e45831",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "AFAICT it is almost never a conscious decision to return a type instead of a dtype, just the author wasnt thinking of the distinction",
        "createdAt" : "2020-04-23T15:35:04Z",
        "updatedAt" : "2020-04-23T15:55:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "76cbebb30ffba14c6bedc9157450308eeac794bc",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +631,635 @@\n\ndef infer_dtype_from_scalar(val, pandas_dtype: bool = False) -> Tuple[DtypeObj, Any]:\n    \"\"\"\n    Interpret the dtype from a scalar."
  },
  {
    "id" : "0f8da8f2-2ad8-41d4-a6cd-07dba14e8fe9",
    "prId" : 34056,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34056#pullrequestreview-408757981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bddc64d-222c-4c80-9522-6025c5e5c46c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use\r\n```issubclass(dtype, np.bool_)```",
        "createdAt" : "2020-05-10T15:12:37Z",
        "updatedAt" : "2020-05-10T15:59:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6c46c03d-0eaa-49a1-becd-a37af06b66f7",
        "parentId" : "3bddc64d-222c-4c80-9522-6025c5e5c46c",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "This ends up raising in a test:\r\n```python\r\nE       TypeError: issubclass() arg 1 must be a class\r\n```\r\nI think for np.dtype(\"float64\") as the input",
        "createdAt" : "2020-05-10T15:47:47Z",
        "updatedAt" : "2020-05-10T15:59:44Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "b5f765ca-0817-4914-ae88-3bbdc5af92a0",
        "parentId" : "3bddc64d-222c-4c80-9522-6025c5e5c46c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use type(dtype)",
        "createdAt" : "2020-05-10T15:55:43Z",
        "updatedAt" : "2020-05-10T15:59:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0b49cf5d-4a26-4fa3-a929-7f9a34b11b8e",
        "parentId" : "3bddc64d-222c-4c80-9522-6025c5e5c46c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "or i guess its ok as is",
        "createdAt" : "2020-05-10T15:56:00Z",
        "updatedAt" : "2020-05-10T15:59:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fb56296b-a91f-4cea-b6d9-b54b783ba99b",
        "parentId" : "3bddc64d-222c-4c80-9522-6025c5e5c46c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "though maybe\r\n\r\n```np.dtype(dtype) == \"bool\"``` is better",
        "createdAt" : "2020-05-10T15:56:23Z",
        "updatedAt" : "2020-05-10T15:59:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "809f2145-35b6-4fa0-acdb-b0fa64f5f0d0",
        "parentId" : "3bddc64d-222c-4c80-9522-6025c5e5c46c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "depends on what we allow dtype at this point",
        "createdAt" : "2020-05-10T15:56:34Z",
        "updatedAt" : "2020-05-10T15:59:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "677b0457b75e7b4bfeeaf29557397f39b8531903",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +316,320 @@    from pandas.core.arrays.integer import Int64Dtype\n\n    if how in [\"add\", \"cumsum\", \"sum\"] and (dtype == np.dtype(np.bool)):\n        return np.dtype(np.int64)\n    elif how in [\"add\", \"cumsum\", \"sum\"] and isinstance(dtype, BooleanDtype):"
  },
  {
    "id" : "cd2ad69c-e3a8-41f8-836b-0adf68bb659e",
    "prId" : 34056,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34056#pullrequestreview-409367201",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1eb650e-6923-4384-9b9e-83b72b813cb7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you should be able to import these at the top. We in general do not want to import *inside* functions ever; the exception is a circular dependency, which we usually try to avoid.",
        "createdAt" : "2020-05-10T17:12:03Z",
        "updatedAt" : "2020-05-10T17:12:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5bbeccdb-0bed-4c06-a9cd-667220e298e6",
        "parentId" : "e1eb650e-6923-4384-9b9e-83b72b813cb7",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "I am getting a circular dependency error when I try importing at the top",
        "createdAt" : "2020-05-11T17:12:06Z",
        "updatedAt" : "2020-05-11T17:12:07Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "677b0457b75e7b4bfeeaf29557397f39b8531903",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +313,317 @@        The desired dtype of the result.\n    \"\"\"\n    from pandas.core.arrays.boolean import BooleanDtype\n    from pandas.core.arrays.integer import Int64Dtype\n"
  },
  {
    "id" : "71d2faa9-521b-4c1a-8ebf-9d45d357f72c",
    "prId" : 34835,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34835#pullrequestreview-432441292",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "beb50586-66b8-432e-8cfe-dab6b0075f08",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "```suggestion\r\n                return np.dtype(\"object\")\r\n```\r\n\r\n(to ensure this function actually returns a dtype object, as its type annotation indicates)",
        "createdAt" : "2020-06-17T14:09:28Z",
        "updatedAt" : "2020-06-17T14:50:30Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ed2e414a2df8f7004ee445b53465911b69391ab",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +1484,1488 @@        for t in types:\n            if is_integer_dtype(t) or is_float_dtype(t) or is_complex_dtype(t):\n                return object\n\n    return np.find_common_type(types, [])"
  },
  {
    "id" : "fb2c42f2-3574-481d-9ac9-bc91dc5d1cdc",
    "prId" : 36985,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36985#pullrequestreview-506073501",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d38bc119-f8bd-4b15-9b7a-b941a43c8048",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "wouldn't object to typing things, but can also be a fllowon",
        "createdAt" : "2020-10-08T20:48:52Z",
        "updatedAt" : "2020-10-10T17:11:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c88c6068-3b48-493b-82af-b5524e0fde1d",
        "parentId" : "d38bc119-f8bd-4b15-9b7a-b941a43c8048",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "Will do a typing follow-on PR (for this method and a couple of other methods in `cast.py`)",
        "createdAt" : "2020-10-09T03:22:10Z",
        "updatedAt" : "2020-10-10T17:11:21Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      },
      {
        "id" : "6a57aa14-bbf8-49a6-8aee-cae2c304a36c",
        "parentId" : "d38bc119-f8bd-4b15-9b7a-b941a43c8048",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "xref #37024",
        "createdAt" : "2020-10-10T07:00:51Z",
        "updatedAt" : "2020-10-10T17:11:21Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6581535c915781d9cc3a65c0e59d3cd63c14b54",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +445,449 @@\n\ndef maybe_casted_values(index, codes=None):\n    \"\"\"\n    Convert an index, given directly or as a pair (level, code), to a 1D array."
  },
  {
    "id" : "9957caf1-325e-4be5-b3b8-39cda6d96e34",
    "prId" : 36985,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36985#pullrequestreview-505334174",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a67f3020-f143-40b7-b16f-7ddfb5ba5040",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pls format this doc-string like normal (e.g. a blank line before Parameters, and Returns)",
        "createdAt" : "2020-10-08T20:49:22Z",
        "updatedAt" : "2020-10-10T17:11:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fd46dc16-ff00-4466-ba98-9de9d7f678a7",
        "parentId" : "a67f3020-f143-40b7-b16f-7ddfb5ba5040",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "Done",
        "createdAt" : "2020-10-09T03:22:24Z",
        "updatedAt" : "2020-10-10T17:11:21Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6581535c915781d9cc3a65c0e59d3cd63c14b54",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +454,458 @@    codes : sequence of integers (optional)\n\n    Returns\n    -------\n    ExtensionArray or ndarray"
  },
  {
    "id" : "f2297012-0fa6-415d-b522-a2c12adf4ee0",
    "prId" : 36985,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36985#pullrequestreview-506110363",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5450fb2d-7ba3-4a02-806a-5949543cc651",
        "parentId" : null,
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "not sure this is acceptable - will change if not. The issue is we can't just import at the top of the file because of a circular import",
        "createdAt" : "2020-10-09T16:59:38Z",
        "updatedAt" : "2020-10-10T17:11:21Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      },
      {
        "id" : "3eee844d-18f9-497e-9c72-f133923d2a27",
        "parentId" : "5450fb2d-7ba3-4a02-806a-5949543cc651",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "you could do `needs_i8_conversion(values.dtype) and isinstance(values, ExtensionArray)`",
        "createdAt" : "2020-10-09T22:51:03Z",
        "updatedAt" : "2020-10-10T17:11:21Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "13eedc98-9dc2-4891-b9bc-a751d63649b0",
        "parentId" : "5450fb2d-7ba3-4a02-806a-5949543cc651",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok fine with cleaning this up after, this routine definitely needs it (and also possibly is duplicative of things in this file anyways)",
        "createdAt" : "2020-10-10T16:05:51Z",
        "updatedAt" : "2020-10-10T17:11:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bb0945cc-13a9-4881-a420-b4fe6808ad24",
        "parentId" : "5450fb2d-7ba3-4a02-806a-5949543cc651",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "> you could do `needs_i8_conversion(values.dtype) and isinstance(values, ExtensionArray)`\r\n\r\ntried it and it broke some tests. I'll investigate in the follow-on",
        "createdAt" : "2020-10-10T16:39:06Z",
        "updatedAt" : "2020-10-10T17:11:21Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6581535c915781d9cc3a65c0e59d3cd63c14b54",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +488,492 @@            values_dtype = values.dtype\n\n            from pandas.core.arrays.datetimelike import DatetimeLikeArrayMixin\n\n            if isinstance(values, DatetimeLikeArrayMixin):"
  },
  {
    "id" : "8c75309e-bbed-499f-9844-0489e4cc0883",
    "prId" : 37024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37024#pullrequestreview-506198080",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54ab02ad-851f-46e2-8051-05d6524d1e36",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "we never get EAs here?",
        "createdAt" : "2020-10-10T15:01:13Z",
        "updatedAt" : "2020-10-13T16:41:10Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d9acd603-6b6a-424a-b6c7-f14e92054bb7",
        "parentId" : "54ab02ad-851f-46e2-8051-05d6524d1e36",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "Atm the only use case is here:\r\nhttps://github.com/pandas-dev/pandas/blob/126f3cc7e92db0dd92356269d4fb6ea00db30278/pandas/core/construction.py#L538-L557\r\nwhich according to docstring excludes `ExtensionArray`",
        "createdAt" : "2020-10-10T16:15:44Z",
        "updatedAt" : "2020-10-13T16:41:10Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      },
      {
        "id" : "543468f2-9276-4571-b21b-4971d1d0c4f0",
        "parentId" : "54ab02ad-851f-46e2-8051-05d6524d1e36",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add an assert in the body itself to lock this down. (whether we want it or not is different, but guarantee is good for now)",
        "createdAt" : "2020-10-11T16:40:37Z",
        "updatedAt" : "2020-10-13T16:41:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3cd51d25-a945-4486-bd3d-3905d1080466",
        "parentId" : "54ab02ad-851f-46e2-8051-05d6524d1e36",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "Added",
        "createdAt" : "2020-10-11T17:11:08Z",
        "updatedAt" : "2020-10-13T16:41:10Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      }
    ],
    "commit" : "3aa7e4dbb2cabe057c4177fab04df4cddbae9198",
    "line" : 210,
    "diffHunk" : "@@ -1,1 +1287,1291 @@\n\ndef maybe_castable(arr: np.ndarray) -> bool:\n    # return False to force a non-fastpath\n"
  },
  {
    "id" : "447e85bc-2a8e-47a6-86d4-22c023802b06",
    "prId" : 37024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37024#pullrequestreview-506198080",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b940822-62e7-43e8-a8c9-f245d7f0e4ab",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should this be DtypeObj?",
        "createdAt" : "2020-10-11T16:39:08Z",
        "updatedAt" : "2020-10-13T16:41:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cb8d46ce-4c1f-4ac9-bc26-468640517ff3",
        "parentId" : "9b940822-62e7-43e8-a8c9-f245d7f0e4ab",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "has to be `Dtype` I think because could be a `str`",
        "createdAt" : "2020-10-11T17:01:40Z",
        "updatedAt" : "2020-10-13T16:41:10Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      }
    ],
    "commit" : "3aa7e4dbb2cabe057c4177fab04df4cddbae9198",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +132,136 @@\n\ndef maybe_downcast_to_dtype(result, dtype: Dtype):\n    \"\"\"\n    try to cast to the specified dtype (e.g. convert back to bool/int"
  },
  {
    "id" : "3df1c5be-3376-459d-ac45-4513d8924feb",
    "prId" : 37024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37024#pullrequestreview-506868223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36728fb5-4fc5-412c-a8ca-0ba0a0f94135",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "`ArrayLike` is a TypeVar. so the return type is typed to be the same as obj.\r\n\r\nI _think_ mypy is accepting this since np.ndarray resolves to `Any`\r\n\r\nWe probably need an ArrayLikeUnion, but this is perhaps out of scope here as the discussion has been started elsewhere. xref  #36100",
        "createdAt" : "2020-10-12T19:02:01Z",
        "updatedAt" : "2020-10-13T16:41:10Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "3be3dd7e-cdfb-461f-b496-919cf506acdc",
        "parentId" : "36728fb5-4fc5-412c-a8ca-0ba0a0f94135",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "Shall I remove the annotation and add a TODO? \r\n\r\nAs an aside FWIW I like the `ArrayLike`/`ArrayLikeT` idea in https://github.com/pandas-dev/pandas/pull/36100/files#r483753222",
        "createdAt" : "2020-10-12T19:09:19Z",
        "updatedAt" : "2020-10-13T16:41:10Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      },
      {
        "id" : "787e9d58-5cbc-4c4c-9233-44cd74cdbd53",
        "parentId" : "36728fb5-4fc5-412c-a8ca-0ba0a0f94135",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "you can leave as is for now. we have #36092 to track the issues once np.ndarray no longer resolves to Any.",
        "createdAt" : "2020-10-12T19:36:17Z",
        "updatedAt" : "2020-10-13T16:41:10Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "3aa7e4dbb2cabe057c4177fab04df4cddbae9198",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +345,349 @@def maybe_cast_to_extension_array(\n    cls: Type[\"ExtensionArray\"], obj: ArrayLike, dtype: Optional[ExtensionDtype] = None\n) -> ArrayLike:\n    \"\"\"\n    Call to `_from_sequence` that returns the object unchanged on Exception."
  },
  {
    "id" : "31314dec-b128-424d-be16-91c64438f576",
    "prId" : 37024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37024#pullrequestreview-506857300",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "059c7e6b-2760-476d-b294-63750bf681bc",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "why was this added? mypy is not reporting any errors for me with this removed.\r\n\r\ngenerally, try to avoid adding variable type annotations. should be inferred from expression.",
        "createdAt" : "2020-10-12T19:06:36Z",
        "updatedAt" : "2020-10-13T16:41:10Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "90b8228e-fb04-499e-ac82-3e18de7594c1",
        "parentId" : "059c7e6b-2760-476d-b294-63750bf681bc",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "mistake, will revert\r\n\r\nI had tried typing `index` and `codes` but there were a lot of errors - this was part of an attempted fix.",
        "createdAt" : "2020-10-12T19:14:12Z",
        "updatedAt" : "2020-10-13T16:41:10Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      }
    ],
    "commit" : "3aa7e4dbb2cabe057c4177fab04df4cddbae9198",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +488,492 @@    # if we have the codes, extract the values with a mask\n    if codes is not None:\n        mask: np.ndarray = codes == -1\n\n        # we can have situations where the whole mask is -1,"
  },
  {
    "id" : "dc49fdb5-9dcb-4042-8bef-a9b53c8610d5",
    "prId" : 37024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37024#pullrequestreview-506863594",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99d857bd-305f-4cac-8a2d-5ea2540e647c",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "Can you update the docstring to match?",
        "createdAt" : "2020-10-12T19:12:03Z",
        "updatedAt" : "2020-10-13T16:41:10Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "d910fae0-ae56-429a-b52b-279a777b07ec",
        "parentId" : "99d857bd-305f-4cac-8a2d-5ea2540e647c",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "Done",
        "createdAt" : "2020-10-12T19:26:47Z",
        "updatedAt" : "2020-10-13T16:41:10Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      }
    ],
    "commit" : "3aa7e4dbb2cabe057c4177fab04df4cddbae9198",
    "line" : 192,
    "diffHunk" : "@@ -1,1 +1221,1225 @@\ndef convert_dtypes(\n    input_array: AnyArrayLike,\n    convert_string: bool = True,\n    convert_integer: bool = True,"
  },
  {
    "id" : "ee82ea10-957c-4a1d-87ee-acb7818702f9",
    "prId" : 37024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37024#pullrequestreview-506869210",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ff2465d-1d58-436e-8366-30f1ca0a3c57",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "we just pass shape onto np.empty, https://numpy.org/doc/1.19/reference/generated/numpy.empty.html\r\n\r\nso could be int or tuple of int\r\n\r\nI recall a discussion about adding an alias to pandas._typing or\r\n\r\n```suggestion\r\n    shape: Union[int, Tuple[int, ...]], value: Scalar, dtype: Optional[DtypeObj] = None\r\n```\r\n\r\nand the docstring would need to be updated too.",
        "createdAt" : "2020-10-12T19:22:10Z",
        "updatedAt" : "2020-10-13T16:41:10Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "4e13d091-e538-4568-b8f2-42e8039305cb",
        "parentId" : "2ff2465d-1d58-436e-8366-30f1ca0a3c57",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "Pushed the suggestion.\r\n\r\nAdding an alias to _typing sounds like a good idea. Do we already have a PR on that or shall I submit one?",
        "createdAt" : "2020-10-12T19:30:55Z",
        "updatedAt" : "2020-10-13T16:41:10Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      },
      {
        "id" : "6c4041a3-f2fc-455c-b92c-02d032e3bc3e",
        "parentId" : "2ff2465d-1d58-436e-8366-30f1ca0a3c57",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> Do we already have a PR on that or shall I submit one?\r\n\r\nI don't think so, go ahead. ",
        "createdAt" : "2020-10-12T19:38:13Z",
        "updatedAt" : "2020-10-13T16:41:10Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "3aa7e4dbb2cabe057c4177fab04df4cddbae9198",
    "line" : 244,
    "diffHunk" : "@@ -1,1 +1608,1612 @@\ndef cast_scalar_to_array(\n    shape: Tuple, value: Scalar, dtype: Optional[DtypeObj] = None\n) -> np.ndarray:\n    \"\"\""
  },
  {
    "id" : "a7260455-0f56-42b8-965d-634ccebe723d",
    "prId" : 37126,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37126#pullrequestreview-510697550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b655121-9109-425e-b680-2ab2af0bbcda",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is not correct, DtypeObj right",
        "createdAt" : "2020-10-16T01:26:31Z",
        "updatedAt" : "2020-10-17T00:59:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "622e3280-5b1a-4590-8014-3a7694fec659",
        "parentId" : "0b655121-9109-425e-b680-2ab2af0bbcda",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "has to be a numpy type or str according to `mypy`. When I put it `DtypeObj` `mypy` errors:\r\n```\r\npandas/core/dtypes/cast.py:180: error: Item \"ExtensionDtype\" of \"Union[Any, ExtensionDtype]\" has no attribute \"freq\"  [union-attr]\r\n```",
        "createdAt" : "2020-10-16T18:09:25Z",
        "updatedAt" : "2020-10-17T00:59:07Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      }
    ],
    "commit" : "048508b6c420b5bad64145e97a3df9662593420e",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +135,139 @@\n\ndef maybe_downcast_to_dtype(result, dtype: Union[str, np.dtype]):\n    \"\"\"\n    try to cast to the specified dtype (e.g. convert back to bool/int"
  },
  {
    "id" : "9d547824-d1fb-46a8-8e4b-edb8ce57681a",
    "prId" : 37648,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37648#pullrequestreview-579912002",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9809a095-3b04-4bb6-aaab-5aa8e38d16c4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some unit tests for this function",
        "createdAt" : "2021-01-05T02:21:15Z",
        "updatedAt" : "2021-02-18T03:29:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ca131319-b7d9-4da3-b99a-a121dcd12186",
        "parentId" : "9809a095-3b04-4bb6-aaab-5aa8e38d16c4",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "Done (in `pandas/tests/dtypes/cast/test_maybe_box_native.py`)",
        "createdAt" : "2021-01-31T16:39:48Z",
        "updatedAt" : "2021-02-18T03:29:48Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      }
    ],
    "commit" : "4650131926d06a47856cc73ab6c435c7ecc3a961",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +172,176 @@\n\ndef maybe_box_native(value: Scalar) -> Scalar:\n    \"\"\"\n    If passed a scalar cast the scalar to a python native type."
  },
  {
    "id" : "174301b9-18ac-41a8-a0d9-5d0585ce7d98",
    "prId" : 37648,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37648#pullrequestreview-590826526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9eef369f-3485-4d76-99ae-7d12bd204fab",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is it just np.datetime64/np.timedelta64 objects being caught here?",
        "createdAt" : "2021-02-15T23:00:49Z",
        "updatedAt" : "2021-02-18T03:29:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bb0cd88e-15e5-44ea-b057-992e8df35f62",
        "parentId" : "9eef369f-3485-4d76-99ae-7d12bd204fab",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "and also `datetime.datetime` (`datetime.timedelta`) get boxed to `pd.Timestamp` (`pd.Timedelta`)",
        "createdAt" : "2021-02-16T01:17:08Z",
        "updatedAt" : "2021-02-18T03:29:48Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      }
    ],
    "commit" : "4650131926d06a47856cc73ab6c435c7ecc3a961",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +184,188 @@    scalar or Series\n    \"\"\"\n    if is_datetime_or_timedelta_dtype(value):\n        value = maybe_box_datetimelike(value)\n    elif is_float(value):"
  },
  {
    "id" : "8b3e4e62-3a92-48e4-83fe-00d15183e072",
    "prId" : 38102,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38102#pullrequestreview-540720362",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e948d25-5f97-4b30-8dab-705f6b6a3e44",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does ```fill_value or np.nan``` work generally? (or missing an attribute on libmissing.NA?",
        "createdAt" : "2020-11-28T18:26:31Z",
        "updatedAt" : "2020-12-13T00:11:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3b80e9e4-07a9-444c-9387-f114794cb71c",
        "parentId" : "8e948d25-5f97-4b30-8dab-705f6b6a3e44",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "pretty sure that would raise when fill_value is pd.NA.\r\n",
        "createdAt" : "2020-11-28T18:47:03Z",
        "updatedAt" : "2020-12-13T00:11:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5d15c5d3-072b-4f07-b5d3-09fcddd6da19",
        "parentId" : "8e948d25-5f97-4b30-8dab-705f6b6a3e44",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if this is true then its a bug e.g.\r\n```\r\nIn [189]: 1 or np.nan                                                                                                                                                                     \r\nOut[189]: 1\r\n\r\nIn [190]: np.nan or 1                                                                                                                                                                     \r\nOut[190]: nan\r\n\r\n```\r\n\r\nas this should work with pd.NA in an or clause",
        "createdAt" : "2020-11-29T17:47:07Z",
        "updatedAt" : "2020-12-13T00:11:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9b942634-7f0d-4c33-9831-cae57d4df3c4",
        "parentId" : "8e948d25-5f97-4b30-8dab-705f6b6a3e44",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> if this is true then its a bug e.g.\r\n\r\nI don't know if its technically a bug bc `NA.__bool__` raises intentionally, but it _is_ a PITA that will continue biting us. \r\n\r\n```\r\n>>> pd.NA or 1\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"pandas/_libs/missing.pyx\", line 360, in pandas._libs.missing.NAType.__bool__\r\n    raise TypeError(\"boolean value of NA is ambiguous\")\r\nTypeError: boolean value of NA is ambiguous\r\n```",
        "createdAt" : "2020-11-29T17:58:22Z",
        "updatedAt" : "2020-12-13T00:11:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "24bd4bc2-8fb0-409c-85f6-aa58657fd166",
        "parentId" : "8e948d25-5f97-4b30-8dab-705f6b6a3e44",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok do we have an issue for this, I think we need to change this. (if not can you create).",
        "createdAt" : "2020-11-29T18:02:37Z",
        "updatedAt" : "2020-12-13T00:11:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8084d65f-2590-43c4-a568-be61f8d720ba",
        "parentId" : "8e948d25-5f97-4b30-8dab-705f6b6a3e44",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "cc @jorisvandenbossche @TomAugspurger ",
        "createdAt" : "2020-11-29T18:02:56Z",
        "updatedAt" : "2020-12-13T00:11:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d5514637-77ba-491e-bf72-15d0c76dc4e3",
        "parentId" : "8e948d25-5f97-4b30-8dab-705f6b6a3e44",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is done on purpose, yes",
        "createdAt" : "2020-11-29T19:36:32Z",
        "updatedAt" : "2020-12-13T00:11:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "8fabffca-66d1-4634-9e02-9959e2dbbe8a",
        "parentId" : "8e948d25-5f97-4b30-8dab-705f6b6a3e44",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "then we need to revert it. it doesn't make sense. what is rational here? this is *different* than np.nan and AFAICT doesn't offer any actual advanatages.",
        "createdAt" : "2020-11-29T19:53:23Z",
        "updatedAt" : "2020-12-13T00:11:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "82aa47bf-2d18-45eb-a5fa-bc9ea4bde163",
        "parentId" : "8e948d25-5f97-4b30-8dab-705f6b6a3e44",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "`bool(pd.NA)` raising is a pain, but there isn't a right answer that's consistent with the definition of `pd.NA`: we don't know if the actual value of the `pd.NA` is truthy or falsey, so raising is the least-worst option.",
        "createdAt" : "2020-11-29T20:42:20Z",
        "updatedAt" : "2020-12-13T00:11:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "77309a0b-5359-4d17-ab7c-787a297330fc",
        "parentId" : "8e948d25-5f97-4b30-8dab-705f6b6a3e44",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, what advantage does this convey? IOW where is this actually useful to do.",
        "createdAt" : "2020-11-29T20:48:50Z",
        "updatedAt" : "2020-12-13T00:11:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "263f7e37-2e3e-4711-8ca0-3951d6f30777",
        "parentId" : "8e948d25-5f97-4b30-8dab-705f6b6a3e44",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The `bool(pd.NA)` behaviour was certainly not the most discussed aspect in the original issues/PRs about introducing pd.NA, so it might be good to have a more detailed discussion about it. But we should then open a dedicated issue about it. \r\n\r\n(and as Tom notes, I don't think there is a clear \"best\" solution)",
        "createdAt" : "2020-11-30T09:17:27Z",
        "updatedAt" : "2020-12-13T00:11:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "97ada246e5dafc1c561895fa0e8621ae6849e627",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +658,662 @@        else:\n            dtype = np.dtype(np.object_)\n            if fill_value is not libmissing.NA:\n                fill_value = np.nan\n    else:"
  },
  {
    "id" : "75efc9a3-2c5d-4aeb-91ac-c5fb1cff5356",
    "prId" : 38102,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38102#pullrequestreview-540516717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4e22685-b511-4480-a242-9fd428a2e81b",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But pd.NA should not be an allowed fill_value for datetime dtypes?",
        "createdAt" : "2020-11-29T19:45:24Z",
        "updatedAt" : "2020-12-13T00:11:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b9697275-ee81-4d72-b482-a45ee47c447b",
        "parentId" : "a4e22685-b511-4480-a242-9fd428a2e81b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i thought (half of) the whole idea of pd.NA was that it would be a valid NA value for every dtype.\r\n\r\n(the other half being kleene logic)",
        "createdAt" : "2020-11-29T19:59:49Z",
        "updatedAt" : "2020-12-13T00:11:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f78a92b1-15c1-4be9-9d83-1682e612eef4",
        "parentId" : "a4e22685-b511-4480-a242-9fd428a2e81b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I *don't* think we support `pd.NA` atm in datetimelikes (agree eventually we should but we should do this deliberately). However doesn't `is_valid_nat_for_dtype` distinguish this explicitly?",
        "createdAt" : "2020-11-29T20:03:49Z",
        "updatedAt" : "2020-12-13T00:11:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "09f28f0f-9e31-4cb6-ba52-7b74c2a08965",
        "parentId" : "a4e22685-b511-4480-a242-9fd428a2e81b",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> i thought (half of) the whole idea of pd.NA was that it would be a valid NA value for every type.\r\n\r\nIn the future yes, for sure. But at the moment, we don't use pd.NA for datetimelikes, and also don't properly support it in operations with datetimelikes. \r\n\r\nSo therefore I am wondering if we should allow it here.\r\n\r\n(now, it seems that it already *does* work on master as well, though)",
        "createdAt" : "2020-11-29T20:08:40Z",
        "updatedAt" : "2020-12-13T00:11:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e98a0c87-2264-45db-9652-6f4ee27afc42",
        "parentId" : "a4e22685-b511-4480-a242-9fd428a2e81b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> However doesn't is_valid_nat_for_dtype distinguish this explicitly?\r\n\r\nis_valid_nat_for_dtype considers pd.NA valid for all dtypes, bc that was my understanding of the intent of pd.NA.",
        "createdAt" : "2020-11-29T21:07:20Z",
        "updatedAt" : "2020-12-13T00:11:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "97ada246e5dafc1c561895fa0e8621ae6849e627",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +558,562 @@        elif is_valid_nat_for_dtype(fill_value, dtype):\n            # e.g. pd.NA, which is not accepted by Timestamp constructor\n            fill_value = np.datetime64(\"NaT\", \"ns\")\n        else:\n            try:"
  },
  {
    "id" : "8b736731-2558-4947-9cdb-08fefba7e0c3",
    "prId" : 38117,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38117#pullrequestreview-540412961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be0b6e80-d54a-4218-a8d2-2b0921f15751",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "needs a version added, \r\nliking less and less the fact that we have many options here.\r\n\r\nwould change to an include=, exclude interface. (might involve deprecating the existing options). am -1 on doing this for 1.2 for this reason.",
        "createdAt" : "2020-11-28T17:17:58Z",
        "updatedAt" : "2020-11-29T17:32:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e8a652ff-0e9b-4d5d-af04-f38c5961305b",
        "parentId" : "be0b6e80-d54a-4218-a8d2-2b0921f15751",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> needs a version added,\r\n\r\nThis is the internal method, so doesn't need a versionadded. The public method already has a versionadded",
        "createdAt" : "2020-11-28T19:36:50Z",
        "updatedAt" : "2020-11-29T17:32:48Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "693a0a4c37be46dffdac95e6b0fa037e38ed870f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1274,1278 @@        Whether, if possible, conversion can be done to floating extension types.\n        If `convert_integer` is also True, preference will be give to integer\n        dtypes if the floats can be faithfully casted to integers.\n\n    Returns"
  },
  {
    "id" : "3e132a28-e997-4fea-9cbf-bdbf12bfffc0",
    "prId" : 38291,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38291#pullrequestreview-547018879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad3bb152-3449-4e33-84d3-58e964d43217",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i think the linter is going to complain about _IntegerDtype.   we can either find a non-private thing to import or add it to the whitelist in scripts._validate_unwanted_patterns",
        "createdAt" : "2020-12-05T20:48:42Z",
        "updatedAt" : "2020-12-08T02:57:36Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "63e8b53c-51d8-4d45-9dba-2e247575b679",
        "parentId" : "ad3bb152-3449-4e33-84d3-58e964d43217",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> i think the linter is going to complain about _IntegerDtype\r\n\r\nApparantly it's not complaining at the moment, but indeed something we can de-privatize internally",
        "createdAt" : "2020-12-08T10:15:54Z",
        "updatedAt" : "2020-12-08T10:15:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "2566ec4dc07050effe490765aff247e3d4c68216",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +359,363 @@    from pandas.core.arrays.boolean import BooleanDtype\n    from pandas.core.arrays.floating import Float64Dtype\n    from pandas.core.arrays.integer import Int64Dtype, _IntegerDtype\n\n    if how in [\"add\", \"cumsum\", \"sum\", \"prod\"]:"
  },
  {
    "id" : "153d5892-318e-4e2f-948a-559ab276cc88",
    "prId" : 38583,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38583#pullrequestreview-555950581",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "195056e5-f838-4238-ade7-92d4d917e52c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can u integrate with the 1d version and just require a ndim arg?",
        "createdAt" : "2020-12-19T15:53:27Z",
        "updatedAt" : "2020-12-19T15:53:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cacbd108-d0b4-42b0-9d71-5d8001fb3297",
        "parentId" : "195056e5-f838-4238-ade7-92d4d917e52c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "they're pretty different; we could wrap both in a caller that has a shape arg\r\n",
        "createdAt" : "2020-12-19T15:55:07Z",
        "updatedAt" : "2020-12-19T15:55:07Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c7bfecbc4b732af5fef0164020136ca0f14df2e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1525,1529 @@\ndef construct_2d_arraylike_from_scalar(\n    value: Scalar, length: int, width: int, dtype: np.dtype, copy: bool\n) -> np.ndarray:\n"
  },
  {
    "id" : "b9a0b770-322a-4908-8b56-36ba2f98b665",
    "prId" : 39478,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39478#pullrequestreview-579806438",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f12b58c7-4913-45ed-82ce-295779c933d3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "worth making these not compound? both L1913-1914 and L1907-1908 ?",
        "createdAt" : "2021-01-30T20:43:14Z",
        "updatedAt" : "2021-02-02T01:30:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f470a9f5-ce33-4968-8c7d-2bed4efb181b",
        "parentId" : "f12b58c7-4913-45ed-82ce-295779c933d3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i dont think so; i expect were going to have to flesh out the dtype.kind == \"b\" case for non-scalars before too long (hopefully can dedup with can_hold_element)",
        "createdAt" : "2021-01-30T20:45:59Z",
        "updatedAt" : "2021-02-02T01:30:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d6d93807c5015bb238be6f93c158a4bbce362bf",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1912,1916 @@            )\n    elif dtype.kind == \"b\":\n        if is_scalar(value) and not is_bool(value):\n            raise ValueError(f\"Cannot assign {type(value).__name__} to bool series\")\n"
  },
  {
    "id" : "41992e5d-43f8-4136-b715-604bebc01868",
    "prId" : 39692,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39692#pullrequestreview-604211226",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "876f1803-72f2-480f-89d2-91180bd7cf66",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is a bit unfortunate, but to ensure the warning is always shown, we can't use the cached version for datetime data.\r\n\r\nI check what would be the fastest option. The most specific check would be `if isinstance(fill_value, date) and not isinstance(fill_value, datetime)`, but `if dtype.kind == \"M\"` is a bit faster. \r\nSo the trade-off was between faster for all non-M8 dtypes vs faster for M8 (by being able to use the cached version in most cases) but a bit slower for all other dtypes. So I went with the first (fastest for numeric dtypes).",
        "createdAt" : "2021-03-04T08:15:33Z",
        "updatedAt" : "2021-03-04T15:33:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "17526127-a2bb-4f30-834b-624797ac2aed",
        "parentId" : "876f1803-72f2-480f-89d2-91180bd7cf66",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "how big the is the perf tradeoff?\r\n\r\nsince stacklevels are a constant hassle, one option would be to take the find_stacklevel function and change it so that instead of hard-coding \"astype\" it just looks for the first call that isn't from inside (non-test) pandas",
        "createdAt" : "2021-03-04T15:03:08Z",
        "updatedAt" : "2021-03-04T15:33:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a6bd6ff3-0f53-4dae-b397-22a013227466",
        "parentId" : "876f1803-72f2-480f-89d2-91180bd7cf66",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It's not the stacklevel as such, it's the warning itself. With caching, it occurs only once, while otherwise this warning is raised every time you use it. \r\n\r\nThe other option would be to check for this case / raise the warning a level higher up (so eg the line we are commenting up), so that other cases still use the cached version.",
        "createdAt" : "2021-03-04T15:14:03Z",
        "updatedAt" : "2021-03-04T15:33:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c197325d703c03420b12258c8c9e98648077af3",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +573,577 @@    # possibly raise a deprecation warning for datetime dtype\n    if dtype.kind == \"M\":\n        return _maybe_promote(dtype, fill_value)\n    # for performance, we are using a cached version of the actual implementation\n    # of the function in _maybe_promote. However, this doesn't always work (in case"
  },
  {
    "id" : "55332377-c6df-4cd4-860b-d4a98a193f8f",
    "prId" : 39959,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39959#pullrequestreview-595496632",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf990d35-7d67-42e2-af10-cdf9a9a57a26",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@simonjayhawkins im getting a bunch of mypy complaints locally that IIUC should be fixed by doing `value = cast(np.ndarray, value)` after L1556, but that isnt improving it.  neither is `assert isinstance(value, np.ndarray)`.  thoughts?",
        "createdAt" : "2021-02-22T03:51:58Z",
        "updatedAt" : "2021-02-22T15:52:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a3b28846-f871-4cb2-b089-44f307eeec21",
        "parentId" : "cf990d35-7d67-42e2-af10-cdf9a9a57a26",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "it's a typevar issue. the return type is not necessarily the same as value?\r\n\r\nchanging\r\n```diff\r\ndiff --git a/pandas/core/dtypes/cast.py b/pandas/core/dtypes/cast.py\r\nindex ab5cbdd823..6abbc67454 100644\r\n--- a/pandas/core/dtypes/cast.py\r\n+++ b/pandas/core/dtypes/cast.py\r\n@@ -1500,8 +1500,8 @@ def maybe_infer_to_datetimelike(\r\n\r\n\r\n def maybe_cast_to_datetime(\r\n-    value: Union[ArrayLike, list], dtype: Optional[DtypeObj]\r\n-) -> Union[ArrayLike, list]:\r\n+    value: Union[ExtensionArray, np.ndarray, list], dtype: Optional[DtypeObj]\r\n+) -> Union[ExtensionArray, np.ndarray, list]:\r\n     \"\"\"\r\n     try to cast the array/value to a datetimelike dtype, converting float\r\n     nan to iNaT\r\n```\r\n\r\njust leaves\r\n```\r\npandas\\core\\dtypes\\cast.py:1602: error: Item \"List[Any]\" of \"Union[ExtensionArray, Any, List[Any]]\" has no attribute \"dtype\" \r\n [union-attr]\r\npandas\\core\\dtypes\\cast.py:1603: error: Item \"List[Any]\" of \"Union[ExtensionArray, Any, List[Any]]\" has no attribute \"astype\"  [union-attr]\r\npandas\\core\\dtypes\\cast.py:1616: error: Item \"List[Any]\" of \"Union[ExtensionArray, Any, List[Any]]\" has no attribute \"dtype\" \r\n [union-attr]\r\npandas\\core\\dtypes\\cast.py:1622: error: Item \"List[Any]\" of \"Union[ExtensionArray, Any, List[Any]]\" has no attribute \"dtype\" \r\n [union-attr]\r\n```\r\n\r\nafter/if #36092 gets merged, the first thing will be to change the typevar to a union in pandas._typing to get rid of a couple hundred ignores. https://github.com/simonjayhawkins/pandas/compare/numpy-types...simonjayhawkins:numpy-fixes\r\n\r\nhttps://github.com/pandas-dev/pandas/pull/36092#issuecomment-724696623",
        "createdAt" : "2021-02-22T11:24:19Z",
        "updatedAt" : "2021-02-22T15:52:58Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "e7d40d30-7b61-4566-a458-f1d084b0a358",
        "parentId" : "cf990d35-7d67-42e2-af10-cdf9a9a57a26",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "that fixed it, thanks",
        "createdAt" : "2021-02-22T15:52:29Z",
        "updatedAt" : "2021-02-22T15:52:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ed2ac9adef1afa7a4deba97cf47281af4a27304",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1565,1569 @@\n                    try:\n                        if is_datetime64:\n                            dti = to_datetime(value, errors=\"raise\")\n                            # GH 25843: Remove tz information since the dtype"
  },
  {
    "id" : "bf314c96-3528-416d-b0c1-cfa4c8a22c0f",
    "prId" : 39959,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39959#pullrequestreview-595895654",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe3415d0-b216-4d62-b751-05fab29d90ba",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "test hits this? ",
        "createdAt" : "2021-02-22T23:57:40Z",
        "updatedAt" : "2021-02-22T23:58:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "27c704ab-4e61-4af3-8265-2c836199a691",
        "parentId" : "fe3415d0-b216-4d62-b751-05fab29d90ba",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yes",
        "createdAt" : "2021-02-23T00:04:30Z",
        "updatedAt" : "2021-02-23T00:04:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "872d11ae-59cb-46d2-9339-9bc76ca0a3c4",
        "parentId" : "fe3415d0-b216-4d62-b751-05fab29d90ba",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "ATM it raises TypeError which we catch and then handle later",
        "createdAt" : "2021-02-23T00:04:53Z",
        "updatedAt" : "2021-02-23T00:04:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ed2ac9adef1afa7a4deba97cf47281af4a27304",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +1580,1584 @@                            dta = to_datetime(value, errors=\"raise\").array\n                            if dta.tz is not None:\n                                value = dta.astype(dtype, copy=False)\n                            elif is_dt_string:\n                                # Strings here are naive, so directly localize"
  }
]