[
  {
    "id" : "9f34a204-be2a-4a38-877e-923d33811309",
    "prId" : 16821,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16821#pullrequestreview-50139783",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4282336-8bd3-445e-aaa0-d5f46475120b",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Repeated this sentance",
        "createdAt" : "2017-07-14T15:06:35Z",
        "updatedAt" : "2017-07-20T10:30:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f361e6db-51dd-4a99-8bb9-df6cced75fc4",
        "parentId" : "d4282336-8bd3-445e-aaa0-d5f46475120b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what do you mean?",
        "createdAt" : "2017-07-14T20:04:50Z",
        "updatedAt" : "2017-07-20T10:30:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "676b77380c6704a183a27bd7154795ef8188e39b",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +337,341 @@def infer_dtype_from(val, pandas_dtype=False):\n    \"\"\"\n    interpret the dtype from a scalar or array. This is a convenience\n    routines to infer dtype from a scalar or an array\n"
  },
  {
    "id" : "c77c5649-e90e-478b-93fd-da84c96ebe5c",
    "prId" : 16821,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16821#pullrequestreview-50140168",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8c985f7-1bf3-49b7-843a-2bad42379a8a",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Seems to be untested, according to code-cov.",
        "createdAt" : "2017-07-14T15:07:03Z",
        "updatedAt" : "2017-07-20T10:30:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b9c3af08-f43a-4ce5-b63c-ac02f9968509",
        "parentId" : "b8c985f7-1bf3-49b7-843a-2bad42379a8a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "done",
        "createdAt" : "2017-07-14T20:07:01Z",
        "updatedAt" : "2017-07-20T10:30:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "676b77380c6704a183a27bd7154795ef8188e39b",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +370,374 @@        msg = \"invalid ndarray passed to _infer_dtype_from_scalar\"\n        if val.ndim != 0:\n            raise ValueError(msg)\n\n        dtype = val.dtype"
  },
  {
    "id" : "04189318-ea4a-4524-b6a2-85740c31ed93",
    "prId" : 18769,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18769#pullrequestreview-84425687",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15de9f70-7a81-45a2-af4c-d88757b45f31",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "would not object to an\r\n``assert is_iterable(values)`` with a nice error message",
        "createdAt" : "2017-12-18T14:06:57Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "abfad408-eb11-411e-b912-6855ec967666",
        "parentId" : "15de9f70-7a81-45a2-af4c-d88757b45f31",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "The thing is: I can't think of any code path which could be hitting it. Scalar input to a ``Series()`` is (considered valid and) recasted to a 1-d before calling this. Similarly, an operation such as ``Series([1,2]) + 3`` transforms 3 before hitting this. So I don't know what the error message could actually say.",
        "createdAt" : "2017-12-18T14:43:28Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "333f75c5-7799-4162-af99-dbf985ecc214",
        "parentId" : "15de9f70-7a81-45a2-af4c-d88757b45f31",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not what i am asking\r\n\r\nthis is a completely internal\r\nroutine\r\nit should fail with invalid input ",
        "createdAt" : "2017-12-18T14:46:56Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "932574fb-12c5-4e9d-ac44-73d2b25dd6d1",
        "parentId" : "15de9f70-7a81-45a2-af4c-d88757b45f31",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "> it should fail with invalid input\r\n\r\nSure it does, ``TypeError: object of type 'int' has no len()``. Which is pretty clear, considering the docstring, and precisely in light of the fact that this is an internal routine. That said, feel free to suggest an error message which is worth the cost of the additional ``assert``.",
        "createdAt" : "2017-12-18T15:11:14Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "6f9c7414-376b-42a2-bd57-449a6444748b",
        "parentId" : "15de9f70-7a81-45a2-af4c-d88757b45f31",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a raises section to the doc-string",
        "createdAt" : "2017-12-19T12:02:13Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a6e48a703db106e7ca7caf5620390debff3080",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +1182,1186 @@    -------\n    1-dimensional numpy array of dtype object\n    \"\"\"\n    # numpy will try to interpret nested lists as further dimensions, hence\n    # making a 1D array that contains list-likes is a bit tricky:"
  },
  {
    "id" : "a6659f72-439b-4442-8fcc-4f6e61245742",
    "prId" : 21185,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21185#pullrequestreview-123197187",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f42840c9-c461-4a17-96f2-6751d6bc70c7",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "should there be any validation about `arr` ? Eg that it is 1D?",
        "createdAt" : "2018-05-24T16:28:32Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e4e50cab-c575-4cad-b316-bd7037e82023",
        "parentId" : "f42840c9-c461-4a17-96f2-6751d6bc70c7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this validation is a contract of the Array itself",
        "createdAt" : "2018-05-24T22:41:36Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2c91d706510b16a8a9f82dbeafa7d35396697d1",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +652,656 @@    # dispatch on extension dtype if needed\n    if is_extension_array_dtype(dtype):\n        return dtype.array_type._from_sequence(arr, copy=copy)\n\n    if not isinstance(dtype, np.dtype):"
  },
  {
    "id" : "912ff9ab-1935-4ac5-aa1c-f86a166b0aa2",
    "prId" : 21456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21456#pullrequestreview-128251843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51369a51-12d5-4a20-aaf0-37ecb6456c26",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "![numpy-self-warning](https://user-images.githubusercontent.com/9273653/41335857-21c371de-6e9f-11e8-9f4d-3e816a37a3cf.PNG)\r\n\r\nSince this is in part due to `numpy`'s self-conflict regarding element-wise comparisons, should we care about this showing up (perhaps we swallow the warning)?",
        "createdAt" : "2018-06-13T07:18:12Z",
        "updatedAt" : "2018-06-19T17:01:00Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "27caec97a7367fde1a2b4f8a9d441b9f86ab86ab",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +1325,1329 @@                            \"casted to the dtype {dtype}\".format(dtype=dtype))\n\n    if np.array_equal(arr, casted):\n        return casted\n"
  },
  {
    "id" : "0e4e4bc8-4083-498b-804b-de60afeb5efa",
    "prId" : 21456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21456#pullrequestreview-128568083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "801f89bf-0d8c-4c99-b481-33beea9d82ea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this duplicates maybe_downcast_to_dtype which is used internally, rather have the doc-string of that updated / examples (and can add the copy=)",
        "createdAt" : "2018-06-13T10:28:10Z",
        "updatedAt" : "2018-06-19T17:01:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6418cff6-1d8d-4e8a-b71b-6f0eca7c112d",
        "parentId" : "801f89bf-0d8c-4c99-b481-33beea9d82ea",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Not quite.  We're not always down-casting e.g.\r\n\r\n~~~python\r\nSeries(np.array([1, 2], dtype=\"int32\"), dtype=\"int64\")\r\n~~~\r\n\r\nSilly?  Yes, but it should work.",
        "createdAt" : "2018-06-13T21:16:38Z",
        "updatedAt" : "2018-06-19T17:01:00Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "27caec97a7367fde1a2b4f8a9d441b9f86ab86ab",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1279,1283 @@\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------"
  },
  {
    "id" : "5593ce49-4103-48eb-95bb-f2012db1f5e8",
    "prId" : 21456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21456#pullrequestreview-129783622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85115f9e-dcc2-45db-94a7-4acaca9d664a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why do you need this? at this point its either an ndarray, Series, Index, which is all ok here",
        "createdAt" : "2018-06-19T00:20:42Z",
        "updatedAt" : "2018-06-19T17:01:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e7545f45-124e-4c4a-9c61-8ef4c7756a2b",
        "parentId" : "85115f9e-dcc2-45db-94a7-4acaca9d664a",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Not quite.  `list` can also propagate here.  This was prompted by #21432, which introduced an annoying but necessary corner case with `uint64`.",
        "createdAt" : "2018-06-19T00:27:38Z",
        "updatedAt" : "2018-06-19T17:01:00Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "27caec97a7367fde1a2b4f8a9d441b9f86ab86ab",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +1333,1337 @@    # We didn't do this earlier because NumPy\n    # doesn't handle `uint64` correctly.\n    arr = np.asarray(arr)\n\n    if is_unsigned_integer_dtype(dtype) and (arr < 0).any():"
  },
  {
    "id" : "90e8943c-d58a-4634-8361-8ef19fc1e04c",
    "prId" : 21456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21456#pullrequestreview-556037014",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0b60f6e-a443-46a2-8fff-85dd018a09c2",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@gfyoung should maybe_cast_to_integer_array also check for overflows like\r\n\r\n```\r\narr = np.array([1, 200, 923442])\r\ndtype = np.dtype(np.int8)\r\n```\r\n\r\n?",
        "createdAt" : "2020-12-20T17:34:51Z",
        "updatedAt" : "2020-12-20T17:34:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "27caec97a7367fde1a2b4f8a9d441b9f86ab86ab",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +1337,1341 @@    if is_unsigned_integer_dtype(dtype) and (arr < 0).any():\n        raise OverflowError(\"Trying to coerce negative values \"\n                            \"to unsigned integers\")\n\n    if is_integer_dtype(dtype) and (is_float_dtype(arr) or"
  }
]