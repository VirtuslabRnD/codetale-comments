[
  {
    "id" : "8c1d237c-6427-4d68-b5bd-9b7434910700",
    "prId" : 16015,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16015#pullrequestreview-61666993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e155a21-f8bf-4386-a00a-c0341741ef8c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "neat trick",
        "createdAt" : "2017-09-09T17:31:01Z",
        "updatedAt" : "2017-09-23T16:33:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "43f90cc13786b57b89709cdb7dd8d2c023adaee6",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +194,198 @@        if self.categories is None:\n            if self.ordered:\n                return -1\n            else:\n                return -2"
  },
  {
    "id" : "488bb34b-03ec-4dd7-a0b5-78c53e33d511",
    "prId" : 16015,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16015#pullrequestreview-64724571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afe6daa6-ba67-44f8-8b97-6bbfaed1805a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we should actually move this to hash_array I think (could be pre-cursor PR)",
        "createdAt" : "2017-09-09T17:34:52Z",
        "updatedAt" : "2017-09-23T16:33:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "52165ec6-8b71-424e-ab4a-d852487bdaf6",
        "parentId" : "afe6daa6-ba67-44f8-8b97-6bbfaed1805a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "?",
        "createdAt" : "2017-09-17T14:39:38Z",
        "updatedAt" : "2017-09-23T16:33:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "eb01dd6d-519d-40bb-a819-961227bfc9b5",
        "parentId" : "afe6daa6-ba67-44f8-8b97-6bbfaed1805a",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Looking into this now.\r\n\r\nAny thoughts on what this does to the probability of hash collisions? If we use two distinct hashing algorithms, I'd expect probability of a collision is higher (though presumably still negligible?),",
        "createdAt" : "2017-09-19T21:24:19Z",
        "updatedAt" : "2017-09-23T16:33:32Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "3f846296-0263-4555-9f87-3ab4dd371cd1",
        "parentId" : "afe6daa6-ba67-44f8-8b97-6bbfaed1805a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "neh hash collisions basically don't happen in the space of things we are doing (normally). however you can collide by construction, e.g. code doing something wrong..\r\n\r\nIn any event we should move this code (can be a followup, maybe make an issue for things to do)",
        "createdAt" : "2017-09-23T00:22:18Z",
        "updatedAt" : "2017-09-23T16:33:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "43f90cc13786b57b89709cdb7dd8d2c023adaee6",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +242,246 @@            cat_array = hash_tuples(categories)\n        else:\n            if categories.dtype == 'O':\n                types = [type(x) for x in categories]\n                if not len(set(types)) == 1:"
  },
  {
    "id" : "7aea282b-b107-419e-bd9e-86f0b67e69df",
    "prId" : 16015,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16015#pullrequestreview-61666993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcd2de53-3bfc-4895-97f8-c845d4fa0e98",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would move this last piece of logic to a private function in hashing as well.",
        "createdAt" : "2017-09-09T17:35:39Z",
        "updatedAt" : "2017-09-23T16:33:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "43f90cc13786b57b89709cdb7dd8d2c023adaee6",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +259,263 @@        else:\n            cat_array = [cat_array]\n        hashed = _combine_hash_arrays(iter(cat_array),\n                                      num_items=len(cat_array))\n        if len(hashed) == 0:"
  },
  {
    "id" : "d84591d6-673d-4ecf-87f3-72fe41a97f7c",
    "prId" : 16015,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16015#pullrequestreview-64724571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7058534a-04a4-43b2-b9da-0b1a3b819f4e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we have this hacky thing in Categorical to repr only 10 categories. CategoricalIndex actually correctly uses the option ``max_categories``, so should do that here (again can do as a followup)",
        "createdAt" : "2017-09-23T00:24:51Z",
        "updatedAt" : "2017-09-23T16:33:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "43f90cc13786b57b89709cdb7dd8d2c023adaee6",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +222,226 @@\n    def __unicode__(self):\n        tpl = u'CategoricalDtype(categories={}ordered={})'\n        if self.categories is None:\n            data = u\"None, \""
  },
  {
    "id" : "7a8a64b4-4ac1-4d29-b20c-ae400576e9e1",
    "prId" : 17888,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17888#pullrequestreview-70057760",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c0df4ac-4324-49f2-b571-329ef5566c50",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "here you an also accept ABCCategorical ",
        "createdAt" : "2017-10-17T22:47:32Z",
        "updatedAt" : "2017-10-17T22:47:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ef4a4614-cecb-4fd0-adc2-9322f6e93224",
        "parentId" : "5c0df4ac-4324-49f2-b571-329ef5566c50",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "a Categorical has already been converted to CategoricalIndex",
        "createdAt" : "2017-10-17T22:48:37Z",
        "updatedAt" : "2017-10-17T22:48:37Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4242eee3-aa89-4ec2-aea6-b8637dd1b189",
        "parentId" : "5c0df4ac-4324-49f2-b571-329ef5566c50",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ahh ok",
        "createdAt" : "2017-10-17T23:05:46Z",
        "updatedAt" : "2017-10-17T23:05:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c56abeb8866698c0961f21ce13be180b191131d",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +327,331 @@                raise ValueError('Categorical categories must be unique')\n\n        if isinstance(categories, ABCCategoricalIndex):\n            categories = categories.categories\n"
  },
  {
    "id" : "f743262b-aaab-4b9c-bbfd-b317d5c3a98b",
    "prId" : 18202,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18202#pullrequestreview-76435158",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33e2bf43-629d-4567-bec4-adb37ec15114",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is the problem that if you don't include this 'None', that it then automatically generated the 'Methods' section and thus included too much? ",
        "createdAt" : "2017-11-14T10:10:41Z",
        "updatedAt" : "2017-11-15T15:22:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "450970a7-5cd7-497b-adce-f773a1b2d3d7",
        "parentId" : "33e2bf43-629d-4567-bec4-adb37ec15114",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yes, I'm not sure how best to avoid that. This is where class-level `numpydoc_show_class_members` flag would be nice. Having `None` there isn't great since it shows up in the output.",
        "createdAt" : "2017-11-14T13:15:18Z",
        "updatedAt" : "2017-11-15T15:22:18Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "34834fae25bd7ea1eb6a364c9d2c841e0837eb38",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +128,132 @@    Methods\n    -------\n    None\n\n    Notes"
  },
  {
    "id" : "a3f681d4-bb90-42fc-88f1-db612435ad92",
    "prId" : 18889,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18889#pullrequestreview-94568766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "129dfb5f-12e3-401e-97d0-8b1c5036d825",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "separate, I don't think we need to have private methods on CDT. e.g. ``validate_ordered`` and ``update_dtype`` (maybe more). As this is *used* in other contexts. so a de-privatize PR should be great.",
        "createdAt" : "2017-12-21T13:59:02Z",
        "updatedAt" : "2018-02-10T02:18:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ea3f94e7-c43e-47f3-a72b-62cac21ed21d",
        "parentId" : "129dfb5f-12e3-401e-97d0-8b1c5036d825",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually can you change this?",
        "createdAt" : "2018-01-02T11:27:23Z",
        "updatedAt" : "2018-02-10T02:18:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5910d46b-8fb2-4042-96ca-782af4cb14c4",
        "parentId" : "129dfb5f-12e3-401e-97d0-8b1c5036d825",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "done for `_update_dtype`, `_validate_ordered`, and `_validate_categories`",
        "createdAt" : "2018-02-07T01:42:39Z",
        "updatedAt" : "2018-02-10T02:18:58Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "007340de7cd013f1eaa89e8cb87241b71f0f4272",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +374,378 @@                   'got {dtype!r}').format(dtype=dtype)\n            raise ValueError(msg)\n\n        # dtype is CDT: keep current categories/ordered if None\n        new_categories = dtype.categories"
  },
  {
    "id" : "f37322f8-9929-43dc-9a46-99e1030d6efe",
    "prId" : 18889,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18889#pullrequestreview-94569688",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90c0227d-2915-432c-b8df-94d7823895b0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can ordered be None here?",
        "createdAt" : "2018-01-02T11:27:05Z",
        "updatedAt" : "2018-02-10T02:18:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "896aeded-3509-47a9-bbdb-b25282c6ba1e",
        "parentId" : "90c0227d-2915-432c-b8df-94d7823895b0",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "yes, e.g. `CDT(list('abcd'), None) == CDT(list('dcba'), None)`, but `None` is fine here since it is Falsey, and this is just meant to catch cases where at least one is `True`",
        "createdAt" : "2018-02-07T01:48:04Z",
        "updatedAt" : "2018-02-10T02:18:58Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "007340de7cd013f1eaa89e8cb87241b71f0f4272",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +230,234 @@            # CDT(., .) = CDT(None, True).\n            return True\n        elif self.ordered or other.ordered:\n            # At least one has ordered=True; equal if both have ordered=True\n            # and the same values for categories in the same order."
  },
  {
    "id" : "c4b43df7-56b9-4eaa-8630-1e4a106c71c3",
    "prId" : 19231,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19231#pullrequestreview-88668126",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd4dec1c-dc29-4031-b52a-5c36fa96a9c9",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "This change was necessary since some subtypes don't nicely compare:\r\n```python\r\nIn [2]: dtype1 = IntervalDtype('float64')\r\n\r\nIn [3]: dtype2 = IntervalDtype('datetime64[ns, US/Eastern]')\r\n\r\nIn [4]: dtype1 == dtype2\r\n---------------------------------------------------------------------------\r\nTypeError: data type not understood\r\n```\r\nThough interestingly enough the reverse comparison was fine:\r\n```python\r\nIn [5]: dtype2 == dtype1\r\nOut[5]: False\r\n```",
        "createdAt" : "2018-01-13T21:48:41Z",
        "updatedAt" : "2018-01-13T21:48:41Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "570f4874-1377-423b-bb27-cd86019ff4f8",
        "parentId" : "dd4dec1c-dc29-4031-b52a-5c36fa96a9c9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes this is because numpy types don't handle comparisons vs pandas dtypes.",
        "createdAt" : "2018-01-13T21:49:52Z",
        "updatedAt" : "2018-01-13T21:54:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8caf9f2e1e87327941920c1d676e3ef3fe3c31f9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +712,716 @@        else:\n            from pandas.core.dtypes.common import is_dtype_equal\n            return is_dtype_equal(self.subtype, other.subtype)\n\n    @classmethod"
  },
  {
    "id" : "1a53a3c6-1c24-4b42-87d6-4586a729e5bd",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-90081765",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b3bff3b-cfe4-4928-8b55-67c373cbb9f6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why would this not be just ExtensionDtype",
        "createdAt" : "2018-01-18T23:32:06Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a07348ba-4b38-48f5-86e3-7dd79d165b3b",
        "parentId" : "6b3bff3b-cfe4-4928-8b55-67c373cbb9f6",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We define methods like `__repr__`, caching, etc. that are not part of the interface.",
        "createdAt" : "2018-01-19T02:51:19Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "5c378743-c664-4f67-b11b-ec086f78f9f6",
        "parentId" : "6b3bff3b-cfe4-4928-8b55-67c373cbb9f6",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "__repr__ is reasonable to be part of the interface, caching I suppose is ok here",
        "createdAt" : "2018-01-19T11:23:07Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +9,13 @@\n\nclass PandasExtensionDtype(ExtensionDtype):\n    \"\"\"\n    A np.dtype duck-typed class, suitable for holding a custom dtype."
  },
  {
    "id" : "62560e48-7998-4e82-954e-598e71043d73",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-109767466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3008cd2f-0890-4497-8605-146a9c90d9e1",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is the correct scalar type for IntervalArray",
        "createdAt" : "2018-04-04T16:52:00Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "4d06e3ae-6039-4341-acc4-4635bd40f4a6",
        "parentId" : "3008cd2f-0890-4497-8605-146a9c90d9e1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add doc-string",
        "createdAt" : "2018-04-05T15:47:42Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +777,781 @@\n    @property\n    def type(self):\n        from pandas import Interval\n        return Interval"
  },
  {
    "id" : "9fcda203-70cd-43c2-a613-d3005c6e3966",
    "prId" : 21185,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21185#pullrequestreview-125568875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f7833f8-0fd4-489c-93ce-b9d36ff5b5f1",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Without looking at the uses yet, could we simplify this a by just allowing string lookup? Ideally, `registry` would be a simple class holding a dict mapping `dtype.name -> ExtensionDtype`.",
        "createdAt" : "2018-06-04T13:02:29Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "ad0d4f39-b0dd-4f40-9eb2-1ffe3f13a15b",
        "parentId" : "0f7833f8-0fd4-489c-93ce-b9d36ff5b5f1",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think the current code also supports finding the dtype for eg `'interval[int64]'` and not just `interval` (so parametrized versions of the strings)",
        "createdAt" : "2018-06-04T13:14:36Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ab7450ee-924b-4792-96d0-293d34aad847",
        "parentId" : "0f7833f8-0fd4-489c-93ce-b9d36ff5b5f1",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Oh, and I suppose we want that to support `.astype('interval[int64]')`. That's fair...",
        "createdAt" : "2018-06-04T13:20:20Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2c91d706510b16a8a9f82dbeafa7d35396697d1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +9,13 @@\n\nclass Registry(object):\n    \"\"\"\n    Registry for dtype inference"
  },
  {
    "id" : "ab63aa04-92e7-49be-9e0e-278a3041f828",
    "prId" : 22901,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22901#pullrequestreview-161155681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c8004ff-0930-4e09-a3f6-dac0c438a234",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think this *may* have been it. For whatever reason, we're here with\r\n\r\n```\r\nipdb> pp string\r\n   A  A\r\n0  0  2\r\n1  2  4\r\n2  0  4\r\n```\r\n\r\nWe do\r\n\r\n```\r\nipdb> string == 'category'\r\n*** FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\r\n```\r\n\r\nThat FutureWarning is elevated to an error. I didn't realize this, but you can catch warnings, so the very simple fix is to also catch `FutureWarning` here, but that feels fragile. I'll investigate a better fix...",
        "createdAt" : "2018-10-03T13:14:53Z",
        "updatedAt" : "2018-10-03T13:14:53Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae3d430e521dd81c3e66fee18c21a05a7bf2310c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +359,363 @@            if string == 'category':\n                return cls()\n            else:\n                raise TypeError(\"cannot construct a CategoricalDtype\")\n        except AttributeError:"
  },
  {
    "id" : "823054e7-8f18-49b3-956e-eff94c175a33",
    "prId" : 23990,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23990#pullrequestreview-180002550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdfade3d-9acd-46d3-ab38-f8b4887f0491",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this can be an int?",
        "createdAt" : "2018-11-29T20:23:08Z",
        "updatedAt" : "2018-12-03T22:25:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1d42f885-5609-47cc-ac60-4e7ab3423869",
        "parentId" : "cdfade3d-9acd-46d3-ab38-f8b4887f0491",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Surprisingly, yes\r\n\r\n```python\r\nIn [2]: pd.DatetimeIndex(['2000'], tz=100)\r\nOut[2]: DatetimeIndex(['2000-01-01 00:00:00+00:01:40'], dtype='datetime64[ns, pytz.FixedOffset(1)]', freq=None)\r\n```",
        "createdAt" : "2018-11-29T20:37:44Z",
        "updatedAt" : "2018-12-03T22:25:06Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cde369f6e87c093a592766226f3a3db4c7cd846",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +502,506 @@            The precision of the datetime data. Currently limited\n            to ``\"ns\"``.\n        tz : str, int, or datetime.tzinfo\n            The timezone.\n"
  },
  {
    "id" : "7302f36f-442f-4797-95b6-3ec4f61f3ceb",
    "prId" : 24419,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24419#pullrequestreview-187846223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c6a8936-f73a-4aa5-b602-0e7b2fdc93f7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are you adding tests specifically for this case?",
        "createdAt" : "2018-12-25T17:25:49Z",
        "updatedAt" : "2019-01-03T22:12:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e47ba15b-a7ea-4745-a336-93eb4790baac",
        "parentId" : "4c6a8936-f73a-4aa5-b602-0e7b2fdc93f7",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "The changes in test_dtypes.py are done because of this (unchanged error type, changed error message).",
        "createdAt" : "2018-12-26T07:47:42Z",
        "updatedAt" : "2019-01-03T22:12:38Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "346510e5973e30bac2412f05eb9d0d3987d78dfa",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +496,500 @@        if not fastpath and not is_list_like(categories):\n            msg = \"Parameter 'categories' must be list-like, was {!r}\"\n            raise TypeError(msg.format(categories))\n        elif not isinstance(categories, ABCIndexClass):\n            categories = Index(categories, tupleize_cols=False)"
  },
  {
    "id" : "7f2228b4-7a4f-430f-924e-ebdd335041bf",
    "prId" : 24419,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24419#pullrequestreview-188545228",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82aeea45-10a0-4f32-8a7c-ac4cbef19af4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "values is not None and is_categorical(values)",
        "createdAt" : "2019-01-01T00:18:03Z",
        "updatedAt" : "2019-01-03T22:12:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "25ac09b4-d865-4821-b8eb-913e4d03a369",
        "parentId" : "82aeea45-10a0-4f32-8a7c-ac4cbef19af4",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "is_categorical(None) returns False and timeit shows it's fast (547 ns).\r\n\r\nso this guard is not needed.",
        "createdAt" : "2019-01-01T01:34:53Z",
        "updatedAt" : "2019-01-03T22:12:38Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "346510e5973e30bac2412f05eb9d0d3987d78dfa",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +313,317 @@                raise ValueError(\"Cannot specify `categories` or `ordered` \"\n                                 \"together with `dtype`.\")\n        elif is_categorical(values):\n            # If no \"dtype\" was passed, use the one from \"values\", but honor\n            # the \"ordered\" and \"categories\" arguments"
  },
  {
    "id" : "95b36a16-3ec1-446f-b59e-83921e4cdd71",
    "prId" : 24596,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24596#pullrequestreview-189419970",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64a8dee9-a9bd-4a70-9589-d0319589d044",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "these can be imported at the top (the hashing ones are not for other reasons)",
        "createdAt" : "2019-01-04T15:40:36Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2104778f-0043-498e-be7e-5f899ca1bf63",
        "parentId" : "64a8dee9-a9bd-4a70-9589-d0319589d044",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "That causes a circular import. dtypes.common imports from dtypes.dtypes.",
        "createdAt" : "2019-01-04T15:53:42Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f4fbde4472700525959dbb7255185e36155f21",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +404,408 @@            hash_array, _combine_hash_arrays, hash_tuples\n        )\n        from pandas.core.dtypes.common import is_datetime64tz_dtype, _NS_DTYPE\n\n        if len(categories) and isinstance(categories[0], tuple):"
  },
  {
    "id" : "5c53f432-b829-4b19-a557-a675643c641a",
    "prId" : 24596,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24596#pullrequestreview-189598020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13074cba-e2f8-444f-928b-8b89054e7321",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you ``categories.to_numpy()`` always?",
        "createdAt" : "2019-01-04T15:41:41Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dd537c15-bd39-4e61-8826-056052c863ad",
        "parentId" : "13074cba-e2f8-444f-928b-8b89054e7321",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Hmm, possibly. We'll still need the special case for datetime64tz_dtype to pass `dtype=_NS_DTYPE`, since `Index[datetime64[ns, tz]].to_numpy()` returns an ndarray of Timestamp objects.",
        "createdAt" : "2019-01-04T15:55:00Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b425e89d-ba39-4efd-8c05-e942e321cd37",
        "parentId" : "13074cba-e2f8-444f-928b-8b89054e7321",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe add a TODO here, this is kind of special casing",
        "createdAt" : "2019-01-05T14:15:46Z",
        "updatedAt" : "2019-01-05T14:16:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f4fbde4472700525959dbb7255185e36155f21",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +423,427 @@                    return hashed\n\n            if is_datetime64tz_dtype(categories.dtype):\n                # Avoid future warning.\n                categories = categories.astype(_NS_DTYPE)"
  },
  {
    "id" : "4df37a20-c3ec-4020-9a4e-d1bd59f4ec6f",
    "prId" : 26029,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26029#pullrequestreview-224425151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df3cdf91-d2ab-4bd1-acd3-7414eefef1b5",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What error was this throwing before? I think inference should be able to detect this",
        "createdAt" : "2019-04-09T00:26:15Z",
        "updatedAt" : "2019-04-10T23:26:27Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "09426cee-4d95-4de2-bde5-83219e21bce5",
        "parentId" : "df3cdf91-d2ab-4bd1-acd3-7414eefef1b5",
        "authorId" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "body" : "This is an example of what I was talking about in the OP. Given the way mypy interacts with multiple inheritance/@properties and the solution I chose to address the incompatible base class errors, `type` and `kind` within the subclasses are essentially expecting `Any`.\r\n\r\nFor example, if you remove `# type: Type[Timestamp]` in this commit's code and replace `Timestamp` in `type = Timestamp` with a string, an integer, or None, mypy will not complain. This is not behavior we want. I added explicit typing in the subclasses to address that problem.\r\n\r\ntl;dr: Once the incompatible base class errors are resolved as in this commit, these assignments don't throw any errors, but they are also typed `Any`.",
        "createdAt" : "2019-04-09T13:59:25Z",
        "updatedAt" : "2019-04-10T23:26:27Z",
        "lastEditedBy" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "tags" : [
        ]
      },
      {
        "id" : "a2373a03-60bb-4af6-a9d6-31ae2e0d5e77",
        "parentId" : "df3cdf91-d2ab-4bd1-acd3-7414eefef1b5",
        "authorId" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "body" : "Just for reference: pandas.core.dtypes.base defines ExtensionDtype, which includes properties for kind and type.  pandas.core.dtypes.PandasExtensionDtype defines kind and type variables. pandas.core.dtypes.DatetimeTZDtype inherits from both ExtensionDtype classes above and also declares its own kind and type variables. The multiple declarations of kind and type and their redefinition makes type checking with mypy less than straightforward.",
        "createdAt" : "2019-04-09T14:03:42Z",
        "updatedAt" : "2019-04-10T23:26:27Z",
        "lastEditedBy" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "tags" : [
        ]
      }
    ],
    "commit" : "85ef4b44e18395ecf55d155ae600b49213eef9ab",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +592,596 @@    np.datetime64[ns]\n    \"\"\"\n    type = Timestamp  # type: Type[Timestamp]\n    kind = 'M'  # type: str_type\n    str = '|M8[ns]'"
  },
  {
    "id" : "dfa60d5c-6413-4f63-8d75-483ef616cae7",
    "prId" : 26029,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26029#pullrequestreview-225006737",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca74557b-282f-4e36-b022-d00942997094",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, you can't do ``Optional[Dtype]``?",
        "createdAt" : "2019-04-09T14:39:09Z",
        "updatedAt" : "2019-04-10T23:26:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7d58b990-e952-489d-9ce8-67822f92e0c5",
        "parentId" : "ca74557b-282f-4e36-b022-d00942997094",
        "authorId" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "body" : "We don't have pandas._typing yet, but even substituting in `Union[str, np.dtype, ExtensionDtype]` in the place of `Any` causes the same `pandas/core/dtypes/dtypes.py:183: error: Definition of \"type\" in base class \"PandasExtensionDtype\" is incompatible with definition in base class \"ExtensionDtype\"` sorts of errors with the subclasses.",
        "createdAt" : "2019-04-09T15:17:53Z",
        "updatedAt" : "2019-04-10T23:26:27Z",
        "lastEditedBy" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "tags" : [
        ]
      },
      {
        "id" : "1fbdba14-4374-4ce9-8f6a-7664d699064c",
        "parentId" : "ca74557b-282f-4e36-b022-d00942997094",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "merge master, pandas._typing exists now",
        "createdAt" : "2019-04-09T15:31:39Z",
        "updatedAt" : "2019-04-10T23:26:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f49dad60-dbe8-4c4e-8f08-ca14c2eb68a7",
        "parentId" : "ca74557b-282f-4e36-b022-d00942997094",
        "authorId" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "body" : "Sorry, I mistyped. We have _typing but not `Dtype` in _typing until #25942 is figured out and merged.",
        "createdAt" : "2019-04-09T15:51:58Z",
        "updatedAt" : "2019-04-10T23:26:27Z",
        "lastEditedBy" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "tags" : [
        ]
      },
      {
        "id" : "34f9d67f-9e05-4647-802d-f91dc2731dd2",
        "parentId" : "ca74557b-282f-4e36-b022-d00942997094",
        "authorId" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "body" : "In any case, `Dtype` is going to cause the same mypy error.",
        "createdAt" : "2019-04-09T15:52:42Z",
        "updatedAt" : "2019-04-10T23:26:27Z",
        "lastEditedBy" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "tags" : [
        ]
      },
      {
        "id" : "148b50dc-d2e2-4d95-abe0-a45e31f56931",
        "parentId" : "ca74557b-282f-4e36-b022-d00942997094",
        "authorId" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "body" : "I merged master with the new pandas._typing.py and confirmed that using `Dtype` causes the same  incompatibility errors.",
        "createdAt" : "2019-04-10T14:26:16Z",
        "updatedAt" : "2019-04-10T23:26:27Z",
        "lastEditedBy" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "tags" : [
        ]
      }
    ],
    "commit" : "85ef4b44e18395ecf55d155ae600b49213eef9ab",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +108,112 @@    THIS IS NOT A REAL NUMPY DTYPE\n    \"\"\"\n    type = None  # type: Any\n    kind = None  # type: Any\n    # The Any type annotations above are here only because mypy seems to have a"
  },
  {
    "id" : "6e3761b7-f8d7-43f4-bdb7-5e90f7efd619",
    "prId" : 26067,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26067#pullrequestreview-226626042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f36f4c1-9721-4753-90f7-1cdedb6ec480",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you changed this mainly to have a proper doc-string?",
        "createdAt" : "2019-04-15T12:37:05Z",
        "updatedAt" : "2019-04-19T14:27:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c3d0a61c-e9e1-4059-a63d-d7585122f3b3",
        "parentId" : "9f36f4c1-9721-4753-90f7-1cdedb6ec480",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Initially yes, but in the end it also fixes https://github.com/pandas-dev/pandas/issues/26096 (ensure `freq` is not writable by the user), so I think it is a good idea in general (it's also what CategoricalDtype does with categories/codes and DatetimeTZDtype with unit/tz)",
        "createdAt" : "2019-04-15T12:48:19Z",
        "updatedAt" : "2019-04-19T14:27:14Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4a373905-a384-4cf8-9fb1-da64819876b1",
        "parentId" : "9f36f4c1-9721-4753-90f7-1cdedb6ec480",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes this is good (prob could add a @property.setter to get a nice error message but can be followup)",
        "createdAt" : "2019-04-15T12:56:09Z",
        "updatedAt" : "2019-04-19T14:27:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8ae0c94c44d3458ec401a4c2d22005d0ad1eff0",
    "line" : 160,
    "diffHunk" : "@@ -1,1 +796,800 @@            return u\n\n    @property\n    def freq(self):\n        \"\"\"The frequency object of this PeriodDtype.\"\"\""
  },
  {
    "id" : "28980372-7dd1-4ec1-a9f3-24e21cd7e432",
    "prId" : 26067,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26067#pullrequestreview-226636649",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "034015df-4871-4ec8-b37b-6011875fef93",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we have a round-trip on this test? shouldn't you also need ``__getstate__``? or maybe not as you are setting _freq which is now good.",
        "createdAt" : "2019-04-15T12:37:36Z",
        "updatedAt" : "2019-04-19T14:27:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "93972719-cf92-4380-93bf-7d59a6c18bca",
        "parentId" : "034015df-4871-4ec8-b37b-6011875fef93",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`__getstate__` is implemented in the super class:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/455a2cdc4808890dd7eea41494100f48f34794d5/pandas/core/dtypes/dtypes.py#L152-L154\r\n\r\nAdded in https://github.com/pandas-dev/pandas/commit/154a6478eec50459ae46d28e4393b345c9ab9cd1",
        "createdAt" : "2019-04-15T12:53:15Z",
        "updatedAt" : "2019-04-19T14:27:14Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2f55bc3d-cf9a-4ed0-aab9-155b5499a353",
        "parentId" : "034015df-4871-4ec8-b37b-6011875fef93",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "And it's the round trip test that was failing",
        "createdAt" : "2019-04-15T12:53:29Z",
        "updatedAt" : "2019-04-19T14:27:14Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c9ddea7a-1a52-49b3-9253-5d0f1c44b61c",
        "parentId" : "034015df-4871-4ec8-b37b-6011875fef93",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, what if you move ``_freq`` into metdata then? (and so on for the other subclasses)",
        "createdAt" : "2019-04-15T12:55:30Z",
        "updatedAt" : "2019-04-19T14:27:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d1fc9203-cb37-4765-8807-f901e691aea6",
        "parentId" : "034015df-4871-4ec8-b37b-6011875fef93",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yeah, I have been thinking about that as well. `_metadata` is also used for other things though (that are included in the EA interface, this `__getstate__` is only for our internal dtypes). Eg for equality. For equality it would not matter if `freq` or `_freq` is included, but if we would want to use it eg also for a default repr, then it need to be the public attributes",
        "createdAt" : "2019-04-15T13:00:17Z",
        "updatedAt" : "2019-04-19T14:27:14Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7e43b5e4-5465-432e-b8f8-ca2d9dad1a90",
        "parentId" : "034015df-4871-4ec8-b37b-6011875fef93",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, yeah they are coupled. i don't really like having to be explicit about the pickle compat here.....",
        "createdAt" : "2019-04-15T13:03:47Z",
        "updatedAt" : "2019-04-19T14:27:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1d1e9d64-0eec-4615-871c-8995972a5e8e",
        "parentId" : "034015df-4871-4ec8-b37b-6011875fef93",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : ">  i don't really like having to be explicit about the pickle compat here.....\r\n\r\nYep, I agree. Although it is consistent with how it is already done in the other dtypes (Categorical actually has the same), it would be nice to clean it up. I could also add a different `_metadata_pickles` list, so we can handle both getstate and setstate in the PandasExtensionDtype superclass. Of course that doesn't change the implementation, but it does reduce some duplication in the code.",
        "createdAt" : "2019-04-15T13:16:07Z",
        "updatedAt" : "2019-04-19T14:27:14Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8ae0c94c44d3458ec401a4c2d22005d0ad1eff0",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +859,863 @@        # pickle -> need to set the settable private ones here (see GH26067)\n        self._freq = state['freq']\n\n    @classmethod\n    def is_dtype(cls, dtype):"
  },
  {
    "id" : "96f83f4a-d003-4531-a700-302a4c1dde74",
    "prId" : 26327,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26327#pullrequestreview-236171620",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee3f5783-77d6-40b4-a35a-94e4fc871031",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Would like to minimize the use of `Any` as much as possible. Can't the value here not be `str` as well? May need to add type to `self._metadata` to really make use of this",
        "createdAt" : "2019-05-09T21:25:06Z",
        "updatedAt" : "2019-06-28T15:20:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "c1b0409f-6b67-4411-a799-b79380ead357",
        "parentId" : "ee3f5783-77d6-40b4-a35a-94e4fc871031",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think `Dict[str, Union[Optional[Index], bool]]` will do it.",
        "createdAt" : "2019-05-10T03:11:41Z",
        "updatedAt" : "2019-06-28T15:20:46Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "88c730e6-c53d-4f6e-b276-dd82a889e91a",
        "parentId" : "ee3f5783-77d6-40b4-a35a-94e4fc871031",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "``__getstate__`` is also used by subclasses, so the strings in _metadata that I find are needed are (with associated guess for types for attributes):\r\n* \"categories\": Optional[Index]\r\n* \"ordered\": Optional[bool]\r\n* \"unit\": str (+other?)\r\n* \"tz\": str, I think (+ others?)\r\n* \"freq\": Not sure ATM\r\n* \"subtype\": Not sure ATM (``_typing.Dtype``?)\r\n\r\nIf the type hints are important to be specific to the ExtensionsDtype, maybe subclass ``__getstate__`` in order to set the correct type hints? (in different PR IMO)?",
        "createdAt" : "2019-05-10T15:31:34Z",
        "updatedAt" : "2019-06-28T15:20:46Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "86666f0e114ef3dfd8e623900b1e6240b4da1dfc",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +146,150 @@                                  \"method\")\n\n    def __getstate__(self) -> Dict[str_type, Any]:\n        # pickle support; we don't want to pickle the cache\n        return {k: getattr(self, k, None) for k in self._metadata}"
  },
  {
    "id" : "ed8a60e8-f7e9-48fe-810e-354b76be35ae",
    "prId" : 26327,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26327#pullrequestreview-236389200",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbf1b604-f4a4-4ebd-81aa-f9251f2664f1",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you annotate categories?",
        "createdAt" : "2019-05-09T21:25:35Z",
        "updatedAt" : "2019-06-28T15:20:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "1c6b8d24-7425-4bc4-a207-2cf360690f33",
        "parentId" : "cbf1b604-f4a4-4ebd-81aa-f9251f2664f1",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Only imprecisely. The most similar would be a plain ``Iterable``, but that would accept e.g. \"categories='abc'\", which would ideally flag as a wrong type in mypy, but that's not possible ATM.\r\n\r\nI'm a bit apprehensive about accepting wrong types, but maybe that would be the correct compromise.",
        "createdAt" : "2019-05-10T15:43:39Z",
        "updatedAt" : "2019-06-28T15:20:46Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "904b3d5c-3381-4bee-86ff-ee30a23ffdf3",
        "parentId" : "cbf1b604-f4a4-4ebd-81aa-f9251f2664f1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "categories should be ListLike which is ArrayLike + list + tuple + Iterable (define it in _typing)",
        "createdAt" : "2019-05-11T19:14:02Z",
        "updatedAt" : "2019-06-28T15:20:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "86666f0e114ef3dfd8e623900b1e6240b4da1dfc",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +220,224 @@    @classmethod\n    def _from_fastpath(cls,\n                       categories=None,\n                       ordered: bool = None\n                       ) -> 'CategoricalDtype':"
  },
  {
    "id" : "3bc4f01f-0f75-4798-b14e-54100efb3cd6",
    "prId" : 26327,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26327#pullrequestreview-236178491",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a922d41-579d-4154-8a43-c1ed28b06a9a",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you annotate values / categories?",
        "createdAt" : "2019-05-09T21:25:50Z",
        "updatedAt" : "2019-06-28T15:20:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "818535c4-275d-4670-9614-ee1a74ffe113",
        "parentId" : "8a922d41-579d-4154-8a43-c1ed28b06a9a",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "See comment above. The most precise here would again be ``Iterable``, but same problems as above.",
        "createdAt" : "2019-05-10T15:45:01Z",
        "updatedAt" : "2019-06-28T15:20:46Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "86666f0e114ef3dfd8e623900b1e6240b4da1dfc",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +243,247 @@    @classmethod\n    def _from_values_or_dtype(cls,\n                              values=None,\n                              categories=None,\n                              ordered: bool = None,"
  },
  {
    "id" : "b8e6f71f-c3f7-452c-9dd5-72e3736c9b23",
    "prId" : 26327,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26327#pullrequestreview-236185931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3efc615-9c49-41a0-b2b1-f98eeb0baafa",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is this optional? I thought ordered was always sure or values (categories are optional).",
        "createdAt" : "2019-05-10T03:12:51Z",
        "updatedAt" : "2019-06-28T15:20:46Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "d6169744-d087-429c-96bd-20d0bf0f56c3",
        "parentId" : "e3efc615-9c49-41a0-b2b1-f98eeb0baafa",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Yes:\r\n\r\n```python\r\nIn [1]: pd.CategoricalDtype()\r\nOut[1]: CategoricalDtype(categories=None, ordered=None)\r\n```\r\nI think this has somwthing to to with updating dtypes (don't update None, but do update False).\r\n",
        "createdAt" : "2019-05-10T15:48:24Z",
        "updatedAt" : "2019-06-28T15:20:46Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "f675bba4-8370-40c2-8dad-c6d9343eda89",
        "parentId" : "e3efc615-9c49-41a0-b2b1-f98eeb0baafa",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "grr, this isn't needed, and isn't how we document things. https://github.com/pandas-dev/pandas/issues/26336",
        "createdAt" : "2019-05-10T16:00:06Z",
        "updatedAt" : "2019-06-28T15:20:46Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "86666f0e114ef3dfd8e623900b1e6240b4da1dfc",
    "line" : 212,
    "diffHunk" : "@@ -1,1 +557,561 @@\n    @property\n    def ordered(self) -> Optional[bool]:\n        \"\"\"\n        Whether the categories have an ordered relationship."
  },
  {
    "id" : "59cf158a-d4fa-40e1-b887-d088e8165f37",
    "prId" : 26327,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26327#pullrequestreview-236186443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a61e9dd-c331-4b9f-b9e6-947b73b25e3a",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Optional[bool]? (here and elsewhere)",
        "createdAt" : "2019-05-10T03:13:36Z",
        "updatedAt" : "2019-06-28T15:20:46Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "eaf827e2-2b13-487c-a47f-e376b448568d",
        "parentId" : "1a61e9dd-c331-4b9f-b9e6-947b73b25e3a",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "The ``= None`` part adds the ``Optional`` part, as per [PEP 484](https://www.python.org/dev/peps/pep-0484/#union-types)\r\n\r\nEDIT: Actually they've changed their stance on this.\r\n\r\n\"A past version of this PEP allowed type checkers to assume an optional type when the default value is None, as in this code:...\"\r\n\r\nand\r\n\r\n\"This is no longer the recommended behavior.\"\r\n\r\nSo ``Optional[bool]`` is probably better.",
        "createdAt" : "2019-05-10T15:52:56Z",
        "updatedAt" : "2019-06-28T15:20:46Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "0c730acc-0509-43ea-9209-fa2ffbb0e401",
        "parentId" : "1a61e9dd-c331-4b9f-b9e6-947b73b25e3a",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "From there\r\n\r\n> This is no longer the recommended behavior. Type checkers should move towards requiring the optional type to be made explicit.\r\n\r\nSo it seems like Optional[bool] is preferred.",
        "createdAt" : "2019-05-10T16:01:13Z",
        "updatedAt" : "2019-06-28T15:20:46Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "86666f0e114ef3dfd8e623900b1e6240b4da1dfc",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +215,219 @@    _cache = {}  # type: Dict[str_type, PandasExtensionDtype]\n\n    def __init__(self, categories=None, ordered: bool = None):\n        self._finalize(categories, ordered, fastpath=False)\n"
  },
  {
    "id" : "55226d43-2e0d-4086-8f47-7fd60c9a168c",
    "prId" : 26327,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26327#pullrequestreview-255808249",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff6eefa6-0b52-48ef-966a-7d0c123c4cde",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@WillAyd on your how-to-type-annotate can you add when / why to use ``str_type``",
        "createdAt" : "2019-06-28T14:41:34Z",
        "updatedAt" : "2019-06-28T15:20:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "86666f0e114ef3dfd8e623900b1e6240b4da1dfc",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +130,134 @@    _cache = {}  # type: Dict[str_type, 'PandasExtensionDtype']\n\n    def __str__(self) -> str_type:\n        \"\"\"\n        Return a string representation for a particular Object"
  },
  {
    "id" : "7cac6b32-357b-4841-b620-662df9865ffd",
    "prId" : 29155,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29155#pullrequestreview-305294010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81f93638-7a11-4a9c-8eac-f845dfd3860a",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This is really nice; gives indication that the argument is mutated",
        "createdAt" : "2019-10-22T15:18:53Z",
        "updatedAt" : "2019-10-22T15:43:41Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "78d76e10c4f3949d114dd96c954e57ab76c29731",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +352,356 @@        self._ordered_from_sentinel = ordered is ordered_sentinel\n\n    def __setstate__(self, state: MutableMapping[str_type, Any]) -> None:\n        # for pickle compat. __get_state__ is defined in the\n        # PandasExtensionDtype superclass and uses the public properties to"
  },
  {
    "id" : "ce39eade-1ca9-4997-b039-366b78ceb139",
    "prId" : 29503,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29503#pullrequestreview-314553000",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37367845-51d6-4f98-9245-42ac5ca5516b",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "same",
        "createdAt" : "2019-11-09T11:12:03Z",
        "updatedAt" : "2019-11-11T15:20:59Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "35fe7cabc79c857dacbe9771f64f87beb6ed6b3f",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +422,426 @@        else:\n            data = self.categories._format_data(name=self.__class__.__name__)\n        return tpl.format(data=data, ordered=self._ordered)\n\n    @staticmethod"
  }
]