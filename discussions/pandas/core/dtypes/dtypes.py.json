[
  {
    "id" : "8c1d237c-6427-4d68-b5bd-9b7434910700",
    "prId" : 16015,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16015#pullrequestreview-61666993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e155a21-f8bf-4386-a00a-c0341741ef8c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "neat trick",
        "createdAt" : "2017-09-09T17:31:01Z",
        "updatedAt" : "2017-09-23T16:33:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "43f90cc13786b57b89709cdb7dd8d2c023adaee6",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +194,198 @@        if self.categories is None:\n            if self.ordered:\n                return -1\n            else:\n                return -2"
  },
  {
    "id" : "488bb34b-03ec-4dd7-a0b5-78c53e33d511",
    "prId" : 16015,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16015#pullrequestreview-64724571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afe6daa6-ba67-44f8-8b97-6bbfaed1805a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we should actually move this to hash_array I think (could be pre-cursor PR)",
        "createdAt" : "2017-09-09T17:34:52Z",
        "updatedAt" : "2017-09-23T16:33:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "52165ec6-8b71-424e-ab4a-d852487bdaf6",
        "parentId" : "afe6daa6-ba67-44f8-8b97-6bbfaed1805a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "?",
        "createdAt" : "2017-09-17T14:39:38Z",
        "updatedAt" : "2017-09-23T16:33:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "eb01dd6d-519d-40bb-a819-961227bfc9b5",
        "parentId" : "afe6daa6-ba67-44f8-8b97-6bbfaed1805a",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Looking into this now.\r\n\r\nAny thoughts on what this does to the probability of hash collisions? If we use two distinct hashing algorithms, I'd expect probability of a collision is higher (though presumably still negligible?),",
        "createdAt" : "2017-09-19T21:24:19Z",
        "updatedAt" : "2017-09-23T16:33:32Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "3f846296-0263-4555-9f87-3ab4dd371cd1",
        "parentId" : "afe6daa6-ba67-44f8-8b97-6bbfaed1805a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "neh hash collisions basically don't happen in the space of things we are doing (normally). however you can collide by construction, e.g. code doing something wrong..\r\n\r\nIn any event we should move this code (can be a followup, maybe make an issue for things to do)",
        "createdAt" : "2017-09-23T00:22:18Z",
        "updatedAt" : "2017-09-23T16:33:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "43f90cc13786b57b89709cdb7dd8d2c023adaee6",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +242,246 @@            cat_array = hash_tuples(categories)\n        else:\n            if categories.dtype == 'O':\n                types = [type(x) for x in categories]\n                if not len(set(types)) == 1:"
  },
  {
    "id" : "7aea282b-b107-419e-bd9e-86f0b67e69df",
    "prId" : 16015,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16015#pullrequestreview-61666993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcd2de53-3bfc-4895-97f8-c845d4fa0e98",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would move this last piece of logic to a private function in hashing as well.",
        "createdAt" : "2017-09-09T17:35:39Z",
        "updatedAt" : "2017-09-23T16:33:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "43f90cc13786b57b89709cdb7dd8d2c023adaee6",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +259,263 @@        else:\n            cat_array = [cat_array]\n        hashed = _combine_hash_arrays(iter(cat_array),\n                                      num_items=len(cat_array))\n        if len(hashed) == 0:"
  },
  {
    "id" : "d84591d6-673d-4ecf-87f3-72fe41a97f7c",
    "prId" : 16015,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16015#pullrequestreview-64724571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7058534a-04a4-43b2-b9da-0b1a3b819f4e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we have this hacky thing in Categorical to repr only 10 categories. CategoricalIndex actually correctly uses the option ``max_categories``, so should do that here (again can do as a followup)",
        "createdAt" : "2017-09-23T00:24:51Z",
        "updatedAt" : "2017-09-23T16:33:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "43f90cc13786b57b89709cdb7dd8d2c023adaee6",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +222,226 @@\n    def __unicode__(self):\n        tpl = u'CategoricalDtype(categories={}ordered={})'\n        if self.categories is None:\n            data = u\"None, \""
  },
  {
    "id" : "7a8a64b4-4ac1-4d29-b20c-ae400576e9e1",
    "prId" : 17888,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17888#pullrequestreview-70057760",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c0df4ac-4324-49f2-b571-329ef5566c50",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "here you an also accept ABCCategorical ",
        "createdAt" : "2017-10-17T22:47:32Z",
        "updatedAt" : "2017-10-17T22:47:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ef4a4614-cecb-4fd0-adc2-9322f6e93224",
        "parentId" : "5c0df4ac-4324-49f2-b571-329ef5566c50",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "a Categorical has already been converted to CategoricalIndex",
        "createdAt" : "2017-10-17T22:48:37Z",
        "updatedAt" : "2017-10-17T22:48:37Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4242eee3-aa89-4ec2-aea6-b8637dd1b189",
        "parentId" : "5c0df4ac-4324-49f2-b571-329ef5566c50",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ahh ok",
        "createdAt" : "2017-10-17T23:05:46Z",
        "updatedAt" : "2017-10-17T23:05:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c56abeb8866698c0961f21ce13be180b191131d",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +327,331 @@                raise ValueError('Categorical categories must be unique')\n\n        if isinstance(categories, ABCCategoricalIndex):\n            categories = categories.categories\n"
  },
  {
    "id" : "f743262b-aaab-4b9c-bbfd-b317d5c3a98b",
    "prId" : 18202,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18202#pullrequestreview-76435158",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33e2bf43-629d-4567-bec4-adb37ec15114",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is the problem that if you don't include this 'None', that it then automatically generated the 'Methods' section and thus included too much? ",
        "createdAt" : "2017-11-14T10:10:41Z",
        "updatedAt" : "2017-11-15T15:22:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "450970a7-5cd7-497b-adce-f773a1b2d3d7",
        "parentId" : "33e2bf43-629d-4567-bec4-adb37ec15114",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yes, I'm not sure how best to avoid that. This is where class-level `numpydoc_show_class_members` flag would be nice. Having `None` there isn't great since it shows up in the output.",
        "createdAt" : "2017-11-14T13:15:18Z",
        "updatedAt" : "2017-11-15T15:22:18Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "34834fae25bd7ea1eb6a364c9d2c841e0837eb38",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +128,132 @@    Methods\n    -------\n    None\n\n    Notes"
  },
  {
    "id" : "a3f681d4-bb90-42fc-88f1-db612435ad92",
    "prId" : 18889,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18889#pullrequestreview-94568766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "129dfb5f-12e3-401e-97d0-8b1c5036d825",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "separate, I don't think we need to have private methods on CDT. e.g. ``validate_ordered`` and ``update_dtype`` (maybe more). As this is *used* in other contexts. so a de-privatize PR should be great.",
        "createdAt" : "2017-12-21T13:59:02Z",
        "updatedAt" : "2018-02-10T02:18:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ea3f94e7-c43e-47f3-a72b-62cac21ed21d",
        "parentId" : "129dfb5f-12e3-401e-97d0-8b1c5036d825",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually can you change this?",
        "createdAt" : "2018-01-02T11:27:23Z",
        "updatedAt" : "2018-02-10T02:18:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5910d46b-8fb2-4042-96ca-782af4cb14c4",
        "parentId" : "129dfb5f-12e3-401e-97d0-8b1c5036d825",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "done for `_update_dtype`, `_validate_ordered`, and `_validate_categories`",
        "createdAt" : "2018-02-07T01:42:39Z",
        "updatedAt" : "2018-02-10T02:18:58Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "007340de7cd013f1eaa89e8cb87241b71f0f4272",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +374,378 @@                   'got {dtype!r}').format(dtype=dtype)\n            raise ValueError(msg)\n\n        # dtype is CDT: keep current categories/ordered if None\n        new_categories = dtype.categories"
  },
  {
    "id" : "f37322f8-9929-43dc-9a46-99e1030d6efe",
    "prId" : 18889,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18889#pullrequestreview-94569688",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90c0227d-2915-432c-b8df-94d7823895b0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can ordered be None here?",
        "createdAt" : "2018-01-02T11:27:05Z",
        "updatedAt" : "2018-02-10T02:18:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "896aeded-3509-47a9-bbdb-b25282c6ba1e",
        "parentId" : "90c0227d-2915-432c-b8df-94d7823895b0",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "yes, e.g. `CDT(list('abcd'), None) == CDT(list('dcba'), None)`, but `None` is fine here since it is Falsey, and this is just meant to catch cases where at least one is `True`",
        "createdAt" : "2018-02-07T01:48:04Z",
        "updatedAt" : "2018-02-10T02:18:58Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "007340de7cd013f1eaa89e8cb87241b71f0f4272",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +230,234 @@            # CDT(., .) = CDT(None, True).\n            return True\n        elif self.ordered or other.ordered:\n            # At least one has ordered=True; equal if both have ordered=True\n            # and the same values for categories in the same order."
  },
  {
    "id" : "c4b43df7-56b9-4eaa-8630-1e4a106c71c3",
    "prId" : 19231,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19231#pullrequestreview-88668126",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd4dec1c-dc29-4031-b52a-5c36fa96a9c9",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "This change was necessary since some subtypes don't nicely compare:\r\n```python\r\nIn [2]: dtype1 = IntervalDtype('float64')\r\n\r\nIn [3]: dtype2 = IntervalDtype('datetime64[ns, US/Eastern]')\r\n\r\nIn [4]: dtype1 == dtype2\r\n---------------------------------------------------------------------------\r\nTypeError: data type not understood\r\n```\r\nThough interestingly enough the reverse comparison was fine:\r\n```python\r\nIn [5]: dtype2 == dtype1\r\nOut[5]: False\r\n```",
        "createdAt" : "2018-01-13T21:48:41Z",
        "updatedAt" : "2018-01-13T21:48:41Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "570f4874-1377-423b-bb27-cd86019ff4f8",
        "parentId" : "dd4dec1c-dc29-4031-b52a-5c36fa96a9c9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes this is because numpy types don't handle comparisons vs pandas dtypes.",
        "createdAt" : "2018-01-13T21:49:52Z",
        "updatedAt" : "2018-01-13T21:54:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8caf9f2e1e87327941920c1d676e3ef3fe3c31f9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +712,716 @@        else:\n            from pandas.core.dtypes.common import is_dtype_equal\n            return is_dtype_equal(self.subtype, other.subtype)\n\n    @classmethod"
  },
  {
    "id" : "1a53a3c6-1c24-4b42-87d6-4586a729e5bd",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-90081765",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b3bff3b-cfe4-4928-8b55-67c373cbb9f6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why would this not be just ExtensionDtype",
        "createdAt" : "2018-01-18T23:32:06Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a07348ba-4b38-48f5-86e3-7dd79d165b3b",
        "parentId" : "6b3bff3b-cfe4-4928-8b55-67c373cbb9f6",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We define methods like `__repr__`, caching, etc. that are not part of the interface.",
        "createdAt" : "2018-01-19T02:51:19Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "5c378743-c664-4f67-b11b-ec086f78f9f6",
        "parentId" : "6b3bff3b-cfe4-4928-8b55-67c373cbb9f6",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "__repr__ is reasonable to be part of the interface, caching I suppose is ok here",
        "createdAt" : "2018-01-19T11:23:07Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +9,13 @@\n\nclass PandasExtensionDtype(ExtensionDtype):\n    \"\"\"\n    A np.dtype duck-typed class, suitable for holding a custom dtype."
  },
  {
    "id" : "62560e48-7998-4e82-954e-598e71043d73",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-109767466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3008cd2f-0890-4497-8605-146a9c90d9e1",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is the correct scalar type for IntervalArray",
        "createdAt" : "2018-04-04T16:52:00Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "4d06e3ae-6039-4341-acc4-4635bd40f4a6",
        "parentId" : "3008cd2f-0890-4497-8605-146a9c90d9e1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add doc-string",
        "createdAt" : "2018-04-05T15:47:42Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +777,781 @@\n    @property\n    def type(self):\n        from pandas import Interval\n        return Interval"
  },
  {
    "id" : "9fcda203-70cd-43c2-a613-d3005c6e3966",
    "prId" : 21185,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21185#pullrequestreview-125568875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f7833f8-0fd4-489c-93ce-b9d36ff5b5f1",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Without looking at the uses yet, could we simplify this a by just allowing string lookup? Ideally, `registry` would be a simple class holding a dict mapping `dtype.name -> ExtensionDtype`.",
        "createdAt" : "2018-06-04T13:02:29Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "ad0d4f39-b0dd-4f40-9eb2-1ffe3f13a15b",
        "parentId" : "0f7833f8-0fd4-489c-93ce-b9d36ff5b5f1",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think the current code also supports finding the dtype for eg `'interval[int64]'` and not just `interval` (so parametrized versions of the strings)",
        "createdAt" : "2018-06-04T13:14:36Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ab7450ee-924b-4792-96d0-293d34aad847",
        "parentId" : "0f7833f8-0fd4-489c-93ce-b9d36ff5b5f1",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Oh, and I suppose we want that to support `.astype('interval[int64]')`. That's fair...",
        "createdAt" : "2018-06-04T13:20:20Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2c91d706510b16a8a9f82dbeafa7d35396697d1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +9,13 @@\n\nclass Registry(object):\n    \"\"\"\n    Registry for dtype inference"
  },
  {
    "id" : "ab63aa04-92e7-49be-9e0e-278a3041f828",
    "prId" : 22901,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22901#pullrequestreview-161155681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c8004ff-0930-4e09-a3f6-dac0c438a234",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think this *may* have been it. For whatever reason, we're here with\r\n\r\n```\r\nipdb> pp string\r\n   A  A\r\n0  0  2\r\n1  2  4\r\n2  0  4\r\n```\r\n\r\nWe do\r\n\r\n```\r\nipdb> string == 'category'\r\n*** FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\r\n```\r\n\r\nThat FutureWarning is elevated to an error. I didn't realize this, but you can catch warnings, so the very simple fix is to also catch `FutureWarning` here, but that feels fragile. I'll investigate a better fix...",
        "createdAt" : "2018-10-03T13:14:53Z",
        "updatedAt" : "2018-10-03T13:14:53Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae3d430e521dd81c3e66fee18c21a05a7bf2310c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +359,363 @@            if string == 'category':\n                return cls()\n            else:\n                raise TypeError(\"cannot construct a CategoricalDtype\")\n        except AttributeError:"
  },
  {
    "id" : "823054e7-8f18-49b3-956e-eff94c175a33",
    "prId" : 23990,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23990#pullrequestreview-180002550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdfade3d-9acd-46d3-ab38-f8b4887f0491",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this can be an int?",
        "createdAt" : "2018-11-29T20:23:08Z",
        "updatedAt" : "2018-12-03T22:25:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1d42f885-5609-47cc-ac60-4e7ab3423869",
        "parentId" : "cdfade3d-9acd-46d3-ab38-f8b4887f0491",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Surprisingly, yes\r\n\r\n```python\r\nIn [2]: pd.DatetimeIndex(['2000'], tz=100)\r\nOut[2]: DatetimeIndex(['2000-01-01 00:00:00+00:01:40'], dtype='datetime64[ns, pytz.FixedOffset(1)]', freq=None)\r\n```",
        "createdAt" : "2018-11-29T20:37:44Z",
        "updatedAt" : "2018-12-03T22:25:06Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cde369f6e87c093a592766226f3a3db4c7cd846",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +502,506 @@            The precision of the datetime data. Currently limited\n            to ``\"ns\"``.\n        tz : str, int, or datetime.tzinfo\n            The timezone.\n"
  },
  {
    "id" : "7302f36f-442f-4797-95b6-3ec4f61f3ceb",
    "prId" : 24419,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24419#pullrequestreview-187846223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c6a8936-f73a-4aa5-b602-0e7b2fdc93f7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are you adding tests specifically for this case?",
        "createdAt" : "2018-12-25T17:25:49Z",
        "updatedAt" : "2019-01-03T22:12:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e47ba15b-a7ea-4745-a336-93eb4790baac",
        "parentId" : "4c6a8936-f73a-4aa5-b602-0e7b2fdc93f7",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "The changes in test_dtypes.py are done because of this (unchanged error type, changed error message).",
        "createdAt" : "2018-12-26T07:47:42Z",
        "updatedAt" : "2019-01-03T22:12:38Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "346510e5973e30bac2412f05eb9d0d3987d78dfa",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +496,500 @@        if not fastpath and not is_list_like(categories):\n            msg = \"Parameter 'categories' must be list-like, was {!r}\"\n            raise TypeError(msg.format(categories))\n        elif not isinstance(categories, ABCIndexClass):\n            categories = Index(categories, tupleize_cols=False)"
  },
  {
    "id" : "7f2228b4-7a4f-430f-924e-ebdd335041bf",
    "prId" : 24419,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24419#pullrequestreview-188545228",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82aeea45-10a0-4f32-8a7c-ac4cbef19af4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "values is not None and is_categorical(values)",
        "createdAt" : "2019-01-01T00:18:03Z",
        "updatedAt" : "2019-01-03T22:12:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "25ac09b4-d865-4821-b8eb-913e4d03a369",
        "parentId" : "82aeea45-10a0-4f32-8a7c-ac4cbef19af4",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "is_categorical(None) returns False and timeit shows it's fast (547 ns).\r\n\r\nso this guard is not needed.",
        "createdAt" : "2019-01-01T01:34:53Z",
        "updatedAt" : "2019-01-03T22:12:38Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "346510e5973e30bac2412f05eb9d0d3987d78dfa",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +313,317 @@                raise ValueError(\"Cannot specify `categories` or `ordered` \"\n                                 \"together with `dtype`.\")\n        elif is_categorical(values):\n            # If no \"dtype\" was passed, use the one from \"values\", but honor\n            # the \"ordered\" and \"categories\" arguments"
  }
]