[
  {
    "id" : "181ec7b4-ec9c-4350-a87c-dd8958873bbe",
    "prId" : 16015,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16015#pullrequestreview-63333746",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8462f5f-f2e1-4da3-b50a-778e93314052",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is not really necessary if you allow ``CategoricalDtype(dtype)`` IOW, you can check whether the incoming ``categories`` is an instance of a ``CagetegoricalDtype`` and act accordingly.",
        "createdAt" : "2017-08-12T17:53:58Z",
        "updatedAt" : "2017-09-23T16:33:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a1ea5ba0-5cb7-4a55-a5b4-9ba96c54c584",
        "parentId" : "b8462f5f-f2e1-4da3-b50a-778e93314052",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "?",
        "createdAt" : "2017-09-17T14:37:37Z",
        "updatedAt" : "2017-09-23T16:33:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b9003db7-322b-46be-a7b2-cd232e575e39",
        "parentId" : "b8462f5f-f2e1-4da3-b50a-778e93314052",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'm not sure I like overloading the `categories` like that. ",
        "createdAt" : "2017-09-18T12:28:06Z",
        "updatedAt" : "2017-09-23T16:33:32Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "43f90cc13786b57b89709cdb7dd8d2c023adaee6",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +1708,1712 @@        categories = getattr(dtype, 'categories', None)\n        ordered = getattr(dtype, 'ordered', False)\n        dtype = CategoricalDtype(categories=categories, ordered=ordered)\n    elif is_datetime64tz_dtype(dtype):\n        dtype = DatetimeTZDtype(dtype)"
  },
  {
    "id" : "e77108ac-ac99-423a-8246-f082cc99dc8f",
    "prId" : 16638,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16638#pullrequestreview-43174845",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a059ef6-248a-4235-b4c9-849f6177205f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is fine\r\nbut need tests that hit this",
        "createdAt" : "2017-06-09T14:47:14Z",
        "updatedAt" : "2017-07-05T14:53:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5f43a08898733e6cc58fe29a578267d81104534",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +399,403 @@    try:\n        tipo = _get_dtype_type(arr_or_dtype)\n    except ValueError:\n        return False\n    return issubclass(tipo, np.timedelta64)"
  },
  {
    "id" : "cccfe242-2d86-4c16-ab87-05680d006fde",
    "prId" : 18677,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18677#pullrequestreview-81772983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7ad7439-cce1-4ae3-9fa4-a8c0362534ee",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Changed this because switching to `pandas_dtype` caused a test to break since it was passing `'interval'` as the dtype, which appears to be valid:\r\n```python\r\nIn [1]: from pandas.core.dtypes.common import is_interval_dtype\r\n\r\nIn [2]: is_interval_dtype('interval')\r\nOut[2]: True\r\n```",
        "createdAt" : "2017-12-07T08:14:43Z",
        "updatedAt" : "2017-12-11T07:40:52Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "60421314618f39a77f5d4a94a4b3f2462118e7fa",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1935,1939 @@                pass\n\n        elif dtype.startswith('interval') or dtype.startswith('Interval'):\n            try:\n                return IntervalDtype.construct_from_string(dtype)"
  },
  {
    "id" : "f614acea-cc69-421e-a530-dc1b8008f9ee",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93264997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "153ba9e0-3895-425d-b68d-e06547c8b721",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you need to call ``_get_dtype_type`` here, this can *only* have a result of ExtensionDtype and NOT ExtensionArray, which doesn't make any sense.",
        "createdAt" : "2018-01-28T21:07:04Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7bf2699f-7843-4cf2-9a58-ffc06fb80368",
        "parentId" : "153ba9e0-3895-425d-b68d-e06547c8b721",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "If you pass this function an ExtensionArray subclass, you will get that here?",
        "createdAt" : "2018-01-28T21:59:48Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "98069f7e-050d-44f4-8e69-2a701ad882b8",
        "parentId" : "153ba9e0-3895-425d-b68d-e06547c8b721",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> this can only have a result of ExtensionDtype and NOT ExtensionArray, which doesn't make any sense.\r\n\r\nThe result is just True or False. The argument can be either an array or dtype.\r\n\r\nI'm not sure that `_get_dtype_or_type` does what we want here. That grabs `arr.dtype.type`, which is a scalar like `str` or `Interval` or `ipaddress.IPv4Address`. What would we do with that?",
        "createdAt" : "2018-01-30T19:29:39Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "db946263-cd57-4d01-a43e-12a3d135b486",
        "parentId" : "153ba9e0-3895-425d-b68d-e06547c8b721",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is not following what we do in all other cases that's my point. pls use _get_dtype_or_type",
        "createdAt" : "2018-02-01T00:13:52Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5db56a99-95fa-4aa1-bc36-85e5c178d704",
        "parentId" : "153ba9e0-3895-425d-b68d-e06547c8b721",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> this is not following what we do in all other cases that's my point.\r\n\r\nThat won't work unfortunately.\r\n\r\n```python\r\nIn [1]: import pandas as pd; import pandas_ip as ip\r\n\r\nIn [2]: arr = ip.IPAddress([1, 2, 3])\r\n\r\nIn [3]: pd.core.dtypes.common._get_dtype_type(arr)\r\nOut[3]: pandas_ip.block.IPv4v6Base\r\n```\r\n\r\n`IPv4v6Base` isn't an instance of `ExtensionType`. It's the type scalars belong to.\r\n\r\n```python\r\nIn [4]: isinstance(arr[0], ip.block.IPv4v6Base)\r\nOut[4]: True\r\n\r\nIn [5]: issubclass(ip.block.IPv4v6Base, pd.core.dtypes.base.ExtensionDtype)\r\nOut[5]: False\r\n```\r\n\r\n`_get_dtype_or_type` works for our extension types, since if we get a `CategoricalDtypeType` we can say \"this is a categorical\". But we can't do that for arbitrary 3rd party types.",
        "createdAt" : "2018-02-01T02:50:29Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "073862bc-8246-4bf5-b055-98a6a7267b65",
        "parentId" : "153ba9e0-3895-425d-b68d-e06547c8b721",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "then ``_get_dtype_or_type`` needs adjustment. This is the point of compatibility, there shouldn't be the need to have special cases.",
        "createdAt" : "2018-02-01T12:21:50Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4aaef548-8af0-4781-9b12-46b838888885",
        "parentId" : "153ba9e0-3895-425d-b68d-e06547c8b721",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But that would make `get_dtype_or_type` inconsistent, as it would no longer *always* return a dtype type, but in certain cases a dtype",
        "createdAt" : "2018-02-01T12:30:58Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4e76b7e2-aec2-4552-acb1-0fa1bdfddd59",
        "parentId" : "153ba9e0-3895-425d-b68d-e06547c8b721",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "`_get_dtype_type` does exactly what it's supposed to do, `values.dtype.type`. But that's not useful here!\r\n\r\nWhat's the issue with the function as defined? I need a way to tell if an array or dtype is an ExtensionArray or ExtensionDtype. Someday, when `Categorical`, `SparseArray`, `IntervalArray`, `PeriodArray`, `datetimetz`, etc are extension arrays then all the *special cases* currently in `_get_dtype_type` and friends can be removed, but we aren't there yet. We're doing things in small steps.",
        "createdAt" : "2018-02-01T12:34:18Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1712,1716 @@    if isinstance(arr_or_dtype, ABCSeries):\n        arr_or_dtype = arr_or_dtype._values\n    return isinstance(arr_or_dtype, (ExtensionDtype, ExtensionArray))\n\n"
  },
  {
    "id" : "909e41c2-5560-4fa3-8298-de46339e16a1",
    "prId" : 19983,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19983#pullrequestreview-101619073",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a151708c-bca5-401e-bfe1-10ead4a808c0",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "It will take some research, but I think it would be useful to explain what are the use cases of this function, besides what it does.",
        "createdAt" : "2018-03-06T16:38:23Z",
        "updatedAt" : "2018-11-13T06:27:45Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a78a39b77a4c2855d705e6fcff457d747d97ed9",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +155,159 @@    Check that the one-dimensional array-like is a pandas sparse array.\n    Returns True if it is a pandas sparse array, not another type of\n    sparse array.\n\n    Parameters"
  },
  {
    "id" : "e3321244-c132-4237-b4ac-da0d0a169403",
    "prId" : 19983,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19983#pullrequestreview-101619073",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3f91971-2978-47fd-b7ad-ce16e185cb59",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think it make sense to also add `to_dense`, if we list `to_sparse`.",
        "createdAt" : "2018-03-06T16:45:38Z",
        "updatedAt" : "2018-11-13T06:27:45Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a78a39b77a4c2855d705e6fcff457d747d97ed9",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +170,174 @@    --------\n    DataFrame.to_sparse : Convert DataFrame to a SparseDataFrame.\n    Series.to_sparse : Convert Series to SparseSeries.\n    Series.to_dense : Return dense representation of a Series.\n"
  },
  {
    "id" : "d15a8cd5-0036-4b62-a061-8aa20e4f8a9a",
    "prId" : 19983,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19983#pullrequestreview-102490549",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2338029-8e0a-431c-bbc9-1a28948dae81",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I'd be explicit here in saying, return false if it has more than one dimension, even if it is sparse. Minor change, but I think it's a bit more clear.",
        "createdAt" : "2018-03-08T22:49:57Z",
        "updatedAt" : "2018-11-13T06:27:45Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a78a39b77a4c2855d705e6fcff457d747d97ed9",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +195,199 @@    False\n\n    Returns `False` if the parameter has more than one dimension.\n\n    >>> df = pd.SparseDataFrame([389., 24., 80.5, np.nan],"
  },
  {
    "id" : "7db7fce3-5fd5-4350-b64a-6d44497501e5",
    "prId" : 19983,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19983#pullrequestreview-102490549",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d35efb94-46a2-4b72-84dc-94fa18a321a5",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Personally I find this paragraph not so clear. I think something like this would be shorter and also clearer: \"Return `True` if `arr` is `pandas.SparseArray` or `pandas.SparseSeries`, and `False` for any other type.\"",
        "createdAt" : "2018-03-08T22:53:55Z",
        "updatedAt" : "2018-11-13T06:27:45Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a78a39b77a4c2855d705e6fcff457d747d97ed9",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +155,159 @@    Check that the one-dimensional array-like is a pandas sparse array.\n    Returns True if it is a pandas sparse array, not another type of\n    sparse array.\n\n    Parameters"
  },
  {
    "id" : "0abb8619-0fe6-4646-8e4c-36712f5b9e4e",
    "prId" : 19983,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19983#pullrequestreview-102490549",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8501bb6f-286b-44b8-944b-61469a3cb0a6",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Based on my comment above, I think we want to include in the see also the mentioned methods `pandas.SparseArray` and `pandas.SparseSeries`. Also, may be it makes sense to get rid of `DataFrame.to_sparse`, as it's not so directly related.",
        "createdAt" : "2018-03-08T22:55:46Z",
        "updatedAt" : "2018-11-13T06:27:45Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a78a39b77a4c2855d705e6fcff457d747d97ed9",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +171,175 @@    DataFrame.to_sparse : Convert DataFrame to a SparseDataFrame.\n    Series.to_sparse : Convert Series to SparseSeries.\n    Series.to_dense : Return dense representation of a Series.\n\n    Examples"
  },
  {
    "id" : "f088ce76-27bc-4387-b90d-e4f3f98dfcce",
    "prId" : 21008,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21008#pullrequestreview-119387558",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88fa5511-889d-4b92-a05a-27c12a84b2dc",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "There are quite some other places where we use relative imports as well (but of course not consistently ..), but so why change those and not others?",
        "createdAt" : "2018-05-11T09:02:15Z",
        "updatedAt" : "2018-06-22T19:53:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e28691cc-7f55-4d14-9013-99b99143a0b4",
        "parentId" : "88fa5511-889d-4b92-a05a-27c12a84b2dc",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "It wasn’t the relative import that mypy was complaining about as much as the starred import. I just figured I’d convert the relative to absolute while I was touching the module",
        "createdAt" : "2018-05-11T10:26:22Z",
        "updatedAt" : "2018-06-22T19:53:39Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "60642edf948eec9142ba96ccb3bf578e9b108371",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +6,10 @@from pandas._libs import algos, lib\nfrom pandas._libs.tslibs import conversion\nfrom pandas.core.dtypes.dtypes import (\n    CategoricalDtype, CategoricalDtypeType, DatetimeTZDtype,\n    DatetimeTZDtypeType, PeriodDtype, PeriodDtypeType, IntervalDtype,"
  },
  {
    "id" : "93f4955a-87f2-4a94-829e-e00a5de4777c",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-152041541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e122f500-3025-401b-a946-56bc33150598",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "much nicer",
        "createdAt" : "2018-09-04T12:30:34Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +184,188 @@    from pandas.core.sparse.dtype import SparseDtype\n\n    dtype = getattr(arr, 'dtype', arr)\n    return isinstance(dtype, SparseDtype)\n"
  },
  {
    "id" : "3a2a640c-8518-49de-9393-53d7322bffde",
    "prId" : 22667,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22667#pullrequestreview-155165851",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf6b19b8-f50c-4374-921e-df7d795d32cf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should use is_bool_dtype",
        "createdAt" : "2018-09-13T11:59:53Z",
        "updatedAt" : "2018-09-20T14:00:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b4cd0f63-c0fe-42da-b38d-704f89dd60d8",
        "parentId" : "bf6b19b8-f50c-4374-921e-df7d795d32cf",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is `is_bool_dtype` 😄 ",
        "createdAt" : "2018-09-13T16:28:02Z",
        "updatedAt" : "2018-09-20T14:00:43Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "29b1370aea369645b11c6f76544def634c9c30b1",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +1669,1673 @@                arr_or_dtype.inferred_type == 'boolean')\n    elif is_extension_array_dtype(arr_or_dtype):\n        dtype = getattr(arr_or_dtype, 'dtype', arr_or_dtype)\n        return dtype._is_boolean\n"
  },
  {
    "id" : "34bb2cd6-76b8-4071-bf3f-2b56862595ad",
    "prId" : 22667,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22667#pullrequestreview-157219676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07a63514-8541-4f97-b423-549de56d1540",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could be elif here",
        "createdAt" : "2018-09-18T11:32:08Z",
        "updatedAt" : "2018-09-20T14:00:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "75761b71-c927-42aa-90c5-806d8f760202",
        "parentId" : "07a63514-8541-4f97-b423-549de56d1540",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Has to be an `if` so that if someone passes a `Categorical` we go `Categorical` -> `Categorical.categories (index)` to this block. We want to go down here since Index has special rules.",
        "createdAt" : "2018-09-20T11:14:57Z",
        "updatedAt" : "2018-09-20T14:00:43Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "29b1370aea369645b11c6f76544def634c9c30b1",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +1660,1664 @@        # now we use the special definition for Index\n\n    if isinstance(arr_or_dtype, ABCIndexClass):\n\n        # TODO(jreback)"
  },
  {
    "id" : "1903f0ee-960e-4ed2-98d5-b6de1c6851e1",
    "prId" : 22938,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22938#pullrequestreview-160787683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec01b563-37db-497c-ad53-057ed783860f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is really changing the semantics",
        "createdAt" : "2018-10-02T13:30:12Z",
        "updatedAt" : "2018-10-02T18:47:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bfe29d64-5934-486e-bf5b-0c21a5e3e5ff",
        "parentId" : "ec01b563-37db-497c-ad53-057ed783860f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Which semantics?",
        "createdAt" : "2018-10-02T13:31:21Z",
        "updatedAt" : "2018-10-02T18:47:55Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c2fddab0-0f3a-4d4d-a92d-1c87018a016f",
        "parentId" : "ec01b563-37db-497c-ad53-057ed783860f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "all the other dtypes return the meta class\r\nnow you are returning the actual class (and not even the type)\r\n\r\nthis is not right",
        "createdAt" : "2018-10-02T14:36:30Z",
        "updatedAt" : "2018-10-02T18:47:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "14e50b75-34d4-4413-a657-31f4d32e6ec2",
        "parentId" : "ec01b563-37db-497c-ad53-057ed783860f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is what we have been doing for all EAs.\r\n\r\nNow in practice, I don't if we ever *rely* on the value, though?",
        "createdAt" : "2018-10-02T14:55:48Z",
        "updatedAt" : "2018-10-02T18:47:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b3b51906-bf22-4d9b-a074-51d3d93b7dcd",
        "parentId" : "ec01b563-37db-497c-ad53-057ed783860f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I agree that am not sure this is actually used. But If you are chaning, try changing for all the dtypes? (or don't change). that's what I mean by semantics, we neeed to be consistent.",
        "createdAt" : "2018-10-02T15:08:19Z",
        "updatedAt" : "2018-10-02T18:47:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cf3f27a9-0664-4af6-87e7-58d395d6dc9a",
        "parentId" : "ec01b563-37db-497c-ad53-057ed783860f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "From the ExtensionArray docs\r\n\r\n```\r\n        \"\"\"The scalar type for the array, e.g. ``int``\r\n\r\n        It's expected ``ExtensionArray[item]`` returns an instance\r\n        of ``ExtensionDtype.type`` for scalar ``item``.\r\n        \"\"\"\r\n ```\r\n\r\nPeriod is the scalar type for arrays with PeriodDtype, in the sense that `isinstance(periodarray[0], Period)` is true. What's the issue?\r\n\r\n> now you are returning the actual class (and not even the type)\r\n\r\n\r\nClasses are types (they can be used as the second argument to isinstance).",
        "createdAt" : "2018-10-02T15:09:42Z",
        "updatedAt" : "2018-10-02T18:47:55Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b2d21a8d-b285-429f-a1aa-60e23fac4747",
        "parentId" : "ec01b563-37db-497c-ad53-057ed783860f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> But If you are chaning, try changing for all the dtypes? (or don't change)\r\n\r\nWe discussed earlier change CategoricalDtype.type to be object, but IIRC that was rejected (I don't recall the specifics).\r\n\r\nHappy to change `DatetimeTZDtypeType` (to `Timestamp`).",
        "createdAt" : "2018-10-02T15:13:59Z",
        "updatedAt" : "2018-10-02T18:47:55Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "012c7691-a7da-4ae2-9299-90de3b7d7ece",
        "parentId" : "ec01b563-37db-497c-ad53-057ed783860f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you see if we have tests that hit *any* of this? (if not pls add). happy to change to either way, but should just change all.",
        "createdAt" : "2018-10-02T15:16:03Z",
        "updatedAt" : "2018-10-02T18:47:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d7dd8478-67fc-4ff9-8ac3-b7199fe8d19d",
        "parentId" : "ec01b563-37db-497c-ad53-057ed783860f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "tests/dtypes/test_common.py::test__get_dtype_type hits this. Otherwise, the only path to here seems to be `_get_dtype_or_type`.",
        "createdAt" : "2018-10-02T15:27:32Z",
        "updatedAt" : "2018-10-02T18:47:55Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "4445cfdd-f496-41f0-8b80-0bdf857129c7",
        "parentId" : "ec01b563-37db-497c-ad53-057ed783860f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "And even then, for EA's it is actually never used in `_get_dtype_or_type` (I mean, there is no check function relying on that value, only for numpy dtypes)",
        "createdAt" : "2018-10-02T15:38:25Z",
        "updatedAt" : "2018-10-02T18:47:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "bccfc3f8d821d739892ea0bc6eca88e9ffb04434",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1909,1913 @@        return Timestamp\n    elif isinstance(arr_or_dtype, IntervalDtype):\n        return Interval\n    elif isinstance(arr_or_dtype, PeriodDtype):\n        return Period"
  },
  {
    "id" : "51e4fe46-2c97-4105-8cad-a638cab1249f",
    "prId" : 22938,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22938#pullrequestreview-160885595",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "519a1ed6-9170-4222-8c7d-7f75d80233be",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what about categorical??? are you sure this doesn't break anything?",
        "createdAt" : "2018-10-02T19:25:45Z",
        "updatedAt" : "2018-10-02T19:25:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0142e714-704d-4008-acf3-53245e28b224",
        "parentId" : "519a1ed6-9170-4222-8c7d-7f75d80233be",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Did you seem my comment at https://github.com/pandas-dev/pandas/pull/22938#discussion_r221993329 about categorical? We posted at the same time.\r\n\r\nWe discussed changing it to `object` earlier, but didn't see the benefit. Categorical doesn't really have a specific \"type\", so it would have to be super-general, which makes `.type` kind of useless.",
        "createdAt" : "2018-10-02T19:27:54Z",
        "updatedAt" : "2018-10-02T19:27:54Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "bccfc3f8d821d739892ea0bc6eca88e9ffb04434",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1905,1909 @@        return np.dtype(arr_or_dtype).type\n    elif isinstance(arr_or_dtype, CategoricalDtype):\n        return CategoricalDtypeType\n    elif isinstance(arr_or_dtype, DatetimeTZDtype):\n        return Timestamp"
  },
  {
    "id" : "6d3b3951-32f2-4622-a561-a9f9561b7b9d",
    "prId" : 22938,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22938#pullrequestreview-160884843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a023d752-e236-43a2-82bc-baa70b708c59",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same here",
        "createdAt" : "2018-10-02T19:25:59Z",
        "updatedAt" : "2018-10-02T19:25:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "bccfc3f8d821d739892ea0bc6eca88e9ffb04434",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1914,1918 @@    elif isinstance(arr_or_dtype, string_types):\n        if is_categorical_dtype(arr_or_dtype):\n            return CategoricalDtypeType\n        elif is_datetime64tz_dtype(arr_or_dtype):\n            return Timestamp"
  },
  {
    "id" : "e418f281-3c56-4634-9359-290e7e6a39b4",
    "prId" : 22938,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22938#pullrequestreview-161571021",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b30a362c-9aba-4bdd-8043-984aacd67d6b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what was rationale for not making this object for Categorical here? otherwise this is the odd man out ",
        "createdAt" : "2018-10-04T03:49:29Z",
        "updatedAt" : "2018-10-04T03:49:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d093c3c1-b4ed-46f8-be3d-286fe2647fe4",
        "parentId" : "b30a362c-9aba-4bdd-8043-984aacd67d6b",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I don't recall the previous discussion, but: categorical can basically be everything (so object would still be generic, that is true), but `object` is actually not a proper callable like the other types (you cannot do `object(1)`, like you can do `int(1)`, `np.int64(1)`, or `Period(..)` ), so it doesn't follow the scheme.\r\n\r\nIn principle we could pass through the `type` of the categories, but the problem is that those can be None.\r\n\r\nSince the type is actually never used (for the extension dtypes), I would also not bother too much about this one inconsistency.",
        "createdAt" : "2018-10-04T06:40:51Z",
        "updatedAt" : "2018-10-04T06:40:51Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2ad91e84-a8c3-4e70-ad91-dd3d3f8cbe34",
        "parentId" : "b30a362c-9aba-4bdd-8043-984aacd67d6b",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Joris is correct.\r\n\r\nThe only additional comment is that having a `.type` of object doesn't really tell you anything useful. But something like `Period`, `Interval`, or `Timestamp` actually is meaningful.",
        "createdAt" : "2018-10-04T11:35:03Z",
        "updatedAt" : "2018-10-04T11:35:03Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f525e38e-0092-4a9d-b245-e8697cc6ad5d",
        "parentId" : "b30a362c-9aba-4bdd-8043-984aacd67d6b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so why don't we return None then? I think it is going to be very confusing that *only* Categorical as a DtypeType, but nothing else does. If you are getting rid of it, then remove it completely.",
        "createdAt" : "2018-10-04T11:50:14Z",
        "updatedAt" : "2018-10-04T11:50:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "47dccd0c-12c3-4c70-9e9d-03b1542db757",
        "parentId" : "b30a362c-9aba-4bdd-8043-984aacd67d6b",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "None has the same drawbacks of object (cannot be called, is overly generic, does not hold any useful information). The CategoricalDtypeType at least has in its name it is the type of the CategoricalDtype",
        "createdAt" : "2018-10-04T11:52:10Z",
        "updatedAt" : "2018-10-04T11:52:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "608f4bf2-6250-4ad0-ba2c-fc9cd1eb2728",
        "parentId" : "b30a362c-9aba-4bdd-8043-984aacd67d6b",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Agreed with Joris.",
        "createdAt" : "2018-10-04T11:53:36Z",
        "updatedAt" : "2018-10-04T11:53:36Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "a5f4c96d-429f-41f7-8e92-fd484bad657a",
        "parentId" : "b30a362c-9aba-4bdd-8043-984aacd67d6b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, then",
        "createdAt" : "2018-10-04T11:54:54Z",
        "updatedAt" : "2018-10-04T11:54:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "bccfc3f8d821d739892ea0bc6eca88e9ffb04434",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1913,1917 @@        return Period\n    elif isinstance(arr_or_dtype, string_types):\n        if is_categorical_dtype(arr_or_dtype):\n            return CategoricalDtypeType\n        elif is_datetime64tz_dtype(arr_or_dtype):"
  },
  {
    "id" : "0e067c72-92ae-4a60-b62f-66a60b7b5248",
    "prId" : 23065,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23065#pullrequestreview-165602276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5ea38e0-05e1-4cc0-acd2-65eaa309a5c5",
        "parentId" : null,
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "This is somewhat of an artefact of the version with `is_ordered_list_like`, where I tried to group these methods by similarity (i.e. scalar dtypes, regexes, containers), but I decided to keep it because I think it helps. Can revert that part of course",
        "createdAt" : "2018-10-16T22:34:42Z",
        "updatedAt" : "2018-10-18T06:20:38Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "fbe016a8-150a-4759-8475-94582658e70e",
        "parentId" : "c5ea38e0-05e1-4cc0-acd2-65eaa309a5c5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes, on any change, pls try to do the minimal changeset. This will lessen reviewer burden and make things go faster.",
        "createdAt" : "2018-10-17T00:33:40Z",
        "updatedAt" : "2018-10-18T06:20:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e0fe9392-da80-4686-b74c-ce9376c0371e",
        "parentId" : "c5ea38e0-05e1-4cc0-acd2-65eaa309a5c5",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "\"yes, please try to do minimal changeset [next time]\" or \"yes please revert\"?",
        "createdAt" : "2018-10-17T05:47:34Z",
        "updatedAt" : "2018-10-18T06:20:38Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "6ee1f16e-9383-44c0-94cf-7f0c5e4c28d0",
        "parentId" : "c5ea38e0-05e1-4cc0-acd2-65eaa309a5c5",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Fine as is for now.",
        "createdAt" : "2018-10-17T11:08:04Z",
        "updatedAt" : "2018-10-18T06:20:38Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f33c9acb-d81d-456c-95cd-1f9dc9276bff",
        "parentId" : "c5ea38e0-05e1-4cc0-acd2-65eaa309a5c5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok for now, but generally pls don't change unrelated things.",
        "createdAt" : "2018-10-17T12:29:25Z",
        "updatedAt" : "2018-10-18T06:20:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab3ce9665ca0c573d235571e6620c650ad3c2deb",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +20,24 @@    is_re, is_re_compilable, is_dict_like, is_string_like, is_file_like,\n    is_list_like, is_nested_list_like, is_sequence, is_named_tuple,\n    is_hashable, is_iterator, is_array_like, is_scalar, is_interval)\n\n_POSSIBLY_CAST_DTYPES = {np.dtype(t).name"
  },
  {
    "id" : "371d100e-2e70-4907-89ec-b2310a1eed50",
    "prId" : 23917,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23917#pullrequestreview-178296856",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b1aa027-5d77-4b5d-9100-6aedcba644c7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "call the replacement",
        "createdAt" : "2018-11-26T13:53:56Z",
        "updatedAt" : "2018-11-27T16:39:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bdc157d786d3cacd5af0521bd2767b7e7a60dab",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +391,395 @@                  \"instead.\", FutureWarning, stacklevel=2)\n\n    return isinstance(arr, ABCPeriodIndex) or is_period_arraylike(arr)\n\n"
  },
  {
    "id" : "c655f661-f7ba-4108-8195-0994adbcb0a4",
    "prId" : 24541,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24541#pullrequestreview-188694658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90b5e15f-db06-4c3f-b905-e9355b1321ff",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "also catch ExtensionDType here?",
        "createdAt" : "2019-01-02T14:25:20Z",
        "updatedAt" : "2019-01-04T12:11:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "88ce52e3-f4f7-49eb-a200-cb24fd23b13d",
        "parentId" : "90b5e15f-db06-4c3f-b905-e9355b1321ff",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "at least one other place in this module with the same pattern",
        "createdAt" : "2019-01-02T14:29:45Z",
        "updatedAt" : "2019-01-04T12:11:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d4bd5e22051c8dedc42ec1ac6156f3449f09948",
    "line" : 478,
    "diffHunk" : "@@ -1,1 +1840,1844 @@\n    # fastpath\n    if isinstance(arr_or_dtype, np.dtype):\n        return condition(arr_or_dtype.type)\n    elif isinstance(arr_or_dtype, type):"
  },
  {
    "id" : "549ecebf-2459-48ef-aaae-7778168e0ea0",
    "prId" : 24541,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24541#pullrequestreview-188736128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32020c22-353e-4cfd-9aa5-006f91b4e3d6",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "you caught ExtensionDType etc in fastpath below.  is there a reason not to do it here?",
        "createdAt" : "2019-01-02T16:21:46Z",
        "updatedAt" : "2019-01-04T12:11:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d4bd5e22051c8dedc42ec1ac6156f3449f09948",
    "line" : 417,
    "diffHunk" : "@@ -1,1 +1809,1813 @@\n    # fastpath\n    elif isinstance(arr_or_dtype, np.dtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, type):"
  },
  {
    "id" : "3c11f880-7108-42c6-ab55-4bca4c0986c6",
    "prId" : 24541,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24541#pullrequestreview-188888734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0027fd8-51cf-4f8d-af65-c6ad8dfe36d5",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "should the fastpath include ExtensionDType?",
        "createdAt" : "2019-01-03T02:24:56Z",
        "updatedAt" : "2019-01-04T12:11:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d4bd5e22051c8dedc42ec1ac6156f3449f09948",
    "line" : 551,
    "diffHunk" : "@@ -1,1 +1892,1896 @@        return dtype\n    elif isinstance(dtype, (np.dtype, PandasExtensionDtype, ExtensionDtype)):\n        # dtype object\n        try:\n            _validate_date_like_dtype(dtype)"
  },
  {
    "id" : "9617e8f4-808c-4930-b7d3-a1b382457746",
    "prId" : 24541,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24541#pullrequestreview-188888776",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31f0f2b4-8a12-4085-924c-37f636fb74cd",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "extra newline?",
        "createdAt" : "2019-01-03T02:25:22Z",
        "updatedAt" : "2019-01-04T12:11:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d4bd5e22051c8dedc42ec1ac6156f3449f09948",
    "line" : 390,
    "diffHunk" : "@@ -1,1 +1773,1777 @@    -------\n    bool\n\n    \"\"\"\n"
  },
  {
    "id" : "a07659bb-bf89-4af9-97ca-c41938bb1b6d",
    "prId" : 25129,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25129#pullrequestreview-199573467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99b98e6b-61a7-4931-8051-b4275667d8c7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@datapythonista we have a lot of inconsistency whether we use boolean or bool here in the codebase. Not sure this is easy to validate.",
        "createdAt" : "2019-02-04T12:55:02Z",
        "updatedAt" : "2019-02-04T12:55:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "71f84344-1fa4-4210-b985-e9965fec81b3",
        "parentId" : "99b98e6b-61a7-4931-8051-b4275667d8c7",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I'm not sure if we validate the `Returns` section, but surely the `Parameters`. Not yet in the CI, but we'll fix all the cases soon, and add it.",
        "createdAt" : "2019-02-04T13:01:39Z",
        "updatedAt" : "2019-02-04T13:01:39Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "54e8ff59ba67a3bcce20a0a1b8721c2f13449d05",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +272,276 @@    Returns\n    -------\n    boolean\n        Whether or not the array-like is of a Categorical instance.\n"
  },
  {
    "id" : "e7457d70-b639-4cdc-8b1d-09ff2d934645",
    "prId" : 26359,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26359#pullrequestreview-236875559",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62d51489-44d5-496a-8c57-8b1f05bd96ce",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you move these comments in to a Notes section.",
        "createdAt" : "2019-05-12T20:27:01Z",
        "updatedAt" : "2019-05-16T18:40:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "654ad906-27fc-4170-ab84-714dc138e85e",
        "parentId" : "62d51489-44d5-496a-8c57-8b1f05bd96ce",
        "authorId" : "093d4877-be84-4d27-a655-b3adee9eed25",
        "body" : "done",
        "createdAt" : "2019-05-13T19:34:58Z",
        "updatedAt" : "2019-05-16T18:40:21Z",
        "lastEditedBy" : "093d4877-be84-4d27-a655-b3adee9eed25",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce22d54829b18d1fd6496c97083909b98783de81",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +93,97 @@    \"\"\"\n    Ensure that an dtype array of some integer dtype\n    has an int64 dtype if possible.\n    If it's not possible, potentially because of overflow,\n    convert the array to float64 instead."
  },
  {
    "id" : "3cf21221-2b88-495f-bb2a-a73511ee86f4",
    "prId" : 26359,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26359#pullrequestreview-236875713",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "580733f8-4483-42e2-ab57-189663fa7373",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "make this simpler; these statements are for the Notes section",
        "createdAt" : "2019-05-12T20:28:47Z",
        "updatedAt" : "2019-05-16T18:40:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "781e5999-e963-4468-92e5-acc6b7851b9e",
        "parentId" : "580733f8-4483-42e2-ab57-189663fa7373",
        "authorId" : "093d4877-be84-4d27-a655-b3adee9eed25",
        "body" : "done (moved what I added to the notes section)",
        "createdAt" : "2019-05-13T19:35:17Z",
        "updatedAt" : "2019-05-16T18:40:21Z",
        "lastEditedBy" : "093d4877-be84-4d27-a655-b3adee9eed25",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce22d54829b18d1fd6496c97083909b98783de81",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +107,111 @@    Returns\n    -------\n    out_arr : The input array cast as int64 if\n              possible without overflow.\n              Otherwise the input array cast to float64."
  },
  {
    "id" : "c87cd67e-a570-4ae1-a913-dd2a43ff726d",
    "prId" : 26359,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26359#pullrequestreview-236875801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a57f829c-2117-4bcc-93bb-9038aedb925f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "rename this to: ensure_int_or_float",
        "createdAt" : "2019-05-12T20:29:13Z",
        "updatedAt" : "2019-05-16T18:40:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e12a8df6-bd2b-4ee6-87b5-fbfb6a2bd02e",
        "parentId" : "a57f829c-2117-4bcc-93bb-9038aedb925f",
        "authorId" : "093d4877-be84-4d27-a655-b3adee9eed25",
        "body" : "done",
        "createdAt" : "2019-05-13T19:35:28Z",
        "updatedAt" : "2019-05-16T18:40:21Z",
        "lastEditedBy" : "093d4877-be84-4d27-a655-b3adee9eed25",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce22d54829b18d1fd6496c97083909b98783de81",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +92,96 @@def ensure_int_or_float(arr: ArrayLike, copy=False) -> np.array:\n    \"\"\"\n    Ensure that an dtype array of some integer dtype\n    has an int64 dtype if possible.\n    If it's not possible, potentially because of overflow,"
  },
  {
    "id" : "ba2e243f-af5f-405b-b566-394f389e80f3",
    "prId" : 26359,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26359#pullrequestreview-237400915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9792b3ca-b324-4329-b823-4b279a5d2cdb",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Nice annotation!",
        "createdAt" : "2019-05-13T20:00:47Z",
        "updatedAt" : "2019-05-16T18:40:21Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "de9845bc-b169-4e1a-b5d7-3c80cac83cea",
        "parentId" : "9792b3ca-b324-4329-b823-4b279a5d2cdb",
        "authorId" : "093d4877-be84-4d27-a655-b3adee9eed25",
        "body" : "hah thanks, it was actually due to the other reviewer :)",
        "createdAt" : "2019-05-14T17:41:42Z",
        "updatedAt" : "2019-05-16T18:40:21Z",
        "lastEditedBy" : "093d4877-be84-4d27-a655-b3adee9eed25",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce22d54829b18d1fd6496c97083909b98783de81",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +90,94 @@\n\ndef ensure_int_or_float(arr: ArrayLike, copy=False) -> np.array:\n    \"\"\"\n    Ensure that an dtype array of some integer dtype"
  }
]