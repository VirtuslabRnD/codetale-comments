[
  {
    "id" : "181ec7b4-ec9c-4350-a87c-dd8958873bbe",
    "prId" : 16015,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16015#pullrequestreview-63333746",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8462f5f-f2e1-4da3-b50a-778e93314052",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is not really necessary if you allow ``CategoricalDtype(dtype)`` IOW, you can check whether the incoming ``categories`` is an instance of a ``CagetegoricalDtype`` and act accordingly.",
        "createdAt" : "2017-08-12T17:53:58Z",
        "updatedAt" : "2017-09-23T16:33:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a1ea5ba0-5cb7-4a55-a5b4-9ba96c54c584",
        "parentId" : "b8462f5f-f2e1-4da3-b50a-778e93314052",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "?",
        "createdAt" : "2017-09-17T14:37:37Z",
        "updatedAt" : "2017-09-23T16:33:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b9003db7-322b-46be-a7b2-cd232e575e39",
        "parentId" : "b8462f5f-f2e1-4da3-b50a-778e93314052",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'm not sure I like overloading the `categories` like that. ",
        "createdAt" : "2017-09-18T12:28:06Z",
        "updatedAt" : "2017-09-23T16:33:32Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "43f90cc13786b57b89709cdb7dd8d2c023adaee6",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +1708,1712 @@        categories = getattr(dtype, 'categories', None)\n        ordered = getattr(dtype, 'ordered', False)\n        dtype = CategoricalDtype(categories=categories, ordered=ordered)\n    elif is_datetime64tz_dtype(dtype):\n        dtype = DatetimeTZDtype(dtype)"
  },
  {
    "id" : "e77108ac-ac99-423a-8246-f082cc99dc8f",
    "prId" : 16638,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16638#pullrequestreview-43174845",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a059ef6-248a-4235-b4c9-849f6177205f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is fine\r\nbut need tests that hit this",
        "createdAt" : "2017-06-09T14:47:14Z",
        "updatedAt" : "2017-07-05T14:53:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5f43a08898733e6cc58fe29a578267d81104534",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +399,403 @@    try:\n        tipo = _get_dtype_type(arr_or_dtype)\n    except ValueError:\n        return False\n    return issubclass(tipo, np.timedelta64)"
  },
  {
    "id" : "cccfe242-2d86-4c16-ab87-05680d006fde",
    "prId" : 18677,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18677#pullrequestreview-81772983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7ad7439-cce1-4ae3-9fa4-a8c0362534ee",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Changed this because switching to `pandas_dtype` caused a test to break since it was passing `'interval'` as the dtype, which appears to be valid:\r\n```python\r\nIn [1]: from pandas.core.dtypes.common import is_interval_dtype\r\n\r\nIn [2]: is_interval_dtype('interval')\r\nOut[2]: True\r\n```",
        "createdAt" : "2017-12-07T08:14:43Z",
        "updatedAt" : "2017-12-11T07:40:52Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "60421314618f39a77f5d4a94a4b3f2462118e7fa",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1935,1939 @@                pass\n\n        elif dtype.startswith('interval') or dtype.startswith('Interval'):\n            try:\n                return IntervalDtype.construct_from_string(dtype)"
  },
  {
    "id" : "f614acea-cc69-421e-a530-dc1b8008f9ee",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93264997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "153ba9e0-3895-425d-b68d-e06547c8b721",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you need to call ``_get_dtype_type`` here, this can *only* have a result of ExtensionDtype and NOT ExtensionArray, which doesn't make any sense.",
        "createdAt" : "2018-01-28T21:07:04Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7bf2699f-7843-4cf2-9a58-ffc06fb80368",
        "parentId" : "153ba9e0-3895-425d-b68d-e06547c8b721",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "If you pass this function an ExtensionArray subclass, you will get that here?",
        "createdAt" : "2018-01-28T21:59:48Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "98069f7e-050d-44f4-8e69-2a701ad882b8",
        "parentId" : "153ba9e0-3895-425d-b68d-e06547c8b721",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> this can only have a result of ExtensionDtype and NOT ExtensionArray, which doesn't make any sense.\r\n\r\nThe result is just True or False. The argument can be either an array or dtype.\r\n\r\nI'm not sure that `_get_dtype_or_type` does what we want here. That grabs `arr.dtype.type`, which is a scalar like `str` or `Interval` or `ipaddress.IPv4Address`. What would we do with that?",
        "createdAt" : "2018-01-30T19:29:39Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "db946263-cd57-4d01-a43e-12a3d135b486",
        "parentId" : "153ba9e0-3895-425d-b68d-e06547c8b721",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is not following what we do in all other cases that's my point. pls use _get_dtype_or_type",
        "createdAt" : "2018-02-01T00:13:52Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5db56a99-95fa-4aa1-bc36-85e5c178d704",
        "parentId" : "153ba9e0-3895-425d-b68d-e06547c8b721",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> this is not following what we do in all other cases that's my point.\r\n\r\nThat won't work unfortunately.\r\n\r\n```python\r\nIn [1]: import pandas as pd; import pandas_ip as ip\r\n\r\nIn [2]: arr = ip.IPAddress([1, 2, 3])\r\n\r\nIn [3]: pd.core.dtypes.common._get_dtype_type(arr)\r\nOut[3]: pandas_ip.block.IPv4v6Base\r\n```\r\n\r\n`IPv4v6Base` isn't an instance of `ExtensionType`. It's the type scalars belong to.\r\n\r\n```python\r\nIn [4]: isinstance(arr[0], ip.block.IPv4v6Base)\r\nOut[4]: True\r\n\r\nIn [5]: issubclass(ip.block.IPv4v6Base, pd.core.dtypes.base.ExtensionDtype)\r\nOut[5]: False\r\n```\r\n\r\n`_get_dtype_or_type` works for our extension types, since if we get a `CategoricalDtypeType` we can say \"this is a categorical\". But we can't do that for arbitrary 3rd party types.",
        "createdAt" : "2018-02-01T02:50:29Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "073862bc-8246-4bf5-b055-98a6a7267b65",
        "parentId" : "153ba9e0-3895-425d-b68d-e06547c8b721",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "then ``_get_dtype_or_type`` needs adjustment. This is the point of compatibility, there shouldn't be the need to have special cases.",
        "createdAt" : "2018-02-01T12:21:50Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4aaef548-8af0-4781-9b12-46b838888885",
        "parentId" : "153ba9e0-3895-425d-b68d-e06547c8b721",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But that would make `get_dtype_or_type` inconsistent, as it would no longer *always* return a dtype type, but in certain cases a dtype",
        "createdAt" : "2018-02-01T12:30:58Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4e76b7e2-aec2-4552-acb1-0fa1bdfddd59",
        "parentId" : "153ba9e0-3895-425d-b68d-e06547c8b721",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "`_get_dtype_type` does exactly what it's supposed to do, `values.dtype.type`. But that's not useful here!\r\n\r\nWhat's the issue with the function as defined? I need a way to tell if an array or dtype is an ExtensionArray or ExtensionDtype. Someday, when `Categorical`, `SparseArray`, `IntervalArray`, `PeriodArray`, `datetimetz`, etc are extension arrays then all the *special cases* currently in `_get_dtype_type` and friends can be removed, but we aren't there yet. We're doing things in small steps.",
        "createdAt" : "2018-02-01T12:34:18Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1712,1716 @@    if isinstance(arr_or_dtype, ABCSeries):\n        arr_or_dtype = arr_or_dtype._values\n    return isinstance(arr_or_dtype, (ExtensionDtype, ExtensionArray))\n\n"
  },
  {
    "id" : "909e41c2-5560-4fa3-8298-de46339e16a1",
    "prId" : 19983,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19983#pullrequestreview-101619073",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a151708c-bca5-401e-bfe1-10ead4a808c0",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "It will take some research, but I think it would be useful to explain what are the use cases of this function, besides what it does.",
        "createdAt" : "2018-03-06T16:38:23Z",
        "updatedAt" : "2018-11-13T06:27:45Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a78a39b77a4c2855d705e6fcff457d747d97ed9",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +155,159 @@    Check that the one-dimensional array-like is a pandas sparse array.\n    Returns True if it is a pandas sparse array, not another type of\n    sparse array.\n\n    Parameters"
  },
  {
    "id" : "e3321244-c132-4237-b4ac-da0d0a169403",
    "prId" : 19983,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19983#pullrequestreview-101619073",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3f91971-2978-47fd-b7ad-ce16e185cb59",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think it make sense to also add `to_dense`, if we list `to_sparse`.",
        "createdAt" : "2018-03-06T16:45:38Z",
        "updatedAt" : "2018-11-13T06:27:45Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a78a39b77a4c2855d705e6fcff457d747d97ed9",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +170,174 @@    --------\n    DataFrame.to_sparse : Convert DataFrame to a SparseDataFrame.\n    Series.to_sparse : Convert Series to SparseSeries.\n    Series.to_dense : Return dense representation of a Series.\n"
  },
  {
    "id" : "d15a8cd5-0036-4b62-a061-8aa20e4f8a9a",
    "prId" : 19983,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19983#pullrequestreview-102490549",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2338029-8e0a-431c-bbc9-1a28948dae81",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I'd be explicit here in saying, return false if it has more than one dimension, even if it is sparse. Minor change, but I think it's a bit more clear.",
        "createdAt" : "2018-03-08T22:49:57Z",
        "updatedAt" : "2018-11-13T06:27:45Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a78a39b77a4c2855d705e6fcff457d747d97ed9",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +195,199 @@    False\n\n    Returns `False` if the parameter has more than one dimension.\n\n    >>> df = pd.SparseDataFrame([389., 24., 80.5, np.nan],"
  },
  {
    "id" : "7db7fce3-5fd5-4350-b64a-6d44497501e5",
    "prId" : 19983,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19983#pullrequestreview-102490549",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d35efb94-46a2-4b72-84dc-94fa18a321a5",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Personally I find this paragraph not so clear. I think something like this would be shorter and also clearer: \"Return `True` if `arr` is `pandas.SparseArray` or `pandas.SparseSeries`, and `False` for any other type.\"",
        "createdAt" : "2018-03-08T22:53:55Z",
        "updatedAt" : "2018-11-13T06:27:45Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a78a39b77a4c2855d705e6fcff457d747d97ed9",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +155,159 @@    Check that the one-dimensional array-like is a pandas sparse array.\n    Returns True if it is a pandas sparse array, not another type of\n    sparse array.\n\n    Parameters"
  },
  {
    "id" : "0abb8619-0fe6-4646-8e4c-36712f5b9e4e",
    "prId" : 19983,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19983#pullrequestreview-102490549",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8501bb6f-286b-44b8-944b-61469a3cb0a6",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Based on my comment above, I think we want to include in the see also the mentioned methods `pandas.SparseArray` and `pandas.SparseSeries`. Also, may be it makes sense to get rid of `DataFrame.to_sparse`, as it's not so directly related.",
        "createdAt" : "2018-03-08T22:55:46Z",
        "updatedAt" : "2018-11-13T06:27:45Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a78a39b77a4c2855d705e6fcff457d747d97ed9",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +171,175 @@    DataFrame.to_sparse : Convert DataFrame to a SparseDataFrame.\n    Series.to_sparse : Convert Series to SparseSeries.\n    Series.to_dense : Return dense representation of a Series.\n\n    Examples"
  },
  {
    "id" : "f088ce76-27bc-4387-b90d-e4f3f98dfcce",
    "prId" : 21008,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21008#pullrequestreview-119387558",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88fa5511-889d-4b92-a05a-27c12a84b2dc",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "There are quite some other places where we use relative imports as well (but of course not consistently ..), but so why change those and not others?",
        "createdAt" : "2018-05-11T09:02:15Z",
        "updatedAt" : "2018-06-22T19:53:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e28691cc-7f55-4d14-9013-99b99143a0b4",
        "parentId" : "88fa5511-889d-4b92-a05a-27c12a84b2dc",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "It wasn’t the relative import that mypy was complaining about as much as the starred import. I just figured I’d convert the relative to absolute while I was touching the module",
        "createdAt" : "2018-05-11T10:26:22Z",
        "updatedAt" : "2018-06-22T19:53:39Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "60642edf948eec9142ba96ccb3bf578e9b108371",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +6,10 @@from pandas._libs import algos, lib\nfrom pandas._libs.tslibs import conversion\nfrom pandas.core.dtypes.dtypes import (\n    CategoricalDtype, CategoricalDtypeType, DatetimeTZDtype,\n    DatetimeTZDtypeType, PeriodDtype, PeriodDtypeType, IntervalDtype,"
  },
  {
    "id" : "93f4955a-87f2-4a94-829e-e00a5de4777c",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-152041541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e122f500-3025-401b-a946-56bc33150598",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "much nicer",
        "createdAt" : "2018-09-04T12:30:34Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +184,188 @@    from pandas.core.sparse.dtype import SparseDtype\n\n    dtype = getattr(arr, 'dtype', arr)\n    return isinstance(dtype, SparseDtype)\n"
  }
]