[
  {
    "id" : "965cfd3a-0488-4da9-a085-e91d73f7de92",
    "prId" : 28213,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28213#pullrequestreview-286827201",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "did you remove passing the args, kwargs on purpose? (I am not sure we are testing these)",
        "createdAt" : "2019-09-02T21:36:07Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1aa66e47-9330-4181-a9a0-85107e209ec8",
        "parentId" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "That was done on purpose since the the args were already passed here: https://github.com/pandas-dev/pandas/blob/cb68153f4b6fca19440ec6b79a0d1128c002ec11/pandas/core/apply.py#L112\r\nThis meant that for `nunique` (and possibly other functions) the line inside the `try` clause would raise an error and `reduce` would never become `True`, and so we just end up returning a copy of the empty `DataFrame` due to the logic below.",
        "createdAt" : "2019-09-02T22:18:29Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "1d4cd457-6f31-4570-a470-53915e62877b",
        "parentId" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, I am surpised this didn't break anything else, nor am I convinced this is the correct change (not that the original is any better); can you narrow the Exception here?",
        "createdAt" : "2019-09-08T14:13:41Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6b6506fc-836a-45d4-8e92-d4e83e1af0aa",
        "parentId" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "FWIW ive got a branch that tries to narrow this exception.  IIRC part of the problem is that DataFrame.applymap defines\r\n\r\n```\r\ndef infer(x):\r\n    if x.empty:\r\n        return lib.map_infer(x, func)\r\n    return lib.map_infer(x.astype(object).values, func)\r\n```\r\n\r\nand in the empty case that raises because it `x` is a Series where map_infer expects an ndarray.  Then IIRC there was an issue that I fixed by making `infer` return `self._constructor(lib.map_infer(x._values, func), index=self.index, columns=self.columns)`, but that turned out to cause (hidden) problems elsewhere, and that was where that branch left off.",
        "createdAt" : "2019-09-08T17:22:38Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bf556d91-3027-4015-846b-f00a1e539c10",
        "parentId" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "If we remove _all_ error-catching here then two tests fail, the one @jbrockmendel mentions and `test_apply_empty`, which raises a `KeyError`.  This is because the test tries to apply the function `lambda x: x[\"a\"]` over the rows of `DataFrame(index=[\"a\"])`, but obviously this won't work because we're passing the barren `Series([])` object to that function in the `try` clause.  It works on `master` because the expected output is just the original `DataFrame` which gets returned down below.\r\n\r\nSo I guess something like `df.apply(lambda x: x.name)` would still give incorrect output on an empty `DataFrame` after this.",
        "createdAt" : "2019-09-09T01:08:27Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "1d6b77ea-b96a-4d4e-a9c2-e245fc670f4f",
        "parentId" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "IIUC this PR isn't intended for applymap, just apply, right?  i.e. the snippet from my previous comment is out of scope?",
        "createdAt" : "2019-09-09T01:34:40Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7ce3fa02-2fb2-431b-ad80-f92150dd7232",
        "parentId" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "> IIUC this PR isn't intended for applymap, just apply, right? i.e. the snippet from my previous comment is out of scope?\r\n\r\nOriginally I was just thinking `apply`, but if it affects `applymap` as well I'd say it's relevant",
        "createdAt" : "2019-09-09T22:10:02Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "3e4839a6-fa9d-4aa1-9c27-650912c34710",
        "parentId" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Narrowed the exception down the the minimal set that still allows the tests to pass.  `ValueError` because of the `Series` vs. `ndarray` thing, `KeyError` because of the test that looks specifically at the column name.",
        "createdAt" : "2019-09-09T22:19:32Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "9da6a28c-9f55-4f9f-8010-8d98e2334218",
        "parentId" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "are there any restrictions on what `self.f` can be?  i.e. it can be a weird user-provided function right?  If so, then we probably can't get much more specific here.",
        "createdAt" : "2019-09-10T03:36:34Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0d0adabe-ed92-4f42-9bbb-f56ccad22d8b",
        "parentId" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Yeah, I think it can be any arbitrary user-defined function",
        "createdAt" : "2019-09-11T13:59:04Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "9d004a8f-0b58-4f39-9ea6-d47c2e9ecb2e",
        "parentId" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We probably want to keep `Exception` then to not introduce an accidental behavior change.",
        "createdAt" : "2019-09-11T14:19:52Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3077aaa4f0cb273774061f41b2dcf68eb2a488e",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +206,210 @@        if not should_reduce:\n            try:\n                r = self.f(Series([]))\n            except Exception:\n                pass"
  },
  {
    "id" : "f8d8c0b5-1c8c-4ca5-90b2-d84385a0f8a8",
    "prId" : 28213,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28213#pullrequestreview-282706839",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "170673dd-0399-498f-b1e7-d8693dba47b3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pass args & kwargs",
        "createdAt" : "2019-09-02T21:37:14Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3077aaa4f0cb273774061f41b2dcf68eb2a488e",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +214,218 @@        if should_reduce:\n            if len(self.agg_axis):\n                r = self.f(Series([]))\n            else:\n                r = np.nan"
  },
  {
    "id" : "4212e2da-9bd8-4f28-a916-f981b0f9c587",
    "prId" : 28213,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28213#pullrequestreview-290853556",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eadb605d-7027-44ba-bc0b-5ea2928b5353",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we *already* are trying to reduce above (line 208), why are you calling the function again? does this hit the Except?",
        "createdAt" : "2019-09-02T21:39:16Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1415d0ef-c29c-4121-8df6-5ead9c793e13",
        "parentId" : "eadb605d-7027-44ba-bc0b-5ea2928b5353",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "I did that in case `reduce` was already `True` at line 206, so that the `try` block wouldn't have been executed",
        "createdAt" : "2019-09-02T22:21:21Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "db7e5fcf-2b58-4aa7-8ba8-f89996099b04",
        "parentId" : "eadb605d-7027-44ba-bc0b-5ea2928b5353",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i am still puzzled why you can not pass args/kwargs ",
        "createdAt" : "2019-09-13T21:52:26Z",
        "updatedAt" : "2019-09-13T21:52:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "34333c67-ba68-4986-9e2b-bd24e4e93baf",
        "parentId" : "eadb605d-7027-44ba-bc0b-5ea2928b5353",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "I think what's happening is the function `self.f` is getting curried around here: https://github.com/pandas-dev/pandas/blob/cb68153f4b6fca19440ec6b79a0d1128c002ec11/pandas/core/apply.py#L109 so when we pass the arguments _again_ we get an error (this is from the `df.nunique()` test):\r\n```\r\n>           r = self.f(Series([]), *self.args, **self.kwds)\r\nE           TypeError: f() got an unexpected keyword argument 'dropna'\r\n```\r\nbecause at that point `f` only takes a single argument.  I could imagine there could end up being a problem if this currying doesn't happen, so there's probably a hidden corner case that just isn't covered by the existing tests.",
        "createdAt" : "2019-09-13T22:20:15Z",
        "updatedAt" : "2019-09-13T22:22:32Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "f4c0feca-983c-462d-b733-3cc469146086",
        "parentId" : "eadb605d-7027-44ba-bc0b-5ea2928b5353",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Was confused by this to but I think this makes sense. I suppose this was hitting the `except` before due to a `TypeError` for wrong number of arguments?",
        "createdAt" : "2019-09-19T21:28:17Z",
        "updatedAt" : "2019-09-19T21:28:18Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3077aaa4f0cb273774061f41b2dcf68eb2a488e",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +214,218 @@        if should_reduce:\n            if len(self.agg_axis):\n                r = self.f(Series([]))\n            else:\n                r = np.nan"
  },
  {
    "id" : "0e730e98-c961-4156-8f91-f4ab803a5200",
    "prId" : 28643,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28643#pullrequestreview-294356635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b11d1d8-d0d1-4f40-bd14-8002b99b4421",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "added test for this?",
        "createdAt" : "2019-09-27T11:50:05Z",
        "updatedAt" : "2019-09-27T11:50:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d9d078fa-5549-4c9d-bf18-845dc04ef21f",
        "parentId" : "3b11d1d8-d0d1-4f40-bd14-8002b99b4421",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Existing test `test_subclassed_apply` needs this",
        "createdAt" : "2019-09-27T14:19:09Z",
        "updatedAt" : "2019-09-27T14:19:09Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ae12d1a964a637faea12ac9c42ede5497449c48",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +286,290 @@            empty_arr = np.empty(len(index), dtype=values.dtype)\n\n            # Preserve subclass for e.g. test_subclassed_apply\n            dummy = self.obj._constructor_sliced(\n                empty_arr, index=index, dtype=values.dtype"
  }
]