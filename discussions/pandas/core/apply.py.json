[
  {
    "id" : "965cfd3a-0488-4da9-a085-e91d73f7de92",
    "prId" : 28213,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28213#pullrequestreview-286827201",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "did you remove passing the args, kwargs on purpose? (I am not sure we are testing these)",
        "createdAt" : "2019-09-02T21:36:07Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1aa66e47-9330-4181-a9a0-85107e209ec8",
        "parentId" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "That was done on purpose since the the args were already passed here: https://github.com/pandas-dev/pandas/blob/cb68153f4b6fca19440ec6b79a0d1128c002ec11/pandas/core/apply.py#L112\r\nThis meant that for `nunique` (and possibly other functions) the line inside the `try` clause would raise an error and `reduce` would never become `True`, and so we just end up returning a copy of the empty `DataFrame` due to the logic below.",
        "createdAt" : "2019-09-02T22:18:29Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "1d4cd457-6f31-4570-a470-53915e62877b",
        "parentId" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, I am surpised this didn't break anything else, nor am I convinced this is the correct change (not that the original is any better); can you narrow the Exception here?",
        "createdAt" : "2019-09-08T14:13:41Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6b6506fc-836a-45d4-8e92-d4e83e1af0aa",
        "parentId" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "FWIW ive got a branch that tries to narrow this exception.  IIRC part of the problem is that DataFrame.applymap defines\r\n\r\n```\r\ndef infer(x):\r\n    if x.empty:\r\n        return lib.map_infer(x, func)\r\n    return lib.map_infer(x.astype(object).values, func)\r\n```\r\n\r\nand in the empty case that raises because it `x` is a Series where map_infer expects an ndarray.  Then IIRC there was an issue that I fixed by making `infer` return `self._constructor(lib.map_infer(x._values, func), index=self.index, columns=self.columns)`, but that turned out to cause (hidden) problems elsewhere, and that was where that branch left off.",
        "createdAt" : "2019-09-08T17:22:38Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bf556d91-3027-4015-846b-f00a1e539c10",
        "parentId" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "If we remove _all_ error-catching here then two tests fail, the one @jbrockmendel mentions and `test_apply_empty`, which raises a `KeyError`.  This is because the test tries to apply the function `lambda x: x[\"a\"]` over the rows of `DataFrame(index=[\"a\"])`, but obviously this won't work because we're passing the barren `Series([])` object to that function in the `try` clause.  It works on `master` because the expected output is just the original `DataFrame` which gets returned down below.\r\n\r\nSo I guess something like `df.apply(lambda x: x.name)` would still give incorrect output on an empty `DataFrame` after this.",
        "createdAt" : "2019-09-09T01:08:27Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "1d6b77ea-b96a-4d4e-a9c2-e245fc670f4f",
        "parentId" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "IIUC this PR isn't intended for applymap, just apply, right?  i.e. the snippet from my previous comment is out of scope?",
        "createdAt" : "2019-09-09T01:34:40Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7ce3fa02-2fb2-431b-ad80-f92150dd7232",
        "parentId" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "> IIUC this PR isn't intended for applymap, just apply, right? i.e. the snippet from my previous comment is out of scope?\r\n\r\nOriginally I was just thinking `apply`, but if it affects `applymap` as well I'd say it's relevant",
        "createdAt" : "2019-09-09T22:10:02Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "3e4839a6-fa9d-4aa1-9c27-650912c34710",
        "parentId" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Narrowed the exception down the the minimal set that still allows the tests to pass.  `ValueError` because of the `Series` vs. `ndarray` thing, `KeyError` because of the test that looks specifically at the column name.",
        "createdAt" : "2019-09-09T22:19:32Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "9da6a28c-9f55-4f9f-8010-8d98e2334218",
        "parentId" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "are there any restrictions on what `self.f` can be?  i.e. it can be a weird user-provided function right?  If so, then we probably can't get much more specific here.",
        "createdAt" : "2019-09-10T03:36:34Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0d0adabe-ed92-4f42-9bbb-f56ccad22d8b",
        "parentId" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Yeah, I think it can be any arbitrary user-defined function",
        "createdAt" : "2019-09-11T13:59:04Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "9d004a8f-0b58-4f39-9ea6-d47c2e9ecb2e",
        "parentId" : "bfe42e92-ab61-4012-b9c4-41880fd7fa17",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We probably want to keep `Exception` then to not introduce an accidental behavior change.",
        "createdAt" : "2019-09-11T14:19:52Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3077aaa4f0cb273774061f41b2dcf68eb2a488e",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +206,210 @@        if not should_reduce:\n            try:\n                r = self.f(Series([]))\n            except Exception:\n                pass"
  },
  {
    "id" : "f8d8c0b5-1c8c-4ca5-90b2-d84385a0f8a8",
    "prId" : 28213,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28213#pullrequestreview-282706839",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "170673dd-0399-498f-b1e7-d8693dba47b3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pass args & kwargs",
        "createdAt" : "2019-09-02T21:37:14Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3077aaa4f0cb273774061f41b2dcf68eb2a488e",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +214,218 @@        if should_reduce:\n            if len(self.agg_axis):\n                r = self.f(Series([]))\n            else:\n                r = np.nan"
  },
  {
    "id" : "4212e2da-9bd8-4f28-a916-f981b0f9c587",
    "prId" : 28213,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28213#pullrequestreview-290853556",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eadb605d-7027-44ba-bc0b-5ea2928b5353",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we *already* are trying to reduce above (line 208), why are you calling the function again? does this hit the Except?",
        "createdAt" : "2019-09-02T21:39:16Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1415d0ef-c29c-4121-8df6-5ead9c793e13",
        "parentId" : "eadb605d-7027-44ba-bc0b-5ea2928b5353",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "I did that in case `reduce` was already `True` at line 206, so that the `try` block wouldn't have been executed",
        "createdAt" : "2019-09-02T22:21:21Z",
        "updatedAt" : "2019-09-12T13:19:29Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "db7e5fcf-2b58-4aa7-8ba8-f89996099b04",
        "parentId" : "eadb605d-7027-44ba-bc0b-5ea2928b5353",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i am still puzzled why you can not pass args/kwargs ",
        "createdAt" : "2019-09-13T21:52:26Z",
        "updatedAt" : "2019-09-13T21:52:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "34333c67-ba68-4986-9e2b-bd24e4e93baf",
        "parentId" : "eadb605d-7027-44ba-bc0b-5ea2928b5353",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "I think what's happening is the function `self.f` is getting curried around here: https://github.com/pandas-dev/pandas/blob/cb68153f4b6fca19440ec6b79a0d1128c002ec11/pandas/core/apply.py#L109 so when we pass the arguments _again_ we get an error (this is from the `df.nunique()` test):\r\n```\r\n>           r = self.f(Series([]), *self.args, **self.kwds)\r\nE           TypeError: f() got an unexpected keyword argument 'dropna'\r\n```\r\nbecause at that point `f` only takes a single argument.  I could imagine there could end up being a problem if this currying doesn't happen, so there's probably a hidden corner case that just isn't covered by the existing tests.",
        "createdAt" : "2019-09-13T22:20:15Z",
        "updatedAt" : "2019-09-13T22:22:32Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "f4c0feca-983c-462d-b733-3cc469146086",
        "parentId" : "eadb605d-7027-44ba-bc0b-5ea2928b5353",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Was confused by this to but I think this makes sense. I suppose this was hitting the `except` before due to a `TypeError` for wrong number of arguments?",
        "createdAt" : "2019-09-19T21:28:17Z",
        "updatedAt" : "2019-09-19T21:28:18Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3077aaa4f0cb273774061f41b2dcf68eb2a488e",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +214,218 @@        if should_reduce:\n            if len(self.agg_axis):\n                r = self.f(Series([]))\n            else:\n                r = np.nan"
  },
  {
    "id" : "0e730e98-c961-4156-8f91-f4ab803a5200",
    "prId" : 28643,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28643#pullrequestreview-294356635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b11d1d8-d0d1-4f40-bd14-8002b99b4421",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "added test for this?",
        "createdAt" : "2019-09-27T11:50:05Z",
        "updatedAt" : "2019-09-27T11:50:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d9d078fa-5549-4c9d-bf18-845dc04ef21f",
        "parentId" : "3b11d1d8-d0d1-4f40-bd14-8002b99b4421",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Existing test `test_subclassed_apply` needs this",
        "createdAt" : "2019-09-27T14:19:09Z",
        "updatedAt" : "2019-09-27T14:19:09Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ae12d1a964a637faea12ac9c42ede5497449c48",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +286,290 @@            empty_arr = np.empty(len(index), dtype=values.dtype)\n\n            # Preserve subclass for e.g. test_subclassed_apply\n            dummy = self.obj._constructor_sliced(\n                empty_arr, index=index, dtype=values.dtype"
  },
  {
    "id" : "96d077dd-a26f-4303-92c9-7dcad9c1439e",
    "prId" : 29298,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29298#pullrequestreview-309966413",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c6eb389-d926-41cc-a9f9-22c8005447d5",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I personally think this can be informative, though. \r\nIs this that problematic? (we are raising the same exception again, so it is not hiding any exceptions?)",
        "createdAt" : "2019-10-31T07:56:59Z",
        "updatedAt" : "2019-10-31T07:57:27Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ff1891b0-886f-4315-8aa2-d6e2c41d59c5",
        "parentId" : "9c6eb389-d926-41cc-a9f9-22c8005447d5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The index information can be useful, but this can also make it harder to reason about what parts of the code are exception-raising.\r\n\r\nThis can go either way.  If there's a consensus to keep it, I'll revert.",
        "createdAt" : "2019-10-31T14:48:07Z",
        "updatedAt" : "2019-10-31T14:48:07Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7bad2d08-6013-4f27-b5cc-8a723456c177",
        "parentId" : "9c6eb389-d926-41cc-a9f9-22c8005447d5",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you explain how this makes it harder to reason about? This simply reraises what has been raised (with an edited error message), no?",
        "createdAt" : "2019-10-31T14:57:07Z",
        "updatedAt" : "2019-10-31T14:57:07Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c315915f-e658-4f9c-ad56-e2e2f1cb4dff",
        "parentId" : "9c6eb389-d926-41cc-a9f9-22c8005447d5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> Can you explain how this makes it harder to reason about?\r\n\r\nWell it's an idiosyncratic thing, so no.",
        "createdAt" : "2019-10-31T15:23:32Z",
        "updatedAt" : "2019-10-31T15:23:32Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d918c95b34df2f8c471fa187758f7aa51a61027",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +294,298 @@            for i, v in enumerate(series_gen):\n                results[i] = self.f(v)\n                keys.append(v.name)\n\n        self.results = results"
  },
  {
    "id" : "e6fa6a4a-ab00-4ace-9547-d480e3ddcff3",
    "prId" : 29477,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29477#pullrequestreview-314346883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "176547b5-bed1-40cb-a571-1c79f22bd1d2",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "should we consider making FrameApply generic if we want subclassed DataFrames to return same type?",
        "createdAt" : "2019-11-08T11:10:38Z",
        "updatedAt" : "2019-11-11T23:02:02Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "0c86da4c-ab76-4afa-85c7-3b45498e54d6",
        "parentId" : "176547b5-bed1-40cb-a571-1c79f22bd1d2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "im not sure i understand the question.  FrameApply is the base class for ColumnFrameApply and RowFrameApply",
        "createdAt" : "2019-11-08T17:07:05Z",
        "updatedAt" : "2019-11-11T23:02:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d4cdbf5b-167a-4c7e-8209-512d8be018a2",
        "parentId" : "176547b5-bed1-40cb-a571-1c79f22bd1d2",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I've not looked in detail but may not be relevant here.\r\n\r\nNot sure how geopandas (or other downstream packages work), Just keeping in mind that, say GeoDataFrame, may return a GeoDataFrame with certain operations.\r\n\r\ndid start to type geopandas so I had a better idea, see https://github.com/geopandas/geopandas/compare/master...simonjayhawkins:typing. \r\n\r\nNote to self: Should try and get back to this.",
        "createdAt" : "2019-11-08T17:23:35Z",
        "updatedAt" : "2019-11-11T23:02:02Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "82479f492eb66054929aa159d00b08926f614268",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +73,77 @@    def __init__(\n        self,\n        obj: \"DataFrame\",\n        func,\n        raw: bool,"
  },
  {
    "id" : "db05a066-a9ac-4353-a9cb-0e88997f4bdd",
    "prId" : 29477,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29477#pullrequestreview-314344951",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5d5cb5f-39b8-4725-8052-c008555632c9",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "For return types, this could also be typed as `Iterable`. we've done this in a couple of places.",
        "createdAt" : "2019-11-08T11:14:48Z",
        "updatedAt" : "2019-11-11T23:02:02Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "48ff67d5-6e97-42a3-ac7e-9abf5d099d56",
        "parentId" : "d5d5cb5f-39b8-4725-8052-c008555632c9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "isnt iterator more informative than iterable?",
        "createdAt" : "2019-11-08T17:07:42Z",
        "updatedAt" : "2019-11-11T23:02:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0c47d4ca-b37d-4550-9b89-28c695197f86",
        "parentId" : "d5d5cb5f-39b8-4725-8052-c008555632c9",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "for a return type it's nor relevant, so it's just a consistency thing.",
        "createdAt" : "2019-11-08T17:20:05Z",
        "updatedAt" : "2019-11-11T23:02:02Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "82479f492eb66054929aa159d00b08926f614268",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +66,70 @@\n    @abc.abstractmethod\n    def series_generator(self) -> Iterator[\"Series\"]:\n        pass\n"
  },
  {
    "id" : "5d0c8e1c-9212-4341-b707-052a1fb0cfca",
    "prId" : 29585,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29585#pullrequestreview-315967418",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "caf86e66-1700-4138-843e-01a4ebaa26e3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ResultType maybe",
        "createdAt" : "2019-11-13T02:20:41Z",
        "updatedAt" : "2019-11-13T16:56:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "54eacd3a-2bdb-4fa5-a2da-0acdec9c1597",
        "parentId" : "caf86e66-1700-4138-843e-01a4ebaa26e3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "That was what I tried first, but lines wrap prettier with the shorter name",
        "createdAt" : "2019-11-13T02:28:46Z",
        "updatedAt" : "2019-11-13T16:56:14Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cdb87d405adbd4a035a35717a895493611e02a2",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +19,23 @@    from pandas import DataFrame, Series, Index\n\nResType = Dict[int, Any]\n\n"
  },
  {
    "id" : "b52fc601-4a6f-4bff-8b84-a29425bdac1f",
    "prId" : 31182,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31182#pullrequestreview-349088119",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "645bf677-76c5-4d5b-a952-b244dbaa6460",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "can you also update the comment here on why this special case is needed?",
        "createdAt" : "2020-01-24T10:38:03Z",
        "updatedAt" : "2020-01-28T04:26:46Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d0a3bd79-5f29-4c4c-b3e2-c45297322a55",
        "parentId" : "645bf677-76c5-4d5b-a952-b244dbaa6460",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should this be: ```self.dtypes.apply(is_extension_array_dtype).any()```?",
        "createdAt" : "2020-01-26T00:15:57Z",
        "updatedAt" : "2020-01-28T04:26:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7c458b16-cc98-478f-9e45-2c2472b97152",
        "parentId" : "645bf677-76c5-4d5b-a952-b244dbaa6460",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "thats up on L280",
        "createdAt" : "2020-01-26T00:37:06Z",
        "updatedAt" : "2020-01-28T04:26:46Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "23a1176c-e1da-42f3-a60c-eac23361b695",
        "parentId" : "645bf677-76c5-4d5b-a952-b244dbaa6460",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Has this a performance implication for datetime64[ns] ? Because before this was taking the libreduction path, and now not anymore?\r\n\r\n(btw, the comment \"Disallow dtypes that have blocks backed by EAs\" is not fully correct, as DatetimeBlock is still backed by ndarray no?)",
        "createdAt" : "2020-01-26T07:36:36Z",
        "updatedAt" : "2020-01-28T04:26:46Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ec46e9de-cd7e-4094-95a5-faa1734de31f",
        "parentId" : "645bf677-76c5-4d5b-a952-b244dbaa6460",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Looking for either a more accurate comment or a way around this.  Getting rid of this new check I get one test failure locally:\r\n\r\n```\r\nself = <pandas.tests.frame.test_analytics.TestDataFrameAnalytics object at 0x127a63050>\r\nfloat_frame_with_na =                    A         B         C         D\r\new6ipdVXcu -1.978064 -0.908831 -0.752288  0.223983\r\nelVr6w6e8F  0.47....447613 -2.139044\r\n322RdJJZNU  1.993131 -0.053709 -2.386576  0.199983\r\nnzUStPA2lc -0.402711 -0.593735  0.679934 -1.681615\r\nmixed_float_frame =                    A         B         C         D\r\nTdfPTU8h12  0.336661  0.578183 -0.099304 -1.618718\r\ndHJdHvmOic -0.01....558594  1.554425\r\nXvSW0hK7vE -0.552191  0.844111 -0.937012 -0.398246\r\nUR9qvSyscK -0.856967  1.425748 -1.767578 -0.524487\r\n\r\n    def test_stat_op_calc(self, float_frame_with_na, mixed_float_frame):\r\n\r\n[...]\r\npandas/tests/frame/test_analytics.py:72: in assert_stat_op_calc\r\n    result = getattr(df, opname)()\r\npandas/core/frame.py:8075: in nunique\r\n    return self.apply(Series.nunique, axis=axis, dropna=dropna)\r\npandas/core/frame.py:6946: in apply\r\n    return op.get_result()\r\npandas/core/apply.py:187: in get_result\r\n    return self.apply_standard()\r\npandas/core/apply.py:300: in apply_standard\r\n    values, self.f, axis=self.axis, dummy=dummy, labels=labels\r\npandas/_libs/reduction.pyx:617: in pandas._libs.reduction.compute_reduction\r\n    return reducer.get_result()\r\npandas/_libs/reduction.pyx:127: in pandas._libs.reduction.Reducer.get_result\r\n    res = self.f(cached_typ)\r\npandas/core/apply.py:114: in f\r\n    return func(x, *args, **kwds)\r\npandas/core/base.py:1311: in nunique\r\n    uniqs = self.unique()\r\npandas/core/series.py:1784: in unique\r\n    result = super().unique()\r\npandas/core/base.py:1267: in unique\r\n    result = values.unique()\r\npandas/core/arrays/datetimelike.py:650: in unique\r\n    result = unique1d(self.asi8)\r\npandas/core/arrays/datetimelike.py:454: in asi8\r\n    return self._data.view(\"i8\")\r\n[...]\r\n        if newtype.hasobject or oldtype.hasobject:\r\n>           raise TypeError(\"Cannot change data-type for object array.\")\r\nE           TypeError: Cannot change data-type for object array.\r\n```\r\n\r\nIIUC inside libreducer we are setting _index_data, which indirectly alters the _data on a TimedeltaArray, so when we try to call `self._data.view(\"i8\")` it chokes.  That more or less make sense.\r\n\r\nwhat doesnt make sense is why a call on float_frame_with_na is doing _anything_ with a timedelta64 dtype",
        "createdAt" : "2020-01-27T00:43:59Z",
        "updatedAt" : "2020-01-28T04:26:46Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a2bd3d80-450f-4ed0-8873-05cca477efb3",
        "parentId" : "645bf677-76c5-4d5b-a952-b244dbaa6460",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "That's indeed strange ...\r\n\r\nDid you check if there is a performance difference?",
        "createdAt" : "2020-01-27T19:56:48Z",
        "updatedAt" : "2020-01-28T04:26:46Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e0122950-2268-4bce-8b7a-0e24dcb3de35",
        "parentId" : "645bf677-76c5-4d5b-a952-b244dbaa6460",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : ">>> Did you check if there is a performance difference?\r\n\r\nNon-zero but not huge:\r\n\r\n```\r\ndti = pd.date_range(\"2016-01-01\", periods=10**6, freq=\"S\")\r\ntdi = dti - dti\r\nser = pd.Series(tdi)\r\ndf = ser.to_frame()\r\n\r\n%timeit df.apply(lambda x: x.median())\r\n23.7 ms ± 251 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)  # <-- master\r\n24.2 ms ± 426 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)  # <-- PR\r\n```\r\n\r\nconsistent across several timeit runs about 2% slowdown",
        "createdAt" : "2020-01-28T01:41:08Z",
        "updatedAt" : "2020-01-28T04:26:46Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c305ff0b21e0a5bef1de951cdeeda1729391d1e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +281,285 @@            # Disallow dtypes where setting _index_data will break\n            #  ExtensionArray values, see GH#31182\n            and not self.dtypes.apply(lambda x: x.kind in [\"m\", \"M\"]).any()\n            # Disallow complex_internals since libreduction shortcut raises a TypeError\n            and not self.agg_axis._has_complex_internals"
  },
  {
    "id" : "a9c89aa4-29b0-4ba3-acde-d5e7b47de848",
    "prId" : 34909,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34909#pullrequestreview-434461732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d7f0fa3-4d2d-4e3b-b9ed-fc391a88c1af",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you push this to an internals method instead?",
        "createdAt" : "2020-06-20T16:51:57Z",
        "updatedAt" : "2020-06-20T22:55:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2c86aa27-584e-4569-ac89-dc0b0c36019d",
        "parentId" : "7d7f0fa3-4d2d-4e3b-b9ed-fc391a88c1af",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "im looking at that now.  the other place where this pattern could be really useful is in groupby.ops, but its tougher there",
        "createdAt" : "2020-06-20T17:01:29Z",
        "updatedAt" : "2020-06-20T22:55:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d6edc1f2-f5b2-4564-8ef0-496f1f968327",
        "parentId" : "7d7f0fa3-4d2d-4e3b-b9ed-fc391a88c1af",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sure also exposing an api for this would be ok as well (eg another internals method)",
        "createdAt" : "2020-06-20T17:04:10Z",
        "updatedAt" : "2020-06-20T22:55:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a0c336ac-67c0-4f53-a84e-cb0f5a68fafc",
        "parentId" : "7d7f0fa3-4d2d-4e3b-b9ed-fc391a88c1af",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "im still troubleshooting the groupby.ops usage, would like to punt on making this an internals method for the time being",
        "createdAt" : "2020-06-21T00:39:13Z",
        "updatedAt" : "2020-06-21T00:39:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbdc9152c3f08337aa1258003d093a77ce8b384b",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +411,415 @@        blk = mgr.blocks[0]\n\n        for (arr, name) in zip(values, self.index):\n            blk.values = arr\n            ser.name = name"
  },
  {
    "id" : "244d4c89-e577-4d42-ab09-d0a39a86f320",
    "prId" : 35777,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35777#pullrequestreview-469588773",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38310d68-5e1d-4fdf-ba36-da20d9667b52",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Any reason you don't just pass the index to the constructor?",
        "createdAt" : "2020-08-18T13:18:02Z",
        "updatedAt" : "2020-08-21T22:05:24Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "309697df-5b4e-4788-b569-0a192465c14e",
        "parentId" : "38310d68-5e1d-4fdf-ba36-da20d9667b52",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "because we have e.g. `results = {0: \"foo\", 1: \"bar\"}` and `res_index = Index([\"A\", \"B\"])`, so passing index to the constructor leads to all-NAss",
        "createdAt" : "2020-08-18T15:47:43Z",
        "updatedAt" : "2020-08-21T22:05:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "459d5a81b2dd9a1eb9f76139d9208b074bdb8384",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +342,346 @@            # e.g. test_apply_dict GH#8735\n            res = self.obj._constructor_sliced(results)\n            res.index = res_index\n            return res\n"
  },
  {
    "id" : "d47b699d-3d05-431d-babe-020389c21b6a",
    "prId" : 38272,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38272#pullrequestreview-545103796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88285304-7728-4770-b1ee-edde5d63c4c8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, obviously we want to sync these up in a followon ",
        "createdAt" : "2020-12-04T16:20:58Z",
        "updatedAt" : "2020-12-04T16:21:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4db8fbdda6f1c1df647abcfcfdf220e28b369d5c",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +404,408 @@            for i in range(len(obj)):\n                yield obj._ixs(i, axis=0)\n\n        else:\n            for (arr, name) in zip(values, self.index):"
  }
]