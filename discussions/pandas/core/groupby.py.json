[
  {
    "id" : "865d591c-09e1-4007-b5df-ced6019218fb",
    "prId" : 4092,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40c484f3-8755-4320-b563-73eb1b4fff78",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "would love this, maybe an issue?\n",
        "createdAt" : "2013-07-01T03:07:34Z",
        "updatedAt" : "2013-07-01T22:09:33Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "a393908f-28fb-48e1-8053-d53fcc011726",
        "parentId" : "40c484f3-8755-4320-b563-73eb1b4fff78",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "What would you want it to show? calculates values on the fly right - so probably just keys?\n",
        "createdAt" : "2013-07-01T03:13:47Z",
        "updatedAt" : "2013-07-01T22:09:33Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "d85a76ce-8d4d-42b1-a1f4-6d0ef5864b6e",
        "parentId" : "40c484f3-8755-4320-b563-73eb1b4fff78",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "yeah gb is lazy so yeah keys i guess. just something more informative than the object repr\n",
        "createdAt" : "2013-07-01T03:24:45Z",
        "updatedAt" : "2013-07-01T22:09:33Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5583141404ddf91516e70dade7942c315cb3646",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +204,208 @@\n    def __unicode__(self):\n        # TODO: Better unicode/repr for GroupBy object\n        return object.__repr__(self)\n"
  },
  {
    "id" : "b7782fef-f59f-4774-8f23-b3074057db9e",
    "prId" : 4670,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01c731f8-90cb-4acc-9cc0-75872883b956",
        "parentId" : null,
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "@cpcloud this seemed to do it!\n",
        "createdAt" : "2013-08-25T22:28:11Z",
        "updatedAt" : "2013-08-25T22:28:11Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8530dfbe30a493e351dca57e9afd9c7c97d5805",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +517,521 @@            else:\n                result = result.reindex_axis(ax, axis=self.axis)\n        elif self.group_keys and self.as_index:\n            group_keys = keys\n            group_levels = self.grouper.levels"
  },
  {
    "id" : "eadd2821-3ac3-473c-9f36-f739d19e9086",
    "prId" : 5096,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46b72e56-1bb4-4d4a-a70b-15103aa7808f",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "should this `and` be `&`? can `b` be an array/frame/series?\n",
        "createdAt" : "2013-10-10T04:49:42Z",
        "updatedAt" : "2013-10-13T15:03:27Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "73955b23-d630-4c1e-8fed-23ee1777feb1",
        "parentId" : "46b72e56-1bb4-4d4a-a70b-15103aa7808f",
        "authorId" : "69bb3c84-e6a9-46c9-8328-ad025ce4150d",
        "body" : "I think it has to be `and` in order to handle `NaN`, which we want to interpret as False. Thoughts, @cpcloud?\n\n```\nIn [59]: np.nan & pd.notnull(np.nan)\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-59-47e0df96d143> in <module>()\n----> 1 np.nan & pd.notnull(np.nan)\n\nTypeError: unsupported operand type(s) for &: 'float' and 'bool'\n\nIn [60]: np.nan and pd.notnull(np.nan)\nOut[60]: False\n```\n",
        "createdAt" : "2013-10-13T14:36:06Z",
        "updatedAt" : "2013-10-13T15:03:27Z",
        "lastEditedBy" : "69bb3c84-e6a9-46c9-8328-ad025ce4150d",
        "tags" : [
        ]
      }
    ],
    "commit" : "889b9f2447137a32857613a95d2b363020216c41",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1609,1613 @@        def true_and_notnull(x, *args, **kwargs):\n            b = wrapper(x, *args, **kwargs)\n            return b and notnull(b)\n\n        try:"
  },
  {
    "id" : "5b2bcea7-b4bf-4c28-b556-7d7d997fdd5a",
    "prId" : 5231,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6fc2aca-c9d0-4ed3-b09b-8f4ae3c2489e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not sure why `_lexsort_indexer` is even in groupby.py only uses in series/frame. can you move to `algos.py`?\n",
        "createdAt" : "2014-03-11T02:01:17Z",
        "updatedAt" : "2014-03-27T20:57:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3230ed4bd75ff5f2f016ac1e07def7ebbb432885",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3146,3150 @@\n\ndef _lexsort_indexer(keys, orders=None, na_position='last'):\n    labels = []\n    shape = []"
  },
  {
    "id" : "346f85f1-634f-4e09-898b-f95024db399c",
    "prId" : 5231,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e63358e2-f04a-4ae5-8992-fa2814dba357",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "move to `algos.py` as well\n",
        "createdAt" : "2014-03-11T02:01:29Z",
        "updatedAt" : "2014-03-27T20:57:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "47d02957-9d4a-483d-aef7-fe6b306735c9",
        "parentId" : "e63358e2-f04a-4ae5-8992-fa2814dba357",
        "authorId" : "49cb7e4b-934a-4329-961e-4089057c4185",
        "body" : "Do you mean core/algorithms.py? or algos.pyx?\n",
        "createdAt" : "2014-03-11T02:05:13Z",
        "updatedAt" : "2014-03-27T20:57:49Z",
        "lastEditedBy" : "49cb7e4b-934a-4329-961e-4089057c4185",
        "tags" : [
        ]
      },
      {
        "id" : "1520485a-e705-41a8-bf71-93f31f978d8e",
        "parentId" : "e63358e2-f04a-4ae5-8992-fa2814dba357",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes...that's what I meant!\n",
        "createdAt" : "2014-03-11T02:06:38Z",
        "updatedAt" : "2014-03-27T20:57:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "956f5912-b8a2-4612-b171-6c5ee49260ca",
        "parentId" : "e63358e2-f04a-4ae5-8992-fa2814dba357",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "wait...nvm....I realize this is being called internall in groupby.py\n",
        "createdAt" : "2014-03-11T02:08:39Z",
        "updatedAt" : "2014-03-27T20:57:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3230ed4bd75ff5f2f016ac1e07def7ebbb432885",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +3185,3189 @@    return _indexer_from_factorized(labels, shape)\n\ndef _nargsort(items, kind='quicksort', ascending=True, na_position='last'):\n    \"\"\"\n    This is intended to be a drop-in replacement for np.argsort which handles NaNs"
  },
  {
    "id" : "a7b226af-df0b-4fc8-b7de-5bcb5728c8fd",
    "prId" : 5510,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "542ca5da-0f77-445e-b802-2b2a7e61f63b",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "mind removing this blank line if you're editing this?\n",
        "createdAt" : "2013-11-14T00:18:26Z",
        "updatedAt" : "2013-11-14T19:18:52Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "74b5c5c2-cb67-4976-a0ad-50b2ae27c030",
        "parentId" : "542ca5da-0f77-445e-b802-2b2a7e61f63b",
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "I added it in specifically, pep8 says it should be there, right?\n",
        "createdAt" : "2013-11-14T00:18:46Z",
        "updatedAt" : "2013-11-14T19:18:52Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      },
      {
        "id" : "dc0cb7af-042f-4093-a26d-bd3733d75229",
        "parentId" : "542ca5da-0f77-445e-b802-2b2a7e61f63b",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "okay, no idea.\n",
        "createdAt" : "2013-11-14T00:24:59Z",
        "updatedAt" : "2013-11-14T19:18:52Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b56479879bb4e0fccdb23497e2073c201481aad7",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +523,527 @@        try to cast the result to our obj original type,\n        we may have roundtripped thru object in the mean-time\n\n        \"\"\"\n        if obj.ndim > 1:"
  }
]