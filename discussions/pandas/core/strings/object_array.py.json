[
  {
    "id" : "685f4805-1b66-4a32-9114-19a3888b6d94",
    "prId" : 36357,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36357#pullrequestreview-490813137",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30233884-ede4-4c64-8eff-0c1cc0a51949",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "@simonjayhawkins any idea why mypy is failing here?\r\n\r\n```\r\npandas/core/strings/object_array.py:348: error: Item \"None\" of \"Optional[Series]\" has no attribute \"astype\"  [union-attr]\r\n```\r\n\r\nI would have thought the `assert isinstance(arr, Series)` would make this pass. Declaring `arr: Series = ...` doesn't fix it either.",
        "createdAt" : "2020-09-17T15:32:48Z",
        "updatedAt" : "2020-09-29T20:46:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f3992732-66f6-470e-b1fe-6775fb6e3333",
        "parentId" : "30233884-ede4-4c64-8eff-0c1cc0a51949",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "Not sure why. but sep is Any, and `sep + arr + sep` is resolving to Any and arr is reset back to the original type for arr.\r\n\r\n`arr = cast(Series, sep + arr + sep)` fixes till we have the binops typed and we can track the cast.\r\n\r\nyou could also do this instead of the earlier assert so that once Literal is used and the return type of fillna is correct for inplace, we can track the cast.",
        "createdAt" : "2020-09-17T17:06:23Z",
        "updatedAt" : "2020-09-29T20:46:33Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb2fb24439c69a040d2f1eec144c514cdf27d1f2",
    "line" : 361,
    "diffHunk" : "@@ -1,1 +359,363 @@        except TypeError:\n            arr = cast(Series, arr)\n            arr = sep + arr.astype(str) + sep\n        arr = cast(Series, arr)\n"
  },
  {
    "id" : "afd3cf74-f8cd-46a4-ab78-b8705fe7bb53",
    "prId" : 36357,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36357#pullrequestreview-495902419",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7e5b06f-c714-47a3-bf74-63cd697819e6",
        "parentId" : null,
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "Is this local variable ``upper_pat`` necessary?",
        "createdAt" : "2020-09-24T19:51:20Z",
        "updatedAt" : "2020-09-29T20:46:33Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb2fb24439c69a040d2f1eec144c514cdf27d1f2",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +124,128 @@            else:\n                upper_pat = pat.upper()\n                f = lambda x: upper_pat in x.upper()\n        return self._str_map(f, na, dtype=np.dtype(\"bool\"))\n"
  },
  {
    "id" : "81cafff1-36a3-4ac1-b108-92b440eeb5fb",
    "prId" : 36357,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36357#pullrequestreview-495903468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78615b3e-d4de-4a1a-9d83-28d2f21cfdd7",
        "parentId" : null,
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "Probably would be even better to extract helper methods for extracting ``f`` with_regex and without_regex case.",
        "createdAt" : "2020-09-24T19:52:56Z",
        "updatedAt" : "2020-09-29T20:46:33Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb2fb24439c69a040d2f1eec144c514cdf27d1f2",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +104,108 @@\n    def _str_contains(self, pat, case=True, flags=0, na=np.nan, regex=True):\n        if regex:\n            if not case:\n                flags |= re.IGNORECASE"
  },
  {
    "id" : "2126cf5d-0327-4c1f-ba87-54ad34e44f52",
    "prId" : 36357,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36357#pullrequestreview-495903468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebe249ee-59a3-4954-9fea-8292989430f8",
        "parentId" : null,
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "Different approach is used in ``_str_find_``. Not a big deal, but could be aligned.",
        "createdAt" : "2020-09-24T19:57:04Z",
        "updatedAt" : "2020-09-29T20:46:33Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb2fb24439c69a040d2f1eec144c514cdf27d1f2",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +101,105 @@        else:  # pragma: no cover\n            raise ValueError(\"Invalid side\")\n        return self._str_map(f)\n\n    def _str_contains(self, pat, case=True, flags=0, na=np.nan, regex=True):"
  },
  {
    "id" : "fe085454-a2dd-479d-b088-1820509f5d33",
    "prId" : 36357,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36357#pullrequestreview-495903468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "344588b3-f7d8-4595-9255-78b6086a909e",
        "parentId" : null,
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "Probably ``n = max(n, 0)``, but maybe not..",
        "createdAt" : "2020-09-24T20:00:49Z",
        "updatedAt" : "2020-09-29T20:46:33Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb2fb24439c69a040d2f1eec144c514cdf27d1f2",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +157,161 @@                    flags |= re.IGNORECASE\n            if is_compiled_re or len(pat) > 1 or flags or callable(repl):\n                n = n if n >= 0 else 0\n                compiled = re.compile(pat, flags=flags)\n                f = lambda x: compiled.sub(repl=repl, string=x, count=n)"
  },
  {
    "id" : "581dda91-2718-450c-953a-72fb428fa437",
    "prId" : 41603,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/41603#pullrequestreview-665453514",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29b43e16-3d98-4e55-96a0-b09d6df3f3b6",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "mypy cannot narrow types with is_compiled_re ",
        "createdAt" : "2021-05-21T13:17:10Z",
        "updatedAt" : "2021-05-21T13:17:10Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d34191717a4552e2ceb85c970a9ffbd096b196c",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +147,151 @@\n        if regex and (\n            isinstance(pat, re.Pattern) or len(pat) > 1 or flags or callable(repl)\n        ):\n            if not isinstance(pat, re.Pattern):"
  }
]