[
  {
    "id" : "4130df0a-1223-4bd3-adc0-93cd931654ff",
    "prId" : 16346,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16346#pullrequestreview-38183468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb74171c-d332-4c8e-9693-a516bc1f0d86",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is duplicating lots of code. I sure there is a way to do this a bit more generically.",
        "createdAt" : "2017-05-15T10:19:44Z",
        "updatedAt" : "2017-05-16T20:51:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a03d2b5e-40e1-4c2b-a73b-861b9a205bee",
        "parentId" : "fb74171c-d332-4c8e-9693-a516bc1f0d86",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, I know, but this was mainly to test. \r\nAnd from that it, this makes it a lot faster than using the `hash_array` (the commented part in `hash_tuple`). So not sure how to solve that. In principle I can put the common parts in helper functions (eg the redistributing part), but for most of it it is not possible as there are slight differences.",
        "createdAt" : "2017-05-15T11:24:35Z",
        "updatedAt" : "2017-05-16T20:51:48Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ae4a2413-ee47-4313-b61c-078d20728fe9",
        "parentId" : "fb74171c-d332-4c8e-9693-a516bc1f0d86",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what does all of this buy you? (IOW can you post updated timings)?\r\n\r\nmaintaining a separate code path for scalars will cause future issues. these will need to be kept in sync (with the array hashing), if any code changes are made. you can easily share code here which would make this more palatable.",
        "createdAt" : "2017-05-15T11:41:55Z",
        "updatedAt" : "2017-05-16T20:51:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c8d7b907-e4b9-4bfd-a39f-0d8b4b5da959",
        "parentId" : "fb74171c-d332-4c8e-9693-a516bc1f0d86",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "```\r\nIn [4]: %timeit pd.core.util.hashing.hash_tuple2((999, np.nan, 'E'))\r\n380 µs ± 60.1 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\r\n\r\nIn [5]: %timeit pd.core.util.hashing.hash_tuple((999, np.nan, 'E'))\r\n81.8 µs ± 3.53 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)\r\n```\r\n\r\n`hash_tuple2` uses the `hash_array` (the commented out version in the current branch), the `hash_tuple` uses the `hash_scalar`\r\n\r\n",
        "createdAt" : "2017-05-15T11:46:23Z",
        "updatedAt" : "2017-05-16T20:51:48Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "32334602-8e8a-43ca-98a3-6a103aa78b60",
        "parentId" : "fb74171c-d332-4c8e-9693-a516bc1f0d86",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, its prob reasonable, but willing to sacrifice some perf to get some shared code (IOW between old and new prob a good compromise to repeating lots of code)",
        "createdAt" : "2017-05-15T11:56:25Z",
        "updatedAt" : "2017-05-16T20:51:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2dc388e7-447d-49af-b096-8b1fff8224c3",
        "parentId" : "fb74171c-d332-4c8e-9693-a516bc1f0d86",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK, I pushed a new version that almost fully reuses the `hash_array` function for the actual hashing, only has some specific logic before that to convert the scalar to a proper array. \r\nThis reduces a lot of the code duplication, and has only minor perf impact.\r\n\r\nApart from that, it still has the separate code path to first convert the scalar to an array, which might be a bit brittle, and I agree certainly not ideal for code maintenance, but using something more general (eg infer_dtype) gives a big perf penalty.",
        "createdAt" : "2017-05-15T17:36:23Z",
        "updatedAt" : "2017-05-16T20:51:48Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "8acc9e84c64009ddb3ec87126f0cd814e24260c3",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +306,310 @@\ndef _hash_scalar(val, encoding='utf8', hash_key=None):\n    \"\"\"\n    Hash scalar value\n"
  },
  {
    "id" : "beb877ab-f54d-4425-8c87-90438733767e",
    "prId" : 16346,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16346#pullrequestreview-38395506",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e6cf07c-3e5f-4634-9704-9dc27c4747e7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if you need to handle datetime w/tz directly (IOW, we basically ignore it), then I would.\r\n\r\n```\r\nif getattr(val, 'tzinfo', None) is not None:\r\n    val = val.tz_localize(None)\r\n```\r\n\r\nI suppose an option to ignore tz is fine for ``infer_dtype_from_scalar``, but if you add it I would rename, document and test.",
        "createdAt" : "2017-05-16T10:29:56Z",
        "updatedAt" : "2017-05-16T20:51:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "71064d55-0bb1-4b27-9c1e-39a1e1572230",
        "parentId" : "8e6cf07c-3e5f-4634-9704-9dc27c4747e7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "yes, I can certainly do that check here as well. \r\n\r\nThat is maybe better to keep the custom logic here, as the keyword added to `infer_dtype_from_scalar` would not be used anywhere else.",
        "createdAt" : "2017-05-16T12:24:26Z",
        "updatedAt" : "2017-05-16T20:51:48Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a68f58ee-c25f-4be1-a073-a9615c69bddb",
        "parentId" : "8e6cf07c-3e5f-4634-9704-9dc27c4747e7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "he i think better locally",
        "createdAt" : "2017-05-16T13:59:48Z",
        "updatedAt" : "2017-05-16T20:51:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8acc9e84c64009ddb3ec87126f0cd814e24260c3",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +317,321 @@        # this is to be consistent with the _hash_categorical implementation\n        return np.array([np.iinfo(np.uint64).max], dtype='u8')\n\n    if getattr(val, 'tzinfo', None) is not None:\n        # for tz-aware datetimes, we need the underlying naive UTC value and"
  },
  {
    "id" : "22c26fdf-64e1-411b-923b-e606b4cd6118",
    "prId" : 16346,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16346#pullrequestreview-38528470",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2383bccf-471f-42ca-8fc0-bcbaf55cab79",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see #16372 (for later)",
        "createdAt" : "2017-05-16T22:19:20Z",
        "updatedAt" : "2017-05-16T22:19:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8acc9e84c64009ddb3ec87126f0cd814e24260c3",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +322,326 @@        # not the tz aware object or pd extension type (as\n        # infer_dtype_from_scalar would do)\n        if not isinstance(val, tslib.Timestamp):\n            val = tslib.Timestamp(val)\n        val = val.tz_convert(None)"
  },
  {
    "id" : "5d3b2027-9506-4a3d-8939-763bca4fcf58",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-135627424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d22cfd3-06a1-4ada-9f3c-504156479e03",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Same as above. `Categorica[ExtensionArray].values` will be an EA, and this has to be an ndarray.",
        "createdAt" : "2018-04-04T16:53:13Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "ac17b006-89c9-4760-a852-06584c9dd926",
        "parentId" : "7d22cfd3-06a1-4ada-9f3c-504156479e03",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, shouldn't you need to check if this is an EA here?",
        "createdAt" : "2018-04-05T15:53:18Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7f4dc6bc-05aa-4d5f-9923-8b8f337e0bb9",
        "parentId" : "7d22cfd3-06a1-4ada-9f3c-504156479e03",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I don't think so, `asarray` won't copy an ndarray, so calling it on an ndarray should be fine.\r\n\r\n`is_extension_array_dtype` takes ~ 2 microseconds, and `asarray` takes ~10 ns, so better to just always call asarray instead of checking.",
        "createdAt" : "2018-04-05T20:28:55Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "7f61b15b-8b01-401d-b479-f6bdaf1228f5",
        "parentId" : "7d22cfd3-06a1-4ada-9f3c-504156479e03",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we still need this change? what is it for?",
        "createdAt" : "2018-07-08T20:58:55Z",
        "updatedAt" : "2018-07-13T01:00:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "61e4de6a-5a8b-4fc4-8a63-134df7db3802",
        "parentId" : "7d22cfd3-06a1-4ada-9f3c-504156479e03",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "I tried removing it, and `test_hash_scalar` failed for `Interval(0, 1)`:\r\nhttps://github.com/pandas-dev/pandas/blob/1033e8b1195d4071253889ada60523832285354c/pandas/tests/util/test_hashing.py#L91-L102",
        "createdAt" : "2018-07-09T23:20:12Z",
        "updatedAt" : "2018-07-13T01:32:47Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +207,211 @@    \"\"\"\n    # Convert ExtensionArrays to ndarrays\n    values = np.asarray(c.categories.values)\n    hashed = hash_array(values, encoding, hash_key,\n                        categorize=False)"
  },
  {
    "id" : "5ab2f62f-e5b9-43f8-b1cb-534e3dea4ab6",
    "prId" : 28604,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28604#pullrequestreview-293003291",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "832ebf90-91a3-47c5-8282-c34a871f8d5e",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "adding type hints here is causing `pandas/core/util/hashing.py:132: error: Incompatible types in assignment (expression has type \"chain[Any]\", variable has type \"Generator[Any, None, None]\")` further down as the body is now checked.",
        "createdAt" : "2019-09-25T11:12:37Z",
        "updatedAt" : "2019-09-25T16:12:14Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "5f0fa735-4e4d-4a64-9380-bcdee6ce3101",
        "parentId" : "832ebf90-91a3-47c5-8282-c34a871f8d5e",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "it looks like the conda environment now has mypy 0.720. result!\r\n\r\nfix is here https://github.com/pandas-dev/pandas/pull/28339/commits/304351e23d1586e0cc28108aff9a2a8a9fac5bf7 is you want to include in the PR. (can't use py3.6 variable annotations though.)",
        "createdAt" : "2019-09-25T11:22:25Z",
        "updatedAt" : "2019-09-25T16:12:14Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "d07ff725adebe5982ab60e1ef5fc7a96f6474577",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +60,64 @@    encoding: str = \"utf8\",\n    hash_key=None,\n    categorize: bool = True,\n):\n    \"\"\""
  },
  {
    "id" : "c501ed8d-9f80-48f5-a288-878a426c20d8",
    "prId" : 28604,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28604#pullrequestreview-293849286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50dc4d51-b79d-4806-9c1e-b34b734f61f5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can also do a ``cast`` here (and in the change above), not sure what is more idiomatic & what we have settled on\r\n\r\ncc @simonjayhawkins ",
        "createdAt" : "2019-09-26T12:27:07Z",
        "updatedAt" : "2019-09-26T12:27:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6d503a38-8da9-47ae-a97f-a885126e363a",
        "parentId" : "50dc4d51-b79d-4806-9c1e-b34b734f61f5",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> you can also do a `cast` here\r\n\r\nOur type hints policy is \"..., the use of cast is strongly discouraged. Where applicable a refactor of the code to appease static analysis is preferable\". https://dev.pandas.io/docs/development/contributing.html#style-guidelines\r\n\r\npersonally I'm not a fan of changing the runtime behavior of code just to appease mypy if not absolutely necessary unless it makes for cleaner code. (This applies to both our policy and the changes in this PR)\r\n\r\nThe problem in this function is because Mypy considers the initial assignment as the definition of a variable. https://mypy.readthedocs.io/en/stable/type_inference_and_annotations.html#type-inference which occurs on L114.\r\nmypy infers the type as `Generator[Any, None, None]`.\r\n\r\nit is possible to override the inferred type of a variable by using a variable type annotation https://mypy.readthedocs.io/en/stable/type_inference_and_annotations.html#explicit-types-for-variables\r\n\r\nThis is the approach I took to silence this mypy error in https://github.com/pandas-dev/pandas/pull/28339/commits/304351e23d1586e0cc28108aff9a2a8a9fac5bf7. I prefer this as it has no effect on the runtime behavior.\r\n\r\nwith regard to the use of a leading underscore to avoid `Incompatible types in assignment..` errors, my preference would be to use a trailing underscore. In PEP8, a trailing underscore is used by convention to avoid conflicts with Python keywords. So I see more similarity here to avoid conflicts than the leading underscore idiom. Not sure what's best here, but just my POV if we want to choose a pattern to be consistent moving forward.",
        "createdAt" : "2019-09-26T16:14:12Z",
        "updatedAt" : "2019-09-26T16:14:12Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "81e5249f-23ac-4814-ae6a-25b56d60cfcc",
        "parentId" : "50dc4d51-b79d-4806-9c1e-b34b734f61f5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "It looks like the main actionable suggestion here is to change `_hashes` to `hashes_`; is that right @simonjayhawkins ?  I'm fine with that.",
        "createdAt" : "2019-09-26T16:25:37Z",
        "updatedAt" : "2019-09-26T16:25:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d07ff725adebe5982ab60e1ef5fc7a96f6474577",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +133,137 @@            # keep `hashes` specifically a generator to keep mypy happy\n            _hashes = itertools.chain(hashes, index_hash_generator)\n            hashes = (x for x in _hashes)\n        h = _combine_hash_arrays(hashes, num_items)\n"
  }
]