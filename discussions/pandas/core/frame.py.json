[
  {
    "id" : "cc38ceff-b2af-4467-b765-cad88e0438fb",
    "prId" : 4732,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f86eb3c3-af5e-42fc-9888-2e612db8dec0",
        "parentId" : null,
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "is this equivalent to `[dict(d) for d in data]` ? :s\n",
        "createdAt" : "2013-09-04T23:18:42Z",
        "updatedAt" : "2013-09-06T01:11:48Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      },
      {
        "id" : "22d5306f-663a-4f0b-8db2-d156675df199",
        "parentId" : "f86eb3c3-af5e-42fc-9888-2e612db8dec0",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "yes, but it looks like it avoids instantiating new dicts if they are already dicts. Cython methods usually have rigid typechecks, which is probably the reason for the `is` comparison. (see `lib.dicts_to_array` below)\n",
        "createdAt" : "2013-09-04T23:39:29Z",
        "updatedAt" : "2013-09-06T01:11:48Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "d8b1c71d-4808-4a7e-83a0-21ab7dc1a0e4",
        "parentId" : "f86eb3c3-af5e-42fc-9888-2e612db8dec0",
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "wow, surprised it's so expensive to call dict on a dict (you're right this is significantly faster).\n",
        "createdAt" : "2013-09-05T08:25:46Z",
        "updatedAt" : "2013-09-06T01:11:48Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      }
    ],
    "commit" : "db74b2a86524c8dda75e103fe3e2dd611d46e620",
    "line" : 499,
    "diffHunk" : "@@ -1,1 +4923,4927 @@    # assure that they are of the base dict class and not of derived\n    # classes\n    data = [(type(d) is dict) and d or dict(d) for d in data]\n\n    content = list(lib.dicts_to_array(data, list(columns)).T)"
  },
  {
    "id" : "837a8f5c-d204-45ef-9fe9-bfdd20768a9f",
    "prId" : 4857,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ab4afee-fd58-49b9-8f7a-2002a62ca9ce",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "btw - :+1: for fixing the default setting here to be what Excel actually uses\n",
        "createdAt" : "2013-09-16T21:50:38Z",
        "updatedAt" : "2013-09-22T22:43:13Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0c290f4879a542b027b4c36a922f5ae2216ed5a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1357,1361 @@        formatter.save()\n\n    def to_excel(self, excel_writer, sheet_name='Sheet1', na_rep='',\n                 float_format=None, cols=None, header=True, index=True,\n                 index_label=None, startrow=0, startcol=0, engine=None):"
  },
  {
    "id" : "d43481b8-a9e9-40b4-90e4-9fd41df76a57",
    "prId" : 4936,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07916ec1-8621-40d5-9686-22bfe2a68d11",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "you don't need the backslash here\n",
        "createdAt" : "2013-09-25T03:07:04Z",
        "updatedAt" : "2013-09-25T03:07:04Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca6475d883c0315bb1bbf1e20c8be5eed10404e8",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +985,989 @@            return dict((k, v) for k, v in compat.iteritems(self))\n        elif outtype.lower().startswith('r'):\n            return [dict((k, v) for k, v in zip(self.columns, row)) \\\n                    for row in self.values]\n        else:  # pragma: no cover"
  },
  {
    "id" : "48863dd5-67fc-4d9e-8cdf-43063baed157",
    "prId" : 5247,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d94d0be-9fca-4e74-924e-e5fd29e45e9b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I know Panel overrides this method, but this is not safe...use `get_block_manager_axis`\n",
        "createdAt" : "2013-10-27T22:07:27Z",
        "updatedAt" : "2013-10-28T01:52:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ed1f78e8-d512-42db-9a5b-a1d0371e8b74",
        "parentId" : "8d94d0be-9fca-4e74-924e-e5fd29e45e9b",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "This is on DataFrame not generic, before I change, to be clear you mean change`agg_axis = 1 - axis` to:\n\n```\nagg_axis = self._get_block_manager_axis(axis)\n```\n",
        "createdAt" : "2013-10-27T22:42:45Z",
        "updatedAt" : "2013-10-28T01:52:53Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "2540edee-033e-4fa2-8a13-9dd4bd113f36",
        "parentId" : "8d94d0be-9fca-4e74-924e-e5fd29e45e9b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sorry I thought it was on generic ; there is an agg_axis method somewhere (look at _reduce) - it gives same answer obviously but is more correct \n",
        "createdAt" : "2013-10-27T22:50:08Z",
        "updatedAt" : "2013-10-28T01:52:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8fdcfd81-6469-4c3a-b5aa-5cd02b3e8935",
        "parentId" : "8d94d0be-9fca-4e74-924e-e5fd29e45e9b",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "because of what it needs to do, I think it's actually clearer to leave as is (because it needs to pass the name to reindex, etc.), otherwise have to either add a `_get_agg_axis_number` method, or add another keyword argument to `_get_agg_axis`.\n\nI'm fine with going with what you'd like to do though.\n",
        "createdAt" : "2013-10-27T23:08:39Z",
        "updatedAt" : "2013-10-28T01:52:53Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "169fdf6c-4e75-4c20-9348-c093395be6e9",
        "parentId" : "8d94d0be-9fca-4e74-924e-e5fd29e45e9b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "up2u\n",
        "createdAt" : "2013-10-27T23:23:38Z",
        "updatedAt" : "2013-10-28T01:52:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d776a128-33c0-4700-95e4-ae024a219083",
        "parentId" : "8d94d0be-9fca-4e74-924e-e5fd29e45e9b",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "going to keep as-is for now rather than create a separate method.\n",
        "createdAt" : "2013-10-28T00:51:59Z",
        "updatedAt" : "2013-10-28T01:52:53Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e0d29a3f076f1e9c6d0c9773d367ab886561cb0",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +2452,2456 @@                                       subset=subset, axis=ax)\n        else:\n            axis = self._get_axis_number(axis)\n            agg_axis = 1 - axis\n"
  },
  {
    "id" : "c4ce6027-ef1f-4119-8442-9b7973911e54",
    "prId" : 5560,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb729b49-adc0-48d3-8000-a4c29e02b181",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "bool vs. boolean?\n",
        "createdAt" : "2013-11-20T21:29:46Z",
        "updatedAt" : "2013-11-23T09:52:13Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "e6425640-22be-4ac3-82e5-9dc3934c1143",
        "parentId" : "cb729b49-adc0-48d3-8000-a4c29e02b181",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "What do you prefer?\n",
        "createdAt" : "2013-11-20T21:31:18Z",
        "updatedAt" : "2013-11-23T09:52:13Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a4583f01-9fdd-48b6-b631-aecd48f0f05f",
        "parentId" : "cb729b49-adc0-48d3-8000-a4c29e02b181",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "A quick count: ca 6 times `bool` is used and around 50 times `boolan` in all docstrings in frame.py.\n",
        "createdAt" : "2013-11-20T21:34:48Z",
        "updatedAt" : "2013-11-23T09:52:13Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0097433c-aa3f-4e5d-bdcc-90370da09945",
        "parentId" : "cb729b49-adc0-48d3-8000-a4c29e02b181",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "okay so go with boolean\n",
        "createdAt" : "2013-11-22T23:31:47Z",
        "updatedAt" : "2013-11-23T09:52:13Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a34b278c8162742818ed5f6cfbbbfafcd2399bb0",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +2017,2021 @@        copy : boolean, default True\n            Whether to make a copy of the data\n        drop_level : boolean, default True\n            If False, returns object with same levels as self.\n"
  }
]