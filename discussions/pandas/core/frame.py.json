[
  {
    "id" : "cc38ceff-b2af-4467-b765-cad88e0438fb",
    "prId" : 4732,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f86eb3c3-af5e-42fc-9888-2e612db8dec0",
        "parentId" : null,
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "is this equivalent to `[dict(d) for d in data]` ? :s\n",
        "createdAt" : "2013-09-04T23:18:42Z",
        "updatedAt" : "2013-09-06T01:11:48Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      },
      {
        "id" : "22d5306f-663a-4f0b-8db2-d156675df199",
        "parentId" : "f86eb3c3-af5e-42fc-9888-2e612db8dec0",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "yes, but it looks like it avoids instantiating new dicts if they are already dicts. Cython methods usually have rigid typechecks, which is probably the reason for the `is` comparison. (see `lib.dicts_to_array` below)\n",
        "createdAt" : "2013-09-04T23:39:29Z",
        "updatedAt" : "2013-09-06T01:11:48Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "d8b1c71d-4808-4a7e-83a0-21ab7dc1a0e4",
        "parentId" : "f86eb3c3-af5e-42fc-9888-2e612db8dec0",
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "wow, surprised it's so expensive to call dict on a dict (you're right this is significantly faster).\n",
        "createdAt" : "2013-09-05T08:25:46Z",
        "updatedAt" : "2013-09-06T01:11:48Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      }
    ],
    "commit" : "db74b2a86524c8dda75e103fe3e2dd611d46e620",
    "line" : 499,
    "diffHunk" : "@@ -1,1 +4923,4927 @@    # assure that they are of the base dict class and not of derived\n    # classes\n    data = [(type(d) is dict) and d or dict(d) for d in data]\n\n    content = list(lib.dicts_to_array(data, list(columns)).T)"
  },
  {
    "id" : "837a8f5c-d204-45ef-9fe9-bfdd20768a9f",
    "prId" : 4857,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ab4afee-fd58-49b9-8f7a-2002a62ca9ce",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "btw - :+1: for fixing the default setting here to be what Excel actually uses\n",
        "createdAt" : "2013-09-16T21:50:38Z",
        "updatedAt" : "2013-09-22T22:43:13Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0c290f4879a542b027b4c36a922f5ae2216ed5a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1357,1361 @@        formatter.save()\n\n    def to_excel(self, excel_writer, sheet_name='Sheet1', na_rep='',\n                 float_format=None, cols=None, header=True, index=True,\n                 index_label=None, startrow=0, startcol=0, engine=None):"
  },
  {
    "id" : "d43481b8-a9e9-40b4-90e4-9fd41df76a57",
    "prId" : 4936,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07916ec1-8621-40d5-9686-22bfe2a68d11",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "you don't need the backslash here\n",
        "createdAt" : "2013-09-25T03:07:04Z",
        "updatedAt" : "2013-09-25T03:07:04Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca6475d883c0315bb1bbf1e20c8be5eed10404e8",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +985,989 @@            return dict((k, v) for k, v in compat.iteritems(self))\n        elif outtype.lower().startswith('r'):\n            return [dict((k, v) for k, v in zip(self.columns, row)) \\\n                    for row in self.values]\n        else:  # pragma: no cover"
  },
  {
    "id" : "48863dd5-67fc-4d9e-8cdf-43063baed157",
    "prId" : 5247,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d94d0be-9fca-4e74-924e-e5fd29e45e9b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I know Panel overrides this method, but this is not safe...use `get_block_manager_axis`\n",
        "createdAt" : "2013-10-27T22:07:27Z",
        "updatedAt" : "2013-10-28T01:52:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ed1f78e8-d512-42db-9a5b-a1d0371e8b74",
        "parentId" : "8d94d0be-9fca-4e74-924e-e5fd29e45e9b",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "This is on DataFrame not generic, before I change, to be clear you mean change`agg_axis = 1 - axis` to:\n\n```\nagg_axis = self._get_block_manager_axis(axis)\n```\n",
        "createdAt" : "2013-10-27T22:42:45Z",
        "updatedAt" : "2013-10-28T01:52:53Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "2540edee-033e-4fa2-8a13-9dd4bd113f36",
        "parentId" : "8d94d0be-9fca-4e74-924e-e5fd29e45e9b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sorry I thought it was on generic ; there is an agg_axis method somewhere (look at _reduce) - it gives same answer obviously but is more correct \n",
        "createdAt" : "2013-10-27T22:50:08Z",
        "updatedAt" : "2013-10-28T01:52:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8fdcfd81-6469-4c3a-b5aa-5cd02b3e8935",
        "parentId" : "8d94d0be-9fca-4e74-924e-e5fd29e45e9b",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "because of what it needs to do, I think it's actually clearer to leave as is (because it needs to pass the name to reindex, etc.), otherwise have to either add a `_get_agg_axis_number` method, or add another keyword argument to `_get_agg_axis`.\n\nI'm fine with going with what you'd like to do though.\n",
        "createdAt" : "2013-10-27T23:08:39Z",
        "updatedAt" : "2013-10-28T01:52:53Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "169fdf6c-4e75-4c20-9348-c093395be6e9",
        "parentId" : "8d94d0be-9fca-4e74-924e-e5fd29e45e9b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "up2u\n",
        "createdAt" : "2013-10-27T23:23:38Z",
        "updatedAt" : "2013-10-28T01:52:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d776a128-33c0-4700-95e4-ae024a219083",
        "parentId" : "8d94d0be-9fca-4e74-924e-e5fd29e45e9b",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "going to keep as-is for now rather than create a separate method.\n",
        "createdAt" : "2013-10-28T00:51:59Z",
        "updatedAt" : "2013-10-28T01:52:53Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e0d29a3f076f1e9c6d0c9773d367ab886561cb0",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +2452,2456 @@                                       subset=subset, axis=ax)\n        else:\n            axis = self._get_axis_number(axis)\n            agg_axis = 1 - axis\n"
  },
  {
    "id" : "c4ce6027-ef1f-4119-8442-9b7973911e54",
    "prId" : 5560,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb729b49-adc0-48d3-8000-a4c29e02b181",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "bool vs. boolean?\n",
        "createdAt" : "2013-11-20T21:29:46Z",
        "updatedAt" : "2013-11-23T09:52:13Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "e6425640-22be-4ac3-82e5-9dc3934c1143",
        "parentId" : "cb729b49-adc0-48d3-8000-a4c29e02b181",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "What do you prefer?\n",
        "createdAt" : "2013-11-20T21:31:18Z",
        "updatedAt" : "2013-11-23T09:52:13Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a4583f01-9fdd-48b6-b631-aecd48f0f05f",
        "parentId" : "cb729b49-adc0-48d3-8000-a4c29e02b181",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "A quick count: ca 6 times `bool` is used and around 50 times `boolan` in all docstrings in frame.py.\n",
        "createdAt" : "2013-11-20T21:34:48Z",
        "updatedAt" : "2013-11-23T09:52:13Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0097433c-aa3f-4e5d-bdcc-90370da09945",
        "parentId" : "cb729b49-adc0-48d3-8000-a4c29e02b181",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "okay so go with boolean\n",
        "createdAt" : "2013-11-22T23:31:47Z",
        "updatedAt" : "2013-11-23T09:52:13Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a34b278c8162742818ed5f6cfbbbfafcd2399bb0",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +2017,2021 @@        copy : boolean, default True\n            Whether to make a copy of the data\n        drop_level : boolean, default True\n            If False, returns object with same levels as self.\n"
  },
  {
    "id" : "2fe7e903-2b30-4912-90c5-b7c7bbca887f",
    "prId" : 5820,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6ccaef5-3ddf-4d0c-96b6-407c820906d7",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "just for my clarity - why is it important that this return `in64` rather than `int32` or whatever local build desires? Is that our common practice?\n",
        "createdAt" : "2014-01-02T14:10:38Z",
        "updatedAt" : "2014-01-02T14:10:38Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "cc793a03-3c87-48fb-9075-46f08a00c27a",
        "parentId" : "c6ccaef5-3ddf-4d0c-96b6-407c820906d7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should always be int64 as it returns a series\nI think the sum of the boolean (when u isnull it returns boolean) when summed goes to int32 on 32 platforms\nnot really well defined what it should do\nbut that is generally a user decision\n",
        "createdAt" : "2014-01-02T14:24:44Z",
        "updatedAt" : "2014-01-02T14:24:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d6d6b9f45dc9a793827be53114f724b4c4873fd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3955,3959 @@                result = notnull(frame).sum(axis=axis)\n\n        return result.astype('int64')\n\n    def _count_level(self, level, axis=0, numeric_only=False):"
  },
  {
    "id" : "7d2476c6-1294-4063-a95c-bf3426985b0e",
    "prId" : 6135,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23bd1583-342f-4a7d-8af5-1d029cb9e06c",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "Would this be more clear as:\n\n> Lexicographically sort index of dataframe on specified axis, starting with the specified level and then sorting by other levels in the order they're defined on the multilevel index (`sort_remaining` can optionally disable sorting on other levels).\n\nIt's not perfect, but maybe clearer?\n\n```\n```\n",
        "createdAt" : "2014-04-06T00:55:10Z",
        "updatedAt" : "2014-04-12T06:23:50Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e774b8c6b73493c60cfb9ddc12f3a3cd0c40600",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2638,2642 @@                  inplace=False, sort_remaining=True):\n        \"\"\"\n        Sort multilevel index by chosen axis and primary level. Data will be\n        lexicographically sorted by the chosen level followed by the other\n        levels (in order)"
  },
  {
    "id" : "6f93cb75-295b-454f-bef1-3114755f1ebf",
    "prId" : 6366,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "317e04e9-5383-40d4-9a92-d0545db1ae3f",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "maybe mention something of `@` in the docstring?\n",
        "createdAt" : "2014-02-20T08:24:07Z",
        "updatedAt" : "2014-02-20T14:21:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "448ebec886c9344a188566c04c201936d0096f30",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1736,1740 @@        return self.where(key)\n\n    def query(self, expr, **kwargs):\n        \"\"\"Query the columns of a frame with a boolean expression.\n"
  },
  {
    "id" : "3be414fd-8138-4320-9eec-87477d2edde8",
    "prId" : 7093,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2104cbf5-c187-494f-aa61-aef588eed5c9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I don't think you actually need the if (if its empty it just won't iterate over anything)...but no biggie\n",
        "createdAt" : "2014-05-10T19:16:17Z",
        "updatedAt" : "2014-05-10T21:29:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "074c723a-c5e3-4334-a831-857c0bb259ba",
        "parentId" : "2104cbf5-c187-494f-aa61-aef588eed5c9",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I left it out originally, but I hit an error somewhere, I can't remember exactly what.\n",
        "createdAt" : "2014-05-10T21:30:33Z",
        "updatedAt" : "2014-05-10T21:30:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "193f238129648e581ce18cfaa3619b604bd312d7",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +4217,4221 @@                     for (_, vals) in data.iteritems()]\n        result = DataFrame(quantiles, index=data._info_axis, columns=q).T\n        if len(is_dt_col) > 0:\n            result[is_dt_col] = result[is_dt_col].applymap(lib.Timestamp)\n        if squeeze:"
  },
  {
    "id" : "1e3a23f8-d23c-4e9c-a5e0-5f8fc38462da",
    "prId" : 8227,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1af76873-2637-4256-b68b-3b3cf235ef1e",
        "parentId" : null,
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "It is not related to this PR specifically, but I think right-hand-side summand can be just `other.index.difference(self.columns)`\n",
        "createdAt" : "2014-09-11T13:36:45Z",
        "updatedAt" : "2014-09-11T14:51:39Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      },
      {
        "id" : "62bee678-36c6-4225-b951-9f2ad489b1c6",
        "parentId" : "1af76873-2637-4256-b68b-3b3cf235ef1e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm....maybe....go ahead and give a try\n",
        "createdAt" : "2014-09-11T14:26:17Z",
        "updatedAt" : "2014-09-11T14:51:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "07a46afa97e75f3bf768afb4e0c280a4613b17a4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3683,3687 @@\n            index = None if other.name is None else [other.name]\n            combined_columns = self.columns.tolist() + (self.columns | other.index).difference(self.columns).tolist()\n            other = other.reindex(combined_columns, copy=False)\n            other = DataFrame(other.values.reshape((1, len(other))),"
  },
  {
    "id" : "5853abbc-a943-4931-8eba-2b161faf9fc7",
    "prId" : 8592,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abc2d079-14fe-4e34-a305-45c9bcdb5f0f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "where these the only 2 that didn't pass 'name' ?\n",
        "createdAt" : "2014-10-26T23:51:00Z",
        "updatedAt" : "2014-10-26T23:51:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "74dd4fd7-1b05-4301-b3e0-1bae71cdb296",
        "parentId" : "abc2d079-14fe-4e34-a305-45c9bcdb5f0f",
        "authorId" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "body" : "There's also this line where name wasn't being passed:\nhttps://github.com/pydata/pandas/pull/8592/files#diff-03b380f521c43cf003207b0711bac67fR4007\n\nI think the plan is to remove the above two (any/all) in the separate PR for any/all implementation.\n",
        "createdAt" : "2014-10-27T00:03:06Z",
        "updatedAt" : "2014-10-27T00:03:06Z",
        "lastEditedBy" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "tags" : [
        ]
      },
      {
        "id" : "da805f94-1237-448f-bcd1-e4b1f8a9cc8c",
        "parentId" : "abc2d079-14fe-4e34-a305-45c9bcdb5f0f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right, I was meaning any definitions (e.g. make_stat_function etc). no answer looks like no, ok, good.\n",
        "createdAt" : "2014-10-27T00:11:14Z",
        "updatedAt" : "2014-10-27T00:11:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d99270e659b0ceba51b22340d6d321439eccef1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4130,4134 @@            return self._agg_by_level('any', axis=axis, level=level,\n                                      skipna=skipna)\n        return self._reduce(nanops.nanany, 'any', axis=axis, skipna=skipna,\n                            numeric_only=bool_only, filter_type='bool')\n"
  },
  {
    "id" : "85f31c87-09e7-4d4b-9720-5663b8206472",
    "prId" : 8857,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11787322-bde0-4dac-a2f9-04e6921600ea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this actually defaults to the `sys.encoding` (which has those defaults) IIRC. maybe need someone non-us to verify this?\n",
        "createdAt" : "2014-11-19T21:59:35Z",
        "updatedAt" : "2014-11-19T21:59:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8961cb49-b331-44d7-a66d-d378dc19ea17",
        "parentId" : "11787322-bde0-4dac-a2f9-04e6921600ea",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "I'm not sure on the semantics for Python 3, but for Python 2 the csv modules does ASCII only (or at least doesn't mention sys.encoding at all), not sure if we've changed the defaults internally.\n",
        "createdAt" : "2014-11-20T04:42:27Z",
        "updatedAt" : "2014-11-20T04:42:42Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "92ad04ec-635d-4791-a130-59ac293354b6",
        "parentId" : "11787322-bde0-4dac-a2f9-04e6921600ea",
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "The default encoding is indeed ascii for py2 and utf-8 for py3. There is a way to change that but it involves quite a bit of magic: http://stackoverflow.com/questions/2276200/changing-default-encoding-of-python\n",
        "createdAt" : "2014-11-20T07:49:27Z",
        "updatedAt" : "2014-11-20T11:15:00Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a084273b1bdba95332d23cac0a316b25169ab1e1",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1139,1143 @@        encoding : string, optional\n            A string representing the encoding to use in the output file,\n            defaults to 'ascii' on Python 2 and 'utf-8' on Python 3.\n        line_terminator : string, default '\\\\n'\n            The newline character or character sequence to use in the output"
  },
  {
    "id" : "a98be8c6-cf0f-47b0-8647-e832003dbb75",
    "prId" : 9239,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cda2d69d-1a6e-4c04-a94c-77f0b78e32e2",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think there has been an previous comment about this, but two things:\n- Is this actually necessary? (But I probably also do not yet fully understand pandas' datamodel) Eg does `df['a'] = ..` always copy?\n- In the probable case of misunderstanding (so this is my actual comment :-), I would maybe add a note about this in the docstring? `DataFrame.append` has this in the sense it says `returning a new object`\n",
        "createdAt" : "2015-01-28T08:59:27Z",
        "updatedAt" : "2015-03-01T13:47:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "46c85bbb-8b55-4462-9695-00c1ec96da74",
        "parentId" : "cda2d69d-1a6e-4c04-a94c-77f0b78e32e2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "This would violate pandas data model. The `assign` method would then have side effects (without it being obvious that it does), and further intuition on chaining would be very difficult to reason.\n\ne.g. If you allowed **inplace** chaining\n\n`df.assign(C=df.A/df.C)`\n\nwould then add `C` to the ORIGINAL frame.  (I have some commentary at on this later)\n",
        "createdAt" : "2015-01-28T10:55:11Z",
        "updatedAt" : "2015-03-01T13:47:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5606c125-e8c6-4509-a459-4d51c5f97bfc",
        "parentId" : "cda2d69d-1a6e-4c04-a94c-77f0b78e32e2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jorisvandenbossche \n`df['a'] = ...` NEVER copies. That is the point its an inplace assignment.\n",
        "createdAt" : "2015-01-28T11:01:38Z",
        "updatedAt" : "2015-03-01T13:47:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a34b778c-c146-469a-82f2-776cf6444a19",
        "parentId" : "cda2d69d-1a6e-4c04-a94c-77f0b78e32e2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback Thanks for explaining! (this does me thinking we should really have some better docs about the internals .. but of course, someone has to write (and keep up to date) them)\n\nSo assigning with `df['a'] = ..` adds a new block and does not consolidate it with another block if one exists of that type? Why not having the same approach here? What are the side effects you are talking about with `df['a'] = ..` ?\n",
        "createdAt" : "2015-01-28T13:33:07Z",
        "updatedAt" : "2015-03-01T13:47:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "12a987e1-4a5f-4a63-a95c-d71624e511f4",
        "parentId" : "cda2d69d-1a6e-4c04-a94c-77f0b78e32e2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no, I was saying side-effects meaning that `df` IS modified, as opposed to `df.assign(...)` which returns a NEW object. `df['a'] = ..` is just like is says, its an assignment INPLACE.\n\nwhether this creates a new block and/or consolidates is an implementation detail (it actually creates a new block if its a new dtype, then consolidates)\n",
        "createdAt" : "2015-01-28T14:14:20Z",
        "updatedAt" : "2015-03-01T13:47:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a4d5e1c5-9195-4c84-aa05-e3392b5cbe78",
        "parentId" : "cda2d69d-1a6e-4c04-a94c-77f0b78e32e2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "yep, thinking more about it now, it is indeed logical, if you are chaining, that it returns a new object. It should just be clear from the docs, as @TomAugspurger adapted them now.\n",
        "createdAt" : "2015-01-28T15:48:22Z",
        "updatedAt" : "2015-03-01T13:47:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a5bd899833ee72678e6c61b9e22ba1b24c19878",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +2286,2290 @@        9  10 -0.758542  2.302585\n        \"\"\"\n        data = self.copy()\n\n        # do all calculations first..."
  },
  {
    "id" : "1b55d174-09d9-40f7-9587-a9d9af84af47",
    "prId" : 9239,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc291dd3-b29d-40b0-af0b-e259c01505d6",
        "parentId" : null,
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Better to use `.loc` here, `__setitem__` can behave unexpectedly depending on input.\n",
        "createdAt" : "2015-02-02T13:22:03Z",
        "updatedAt" : "2015-03-01T13:47:10Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "f2a7506d-94d3-418a-8aba-3c8352d75bea",
        "parentId" : "dc291dd3-b29d-40b0-af0b-e259c01505d6",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no this is correct; this is by definition a string setting of a column \nmaybe just assert that the keys are steings (I think that the function call would raise before hand if they were not in any event)\n",
        "createdAt" : "2015-02-02T13:25:30Z",
        "updatedAt" : "2015-03-01T13:47:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "617c41e4-2a94-465f-a5b1-3c0db1bd7012",
        "parentId" : "dc291dd3-b29d-40b0-af0b-e259c01505d6",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The keys in `**kwargs` are required to be strings by Python. No need to check.\n",
        "createdAt" : "2015-02-28T13:54:16Z",
        "updatedAt" : "2015-03-01T13:47:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a5bd899833ee72678e6c61b9e22ba1b24c19878",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +2299,2303 @@        # ... and then assign\n        for k, v in results.items():\n            data[k] = v\n\n        return data"
  },
  {
    "id" : "5af30f81-bdec-414c-993b-d9acc43417e8",
    "prId" : 9239,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecb7735f-c68b-4268-a884-b985c2aa420b",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add here a `versionadded` as well?\n",
        "createdAt" : "2015-03-01T13:03:42Z",
        "updatedAt" : "2015-03-01T13:47:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "83484906-ad39-4302-91b4-2df1fc8472f6",
        "parentId" : "ecb7735f-c68b-4268-a884-b985c2aa420b",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Good idea. Done.\n",
        "createdAt" : "2015-03-01T13:47:38Z",
        "updatedAt" : "2015-03-01T13:47:38Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a5bd899833ee72678e6c61b9e22ba1b24c19878",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2225,2229 @@        Assign new columns to a DataFrame, returning a new object\n        (a copy) with all the original columns in addition to the new ones.\n\n        .. versionadded:: 0.16.0\n"
  },
  {
    "id" : "96055303-205b-4aed-a2d8-2671955928c0",
    "prId" : 9321,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb6c234d-56db-47f0-bcb9-8a76cef6c8ab",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, maybe we should deprecate `DataFrame.hist` (and point to `DataFrame.plot.hist`) as the canonical way?\n",
        "createdAt" : "2015-09-10T10:55:02Z",
        "updatedAt" : "2015-09-10T21:31:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "18090a5e-1e38-4e3a-8a3a-41b430292262",
        "parentId" : "cb6c234d-56db-47f0-bcb9-8a76cef6c8ab",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The defaults on `DataFrame.hist` are different than`DataFrame.plot.hist` which I think is why we have both for now. I could go either way on deprecating `DataFrame.hist`.\n",
        "createdAt" : "2015-09-10T12:51:59Z",
        "updatedAt" : "2015-09-10T21:31:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a65bd5ad7931114fd61f10db51d887ca31b5f3a",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +5435,5439 @@\nDataFrame.plot = base.AccessorProperty(gfx.FramePlotMethods, gfx.FramePlotMethods)\nDataFrame.hist = gfx.hist_frame\n\n"
  },
  {
    "id" : "1e705154-293b-44ae-9d40-4b82569e38a1",
    "prId" : 9769,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62bef5dd-84ce-48a6-8ad4-3bff2e0eeb50",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "You actually need a full empty line to make a new paragraph :)\n",
        "createdAt" : "2015-04-02T16:22:51Z",
        "updatedAt" : "2015-04-02T18:20:20Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      }
    ],
    "commit" : "761be0fec7d010fc807aa28e62da61564c9847bd",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +4414,4418 @@        Gets the mode(s) of each element along the axis selected. Empty if nothing\n        has 2+ occurrences. Adds a row for each mode per label, fills in gaps\n        with nan. \n        \n        Note that there could be multiple values returned for the selected"
  },
  {
    "id" : "534d3836-ceb6-4f36-b1f9-73e1be74f919",
    "prId" : 10054,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b858a843-b8a3-452f-8743-e548d29188e6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a versionadded directive\n",
        "createdAt" : "2015-08-19T21:07:16Z",
        "updatedAt" : "2015-09-01T15:46:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "46458e92-b041-4d5d-a03f-e35890dfc517",
        "parentId" : "b858a843-b8a3-452f-8743-e548d29188e6",
        "authorId" : "f53db999-ff5e-4777-9ba4-296d2ecbfa0f",
        "body" : "Check (I think that's formatted correctly?)\n",
        "createdAt" : "2015-08-20T16:27:31Z",
        "updatedAt" : "2015-09-01T15:46:44Z",
        "lastEditedBy" : "f53db999-ff5e-4777-9ba4-296d2ecbfa0f",
        "tags" : [
        ]
      }
    ],
    "commit" : "addef51c8b5830a8fcf87d3b6c804ccafe05f9af",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +117,121 @@    If False, do not copy data unnecessarily\nindicator : boolean or string, default False\n    If True, adds a column to output DataFrame called \"_merge\" with \n    information on the source of each row. \n    If string, column with information on source of each row will be added to "
  },
  {
    "id" : "ba4e7896-814d-4a4a-9e88-4fbe6b76fc6e",
    "prId" : 10393,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab1421ae-c263-4ec2-8487-f9e59b175700",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add a `.. versionadded:: 0.17.0` here (and for nsmallest as well)?\n",
        "createdAt" : "2015-06-29T09:29:06Z",
        "updatedAt" : "2015-08-04T16:43:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "39b8ce3c26250528856aecb323ee96ca075b385b",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +3140,3144 @@        \"\"\"Get the rows of a DataFrame sorted by the `n` largest\n        values of `columns`.\n\n        .. versionadded:: 0.17.0\n"
  },
  {
    "id" : "7c7913f0-c75c-46cf-a913-36ff6e3438c1",
    "prId" : 10568,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1f11fdb-569b-4b90-872e-6c957bd9c6c4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this should be an `int` dtype series. I think you have to require >= 0. I suppose you could ignore nans as well. I am not sure what `np.round` would do with these cases, so pls add some tests for validation. If the errors are obtuse, then may need to catch and report a better message.\n",
        "createdAt" : "2015-08-26T01:36:05Z",
        "updatedAt" : "2015-09-02T13:02:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc57e2e52e9fbe4535bc44eb3bda62214a116f79",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +4311,4315 @@                    yield df[col]\n\n        if isinstance(decimals, (dict, Series)):\n            new_cols = [col for col in _dict_round(self, decimals)]\n        elif com.is_integer(decimals):"
  },
  {
    "id" : "e58e177b-eea2-4e3e-8106-a9fc488ccc81",
    "prId" : 10726,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f5a83d6-3571-4fff-82b0-f464029e3a89",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Why is it not allowed to sort the order of the columns by the values of a row?\n",
        "createdAt" : "2015-08-12T10:35:52Z",
        "updatedAt" : "2015-08-18T00:07:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "aaa47da8-a1fb-44e2-ac12-0be865e30c80",
        "parentId" : "5f5a83d6-3571-4fff-82b0-f464029e3a89",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "ok, suppose this was just copied from before, but still wondering\n",
        "createdAt" : "2015-08-12T10:36:46Z",
        "updatedAt" : "2015-08-18T00:07:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ee6400f0-b4c1-4752-bbb7-f37fa42cacc1",
        "parentId" : "5f5a83d6-3571-4fff-82b0-f464029e3a89",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeh this is just not implemented. not sure why. I'll put a bullet and see if i can do it. Was trying not to change any impl.\n",
        "createdAt" : "2015-08-12T11:34:15Z",
        "updatedAt" : "2015-08-18T00:07:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "004ca494-ffcb-47b3-800e-dc4a17a3a121",
        "parentId" : "5f5a83d6-3571-4fff-82b0-f464029e3a89",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "can certainly in another pr. Is there an issue for it?\n",
        "createdAt" : "2015-08-12T15:16:18Z",
        "updatedAt" : "2015-08-18T00:07:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7e2fe6cb-36d2-487a-ac03-69c34f111da8",
        "parentId" : "5f5a83d6-3571-4fff-82b0-f464029e3a89",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The issue is #2940\n",
        "createdAt" : "2015-08-12T15:22:00Z",
        "updatedAt" : "2015-08-18T00:07:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "faf1a351-ed67-412e-ab81-fe9715122c53",
        "parentId" : "5f5a83d6-3571-4fff-82b0-f464029e3a89",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "#10806 \n",
        "createdAt" : "2015-08-12T15:24:01Z",
        "updatedAt" : "2015-08-18T00:07:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "13d2d71f57cd88c0b14166b65402b696bdf0ce7d",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +2959,2963 @@        if axis != 0:\n            raise ValueError('When sorting by column, axis must be 0 '\n                             '(rows)')\n        if not isinstance(by, list):\n            by = [by]"
  },
  {
    "id" : "91e05c20-365e-4624-9161-411f491fa6b6",
    "prId" : 11011,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb5901bb-c38c-450b-ac6e-9e0337fde000",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you make these all be separated by `\\n` so this is consistent.\n",
        "createdAt" : "2015-09-09T11:51:13Z",
        "updatedAt" : "2015-09-09T13:55:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "beab4eb4a8c2b1f397a78b7f3a759bbb828cd45a",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1492,1496 @@            return formatter.buf.getvalue()\n\n    @Appender(fmt.common_docstring + fmt.return_docstring, indents=1)\n    def to_latex(self, buf=None, columns=None, col_space=None, colSpace=None,\n                 header=True, index=True, na_rep='NaN', formatters=None,"
  },
  {
    "id" : "d834c4c2-f69b-460d-a19b-5b2fcf4cdb59",
    "prId" : 11158,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f5a7b91-8fd1-459d-ad64-9729edddc2a2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I don't remember why we do this, but is `PeriodIndex` needed as well? (and do we have tests for same)?\n",
        "createdAt" : "2015-09-21T00:58:21Z",
        "updatedAt" : "2015-09-21T01:59:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "100e05ec-3575-4ccb-ac40-d0429d2fdc3b",
        "parentId" : "0f5a7b91-8fd1-459d-ad64-9729edddc2a2",
        "authorId" : "aa76ca2b-2c97-45f3-bb6a-3e0ee670395b",
        "body" : "This is to handle the case where the dict had `datetime/timedelta64`s as the keys - they're boxed in creating the index, so need to be changed in the dict too so the lookups work.  From this PR https://github.com/pydata/pandas/pull/10269.\n\nAFAIK not needed for `PeriodIndex` since there aren't any types that get coerced to it?  This test covers nested construction with a `PeriodIndex`.\nhttps://github.com/pydata/pandas/blob/master/pandas/tseries/tests/test_period.py#L2078\n",
        "createdAt" : "2015-09-21T01:11:13Z",
        "updatedAt" : "2015-09-21T01:59:44Z",
        "lastEditedBy" : "aa76ca2b-2c97-45f3-bb6a-3e0ee670395b",
        "tags" : [
        ]
      },
      {
        "id" : "d468070a-ce79-4d91-83e1-9a4a13568197",
        "parentId" : "0f5a7b91-8fd1-459d-ad64-9729edddc2a2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, can you move all of these types of tests to the same location (e.g. out of test_period, not sure where datetimeindex/timedeltaindex are) and prob into test_frame (though I hate adding to this, its really IS part of it).\n",
        "createdAt" : "2015-09-21T01:43:05Z",
        "updatedAt" : "2015-09-21T01:59:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcb78dcf7989c8469fd20f47f8b7db9c22c00c4d",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +5406,5410 @@                    oindex = index.astype('O')\n\n                if isinstance(index, (DatetimeIndex, TimedeltaIndex)):\n                    v = _dict_compat(v)\n                else:"
  },
  {
    "id" : "7e985f5b-c8bf-4486-8343-8c6bbb20dc28",
    "prId" : 11809,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fd7f98e-b76f-48e4-8d2e-f2b128ffc861",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is fine, but not really necessary as these do the same thing \n",
        "createdAt" : "2015-12-11T13:11:30Z",
        "updatedAt" : "2015-12-15T22:10:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "27b89b68-e863-4720-8414-71316acc7071",
        "parentId" : "7fd7f98e-b76f-48e4-8d2e-f2b128ffc861",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "Actually, this change was needed to get rid of the `out` argument. If `DataFrame.round()` calls `np.round()`, then `np.round()` dispatches to `Series.round()`, passing the `out` argument. \n",
        "createdAt" : "2015-12-15T16:47:35Z",
        "updatedAt" : "2015-12-15T22:10:09Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      },
      {
        "id" : "2f83702d-90dd-4652-aefa-108a81b2701e",
        "parentId" : "7fd7f98e-b76f-48e4-8d2e-f2b128ffc861",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok\n",
        "createdAt" : "2015-12-15T16:56:57Z",
        "updatedAt" : "2015-12-15T22:10:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "45b304e1a41b7726c47e186ac7f498bc94691ce2",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +4398,4402 @@        elif com.is_integer(decimals):\n            # Dispatch to Series.round\n            new_cols = [v.round(decimals) for _, v in self.iteritems()]\n        else:\n            raise TypeError(\"decimals must be an integer, a dict-like or a Series\")"
  }
]