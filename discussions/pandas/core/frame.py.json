[
  {
    "id" : "cc38ceff-b2af-4467-b765-cad88e0438fb",
    "prId" : 4732,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f86eb3c3-af5e-42fc-9888-2e612db8dec0",
        "parentId" : null,
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "is this equivalent to `[dict(d) for d in data]` ? :s\n",
        "createdAt" : "2013-09-04T23:18:42Z",
        "updatedAt" : "2013-09-06T01:11:48Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      },
      {
        "id" : "22d5306f-663a-4f0b-8db2-d156675df199",
        "parentId" : "f86eb3c3-af5e-42fc-9888-2e612db8dec0",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "yes, but it looks like it avoids instantiating new dicts if they are already dicts. Cython methods usually have rigid typechecks, which is probably the reason for the `is` comparison. (see `lib.dicts_to_array` below)\n",
        "createdAt" : "2013-09-04T23:39:29Z",
        "updatedAt" : "2013-09-06T01:11:48Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "d8b1c71d-4808-4a7e-83a0-21ab7dc1a0e4",
        "parentId" : "f86eb3c3-af5e-42fc-9888-2e612db8dec0",
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "wow, surprised it's so expensive to call dict on a dict (you're right this is significantly faster).\n",
        "createdAt" : "2013-09-05T08:25:46Z",
        "updatedAt" : "2013-09-06T01:11:48Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      }
    ],
    "commit" : "db74b2a86524c8dda75e103fe3e2dd611d46e620",
    "line" : 499,
    "diffHunk" : "@@ -1,1 +4923,4927 @@    # assure that they are of the base dict class and not of derived\n    # classes\n    data = [(type(d) is dict) and d or dict(d) for d in data]\n\n    content = list(lib.dicts_to_array(data, list(columns)).T)"
  },
  {
    "id" : "837a8f5c-d204-45ef-9fe9-bfdd20768a9f",
    "prId" : 4857,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ab4afee-fd58-49b9-8f7a-2002a62ca9ce",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "btw - :+1: for fixing the default setting here to be what Excel actually uses\n",
        "createdAt" : "2013-09-16T21:50:38Z",
        "updatedAt" : "2013-09-22T22:43:13Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0c290f4879a542b027b4c36a922f5ae2216ed5a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1357,1361 @@        formatter.save()\n\n    def to_excel(self, excel_writer, sheet_name='Sheet1', na_rep='',\n                 float_format=None, cols=None, header=True, index=True,\n                 index_label=None, startrow=0, startcol=0, engine=None):"
  },
  {
    "id" : "d43481b8-a9e9-40b4-90e4-9fd41df76a57",
    "prId" : 4936,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07916ec1-8621-40d5-9686-22bfe2a68d11",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "you don't need the backslash here\n",
        "createdAt" : "2013-09-25T03:07:04Z",
        "updatedAt" : "2013-09-25T03:07:04Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca6475d883c0315bb1bbf1e20c8be5eed10404e8",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +985,989 @@            return dict((k, v) for k, v in compat.iteritems(self))\n        elif outtype.lower().startswith('r'):\n            return [dict((k, v) for k, v in zip(self.columns, row)) \\\n                    for row in self.values]\n        else:  # pragma: no cover"
  },
  {
    "id" : "48863dd5-67fc-4d9e-8cdf-43063baed157",
    "prId" : 5247,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d94d0be-9fca-4e74-924e-e5fd29e45e9b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I know Panel overrides this method, but this is not safe...use `get_block_manager_axis`\n",
        "createdAt" : "2013-10-27T22:07:27Z",
        "updatedAt" : "2013-10-28T01:52:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ed1f78e8-d512-42db-9a5b-a1d0371e8b74",
        "parentId" : "8d94d0be-9fca-4e74-924e-e5fd29e45e9b",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "This is on DataFrame not generic, before I change, to be clear you mean change`agg_axis = 1 - axis` to:\n\n```\nagg_axis = self._get_block_manager_axis(axis)\n```\n",
        "createdAt" : "2013-10-27T22:42:45Z",
        "updatedAt" : "2013-10-28T01:52:53Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "2540edee-033e-4fa2-8a13-9dd4bd113f36",
        "parentId" : "8d94d0be-9fca-4e74-924e-e5fd29e45e9b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sorry I thought it was on generic ; there is an agg_axis method somewhere (look at _reduce) - it gives same answer obviously but is more correct \n",
        "createdAt" : "2013-10-27T22:50:08Z",
        "updatedAt" : "2013-10-28T01:52:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8fdcfd81-6469-4c3a-b5aa-5cd02b3e8935",
        "parentId" : "8d94d0be-9fca-4e74-924e-e5fd29e45e9b",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "because of what it needs to do, I think it's actually clearer to leave as is (because it needs to pass the name to reindex, etc.), otherwise have to either add a `_get_agg_axis_number` method, or add another keyword argument to `_get_agg_axis`.\n\nI'm fine with going with what you'd like to do though.\n",
        "createdAt" : "2013-10-27T23:08:39Z",
        "updatedAt" : "2013-10-28T01:52:53Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "169fdf6c-4e75-4c20-9348-c093395be6e9",
        "parentId" : "8d94d0be-9fca-4e74-924e-e5fd29e45e9b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "up2u\n",
        "createdAt" : "2013-10-27T23:23:38Z",
        "updatedAt" : "2013-10-28T01:52:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d776a128-33c0-4700-95e4-ae024a219083",
        "parentId" : "8d94d0be-9fca-4e74-924e-e5fd29e45e9b",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "going to keep as-is for now rather than create a separate method.\n",
        "createdAt" : "2013-10-28T00:51:59Z",
        "updatedAt" : "2013-10-28T01:52:53Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e0d29a3f076f1e9c6d0c9773d367ab886561cb0",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +2452,2456 @@                                       subset=subset, axis=ax)\n        else:\n            axis = self._get_axis_number(axis)\n            agg_axis = 1 - axis\n"
  },
  {
    "id" : "c4ce6027-ef1f-4119-8442-9b7973911e54",
    "prId" : 5560,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb729b49-adc0-48d3-8000-a4c29e02b181",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "bool vs. boolean?\n",
        "createdAt" : "2013-11-20T21:29:46Z",
        "updatedAt" : "2013-11-23T09:52:13Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "e6425640-22be-4ac3-82e5-9dc3934c1143",
        "parentId" : "cb729b49-adc0-48d3-8000-a4c29e02b181",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "What do you prefer?\n",
        "createdAt" : "2013-11-20T21:31:18Z",
        "updatedAt" : "2013-11-23T09:52:13Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a4583f01-9fdd-48b6-b631-aecd48f0f05f",
        "parentId" : "cb729b49-adc0-48d3-8000-a4c29e02b181",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "A quick count: ca 6 times `bool` is used and around 50 times `boolan` in all docstrings in frame.py.\n",
        "createdAt" : "2013-11-20T21:34:48Z",
        "updatedAt" : "2013-11-23T09:52:13Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0097433c-aa3f-4e5d-bdcc-90370da09945",
        "parentId" : "cb729b49-adc0-48d3-8000-a4c29e02b181",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "okay so go with boolean\n",
        "createdAt" : "2013-11-22T23:31:47Z",
        "updatedAt" : "2013-11-23T09:52:13Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a34b278c8162742818ed5f6cfbbbfafcd2399bb0",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +2017,2021 @@        copy : boolean, default True\n            Whether to make a copy of the data\n        drop_level : boolean, default True\n            If False, returns object with same levels as self.\n"
  },
  {
    "id" : "2fe7e903-2b30-4912-90c5-b7c7bbca887f",
    "prId" : 5820,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6ccaef5-3ddf-4d0c-96b6-407c820906d7",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "just for my clarity - why is it important that this return `in64` rather than `int32` or whatever local build desires? Is that our common practice?\n",
        "createdAt" : "2014-01-02T14:10:38Z",
        "updatedAt" : "2014-01-02T14:10:38Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "cc793a03-3c87-48fb-9075-46f08a00c27a",
        "parentId" : "c6ccaef5-3ddf-4d0c-96b6-407c820906d7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should always be int64 as it returns a series\nI think the sum of the boolean (when u isnull it returns boolean) when summed goes to int32 on 32 platforms\nnot really well defined what it should do\nbut that is generally a user decision\n",
        "createdAt" : "2014-01-02T14:24:44Z",
        "updatedAt" : "2014-01-02T14:24:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d6d6b9f45dc9a793827be53114f724b4c4873fd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3955,3959 @@                result = notnull(frame).sum(axis=axis)\n\n        return result.astype('int64')\n\n    def _count_level(self, level, axis=0, numeric_only=False):"
  },
  {
    "id" : "7d2476c6-1294-4063-a95c-bf3426985b0e",
    "prId" : 6135,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23bd1583-342f-4a7d-8af5-1d029cb9e06c",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "Would this be more clear as:\n\n> Lexicographically sort index of dataframe on specified axis, starting with the specified level and then sorting by other levels in the order they're defined on the multilevel index (`sort_remaining` can optionally disable sorting on other levels).\n\nIt's not perfect, but maybe clearer?\n\n```\n```\n",
        "createdAt" : "2014-04-06T00:55:10Z",
        "updatedAt" : "2014-04-12T06:23:50Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e774b8c6b73493c60cfb9ddc12f3a3cd0c40600",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2638,2642 @@                  inplace=False, sort_remaining=True):\n        \"\"\"\n        Sort multilevel index by chosen axis and primary level. Data will be\n        lexicographically sorted by the chosen level followed by the other\n        levels (in order)"
  },
  {
    "id" : "6f93cb75-295b-454f-bef1-3114755f1ebf",
    "prId" : 6366,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "317e04e9-5383-40d4-9a92-d0545db1ae3f",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "maybe mention something of `@` in the docstring?\n",
        "createdAt" : "2014-02-20T08:24:07Z",
        "updatedAt" : "2014-02-20T14:21:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "448ebec886c9344a188566c04c201936d0096f30",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1736,1740 @@        return self.where(key)\n\n    def query(self, expr, **kwargs):\n        \"\"\"Query the columns of a frame with a boolean expression.\n"
  },
  {
    "id" : "3be414fd-8138-4320-9eec-87477d2edde8",
    "prId" : 7093,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2104cbf5-c187-494f-aa61-aef588eed5c9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I don't think you actually need the if (if its empty it just won't iterate over anything)...but no biggie\n",
        "createdAt" : "2014-05-10T19:16:17Z",
        "updatedAt" : "2014-05-10T21:29:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "074c723a-c5e3-4334-a831-857c0bb259ba",
        "parentId" : "2104cbf5-c187-494f-aa61-aef588eed5c9",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I left it out originally, but I hit an error somewhere, I can't remember exactly what.\n",
        "createdAt" : "2014-05-10T21:30:33Z",
        "updatedAt" : "2014-05-10T21:30:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "193f238129648e581ce18cfaa3619b604bd312d7",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +4217,4221 @@                     for (_, vals) in data.iteritems()]\n        result = DataFrame(quantiles, index=data._info_axis, columns=q).T\n        if len(is_dt_col) > 0:\n            result[is_dt_col] = result[is_dt_col].applymap(lib.Timestamp)\n        if squeeze:"
  },
  {
    "id" : "1e3a23f8-d23c-4e9c-a5e0-5f8fc38462da",
    "prId" : 8227,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1af76873-2637-4256-b68b-3b3cf235ef1e",
        "parentId" : null,
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "It is not related to this PR specifically, but I think right-hand-side summand can be just `other.index.difference(self.columns)`\n",
        "createdAt" : "2014-09-11T13:36:45Z",
        "updatedAt" : "2014-09-11T14:51:39Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      },
      {
        "id" : "62bee678-36c6-4225-b951-9f2ad489b1c6",
        "parentId" : "1af76873-2637-4256-b68b-3b3cf235ef1e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm....maybe....go ahead and give a try\n",
        "createdAt" : "2014-09-11T14:26:17Z",
        "updatedAt" : "2014-09-11T14:51:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "07a46afa97e75f3bf768afb4e0c280a4613b17a4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3683,3687 @@\n            index = None if other.name is None else [other.name]\n            combined_columns = self.columns.tolist() + (self.columns | other.index).difference(self.columns).tolist()\n            other = other.reindex(combined_columns, copy=False)\n            other = DataFrame(other.values.reshape((1, len(other))),"
  },
  {
    "id" : "5853abbc-a943-4931-8eba-2b161faf9fc7",
    "prId" : 8592,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abc2d079-14fe-4e34-a305-45c9bcdb5f0f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "where these the only 2 that didn't pass 'name' ?\n",
        "createdAt" : "2014-10-26T23:51:00Z",
        "updatedAt" : "2014-10-26T23:51:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "74dd4fd7-1b05-4301-b3e0-1bae71cdb296",
        "parentId" : "abc2d079-14fe-4e34-a305-45c9bcdb5f0f",
        "authorId" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "body" : "There's also this line where name wasn't being passed:\nhttps://github.com/pydata/pandas/pull/8592/files#diff-03b380f521c43cf003207b0711bac67fR4007\n\nI think the plan is to remove the above two (any/all) in the separate PR for any/all implementation.\n",
        "createdAt" : "2014-10-27T00:03:06Z",
        "updatedAt" : "2014-10-27T00:03:06Z",
        "lastEditedBy" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "tags" : [
        ]
      },
      {
        "id" : "da805f94-1237-448f-bcd1-e4b1f8a9cc8c",
        "parentId" : "abc2d079-14fe-4e34-a305-45c9bcdb5f0f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right, I was meaning any definitions (e.g. make_stat_function etc). no answer looks like no, ok, good.\n",
        "createdAt" : "2014-10-27T00:11:14Z",
        "updatedAt" : "2014-10-27T00:11:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d99270e659b0ceba51b22340d6d321439eccef1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4130,4134 @@            return self._agg_by_level('any', axis=axis, level=level,\n                                      skipna=skipna)\n        return self._reduce(nanops.nanany, 'any', axis=axis, skipna=skipna,\n                            numeric_only=bool_only, filter_type='bool')\n"
  },
  {
    "id" : "85f31c87-09e7-4d4b-9720-5663b8206472",
    "prId" : 8857,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11787322-bde0-4dac-a2f9-04e6921600ea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this actually defaults to the `sys.encoding` (which has those defaults) IIRC. maybe need someone non-us to verify this?\n",
        "createdAt" : "2014-11-19T21:59:35Z",
        "updatedAt" : "2014-11-19T21:59:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8961cb49-b331-44d7-a66d-d378dc19ea17",
        "parentId" : "11787322-bde0-4dac-a2f9-04e6921600ea",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "I'm not sure on the semantics for Python 3, but for Python 2 the csv modules does ASCII only (or at least doesn't mention sys.encoding at all), not sure if we've changed the defaults internally.\n",
        "createdAt" : "2014-11-20T04:42:27Z",
        "updatedAt" : "2014-11-20T04:42:42Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "92ad04ec-635d-4791-a130-59ac293354b6",
        "parentId" : "11787322-bde0-4dac-a2f9-04e6921600ea",
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "The default encoding is indeed ascii for py2 and utf-8 for py3. There is a way to change that but it involves quite a bit of magic: http://stackoverflow.com/questions/2276200/changing-default-encoding-of-python\n",
        "createdAt" : "2014-11-20T07:49:27Z",
        "updatedAt" : "2014-11-20T11:15:00Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a084273b1bdba95332d23cac0a316b25169ab1e1",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1139,1143 @@        encoding : string, optional\n            A string representing the encoding to use in the output file,\n            defaults to 'ascii' on Python 2 and 'utf-8' on Python 3.\n        line_terminator : string, default '\\\\n'\n            The newline character or character sequence to use in the output"
  },
  {
    "id" : "a98be8c6-cf0f-47b0-8647-e832003dbb75",
    "prId" : 9239,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cda2d69d-1a6e-4c04-a94c-77f0b78e32e2",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think there has been an previous comment about this, but two things:\n- Is this actually necessary? (But I probably also do not yet fully understand pandas' datamodel) Eg does `df['a'] = ..` always copy?\n- In the probable case of misunderstanding (so this is my actual comment :-), I would maybe add a note about this in the docstring? `DataFrame.append` has this in the sense it says `returning a new object`\n",
        "createdAt" : "2015-01-28T08:59:27Z",
        "updatedAt" : "2015-03-01T13:47:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "46c85bbb-8b55-4462-9695-00c1ec96da74",
        "parentId" : "cda2d69d-1a6e-4c04-a94c-77f0b78e32e2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "This would violate pandas data model. The `assign` method would then have side effects (without it being obvious that it does), and further intuition on chaining would be very difficult to reason.\n\ne.g. If you allowed **inplace** chaining\n\n`df.assign(C=df.A/df.C)`\n\nwould then add `C` to the ORIGINAL frame.  (I have some commentary at on this later)\n",
        "createdAt" : "2015-01-28T10:55:11Z",
        "updatedAt" : "2015-03-01T13:47:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5606c125-e8c6-4509-a459-4d51c5f97bfc",
        "parentId" : "cda2d69d-1a6e-4c04-a94c-77f0b78e32e2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jorisvandenbossche \n`df['a'] = ...` NEVER copies. That is the point its an inplace assignment.\n",
        "createdAt" : "2015-01-28T11:01:38Z",
        "updatedAt" : "2015-03-01T13:47:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a34b778c-c146-469a-82f2-776cf6444a19",
        "parentId" : "cda2d69d-1a6e-4c04-a94c-77f0b78e32e2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback Thanks for explaining! (this does me thinking we should really have some better docs about the internals .. but of course, someone has to write (and keep up to date) them)\n\nSo assigning with `df['a'] = ..` adds a new block and does not consolidate it with another block if one exists of that type? Why not having the same approach here? What are the side effects you are talking about with `df['a'] = ..` ?\n",
        "createdAt" : "2015-01-28T13:33:07Z",
        "updatedAt" : "2015-03-01T13:47:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "12a987e1-4a5f-4a63-a95c-d71624e511f4",
        "parentId" : "cda2d69d-1a6e-4c04-a94c-77f0b78e32e2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no, I was saying side-effects meaning that `df` IS modified, as opposed to `df.assign(...)` which returns a NEW object. `df['a'] = ..` is just like is says, its an assignment INPLACE.\n\nwhether this creates a new block and/or consolidates is an implementation detail (it actually creates a new block if its a new dtype, then consolidates)\n",
        "createdAt" : "2015-01-28T14:14:20Z",
        "updatedAt" : "2015-03-01T13:47:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a4d5e1c5-9195-4c84-aa05-e3392b5cbe78",
        "parentId" : "cda2d69d-1a6e-4c04-a94c-77f0b78e32e2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "yep, thinking more about it now, it is indeed logical, if you are chaining, that it returns a new object. It should just be clear from the docs, as @TomAugspurger adapted them now.\n",
        "createdAt" : "2015-01-28T15:48:22Z",
        "updatedAt" : "2015-03-01T13:47:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a5bd899833ee72678e6c61b9e22ba1b24c19878",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +2286,2290 @@        9  10 -0.758542  2.302585\n        \"\"\"\n        data = self.copy()\n\n        # do all calculations first..."
  },
  {
    "id" : "1b55d174-09d9-40f7-9587-a9d9af84af47",
    "prId" : 9239,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc291dd3-b29d-40b0-af0b-e259c01505d6",
        "parentId" : null,
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Better to use `.loc` here, `__setitem__` can behave unexpectedly depending on input.\n",
        "createdAt" : "2015-02-02T13:22:03Z",
        "updatedAt" : "2015-03-01T13:47:10Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "f2a7506d-94d3-418a-8aba-3c8352d75bea",
        "parentId" : "dc291dd3-b29d-40b0-af0b-e259c01505d6",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no this is correct; this is by definition a string setting of a column \nmaybe just assert that the keys are steings (I think that the function call would raise before hand if they were not in any event)\n",
        "createdAt" : "2015-02-02T13:25:30Z",
        "updatedAt" : "2015-03-01T13:47:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "617c41e4-2a94-465f-a5b1-3c0db1bd7012",
        "parentId" : "dc291dd3-b29d-40b0-af0b-e259c01505d6",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The keys in `**kwargs` are required to be strings by Python. No need to check.\n",
        "createdAt" : "2015-02-28T13:54:16Z",
        "updatedAt" : "2015-03-01T13:47:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a5bd899833ee72678e6c61b9e22ba1b24c19878",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +2299,2303 @@        # ... and then assign\n        for k, v in results.items():\n            data[k] = v\n\n        return data"
  },
  {
    "id" : "5af30f81-bdec-414c-993b-d9acc43417e8",
    "prId" : 9239,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecb7735f-c68b-4268-a884-b985c2aa420b",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add here a `versionadded` as well?\n",
        "createdAt" : "2015-03-01T13:03:42Z",
        "updatedAt" : "2015-03-01T13:47:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "83484906-ad39-4302-91b4-2df1fc8472f6",
        "parentId" : "ecb7735f-c68b-4268-a884-b985c2aa420b",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Good idea. Done.\n",
        "createdAt" : "2015-03-01T13:47:38Z",
        "updatedAt" : "2015-03-01T13:47:38Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a5bd899833ee72678e6c61b9e22ba1b24c19878",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2225,2229 @@        Assign new columns to a DataFrame, returning a new object\n        (a copy) with all the original columns in addition to the new ones.\n\n        .. versionadded:: 0.16.0\n"
  },
  {
    "id" : "96055303-205b-4aed-a2d8-2671955928c0",
    "prId" : 9321,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb6c234d-56db-47f0-bcb9-8a76cef6c8ab",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, maybe we should deprecate `DataFrame.hist` (and point to `DataFrame.plot.hist`) as the canonical way?\n",
        "createdAt" : "2015-09-10T10:55:02Z",
        "updatedAt" : "2015-09-10T21:31:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "18090a5e-1e38-4e3a-8a3a-41b430292262",
        "parentId" : "cb6c234d-56db-47f0-bcb9-8a76cef6c8ab",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The defaults on `DataFrame.hist` are different than`DataFrame.plot.hist` which I think is why we have both for now. I could go either way on deprecating `DataFrame.hist`.\n",
        "createdAt" : "2015-09-10T12:51:59Z",
        "updatedAt" : "2015-09-10T21:31:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a65bd5ad7931114fd61f10db51d887ca31b5f3a",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +5435,5439 @@\nDataFrame.plot = base.AccessorProperty(gfx.FramePlotMethods, gfx.FramePlotMethods)\nDataFrame.hist = gfx.hist_frame\n\n"
  },
  {
    "id" : "1e705154-293b-44ae-9d40-4b82569e38a1",
    "prId" : 9769,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62bef5dd-84ce-48a6-8ad4-3bff2e0eeb50",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "You actually need a full empty line to make a new paragraph :)\n",
        "createdAt" : "2015-04-02T16:22:51Z",
        "updatedAt" : "2015-04-02T18:20:20Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      }
    ],
    "commit" : "761be0fec7d010fc807aa28e62da61564c9847bd",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +4414,4418 @@        Gets the mode(s) of each element along the axis selected. Empty if nothing\n        has 2+ occurrences. Adds a row for each mode per label, fills in gaps\n        with nan. \n        \n        Note that there could be multiple values returned for the selected"
  },
  {
    "id" : "534d3836-ceb6-4f36-b1f9-73e1be74f919",
    "prId" : 10054,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b858a843-b8a3-452f-8743-e548d29188e6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a versionadded directive\n",
        "createdAt" : "2015-08-19T21:07:16Z",
        "updatedAt" : "2015-09-01T15:46:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "46458e92-b041-4d5d-a03f-e35890dfc517",
        "parentId" : "b858a843-b8a3-452f-8743-e548d29188e6",
        "authorId" : "f53db999-ff5e-4777-9ba4-296d2ecbfa0f",
        "body" : "Check (I think that's formatted correctly?)\n",
        "createdAt" : "2015-08-20T16:27:31Z",
        "updatedAt" : "2015-09-01T15:46:44Z",
        "lastEditedBy" : "f53db999-ff5e-4777-9ba4-296d2ecbfa0f",
        "tags" : [
        ]
      }
    ],
    "commit" : "addef51c8b5830a8fcf87d3b6c804ccafe05f9af",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +117,121 @@    If False, do not copy data unnecessarily\nindicator : boolean or string, default False\n    If True, adds a column to output DataFrame called \"_merge\" with \n    information on the source of each row. \n    If string, column with information on source of each row will be added to "
  },
  {
    "id" : "ba4e7896-814d-4a4a-9e88-4fbe6b76fc6e",
    "prId" : 10393,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab1421ae-c263-4ec2-8487-f9e59b175700",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add a `.. versionadded:: 0.17.0` here (and for nsmallest as well)?\n",
        "createdAt" : "2015-06-29T09:29:06Z",
        "updatedAt" : "2015-08-04T16:43:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "39b8ce3c26250528856aecb323ee96ca075b385b",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +3140,3144 @@        \"\"\"Get the rows of a DataFrame sorted by the `n` largest\n        values of `columns`.\n\n        .. versionadded:: 0.17.0\n"
  },
  {
    "id" : "7c7913f0-c75c-46cf-a913-36ff6e3438c1",
    "prId" : 10568,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1f11fdb-569b-4b90-872e-6c957bd9c6c4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this should be an `int` dtype series. I think you have to require >= 0. I suppose you could ignore nans as well. I am not sure what `np.round` would do with these cases, so pls add some tests for validation. If the errors are obtuse, then may need to catch and report a better message.\n",
        "createdAt" : "2015-08-26T01:36:05Z",
        "updatedAt" : "2015-09-02T13:02:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc57e2e52e9fbe4535bc44eb3bda62214a116f79",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +4311,4315 @@                    yield df[col]\n\n        if isinstance(decimals, (dict, Series)):\n            new_cols = [col for col in _dict_round(self, decimals)]\n        elif com.is_integer(decimals):"
  },
  {
    "id" : "e58e177b-eea2-4e3e-8106-a9fc488ccc81",
    "prId" : 10726,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f5a83d6-3571-4fff-82b0-f464029e3a89",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Why is it not allowed to sort the order of the columns by the values of a row?\n",
        "createdAt" : "2015-08-12T10:35:52Z",
        "updatedAt" : "2015-08-18T00:07:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "aaa47da8-a1fb-44e2-ac12-0be865e30c80",
        "parentId" : "5f5a83d6-3571-4fff-82b0-f464029e3a89",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "ok, suppose this was just copied from before, but still wondering\n",
        "createdAt" : "2015-08-12T10:36:46Z",
        "updatedAt" : "2015-08-18T00:07:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ee6400f0-b4c1-4752-bbb7-f37fa42cacc1",
        "parentId" : "5f5a83d6-3571-4fff-82b0-f464029e3a89",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeh this is just not implemented. not sure why. I'll put a bullet and see if i can do it. Was trying not to change any impl.\n",
        "createdAt" : "2015-08-12T11:34:15Z",
        "updatedAt" : "2015-08-18T00:07:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "004ca494-ffcb-47b3-800e-dc4a17a3a121",
        "parentId" : "5f5a83d6-3571-4fff-82b0-f464029e3a89",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "can certainly in another pr. Is there an issue for it?\n",
        "createdAt" : "2015-08-12T15:16:18Z",
        "updatedAt" : "2015-08-18T00:07:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7e2fe6cb-36d2-487a-ac03-69c34f111da8",
        "parentId" : "5f5a83d6-3571-4fff-82b0-f464029e3a89",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The issue is #2940\n",
        "createdAt" : "2015-08-12T15:22:00Z",
        "updatedAt" : "2015-08-18T00:07:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "faf1a351-ed67-412e-ab81-fe9715122c53",
        "parentId" : "5f5a83d6-3571-4fff-82b0-f464029e3a89",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "#10806 \n",
        "createdAt" : "2015-08-12T15:24:01Z",
        "updatedAt" : "2015-08-18T00:07:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "13d2d71f57cd88c0b14166b65402b696bdf0ce7d",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +2959,2963 @@        if axis != 0:\n            raise ValueError('When sorting by column, axis must be 0 '\n                             '(rows)')\n        if not isinstance(by, list):\n            by = [by]"
  },
  {
    "id" : "91e05c20-365e-4624-9161-411f491fa6b6",
    "prId" : 11011,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb5901bb-c38c-450b-ac6e-9e0337fde000",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you make these all be separated by `\\n` so this is consistent.\n",
        "createdAt" : "2015-09-09T11:51:13Z",
        "updatedAt" : "2015-09-09T13:55:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "beab4eb4a8c2b1f397a78b7f3a759bbb828cd45a",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1492,1496 @@            return formatter.buf.getvalue()\n\n    @Appender(fmt.common_docstring + fmt.return_docstring, indents=1)\n    def to_latex(self, buf=None, columns=None, col_space=None, colSpace=None,\n                 header=True, index=True, na_rep='NaN', formatters=None,"
  },
  {
    "id" : "d834c4c2-f69b-460d-a19b-5b2fcf4cdb59",
    "prId" : 11158,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f5a7b91-8fd1-459d-ad64-9729edddc2a2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I don't remember why we do this, but is `PeriodIndex` needed as well? (and do we have tests for same)?\n",
        "createdAt" : "2015-09-21T00:58:21Z",
        "updatedAt" : "2015-09-21T01:59:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "100e05ec-3575-4ccb-ac40-d0429d2fdc3b",
        "parentId" : "0f5a7b91-8fd1-459d-ad64-9729edddc2a2",
        "authorId" : "aa76ca2b-2c97-45f3-bb6a-3e0ee670395b",
        "body" : "This is to handle the case where the dict had `datetime/timedelta64`s as the keys - they're boxed in creating the index, so need to be changed in the dict too so the lookups work.  From this PR https://github.com/pydata/pandas/pull/10269.\n\nAFAIK not needed for `PeriodIndex` since there aren't any types that get coerced to it?  This test covers nested construction with a `PeriodIndex`.\nhttps://github.com/pydata/pandas/blob/master/pandas/tseries/tests/test_period.py#L2078\n",
        "createdAt" : "2015-09-21T01:11:13Z",
        "updatedAt" : "2015-09-21T01:59:44Z",
        "lastEditedBy" : "aa76ca2b-2c97-45f3-bb6a-3e0ee670395b",
        "tags" : [
        ]
      },
      {
        "id" : "d468070a-ce79-4d91-83e1-9a4a13568197",
        "parentId" : "0f5a7b91-8fd1-459d-ad64-9729edddc2a2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, can you move all of these types of tests to the same location (e.g. out of test_period, not sure where datetimeindex/timedeltaindex are) and prob into test_frame (though I hate adding to this, its really IS part of it).\n",
        "createdAt" : "2015-09-21T01:43:05Z",
        "updatedAt" : "2015-09-21T01:59:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcb78dcf7989c8469fd20f47f8b7db9c22c00c4d",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +5406,5410 @@                    oindex = index.astype('O')\n\n                if isinstance(index, (DatetimeIndex, TimedeltaIndex)):\n                    v = _dict_compat(v)\n                else:"
  },
  {
    "id" : "7e985f5b-c8bf-4486-8343-8c6bbb20dc28",
    "prId" : 11809,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fd7f98e-b76f-48e4-8d2e-f2b128ffc861",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is fine, but not really necessary as these do the same thing \n",
        "createdAt" : "2015-12-11T13:11:30Z",
        "updatedAt" : "2015-12-15T22:10:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "27b89b68-e863-4720-8414-71316acc7071",
        "parentId" : "7fd7f98e-b76f-48e4-8d2e-f2b128ffc861",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "Actually, this change was needed to get rid of the `out` argument. If `DataFrame.round()` calls `np.round()`, then `np.round()` dispatches to `Series.round()`, passing the `out` argument. \n",
        "createdAt" : "2015-12-15T16:47:35Z",
        "updatedAt" : "2015-12-15T22:10:09Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      },
      {
        "id" : "2f83702d-90dd-4652-aefa-108a81b2701e",
        "parentId" : "7fd7f98e-b76f-48e4-8d2e-f2b128ffc861",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok\n",
        "createdAt" : "2015-12-15T16:56:57Z",
        "updatedAt" : "2015-12-15T22:10:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "45b304e1a41b7726c47e186ac7f498bc94691ce2",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +4398,4402 @@        elif com.is_integer(decimals):\n            # Dispatch to Series.round\n            new_cols = [v.round(decimals) for _, v in self.iteritems()]\n        else:\n            raise TypeError(\"decimals must be an integer, a dict-like or a Series\")"
  },
  {
    "id" : "3f70f762-fd7e-4fc6-a6b7-80327780aa5c",
    "prId" : 14668,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14668#pullrequestreview-12350300",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e030d76-34e0-447c-b620-d5daf258a5fa",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "As I said before, I don't think we should do this (allow non-aggregating results in `agg`, I suppose that is the meaning of result=None?)",
        "createdAt" : "2016-12-10T12:09:31Z",
        "updatedAt" : "2017-04-14T13:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f5c4380e-e366-4ee2-93c7-42ca39329895",
        "parentId" : "7e030d76-34e0-447c-b620-d5daf258a5fa",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Hmm, I see that this is also for aggregating lambda's .. and not only for non-aggregating functions",
        "createdAt" : "2016-12-10T12:25:41Z",
        "updatedAt" : "2017-04-14T13:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "50004a2f-1c80-46a3-88f9-a270689e0d5f",
        "parentId" : "7e030d76-34e0-447c-b620-d5daf258a5fa",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah it doesn't broadcast things",
        "createdAt" : "2016-12-10T16:16:25Z",
        "updatedAt" : "2017-04-14T13:45:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae6c6f6cbd4b760ec70b1d48b27fe53b6644e208",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +4221,4225 @@                pass\n        if result is None:\n            return self.apply(func, axis=axis, args=args, **kwargs)\n        return result\n"
  },
  {
    "id" : "2191878c-74ea-4a47-a028-f9f026aec622",
    "prId" : 14780,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14780#pullrequestreview-11302233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2cc661f-6555-4011-8bde-4a1dae029ac9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jorisvandenbossche any better way to do this?",
        "createdAt" : "2016-12-04T17:28:01Z",
        "updatedAt" : "2016-12-05T06:18:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c4874f0e-24b9-43b1-ac95-9ba4ac539ee9",
        "parentId" : "c2cc661f-6555-4011-8bde-4a1dae029ac9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think this is fine (given our current way of doing this with `_shared_doc_kwargs`. This could maybe get an overhaul, but that is another issue :-))",
        "createdAt" : "2016-12-04T21:20:23Z",
        "updatedAt" : "2016-12-05T06:18:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "605b9cebba9146f920d321f845d80f995845636e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +106,110 @@    optional_by=\"\"\"\n        by : str or list of str\n            Name or list of names which refer to the axis items.\"\"\",\n    versionadded_to_excel='')\n"
  },
  {
    "id" : "b762228a-4719-472f-b534-fc231907b59d",
    "prId" : 15838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15838#pullrequestreview-30393385",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9468b473-163b-45a6-85e2-c31705a4b55f",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I haven't played with either of the engines, but do they both share similar semantics on the path argument? Does it have to be a string, or can it be an open file object, or `pathlib.Path`? Can it be an s3 path?",
        "createdAt" : "2017-04-01T19:57:45Z",
        "updatedAt" : "2017-08-01T22:28:31Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "7290a7d7-e71d-4350-9a9c-e0e2b7f784da",
        "parentId" : "9468b473-163b-45a6-85e2-c31705a4b55f",
        "authorId" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "body" : "In the case of fastparquet, this is anything that can be passed to open; and you can specify what function to open files with (`open_with=`), which must return a file-like; this is how you open with s3 etc., by passing `S3FileSystem.open`.  \r\n\r\nOnly in dask can you supply something like \"s3://user:pass@bucket/path', and get it parsed to pass the correct open_with automatically.",
        "createdAt" : "2017-04-01T20:03:16Z",
        "updatedAt" : "2017-08-01T22:28:31Z",
        "lastEditedBy" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "tags" : [
        ]
      },
      {
        "id" : "82e90b5b-dc23-4384-94e8-eeee2407a44b",
        "parentId" : "9468b473-163b-45a6-85e2-c31705a4b55f",
        "authorId" : "55206695-bb42-4d72-886f-f5370a77363e",
        "body" : "It might be useful for pandas to handle the conversion of a file path into a file-like object for semantic conformity. An exception would be unless a particular engine can do better with a local file path -- as an example, in pyarrow, we memory map local files which has generally better performance than Python `file` objects",
        "createdAt" : "2017-04-01T20:24:32Z",
        "updatedAt" : "2017-08-01T22:28:31Z",
        "lastEditedBy" : "55206695-bb42-4d72-886f-f5370a77363e",
        "tags" : [
        ]
      },
      {
        "id" : "d3c5a4f8-5ee0-4d6c-b082-fa0898614a3a",
        "parentId" : "9468b473-163b-45a6-85e2-c31705a4b55f",
        "authorId" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "body" : "Please note that parquet data-sets are not necessarily single-file, so I don't think it's a great idea to pass open files, local or otherwise.",
        "createdAt" : "2017-04-01T20:36:22Z",
        "updatedAt" : "2017-08-01T22:28:31Z",
        "lastEditedBy" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "tags" : [
        ]
      },
      {
        "id" : "d9e018c3-fdb7-4c9b-bd36-842db66117da",
        "parentId" : "9468b473-163b-45a6-85e2-c31705a4b55f",
        "authorId" : "e6b5f3e5-35bb-49e6-a74a-1e11ff20171f",
        "body" : "On the other hand, from a Dask perspective it might be nice to one day rely entirely on a `pandas.read_parquet` function for chunk-wise logic.  In this case we would want to hand pandas a file-like object and ask it to get us a few particular row groups from that object.  If inconvenient I don't think we should worry about this use case near-term.  I just thought I'd bring it up.",
        "createdAt" : "2017-04-01T21:02:04Z",
        "updatedAt" : "2017-08-01T22:28:31Z",
        "lastEditedBy" : "e6b5f3e5-35bb-49e6-a74a-1e11ff20171f",
        "tags" : [
        ]
      },
      {
        "id" : "3a4eb33e-d2f6-4954-93fe-052835084f85",
        "parentId" : "9468b473-163b-45a6-85e2-c31705a4b55f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we handle path_or_buffers in the following way:\r\n\r\n- path-like objects (``pathlib`` and ``py.local``), we stringify\r\n- if a string\r\n  - if its a url we turn this into a Bytes object (also handling gzip content encoding) \r\n  - if its a s3 url we defer to ``s3fs`` for opening\r\n  - else we would do things like expand_user\r\n  - we can infer a compression from the filepath itself (we just path this thru if its found),\r\n     mainly useful for text files where we decompress.\r\n- file-like we pass thru\r\n- for csv reading we will handle the file io & encoding\r\n- all others we pass the string-path thru\r\n\r\nSo i don't see any reason to handle this differently. The IO engine gets to handle a fully qualified string path. (e.g. HDF5, excel, pickle, json) look all the same to pandas. The IO engine is in charge of opening closing the actual files.\r\n",
        "createdAt" : "2017-04-01T21:13:17Z",
        "updatedAt" : "2017-08-01T22:28:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5e92bd58-62b3-4eb3-a2b9-0a584e2ae381",
        "parentId" : "9468b473-163b-45a6-85e2-c31705a4b55f",
        "authorId" : "55206695-bb42-4d72-886f-f5370a77363e",
        "body" : "> Please note that parquet data-sets are not necessarily single-file, so I don't think it's a great idea to pass open files, local or otherwise.\r\n\r\nFor this, there's a good argument that pandas should define a file system abstract interface that 3rd parties can implement. In practice in dask and pandas, this is already the case, but it may be worth defining with more formal rigor (as far as pandas is concerned at least) to help with API conformity. pandas doesn't really have a \"plugin\" API, but this is something to consider more and more as we try to be less monolithic",
        "createdAt" : "2017-04-01T23:29:33Z",
        "updatedAt" : "2017-08-01T22:28:31Z",
        "lastEditedBy" : "55206695-bb42-4d72-886f-f5370a77363e",
        "tags" : [
        ]
      }
    ],
    "commit" : "f553a5fbce80b98c4a55bd6469859e8f8922b162",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1609,1613 @@        ----------\n        fname : str\n            string file path\n        engine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n            Parquet reader library to use. If 'auto', then the option"
  },
  {
    "id" : "17c03ff4-60e3-4296-8d1f-c94b11b78bb3",
    "prId" : 16220,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16220#pullrequestreview-37548993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1be5b497-4214-4d2d-95c8-4762f5f76712",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is it correct to use `into` here? What if the user passed an instance rather than a class? Wouldn't the values all be written into the same object?",
        "createdAt" : "2017-05-08T11:50:11Z",
        "updatedAt" : "2017-05-16T01:02:05Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "689c4312-5ae1-430f-a78b-2971a9a8bc44",
        "parentId" : "1be5b497-4214-4d2d-95c8-4762f5f76712",
        "authorId" : "3fc1a010-62f4-43c5-a9a3-a504c5d35eb4",
        "body" : "I think this is correct.  `v.to_dict(into)` should call `standardize_mapping` again.  Since `standardize_mapping` only returns a class, I don't think there is a danger of populating the same object twice.",
        "createdAt" : "2017-05-11T02:05:10Z",
        "updatedAt" : "2017-05-16T01:02:05Z",
        "lastEditedBy" : "3fc1a010-62f4-43c5-a9a3-a504c5d35eb4",
        "tags" : [
        ]
      },
      {
        "id" : "6a777c35-d2be-403d-9478-8c34aea46258",
        "parentId" : "1be5b497-4214-4d2d-95c8-4762f5f76712",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Gotcha.nI forgot that `standardize_mapping` always returned a class",
        "createdAt" : "2017-05-11T11:25:06Z",
        "updatedAt" : "2017-05-16T01:02:05Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "8469977d6e582aeeeff5a523ade0e14fba937ecd",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +962,966 @@                    for row in self.values]\n        elif orient.lower().startswith('i'):\n            return into_c((k, v.to_dict(into)) for k, v in self.iterrows())\n        else:\n            raise ValueError(\"orient '%s' not understood\" % orient)"
  },
  {
    "id" : "0816051f-228f-4d40-92b0-3000784391f3",
    "prId" : 16220,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16220#pullrequestreview-113337336",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3a8946b-6d6f-4a20-93e4-77752422b2f6",
        "parentId" : null,
        "authorId" : "f79272c9-c9e1-4e2a-addf-de6aecaa5063",
        "body" : "The 0.1 and 0.2 are wrong, should be 0.5 and 0.75",
        "createdAt" : "2018-04-18T18:23:43Z",
        "updatedAt" : "2018-04-18T18:24:05Z",
        "lastEditedBy" : "f79272c9-c9e1-4e2a-addf-de6aecaa5063",
        "tags" : [
        ]
      }
    ],
    "commit" : "8469977d6e582aeeeff5a523ade0e14fba937ecd",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +903,907 @@           col1  col2\n        a     1   0.1\n        b     2   0.2\n        >>> df.to_dict()\n        {'col1': {'a': 1, 'b': 2}, 'col2': {'a': 0.5, 'b': 0.75}}"
  },
  {
    "id" : "34752184-1d10-4ece-9729-4505b29db08a",
    "prId" : 16467,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16467#pullrequestreview-39907968",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a22d3c63-9fb9-4644-98b8-562fe9d30e43",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Same here (remove one)",
        "createdAt" : "2017-05-24T01:21:34Z",
        "updatedAt" : "2017-05-24T19:24:30Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "71c5b1845629798c1d0c7a1b1eaf2e080181837f",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +2966,2970 @@        7      84    2013\n        10     31    2014\n\n        Create a multi-index using columns 'year' and 'month':\n"
  },
  {
    "id" : "36591b45-533f-487d-b866-880c04edd050",
    "prId" : 16487,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16487#pullrequestreview-40680555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1e3b33d-b19b-4ee8-b5af-6ca1d9cd05fb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is not right. you can pass a dict of dtypes.",
        "createdAt" : "2017-05-24T22:59:42Z",
        "updatedAt" : "2017-05-31T08:51:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "82321524-3515-44cc-b9a0-a7751f3e4f6e",
        "parentId" : "e1e3b33d-b19b-4ee8-b5af-6ca1d9cd05fb",
        "authorId" : "6580181c-66bb-4e65-9e27-cbced8e5dfe9",
        "body" : "Oh interesting. How? This does not work for me:\r\n```\r\nd = {'col1': [1, 2], 'col2': [3, 4]}\r\ndf = pd.DataFrame(data=d, dtype={'col1': np.int64, 'col2': np.int64})\r\n```",
        "createdAt" : "2017-05-24T23:22:00Z",
        "updatedAt" : "2017-05-31T08:51:58Z",
        "lastEditedBy" : "6580181c-66bb-4e65-9e27-cbced8e5dfe9",
        "tags" : [
        ]
      },
      {
        "id" : "fe1558d9-98c0-469c-a5c2-9e74490f5a75",
        "parentId" : "e1e3b33d-b19b-4ee8-b5af-6ca1d9cd05fb",
        "authorId" : "6580181c-66bb-4e65-9e27-cbced8e5dfe9",
        "body" : "According to https://github.com/pandas-dev/pandas/issues/4464 and https://github.com/pandas-dev/pandas/issues/9133 it seems like this is not yet implemented.",
        "createdAt" : "2017-05-28T21:29:21Z",
        "updatedAt" : "2017-05-31T08:51:58Z",
        "lastEditedBy" : "6580181c-66bb-4e65-9e27-cbced8e5dfe9",
        "tags" : [
        ]
      },
      {
        "id" : "f4f5c8db-1c8a-4e5b-b9a9-2b24954f8246",
        "parentId" : "e1e3b33d-b19b-4ee8-b5af-6ca1d9cd05fb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "https://github.com/pandas-dev/pandas/pull/13375 implemented his for astype\r\nhasn't been implemented for construction ",
        "createdAt" : "2017-05-28T21:40:23Z",
        "updatedAt" : "2017-05-31T08:51:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "edc1c046c596d086c91cf7af2d62c2adc75e3258",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +242,246 @@        np.arange(n) if no column labels are provided\n    dtype : dtype, default None\n        Data type to force. Only a single dtype is allowed. If None, infer\n    copy : boolean, default False\n        Copy data from inputs. Only affects DataFrame / 2d ndarray input"
  },
  {
    "id" : "8153f9a5-7e69-428e-a65d-845067b2cbdb",
    "prId" : 16732,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16732#pullrequestreview-45925226",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb74e8f9-6676-4d9b-b11d-0152a7b69d3d",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Maybe make the \"Otherwise, \" -> \"By default, \" ? (to stress more that returning a new dataframe is the default) Or could also append something to the sentence.",
        "createdAt" : "2017-06-23T07:53:32Z",
        "updatedAt" : "2017-07-06T15:29:48Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "416d873d-aa65-46ac-8156-b2242ab3dcfe",
        "parentId" : "bb74e8f9-6676-4d9b-b11d-0152a7b69d3d",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I'm not sure why we need to emphasize this.  It's pretty clear that the default is `False` from the declaration of `inplace` on line 2235.",
        "createdAt" : "2017-06-23T08:25:37Z",
        "updatedAt" : "2017-07-06T15:29:48Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6f5bcd00b5659161861ce02cc87d98fe91c1796",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +2235,2239 @@        inplace : bool, default False\n            If the expression contains an assignment, whether to perform the\n            operation inplace and mutate the existing DataFrame. Otherwise,\n            a new DataFrame is returned.\n"
  },
  {
    "id" : "7bee202a-3e25-466e-8192-621ca82e31f5",
    "prId" : 17017,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17017#pullrequestreview-50793114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3ff6bff-11ac-4ea3-8417-971369d5d6cf",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Hmmm...I'm not sure if you need to demonstrate both methods.  The latter is probably sufficient.  In any case, if you are going to demonstrate this for `DataFrame`, you should do a similar demo for `Series`.",
        "createdAt" : "2017-07-19T02:50:06Z",
        "updatedAt" : "2017-07-19T02:50:06Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ca4047ab1cd256a94846c474db1311fc5ee175a",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +4654,4658 @@        3  7  8\n\n        The following, while not recommended methods for generating DataFrames,\n        show two ways to generate a DataFrame from multiple data sources.\n"
  },
  {
    "id" : "f35d4458-d424-4887-ae05-b5a9f8fcaab1",
    "prId" : 17085,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17085#pullrequestreview-52810870",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc2b2c48-c75d-4fa6-982c-18db37cb4c4a",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Just wanted to re-add this since my response got hidden: if there are other places that use this documentation, feel free to patch those too.  For bonus points, go ahead and see if you can create a shared resource in a `_shared_docs` dictionary for example that we can import and plugin this docstring.",
        "createdAt" : "2017-07-27T04:37:02Z",
        "updatedAt" : "2017-08-02T23:49:24Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "a443e24a-c6f3-45aa-b64c-e1286ff04ce9",
        "parentId" : "fc2b2c48-c75d-4fa6-982c-18db37cb4c4a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Already copied the edits into the other docstrings, choosing bed over _shared_docs.",
        "createdAt" : "2017-07-27T06:26:19Z",
        "updatedAt" : "2017-08-02T23:49:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "573a731c-fc08-4aea-889f-48e752f87fc5",
        "parentId" : "fc2b2c48-c75d-4fa6-982c-18db37cb4c4a",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> choosing bed over _shared_docs.\r\n\r\nThat's fair.  Let me know if you're able to get around to the `_shared_docs` (@jreback thoughts?) once you get up 😄 ",
        "createdAt" : "2017-07-27T06:37:55Z",
        "updatedAt" : "2017-08-02T23:49:24Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "f9fe2e29-b459-45c3-b245-740c4da89709",
        "parentId" : "fc2b2c48-c75d-4fa6-982c-18db37cb4c4a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I suggest moving on and leaving this be.  As it is `to_csv.__doc__` is all in one piece and I'm not inclined to disturb it.\r\n\r\nUnrelated: is there a time in the foreseeable future when `Panel` etc will be deprecated-as-in-deleted?",
        "createdAt" : "2017-07-27T23:07:29Z",
        "updatedAt" : "2017-08-02T23:49:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "786951b9-304b-480f-9fd4-b8d8d4144eac",
        "parentId" : "fc2b2c48-c75d-4fa6-982c-18db37cb4c4a",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> As it is to_csv.__doc__ is all in one piece and I'm not inclined to disturb it.\r\n\r\nFair enough.  I can discuss with @jreback how we might want to proceed with this.\r\n\r\nRegarding `Panel`, I do not know at this point.  My guess is `1.0`, but I would wait to see what @jreback or @jorisvandenbossche have to say about this.",
        "createdAt" : "2017-07-27T23:16:45Z",
        "updatedAt" : "2017-08-02T23:49:24Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "640be57c1f0fe4c34f9d0236de466981f7fd2262",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +1624,1628 @@    @Substitution(header='Write out the column names. If a list of strings '\n                         'is given, it is assumed to be aliases for the '\n                         'column names')\n    @Appender(fmt.docstring_to_string, indents=1)\n    def to_string(self, buf=None, columns=None, col_space=None, header=True,"
  },
  {
    "id" : "ebb016b5-147a-4272-8962-5183efd50df9",
    "prId" : 17099,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17099#pullrequestreview-53079606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae7ee55c-1485-4746-94c4-6ea881494340",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "put a comment what is going on here.",
        "createdAt" : "2017-07-29T16:50:39Z",
        "updatedAt" : "2017-08-10T05:02:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1edf68bb99c7d7c9afeb3a76e8ecd97e6be4199",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +2146,2150 @@                if isinstance(top, tuple):\n                    top = top[0]\n                if top == '':\n                    result = result['']\n                    if isinstance(result, Series):"
  },
  {
    "id" : "cee0369c-78fb-4092-acdb-8ba1afd30753",
    "prId" : 17352,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17352#pullrequestreview-66329304",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3f2ce8f-df2b-4479-8bb3-329131c90db2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "still more places to change",
        "createdAt" : "2017-09-29T10:08:19Z",
        "updatedAt" : "2017-10-01T06:13:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "df800892-ddd0-45e1-a927-804c19599ad6",
        "parentId" : "f3f2ce8f-df2b-4479-8bb3-329131c90db2",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Done.",
        "createdAt" : "2017-10-01T06:53:54Z",
        "updatedAt" : "2017-10-01T06:53:54Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "9325f21581d3ece0ba68ea2d7a029b59257de7d5",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +2116,2120 @@            # be reindexed to match DataFrame rows\n            key = check_bool_indexer(self.index, key)\n            indexer = key.nonzero()[0]\n            return self._take(indexer, axis=0, convert=False)\n        else:"
  },
  {
    "id" : "5ab6d69a-c415-4a25-8779-825d0754457c",
    "prId" : 17739,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17739#pullrequestreview-67281743",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05ee9892-1b96-404e-af2f-e1a9aac7a979",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add here the alternative like in the deprecations message? (the \"use '.at[]' or '.iat[]' instead\")\r\n\r\n(and the same for the other docstrings)",
        "createdAt" : "2017-10-05T06:57:03Z",
        "updatedAt" : "2017-10-05T10:23:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec7b086f2b17066213812b98ef88b39ab96ac2b1",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1925,1929 @@\n        .. deprecated:: 0.21.0\n\n        Please use .at[] or .iat[] accessors.\n"
  },
  {
    "id" : "a217f966-c560-4391-ac1d-b89db63df7ce",
    "prId" : 17800,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17800#pullrequestreview-67707557",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8c452b6-dedc-42e1-81df-44a076a2f208",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I suppose it would make it a lot harder if the default `axis=0` is used instead of None ?",
        "createdAt" : "2017-10-06T14:39:01Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "3ec8cf1a-e44c-45c0-a71c-7bac9ef35ca7",
        "parentId" : "d8c452b6-dedc-42e1-81df-44a076a2f208",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Right now I raise on \r\n\r\n```python\r\ndf.reindex(labels, axis=0)\r\ndf.reindex(index=labels, axis=0)\r\n```\r\n\r\nIf I change the default axis to 0, then I can't detect those cases. I could go either way here.",
        "createdAt" : "2017-10-06T14:53:07Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f13e5c82-7bd0-493b-8fc7-2b320bfefc4c",
        "parentId" : "d8c452b6-dedc-42e1-81df-44a076a2f208",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Why do you raise on `df.reindex(labels, axis=0)` ? That seems perfectly valid? ",
        "createdAt" : "2017-10-06T15:20:08Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "5d952759-0312-4f39-adde-14edba2e8bc9",
        "parentId" : "d8c452b6-dedc-42e1-81df-44a076a2f208",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "It's valid, just the `axis=0` is redundant. Likewise with `columns=labels, axis=1` (I currently raise). Happy to adjust that though.",
        "createdAt" : "2017-10-06T15:21:57Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c2d75573-7617-4144-834a-e0d295063589",
        "parentId" : "d8c452b6-dedc-42e1-81df-44a076a2f208",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "that are two different things; because you can either specify mapper/axis or index/columns. \r\n`df.reindex(labels, axis=0)` is a case of mapper/axis, and is thus perfectly valid (and even more explicit than leaving out axis=0, although it is the default, so I don't think we should raise on this), while `df.reindex(columns=labels, axis=1)` is mixture of columns and axis, so OK to raise on that.\r\n\r\n",
        "createdAt" : "2017-10-06T15:24:21Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "59846a3a-511f-4c8b-89ce-d55232a2678e",
        "parentId" : "d8c452b6-dedc-42e1-81df-44a076a2f208",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`df.reindex(index=labels, axis=0)` is a bit the tricky case, as this one is indeed redundant and mixing the two. So in principle I would also raise here like for `df.reindex(columns=labels, axis=1)`. \r\nBut if it is easier implementation-wise to allow that, I think that is OK (as although it is mixing both idioms, it is consistent in which axis compared to eg `df.reindex(index=labels, axis=1)`. ",
        "createdAt" : "2017-10-06T15:26:23Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7bb295e1-7c9f-40a5-bfac-a9b057ea8bb4",
        "parentId" : "d8c452b6-dedc-42e1-81df-44a076a2f208",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Sorry, https://github.com/pandas-dev/pandas/pull/17800#discussion_r143211232 was incorrect. `.reindex(labels, axis=0)` should clearly work!",
        "createdAt" : "2017-10-06T15:33:35Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "291f2a4f-bcbb-439c-86a0-aca06b55be2a",
        "parentId" : "d8c452b6-dedc-42e1-81df-44a076a2f208",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I do raise on the \"mixing\" case, so I think we agree on what should happen? And I think the current implementation does that. I'll ensure there are tests for all this.\r\n\r\n```python\r\nIn [1]: import pandas as pd\r\nd\r\nIn [2]: df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\r\n\r\nIn [3]: df.reindex([0, 1], axis=0)\r\nOut[3]:\r\n   A  B\r\n0  1  4\r\n1  2  5\r\n\r\nIn [4]: df.reindex(index=[0, 1], axis=0)\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-4-d6f30fd70cc7> in <module>()\r\n----> 1 df.reindex(index=[0, 1], axis=0)\r\n\r\n~/Envs/pandas-dev/lib/python3.6/site-packages/pandas/pandas/core/frame.py in reindex(self, labels, index, columns, axis, **kwargs)\r\n   2945         index, columns = self._validate_axis_style_args(labels, 'labels',\r\n   2946                                                         index, columns,\r\n-> 2947                                                         axis, 'reindex')\r\n   2948         return super(DataFrame, self).reindex(index=index, columns=columns,\r\n   2949                                               **kwargs)\r\n\r\n~/Envs/pandas-dev/lib/python3.6/site-packages/pandas/pandas/core/frame.py in _validate_axis_style_args(self, arg, arg_name, index, columns, axis, method_name)\r\n   2788                     \"\\t.{method_name}.rename(index=index, columns=columns)\"\r\n   2789                 ).format(arg_name=arg_name, method_name=method_name)\r\n-> 2790                 raise TypeError(msg)\r\n   2791             if axis == 'index':\r\n   2792                 index = arg\r\n\r\nTypeError: Can't specify both 'axis' and 'index' or 'columns'. Specify either\r\n        .reindex.rename(labels, axis=axis), or\r\n        .reindex.rename(index=index, columns=columns)\r\n\r\nIn [5]: df.reindex(columns=[0, 1], axis=1)\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-5-02a868f92f79> in <module>()\r\n----> 1 df.reindex(columns=[0, 1], axis=1)\r\n\r\n~/Envs/pandas-dev/lib/python3.6/site-packages/pandas/pandas/core/frame.py in reindex(self, labels, index, columns, axis, **kwargs)\r\n   2945         index, columns = self._validate_axis_style_args(labels, 'labels',\r\n   2946                                                         index, columns,\r\n-> 2947                                                         axis, 'reindex')\r\n   2948         return super(DataFrame, self).reindex(index=index, columns=columns,\r\n   2949                                               **kwargs)\r\n\r\n~/Envs/pandas-dev/lib/python3.6/site-packages/pandas/pandas/core/frame.py in _validate_axis_style_args(self, arg, arg_name, index, columns, axis, method_name)\r\n   2788                     \"\\t.{method_name}.rename(index=index, columns=columns)\"\r\n   2789                 ).format(arg_name=arg_name, method_name=method_name)\r\n-> 2790                 raise TypeError(msg)\r\n   2791             if axis == 'index':\r\n   2792                 index = arg\r\n\r\nTypeError: Can't specify both 'axis' and 'index' or 'columns'. Specify either\r\n        .reindex.rename(labels, axis=axis), or\r\n        .reindex.rename(index=index, columns=columns)\r\n\r\n```",
        "createdAt" : "2017-10-06T15:35:15Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e668bfd35260d2f77e7230ebffafd476b92991a",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +2787,2791 @@                                  axis, method_name):\n        if axis is not None:\n            # Using \"axis\" style, along with a positional arg\n            # Both index and columns should be None then\n            axis = self._get_axis_name(axis)"
  },
  {
    "id" : "068d33c7-32e1-48fc-ae66-d46f91c111a0",
    "prId" : 17800,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17800#pullrequestreview-67691415",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04fb994b-e51c-41ec-8c6d-4e8a0810c19b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "*maybe* worth factoring this function out if its common with the drop changes? not sure",
        "createdAt" : "2017-10-06T14:49:23Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "10cdf6d4-dda8-45c7-9963-23b35686d212",
        "parentId" : "04fb994b-e51c-41ec-8c6d-4e8a0810c19b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe put in pandas/util/_validators.py with all other arg validation code",
        "createdAt" : "2017-10-06T14:50:37Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e668bfd35260d2f77e7230ebffafd476b92991a",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +2812,2816 @@\n        elif _all_not_none(arg, index):\n            # This is the \"ambiguous\" case, so emit a warning\n            msg = (\n                \"Interpreting call to '.{method_name}(a, b)' as \""
  },
  {
    "id" : "766446ff-0e5d-4405-9c5b-7728a3ab4939",
    "prId" : 18083,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18083#pullrequestreview-74593730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec6760f7-c6f8-401b-b6dd-7a73d08d248e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is this one actually needed? (the blank line) \r\nI always assumed it was not needed (the one before *is* needed) \r\n(but note I am not against this change, because without it looks a bit strange in the plain text version)",
        "createdAt" : "2017-11-06T22:48:19Z",
        "updatedAt" : "2017-11-08T22:40:21Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "57364726-fab4-45c5-89de-2aba348f9794",
        "parentId" : "ec6760f7-c6f8-401b-b6dd-7a73d08d248e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Again, not sure if the newline was necessary. There were several \"unexpected end to block quote\" warnings. I can check my logs.",
        "createdAt" : "2017-11-06T22:52:33Z",
        "updatedAt" : "2017-11-08T22:40:21Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "39595bf2-334a-4ac2-a390-1b39417eb80d",
        "parentId" : "ec6760f7-c6f8-401b-b6dd-7a73d08d248e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "don't mind this one. As I said, I think the change is also good from \"aesthetic\" point of view, whether it was actually needed or not to remove a warning",
        "createdAt" : "2017-11-06T23:07:20Z",
        "updatedAt" : "2017-11-08T22:40:21Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1b25e91d3636105b125b1aaa801f9e795c37fbb",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1704,1708 @@\n            .. versionadded:: 0.18.0\n\n        border : int\n            A ``border=border`` attribute is included in the opening"
  },
  {
    "id" : "e3e1b3cd-444b-4765-88e7-6ce87e4f7a28",
    "prId" : 18416,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18416#pullrequestreview-78343117",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1309ebe-0a57-48b0-85b1-8d9c916f3c05",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't the ``np.atleast_2d`` be around ``self.values``?",
        "createdAt" : "2017-11-22T01:48:04Z",
        "updatedAt" : "2017-11-23T13:10:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bcbe9fd1-a42f-47a8-ac5e-3c46ea4fe393",
        "parentId" : "b1309ebe-0a57-48b0-85b1-8d9c916f3c05",
        "authorId" : "def5b4e3-e998-4493-b52e-770521a1d6e9",
        "body" : "No, it fails then. In that case only one of the results will be returned, effectively flattening the array.",
        "createdAt" : "2017-11-22T06:09:00Z",
        "updatedAt" : "2017-11-23T13:10:41Z",
        "lastEditedBy" : "def5b4e3-e998-4493-b52e-770521a1d6e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e861d081a1e453e799cf913d15fe4e3fbcc2a93c",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +995,999 @@            return [into_c((k, _maybe_box_datetimelike(v))\n                           for k, v in zip(self.columns, np.atleast_1d(row)))\n                    for row in self.values]\n        elif orient.lower().startswith('i'):\n            return into_c((k, v.to_dict(into)) for k, v in self.iterrows())"
  },
  {
    "id" : "d02d6b2c-fff2-4f65-b4f8-246b9590134d",
    "prId" : 18600,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18600#pullrequestreview-80681372",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79111410-fd7f-4665-a6e4-8d93194c8def",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this will be a perf issue",
        "createdAt" : "2017-12-02T14:32:53Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5f53d1b7-1944-4356-8dee-d3497e0d26bb",
        "parentId" : "79111410-fd7f-4665-a6e4-8d93194c8def",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Maybe... but right now it seems to be worse...\r\n\r\n```      before           after         ratio\r\n     [d163de70]       [f7447b3f]\r\n-      47.9±0.3ms       43.5±0.4ms     0.91  frame_ctor.FromDicts.time_frame_ctor_nested_dict\r\n-      31.0±0.1ms       28.1±0.3ms     0.91  frame_ctor.FromDictwithTimestampOffsets.time_frame_ctor('BusinessDay', 2)\r\n-        31.3±1ms       28.2±0.2ms     0.90  frame_ctor.FromDictwithTimestampOffsets.time_frame_ctor('BDay', 2)\r\n-      31.8±0.3ms       28.0±0.4ms     0.88  frame_ctor.FromDictwithTimestampOffsets.time_frame_ctor('CustomBusinessDay', 2)\r\n-      32.8±0.3ms       28.2±0.2ms     0.86  frame_ctor.FromDictwithTimestampOffsets.time_frame_ctor('Day', 1)\r\n\r\nSOME BENCHMARKS HAVE CHANGED SIGNIFICANTLY.\r\n\r\n```",
        "createdAt" : "2017-12-02T16:46:46Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "58cfce6a-da8e-424e-bff5-e9ba17a6ebb3",
        "parentId" : "79111410-fd7f-4665-a6e4-8d93194c8def",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "There does seem to be a performance loss on very small dfs. E.g. for ``pd.DataFrame(data)`` with ``data = {1 : [2], 3 : [4], 5 : [6]}`` I get results around 530 µs for  per loop before and 570 µs after. So we are talking about a ~10% gain on large dfs vs. a ~7.5% loss on small dfs.\r\n\r\n... or I can avoid that ``Series`` and sort manually, at the cost of a bit of added complexity, probably ~10 LoCs.",
        "createdAt" : "2017-12-02T18:08:25Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "a57ffec5-6e40-4232-b767-3e3f31fc5c76",
        "parentId" : "79111410-fd7f-4665-a6e4-8d93194c8def",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "uhm... those asv results also seem pretty unstable:\r\n```\r\n      before           after         ratio\r\n     [d163de70]       [f7447b3f]\r\n+      30.7±0.2ms         41.1±3ms     1.34  frame_ctor.FromDictwithTimestampOffsets.time_frame_ctor('QuarterBegin', 1)\r\n+      29.4±0.1ms         39.1±4ms     1.33  frame_ctor.FromDictwithTimestampOffsets.time_frame_ctor('CBMonthBegin', 2)\r\n+      30.7±0.7ms         40.4±3ms     1.32  frame_ctor.FromDictwithTimestampOffsets.time_frame_ctor('BDay', 2)\r\n+      31.1±0.7ms         39.1±5ms     1.26  frame_ctor.FromDictwithTimestampOffsets.time_frame_ctor('SemiMonthEnd', 2)\r\n+      30.4±0.1ms         38.0±4ms     1.25  frame_ctor.FromDictwithTimestampOffsets.time_frame_ctor('Hour', 2)\r\n-        33.8±1ms       30.4±0.8ms     0.90  frame_ctor.FromDictwithTimestampOffsets.time_frame_ctor('Micro', 1)\r\n-      48.3±0.6ms       42.6±0.8ms     0.88  frame_ctor.FromDicts.time_frame_ctor_nested_dict\r\n-        23.8±1ms       20.5±0.2ms     0.86  frame_ctor.FromDictwithTimestampOffsets.time_frame_ctor('FY5253Quarter_1', 2)\r\n-      41.2±0.7ms         30.4±2ms     0.74  frame_ctor.FromDictwithTimestampOffsets.time_frame_ctor('CustomBusinessHour', 2)\r\n-      8.35±0.9ms      6.05±0.01ms     0.72  frame_ctor.FromDictwithTimestampOffsets.time_frame_ctor('FY5253_2', 2)\r\n-        42.4±2ms       30.5±0.5ms     0.72  frame_ctor.FromDictwithTimestampOffsets.time_frame_ctor('BMonthEnd', 2)\r\n\r\nSOME BENCHMARKS HAVE CHANGED SIGNIFICANTLY.\r\n```\r\n\r\nI'll try to sort manually and see how it goes.",
        "createdAt" : "2017-12-02T18:12:31Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "bab8c6d2-d912-488f-aa12-6c69c45791da",
        "parentId" : "79111410-fd7f-4665-a6e4-8d93194c8def",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i actually doubt we have good benchmarks on this you are measuring the same benchmark here\r\n\r\nwe need benchmarks that contruct with different dtypes\r\n\r\nand reducing code complexity is paramount here (though of course don’t want to sacrifice perf)",
        "createdAt" : "2017-12-02T18:29:01Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "22701fcf9e2f9daae4020d50af1ff9042803691b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +432,436 @@        if columns is not None:\n            arrays = Series(data, index=columns, dtype=object)\n            data_names = arrays.index\n\n            missing = arrays.isnull()"
  },
  {
    "id" : "d6bbb212-fd02-4cf3-a4a7-d0d5820b8370",
    "prId" : 18600,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18600#pullrequestreview-95746329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db069fe5-3192-4672-b6bb-4dda289bd9e7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we have an asv that actually hits this path here, e.g. not-none columns and a dict as input? I am concerned that this Series conversion to object is going to cause issues (and an asv or 2 will determine this)",
        "createdAt" : "2018-02-10T17:28:26Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a0dfd9bd-314a-4bd1-a93b-43876538a7ce",
        "parentId" : "db069fe5-3192-4672-b6bb-4dda289bd9e7",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Added some, see below",
        "createdAt" : "2018-02-12T10:41:15Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "22701fcf9e2f9daae4020d50af1ff9042803691b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +431,435 @@        \"\"\"\n        if columns is not None:\n            arrays = Series(data, index=columns, dtype=object)\n            data_names = arrays.index\n"
  },
  {
    "id" : "9565f967-ac31-4f18-8655-8f132f8bb7a1",
    "prId" : 18600,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18600#pullrequestreview-95746417",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b039b87-b167-4a11-af88-1fcc4b04f535",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do you need the .tolist()?",
        "createdAt" : "2018-02-10T17:28:58Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7dd408c6-55dd-46d4-98b0-3fc4e2d31bc1",
        "parentId" : "2b039b87-b167-4a11-af88-1fcc4b04f535",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "(removed)",
        "createdAt" : "2018-02-12T10:41:32Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "22701fcf9e2f9daae4020d50af1ff9042803691b",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +437,441 @@            if index is None:\n                # GH10856\n                # raise ValueError if only scalars in dict\n                index = extract_index(arrays[~missing])\n            else:"
  },
  {
    "id" : "9848ecdc-44db-4d78-a70f-0f3c58455614",
    "prId" : 18600,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18600#pullrequestreview-95661783",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3a11cb0-e8c8-4420-8a1e-bcd0fd3cfdbf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is the flexible needed here? is this actually hit by a test?",
        "createdAt" : "2018-02-10T17:29:17Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "af117e66-a87c-436a-8398-805f935bc06d",
        "parentId" : "a3a11cb0-e8c8-4420-8a1e-bcd0fd3cfdbf",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "#10658",
        "createdAt" : "2018-02-11T16:01:12Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "a2590c45-8787-4561-ab96-15b2f2096a28",
        "parentId" : "a3a11cb0-e8c8-4420-8a1e-bcd0fd3cfdbf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i would appreciate an actual explanation. we do not check for this dtype anywhere else in the codebase. so at the very least this needs a comment",
        "createdAt" : "2018-02-11T16:27:10Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "90a0d357-c96d-4b13-8258-d4eaee2f5529",
        "parentId" : "a3a11cb0-e8c8-4420-8a1e-bcd0fd3cfdbf",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Sure, I would also appreciate an explanation (on that code @ajcr wrote and you committed).",
        "createdAt" : "2018-02-11T16:46:11Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "22701fcf9e2f9daae4020d50af1ff9042803691b",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +444,448 @@            # no obvious \"empty\" int column\n            if missing.any() and not is_integer_dtype(dtype):\n                if dtype is None or np.issubdtype(dtype, np.flexible):\n                    # 1783\n                    nan_dtype = object"
  },
  {
    "id" : "78bae3d3-df5a-4a9c-8490-353ecf055133",
    "prId" : 18902,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18902#pullrequestreview-85727527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "834d20bf-b797-4bcf-9a31-945264b446fd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "```\r\nelse:\r\n    convert_datetime64 = True\r\n```",
        "createdAt" : "2017-12-27T20:07:17Z",
        "updatedAt" : "2018-04-14T17:19:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a1b1bab5073a0c8367e7ed9a0c797bc573c1bef",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1386,1390 @@                          FutureWarning, stacklevel=2)\n\n        if index:\n            if is_datetime64_any_dtype(self.index) and convert_datetime64:\n                ix_vals = [self.index.to_pydatetime()]"
  },
  {
    "id" : "f5287e6d-652a-4677-b08f-3819ea5c30cb",
    "prId" : 18934,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18934#pullrequestreview-88219981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcc35967-2c1c-4a21-a2f3-4b734525d476",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "For this case I actually don't find this an improvement. For deprecated methods, I find it useful that this is clear from the one-liner summary this it is deprecated, so you directly see this in the online api summary tables (on api.rst or on the DataFrame docstring page).\r\n\r\nWe could also do both?\r\n\r\n(I know we don't do this consistently for all deprecated methods as well, but from_csv seems like a more important one)",
        "createdAt" : "2018-01-11T16:25:07Z",
        "updatedAt" : "2018-01-11T16:31:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0673b512bb8dba5592ef5d9f4c087bb9fee6cdcc",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1330,1334 @@\n        .. deprecated:: 0.21.0\n            Use :func:`pandas.read_csv` instead.\n\n        It is preferable to use the more powerful :func:`pandas.read_csv`"
  },
  {
    "id" : "be6923fe-8ae3-40b4-a464-bd0cbd82ddb3",
    "prId" : 19021,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19021#pullrequestreview-86120107",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e74a14ca-e90d-4fe4-a356-a2d6c13a4ca9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so this should not be done here, rather *if* a TypeError happens, then ``Index.append`` handles.",
        "createdAt" : "2018-01-01T16:21:33Z",
        "updatedAt" : "2018-04-17T17:28:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3d9f2224-216f-4ca7-aa4c-7e066ee5ec7e",
        "parentId" : "e74a14ca-e90d-4fe4-a356-a2d6c13a4ca9",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "I don't understand you here, could you expand.",
        "createdAt" : "2018-01-01T16:48:35Z",
        "updatedAt" : "2018-04-17T17:28:41Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "0b2a8840-2c94-466e-92da-cd9695514a68",
        "parentId" : "e74a14ca-e90d-4fe4-a356-a2d6c13a4ca9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "```\r\nIn [1]: pd.Index([1, 2, 3]).append(pd.Index(list('abc')))\r\nOut[1]: Index([1, 2, 3, 'a', 'b', 'c'], dtype='object')\r\n\r\nIn [2]: pd.Index([1, 2, 3]).append(pd.CategoricalIndex(list('abc')))\r\nOut[2]: Index([1, 2, 3, 'a', 'b', 'c'], dtype='object')\r\n\r\nIn [3]: pd.Index([1, 2, 3]).append(pd.MultiIndex.from_product([[1], ['a']]))\r\nOut[3]: Index([1, 2, 3, (1, 'a')], dtype='object')\r\n\r\nIn [4]: pd.Index([1, 2, 3]).append(pd.IntervalIndex.from_breaks([1, 2, 3]))\r\nOut[4]: Index([1, 2, 3, (1, 2], (2, 3]], dtype='object')\r\n\r\n```\r\n\r\n.append`` should *never* raise\r\n\r\nso you are catching something that does not happen. ",
        "createdAt" : "2018-01-01T17:53:23Z",
        "updatedAt" : "2018-04-17T17:28:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0cfcc87a-8b9e-440a-8eab-8d711910929e",
        "parentId" : "e74a14ca-e90d-4fe4-a356-a2d6c13a4ca9",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "The below fails, though:\r\n\r\n```python\r\n>>> pd.CategoricalIndex('A B C'.split()).append(pd.Index([1])\r\nTypeError: cannot append a non-category item to a CategoricalIndex\r\n```\r\n\r\nThis is what is tested in the ``if not isinstance(df_columns, (pd.IntervalIndex, pd.MultiIndex)):`` part of the tests. In addition, the reason why pd.IntervalIndex and pd.MultiIndex are excluded for testing there is because of reindexing issues:\r\n\r\n```python\r\n>>> ii = pd.IntervalIndex.from_breaks([0,1,2])\r\n>>> df = pd.DataFrame([[1, 2], [4, 5]], columns=ii)\r\n>>> ser = pd.Series([7], index=['a'])\r\n>>> combined = pd.Index(ii.tolist() + ser.index.tolist())\r\n>>> df.reindex(columns=combined)\r\nTypeError: unorderable types: Interval() > int()\r\n```",
        "createdAt" : "2018-01-02T11:12:57Z",
        "updatedAt" : "2018-04-17T17:28:41Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "04b506a9-a8f2-4757-b232-3f41f634d89d",
        "parentId" : "e74a14ca-e90d-4fe4-a356-a2d6c13a4ca9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, the MI case we did on purpose. However you cannot convert to lists and expect things to work. for the TypeError, do ``.astype(object)`` on each left and right then ``.append`` again. we *never* should coerce to lists.",
        "createdAt" : "2018-01-02T11:19:30Z",
        "updatedAt" : "2018-04-17T17:28:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "13537ae0513c0c96b25c11cb9aae2799db2c5d48",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +6117,6121 @@            try:\n                combined_columns = self.columns.append(idx_diff)\n            except TypeError:\n                combined_columns = self.columns.astype(object).append(idx_diff)\n            other = other.reindex(combined_columns, copy=False)"
  },
  {
    "id" : "7998d5c2-dace-44e0-bca4-fd0d6aa14c7d",
    "prId" : 19292,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19292#pullrequestreview-90079715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "420322d6-b774-41fa-867e-36f43398440d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "extras here",
        "createdAt" : "2018-01-19T11:12:30Z",
        "updatedAt" : "2018-01-19T19:17:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7872f332794b082ae70e6b937697b0e7e3abb86d",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +61,65 @@    is_named_tuple)\nfrom pandas.core.dtypes.missing import isna, notna\n\n\nfrom pandas.core.generic import NDFrame, _shared_docs"
  },
  {
    "id" : "283036d0-e69b-4c10-8922-65e7cbd3fd38",
    "prId" : 19520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19520#pullrequestreview-93766309",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e91146d9-a791-4d88-82b7-47c6be4292e2",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is an unfortunate intermediate stage where some of our internal extension types (sparse, datetime w/ tz) are not yet actual extension array types. We'll be able to clean this up this eventually.",
        "createdAt" : "2018-02-02T21:46:41Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5562b99d55062b2bb0a5b359bd5375adb3a46e",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +2852,2856 @@\n        # return internal types directly\n        if is_extension_type(value) or is_extension_array_dtype(value):\n            return value\n"
  },
  {
    "id" : "40d12b58-81cf-4e15-a2a2-395a32bafc19",
    "prId" : 19520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19520#pullrequestreview-97306708",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "349d3c31-c655-4122-a257-9f957e8cdeac",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "What happens if the dtype is an extension dtype? (like the check above for categorical) \r\nBut certainly fine with not supporting it for now.\r\n\r\nSimilar for Series, we need to either define what `pd.Series(values, dtype=SomeExtensionDtype())` does, or either error on it.",
        "createdAt" : "2018-02-16T13:28:27Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9f579fc4-a50e-4a9b-836e-e21f62a2ae4c",
        "parentId" : "349d3c31-c655-4122-a257-9f957e8cdeac",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "```python\r\nIn [7]: pd.Series([0, 1, 2], dtype=cyberpandas.IPType())\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-7-7fc01964da1d> in <module>()\r\n----> 1 pd.Series([0, 1, 2], dtype=cyberpandas.IPType())\r\n\r\n~/sandbox/pandas-ip/pandas/pandas/core/series.py in __init__(self, data, index, dtype, name, copy, fastpath)\r\n    246             else:\r\n    247                 data = _sanitize_array(data, index, dtype, copy,\r\n--> 248                                        raise_cast_failure=True)\r\n    249\r\n    250                 data = SingleBlockManager(data, index, fastpath=True)\r\n\r\n~/sandbox/pandas-ip/pandas/pandas/core/series.py in _sanitize_array(data, index, dtype, copy, raise_cast_failure)\r\n   3214         if dtype is not None:\r\n   3215             try:\r\n-> 3216                 subarr = _try_cast(data, False)\r\n   3217             except Exception:\r\n   3218                 if raise_cast_failure:  # pragma: no cover\r\n\r\n~/sandbox/pandas-ip/pandas/pandas/core/series.py in _try_cast(arr, take_fast_path)\r\n   3168             subarr = maybe_cast_to_datetime(arr, dtype)\r\n   3169             if not is_extension_type(subarr):\r\n-> 3170                 subarr = np.array(subarr, dtype=dtype, copy=copy)\r\n   3171         except (ValueError, TypeError):\r\n   3172             if is_categorical_dtype(dtype):\r\n\r\nTypeError: data type not understood\r\n```\r\n\r\nHow should we handle this? I'm fine with raising with a better error message. We don't know how to cast from `(arbitrary array, extension_dtype) -> extension array`.\r\n\r\nAlthough... maybe we could support `Series(extension_array, dtype=extension_dtype)`.\r\n\r\nOh hey, that \"works\" \r\n\r\n```python\r\nIn [10]: pd.Series(cyberpandas.IPArray([0, 1, 2]), dtype=cyberpandas.IPType())\r\nOut[10]:\r\n0    0.0.0.0\r\n1    0.0.0.1\r\n2    0.0.0.2\r\ndtype: ip\r\n\r\n```\r\n\r\nBut it only works since we ignore the dtype entirely :)\r\n\r\nI will raise if `data.dtype` is not dtype equal with `dtype` I think.",
        "createdAt" : "2018-02-16T15:17:23Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "12762b54-4e19-467b-9ca2-156d53b28237",
        "parentId" : "349d3c31-c655-4122-a257-9f957e8cdeac",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "also for things like `astype(SomeExtensionDtype)` we will need an informative error message",
        "createdAt" : "2018-02-16T15:41:37Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "abcb0325-58cb-47ac-84dc-23ec63f25f30",
        "parentId" : "349d3c31-c655-4122-a257-9f957e8cdeac",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "isn't a dateimetz an extension type now? why can't you remove the first part of the clauase?",
        "createdAt" : "2018-02-16T17:40:19Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "57073950-2008-4f41-9711-3b9ecd984117",
        "parentId" : "349d3c31-c655-4122-a257-9f957e8cdeac",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Nope, not yet. Just `Categorical` so far. I have `Interval` and `Period` started, but no PRs yet.",
        "createdAt" : "2018-02-16T20:27:17Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5562b99d55062b2bb0a5b359bd5375adb3a46e",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +513,517 @@            return _arrays_to_mgr([values], columns, index, columns,\n                                  dtype=dtype)\n        elif (is_datetimetz(values) or is_extension_array_dtype(values)):\n            # GH19157\n            if columns is None:"
  },
  {
    "id" : "e2c7b5e5-7497-4f6a-baff-f921da4491b8",
    "prId" : 19520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19520#pullrequestreview-97307592",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f180a4b6-c7e0-4bbd-a7f7-b657deabe522",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you put a small comment here what the intent of the function is?",
        "createdAt" : "2018-02-16T13:46:30Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "3e03f73e-9cd1-4b8f-befa-62d3dbfce49a",
        "parentId" : "f180a4b6-c7e0-4bbd-a7f7-b657deabe522",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "hmm I'm not really sure :) It also seems to just be used in one place, so this seems like an opportunity for cleanup.\r\n\r\nThis change is possible because `PeriodIndex.values / _values` is just `.astype(object).values`, and `DatetimeIndex._values` is `self` with a TZ.",
        "createdAt" : "2018-02-16T20:30:51Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5562b99d55062b2bb0a5b359bd5375adb3a46e",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +3389,3393 @@\n        def _maybe_casted_values(index, labels=None):\n            values = index._values\n            if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n                if values.dtype == np.object_:"
  },
  {
    "id" : "2b7e3b51-5d8b-4a2c-b9f1-6f98dc93e5ab",
    "prId" : 19520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19520#pullrequestreview-97363772",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb004f60-5abc-4dd6-a6bc-b84b8c5b1b06",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what are you trying to do here?",
        "createdAt" : "2018-02-16T17:41:54Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "22c27d92-4192-46f9-9bfb-20ab3c869d6a",
        "parentId" : "bb004f60-5abc-4dd6-a6bc-b84b8c5b1b06",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is identical to what happened before in the `else` branch. Seems like it's doing some type inference / coercion.",
        "createdAt" : "2018-02-17T03:25:40Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5562b99d55062b2bb0a5b359bd5375adb3a46e",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +3390,3394 @@        def _maybe_casted_values(index, labels=None):\n            values = index._values\n            if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n                if values.dtype == np.object_:\n                    values = lib.maybe_convert_objects(values)"
  },
  {
    "id" : "bff095dd-25b8-4376-a83f-806fdc7e0562",
    "prId" : 19611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19611#pullrequestreview-95629668",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d407eae1-fc18-4dae-a31a-f5790574a756",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think we can do better than operating on `left.values.T` and `right.values`.  Especially with mixed-dtypes this seems like low-hanging fruit.",
        "createdAt" : "2018-02-09T02:08:47Z",
        "updatedAt" : "2018-02-16T23:34:20Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a219129e-6e13-46e1-9ff0-283c24261181",
        "parentId" : "d407eae1-fc18-4dae-a31a-f5790574a756",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "most of these types of operations need to be pushed down to internals via block operations. this should dispatch to ._data.eval to do this (like the other match functions)",
        "createdAt" : "2018-02-10T17:34:35Z",
        "updatedAt" : "2018-02-16T23:34:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5e4463e0-2d8e-471a-a5d9-1d3ade598688",
        "parentId" : "d407eae1-fc18-4dae-a31a-f5790574a756",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, but I'm not there yet.  These particular cases are tricky because SparseDataFrame implements `_combine_match_foo` differently",
        "createdAt" : "2018-02-10T18:31:38Z",
        "updatedAt" : "2018-02-16T23:34:20Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "118cd5d47ea025aad5e5759ea0a34cf86e0a390a",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +3976,3980 @@        left, right = self.align(other, join='outer', axis=0, level=level,\n                                 copy=False)\n        new_data = func(left.values.T, right.values).T\n        return self._constructor(new_data,\n                                 index=left.index, columns=self.columns,"
  },
  {
    "id" : "15e336c1-cf13-4182-b19b-a1215a9d3b0a",
    "prId" : 19611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19611#pullrequestreview-97408480",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f354dca-32be-425d-8f09-539e0b9c04cc",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'd like to dispatch to Series here, but presumably doing the operation once instead of per-column has a perf benefit.  One idea that didn't work on the first try was to ravel() `this.values` and `other.values`, wrap them in `Series`, then operate and re-shape.",
        "createdAt" : "2018-02-09T02:09:59Z",
        "updatedAt" : "2018-02-16T23:34:20Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f0f6d029-234d-42db-8d99-dd6caec0f734",
        "parentId" : "9f354dca-32be-425d-8f09-539e0b9c04cc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is pretty tricky, yes that would work for most ufuncs, but is not generally applicable e.g. concat is a ufunc too.\r\nso hold off on this as other low hanging fruit w/o opening up this box.",
        "createdAt" : "2018-02-18T16:33:34Z",
        "updatedAt" : "2018-02-18T16:35:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "934ec2b1-d1a4-4fc4-a0c9-48975241a79e",
        "parentId" : "9f354dca-32be-425d-8f09-539e0b9c04cc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "more to the point is to push this down to the block manager for execution which handles the mixed dtypes case, this is just a special case of that.",
        "createdAt" : "2018-02-18T16:34:05Z",
        "updatedAt" : "2018-02-18T16:35:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "118cd5d47ea025aad5e5759ea0a34cf86e0a390a",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +3968,3972 @@\n        else:\n            result = _arith_op(this.values, other.values)\n\n        return self._constructor(result, index=new_index, columns=new_columns,"
  },
  {
    "id" : "5aaf0971-ceb7-43da-b354-ebd2434d7550",
    "prId" : 19613,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19613#pullrequestreview-95630037",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73e80240-4cf3-4f72-ac11-699db3a4be6a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you might be able to simplify this even more here (IOW remove _arith_op) and just in-line it",
        "createdAt" : "2018-02-10T16:57:35Z",
        "updatedAt" : "2018-02-10T18:46:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cb40733c-0cc3-46ea-a876-159a42a03b9b",
        "parentId" : "73e80240-4cf3-4f72-ac11-699db3a4be6a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This overlaps with #19611.  This will probably get in before that does, so I'll take a look at this suggestion after rebasing there.",
        "createdAt" : "2018-02-10T18:45:55Z",
        "updatedAt" : "2018-02-10T18:46:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "805bb00a-9e73-4334-a3cc-f90c0e3a2e2e",
        "parentId" : "73e80240-4cf3-4f72-ac11-699db3a4be6a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "aok",
        "createdAt" : "2018-02-10T18:47:10Z",
        "updatedAt" : "2018-02-10T18:47:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "221f8a63d74445a160e03c77c78e21374a8c3a61",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +3920,3924 @@        new_index, new_columns = this.index, this.columns\n\n        def _arith_op(left, right):\n            left, right = ops.fill_binop(left, right, fill_value)\n            return func(left, right)"
  },
  {
    "id" : "431f29f2-ea39-490a-b43c-7f74a0c852a8",
    "prId" : 19781,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19781#pullrequestreview-98516292",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "275f4674-a2c4-47ca-971c-a47b2efbe1bf",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think many people are not that familiar with the concept of \"RangeIndex\". Therefore, maybe we can leave the origin arange(n) after it between brackets? Or something like \"RangeIndex (values 0, 1, 2, ..., n)\"",
        "createdAt" : "2018-02-20T08:20:50Z",
        "updatedAt" : "2018-02-22T00:27:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "6c145640-73f5-4eb5-b8dc-1d94161c84ef",
        "parentId" : "275f4674-a2c4-47ca-971c-a47b2efbe1bf",
        "authorId" : "214b00be-e9f2-4883-878c-26eab43cc650",
        "body" : "Let's do `RangeIndex (0, 1, 2, ..., n)`? \r\n\r\nSome may not know `arange(n)` either",
        "createdAt" : "2018-02-20T23:38:33Z",
        "updatedAt" : "2018-02-22T00:27:38Z",
        "lastEditedBy" : "214b00be-e9f2-4883-878c-26eab43cc650",
        "tags" : [
        ]
      },
      {
        "id" : "7c47733b-51f9-4361-b1aa-4d8f5520d226",
        "parentId" : "275f4674-a2c4-47ca-971c-a47b2efbe1bf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@maxim-lian your suggestion looks good. pls ping when ready. (and update Series to similar)",
        "createdAt" : "2018-02-21T23:56:44Z",
        "updatedAt" : "2018-02-22T00:27:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6850c55f-17f7-4844-86b4-991f9b391f7e",
        "parentId" : "275f4674-a2c4-47ca-971c-a47b2efbe1bf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "that was indeed a good suggestion!",
        "createdAt" : "2018-02-22T10:35:49Z",
        "updatedAt" : "2018-02-22T10:35:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f085a7c4c49c034f6d641888dd67bf52d3738f8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +252,256 @@        Dict can contain Series, arrays, constants, or list-like objects\n    index : Index or array-like\n        Index to use for resulting frame. Will default to RangeIndex if\n        no indexing information part of input data and no index provided\n    columns : Index or array-like"
  },
  {
    "id" : "3f513371-687e-472b-9764-6bdd86adbd30",
    "prId" : 19802,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19802#pullrequestreview-98358207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf8dae1c-ada0-4841-a144-c3b3a62ad013",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In principle, we could even allow it for `orient='columns'`, as `DataFrame(dict, columns=..)` will just handle this fine. \r\nBut, not really sure of the value here.",
        "createdAt" : "2018-02-20T22:48:59Z",
        "updatedAt" : "2018-02-21T19:29:17Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9864ef3c-0e8c-4bf0-9a6f-30c98a4b451b",
        "parentId" : "bf8dae1c-ada0-4841-a144-c3b3a62ad013",
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "Could you expand on what you mean? If I pass a dict with columns to ``DataFrame()`` I get:\r\n```\r\nIn [1]: pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]}, columns = ['one', 'two'])\r\nOut[1]:\r\nEmpty DataFrame\r\nColumns: [one, two]\r\nIndex: []\r\n```",
        "createdAt" : "2018-02-21T19:03:24Z",
        "updatedAt" : "2018-02-21T19:29:17Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      },
      {
        "id" : "13870903-e125-4bdc-9502-80a48f434a0a",
        "parentId" : "bf8dae1c-ada0-4841-a144-c3b3a62ad013",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, that is exactly what I meant. The `columns` keyword does a 'reindexing' operation, and does not 'overwrite' if the data has keys as well. That's the current behaviour of `DataFrame(..)`. So we could follow here the same pattern, but since this is sometimes also somewhat surprising behaviour, not sure if it is needed to have that here as well. \r\nSo therefore my doubt :-)",
        "createdAt" : "2018-02-21T20:22:07Z",
        "updatedAt" : "2018-02-21T20:22:07Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f90b065a-7bff-4028-8268-9d3517b6add6",
        "parentId" : "bf8dae1c-ada0-4841-a144-c3b3a62ad013",
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "Ah yes I understand now. It makes more sense to me to raise a ValueError in the case with ``from_dict(..., orient='columns', columns=[...])`` but I can change it to not raise if we want to be consistent with ``DataFrame(dict, columns=[..])``",
        "createdAt" : "2018-02-21T21:00:45Z",
        "updatedAt" : "2018-02-21T21:00:46Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7554624b2a1716b644714267bdd99d974512bb4",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +913,917 @@            if columns is not None:\n                raise ValueError(\"cannot use columns parameter with \"\n                                 \"orient='columns'\")\n        else:  # pragma: no cover\n            raise ValueError('only recognize index or columns for orient')"
  },
  {
    "id" : "186d3f99-d176-4843-9255-1fce2aed0729",
    "prId" : 19818,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19818#pullrequestreview-98422762",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c43ce044-7a5e-4603-9501-6c03a6728069",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Not sure you need this line anymore in fact.",
        "createdAt" : "2018-02-22T01:29:21Z",
        "updatedAt" : "2018-02-22T01:29:21Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "59acd1e1ac30a5bb5f6adeb7ba6efd2b19aab555",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1647,1651 @@        >>> writer.write_file()\n\n        With dates:\n\n        >>> writer = StataWriter('./date_data_file.dta', data, {2 : 'tw'})"
  },
  {
    "id" : "ac951e86-f9dc-4823-bebc-5c01d91f7b14",
    "prId" : 20101,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20101#pullrequestreview-102851121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74b98d47-3085-469c-823d-385970a08f89",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a See Also to ndarray.shape",
        "createdAt" : "2018-03-10T13:17:09Z",
        "updatedAt" : "2018-03-10T13:30:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1e0893cc-f9dd-449a-971b-3f1e16b47f84",
        "parentId" : "74b98d47-3085-469c-823d-385970a08f89",
        "authorId" : "4f11f045-c4a2-4976-84c4-841edf41dcb9",
        "body" : "Done.",
        "createdAt" : "2018-03-10T13:28:45Z",
        "updatedAt" : "2018-03-10T13:30:53Z",
        "lastEditedBy" : "4f11f045-c4a2-4976-84c4-841edf41dcb9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6322586dbdbc6bbfa72159b550207aed3f6af1ab",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +583,587 @@        ...                    'col3': [5, 6]})\n        >>> df.shape\n        (2, 3)\n        \"\"\"\n        return len(self.index), len(self.columns)"
  },
  {
    "id" : "35c51612-a17f-4b8b-b6fb-8d188080b3ec",
    "prId" : 20129,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20129#pullrequestreview-102851740",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3484e48f-0241-4762-89ac-45b2c570d966",
        "parentId" : null,
        "authorId" : "32e5c4d7-629c-4c2d-a6aa-2614576294fd",
        "body" : "An extended summary is necessary.",
        "createdAt" : "2018-03-10T13:54:51Z",
        "updatedAt" : "2018-03-12T11:03:07Z",
        "lastEditedBy" : "32e5c4d7-629c-4c2d-a6aa-2614576294fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "e65840cf1b7fd3342531c63d96ab4657e8ad5f24",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +1695,1699 @@        \"\"\"\n        Write a DataFrame to the binary parquet format.\n\n        .. versionadded:: 0.21.0\n"
  },
  {
    "id" : "5eb5e454-00e6-4518-8b14-eed3efec7a59",
    "prId" : 20129,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20129#pullrequestreview-102854938",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12c3f0dd-a6e6-4c16-afc1-1100124fbf10",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "IIRC we use lower for these? @jorisvandenbossche ",
        "createdAt" : "2018-03-10T15:43:40Z",
        "updatedAt" : "2018-03-12T11:03:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1680e7b6-ba09-4a4b-8eef-6643e98bc4af",
        "parentId" : "12c3f0dd-a6e6-4c16-afc1-1100124fbf10",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Here it is fine as start of the sentence and not being the exact type",
        "createdAt" : "2018-03-10T16:08:11Z",
        "updatedAt" : "2018-03-12T11:03:07Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "e65840cf1b7fd3342531c63d96ab4657e8ad5f24",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1706,1710 @@        ----------\n        fname : str\n            String file path.\n        engine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n            Parquet library to use. If 'auto', then the option"
  },
  {
    "id" : "d46f5bb6-2a48-4462-8a33-a691d748217a",
    "prId" : 20129,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20129#pullrequestreview-102883364",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c26f9e7-ba73-4a59-940e-7004a0a64dde",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you also show using read_parquet to read this back",
        "createdAt" : "2018-03-11T14:12:15Z",
        "updatedAt" : "2018-03-12T11:03:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e65840cf1b7fd3342531c63d96ab4657e8ad5f24",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +1734,1738 @@        --------\n        >>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.to_parquet('df.parquet.gzip', compression='gzip')\n        >>> pd.read_parquet('df.parquet.gzip')\n           col1  col2"
  },
  {
    "id" : "29d7d7bd-a98e-466a-b98e-697f1679ce1a",
    "prId" : 20136,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20136#pullrequestreview-102851658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b79890c8-57cd-4a0a-8645-23ab345fc3e9",
        "parentId" : null,
        "authorId" : "021d01df-a487-48a6-a91d-4a42dce73f5c",
        "body" : "Maybe a \"elementwise function\" or a \"scalar function\", I'm not sure.",
        "createdAt" : "2018-03-10T13:51:23Z",
        "updatedAt" : "2018-03-16T21:32:45Z",
        "lastEditedBy" : "021d01df-a487-48a6-a91d-4a42dce73f5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "26c5aa821957195e63b1216b6bf2c8b0ee28cdf5",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +5006,5010 @@    def applymap(self, func):\n        \"\"\"\n        Apply a function to a Dataframe elementwise.\n\n        This method applies a function that accepts and returns a scalar"
  },
  {
    "id" : "ecfbf48e-033c-45e1-97df-c3b2de311000",
    "prId" : 20197,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20197#pullrequestreview-104703925",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17ee17a4-b354-46b2-8ad3-279ac34d9ced",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Typically, `Returns` is omitted for methods with no return value. In this case I think it's good to explicitly say that there's no return value.",
        "createdAt" : "2018-03-16T20:13:56Z",
        "updatedAt" : "2018-03-16T20:13:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e785f8e595287efeef4ae877dc4596f24713362",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +1855,1859 @@        Returns\n        -------\n        None\n            This method prints a summary of a DataFrame and returns None.\n"
  },
  {
    "id" : "0ab21a47-ab06-4fab-945f-3c6d3119bce4",
    "prId" : 20202,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20202#pullrequestreview-103061875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5bfe5c49-134c-45c8-86b7-2121381a97f3",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Can you get rid of the \"We use this DataFrame to illustrate\" at the beginning of the examples? I don't think it adds any value.\r\n\r\nAlso, I'd personally prefer to create a smaller (e.g 3 rows, 2 cols) dataframe from a Python list, instead of all that numpy machinery. :) And if the example is with `sqrt`, I'd use numbers like `9` so the user can quickly see what `apply` does, which is the goal of this example.",
        "createdAt" : "2018-03-12T13:27:56Z",
        "updatedAt" : "2018-03-12T16:46:57Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "66c7968e-d21c-4eb2-815e-65bd13ce0439",
        "parentId" : "5bfe5c49-134c-45c8-86b7-2121381a97f3",
        "authorId" : "e661fbe5-ba51-473c-a8dd-e53acebe05c3",
        "body" : "Yes, it's simpler. See d52ac81e7",
        "createdAt" : "2018-03-12T14:13:44Z",
        "updatedAt" : "2018-03-12T16:46:57Z",
        "lastEditedBy" : "e661fbe5-ba51-473c-a8dd-e53acebe05c3",
        "tags" : [
        ]
      },
      {
        "id" : "c255f8a0-428a-4a85-a1c9-078591ebcfc6",
        "parentId" : "5bfe5c49-134c-45c8-86b7-2121381a97f3",
        "authorId" : "e661fbe5-ba51-473c-a8dd-e53acebe05c3",
        "body" : "@datapythonista In commit 3160fb805, I suppress an unnecessary test, unintentionally introduced in previous commit (d52ac81)",
        "createdAt" : "2018-03-12T14:20:30Z",
        "updatedAt" : "2018-03-12T16:46:57Z",
        "lastEditedBy" : "e661fbe5-ba51-473c-a8dd-e53acebe05c3",
        "tags" : [
        ]
      }
    ],
    "commit" : "c68a0129b2b9fc9dd093f3cc15adc08a946a017d",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +4903,4907 @@        side-effects, as they will take effect twice for the first\n        column/row.\n\n        See also\n        --------"
  },
  {
    "id" : "98213522-b9c4-487d-a3cf-e047ba37e56c",
    "prId" : 20221,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20221#pullrequestreview-102909993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff165849-787e-4dc0-902c-ee1d4f452140",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "PEP8: indendt one more space. smae with line below.",
        "createdAt" : "2018-03-11T17:15:51Z",
        "updatedAt" : "2018-03-12T13:14:50Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "5ad13f0a-052f-4621-91bb-86f860608e56",
        "parentId" : "ff165849-787e-4dc0-902c-ee1d4f452140",
        "authorId" : "de61ec5d-95cb-4d80-a453-9234b4899dde",
        "body" : "For me flake complains if I change that. on my system flake doesn't check the examples, so I copy it in the code:\r\n\r\n```\r\n        df = pd.DataFrame({\"Person\":\r\n                           [\"John\", \"Myla\", None, \"John\", \"Myla\"],\r\n                           \"Age\": [24., np.nan, 21., 33, 26],\r\n                           \"Single\": [False, True, True, True, False]})\r\n        df\r\n```\r\n\r\nIf I have it like it like this flake only complains about the pd not being defined:\r\n``pandas/core/frame.py:5672:14: F821 undefined name 'pd'``",
        "createdAt" : "2018-03-11T23:19:08Z",
        "updatedAt" : "2018-03-12T13:14:50Z",
        "lastEditedBy" : "de61ec5d-95cb-4d80-a453-9234b4899dde",
        "tags" : [
        ]
      },
      {
        "id" : "193024d9-25ac-42a2-bb79-671db2ac051f",
        "parentId" : "ff165849-787e-4dc0-902c-ee1d4f452140",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Sorry I misread. ",
        "createdAt" : "2018-03-12T02:14:11Z",
        "updatedAt" : "2018-03-12T13:14:50Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbb84ebcb95df87be72d59e443e7cf81ec138192",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +5630,5634 @@        >>> df = pd.DataFrame({\"Person\":\n        ...                    [\"John\", \"Myla\", None, \"John\", \"Myla\"],\n        ...                    \"Age\": [24., np.nan, 21., 33, 26],\n        ...                    \"Single\": [False, True, True, True, False]})\n        >>> df"
  },
  {
    "id" : "283ef82e-1433-40bc-831e-3a434b0c730f",
    "prId" : 20254,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20254#pullrequestreview-102882477",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "352cd4f5-6b60-4286-97da-407ea587aff0",
        "parentId" : null,
        "authorId" : "2f33c511-dce6-498d-b0fa-33f6b44b84bc",
        "body" : "Another recommendation to include in the *See Also* section:\r\nDataFrame.T: alias for DataFrame.transpose",
        "createdAt" : "2018-03-10T22:31:54Z",
        "updatedAt" : "2018-03-23T08:31:58Z",
        "lastEditedBy" : "2f33c511-dce6-498d-b0fa-33f6b44b84bc",
        "tags" : [
        ]
      },
      {
        "id" : "31f236af-3c08-4786-9ffc-7fdb6035c75c",
        "parentId" : "352cd4f5-6b60-4286-97da-407ea587aff0",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "That's a good idea, the only problem with that is that we use the same docstring for `.T`, so then it would be pointing to itself. \r\n\r\nSo I would just reflect the full docstring for both, like you already did in the examples.\r\n\r\n@igorcadelima maybe add in the extended summary that it is both as method transpose() and property T",
        "createdAt" : "2018-03-11T13:46:55Z",
        "updatedAt" : "2018-03-23T08:31:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ead247c4c2f2083d001f387af780ebd66938fbee",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +2314,2318 @@        --------\n        numpy.transpose : Permute the dimensions of a given array.\n\n        Notes\n        -----"
  },
  {
    "id" : "38a0cc1a-cc2a-4489-adc3-fb5154221580",
    "prId" : 20255,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20255#pullrequestreview-102902073",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbc4e899-b669-4398-a263-f366d804a692",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you add one more example selecting multiple columns?",
        "createdAt" : "2018-03-12T00:04:15Z",
        "updatedAt" : "2018-03-17T10:28:26Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7dd4f02466cf9b35e76af2916dd599048e6d5281",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +3906,3910 @@        3  10  c  3.0\n        1  10  b  2.0\n        2   8  d  NaN\n\n        To order by the largest values in column \"a\" and then \"c\", we can"
  },
  {
    "id" : "f10cccba-0e39-4a4e-a323-9082f15cd9bf",
    "prId" : 20259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20259#pullrequestreview-102884166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56ee072c-4e03-4ea6-b2d3-0392082ca41c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "DataFrame is ok here",
        "createdAt" : "2018-03-11T14:37:34Z",
        "updatedAt" : "2018-03-11T14:38:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b07d9fbd646d6c9298eb8c064cbe8dc0743ae394",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +907,911 @@        Returns\n        -------\n        pandas.DataFrame\n\n        See Also"
  },
  {
    "id" : "febad78a-200b-4c97-a2c3-df7b6bfb356e",
    "prId" : 20613,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20613#pullrequestreview-116178635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f0f9c6a-89b5-4ddd-be56-2bdf4b0a4668",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "put before verify_integrity",
        "createdAt" : "2018-04-29T21:09:12Z",
        "updatedAt" : "2018-05-01T00:20:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e1b0241358c10893939d135e91ab16cfa48cadd",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +6053,6057 @@        verify_integrity : boolean, default False\n            If True, raise ValueError on creating index with duplicates.\n        sort : boolean, default None\n            Sort columns if the columns of `self` and `other` are not aligned.\n            The default sorting is deprecated and will change to not-sorting"
  },
  {
    "id" : "bd1f71b1-8b87-4c8e-b580-8407d8b54f86",
    "prId" : 20844,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20844#pullrequestreview-116652274",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d064869-6b6e-4ed8-ba79-2c34d54fedd5",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Hmm, should these be strings? Is this exposed anywhere in stats itself? Do they use integers? (when I see version number, I think string).",
        "createdAt" : "2018-05-01T14:28:58Z",
        "updatedAt" : "2018-05-01T18:57:00Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "16103f90-9447-478f-82e6-fcc87e5fc731",
        "parentId" : "4d064869-6b6e-4ed8-ba79-2c34d54fedd5",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Huh, https://www.stata.com/support/faqs/data-management/save-for-previous-version/ seems to suggest that stata uses integers? `version(13)`. OK then, let's follow that.",
        "createdAt" : "2018-05-01T17:52:25Z",
        "updatedAt" : "2018-05-01T18:57:00Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "96b083b6-7d51-4565-b444-4ab9b973d130",
        "parentId" : "4d064869-6b6e-4ed8-ba79-2c34d54fedd5",
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "Could use 10 and 13 which are the Stata release versions. ",
        "createdAt" : "2018-05-01T18:18:34Z",
        "updatedAt" : "2018-05-01T18:57:00Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d54ded3b07126c5117b0661fed84afe6ffa0452",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +1803,1807 @@            .. versionadded:: 0.19.0\n\n        version : {114, 117}\n            Version to use in the output dta file.  Version 114 can be used\n            read by Stata 10 and later.  Version 117 can be read by Stata 13"
  },
  {
    "id" : "f3c7af3d-6b07-478e-9f55-1a4a52f0b3ea",
    "prId" : 20844,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20844#pullrequestreview-116652539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22473f39-85f1-4460-8781-be96344ba601",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Would be nice to include the user passed `version` in the error message.",
        "createdAt" : "2018-05-01T17:53:44Z",
        "updatedAt" : "2018-05-01T18:57:00Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c3906a53-0ab8-46a5-8770-a0274d42ebec",
        "parentId" : "22473f39-85f1-4460-8781-be96344ba601",
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "I can push in a little bit. ",
        "createdAt" : "2018-05-01T18:19:26Z",
        "updatedAt" : "2018-05-01T18:57:00Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d54ded3b07126c5117b0661fed84afe6ffa0452",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +1859,1863 @@        kwargs = {}\n        if version not in (114, 117):\n            raise ValueError('Only formats 114 and 117 supported.')\n        if version == 114:\n            if convert_strl is not None:"
  },
  {
    "id" : "c0ca965a-89f9-4d86-9342-4a0287121f4c",
    "prId" : 21038,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21038#pullrequestreview-119999046",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2e5618d-9120-489e-b297-8860ba83dccb",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Worth calling out in this example that providing the fill_value has preserved the `int` dtype, instead of casting to float as `np.nan` would",
        "createdAt" : "2018-05-14T20:49:37Z",
        "updatedAt" : "2018-11-06T20:48:39Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "67112b813af6c367f604366f2352c9a1bb1fedf3",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +5530,5534 @@            two    NaN      6\n\n        We can also fill missing values using the `fill_value` parameter.\n\n        >>> table = pivot_table(df, values='D', index=['A', 'B'],"
  },
  {
    "id" : "df8b40f0-b889-4d8f-837c-ab2029bbb0ad",
    "prId" : 21066,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21066#pullrequestreview-120591949",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11c80a34-f970-4eb0-9c3f-3b77b4ad7801",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I realize we don't have an overall strategy for annotations just yet but I had to think through this as I was debugging anyway, so figured I'd put here explicitly for when we turn this on",
        "createdAt" : "2018-05-15T23:12:16Z",
        "updatedAt" : "2018-05-17T00:09:26Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "aca35f21-4414-4d6f-834a-5e6acf62deea",
        "parentId" : "11c80a34-f970-4eb0-9c3f-3b77b4ad7801",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok!",
        "createdAt" : "2018-05-16T11:08:19Z",
        "updatedAt" : "2018-05-17T00:09:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0dc3f4119de05ae33d0650f4001661513a5807e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +5732,5736 @@    # Function application\n\n    def _gotitem(self,\n                 key,           # type: Union[str, List[str]]\n                 ndim,          # type: int"
  },
  {
    "id" : "85fdc0b0-10e7-437b-a5d2-0e7d1215b197",
    "prId" : 21313,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21313#pullrequestreview-134201521",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fac4006c-ecbd-44a0-b4fc-96d8f841dd8f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why are you changing to directly use\r\n_get_item_cache here rather than _getitem_column? (is it removed)?",
        "createdAt" : "2018-06-13T21:23:22Z",
        "updatedAt" : "2018-07-07T08:10:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "68744bab-5d33-43b2-b0a7-3ed24cdca493",
        "parentId" : "fac4006c-ecbd-44a0-b4fc-96d8f841dd8f",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Yes, removed. It did a uniqueness test which is no more necessary, and was misleading anyway, as it could not really manage all cases in which a single column is returned.",
        "createdAt" : "2018-07-03T23:41:34Z",
        "updatedAt" : "2018-07-07T08:10:55Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bd6eb84d75b5cd9d749cf52015bd588585c4135",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2676,2680 @@                if self.columns.nlevels > 1:\n                    return self._getitem_multilevel(key)\n                return self._get_item_cache(key)\n        except (TypeError, ValueError):\n            # The TypeError correctly catches non hashable \"key\" (e.g. list)"
  },
  {
    "id" : "b6fe345d-50e0-47eb-9d82-b55b6ed89244",
    "prId" : 21313,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21313#pullrequestreview-134202966",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32d99faa-22c5-48ea-bf83-1240c0b8ae08",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "isn’t this case handled by _getitem_multilevel (above)?",
        "createdAt" : "2018-06-13T21:27:23Z",
        "updatedAt" : "2018-07-07T08:10:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1b0f69f7-8e24-4778-af0b-6d3bbc8c65be",
        "parentId" : "32d99faa-22c5-48ea-bf83-1240c0b8ae08",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "only if ``columns.is_unique``",
        "createdAt" : "2018-07-03T23:51:37Z",
        "updatedAt" : "2018-07-07T08:10:55Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bd6eb84d75b5cd9d749cf52015bd588585c4135",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +2700,2704 @@\n        if is_single_key:\n            if self.columns.nlevels > 1:\n                return self._getitem_multilevel(key)\n            indexer = self.columns.get_loc(key)"
  },
  {
    "id" : "f8ff7e8e-e3fe-4c60-b55e-f5e02a1b1ebc",
    "prId" : 21313,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21313#pullrequestreview-134203589",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a53468ee-a51a-46ab-b0e8-d06abb59fe96",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is an argument for _take to accept a scalar integer ",
        "createdAt" : "2018-06-13T21:28:50Z",
        "updatedAt" : "2018-07-07T08:10:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e37b4923-e188-482a-b34a-d680bbe98fa5",
        "parentId" : "a53468ee-a51a-46ab-b0e8-d06abb59fe96",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Not too sure. ``_take`` is such a fundamental method that there might be good reasons to keep it simple. Anyway, we can discuss this (in some other issue).",
        "createdAt" : "2018-07-03T23:53:34Z",
        "updatedAt" : "2018-07-07T08:10:55Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "fe325914-4d67-4cb1-abfa-631f58b0dd0c",
        "parentId" : "a53468ee-a51a-46ab-b0e8-d06abb59fe96",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "moreover, the problem should disappear when we fix #9519 , that is, when the return type becomes predictable from the index (non-)uniqueness",
        "createdAt" : "2018-07-03T23:56:01Z",
        "updatedAt" : "2018-07-07T08:10:55Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bd6eb84d75b5cd9d749cf52015bd588585c4135",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +2703,2707 @@                return self._getitem_multilevel(key)\n            indexer = self.columns.get_loc(key)\n            if is_integer(indexer):\n                indexer = [indexer]\n        else:"
  },
  {
    "id" : "b2d5a077-5a78-403e-b48a-58fd7d694c76",
    "prId" : 21628,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21628#pullrequestreview-132095814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a265ea75-8b93-44e2-b966-f645ee6eb572",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think needs to be single backticks",
        "createdAt" : "2018-06-25T22:14:23Z",
        "updatedAt" : "2018-06-26T16:49:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6194e467-0442-4637-a214-9ce07e0278e3",
        "parentId" : "a265ea75-8b93-44e2-b966-f645ee6eb572",
        "authorId" : "123c1393-2602-4758-a036-a9a25697e7fc",
        "body" : "Two backticks is [code font in Sphinx RST](http://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html#inline-markup), which is what I want.",
        "createdAt" : "2018-06-26T16:10:33Z",
        "updatedAt" : "2018-06-26T16:51:23Z",
        "lastEditedBy" : "123c1393-2602-4758-a036-a9a25697e7fc",
        "tags" : [
        ]
      }
    ],
    "commit" : "7330463aba3cfab74189faa086ae6ca0a3c5e7cb",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +1120,1124 @@        ----------\n        destination_table : str\n            Name of table to be written, in the form ``dataset.tablename``.\n        project_id : str, optional\n            Google BigQuery Account project ID. Optional when available from"
  },
  {
    "id" : "085ca84b-9a8f-4396-aa35-7ee9b9b8d1f4",
    "prId" : 21861,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21861#pullrequestreview-136465020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e17ad452-cc0d-4b05-b7d4-3b8c97fec38a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe could add ``is_numpy_scalar`` method in common",
        "createdAt" : "2018-07-12T00:12:57Z",
        "updatedAt" : "2018-07-12T00:13:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "84e96632473142a380ec1f5e0cd999fcc6181b14",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +7680,7684 @@            if is_list_like(values[0]) or hasattr(values[0], 'len'):\n                values = np.array([convert(v) for v in values])\n            elif isinstance(values[0], np.ndarray) and values[0].ndim == 0:\n                # GH#21861\n                values = np.array([convert(v) for v in values])"
  },
  {
    "id" : "b8620614-ab69-4e04-936b-c786a8d8db20",
    "prId" : 21954,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21954#pullrequestreview-140056365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57167588-5011-43a0-ae64-aa07a2141b8c",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "As it stands, this is a breaking API change.\r\n\r\n@jreback : `0.21.0` deprecations are fair game to remove in `0.24.0`, no?",
        "createdAt" : "2018-07-24T00:41:42Z",
        "updatedAt" : "2018-08-02T10:47:57Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "bc821843-b564-4b93-9298-5efe972623b9",
        "parentId" : "57167588-5011-43a0-ae64-aa07a2141b8c",
        "authorId" : "afb6040e-4d88-4b84-baf3-5385ad75eea3",
        "body" : "As far as I know, the only difference between `read_csv` and `read_table` is the default value of `sep`. Here, `sep` is explicitly set, so I don't see how this changes anything (except moving away from `read_table`)?",
        "createdAt" : "2018-07-24T17:36:18Z",
        "updatedAt" : "2018-08-02T10:47:57Z",
        "lastEditedBy" : "afb6040e-4d88-4b84-baf3-5385ad75eea3",
        "tags" : [
        ]
      },
      {
        "id" : "21a242a0-00b2-4a8f-94c0-933c86c07767",
        "parentId" : "57167588-5011-43a0-ae64-aa07a2141b8c",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "You're right: for the vast majority, it's not going to be breaking.  It's only in a corner case situation (e.g. you pass in `None`) that you will see a change.  This is fine then.",
        "createdAt" : "2018-07-24T20:03:22Z",
        "updatedAt" : "2018-08-02T10:47:57Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "90024604a75ff8aeea3b56a7a9329005d098a380",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1599,1603 @@                        parse_dates=parse_dates, index_col=index_col,\n                        encoding=encoding, tupleize_cols=tupleize_cols,\n                        infer_datetime_format=infer_datetime_format)\n\n    def to_sparse(self, fill_value=None, kind='block'):"
  },
  {
    "id" : "021d6d39-c8f8-46ac-8239-ef7f76c58541",
    "prId" : 22011,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22011#pullrequestreview-141596552",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f048b12-0215-4ab7-959c-e8fb8a22c48e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add versionchanged in each of the modified doc-strings",
        "createdAt" : "2018-07-30T10:37:31Z",
        "updatedAt" : "2018-08-01T14:41:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8a9118b2-3000-49c0-bed5-4bc42db51220",
        "parentId" : "2f048b12-0215-4ab7-959c-e8fb8a22c48e",
        "authorId" : "922adc08-2620-4154-abfa-8c19591dca3e",
        "body" : "Done in https://github.com/pandas-dev/pandas/pull/22011/commits/1ba8f3a281a71db33d8baa6a9a4c9fd7e40c625a",
        "createdAt" : "2018-07-30T15:47:16Z",
        "updatedAt" : "2018-08-01T14:41:31Z",
        "lastEditedBy" : "922adc08-2620-4154-abfa-8c19591dca3e",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf5b62e31bacbc4b27744f45a60a10c6a7902396",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1716,1720 @@    def to_csv(self, path_or_buf=None, sep=\",\", na_rep='', float_format=None,\n               columns=None, header=True, index=True, index_label=None,\n               mode='w', encoding=None, compression='infer', quoting=None,\n               quotechar='\"', line_terminator='\\n', chunksize=None,\n               tupleize_cols=None, date_format=None, doublequote=True,"
  },
  {
    "id" : "4cc05935-679d-4e95-b4a8-481d86df7c33",
    "prId" : 22019,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22019#pullrequestreview-146174250",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdc9c959-0e38-4388-8420-919f10163cdc",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Are there cases where this might no be true? If not, then let's remove it, as it could be somewhat expensive (though maybe not, since the output of align shares indices.)",
        "createdAt" : "2018-08-14T17:29:04Z",
        "updatedAt" : "2018-10-02T22:17:41Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "63038527-c0c3-4e8f-a471-bb881cb76d92",
        "parentId" : "bdc9c959-0e38-4388-8420-919f10163cdc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This always holds.  I added it largely so I wouldn't have to keep going back to core.ops to double-check what was being passed.",
        "createdAt" : "2018-08-14T17:38:20Z",
        "updatedAt" : "2018-10-02T22:17:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5832c2b81bc7999877f3fc83ddc29484fe6e5da6",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +4902,4906 @@        left, right = self.align(other, join='outer', axis=0, level=level,\n                                 copy=False)\n        assert left.index.equals(right.index)\n\n        if left._is_mixed_type or right._is_mixed_type:"
  },
  {
    "id" : "497a2c51-ced3-4482-888b-ce8414cb3abf",
    "prId" : 22141,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22141#pullrequestreview-148664298",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb99741f-c1b2-4ab1-8e23-56b7658c15c0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this part of the doc-tests?",
        "createdAt" : "2018-08-22T10:19:45Z",
        "updatedAt" : "2018-08-24T23:57:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e2f3307f-3ac3-4973-b61a-6a31aa3de34d",
        "parentId" : "bb99741f-c1b2-4ab1-8e23-56b7658c15c0",
        "authorId" : "52a087da-d694-418e-9886-7c13850a3da2",
        "body" : "Yes, I was able to verify this using pytest --doctest-modules. ",
        "createdAt" : "2018-08-22T20:46:44Z",
        "updatedAt" : "2018-08-24T23:57:56Z",
        "lastEditedBy" : "52a087da-d694-418e-9886-7c13850a3da2",
        "tags" : [
        ]
      }
    ],
    "commit" : "304af4f855577648bb7c2f2e81ec58462c0d463b",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +272,276 @@4  bar           2  bar            6\n5  baz           3  baz            7\n\nMerge DataFrames df1 and df2, but raise an exception if the DataFrames have\nany overlapping columns."
  },
  {
    "id" : "4a412720-8794-4b8b-8c4e-b617e2db7f63",
    "prId" : 22163,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22163#pullrequestreview-144527993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c32db097-ad41-4c95-8eef-844ead32a419",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is is pretty annoything that we have to do this, I would make an explict function maybe ``is_any_scalar`` I think as we have these types of checks all over. pls make an issue for this.",
        "createdAt" : "2018-08-08T10:10:38Z",
        "updatedAt" : "2018-08-10T14:11:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f4a6f36b-4da2-4245-b92d-377f62232518",
        "parentId" : "c32db097-ad41-4c95-8eef-844ead32a419",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Done.",
        "createdAt" : "2018-08-08T17:34:01Z",
        "updatedAt" : "2018-08-10T14:11:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b62135b945ea015ef5531af8dc9502f6c018511",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +4937,4941 @@\n    def _combine_const(self, other, func, errors='raise', try_cast=True):\n        if lib.is_scalar(other) or np.ndim(other) == 0:\n            new_data = {i: func(self.iloc[:, i], other)\n                        for i, col in enumerate(self.columns)}"
  },
  {
    "id" : "2d773e94-3f58-4ce3-a8e8-eb39aa5fa210",
    "prId" : 22229,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22229#pullrequestreview-145185383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42dbd582-176a-4d72-a4e7-ba5ee658ddef",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so this is an extremely misleading parameter name. These are NOT bytes, rather they are fixed length strings. maybe ``strings_as_fixed_length``",
        "createdAt" : "2018-08-08T10:34:48Z",
        "updatedAt" : "2018-12-30T21:00:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f08628bc-9a9b-4b57-8599-3a1f7a3e356a",
        "parentId" : "42dbd582-176a-4d72-a4e7-ba5ee658ddef",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "on second though call this ``stringlike_as_fixed_length``, to encompass string, unicode, bytes",
        "createdAt" : "2018-08-10T10:24:42Z",
        "updatedAt" : "2018-12-30T21:00:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec69fe0b4a98b7e21463ec1ceb6a3eaeed9cc96f",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1541,1545 @@        return cls(mgr)\n\n    def to_records(self, index=True, convert_datetime64=None,\n                   column_dtypes=None, index_dtypes=None):\n        \"\"\""
  },
  {
    "id" : "1eb9c0e0-ed32-4024-bb64-ccdf0a849142",
    "prId" : 22229,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22229#pullrequestreview-187976066",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "451292ba-88c0-4e9c-a466-aa2461f2b766",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add an example which looks something like the OP, e.g. \r\n\r\n``df.to_records(index_dtypes=\"<S{}\".format(df.index.str.len().max()))``",
        "createdAt" : "2018-12-26T20:16:36Z",
        "updatedAt" : "2018-12-30T21:00:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b49afd49-b8fd-4441-9e54-ce59efc27aea",
        "parentId" : "451292ba-88c0-4e9c-a466-aa2461f2b766",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Sure, done.",
        "createdAt" : "2018-12-26T23:46:16Z",
        "updatedAt" : "2018-12-30T21:00:40Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec69fe0b4a98b7e21463ec1ceb6a3eaeed9cc96f",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +1617,1621 @@        Data types can be specified for the columns:\n\n        >>> df.to_records(column_dtypes={\"A\": \"int32\"})\n        rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n                  dtype=[('I', 'O'), ('A', '<i4'), ('B', '<f8')])"
  },
  {
    "id" : "9e58ea22-fef8-40d6-95c1-1f68959e54cf",
    "prId" : 22229,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22229#pullrequestreview-188207273",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e590468-bfb9-47ad-9f3d-4c05b10b8423",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is this anything but a dict of column_name -> dtype? what does the indices have to do with this?",
        "createdAt" : "2018-12-27T22:38:29Z",
        "updatedAt" : "2018-12-30T21:00:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ee7ee940-ee36-4931-a468-5d81382efbf7",
        "parentId" : "8e590468-bfb9-47ad-9f3d-4c05b10b8423",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "You can map column indices to dtypes e.g.\r\n\r\n```\r\n{0: \"int32\"}\r\n```\r\n\r\nmaps `df.columns[0]` to the `int32` `dtype`.\r\n\r\nThis design was taken from `read_csv`, where we do something similar.",
        "createdAt" : "2018-12-27T22:58:18Z",
        "updatedAt" : "2018-12-30T21:00:40Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "c6e82fec-2b7a-43a2-8296-0eeab1b093da",
        "parentId" : "8e590468-bfb9-47ad-9f3d-4c05b10b8423",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> are you testing for a multi-index for the index? I think this is ok\r\nmulti-index on the columns? does a rec-array even work with this?\r\n\r\nAh, good question.  I forgot to add tests for that.\r\n\r\nPretty certain MI index should be okay, less sure about MI columns.",
        "createdAt" : "2018-12-27T22:58:30Z",
        "updatedAt" : "2018-12-30T21:00:40Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "a6234f4c-96e7-43df-b4d1-0d437e428c9f",
        "parentId" : "8e590468-bfb9-47ad-9f3d-4c05b10b8423",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Added tests for MI, both in the columns and indices.",
        "createdAt" : "2018-12-28T02:18:31Z",
        "updatedAt" : "2018-12-30T21:00:40Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec69fe0b4a98b7e21463ec1ceb6a3eaeed9cc96f",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1562,1566 @@            .. versionadded:: 0.24.0\n\n            If a string or type, the data type to store all columns. If\n            a dictionary, a mapping of column names and indices (zero-indexed)\n            to specific data types."
  },
  {
    "id" : "aeb12ae5-0c58-4d04-a1ae-f3375a76bb08",
    "prId" : 22229,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22229#pullrequestreview-188330419",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90b44154-045f-4453-b646-f8f5c42d2a34",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "type should be `numpy.dtype` right? Oh, but we probably also accept things like `int`, which is also a type.",
        "createdAt" : "2018-12-28T14:58:16Z",
        "updatedAt" : "2018-12-30T21:00:40Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "3cd39cf1-df5b-4749-8ec3-bbc3a59f76b5",
        "parentId" : "90b44154-045f-4453-b646-f8f5c42d2a34",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yep, that’s why I use `type` and not `numpy.dtype`.",
        "createdAt" : "2018-12-28T16:59:49Z",
        "updatedAt" : "2018-12-30T21:00:40Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec69fe0b4a98b7e21463ec1ceb6a3eaeed9cc96f",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1559,1563 @@            Whether to convert the index to datetime.datetime if it is a\n            DatetimeIndex.\n        column_dtypes : str, type, dict, default None\n            .. versionadded:: 0.24.0\n"
  },
  {
    "id" : "f83444ed-b9b3-41d9-aea4-b4a5fb00ece1",
    "prId" : 22229,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22229#pullrequestreview-188450453",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf85c386-8daf-4b95-9481-82dd577aca99",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you sprinkle a couple of comments in this to indicate what the flow is.",
        "createdAt" : "2018-12-30T20:20:35Z",
        "updatedAt" : "2018-12-30T21:00:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "97fb052b-c19b-4ea3-8f1c-5b6ffb804603",
        "parentId" : "bf85c386-8daf-4b95-9481-82dd577aca99",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yep, done.",
        "createdAt" : "2018-12-30T20:59:24Z",
        "updatedAt" : "2018-12-30T21:00:40Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec69fe0b4a98b7e21463ec1ceb6a3eaeed9cc96f",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +1668,1672 @@            names = lmap(compat.text_type, self.columns)\n            index_names = []\n\n        index_len = len(index_names)\n        formats = []"
  },
  {
    "id" : "1efaad87-e933-4533-b3ac-d2832f153914",
    "prId" : 22266,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22266#pullrequestreview-147847262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a832359f-11f8-432c-b4fd-fc7c776649e5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a versionadded tag. Why is there a ``None`` option? ",
        "createdAt" : "2018-08-20T22:34:56Z",
        "updatedAt" : "2018-09-19T23:09:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7dc53a19320162218671654d7a406f5777730ddc",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1900,1904 @@            If ``True``, include the dataframe's index(es) in the file output.\n            If ``False``, they will not be written to the file. If ``None``,\n            the behavior depends on the chosen engine.\n\n            .. versionadded:: 0.24.0"
  },
  {
    "id" : "68c8836b-e31f-44ee-9cd1-50312bcd9a2f",
    "prId" : 22318,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22318#pullrequestreview-152029501",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7350d71b-07b5-4896-9b3d-99ad832ce48d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "remove copy= from concat",
        "createdAt" : "2018-09-04T11:54:24Z",
        "updatedAt" : "2019-07-03T02:21:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc9c79b03dc9897a436a1cff8cbc26e4d10f2f59",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +6807,6811 @@            if can_concat:\n                if how == 'left':\n                    res = concat(frames, axis=1, join='outer',\n                                 verify_integrity=True)\n                    return res.reindex(self.index, copy=False)"
  },
  {
    "id" : "3128ee5e-eab0-4cca-aa5e-a251ec171d8b",
    "prId" : 22375,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22375#pullrequestreview-147065914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8850ca0-3eb0-426a-bedf-98ecaaa97d54",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a versionadded tag here",
        "createdAt" : "2018-08-17T00:18:58Z",
        "updatedAt" : "2018-12-30T22:51:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "870d1a3f7a85cd15e3d2b6e8ed0779deda14ce49",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +7043,7047 @@            * pearson : standard correlation coefficient\n            * kendall : Kendall Tau correlation coefficient\n            * spearman : Spearman rank correlation\n            * callable: callable with input two 1d ndarrays\n                and returning a float"
  },
  {
    "id" : "38cf466b-645b-4168-bd5b-f67ac8c0dadc",
    "prId" : 22375,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22375#pullrequestreview-147065914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9dfd69f-7027-4375-a1de-ed3acf062585",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a See Also and revert to .corr (and add to .corr a See Also referring to .corrwith).\r\n",
        "createdAt" : "2018-08-17T00:19:37Z",
        "updatedAt" : "2018-12-30T22:51:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "870d1a3f7a85cd15e3d2b6e8ed0779deda14ce49",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +7056,7060 @@        -------\n        DataFrame.corr\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        this = self._get_numeric_data()"
  },
  {
    "id" : "8b3cb78f-7870-4b42-9bd0-d84ced94f81b",
    "prId" : 22375,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22375#pullrequestreview-147169656",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c906db36-f5a9-410d-86cb-a2b9ecd40c98",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add Series.corr here as well",
        "createdAt" : "2018-08-17T10:11:25Z",
        "updatedAt" : "2018-12-30T22:51:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "870d1a3f7a85cd15e3d2b6e8ed0779deda14ce49",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +6872,6876 @@        See Also\n        -------\n        DataFrame.corrwith\n        Series.corr\n        \"\"\""
  },
  {
    "id" : "6ee805a7-0f55-4013-8a10-7832280d19a0",
    "prId" : 22375,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22375#pullrequestreview-187977581",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5ad16f4-e3d8-41b4-9162-906de4800f96",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think its reasonable to simply do\r\n```\r\ndef c(x):\r\n    a, b = x\r\n    return nanops.nancorr(x, y, method=method)\r\n```\r\nhere as these are already aligned, and already arrays and don't need the extra checking",
        "createdAt" : "2018-12-27T00:16:58Z",
        "updatedAt" : "2018-12-30T22:51:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "870d1a3f7a85cd15e3d2b6e8ed0779deda14ce49",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +7086,7090 @@\n        elif method in ['kendall', 'spearman'] or callable(method):\n            def c(x):\n                return nanops.nancorr(x[0], x[1], method=method)\n"
  },
  {
    "id" : "579c0556-46b0-40dd-b6d2-eb840aae885c",
    "prId" : 22375,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22375#pullrequestreview-188449791",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4952806-64e0-4396-b10c-b5882573554e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually can you add a comment on what is going on here",
        "createdAt" : "2018-12-30T20:26:08Z",
        "updatedAt" : "2018-12-30T22:51:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "870d1a3f7a85cd15e3d2b6e8ed0779deda14ce49",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +7103,7107 @@            # and append missing correlations (GH 22375)\n            raxis = 1 if axis == 0 else 0\n            result_index = (this._get_axis(raxis).\n                            union(other._get_axis(raxis)))\n            idx_diff = result_index.difference(correl.index)"
  },
  {
    "id" : "37fcecb9-f129-474f-ae96-32c8fa47730b",
    "prId" : 22394,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22394#pullrequestreview-148493977",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9abf3cd6-1cd4-4075-82d7-0071dae882e2",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "instead of this, can you try to replace the last line `return self[-duplicated]` by `return self.iloc[-duplicated]`, for the reasons I mentioned earlier?",
        "createdAt" : "2018-08-22T12:32:27Z",
        "updatedAt" : "2018-08-22T13:38:48Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "6a02f7d8-b673-4c00-8d44-31b847a7864e",
        "parentId" : "9abf3cd6-1cd4-4075-82d7-0071dae882e2",
        "authorId" : "ce8e9236-5f8f-4ee5-b2bd-3bb2ba32690b",
        "body" : "Then wouldn't index be lost in the case of `DataFrame(index=['A', 'B', 'C'])`? As it will be `self.iloc[[]]`?",
        "createdAt" : "2018-08-22T12:44:52Z",
        "updatedAt" : "2018-08-22T13:38:48Z",
        "lastEditedBy" : "ce8e9236-5f8f-4ee5-b2bd-3bb2ba32690b",
        "tags" : [
        ]
      },
      {
        "id" : "57940414-f2fd-47f0-98b1-7092d37bb748",
        "parentId" : "9abf3cd6-1cd4-4075-82d7-0071dae882e2",
        "authorId" : "ce8e9236-5f8f-4ee5-b2bd-3bb2ba32690b",
        "body" : "If we use `self.iloc[~duplicated]`, as you said, we will be able to maintain the columns if we have 4 columns and 0 rows. However, if we have 0 columns and 4 rows, we have the same problem - the outcome is `self.iloc[[]]`, which means that the rows won't be selected, for the same reason with using `self[[]]` for columns, thus ending up with 0 columns and 0 rows, once again.",
        "createdAt" : "2018-08-22T13:02:53Z",
        "updatedAt" : "2018-08-22T13:38:48Z",
        "lastEditedBy" : "ce8e9236-5f8f-4ee5-b2bd-3bb2ba32690b",
        "tags" : [
        ]
      },
      {
        "id" : "d9eed8be-e426-4980-b72e-5a77dda6f75a",
        "parentId" : "9abf3cd6-1cd4-4075-82d7-0071dae882e2",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I'm not sure whether it'd make sense for a dataframe with rows but no columns to drop the empty rows as duplicate.\r\n\r\nBut as @jreback if happy with this implementation, just leave it like this. I didn't see his comment earlier.",
        "createdAt" : "2018-08-22T13:05:49Z",
        "updatedAt" : "2018-08-22T13:38:48Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "a29454f9-5c3f-4667-98e4-d95eec1970f8",
        "parentId" : "9abf3cd6-1cd4-4075-82d7-0071dae882e2",
        "authorId" : "ce8e9236-5f8f-4ee5-b2bd-3bb2ba32690b",
        "body" : "I tried a test, and here's the result:\r\n```\r\nimport pandas as pd\r\n\r\na = pd.DataFrame(index=['A', 'B'])\r\nb = a.iloc[[]]\r\na.shape # (2, 0)\r\nb.shape # (0, 0)\r\n```",
        "createdAt" : "2018-08-22T13:07:27Z",
        "updatedAt" : "2018-08-22T13:38:48Z",
        "lastEditedBy" : "ce8e9236-5f8f-4ee5-b2bd-3bb2ba32690b",
        "tags" : [
        ]
      },
      {
        "id" : "513d537d-e5ca-46e2-b656-06ef828c7c8e",
        "parentId" : "9abf3cd6-1cd4-4075-82d7-0071dae882e2",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Yes, that makes sense to me. If we consider that empty rows are equal among them, then `pd.DataFrame(index=['A', 'B']).duplicated()` would return `False, True`, and `.iloc[-duplicated]` would return the first row.\r\n\r\nBut as I said, I'm happy to keep the original DataFrame as is for this case, as @jreback is happy with it.",
        "createdAt" : "2018-08-22T13:25:56Z",
        "updatedAt" : "2018-08-22T13:38:48Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "0f55877b-c0ec-4593-a10f-cf251e02699b",
        "parentId" : "9abf3cd6-1cd4-4075-82d7-0071dae882e2",
        "authorId" : "ce8e9236-5f8f-4ee5-b2bd-3bb2ba32690b",
        "body" : "Oh, if you see the empty rows as equals, then it does make sense. I haven't thought of it that way. Thanks.",
        "createdAt" : "2018-08-22T13:58:13Z",
        "updatedAt" : "2018-08-22T13:58:13Z",
        "lastEditedBy" : "ce8e9236-5f8f-4ee5-b2bd-3bb2ba32690b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc61899019cdf98e5a5b354fec52f29cef3fa41a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4337,4341 @@        \"\"\"\n        if self.empty:\n            return self.copy()\n\n        inplace = validate_bool_kwarg(inplace, 'inplace')"
  },
  {
    "id" : "b8467acb-3bb5-4325-b1b6-8fb39dad7120",
    "prId" : 22404,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22404#pullrequestreview-151626987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee0306be-ae3e-4d6f-8a15-aeae171faf6d",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can we add an example to show this?",
        "createdAt" : "2018-08-22T18:04:06Z",
        "updatedAt" : "2018-09-23T13:46:18Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "4ea39197-87b6-4bd7-bc5b-b3df43096eb0",
        "parentId" : "ee0306be-ae3e-4d6f-8a15-aeae171faf6d",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "The first example shows this (wings has two modes)",
        "createdAt" : "2018-09-02T16:53:27Z",
        "updatedAt" : "2018-09-23T13:46:18Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "83858ff576ae887c897252e116f11af23b7fc025",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +7252,7256 @@\n        The mode of a set of values is the value that appears most often.\n        It can be multiple values.\n\n        Parameters"
  },
  {
    "id" : "731a3196-b36f-4fa5-a8c3-d4a02fed75d1",
    "prId" : 22572,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22572#pullrequestreview-152119917",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a32edfdb-aaf0-4d78-97a6-5d84165dfcfa",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Why do we need these assert statements?  Are they tested anywhere?",
        "createdAt" : "2018-09-01T22:16:37Z",
        "updatedAt" : "2018-09-01T22:16:37Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "1578f9dd-0508-4da4-b5ef-7f4bf56f0a99",
        "parentId" : "a32edfdb-aaf0-4d78-97a6-5d84165dfcfa",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "These assertions are always true.  I added these so I don't have to keep looking back at core.ops (the only place from which these are called) to double-check what's going on.",
        "createdAt" : "2018-09-01T23:14:38Z",
        "updatedAt" : "2018-09-01T23:14:38Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "77e13ed9-b7a2-466b-9c22-bef8316be0b5",
        "parentId" : "a32edfdb-aaf0-4d78-97a6-5d84165dfcfa",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "So this is just a sanity check really?  Perhaps we should comment that then?",
        "createdAt" : "2018-09-01T23:17:25Z",
        "updatedAt" : "2018-09-01T23:17:25Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "2e2646a8-4c65-48b1-86e4-43f6bfb2620a",
        "parentId" : "a32edfdb-aaf0-4d78-97a6-5d84165dfcfa",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think the assertion is self-explanatory, but if adding a comment makes reviewers happy, there’s no real downside.",
        "createdAt" : "2018-09-04T15:20:16Z",
        "updatedAt" : "2018-09-04T15:20:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "26239046890cec697d1917f63d5f826d7117c1bf",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +4814,4818 @@        left, right = self.align(other, join='outer', axis=0, level=level,\n                                 copy=False)\n        assert left.index.equals(right.index)\n        new_data = func(left.values.T, right.values).T\n        return self._constructor(new_data,"
  },
  {
    "id" : "6362a9cd-83ff-4978-98fc-a1aaf0b1adbf",
    "prId" : 22641,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22641#pullrequestreview-156063187",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf8b154f-f890-4428-a47f-105d60aa0b07",
        "parentId" : null,
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "``axis`` doesn't line up with the previous line in master, so generated doc string doesn't show axis etc, see [here in master](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.transform.html).\r\n\r\nThe above change lines it properly up, so it shows up as expected.\r\n",
        "createdAt" : "2018-09-17T18:38:17Z",
        "updatedAt" : "2018-09-17T18:40:13Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbe270c5b29da5f7ba392d213795b4320466a54f",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +113,117 @@        If 0 or 'index': apply function to each column.\n        If 1 or 'columns': apply function to each row.\"\"\",\n    optional_by=\"\"\"\n        by : str or list of str\n            Name or list of names to sort by."
  },
  {
    "id" : "29770c0d-1580-43f7-92fc-ab1f9c11a148",
    "prId" : 22658,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22658#pullrequestreview-158564064",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1afcdaea-5ba7-483a-8d4b-60bc8979c7ac",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@datapythonista I think in this case, the above is actually a bit confusing. Typically, we use the formatting above if there are actually two return values (so if you could do `label, content = df.iteritems()`), which is not the case here. \r\nSo I think the original single item was better, but we could try to make it clearer that it the values of the iterator consist of those two items.",
        "createdAt" : "2018-09-25T13:34:40Z",
        "updatedAt" : "2018-09-25T14:12:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a085011d-2fac-40d4-8e3e-5d759b47ff87",
        "parentId" : "1afcdaea-5ba7-483a-8d4b-60bc8979c7ac",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Looks clear to me, not sure why it doesn't to you. In this case you can do `for label, content in df.iteritems():` which is equivalent to what you said.\r\n\r\nNot a big deal changing this to a `Returns` saying it's a generator returning tuples. But I don't think that would be clearer to me, and feels a bit inconsistent.\r\n\r\nWhat do you think is clearer for you @Ecboxer? Also, may be @WillAyd want to give an opinion, and he's doing a lot with the docstrings? Happy with whatever option is clearer to most people.",
        "createdAt" : "2018-09-25T13:51:14Z",
        "updatedAt" : "2018-09-25T14:12:53Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "20cc49f6-990f-436a-bd02-dc81e8cfca2b",
        "parentId" : "1afcdaea-5ba7-483a-8d4b-60bc8979c7ac",
        "authorId" : "7a0df254-b786-477d-8009-a7e1a9622997",
        "body" : "Let me know what you think of the rephrased it under Yields. It may be too wordy?",
        "createdAt" : "2018-09-25T13:54:26Z",
        "updatedAt" : "2018-09-25T14:12:53Z",
        "lastEditedBy" : "7a0df254-b786-477d-8009-a7e1a9622997",
        "tags" : [
        ]
      },
      {
        "id" : "c02ab11f-c1f1-4a3f-9a3f-ae99b8efd4cd",
        "parentId" : "1afcdaea-5ba7-483a-8d4b-60bc8979c7ac",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`for label, content in df.iteritems()` is *not* the same as `label, content = df.iteritems()` ..\r\n\r\nThe thing is that otherwise we are using the same visual formatting to mean two different things. I would prefer that a user can know from the return type if there is a single or multiple return values (but maybe I am overestimating our users?)\r\n\r\nWe can maybe still combine both, something like:\r\n```\r\nIterator over (label, content) pairs\r\n    label : object\r\n        The column names for the DataFrame being iterated over.\r\n    content : Series\r\n        The column entries belonging to each label, as a Series.\r\n```\r\n\r\nor does that only make it more complicated?",
        "createdAt" : "2018-09-25T13:59:03Z",
        "updatedAt" : "2018-09-25T14:12:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c0dd9778-3141-4785-8d56-30b25e8e3b69",
        "parentId" : "1afcdaea-5ba7-483a-8d4b-60bc8979c7ac",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah sorry, I missed that it was a \"Yields\" section, and not a \"Returns\" section. In that case, it is correct that it yields two values in each iteration! (and how you did it here is consistent with the numpydoc guidelines)",
        "createdAt" : "2018-09-25T14:01:41Z",
        "updatedAt" : "2018-09-25T14:12:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c1b744ac-acae-462c-bb54-8254979d1ec0",
        "parentId" : "1afcdaea-5ba7-483a-8d4b-60bc8979c7ac",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@Ecboxer sorry, you can change it back to how it was before I commented :-)",
        "createdAt" : "2018-09-25T14:03:23Z",
        "updatedAt" : "2018-09-25T14:12:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "46324e6a-b7b3-4b6d-887a-20c6ff52a4d0",
        "parentId" : "1afcdaea-5ba7-483a-8d4b-60bc8979c7ac",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "hehe, I see what you meant now. Cool then. :)",
        "createdAt" : "2018-09-25T14:06:32Z",
        "updatedAt" : "2018-09-25T14:12:53Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "54423cab-6d81-472c-91e4-678454e9b55f",
        "parentId" : "1afcdaea-5ba7-483a-8d4b-60bc8979c7ac",
        "authorId" : "7a0df254-b786-477d-8009-a7e1a9622997",
        "body" : "Changed it back :)",
        "createdAt" : "2018-09-25T14:13:40Z",
        "updatedAt" : "2018-09-25T14:13:40Z",
        "lastEditedBy" : "7a0df254-b786-477d-8009-a7e1a9622997",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8e5370e5660d15acfeaa153aed2a25c0fa31694",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +790,794 @@            The column names for the DataFrame being iterated over.\n        content : Series\n            The column entries belonging to each label, as a Series.\n\n        See Also"
  },
  {
    "id" : "80fc8fe3-c4b5-46d6-9f97-cd7159d8dbfb",
    "prId" : 22684,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22684#pullrequestreview-157218786",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af40cc52-4273-4e4e-832e-00c32cbdd4fe",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add an example in Examples",
        "createdAt" : "2018-09-18T14:29:18Z",
        "updatedAt" : "2018-09-26T02:23:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "71a65d68-296c-43fe-bed2-129846cba2c9",
        "parentId" : "af40cc52-4273-4e4e-832e-00c32cbdd4fe",
        "authorId" : "2168b726-a3a4-4844-9740-7c45b2d39bea",
        "body" : "done",
        "createdAt" : "2018-09-20T11:12:09Z",
        "updatedAt" : "2018-09-26T02:23:27Z",
        "lastEditedBy" : "2168b726-a3a4-4844-9740-7c45b2d39bea",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbfd95fb18bb6b0322c7130a59f5272ad2eef43a",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +6677,6681 @@            * kendall : Kendall Tau correlation coefficient\n            * spearman : Spearman rank correlation\n            * callable: callable with input two 1d ndarrays\n                and returning a float\n                .. versionadded:: 0.24.0"
  },
  {
    "id" : "8bce3752-bec6-4855-9d6e-4b05e53c469e",
    "prId" : 22767,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22767#pullrequestreview-157938264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fffea8be-c96d-41e8-b852-e412cf233692",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Can you replace `dictionary` by `dict` in the `values` parameter type please?",
        "createdAt" : "2018-09-23T12:39:11Z",
        "updatedAt" : "2018-09-25T01:48:07Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "938a21f35fb6d6726d7cb20aabc812fec0f67b4a",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +7462,7466 @@            which must match. If `values` is a DataFrame,\n            then both the index and column labels must match.\n\n        Returns\n        -------"
  },
  {
    "id" : "edc1a7b7-4efe-47ad-965c-93995bf779cf",
    "prId" : 22767,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22767#pullrequestreview-158134780",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d59c951-893b-4569-b125-c0e189150826",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you in addition also mention `Series.str.isin` ?",
        "createdAt" : "2018-09-24T09:51:09Z",
        "updatedAt" : "2018-09-25T01:48:07Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2e92493a-a9b7-47a0-a810-98d705b5ffb1",
        "parentId" : "3d59c951-893b-4569-b125-c0e189150826",
        "authorId" : "094def1e-c087-4e59-a219-4af39bf6adf5",
        "body" : "When trying to look at `Series.str.isin`, I get this (latest HEAD on master):\r\n```\r\n>>> import pandas as pd\r\n>>> help(pd.Series.str.isin)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nAttributeError: type object 'StringMethods' has no attribute 'isin'\r\n```\r\nAm I missing something?",
        "createdAt" : "2018-09-24T14:10:14Z",
        "updatedAt" : "2018-09-25T01:48:07Z",
        "lastEditedBy" : "094def1e-c087-4e59-a219-4af39bf6adf5",
        "tags" : [
        ]
      },
      {
        "id" : "8b3cdd03-5db6-4a7a-b153-93f39de40974",
        "parentId" : "3d59c951-893b-4569-b125-c0e189150826",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Sorry, my bad, I think I was getting confused with another method...\r\n\r\nI think `Series.str.contains` would be a good addition to the `See Also`, as it's kind of the inverse.",
        "createdAt" : "2018-09-24T14:37:00Z",
        "updatedAt" : "2018-09-25T01:48:07Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "938a21f35fb6d6726d7cb20aabc812fec0f67b4a",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +7472,7476 @@        --------\n        DataFrame.eq: Equality test for DataFrame.\n        Series.isin: Equivalent method on Series.\n        Series.str.contains: Test if pattern or regex is contained within a\n            string of a Series or Index."
  },
  {
    "id" : "5df7a040-3b2b-4dfe-becf-b2b3d169fa6b",
    "prId" : 22775,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22775#pullrequestreview-171319206",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb01800b-94d6-483d-a400-a7260afce2d1",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Can you show the content of `df` after creating it. So it's easier to compare it with the DataFrame after setting the index.",
        "createdAt" : "2018-11-03T07:20:29Z",
        "updatedAt" : "2018-11-26T15:56:43Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "7df1f792da8c724ef62ad51f8e8164ed92176029",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +3966,3970 @@        >>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n        ...                    'year': [2012, 2014, 2013, 2014],\n        ...                    'sale': [55, 40, 84, 31]})\n        >>> df\n           month  year  sale"
  },
  {
    "id" : "ae341d43-3648-483e-914c-f0938a83419b",
    "prId" : 22902,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22902#pullrequestreview-160120242",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32d37fc6-e785-46fc-ad72-a5dacbb05c2b",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Not sure if it was so important. But if you removed the comment about the index just to make it fit in one line, you can have a description as long as you want after this single-line (just separate them with a blank line.",
        "createdAt" : "2018-09-30T09:21:46Z",
        "updatedAt" : "2018-09-30T17:11:47Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "8b257624-9910-4c90-bf00-2b9fa4a191ad",
        "parentId" : "32d37fc6-e785-46fc-ad72-a5dacbb05c2b",
        "authorId" : "6a250c19-98cb-4472-84ad-c85284799cf7",
        "body" : "I noticed that in the Parameters section it mentioned that the return of the index was the first element of the tuple when `index=True` so I removed it in the description. If there is extra description that is needed I can definitely add it! ",
        "createdAt" : "2018-09-30T16:28:35Z",
        "updatedAt" : "2018-09-30T17:11:47Z",
        "lastEditedBy" : "6a250c19-98cb-4472-84ad-c85284799cf7",
        "tags" : [
        ]
      }
    ],
    "commit" : "064cf33ea85d4e4ba467e898f4d2b3b06131b101",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +884,888 @@    def itertuples(self, index=True, name=\"Pandas\"):\n        \"\"\"\n        Iterate over DataFrame rows as namedtuples.\n\n        Parameters"
  },
  {
    "id" : "757cd40f-62f8-4b25-a9f8-97ca76f70555",
    "prId" : 22902,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22902#pullrequestreview-160120246",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a3d6999-6e68-4113-b8a0-a6c72ff5288b",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Can you change the types of the parameters, from `boolean` to `bool`, and from `string` to `str` please?",
        "createdAt" : "2018-09-30T09:31:55Z",
        "updatedAt" : "2018-09-30T17:11:47Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "a5fb4487-6bf2-4eb9-ad82-47d8b1f1fbd3",
        "parentId" : "4a3d6999-6e68-4113-b8a0-a6c72ff5288b",
        "authorId" : "6a250c19-98cb-4472-84ad-c85284799cf7",
        "body" : "Done!",
        "createdAt" : "2018-09-30T16:28:47Z",
        "updatedAt" : "2018-09-30T17:11:47Z",
        "lastEditedBy" : "6a250c19-98cb-4472-84ad-c85284799cf7",
        "tags" : [
        ]
      }
    ],
    "commit" : "064cf33ea85d4e4ba467e898f4d2b3b06131b101",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +891,895 @@            If True, return the index as the first element of the tuple.\n        name : str, default \"Pandas\"\n            The name of the returned namedtuples or None to return regular\n            tuples.\n"
  },
  {
    "id" : "f728cf20-7a06-437a-8483-98f55b659e18",
    "prId" : 22902,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22902#pullrequestreview-160121590",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3dc7f66-21d1-4d85-8b7f-35f349958745",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "In the `See Also`, can you make the `A` in the title capital? And then, the items, if you can prefix `iterrows` and `iteritems` with `DataFrame.iterrows`...",
        "createdAt" : "2018-09-30T16:56:06Z",
        "updatedAt" : "2018-09-30T17:11:47Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "aa90eb1a-fc01-4bde-9f2f-b49bb3c0ae4e",
        "parentId" : "a3dc7f66-21d1-4d85-8b7f-35f349958745",
        "authorId" : "6a250c19-98cb-4472-84ad-c85284799cf7",
        "body" : "Ok, just prefixed both `iterrows` and `iteritems`.",
        "createdAt" : "2018-09-30T17:12:37Z",
        "updatedAt" : "2018-09-30T17:12:37Z",
        "lastEditedBy" : "6a250c19-98cb-4472-84ad-c85284799cf7",
        "tags" : [
        ]
      }
    ],
    "commit" : "064cf33ea85d4e4ba467e898f4d2b3b06131b101",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +912,916 @@            pairs.\n        DataFrame.iteritems : Iterate over (column name, Series) pairs.\n\n        Examples\n        --------"
  },
  {
    "id" : "4d2daed8-6d8b-446b-8d8d-a7c2101fcde3",
    "prId" : 22913,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22913#pullrequestreview-160978670",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60982000-926c-49cd-b5cd-bda04bd7e542",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Combine with previous",
        "createdAt" : "2018-09-30T19:56:09Z",
        "updatedAt" : "2018-10-08T18:51:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "31e5571b-4173-4f89-b82d-e956a960e340",
        "parentId" : "60982000-926c-49cd-b5cd-bda04bd7e542",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "Thanks done!",
        "createdAt" : "2018-10-02T23:27:20Z",
        "updatedAt" : "2018-10-08T18:51:18Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      },
      {
        "id" : "e0ec0fee-3403-4a1e-a2bd-a2ead5762f2c",
        "parentId" : "60982000-926c-49cd-b5cd-bda04bd7e542",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is great, thanks, I know its nitpicky.  For future reference in case you want to _really_ match my habits, I usually put a newline after the compat imports, then collect core.dtypes imports in a section above the rest of core (lots of stuff depends on core.dtypes, but it depends on very little except for compat and _libs)",
        "createdAt" : "2018-10-02T23:57:58Z",
        "updatedAt" : "2018-10-08T18:51:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a9161a60-183e-46fb-acca-7bbf1e36904b",
        "parentId" : "60982000-926c-49cd-b5cd-bda04bd7e542",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "Thanks much appreciated, I will update! I might add some kind of description to the contributing guide on the import layout you have described here, unless its already documented somewhere?",
        "createdAt" : "2018-10-03T01:14:05Z",
        "updatedAt" : "2018-10-08T18:51:18Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "04478f96143731450aef0844480a06ec0edba81c",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +32,36 @@\nfrom pandas import compat\nfrom pandas.compat import (range, map, zip, lrange, lmap, lzip, StringIO, u,\n                           OrderedDict, PY36, raise_with_traceback,\n                           string_and_binary_types)"
  },
  {
    "id" : "a51a77ce-8e2d-43dc-a984-a3de58e3707f",
    "prId" : 22913,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22913#pullrequestreview-160128673",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0539f75a-d30e-4bcb-88bd-fa628e6ddecd",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Internal convention is to group by dependency structure.  This usually means libs first, then util, compat, then core, then ...",
        "createdAt" : "2018-09-30T19:57:59Z",
        "updatedAt" : "2018-10-08T18:51:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e536c854-96c5-4940-a7ff-246a11659401",
        "parentId" : "0539f75a-d30e-4bcb-88bd-fa628e6ddecd",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Actually the pytables module is a pretty good example",
        "createdAt" : "2018-09-30T20:01:20Z",
        "updatedAt" : "2018-10-08T18:51:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b36c6005-b229-4456-a61f-405b1cf63dba",
        "parentId" : "0539f75a-d30e-4bcb-88bd-fa628e6ddecd",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "Cool thanks for the example @jbrockmendel will fix this up!",
        "createdAt" : "2018-09-30T21:08:13Z",
        "updatedAt" : "2018-10-08T18:51:18Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "04478f96143731450aef0844480a06ec0edba81c",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +23,27 @@import numpy.ma as ma\n\nfrom pandas._libs import lib, algos as libalgos\n\nfrom pandas.util._decorators import (Appender, Substitution,"
  },
  {
    "id" : "e381e80d-6289-4625-a917-33f6bba2d217",
    "prId" : 22913,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22913#pullrequestreview-163060196",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4563ddd1-b2fc-4248-b31c-bb8a9df9d6d7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i would rather not disable specific items for a whole file. Is there a reason for this?",
        "createdAt" : "2018-10-09T11:41:08Z",
        "updatedAt" : "2018-10-09T11:42:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "eec39b92-5795-4195-a752-80f3a75e787d",
        "parentId" : "4563ddd1-b2fc-4248-b31c-bb8a9df9d6d7",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "@jreback 100% agree, but these lines are already there in the original files, they've just been moved.\r\n\r\n@alimcmaster1 removed some of the errors that were being ignored, but the ones left are not trivial.\r\n\r\nDidn't check in detail, but `E1101` is probably to avoid false positives in attributes that are created dynamically and not found in the linting. It's disabled like this in around 80 files, so it may be worth to move it to `setup.cfg` and ignore it everywhere.\r\n\r\nDidn't check the others, but I'd merge this PR as it is, and take care of all the `pylint: disable` in a separate PR.",
        "createdAt" : "2018-10-09T15:16:39Z",
        "updatedAt" : "2018-10-09T15:17:42Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "91ea9426-b509-497c-96ec-22da6480b25e",
        "parentId" : "4563ddd1-b2fc-4248-b31c-bb8a9df9d6d7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok that's fine.",
        "createdAt" : "2018-10-09T15:42:33Z",
        "updatedAt" : "2018-10-09T15:42:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3a3892d0-1726-451d-98ab-efe4d34e45a7",
        "parentId" : "4563ddd1-b2fc-4248-b31c-bb8a9df9d6d7",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "Thanks both, had a brief discussion above with @jbrockmendel about these.\r\n\r\n\"E1101: frame.py:2577:40: E1101: Module 'pandas.core.common' has no '_unpickle_array' member (no-member)\" this is as @datapythonista described above. \r\n\r\n\"W0622: frame.py:36:0: W0622: Redefining built-in 'zip' (redefined-builtin)\"\r\nWe should be able to get rid of W0622, I can do a follow up PR with this. \r\n\r\nI will follow and remove E741 from our lint CI setup and fix this error for the few remaining test scripts.\r\n",
        "createdAt" : "2018-10-09T18:31:38Z",
        "updatedAt" : "2018-10-09T18:31:38Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      },
      {
        "id" : "4b420b94-d358-407b-9f66-605ad8ce54e6",
        "parentId" : "4563ddd1-b2fc-4248-b31c-bb8a9df9d6d7",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I'm merging #22863 as soon as the CI is green, so you may want to wait to remove E741, as it'll conflict. ",
        "createdAt" : "2018-10-09T18:46:35Z",
        "updatedAt" : "2018-10-09T18:46:35Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "789b16ad-6fd6-4001-9ba2-bf82cd4aed6f",
        "parentId" : "4563ddd1-b2fc-4248-b31c-bb8a9df9d6d7",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Merged. E741 should be removed from `setup.cfg` and `.pep8speaks.yml`. But not sure if the remaining tests are few. ;)\r\n\r\n```\r\n./pandas/tests/test_algos.py:375:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/test_multilevel.py:2065:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/frame/test_operators.py:796:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/frame/test_indexing.py:2079:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/frame/test_constructors.py:899:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/frame/test_constructors.py:926:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/frame/test_constructors.py:1747:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/frame/test_constructors.py:1752:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/plotting/common.py:260:24: E741 ambiguous variable name 'l'\r\n./pandas/tests/plotting/test_frame.py:302:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/plotting/test_frame.py:310:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/plotting/test_datetimelike.py:545:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/plotting/test_datetimelike.py:560:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/plotting/test_datetimelike.py:575:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/plotting/test_datetimelike.py:595:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/plotting/test_datetimelike.py:611:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/plotting/test_datetimelike.py:642:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/plotting/test_datetimelike.py:953:17: E741 ambiguous variable name 'l'\r\n./pandas/tests/plotting/test_datetimelike.py:966:17: E741 ambiguous variable name 'l'\r\n./pandas/tests/plotting/test_datetimelike.py:984:17: E741 ambiguous variable name 'l'\r\n./pandas/tests/plotting/test_datetimelike.py:998:17: E741 ambiguous variable name 'l'\r\n./pandas/tests/indexing/test_loc.py:671:13: E741 ambiguous variable name 'l'\r\n./pandas/tests/indexing/test_indexing.py:772:19: E741 ambiguous variable name 'l'\r\n./pandas/tests/io/test_packers.py:515:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/io/test_packers.py:521:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/io/test_packers.py:529:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/io/test_pytables.py:2185:13: E741 ambiguous variable name 'l'\r\n./pandas/tests/series/test_analytics.py:542:13: E741 ambiguous variable name 'l'\r\n./pandas/tests/series/test_analytics.py:977:13: E741 ambiguous variable name 'l'\r\n./pandas/tests/series/test_dtypes.py:246:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/series/test_dtypes.py:252:9: E741 ambiguous variable name 'l'\r\n./pandas/tests/series/test_dtypes.py:273:9: E741 ambiguous variable name 'l'\r\n\r\n```",
        "createdAt" : "2018-10-09T19:34:29Z",
        "updatedAt" : "2018-10-09T19:34:29Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "04478f96143731450aef0844480a06ec0edba81c",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +0,4 @@# pylint: disable=E1101\n# pylint: disable=W0212,W0703,W0622\n\"\"\"\nDataFrame"
  },
  {
    "id" : "0824db12-3e2c-427b-8417-6c53bb193e02",
    "prId" : 23317,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23317#pullrequestreview-168635223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46d391a8-3fbd-40ba-a816-aee100aea0e2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not super duper happy that we have to have coercions like this. @jbrockmendel I view combine like update, in that its a bit orphaned. We do most numerics right now by dispatching thru ops.py but a lot of things are in internals, and others are in generic. So we need a coherent strategy for this. but ok for now.",
        "createdAt" : "2018-10-26T00:21:08Z",
        "updatedAt" : "2018-10-26T00:21:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b65991325db999dd5f23fc03cbaf257303db5b20",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +5202,5206 @@            if isinstance(arr, (ABCIndexClass, ABCSeries)):\n                arr = arr._values\n\n            if needs_i8_conversion(arr):\n                # TODO(DatetimelikeArray): just use .asi8"
  },
  {
    "id" : "fa87f319-25df-4bf4-bcc0-b8e88bae73b1",
    "prId" : 23321,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23321#pullrequestreview-169280365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0936757e-afe9-412c-8c30-4aaf76bca7bb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "need a blank line before the versionadded. we should prob just bump our min of pyarrow to 0.8.0 anyhow, can you create a new issue for this.",
        "createdAt" : "2018-10-29T12:45:24Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b455473733352e10c321d4f08b9fadc286b4c84",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +2008,2012 @@            Columns are partitioned in the order they are given\n\n            .. versionadded:: 0.24.0\n\n        **kwargs"
  },
  {
    "id" : "c4c53a3e-48c1-4921-b731-a00ecb804521",
    "prId" : 23321,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23321#pullrequestreview-171869166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01688848-be27-44aa-bcb6-a77c627d1087",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a versionchanged tag",
        "createdAt" : "2018-11-06T03:59:29Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c57675fe-8cb2-43fc-9fd9-18c656a8ba70",
        "parentId" : "01688848-be27-44aa-bcb6-a77c627d1087",
        "authorId" : "321231c6-6642-4125-90a1-bdf4e9e4a005",
        "body" : "done",
        "createdAt" : "2018-11-06T05:36:06Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "321231c6-6642-4125-90a1-bdf4e9e4a005",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b455473733352e10c321d4f08b9fadc286b4c84",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1986,1990 @@        fname : str\n            File path or Root Directory path. Will be used as Root Directory\n            path while writing a partitioned dataset.\n\n            .. versionchanged:: 0.24.0"
  },
  {
    "id" : "478f7986-4177-4c71-b06a-b7a2d994c014",
    "prId" : 23321,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23321#pullrequestreview-172947695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d429098-1f43-452c-a226-fdeac741569b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "side issue. we use ``path`` elsewhere for IO routines. We should change this as well (out of scope here). would have to deprecate (the name) unfortunately.",
        "createdAt" : "2018-11-08T13:12:29Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "df138a6c-57a1-4f9a-bb03-ef88c61853e8",
        "parentId" : "6d429098-1f43-452c-a226-fdeac741569b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we actually use path on the top-level ``.to_parquet``, not sure how this is named this way.",
        "createdAt" : "2018-11-08T13:13:19Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b455473733352e10c321d4f08b9fadc286b4c84",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1984,1988 @@        Parameters\n        ----------\n        fname : str\n            File path or Root Directory path. Will be used as Root Directory\n            path while writing a partitioned dataset."
  },
  {
    "id" : "a6c456fa-adce-433e-871d-07977c0658ea",
    "prId" : 23321,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23321#pullrequestreview-173651288",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5afa24cd-e1e2-4e69-8da3-0f26b6c9804a",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Does this render? Might need a blank space after the directive?",
        "createdAt" : "2018-11-08T15:44:44Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "4c58bee2-de41-4f8c-b589-ac9f10c54ae3",
        "parentId" : "5afa24cd-e1e2-4e69-8da3-0f26b6c9804a",
        "authorId" : "321231c6-6642-4125-90a1-bdf4e9e4a005",
        "body" : "Looks like it does not.\r\n\r\nDocumentation shows API Reference for DataFrame.to_parquet, read_parquet() from parquet.py and io.rst, which explains about reading and writing to parquet.",
        "createdAt" : "2018-11-09T04:39:54Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "321231c6-6642-4125-90a1-bdf4e9e4a005",
        "tags" : [
        ]
      },
      {
        "id" : "1b781f57-10f2-43f8-918c-714d509650b2",
        "parentId" : "5afa24cd-e1e2-4e69-8da3-0f26b6c9804a",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Wasn't referring to the public API as much as the docstring in isolation. If you can ensure there is a blank line after this and any of the other `versionadded` directives should be the last thing",
        "createdAt" : "2018-11-09T05:07:35Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "0fae88fc-59b9-49d7-ab2d-cf1140b8ae09",
        "parentId" : "5afa24cd-e1e2-4e69-8da3-0f26b6c9804a",
        "authorId" : "321231c6-6642-4125-90a1-bdf4e9e4a005",
        "body" : "have added an empty line after all versionchanged and versionadded. Hope you can have a look",
        "createdAt" : "2018-11-10T05:33:40Z",
        "updatedAt" : "2018-11-10T05:33:41Z",
        "lastEditedBy" : "321231c6-6642-4125-90a1-bdf4e9e4a005",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b455473733352e10c321d4f08b9fadc286b4c84",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1988,1992 @@            path while writing a partitioned dataset.\n\n            .. versionchanged:: 0.24.0\n\n        engine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'"
  },
  {
    "id" : "5c94817d-c485-4aff-abd8-0b29f892aade",
    "prId" : 23321,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23321#pullrequestreview-173023378",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f4d7528-9c21-4667-a63a-78fbf817b145",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Same question as above",
        "createdAt" : "2018-11-08T15:45:18Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b455473733352e10c321d4f08b9fadc286b4c84",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +2002,2006 @@            the behavior depends on the chosen engine.\n\n            .. versionadded:: 0.24.0\n\n        partition_cols : list, optional, default None"
  },
  {
    "id" : "7e3560a6-0fb1-4945-81e0-5d86b8b9aa94",
    "prId" : 23471,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23471#pullrequestreview-171353092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3693e821-a886-4f49-8396-6955fd3a9186",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "What's the difference between `\"default None\"` vs. `\"optional\"` ?\r\n\r\nOne might argue that any argument with a default argument is optional, but what that default argument is would be nice to know.",
        "createdAt" : "2018-11-04T07:40:39Z",
        "updatedAt" : "2018-11-07T08:15:11Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "94d994ac-ed19-4c0a-9eca-db058a013e07",
        "parentId" : "3693e821-a886-4f49-8396-6955fd3a9186",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I don't remember where this comes from, but the idea is that if the `None` is the value being used, then we use `default None`, and if `None` is just a sentinel to say, this does not apply here, then we use `optional`.",
        "createdAt" : "2018-11-04T07:45:27Z",
        "updatedAt" : "2018-11-07T08:15:11Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "829afb4b-b85f-4b55-9eea-9304a29e61e9",
        "parentId" : "3693e821-a886-4f49-8396-6955fd3a9186",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Hmm...I see.  At the risk of bucking existing trends, I wonder if that level of semantic is clear to end users, or whether we should be explicitly telling people that default arguments are sentinel values when appropriate (e.g. it isn't 100% obvious that `None` is sentinel given that we immediately call another internal method)?",
        "createdAt" : "2018-11-04T07:49:08Z",
        "updatedAt" : "2018-11-07T08:15:11Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "b3b9334c-7388-4bb7-aebc-e5655ca29985",
        "parentId" : "3693e821-a886-4f49-8396-6955fd3a9186",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I find it intuitive enough, and we usually try to add in the description more information, including what to expect when using the default value. But if you think it's worth discussing in more detail, I think the best would be to open an issue. I'm open to change the convention.\r\n\r\nBtw, just to give some context. I'm trying to close all the old PRs related to the documentation (this was I reopened, but the content is from a stale PR). And what I mean, is that I'm happy merging the changes as far as the changes are an improvement, and everything is correct. For other improvements I'd prefer to wait for a new PR (otherwise, merging the pending 50 PRs will be my full time job, and I prefer new contributors to do the work on the content, so I can focus on reviewing).",
        "createdAt" : "2018-11-04T07:56:32Z",
        "updatedAt" : "2018-11-07T08:15:11Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "cc479cd1-7e8c-461b-8d48-616572332518",
        "parentId" : "3693e821-a886-4f49-8396-6955fd3a9186",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> I prefer new contributors to do the work on the content, so I can focus on reviewing).\r\n\r\nYou and me both 😉 \r\n\r\nWasn't intending to drag this out, but wanted to bring this up in case others had already given thought to this, as I am not as involved in the doc's as you are for example.\r\n\r\nIf you find it okay for the time being, let's leave it then unless it becomes a bigger issue.  After all, I'm only hypothesizing about what the perception of this potential confusion might be.",
        "createdAt" : "2018-11-04T09:09:01Z",
        "updatedAt" : "2018-11-07T08:15:11Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "ec4a9bc3-83da-4421-b749-cd915c64c455",
        "parentId" : "3693e821-a886-4f49-8396-6955fd3a9186",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "hehe, sure, the review was great, and I didn't realize about the notes, but that had to be changed. I was just letting you know, as you'll surely be reviewing other PRs I'm fixing myself, so they don't stay in the pile of pending PRs forever.",
        "createdAt" : "2018-11-04T09:11:36Z",
        "updatedAt" : "2018-11-07T08:15:11Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebe59352125f3385fbd11dee9dc87bfa976093d2",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +6507,6511 @@            Series is passed, its name attribute must be set, and that will be\n            used as the column name in the resulting joined DataFrame.\n        on : str, list of str, or array-like, optional\n            Column or index level name(s) in the caller to join on the index\n            in `other`, otherwise joins index-on-index. If multiple"
  },
  {
    "id" : "40367257-7a77-4e67-a2af-d44c9c8a05a9",
    "prId" : 23657,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23657#pullrequestreview-174136509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5615ca0-96c7-44b9-85bf-abac3aafc014",
        "parentId" : null,
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Added due to running docstring validation",
        "createdAt" : "2018-11-12T23:27:04Z",
        "updatedAt" : "2018-11-15T00:03:32Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ff6261d07b82f54e3ce031a0fc908304d5c0c81",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +5255,5259 @@        -------\n        None : method directly changes calling object\n\n        Raises\n        ------"
  },
  {
    "id" : "351730a6-6264-4ce0-894d-cb39e2745de7",
    "prId" : 23657,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23657#pullrequestreview-174861080",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c11ce503-da24-4ef6-80bc-448919df66da",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "versionchanged tag",
        "createdAt" : "2018-11-14T13:34:20Z",
        "updatedAt" : "2018-11-15T00:03:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ff6261d07b82f54e3ce031a0fc908304d5c0c81",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +5245,5249 @@            that should be updated.\n        errors : {'raise', 'ignore'}, default 'ignore'\n            If 'raise', will raise a ValueError if the DataFrame and `other`\n            both contain non-NA data in the same place.\n"
  },
  {
    "id" : "d64521da-2cb8-4da2-a69f-f8ece9f428bc",
    "prId" : 23657,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23657#pullrequestreview-174861080",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6fed102-798d-4f69-a5a8-c084363f8955",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add an if for valid errors values (e.g. raise/error), and test for passing bad values in the tests themselves",
        "createdAt" : "2018-11-14T13:34:50Z",
        "updatedAt" : "2018-11-15T00:03:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ff6261d07b82f54e3ce031a0fc908304d5c0c81",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +5257,5261 @@\n        Raises\n        ------\n        ValueError\n            * When `errors='raise'` and there's overlapping non-NA data."
  },
  {
    "id" : "ee655ba2-816d-4174-8d54-12b994e9c6cf",
    "prId" : 23662,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23662#pullrequestreview-174210647",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe0f6920-b33e-4240-8c3f-f6c8e00cf8fe",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I realize `private_key` was listed as a breaking change for pandas-gbq but don't believe it was ever deprecated on our end. Is there no other way to go about this than just removing? ",
        "createdAt" : "2018-11-13T05:55:20Z",
        "updatedAt" : "2018-11-15T01:11:26Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "7943b446-eb4f-48bb-b2ef-3f645fa6931a",
        "parentId" : "fe0f6920-b33e-4240-8c3f-f6c8e00cf8fe",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Whoops sorry I see it was just moved around in the signature. Any reason for doing that? Seems like it would be safer to keep in it's current position",
        "createdAt" : "2018-11-13T05:56:24Z",
        "updatedAt" : "2018-11-15T01:11:26Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "6e342f24-30f6-4ff3-8b34-b5418379519c",
        "parentId" : "fe0f6920-b33e-4240-8c3f-f6c8e00cf8fe",
        "authorId" : "123c1393-2602-4758-a036-a9a25697e7fc",
        "body" : "I moved it to the end because that's where I was told to move `verbose` when we deprecated that. Seeing as there are already many keyword arguments preceding it, I don't think there's a risk of people using the position of the argument.",
        "createdAt" : "2018-11-13T06:36:50Z",
        "updatedAt" : "2018-11-15T01:11:26Z",
        "lastEditedBy" : "123c1393-2602-4758-a036-a9a25697e7fc",
        "tags" : [
        ]
      }
    ],
    "commit" : "d633cdf4df993ca9bd9908983f6f6e6490f7cf68",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1242,1246 @@\n    def to_gbq(self, destination_table, project_id=None, chunksize=None,\n               reauth=False, if_exists='fail', auth_local_webserver=False,\n               table_schema=None, location=None, progress_bar=True,\n               credentials=None, verbose=None, private_key=None):"
  },
  {
    "id" : "e2e02480-2392-4ef6-8e1d-2f3a24cb9ed0",
    "prId" : 23715,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23715#pullrequestreview-175429486",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffbc6fbe-213c-4b3f-9ba3-f7d251ec5fda",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a versionadded tag",
        "createdAt" : "2018-11-15T16:09:24Z",
        "updatedAt" : "2018-12-13T05:33:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f3e058029abae99d436bf7def57179219aaca2f",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +2071,2075 @@        render_links : bool, default False\n            Convert URLs to HTML links.\n\n            .. versionadded:: 0.24.0\n"
  },
  {
    "id" : "7fabf688-0a27-45ee-aa41-b0eb598d1cbc",
    "prId" : 24024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24024#pullrequestreview-184646345",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11ba51e9-291e-4c6d-abd7-12e3aa840f6a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "grr this is messy",
        "createdAt" : "2018-12-13T01:20:36Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d9253ffa-e04b-451f-bfe4-2a93a2c7f416",
        "parentId" : "11ba51e9-291e-4c6d-abd7-12e3aa840f6a",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I spent about 20 minutes on a proper solution, but getting proper support for EAs in `maybe_upcast_putmask` proved challenging.",
        "createdAt" : "2018-12-13T03:56:19Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "ede6f34c-5203-46ca-b970-2b6167425a83",
        "parentId" : "11ba51e9-291e-4c6d-abd7-12e3aa840f6a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes myabe_upcast_putmask is messy currently",
        "createdAt" : "2018-12-13T12:54:53Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2436214219fc116239640889715c9bc6575f571b",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +4361,4365 @@                    values = values.take(labels)\n\n                    # TODO(https://github.com/pandas-dev/pandas/issues/24206)\n                    # Push this into maybe_upcast_putmask?\n                    # We can't pass EAs there right now. Looks a bit"
  },
  {
    "id" : "cca9b944-5177-44e9-9343-7a0c396b2a22",
    "prId" : 24100,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24100#pullrequestreview-181738386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "798a7f8d-abf1-43e4-b8f5-a93e3facdd55",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes i would just call these directly (your new routines)",
        "createdAt" : "2018-12-05T12:49:51Z",
        "updatedAt" : "2018-12-05T12:55:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f0e7f4265890f7a0f9251857760fef2d0e53806",
    "line" : 252,
    "diffHunk" : "@@ -1,1 +475,479 @@        # input must be a ndarray, list, Series, index\n        return init_ndarray(values, index, columns, dtype=dtype, copy=copy)\n        # TODO: can we just get rid of this as a method?\n\n    # ----------------------------------------------------------------------"
  },
  {
    "id" : "e7af4ea3-f0db-45e4-830e-a2da64df189a",
    "prId" : 24100,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24100#pullrequestreview-181738386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0946cf62-efdb-4770-a667-087552961ebb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same comment as below, yes)",
        "createdAt" : "2018-12-05T12:50:00Z",
        "updatedAt" : "2018-12-05T12:55:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f0e7f4265890f7a0f9251857760fef2d0e53806",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +469,473 @@        Needs to handle a lot of exceptional cases.\n        \"\"\"\n        return init_dict(data, index, columns, dtype=dtype)\n        # TODO: Can we get rid of this as a method?\n"
  },
  {
    "id" : "561fb5b2-4ec0-46c5-8b4e-627c55c236e2",
    "prId" : 24541,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24541#pullrequestreview-188888865",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b197f080-100c-4418-a5ed-11956ff32c2c",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "since \"idiomatic\" is explicitly the goal, this should be a list comprehension",
        "createdAt" : "2019-01-03T02:24:16Z",
        "updatedAt" : "2019-01-04T12:11:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5b5c2bf8-dc3b-457e-a23c-0913e69cf821",
        "parentId" : "b197f080-100c-4418-a5ed-11956ff32c2c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "well this is actually quite idiomatic",
        "createdAt" : "2019-01-03T02:26:14Z",
        "updatedAt" : "2019-01-04T12:11:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d4bd5e22051c8dedc42ec1ac6156f3449f09948",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +3293,3297 @@        # convert the myriad valid dtypes object to a single representation\n        include, exclude = map(\n            lambda x: frozenset(map(infer_dtype_from_object, x)), selection)\n        for dtypes in (include, exclude):\n            invalidate_string_dtypes(dtypes)"
  },
  {
    "id" : "fb0aae1c-4b16-4bb3-a324-b32bceaf3bc9",
    "prId" : 24759,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24759#pullrequestreview-192883441",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ca92752-3561-4592-8e1f-49c5518fc75c",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "For those wondering, `DataFrame. _is_datelike_mixed_type` is False for an empty DataFrame, so we don't have to worry about an IndexError when getting `.dtypes[0]`, since we should have short-circuited.\r\n\r\n(`._is_homogeneous_type` is true for an empty DataFrame, which I suppose makes sense)",
        "createdAt" : "2019-01-15T21:55:12Z",
        "updatedAt" : "2019-01-15T21:55:12Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "190db02704365346f860fd9f9a024a6592c35bc6",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +7394,7398 @@        if (axis == 1 and self._is_datelike_mixed_type\n                and (not self._is_homogeneous_type\n                     and not is_datetime64tz_dtype(self.dtypes[0]))):\n            numeric_only = True\n"
  },
  {
    "id" : "c73fe2dd-2d9e-4b18-abe4-03b260e8a224",
    "prId" : 24762,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24762#pullrequestreview-193883779",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2387c663-5c6e-4229-8050-918d4a5fec49",
        "parentId" : null,
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "strictly speaking, it *would* be possible to just keep wrapping everything that's not a list into a list, and raise in the for-loop below. But that's a bit hard to grok, and explicit is better than implicit, no?",
        "createdAt" : "2019-01-17T23:01:33Z",
        "updatedAt" : "2019-01-17T23:02:02Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "613ebed0f5a6deca6c74d1914662e82bcc502b5e",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +4137,4141 @@            # make sure we have a container of keys/arrays we can iterate over\n            # tuples can appear as valid column keys!\n            keys = [keys]\n        elif not isinstance(keys, list):\n            raise ValueError(err_msg)"
  },
  {
    "id" : "84ba39f7-ffc3-4b51-9ed4-b0374b35602a",
    "prId" : 24952,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24952#pullrequestreview-196810900",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03b6cd1a-4269-4c94-bb61-882987fc6308",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Would be preferable to state the type of scalar being returned here",
        "createdAt" : "2019-01-27T03:07:39Z",
        "updatedAt" : "2019-02-12T13:13:40Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e2ba44de-3c7d-4397-bb7b-444e65709388",
        "parentId" : "03b6cd1a-4269-4c94-bb61-882987fc6308",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Would something like `object` be appropriate in cases like these where the type is mostly unspecified?",
        "createdAt" : "2019-01-27T03:29:10Z",
        "updatedAt" : "2019-02-12T13:13:40Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "68c89f60-32b0-49e8-acc8-8dd0d7cf11d6",
        "parentId" : "03b6cd1a-4269-4c94-bb61-882987fc6308",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Good question. What you've suggested seems like the most logical thing to me!\r\n\r\ncc @datapythonista",
        "createdAt" : "2019-01-27T03:34:17Z",
        "updatedAt" : "2019-02-12T13:13:40Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ecebbd5bbeaafddc960a424f3b6a990133e5a02",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +2697,2701 @@        Returns\n        -------\n        scalar value\n        \"\"\"\n"
  },
  {
    "id" : "e1c51d50-6423-4309-a363-f76fb7b04bbf",
    "prId" : 24953,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24953#pullrequestreview-196796866",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4309b3de-1cba-4d45-be5b-629e85de7a79",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a version added tag",
        "createdAt" : "2019-01-26T18:07:21Z",
        "updatedAt" : "2019-04-23T15:21:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c1720c184e1f6231dfe5a9cb44137772e93412b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +5705,5709 @@            This only applies if any of the groupers are Categoricals.\n            If True: only show observed values for categorical groupers.\n            If False: show all values for categorical groupers.\n\n            .. versionchanged :: 0.25.0"
  },
  {
    "id" : "d4e3eae0-6072-40d6-b063-a89d8c78e7e7",
    "prId" : 24953,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24953#pullrequestreview-218054889",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c20c1ff0-5897-4a45-8cf6-15cd3a118fee",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "versionadded",
        "createdAt" : "2019-03-23T20:29:02Z",
        "updatedAt" : "2019-04-23T15:21:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c1720c184e1f6231dfe5a9cb44137772e93412b",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +5707,5711 @@            If False: show all values for categorical groupers.\n\n            .. versionchanged :: 0.25.0\n\n        Returns"
  },
  {
    "id" : "29eda4c7-d9eb-4e93-9df2-f6d84567d9e0",
    "prId" : 24955,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24955#pullrequestreview-212626392",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d3f479b-76ac-43a4-8381-3da9439d00dc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this cannot be handled in _get_index_resolvers?",
        "createdAt" : "2019-03-10T16:22:22Z",
        "updatedAt" : "2019-03-20T08:09:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fb16c9fd-28e0-4679-ae94-82d391e4fc87",
        "parentId" : "9d3f479b-76ac-43a4-8381-3da9439d00dc",
        "authorId" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "body" : "index_resolvers returns indices. I need column resolvers as well. Moved this to a method in NDFrame, just like the index_resolvers. ",
        "createdAt" : "2019-03-10T22:20:36Z",
        "updatedAt" : "2019-03-20T08:09:00Z",
        "lastEditedBy" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "tags" : [
        ]
      },
      {
        "id" : "9ac4f4f5-34f7-42bd-a355-5b06eb00aab2",
        "parentId" : "9d3f479b-76ac-43a4-8381-3da9439d00dc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok fair enough",
        "createdAt" : "2019-03-10T22:42:15Z",
        "updatedAt" : "2019-03-20T08:09:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "192c09353cf6167b49f8d19ec90ef5a4545263af",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +3183,3187 @@        kwargs['level'] = kwargs.pop('level', 0) + 1\n        if resolvers is None:\n            index_resolvers = self._get_index_resolvers()\n            column_resolvers = \\\n                self._get_space_character_free_column_resolvers()"
  },
  {
    "id" : "44a6e134-4835-4f17-87ca-25fb1d677667",
    "prId" : 24955,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24955#pullrequestreview-212628654",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "337fe91a-3b1d-4e70-847e-a08daa04ed68",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add an example in the  Examples section as well",
        "createdAt" : "2019-03-10T22:41:56Z",
        "updatedAt" : "2019-03-20T08:09:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5c26aa18-77d8-4d46-b9a5-c6038b3b5854",
        "parentId" : "337fe91a-3b1d-4e70-847e-a08daa04ed68",
        "authorId" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "body" : "Done, but don't know what this means:\r\n\r\n1 Warnings found:\r\n\tNo extended summary found\r\nDocstring for \"pandas.DataFrame.query\" correct. :)",
        "createdAt" : "2019-03-10T23:30:22Z",
        "updatedAt" : "2019-03-20T08:09:00Z",
        "lastEditedBy" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "tags" : [
        ]
      }
    ],
    "commit" : "192c09353cf6167b49f8d19ec90ef5a4545263af",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2969,2973 @@            ``@a + b``.\n\n            .. versionadded:: 0.25.0\n\n            You can refer to column names that contain spaces by surrounding"
  },
  {
    "id" : "13a92b90-3d89-4baf-8122-5d668d8c6514",
    "prId" : 24984,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24984#pullrequestreview-199222561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "941fca68-b5fd-4b93-8e70-acd7ded13305",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can this not be consolidated with the first conditional branch in any way?",
        "createdAt" : "2019-02-01T18:47:04Z",
        "updatedAt" : "2019-02-24T01:38:15Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d14aa393-51b8-4225-8791-76334de65603",
        "parentId" : "941fca68-b5fd-4b93-8e70-acd7ded13305",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Good point, that is now possible.",
        "createdAt" : "2019-02-01T19:06:25Z",
        "updatedAt" : "2019-02-24T01:38:15Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f99b15f2a2379e4d931ce69d22e1dabd9454657",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +4126,4130 @@                                    'type {}'.format(type(col)))\n                else:\n                    if not found:\n                        missing.append(col)\n"
  },
  {
    "id" : "33ac5c2f-c9bc-4920-8d00-30c555d8a220",
    "prId" : 24984,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24984#pullrequestreview-204560561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "693b7d0e-25f8-4c15-bed8-35bf543407ef",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why are you not just raising here? what's the point of collecting these?",
        "createdAt" : "2019-02-16T18:14:16Z",
        "updatedAt" : "2019-02-24T01:38:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6a9a2988-0466-4c5c-9ace-8d45f8dd718c",
        "parentId" : "693b7d0e-25f8-4c15-bed8-35bf543407ef",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "The point is to show all missing keys, not just the first one (like `.loc` does as well). See also #22484.",
        "createdAt" : "2019-02-17T13:11:41Z",
        "updatedAt" : "2019-02-24T01:38:15Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f99b15f2a2379e4d931ce69d22e1dabd9454657",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +4127,4131 @@                else:\n                    if not found:\n                        missing.append(col)\n\n        if missing:"
  },
  {
    "id" : "ebeadb27-9c82-437f-b986-fd4ea7fa7b1a",
    "prId" : 25535,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25535#pullrequestreview-210541694",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1541a88f-6080-439d-8d5d-4d81c94b4d20",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "OK as now I think but generally unrelated changes like this are better done in a separate PR",
        "createdAt" : "2019-03-04T22:18:12Z",
        "updatedAt" : "2019-03-05T20:59:45Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "068c89cb-ec0e-4f55-97a0-e9d9e83709b2",
        "parentId" : "1541a88f-6080-439d-8d5d-4d81c94b4d20",
        "authorId" : "0705a0ed-b69c-4514-b341-16a435beaffe",
        "body" : "I understand, I just figured it might be nice to reduce the technical debt of this method, as I saw that this docstring contained numerous errors. Will keep it in mind for next time!",
        "createdAt" : "2019-03-05T08:19:49Z",
        "updatedAt" : "2019-03-05T20:59:45Z",
        "lastEditedBy" : "0705a0ed-b69c-4514-b341-16a435beaffe",
        "tags" : [
        ]
      }
    ],
    "commit" : "97746e87063303e917a680659849d5178a198db7",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +3926,3930 @@        Parameters\n        ----------\n        mapper : dict-like or function\n            Dict-like or functions transformations to apply to\n            that axis' values. Use either ``mapper`` and ``axis`` to"
  },
  {
    "id" : "98cff3c9-c414-457f-99c6-b1a799b33370",
    "prId" : 25649,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25649#pullrequestreview-213935812",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "022160bc-aa8a-4f1a-b0e2-1fac1f323ab9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a todo on the Panel issue",
        "createdAt" : "2019-03-13T13:04:54Z",
        "updatedAt" : "2019-03-20T05:43:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8829954801b76ddb7f072dc1c7da5aedc8a65614",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +371,375 @@    @property\n    def _constructor_expanddim(self):\n        # TODO: Raise NotImplementedError or change note in extending.rst\n        from pandas.core.panel import Panel\n        return Panel"
  },
  {
    "id" : "62b54f01-e496-4de2-ad01-4352af336b7b",
    "prId" : 25732,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25732#pullrequestreview-214933190",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d64ad614-f405-4a66-9bc2-9419ec0c2f51",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I am not sure this is needed to said. This is by-definition that same-same are correlated to 1.0",
        "createdAt" : "2019-03-14T15:58:50Z",
        "updatedAt" : "2019-03-14T15:58:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4c9c44b7-2139-4210-8543-21c647708dd7",
        "parentId" : "d64ad614-f405-4a66-9bc2-9419ec0c2f51",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if you want instead to add a link to a correlation matrix that would be ok",
        "createdAt" : "2019-03-14T15:59:08Z",
        "updatedAt" : "2019-03-14T15:59:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "50f3e13e-547a-4a39-95a0-02417bcf429b",
        "parentId" : "d64ad614-f405-4a66-9bc2-9419ec0c2f51",
        "authorId" : "09f66286-97c2-4966-9610-58a47e0ff6c0",
        "body" : "I wanted to use the method argument of `corr` to compute p-values for the significance of the correlation. Then, the resulting matrix is not a correlation matrix anymore. Currently, pandas assumes that the callable supplied to method computes actual correlations, but this assumption is not explicitly mentioned. At least for me, it would have been helpful to know this behaviour. ",
        "createdAt" : "2019-03-15T09:25:42Z",
        "updatedAt" : "2019-03-15T09:25:42Z",
        "lastEditedBy" : "09f66286-97c2-4966-9610-58a47e0ff6c0",
        "tags" : [
        ]
      }
    ],
    "commit" : "f79fc716495e7e6d3c6a44d1a050f112c74ca4cb",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +7022,7026 @@            * spearman : Spearman rank correlation\n            * callable: callable with input two 1d ndarrays\n                and returning a float. Note that the returned matrix from corr\n                will have 1 along the diagonals and will be symmetric\n                regardless of the callable's behavior"
  },
  {
    "id" : "fc66504a-73f4-4b96-a346-71dcdab625f2",
    "prId" : 25903,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25903#pullrequestreview-220095906",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2d07a4a-fad8-42ac-890e-1e5adc3be621",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Just thinking out loud but wondering if we should make something to fuse type, np.dtype and str. Would certainly help out in some of the typing things we have going on",
        "createdAt" : "2019-03-28T15:27:21Z",
        "updatedAt" : "2019-03-29T06:23:21Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4137281a16bcbaac4be21078c96c17efb0bff7a1",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +1710,1714 @@            if dtype_mapping is None:\n                formats.append(v.dtype)\n            elif isinstance(dtype_mapping, (type, np.dtype, str)):\n                formats.append(dtype_mapping)\n            else:"
  },
  {
    "id" : "676be7de-37ce-4712-8dab-9c84840a205a",
    "prId" : 25909,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25909#pullrequestreview-224014281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9d23699-45f7-42b1-aeca-c5667d934e64",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@WillAyd Im still not clear on what the upside from this added verbosity is.  Can mypy really not figure out that `set()` is a set?",
        "createdAt" : "2019-04-08T18:29:03Z",
        "updatedAt" : "2019-04-16T05:16:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b14fd061669d92b42bdf64257204427474f003d",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +365,369 @@        'get_value', 'set_value', 'from_csv', 'from_items'\n    ])  # type: FrozenSet[str]\n    _accessors = set()  # type: Set[str]\n\n    @property"
  },
  {
    "id" : "640db43b-1f9d-4613-9b91-f68762493579",
    "prId" : 26012,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26012#pullrequestreview-223546940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18ca00c5-3482-4ca7-a1fa-0c892b9ba8eb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "need a versionadded tag here",
        "createdAt" : "2019-04-06T16:22:39Z",
        "updatedAt" : "2019-04-28T19:40:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1bcc5c62fa00fffef27097d04ba68d01a7df1a97",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +2153,2157 @@\n    @Substitution(header='Whether to print column labels, default True',\n                  col_space_type='str or int',\n                  col_space='The minimum width of each column in CSS length '\n                            'units.  An int is assumed to be px units.\\n\\n'"
  },
  {
    "id" : "4d385827-601a-41f8-8d33-3ec6b362c142",
    "prId" : 26012,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26012#pullrequestreview-223549463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73a27b0e-bc2d-4f8a-8d4f-d7a85c7b7cf1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2019-04-06T16:22:45Z",
        "updatedAt" : "2019-04-28T19:40:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "eb446d99-9ab9-47df-92ee-39471544c085",
        "parentId" : "73a27b0e-bc2d-4f8a-8d4f-d7a85c7b7cf1",
        "authorId" : "3cf21736-8210-430b-9ff1-610530ed90f8",
        "body" : "I added `versionadded` to `to_html`, but this one shouldn't need that as this is the same parameter and description as before.  I just had to add it to `Substitution` because the sections in `common_docstring` had to be parameterized to allow that section to be different on both functions.",
        "createdAt" : "2019-04-06T17:32:38Z",
        "updatedAt" : "2019-04-28T19:40:48Z",
        "lastEditedBy" : "3cf21736-8210-430b-9ff1-610530ed90f8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1bcc5c62fa00fffef27097d04ba68d01a7df1a97",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +665,669 @@                         'is given, it is assumed to be aliases for the '\n                         'column names',\n                  col_space_type='int',\n                  col_space='The minimum width of each column')\n    @Substitution(shared_params=fmt.common_docstring,"
  },
  {
    "id" : "6005bc1a-b953-4472-8f40-6791a12fe252",
    "prId" : 26114,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26114#pullrequestreview-260398265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0635d67c-1ad1-4f31-b22d-d1aaff8522c4",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Both return a generator, so why the different docstring here?",
        "createdAt" : "2019-07-10T20:46:40Z",
        "updatedAt" : "2019-07-10T20:51:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7c8999ce-84f6-47a9-8d77-e678a18a9bbf",
        "parentId" : "0635d67c-1ad1-4f31-b22d-d1aaff8522c4",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "It's the \"return \" part of the method that makes flake8 think this is not a generator, so it won't allow a \"Yields\" section in the iteritems doc string.\r\n\r\nI think flake8 is tecnically right, but it makes for uglier code in this case.",
        "createdAt" : "2019-07-10T22:59:46Z",
        "updatedAt" : "2019-07-10T22:59:46Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "a162d541-e02e-4217-a15c-c1e82f456518",
        "parentId" : "0635d67c-1ad1-4f31-b22d-d1aaff8522c4",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "On second thought, I think maybe if the Appender is followed by a ``# noqa`` comment, we can make flake8 ignore that section. I'll try it tomorrow.",
        "createdAt" : "2019-07-10T23:01:26Z",
        "updatedAt" : "2019-07-10T23:01:26Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "71c9acab2e86a0be71f6ba96e5c5d7b82a61f360",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +830,834 @@                yield k, self._ixs(i, axis=1)\n\n    @Appender(_shared_docs[\"items\"] % \"Returns\\n        -------\")\n    def iteritems(self):\n        return self.items()"
  },
  {
    "id" : "c6edad4f-7c8c-407b-954b-db313722957e",
    "prId" : 26234,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26234#pullrequestreview-231513065",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf2f1112-d393-4a80-98b9-17e12304a9c4",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What is this being changed for?",
        "createdAt" : "2019-04-29T00:27:24Z",
        "updatedAt" : "2019-05-07T17:57:21Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ff5a29a0-0cab-404b-beec-d95b799509c1",
        "parentId" : "bf2f1112-d393-4a80-98b9-17e12304a9c4",
        "authorId" : "fd6a3bb0-1e01-4fbd-9d3f-28cd7cd4505e",
        "body" : "Please see this [comment](https://github.com/pandas-dev/pandas/issues/25356#issuecomment-487398793). ",
        "createdAt" : "2019-04-29T04:34:37Z",
        "updatedAt" : "2019-05-07T17:57:21Z",
        "lastEditedBy" : "fd6a3bb0-1e01-4fbd-9d3f-28cd7cd4505e",
        "tags" : [
        ]
      }
    ],
    "commit" : "331a5df8697440539b26a6c94e5bfefabca6439f",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +842,846 @@        Returns\n        -------\n        iterator\n            An object to iterate over namedtuples for each row in the\n            DataFrame with the first field possibly being the index and"
  },
  {
    "id" : "f0304dfb-4a94-4741-9300-9dd56f4c7cb1",
    "prId" : 26238,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26238#pullrequestreview-231838216",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32de76a3-71e2-48d7-a7de-129914523aea",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Would be good to take this all the way through. `pandas.io.gbq.to_gbq` also has a return statement, but if that actually doesn't return anything should be removed there as well",
        "createdAt" : "2019-04-29T18:42:36Z",
        "updatedAt" : "2019-04-29T19:58:12Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf4438bdd4a46695442716b6a14f8936876ab3a6",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1395,1399 @@        \"\"\"\n        from pandas.io import gbq\n        gbq.to_gbq(self, destination_table, project_id=project_id,\n                   chunksize=chunksize, reauth=reauth, if_exists=if_exists,\n                   auth_local_webserver=auth_local_webserver,"
  },
  {
    "id" : "653a1628-23e3-4ca2-ba2e-785b6c0ce3d6",
    "prId" : 26261,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26261#pullrequestreview-232737329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc7ef6b5-d544-4728-a0d3-9c6c023bc3e2",
        "parentId" : null,
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "This is more readable IMO.",
        "createdAt" : "2019-05-01T20:17:53Z",
        "updatedAt" : "2019-05-01T20:23:56Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9ea320bf9aa7d329e8b5feda4194eaac299b35a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +6337,6341 @@            # NDFrame.aggregate returns a tuple, and we need to transpose\n            # only result\n            result, how = self.T._aggregate(arg, *args, **kwargs)\n            result = result.T if result is not None else result\n            return result, how"
  },
  {
    "id" : "43aed04b-a2e2-4e03-93bf-2b3f965b835d",
    "prId" : 26261,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26261#pullrequestreview-232737539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35e1e4fb-fa19-453e-9be2-cd48e7f7adb3",
        "parentId" : null,
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "This is more readable IMO.",
        "createdAt" : "2019-05-01T20:18:22Z",
        "updatedAt" : "2019-05-01T20:23:56Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9ea320bf9aa7d329e8b5feda4194eaac299b35a",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +6348,6352 @@        axis = self._get_axis_number(axis)\n        if axis == 1:\n            return self.T.transform(func, *args, **kwargs).T\n        return super().transform(func, *args, **kwargs)\n"
  },
  {
    "id" : "e318a9bb-f0e1-420e-a8c2-c66e0c606476",
    "prId" : 26287,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26287#pullrequestreview-233819283",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91f34f76-7eb5-4c58-932c-ce0f4642cb69",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "The TODO mentions changing the docs extending.rst but that looks to have already been done",
        "createdAt" : "2019-05-06T03:41:47Z",
        "updatedAt" : "2019-05-07T04:14:56Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4cd707d8d3d40e23f2152a73c209cf755e8691f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +369,373 @@    @property\n    def _constructor_expanddim(self):\n        raise NotImplementedError(\"Not supported for DataFrames!\")\n\n    # ----------------------------------------------------------------------"
  },
  {
    "id" : "cae10824-d3fe-43c6-9851-d9665bbf4e5b",
    "prId" : 26867,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26867#pullrequestreview-250190376",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c7f34b6-bd6a-4654-ac24-472c54fa75ed",
        "parentId" : null,
        "authorId" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "body" : "Why not set `data={}` instead of None in function parameters if the first thing we do inside the function is assign it `{}` if it's `None`.",
        "createdAt" : "2019-06-15T11:57:53Z",
        "updatedAt" : "2019-09-12T15:57:27Z",
        "lastEditedBy" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "tags" : [
        ]
      },
      {
        "id" : "749050f2-cb78-40a8-ada1-c7c403d298c1",
        "parentId" : "1c7f34b6-bd6a-4654-ac24-472c54fa75ed",
        "authorId" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "body" : "nvm, I got it. It's because mutable default arguments act unexpectedly in some cases.",
        "createdAt" : "2019-06-15T12:04:52Z",
        "updatedAt" : "2019-09-12T15:57:27Z",
        "lastEditedBy" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d03e33ce4dac43fab00e87fdf348872a672ec693",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +397,401 @@    ):\n        if data is None:\n            data = {}\n        if dtype is not None:\n            dtype = self._validate_dtype(dtype)"
  },
  {
    "id" : "d4247056-78fd-429c-9ace-af18e7d69271",
    "prId" : 26867,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26867#pullrequestreview-250191898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "875ad605-d4e1-43b0-97c6-5acb2767f50a",
        "parentId" : null,
        "authorId" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "body" : "Need a TypeVar here too as List takes only 1 argument.",
        "createdAt" : "2019-06-15T11:58:50Z",
        "updatedAt" : "2019-09-12T15:57:27Z",
        "lastEditedBy" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "tags" : [
        ]
      },
      {
        "id" : "24db3a9c-0dde-4c82-a8a3-7691c7b4f9b1",
        "parentId" : "875ad605-d4e1-43b0-97c6-5acb2767f50a",
        "authorId" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "body" : "Btw why not return a tuple here too.",
        "createdAt" : "2019-06-15T12:06:15Z",
        "updatedAt" : "2019-09-12T15:57:27Z",
        "lastEditedBy" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "tags" : [
        ]
      },
      {
        "id" : "62956274-b212-4928-83e9-13479f88a0e7",
        "parentId" : "875ad605-d4e1-43b0-97c6-5acb2767f50a",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Valid question but slightly orthogonal. Your annotation is correct so if you'd like to pursue changing this function should open a separate issue for it",
        "createdAt" : "2019-06-15T12:47:32Z",
        "updatedAt" : "2019-09-12T15:57:27Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ef832753-b33b-4f8b-bfae-c675af4d64a5",
        "parentId" : "875ad605-d4e1-43b0-97c6-5acb2767f50a",
        "authorId" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "body" : "Whew 😓  fancy word(orthogonal), I had to look it up. I will investigate to bit to make sure tuple is in fact a better option here, then I will open a new issue.",
        "createdAt" : "2019-06-15T12:59:11Z",
        "updatedAt" : "2019-09-12T15:57:27Z",
        "lastEditedBy" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d03e33ce4dac43fab00e87fdf348872a672ec693",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +490,494 @@\n    @property\n    def axes(self) -> List[Index]:\n        \"\"\"\n        Return a list representing the axes of the DataFrame."
  },
  {
    "id" : "2fbd0ef5-cf87-4391-8ab6-8d5c4cfbc66f",
    "prId" : 27095,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27095#pullrequestreview-257469150",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "815ad87f-6b2c-4b8c-81cb-d9272931e2ee",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "can the logic be added before this call to `.to_string` (isn't it as simple as just set max_rows to min_rows if len(self.frame) > max_rows?)",
        "createdAt" : "2019-07-03T09:22:53Z",
        "updatedAt" : "2019-07-03T20:44:39Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "fb45c671-3804-4480-9eb3-22df77cf65c5",
        "parentId" : "815ad87f-6b2c-4b8c-81cb-d9272931e2ee",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "For the simple cases, yes. And I agree that could be a nice option. But there are some corner cases that are only handled within the `DataFrameFormatter` class (eg if max_rows = 0, we check the terminal size)",
        "createdAt" : "2019-07-03T12:47:32Z",
        "updatedAt" : "2019-07-03T20:44:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "3fe8f03c-d894-4eeb-b665-9808d1f954b5",
        "parentId" : "815ad87f-6b2c-4b8c-81cb-d9272931e2ee",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Although, looking at it more closely, that special case is only if `max_rows` is 0 or None, so that could be easily checked. So yes, this would in principle be possible (and probably even give easier code). But that means that we move some of the logic of the repr out of the Formatter class.",
        "createdAt" : "2019-07-03T12:49:06Z",
        "updatedAt" : "2019-07-03T20:44:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "54500ce7-54c2-40ba-a472-6401115fd70c",
        "parentId" : "815ad87f-6b2c-4b8c-81cb-d9272931e2ee",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> But that means that we move some of the logic of the repr out of the Formatter class.\r\n\r\ni agree. but this logic is related to display options. i'd prefer to see all the display option handling removed from the Formatter classes entirely and only appear in `__repr__` and `_repr_html_`\r\n\r\nit appears from the comments that adding arguments to `to_string` is not considered undesirable. so this topic can be addressed another day. ",
        "createdAt" : "2019-07-03T13:00:40Z",
        "updatedAt" : "2019-07-03T20:44:39Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "577c5cf6daaa47cec526fab78d7a61fadb4c13ee",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +596,600 @@        else:\n            width = None\n        self.to_string(buf=buf, max_rows=max_rows, min_rows=min_rows,\n                       max_cols=max_cols, line_width=width,\n                       show_dimensions=show_dimensions)"
  },
  {
    "id" : "19942ea7-2bab-4d4a-858b-674a33bb5a6d",
    "prId" : 27145,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27145#pullrequestreview-257197382",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00089114-d903-4077-ac29-2e2af78986d4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this one?",
        "createdAt" : "2019-07-02T19:06:51Z",
        "updatedAt" : "2019-07-03T02:19:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "11387a7a-2393-44b7-88e5-35d17023141a",
        "parentId" : "00089114-d903-4077-ac29-2e2af78986d4",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "I think this is okay. It's internal usage and slightly more performant I would think than `dtype.value_counts()` (left as a dictionary as opposed to constructing the Series)",
        "createdAt" : "2019-07-02T20:58:26Z",
        "updatedAt" : "2019-07-03T02:19:39Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "ba3d894f-e132-4df0-8584-e370bd03d80f",
        "parentId" : "00089114-d903-4077-ac29-2e2af78986d4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you remove get_dtype_counts() from blocks its unecessary as well",
        "createdAt" : "2019-07-02T22:44:00Z",
        "updatedAt" : "2019-07-03T02:19:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4c5f7c13-2677-4827-bd83-905cb798c0ca",
        "parentId" : "00089114-d903-4077-ac29-2e2af78986d4",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Looks to be needed to get the dtypes later on for `info`?",
        "createdAt" : "2019-07-02T23:28:33Z",
        "updatedAt" : "2019-07-03T02:19:39Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "475e361574a7b90199a8eb76bde04117c703c34f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2327,2331 @@                _verbose_repr()\n\n        counts = self._data.get_dtype_counts()\n        dtypes = ['{k}({kk:d})'.format(k=k[0], kk=k[1]) for k\n                  in sorted(counts.items())]"
  },
  {
    "id" : "f7f8b7a7-e080-4dcd-844c-6e339bed77ef",
    "prId" : 27237,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27237#pullrequestreview-346002208",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec7520b1-43f8-4a3a-94c3-e7b12f426761",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this still needed?",
        "createdAt" : "2020-01-20T22:30:51Z",
        "updatedAt" : "2020-04-27T02:11:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "17a0eb73-9d2a-4118-82ee-6ce44aab22c8",
        "parentId" : "ec7520b1-43f8-4a3a-94c3-e7b12f426761",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah. This will be solved when the docstring NDFrame.sort_values is just moved to DataFrame.sort_values.",
        "createdAt" : "2020-01-21T16:12:58Z",
        "updatedAt" : "2020-04-27T02:11:38Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d5ba530d4cffea873ba501cbda3a1d50ea172af",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +5058,5062 @@    # ----------------------------------------------------------------------\n    # Sorting\n    # TODO: Just move the sort_values doc here.\n    @Substitution(**_shared_doc_kwargs)\n    @Appender(NDFrame.sort_values.__doc__)"
  },
  {
    "id" : "7f4cf645-a6a2-4b7c-bf58-ce086c4c562a",
    "prId" : 27237,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27237#pullrequestreview-390185557",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46b5c0a3-71b5-4b93-9c05-0a1999168bf6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same here",
        "createdAt" : "2020-04-10T17:17:33Z",
        "updatedAt" : "2020-04-27T02:11:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d5ba530d4cffea873ba501cbda3a1d50ea172af",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +5176,5180 @@            this `key` function should be *vectorized*. It should expect an\n            ``Index`` and return an ``Index`` of the same shape. For MultiIndex\n            inputs, the key is applied *per level*.\n\n            .. versionadded:: 1.1.0"
  },
  {
    "id" : "cf3663e2-1b3f-496c-8d58-7748060f2a0f",
    "prId" : 27351,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27351#pullrequestreview-261007310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "927a9e1c-1e5f-4d3f-bf99-b63430e5fd76",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Since `axis` is a pretty common keyword can you put that as `Axis` in pandas._typing? We probably also want to add `str` as a type for it since it *should* accept \"index\" and \"columns\" as well",
        "createdAt" : "2019-07-11T23:52:44Z",
        "updatedAt" : "2019-07-12T15:10:37Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "4b96ade6-6bc0-4907-b298-80bb1c3e2fbe",
        "parentId" : "927a9e1c-1e5f-4d3f-bf99-b63430e5fd76",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Also can we add the return type here? `-> 'DataFrame`'?",
        "createdAt" : "2019-07-11T23:54:29Z",
        "updatedAt" : "2019-07-12T15:10:37Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ae791d77-f98b-41dd-97bd-762fe6a8cf59",
        "parentId" : "927a9e1c-1e5f-4d3f-bf99-b63430e5fd76",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'll take a look and see what we can determine about return types.  For Axis/str/int, in all these cases, I've put int because these are private methods and only ever get ints.",
        "createdAt" : "2019-07-11T23:58:28Z",
        "updatedAt" : "2019-07-12T15:10:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "437f8fed5a9754b26a5099f04d631c8ef39a0995",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2890,2894 @@    _set_value.__doc__ = set_value.__doc__\n\n    def _ixs(self, i: int, axis: int = 0):\n        \"\"\"\n        Parameters"
  },
  {
    "id" : "c03ce8d3-ee11-4a8e-9e41-da7aa677ee5f",
    "prId" : 27383,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27383#pullrequestreview-261907523",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56a80c1d-dd03-447d-b6fe-debc00eebc4b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "```self.columns.get_indexer(key)```?",
        "createdAt" : "2019-07-15T12:11:41Z",
        "updatedAt" : "2019-07-23T23:07:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2e06a66b-66fc-47d1-9de5-3d1d9cae82d0",
        "parentId" : "56a80c1d-dd03-447d-b6fe-debc00eebc4b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Looks like this returns something different, will have to keep digging",
        "createdAt" : "2019-07-15T15:40:20Z",
        "updatedAt" : "2019-07-23T23:07:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbbae14075367b2324e8e3c599b5595ba4c2a685",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +3477,3481 @@                    self[k1] = value[k2]\n            else:\n                indexer = self.loc._get_listlike_indexer(\n                    key, axis=1, raise_missing=False\n                )[1]"
  },
  {
    "id" : "37cde06d-88a3-470e-acaa-e1371ee489c1",
    "prId" : 27702,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27702#pullrequestreview-269888942",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7430f5d9-580c-455b-8e44-dc5017b6d7fc",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I suspect that this branch is under-tested... Could you update your new test to also assert the result of the `concat` operation?",
        "createdAt" : "2019-08-01T21:29:19Z",
        "updatedAt" : "2019-08-02T16:38:01Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6952762b685c6785e24428683059076b01d1ec2",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +7223,7227 @@                    return res.reindex(self.index, copy=False)\n                else:\n                    return concat(\n                        frames, axis=1, join=how, verify_integrity=True, sort=sort\n                    )"
  },
  {
    "id" : "b6cccdfe-e243-41a5-be5f-7e19753c66cf",
    "prId" : 28010,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28010#pullrequestreview-282984372",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "444c07ab-9924-45e6-848d-24cfa0aa9f87",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think the naming here is a bit confusing. `result` is first a `Series`, and then it's this `DataFrame`. I don't think the previous `result` is being named correctly.\r\n\r\nAlso thinking if this can be implemented with method chaining, I think that usually improves readability. I mean something like:\r\n```python\r\ndf =self.reset_index(drop=True)\r\nreturn (\r\n    df.drop([column], axis=1)\r\n      .join(df[column].explode())\r\n      .set_index(self.index.take(df.index))\r\n      .reindex(columns=self.columns, copy=False))\r\n```\r\n\r\nIn any case, this is looking much better at every iteration.",
        "createdAt" : "2019-09-03T13:04:08Z",
        "updatedAt" : "2019-09-15T23:06:08Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "24737730-bef6-44fd-91a8-1fe0b2e0ae12",
        "parentId" : "444c07ab-9924-45e6-848d-24cfa0aa9f87",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "Yes, that's better - I still need to break it up slightly though, don't I? Else in `self.index.take(df.index)`, `df` isn't the right length.\r\n\r\nAnyway, naming cleared up",
        "createdAt" : "2019-09-03T13:14:22Z",
        "updatedAt" : "2019-09-15T23:06:08Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      }
    ],
    "commit" : "9db496266f158eeee5ff7a091aebcfa7dadcda57",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +6270,6274 @@        df = self.reset_index(drop=True)\n        result = df[column].explode()\n        result = df.drop([column], axis=1).join(result)\n        result.index = self.index.take(result.index)\n        result = result.reindex(columns=self.columns, copy=False)"
  },
  {
    "id" : "4a541be4-186b-4e52-86bb-ad0dd39641d8",
    "prId" : 28027,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28027#pullrequestreview-282705700",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72499b97-af8f-4720-b9be-fa43b0e326c0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a full doc-string here (Paramaters / Returns)",
        "createdAt" : "2019-09-02T21:23:28Z",
        "updatedAt" : "2019-09-12T19:56:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "cffa62442a07acfde80719631d8835257b4107ab",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +5364,5368 @@        result : DataFrame\n        func : binary operator\n\n        Returns\n        -------"
  },
  {
    "id" : "6cba1209-df51-4990-850a-91ceaecad8aa",
    "prId" : 28027,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28027#pullrequestreview-287675400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5db6a15f-2a1e-4315-9558-0fb3a0ab64ea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "finalize doesn't do really anything for frames, prob can't hurt though",
        "createdAt" : "2019-09-02T21:25:11Z",
        "updatedAt" : "2019-09-12T19:56:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d511252b-5845-487f-86ae-c735767a0027",
        "parentId" : "5db6a15f-2a1e-4315-9558-0fb3a0ab64ea",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "especially in the frame+frame case it isn't obvious that is correct; I'd prefer to revisit",
        "createdAt" : "2019-09-02T23:34:18Z",
        "updatedAt" : "2019-09-12T19:56:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b53f5493-e153-4518-b3ac-ffb2fe9bda56",
        "parentId" : "5db6a15f-2a1e-4315-9558-0fb3a0ab64ea",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In principle we should finalize I think, but since it was not done right now, fine to leave it for later?",
        "createdAt" : "2019-09-12T20:09:36Z",
        "updatedAt" : "2019-09-12T20:09:36Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "cffa62442a07acfde80719631d8835257b4107ab",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +5379,5383 @@        out.columns = self.columns\n        return out\n        # TODO: finalize?  we do for SparseDataFrame\n\n    def combine(self, other, func, fill_value=None, overwrite=True):"
  },
  {
    "id" : "30369ffc-26f6-4b76-98a7-a5a53c08489e",
    "prId" : 28036,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28036#pullrequestreview-279343838",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df5ef7fe-f3fb-4f3b-b3ce-3fefed49c1ba",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Why do we want to remove the asserts here? If someone is that set on getting this optimization couldn't they just use the -OO flag?",
        "createdAt" : "2019-08-25T16:23:24Z",
        "updatedAt" : "2019-08-25T16:23:27Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "44b8ee8f-57ad-49aa-8f8d-d65878fbf2a1",
        "parentId" : "df5ef7fe-f3fb-4f3b-b3ce-3fefed49c1ba",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i put these assertions in when trying to understand the ops code a while back.  having a comment to the same effect performs the same task for the reader.",
        "createdAt" : "2019-08-25T16:29:42Z",
        "updatedAt" : "2019-08-25T16:29:42Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "08098ce6b5993556f024bf3f764fa0aea44c5137",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +5326,5330 @@    def _combine_match_index(self, other, func, level=None):\n        left, right = self.align(other, join=\"outer\", axis=0, level=level, copy=False)\n        # at this point we have `left.index.equals(right.index)`\n\n        if left._is_mixed_type or right._is_mixed_type:"
  },
  {
    "id" : "19702813-7839-4700-9ac9-9e19df99b87a",
    "prId" : 28215,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28215#pullrequestreview-318058222",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ff93d52-9825-4a2a-ae68-b67755389afc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "likely this would need to have a versioncahnged 1.0.0 here as well",
        "createdAt" : "2019-11-17T22:56:15Z",
        "updatedAt" : "2020-01-04T16:42:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5a4ba037-cffc-4380-8388-9f2b73af4c48",
        "parentId" : "4ff93d52-9825-4a2a-ae68-b67755389afc",
        "authorId" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "body" : "Should I specify what changed in the versions like this: \r\n\r\n```\r\n            You can refer to column names that contain spaces or operators by\r\n            surrounding them in backticks. This way you can also escape\r\n            names that start with a digit, or are a Python keyword. Basically\r\n            when it is not valid Python identifier.\r\n\r\n            For example, if one of your columns is called ``a a`` and you want\r\n            to sum it with ``b``, your query should be ```a a` + b``.\r\n\r\n            .. versionadded:: 0.25.0: Backtick quoting introduced.\r\n\r\n            .. versionadded:: 1.0.0: Expanding functionality for more than only spaces.\r\n```",
        "createdAt" : "2019-11-17T23:31:45Z",
        "updatedAt" : "2020-01-04T16:42:51Z",
        "lastEditedBy" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "tags" : [
        ]
      },
      {
        "id" : "461b34fb-a7ee-471c-9e99-a908a6e33935",
        "parentId" : "4ff93d52-9825-4a2a-ae68-b67755389afc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sure",
        "createdAt" : "2019-11-18T00:29:24Z",
        "updatedAt" : "2020-01-04T16:42:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fc1bdd57544fc7241ae73dd2832eb958747efc9",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +3073,3077 @@            ``@a + b``.\n\n            You can refer to column names that contain spaces or operators by\n            surrounding them in backticks. This way you can also escape\n            names that start with a digit, or those that  are a Python keyword."
  },
  {
    "id" : "ca4cba43-09ff-4ad2-bb7b-ea918f8541b8",
    "prId" : 28215,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28215#pullrequestreview-322320667",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1676eef-ba1d-491e-9c89-53a53c414e98",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a reference here to the python identifier docs",
        "createdAt" : "2019-11-20T13:17:22Z",
        "updatedAt" : "2020-01-04T16:42:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "76e74aef-1ff3-4112-b99c-f6e819be0893",
        "parentId" : "b1676eef-ba1d-491e-9c89-53a53c414e98",
        "authorId" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "body" : "OK",
        "createdAt" : "2019-11-25T14:33:51Z",
        "updatedAt" : "2020-01-04T16:42:51Z",
        "lastEditedBy" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fc1bdd57544fc7241ae73dd2832eb958747efc9",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +3144,3148 @@        *Backtick quoted variables*\n\n        Backtick quoted variables are parsed as literal Python code and\n        are converted internally to a Python valid identifier.\n        This can lead to the following problems."
  },
  {
    "id" : "9e5911e2-8843-496d-acff-021ea6b892ac",
    "prId" : 28394,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28394#pullrequestreview-476649277",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77c37b84-7d01-4fc7-84e0-630318f7a8c8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is this passed as an argument here?",
        "createdAt" : "2020-08-26T21:59:31Z",
        "updatedAt" : "2020-09-01T13:55:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7bbf5366-faea-4e0a-aa69-950bc3b189a3",
        "parentId" : "77c37b84-7d01-4fc7-84e0-630318f7a8c8",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "`DataFrame.insert` already had `allows_duplicates`. We just need to check if it's compatible with the attribute on the NDFrame.\r\n",
        "createdAt" : "2020-08-27T12:01:56Z",
        "updatedAt" : "2020-09-01T13:55:21Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf23fdad7035707f49bd571cf5b9d4d682c9d01f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +3661,3665 @@        allow_duplicates : bool, optional\n        \"\"\"\n        if allow_duplicates and not self.flags.allows_duplicate_labels:\n            raise ValueError(\n                \"Cannot specify 'allow_duplicates=True' when \""
  },
  {
    "id" : "1c26f48a-bcc4-4526-97f7-bcd07d011f81",
    "prId" : 28447,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28447#pullrequestreview-290858258",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16ece7fb-a610-426a-a87f-68a4629c985a",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm just thinking this over but can we just more succinctly write this as:\r\n\r\n```\r\nextracted_dtypes = list(filter(lambda x: issubclass(x.type, tuple(dtypes_set)), unique_dtypes))\r\n```\r\n\r\n? I think that one liner could replace a lot of the code here",
        "createdAt" : "2019-09-19T19:00:08Z",
        "updatedAt" : "2019-09-19T19:00:53Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "3d4ef7af-99db-4029-ab3e-ae37d2bdf5fd",
        "parentId" : "16ece7fb-a610-426a-a87f-68a4629c985a",
        "authorId" : "1a0a48d0-854b-415a-87ea-54cc71c807cb",
        "body" : "I always thought that list comprehensions should be preferred in python. Should this be a function of dtypes_set? Right now this seems to be needed. I was just trying to extract all the data in one go and then do intersections afterwards: but the dtypes_set typically has more abstract types then the dtypes at hand.",
        "createdAt" : "2019-09-19T21:13:21Z",
        "updatedAt" : "2019-09-19T21:32:51Z",
        "lastEditedBy" : "1a0a48d0-854b-415a-87ea-54cc71c807cb",
        "tags" : [
        ]
      },
      {
        "id" : "91185727-d98e-4295-b206-86819aed59fd",
        "parentId" : "16ece7fb-a610-426a-a87f-68a4629c985a",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea. It just seems unnecessarily verbose the way it is now so I think can be condensed to help readability (though even as is its a good improvement over existing)",
        "createdAt" : "2019-09-19T21:30:26Z",
        "updatedAt" : "2019-09-19T21:30:27Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "09a4c381-87e7-4549-bc3e-1b97bf34b1ec",
        "parentId" : "16ece7fb-a610-426a-a87f-68a4629c985a",
        "authorId" : "1a0a48d0-854b-415a-87ea-54cc71c807cb",
        "body" : "see comment below",
        "createdAt" : "2019-09-19T21:39:33Z",
        "updatedAt" : "2019-09-19T21:39:34Z",
        "lastEditedBy" : "1a0a48d0-854b-415a-87ea-54cc71c807cb",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ddb53c66731f0b611960ec2ccbad5f6b1978c08",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +3484,3488 @@        keep_these = np.full(self.shape[1], True)\n\n        def extract_unique_dtypes_from_dtypes_set(\n            dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray\n        ) -> List[Dtype]:"
  },
  {
    "id" : "ae307381-d0c8-4017-8ce6-cdccc3968f12",
    "prId" : 28447,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28447#pullrequestreview-290858319",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c7c42a6-ba69-4114-b86a-b38340f70295",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "If above is true would be nice to not duplicate this call in both branches",
        "createdAt" : "2019-09-19T19:00:39Z",
        "updatedAt" : "2019-09-19T19:00:53Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f55a1662-b90f-49c1-aea9-d22d20e63b31",
        "parentId" : "2c7c42a6-ba69-4114-b86a-b38340f70295",
        "authorId" : "1a0a48d0-854b-415a-87ea-54cc71c807cb",
        "body" : "see comment below",
        "createdAt" : "2019-09-19T21:39:42Z",
        "updatedAt" : "2019-09-19T21:39:42Z",
        "lastEditedBy" : "1a0a48d0-854b-415a-87ea-54cc71c807cb",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ddb53c66731f0b611960ec2ccbad5f6b1978c08",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +3497,3501 @@\n        if include:\n            included_dtypes = extract_unique_dtypes_from_dtypes_set(\n                include, unique_dtypes\n            )"
  },
  {
    "id" : "3f07434f-8440-4c36-b062-b6cd7862c0e4",
    "prId" : 28453,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28453#pullrequestreview-289028520",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4d3fba9-5a12-4005-a79b-ec351d7cba29",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I think i made a mistake with the alias naming of `formatters_type` using python variable convention. we should agree a convention for type aliases. Typeshed tends to use Pascal case with a leading underscore since the aliases are not intended to be public.\r\n\r\nalso if we are reusing a alias, it could be moved to pandas._typing. in this case, the leading underscore should probably not be included as the alias is intended to be imported by other modules.\r\n\r\nthe dilemma here, is that following these strict conventions, results in a mixture of type aliases with underscores and without.  \r\n\r\n@WillAyd ?",
        "createdAt" : "2019-09-16T09:19:05Z",
        "updatedAt" : "2019-09-18T06:14:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "c8c18ee2-bda4-43cd-8d5e-7748357b2ad6",
        "parentId" : "a4d3fba9-5a12-4005-a79b-ec351d7cba29",
        "authorId" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "body" : "In typescript it's common practice to indicate type interface with is leading `I`, sometimes a leading `_I`. Interface (similar to type alias in python) for some variable `Foo` will be named `IFoo` or `_IFoo`. It would be nice to have some similar convention here as well.",
        "createdAt" : "2019-09-16T09:25:43Z",
        "updatedAt" : "2019-09-18T06:14:28Z",
        "lastEditedBy" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "tags" : [
        ]
      },
      {
        "id" : "d9d9bc27-9295-41cd-8521-44e130583ed6",
        "parentId" : "a4d3fba9-5a12-4005-a79b-ec351d7cba29",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Not sure I've come across anything official but most everything in the stdlib typing module is camel case, so I think can follow that format.\r\n\r\nI'm OK with this being a follow up PR, though welcome to tackle here as well if you like",
        "createdAt" : "2019-09-16T15:44:24Z",
        "updatedAt" : "2019-09-18T06:14:28Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "571d088f-38f1-4e38-9d4c-e7b86bc8d2e8",
        "parentId" : "a4d3fba9-5a12-4005-a79b-ec351d7cba29",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Somewhat of a sidebar but I do find it confusing for the name to be `formatters_type` - would that be the same as `Type[formatters]`? If so I think should leverage the latter, and if not I think it might be confusing to append `_type` to things",
        "createdAt" : "2019-09-16T15:45:35Z",
        "updatedAt" : "2019-09-18T06:14:28Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "74f7e591-6e95-4141-aa0a-6af4c54b5dc0",
        "parentId" : "a4d3fba9-5a12-4005-a79b-ec351d7cba29",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "that's the other mistake i made in choosing a name!\r\n\r\nprobably `formatters` argument should have type `Formatters` if using an alias\r\n\r\nand `float_format` argument would have type `FloatFormat`\r\n\r\nfairly simple rule as long as no conflicts with classses.",
        "createdAt" : "2019-09-16T16:29:11Z",
        "updatedAt" : "2019-09-18T06:14:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "582ccf57-2044-41a5-9705-6a69116a46ee",
        "parentId" : "a4d3fba9-5a12-4005-a79b-ec351d7cba29",
        "authorId" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "body" : "Will open a new PR sometime later. I will open a issue now for reminder, will check for any other similar names too.",
        "createdAt" : "2019-09-17T05:19:58Z",
        "updatedAt" : "2019-09-18T06:14:28Z",
        "lastEditedBy" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "tags" : [
        ]
      },
      {
        "id" : "7bade0d0-0832-4275-9c4f-7e5f3d304aa4",
        "parentId" : "a4d3fba9-5a12-4005-a79b-ec351d7cba29",
        "authorId" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "body" : "#28480 ",
        "createdAt" : "2019-09-17T05:42:21Z",
        "updatedAt" : "2019-09-18T06:14:28Z",
        "lastEditedBy" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b13f9363d5458a168f884ad7c92734b9b1ad6d18",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +723,727 @@        index: bool = True,\n        na_rep: str = \"NaN\",\n        formatters: Optional[fmt.formatters_type] = None,\n        float_format: Optional[fmt.float_format_type] = None,\n        sparsify: Optional[bool] = None,"
  },
  {
    "id" : "b4d9956e-198c-4d9d-ba86-19266e2cb6a7",
    "prId" : 28453,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28453#pullrequestreview-288752973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9d06b0a-e45b-48ed-b922-6e24dd5065d0",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "i wonder whether this method and `_repr_fits_horizontal_` should belong in this module.",
        "createdAt" : "2019-09-16T09:43:57Z",
        "updatedAt" : "2019-09-18T06:14:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "17ff8069-40f5-4fac-951b-18c95e7aee53",
        "parentId" : "b9d06b0a-e45b-48ed-b922-6e24dd5065d0",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea I think open to moving if it makes sense elsewhere (separate PR)",
        "createdAt" : "2019-09-16T15:46:06Z",
        "updatedAt" : "2019-09-18T06:14:28Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "94629e6c-f241-44f4-863b-0e85415490fb",
        "parentId" : "b9d06b0a-e45b-48ed-b922-6e24dd5065d0",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> separate PR\r\n\r\nagreed, no action required here",
        "createdAt" : "2019-09-16T16:31:38Z",
        "updatedAt" : "2019-09-18T06:14:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "b13f9363d5458a168f884ad7c92734b9b1ad6d18",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +560,564 @@    # Rendering Methods\n\n    def _repr_fits_vertical_(self) -> bool:\n        \"\"\"\n        Check length against max_rows."
  },
  {
    "id" : "a1bfb008-6df1-4a3c-bf9d-973e1bf9679e",
    "prId" : 28692,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28692#pullrequestreview-297022949",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "399dd213-5706-434a-a517-1dc6f0449277",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a versionadded 1.0 tag here",
        "createdAt" : "2019-10-03T17:15:04Z",
        "updatedAt" : "2019-10-13T11:51:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed156f73f55b07485fb001b054c327b032cbf1c6",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +2224,2228 @@            A ``border=border`` attribute is included in the opening\n            `<table>` tag. Default ``pd.options.display.html.border``.\n        encoding : str, default \"utf-8\"\n            Set character encoding\n"
  },
  {
    "id" : "2bbd633b-dd1c-45a5-877b-1268f95dc05c",
    "prId" : 28834,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28834#pullrequestreview-307532267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a85f89a-2d05-4ac7-bda8-e270c58594be",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this actually should be is_list_like",
        "createdAt" : "2019-10-11T12:40:04Z",
        "updatedAt" : "2019-11-16T20:08:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "829d6cfb-222e-4578-8f80-fd7155dfc8b2",
        "parentId" : "6a85f89a-2d05-4ac7-bda8-e270c58594be",
        "authorId" : "9164c634-311a-47a7-96af-8590b019e4ae",
        "body" : "I took a look at is_list_like - it seems to accept any `abc.Iterable` except `str, bytes`, `pd.Series` and Numpy arrays. The docs for the append method don't mention Numpy arrays nor tuples as valid inputs `other : DataFrame or Series/dict-like object, or list of these`.\r\n\r\nAny tuple currently getting passed to the append method would fail at this part https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L7017-L7018 with a `TypeError: can only concatenate list (not \"tuple\") to list`.\r\n\r\nI'm not entirely sure why that condition is checking for a tuple as it will always fail. It might make more sense to remove it.\r\n\r\n@jreback thoughts? and whether it still makes sense to make a test that parametrizes across empty tuple, list and array",
        "createdAt" : "2019-10-12T23:33:55Z",
        "updatedAt" : "2019-11-16T20:08:06Z",
        "lastEditedBy" : "9164c634-311a-47a7-96af-8590b019e4ae",
        "tags" : [
        ]
      },
      {
        "id" : "4fa39242-9e69-47b2-bd91-ce62a81cacb0",
        "parentId" : "6a85f89a-2d05-4ac7-bda8-e270c58594be",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually try to replace this with is_list_like and see if anything fails; ",
        "createdAt" : "2019-10-25T13:04:22Z",
        "updatedAt" : "2019-11-16T20:08:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "243d1523-5443-4158-91a5-88c296ff3847",
        "parentId" : "6a85f89a-2d05-4ac7-bda8-e270c58594be",
        "authorId" : "9164c634-311a-47a7-96af-8590b019e4ae",
        "body" : "replacing it with `is_list_like` causes test cases to fail in the next line of my current change `if not other` when a DataFrame gets passed in.\r\n\r\n```py\r\n        elif is_list_like(other):\r\n            if not other:\r\n                pass\r\n            elif not isinstance(other[0], DataFrame):\r\n                other = DataFrame(other)\r\n                if (self.columns.get_indexer(other.columns) >= 0).all():\r\n                    other = other.reindex(columns=self.columns)\r\n```\r\n\r\nI'm not sure of a check that would return False in this case (where `other` is empty) without resorting to another `isinstance` check. Essentially this block is handling the case where `other` should be a list of Series/dict",
        "createdAt" : "2019-10-26T16:07:11Z",
        "updatedAt" : "2019-11-16T20:08:06Z",
        "lastEditedBy" : "9164c634-311a-47a7-96af-8590b019e4ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a5856be7b7c355fc1a3aba6e73766f8cefce98e",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +6944,6948 @@            if not self.columns.equals(combined_columns):\n                self = self.reindex(columns=combined_columns)\n        elif isinstance(other, list):\n            if not other:\n                pass"
  },
  {
    "id" : "b90eaef0-71d4-46cf-87f7-b0eeb9c96592",
    "prId" : 28876,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28876#pullrequestreview-313616210",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64e1cec6-809b-452c-8b8d-f4f0ff616cb1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you change this to use .format() (above)",
        "createdAt" : "2019-10-30T12:18:14Z",
        "updatedAt" : "2020-01-02T20:42:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6abc930e-8981-4690-a0db-c11b48e733d0",
        "parentId" : "64e1cec6-809b-452c-8b8d-f4f0ff616cb1",
        "authorId" : "28b60f4e-1584-4e58-905f-f41677604804",
        "body" : "Makes sense, added it",
        "createdAt" : "2019-11-07T20:29:07Z",
        "updatedAt" : "2020-01-02T20:42:29Z",
        "lastEditedBy" : "28b60f4e-1584-4e58-905f-f41677604804",
        "tags" : [
        ]
      }
    ],
    "commit" : "4547ed6de28cdbc6ce939af146962be1b777d0a2",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +2371,2375 @@        def _verbose_repr():\n            lines.append(f\"Data columns (total {len(self.columns)} columns):\")\n\n            id_head = \" # \"\n            column_head = \"Column\""
  },
  {
    "id" : "23e4bf18-f78d-475c-b373-f68cc29fa019",
    "prId" : 29116,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29116#pullrequestreview-348319118",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d24561e-ebf8-4681-9121-10aadb9015d2",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Why did this need to change?",
        "createdAt" : "2020-01-24T23:28:27Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "76bca4d4-204e-4338-a2c9-9eb1ab8e070c",
        "parentId" : "0d24561e-ebf8-4681-9121-10aadb9015d2",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "this is needed to make it optional, so that e.g. `df.agg(bar=('a', max))` could be handled correctly",
        "createdAt" : "2020-01-25T09:58:16Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "05921afef8d10eabd0917ba0fbeeefc18ae7d511",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +7303,7307 @@        versionadded=\"\\n.. versionadded:: 0.20.0\\n\",\n    )\n    def aggregate(self, func=None, axis=0, *args, **kwargs):\n        axis = self._get_axis_number(axis)\n"
  },
  {
    "id" : "0cf267ad-79bf-42e0-93c5-b1e2a8c07c0f",
    "prId" : 29116,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29116#pullrequestreview-348347094",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "161dfac0-f047-4c33-9929-3d2c1b2dd571",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you make another function to do this, e.g. relable results.\r\n\r\nan alternative to having 2 functions, is actually to have `reconstruct_func` return a class which keeps the state\r\n\r\ne.g. \r\n\r\n```\r\nreconstructor = reconstruct_func(.....)\r\n\r\n# the _aggregate / apply logic\r\n\r\nreturn reconstructor.get_result(result)",
        "createdAt" : "2020-01-25T15:50:47Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e5f05b86-7f62-4175-a8f2-814f2b43501c",
        "parentId" : "161dfac0-f047-4c33-9929-3d2c1b2dd571",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "nice idea!\r\n\r\nI have been thinking about it, and for now, i will go for the first option. Since in generic and frame, there is slightly different manipulation after `_aggregate / apply logic`, and not sure if `resample/rollin` will also be slightly different, so I will keep this in mind and once all nested renaming is done, I will try to come up with a clean PR to optimise it!",
        "createdAt" : "2020-01-25T21:46:26Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "05921afef8d10eabd0917ba0fbeeefc18ae7d511",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +7320,7324 @@            return self.apply(func, axis=axis, args=args, **kwargs)\n\n        if relabeling:\n            # This is to keep the order to columns occurrence unchanged, and also\n            # keep the order of new columns occurrence unchanged"
  },
  {
    "id" : "64fe25d8-418f-4519-b7f1-0a6fe3cdeccc",
    "prId" : 29140,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29140#pullrequestreview-304877223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6bdabf8e-ee21-4dbc-bd10-3f65fa75457b",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Change here was to be explicit about what is accepted",
        "createdAt" : "2019-10-21T21:11:44Z",
        "updatedAt" : "2020-01-09T17:06:35Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "559bdb55-0302-4b55-b433-ecaaeda94b45",
        "parentId" : "6bdabf8e-ee21-4dbc-bd10-3f65fa75457b",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "+1 to being explicit. The only reason we had *args, **kwargs in the first place was to support the ambiguous case.",
        "createdAt" : "2019-10-21T22:02:20Z",
        "updatedAt" : "2020-01-09T17:06:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5d812cfdf0c3178d8415cea396c69780347a3bf",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +3987,3991 @@        [(\"copy\", True), (\"inplace\", False), (\"level\", None), (\"errors\", \"ignore\")],\n    )\n    def rename(\n        self,\n        mapper: Optional[Renamer] = None,"
  },
  {
    "id" : "87c3627e-cdcc-413e-a30b-623b0f88a1cf",
    "prId" : 29334,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29334#pullrequestreview-370566402",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c721df0-cb1f-4eb8-a692-7240a98ee5ea",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "it looks like you're also calling this inside _get_setitem_indexer; do you need to also call it here?",
        "createdAt" : "2020-03-04T03:30:01Z",
        "updatedAt" : "2020-03-14T19:40:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5066f03d-1d65-4579-9315-2363a5107fdc",
        "parentId" : "8c721df0-cb1f-4eb8-a692-7240a98ee5ea",
        "authorId" : "918a1605-8583-422d-a500-13bfb42eee2b",
        "body" : "`_get_setitem_indexer` is not called in this code path",
        "createdAt" : "2020-03-06T19:19:49Z",
        "updatedAt" : "2020-03-14T19:40:59Z",
        "lastEditedBy" : "918a1605-8583-422d-a500-13bfb42eee2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "26ba2a998f8d593f5dbc7d0b5a37905ec1e8f3f1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2688,2692 @@                    self[k1] = value[k2]\n            else:\n                self.loc._ensure_listlike_indexer(key, axis=1)\n                indexer = self.loc._get_listlike_indexer(\n                    key, axis=1, raise_missing=False"
  },
  {
    "id" : "f106d866-60a6-4337-a585-1d447cbe7bbe",
    "prId" : 29492,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29492#pullrequestreview-314479913",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2be88d5-4178-4353-9a1b-f4ec068c01c9",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "may also need to update the docstring here",
        "createdAt" : "2019-11-08T21:52:06Z",
        "updatedAt" : "2019-11-12T23:55:15Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a175f3d38783bab17bd3776f7a25bbc96571638",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +3541,3545 @@\n        for k, v in kwargs.items():\n            data[k] = com.apply_if_callable(v, data)\n        return data\n"
  },
  {
    "id" : "4be2b7a7-6c8f-4d42-babb-6f70c7308df4",
    "prId" : 29847,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29847#pullrequestreview-337178635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f1d24db-eb00-4ca3-8e95-8f69ce1cc93e",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Planning to keep these asserts in?",
        "createdAt" : "2019-12-30T17:21:25Z",
        "updatedAt" : "2019-12-30T17:23:59Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "9370b1a88412aa98364c7acf264a53a02cc86003",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +7676,7680 @@            #  simple case where we can use BlockManager._reduce\n            res = df._data.reduce(op, axis=1, skipna=skipna, **kwds)\n            assert isinstance(res, dict)\n            if len(res):\n                assert len(res) == max(list(res.keys())) + 1, res.keys()"
  },
  {
    "id" : "319b2224-6f93-46cb-9154-04e102bca71c",
    "prId" : 29941,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29941#pullrequestreview-344950359",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8287cf5-9c7a-40ea-ac5c-77cab50e3a5f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is a bit non-standard, why are you not using ``is_datetime64_ns_dtype`` ?",
        "createdAt" : "2019-12-01T22:52:48Z",
        "updatedAt" : "2020-02-09T17:38:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "05a99e37-53c3-4d1f-b422-d353579e7fc9",
        "parentId" : "b8287cf5-9c7a-40ea-ac5c-77cab50e3a5f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "or rather select_dtypes here?",
        "createdAt" : "2020-01-18T16:16:30Z",
        "updatedAt" : "2020-02-09T17:38:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "43cc7845244fb6e01d41e2c2aa935453602b6fbe",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +7929,7933 @@    ):\n\n        dtype_is_dt = self.dtypes.apply(lambda x: x.kind == \"M\")\n        if numeric_only is None and name in [\"mean\", \"median\"] and dtype_is_dt.any():\n            warnings.warn("
  },
  {
    "id" : "fd06f2e2-1456-4a25-9128-ec6f46c5cb85",
    "prId" : 29941,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29941#pullrequestreview-336821129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb4313aa-7009-48fe-ac04-4bed52e7ab6f",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Users will need an option to actually do anything about this now, and silence the warning.\r\n\r\nIIUC, we would need something like `datetime_is_numeric=None/True/False`, that's available to the user (in DataFrame.median) and passed through to here. And we would only warn for `datetime_is_numeric=None`.",
        "createdAt" : "2019-12-05T19:52:16Z",
        "updatedAt" : "2020-02-09T17:38:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "3ce1e7a8-1f28-44d8-9131-c09c0c6a4843",
        "parentId" : "bb4313aa-7009-48fe-ac04-4bed52e7ab6f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "id like to move away from having a `numeric_only=None` case or others like it.  my preference would be to have users do something like `df.select_dtypes(exclude=\"datetime\").mean()`",
        "createdAt" : "2019-12-08T01:40:12Z",
        "updatedAt" : "2020-02-09T17:38:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "42784ec3-e594-4d1f-992c-7926fc79cce1",
        "parentId" : "bb4313aa-7009-48fe-ac04-4bed52e7ab6f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I may have misread earlier. `numeric_only=False` will include datetime columns in these reductions, without a warning? So we should be OK here.\r\n\r\n> id like to move away from having a numeric_only=None case or others like it.\r\n\r\nI share that goal.",
        "createdAt" : "2019-12-17T16:13:53Z",
        "updatedAt" : "2020-02-09T17:38:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "e67955ab-01ac-452d-931f-641fc4312127",
        "parentId" : "bb4313aa-7009-48fe-ac04-4bed52e7ab6f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok with the warning, we would need a deprecation cycle on numeric_only itself (ok as separate PR).",
        "createdAt" : "2019-12-26T00:03:26Z",
        "updatedAt" : "2020-02-09T17:38:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0a902867-3ebb-461e-afc6-c1bc5c7c1b05",
        "parentId" : "bb4313aa-7009-48fe-ac04-4bed52e7ab6f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ideally can we move this code (and to be honest _reduce *stuff* to nanops / ops) very messy here.",
        "createdAt" : "2019-12-27T16:49:44Z",
        "updatedAt" : "2020-02-09T17:38:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7dc9769f-f8f8-4057-b4b4-4918d6a90902",
        "parentId" : "bb4313aa-7009-48fe-ac04-4bed52e7ab6f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "the cleanup of _reduce that im looking forward to comes after #29847.",
        "createdAt" : "2019-12-27T16:54:23Z",
        "updatedAt" : "2020-02-09T17:38:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "490721db-53f0-401f-933a-7dc426e8b181",
        "parentId" : "bb4313aa-7009-48fe-ac04-4bed52e7ab6f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k",
        "createdAt" : "2019-12-27T16:54:59Z",
        "updatedAt" : "2020-02-09T17:38:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "43cc7845244fb6e01d41e2c2aa935453602b6fbe",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +7931,7935 @@        dtype_is_dt = self.dtypes.apply(lambda x: x.kind == \"M\")\n        if numeric_only is None and name in [\"mean\", \"median\"] and dtype_is_dt.any():\n            warnings.warn(\n                \"DataFrame.mean and DataFrame.median with numeric_only=None \"\n                \"will include datetime64 and datetime64tz columns in a \""
  },
  {
    "id" : "fc44f919-5294-46a1-ad84-7bea1f17caf1",
    "prId" : 30021,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30021#pullrequestreview-326774340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57848ad3-d6ef-4874-a932-73c269f521fd",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "this appears to have a missing space in the message. do we have a test for this message?",
        "createdAt" : "2019-12-04T11:35:52Z",
        "updatedAt" : "2019-12-06T00:05:02Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a9c6f0504dbaea65427214a89000e9febf0313f",
    "line" : 328,
    "diffHunk" : "@@ -1,1 +7598,7602 @@                msg = (\n                    f\"Generating numeric_only data with filter_type {filter_type} \"\n                    \"not supported.\"\n                )\n                raise NotImplementedError(msg)"
  },
  {
    "id" : "ddd26577-4855-4dba-b0e4-863f3abc88a5",
    "prId" : 30021,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30021#pullrequestreview-327079257",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "830e18cb-e848-42e9-a235-e38de0876bc8",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "is None a valid value in a sequence of labels?",
        "createdAt" : "2019-12-04T11:40:42Z",
        "updatedAt" : "2019-12-06T00:05:02Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "c5cfa1f4-db2a-407a-9df8-9c22e7944b48",
        "parentId" : "830e18cb-e848-42e9-a235-e38de0876bc8",
        "authorId" : "b092e0c6-b4e4-4ef2-a02d-1523c0b23f88",
        "body" : "It is, check this out:\r\n```\r\ndf = pd.DataFrame({None:[1,2,2], 'col1':[1,2,3]})\r\ndf.drop_duplicates(subset=[None])\r\n```\r\noutputs:\r\n\r\n```\r\n   NaN  col1\r\n0    1     1\r\n1    2     2\r\n```",
        "createdAt" : "2019-12-04T17:47:12Z",
        "updatedAt" : "2019-12-06T00:05:02Z",
        "lastEditedBy" : "b092e0c6-b4e4-4ef2-a02d-1523c0b23f88",
        "tags" : [
        ]
      },
      {
        "id" : "831d9330-09fd-48f2-b10c-cbc7052aa2c7",
        "parentId" : "830e18cb-e848-42e9-a235-e38de0876bc8",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "```suggestion\r\n        subset: Optional[Union[Hashable, Sequence[Optional[Hashable]]]] = None,\r\n```\r\n\r\nshould probably be Sequence[Optional[Hashable]] in that case.\r\n",
        "createdAt" : "2019-12-04T18:59:59Z",
        "updatedAt" : "2019-12-06T00:05:02Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a9c6f0504dbaea65427214a89000e9febf0313f",
    "line" : 241,
    "diffHunk" : "@@ -1,1 +4593,4597 @@    def drop_duplicates(\n        self,\n        subset: Optional[Union[Hashable, Sequence[Hashable]]] = None,\n        keep: Union[str, bool] = \"first\",\n        inplace: bool = False,"
  },
  {
    "id" : "7a8da0b5-ec51-4ef8-9173-4d7779229630",
    "prId" : 30091,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30091#pullrequestreview-334241661",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f89119f-85b0-48c7-a380-2a05d9c4c452",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "IIRC the single-column case could be done without this casting.  think its worth special-casing?",
        "createdAt" : "2019-12-06T18:16:41Z",
        "updatedAt" : "2019-12-27T01:11:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "152d1938-4495-47c4-959d-997ede1cc39a",
        "parentId" : "5f89119f-85b0-48c7-a380-2a05d9c4c452",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I don't think it can be done without casting in general. We'll still need to reshape the `(N, 1)` to `(1, N)`.",
        "createdAt" : "2019-12-06T19:19:02Z",
        "updatedAt" : "2019-12-27T01:11:12Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c1290fa1-e97f-49c4-abbd-72a5cea727c9",
        "parentId" : "5f89119f-85b0-48c7-a380-2a05d9c4c452",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "im pretty sure i did this in the other PR, something like:\r\n\r\n```\r\nvalues = self._data.blocks[0].values\r\nnew_vals = [values[[n]] for n in range(len(values))]\r\n```\r\n\r\n(of course, if we had 2D EAs...)",
        "createdAt" : "2019-12-06T19:41:15Z",
        "updatedAt" : "2019-12-27T01:11:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9df445d8-850f-47aa-aff3-75ed0177e072",
        "parentId" : "5f89119f-85b0-48c7-a380-2a05d9c4c452",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "So, we can avoid casting to an ndarray by making ``N * P`` length-1 `__getitem__` calls, which makes `N * P` extension arrays, which are concatenated into `N` final EAs.\r\n\r\nMy prior expectation is that converting to an ndarray and doing `__getitem__` on that will be faster, and should have roughly the same amount of memory usage.",
        "createdAt" : "2019-12-09T15:41:27Z",
        "updatedAt" : "2019-12-27T01:11:12Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b8b98757-8251-4161-b19d-aa27b18e5559",
        "parentId" : "5f89119f-85b0-48c7-a380-2a05d9c4c452",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "what is `P` here?  in the end this probably isn't worth bikeshedding (except to add to the pile of \"reasons why EAs should support 2D\")",
        "createdAt" : "2019-12-10T00:51:45Z",
        "updatedAt" : "2019-12-27T01:11:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "cd0db199-2654-4eb3-9107-2c3104915fa2",
        "parentId" : "5f89119f-85b0-48c7-a380-2a05d9c4c452",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Number of columns.",
        "createdAt" : "2019-12-10T13:37:50Z",
        "updatedAt" : "2019-12-27T01:11:12Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "58164bc0-592b-41a8-8e19-0af03af0e389",
        "parentId" : "5f89119f-85b0-48c7-a380-2a05d9c4c452",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "right, i was specifically referring to single-column",
        "createdAt" : "2019-12-10T16:56:30Z",
        "updatedAt" : "2019-12-27T01:11:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "1725f97f-57ed-4972-bd9f-9993f65cea06",
        "parentId" : "5f89119f-85b0-48c7-a380-2a05d9c4c452",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'm OK with not-doing this optimization here, just want to make sure we're on the same page about what the available optimization is",
        "createdAt" : "2019-12-18T20:25:12Z",
        "updatedAt" : "2019-12-27T01:11:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d9daa8b676b6556dfa5c57058b156220afb312a",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +2591,2595 @@            dtype = dtypes[0]\n            arr_type = dtype.construct_array_type()\n            values = self.values\n\n            new_values = [arr_type._from_sequence(row, dtype=dtype) for row in values]"
  },
  {
    "id" : "0303d2bf-0ed3-4e62-a190-3ca1441a25ae",
    "prId" : 30091,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30091#pullrequestreview-329920922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50efa2b7-fb46-48f9-aa2e-b24d8aec278c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "don't we *still* need kwargs for this?",
        "createdAt" : "2019-12-10T13:41:57Z",
        "updatedAt" : "2019-12-27T01:11:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9e1b9523-972a-4dd0-9643-ae3054672418",
        "parentId" : "50efa2b7-fb46-48f9-aa2e-b24d8aec278c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "AFAICT, no. Neither `np.transpose` nor `ndarray.transpose` take additional keyword arguments.",
        "createdAt" : "2019-12-10T15:26:35Z",
        "updatedAt" : "2019-12-27T01:11:12Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d9daa8b676b6556dfa5c57058b156220afb312a",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +2496,2500 @@        Parameters\n        ----------\n        *args : tuple, optional\n            Accepted for compatibility with NumPy.\n        copy : bool, default False"
  },
  {
    "id" : "92a92c28-9438-4be5-9ca7-7641e00290e5",
    "prId" : 30091,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30091#pullrequestreview-329920327",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca791bda-93ef-4f30-8651-395a78082c98",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "versionadded tag",
        "createdAt" : "2019-12-10T13:42:07Z",
        "updatedAt" : "2019-12-27T01:11:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8dc6c6b1-e1a5-4dbd-8b0e-14a424de6303",
        "parentId" : "ca791bda-93ef-4f30-8651-395a78082c98",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "FYI, copy isn't new. It's been around for a long time I think (the docstring in NDFrame.transpose didn't have a versionadded).",
        "createdAt" : "2019-12-10T15:25:45Z",
        "updatedAt" : "2019-12-27T01:11:12Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d9daa8b676b6556dfa5c57058b156220afb312a",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +2499,2503 @@            Accepted for compatibility with NumPy.\n        copy : bool, default False\n            Whether to copy the data after transposing, even for DataFrames\n            with a single dtype.\n"
  },
  {
    "id" : "aa6c1f05-4c4f-445f-92d4-ffe7519983b3",
    "prId" : 30091,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30091#pullrequestreview-329840609",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9f24792-249f-402f-95ba-9a755f3a9998",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment on what the conditions mean here",
        "createdAt" : "2019-12-10T13:43:27Z",
        "updatedAt" : "2019-12-27T01:11:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d9daa8b676b6556dfa5c57058b156220afb312a",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +2586,2590 @@        # construct the args\n\n        dtypes = list(self.dtypes)\n        if self._is_homogeneous_type and dtypes and is_extension_array_dtype(dtypes[0]):\n            # We have EAs with the same dtype. We can preserve that dtype in transpose."
  },
  {
    "id" : "52991b0e-5243-4b7e-ac50-a965b4d651ee",
    "prId" : 30091,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30091#pullrequestreview-329924150",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f93b5362-789b-405b-af91-adb87b4cd2e3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "don't you think this is better located in pandas/core/reshape ? (and called as a helper function here)",
        "createdAt" : "2019-12-10T13:44:27Z",
        "updatedAt" : "2019-12-27T01:11:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5541f3c5-fc98-49d8-9cda-3a2bd3684aef",
        "parentId" : "f93b5362-789b-405b-af91-adb87b4cd2e3",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Maybe a slight preference for keeping it here just for readability. The reshape part is essentially just a list comprehension.\r\n\r\n```python\r\nvalues = self.values\r\nnew_values = [arr_type._from_sequence(row, dtype=dtype) for row in values]\r\n```\r\n\r\nwhich I don't think warrants its own function. I don't see anything places in `/core/reshape.py` that could use this. I believe those are reshaping to / from 1-D things. This is 2D -> 2D.\r\n\r\nBut happy to move it if you want / if you see other places that could use parts of this.",
        "createdAt" : "2019-12-10T15:30:31Z",
        "updatedAt" : "2019-12-27T01:11:12Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d9daa8b676b6556dfa5c57058b156220afb312a",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +2584,2588 @@        \"\"\"\n        nv.validate_transpose(args, dict())\n        # construct the args\n\n        dtypes = list(self.dtypes)"
  },
  {
    "id" : "d1a6f1c0-ea4b-4b62-adf8-8c879ef0c1bc",
    "prId" : 30091,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30091#pullrequestreview-335389099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2ace602-ac50-4024-a7ab-ee79bcab1c1e",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "if non-homogeneous, then `new_values` above is already a copy, can avoid re-copying here",
        "createdAt" : "2019-12-18T20:24:03Z",
        "updatedAt" : "2019-12-27T01:11:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "41370e99-c2b7-47da-bcea-22e7770d3483",
        "parentId" : "a2ace602-ac50-4024-a7ab-ee79bcab1c1e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Are we 100% sure about that? Or are there types distinct dtypes that `.values` can combine without copy?",
        "createdAt" : "2019-12-20T12:43:33Z",
        "updatedAt" : "2019-12-27T01:11:12Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "358a151d-8945-443c-843b-c52459547cff",
        "parentId" : "a2ace602-ac50-4024-a7ab-ee79bcab1c1e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "if non-homogeneous then we have multiple blocks, so multiple ndarrays that are going through `np.c_` or something like it, right?  AFAIK that has to allocate new data for the output.  are there corner cases were missing @shoyer?",
        "createdAt" : "2019-12-20T17:12:03Z",
        "updatedAt" : "2019-12-27T01:11:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d9daa8b676b6556dfa5c57058b156220afb312a",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +2601,2605 @@            new_values = self.values.T\n            if copy:\n                new_values = new_values.copy()\n            result = self._constructor(\n                new_values, index=self.columns, columns=self.index"
  },
  {
    "id" : "ab7b012d-648b-4d04-9bb0-59999d6cf912",
    "prId" : 30277,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30277#pullrequestreview-332291717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b368b48-f7ac-40f6-8b7c-adc698c57cea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "instead of ``_convert`` you can use``.infer_object()`` here ",
        "createdAt" : "2019-12-15T22:22:20Z",
        "updatedAt" : "2019-12-24T10:34:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5a08c79bffd1e4da1772655354ed8452f785d54",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +6765,6769 @@                combined_columns = self.columns.astype(object).append(idx_diff)\n            other = (\n                other.reindex(combined_columns, copy=False)\n                .to_frame()\n                .T.infer_objects()"
  }
]