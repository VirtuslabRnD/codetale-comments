[
  {
    "id" : "d27d3224-3408-4ecb-b969-f7277b6f532d",
    "prId" : 36955,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36955#pullrequestreview-537760602",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "606736ea-a5f9-476c-9f72-9a00866ff288",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string here (also a return type)",
        "createdAt" : "2020-11-15T17:28:36Z",
        "updatedAt" : "2020-11-25T16:46:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dbd1c95a-2ace-4422-9443-1a493333e3f9",
        "parentId" : "606736ea-a5f9-476c-9f72-9a00866ff288",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add here",
        "createdAt" : "2020-11-24T17:45:15Z",
        "updatedAt" : "2020-11-25T16:46:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6b120a1ff07e6a2f22f91b34155c8816febd3ff",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +158,162 @@    numpy.org/doc/stable/reference/arrays.classes.html#numpy.class.__array_ufunc__\n    \"\"\"\n    from pandas.core.generic import NDFrame\n    from pandas.core.internals import BlockManager\n"
  },
  {
    "id" : "ee162361-b828-4559-9cfb-dcc5ee8772bf",
    "prId" : 36955,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36955#pullrequestreview-530818423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc38d55a-d6f2-4735-95c0-cbcd04bf8c4f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ideally can you split this function up a bit (if easy)",
        "createdAt" : "2020-11-15T17:28:58Z",
        "updatedAt" : "2020-11-25T16:46:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6b120a1ff07e6a2f22f91b34155c8816febd3ff",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +216,220 @@    else:\n        reconstruct_axes = dict(zip(self._AXIS_ORDERS, self.axes))\n\n    if self.ndim == 1:\n        names = [getattr(x, \"name\") for x in inputs if hasattr(x, \"name\")]"
  },
  {
    "id" : "a11f549a-b322-47c4-a48e-d6119ebc99b9",
    "prId" : 39104,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39104#pullrequestreview-565373875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29e9a576-ab07-4ec0-8be3-ada0ffbd3d4e",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "np.ufunc currently resolves to `Any`. I would mothball this PR till we have numpy types.\r\n\r\nmaybe you could just remove the annotation for now so that the ignores can be removed.\r\n\r\nor test this with numpy 1.20.0rc2",
        "createdAt" : "2021-01-11T13:55:38Z",
        "updatedAt" : "2021-02-11T13:57:26Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "75a7a7049ed5703c9e295e9d79ff9ea7cae3433f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +229,233 @@\n\ndef array_ufunc(self, ufunc: np.ufunc, method: str, *inputs: Any, **kwargs: Any):\n    \"\"\"\n    Compatibility with numpy ufuncs."
  },
  {
    "id" : "94a05bee-f28b-4002-b25b-3f4afab38499",
    "prId" : 39239,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39239#pullrequestreview-571267547",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee921e9c-6032-4de7-9667-4c76e4d5cf25",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "make this a module level function.",
        "createdAt" : "2021-01-19T14:03:11Z",
        "updatedAt" : "2021-01-20T07:19:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ed00bb75ebfc4dbc7c294a3a8b6772cba4bb775",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +191,195 @@        first_frame = next(x for x in inputs if isinstance(x, DataFrame))\n\n        # check if the objects are aligned or not\n        non_aligned = sum(\n            not _is_aligned(first_frame, x) for x in inputs if isinstance(x, NDFrame)"
  },
  {
    "id" : "a93210c4-1f9b-47b2-aa13-0c12b6e554d6",
    "prId" : 39260,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39260#pullrequestreview-571318501",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84324cdb-ccb1-489c-9b09-82673969a8d9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you make this an elif / else, nesting elif is never the answer",
        "createdAt" : "2021-01-19T14:12:49Z",
        "updatedAt" : "2021-01-19T15:12:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3f9e33c9-3f21-4280-afae-980c5cefdc75",
        "parentId" : "84324cdb-ccb1-489c-9b09-82673969a8d9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would personally prefer to keep the nesting, as now this full block handles the \"ufunc(dataframe)\" case (unary ufuncs with dataframe input), and otherwise that case is spread over multiple blocks. I find it clearer to follow this way. ",
        "createdAt" : "2021-01-19T14:50:22Z",
        "updatedAt" : "2021-01-19T15:12:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "13dcd5c89af0941057aabe00db157b202cc840ad",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +275,279 @@    else:\n        # ufunc(dataframe)\n        if method == \"__call__\":\n            # for np.<ufunc>(..) calls\n            mgr = inputs[0]._mgr"
  },
  {
    "id" : "93458cef-5c33-4590-9807-e4c576af324c",
    "prId" : 39260,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39260#pullrequestreview-571319405",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "def2de83-ad7c-4eb7-afc6-dd9ae49164eb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is this not checking `__array_ufunc__` ? can you add some comments on what method is above. looking at this method it is way too and minimally documented. pls add some clarity. consider splitting this up (as I had previously asked).",
        "createdAt" : "2021-01-19T14:14:33Z",
        "updatedAt" : "2021-01-19T15:12:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1bf1b56e-02b7-445f-a93f-27713b53a489",
        "parentId" : "def2de83-ad7c-4eb7-afc6-dd9ae49164eb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> why is this not checking `__array_ufunc__`\r\n\r\nThe `method` is a keyword from the numpy ufunc protocol, and `\"__call__\"`  indicates the ufunc is simply called instead of one of its attribute methods (eg `np.maximum(..)` instead of `np.maximum.accumulate(..)` or `np.maximum.reduce(..)`)\r\n\r\nWill add some comments",
        "createdAt" : "2021-01-19T14:51:14Z",
        "updatedAt" : "2021-01-19T15:12:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "13dcd5c89af0941057aabe00db157b202cc840ad",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +275,279 @@    else:\n        # ufunc(dataframe)\n        if method == \"__call__\":\n            # for np.<ufunc>(..) calls\n            mgr = inputs[0]._mgr"
  }
]