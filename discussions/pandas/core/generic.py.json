[
  {
    "id" : "36e8a32d-93e6-4517-83b5-2912eee391f8",
    "prId" : 2410,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "780cf460-81bf-4203-814f-7cacd81b665a",
        "parentId" : null,
        "authorId" : "55206695-bb42-4d72-886f-f5370a77363e",
        "body" : "will need to add some docs here for sure\n",
        "createdAt" : "2012-12-07T15:42:28Z",
        "updatedAt" : "2012-12-07T15:42:28Z",
        "lastEditedBy" : "55206695-bb42-4d72-886f-f5370a77363e",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce604af36df2a89603411e24fc60946e69f58e6f",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +219,223 @@        closed : {'right', 'left'}, default None\n            Which side of bin interval is closed\n        label : {'right', 'left'}, default None\n            Which bin edge label to label bucket with\n        convention : {'start', 'end', 's', 'e'}"
  },
  {
    "id" : "547f4bc4-853e-4e44-938d-c1c277c2078f",
    "prId" : 5848,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fd36e63-74b5-466c-84da-dd5f347a4ba9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you need similar logic on head, no?\n",
        "createdAt" : "2014-01-04T18:56:10Z",
        "updatedAt" : "2014-01-14T21:07:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f046eab4-1e4a-4368-8652-63c12b0224a2",
        "parentId" : "9fd36e63-74b5-466c-84da-dd5f347a4ba9",
        "authorId" : "af9488ab-761a-4bd1-8bd9-c8fdbeae13b0",
        "body" : "I added similar logic on head now.  The question is this changes how df.head(0) works.  It now returns self.  before it returned the same as df.head(1)  \n",
        "createdAt" : "2014-01-05T00:12:20Z",
        "updatedAt" : "2014-01-14T21:07:22Z",
        "lastEditedBy" : "af9488ab-761a-4bd1-8bd9-c8fdbeae13b0",
        "tags" : [
        ]
      }
    ],
    "commit" : "66b9e8ce53e0cbc204f4aa9336f6014876f3ad25",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1586,1590 @@        if l == 0 or n == 0:\n            return self\n        if n > l:\n            n = l\n        elif n < -l:"
  },
  {
    "id" : "51b25cf3-5157-4407-9746-d856f6c366b1",
    "prId" : 6745,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebed5f59-94d2-42b2-a74c-1b857be35855",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "Is copy handled in BlockManager.reindex_indexers ?\n\nI don't think this is well tested and most of the time it should prob copy unless identical indexes \n",
        "createdAt" : "2014-04-18T23:31:45Z",
        "updatedAt" : "2014-04-25T13:50:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c16e4cab-434f-46ea-a426-8411c7152309",
        "parentId" : "ebed5f59-94d2-42b2-a74c-1b857be35855",
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "A rule of thumb I try to follow is, yeah, that reindex should copy, unless there's \"inplace=True\" kwarg somewhere.\n\nBut point taken, need to double check that.\n",
        "createdAt" : "2014-04-19T08:15:59Z",
        "updatedAt" : "2014-04-25T13:50:55Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      }
    ],
    "commit" : "f51235aef9bbb50632b569d9e0c104816e5e31a0",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +1709,1713 @@            if indexer is not None:\n                indexer = com._ensure_int64(indexer)\n\n            # TODO: speed up on homogeneous DataFrame objects\n            new_data = new_data.reindex_indexer(index, indexer, axis=baxis,"
  },
  {
    "id" : "6220f58a-16f8-41e4-b58f-20b4ee7165cd",
    "prId" : 6748,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf2c9e97-e297-498a-812e-8585bce382fb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "had meant to move the guts of this to internals anyhow; e.g. maybe `get_as_blocks` can return the dict of str(dtype) to block manager (already combined), so in generic needs to just iterate and _constructor....finalize...\n\nif it works better to refactor this later (in your internal changes checklist), ok 2\n\nlmk\n",
        "createdAt" : "2014-03-31T10:59:53Z",
        "updatedAt" : "2014-03-31T11:00:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f81f1abe-d370-4378-84d7-ffabdd920c62",
        "parentId" : "cf2c9e97-e297-498a-812e-8585bce382fb",
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "This will most likely get overwritten during refactoring.\n\nAnd it did occur to me that this is very much like \"group blocks by ftype\" operation that happens during merging/concatenation. And the implementation does look rather trivial:\n\n``` python\ndef mapreduce_blocks(mgr, keyfunc, reducer):\n    return dict((key, reducer(val_iter))\n                for key, val_iter in itertools.groupby(mgr.blocks, keyfunc=keyfunc))\n\ndef group_blocks_by_ftype(mgr):\n    return mapreduce_blocks(mgr, keyfunc=lambda b: str(b.ftype),\n                            reducer=list)\n\ndef combine_blocks_by_dtype(mgr):\n    return mapreduce_blocks(mgr, keyfunc=lambda b: str(b.dtype),\n                            reducer=mgr.combine)\n```\n\nSuch one-liner functions are indeed a natural extension of blockmanager external API, but I'm not sure if they deserve to be part of it.\n",
        "createdAt" : "2014-03-31T13:22:34Z",
        "updatedAt" : "2014-03-31T13:22:34Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      },
      {
        "id" : "9356d515-1945-47f0-94f4-2ef47339ec10",
        "parentId" : "cf2c9e97-e297-498a-812e-8585bce382fb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok....maybe just reference this issue then in your refactoring...\n\nwill merge then\n",
        "createdAt" : "2014-03-31T13:28:40Z",
        "updatedAt" : "2014-03-31T13:28:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "668d6b82-a9b0-4db8-9833-f9edfd9f361f",
        "parentId" : "cf2c9e97-e297-498a-812e-8585bce382fb",
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "_I've decided to separate this into a separate comment._\n\nWhich brings me to another topic, minimalism in API design. I mean, I tend to share the opinion that an API is perfect not when you can't add anything else but rather when you can't take anything from it. It happens quite often that an interface gets overburdened with those small details, e.g. it just hurts my eyes to wade through `numpy.ndarray` attrs/methods when I forget the exact spelling of the thing I want to use and I know is there:\n\n```\nIn [1]: np.arange(10)\nOut[1]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nIn [2]: _1.\n_1.T             _1.choose        _1.data          _1.flatten       _1.nbytes        _1.repeat        _1.sort          _1.tostring\n_1.all           _1.clip          _1.diagonal      _1.getfield      _1.ndim          _1.reshape       _1.squeeze       _1.trace\n_1.any           _1.compress      _1.dot           _1.imag          _1.newbyteorder  _1.resize        _1.std           _1.transpose\n_1.argmax        _1.conj          _1.dtype         _1.item          _1.nonzero       _1.round         _1.strides       _1.var\n_1.argmin        _1.conjugate     _1.dump          _1.itemset       _1.prod          _1.searchsorted  _1.sum           _1.view\n_1.argsort       _1.copy          _1.dumps         _1.itemsize      _1.ptp           _1.setfield      _1.swapaxes      \n_1.astype        _1.ctypes        _1.fill          _1.max           _1.put           _1.setflags      _1.take          \n_1.base          _1.cumprod       _1.flags         _1.mean          _1.ravel         _1.shape         _1.tofile        \n_1.byteswap      _1.cumsum        _1.flat          _1.min           _1.real          _1.size          _1.tolist        \n```\n\nAnd, unfortunately, pandas containers add more on top of that:\n\n```\nIn [1]: pd.Series()\nOut[1]: Series([], dtype: float64)\n\nIn [2]: _1.\nDisplay all 225 possibilities? (y or n)\n```\n\nThe desire to have a bit of everything at your fingertip is tempting indeed, but 225 (two hundred!!) methods and properties is a bit too many for my liking. And it is a lot to wrap your head around when you're only starting.\n",
        "createdAt" : "2014-03-31T13:30:32Z",
        "updatedAt" : "2014-03-31T13:30:32Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      },
      {
        "id" : "0f8919b2-68dd-4439-af07-140b4416a6ff",
        "parentId" : "cf2c9e97-e297-498a-812e-8585bce382fb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "that's a valid point, except that you have search in the docs, lots of docs, and you can always start the possibilities with a letter (to narrow down the search).\n\npandas provides a lot of functionaility (as does numpy). not sure that this is a problem per se.\n\nthe alternative is cryptic functions that do too much with too much overloading. which IMHO is a bigger/worse problem.\n",
        "createdAt" : "2014-03-31T13:34:35Z",
        "updatedAt" : "2014-03-31T13:34:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "84ba181d-ae92-433b-a6fa-2ddabe3c4041",
        "parentId" : "cf2c9e97-e297-498a-812e-8585bce382fb",
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "> the alternative is cryptic functions that do too much with too much overloading. which IMHO is a bigger/worse problem.\n\nI like how overloading is handled in BLAS interfaces: you have a convention about prefixes/suffixes that correspond to certain variation of the core algorithm, so you as a programmer should make an educated guess about what the data is going to look like or just use the generic implementation.\n\nAs for the naming, I've gone through the reference a bit and found out a \"light of hope\": string functions that obviously form a cluster of functionality available for series containers are conveniently put under `.str` attribute, that's a very nice application of namespacing and that's a very viable approach to the API cluttering problem. Following the Zen, I'd suggest that _Namespaces are one honking great idea -- let's do more of those!_\n",
        "createdAt" : "2014-03-31T14:03:32Z",
        "updatedAt" : "2014-03-31T14:03:32Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      },
      {
        "id" : "c7a49d2b-e98a-4ec5-9bcb-7171537a67da",
        "parentId" : "cf2c9e97-e297-498a-812e-8585bce382fb",
        "authorId" : "53ceba57-9272-4f73-b91f-1e647a7d2ce3",
        "body" : "Whenever I monkey patch new functionality I try to create namespaces. Since we control the ipython autocomplete, we could always move methods from the root to namespaces. The original methods would still work, they just wouldn't autocomplete in the root. I do this for subclasses of pandas objects. If I created a subclass like `OHLC`, I'd rather only see the custom methods I made. \n",
        "createdAt" : "2014-03-31T14:31:25Z",
        "updatedAt" : "2014-03-31T14:31:25Z",
        "lastEditedBy" : "53ceba57-9272-4f73-b91f-1e647a7d2ce3",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a6244453537e0c1b07ec63324a9e263b4efd3f2",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +2029,2033 @@        for b in self._data.blocks:\n            bd.setdefault(str(b.dtype), []).append(b)\n\n        result = {}\n        for dtype, blocks in bd.items():"
  },
  {
    "id" : "c8a9beb6-0783-4bf3-a99b-f4d17d8e83b3",
    "prId" : 6974,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a95fc5b0-0edd-4f5d-ba3b-db36dfc311ab",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not 100% happy with this (I like your soln better), but perf is odd. can we do this inside of Block instead? (e.g. just automatically do it if ndim >= 3), a bit cleaner that way and all the code in the same place\n",
        "createdAt" : "2014-04-27T17:52:18Z",
        "updatedAt" : "2014-04-27T17:52:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "81675b651bc9aa04c1edaf1307aa72168f01abbb",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3228,3232 @@        return self._constructor(new_data).__finalize__(self)\n\n    def slice_shift(self, periods=1, axis=0, **kwds):\n        \"\"\"\n        Equivalent to `shift` without copying data. The shifted data will"
  },
  {
    "id" : "b5ba31a0-c0d6-43be-a16d-14b312e5d899",
    "prId" : 7133,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c071038f-fd34-44f9-bb23-2ab3bad71ddf",
        "parentId" : null,
        "authorId" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "body" : "I wasn't exactly sure what the rules regarding \"outname\" are.  Can they have spaces?  What about underscores?  How long should they be?  So this may not be the best name.\n",
        "createdAt" : "2014-05-16T13:32:37Z",
        "updatedAt" : "2014-06-05T10:21:19Z",
        "lastEditedBy" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "tags" : [
        ]
      },
      {
        "id" : "1b59fa87-233c-4bac-b65d-3c72b01b22b9",
        "parentId" : "c071038f-fd34-44f9-bb23-2ab3bad71ddf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "outname is just a 'descriptive' name used to autogenerate the doc strings, so that is fine\n",
        "createdAt" : "2014-05-16T13:57:52Z",
        "updatedAt" : "2014-06-05T10:21:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2121b22ebfb539db62e248be0f99815e2931ac90",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +3830,3834 @@        cls.std = std\n\n        @Substitution(outname='standarderror',\n                      desc=\"Return unbiased standard error of the mean over \"\n                           \"requested axis.\\n\\nNormalized by N-1 by default. \""
  },
  {
    "id" : "66f086c7-f913-4a5e-be91-8ce880f42f65",
    "prId" : 8550,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is this necessary?\n",
        "createdAt" : "2014-10-20T01:03:10Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6a87cfb5-f77d-4296-b741-b19076458190",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "body" : "These logical functions have slightly different documentation: a 'bool_only' field instead of a 'numeric_only' field, and potentially a message about supporting additional numpy arguments via the bool_extended_args variable.\n",
        "createdAt" : "2014-10-20T21:38:35Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "tags" : [
        ]
      },
      {
        "id" : "85a32880-58ca-4030-80b3-19a25a8ef810",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I don't think this is necessary (nor is any other 'bool_extended_args' variable), its just not needed. That said If you have a use case pls show it.\n",
        "createdAt" : "2014-10-20T22:16:14Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "eab72319-35d7-41c4-9578-4184186717db",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "body" : "I'd like to better understand your comment. I mentioned two special cases in the documentation here, the bool_only argument name and the documentation message about supporting additional numpy arguments, which are currently supported in master's Series.any/all, which forwards to numpy's any/all.\n1) bool_only is the preexisting argument name for DataFrame's any and all, in master. Are you suggesting I should change it to numeric_only?\n2) You had suggested earlier that I should continue to support the ndarray.any/all arguments that are supported by Series.any/all in master (these are the 'out' and 'keepdims' parameters). Are you saying that I should not support these, or that I should not document that they are supported?\n",
        "createdAt" : "2014-10-20T22:32:47Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "tags" : [
        ]
      },
      {
        "id" : "6d33dd5c-137c-4b0c-9045-8c123fc42603",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "1) maybe I wasn't clear. The signature should be something like: `any(laxis, skipna, level, **kwargs)`; we _accept_ but don't deal explicity with the numpy args (e.g. `out`) and such. Its not useful, nor is it consistent with how pandas works.\n\n2) I realized I was confusing about `bool_only`, yes that is a good idea (just not `bool_extended_args`\n",
        "createdAt" : "2014-10-20T23:04:53Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "224f5166-71c2-4b16-8959-9036741e31f5",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "body" : "Hi, just to make sure I understand your point 1, by \"accept but do not deal explicitly with numpy args\" do you mean we ignore the args or we attempt to pass them through if numpy.any is eventually called (the arguments are forwarded opaquely as kwargs)?\n\nIf the former, is there anything I need to do to deprecate these arguments, which are supported in master and, at least for the out argument, currently documented: http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.any.html\n",
        "createdAt" : "2014-10-21T02:29:00Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "tags" : [
        ]
      },
      {
        "id" : "2602129a-2d55-4570-9176-853f3d86b9d8",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no just accept **kwargs and u r done\n",
        "createdAt" : "2014-10-21T02:32:03Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "287055cf-aa13-4f79-9eaa-0bdd0dca3af9",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "body" : "Thanks, got it.\n",
        "createdAt" : "2014-10-21T02:35:28Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "tags" : [
        ]
      },
      {
        "id" : "6fde79b6-748a-465b-b453-74cce166deb7",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't `bool_only=True` be the default? \n",
        "createdAt" : "2014-10-25T00:16:31Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "de211e40-e9e7-46f7-99ef-9eff1f5ca598",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "body" : "I made bool_only default to None (False) here because:\n- The default is None in DataFrame’s current implementation of any/all in master\n- The corresponding numeric_only argument to sum, mean, etc defaults to None\n- bool_only is not currently implemented in Series._reduce or Panel._reduce. Once we add not implemented errors, they would be thrown in the case of all default arguments, were bool_only to be True by default.\n",
        "createdAt" : "2014-10-26T23:34:53Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "tags" : [
        ]
      },
      {
        "id" : "6848eaca-0b83-43a2-8273-d36b30788efa",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, though I find its a little odd (e.g. I can't think of a reason to use `any/all` on non-boolean data), but I am sure people will try it!.\n",
        "createdAt" : "2014-10-27T00:02:11Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2b79db26-5c34-41c4-9d0a-9709cc9d8884",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "body" : "I guess, also, if they're calling any/all on Series in master, they are using the numpy version which does not offer a bool_only option.\n\nWould it make sense for me to create a new issue for implementing bool_only (numeric_only) in Series an Panel, and look into whether it should be enabled by default for any/all?\n",
        "createdAt" : "2014-10-27T00:07:08Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "tags" : [
        ]
      }
    ],
    "commit" : "518a62c4afc020c4b64e6a053cfe5efea5ce9cfc",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +3924,3928 @@        If the axis is a MultiIndex (hierarchical), count along a\n        particular level, collapsing into a \"\"\" + name + \"\"\"\nbool_only : boolean, default None\n    Include only boolean data. If None, will attempt to use everything,\n    then use only boolean data"
  },
  {
    "id" : "1a1ea1ab-0125-4ad6-b068-293ad2c6f641",
    "prId" : 8680,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db77785a-7d7e-4445-b5c8-cde7af07a684",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "This was surprising to encounter (needed to change it to fix some tests), but maybe it was there for a reason? I don't think there is any reason for `loc` here to do label based rather than integer indexing?\n",
        "createdAt" : "2014-10-31T01:21:24Z",
        "updatedAt" : "2014-11-02T20:12:45Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "41559f91-70e1-481c-986f-e61dbf87e700",
        "parentId" : "db77785a-7d7e-4445-b5c8-cde7af07a684",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could be\nI have tried to not touch xs recently. it seems s but fragile and multi slicing obviates the need for it anyhow \n",
        "createdAt" : "2014-10-31T01:33:13Z",
        "updatedAt" : "2014-11-02T20:12:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "db6f8fd94aca599f0c89d645d9c815fd33ee2196",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1462,1466 @@\n        else:\n            result = self.iloc[loc]\n            result.index = new_index\n"
  },
  {
    "id" : "45d75905-b982-4826-a133-f37f3cb9ea21",
    "prId" : 8966,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7a065ac-97ab-457f-aece-a40db28a7a9a",
        "parentId" : null,
        "authorId" : "49cb7e4b-934a-4329-961e-4089057c4185",
        "body" : "I think calling `accum_func` with `NaT`s present is okay because the NaTs are neither greater than nor less than any other datetime64:\n\n```\nIn [6]: pd.NaT < np.datetime64(('2010-01-01'))\nOut[6]: False\n\nIn [7]: np.datetime64(('2010-01-01')) < pd.NaT \nOut[7]: False\n```\n",
        "createdAt" : "2014-12-03T13:09:17Z",
        "updatedAt" : "2014-12-03T13:09:17Z",
        "lastEditedBy" : "49cb7e4b-934a-4329-961e-4089057c4185",
        "tags" : [
        ]
      }
    ],
    "commit" : "010741f3eb4ec6f05edc4168549ea8b05cb018fc",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +4116,4120 @@                if skipna and issubclass(y.dtype.type, \n                                         (np.datetime64, np.timedelta64)):\n                    result = accum_func(y, axis)\n                    mask = isnull(self)\n                    np.putmask(result, mask, pd.tslib.iNaT)"
  },
  {
    "id" : "670569e1-c2d0-41ff-b238-09156ef43278",
    "prId" : 9258,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b59cae63-52e2-4c7c-a208-928d3faac6c7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "doesn't this need method passed thru? shocked the tests don't fail\n",
        "createdAt" : "2015-02-13T19:54:34Z",
        "updatedAt" : "2015-02-18T03:00:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "043f2178-d1c2-4ca9-b5b0-d8d5f2c9836c",
        "parentId" : "b59cae63-52e2-4c7c-a208-928d3faac6c7",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "You'll note that `_reindex_with_indexers` doesn't actually use `method` or `limit` arguments. So I removed them from the function signature below.\n",
        "createdAt" : "2015-02-13T19:57:23Z",
        "updatedAt" : "2015-02-18T03:00:42Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "a5286621-66d1-4de6-9fa4-37c0d29a557d",
        "parentId" : "b59cae63-52e2-4c7c-a208-928d3faac6c7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yep\n",
        "createdAt" : "2015-02-13T20:18:41Z",
        "updatedAt" : "2015-02-18T03:00:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1164210248e6be262cfbf08bf899f1d1781c0fc",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +1748,1752 @@            obj = obj._reindex_with_indexers(\n                {axis: [new_index, indexer]},\n                fill_value=fill_value, copy=copy, allow_dups=False)\n\n        return obj"
  },
  {
    "id" : "90334ab7-66ff-4527-99ab-edbf9289600e",
    "prId" : 9258,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40293d27-ff1a-4c4f-aeeb-d51001c96671",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh, right, `method` is extraneous here (above too?)\n",
        "createdAt" : "2015-02-13T19:55:18Z",
        "updatedAt" : "2015-02-18T03:00:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1164210248e6be262cfbf08bf899f1d1781c0fc",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +1810,1814 @@                                                 limit=limit)\n        return self._reindex_with_indexers(\n            {axis: [new_index, indexer]}, fill_value=fill_value, copy=copy)\n\n    def _reindex_with_indexers(self, reindexers,"
  },
  {
    "id" : "5548a683-52d3-4509-b5e9-92c195d12dee",
    "prId" : 9647,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ce4ee8f-cf09-44f1-a550-b81a5a563951",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pls make sure that you have `core.filemode=False` in git\n\ne.g. `git config global --list` (then turn it off). you generally don't change file modes (as they are set so that nose works correctly)\n",
        "createdAt" : "2015-03-17T00:40:22Z",
        "updatedAt" : "2015-04-28T10:29:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1528859f44608fc1c6d02bc5fa51272e9e3cf69a",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +2819,2823 @@        --------\n        isnull : boolean inverse of notnull\n        \"\"\"\n        return notnull(self).__finalize__(self)\n"
  },
  {
    "id" : "2601a857-d797-4232-bdf7-ecf9fa95cd59",
    "prId" : 9647,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f64f02e2-3334-4b91-9005-1ef97557c68b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string example here (have a look at a function, say DataFrame.select_dtypes for how to format this in the dco-string)\n",
        "createdAt" : "2015-03-25T23:07:17Z",
        "updatedAt" : "2015-04-28T10:29:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1528859f44608fc1c6d02bc5fa51272e9e3cf69a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +2832,2836 @@        axis : int or string axis name, optional\n            Align object with lower and upper along the given axis.\n\n        Returns\n        -------"
  },
  {
    "id" : "49fe5ffd-e930-4e32-b6d3-808dd02f5573",
    "prId" : 10253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57e3cfdc-91c7-4046-a7be-2371f2612338",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "Should we add some validation logic here to ensure that `target` is not overwriting a key in `kwargs`? Something like this:\n\n``` python\nif target in kwargs:\n    raise ValueError('%s is both the pipe target and a keyword argument' % target)\n```\n\n I'm not entirely sure it's worth complexifying things here.\n",
        "createdAt" : "2015-06-03T06:01:10Z",
        "updatedAt" : "2015-06-06T03:09:20Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "cf3c9885-5e61-4c3b-904a-c99304232bd3",
        "parentId" : "57e3cfdc-91c7-4046-a7be-2371f2612338",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Are you saying maybe the user did something like\n\n``` python\ndf.pipe((sns.violinplot, 'data'), x='x', y='y', data=df)\n```\n\nI guess the precedent here is with Python itself raising when you call `f(a=1, a=2)`.\n",
        "createdAt" : "2015-06-03T12:43:49Z",
        "updatedAt" : "2015-06-06T03:09:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "444df253-30c1-4895-809c-da3fdb7e2f21",
        "parentId" : "57e3cfdc-91c7-4046-a7be-2371f2612338",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "yes, that's the case I was thinking about\n",
        "createdAt" : "2015-06-04T00:55:19Z",
        "updatedAt" : "2015-06-06T03:09:20Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c3bf51befbbc14b22cb28ac9ee1e9406b3790ff",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2104,2108 @@                msg = '%s is both the pipe target and a keyword argument' % target\n                raise ValueError(msg)\n            kwargs[target] = self\n            return func(*args, **kwargs)\n        else:"
  },
  {
    "id" : "6111f0ca-6e54-4346-91dd-36d0dec587ec",
    "prId" : 10253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96bbb939-7982-4284-9b8c-23364f87bcc4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe show an example of using the callable & data_keyword in the Notes? (can do later)\n",
        "createdAt" : "2015-06-05T22:29:17Z",
        "updatedAt" : "2015-06-06T03:09:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "686f1999-56c3-4ed5-a06e-64d3e8eb5c11",
        "parentId" : "96bbb939-7982-4284-9b8c-23364f87bcc4",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Added.\n",
        "createdAt" : "2015-06-05T23:36:10Z",
        "updatedAt" : "2015-06-06T03:09:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c3bf51befbbc14b22cb28ac9ee1e9406b3790ff",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +2080,2084 @@        ...    .pipe(f, arg2=b, arg3=c)\n        ... )\n\n        If you have a function that takes the data as (say) the second\n        argument, pass a tuple indicating which keyword expects the"
  },
  {
    "id" : "b1d5ef63-7f2d-4e64-b62e-14f5bcf5e820",
    "prId" : 10283,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12724cd0-40d4-4b6e-a2a3-879dcec4fe69",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a versionadded\n",
        "createdAt" : "2015-08-21T15:14:37Z",
        "updatedAt" : "2015-08-23T15:19:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a25a664636825b2368f0fe89c4a754d369c61723",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +3472,3476 @@        fill_axis : %(axes_single_arg)s, default 0\n            Filling axis, method and limit\n        broadcast_axis : %(axes_single_arg)s, default None\n            Broadcast values along this axis, if aligning two objects of\n            different dimensions"
  },
  {
    "id" : "afc4be0a-a588-4e31-bbe0-29fbda7f0cb7",
    "prId" : 10283,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a4fd010-2bd8-497b-a326-8bdc122cdc1c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "The doc-string for `Panel.align` (which uses generic) seems off, can you fix up? (prob just need a definition in `panel.py`\n",
        "createdAt" : "2015-08-21T15:16:12Z",
        "updatedAt" : "2015-08-23T15:19:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a25a664636825b2368f0fe89c4a754d369c61723",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +3485,3489 @@    )\n\n    @Appender(_shared_docs['align'] % _shared_doc_kwargs)\n    def align(self, other, join='outer', axis=None, level=None, copy=True,\n              fill_value=None, method=None, limit=None, fill_axis=0,"
  },
  {
    "id" : "eb350d3f-43fb-4009-ae33-4d0ace52b456",
    "prId" : 10411,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9789ca36-6289-4807-b702-e6d465d75ddf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add to the doc-string\n",
        "createdAt" : "2015-07-23T19:54:18Z",
        "updatedAt" : "2015-08-18T23:04:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0468cadc7f3a225fc04f7ef6b93c1a7bb0cc5c00",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1554,1558 @@    def reindex_like(self, other, method=None, copy=True, limit=None,\n                     tolerance=None):\n        \"\"\" return an object with matching indicies to myself\n\n        Parameters"
  },
  {
    "id" : "556f6705-c5a9-4c06-b401-d35f3b63eb15",
    "prId" : 10411,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15b2e873-a6e2-4139-b25a-d1dc5eeffd41",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is in the reindex doc-string yes?\n",
        "createdAt" : "2015-07-23T19:55:41Z",
        "updatedAt" : "2015-08-18T23:04:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "65d41845-c3b4-4bfc-8255-6404740b7fc7",
        "parentId" : "15b2e873-a6e2-4139-b25a-d1dc5eeffd41",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "yes\n",
        "createdAt" : "2015-07-23T19:57:18Z",
        "updatedAt" : "2015-08-18T23:04:32Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0468cadc7f3a225fc04f7ef6b93c1a7bb0cc5c00",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +1745,1749 @@        limit : int, default None\n            Maximum number of consecutive elements to forward or backward fill\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most"
  },
  {
    "id" : "97322481-9588-4cf4-a6a3-3a4c11d8467c",
    "prId" : 10411,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8908daa-3494-4b95-a4ad-5aa2c5364c3f",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add a versionadded here?\n",
        "createdAt" : "2015-08-18T22:10:10Z",
        "updatedAt" : "2015-08-18T23:04:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "26ab4e96-e329-400f-9f9b-f80377f54e43",
        "parentId" : "f8908daa-3494-4b95-a4ad-5aa2c5364c3f",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "done\n",
        "createdAt" : "2015-08-18T23:04:31Z",
        "updatedAt" : "2015-08-18T23:04:32Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0468cadc7f3a225fc04f7ef6b93c1a7bb0cc5c00",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1565,1569 @@        tolerance : optional\n            Maximum distance between labels of the other object and this\n            object for inexact matches.\n\n            .. versionadded:: 0.17.0"
  },
  {
    "id" : "56c678fa-54ec-4359-8e3e-c424aab569dc",
    "prId" : 10691,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "537a20ee-e3d9-453a-ba68-97712b4f02f6",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add here `.. versionadded:: 0.17.0` ? (see here for how to format: https://github.com/pydata/pandas/blob/v0.16.2/pandas/core/frame.py#L1171)\n",
        "createdAt" : "2015-08-18T22:03:23Z",
        "updatedAt" : "2015-08-30T17:49:17Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "df4d52c221da4facc0f64f5cbfecb7ceb1cc4656",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +3004,3008 @@        limit_direction : {'forward', 'backward', 'both'}, defaults to 'forward'\n            If limit is specified, consecutive NaNs will be filled in this\n            direction.\n\n            .. versionadded:: 0.17.0"
  },
  {
    "id" : "f4d9aaac-5d2b-4b23-8800-e2bd3761cedd",
    "prId" : 10726,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0786dac2-df93-46ba-97ae-cb0d236c510d",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah yes, and can you add a versionadded here in the docstring?\n",
        "createdAt" : "2015-08-12T11:38:38Z",
        "updatedAt" : "2015-08-18T00:07:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f98e8cc9-a8c7-40fe-8949-abd5c1012f67",
        "parentId" : "0786dac2-df93-46ba-97ae-cb0d236c510d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right\n",
        "createdAt" : "2015-08-12T13:41:02Z",
        "updatedAt" : "2015-08-18T00:07:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "13d2d71f57cd88c0b14166b65402b696bdf0ce7d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1686,1690 @@    _shared_docs['sort_values'] = \"\"\"\n        Sort by the values along either axis\n\n        .. versionadded:: 0.17.0\n"
  },
  {
    "id" : "55c731df-88d6-4579-91cc-c45f33cc6bac",
    "prId" : 13516,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fe98db0-f412-4515-abf1-f0b9e077daed",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add a docstring to this one explaining it's purpose?\n",
        "createdAt" : "2016-06-29T13:21:04Z",
        "updatedAt" : "2016-07-01T12:15:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a6607aae9119fbd02f25c61adf98bd1cb74b50a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +4420,4424 @@        return left.__finalize__(self), right.__finalize__(other)\n\n    def _where(self, cond, other=np.nan, inplace=False, axis=None, level=None,\n               try_cast=False, raise_on_error=True):\n        \"\"\""
  },
  {
    "id" : "a2d5fe09-24c4-47ea-ae20-1e0fedf1057d",
    "prId" : 13533,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73d923e4-98c8-4460-8115-e85d9b5f60b1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add 1 or more examples in Examples\n",
        "createdAt" : "2016-06-30T10:11:58Z",
        "updatedAt" : "2016-06-30T22:57:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e6e7ee5b-f1f2-48ea-a7c6-7fb0d8c72ff5",
        "parentId" : "73d923e4-98c8-4460-8115-e85d9b5f60b1",
        "authorId" : "47ae9324-3866-4f45-87eb-88d69d58d7f2",
        "body" : "added\n",
        "createdAt" : "2016-06-30T22:58:09Z",
        "updatedAt" : "2016-06-30T22:58:09Z",
        "lastEditedBy" : "47ae9324-3866-4f45-87eb-88d69d58d7f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "928eb34fea661762662d7308e70711088c94578d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +556,560 @@        Alter axes input function or functions. Function / dict values must be\n        unique (1-to-1). Labels not contained in a dict / Series will be left\n        as-is. Extra labels listed don't throw an error. Alternatively, change\n        ``Series.name`` with a scalar value (Series only).\n"
  },
  {
    "id" : "14e4bddc-94fb-494a-a79c-924e1ac5a86a",
    "prId" : 13798,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec82f177-0e48-421f-9f71-361712c72bed",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a comment before this one\n",
        "createdAt" : "2016-07-28T23:49:55Z",
        "updatedAt" : "2016-08-15T05:15:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ae0e79a63978513664340e54309b9c426e4e3b7",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +4725,4729 @@        3  6 -7\n        4 -8  9\n        >>> df.where(m, -df) == np.where(m, df, -df)\n              A     B\n        0  True  True"
  },
  {
    "id" : "b2e8a35b-a82e-4df1-a7cd-633c2bddfe62",
    "prId" : 14668,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14668#pullrequestreview-12346598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "948f8615-d18d-4438-9a2c-a352477d9a8a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think the aggregated result should be broadcasted to the full DataFrame? (as is done for groupby.transform)",
        "createdAt" : "2016-12-10T12:05:00Z",
        "updatedAt" : "2017-04-14T13:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae6c6f6cbd4b760ec70b1d48b27fe53b6644e208",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +6066,6070 @@            if is_scalar(result) or len(result) != len(self):\n                raise ValueError(\"transforms cannot produce \"\n                                 \"aggregated results\")\n\n            return result"
  },
  {
    "id" : "a31d8a95-f7f8-496b-8e3b-e9f657547b04",
    "prId" : 14904,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14904#pullrequestreview-19787711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6dc6bcff-5053-4070-be9b-dace7eb2b185",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "nice examples!",
        "createdAt" : "2017-02-02T13:56:24Z",
        "updatedAt" : "2017-03-04T11:46:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fac34ce6c646407111c09a942cbd195b6cbf590",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +1219,1223 @@\n        >>> df.to_json(orient='records')\n        '[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n\n        Encoding with Table Schema"
  },
  {
    "id" : "94ded1b7-2a55-45d9-b756-99e4729c4cbd",
    "prId" : 14904,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14904#pullrequestreview-20359152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4944b436-c006-407b-aca0-7f43664ed2a8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't the version be here? ",
        "createdAt" : "2017-02-06T20:29:54Z",
        "updatedAt" : "2017-03-04T11:46:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fac34ce6c646407111c09a942cbd195b6cbf590",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +1225,1229 @@        >>> df.to_json(orient='table')\n        '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                                {\"name\": \"col 1\", \"type\": \"string\"},\n                                {\"name\": \"col 2\", \"type\": \"string\"}],\n                     \"primaryKey\": \"index\","
  },
  {
    "id" : "305d1843-5aaa-495e-ae64-102bddb0026a",
    "prId" : 14904,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14904#pullrequestreview-20553778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16fd66c6-e73a-4b6e-be59-a9d7c34a52cd",
        "parentId" : null,
        "authorId" : "c3430ddc-2e27-4721-8896-7d7bd8d81bc9",
        "body" : "Would the best way to test this to be mocking `IPython.display.display`?",
        "createdAt" : "2017-02-06T20:47:27Z",
        "updatedAt" : "2017-03-04T11:46:35Z",
        "lastEditedBy" : "c3430ddc-2e27-4721-8896-7d7bd8d81bc9",
        "tags" : [
        ]
      },
      {
        "id" : "5c671905-611c-454a-a344-85c8cf5f3f52",
        "parentId" : "16fd66c6-e73a-4b6e-be59-a9d7c34a52cd",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I hope so, cause that's what I do here https://github.com/pandas-dev/pandas/pull/14904/files#diff-81a94f6a5e3a0de7887baaab7b55f579R145 😉 ",
        "createdAt" : "2017-02-06T21:12:53Z",
        "updatedAt" : "2017-03-04T11:46:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "56ac9f79-dd1d-4e85-a4f9-5d8908b6cd8c",
        "parentId" : "16fd66c6-e73a-4b6e-be59-a9d7c34a52cd",
        "authorId" : "c3430ddc-2e27-4721-8896-7d7bd8d81bc9",
        "body" : "Weird, when I was viewing this the codecov extension was showing this segment as not covered.",
        "createdAt" : "2017-02-07T15:58:32Z",
        "updatedAt" : "2017-03-04T11:46:35Z",
        "lastEditedBy" : "c3430ddc-2e27-4721-8896-7d7bd8d81bc9",
        "tags" : [
        ]
      },
      {
        "id" : "da03aad5-e8f9-4048-a60f-f87c31186523",
        "parentId" : "16fd66c6-e73a-4b6e-be59-a9d7c34a52cd",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Good catch! We didn't have IPython installed in the build that runs the coverage report, so it was skipped. Just pushed a commit adding it.",
        "createdAt" : "2017-02-07T16:35:28Z",
        "updatedAt" : "2017-03-04T11:46:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fac34ce6c646407111c09a942cbd195b6cbf590",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +149,153 @@                 \"application/vnd.dataresource+json\": table_schema}\n        reprs = {k: v for k, v in reprs.items() if v}\n        display(reprs, raw=True)\n\n    def _repr_table_schema_(self):"
  },
  {
    "id" : "7987412e-5f25-4fb1-9aa3-797424687b82",
    "prId" : 14904,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14904#pullrequestreview-20364418",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8660c692-99f3-43f1-ab06-ffdb544af784",
        "parentId" : null,
        "authorId" : "c3430ddc-2e27-4721-8896-7d7bd8d81bc9",
        "body" : ":smile: one step towards general adoption I think. :wink:",
        "createdAt" : "2017-02-06T20:48:09Z",
        "updatedAt" : "2017-03-04T11:46:35Z",
        "lastEditedBy" : "c3430ddc-2e27-4721-8896-7d7bd8d81bc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fac34ce6c646407111c09a942cbd195b6cbf590",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +154,158 @@        \"\"\"\n        Not a real Jupyter special repr method, but we use the same\n        naming convention.\n        \"\"\"\n        if config.get_option(\"display.html.table_schema\"):"
  },
  {
    "id" : "aafcac8a-b739-4844-970e-3bf06d93728e",
    "prId" : 14904,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14904#pullrequestreview-20364726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c2f9747-18a2-4d03-a65b-b81f2c0be309",
        "parentId" : null,
        "authorId" : "c3430ddc-2e27-4721-8896-7d7bd8d81bc9",
        "body" : "Should the `config.get_option` check happen here so it doesn't end up as:\r\n\r\n```\r\n\"application/vnd.dataresource+json\": None\r\n```\r\n\r\nin the resulting output?\r\n\r\nOh nevermind, I see the `if v` in the dict comprehension.",
        "createdAt" : "2017-02-06T20:49:38Z",
        "updatedAt" : "2017-03-04T11:46:35Z",
        "lastEditedBy" : "c3430ddc-2e27-4721-8896-7d7bd8d81bc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fac34ce6c646407111c09a942cbd195b6cbf590",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +140,144 @@        latex = self._repr_latex_() if hasattr(self, '_repr_latex_') else None\n        html = self._repr_html_() if hasattr(self, '_repr_html_') else None\n        table_schema = self._repr_table_schema_()\n        # We need the inital newline since we aren't going through the\n        # usual __repr__. See"
  },
  {
    "id" : "a862f605-2374-4ed2-ba74-42e65e45c402",
    "prId" : 14904,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14904#pullrequestreview-20533945",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d145443e-d1f0-4fcb-a5fd-4016a779e06f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is ``primaryKey`` standard here? (as opposed to ``primary_key``), are any other keys camelCase?",
        "createdAt" : "2017-02-07T15:26:14Z",
        "updatedAt" : "2017-03-04T11:46:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fac34ce6c646407111c09a942cbd195b6cbf590",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +1228,1232 @@                                {\"name\": \"col 2\", \"type\": \"string\"}],\n                     \"primaryKey\": \"index\",\n                     \"pandas_version\": \"0.20.0\"},\n          \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n                   {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'"
  },
  {
    "id" : "54ff87e3-48c5-4ebe-9607-215f3870eb4f",
    "prId" : 14967,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14967#pullrequestreview-14290668",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d98a0cb8-82e5-458d-9c4b-6e2e7cafc28b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think you need a blank line before kwargs (to make the sub-list work)",
        "createdAt" : "2016-12-23T00:09:08Z",
        "updatedAt" : "2017-01-03T20:52:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4134e388-0783-497e-ab72-f5c1be02fdf4",
        "parentId" : "d98a0cb8-82e5-458d-9c4b-6e2e7cafc28b",
        "authorId" : "7fd30c76-727b-4746-bf1c-c9571ce401e1",
        "body" : "I've just checked and the sublist is rendered fine with, or without a line between `ignore`\r\nand kwargs. I can add an extra line if that is the convention,",
        "createdAt" : "2016-12-23T11:33:28Z",
        "updatedAt" : "2017-01-03T20:52:56Z",
        "lastEditedBy" : "7fd30c76-727b-4746-bf1c-c9571ce401e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "b174e6f4dec2faa3eaf9124dc694c3fd92e1a890",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3085,3089 @@\n        raise_on_error : DEPRECATED use ``errors`` instead\n        kwargs : keyword arguments to pass on to the constructor\n\n        Returns"
  },
  {
    "id" : "4410bd0e-30a8-4587-acf7-2973d616dede",
    "prId" : 14995,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14995#pullrequestreview-14803122",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why are you redefining things here???\r\n\r\nthis is just a very small edit to the ``_shared_docs['describe']``",
        "createdAt" : "2016-12-27T11:43:32Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "478d6397-453d-4c8e-9985-39544c93281f",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@palewire Typically we reuse docstring on several places, eg for Series/DataFrame/Panel definitions, that's the reason of the use of `_shared_docs`.\r\n\r\nBut, @jreback, was just looking in this specific case, this is the only place where this docstring is used, so it is actually not really needed to put it in `_shared_docs` I think? (maybe a leftover from when the definitions where in multiple places)",
        "createdAt" : "2016-12-27T15:10:14Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a5e136e9-4a4b-4f67-bc14-9b7b5ccb5a3c",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is used in both Series & DataFrame, so needs to stay as shared docs",
        "createdAt" : "2016-12-27T15:24:36Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "afa4945d-9e55-49b7-826f-dbe3aca65f6a",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But it is only defined here (the function is not redefined in series or dataframe, so the shared docstrings is not used anywhere else)",
        "createdAt" : "2016-12-27T15:48:53Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0290ad2a-bec9-4130-b816-29383fee5896",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh, ok then.",
        "createdAt" : "2016-12-27T16:11:29Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "924b9adf-35ef-4297-9fb1-f081233ddce7",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "body" : "The main reason I moved it out of the ``_shared_docs`` is that after adding doctests to the docstring I got this error when I tried to make the documentation. I came to the same conclusion as @jorisvandenbossche that the `_shared_docs` feature was unnecessary so I decided to dodge the bug by moving the test's location down to the class' docstring.\r\n\r\n```python\r\n % python make.py\r\nConverting source/html-styling.ipynb\r\nNo module named jupyter_client.manager\r\nFailed to convert source/html-styling.ipynb\r\nRunning Sphinx v1.5.1\r\nException occurred while building, starting debugger:\r\nTraceback (most recent call last):\r\n  File \"/home/palewire/.virtualenvs/pandas/local/lib/python2.7/site-packages/sphinx/cmdline.py\", line 295, in main\r\n    opts.warningiserror, opts.tags, opts.verbosity, opts.jobs)\r\n  File \"/home/palewire/.virtualenvs/pandas/local/lib/python2.7/site-packages/sphinx/application.py\", line 163, in __init__\r\n    confoverrides or {}, self.tags)\r\n  File \"/home/palewire/.virtualenvs/pandas/local/lib/python2.7/site-packages/sphinx/config.py\", line 134, in __init__\r\n    execfile_(filename, config)\r\n  File \"/home/palewire/.virtualenvs/pandas/local/lib/python2.7/site-packages/sphinx/util/pycompat.py\", line 129, in execfile_\r\n    exec_(code, _globals)\r\n  File \"/home/palewire/.virtualenvs/pandas/local/lib/python2.7/site-packages/six.py\", line 699, in exec_\r\n    exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")\r\n  File \"<string>\", line 1, in <module>\r\n  File \"conf.py\", line 17, in <module>\r\n  File \"/home/palewire/Code/pandas/pandas/__init__.py\", line 39, in <module>\r\n    from pandas.core.api import *\r\n  File \"/home/palewire/Code/pandas/pandas/core/api.py\", line 10, in <module>\r\n    from pandas.core.groupby import Grouper\r\n  File \"/home/palewire/Code/pandas/pandas/core/groupby.py\", line 40, in <module>\r\n    from pandas.core.frame import DataFrame\r\n  File \"/home/palewire/Code/pandas/pandas/core/frame.py\", line 65, in <module>\r\n    from pandas.core.generic import NDFrame, _shared_docs\r\n  File \"/home/palewire/Code/pandas/pandas/core/generic.py\", line 94, in <module>\r\n    class NDFrame(PandasObject):\r\n  File \"/home/palewire/Code/pandas/pandas/core/generic.py\", line 5271, in NDFrame\r\n    @Appender(_shared_docs['describe'] % _shared_doc_kwargs)\r\nTypeError: not enough arguments for format string\r\n> /home/palewire/Code/pandas/pandas/core/generic.py(5271)NDFrame()\r\n-> @Appender(_shared_docs['describe'] % _shared_doc_kwargs)\r\n```",
        "createdAt" : "2016-12-27T18:16:15Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "tags" : [
        ]
      },
      {
        "id" : "842672b3-c68f-438a-946b-b97b75afce71",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@palewire not sure what you are doing, but this has nothing to do with the doc-string. It doesn't matter if it *only* defined here, this NEEDS different parameters for klass. Otherwise this is not custom to the type (Series or DataFrame). \r\n\r\nFurther it is impossible to actually see what you changed. ",
        "createdAt" : "2016-12-28T12:23:31Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "91b945d6-36c5-45f5-bf1d-920423e6d446",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "the issue is that ``klass`` is used in the shared docs for ``describe`` (and for ``pct_change``). This is ok if its actually defined in Series/DataFrame (it is defined in generic as well, but actually it is ``NDFrame``) which is kind of confusing.\r\n\r\n",
        "createdAt" : "2016-12-28T12:29:00Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4b472781-95f7-4daa-a66d-6d648e9abb28",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Not sure why you see that error when building the docs, as the `klass` kwarg should be included in the `_shared_doc_kwargs` for NDFrame as well.\r\n\r\nBut still, since this is not redefined in series/dataframe, you always get `NDFrame` in the docstring (for both Series/DataFrame.describe), so this is a reason to get it out of the `_shared_docs` IMO",
        "createdAt" : "2016-12-28T13:11:36Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b6b7c4b3-50b2-4a6d-bded-690cbce01220",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "body" : "@jreback, if you refer to the existing \"stable\" ``pandas`` documentation, you can see that the klass setting appears to be the same for both ``Series`` and ``DataFrame``. \r\n\r\nFirst look at the \"returns\" value below the parameters [here](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.describe.html):\r\n\r\n![screenshot from 2016-12-28 07-51-02](https://cloud.githubusercontent.com/assets/9993/21525732/03debf3e-ccd4-11e6-9f9c-e2b807983bbd.png)\r\n\r\nAnd then again [here](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.describe.html):\r\n\r\n![screenshot from 2016-12-28 07-51-21](https://cloud.githubusercontent.com/assets/9993/21525735/0b7d6ce0-ccd4-11e6-9f26-a1ac86a3847a.png)\r\n",
        "createdAt" : "2016-12-28T16:03:40Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "tags" : [
        ]
      },
      {
        "id" : "afd5ebcd-69da-4985-b535-09100b30d72e",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "and this is EXCACTLY my point & why we need the shared docs",
        "createdAt" : "2016-12-28T16:19:46Z",
        "updatedAt" : "2017-01-01T02:22:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ba16a356-e27f-495d-9d66-1cd2b3de9966",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "body" : "@jreback. I must be missing something here. If the only customized value in the docstring is the class, and that value is identical is both places it is output, why does the docstring need to be shared at all? Why not simply hardcode the value into a traditional docstring?",
        "createdAt" : "2016-12-28T17:42:13Z",
        "updatedAt" : "2017-01-01T02:22:33Z",
        "lastEditedBy" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "tags" : [
        ]
      },
      {
        "id" : "db78b633-8a25-4a70-8a3d-7e18ea6b86b2",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@palewire again, the point IS TO HAVE CUSTOMIZED doc-strings!\r\n\r\nwhen I see return value for Series.describe I want to see Series, ditto for DataFrame. that's the entire reason for shared doc-strings. *usually* we have more than 1 non-trivial parameters and so it is necessary. But we do this for all other routines, so not sure why breaking from it here. It just makes it more confusing.\r\n\r\nThis is pretty trivially to solve (for this and pct_change). Just put a doc-string with an Appender in both Series/DataFrame.\r\n\r\ne",
        "createdAt" : "2016-12-28T18:39:08Z",
        "updatedAt" : "2017-01-01T02:22:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2bec30a6-e542-4539-abad-913ddbcfc158",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "body" : "I'd be happy to try that correction, though I think it's worth pointing out that was a pre-existing bug in the describe documentation and nothing introduced by this pull request. Could you point me to example of a similar shared method I could model the fix on?",
        "createdAt" : "2016-12-28T19:25:00Z",
        "updatedAt" : "2017-01-01T02:22:33Z",
        "lastEditedBy" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "tags" : [
        ]
      },
      {
        "id" : "69b84234-550f-48e7-b861-a3c4ec72083e",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "as I said, pretty much any function in series or dataframe that has a shared doc",
        "createdAt" : "2016-12-28T19:44:54Z",
        "updatedAt" : "2017-01-01T02:22:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "87013945-a72a-41a0-ac8a-259dd18aac5a",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I am not sure if it is worth including `describe` defs in both Series and DataFrame (that of course just simply passes args to its super method), just for customizing this single word. For docstrings that include more variables to be changed, that would be OK. But IMO in this case it is not worth it.\r\n\r\nIt's a bit of a problem with how our handling of shared docstrings currently works, as it does not work perfectly for all cases that we use it for. But having a better approach for functions like this (i.e. functions that have only a definition in generic, and not in series/frame.py) is a whole other/larger issue that can be left for another issue/PR to discuss.",
        "createdAt" : "2016-12-28T19:58:01Z",
        "updatedAt" : "2017-01-01T02:22:33Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "de210c1f-7f07-4581-9127-ba2fe44bdddf",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "body" : "@jorisvandenbossche, if that's how you feel I can hold off on pursuing that route. Are there other modifications you'd like to see?",
        "createdAt" : "2016-12-28T21:40:40Z",
        "updatedAt" : "2017-01-01T02:22:33Z",
        "lastEditedBy" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "tags" : [
        ]
      },
      {
        "id" : "e9a2b50f-b318-45e5-bdb6-d07d241319ad",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback are you OK with this in its current form (so not using the `_shared_docs`). I agree that we should try to have accurate docstrings for both Series and DataFrame making use of our decorator machinery, but in this case it did not make use of that machinery.",
        "createdAt" : "2016-12-31T11:38:41Z",
        "updatedAt" : "2017-01-01T02:22:33Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "a61dda10872ba346ca2f5ef9f11fbb8fd4530d70",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +5201,5205 @@        \"\"\"\n        return np.abs(self)\n\n    def describe(self, percentiles=None, include=None, exclude=None):\n        \"\"\""
  },
  {
    "id" : "8c388996-31b6-4bfc-a1bb-1a4ed9988dc6",
    "prId" : 14995,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14995#pullrequestreview-14578851",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f88f82c4-b337-4a6d-b7e5-b955bf5e4ed6",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would add here the sentence from the notes with something like \"Analyzes both numeric and object series, as well\r\nas DataFrame column sets of mixed data types.\" + that output depends on data type + refer to notes for more details on this",
        "createdAt" : "2016-12-28T15:19:40Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9b8a5c24-74ec-4cd5-be42-4cba7ed2c47a",
        "parentId" : "f88f82c4-b337-4a6d-b7e5-b955bf5e4ed6",
        "authorId" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "body" : "Will do. ",
        "createdAt" : "2016-12-28T16:05:40Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "tags" : [
        ]
      }
    ],
    "commit" : "a61dda10872ba346ca2f5ef9f11fbb8fd4530d70",
    "line" : null,
    "diffHunk" : "@@ -1,1 +5207,5211 @@        dispersion and shape of a dataset's distribution, excluding\n        ``NaN`` values.\n\n        Analyzes both numeric and object series, as well\n        as ``DataFrame`` column sets of mixed data types. The output"
  },
  {
    "id" : "c0dac337-cee4-4341-9910-9bc1130991e8",
    "prId" : 14995,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14995#pullrequestreview-14579368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b19dc24-40a4-493b-a4e6-4e3a86a1f807",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "\"The ``50`` percentile is typically the same as the median.\" -> when is this not the case?",
        "createdAt" : "2016-12-28T15:30:40Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "26ae9a38-b8f4-43b2-bccb-5ca3c340b888",
        "parentId" : "9b19dc24-40a4-493b-a4e6-4e3a86a1f807",
        "authorId" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "body" : "I was thinking of the alternative methods of returning medians when there are an even number of values that might result in differing expectations among users. But that's probably unnecessary. I will remove the qualification.",
        "createdAt" : "2016-12-28T16:10:20Z",
        "updatedAt" : "2017-01-01T02:22:33Z",
        "lastEditedBy" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "tags" : [
        ]
      }
    ],
    "commit" : "a61dda10872ba346ca2f5ef9f11fbb8fd4530d70",
    "line" : null,
    "diffHunk" : "@@ -1,1 +5254,5258 @@        upper percentiles. By default the lower percentile is ``25`` and the\n        upper percentile is ``75``. The ``50`` percentile is the\n        same as the median.\n\n        For object data (e.g. strings or timestamps), the result's index"
  },
  {
    "id" : "572f13d5-db06-4251-a19f-ed6cbfd261a9",
    "prId" : 16171,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16171#pullrequestreview-35514691",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02af7d70-a741-498c-8ab5-b4710a591f52",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe we should define his for Series (trivial version) to avoid this kind of logic ",
        "createdAt" : "2017-04-29T14:54:59Z",
        "updatedAt" : "2017-04-30T11:14:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9937b6e2-505d-474d-b303-885b304e07f9",
        "parentId" : "02af7d70-a741-498c-8ab5-b4710a591f52",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "https://github.com/pandas-dev/pandas/issues/16180",
        "createdAt" : "2017-04-30T11:16:49Z",
        "updatedAt" : "2017-04-30T11:16:49Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd24e27b4742984b301f35435232e8209f7be8b6",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +6272,6276 @@\n    # Series doesn't define _repr_html_ or _repr_latex_\n    latex = self._repr_latex_() if hasattr(self, '_repr_latex_') else None\n    html = self._repr_html_() if hasattr(self, '_repr_html_') else None\n    try:"
  },
  {
    "id" : "e3a57264-1108-4c66-ba56-1012a8445438",
    "prId" : 16326,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16326#pullrequestreview-81391052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0ea7272-4e37-4b55-b242-ab66ba794481",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add an asv that does dir() on a Series/DataFrame with say 10000 elements (we *might* already have one of these)",
        "createdAt" : "2017-12-06T01:20:10Z",
        "updatedAt" : "2017-12-11T11:23:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ee5b9fa793fba46b9b10b05f802b38ea7641b03",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +199,203 @@        If info_axis is a MultiIndex, it's first level values are used.\n        \"\"\"\n        additions = set(\n            [c for c in self._info_axis.unique(level=0)[:100]\n             if isinstance(c, string_types) and isidentifier(c)])"
  },
  {
    "id" : "c53bbd44-2ad4-44d5-b9e5-0ee24abbf03e",
    "prId" : 16364,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16364#pullrequestreview-38512669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4de233d-1e22-4866-8a08-edc7a3dcff39",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think this needs a `with np.errstate`, as we are working with raw array\r\n\r\n```\r\nIn [8]: pd.Series([0, np.nan, 2]).clip(0, 1)\r\n/home/joris/scipy/pandas/pandas/core/generic.py:4117: RuntimeWarning: invalid value encountered in greater_equal\r\n  result = np.where(result >= upper, upper, result)\r\n/home/joris/scipy/pandas/pandas/core/generic.py:4119: RuntimeWarning: invalid value encountered in less_equal\r\n  result = np.where(result <= lower, lower, result)\r\nOut[8]: \r\n0    0.0\r\n1    NaN\r\n2    1.0\r\ndtype: float64\r\n```",
        "createdAt" : "2017-05-16T21:06:18Z",
        "updatedAt" : "2017-05-16T21:17:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "62843f8b3fb1933cfe7786b7710bcf6ba256f9e6",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +4115,4119 @@        mask = isnull(result)\n        if upper is not None:\n            result = np.where(result >= upper, upper, result)\n        if lower is not None:\n            result = np.where(result <= lower, lower, result)"
  },
  {
    "id" : "636b3baf-20b6-4bb4-ad7f-2542ab73e24c",
    "prId" : 16364,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16364#pullrequestreview-38512669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79c97cbf-00f2-46c8-9820-7428f74aebca",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Are the `np.any` needed here? As lower/upper are already confirmed to be a scalar?",
        "createdAt" : "2017-05-16T21:06:48Z",
        "updatedAt" : "2017-05-16T21:17:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "62843f8b3fb1933cfe7786b7710bcf6ba256f9e6",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +4109,4113 @@\n        if ((lower is not None and np.any(isnull(lower))) or\n                (upper is not None and np.any(isnull(upper)))):\n            raise ValueError(\"Cannot use an NA value as a clip threshold\")\n"
  },
  {
    "id" : "723ae0fa-e93c-4688-af39-ad8dbf974277",
    "prId" : 16462,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16462#pullrequestreview-39895942",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c07e367c-db24-4a5a-8381-9162c7eecf13",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "needs a versionadded tag.",
        "createdAt" : "2017-05-23T23:43:33Z",
        "updatedAt" : "2017-05-25T07:45:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "62ee43b71a06d30a8865e352d14156abe667c39f",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +4157,4161 @@            Align object with lower and upper along the given axis.\n        inplace : boolean, default False\n            Whether to perform the operation in place on the data\n                .. versionadded:: 0.21.0\n"
  },
  {
    "id" : "cf86113e-5140-4e1a-b647-7145eb403123",
    "prId" : 16462,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16462#pullrequestreview-39895965",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f6fbc28-074e-4d9c-97c2-7327e1dfb9a7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2017-05-23T23:43:43Z",
        "updatedAt" : "2017-05-25T07:45:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "62ee43b71a06d30a8865e352d14156abe667c39f",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +4236,4240 @@            Align object with threshold along the given axis.\n        inplace : boolean, default False\n            Whether to perform the operation in place on the data\n                .. versionadded:: 0.21.0\n"
  },
  {
    "id" : "22c90682-39cf-41c6-add7-77581cbb4b1a",
    "prId" : 16462,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16462#pullrequestreview-39895976",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16eaed1b-c808-4898-9f4e-46e4e4db4831",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2017-05-23T23:43:49Z",
        "updatedAt" : "2017-05-25T07:45:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "62ee43b71a06d30a8865e352d14156abe667c39f",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +4268,4272 @@            Align object with threshold along the given axis.\n        inplace : boolean, default False\n            Whether to perform the operation in place on the data\n                .. versionadded:: 0.21.0\n"
  },
  {
    "id" : "76c5ec50-1095-4bd6-b73e-8a315fb535c2",
    "prId" : 16465,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16465#pullrequestreview-40440804",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df03684a-1a45-4ca3-bc7d-7cbb3a256b4d",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think you'll need to start this with\r\n\r\n```python\r\nif self.ndim == 1:\r\n    self = self.to_frame()\r\n```\r\n\r\nthen the rest of it should be ok.",
        "createdAt" : "2017-05-24T21:45:27Z",
        "updatedAt" : "2017-05-26T11:47:12Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f5a70504-b66c-4621-a1ce-46c7e6a4a98d",
        "parentId" : "df03684a-1a45-4ca3-bc7d-7cbb3a256b4d",
        "authorId" : "00aa5284-32d1-4cf5-bba4-e4760f5bcbf2",
        "body" : "Thanks for this suggestion--doing the check here rather than invoking `to_frame()` in the Series _repr_latex method makes a lot of sense.",
        "createdAt" : "2017-05-26T03:52:54Z",
        "updatedAt" : "2017-05-26T11:47:12Z",
        "lastEditedBy" : "00aa5284-32d1-4cf5-bba4-e4760f5bcbf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "95ab5653cc9c1262bfd591f51ed38ba6181070a2",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +1575,1579 @@                 encoding=None, decimal='.', multicolumn=None,\n                 multicolumn_format=None, multirow=None):\n        # Get defaults from the pandas config\n        if self.ndim == 1:\n            self = self.to_frame()"
  },
  {
    "id" : "c329a867-48a4-4d28-87c7-8b09101397d3",
    "prId" : 16504,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16504#pullrequestreview-40394301",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "221e0f31-d7b4-4dc5-bd41-4c7ba07b651c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "woa. you are adding a LOT of code here. where exactly is the issue?",
        "createdAt" : "2017-05-25T20:56:44Z",
        "updatedAt" : "2017-07-01T08:41:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "34d8120a-8c72-4c81-9fd6-48f49547b176",
        "parentId" : "221e0f31-d7b4-4dc5-bd41-4c7ba07b651c",
        "authorId" : "0b23403c-dff8-4288-93ea-cb6a834d313e",
        "body" : "I fell like there are multiple lines of common code of `clip_upper` and `clip_lower` and this fix will make even more. Thus, I moved them form `clip_upper` and `clip_lower` to a new method `_clip_with_one_bound`. This is my first time to contribute code to a open-source project and I am not sure if I should do this. If I shouldn't, let me know and I should fix it. Thanks.\r\n\r\nThe issue is that if you pass a list to `clip`'s lower or upper argument, an error will be raised, because it will pass lower and upper to the argument other of `where` and `where`'s argument other doesn't take like or numpy array.",
        "createdAt" : "2017-05-25T21:12:34Z",
        "updatedAt" : "2017-07-01T08:41:16Z",
        "lastEditedBy" : "0b23403c-dff8-4288-93ea-cb6a834d313e",
        "tags" : [
        ]
      }
    ],
    "commit" : "85429ef0bbc1d1450c85c23c8b42541836a7d27a",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +4425,4429 @@\n        # method is self.le for upper bound and self.ge for lower bound\n        if is_scalar(threshold) and is_number(threshold):\n            if method.__name__ == 'le':\n                return self._clip_with_scalar(None, threshold, inplace=inplace)"
  },
  {
    "id" : "12842ff4-b8a1-45cf-8bfd-f7fbe1001217",
    "prId" : 16505,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16505#pullrequestreview-41471057",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33bd4e84-c834-4ba0-94ea-64a6109f2bee",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "versionadded tag",
        "createdAt" : "2017-05-26T12:06:30Z",
        "updatedAt" : "2017-06-13T21:06:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "059447af-2626-4f0b-a462-89919b024dfc",
        "parentId" : "33bd4e84-c834-4ba0-94ea-64a6109f2bee",
        "authorId" : "0bf5e041-50d5-450b-8f53-387ea2fb4724",
        "body" : "Which version should I specify?",
        "createdAt" : "2017-05-31T20:43:59Z",
        "updatedAt" : "2017-06-13T21:06:14Z",
        "lastEditedBy" : "0bf5e041-50d5-450b-8f53-387ea2fb4724",
        "tags" : [
        ]
      },
      {
        "id" : "0288ab82-0147-43b1-a38e-d7bcb0f23e29",
        "parentId" : "33bd4e84-c834-4ba0-94ea-64a6109f2bee",
        "authorId" : "0bf5e041-50d5-450b-8f53-387ea2fb4724",
        "body" : "Specified 0.20.2",
        "createdAt" : "2017-06-01T09:52:07Z",
        "updatedAt" : "2017-06-13T21:06:14Z",
        "lastEditedBy" : "0bf5e041-50d5-450b-8f53-387ea2fb4724",
        "tags" : [
        ]
      },
      {
        "id" : "1ec1ee3c-f093-402e-a378-db89c7f465f1",
        "parentId" : "33bd4e84-c834-4ba0-94ea-64a6109f2bee",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "move to 0.21.0",
        "createdAt" : "2017-06-01T10:28:01Z",
        "updatedAt" : "2017-06-13T21:06:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "01eaba1382c8862cca33fa13e23448f02fecca5c",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +803,807 @@           0 or 'index' for the index; 1 or 'columns' for the columns\n        inplace : bool\n            whether to modify `self` directly or return a copy\n\n            .. versionadded: 0.21.0"
  },
  {
    "id" : "40fe303b-3107-439a-a7fa-2f69a3bfd8b8",
    "prId" : 16505,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16505#pullrequestreview-41643746",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94ed87be-b483-432e-8fd1-022e3588c4ae",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is there a reason you removed the `deep=True` ?",
        "createdAt" : "2017-06-01T20:40:58Z",
        "updatedAt" : "2017-06-13T21:06:14Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "fe0b867c-1c9e-4b64-8b9c-ab10d90b37b4",
        "parentId" : "94ed87be-b483-432e-8fd1-022e3588c4ae",
        "authorId" : "0bf5e041-50d5-450b-8f53-387ea2fb4724",
        "body" : "It's the default and can thus be removed (as of @jreback's request that disappeared after my rebase).\r\nhttps://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L3523",
        "createdAt" : "2017-06-01T21:33:55Z",
        "updatedAt" : "2017-06-13T21:06:14Z",
        "lastEditedBy" : "0bf5e041-50d5-450b-8f53-387ea2fb4724",
        "tags" : [
        ]
      },
      {
        "id" : "1ad8545a-cd9b-42ed-8c3e-de986c9aec0b",
        "parentId" : "94ed87be-b483-432e-8fd1-022e3588c4ae",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK, perfect! (I looked for a comment about it, but didn't find one :-))",
        "createdAt" : "2017-06-01T21:35:08Z",
        "updatedAt" : "2017-06-13T21:06:14Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "01eaba1382c8862cca33fa13e23448f02fecca5c",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +837,841 @@\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        renamed = self if inplace else self.copy()\n        renamed.set_axis(axis, idx)\n        if not inplace:"
  },
  {
    "id" : "abed5186-de5b-4688-875e-6efe4db55b79",
    "prId" : 16951,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16951#pullrequestreview-53367069",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b54f10a-60dc-4aad-97ce-d0dd4fca6d27",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Is this a single-point-of-contact that all (most?  many?) setter methods go through?  i.e. will the various `loc.__setitem__` paths eventually wind through here?",
        "createdAt" : "2017-07-29T19:13:03Z",
        "updatedAt" : "2017-08-04T12:16:20Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "35175748-468b-459a-93e6-4e6b430defb9",
        "parentId" : "5b54f10a-60dc-4aad-97ce-d0dd4fca6d27",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yes, I believe that is correct.",
        "createdAt" : "2017-07-29T19:14:34Z",
        "updatedAt" : "2017-08-04T12:16:20Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "b32a5499-ba15-4cae-9964-7cd9d017b942",
        "parentId" : "5b54f10a-60dc-4aad-97ce-d0dd4fca6d27",
        "authorId" : "4fdf486b-81b0-48e9-9a67-6870c3d021a2",
        "body" : "That is my understanding, yes. Here is an example of setting while using `.loc`:\r\n\r\n```python\r\nimport pandas as pd\r\ndf = pd.DataFrame({'one': [0, 1, 2]})\r\ndf.loc[:, 'sum'] = df.one.sum()\r\n```\r\n\r\n```\r\nUserWarning: Column name 'sum' collides with a built-in method, which will cause unexpected attribute behavior\r\n  self._set_item(key, value)\r\n\r\n```",
        "createdAt" : "2017-07-29T20:29:42Z",
        "updatedAt" : "2017-08-04T12:16:20Z",
        "lastEditedBy" : "4fdf486b-81b0-48e9-9a67-6870c3d021a2",
        "tags" : [
        ]
      },
      {
        "id" : "b27ea47b-9817-413f-a403-a74072940365",
        "parentId" : "5b54f10a-60dc-4aad-97ce-d0dd4fca6d27",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this point is *only* for ``[]`` setting, e.g. setting a column on a DF or an element on a Series. ``.loc/.iloc`` are handled in core/indexing.py",
        "createdAt" : "2017-07-31T23:19:00Z",
        "updatedAt" : "2017-08-04T12:16:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b86546e92707483dbbdf0ee58f83311f2e896323",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1907,1911 @@        return result\n\n    def _set_item(self, key, value):\n        if isinstance(key, str) and callable(getattr(self, key, None)):\n            warnings.warn(\"Column name '{key}' collides with a built-in \""
  },
  {
    "id" : "05e6b851-12a4-44b6-8928-47d724d38be2",
    "prId" : 16951,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16951#pullrequestreview-54079010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f3acb31-b1fb-476d-8b87-9fa9b81a0baa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use compat.string_types rather than ``str`` here",
        "createdAt" : "2017-07-31T23:26:03Z",
        "updatedAt" : "2017-08-04T12:16:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a80c4f80-63d6-46b5-bc24-b58c013b46fa",
        "parentId" : "6f3acb31-b1fb-476d-8b87-9fa9b81a0baa",
        "authorId" : "4fdf486b-81b0-48e9-9a67-6870c3d021a2",
        "body" : "Using `string_types` causes failures in Python2 when creating columns that have unicode characters in their names. See c90aa2266137d78f4786b85ff3a5cd08ff0c39fd.",
        "createdAt" : "2017-08-03T12:40:37Z",
        "updatedAt" : "2017-08-04T12:16:20Z",
        "lastEditedBy" : "4fdf486b-81b0-48e9-9a67-6870c3d021a2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b86546e92707483dbbdf0ee58f83311f2e896323",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1908,1912 @@\n    def _set_item(self, key, value):\n        if isinstance(key, str) and callable(getattr(self, key, None)):\n            warnings.warn(\"Column name '{key}' collides with a built-in \"\n                          \"method, which will cause unexpected attribute \""
  },
  {
    "id" : "fec2bf6f-d089-4c3d-9fe4-39cdca20f6a9",
    "prId" : 16951,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16951#pullrequestreview-54954875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "196aa6ba-961d-4340-a6a3-b3a8fc1bea1e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would write this a bit more generic, as it does not only raise for Series objects (and I also find it a bit confusing, as pandas certainly allows assigning Series objects, just with another syntax). \r\n\r\nMaybe something like \"pandas doesn't allow to add a new column using attribute access\" ? (can certainly be improved further)",
        "createdAt" : "2017-08-08T14:27:40Z",
        "updatedAt" : "2017-08-08T14:27:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "b86546e92707483dbbdf0ee58f83311f2e896323",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +3364,3368 @@                if isinstance(self, ABCDataFrame) and (is_list_like(value)):\n                    warnings.warn(\"Pandas doesn't allow Series to be assigned \"\n                                  \"into nonexistent columns - see \"\n                                  \"https://pandas.pydata.org/pandas-docs/\"\n                                  \"stable/indexing.html#attribute-access\","
  },
  {
    "id" : "017b450e-db3d-46b8-bede-ec1a9dff3484",
    "prId" : 16972,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16972#pullrequestreview-52590604",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6283c42-e698-443b-8936-c8d9791b699c",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Also here the docstring of `isnull` is not fully correct",
        "createdAt" : "2017-07-27T08:47:06Z",
        "updatedAt" : "2017-07-27T08:50:59Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "25eadac6ea9de44b9a3b3305061cbccd453bba7c",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +4550,4554 @@    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isnull(self):\n        return isna(self).__finalize__(self)\n\n    _shared_docs['notna'] = \"\"\""
  },
  {
    "id" : "eb737fb7-18f9-4c5c-bcce-fa3d18854be7",
    "prId" : 17203,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17203#pullrequestreview-55181931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03cdae28-9255-4898-904d-2a874097792a",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Let's provide an example using the `copy` argument given that it says the parameter should be handled with care.",
        "createdAt" : "2017-08-08T21:59:37Z",
        "updatedAt" : "2017-08-09T10:24:25Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "bbca849c-1d4b-4c89-a675-a8781cb6ee16",
        "parentId" : "03cdae28-9255-4898-904d-2a874097792a",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Ok, done, added example with ``copy=False``, where result propagates upwards.\r\n\r\nI could only get it to work with categoricals and not numpy dtypes, so the example is a bit contrieved.",
        "createdAt" : "2017-08-08T23:04:03Z",
        "updatedAt" : "2017-08-09T10:24:25Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "e1c730ec-8ed9-474e-8758-7c64ca240994",
        "parentId" : "03cdae28-9255-4898-904d-2a874097792a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "copy is not really that useful here, but ok since that you did it.",
        "createdAt" : "2017-08-08T23:23:33Z",
        "updatedAt" : "2017-08-09T10:24:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a561b5ed-329c-4bfe-b5de-52b78efd8616",
        "parentId" : "03cdae28-9255-4898-904d-2a874097792a",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Yeah, especially if ``copy=False`` has no effect with numpy.dtypes.\r\n\r\nUnless someone can find an effect with columns with numpy.dtypes, I wouldn't mind pulling this out again, as my example is maybe a bit silly.",
        "createdAt" : "2017-08-08T23:35:17Z",
        "updatedAt" : "2017-08-09T10:24:25Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "c04e728c-fa7f-4d92-9161-d8114a2015ad",
        "parentId" : "03cdae28-9255-4898-904d-2a874097792a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "For me it works as well with numpy dtypes:\r\n\r\n```\r\nIn [77]: s1 = pd.Series([1,2])\r\n\r\nIn [78]: s2 = s1.astype('int', copy=False)\r\n\r\nIn [79]: s2[0] = 10\r\n\r\nIn [80]: s1\r\nOut[80]: \r\n0    10\r\n1     2\r\ndtype: int64\r\n```\r\n\r\nIt's just that the dtype needs to be equivalent (otherwise it always takes a copy).\r\n\r\nSo I would change the example",
        "createdAt" : "2017-08-09T08:59:24Z",
        "updatedAt" : "2017-08-09T10:24:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ddd1750d-5612-4485-a9d4-0cbe644acbc3",
        "parentId" : "03cdae28-9255-4898-904d-2a874097792a",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Ok, I've changed it to your example.",
        "createdAt" : "2017-08-09T09:35:48Z",
        "updatedAt" : "2017-08-09T10:24:25Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "c90160ad67ac82cb1c4f6952be7ca333520b5b3a",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +3641,3645 @@        casted : type of caller\n\n        Examples\n        --------\n        >>> ser = pd.Series([1, 2], dtype='int32')"
  },
  {
    "id" : "43d82641-a6ac-4250-a0c5-a41c98ca6904",
    "prId" : 17203,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17203#pullrequestreview-55139911",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ea3d6bd-5de4-477b-b09a-9a7c12bee74f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could add a See Also to numpy.astype here.",
        "createdAt" : "2017-08-08T23:24:13Z",
        "updatedAt" : "2017-08-09T10:24:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a7f3fdc1-cfaf-48d0-b41b-614d0b81d62a",
        "parentId" : "6ea3d6bd-5de4-477b-b09a-9a7c12bee74f",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Ok, done.",
        "createdAt" : "2017-08-09T06:01:12Z",
        "updatedAt" : "2017-08-09T10:24:25Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "c90160ad67ac82cb1c4f6952be7ca333520b5b3a",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +3640,3644 @@        -------\n        casted : type of caller\n\n        Examples\n        --------"
  },
  {
    "id" : "5f7e8664-edea-447c-894a-c813e2067cb5",
    "prId" : 17203,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17203#pullrequestreview-55205468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77ef257b-9883-4bc4-8002-94515525b7bf",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "maybe add something like \", and `copy=False` has only effect when the specified dtype is equivalent to the existing dtype\" ?",
        "createdAt" : "2017-08-09T09:39:19Z",
        "updatedAt" : "2017-08-09T10:24:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "11883cde-8f2f-4ecf-9a46-d8e7501b5905",
        "parentId" : "77ef257b-9883-4bc4-8002-94515525b7bf",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Hmm, I consciously made it clearer but not-too-specific, as I don't really know how ``copy`` does its thing, and I doubt this is used so often.\r\n\r\nI suggest to leave it as it is. Is that ok?",
        "createdAt" : "2017-08-09T09:50:29Z",
        "updatedAt" : "2017-08-09T10:24:25Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "80933eb6-627c-4c59-b7d0-b7d9367f4e70",
        "parentId" : "77ef257b-9883-4bc4-8002-94515525b7bf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "yes, that is fine",
        "createdAt" : "2017-08-09T11:24:52Z",
        "updatedAt" : "2017-08-09T11:24:52Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "c90160ad67ac82cb1c4f6952be7ca333520b5b3a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +3623,3627 @@            Return a copy when ``copy=True`` (be very careful setting\n            ``copy=False`` as changes to values then may propagate to other\n            pandas objects).\n        errors : {'raise', 'ignore'}, default 'raise'.\n            Control raising of exceptions on invalid data for provided dtype."
  },
  {
    "id" : "5e12b3e4-d31c-49eb-a190-f1f4e3112c4f",
    "prId" : 17352,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17352#pullrequestreview-66193596",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "039fd377-52a8-4662-ad96-781d442fe287",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "``convert=None`` should be the default and show the warning if its not None.",
        "createdAt" : "2017-09-27T10:35:37Z",
        "updatedAt" : "2017-10-01T06:13:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d7cb0f79-989b-4f76-ba5d-e33ba64d7a9b",
        "parentId" : "039fd377-52a8-4662-ad96-781d442fe287",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Why!?  `convert=None` makes less sense compared `convert=False`.",
        "createdAt" : "2017-09-27T14:57:50Z",
        "updatedAt" : "2017-10-01T06:13:13Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "563f4c61-68d8-4e48-a945-75d021428ae0",
        "parentId" : "039fd377-52a8-4662-ad96-781d442fe287",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "the point is to deprecate this. How can you tell that someone is then passing the convert parameter at all? you can then check if ``convert`` is not ``None`` to see if it was passed",
        "createdAt" : "2017-09-29T10:08:09Z",
        "updatedAt" : "2017-10-01T06:13:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c2c42971-f825-4c61-a4f0-6800d504df61",
        "parentId" : "039fd377-52a8-4662-ad96-781d442fe287",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "That's because `convert=True` is the default per the signature.",
        "createdAt" : "2017-09-29T15:48:19Z",
        "updatedAt" : "2017-10-01T06:13:13Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "9325f21581d3ece0ba68ea2d7a029b59257de7d5",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +2197,2201 @@        nv.validate_take(tuple(), kwargs)\n\n        if not convert:\n            msg = (\"The 'convert' parameter is deprecated \"\n                   \"and will be removed in a future version.\")"
  },
  {
    "id" : "8288bccf-0ab2-4ab2-9949-1cde1a91d12c",
    "prId" : 17484,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17484#pullrequestreview-74263566",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7198ec24-22f2-48b0-b130-2bd8bbf6922b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same as above",
        "createdAt" : "2017-11-04T19:27:09Z",
        "updatedAt" : "2017-12-01T01:45:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3b95feba9a9b55febae333ebaec5239f6af63b4",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +1283,1287 @@\n        Returns\n        -------\n        dropped: DataFrame\n"
  },
  {
    "id" : "fd2fc120-f7c0-4700-a383-a4533d8838db",
    "prId" : 17484,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17484#pullrequestreview-74761918",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f4edbeb-0300-42a4-a9ca-fba6f14d6ac8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "haven't looked at tests yet, make sure this is tested (the ndim > 2)",
        "createdAt" : "2017-11-07T13:27:34Z",
        "updatedAt" : "2017-12-01T01:45:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "20cb4cd1-ea2f-4e89-a27f-7f3f11c27bf2",
        "parentId" : "1f4edbeb-0300-42a4-a9ca-fba6f14d6ac8",
        "authorId" : "f342d5a1-8520-43c2-8078-e3c8de5c0da3",
        "body" : "I added exception assertion tests for all of the new methods against a Panel object.  Does that cover ndim > 2 well enough?",
        "createdAt" : "2017-11-07T14:20:15Z",
        "updatedAt" : "2017-12-01T01:45:02Z",
        "lastEditedBy" : "f342d5a1-8520-43c2-8078-e3c8de5c0da3",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3b95feba9a9b55febae333ebaec5239f6af63b4",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +1104,1108 @@        other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]\n\n        if self.ndim > 2:\n            raise NotImplementedError(\n                \"_is_label_reference is not implemented for {type}\""
  },
  {
    "id" : "fa7204e5-d7d0-4f97-9693-8053c65392f7",
    "prId" : 17644,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17644#pullrequestreview-64738388",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8edecde0-58a3-449b-aeda-2987aca52132",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Perhaps add a `Notes` section saying that specifying both `labels` and `index` or `columns` will raise an error.",
        "createdAt" : "2017-09-23T12:14:04Z",
        "updatedAt" : "2017-09-24T09:38:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef82853948b483f37e431801848177a801939a92",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +2346,2350 @@            Whether to drop labels from the index (0 / 'index') or\n            columns (1 / 'columns').\n        index, columns : single label or list-like\n            Alternative to specifying `axis` (``labels, axis=1`` is\n            equivalent to ``columns=labels``)."
  },
  {
    "id" : "ef953226-1268-43ee-bcdf-28b9b7bb4417",
    "prId" : 17644,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17644#pullrequestreview-64741756",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bb871f9-54d3-4dff-996c-d84eb6c9e7ea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a versionadded tag",
        "createdAt" : "2017-09-23T15:12:05Z",
        "updatedAt" : "2017-09-24T09:38:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef82853948b483f37e431801848177a801939a92",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +2348,2352 @@        index, columns : single label or list-like\n            Alternative to specifying `axis` (``labels, axis=1`` is\n            equivalent to ``columns=labels``).\n\n            .. versionadded:: 0.21.0"
  },
  {
    "id" : "cfad6d16-03e7-427a-b578-33fa482e9f03",
    "prId" : 17665,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17665#pullrequestreview-64880685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fef4a42-3f6e-49c1-bfc3-a410268c7f4e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you update same for ``.mask`` as well.",
        "createdAt" : "2017-09-25T12:05:52Z",
        "updatedAt" : "2017-09-25T12:53:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5d5aeacd-7a20-4b2c-848c-cd316d421c9c",
        "parentId" : "4fef4a42-3f6e-49c1-bfc3-a410268c7f4e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "mask and where now use the same docstring (with only parts of it substituted with the correct value). But keep doing this and providing a better explanation will become rather complex I think. Are you OK with just duplicating the docstring and have one for where and mask separately ?",
        "createdAt" : "2017-09-25T12:14:58Z",
        "updatedAt" : "2017-09-25T12:53:59Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e3c9df1b-4b0e-4a0b-9591-8edb68674478",
        "parentId" : "4fef4a42-3f6e-49c1-bfc3-a410268c7f4e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh that's right. I don't think duplicating is a good idea. maybe just put an example with mask here as well.",
        "createdAt" : "2017-09-25T12:36:44Z",
        "updatedAt" : "2017-09-25T12:53:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf8f0811211d97f81e000f8e0b8fb1842ca367d0",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +5820,5824 @@\n            return self._constructor(new_data).__finalize__(self)\n\n    _shared_docs['where'] = (\"\"\"\n        Return an object of same shape as self and whose corresponding"
  },
  {
    "id" : "cca54590-7c34-495e-aa0e-761c0b031db6",
    "prId" : 17800,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17800#pullrequestreview-67992997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c53f4178-4335-4568-974a-93934dbbc18d",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is this also true for the mapper?",
        "createdAt" : "2017-10-06T14:35:57Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e2aa31ba-15b4-4b68-a54f-07377505a8b4",
        "parentId" : "c53f4178-4335-4568-974a-93934dbbc18d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is the `Series.rename` docstring right now:\r\n\r\n```\r\nSignature: df.A.rename(index=None, **kwargs)\r\nDocstring:\r\nAlter axes input function or functions. Function / dict values must be\r\nunique (1-to-1). Labels not contained in a dict / Series will be left\r\nas-is. Extra labels listed don't throw an error. Alternatively, change\r\n``Series.name`` with a scalar value (Series only).\r\n\r\nParameters\r\n----------\r\n\r\nindex : scalar, list-like, dict-like or function, optional\r\n    Scalar or list-like will alter the ``Series.name`` attribute,\r\n    and raise on DataFrame or Panel.\r\n    dict-like or functions are transformations to apply to\r\n    that axis' values\r\n```\r\n\r\nSo i didn't modify the signature at all. It doesn't have an `mapper` argument.",
        "createdAt" : "2017-10-06T14:54:40Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "26efd97e-8312-49c3-9c1b-d68332159505",
        "parentId" : "c53f4178-4335-4568-974a-93934dbbc18d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "(I think that not having `mapper` or `axis` kwargs is the better option here, but I may be wrong)",
        "createdAt" : "2017-10-06T14:55:50Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "eda0b5a8-41fd-48d6-9992-ad2cd8ec5ec9",
        "parentId" : "c53f4178-4335-4568-974a-93934dbbc18d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Sorry, I wanted to say that for the DataFrame docstring (this is in generic.py). \r\nSo I meant, for a dataframe.rename, is the explanation of index/column, also valid for mapper (scalar vs mapping)",
        "createdAt" : "2017-10-06T15:21:21Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1891e6a7-383b-4973-866e-d5d32df232df",
        "parentId" : "c53f4178-4335-4568-974a-93934dbbc18d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah, the dict / function-like arguments descriptions are correct. Scalar / list-like don't apply. I could make that bit a shared_doc section... Let me try quick.",
        "createdAt" : "2017-10-06T15:43:20Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "91b5ccf6-8942-4bae-a8ca-739428908211",
        "parentId" : "c53f4178-4335-4568-974a-93934dbbc18d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Although, at some point a separate docstring might be easier.",
        "createdAt" : "2017-10-06T15:43:44Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "690b3b45-c729-46a6-8bfc-b36fcd05fd7f",
        "parentId" : "c53f4178-4335-4568-974a-93934dbbc18d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Ugh, this is pretty messy. I'm just going to leave as-is for now. For `DataFrame.rename` the docstring starts\r\n\r\n```\r\nParameters\r\n----------\r\nmapper : dict-like or function\r\n    Applied to the axis specified by `axis`\r\nindex, columns : scalar, list-like, dict-like or function, optional\r\n    Scalar or list-like will alter the ``Series.name`` attribute,\r\n    and raise on DataFrame or Panel.\r\n    dict-like or functions are transformations to apply to\r\n    that axis' values\r\naxis : int or str, optional\r\n    Axis to target. Can be either the axis name ('index', 'columns')\r\n    or number (0, 1).\r\n```",
        "createdAt" : "2017-10-06T15:51:58Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "abdf8588-79c3-4845-82ee-12454bc2df73",
        "parentId" : "c53f4178-4335-4568-974a-93934dbbc18d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I personally would also create separate docstrings for the series/dataframe versions of those methods. It will give a bit of duplication, but it will be much easier and take less time to make sure this duplication is done correctly than trying to figure out how to make it work with the docstring substitution. \r\nBut agree that can be in another PR.",
        "createdAt" : "2017-10-09T14:17:54Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e668bfd35260d2f77e7230ebffafd476b92991a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +745,749 @@        %(optional_mapper)s\n        %(axes)s : scalar, list-like, dict-like or function, optional\n            Scalar or list-like will alter the ``Series.name`` attribute,\n            and raise on DataFrame or Panel.\n            dict-like or functions are transformations to apply to"
  },
  {
    "id" : "e7e747ab-397d-44c8-91db-1ed05c529cd9",
    "prId" : 17800,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17800#pullrequestreview-67988839",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10e5957d-c660-4bfe-9a69-124074e54ede",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are you showing examples of both? maybe put your highly recommended warning here?",
        "createdAt" : "2017-10-06T19:51:27Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3b05946c-a64a-4e9c-86e2-f4f91fb1c446",
        "parentId" : "10e5957d-c660-4bfe-9a69-124074e54ede",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yep, added.",
        "createdAt" : "2017-10-09T13:50:29Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e668bfd35260d2f77e7230ebffafd476b92991a",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +821,825 @@        2  3  6\n\n        Using axis-style parameters\n\n        >>> df.rename(str.lower, axis='columns')"
  },
  {
    "id" : "7190b2bb-0a53-4be0-b9a5-39caa2199001",
    "prId" : 17800,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17800#pullrequestreview-67988799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4695432f-0118-443f-bf95-315bfa502bcc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same add the warning?",
        "createdAt" : "2017-10-06T19:52:09Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "32c201b3-2b2e-4af0-b53a-7d7648072117",
        "parentId" : "4695432f-0118-443f-bf95-315bfa502bcc",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Added above.",
        "createdAt" : "2017-10-09T13:50:22Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e668bfd35260d2f77e7230ebffafd476b92991a",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +2876,2880 @@        Chrome                200          0.02\n\n        We can also reindex the columns.\n\n        >>> df.reindex(columns=['http_status', 'user_agent'])"
  }
]