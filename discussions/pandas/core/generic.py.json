[
  {
    "id" : "36e8a32d-93e6-4517-83b5-2912eee391f8",
    "prId" : 2410,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "780cf460-81bf-4203-814f-7cacd81b665a",
        "parentId" : null,
        "authorId" : "55206695-bb42-4d72-886f-f5370a77363e",
        "body" : "will need to add some docs here for sure\n",
        "createdAt" : "2012-12-07T15:42:28Z",
        "updatedAt" : "2012-12-07T15:42:28Z",
        "lastEditedBy" : "55206695-bb42-4d72-886f-f5370a77363e",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce604af36df2a89603411e24fc60946e69f58e6f",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +219,223 @@        closed : {'right', 'left'}, default None\n            Which side of bin interval is closed\n        label : {'right', 'left'}, default None\n            Which bin edge label to label bucket with\n        convention : {'start', 'end', 's', 'e'}"
  },
  {
    "id" : "547f4bc4-853e-4e44-938d-c1c277c2078f",
    "prId" : 5848,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fd36e63-74b5-466c-84da-dd5f347a4ba9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you need similar logic on head, no?\n",
        "createdAt" : "2014-01-04T18:56:10Z",
        "updatedAt" : "2014-01-14T21:07:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f046eab4-1e4a-4368-8652-63c12b0224a2",
        "parentId" : "9fd36e63-74b5-466c-84da-dd5f347a4ba9",
        "authorId" : "af9488ab-761a-4bd1-8bd9-c8fdbeae13b0",
        "body" : "I added similar logic on head now.  The question is this changes how df.head(0) works.  It now returns self.  before it returned the same as df.head(1)  \n",
        "createdAt" : "2014-01-05T00:12:20Z",
        "updatedAt" : "2014-01-14T21:07:22Z",
        "lastEditedBy" : "af9488ab-761a-4bd1-8bd9-c8fdbeae13b0",
        "tags" : [
        ]
      }
    ],
    "commit" : "66b9e8ce53e0cbc204f4aa9336f6014876f3ad25",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1586,1590 @@        if l == 0 or n == 0:\n            return self\n        if n > l:\n            n = l\n        elif n < -l:"
  },
  {
    "id" : "51b25cf3-5157-4407-9746-d856f6c366b1",
    "prId" : 6745,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebed5f59-94d2-42b2-a74c-1b857be35855",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "Is copy handled in BlockManager.reindex_indexers ?\n\nI don't think this is well tested and most of the time it should prob copy unless identical indexes \n",
        "createdAt" : "2014-04-18T23:31:45Z",
        "updatedAt" : "2014-04-25T13:50:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c16e4cab-434f-46ea-a426-8411c7152309",
        "parentId" : "ebed5f59-94d2-42b2-a74c-1b857be35855",
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "A rule of thumb I try to follow is, yeah, that reindex should copy, unless there's \"inplace=True\" kwarg somewhere.\n\nBut point taken, need to double check that.\n",
        "createdAt" : "2014-04-19T08:15:59Z",
        "updatedAt" : "2014-04-25T13:50:55Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      }
    ],
    "commit" : "f51235aef9bbb50632b569d9e0c104816e5e31a0",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +1709,1713 @@            if indexer is not None:\n                indexer = com._ensure_int64(indexer)\n\n            # TODO: speed up on homogeneous DataFrame objects\n            new_data = new_data.reindex_indexer(index, indexer, axis=baxis,"
  },
  {
    "id" : "6220f58a-16f8-41e4-b58f-20b4ee7165cd",
    "prId" : 6748,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf2c9e97-e297-498a-812e-8585bce382fb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "had meant to move the guts of this to internals anyhow; e.g. maybe `get_as_blocks` can return the dict of str(dtype) to block manager (already combined), so in generic needs to just iterate and _constructor....finalize...\n\nif it works better to refactor this later (in your internal changes checklist), ok 2\n\nlmk\n",
        "createdAt" : "2014-03-31T10:59:53Z",
        "updatedAt" : "2014-03-31T11:00:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f81f1abe-d370-4378-84d7-ffabdd920c62",
        "parentId" : "cf2c9e97-e297-498a-812e-8585bce382fb",
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "This will most likely get overwritten during refactoring.\n\nAnd it did occur to me that this is very much like \"group blocks by ftype\" operation that happens during merging/concatenation. And the implementation does look rather trivial:\n\n``` python\ndef mapreduce_blocks(mgr, keyfunc, reducer):\n    return dict((key, reducer(val_iter))\n                for key, val_iter in itertools.groupby(mgr.blocks, keyfunc=keyfunc))\n\ndef group_blocks_by_ftype(mgr):\n    return mapreduce_blocks(mgr, keyfunc=lambda b: str(b.ftype),\n                            reducer=list)\n\ndef combine_blocks_by_dtype(mgr):\n    return mapreduce_blocks(mgr, keyfunc=lambda b: str(b.dtype),\n                            reducer=mgr.combine)\n```\n\nSuch one-liner functions are indeed a natural extension of blockmanager external API, but I'm not sure if they deserve to be part of it.\n",
        "createdAt" : "2014-03-31T13:22:34Z",
        "updatedAt" : "2014-03-31T13:22:34Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      },
      {
        "id" : "9356d515-1945-47f0-94f4-2ef47339ec10",
        "parentId" : "cf2c9e97-e297-498a-812e-8585bce382fb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok....maybe just reference this issue then in your refactoring...\n\nwill merge then\n",
        "createdAt" : "2014-03-31T13:28:40Z",
        "updatedAt" : "2014-03-31T13:28:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "668d6b82-a9b0-4db8-9833-f9edfd9f361f",
        "parentId" : "cf2c9e97-e297-498a-812e-8585bce382fb",
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "_I've decided to separate this into a separate comment._\n\nWhich brings me to another topic, minimalism in API design. I mean, I tend to share the opinion that an API is perfect not when you can't add anything else but rather when you can't take anything from it. It happens quite often that an interface gets overburdened with those small details, e.g. it just hurts my eyes to wade through `numpy.ndarray` attrs/methods when I forget the exact spelling of the thing I want to use and I know is there:\n\n```\nIn [1]: np.arange(10)\nOut[1]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nIn [2]: _1.\n_1.T             _1.choose        _1.data          _1.flatten       _1.nbytes        _1.repeat        _1.sort          _1.tostring\n_1.all           _1.clip          _1.diagonal      _1.getfield      _1.ndim          _1.reshape       _1.squeeze       _1.trace\n_1.any           _1.compress      _1.dot           _1.imag          _1.newbyteorder  _1.resize        _1.std           _1.transpose\n_1.argmax        _1.conj          _1.dtype         _1.item          _1.nonzero       _1.round         _1.strides       _1.var\n_1.argmin        _1.conjugate     _1.dump          _1.itemset       _1.prod          _1.searchsorted  _1.sum           _1.view\n_1.argsort       _1.copy          _1.dumps         _1.itemsize      _1.ptp           _1.setfield      _1.swapaxes      \n_1.astype        _1.ctypes        _1.fill          _1.max           _1.put           _1.setflags      _1.take          \n_1.base          _1.cumprod       _1.flags         _1.mean          _1.ravel         _1.shape         _1.tofile        \n_1.byteswap      _1.cumsum        _1.flat          _1.min           _1.real          _1.size          _1.tolist        \n```\n\nAnd, unfortunately, pandas containers add more on top of that:\n\n```\nIn [1]: pd.Series()\nOut[1]: Series([], dtype: float64)\n\nIn [2]: _1.\nDisplay all 225 possibilities? (y or n)\n```\n\nThe desire to have a bit of everything at your fingertip is tempting indeed, but 225 (two hundred!!) methods and properties is a bit too many for my liking. And it is a lot to wrap your head around when you're only starting.\n",
        "createdAt" : "2014-03-31T13:30:32Z",
        "updatedAt" : "2014-03-31T13:30:32Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      },
      {
        "id" : "0f8919b2-68dd-4439-af07-140b4416a6ff",
        "parentId" : "cf2c9e97-e297-498a-812e-8585bce382fb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "that's a valid point, except that you have search in the docs, lots of docs, and you can always start the possibilities with a letter (to narrow down the search).\n\npandas provides a lot of functionaility (as does numpy). not sure that this is a problem per se.\n\nthe alternative is cryptic functions that do too much with too much overloading. which IMHO is a bigger/worse problem.\n",
        "createdAt" : "2014-03-31T13:34:35Z",
        "updatedAt" : "2014-03-31T13:34:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "84ba181d-ae92-433b-a6fa-2ddabe3c4041",
        "parentId" : "cf2c9e97-e297-498a-812e-8585bce382fb",
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "> the alternative is cryptic functions that do too much with too much overloading. which IMHO is a bigger/worse problem.\n\nI like how overloading is handled in BLAS interfaces: you have a convention about prefixes/suffixes that correspond to certain variation of the core algorithm, so you as a programmer should make an educated guess about what the data is going to look like or just use the generic implementation.\n\nAs for the naming, I've gone through the reference a bit and found out a \"light of hope\": string functions that obviously form a cluster of functionality available for series containers are conveniently put under `.str` attribute, that's a very nice application of namespacing and that's a very viable approach to the API cluttering problem. Following the Zen, I'd suggest that _Namespaces are one honking great idea -- let's do more of those!_\n",
        "createdAt" : "2014-03-31T14:03:32Z",
        "updatedAt" : "2014-03-31T14:03:32Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      },
      {
        "id" : "c7a49d2b-e98a-4ec5-9bcb-7171537a67da",
        "parentId" : "cf2c9e97-e297-498a-812e-8585bce382fb",
        "authorId" : "53ceba57-9272-4f73-b91f-1e647a7d2ce3",
        "body" : "Whenever I monkey patch new functionality I try to create namespaces. Since we control the ipython autocomplete, we could always move methods from the root to namespaces. The original methods would still work, they just wouldn't autocomplete in the root. I do this for subclasses of pandas objects. If I created a subclass like `OHLC`, I'd rather only see the custom methods I made. \n",
        "createdAt" : "2014-03-31T14:31:25Z",
        "updatedAt" : "2014-03-31T14:31:25Z",
        "lastEditedBy" : "53ceba57-9272-4f73-b91f-1e647a7d2ce3",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a6244453537e0c1b07ec63324a9e263b4efd3f2",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +2029,2033 @@        for b in self._data.blocks:\n            bd.setdefault(str(b.dtype), []).append(b)\n\n        result = {}\n        for dtype, blocks in bd.items():"
  },
  {
    "id" : "c8a9beb6-0783-4bf3-a99b-f4d17d8e83b3",
    "prId" : 6974,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a95fc5b0-0edd-4f5d-ba3b-db36dfc311ab",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not 100% happy with this (I like your soln better), but perf is odd. can we do this inside of Block instead? (e.g. just automatically do it if ndim >= 3), a bit cleaner that way and all the code in the same place\n",
        "createdAt" : "2014-04-27T17:52:18Z",
        "updatedAt" : "2014-04-27T17:52:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "81675b651bc9aa04c1edaf1307aa72168f01abbb",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3228,3232 @@        return self._constructor(new_data).__finalize__(self)\n\n    def slice_shift(self, periods=1, axis=0, **kwds):\n        \"\"\"\n        Equivalent to `shift` without copying data. The shifted data will"
  },
  {
    "id" : "b5ba31a0-c0d6-43be-a16d-14b312e5d899",
    "prId" : 7133,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c071038f-fd34-44f9-bb23-2ab3bad71ddf",
        "parentId" : null,
        "authorId" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "body" : "I wasn't exactly sure what the rules regarding \"outname\" are.  Can they have spaces?  What about underscores?  How long should they be?  So this may not be the best name.\n",
        "createdAt" : "2014-05-16T13:32:37Z",
        "updatedAt" : "2014-06-05T10:21:19Z",
        "lastEditedBy" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "tags" : [
        ]
      },
      {
        "id" : "1b59fa87-233c-4bac-b65d-3c72b01b22b9",
        "parentId" : "c071038f-fd34-44f9-bb23-2ab3bad71ddf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "outname is just a 'descriptive' name used to autogenerate the doc strings, so that is fine\n",
        "createdAt" : "2014-05-16T13:57:52Z",
        "updatedAt" : "2014-06-05T10:21:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2121b22ebfb539db62e248be0f99815e2931ac90",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +3830,3834 @@        cls.std = std\n\n        @Substitution(outname='standarderror',\n                      desc=\"Return unbiased standard error of the mean over \"\n                           \"requested axis.\\n\\nNormalized by N-1 by default. \""
  },
  {
    "id" : "66f086c7-f913-4a5e-be91-8ce880f42f65",
    "prId" : 8550,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is this necessary?\n",
        "createdAt" : "2014-10-20T01:03:10Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6a87cfb5-f77d-4296-b741-b19076458190",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "body" : "These logical functions have slightly different documentation: a 'bool_only' field instead of a 'numeric_only' field, and potentially a message about supporting additional numpy arguments via the bool_extended_args variable.\n",
        "createdAt" : "2014-10-20T21:38:35Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "tags" : [
        ]
      },
      {
        "id" : "85a32880-58ca-4030-80b3-19a25a8ef810",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I don't think this is necessary (nor is any other 'bool_extended_args' variable), its just not needed. That said If you have a use case pls show it.\n",
        "createdAt" : "2014-10-20T22:16:14Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "eab72319-35d7-41c4-9578-4184186717db",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "body" : "I'd like to better understand your comment. I mentioned two special cases in the documentation here, the bool_only argument name and the documentation message about supporting additional numpy arguments, which are currently supported in master's Series.any/all, which forwards to numpy's any/all.\n1) bool_only is the preexisting argument name for DataFrame's any and all, in master. Are you suggesting I should change it to numeric_only?\n2) You had suggested earlier that I should continue to support the ndarray.any/all arguments that are supported by Series.any/all in master (these are the 'out' and 'keepdims' parameters). Are you saying that I should not support these, or that I should not document that they are supported?\n",
        "createdAt" : "2014-10-20T22:32:47Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "tags" : [
        ]
      },
      {
        "id" : "6d33dd5c-137c-4b0c-9045-8c123fc42603",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "1) maybe I wasn't clear. The signature should be something like: `any(laxis, skipna, level, **kwargs)`; we _accept_ but don't deal explicity with the numpy args (e.g. `out`) and such. Its not useful, nor is it consistent with how pandas works.\n\n2) I realized I was confusing about `bool_only`, yes that is a good idea (just not `bool_extended_args`\n",
        "createdAt" : "2014-10-20T23:04:53Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "224f5166-71c2-4b16-8959-9036741e31f5",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "body" : "Hi, just to make sure I understand your point 1, by \"accept but do not deal explicitly with numpy args\" do you mean we ignore the args or we attempt to pass them through if numpy.any is eventually called (the arguments are forwarded opaquely as kwargs)?\n\nIf the former, is there anything I need to do to deprecate these arguments, which are supported in master and, at least for the out argument, currently documented: http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.any.html\n",
        "createdAt" : "2014-10-21T02:29:00Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "tags" : [
        ]
      },
      {
        "id" : "2602129a-2d55-4570-9176-853f3d86b9d8",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no just accept **kwargs and u r done\n",
        "createdAt" : "2014-10-21T02:32:03Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "287055cf-aa13-4f79-9eaa-0bdd0dca3af9",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "body" : "Thanks, got it.\n",
        "createdAt" : "2014-10-21T02:35:28Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "tags" : [
        ]
      },
      {
        "id" : "6fde79b6-748a-465b-b453-74cce166deb7",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't `bool_only=True` be the default? \n",
        "createdAt" : "2014-10-25T00:16:31Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "de211e40-e9e7-46f7-99ef-9eff1f5ca598",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "body" : "I made bool_only default to None (False) here because:\n- The default is None in DataFrame’s current implementation of any/all in master\n- The corresponding numeric_only argument to sum, mean, etc defaults to None\n- bool_only is not currently implemented in Series._reduce or Panel._reduce. Once we add not implemented errors, they would be thrown in the case of all default arguments, were bool_only to be True by default.\n",
        "createdAt" : "2014-10-26T23:34:53Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "tags" : [
        ]
      },
      {
        "id" : "6848eaca-0b83-43a2-8273-d36b30788efa",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, though I find its a little odd (e.g. I can't think of a reason to use `any/all` on non-boolean data), but I am sure people will try it!.\n",
        "createdAt" : "2014-10-27T00:02:11Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2b79db26-5c34-41c4-9d0a-9709cc9d8884",
        "parentId" : "6af16e34-4476-4efa-a316-98c903e9da8f",
        "authorId" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "body" : "I guess, also, if they're calling any/all on Series in master, they are using the numpy version which does not offer a bool_only option.\n\nWould it make sense for me to create a new issue for implementing bool_only (numeric_only) in Series an Panel, and look into whether it should be enabled by default for any/all?\n",
        "createdAt" : "2014-10-27T00:07:08Z",
        "updatedAt" : "2014-11-10T16:46:58Z",
        "lastEditedBy" : "a365f24b-52e0-4fdf-915f-0b9118bb4bb6",
        "tags" : [
        ]
      }
    ],
    "commit" : "518a62c4afc020c4b64e6a053cfe5efea5ce9cfc",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +3924,3928 @@        If the axis is a MultiIndex (hierarchical), count along a\n        particular level, collapsing into a \"\"\" + name + \"\"\"\nbool_only : boolean, default None\n    Include only boolean data. If None, will attempt to use everything,\n    then use only boolean data"
  },
  {
    "id" : "1a1ea1ab-0125-4ad6-b068-293ad2c6f641",
    "prId" : 8680,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db77785a-7d7e-4445-b5c8-cde7af07a684",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "This was surprising to encounter (needed to change it to fix some tests), but maybe it was there for a reason? I don't think there is any reason for `loc` here to do label based rather than integer indexing?\n",
        "createdAt" : "2014-10-31T01:21:24Z",
        "updatedAt" : "2014-11-02T20:12:45Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "41559f91-70e1-481c-986f-e61dbf87e700",
        "parentId" : "db77785a-7d7e-4445-b5c8-cde7af07a684",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could be\nI have tried to not touch xs recently. it seems s but fragile and multi slicing obviates the need for it anyhow \n",
        "createdAt" : "2014-10-31T01:33:13Z",
        "updatedAt" : "2014-11-02T20:12:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "db6f8fd94aca599f0c89d645d9c815fd33ee2196",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1462,1466 @@\n        else:\n            result = self.iloc[loc]\n            result.index = new_index\n"
  },
  {
    "id" : "45d75905-b982-4826-a133-f37f3cb9ea21",
    "prId" : 8966,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7a065ac-97ab-457f-aece-a40db28a7a9a",
        "parentId" : null,
        "authorId" : "49cb7e4b-934a-4329-961e-4089057c4185",
        "body" : "I think calling `accum_func` with `NaT`s present is okay because the NaTs are neither greater than nor less than any other datetime64:\n\n```\nIn [6]: pd.NaT < np.datetime64(('2010-01-01'))\nOut[6]: False\n\nIn [7]: np.datetime64(('2010-01-01')) < pd.NaT \nOut[7]: False\n```\n",
        "createdAt" : "2014-12-03T13:09:17Z",
        "updatedAt" : "2014-12-03T13:09:17Z",
        "lastEditedBy" : "49cb7e4b-934a-4329-961e-4089057c4185",
        "tags" : [
        ]
      }
    ],
    "commit" : "010741f3eb4ec6f05edc4168549ea8b05cb018fc",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +4116,4120 @@                if skipna and issubclass(y.dtype.type, \n                                         (np.datetime64, np.timedelta64)):\n                    result = accum_func(y, axis)\n                    mask = isnull(self)\n                    np.putmask(result, mask, pd.tslib.iNaT)"
  },
  {
    "id" : "670569e1-c2d0-41ff-b238-09156ef43278",
    "prId" : 9258,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b59cae63-52e2-4c7c-a208-928d3faac6c7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "doesn't this need method passed thru? shocked the tests don't fail\n",
        "createdAt" : "2015-02-13T19:54:34Z",
        "updatedAt" : "2015-02-18T03:00:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "043f2178-d1c2-4ca9-b5b0-d8d5f2c9836c",
        "parentId" : "b59cae63-52e2-4c7c-a208-928d3faac6c7",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "You'll note that `_reindex_with_indexers` doesn't actually use `method` or `limit` arguments. So I removed them from the function signature below.\n",
        "createdAt" : "2015-02-13T19:57:23Z",
        "updatedAt" : "2015-02-18T03:00:42Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "a5286621-66d1-4de6-9fa4-37c0d29a557d",
        "parentId" : "b59cae63-52e2-4c7c-a208-928d3faac6c7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yep\n",
        "createdAt" : "2015-02-13T20:18:41Z",
        "updatedAt" : "2015-02-18T03:00:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1164210248e6be262cfbf08bf899f1d1781c0fc",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +1748,1752 @@            obj = obj._reindex_with_indexers(\n                {axis: [new_index, indexer]},\n                fill_value=fill_value, copy=copy, allow_dups=False)\n\n        return obj"
  },
  {
    "id" : "90334ab7-66ff-4527-99ab-edbf9289600e",
    "prId" : 9258,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40293d27-ff1a-4c4f-aeeb-d51001c96671",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh, right, `method` is extraneous here (above too?)\n",
        "createdAt" : "2015-02-13T19:55:18Z",
        "updatedAt" : "2015-02-18T03:00:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1164210248e6be262cfbf08bf899f1d1781c0fc",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +1810,1814 @@                                                 limit=limit)\n        return self._reindex_with_indexers(\n            {axis: [new_index, indexer]}, fill_value=fill_value, copy=copy)\n\n    def _reindex_with_indexers(self, reindexers,"
  },
  {
    "id" : "5548a683-52d3-4509-b5e9-92c195d12dee",
    "prId" : 9647,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ce4ee8f-cf09-44f1-a550-b81a5a563951",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pls make sure that you have `core.filemode=False` in git\n\ne.g. `git config global --list` (then turn it off). you generally don't change file modes (as they are set so that nose works correctly)\n",
        "createdAt" : "2015-03-17T00:40:22Z",
        "updatedAt" : "2015-04-28T10:29:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1528859f44608fc1c6d02bc5fa51272e9e3cf69a",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +2819,2823 @@        --------\n        isnull : boolean inverse of notnull\n        \"\"\"\n        return notnull(self).__finalize__(self)\n"
  },
  {
    "id" : "2601a857-d797-4232-bdf7-ecf9fa95cd59",
    "prId" : 9647,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f64f02e2-3334-4b91-9005-1ef97557c68b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string example here (have a look at a function, say DataFrame.select_dtypes for how to format this in the dco-string)\n",
        "createdAt" : "2015-03-25T23:07:17Z",
        "updatedAt" : "2015-04-28T10:29:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1528859f44608fc1c6d02bc5fa51272e9e3cf69a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +2832,2836 @@        axis : int or string axis name, optional\n            Align object with lower and upper along the given axis.\n\n        Returns\n        -------"
  },
  {
    "id" : "49fe5ffd-e930-4e32-b6d3-808dd02f5573",
    "prId" : 10253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57e3cfdc-91c7-4046-a7be-2371f2612338",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "Should we add some validation logic here to ensure that `target` is not overwriting a key in `kwargs`? Something like this:\n\n``` python\nif target in kwargs:\n    raise ValueError('%s is both the pipe target and a keyword argument' % target)\n```\n\n I'm not entirely sure it's worth complexifying things here.\n",
        "createdAt" : "2015-06-03T06:01:10Z",
        "updatedAt" : "2015-06-06T03:09:20Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "cf3c9885-5e61-4c3b-904a-c99304232bd3",
        "parentId" : "57e3cfdc-91c7-4046-a7be-2371f2612338",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Are you saying maybe the user did something like\n\n``` python\ndf.pipe((sns.violinplot, 'data'), x='x', y='y', data=df)\n```\n\nI guess the precedent here is with Python itself raising when you call `f(a=1, a=2)`.\n",
        "createdAt" : "2015-06-03T12:43:49Z",
        "updatedAt" : "2015-06-06T03:09:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "444df253-30c1-4895-809c-da3fdb7e2f21",
        "parentId" : "57e3cfdc-91c7-4046-a7be-2371f2612338",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "yes, that's the case I was thinking about\n",
        "createdAt" : "2015-06-04T00:55:19Z",
        "updatedAt" : "2015-06-06T03:09:20Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c3bf51befbbc14b22cb28ac9ee1e9406b3790ff",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2104,2108 @@                msg = '%s is both the pipe target and a keyword argument' % target\n                raise ValueError(msg)\n            kwargs[target] = self\n            return func(*args, **kwargs)\n        else:"
  },
  {
    "id" : "6111f0ca-6e54-4346-91dd-36d0dec587ec",
    "prId" : 10253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96bbb939-7982-4284-9b8c-23364f87bcc4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe show an example of using the callable & data_keyword in the Notes? (can do later)\n",
        "createdAt" : "2015-06-05T22:29:17Z",
        "updatedAt" : "2015-06-06T03:09:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "686f1999-56c3-4ed5-a06e-64d3e8eb5c11",
        "parentId" : "96bbb939-7982-4284-9b8c-23364f87bcc4",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Added.\n",
        "createdAt" : "2015-06-05T23:36:10Z",
        "updatedAt" : "2015-06-06T03:09:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c3bf51befbbc14b22cb28ac9ee1e9406b3790ff",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +2080,2084 @@        ...    .pipe(f, arg2=b, arg3=c)\n        ... )\n\n        If you have a function that takes the data as (say) the second\n        argument, pass a tuple indicating which keyword expects the"
  },
  {
    "id" : "b1d5ef63-7f2d-4e64-b62e-14f5bcf5e820",
    "prId" : 10283,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12724cd0-40d4-4b6e-a2a3-879dcec4fe69",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a versionadded\n",
        "createdAt" : "2015-08-21T15:14:37Z",
        "updatedAt" : "2015-08-23T15:19:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a25a664636825b2368f0fe89c4a754d369c61723",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +3472,3476 @@        fill_axis : %(axes_single_arg)s, default 0\n            Filling axis, method and limit\n        broadcast_axis : %(axes_single_arg)s, default None\n            Broadcast values along this axis, if aligning two objects of\n            different dimensions"
  },
  {
    "id" : "afc4be0a-a588-4e31-bbe0-29fbda7f0cb7",
    "prId" : 10283,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a4fd010-2bd8-497b-a326-8bdc122cdc1c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "The doc-string for `Panel.align` (which uses generic) seems off, can you fix up? (prob just need a definition in `panel.py`\n",
        "createdAt" : "2015-08-21T15:16:12Z",
        "updatedAt" : "2015-08-23T15:19:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a25a664636825b2368f0fe89c4a754d369c61723",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +3485,3489 @@    )\n\n    @Appender(_shared_docs['align'] % _shared_doc_kwargs)\n    def align(self, other, join='outer', axis=None, level=None, copy=True,\n              fill_value=None, method=None, limit=None, fill_axis=0,"
  },
  {
    "id" : "eb350d3f-43fb-4009-ae33-4d0ace52b456",
    "prId" : 10411,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9789ca36-6289-4807-b702-e6d465d75ddf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add to the doc-string\n",
        "createdAt" : "2015-07-23T19:54:18Z",
        "updatedAt" : "2015-08-18T23:04:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0468cadc7f3a225fc04f7ef6b93c1a7bb0cc5c00",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1554,1558 @@    def reindex_like(self, other, method=None, copy=True, limit=None,\n                     tolerance=None):\n        \"\"\" return an object with matching indicies to myself\n\n        Parameters"
  },
  {
    "id" : "556f6705-c5a9-4c06-b401-d35f3b63eb15",
    "prId" : 10411,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15b2e873-a6e2-4139-b25a-d1dc5eeffd41",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is in the reindex doc-string yes?\n",
        "createdAt" : "2015-07-23T19:55:41Z",
        "updatedAt" : "2015-08-18T23:04:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "65d41845-c3b4-4bfc-8255-6404740b7fc7",
        "parentId" : "15b2e873-a6e2-4139-b25a-d1dc5eeffd41",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "yes\n",
        "createdAt" : "2015-07-23T19:57:18Z",
        "updatedAt" : "2015-08-18T23:04:32Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0468cadc7f3a225fc04f7ef6b93c1a7bb0cc5c00",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +1745,1749 @@        limit : int, default None\n            Maximum number of consecutive elements to forward or backward fill\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most"
  },
  {
    "id" : "97322481-9588-4cf4-a6a3-3a4c11d8467c",
    "prId" : 10411,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8908daa-3494-4b95-a4ad-5aa2c5364c3f",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add a versionadded here?\n",
        "createdAt" : "2015-08-18T22:10:10Z",
        "updatedAt" : "2015-08-18T23:04:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "26ab4e96-e329-400f-9f9b-f80377f54e43",
        "parentId" : "f8908daa-3494-4b95-a4ad-5aa2c5364c3f",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "done\n",
        "createdAt" : "2015-08-18T23:04:31Z",
        "updatedAt" : "2015-08-18T23:04:32Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0468cadc7f3a225fc04f7ef6b93c1a7bb0cc5c00",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1565,1569 @@        tolerance : optional\n            Maximum distance between labels of the other object and this\n            object for inexact matches.\n\n            .. versionadded:: 0.17.0"
  },
  {
    "id" : "56c678fa-54ec-4359-8e3e-c424aab569dc",
    "prId" : 10691,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "537a20ee-e3d9-453a-ba68-97712b4f02f6",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add here `.. versionadded:: 0.17.0` ? (see here for how to format: https://github.com/pydata/pandas/blob/v0.16.2/pandas/core/frame.py#L1171)\n",
        "createdAt" : "2015-08-18T22:03:23Z",
        "updatedAt" : "2015-08-30T17:49:17Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "df4d52c221da4facc0f64f5cbfecb7ceb1cc4656",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +3004,3008 @@        limit_direction : {'forward', 'backward', 'both'}, defaults to 'forward'\n            If limit is specified, consecutive NaNs will be filled in this\n            direction.\n\n            .. versionadded:: 0.17.0"
  },
  {
    "id" : "f4d9aaac-5d2b-4b23-8800-e2bd3761cedd",
    "prId" : 10726,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0786dac2-df93-46ba-97ae-cb0d236c510d",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah yes, and can you add a versionadded here in the docstring?\n",
        "createdAt" : "2015-08-12T11:38:38Z",
        "updatedAt" : "2015-08-18T00:07:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f98e8cc9-a8c7-40fe-8949-abd5c1012f67",
        "parentId" : "0786dac2-df93-46ba-97ae-cb0d236c510d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right\n",
        "createdAt" : "2015-08-12T13:41:02Z",
        "updatedAt" : "2015-08-18T00:07:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "13d2d71f57cd88c0b14166b65402b696bdf0ce7d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1686,1690 @@    _shared_docs['sort_values'] = \"\"\"\n        Sort by the values along either axis\n\n        .. versionadded:: 0.17.0\n"
  },
  {
    "id" : "55c731df-88d6-4579-91cc-c45f33cc6bac",
    "prId" : 13516,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fe98db0-f412-4515-abf1-f0b9e077daed",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add a docstring to this one explaining it's purpose?\n",
        "createdAt" : "2016-06-29T13:21:04Z",
        "updatedAt" : "2016-07-01T12:15:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a6607aae9119fbd02f25c61adf98bd1cb74b50a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +4420,4424 @@        return left.__finalize__(self), right.__finalize__(other)\n\n    def _where(self, cond, other=np.nan, inplace=False, axis=None, level=None,\n               try_cast=False, raise_on_error=True):\n        \"\"\""
  },
  {
    "id" : "a2d5fe09-24c4-47ea-ae20-1e0fedf1057d",
    "prId" : 13533,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73d923e4-98c8-4460-8115-e85d9b5f60b1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add 1 or more examples in Examples\n",
        "createdAt" : "2016-06-30T10:11:58Z",
        "updatedAt" : "2016-06-30T22:57:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e6e7ee5b-f1f2-48ea-a7c6-7fb0d8c72ff5",
        "parentId" : "73d923e4-98c8-4460-8115-e85d9b5f60b1",
        "authorId" : "47ae9324-3866-4f45-87eb-88d69d58d7f2",
        "body" : "added\n",
        "createdAt" : "2016-06-30T22:58:09Z",
        "updatedAt" : "2016-06-30T22:58:09Z",
        "lastEditedBy" : "47ae9324-3866-4f45-87eb-88d69d58d7f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "928eb34fea661762662d7308e70711088c94578d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +556,560 @@        Alter axes input function or functions. Function / dict values must be\n        unique (1-to-1). Labels not contained in a dict / Series will be left\n        as-is. Extra labels listed don't throw an error. Alternatively, change\n        ``Series.name`` with a scalar value (Series only).\n"
  },
  {
    "id" : "14e4bddc-94fb-494a-a79c-924e1ac5a86a",
    "prId" : 13798,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec82f177-0e48-421f-9f71-361712c72bed",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a comment before this one\n",
        "createdAt" : "2016-07-28T23:49:55Z",
        "updatedAt" : "2016-08-15T05:15:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ae0e79a63978513664340e54309b9c426e4e3b7",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +4725,4729 @@        3  6 -7\n        4 -8  9\n        >>> df.where(m, -df) == np.where(m, df, -df)\n              A     B\n        0  True  True"
  },
  {
    "id" : "b2e8a35b-a82e-4df1-a7cd-633c2bddfe62",
    "prId" : 14668,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14668#pullrequestreview-12346598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "948f8615-d18d-4438-9a2c-a352477d9a8a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think the aggregated result should be broadcasted to the full DataFrame? (as is done for groupby.transform)",
        "createdAt" : "2016-12-10T12:05:00Z",
        "updatedAt" : "2017-04-14T13:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae6c6f6cbd4b760ec70b1d48b27fe53b6644e208",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +6066,6070 @@            if is_scalar(result) or len(result) != len(self):\n                raise ValueError(\"transforms cannot produce \"\n                                 \"aggregated results\")\n\n            return result"
  },
  {
    "id" : "a31d8a95-f7f8-496b-8e3b-e9f657547b04",
    "prId" : 14904,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14904#pullrequestreview-19787711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6dc6bcff-5053-4070-be9b-dace7eb2b185",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "nice examples!",
        "createdAt" : "2017-02-02T13:56:24Z",
        "updatedAt" : "2017-03-04T11:46:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fac34ce6c646407111c09a942cbd195b6cbf590",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +1219,1223 @@\n        >>> df.to_json(orient='records')\n        '[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n\n        Encoding with Table Schema"
  },
  {
    "id" : "94ded1b7-2a55-45d9-b756-99e4729c4cbd",
    "prId" : 14904,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14904#pullrequestreview-20359152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4944b436-c006-407b-aca0-7f43664ed2a8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't the version be here? ",
        "createdAt" : "2017-02-06T20:29:54Z",
        "updatedAt" : "2017-03-04T11:46:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fac34ce6c646407111c09a942cbd195b6cbf590",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +1225,1229 @@        >>> df.to_json(orient='table')\n        '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                                {\"name\": \"col 1\", \"type\": \"string\"},\n                                {\"name\": \"col 2\", \"type\": \"string\"}],\n                     \"primaryKey\": \"index\","
  },
  {
    "id" : "305d1843-5aaa-495e-ae64-102bddb0026a",
    "prId" : 14904,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14904#pullrequestreview-20553778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16fd66c6-e73a-4b6e-be59-a9d7c34a52cd",
        "parentId" : null,
        "authorId" : "c3430ddc-2e27-4721-8896-7d7bd8d81bc9",
        "body" : "Would the best way to test this to be mocking `IPython.display.display`?",
        "createdAt" : "2017-02-06T20:47:27Z",
        "updatedAt" : "2017-03-04T11:46:35Z",
        "lastEditedBy" : "c3430ddc-2e27-4721-8896-7d7bd8d81bc9",
        "tags" : [
        ]
      },
      {
        "id" : "5c671905-611c-454a-a344-85c8cf5f3f52",
        "parentId" : "16fd66c6-e73a-4b6e-be59-a9d7c34a52cd",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I hope so, cause that's what I do here https://github.com/pandas-dev/pandas/pull/14904/files#diff-81a94f6a5e3a0de7887baaab7b55f579R145 😉 ",
        "createdAt" : "2017-02-06T21:12:53Z",
        "updatedAt" : "2017-03-04T11:46:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "56ac9f79-dd1d-4e85-a4f9-5d8908b6cd8c",
        "parentId" : "16fd66c6-e73a-4b6e-be59-a9d7c34a52cd",
        "authorId" : "c3430ddc-2e27-4721-8896-7d7bd8d81bc9",
        "body" : "Weird, when I was viewing this the codecov extension was showing this segment as not covered.",
        "createdAt" : "2017-02-07T15:58:32Z",
        "updatedAt" : "2017-03-04T11:46:35Z",
        "lastEditedBy" : "c3430ddc-2e27-4721-8896-7d7bd8d81bc9",
        "tags" : [
        ]
      },
      {
        "id" : "da03aad5-e8f9-4048-a60f-f87c31186523",
        "parentId" : "16fd66c6-e73a-4b6e-be59-a9d7c34a52cd",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Good catch! We didn't have IPython installed in the build that runs the coverage report, so it was skipped. Just pushed a commit adding it.",
        "createdAt" : "2017-02-07T16:35:28Z",
        "updatedAt" : "2017-03-04T11:46:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fac34ce6c646407111c09a942cbd195b6cbf590",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +149,153 @@                 \"application/vnd.dataresource+json\": table_schema}\n        reprs = {k: v for k, v in reprs.items() if v}\n        display(reprs, raw=True)\n\n    def _repr_table_schema_(self):"
  },
  {
    "id" : "7987412e-5f25-4fb1-9aa3-797424687b82",
    "prId" : 14904,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14904#pullrequestreview-20364418",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8660c692-99f3-43f1-ab06-ffdb544af784",
        "parentId" : null,
        "authorId" : "c3430ddc-2e27-4721-8896-7d7bd8d81bc9",
        "body" : ":smile: one step towards general adoption I think. :wink:",
        "createdAt" : "2017-02-06T20:48:09Z",
        "updatedAt" : "2017-03-04T11:46:35Z",
        "lastEditedBy" : "c3430ddc-2e27-4721-8896-7d7bd8d81bc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fac34ce6c646407111c09a942cbd195b6cbf590",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +154,158 @@        \"\"\"\n        Not a real Jupyter special repr method, but we use the same\n        naming convention.\n        \"\"\"\n        if config.get_option(\"display.html.table_schema\"):"
  },
  {
    "id" : "aafcac8a-b739-4844-970e-3bf06d93728e",
    "prId" : 14904,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14904#pullrequestreview-20364726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c2f9747-18a2-4d03-a65b-b81f2c0be309",
        "parentId" : null,
        "authorId" : "c3430ddc-2e27-4721-8896-7d7bd8d81bc9",
        "body" : "Should the `config.get_option` check happen here so it doesn't end up as:\r\n\r\n```\r\n\"application/vnd.dataresource+json\": None\r\n```\r\n\r\nin the resulting output?\r\n\r\nOh nevermind, I see the `if v` in the dict comprehension.",
        "createdAt" : "2017-02-06T20:49:38Z",
        "updatedAt" : "2017-03-04T11:46:35Z",
        "lastEditedBy" : "c3430ddc-2e27-4721-8896-7d7bd8d81bc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fac34ce6c646407111c09a942cbd195b6cbf590",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +140,144 @@        latex = self._repr_latex_() if hasattr(self, '_repr_latex_') else None\n        html = self._repr_html_() if hasattr(self, '_repr_html_') else None\n        table_schema = self._repr_table_schema_()\n        # We need the inital newline since we aren't going through the\n        # usual __repr__. See"
  },
  {
    "id" : "a862f605-2374-4ed2-ba74-42e65e45c402",
    "prId" : 14904,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14904#pullrequestreview-20533945",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d145443e-d1f0-4fcb-a5fd-4016a779e06f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is ``primaryKey`` standard here? (as opposed to ``primary_key``), are any other keys camelCase?",
        "createdAt" : "2017-02-07T15:26:14Z",
        "updatedAt" : "2017-03-04T11:46:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fac34ce6c646407111c09a942cbd195b6cbf590",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +1228,1232 @@                                {\"name\": \"col 2\", \"type\": \"string\"}],\n                     \"primaryKey\": \"index\",\n                     \"pandas_version\": \"0.20.0\"},\n          \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n                   {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'"
  },
  {
    "id" : "54ff87e3-48c5-4ebe-9607-215f3870eb4f",
    "prId" : 14967,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14967#pullrequestreview-14290668",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d98a0cb8-82e5-458d-9c4b-6e2e7cafc28b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think you need a blank line before kwargs (to make the sub-list work)",
        "createdAt" : "2016-12-23T00:09:08Z",
        "updatedAt" : "2017-01-03T20:52:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4134e388-0783-497e-ab72-f5c1be02fdf4",
        "parentId" : "d98a0cb8-82e5-458d-9c4b-6e2e7cafc28b",
        "authorId" : "7fd30c76-727b-4746-bf1c-c9571ce401e1",
        "body" : "I've just checked and the sublist is rendered fine with, or without a line between `ignore`\r\nand kwargs. I can add an extra line if that is the convention,",
        "createdAt" : "2016-12-23T11:33:28Z",
        "updatedAt" : "2017-01-03T20:52:56Z",
        "lastEditedBy" : "7fd30c76-727b-4746-bf1c-c9571ce401e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "b174e6f4dec2faa3eaf9124dc694c3fd92e1a890",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3085,3089 @@\n        raise_on_error : DEPRECATED use ``errors`` instead\n        kwargs : keyword arguments to pass on to the constructor\n\n        Returns"
  },
  {
    "id" : "4410bd0e-30a8-4587-acf7-2973d616dede",
    "prId" : 14995,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14995#pullrequestreview-14803122",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why are you redefining things here???\r\n\r\nthis is just a very small edit to the ``_shared_docs['describe']``",
        "createdAt" : "2016-12-27T11:43:32Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "478d6397-453d-4c8e-9985-39544c93281f",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@palewire Typically we reuse docstring on several places, eg for Series/DataFrame/Panel definitions, that's the reason of the use of `_shared_docs`.\r\n\r\nBut, @jreback, was just looking in this specific case, this is the only place where this docstring is used, so it is actually not really needed to put it in `_shared_docs` I think? (maybe a leftover from when the definitions where in multiple places)",
        "createdAt" : "2016-12-27T15:10:14Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a5e136e9-4a4b-4f67-bc14-9b7b5ccb5a3c",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is used in both Series & DataFrame, so needs to stay as shared docs",
        "createdAt" : "2016-12-27T15:24:36Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "afa4945d-9e55-49b7-826f-dbe3aca65f6a",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But it is only defined here (the function is not redefined in series or dataframe, so the shared docstrings is not used anywhere else)",
        "createdAt" : "2016-12-27T15:48:53Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0290ad2a-bec9-4130-b816-29383fee5896",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh, ok then.",
        "createdAt" : "2016-12-27T16:11:29Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "924b9adf-35ef-4297-9fb1-f081233ddce7",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "body" : "The main reason I moved it out of the ``_shared_docs`` is that after adding doctests to the docstring I got this error when I tried to make the documentation. I came to the same conclusion as @jorisvandenbossche that the `_shared_docs` feature was unnecessary so I decided to dodge the bug by moving the test's location down to the class' docstring.\r\n\r\n```python\r\n % python make.py\r\nConverting source/html-styling.ipynb\r\nNo module named jupyter_client.manager\r\nFailed to convert source/html-styling.ipynb\r\nRunning Sphinx v1.5.1\r\nException occurred while building, starting debugger:\r\nTraceback (most recent call last):\r\n  File \"/home/palewire/.virtualenvs/pandas/local/lib/python2.7/site-packages/sphinx/cmdline.py\", line 295, in main\r\n    opts.warningiserror, opts.tags, opts.verbosity, opts.jobs)\r\n  File \"/home/palewire/.virtualenvs/pandas/local/lib/python2.7/site-packages/sphinx/application.py\", line 163, in __init__\r\n    confoverrides or {}, self.tags)\r\n  File \"/home/palewire/.virtualenvs/pandas/local/lib/python2.7/site-packages/sphinx/config.py\", line 134, in __init__\r\n    execfile_(filename, config)\r\n  File \"/home/palewire/.virtualenvs/pandas/local/lib/python2.7/site-packages/sphinx/util/pycompat.py\", line 129, in execfile_\r\n    exec_(code, _globals)\r\n  File \"/home/palewire/.virtualenvs/pandas/local/lib/python2.7/site-packages/six.py\", line 699, in exec_\r\n    exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")\r\n  File \"<string>\", line 1, in <module>\r\n  File \"conf.py\", line 17, in <module>\r\n  File \"/home/palewire/Code/pandas/pandas/__init__.py\", line 39, in <module>\r\n    from pandas.core.api import *\r\n  File \"/home/palewire/Code/pandas/pandas/core/api.py\", line 10, in <module>\r\n    from pandas.core.groupby import Grouper\r\n  File \"/home/palewire/Code/pandas/pandas/core/groupby.py\", line 40, in <module>\r\n    from pandas.core.frame import DataFrame\r\n  File \"/home/palewire/Code/pandas/pandas/core/frame.py\", line 65, in <module>\r\n    from pandas.core.generic import NDFrame, _shared_docs\r\n  File \"/home/palewire/Code/pandas/pandas/core/generic.py\", line 94, in <module>\r\n    class NDFrame(PandasObject):\r\n  File \"/home/palewire/Code/pandas/pandas/core/generic.py\", line 5271, in NDFrame\r\n    @Appender(_shared_docs['describe'] % _shared_doc_kwargs)\r\nTypeError: not enough arguments for format string\r\n> /home/palewire/Code/pandas/pandas/core/generic.py(5271)NDFrame()\r\n-> @Appender(_shared_docs['describe'] % _shared_doc_kwargs)\r\n```",
        "createdAt" : "2016-12-27T18:16:15Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "tags" : [
        ]
      },
      {
        "id" : "842672b3-c68f-438a-946b-b97b75afce71",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@palewire not sure what you are doing, but this has nothing to do with the doc-string. It doesn't matter if it *only* defined here, this NEEDS different parameters for klass. Otherwise this is not custom to the type (Series or DataFrame). \r\n\r\nFurther it is impossible to actually see what you changed. ",
        "createdAt" : "2016-12-28T12:23:31Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "91b945d6-36c5-45f5-bf1d-920423e6d446",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "the issue is that ``klass`` is used in the shared docs for ``describe`` (and for ``pct_change``). This is ok if its actually defined in Series/DataFrame (it is defined in generic as well, but actually it is ``NDFrame``) which is kind of confusing.\r\n\r\n",
        "createdAt" : "2016-12-28T12:29:00Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4b472781-95f7-4daa-a66d-6d648e9abb28",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Not sure why you see that error when building the docs, as the `klass` kwarg should be included in the `_shared_doc_kwargs` for NDFrame as well.\r\n\r\nBut still, since this is not redefined in series/dataframe, you always get `NDFrame` in the docstring (for both Series/DataFrame.describe), so this is a reason to get it out of the `_shared_docs` IMO",
        "createdAt" : "2016-12-28T13:11:36Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b6b7c4b3-50b2-4a6d-bded-690cbce01220",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "body" : "@jreback, if you refer to the existing \"stable\" ``pandas`` documentation, you can see that the klass setting appears to be the same for both ``Series`` and ``DataFrame``. \r\n\r\nFirst look at the \"returns\" value below the parameters [here](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.describe.html):\r\n\r\n![screenshot from 2016-12-28 07-51-02](https://cloud.githubusercontent.com/assets/9993/21525732/03debf3e-ccd4-11e6-9f9c-e2b807983bbd.png)\r\n\r\nAnd then again [here](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.describe.html):\r\n\r\n![screenshot from 2016-12-28 07-51-21](https://cloud.githubusercontent.com/assets/9993/21525735/0b7d6ce0-ccd4-11e6-9f26-a1ac86a3847a.png)\r\n",
        "createdAt" : "2016-12-28T16:03:40Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "tags" : [
        ]
      },
      {
        "id" : "afd5ebcd-69da-4985-b535-09100b30d72e",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "and this is EXCACTLY my point & why we need the shared docs",
        "createdAt" : "2016-12-28T16:19:46Z",
        "updatedAt" : "2017-01-01T02:22:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ba16a356-e27f-495d-9d66-1cd2b3de9966",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "body" : "@jreback. I must be missing something here. If the only customized value in the docstring is the class, and that value is identical is both places it is output, why does the docstring need to be shared at all? Why not simply hardcode the value into a traditional docstring?",
        "createdAt" : "2016-12-28T17:42:13Z",
        "updatedAt" : "2017-01-01T02:22:33Z",
        "lastEditedBy" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "tags" : [
        ]
      },
      {
        "id" : "db78b633-8a25-4a70-8a3d-7e18ea6b86b2",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@palewire again, the point IS TO HAVE CUSTOMIZED doc-strings!\r\n\r\nwhen I see return value for Series.describe I want to see Series, ditto for DataFrame. that's the entire reason for shared doc-strings. *usually* we have more than 1 non-trivial parameters and so it is necessary. But we do this for all other routines, so not sure why breaking from it here. It just makes it more confusing.\r\n\r\nThis is pretty trivially to solve (for this and pct_change). Just put a doc-string with an Appender in both Series/DataFrame.\r\n\r\ne",
        "createdAt" : "2016-12-28T18:39:08Z",
        "updatedAt" : "2017-01-01T02:22:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2bec30a6-e542-4539-abad-913ddbcfc158",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "body" : "I'd be happy to try that correction, though I think it's worth pointing out that was a pre-existing bug in the describe documentation and nothing introduced by this pull request. Could you point me to example of a similar shared method I could model the fix on?",
        "createdAt" : "2016-12-28T19:25:00Z",
        "updatedAt" : "2017-01-01T02:22:33Z",
        "lastEditedBy" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "tags" : [
        ]
      },
      {
        "id" : "69b84234-550f-48e7-b861-a3c4ec72083e",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "as I said, pretty much any function in series or dataframe that has a shared doc",
        "createdAt" : "2016-12-28T19:44:54Z",
        "updatedAt" : "2017-01-01T02:22:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "87013945-a72a-41a0-ac8a-259dd18aac5a",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I am not sure if it is worth including `describe` defs in both Series and DataFrame (that of course just simply passes args to its super method), just for customizing this single word. For docstrings that include more variables to be changed, that would be OK. But IMO in this case it is not worth it.\r\n\r\nIt's a bit of a problem with how our handling of shared docstrings currently works, as it does not work perfectly for all cases that we use it for. But having a better approach for functions like this (i.e. functions that have only a definition in generic, and not in series/frame.py) is a whole other/larger issue that can be left for another issue/PR to discuss.",
        "createdAt" : "2016-12-28T19:58:01Z",
        "updatedAt" : "2017-01-01T02:22:33Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "de210c1f-7f07-4581-9127-ba2fe44bdddf",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "body" : "@jorisvandenbossche, if that's how you feel I can hold off on pursuing that route. Are there other modifications you'd like to see?",
        "createdAt" : "2016-12-28T21:40:40Z",
        "updatedAt" : "2017-01-01T02:22:33Z",
        "lastEditedBy" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "tags" : [
        ]
      },
      {
        "id" : "e9a2b50f-b318-45e5-bdb6-d07d241319ad",
        "parentId" : "be3f9a4c-89eb-456c-8ca0-213c42a66cb2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback are you OK with this in its current form (so not using the `_shared_docs`). I agree that we should try to have accurate docstrings for both Series and DataFrame making use of our decorator machinery, but in this case it did not make use of that machinery.",
        "createdAt" : "2016-12-31T11:38:41Z",
        "updatedAt" : "2017-01-01T02:22:33Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "a61dda10872ba346ca2f5ef9f11fbb8fd4530d70",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +5201,5205 @@        \"\"\"\n        return np.abs(self)\n\n    def describe(self, percentiles=None, include=None, exclude=None):\n        \"\"\""
  },
  {
    "id" : "8c388996-31b6-4bfc-a1bb-1a4ed9988dc6",
    "prId" : 14995,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14995#pullrequestreview-14578851",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f88f82c4-b337-4a6d-b7e5-b955bf5e4ed6",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would add here the sentence from the notes with something like \"Analyzes both numeric and object series, as well\r\nas DataFrame column sets of mixed data types.\" + that output depends on data type + refer to notes for more details on this",
        "createdAt" : "2016-12-28T15:19:40Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9b8a5c24-74ec-4cd5-be42-4cba7ed2c47a",
        "parentId" : "f88f82c4-b337-4a6d-b7e5-b955bf5e4ed6",
        "authorId" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "body" : "Will do. ",
        "createdAt" : "2016-12-28T16:05:40Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "tags" : [
        ]
      }
    ],
    "commit" : "a61dda10872ba346ca2f5ef9f11fbb8fd4530d70",
    "line" : null,
    "diffHunk" : "@@ -1,1 +5207,5211 @@        dispersion and shape of a dataset's distribution, excluding\n        ``NaN`` values.\n\n        Analyzes both numeric and object series, as well\n        as ``DataFrame`` column sets of mixed data types. The output"
  },
  {
    "id" : "c0dac337-cee4-4341-9910-9bc1130991e8",
    "prId" : 14995,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14995#pullrequestreview-14579368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b19dc24-40a4-493b-a4e6-4e3a86a1f807",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "\"The ``50`` percentile is typically the same as the median.\" -> when is this not the case?",
        "createdAt" : "2016-12-28T15:30:40Z",
        "updatedAt" : "2017-01-01T02:22:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "26ae9a38-b8f4-43b2-bccb-5ca3c340b888",
        "parentId" : "9b19dc24-40a4-493b-a4e6-4e3a86a1f807",
        "authorId" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "body" : "I was thinking of the alternative methods of returning medians when there are an even number of values that might result in differing expectations among users. But that's probably unnecessary. I will remove the qualification.",
        "createdAt" : "2016-12-28T16:10:20Z",
        "updatedAt" : "2017-01-01T02:22:33Z",
        "lastEditedBy" : "749093f0-3af7-4938-a03d-4eb7ae193454",
        "tags" : [
        ]
      }
    ],
    "commit" : "a61dda10872ba346ca2f5ef9f11fbb8fd4530d70",
    "line" : null,
    "diffHunk" : "@@ -1,1 +5254,5258 @@        upper percentiles. By default the lower percentile is ``25`` and the\n        upper percentile is ``75``. The ``50`` percentile is the\n        same as the median.\n\n        For object data (e.g. strings or timestamps), the result's index"
  },
  {
    "id" : "572f13d5-db06-4251-a19f-ed6cbfd261a9",
    "prId" : 16171,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16171#pullrequestreview-35514691",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02af7d70-a741-498c-8ab5-b4710a591f52",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe we should define his for Series (trivial version) to avoid this kind of logic ",
        "createdAt" : "2017-04-29T14:54:59Z",
        "updatedAt" : "2017-04-30T11:14:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9937b6e2-505d-474d-b303-885b304e07f9",
        "parentId" : "02af7d70-a741-498c-8ab5-b4710a591f52",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "https://github.com/pandas-dev/pandas/issues/16180",
        "createdAt" : "2017-04-30T11:16:49Z",
        "updatedAt" : "2017-04-30T11:16:49Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd24e27b4742984b301f35435232e8209f7be8b6",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +6272,6276 @@\n    # Series doesn't define _repr_html_ or _repr_latex_\n    latex = self._repr_latex_() if hasattr(self, '_repr_latex_') else None\n    html = self._repr_html_() if hasattr(self, '_repr_html_') else None\n    try:"
  },
  {
    "id" : "e3a57264-1108-4c66-ba56-1012a8445438",
    "prId" : 16326,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16326#pullrequestreview-81391052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0ea7272-4e37-4b55-b242-ab66ba794481",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add an asv that does dir() on a Series/DataFrame with say 10000 elements (we *might* already have one of these)",
        "createdAt" : "2017-12-06T01:20:10Z",
        "updatedAt" : "2017-12-11T11:23:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ee5b9fa793fba46b9b10b05f802b38ea7641b03",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +199,203 @@        If info_axis is a MultiIndex, it's first level values are used.\n        \"\"\"\n        additions = set(\n            [c for c in self._info_axis.unique(level=0)[:100]\n             if isinstance(c, string_types) and isidentifier(c)])"
  },
  {
    "id" : "c53bbd44-2ad4-44d5-b9e5-0ee24abbf03e",
    "prId" : 16364,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16364#pullrequestreview-38512669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4de233d-1e22-4866-8a08-edc7a3dcff39",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think this needs a `with np.errstate`, as we are working with raw array\r\n\r\n```\r\nIn [8]: pd.Series([0, np.nan, 2]).clip(0, 1)\r\n/home/joris/scipy/pandas/pandas/core/generic.py:4117: RuntimeWarning: invalid value encountered in greater_equal\r\n  result = np.where(result >= upper, upper, result)\r\n/home/joris/scipy/pandas/pandas/core/generic.py:4119: RuntimeWarning: invalid value encountered in less_equal\r\n  result = np.where(result <= lower, lower, result)\r\nOut[8]: \r\n0    0.0\r\n1    NaN\r\n2    1.0\r\ndtype: float64\r\n```",
        "createdAt" : "2017-05-16T21:06:18Z",
        "updatedAt" : "2017-05-16T21:17:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "62843f8b3fb1933cfe7786b7710bcf6ba256f9e6",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +4115,4119 @@        mask = isnull(result)\n        if upper is not None:\n            result = np.where(result >= upper, upper, result)\n        if lower is not None:\n            result = np.where(result <= lower, lower, result)"
  },
  {
    "id" : "636b3baf-20b6-4bb4-ad7f-2542ab73e24c",
    "prId" : 16364,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16364#pullrequestreview-38512669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79c97cbf-00f2-46c8-9820-7428f74aebca",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Are the `np.any` needed here? As lower/upper are already confirmed to be a scalar?",
        "createdAt" : "2017-05-16T21:06:48Z",
        "updatedAt" : "2017-05-16T21:17:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "62843f8b3fb1933cfe7786b7710bcf6ba256f9e6",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +4109,4113 @@\n        if ((lower is not None and np.any(isnull(lower))) or\n                (upper is not None and np.any(isnull(upper)))):\n            raise ValueError(\"Cannot use an NA value as a clip threshold\")\n"
  },
  {
    "id" : "723ae0fa-e93c-4688-af39-ad8dbf974277",
    "prId" : 16462,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16462#pullrequestreview-39895942",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c07e367c-db24-4a5a-8381-9162c7eecf13",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "needs a versionadded tag.",
        "createdAt" : "2017-05-23T23:43:33Z",
        "updatedAt" : "2017-05-25T07:45:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "62ee43b71a06d30a8865e352d14156abe667c39f",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +4157,4161 @@            Align object with lower and upper along the given axis.\n        inplace : boolean, default False\n            Whether to perform the operation in place on the data\n                .. versionadded:: 0.21.0\n"
  },
  {
    "id" : "cf86113e-5140-4e1a-b647-7145eb403123",
    "prId" : 16462,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16462#pullrequestreview-39895965",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f6fbc28-074e-4d9c-97c2-7327e1dfb9a7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2017-05-23T23:43:43Z",
        "updatedAt" : "2017-05-25T07:45:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "62ee43b71a06d30a8865e352d14156abe667c39f",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +4236,4240 @@            Align object with threshold along the given axis.\n        inplace : boolean, default False\n            Whether to perform the operation in place on the data\n                .. versionadded:: 0.21.0\n"
  },
  {
    "id" : "22c90682-39cf-41c6-add7-77581cbb4b1a",
    "prId" : 16462,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16462#pullrequestreview-39895976",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16eaed1b-c808-4898-9f4e-46e4e4db4831",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2017-05-23T23:43:49Z",
        "updatedAt" : "2017-05-25T07:45:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "62ee43b71a06d30a8865e352d14156abe667c39f",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +4268,4272 @@            Align object with threshold along the given axis.\n        inplace : boolean, default False\n            Whether to perform the operation in place on the data\n                .. versionadded:: 0.21.0\n"
  },
  {
    "id" : "76c5ec50-1095-4bd6-b73e-8a315fb535c2",
    "prId" : 16465,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16465#pullrequestreview-40440804",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df03684a-1a45-4ca3-bc7d-7cbb3a256b4d",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think you'll need to start this with\r\n\r\n```python\r\nif self.ndim == 1:\r\n    self = self.to_frame()\r\n```\r\n\r\nthen the rest of it should be ok.",
        "createdAt" : "2017-05-24T21:45:27Z",
        "updatedAt" : "2017-05-26T11:47:12Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f5a70504-b66c-4621-a1ce-46c7e6a4a98d",
        "parentId" : "df03684a-1a45-4ca3-bc7d-7cbb3a256b4d",
        "authorId" : "00aa5284-32d1-4cf5-bba4-e4760f5bcbf2",
        "body" : "Thanks for this suggestion--doing the check here rather than invoking `to_frame()` in the Series _repr_latex method makes a lot of sense.",
        "createdAt" : "2017-05-26T03:52:54Z",
        "updatedAt" : "2017-05-26T11:47:12Z",
        "lastEditedBy" : "00aa5284-32d1-4cf5-bba4-e4760f5bcbf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "95ab5653cc9c1262bfd591f51ed38ba6181070a2",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +1575,1579 @@                 encoding=None, decimal='.', multicolumn=None,\n                 multicolumn_format=None, multirow=None):\n        # Get defaults from the pandas config\n        if self.ndim == 1:\n            self = self.to_frame()"
  },
  {
    "id" : "c329a867-48a4-4d28-87c7-8b09101397d3",
    "prId" : 16504,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16504#pullrequestreview-40394301",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "221e0f31-d7b4-4dc5-bd41-4c7ba07b651c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "woa. you are adding a LOT of code here. where exactly is the issue?",
        "createdAt" : "2017-05-25T20:56:44Z",
        "updatedAt" : "2017-07-01T08:41:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "34d8120a-8c72-4c81-9fd6-48f49547b176",
        "parentId" : "221e0f31-d7b4-4dc5-bd41-4c7ba07b651c",
        "authorId" : "0b23403c-dff8-4288-93ea-cb6a834d313e",
        "body" : "I fell like there are multiple lines of common code of `clip_upper` and `clip_lower` and this fix will make even more. Thus, I moved them form `clip_upper` and `clip_lower` to a new method `_clip_with_one_bound`. This is my first time to contribute code to a open-source project and I am not sure if I should do this. If I shouldn't, let me know and I should fix it. Thanks.\r\n\r\nThe issue is that if you pass a list to `clip`'s lower or upper argument, an error will be raised, because it will pass lower and upper to the argument other of `where` and `where`'s argument other doesn't take like or numpy array.",
        "createdAt" : "2017-05-25T21:12:34Z",
        "updatedAt" : "2017-07-01T08:41:16Z",
        "lastEditedBy" : "0b23403c-dff8-4288-93ea-cb6a834d313e",
        "tags" : [
        ]
      }
    ],
    "commit" : "85429ef0bbc1d1450c85c23c8b42541836a7d27a",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +4425,4429 @@\n        # method is self.le for upper bound and self.ge for lower bound\n        if is_scalar(threshold) and is_number(threshold):\n            if method.__name__ == 'le':\n                return self._clip_with_scalar(None, threshold, inplace=inplace)"
  },
  {
    "id" : "12842ff4-b8a1-45cf-8bfd-f7fbe1001217",
    "prId" : 16505,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16505#pullrequestreview-41471057",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33bd4e84-c834-4ba0-94ea-64a6109f2bee",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "versionadded tag",
        "createdAt" : "2017-05-26T12:06:30Z",
        "updatedAt" : "2017-06-13T21:06:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "059447af-2626-4f0b-a462-89919b024dfc",
        "parentId" : "33bd4e84-c834-4ba0-94ea-64a6109f2bee",
        "authorId" : "0bf5e041-50d5-450b-8f53-387ea2fb4724",
        "body" : "Which version should I specify?",
        "createdAt" : "2017-05-31T20:43:59Z",
        "updatedAt" : "2017-06-13T21:06:14Z",
        "lastEditedBy" : "0bf5e041-50d5-450b-8f53-387ea2fb4724",
        "tags" : [
        ]
      },
      {
        "id" : "0288ab82-0147-43b1-a38e-d7bcb0f23e29",
        "parentId" : "33bd4e84-c834-4ba0-94ea-64a6109f2bee",
        "authorId" : "0bf5e041-50d5-450b-8f53-387ea2fb4724",
        "body" : "Specified 0.20.2",
        "createdAt" : "2017-06-01T09:52:07Z",
        "updatedAt" : "2017-06-13T21:06:14Z",
        "lastEditedBy" : "0bf5e041-50d5-450b-8f53-387ea2fb4724",
        "tags" : [
        ]
      },
      {
        "id" : "1ec1ee3c-f093-402e-a378-db89c7f465f1",
        "parentId" : "33bd4e84-c834-4ba0-94ea-64a6109f2bee",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "move to 0.21.0",
        "createdAt" : "2017-06-01T10:28:01Z",
        "updatedAt" : "2017-06-13T21:06:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "01eaba1382c8862cca33fa13e23448f02fecca5c",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +803,807 @@           0 or 'index' for the index; 1 or 'columns' for the columns\n        inplace : bool\n            whether to modify `self` directly or return a copy\n\n            .. versionadded: 0.21.0"
  },
  {
    "id" : "40fe303b-3107-439a-a7fa-2f69a3bfd8b8",
    "prId" : 16505,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16505#pullrequestreview-41643746",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94ed87be-b483-432e-8fd1-022e3588c4ae",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is there a reason you removed the `deep=True` ?",
        "createdAt" : "2017-06-01T20:40:58Z",
        "updatedAt" : "2017-06-13T21:06:14Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "fe0b867c-1c9e-4b64-8b9c-ab10d90b37b4",
        "parentId" : "94ed87be-b483-432e-8fd1-022e3588c4ae",
        "authorId" : "0bf5e041-50d5-450b-8f53-387ea2fb4724",
        "body" : "It's the default and can thus be removed (as of @jreback's request that disappeared after my rebase).\r\nhttps://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L3523",
        "createdAt" : "2017-06-01T21:33:55Z",
        "updatedAt" : "2017-06-13T21:06:14Z",
        "lastEditedBy" : "0bf5e041-50d5-450b-8f53-387ea2fb4724",
        "tags" : [
        ]
      },
      {
        "id" : "1ad8545a-cd9b-42ed-8c3e-de986c9aec0b",
        "parentId" : "94ed87be-b483-432e-8fd1-022e3588c4ae",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK, perfect! (I looked for a comment about it, but didn't find one :-))",
        "createdAt" : "2017-06-01T21:35:08Z",
        "updatedAt" : "2017-06-13T21:06:14Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "01eaba1382c8862cca33fa13e23448f02fecca5c",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +837,841 @@\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        renamed = self if inplace else self.copy()\n        renamed.set_axis(axis, idx)\n        if not inplace:"
  },
  {
    "id" : "abed5186-de5b-4688-875e-6efe4db55b79",
    "prId" : 16951,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16951#pullrequestreview-53367069",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b54f10a-60dc-4aad-97ce-d0dd4fca6d27",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Is this a single-point-of-contact that all (most?  many?) setter methods go through?  i.e. will the various `loc.__setitem__` paths eventually wind through here?",
        "createdAt" : "2017-07-29T19:13:03Z",
        "updatedAt" : "2017-08-04T12:16:20Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "35175748-468b-459a-93e6-4e6b430defb9",
        "parentId" : "5b54f10a-60dc-4aad-97ce-d0dd4fca6d27",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yes, I believe that is correct.",
        "createdAt" : "2017-07-29T19:14:34Z",
        "updatedAt" : "2017-08-04T12:16:20Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "b32a5499-ba15-4cae-9964-7cd9d017b942",
        "parentId" : "5b54f10a-60dc-4aad-97ce-d0dd4fca6d27",
        "authorId" : "4fdf486b-81b0-48e9-9a67-6870c3d021a2",
        "body" : "That is my understanding, yes. Here is an example of setting while using `.loc`:\r\n\r\n```python\r\nimport pandas as pd\r\ndf = pd.DataFrame({'one': [0, 1, 2]})\r\ndf.loc[:, 'sum'] = df.one.sum()\r\n```\r\n\r\n```\r\nUserWarning: Column name 'sum' collides with a built-in method, which will cause unexpected attribute behavior\r\n  self._set_item(key, value)\r\n\r\n```",
        "createdAt" : "2017-07-29T20:29:42Z",
        "updatedAt" : "2017-08-04T12:16:20Z",
        "lastEditedBy" : "4fdf486b-81b0-48e9-9a67-6870c3d021a2",
        "tags" : [
        ]
      },
      {
        "id" : "b27ea47b-9817-413f-a403-a74072940365",
        "parentId" : "5b54f10a-60dc-4aad-97ce-d0dd4fca6d27",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this point is *only* for ``[]`` setting, e.g. setting a column on a DF or an element on a Series. ``.loc/.iloc`` are handled in core/indexing.py",
        "createdAt" : "2017-07-31T23:19:00Z",
        "updatedAt" : "2017-08-04T12:16:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b86546e92707483dbbdf0ee58f83311f2e896323",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1907,1911 @@        return result\n\n    def _set_item(self, key, value):\n        if isinstance(key, str) and callable(getattr(self, key, None)):\n            warnings.warn(\"Column name '{key}' collides with a built-in \""
  },
  {
    "id" : "05e6b851-12a4-44b6-8928-47d724d38be2",
    "prId" : 16951,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16951#pullrequestreview-54079010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f3acb31-b1fb-476d-8b87-9fa9b81a0baa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use compat.string_types rather than ``str`` here",
        "createdAt" : "2017-07-31T23:26:03Z",
        "updatedAt" : "2017-08-04T12:16:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a80c4f80-63d6-46b5-bc24-b58c013b46fa",
        "parentId" : "6f3acb31-b1fb-476d-8b87-9fa9b81a0baa",
        "authorId" : "4fdf486b-81b0-48e9-9a67-6870c3d021a2",
        "body" : "Using `string_types` causes failures in Python2 when creating columns that have unicode characters in their names. See c90aa2266137d78f4786b85ff3a5cd08ff0c39fd.",
        "createdAt" : "2017-08-03T12:40:37Z",
        "updatedAt" : "2017-08-04T12:16:20Z",
        "lastEditedBy" : "4fdf486b-81b0-48e9-9a67-6870c3d021a2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b86546e92707483dbbdf0ee58f83311f2e896323",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1908,1912 @@\n    def _set_item(self, key, value):\n        if isinstance(key, str) and callable(getattr(self, key, None)):\n            warnings.warn(\"Column name '{key}' collides with a built-in \"\n                          \"method, which will cause unexpected attribute \""
  },
  {
    "id" : "fec2bf6f-d089-4c3d-9fe4-39cdca20f6a9",
    "prId" : 16951,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16951#pullrequestreview-54954875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "196aa6ba-961d-4340-a6a3-b3a8fc1bea1e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would write this a bit more generic, as it does not only raise for Series objects (and I also find it a bit confusing, as pandas certainly allows assigning Series objects, just with another syntax). \r\n\r\nMaybe something like \"pandas doesn't allow to add a new column using attribute access\" ? (can certainly be improved further)",
        "createdAt" : "2017-08-08T14:27:40Z",
        "updatedAt" : "2017-08-08T14:27:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "b86546e92707483dbbdf0ee58f83311f2e896323",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +3364,3368 @@                if isinstance(self, ABCDataFrame) and (is_list_like(value)):\n                    warnings.warn(\"Pandas doesn't allow Series to be assigned \"\n                                  \"into nonexistent columns - see \"\n                                  \"https://pandas.pydata.org/pandas-docs/\"\n                                  \"stable/indexing.html#attribute-access\","
  },
  {
    "id" : "017b450e-db3d-46b8-bede-ec1a9dff3484",
    "prId" : 16972,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16972#pullrequestreview-52590604",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6283c42-e698-443b-8936-c8d9791b699c",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Also here the docstring of `isnull` is not fully correct",
        "createdAt" : "2017-07-27T08:47:06Z",
        "updatedAt" : "2017-07-27T08:50:59Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "25eadac6ea9de44b9a3b3305061cbccd453bba7c",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +4550,4554 @@    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isnull(self):\n        return isna(self).__finalize__(self)\n\n    _shared_docs['notna'] = \"\"\""
  },
  {
    "id" : "eb737fb7-18f9-4c5c-bcce-fa3d18854be7",
    "prId" : 17203,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17203#pullrequestreview-55181931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03cdae28-9255-4898-904d-2a874097792a",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Let's provide an example using the `copy` argument given that it says the parameter should be handled with care.",
        "createdAt" : "2017-08-08T21:59:37Z",
        "updatedAt" : "2017-08-09T10:24:25Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "bbca849c-1d4b-4c89-a675-a8781cb6ee16",
        "parentId" : "03cdae28-9255-4898-904d-2a874097792a",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Ok, done, added example with ``copy=False``, where result propagates upwards.\r\n\r\nI could only get it to work with categoricals and not numpy dtypes, so the example is a bit contrieved.",
        "createdAt" : "2017-08-08T23:04:03Z",
        "updatedAt" : "2017-08-09T10:24:25Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "e1c730ec-8ed9-474e-8758-7c64ca240994",
        "parentId" : "03cdae28-9255-4898-904d-2a874097792a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "copy is not really that useful here, but ok since that you did it.",
        "createdAt" : "2017-08-08T23:23:33Z",
        "updatedAt" : "2017-08-09T10:24:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a561b5ed-329c-4bfe-b5de-52b78efd8616",
        "parentId" : "03cdae28-9255-4898-904d-2a874097792a",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Yeah, especially if ``copy=False`` has no effect with numpy.dtypes.\r\n\r\nUnless someone can find an effect with columns with numpy.dtypes, I wouldn't mind pulling this out again, as my example is maybe a bit silly.",
        "createdAt" : "2017-08-08T23:35:17Z",
        "updatedAt" : "2017-08-09T10:24:25Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "c04e728c-fa7f-4d92-9161-d8114a2015ad",
        "parentId" : "03cdae28-9255-4898-904d-2a874097792a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "For me it works as well with numpy dtypes:\r\n\r\n```\r\nIn [77]: s1 = pd.Series([1,2])\r\n\r\nIn [78]: s2 = s1.astype('int', copy=False)\r\n\r\nIn [79]: s2[0] = 10\r\n\r\nIn [80]: s1\r\nOut[80]: \r\n0    10\r\n1     2\r\ndtype: int64\r\n```\r\n\r\nIt's just that the dtype needs to be equivalent (otherwise it always takes a copy).\r\n\r\nSo I would change the example",
        "createdAt" : "2017-08-09T08:59:24Z",
        "updatedAt" : "2017-08-09T10:24:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ddd1750d-5612-4485-a9d4-0cbe644acbc3",
        "parentId" : "03cdae28-9255-4898-904d-2a874097792a",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Ok, I've changed it to your example.",
        "createdAt" : "2017-08-09T09:35:48Z",
        "updatedAt" : "2017-08-09T10:24:25Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "c90160ad67ac82cb1c4f6952be7ca333520b5b3a",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +3641,3645 @@        casted : type of caller\n\n        Examples\n        --------\n        >>> ser = pd.Series([1, 2], dtype='int32')"
  },
  {
    "id" : "43d82641-a6ac-4250-a0c5-a41c98ca6904",
    "prId" : 17203,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17203#pullrequestreview-55139911",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ea3d6bd-5de4-477b-b09a-9a7c12bee74f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could add a See Also to numpy.astype here.",
        "createdAt" : "2017-08-08T23:24:13Z",
        "updatedAt" : "2017-08-09T10:24:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a7f3fdc1-cfaf-48d0-b41b-614d0b81d62a",
        "parentId" : "6ea3d6bd-5de4-477b-b09a-9a7c12bee74f",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Ok, done.",
        "createdAt" : "2017-08-09T06:01:12Z",
        "updatedAt" : "2017-08-09T10:24:25Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "c90160ad67ac82cb1c4f6952be7ca333520b5b3a",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +3640,3644 @@        -------\n        casted : type of caller\n\n        Examples\n        --------"
  },
  {
    "id" : "5f7e8664-edea-447c-894a-c813e2067cb5",
    "prId" : 17203,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17203#pullrequestreview-55205468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77ef257b-9883-4bc4-8002-94515525b7bf",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "maybe add something like \", and `copy=False` has only effect when the specified dtype is equivalent to the existing dtype\" ?",
        "createdAt" : "2017-08-09T09:39:19Z",
        "updatedAt" : "2017-08-09T10:24:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "11883cde-8f2f-4ecf-9a46-d8e7501b5905",
        "parentId" : "77ef257b-9883-4bc4-8002-94515525b7bf",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Hmm, I consciously made it clearer but not-too-specific, as I don't really know how ``copy`` does its thing, and I doubt this is used so often.\r\n\r\nI suggest to leave it as it is. Is that ok?",
        "createdAt" : "2017-08-09T09:50:29Z",
        "updatedAt" : "2017-08-09T10:24:25Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "80933eb6-627c-4c59-b7d0-b7d9367f4e70",
        "parentId" : "77ef257b-9883-4bc4-8002-94515525b7bf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "yes, that is fine",
        "createdAt" : "2017-08-09T11:24:52Z",
        "updatedAt" : "2017-08-09T11:24:52Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "c90160ad67ac82cb1c4f6952be7ca333520b5b3a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +3623,3627 @@            Return a copy when ``copy=True`` (be very careful setting\n            ``copy=False`` as changes to values then may propagate to other\n            pandas objects).\n        errors : {'raise', 'ignore'}, default 'raise'.\n            Control raising of exceptions on invalid data for provided dtype."
  },
  {
    "id" : "5e12b3e4-d31c-49eb-a190-f1f4e3112c4f",
    "prId" : 17352,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17352#pullrequestreview-66193596",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "039fd377-52a8-4662-ad96-781d442fe287",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "``convert=None`` should be the default and show the warning if its not None.",
        "createdAt" : "2017-09-27T10:35:37Z",
        "updatedAt" : "2017-10-01T06:13:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d7cb0f79-989b-4f76-ba5d-e33ba64d7a9b",
        "parentId" : "039fd377-52a8-4662-ad96-781d442fe287",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Why!?  `convert=None` makes less sense compared `convert=False`.",
        "createdAt" : "2017-09-27T14:57:50Z",
        "updatedAt" : "2017-10-01T06:13:13Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "563f4c61-68d8-4e48-a945-75d021428ae0",
        "parentId" : "039fd377-52a8-4662-ad96-781d442fe287",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "the point is to deprecate this. How can you tell that someone is then passing the convert parameter at all? you can then check if ``convert`` is not ``None`` to see if it was passed",
        "createdAt" : "2017-09-29T10:08:09Z",
        "updatedAt" : "2017-10-01T06:13:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c2c42971-f825-4c61-a4f0-6800d504df61",
        "parentId" : "039fd377-52a8-4662-ad96-781d442fe287",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "That's because `convert=True` is the default per the signature.",
        "createdAt" : "2017-09-29T15:48:19Z",
        "updatedAt" : "2017-10-01T06:13:13Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "9325f21581d3ece0ba68ea2d7a029b59257de7d5",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +2197,2201 @@        nv.validate_take(tuple(), kwargs)\n\n        if not convert:\n            msg = (\"The 'convert' parameter is deprecated \"\n                   \"and will be removed in a future version.\")"
  },
  {
    "id" : "8288bccf-0ab2-4ab2-9949-1cde1a91d12c",
    "prId" : 17484,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17484#pullrequestreview-74263566",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7198ec24-22f2-48b0-b130-2bd8bbf6922b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same as above",
        "createdAt" : "2017-11-04T19:27:09Z",
        "updatedAt" : "2017-12-01T01:45:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3b95feba9a9b55febae333ebaec5239f6af63b4",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +1283,1287 @@\n        Returns\n        -------\n        dropped: DataFrame\n"
  },
  {
    "id" : "fd2fc120-f7c0-4700-a383-a4533d8838db",
    "prId" : 17484,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17484#pullrequestreview-74761918",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f4edbeb-0300-42a4-a9ca-fba6f14d6ac8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "haven't looked at tests yet, make sure this is tested (the ndim > 2)",
        "createdAt" : "2017-11-07T13:27:34Z",
        "updatedAt" : "2017-12-01T01:45:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "20cb4cd1-ea2f-4e89-a27f-7f3f11c27bf2",
        "parentId" : "1f4edbeb-0300-42a4-a9ca-fba6f14d6ac8",
        "authorId" : "f342d5a1-8520-43c2-8078-e3c8de5c0da3",
        "body" : "I added exception assertion tests for all of the new methods against a Panel object.  Does that cover ndim > 2 well enough?",
        "createdAt" : "2017-11-07T14:20:15Z",
        "updatedAt" : "2017-12-01T01:45:02Z",
        "lastEditedBy" : "f342d5a1-8520-43c2-8078-e3c8de5c0da3",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3b95feba9a9b55febae333ebaec5239f6af63b4",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +1104,1108 @@        other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]\n\n        if self.ndim > 2:\n            raise NotImplementedError(\n                \"_is_label_reference is not implemented for {type}\""
  },
  {
    "id" : "fa7204e5-d7d0-4f97-9693-8053c65392f7",
    "prId" : 17644,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17644#pullrequestreview-64738388",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8edecde0-58a3-449b-aeda-2987aca52132",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Perhaps add a `Notes` section saying that specifying both `labels` and `index` or `columns` will raise an error.",
        "createdAt" : "2017-09-23T12:14:04Z",
        "updatedAt" : "2017-09-24T09:38:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef82853948b483f37e431801848177a801939a92",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +2346,2350 @@            Whether to drop labels from the index (0 / 'index') or\n            columns (1 / 'columns').\n        index, columns : single label or list-like\n            Alternative to specifying `axis` (``labels, axis=1`` is\n            equivalent to ``columns=labels``)."
  },
  {
    "id" : "ef953226-1268-43ee-bcdf-28b9b7bb4417",
    "prId" : 17644,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17644#pullrequestreview-64741756",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bb871f9-54d3-4dff-996c-d84eb6c9e7ea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a versionadded tag",
        "createdAt" : "2017-09-23T15:12:05Z",
        "updatedAt" : "2017-09-24T09:38:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef82853948b483f37e431801848177a801939a92",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +2348,2352 @@        index, columns : single label or list-like\n            Alternative to specifying `axis` (``labels, axis=1`` is\n            equivalent to ``columns=labels``).\n\n            .. versionadded:: 0.21.0"
  },
  {
    "id" : "cfad6d16-03e7-427a-b578-33fa482e9f03",
    "prId" : 17665,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17665#pullrequestreview-64880685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fef4a42-3f6e-49c1-bfc3-a410268c7f4e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you update same for ``.mask`` as well.",
        "createdAt" : "2017-09-25T12:05:52Z",
        "updatedAt" : "2017-09-25T12:53:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5d5aeacd-7a20-4b2c-848c-cd316d421c9c",
        "parentId" : "4fef4a42-3f6e-49c1-bfc3-a410268c7f4e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "mask and where now use the same docstring (with only parts of it substituted with the correct value). But keep doing this and providing a better explanation will become rather complex I think. Are you OK with just duplicating the docstring and have one for where and mask separately ?",
        "createdAt" : "2017-09-25T12:14:58Z",
        "updatedAt" : "2017-09-25T12:53:59Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e3c9df1b-4b0e-4a0b-9591-8edb68674478",
        "parentId" : "4fef4a42-3f6e-49c1-bfc3-a410268c7f4e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh that's right. I don't think duplicating is a good idea. maybe just put an example with mask here as well.",
        "createdAt" : "2017-09-25T12:36:44Z",
        "updatedAt" : "2017-09-25T12:53:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf8f0811211d97f81e000f8e0b8fb1842ca367d0",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +5820,5824 @@\n            return self._constructor(new_data).__finalize__(self)\n\n    _shared_docs['where'] = (\"\"\"\n        Return an object of same shape as self and whose corresponding"
  },
  {
    "id" : "cca54590-7c34-495e-aa0e-761c0b031db6",
    "prId" : 17800,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17800#pullrequestreview-67992997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c53f4178-4335-4568-974a-93934dbbc18d",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is this also true for the mapper?",
        "createdAt" : "2017-10-06T14:35:57Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e2aa31ba-15b4-4b68-a54f-07377505a8b4",
        "parentId" : "c53f4178-4335-4568-974a-93934dbbc18d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is the `Series.rename` docstring right now:\r\n\r\n```\r\nSignature: df.A.rename(index=None, **kwargs)\r\nDocstring:\r\nAlter axes input function or functions. Function / dict values must be\r\nunique (1-to-1). Labels not contained in a dict / Series will be left\r\nas-is. Extra labels listed don't throw an error. Alternatively, change\r\n``Series.name`` with a scalar value (Series only).\r\n\r\nParameters\r\n----------\r\n\r\nindex : scalar, list-like, dict-like or function, optional\r\n    Scalar or list-like will alter the ``Series.name`` attribute,\r\n    and raise on DataFrame or Panel.\r\n    dict-like or functions are transformations to apply to\r\n    that axis' values\r\n```\r\n\r\nSo i didn't modify the signature at all. It doesn't have an `mapper` argument.",
        "createdAt" : "2017-10-06T14:54:40Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "26efd97e-8312-49c3-9c1b-d68332159505",
        "parentId" : "c53f4178-4335-4568-974a-93934dbbc18d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "(I think that not having `mapper` or `axis` kwargs is the better option here, but I may be wrong)",
        "createdAt" : "2017-10-06T14:55:50Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "eda0b5a8-41fd-48d6-9992-ad2cd8ec5ec9",
        "parentId" : "c53f4178-4335-4568-974a-93934dbbc18d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Sorry, I wanted to say that for the DataFrame docstring (this is in generic.py). \r\nSo I meant, for a dataframe.rename, is the explanation of index/column, also valid for mapper (scalar vs mapping)",
        "createdAt" : "2017-10-06T15:21:21Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1891e6a7-383b-4973-866e-d5d32df232df",
        "parentId" : "c53f4178-4335-4568-974a-93934dbbc18d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah, the dict / function-like arguments descriptions are correct. Scalar / list-like don't apply. I could make that bit a shared_doc section... Let me try quick.",
        "createdAt" : "2017-10-06T15:43:20Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "91b5ccf6-8942-4bae-a8ca-739428908211",
        "parentId" : "c53f4178-4335-4568-974a-93934dbbc18d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Although, at some point a separate docstring might be easier.",
        "createdAt" : "2017-10-06T15:43:44Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "690b3b45-c729-46a6-8bfc-b36fcd05fd7f",
        "parentId" : "c53f4178-4335-4568-974a-93934dbbc18d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Ugh, this is pretty messy. I'm just going to leave as-is for now. For `DataFrame.rename` the docstring starts\r\n\r\n```\r\nParameters\r\n----------\r\nmapper : dict-like or function\r\n    Applied to the axis specified by `axis`\r\nindex, columns : scalar, list-like, dict-like or function, optional\r\n    Scalar or list-like will alter the ``Series.name`` attribute,\r\n    and raise on DataFrame or Panel.\r\n    dict-like or functions are transformations to apply to\r\n    that axis' values\r\naxis : int or str, optional\r\n    Axis to target. Can be either the axis name ('index', 'columns')\r\n    or number (0, 1).\r\n```",
        "createdAt" : "2017-10-06T15:51:58Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "abdf8588-79c3-4845-82ee-12454bc2df73",
        "parentId" : "c53f4178-4335-4568-974a-93934dbbc18d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I personally would also create separate docstrings for the series/dataframe versions of those methods. It will give a bit of duplication, but it will be much easier and take less time to make sure this duplication is done correctly than trying to figure out how to make it work with the docstring substitution. \r\nBut agree that can be in another PR.",
        "createdAt" : "2017-10-09T14:17:54Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e668bfd35260d2f77e7230ebffafd476b92991a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +745,749 @@        %(optional_mapper)s\n        %(axes)s : scalar, list-like, dict-like or function, optional\n            Scalar or list-like will alter the ``Series.name`` attribute,\n            and raise on DataFrame or Panel.\n            dict-like or functions are transformations to apply to"
  },
  {
    "id" : "e7e747ab-397d-44c8-91db-1ed05c529cd9",
    "prId" : 17800,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17800#pullrequestreview-67988839",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10e5957d-c660-4bfe-9a69-124074e54ede",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are you showing examples of both? maybe put your highly recommended warning here?",
        "createdAt" : "2017-10-06T19:51:27Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3b05946c-a64a-4e9c-86e2-f4f91fb1c446",
        "parentId" : "10e5957d-c660-4bfe-9a69-124074e54ede",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yep, added.",
        "createdAt" : "2017-10-09T13:50:29Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e668bfd35260d2f77e7230ebffafd476b92991a",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +821,825 @@        2  3  6\n\n        Using axis-style parameters\n\n        >>> df.rename(str.lower, axis='columns')"
  },
  {
    "id" : "7190b2bb-0a53-4be0-b9a5-39caa2199001",
    "prId" : 17800,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17800#pullrequestreview-67988799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4695432f-0118-443f-bf95-315bfa502bcc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same add the warning?",
        "createdAt" : "2017-10-06T19:52:09Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "32c201b3-2b2e-4af0-b53a-7d7648072117",
        "parentId" : "4695432f-0118-443f-bf95-315bfa502bcc",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Added above.",
        "createdAt" : "2017-10-09T13:50:22Z",
        "updatedAt" : "2017-10-10T13:32:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e668bfd35260d2f77e7230ebffafd476b92991a",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +2876,2880 @@        Chrome                200          0.02\n\n        We can also reindex the columns.\n\n        >>> df.reindex(columns=['http_status', 'user_agent'])"
  },
  {
    "id" : "59c94991-79f0-4d09-86fe-d0a6c97c5a6a",
    "prId" : 17831,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17831#pullrequestreview-69080175",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "553a79a7-5ae3-4e49-966c-2b3b960a3d0f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "leftover comment",
        "createdAt" : "2017-10-12T09:57:10Z",
        "updatedAt" : "2017-10-12T21:01:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "04bb2170-8085-49ce-b264-8dcbb60f2f02",
        "parentId" : "553a79a7-5ae3-4e49-966c-2b3b960a3d0f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@TomAugspurger prob just as easy to fix this on merge",
        "createdAt" : "2017-10-12T21:03:01Z",
        "updatedAt" : "2017-10-12T21:03:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6a90ffae-9ae3-4021-a6d8-42e972f4f21b",
        "parentId" : "553a79a7-5ae3-4e49-966c-2b3b960a3d0f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I can fix that in https://github.com/pandas-dev/pandas/pull/17858",
        "createdAt" : "2017-10-12T21:04:07Z",
        "updatedAt" : "2017-10-12T21:04:07Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "ae6ec114-f107-4bf2-bdc4-e866218f6c13",
        "parentId" : "553a79a7-5ae3-4e49-966c-2b3b960a3d0f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Although, why do you say that's leftover? Wasn't that added deliberately @gfyoung?",
        "createdAt" : "2017-10-12T21:08:43Z",
        "updatedAt" : "2017-10-12T21:08:43Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "7956569b-ca33-4e7b-a4ae-f3109defb882",
        "parentId" : "553a79a7-5ae3-4e49-966c-2b3b960a3d0f",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yes",
        "createdAt" : "2017-10-12T21:11:31Z",
        "updatedAt" : "2017-10-12T21:11:31Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "690b3300-94f2-43b5-a3ec-e5e7115c8ff0",
        "parentId" : "553a79a7-5ae3-4e49-966c-2b3b960a3d0f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually nvm thought was a different comment ",
        "createdAt" : "2017-10-12T22:14:15Z",
        "updatedAt" : "2017-10-12T22:14:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f946b727ab5980db83be7bdbb2aa54908174bf1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2173,2177 @@        convert : bool, default True\n            .. deprecated:: 0.21.0\n               In the future, negative indices will always be converted.\n\n            Whether to convert negative indices into positive ones."
  },
  {
    "id" : "26bc83eb-7555-43e8-8182-e708e30a1828",
    "prId" : 17984,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17984#pullrequestreview-72460890",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2457a08-f983-49df-a448-b02db8dd528c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a comment here",
        "createdAt" : "2017-10-27T10:17:58Z",
        "updatedAt" : "2017-11-16T22:04:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1a761663b65b3ac80422b139da9bd780661c695",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +6338,6342 @@        axis = self._get_axis_number(axis)\n        ax = self._get_axis(axis)\n\n        # GH 17935\n        # Check that index is sorted"
  },
  {
    "id" : "d768351c-abc2-42b5-83d9-4fe1fca842a8",
    "prId" : 18099,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18099#pullrequestreview-99905277",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98d3ded2-af19-450c-adf1-7ef7518e39b9",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I don't think using concat is the best way here. For example, this will loose information about the columns object (its type, metadata such as its name). \r\nCan't we in a loop assign it back into the frame? (or is that less efficient?)",
        "createdAt" : "2018-02-26T10:02:23Z",
        "updatedAt" : "2018-02-28T08:13:09Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e7aba0a7-93ed-4ecb-bfb0-cc168a77cb51",
        "parentId" : "98d3ded2-af19-450c-adf1-7ef7518e39b9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is idiomatic and how things are handled elsewhere. \r\n\r\n> For example, this will loose information about the columns object (its type, metadata such as its name)\r\n\r\nit will preserve as these are all the *same* index. of course if you have a counter-example",
        "createdAt" : "2018-02-26T11:03:13Z",
        "updatedAt" : "2018-02-28T08:13:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2d0123b3-25b3-446b-8b70-5b5c3215f1a4",
        "parentId" : "98d3ded2-af19-450c-adf1-7ef7518e39b9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I am speaking about the *columns*, not index. So just take an example with CategoricalIndex, RangeIndex, .. or one with a name, and the resulting columns will not be the same. ",
        "createdAt" : "2018-02-26T11:05:36Z",
        "updatedAt" : "2018-02-28T08:13:09Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0e4508fb-d21b-4cde-8bcb-834ee5f736f9",
        "parentId" : "98d3ded2-af19-450c-adf1-7ef7518e39b9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, we do this else where in astype. So this is obviously not tested. ok In any event, using concat is vastly more performant. I suppose you just set the columns after.",
        "createdAt" : "2018-02-26T11:11:49Z",
        "updatedAt" : "2018-02-28T08:13:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "64c77a1a-d9fe-4cde-8367-5a433f4d9bc2",
        "parentId" : "98d3ded2-af19-450c-adf1-7ef7518e39b9",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "I've opened #19920 to address the (an?) existing occurrence of this bug.  A quick check makes it look like @jreback's suggestion of setting the columns afterwards should fix things in both places, e.g.\r\n```python\r\nresult = pd.concat(results, axis=1, copy=False)\r\nresult.columns = self.columns\r\nreturn result\r\n````\r\nSince this is relatively small, I'm planning to make the fix/add tests in this PR.  Can address it in a separate PR if that would be preferable though.",
        "createdAt" : "2018-02-27T01:27:52Z",
        "updatedAt" : "2018-02-28T08:13:09Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "f74e6bb9-d7a0-456f-97e6-44fcdcbd1a24",
        "parentId" : "98d3ded2-af19-450c-adf1-7ef7518e39b9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Both (here or in other PR) are fine for me. However, if we also want to fix this for the other cases (not only for categorical), it might be cleaner as a separate PR.",
        "createdAt" : "2018-02-27T10:10:31Z",
        "updatedAt" : "2018-02-28T08:13:09Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f0611377-0280-4bb8-a4a2-6f7731e49c6a",
        "parentId" : "98d3ded2-af19-450c-adf1-7ef7518e39b9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes this is fine, I see you opened another one which is good.",
        "createdAt" : "2018-02-28T00:13:55Z",
        "updatedAt" : "2018-02-28T08:13:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "293dee5cab80342902158fd2f3e9f9a5791269aa",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +4442,4446 @@            # GH 18099: columnwise conversion to categorical\n            results = (self[col].astype(dtype, copy=copy) for col in self)\n            return pd.concat(results, axis=1, copy=False)\n\n        # else, only a single dtype is given"
  },
  {
    "id" : "bfeba6ce-42d0-411d-8f11-f19c64a2ef3a",
    "prId" : 18293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18293#pullrequestreview-77652008",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45df0dea-d418-4427-b37a-e34900f452b7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ideally we would have a parametriezed test that hits this (with multiple invalid things that should raise)",
        "createdAt" : "2017-11-19T18:58:01Z",
        "updatedAt" : "2017-11-20T20:06:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bdbca5c6-673c-4ab3-ad2a-40757c8b000d",
        "parentId" : "45df0dea-d418-4427-b37a-e34900f452b7",
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "Yeah, as I said above, I have included tests in ``test_fillna_categorical_raise()`` in ``tests/series/test_missing.py`` to check for the ``TypeError`` when the user passes a list, tuple, or DataFrame fill ``value``. But the tests aren't parametrized.",
        "createdAt" : "2017-11-19T19:16:06Z",
        "updatedAt" : "2017-11-20T20:06:10Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "c484f499604603e55d3f48556939c65d50ad2a7c",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +4306,4310 @@                else:\n                    raise TypeError('\"value\" parameter must be a scalar, dict '\n                                    'or Series, but you passed a '\n                                    '\"{0}\"'.format(type(value).__name__))\n"
  },
  {
    "id" : "05e41e93-fd57-4d32-b3d3-8af43d07446e",
    "prId" : 18876,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18876#pullrequestreview-85326123",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f12b3384-61d9-41de-884f-2e1863caf5b5",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "probably it will become 0.22 ? (but can change later)",
        "createdAt" : "2017-12-22T14:32:08Z",
        "updatedAt" : "2017-12-28T12:36:26Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e954f84d5e5b2eae643472031c7890da3d98814",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +7670,7674 @@    ``min_count`` non-NA values are present the result will be NA.\n\n    .. versionadded :: 0.21.2\n\n       Added with the default being 1. This means the sum or product"
  },
  {
    "id" : "483d0a5f-da08-4346-87aa-71de7987be6c",
    "prId" : 18923,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18923#pullrequestreview-85430105",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d073d1ee-20df-4266-a8ad-fce2bdbafb17",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I *think* there is an issue about explicity listing the signatures in pandas/core/series and pandas/core/frame, for rename. would take that in this PR as well.",
        "createdAt" : "2017-12-23T19:48:36Z",
        "updatedAt" : "2018-02-12T23:43:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c1bb2de5-390e-442f-8027-298b851c7a23",
        "parentId" : "d073d1ee-20df-4266-a8ad-fce2bdbafb17",
        "authorId" : "997c4bf0-6f89-45c6-8eb6-0783741cce42",
        "body" : "Sure, happy to do so, just to clarify, you'd like to me to implement them as specific kwargs rather than **kwargs, and default them to None?",
        "createdAt" : "2017-12-23T21:22:08Z",
        "updatedAt" : "2018-02-12T23:43:48Z",
        "lastEditedBy" : "997c4bf0-6f89-45c6-8eb6-0783741cce42",
        "tags" : [
        ]
      },
      {
        "id" : "a0467b10-a27d-464d-bc36-a8af749c43ab",
        "parentId" : "d073d1ee-20df-4266-a8ad-fce2bdbafb17",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "defaults should be to what they actually default now, these are passed as kwargs to the generic routine, this is mainly to have a nice signature.",
        "createdAt" : "2017-12-23T21:23:19Z",
        "updatedAt" : "2018-02-12T23:43:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1794b985fdb1f78a55fa1a9c0819f58f540e7066",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +863,867 @@        copy = kwargs.pop('copy', True)\n        inplace = kwargs.pop('inplace', False)\n        level = kwargs.pop('level', None)\n        axis = kwargs.pop('axis', None)\n        if axis is not None:"
  },
  {
    "id" : "51f83741-556d-4e22-9644-681aabce58d9",
    "prId" : 18934,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18934#pullrequestreview-85593537",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2dab8623-f995-4806-8261-5d8c5f373237",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same here",
        "createdAt" : "2017-12-26T21:53:52Z",
        "updatedAt" : "2018-01-06T13:55:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0673b512bb8dba5592ef5d9f4c087bb9fee6cdcc",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +4164,4168 @@\n    def as_matrix(self, columns=None):\n        \"\"\"Convert the frame to its Numpy-array representation.\n\n        .. deprecated:: 0.23.0"
  },
  {
    "id" : "d2790e8f-83ba-464c-8813-0c62eb4d4892",
    "prId" : 18934,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18934#pullrequestreview-88219981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c32bbde-205a-4de0-b640-268bf1326bcf",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "For future reference, please never use 'NDFrame' is user-facing docstrings. Users should not be aware what that means.",
        "createdAt" : "2018-01-11T16:26:11Z",
        "updatedAt" : "2018-01-11T16:31:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0673b512bb8dba5592ef5d9f4c087bb9fee6cdcc",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +4109,4113 @@\n    def consolidate(self, inplace=False):\n        \"\"\"Compute NDFrame with \"consolidated\" internals (data of each dtype\n        grouped together in a single ndarray).\n"
  },
  {
    "id" : "dbcb1f90-e449-4e69-b1c7-4d65dfd067ab",
    "prId" : 19894,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19894#pullrequestreview-100289464",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0524dd4-5ff7-4bbe-b8d6-f98110a5d70e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a versionchanged (or just as 0.23 in the doc-string)",
        "createdAt" : "2018-03-01T01:09:43Z",
        "updatedAt" : "2018-03-07T14:31:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d8eae5c9affda1dc232a1894ffc316caa767beb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4887,4891 @@        method : string, optional, {'pad', 'ffill', 'bfill'}\n            The method to use when for replacement, when ``to_replace`` is a\n            scalar, list or tuple and ``value`` is None.\n\n        .. versionchanged:: 0.23.0"
  },
  {
    "id" : "f7720d8f-8eda-4168-83cd-15ab9b421a6c",
    "prId" : 20046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20046#pullrequestreview-102402315",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c35e550-db18-4947-a4bd-f49fd2376973",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Let's keep this to be one line.",
        "createdAt" : "2018-03-08T18:15:46Z",
        "updatedAt" : "2018-10-29T14:28:51Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "1263a47adf89836920a56c0b28412b78c0b58780",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +1108,1112 @@        \"\"\"\n        Alter the name of the index or name of Index object that is the\n        columns.\n\n        Parameters"
  },
  {
    "id" : "b5beeb6e-13b6-4ae3-8103-3b7f8aacca66",
    "prId" : 20046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20046#pullrequestreview-167941058",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e9d16a2-e4b9-42b8-a7cf-9cac83b861d8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a versionchanged",
        "createdAt" : "2018-10-24T12:44:16Z",
        "updatedAt" : "2018-10-29T14:28:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "88f7758d-affa-45eb-b0fd-cb3d8201a9ed",
        "parentId" : "0e9d16a2-e4b9-42b8-a7cf-9cac83b861d8",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "done",
        "createdAt" : "2018-10-24T14:31:00Z",
        "updatedAt" : "2018-10-29T14:28:51Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "1263a47adf89836920a56c0b28412b78c0b58780",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +1120,1124 @@            Use either ``mapper`` and ``axis`` to\n            specify the axis to target with ``mapper``, or ``index``\n            and/or ``columns``.\n\n            .. versionchanged:: 0.24.0"
  },
  {
    "id" : "5d42fc3a-642f-4a71-86d9-f6421fc88a97",
    "prId" : 20046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20046#pullrequestreview-168518273",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28382259-8a7a-4dab-9c1e-b74ab558f3dd",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We went to some lengths to preserve the correct function signature in DataFrame.rename. See `rewrite_axis_style_signature` in `pandas/util/_decorators.py`. Can you see if something similar is possible here.",
        "createdAt" : "2018-10-25T12:14:48Z",
        "updatedAt" : "2018-10-29T14:28:51Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b03f4474-7c8e-4683-813d-4f0605e2765e",
        "parentId" : "28382259-8a7a-4dab-9c1e-b74ab558f3dd",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "I was able to do it.  Had to modify some tests to properly test that we are generating warnings.",
        "createdAt" : "2018-10-25T18:13:26Z",
        "updatedAt" : "2018-10-29T14:28:51Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "1263a47adf89836920a56c0b28412b78c0b58780",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +1105,1109 @@    @rewrite_axis_style_signature('mapper', [('copy', True),\n                                             ('inplace', False)])\n    def rename_axis(self, mapper=None, **kwargs):\n        \"\"\"\n        Alter the name of the index or name of Index object that is the"
  },
  {
    "id" : "0a7a59f1-d6dc-462b-8221-4d4c24544d2d",
    "prId" : 20100,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20100#pullrequestreview-102849929",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71cd7cfa-4596-42c8-97dd-0b3ce9688a8c",
        "parentId" : null,
        "authorId" : "cd65a303-5837-4aee-91dd-9d7e42ba9bc4",
        "body" : "It would better organized it there was pull request for dtypes and another pull request for ftypes.",
        "createdAt" : "2018-03-10T12:51:51Z",
        "updatedAt" : "2018-03-12T21:10:51Z",
        "lastEditedBy" : "cd65a303-5837-4aee-91dd-9d7e42ba9bc4",
        "tags" : [
        ]
      }
    ],
    "commit" : "80589312ef7c47696af2fe628c36c4c60fcb4765",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +4312,4316 @@    @property\n    def ftypes(self):\n        \"\"\"\n        Return the ftypes (indication of sparse/dense and dtype) in DataFrame.\n"
  },
  {
    "id" : "f4d7a6c0-3016-4277-8bdc-bd7b6e423c65",
    "prId" : 20101,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20101#pullrequestreview-102850230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74802f5e-704c-4a3c-aebd-a7d46ab9f595",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think it would be fine to add here a sentence saying that this is always 1 for Series and 2 for DataFrame",
        "createdAt" : "2018-03-10T10:01:48Z",
        "updatedAt" : "2018-03-10T13:30:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "af3ed5b4-cc50-48a2-89e2-0cec070c4d9a",
        "parentId" : "74802f5e-704c-4a3c-aebd-a7d46ab9f595",
        "authorId" : "4f11f045-c4a2-4976-84c4-841edf41dcb9",
        "body" : "Done.",
        "createdAt" : "2018-03-10T12:48:23Z",
        "updatedAt" : "2018-03-10T13:30:53Z",
        "lastEditedBy" : "4f11f045-c4a2-4976-84c4-841edf41dcb9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6322586dbdbc6bbfa72159b550207aed3f6af1ab",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +460,464 @@        \"\"\"\n        Return an int representing the number of axes / array dimensions.\n\n        Return 1 if Series. Otherwise return 2 if DataFrame.\n"
  },
  {
    "id" : "9f9cb368-69a0-4292-a5bb-1fde31ea6576",
    "prId" : 20101,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20101#pullrequestreview-102851124",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6e40047-45e2-43e3-8c98-98069650d3d0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "See Also to ndarray.ndim",
        "createdAt" : "2018-03-10T13:17:25Z",
        "updatedAt" : "2018-03-10T13:30:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ec3814e9-e3cf-401d-be42-b3aa26dbb4c3",
        "parentId" : "e6e40047-45e2-43e3-8c98-98069650d3d0",
        "authorId" : "4f11f045-c4a2-4976-84c4-841edf41dcb9",
        "body" : "Done.",
        "createdAt" : "2018-03-10T13:28:52Z",
        "updatedAt" : "2018-03-10T13:30:53Z",
        "lastEditedBy" : "4f11f045-c4a2-4976-84c4-841edf41dcb9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6322586dbdbc6bbfa72159b550207aed3f6af1ab",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +475,479 @@        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.ndim\n        2\n        \"\"\"\n        return self._data.ndim"
  },
  {
    "id" : "8c69f1e3-c911-44d2-a80b-3dfe2137c4d3",
    "prId" : 20101,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20101#pullrequestreview-102851130",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02bf72c0-c7b9-41ca-8738-f4b4cedc28de",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "See Also to ndarray.size",
        "createdAt" : "2018-03-10T13:17:36Z",
        "updatedAt" : "2018-03-10T13:30:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "70602b2b-d4e7-4637-9eb5-775561bc2868",
        "parentId" : "02bf72c0-c7b9-41ca-8738-f4b4cedc28de",
        "authorId" : "4f11f045-c4a2-4976-84c4-841edf41dcb9",
        "body" : "Done.",
        "createdAt" : "2018-03-10T13:28:58Z",
        "updatedAt" : "2018-03-10T13:30:53Z",
        "lastEditedBy" : "4f11f045-c4a2-4976-84c4-841edf41dcb9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6322586dbdbc6bbfa72159b550207aed3f6af1ab",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +500,504 @@        >>> df.size\n        4\n        \"\"\"\n        return np.prod(self.shape)\n"
  },
  {
    "id" : "ffbbd63b-9320-42c7-9225-090bac502b6e",
    "prId" : 20185,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20185#pullrequestreview-103863792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae93572a-86b4-42d6-b5cd-f247ca760cb2",
        "parentId" : null,
        "authorId" : "e6a9b51d-be9b-4393-ae80-b015827ea507",
        "body" : "Can we link to the class? I believe\r\n```\r\n:class:`pandas.ExcelWriter`\r\n``` \r\nshould work.",
        "createdAt" : "2018-03-14T07:02:31Z",
        "updatedAt" : "2018-07-24T16:02:08Z",
        "lastEditedBy" : "e6a9b51d-be9b-4393-ae80-b015827ea507",
        "tags" : [
        ]
      },
      {
        "id" : "6b7ff61c-3b05-4f16-a404-b0e8e458945b",
        "parentId" : "ae93572a-86b4-42d6-b5cd-f247ca760cb2",
        "authorId" : "e6a9b51d-be9b-4393-ae80-b015827ea507",
        "body" : "Also, in the extended description we say that an `ExcelWriter` object is necessary to be able to use `.to_excel`, but in the parameter description we say that we also accept a \"file path\". So the `ExcelWriter` is not really needed? What happens if we specify a file path? I guess that a new `ExcelWriter` gets automatically created with default options.",
        "createdAt" : "2018-03-14T07:10:25Z",
        "updatedAt" : "2018-07-24T16:02:08Z",
        "lastEditedBy" : "e6a9b51d-be9b-4393-ae80-b015827ea507",
        "tags" : [
        ]
      },
      {
        "id" : "3f36e6cd-a942-4765-8684-8ffcf65b08d7",
        "parentId" : "ae93572a-86b4-42d6-b5cd-f247ca760cb2",
        "authorId" : "a0fe07da-7f39-41d5-88f7-e5612fa4b7ed",
        "body" : "Yes this is allowed `df1.to_excel(\"example.xlsx\", sheet_name='Sheet3')`",
        "createdAt" : "2018-03-14T09:44:31Z",
        "updatedAt" : "2018-07-24T16:02:08Z",
        "lastEditedBy" : "a0fe07da-7f39-41d5-88f7-e5612fa4b7ed",
        "tags" : [
        ]
      },
      {
        "id" : "4336e395-f0ba-458b-9dbe-ab56d48a47ca",
        "parentId" : "ae93572a-86b4-42d6-b5cd-f247ca760cb2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, the ExcelWriter is not required",
        "createdAt" : "2018-03-14T15:17:28Z",
        "updatedAt" : "2018-07-24T16:02:08Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2a64960c3438f872d1d33437c7dd326be8e88ee",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1851,1855 @@    ----------\n    excel_writer : string or ExcelWriter object\n        File path or existing ExcelWriter.\n    sheet_name : string, default 'Sheet1'\n        Name of sheet which will contain DataFrame."
  },
  {
    "id" : "8fabfb09-4eff-4817-b845-028f28a7c4e5",
    "prId" : 20185,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20185#pullrequestreview-136874465",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42dc3970-91ab-4b49-a843-902b4b6bed60",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think this can be simplified if someone addresses #21835 with a See Also link to ExcelWriter instead of all of this detail (one or two lines may still suffice)",
        "createdAt" : "2018-07-10T06:24:29Z",
        "updatedAt" : "2018-07-24T16:02:08Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "aad44c6f-ef5c-4e18-a01d-6480a8ca5b78",
        "parentId" : "42dc3970-91ab-4b49-a843-902b4b6bed60",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "It is a little verbose, but I wouldn't cut this down that drastically IMO.",
        "createdAt" : "2018-07-13T00:32:39Z",
        "updatedAt" : "2018-07-24T16:02:08Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2a64960c3438f872d1d33437c7dd326be8e88ee",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1839,1843 @@    Write %(klass)s to an excel sheet.\n\n    To write a single %(klass)s to an excel .xlsx file it is only necessary to\n    specify a target file name. To write to multiple sheets it is necessary to\n    create an `ExcelWriter` object with a target file name, and specify a sheet"
  },
  {
    "id" : "3b6d6c54-96f7-44fc-8d30-3e39b489004f",
    "prId" : 20216,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20216#pullrequestreview-102863128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db815887-8723-4b84-9d25-9d3fe452f213",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Maybe remove these so they don't conflict with the other PR.",
        "createdAt" : "2018-03-10T19:56:00Z",
        "updatedAt" : "2018-03-11T14:42:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "4aae7cce-1b72-4c5f-b908-8e1ecd4b7e1a",
        "parentId" : "db815887-8723-4b84-9d25-9d3fe452f213",
        "authorId" : "131aa434-1e55-4898-a6f8-d2e2d913088c",
        "body" : "@TomAugspurger If I do this an error \r\n```python ../scripts/validate_docstrings.py pandas.DataFrame.all\r\nTraceback (most recent call last):\r\n  File \"../scripts/validate_docstrings.py\", line 37, in <module>\r\n    import pandas\r\n  File \"/Users/marconlaforet/pandas-dev/pandas/__init__.py\", line 42, in <module>\r\n    from pandas.core.api import *\r\n  File \"/Users/marconlaforet/pandas-dev/pandas/core/api.py\", line 10, in <module>\r\n    from pandas.core.groupby import Grouper\r\n  File \"/Users/marconlaforet/pandas-dev/pandas/core/groupby.py\", line 48, in <module>\r\n    from pandas.core.frame import DataFrame\r\n  File \"/Users/marconlaforet/pandas-dev/pandas/core/frame.py\", line 75, in <module>\r\n    from pandas.core.series import Series\r\n  File \"/Users/marconlaforet/pandas-dev/pandas/core/series.py\", line 3202, in <module>\r\n    Series._add_numeric_operations()\r\n  File \"/Users/marconlaforet/pandas-dev/pandas/core/generic.py\", line 7530, in _add_numeric_operations\r\n    nanops.nanany)\r\nTypeError: _make_logical_function() missing 2 required positional arguments: 'examples' and 'see_also'```",
        "createdAt" : "2018-03-10T21:07:21Z",
        "updatedAt" : "2018-03-11T14:42:10Z",
        "lastEditedBy" : "131aa434-1e55-4898-a6f8-d2e2d913088c",
        "tags" : [
        ]
      },
      {
        "id" : "f6cc7d35-da24-4225-94df-27ea033e2dc7",
        "parentId" : "db815887-8723-4b84-9d25-9d3fe452f213",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, you can keep this. Just depending on which one of the two PRs is merged first, you might need to solve the conflict on the other. But that should be no problem",
        "createdAt" : "2018-03-10T21:10:43Z",
        "updatedAt" : "2018-03-11T14:42:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "23928f9c8fa19c0ec9722517ab264a42c703cb47",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +7585,7589 @@            cls, 'any', name, name2, axis_descr,\n            'Return whether any element is True over requested axis',\n            nanops.nanany, '', '')\n        cls.all = _make_logical_function(\n            cls, 'all', name, name2, axis_descr, _all_doc,"
  },
  {
    "id" : "eb7de1a5-9abe-4a00-9ae9-b186951ea6d6",
    "prId" : 20222,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20222#pullrequestreview-105888766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a7d5827-8838-434d-866a-ad253fcbe018",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "When running the validation script, I occasionally get a failure\r\n\r\n```\r\nLine 210, in pandas.DataFrame.describe\r\nFailed example:\r\n    df.describe(exclude=[np.number])\r\nExpected:\r\n           categorical object\r\n    count            3      3\r\n    unique           3      3\r\n    top              f      c\r\n    freq             1      1\r\nGot:\r\n           categorical object\r\n    count            3      3\r\n    unique           3      3\r\n    top              f      a\r\n    freq             1      1\r\n```\r\n\r\nDid you see this at all? This likely is an issue in the method itself, and not the docstring.",
        "createdAt" : "2018-03-21T19:59:49Z",
        "updatedAt" : "2018-07-08T04:52:52Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "520aef69-1cdd-407c-93f4-9d5f36cae6de",
        "parentId" : "3a7d5827-8838-434d-866a-ad253fcbe018",
        "authorId" : "0606914b-795b-4d35-a507-554d39c316db",
        "body" : "yeah i do see this error but its flaky. ",
        "createdAt" : "2018-03-21T20:06:35Z",
        "updatedAt" : "2018-07-08T04:52:52Z",
        "lastEditedBy" : "0606914b-795b-4d35-a507-554d39c316db",
        "tags" : [
        ]
      },
      {
        "id" : "17160193-588f-4c6e-81bb-3511712fa9e3",
        "parentId" : "3a7d5827-8838-434d-866a-ad253fcbe018",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "To be clear, it's probably some kind of non-stable sorting inside the describe method, and nothing wrong with the docstring. It may be best to just include the docstring, and open a new issue.",
        "createdAt" : "2018-03-21T20:09:53Z",
        "updatedAt" : "2018-07-08T04:52:52Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "9b2d0792-62a4-448c-acf3-c2e356dbd2a1",
        "parentId" : "3a7d5827-8838-434d-866a-ad253fcbe018",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The strange thing is that just doing\r\n\r\n```python\r\npd.DataFrame({\"A\": pd.Categorical(['d', 'e', 'f']), \"B\": ['a', 'b', 'c'], 'C': [1, 2, 3]}).describe(exclude=['number'])\r\n```\r\n\r\nseems deterministic.",
        "createdAt" : "2018-03-21T20:12:27Z",
        "updatedAt" : "2018-07-08T04:52:52Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c570d2439209780a979ef087c4977b463744ea72",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +8567,8571 @@\n        >>> df.describe(exclude=[np.object])\n               categorical  numeric\n        count            3      3.0\n        unique           3      NaN"
  },
  {
    "id" : "2a8f9e6d-19d0-43f7-a89e-137eacfd3e21",
    "prId" : 20253,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20253#pullrequestreview-103561349",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51e41832-3f48-488d-afd9-4cdf50f35a09",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jorisvandenbossche how handling file paths in doc-strings?",
        "createdAt" : "2018-03-13T10:04:15Z",
        "updatedAt" : "2018-03-13T22:04:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "84defbe9-96b5-4f58-b991-69177e78ef7a",
        "parentId" : "51e41832-3f48-488d-afd9-4cdf50f35a09",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback commented about it (using os.remove to remove remaining file), issue to discuss this is here: https://github.com/pandas-dev/pandas/issues/20302",
        "createdAt" : "2018-03-13T10:29:56Z",
        "updatedAt" : "2018-03-13T22:04:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "054cfec7-e279-4e81-bf67-ff01dcfea614",
        "parentId" : "51e41832-3f48-488d-afd9-4cdf50f35a09",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "great, see that now.",
        "createdAt" : "2018-03-13T10:37:53Z",
        "updatedAt" : "2018-03-13T22:04:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9beb45a7-f78f-4de4-a121-22ab423a7567",
        "parentId" : "51e41832-3f48-488d-afd9-4cdf50f35a09",
        "authorId" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "body" : "thanks guys for looking into it.",
        "createdAt" : "2018-03-13T18:35:08Z",
        "updatedAt" : "2018-03-13T22:04:25Z",
        "lastEditedBy" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "tags" : [
        ]
      }
    ],
    "commit" : "26b3e2e68b6949f9d619883a97ecf37d41417b38",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +1944,1948 @@        >>> original_df.to_pickle(\"./dummy.pkl\")\n\n        >>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")\n        >>> unpickled_df\n           foo  bar"
  },
  {
    "id" : "2f41e00a-3c15-40fc-a93a-509ca56d464d",
    "prId" : 20253,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20253#pullrequestreview-103561224",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "140c2ee0-d1e0-49d8-a002-62b763a72a2d",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add here a \r\n\r\n```\r\n>>> import os\r\n>>> os.remove(\"./dummy.pkl\")\r\n```\r\n\r\n",
        "createdAt" : "2018-03-13T10:07:25Z",
        "updatedAt" : "2018-03-13T22:04:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a8a967d8-3f64-4c49-902a-f166f34e19e8",
        "parentId" : "140c2ee0-d1e0-49d8-a002-62b763a72a2d",
        "authorId" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "body" : "added. :)",
        "createdAt" : "2018-03-13T18:34:50Z",
        "updatedAt" : "2018-03-13T22:04:25Z",
        "lastEditedBy" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "tags" : [
        ]
      }
    ],
    "commit" : "26b3e2e68b6949f9d619883a97ecf37d41417b38",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +1952,1956 @@        3    3    8\n        4    4    9\n\n        >>> import os\n        >>> os.remove(\"./dummy.pkl\")"
  },
  {
    "id" : "22a2b522-ae43-484c-85fb-04bd8bba4f56",
    "prId" : 20253,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20253#pullrequestreview-103725498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afe193d8-4e82-477f-8678-e898231a49c1",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think is more standard to have this in a `References` section.",
        "createdAt" : "2018-03-13T15:10:26Z",
        "updatedAt" : "2018-03-13T22:04:25Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "392a1797-f21b-4bde-9784-cdd59f82a190",
        "parentId" : "afe193d8-4e82-477f-8678-e898231a49c1",
        "authorId" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "body" : "@jorisvandenbossche your opinion? ",
        "createdAt" : "2018-03-13T18:39:18Z",
        "updatedAt" : "2018-03-13T22:04:25Z",
        "lastEditedBy" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "tags" : [
        ]
      },
      {
        "id" : "712915a8-36f3-4ee8-bb0d-4dc74f504806",
        "parentId" : "afe193d8-4e82-477f-8678-e898231a49c1",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I previously said it was fine, because we don't use `References` sections in many cases (most of the time we use inline links), another thing we can discuss in further improving the guidelines.",
        "createdAt" : "2018-03-14T08:31:43Z",
        "updatedAt" : "2018-03-14T08:31:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "26b3e2e68b6949f9d619883a97ecf37d41417b38",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1922,1926 @@            to HIGHEST_PROTOCOL.\n\n            .. [1] https://docs.python.org/3/library/pickle.html\n            .. versionadded:: 0.21.0\n"
  },
  {
    "id" : "cbf71137-acb8-4782-8acb-f1d3a1982701",
    "prId" : 20269,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20269#pullrequestreview-104763342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8fcfd46-0d4c-49c1-87db-dc4c10157ced",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Does it make sense to add `DataFrame.to_series`? I think they do the same in the case of 1 column DataFrame, right?",
        "createdAt" : "2018-03-13T23:20:44Z",
        "updatedAt" : "2018-03-14T19:49:39Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "80793982-cdf7-41aa-a467-48da27078372",
        "parentId" : "d8fcfd46-0d4c-49c1-87db-dc4c10157ced",
        "authorId" : "e4533609-2350-4b21-918c-0b6dc22d8bdd",
        "body" : "It is somewhat, I think squeezing is most useful in slicing scenarios but perhaps someone might find that a direct conversion is what they really wanted. Will add it too.",
        "createdAt" : "2018-03-14T01:34:43Z",
        "updatedAt" : "2018-03-14T19:49:39Z",
        "lastEditedBy" : "e4533609-2350-4b21-918c-0b6dc22d8bdd",
        "tags" : [
        ]
      },
      {
        "id" : "2417ba81-4011-4010-b487-9cb9f4dd4161",
        "parentId" : "d8fcfd46-0d4c-49c1-87db-dc4c10157ced",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I don't think `DataFrame.to_series` exists?",
        "createdAt" : "2018-03-17T10:37:32Z",
        "updatedAt" : "2018-03-17T10:37:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1c43dba7-b368-4daf-b8d3-4e537416dbe5",
        "parentId" : "d8fcfd46-0d4c-49c1-87db-dc4c10157ced",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "hehe, that's a good reason to not add it... ;) not sure what I was thinking about, I think I got confused with `Index.to_series`, sorry",
        "createdAt" : "2018-03-17T11:01:00Z",
        "updatedAt" : "2018-03-17T11:01:00Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "d512d93ddb46cf6bc944aa97b892dc6e7faf030c",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +727,731 @@        --------\n        Series.iloc : Integer-location based indexing for selecting scalars\n        DataFrame.iloc : Integer-location based indexing for selecting Series\n        Series.to_frame : Inverse of DataFrame.squeeze for a\n            single-column DataFrame."
  },
  {
    "id" : "f9cf940b-9946-4d89-aa06-59b7376ed098",
    "prId" : 20269,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20269#pullrequestreview-103670069",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a28d57b-80af-4e15-bc6a-0e9368dc9c0e",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I feel like this example using `df` covers what it's shown first with the primes. I'd leave just this one, personally I find it really good, and enough to not have to list the previous.",
        "createdAt" : "2018-03-13T23:25:45Z",
        "updatedAt" : "2018-03-14T19:49:39Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "645f998c-a8d2-437d-ae5c-18872adfabb6",
        "parentId" : "7a28d57b-80af-4e15-bc6a-0e9368dc9c0e",
        "authorId" : "e4533609-2350-4b21-918c-0b6dc22d8bdd",
        "body" : "I wanted to have examples with both Series and DataFrames because both classes share this docstring, so it would be a bit weird to read the docs from `Series.squeeze` and find examples only of `DataFrame.squeeze`. But I think I could \"chain\" those examples, since in the middle of the `df` example I may squeeze some `Series` as well.\r\n\r\nI'll try to merge both, because the Series example is more concrete and related do slicing (the most likely use case IMO), but the second covers both classes.",
        "createdAt" : "2018-03-14T01:44:29Z",
        "updatedAt" : "2018-03-14T19:49:39Z",
        "lastEditedBy" : "e4533609-2350-4b21-918c-0b6dc22d8bdd",
        "tags" : [
        ]
      }
    ],
    "commit" : "d512d93ddb46cf6bc944aa97b892dc6e7faf030c",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +801,805 @@\n        >>> df_0a.squeeze()\n        1\n        \"\"\"\n        axis = (self._AXIS_NAMES if axis is None else"
  },
  {
    "id" : "2b9ffc43-4678-44a1-9882-cb8f463f544d",
    "prId" : 20270,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20270#pullrequestreview-384419166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5399ab65-c1c6-4ba4-bfa3-a348dc01077e",
        "parentId" : null,
        "authorId" : "7de5c47f-8231-483f-b0e2-8de1dddf2e23",
        "body" : "As this method is referenced here, I expected it to be available just like any of the other ones, but I have combed the source code and I am unable to find the place where this method is used. Was it added because it was planned to add future support for CubicSpline (with a wrapper such as Akima's)?",
        "createdAt" : "2020-03-31T05:51:35Z",
        "updatedAt" : "2020-03-31T05:51:36Z",
        "lastEditedBy" : "7de5c47f-8231-483f-b0e2-8de1dddf2e23",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f00e93f25b477e6005acdf29c46b0d62bace19b",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +6160,6164 @@        scipy.interpolate.PchipInterpolator : PCHIP 1-d monotonic cubic\n            interpolation.\n        scipy.interpolate.CubicSpline : Cubic spline data interpolator.\n\n        Notes"
  },
  {
    "id" : "07fc914f-0d75-44fe-8ce3-1d637b49c3e3",
    "prId" : 20289,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20289#pullrequestreview-106742958",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31cac800-5e10-4f3a-b7d5-31a46a8d4d8f",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Ideally, for `DataFrame.clip_lower` we would like to have in `See Also`:\r\n- `Series.clip_lower`\r\n- `DataFrame.clip`\r\n- `DataFrame.clip_upper`\r\n\r\nSo, the same in `Series` and nothing else from `Series`. And the similar from the same class (`DataFrame`). As this is being reused by both `Series` and `DataFrame`, I'd probably list all `clip`, `clip_lower` and `clip_upper`, but I'm not sure. @jreback ?",
        "createdAt" : "2018-03-13T17:00:02Z",
        "updatedAt" : "2018-07-08T14:39:50Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "ef9a4ef3-e0b6-4a85-876d-bb710959a623",
        "parentId" : "31cac800-5e10-4f3a-b7d5-31a46a8d4d8f",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Only caveat here is that the user is working on a doc that is shared by `Series` and `DataFrame`. Mentioned earlier that without further updates (i.e. implementing substitution) that the `clip_lower` reference would be self-referential half of the time. \r\n\r\nI advised just removing it to not get hung up on it for now, the other option would be to explicitly list both `DataFrame.clip_lower` and `Series.clip_lower` and live with the fact that one will be self referencing. No strong preference on my end.",
        "createdAt" : "2018-03-13T17:11:24Z",
        "updatedAt" : "2018-07-08T14:39:50Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "edc03183-9ff9-4381-b79c-fa21d0da0e79",
        "parentId" : "31cac800-5e10-4f3a-b7d5-31a46a8d4d8f",
        "authorId" : "ffe197f0-b629-411e-972a-d37ea5611c69",
        "body" : "Sorry, I was waiting for a little clarification, since I'm not sure how to proceed. I can go either way, but I haven't seen a conclusive definition. Was a decision made on how to proceed with these?",
        "createdAt" : "2018-03-25T20:43:14Z",
        "updatedAt" : "2018-07-08T14:39:50Z",
        "lastEditedBy" : "ffe197f0-b629-411e-972a-d37ea5611c69",
        "tags" : [
        ]
      },
      {
        "id" : "a172b833-a239-4048-85ee-75cfa8caaeb6",
        "parentId" : "31cac800-5e10-4f3a-b7d5-31a46a8d4d8f",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "If I'm not wrong, in another ticket the final implementation just listed everything. As @WillAyd says in some cases the same method being documented will be self-referenced, but it's not a big issue.",
        "createdAt" : "2018-03-25T20:46:58Z",
        "updatedAt" : "2018-07-08T14:39:50Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e48d49b4451b094b7fecfad29622d883772d6510",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +6607,6611 @@        Series.clip : General purpose method to trim `Series` values to given\n            threshold(s)\n        Series.clip_upper : Trim `Series` values above given threshold(s)\n\n        Returns"
  },
  {
    "id" : "ff91a7a7-502e-47a0-af9c-6d485b820957",
    "prId" : 20310,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20310#pullrequestreview-103166367",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9233806-db40-4cd6-9364-1026ac5fb6a0",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Show an example with `axis='columns'`. Can use the same DataFrame, even though it's a silly example for axis=1.",
        "createdAt" : "2018-03-12T18:31:14Z",
        "updatedAt" : "2018-03-12T20:18:24Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0dcac29b07bb377ccae463692163fb3385860b1",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +7547,7551 @@        Series.shift : Shift the index by some number of periods.\n        DataFrame.shift : Shift the index by some number of periods.\n\n        Examples\n        --------"
  },
  {
    "id" : "298ffc1d-bab4-48cb-a483-bf36eb180090",
    "prId" : 20313,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20313#pullrequestreview-103491019",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5adf3dd1-5472-418f-ac55-e7b6491ba864",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "`Panel` is deprecated, we may want to use `Series or DataFrame`, or something generic.\r\n\r\nI'd try to find uses cases on the internet for this method, and add in the extended summary when this method can be useful, if possible.",
        "createdAt" : "2018-03-12T23:08:18Z",
        "updatedAt" : "2018-03-13T17:50:16Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "9a738f4f-2e6b-4e03-b9ad-d3a69824f060",
        "parentId" : "5adf3dd1-5472-418f-ac55-e7b6491ba864",
        "authorId" : "1dd1c626-8d48-446c-b309-8f9c3caaf50d",
        "body" : "Thanks! I used Series as it is a Series module in this case.",
        "createdAt" : "2018-03-13T08:52:48Z",
        "updatedAt" : "2018-03-13T17:50:16Z",
        "lastEditedBy" : "1dd1c626-8d48-446c-b309-8f9c3caaf50d",
        "tags" : [
        ]
      },
      {
        "id" : "a5212c61-39d1-48bb-9739-90a67e5de392",
        "parentId" : "5adf3dd1-5472-418f-ac55-e7b6491ba864",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "For this and https://github.com/pandas-dev/pandas/pull/20315, these apply to both Series and DataFrame (and Panel, but we don't care about that). So perhaps\r\n\r\n    Prefix row labels with a string `prefix`.\r\n\r\nI want to avoid `items`, as (to me) I think `dict.items` so key-value pairs. But we're just touching the row labels here.\r\n\r\nThat summary is strange since we use Prefix as a verb and nound. Maybe \"Prepend\"  would be better?",
        "createdAt" : "2018-03-13T11:48:02Z",
        "updatedAt" : "2018-03-13T17:50:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "47296f9d-d6cd-4516-90e4-0967be4dc809",
        "parentId" : "5adf3dd1-5472-418f-ac55-e7b6491ba864",
        "authorId" : "1dd1c626-8d48-446c-b309-8f9c3caaf50d",
        "body" : "I see, thank you, my doubt is that on DataFrames add_prefix() adds a prefix on columns names not on rows, for example: `df = pd.DataFrame({'A':[1,2,3,4], 'B':[3,4,5,6]}), df.add_suffix('_item')`. For this motivations I decided to leave on Series. \r\n\r\nPerhaps I could updated the docstring for pandas.DataFrame.add_prefix with the relative example to avoid confusion and let this as it is. \r\n\r\nLet me know what sound better. :)",
        "createdAt" : "2018-03-13T14:39:15Z",
        "updatedAt" : "2018-03-13T17:50:16Z",
        "lastEditedBy" : "1dd1c626-8d48-446c-b309-8f9c3caaf50d",
        "tags" : [
        ]
      },
      {
        "id" : "824475fd-6e19-41ab-ae8e-e9616b6dfc19",
        "parentId" : "5adf3dd1-5472-418f-ac55-e7b6491ba864",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Ahh, good catch! I would say splitting the docstring is more complexity that warranted. How about somehting like\r\n\r\n```\r\n\"\"\"\r\nPrefix labels with string `prefix`.\r\n\r\nFor Series, the row labels are prefixed. For DataFrame, the column labels are prefixed\r\n\r\n...\r\n\"\"\"\r\n```",
        "createdAt" : "2018-03-13T15:05:19Z",
        "updatedAt" : "2018-03-13T17:50:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "42206992-6aef-4a3a-8b58-7b91853ef449",
        "parentId" : "5adf3dd1-5472-418f-ac55-e7b6491ba864",
        "authorId" : "1dd1c626-8d48-446c-b309-8f9c3caaf50d",
        "body" : "Yes, I do agree, thanks!\r\n\r\nI didn't know about the issue of splitting docstring, so in this case is better have the same for both pandas.Series.add_prefix and pandas.DataFrame.add_prefix?",
        "createdAt" : "2018-03-13T15:43:38Z",
        "updatedAt" : "2018-03-13T17:50:16Z",
        "lastEditedBy" : "1dd1c626-8d48-446c-b309-8f9c3caaf50d",
        "tags" : [
        ]
      },
      {
        "id" : "8e0b95ea-cfda-4fc4-8070-256b27d255ac",
        "parentId" : "5adf3dd1-5472-418f-ac55-e7b6491ba864",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yes, the docstring you've been editing in `core/generic.py` is used by both `Series.add_prefix` and `DataFrame.add_prefix`.",
        "createdAt" : "2018-03-13T15:47:12Z",
        "updatedAt" : "2018-03-13T17:50:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d599adf81cc6fea7a8068e9edfe89abefa60c0b",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +2968,2972 @@        For Series, the row labels are prefixed.\n        For DataFrame, the column labels are prefixed.\n\n        Parameters\n        ----------"
  },
  {
    "id" : "1bc8c851-6a9f-4e67-a7b0-ddc7dded6aea",
    "prId" : 20313,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20313#pullrequestreview-103394536",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "413751dd-75cc-4baa-889e-f3ce279f3305",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Add a blank line and then an example with `DataFrame`.",
        "createdAt" : "2018-03-13T11:49:54Z",
        "updatedAt" : "2018-03-13T17:50:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d599adf81cc6fea7a8068e9edfe89abefa60c0b",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +2998,3002 @@        item_2    3\n        item_3    4\n        dtype: int64\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3, 4],  'B': [3, 4, 5, 6]})"
  },
  {
    "id" : "4780972e-904d-4325-957f-5abe86fc2cb9",
    "prId" : 20336,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20336#pullrequestreview-104138211",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43fbc094-3113-4a8d-a846-ef0f2ec92c29",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think it's not technically right that default is `0`, I think it's `None`, which I guess it's equivalent to `0`.\r\n\r\nCan you double check, and and change it if that's right. Something like `{0 or 'index', 1 or 'columns'} or None, default None` would probably be the most standard way if that's right. And a description about the axis would be useful (pointing out that `None` means `index` if that's the case).\r\n\r\nIf you check recent PRs there are some with a an axis parameter that you can check for reference.",
        "createdAt" : "2018-03-14T11:39:20Z",
        "updatedAt" : "2018-03-17T16:19:04Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "1e122eb5-8bf8-4c25-9416-b05f0ecfb688",
        "parentId" : "43fbc094-3113-4a8d-a846-ef0f2ec92c29",
        "authorId" : "2f1121a3-6a70-44ba-8314-5d592274cbac",
        "body" : "This is right, `cum_func` (i.e. function corresponding to all cumulative methods) is [defined](https://github.com/pandas-dev/pandas/pull/20336/files#diff-03b380f521c43cf003207b0711bac67fR8914) with `axis=None` as default argument.\r\n\r\nI also found [this](https://github.com/pandas-dev/pandas/blob/master/doc/source/contributing_docstring.rst#section-3-parameters) regarding the correct format of axis parameter.",
        "createdAt" : "2018-03-15T02:49:23Z",
        "updatedAt" : "2018-03-17T16:19:04Z",
        "lastEditedBy" : "2f1121a3-6a70-44ba-8314-5d592274cbac",
        "tags" : [
        ]
      },
      {
        "id" : "3d2f03ef-cfe8-48bf-84d6-1e00288e5cfd",
        "parentId" : "43fbc094-3113-4a8d-a846-ef0f2ec92c29",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Although it is technically None, in practice it is 0 for Series/DataFrame, so I would keep the documentation like this. \r\nThe technical reason is because for Panel it is 1, but Panel is deprecated and I think we should not care about them in the documentation.\r\n",
        "createdAt" : "2018-03-15T10:06:37Z",
        "updatedAt" : "2018-03-17T16:19:04Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1147a0dac297776632341fc80f0d364ad62b6699",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +8771,8775 @@Parameters\n----------\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The index or the name of the axis. 0 is equivalent to None or 'index'.\nskipna : boolean, default True"
  },
  {
    "id" : "4ac76732-27dc-471d-9b39-df0f37798176",
    "prId" : 20336,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20336#pullrequestreview-104138211",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d74d6210-8141-4a6b-8417-c551935b223f",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "It's all right like this, but may be it'd be simpler to leave this as it was, and have the examples in `_cnum_doc`, instead of in a separate variable. As they're the same for all methods, there is not much value in having them separate.\r\n\r\nAnother option would be to have a different string for each method example, in that case, something similar to this would make more sense.",
        "createdAt" : "2018-03-14T11:55:53Z",
        "updatedAt" : "2018-03-17T16:19:04Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "a508a390-704d-4cc5-ab12-4b637afe5c8f",
        "parentId" : "d74d6210-8141-4a6b-8417-c551935b223f",
        "authorId" : "2f1121a3-6a70-44ba-8314-5d592274cbac",
        "body" : "I think having separate string examples for each method makes everything clearer, especially when showing examples for use of `skipna` & `axis`. It also helps with keeping the docstring concise. For instance, now we can have a `Series` example for each method.\r\n\r\nThe disadvantage is user will only see examples for the method they’re checking, but I think this is ok because we are referencing all methods in the ‘See also’ section, which comes before 'Examples'.\r\n\r\nIn these PRs #20216 and #20217 examples for `DataFrame.all` and `DataFrame.any` are separate even though they are similar methods.",
        "createdAt" : "2018-03-15T02:31:07Z",
        "updatedAt" : "2018-03-17T16:19:04Z",
        "lastEditedBy" : "2f1121a3-6a70-44ba-8314-5d592274cbac",
        "tags" : [
        ]
      },
      {
        "id" : "4d463144-6375-4635-a4f5-3d0c1b1c36d4",
        "parentId" : "d74d6210-8141-4a6b-8417-c551935b223f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, I am also in favor of splitting up the examples.",
        "createdAt" : "2018-03-15T10:19:13Z",
        "updatedAt" : "2018-03-17T16:19:04Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1147a0dac297776632341fc80f0d364ad62b6699",
    "line" : 355,
    "diffHunk" : "@@ -1,1 +9254,9258 @@                  axis_descr=axis_descr, accum_func_name=accum_func_name,\n                  examples=examples)\n    @Appender(_cnum_doc)\n    def cum_func(self, axis=None, skipna=True, *args, **kwargs):\n        skipna = nv.validate_cum_func_with_skipna(skipna, args, kwargs, name)"
  },
  {
    "id" : "e5ca2ac6-8acf-4d57-a58a-7a41896e0213",
    "prId" : 20404,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20404#pullrequestreview-104901273",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7479c774-839a-455c-b306-cee44ac3f810",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no need to create another function here, this is purely user facing (IOW don't create a _get_ftype_counts). keep the doc-string though.",
        "createdAt" : "2018-03-19T10:16:37Z",
        "updatedAt" : "2018-03-27T02:35:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "26268d9156e26d4003cb8d6542d16da8be09b6b1",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +4710,4714 @@        dtype: int64\n        \"\"\"\n        warnings.warn(\"get_ftype_counts is deprecated and will \"\n                      \"be removed in a future version\",\n                      FutureWarning, stacklevel=2)"
  },
  {
    "id" : "8f6ee594-2246-40b9-835e-0288ee69671b",
    "prId" : 20472,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20472#pullrequestreview-171342672",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8728c5b-bb5e-4717-a40e-4636a937b1c1",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "worth specifying tseries.offsets?  ",
        "createdAt" : "2018-11-03T21:52:33Z",
        "updatedAt" : "2018-11-04T05:14:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d9c3c00089bb40236600583d4143392385efd04",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +8374,8378 @@            Number of periods to shift. Can be positive or negative.\n        freq : DateOffset, tseries.offsets, timedelta, or str, optional\n            Offset to use from the tseries module or time rule (e.g. 'EOM').\n            If `freq` is specified then the index values are shifted but the\n            data is not realigned. That is, use `freq` if you would like to"
  },
  {
    "id" : "e5127a68-2195-4059-acf3-2ddb9435ec4c",
    "prId" : 20583,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20583#pullrequestreview-116549858",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ed71502-d642-4c2c-9fbe-e39e05f078a5",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "capital If (below as well)",
        "createdAt" : "2018-05-01T12:11:25Z",
        "updatedAt" : "2018-05-01T12:26:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2f68550f-f722-417b-8fd1-35c329b93156",
        "parentId" : "0ed71502-d642-4c2c-9fbe-e39e05f078a5",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Also, can you start this explanation with noting this keyword is only when grouping by categorical values?",
        "createdAt" : "2018-05-01T12:13:42Z",
        "updatedAt" : "2018-05-01T12:26:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdf7525812ca670f9406ab8df333030d36d30947",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +6634,6638 @@            otherwise return a consistent type\n        observed : boolean, default None\n            if True: only show observed values for categorical groupers.\n            if False: show all values for categorical groupers.\n            if None: if any categorical groupers, show a FutureWarning,"
  },
  {
    "id" : "a826ec81-c5d3-4a3d-88c7-edd34ea3c152",
    "prId" : 20583,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20583#pullrequestreview-116549858",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f08c7df5-ea54-4c40-8329-2d89650d1fe9",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "no identation for rst formatting",
        "createdAt" : "2018-05-01T12:11:27Z",
        "updatedAt" : "2018-05-01T12:26:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdf7525812ca670f9406ab8df333030d36d30947",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +6637,6641 @@            if False: show all values for categorical groupers.\n            if None: if any categorical groupers, show a FutureWarning,\n                default to False.\n\n            .. versionadded:: 0.23.0"
  },
  {
    "id" : "f982b54a-3ba2-44e0-b9e0-b4d1a3bd82a1",
    "prId" : 20725,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20725#pullrequestreview-114178220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3db5fa4f-5bf5-443e-811d-da955afd1ccf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "put this in a Raises section instead",
        "createdAt" : "2018-04-21T17:19:39Z",
        "updatedAt" : "2018-05-06T12:06:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "18025cf978da507fe94f2aefdf9f3a151981ce9d",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +6761,6765 @@        \"\"\"\n        Select values at particular time of day (e.g. 9:30AM).\n\n        Raises\n        ------"
  },
  {
    "id" : "77010821-eb33-4886-94fd-97e9fa27af7c",
    "prId" : 20725,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20725#pullrequestreview-117816423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66265609-764b-48c3-aaf2-c889b9c0e3f8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some tests that assert the TypeError? (was this not tested before)?",
        "createdAt" : "2018-05-04T10:37:50Z",
        "updatedAt" : "2018-05-06T12:06:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "eef8463d-57c5-4639-836d-a6a35ad0e744",
        "parentId" : "66265609-764b-48c3-aaf2-c889b9c0e3f8",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "They were not there beforehand, so I've added.\r\n\r\nA question: There exists test for Series.first/last, but not DataFrame.first/last. Should i copy the relevant tests from ``series/test_timeseries.py`` to ``frame/test_time_series.py``, or is that not relevant?",
        "createdAt" : "2018-05-05T14:43:42Z",
        "updatedAt" : "2018-05-06T12:06:58Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "a07300eb-a101-4927-9c3f-5b285a3dfed6",
        "parentId" : "66265609-764b-48c3-aaf2-c889b9c0e3f8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sure that would be great (do a search for them as well, it maybe that they are elsewhere, but they should be in ``test_timeseries``",
        "createdAt" : "2018-05-05T14:46:25Z",
        "updatedAt" : "2018-05-06T12:06:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "18025cf978da507fe94f2aefdf9f3a151981ce9d",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +7156,7160 @@        from pandas.tseries.frequencies import to_offset\n        if not isinstance(self.index, DatetimeIndex):\n            raise TypeError(\"'first' only supports a DatetimeIndex index\")\n\n        if len(self.index) == 0:"
  },
  {
    "id" : "1fbff1b7-f7d9-45ef-a57b-d9d98f04f211",
    "prId" : 20873,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20873#pullrequestreview-116579115",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f77555c-c7d6-405b-893b-272d00e0da65",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "@TomAugspurger I know you are adding a few things for the RC so don't need to change anything here, but do we typically document things in the API like this? Wondering if we shouldn't make all of the documented features actual keyword arguments in the call signature rather than tucking them away in kwargs.\r\n\r\nFWIW if we have errors here we'd probably want to add `encoding` as well",
        "createdAt" : "2018-05-01T14:14:58Z",
        "updatedAt" : "2018-05-01T14:14:58Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "6bc866dd-3ae8-439b-8670-b04b52cff3f2",
        "parentId" : "4f77555c-c7d6-405b-893b-272d00e0da65",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The signature should be changed from kwargs to reflect the actual signature. I thought we had an issue for it, but didn't find one. Opened https://github.com/pandas-dev/pandas/issues/20903",
        "createdAt" : "2018-05-01T14:22:04Z",
        "updatedAt" : "2018-05-01T14:22:04Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "59344127-a342-4e65-9c24-9e5a5fb9a7b4",
        "parentId" : "4f77555c-c7d6-405b-893b-272d00e0da65",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Thanks! I'll take a stab at that one later",
        "createdAt" : "2018-05-01T14:23:16Z",
        "updatedAt" : "2018-05-01T14:23:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a13234dc0882a41789ef5a4d9cde571727524f3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1947,1951 @@        dropna : bool, default False\n            If true, ALL nan rows will not be written to store.\n        errors : str, default 'strict'\n            Specifies how encoding and decoding errors are to be handled.\n            See the errors argument for :func:`open` for a full list"
  },
  {
    "id" : "30c70c4e-5aab-4d97-8e6c-4bad208c1c2a",
    "prId" : 21034,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21034#pullrequestreview-121027644",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70418cde-611d-4558-9131-b3f7cedbe9b6",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can you add additional examples for\r\n\r\n- Series w/ scalar where\r\n- Series w/ array-like where\r\n- DataFrame w/ scalar where",
        "createdAt" : "2018-05-17T13:01:58Z",
        "updatedAt" : "2018-11-03T05:18:24Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "65c1a2b63e0ec9096c9e5a0938b47f891fa718e3",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +6564,6568 @@        2.0\n\n        Take all columns into consideration\n\n        >>> df = pd.DataFrame({'a': [10, 20, 30, 40, 50],"
  },
  {
    "id" : "506159c4-78a4-461e-bdce-66251d6a5d9a",
    "prId" : 21034,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21034#pullrequestreview-173878783",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c58c0a5-f44e-4ddb-a377-aa45c5bbeaa8",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Something like ``` `NaN`s  ``` fails in sphinx, we can only use `` ` `` on things that are quoted completely, without trailing 's' or so",
        "createdAt" : "2018-11-12T12:34:02Z",
        "updatedAt" : "2018-11-12T13:03:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0edae86a-97d1-4c27-b4bc-cc1ea6d51929",
        "parentId" : "2c58c0a5-f44e-4ddb-a377-aa45c5bbeaa8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Further, I am not fully sure we should quote NaN. It is not a pandas function name or keyword argument or so. I would rather say it is \"code\"-like, but then we should actually use the proper name like `np.nan`. Therefore, maybe a compromise to simply not quote?",
        "createdAt" : "2018-11-12T12:35:02Z",
        "updatedAt" : "2018-11-12T13:03:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "65c1a2b63e0ec9096c9e5a0938b47f891fa718e3",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +6496,6500 @@    def asof(self, where, subset=None):\n        \"\"\"\n        Return the last row(s) without any `NaN`s before `where`.\n\n        The last row (for each element in `where`, if list) without any"
  },
  {
    "id" : "00821709-ab07-435b-9c90-5988c67f6ed1",
    "prId" : 21034,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21034#pullrequestreview-173878783",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f58242f4-5dfe-4a48-8e9a-fbc3a7c9ffc8",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think in general we don't quote on the parameter type line?",
        "createdAt" : "2018-11-12T12:35:29Z",
        "updatedAt" : "2018-11-12T13:03:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "65c1a2b63e0ec9096c9e5a0938b47f891fa718e3",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +6512,6516 @@        where : date or array-like of dates\n            Date(s) before which the last row(s) are returned.\n        subset : str or array-like of str, default `None`\n            For DataFrame, if not `None`, only use these columns to\n            check for `NaN`s."
  },
  {
    "id" : "c04b3b1d-68db-4e85-a9e3-93bc6544ec23",
    "prId" : 21224,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21224#pullrequestreview-140311213",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "144127a5-c74d-4f7a-b851-ccfa4f978867",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think you need to add this appender in frame.py as well",
        "createdAt" : "2018-07-25T12:53:27Z",
        "updatedAt" : "2018-07-26T21:03:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "aaa03d3a-4d3e-4f5a-8794-225d9a6b6556",
        "parentId" : "144127a5-c74d-4f7a-b851-ccfa4f978867",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Yes, I'll do that",
        "createdAt" : "2018-07-25T13:30:27Z",
        "updatedAt" : "2018-07-26T21:03:35Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "39ced290b257435e97c74dc95aff2391fdf7fd02",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +9194,9198 @@        cls.ewm = ewm\n\n    @Appender(_shared_docs['transform'] % _shared_doc_kwargs)\n    def transform(self, func, *args, **kwargs):\n        result = self.agg(func, *args, **kwargs)"
  },
  {
    "id" : "37841ea7-12e8-4ce4-a4c1-a0958014f922",
    "prId" : 21406,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21406#pullrequestreview-163619317",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3861a63b-ecbc-4be3-8217-aa74562787d9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i think we need a blank line here before the versionchanged. I am not sure how to show the previously defaulted value (or if we should), @datapythonista ",
        "createdAt" : "2018-10-11T01:21:53Z",
        "updatedAt" : "2018-10-19T05:43:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "23ce5c6cf5fd649a19692a9bda0fbc844534127e",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +9589,9593 @@            this method is called ('\\n' for linux, '\\r\\n' for Windows, i.e.).\n\n            .. versionchanged:: 0.24.0\n        chunksize : int or None\n            Rows to write at a time."
  },
  {
    "id" : "05a64693-ce97-48ae-b770-c0e2cdcd1562",
    "prId" : 21614,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21614#pullrequestreview-134876345",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "430beb1c-8f8d-4225-9292-7fa5d8403c9f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm this is duplicated here",
        "createdAt" : "2018-07-06T02:36:34Z",
        "updatedAt" : "2018-07-06T03:12:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ef5882b1-21f5-4341-925a-8a7c8b44f236",
        "parentId" : "430beb1c-8f8d-4225-9292-7fa5d8403c9f",
        "authorId" : "db2002f5-d426-4f7c-9815-4de0d8b60e7d",
        "body" : "This is based on comment from @jorisvandenbossche \r\n`Can you also put the deprecated part below the text?` - waiting for his reply if the edit was as expected",
        "createdAt" : "2018-07-06T03:06:26Z",
        "updatedAt" : "2018-07-06T03:12:46Z",
        "lastEditedBy" : "db2002f5-d426-4f7c-9815-4de0d8b60e7d",
        "tags" : [
        ]
      },
      {
        "id" : "76c4e608-1602-42bd-870e-239294fbe35d",
        "parentId" : "430beb1c-8f8d-4225-9292-7fa5d8403c9f",
        "authorId" : "db2002f5-d426-4f7c-9815-4de0d8b60e7d",
        "body" : "My bad - misinterpreted his review and duplicated in hurry - fixing now",
        "createdAt" : "2018-07-06T03:09:22Z",
        "updatedAt" : "2018-07-06T03:12:46Z",
        "lastEditedBy" : "db2002f5-d426-4f7c-9815-4de0d8b60e7d",
        "tags" : [
        ]
      },
      {
        "id" : "ff952869-543d-4c3e-bfab-f1e48cff7ff4",
        "parentId" : "430beb1c-8f8d-4225-9292-7fa5d8403c9f",
        "authorId" : "db2002f5-d426-4f7c-9815-4de0d8b60e7d",
        "body" : "Done thanks",
        "createdAt" : "2018-07-06T03:13:21Z",
        "updatedAt" : "2018-07-06T03:13:22Z",
        "lastEditedBy" : "db2002f5-d426-4f7c-9815-4de0d8b60e7d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cede49640aca5b70f02399dd3dd12c742ffd8066",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +8888,8892 @@            ``numpy.ndarray`` method ``ptp``.\n\n            .. deprecated:: 0.24.0\n                Use numpy.ptp instead\n            \"\"\","
  },
  {
    "id" : "2bc66d7e-8d1c-42f9-8458-8901ff3bf1fe",
    "prId" : 21871,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21871#pullrequestreview-138665858",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d068653-73dc-48f5-94bf-88a8ed4b1efd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "anyone think we should add ``inplace`` to make this consistent, with other axis ops (e.g. reset_index / set_index)?\r\n\r\ncc @TomAugspurger ",
        "createdAt" : "2018-07-16T10:44:22Z",
        "updatedAt" : "2018-07-19T13:18:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0a0a00af-ac8f-410b-b89d-9988d4edb009",
        "parentId" : "0d068653-73dc-48f5-94bf-88a8ed4b1efd",
        "authorId" : "7147181d-ad5e-46c1-8a5c-648f622af606",
        "body" : "makes sense to me to expose `inplace`!",
        "createdAt" : "2018-07-16T13:14:09Z",
        "updatedAt" : "2018-07-19T13:18:09Z",
        "lastEditedBy" : "7147181d-ad5e-46c1-8a5c-648f622af606",
        "tags" : [
        ]
      },
      {
        "id" : "f8f90ed0-8779-4090-8cb3-1e9fb5acfe6d",
        "parentId" : "0d068653-73dc-48f5-94bf-88a8ed4b1efd",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'd say leave it out for now, unless someone asks for it.",
        "createdAt" : "2018-07-19T11:54:47Z",
        "updatedAt" : "2018-07-19T13:18:09Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c0bbe643-62ff-4bf6-af69-a99cc5076711",
        "parentId" : "0d068653-73dc-48f5-94bf-88a8ed4b1efd",
        "authorId" : "7147181d-ad5e-46c1-8a5c-648f622af606",
        "body" : "okay, will do!",
        "createdAt" : "2018-07-19T13:17:51Z",
        "updatedAt" : "2018-07-19T13:18:09Z",
        "lastEditedBy" : "7147181d-ad5e-46c1-8a5c-648f622af606",
        "tags" : [
        ]
      }
    ],
    "commit" : "6b8f22bbf3fe2a7569a596819d08c1b8b9c33365",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +717,721 @@        return self._constructor(new_values, *new_axes).__finalize__(self)\n\n    def droplevel(self, level, axis=0):\n        \"\"\"Return DataFrame with requested index / column level(s) removed.\n"
  },
  {
    "id" : "e4ce56dd-b58d-4a39-90c7-857d1e5e52f4",
    "prId" : 21934,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21934#pullrequestreview-137637947",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1753a9d-060f-411d-abd8-952f48d9da38",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would do this in ``.where`` itself",
        "createdAt" : "2018-07-16T23:54:07Z",
        "updatedAt" : "2018-07-17T16:04:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b6cb8403-9c0f-4acd-8b42-fef0f04edebe",
        "parentId" : "f1753a9d-060f-411d-abd8-952f48d9da38",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Do what exactly in `.where` ?",
        "createdAt" : "2018-07-16T23:56:25Z",
        "updatedAt" : "2018-07-17T16:04:56Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "9822b486-3109-40de-94f6-48336db2d4f4",
        "parentId" : "f1753a9d-060f-411d-abd8-952f48d9da38",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh i c we are using ``~`` here, ok then.",
        "createdAt" : "2018-07-16T23:57:58Z",
        "updatedAt" : "2018-07-17T16:04:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3b3755598bbcb5b3c36b125f8cfb5886f94a03b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +7942,7946 @@        cond = com._apply_if_callable(cond, self)\n\n        # see gh-21891\n        if not hasattr(cond, \"__invert__\"):\n            cond = np.array(cond)"
  },
  {
    "id" : "ba3a977d-f50f-42cb-bc97-cba01e2c91bb",
    "prId" : 21934,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21934#pullrequestreview-137936616",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf6ccf42-2cb2-4a06-9268-cb54f7bddd72",
        "parentId" : null,
        "authorId" : "9d5f585b-9dfd-4f68-a703-da7deaaa65fd",
        "body" : "`cond ` could be a `callable `, this patch seems wouldn't work.",
        "createdAt" : "2018-07-17T17:09:43Z",
        "updatedAt" : "2018-07-17T17:11:26Z",
        "lastEditedBy" : "9d5f585b-9dfd-4f68-a703-da7deaaa65fd",
        "tags" : [
        ]
      },
      {
        "id" : "737592a5-d6ed-4b96-b214-bee9fc4efcde",
        "parentId" : "bf6ccf42-2cb2-4a06-9268-cb54f7bddd72",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yes, it would.  Because `com._apply_if_callable` (right above) returns an `ndarray`.  Passing in `callable` for `cond` is covered (and passing) in the tests.",
        "createdAt" : "2018-07-17T17:29:13Z",
        "updatedAt" : "2018-07-17T17:29:42Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3b3755598bbcb5b3c36b125f8cfb5886f94a03b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +7942,7946 @@        cond = com._apply_if_callable(cond, self)\n\n        # see gh-21891\n        if not hasattr(cond, \"__invert__\"):\n            cond = np.array(cond)"
  },
  {
    "id" : "33d54f13-577d-4d66-b445-52043a9976b4",
    "prId" : 22641,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22641#pullrequestreview-156057117",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ee879da-1d4c-452d-8595-beda96684bd3",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "If you prefer, numpydoc also accepts having both in one line:\r\n```\r\n*args, **kwargs\r\n    Arguments to pass to `func`.\r\n```",
        "createdAt" : "2018-09-17T09:24:51Z",
        "updatedAt" : "2018-09-17T18:40:13Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "f55e1777-3639-475d-abd4-7a17c83c2a11",
        "parentId" : "2ee879da-1d4c-452d-8595-beda96684bd3",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Alright, I did that, though my own preference would be to not use star arguments and use ``args=None, kwargs=None`` instead to better have a distinction what gets passed to ``func`` and what doesn't get passed on. But that's for a whole another discussion, and may be too late now :-)\r\n",
        "createdAt" : "2018-09-17T12:49:41Z",
        "updatedAt" : "2018-09-17T18:40:13Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "0f20cde2-73ac-45ba-8d55-4d5c72cf91d2",
        "parentId" : "2ee879da-1d4c-452d-8595-beda96684bd3",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Just found out that ``scripts/validate_docstrings.py`` doesnt accept putting those on the same line, so I've reverted to the previous style.",
        "createdAt" : "2018-09-17T18:23:37Z",
        "updatedAt" : "2018-09-17T19:22:47Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbe270c5b29da5f7ba392d213795b4320466a54f",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +4599,4603 @@        Positional arguments to pass to `func`.\n    **kwargs\n        Keyword arguments to pass to `func`.\n\n    Returns"
  },
  {
    "id" : "1b75819d-33b3-49e1-b347-46edb40b1cd1",
    "prId" : 22697,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22697#pullrequestreview-156548165",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5bdbcbda-de39-4335-b5b0-00929a0d601d",
        "parentId" : null,
        "authorId" : "2f1121a3-6a70-44ba-8314-5d592274cbac",
        "body" : "@jreback I also added `Index.shift` here.",
        "createdAt" : "2018-09-18T20:12:54Z",
        "updatedAt" : "2018-09-19T21:51:11Z",
        "lastEditedBy" : "2f1121a3-6a70-44ba-8314-5d592274cbac",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9bbfe8a57aa33e41a31b1413075b3ac7024daed",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +8293,8297 @@        Index.shift : Shift values of Index.\n        DatetimeIndex.shift : Shift values of DatetimeIndex.\n\n        Notes\n        -----"
  },
  {
    "id" : "0f85773b-6cf9-407d-ab84-a1408c2007d6",
    "prId" : 22775,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22775#pullrequestreview-157951605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c55873b-3a80-4244-afcb-fa0499456130",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you also add an explanation for the parameters?",
        "createdAt" : "2018-09-20T14:20:35Z",
        "updatedAt" : "2018-11-26T15:56:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "5d5d94dd-d680-4340-98ec-d1d941337aec",
        "parentId" : "2c55873b-3a80-4244-afcb-fa0499456130",
        "authorId" : "2f33c511-dce6-498d-b0fa-33f6b44b84bc",
        "body" : "Sure (copy-pasted the .reindex params)",
        "createdAt" : "2018-09-23T20:56:30Z",
        "updatedAt" : "2018-11-26T15:56:43Z",
        "lastEditedBy" : "2f33c511-dce6-498d-b0fa-33f6b44b84bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "7df1f792da8c724ef62ad51f8e8164ed92176029",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +3448,3452 @@            Its row and column indices are used to define the new indices\n            of this object.\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n            Method to use for filling holes in reindexed DataFrame.\n            Please note: this is only applicable to DataFrames/Series with a"
  },
  {
    "id" : "c9bb1c6a-d77f-4af7-aa75-ac905cec181f",
    "prId" : 22775,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22775#pullrequestreview-157951125",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b884409-6a9f-4f26-99fb-dc84dac85416",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you turn this into an actual example?",
        "createdAt" : "2018-09-20T14:25:31Z",
        "updatedAt" : "2018-11-26T15:56:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f7d7b1cd-286c-4dda-9d72-b4802df2aa24",
        "parentId" : "6b884409-6a9f-4f26-99fb-dc84dac85416",
        "authorId" : "2f33c511-dce6-498d-b0fa-33f6b44b84bc",
        "body" : "It seems like 'reindex_axis' will be deprecated in the future so I did not bother with it.\r\n```\r\nFutureWarning: '.reindex_axis' is deprecated and will be removed in a future version. Use '.reindex' instead.\r\n```",
        "createdAt" : "2018-09-23T20:40:35Z",
        "updatedAt" : "2018-11-26T15:56:43Z",
        "lastEditedBy" : "2f33c511-dce6-498d-b0fa-33f6b44b84bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "7df1f792da8c724ef62ad51f8e8164ed92176029",
    "line" : 281,
    "diffHunk" : "@@ -1,1 +4215,4219 @@        Examples\n        --------\n        >>> df.reindex_axis(['A', 'B', 'C'], axis=1)\n        \"\"\")\n"
  },
  {
    "id" : "33b414bc-31f7-4b8a-85a9-d1e11c9b63b5",
    "prId" : 22775,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22775#pullrequestreview-157951544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fbb6e321-ec35-40a9-b0ae-e7006981c56e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think this should start with a single summary line, like you did for `reindex_like`",
        "createdAt" : "2018-09-20T14:26:16Z",
        "updatedAt" : "2018-11-26T15:56:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b1b6a059-3d2a-4c64-ac6f-c1b514a4c56b",
        "parentId" : "fbb6e321-ec35-40a9-b0ae-e7006981c56e",
        "authorId" : "2f33c511-dce6-498d-b0fa-33f6b44b84bc",
        "body" : "It seems like 'reindex_axis' will be deprecated in the future so I did not bother with it.",
        "createdAt" : "2018-09-23T20:54:23Z",
        "updatedAt" : "2018-11-26T15:56:43Z",
        "lastEditedBy" : "2f33c511-dce6-498d-b0fa-33f6b44b84bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "7df1f792da8c724ef62ad51f8e8164ed92176029",
    "line" : 251,
    "diffHunk" : "@@ -1,1 +4162,4166 @@        return NotImplemented\n\n    _shared_docs['reindex_axis'] = (\"\"\"Conform input object to new index\n        with optional filling logic, placing NA/NaN in locations having\n        no value in the previous index. A new object is produced unless"
  },
  {
    "id" : "0dbd1d79-0e42-4614-ba7c-30a5e16104ae",
    "prId" : 22969,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22969#pullrequestreview-162710288",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bbfa743-9a1b-41c8-b998-5a66d0b2e75d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use our common nomenclature\r\n\r\n``axis : {0 or 'index', 1 or 'columns'}, default 0``\r\n",
        "createdAt" : "2018-10-07T22:26:00Z",
        "updatedAt" : "2018-11-19T21:15:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bc659ba7-f2df-48cb-a5d5-711aa09aecb3",
        "parentId" : "8bbfa743-9a1b-41c8-b998-5a66d0b2e75d",
        "authorId" : "a5cbb29e-4201-4880-a636-378b3ac68a0f",
        "body" : "Thanks for the information",
        "createdAt" : "2018-10-09T04:07:59Z",
        "updatedAt" : "2018-11-19T21:15:17Z",
        "lastEditedBy" : "a5cbb29e-4201-4880-a636-378b3ac68a0f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d944e83478903dca76745138ce3682f21456325",
    "line" : 203,
    "diffHunk" : "@@ -1,1 +1297,1301 @@            Name(s) to set.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to set the label. The value 0 or 'index' specifies index,\n            and the value 1 or 'columns' specifies columns.\n        inplace : bool, default False"
  },
  {
    "id" : "cd3e427c-e7f7-45d8-b59b-db78e13625f8",
    "prId" : 22969,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22969#pullrequestreview-163684651",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df296c10-4c4d-4332-9efb-ccd7e415a660",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "can you show what's the name of the axis before renaming it",
        "createdAt" : "2018-10-09T10:46:55Z",
        "updatedAt" : "2018-11-19T21:15:17Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "a3670749-8756-46a9-ab89-309c8ed177a1",
        "parentId" : "df296c10-4c4d-4332-9efb-ccd7e415a660",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Can you add this, it was originally requested by @jreback, and it makes sense to have. After this we can merge.",
        "createdAt" : "2018-10-11T07:32:08Z",
        "updatedAt" : "2018-11-19T21:15:17Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "2b6da63d-fe62-4679-911c-c45beb5bb57b",
        "parentId" : "df296c10-4c4d-4332-9efb-ccd7e415a660",
        "authorId" : "a5cbb29e-4201-4880-a636-378b3ac68a0f",
        "body" : "Doesn't line 1158 show the contents of `s` including the name of the axis which is not set at the time?",
        "createdAt" : "2018-10-11T07:37:52Z",
        "updatedAt" : "2018-11-19T21:15:17Z",
        "lastEditedBy" : "a5cbb29e-4201-4880-a636-378b3ac68a0f",
        "tags" : [
        ]
      },
      {
        "id" : "6b6f07a9-5d91-4583-9203-7666ee63cfe0",
        "parentId" : "df296c10-4c4d-4332-9efb-ccd7e415a660",
        "authorId" : "a5cbb29e-4201-4880-a636-378b3ac68a0f",
        "body" : "I think there is a bug in Git. If you go into `Files changed`, it shows you that line 1158 prints the value of `s`",
        "createdAt" : "2018-10-11T07:39:44Z",
        "updatedAt" : "2018-11-19T21:15:17Z",
        "lastEditedBy" : "a5cbb29e-4201-4880-a636-378b3ac68a0f",
        "tags" : [
        ]
      },
      {
        "id" : "177529eb-f425-408c-9aa3-f84cfb27e3fb",
        "parentId" : "df296c10-4c4d-4332-9efb-ccd7e415a660",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "@jreback ?",
        "createdAt" : "2018-10-11T07:41:22Z",
        "updatedAt" : "2018-11-19T21:15:17Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d944e83478903dca76745138ce3682f21456325",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +1179,1183 @@        2    monkey\n        dtype: object\n        >>> s.rename_axis(\"animal\")\n        animal\n        0    dog"
  },
  {
    "id" : "5f8dfb32-e407-42df-a933-e5657b1eb7da",
    "prId" : 23197,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23197#pullrequestreview-172470852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "900648f0-31a8-4442-8b4c-bde5d9273a69",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "In the following examples, when using resample, it once uses `.head()` and the other time it shows 12 months. I don't like any of them. I'd use something like resampling a year to quarters, or a quarter to months... So we can show all the data, and it's just few rows that readers can quickly check.",
        "createdAt" : "2018-11-04T11:08:05Z",
        "updatedAt" : "2018-11-10T12:24:25Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "22c2ce13-5bcb-4a6e-84fb-5ced2c168a6a",
        "parentId" : "900648f0-31a8-4442-8b4c-bde5d9273a69",
        "authorId" : "9561fac2-c6b0-4eb8-b2f5-c800a4d61b7c",
        "body" : "I've created two examples, one sampling a year into quarters using `convention='start'` and another sampling quarters into months using the `convention='end'`. If it's too much we can remove one of them.",
        "createdAt" : "2018-11-07T12:46:26Z",
        "updatedAt" : "2018-11-10T12:24:25Z",
        "lastEditedBy" : "9561fac2-c6b0-4eb8-b2f5-c800a4d61b7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "109e414bcae2b45e83ed2feba8ec38046ef3b44e",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +7692,7696 @@        >>> s\n        2012    1\n        2013    2\n        Freq: A-DEC, dtype: int64\n        >>> s.resample('Q', convention='start').asfreq()"
  },
  {
    "id" : "24ce419e-550f-4a63-9f7f-0c1782b35ccb",
    "prId" : 23197,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23197#pullrequestreview-173443552",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2da5ecf0-fa1c-4ca5-a302-744014a77089",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "As this is for `Series` and `DataFrame`, I'd add both here too. One of the links will be self-referencing, but the other will point to the equivalent of the other class, which is useful.",
        "createdAt" : "2018-11-09T12:22:43Z",
        "updatedAt" : "2018-11-10T12:24:25Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "bbf55742-00b7-4ef1-a3f1-934a12c478b4",
        "parentId" : "2da5ecf0-fa1c-4ca5-a302-744014a77089",
        "authorId" : "9561fac2-c6b0-4eb8-b2f5-c800a4d61b7c",
        "body" : "Got it.",
        "createdAt" : "2018-11-09T14:53:17Z",
        "updatedAt" : "2018-11-10T12:24:25Z",
        "lastEditedBy" : "9561fac2-c6b0-4eb8-b2f5-c800a4d61b7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "109e414bcae2b45e83ed2feba8ec38046ef3b44e",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +7580,7584 @@        See Also\n        --------\n        groupby : Group by mapping, function, label, or list of labels.\n        Series.resample : Resample a Series.\n        DataFrame.resample: Resample a DataFrame."
  },
  {
    "id" : "a4d573c7-1895-4bc6-8f85-15e441206914",
    "prId" : 23338,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23338#pullrequestreview-180580725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "448868c9-7541-4fac-b77f-206818d6e621",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "is the backslash needed?",
        "createdAt" : "2018-12-02T00:04:36Z",
        "updatedAt" : "2018-12-22T18:21:29Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "7497090f-4070-49ba-a684-09bf1aacd286",
        "parentId" : "448868c9-7541-4fac-b77f-206818d6e621",
        "authorId" : "66af7fa9-77a9-4988-af86-ca1458e5d474",
        "body" : "The backslash is there to avoid 2 blank lines between the Return and Examples section.\r\n```\r\n################################################################################\r\n######################## Docstring (pandas.Series.min)  ########################\r\n################################################################################\r\n\r\nThis method returns the minimum of the values in the object.\r\n            If you want the *index* of the minimum, use ``idxmin``. This is\r\n            the equivalent of the ``numpy.ndarray`` method ``argmin``.\r\n\r\nParameters\r\n----------\r\naxis : {index (0)}\r\nskipna : boolean, default True\r\n    Exclude NA/null values when computing the result.\r\nlevel : int or level name, default None\r\n    If the axis is a MultiIndex (hierarchical), count along a\r\n    particular level, collapsing into a scalar\r\nnumeric_only : boolean, default None\r\n    Include only float, int, boolean columns. If None, will attempt to use\r\n    everything, then use only numeric data. Not implemented for Series.\r\n\r\nReturns\r\n-------\r\nmin : scalar or Series (if level specified)\r\n\r\nExamples\r\n--------\r\n\r\n>>> idx = pd.MultiIndex.from_arrays([\r\n...     ['warm', 'warm', 'cold', 'cold'],\r\n...     ['dog', 'falcon', 'fish', 'spider']],\r\n...     names=['blooded', 'animal'])\r\n>>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\r\n>>> s\r\nblooded  animal\r\nwarm     dog       4\r\n         falcon    2\r\ncold     fish      0\r\n         spider    8\r\nName: legs, dtype: int64\r\n\r\n>>> s.min()\r\n0\r\n\r\nMin using level names, as well as indices.\r\n\r\n>>> s.min(level='blooded')\r\nblooded\r\nwarm    2\r\ncold    0\r\nName: legs, dtype: int64\r\n\r\n>>> s.min(level=0)\r\nblooded\r\nwarm    2\r\ncold    0\r\nName: legs, dtype: int64\r\n\r\n################################################################################\r\n################################## Validation ##################################\r\n################################################################################\r\n\r\n10 Errors found:\r\n        Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)\r\n        Use only one blank line to separate sections or paragraphs\r\n        Summary must start with infinitive verb, not third person (e.g. use \"Generate\" instead of \"Generates\")\r\n        Summary should fit in a single line.\r\n        Errors in parameters section\r\n                Parameters {**kwargs} not documented\r\n                Parameter \"axis\" has no description\r\n                Parameter \"skipna\" type should use \"bool\" instead of \"boolean\"\r\n                Parameter \"level\" description should finish with \".\"\r\n                Parameter \"numeric_only\" type should use \"bool\" instead of \"boolean\"\r\n1 Warnings found:\r\n        See Also section not found\r\n",
        "createdAt" : "2018-12-02T22:20:32Z",
        "updatedAt" : "2018-12-22T18:21:29Z",
        "lastEditedBy" : "66af7fa9-77a9-4988-af86-ca1458e5d474",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ec816a64763e9a520c96d0cf201c54ddb37fe84",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +10698,10702 @@\"\"\"\n\n_shared_docs['stat_func_example'] = \"\"\"\\\nExamples\n--------"
  },
  {
    "id" : "097ec691-50f9-416e-80d5-991686493973",
    "prId" : 23408,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23408#pullrequestreview-170035639",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84bb9b67-76a8-4e5d-9aad-945a67444870",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "For this set of examples, I think these methods should be showing examples for `Series.tz_localize` (the timeseries data is passed to `index=`) and not `Series.dt.tz_localize`(the timeseries data is pass to `data=`) since that's where this docstring is linked",
        "createdAt" : "2018-10-30T22:56:14Z",
        "updatedAt" : "2018-10-31T23:03:55Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1026c389b32e95d9e439b3b2fa0e16252908588",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +8662,8666 @@        --------\n\n        Localize local times:\n\n        >>> s = pd.Series([1],"
  },
  {
    "id" : "6c3428ea-8f70-4690-8a7b-af827e67d276",
    "prId" : 23623,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23623#pullrequestreview-178697400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "701b1dc5-2143-4745-a881-02634fe8b5ab",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Add it to See Also as well?",
        "createdAt" : "2018-11-27T20:43:16Z",
        "updatedAt" : "2018-11-29T12:19:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9eee65e64ae815b320f5a8bd3a8701e264f15f6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +5167,5171 @@        .. warning::\n\n           We recommend using :meth:`DataFrame.to_numpy` instead.\n\n        Only the values in the DataFrame will be returned, the axes labels"
  },
  {
    "id" : "4b26fb5e-22d4-4d2d-9247-58e6ae169865",
    "prId" : 23913,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23913#pullrequestreview-178102536",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b725d49-380f-4062-ae00-b6340f7a51b2",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Can you add a `See Also` section? `.loc` and `.iloc` at least should be linked.",
        "createdAt" : "2018-11-25T23:16:20Z",
        "updatedAt" : "2018-12-02T17:08:32Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f11180af143f943eab53f3404b0eab31e7d1443",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +3310,3314 @@        :ref:`MultiIndex Slicers <advanced.mi_slicers>`.\n\n        Examples\n        --------\n        >>> d = {'num_legs': [4, 4, 2, 2],"
  },
  {
    "id" : "6266fd1f-d3bb-49cb-9a2e-379e7dfae46e",
    "prId" : 23913,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23913#pullrequestreview-178107496",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29451c42-91f7-42f0-8dfb-8d96b41da39c",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Can you add a short description on what is being returned.",
        "createdAt" : "2018-11-26T00:50:21Z",
        "updatedAt" : "2018-12-02T17:08:32Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f11180af143f943eab53f3404b0eab31e7d1443",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +3290,3294 @@        Returns\n        -------\n        Series or DataFrame\n            Cross-section from the original Series or DataFrame\n            corresponding to the selected index levels."
  },
  {
    "id" : "d74b6fb4-ae43-4b1f-96ee-25eda0254500",
    "prId" : 24069,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24069#pullrequestreview-182980656",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a118cb54-db34-4e13-820e-39e9524e97fd",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "the blank line is unnecessary, and will break the validation",
        "createdAt" : "2018-12-08T19:06:44Z",
        "updatedAt" : "2018-12-10T14:45:08Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "77f7e150-3b27-4b0e-b312-2cad105b1508",
        "parentId" : "a118cb54-db34-4e13-820e-39e9524e97fd",
        "authorId" : "2dee2056-101c-4c62-bd17-3f1b25be3bb1",
        "body" : "ok",
        "createdAt" : "2018-12-09T14:28:40Z",
        "updatedAt" : "2018-12-10T14:45:08Z",
        "lastEditedBy" : "2dee2056-101c-4c62-bd17-3f1b25be3bb1",
        "tags" : [
        ]
      }
    ],
    "commit" : "32821431d56a5222be149ece45faa8f76361a5da",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +10633,10637 @@>>> pd.Series([np.nan]).any(skipna=False)\nTrue\n\n**DataFrame**\n"
  },
  {
    "id" : "38ea8b2d-e260-42bc-91e5-e71a1b2e4573",
    "prId" : 24069,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24069#pullrequestreview-182980651",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55862e39-8f95-428c-9d02-091487ab8b1d",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "wouldn't make sense to have an example with `skipna` here, as in `any`?",
        "createdAt" : "2018-12-08T19:07:08Z",
        "updatedAt" : "2018-12-10T14:45:08Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "abad886d-fe18-4959-8189-1ebc9692d344",
        "parentId" : "55862e39-8f95-428c-9d02-091487ab8b1d",
        "authorId" : "2dee2056-101c-4c62-bd17-3f1b25be3bb1",
        "body" : "`skipna` is not so interesting for `all` since `nan` is True, so the presence of `nan` doesn't actually change the result, but I'll add it anyway.",
        "createdAt" : "2018-12-09T14:28:33Z",
        "updatedAt" : "2018-12-10T14:45:08Z",
        "lastEditedBy" : "2dee2056-101c-4c62-bd17-3f1b25be3bb1",
        "tags" : [
        ]
      }
    ],
    "commit" : "32821431d56a5222be149ece45faa8f76361a5da",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +10263,10267 @@True\n>>> pd.Series([np.nan]).all()\nTrue\n>>> pd.Series([np.nan]).all(skipna=False)\nTrue"
  },
  {
    "id" : "1d8525eb-ef46-4a7a-9e74-8f695aebdcd6",
    "prId" : 24069,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24069#pullrequestreview-182985340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a0e8552-433d-4f70-b588-bdc3289f388a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "Is this right? (making this bold)",
        "createdAt" : "2018-12-09T16:08:23Z",
        "updatedAt" : "2018-12-10T14:45:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "619b8662-fca9-4912-8f8e-d61138c127c8",
        "parentId" : "3a0e8552-433d-4f70-b588-bdc3289f388a",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "We've been using those bold headers in other places too. I don't have a preference, but is consistent with other docstrings.",
        "createdAt" : "2018-12-09T16:11:31Z",
        "updatedAt" : "2018-12-10T14:45:08Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "615d3ea3-bb88-482e-9ff6-58b7cca19cc1",
        "parentId" : "3a0e8552-433d-4f70-b588-bdc3289f388a",
        "authorId" : "2dee2056-101c-4c62-bd17-3f1b25be3bb1",
        "body" : "I did a quick search within the file and this was the only one I found that wasn't bold.",
        "createdAt" : "2018-12-09T16:36:54Z",
        "updatedAt" : "2018-12-10T14:45:08Z",
        "lastEditedBy" : "2dee2056-101c-4c62-bd17-3f1b25be3bb1",
        "tags" : [
        ]
      }
    ],
    "commit" : "32821431d56a5222be149ece45faa8f76361a5da",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +10254,10258 @@Examples\n--------\n**Series**\n\n>>> pd.Series([True, True]).all()"
  },
  {
    "id" : "fcfecbd7-8636-4a42-aedc-938bcec8765e",
    "prId" : 24105,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24105#pullrequestreview-181995167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "432029af-1a4b-4394-817e-7d42173a81a7",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Do you mind adding a short description on what is being returned (in the next line of the type, indented). See https://pandas.pydata.org/pandas-docs/stable/contributing_docstring.html#section-4-returns-or-yields",
        "createdAt" : "2018-12-05T12:22:16Z",
        "updatedAt" : "2018-12-09T08:01:31Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "8603aaaa-9433-405e-8614-25235f217a8e",
        "parentId" : "432029af-1a4b-4394-817e-7d42173a81a7",
        "authorId" : "6d6cd395-b8e6-4b37-8cbc-66316da5ff49",
        "body" : "Done.",
        "createdAt" : "2018-12-05T22:01:47Z",
        "updatedAt" : "2018-12-09T08:01:31Z",
        "lastEditedBy" : "6d6cd395-b8e6-4b37-8cbc-66316da5ff49",
        "tags" : [
        ]
      }
    ],
    "commit" : "201ef537dd5003f28c0f56863da9fc817b70392a",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +4400,4404 @@        Returns\n        -------\n        %(klass)s\n            Returns a new DataFrame object with new indices, unless the new\n            index is equivalent to the current one and copy=False."
  },
  {
    "id" : "1d98af0d-d86a-4a30-b845-cc516eab70b4",
    "prId" : 24105,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24105#pullrequestreview-182489793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f368cdb4-7e99-48a8-900e-8f433e010f71",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`reindex_axis` is a deprecated method, so it would be good to add a \r\n\r\n```\r\n.. deprecated:: 0.21.0\r\n    Use `reindex` instead.",
        "createdAt" : "2018-12-06T21:41:47Z",
        "updatedAt" : "2018-12-09T08:01:31Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c1b5743f-efab-4eef-aee9-124e52cccb2e",
        "parentId" : "f368cdb4-7e99-48a8-900e-8f433e010f71",
        "authorId" : "6d6cd395-b8e6-4b37-8cbc-66316da5ff49",
        "body" : "Thanks, I have added this to the end of the summary. Based on other docstrings it looks like that's the place to put it.",
        "createdAt" : "2018-12-06T22:59:43Z",
        "updatedAt" : "2018-12-09T08:01:31Z",
        "lastEditedBy" : "6d6cd395-b8e6-4b37-8cbc-66316da5ff49",
        "tags" : [
        ]
      },
      {
        "id" : "249daca7-1ecf-4dc8-93da-e3ee8c1d0e12",
        "parentId" : "f368cdb4-7e99-48a8-900e-8f433e010f71",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, that looks good!",
        "createdAt" : "2018-12-06T23:03:14Z",
        "updatedAt" : "2018-12-09T08:01:31Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "201ef537dd5003f28c0f56863da9fc817b70392a",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +4368,4372 @@        previous index. A new object is produced unless the new index\n        is equivalent to the current one and copy=False.\n\n        Parameters\n        ----------"
  },
  {
    "id" : "6363f22d-d573-46b9-9d40-de957efaad88",
    "prId" : 24188,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24188#pullrequestreview-185372029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee23d790-547c-4079-ac0b-eaea4ae3e359",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What was the reason for doing this?",
        "createdAt" : "2018-12-12T06:21:56Z",
        "updatedAt" : "2018-12-14T16:36:45Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "651dc583-f1ff-4db5-8eaf-e30adf57cedb",
        "parentId" : "ee23d790-547c-4079-ac0b-eaea4ae3e359",
        "authorId" : "55aa4de8-eba9-4277-a5c7-aac678f5d8f4",
        "body" : "That was done so that the generated docstring matches the expected format of - \r\n\r\nSummary\r\n\r\n.. deprecated:: \r\n\r\nExtended Summary",
        "createdAt" : "2018-12-14T16:09:33Z",
        "updatedAt" : "2018-12-14T16:36:45Z",
        "lastEditedBy" : "55aa4de8-eba9-4277-a5c7-aac678f5d8f4",
        "tags" : [
        ]
      },
      {
        "id" : "2474397e-4317-4f84-91a8-158a51200100",
        "parentId" : "ee23d790-547c-4079-ac0b-eaea4ae3e359",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "If the validation doesn't fail, I guess this is correct. But if you can copy the output of `./scripts/validate_docstrings.py pandas.Series.<this_method>` in a comment, so we can see how the final version is, that would be great.",
        "createdAt" : "2018-12-14T16:33:02Z",
        "updatedAt" : "2018-12-14T16:36:45Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "720b2a09-8f1b-4f84-93d5-1bf43a00fa14",
        "parentId" : "ee23d790-547c-4079-ac0b-eaea4ae3e359",
        "authorId" : "55aa4de8-eba9-4277-a5c7-aac678f5d8f4",
        "body" : "For the final version, running `python ./scripts/validate_docstrings.py pandas.Series.ptp --errors=GL09` gives - \r\n```\r\n################################################################################\r\n######################## Docstring (pandas.Series.ptp)  ########################\r\n################################################################################\r\n\r\nReturns the difference between the maximum value and the\r\n            minimum value in the object. This is the equivalent of the\r\n            ``numpy.ndarray`` method ``ptp``.\r\n\r\n.. deprecated:: 0.24.0\r\n                Use numpy.ptp instead\r\n\r\n```\r\nThe unchanged `generic.py` file fails the validation with an output like below, where there is additional whitespace before the deprecated directive (does not match required format) -\r\n\r\n```\r\n################################################################################\r\n######################## Docstring (pandas.Series.ptp)  ########################\r\n################################################################################\r\n\r\nReturns the difference between the maximum value and the\r\n            minimum value in the object. This is the equivalent of the\r\n            ``numpy.ndarray`` method ``ptp``.\r\n\r\n            .. deprecated:: 0.24.0\r\n                Use numpy.ptp instead\r\n```",
        "createdAt" : "2018-12-14T16:51:38Z",
        "updatedAt" : "2018-12-14T17:32:35Z",
        "lastEditedBy" : "55aa4de8-eba9-4277-a5c7-aac678f5d8f4",
        "tags" : [
        ]
      },
      {
        "id" : "247e026a-6dbc-4f8a-a4b6-ff310ab4ab05",
        "parentId" : "ee23d790-547c-4079-ac0b-eaea4ae3e359",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "`Use numpy.ptp instead` should be indented with four spaces (the `.. deprecated::` is not ok, aligned with the summary)",
        "createdAt" : "2018-12-14T17:06:37Z",
        "updatedAt" : "2018-12-14T17:06:37Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "a1dd0481-c4ac-49d2-a61b-66d86a1ced90",
        "parentId" : "ee23d790-547c-4079-ac0b-eaea4ae3e359",
        "authorId" : "55aa4de8-eba9-4277-a5c7-aac678f5d8f4",
        "body" : "It actually displays like below, I think when I pasted the text here it got reformatted -\r\n\r\n![image](https://user-images.githubusercontent.com/12078268/50017883-7b648880-ff9b-11e8-88bc-55db2494b695.png)\r\n\r\nIs this ok?\r\n",
        "createdAt" : "2018-12-14T17:29:12Z",
        "updatedAt" : "2018-12-14T17:29:13Z",
        "lastEditedBy" : "55aa4de8-eba9-4277-a5c7-aac678f5d8f4",
        "tags" : [
        ]
      },
      {
        "id" : "4f4dbcc5-61f3-4720-a389-5b11ac802744",
        "parentId" : "ee23d790-547c-4079-ac0b-eaea4ae3e359",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "The deprecated is correctly aligned. The rest will need to be changed (the summary should fit in a single line, and the rest should go to the standard summary), but that's from the original code, and we'll take care later in a separate PR.\r\n\r\nSo, happy with it here.",
        "createdAt" : "2018-12-16T01:25:04Z",
        "updatedAt" : "2018-12-16T01:25:04Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5599343fc2108fc2973717a4f656fa55aeeea5fe",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +10040,10044 @@            \"\"\"Returns the difference between the maximum value and the\n            minimum value in the object. This is the equivalent of the\n            ``numpy.ndarray`` method ``ptp``.\\n\\n.. deprecated:: 0.24.0\n                Use numpy.ptp instead\"\"\",\n            nanptp)"
  },
  {
    "id" : "50b683f9-cb88-46b9-887f-62b7615e4ca1",
    "prId" : 24356,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24356#pullrequestreview-187471426",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7975bfb2-bf33-448e-8a80-8961e0ac58be",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we make this more generic? IOW have ``nv.validate_statu_func`` dispatch based on fname?",
        "createdAt" : "2018-12-19T22:47:31Z",
        "updatedAt" : "2018-12-19T22:49:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4e1519fd-680a-42a7-bad8-68f01d49d50c",
        "parentId" : "7975bfb2-bf33-448e-8a80-8961e0ac58be",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think that would make sense, but it isn't really written that way right now. Right now we just have instances of CompatValidator sitting in `function.py`, and we choose the right one to call. \r\n\r\nIt'd be nice to have a decorator that did it for us\r\n\r\n```python\r\n@validate_numpy\r\ndef mean(self, ...):\r\n    ...\r\n```\r\n\r\nthen we don't have the duplication of the function name. But I think that's a decent sized refactor of how things are done now.",
        "createdAt" : "2018-12-20T02:57:29Z",
        "updatedAt" : "2018-12-20T02:57:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f0cf2b29-7185-48a0-8a91-293481e9fd6e",
        "parentId" : "7975bfb2-bf33-448e-8a80-8961e0ac58be",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok but this seems very hacky to hardcore when we already know the name",
        "createdAt" : "2018-12-20T14:30:08Z",
        "updatedAt" : "2018-12-21T17:09:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "63d8a486-402a-4c02-9f45-3bf93ad76007",
        "parentId" : "7975bfb2-bf33-448e-8a80-8961e0ac58be",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> But I think that's a decent sized refactor of how things are done now.\r\n\r\nAgreed.  At the time, I wrote it that way to keep things explicit, and it made it slightly easier to handle the details of each analogous `numpy` function.\r\n\r\nThat being said, I think refactoring to dispatching seems reasonable as well but would be best served for investigation and execution in a follow-up.",
        "createdAt" : "2018-12-20T22:37:48Z",
        "updatedAt" : "2018-12-20T22:37:49Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "92c043ff-8520-4e09-8d17-8ee83fb2147a",
        "parentId" : "7975bfb2-bf33-448e-8a80-8961e0ac58be",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok for now. let's followup and see if can reduce need to specify names like this.",
        "createdAt" : "2018-12-21T17:09:49Z",
        "updatedAt" : "2018-12-21T17:09:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed5308fd18dd59f52c7afb46486af8b7eb5c1f3f",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +10838,10842 @@            nv.validate_sum(tuple(), kwargs)\n        elif name == 'prod':\n            nv.validate_prod(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)"
  },
  {
    "id" : "403b4489-5b22-46d7-81b7-1a0987c0e75f",
    "prId" : 24735,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24735#pullrequestreview-193403772",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5221a564-0ac2-4e76-b5b7-ae0408c352ef",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What's the point of this?",
        "createdAt" : "2019-01-12T19:18:45Z",
        "updatedAt" : "2019-01-20T09:59:12Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "27a6e77e-2d74-4971-afdf-f020171c26e4",
        "parentId" : "5221a564-0ac2-4e76-b5b7-ae0408c352ef",
        "authorId" : "d27357e5-3013-4027-a032-3a633c4de0f3",
        "body" : "This is simply reverting back to what this block used to do; it's needed in the event `values <= upper` would otherwise raise a type error.",
        "createdAt" : "2019-01-16T23:35:12Z",
        "updatedAt" : "2019-01-20T09:59:12Z",
        "lastEditedBy" : "d27357e5-3013-4027-a032-3a633c4de0f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "f372c9ece6cc66c8d42397feacf5081b29787336",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +7151,7155 @@        mask = isna(self.values)\n\n        with np.errstate(all='ignore'):\n            if upper is not None:\n                subset = self.to_numpy() <= upper"
  },
  {
    "id" : "bf105abc-35ff-4b9c-a298-cdf02ef8fef5",
    "prId" : 25069,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25069#pullrequestreview-199152339",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "472850f8-9b9b-44b3-9a0d-9a0d42a853ee",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would just use object() its more pythonic, we should remove the whole sentinel_factory() bizness.",
        "createdAt" : "2019-02-01T13:04:33Z",
        "updatedAt" : "2019-02-01T15:59:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "94a12396-aa34-45d1-8126-abf242e1a08c",
        "parentId" : "472850f8-9b9b-44b3-9a0d-9a0d42a853ee",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "made the `sentinel_factory()` --> `object()` change here; planning to do the global removal of `sentinel_factory()` as a follow up so it can go into 0.25.0 and keep the 0.24.x changes as minimal as possible.",
        "createdAt" : "2019-02-01T16:03:36Z",
        "updatedAt" : "2019-02-01T16:03:36Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "d38fa1f9-e1be-4101-b671-9ea42253db80",
        "parentId" : "472850f8-9b9b-44b3-9a0d-9a0d42a853ee",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "xref #25074",
        "createdAt" : "2019-02-01T16:21:18Z",
        "updatedAt" : "2019-02-01T16:21:19Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "90ff4f3aff050f6d0e0929c3e32ec1f093eaa8b8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +63,67 @@\n# sentinel value to use as kwarg in place of None when None has special meaning\n# and needs to be distinguished from a user explicitly passing None.\nsentinel = object()\n"
  },
  {
    "id" : "6543d635-9806-4f76-a12e-70571859b122",
    "prId" : 25437,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25437#pullrequestreview-281211519",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04e66b6c-a85a-45a5-b657-ed320638ebf7",
        "parentId" : null,
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "``longtable`` has its own argument. The fact (of which I'm not a fan) that the table/tabular environment instead can only be activated by passing a ``caption`` or a ``label`` is not stated anywhere in the docstring: it should be clarified.",
        "createdAt" : "2019-07-12T14:15:10Z",
        "updatedAt" : "2019-09-03T18:30:02Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "c4782d3c-db3b-40f5-bbfc-e08eab747680",
        "parentId" : "04e66b6c-a85a-45a5-b657-ed320638ebf7",
        "authorId" : "8ea689fd-8acc-42cf-a6d4-f62aa724c09d",
        "body" : "@toobaz the table/tabular environment will be used when `longtable` is `False` which is the current behavior. ",
        "createdAt" : "2019-07-19T04:02:24Z",
        "updatedAt" : "2019-09-03T18:30:02Z",
        "lastEditedBy" : "8ea689fd-8acc-42cf-a6d4-f62aa724c09d",
        "tags" : [
        ]
      },
      {
        "id" : "80571189-d1f8-4d27-8710-6a99fc1872f0",
        "parentId" : "04e66b6c-a85a-45a5-b657-ed320638ebf7",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "What discriminates between the tabular and the nested table/tabular? I don't think the docs currently answer this question.",
        "createdAt" : "2019-07-30T11:04:25Z",
        "updatedAt" : "2019-09-03T18:30:02Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "b10f8e19-9b54-47f0-8144-d771b7328a24",
        "parentId" : "04e66b6c-a85a-45a5-b657-ed320638ebf7",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Or more generally: can I have a nested table/tabular _without_ passing a caption or a label?",
        "createdAt" : "2019-07-30T11:05:46Z",
        "updatedAt" : "2019-09-03T18:30:02Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "4f917b01-26bc-4d4a-b77a-1b113c0579c6",
        "parentId" : "04e66b6c-a85a-45a5-b657-ed320638ebf7",
        "authorId" : "8ea689fd-8acc-42cf-a6d4-f62aa724c09d",
        "body" : "@toobaz have a look [here](https://github.com/pandas-dev/pandas/pull/25339#issuecomment-464576617) for clarification.  More can be added to the docstring if you think it's necessary.  My intent is to generally write to secondary `.tex` files in a `./tables` directory and then use `\\input{}` in the main `.tex` file to typeset the tables.",
        "createdAt" : "2019-08-29T04:16:50Z",
        "updatedAt" : "2019-09-03T18:30:02Z",
        "lastEditedBy" : "8ea689fd-8acc-42cf-a6d4-f62aa724c09d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c0f99351438a3b18aca8c5640badb361ebe58f6",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +2930,2934 @@    ):\n        r\"\"\"\n        Render object to a LaTeX tabular, longtable, or nested table/tabular.\n\n        Requires ``\\usepackage{booktabs}``.  The output can be copy/pasted"
  },
  {
    "id" : "26f3757d-06d8-4537-970a-971ea23ff216",
    "prId" : 25525,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25525#pullrequestreview-212621597",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ee7344a-c40d-4c1c-94e3-46de8b792549",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm what failure was this causing? Seems strange to be required on this line but not on subsequent substitutions. ",
        "createdAt" : "2019-03-09T23:30:49Z",
        "updatedAt" : "2019-03-10T00:09:29Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "dd106a97-cfe2-4d13-9af3-38e3d4c84299",
        "parentId" : "2ee7344a-c40d-4c1c-94e3-46de8b792549",
        "authorId" : "48586464-97e0-4453-b9b6-5f4358f3fdfb",
        "body" : "Quite a few of them:\r\n\r\n```\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10969;code=GL03;]pandas.Series.kurt: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10026;code=GL03;]pandas.Series.mad: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10969;code=GL03;]pandas.Series.mean: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10969;code=GL03;]pandas.Series.median: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10969;code=GL03;]pandas.Series.skew: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10969;code=GL03;]pandas.Series.kurtosis: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10067;code=GL03;]pandas.Series.compound: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10969;code=GL03;]pandas.Panel.mean: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10969;code=GL03;]pandas.Panel.median: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10969;code=GL03;]pandas.Panel.skew: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=None;linenumber=None;code=GL03;]pandas.core.groupby.DataFrameGroupBy.mad: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=None;linenumber=None;code=GL03;]pandas.core.groupby.DataFrameGroupBy.skew: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10067;code=GL03;]pandas.DataFrame.compound: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10969;code=GL03;]pandas.DataFrame.kurt: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10969;code=GL03;]pandas.DataFrame.kurtosis: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10026;code=GL03;]pandas.DataFrame.mad: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10969;code=GL03;]pandas.DataFrame.mean: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10969;code=GL03;]pandas.DataFrame.median: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10969;code=GL03;]pandas.DataFrame.skew: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10969;code=GL03;]pandas.Series.ptp: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10067;code=GL03;]pandas.Panel.compound: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10969;code=GL03;]pandas.Panel.kurt: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10969;code=GL03;]pandas.Panel.kurtosis: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n##vso[task.logissue type=error;sourcepath=pandas/core/generic.py;linenumber=10026;code=GL03;]pandas.Panel.mad: Double line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n```\r\n\r\nI believe these errors are due to these functions lacking both `see also` and `examples` sections. Alternatively we could modify the `Aggregate` decorator to ignore these empty strings.",
        "createdAt" : "2019-03-10T00:09:31Z",
        "updatedAt" : "2019-03-10T00:09:31Z",
        "lastEditedBy" : "48586464-97e0-4453-b9b6-5f4358f3fdfb",
        "tags" : [
        ]
      },
      {
        "id" : "0121e05e-00fb-4f12-a934-48bb580dd75c",
        "parentId" : "2ee7344a-c40d-4c1c-94e3-46de8b792549",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "OK thanks. So I guess the solution here would be to fix all of the See Also's to not begin with a newline, though probably best served as a follow up PR",
        "createdAt" : "2019-03-10T20:58:31Z",
        "updatedAt" : "2019-03-10T20:58:31Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e79af01cb6c19eccd27986e2c5e4a7fa6b55a98",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +10301,10305 @@Returns\n-------\n%(name1)s or %(name2)s (if level specified)\\\n%(see_also)s\n%(examples)s\\"
  },
  {
    "id" : "08e22e33-f295-4ac3-917c-2ef1dba342c4",
    "prId" : 25535,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25535#pullrequestreview-210946806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de2e803c-9e60-4a79-b9cb-adc63e8e913a",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Not something that you should solve in this PR but we shouldn't need to duplicate docstrings here. Would be nice to use the Substitution decorator as required for this if you want to do a follow up PR",
        "createdAt" : "2019-03-05T20:51:43Z",
        "updatedAt" : "2019-03-05T20:59:45Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "6e188e71-220f-4b34-afd5-5595b627f2b6",
        "parentId" : "de2e803c-9e60-4a79-b9cb-adc63e8e913a",
        "authorId" : "0705a0ed-b69c-4514-b341-16a435beaffe",
        "body" : "I'll do a followup PR on that! Would you mind giving me an example?",
        "createdAt" : "2019-03-05T20:58:21Z",
        "updatedAt" : "2019-03-05T20:59:45Z",
        "lastEditedBy" : "0705a0ed-b69c-4514-b341-16a435beaffe",
        "tags" : [
        ]
      },
      {
        "id" : "70c631f4-b42d-47eb-ac04-f1078bfe143c",
        "parentId" : "de2e803c-9e60-4a79-b9cb-adc63e8e913a",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Sure here's one:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/221be3b4adde0f45927803b1c593b56d4678faeb/pandas/core/frame.py#L665\r\n\r\n",
        "createdAt" : "2019-03-05T22:09:40Z",
        "updatedAt" : "2019-03-05T22:09:40Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "97746e87063303e917a680659849d5178a198db7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +982,986 @@            In case of a MultiIndex, only rename labels in the specified\n            level.\n        errors : {'ignore', 'raise'}, default 'ignore'\n            If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,\n            or `columns` contains labels that are not present in the Index"
  },
  {
    "id" : "f0a1da07-2744-422c-a1ba-40cd9ca8ea0b",
    "prId" : 26114,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26114#pullrequestreview-260347181",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cf4a45d-270f-4342-aca6-f68a46086d0c",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Fr the other docstring you used `Yields` ?",
        "createdAt" : "2019-07-10T20:48:53Z",
        "updatedAt" : "2019-07-10T20:51:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "71c9acab2e86a0be71f6ba96e5c5d7b82a61f360",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1942,1946 @@        This is index for Series and columns for DataFrame.\n\n        Returns\n        -------\n        Generator"
  },
  {
    "id" : "e041df51-4abb-4ec2-acc4-fb98538a65b4",
    "prId" : 26114,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26114#pullrequestreview-260398373",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1795ca5b-009c-48a5-8657-848f2749a431",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Actually, I think both Series and DataFrame have their own implementation, so this one is nowhere used. So can rather be removed?",
        "createdAt" : "2019-07-10T20:50:45Z",
        "updatedAt" : "2019-07-10T20:51:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e802e31d-7a7e-4e33-9bbb-db423ef9a881",
        "parentId" : "1795ca5b-009c-48a5-8657-848f2749a431",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "I'll look into it,",
        "createdAt" : "2019-07-10T23:01:50Z",
        "updatedAt" : "2019-07-10T23:01:51Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "71c9acab2e86a0be71f6ba96e5c5d7b82a61f360",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1951,1955 @@    @Appender(items.__doc__)\n    def iteritems(self):\n        return self.items()\n\n    def __len__(self):"
  },
  {
    "id" : "20bce18a-2e17-4e05-b964-ec3ddb64221f",
    "prId" : 26137,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26137#pullrequestreview-239248017",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ca15f1b-2e2e-4301-8bba-d330c66cc0d3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "change?",
        "createdAt" : "2019-05-16T00:10:05Z",
        "updatedAt" : "2019-05-28T20:38:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "87e81318-2b8a-467f-becd-4f1514c78192",
        "parentId" : "7ca15f1b-2e2e-4301-8bba-d330c66cc0d3",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Sidenote: we should probably deprecate this `ftypes` attribute?",
        "createdAt" : "2019-05-16T08:37:05Z",
        "updatedAt" : "2019-05-28T20:38:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "377efa43-6aa3-4796-8e7e-4c4b49db1173",
        "parentId" : "7ca15f1b-2e2e-4301-8bba-d330c66cc0d3",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Perhaps replace with a `DataFrame.sparse.is_sparse` attribute? Or `DataFrame.sparse.ftypes`?",
        "createdAt" : "2019-05-16T15:55:38Z",
        "updatedAt" : "2019-05-28T20:38:24Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "766e5fca-6187-4a84-a9e6-7a347b702333",
        "parentId" : "7ca15f1b-2e2e-4301-8bba-d330c66cc0d3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes we should deprecate ``.ftypes`` ",
        "createdAt" : "2019-05-19T17:58:57Z",
        "updatedAt" : "2019-05-28T20:38:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "12d8d8300a3fdaa3ae8d0a2e0d3911e085910426",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +5590,5594 @@        dtype: object\n\n        >>> pd.SparseDataFrame(arr).ftypes  # doctest: +SKIP\n        0    float64:sparse\n        1    float64:sparse"
  },
  {
    "id" : "f8689c7f-cd3f-48d5-842a-985984c1862e",
    "prId" : 26234,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26234#pullrequestreview-232691766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe271f19-0bae-4b35-bf0d-6a53509be29a",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Just a preference, but I'd prefer `str or None`",
        "createdAt" : "2019-05-01T13:01:36Z",
        "updatedAt" : "2019-05-07T17:57:21Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "cfdbe9dc-f195-4470-8924-4ca5ab0f7632",
        "parentId" : "fe271f19-0bae-4b35-bf0d-6a53509be29a",
        "authorId" : "fd6a3bb0-1e01-4fbd-9d3f-28cd7cd4505e",
        "body" : "It is written in the same way as is in other to_* io functions. It returns str only when a path or buffer-like is not provided. I believe it mostly returns None which makes writing `None or str` more reasonable IMO.",
        "createdAt" : "2019-05-01T18:25:17Z",
        "updatedAt" : "2019-05-07T17:57:21Z",
        "lastEditedBy" : "fd6a3bb0-1e01-4fbd-9d3f-28cd7cd4505e",
        "tags" : [
        ]
      }
    ],
    "commit" : "331a5df8697440539b26a6c94e5bfefabca6439f",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +2450,2454 @@        Returns\n        -------\n        None or str\n            If path_or_buf is None, returns the resulting msgpack format as a\n            string. Otherwise returns None."
  },
  {
    "id" : "72de2c57-1a01-456f-b047-ef5b3be7f7be",
    "prId" : 26738,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26738#pullrequestreview-247379945",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c02355c-599e-4fd5-9bb9-c283eaf716b2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually I wouldn't worry about checking ndim at all in any methods and just remove all of the checks.\r\n",
        "createdAt" : "2019-06-08T19:49:34Z",
        "updatedAt" : "2019-06-08T20:16:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "afbe8032-e801-42bf-9a7a-db442ced2841",
        "parentId" : "0c02355c-599e-4fd5-9bb9-c283eaf716b2",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "sounds good. thanks.",
        "createdAt" : "2019-06-08T19:50:40Z",
        "updatedAt" : "2019-06-08T20:16:48Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2cedd74d40e78fec08f2a86d05b292bc7798af3",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +1569,1573 @@        is_level : bool\n        \"\"\"\n        axis = self._get_axis_number(axis)\n\n        return (key is not None and"
  },
  {
    "id" : "03c856b5-a1ba-4dad-8aee-448be6db9e01",
    "prId" : 26786,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26786#pullrequestreview-248600935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "197a478b-696e-45e2-bf2a-5919e9b45cc2",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Do we have an expectation that substituted sections are responsible for line breaks? I feel like this has caused a few issues throughout code base curious if you have thoughts",
        "createdAt" : "2019-06-11T18:43:57Z",
        "updatedAt" : "2019-06-12T08:01:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "9fd7809b-4789-409f-91e1-77903ca31f4a",
        "parentId" : "197a478b-696e-45e2-bf2a-5919e9b45cc2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@datapythonista I *might* already have fixed this one in https://github.com/pandas-dev/pandas/pull/26780/files, but by adding a extra newline in the \"see also\" string instead of here. \r\nMy reasoning was that if you do it here, and no see also is introduced, you might get too many empty lines (but didn't try that actually, so not sure this is correct)",
        "createdAt" : "2019-06-11T18:53:03Z",
        "updatedAt" : "2019-06-12T08:01:46Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "8c6ade1d-47c2-4631-a554-6405fcd4f78b",
        "parentId" : "197a478b-696e-45e2-bf2a-5919e9b45cc2",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "This is trickier than what it looks, our validation complains if there are two line breaks together, and also a missing line break at the end. And we don't fail the validation, but we get warnings (and incorrect rendering) if the line break is missing before a section title, as the title is not detected.\r\n\r\nIt took me a while to find a working solution for all the cases, I think the one here is the only possible one, there are many docstrings affected by this.",
        "createdAt" : "2019-06-12T07:26:25Z",
        "updatedAt" : "2019-06-12T08:01:46Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "7362cf6c-d649-4479-94f3-121575ff4468",
        "parentId" : "197a478b-696e-45e2-bf2a-5919e9b45cc2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yeah, I trust you here ;-) I only fixed that single case (of min/max I think), and didn't check the interaction with fixing others. But you might need to revert my change to get it working with master.",
        "createdAt" : "2019-06-12T07:44:39Z",
        "updatedAt" : "2019-06-12T08:01:46Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "6a27f24d-bf7c-4bd0-92e7-5a4d6595cb82",
        "parentId" : "197a478b-696e-45e2-bf2a-5919e9b45cc2",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think the change you did was correct and is still needed, it just didn't address all the cases.",
        "createdAt" : "2019-06-12T08:02:34Z",
        "updatedAt" : "2019-06-12T08:02:35Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5646735f8f255d47e36a61b4f159fbcb18c9b694",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +10284,10288 @@-------\n%(name1)s or %(name2)s (if level specified)\\\n%(see_also)s\\\n%(examples)s\n\"\"\""
  },
  {
    "id" : "e4c2e40a-033f-4cda-a305-61b0ab17def3",
    "prId" : 27103,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27103#pullrequestreview-255953669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea48fb5e-1a36-46d1-bffa-67c972692488",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add here the replacement note as well?",
        "createdAt" : "2019-06-28T20:07:16Z",
        "updatedAt" : "2019-06-28T23:12:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1900376e8d64e2477e6bf38fe34e7c231a05c4a8",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2419,2423 @@        Serialize object to input file path using msgpack format.\n\n        .. deprecated:: 0.25.0\n\n        to_msgpack is deprecated and will be removed in a future version."
  },
  {
    "id" : "e50e821d-37e1-4a82-9f60-476f23155dc0",
    "prId" : 27145,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27145#pullrequestreview-257092288",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdc6231e-02c3-40fd-b383-ea46de795316",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you update the docstring and add deprecated",
        "createdAt" : "2019-07-01T12:01:45Z",
        "updatedAt" : "2019-07-03T02:19:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ead152e7-3ee9-48ab-bc14-d4959c169198",
        "parentId" : "bdc6231e-02c3-40fd-b383-ea46de795316",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can we recommend `.dtypes.value_counts()` here instead? Or... we're in `generic.py` so that may be too hard?",
        "createdAt" : "2019-07-02T18:07:57Z",
        "updatedAt" : "2019-07-03T02:19:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "1d2187fd-4aaa-4696-828b-32f20efc1e42",
        "parentId" : "bdc6231e-02c3-40fd-b383-ea46de795316",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Yeah unfortunately that solution does not work for `Series`, but I could add `for DataFrames use .dtypes.value_counts()`",
        "createdAt" : "2019-07-02T18:17:58Z",
        "updatedAt" : "2019-07-03T02:19:39Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "dcb7ae3e-3891-4a75-9de5-1f911c0feba9",
        "parentId" : "bdc6231e-02c3-40fd-b383-ea46de795316",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sure, just need something as a replacement (may also want to add in the doc-string itself)",
        "createdAt" : "2019-07-02T19:07:24Z",
        "updatedAt" : "2019-07-03T02:19:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "475e361574a7b90199a8eb76bde04117c703c34f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +5293,5297 @@        dtype: int64\n        \"\"\"\n        warnings.warn(\"`get_dtype_counts` has been deprecated and will be \"\n                      \"removed in a future version. For DataFrames use \"\n                      \"`.dtypes.value_counts()\", FutureWarning,"
  },
  {
    "id" : "a96b220a-8c01-4cb4-9e73-2432c2967c19",
    "prId" : 27156,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27156#pullrequestreview-256442292",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07984d81-89f6-4930-aa0c-7bd013c5f55a",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "is `%%` intentional?",
        "createdAt" : "2019-07-01T16:15:25Z",
        "updatedAt" : "2019-07-01T16:15:25Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "64588ef9-a5b7-450c-bd13-c45f3d24683a",
        "parentId" : "07984d81-89f6-4930-aa0c-7bd013c5f55a",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "i guess so for `.rst`? i thought it was just a `strftime` thing. ",
        "createdAt" : "2019-07-01T16:27:18Z",
        "updatedAt" : "2019-07-01T16:27:18Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "97c4432404f052096e0e2dd3e35ca5fe10bc44a8",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2799,2803 @@        float_format : one-parameter function or str, optional, default None\n            Formatter for floating point numbers. For example\n            ``float_format=\"%%.2f\"`` and ``float_format=\"{:0.2f}\".format`` will\n            both result in 0.1234 being formatted as 0.12.\n        sparsify : bool, optional"
  },
  {
    "id" : "8a371c9f-d32e-42aa-bd02-4da0e280ad1f",
    "prId" : 27237,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27237#pullrequestreview-349098885",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2193979f-a135-4d9d-86dc-90a7afe7734a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It's not clear to me whether it gets the full dataframe, or only a subset of the dataframe for the columns the user specified to sort by.",
        "createdAt" : "2020-01-24T11:03:28Z",
        "updatedAt" : "2020-04-27T02:11:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ae41ca60-6de0-4f39-ab99-5c7467bb8db8",
        "parentId" : "2193979f-a135-4d9d-86dc-90a7afe7734a",
        "authorId" : "e3663fd4-6ec5-41f6-a788-8c61749efa01",
        "body" : "Only the subset of the columns selected in `by`. ",
        "createdAt" : "2020-01-28T02:24:50Z",
        "updatedAt" : "2020-04-27T02:11:38Z",
        "lastEditedBy" : "e3663fd4-6ec5-41f6-a788-8c61749efa01",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d5ba530d4cffea873ba501cbda3a1d50ea172af",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +4145,4149 @@            this `key` function should be *vectorized*. It should expect a\n            ``Series`` and return a Series with the same shape as the input.\n            It will be applied to each column in `by` independently.\n\n            .. versionadded:: 1.1.0"
  },
  {
    "id" : "2f2065a8-3ada-428d-86c6-e46a860c329b",
    "prId" : 27237,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27237#pullrequestreview-349517316",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91574f49-3218-44de-afdf-5be8d410818e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Add an example with key here? (I assume that is the reason the 4th column was added?)",
        "createdAt" : "2020-01-28T16:11:44Z",
        "updatedAt" : "2020-04-27T02:11:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d06e61f2-ee75-4515-9859-3605464fa6f6",
        "parentId" : "91574f49-3218-44de-afdf-5be8d410818e",
        "authorId" : "e3663fd4-6ec5-41f6-a788-8c61749efa01",
        "body" : "Added. Seemed to have been removed at some point.",
        "createdAt" : "2020-01-28T16:27:29Z",
        "updatedAt" : "2020-04-27T02:11:38Z",
        "lastEditedBy" : "e3663fd4-6ec5-41f6-a788-8c61749efa01",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d5ba530d4cffea873ba501cbda3a1d50ea172af",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +4230,4234 @@        4    D     7     2    e\n        5    C     4     3    F\n        \"\"\"\n        raise AbstractMethodError(self)\n"
  },
  {
    "id" : "ea19a5dd-924d-42be-baa5-d55ad9ff2d2c",
    "prId" : 27351,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27351#pullrequestreview-261345796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f77f83d6-e3eb-4f11-b087-5be1b1f8241e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in the future change to use ABCMultiIndex",
        "createdAt" : "2019-07-12T16:03:19Z",
        "updatedAt" : "2019-07-12T16:03:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "437f8fed5a9754b26a5099f04d631c8ef39a0995",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3496,3500 @@\n        maybe_shortcut = False\n        if self.ndim == 2 and isinstance(self.columns, MultiIndex):\n            try:\n                maybe_shortcut = key not in self.columns._engine"
  },
  {
    "id" : "a67c5cb4-d2bd-4f25-951c-cb49772dc591",
    "prId" : 27720,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27720#pullrequestreview-270814067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7903927f-b667-4eb0-bf4b-72f9365094b1",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Do we even need this check any more or would this happen implicitly?",
        "createdAt" : "2019-08-02T20:05:36Z",
        "updatedAt" : "2019-08-02T22:01:23Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "7ec55391-1ecf-4e86-8b3a-502ce5feb370",
        "parentId" : "7903927f-b667-4eb0-bf4b-72f9365094b1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'm not sure, I was mostly happy about avoiding the use of AXIS_ORDERS.",
        "createdAt" : "2019-08-02T20:39:33Z",
        "updatedAt" : "2019-08-02T22:01:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "96b8c0ea-f33a-4848-99da-80df27bafc0e",
        "parentId" : "7903927f-b667-4eb0-bf4b-72f9365094b1",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "general question. is NDFrame supposed to represent a n-dimensional data structure or is it a base class for Series and DataFrame?",
        "createdAt" : "2019-08-05T12:28:35Z",
        "updatedAt" : "2019-08-05T12:28:35Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "a56ee731-6c81-4eda-bb19-15d1c866f0ec",
        "parentId" : "7903927f-b667-4eb0-bf4b-72f9365094b1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "NDFrame is just a base class (of Series & DataFrame)",
        "createdAt" : "2019-08-05T12:33:05Z",
        "updatedAt" : "2019-08-05T12:33:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "347a42bf-7d03-4737-a69b-388987d628e0",
        "parentId" : "7903927f-b667-4eb0-bf4b-72f9365094b1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "it *was* also backing Panel / Panel4D, but no longer",
        "createdAt" : "2019-08-05T12:33:20Z",
        "updatedAt" : "2019-08-05T12:33:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "72e1bc37-44cd-4341-b125-1824965493ed",
        "parentId" : "7903927f-b667-4eb0-bf4b-72f9365094b1",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "i'm thinking should the generic nature of NDFrame be maintained to facilitate a third party Panel implementation, or is that ruled out-of-scope for pandas? ",
        "createdAt" : "2019-08-05T12:35:59Z",
        "updatedAt" : "2019-08-05T12:36:00Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "080f2786-e9b4-4662-80ec-cf508e84ff74",
        "parentId" : "7903927f-b667-4eb0-bf4b-72f9365094b1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "> i'm thinking should the generic nature of NDFrame be maintained to facilitate a third party Panel implementation, or is that ruled out-of-scope for pandas?\r\n\r\nno that's out of scope. the reason we removed Panel is because of all of the complexitiy related to > 2ndim. xarray is a better platform for that.\r\n\r\ngeneric is just the collection of common api between Series/DataFrame",
        "createdAt" : "2019-08-05T12:43:33Z",
        "updatedAt" : "2019-08-05T12:43:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4716d962-b8dc-4ca9-9f49-77f55074c308",
        "parentId" : "7903927f-b667-4eb0-bf4b-72f9365094b1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "mypy complained about FrameOrSeries, was OK with NDFrame",
        "createdAt" : "2019-08-05T14:27:42Z",
        "updatedAt" : "2019-08-05T14:27:43Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "52117876-4a6b-429a-9ae3-13a15f2713d4",
        "parentId" : "7903927f-b667-4eb0-bf4b-72f9365094b1",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "in pandas._typing FrameOrSeries is a typevar of Series and DataFrame. This is not applicable to core.generic.\r\n\r\nin #27646 FrameOrSeries is defined as a typevar bound by NDFrame so that a series returns a series, a DataFrame returns a DataFrame, a subclassed DataFrame returns a subclassed DataFrame etc.\r\n\r\nNDFrame is a nominal type, so allows any subclass of NDFrame to be returned.\r\n",
        "createdAt" : "2019-08-05T14:44:19Z",
        "updatedAt" : "2019-08-05T14:44:19Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "557b5aa86d2ac928237887d689f8435e82125282",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +6659,6663 @@\n            # need a non-zero len on all axes\n            if not self.size:\n                return self\n"
  },
  {
    "id" : "0c6fecc2-9c35-479b-b2bd-974ba23ef937",
    "prId" : 28130,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28130#pullrequestreview-283709909",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5e0a0fa-ad59-439b-b46f-a28bb457bef0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does this match the semantics of the stdlib, e.g. default is ``None`` and 0 means insert newlines, also can be a string, is that supported? https://docs.python.org/3/library/json.html",
        "createdAt" : "2019-09-04T12:04:38Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "87588567-9365-44a9-ba23-62e4923ba210",
        "parentId" : "f5e0a0fa-ad59-439b-b46f-a28bb457bef0",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "No this only accepts int for now and 0 does not insert new lines. This matches ujson behavior instead of stdlib",
        "createdAt" : "2019-09-04T12:17:39Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "292fa4f5-73a6-4327-b39e-f5da4c74c897",
        "parentId" : "f5e0a0fa-ad59-439b-b46f-a28bb457bef0",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "It should be possible to support this in the long term I just think will take a little bit of effort to bridge the gap with our vendored ujson. Thinking for now it might make the most sense to change the signature to `indent=None` and have that map to `indent=0`, documenting the the `indent=0` behavior is different from stdlib. \r\n\r\nI think that should avoid a deprecation cycle in the future for `indent=0` behavior if we eventually can mirror the stdlib's support",
        "createdAt" : "2019-09-04T15:37:50Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f376f121e20e25848a305e31c501500b8a205f2c",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +2345,2349 @@           Length of whitespace used to indent each record.\n\n           .. versionadded:: 1.0.0\n\n        Returns"
  },
  {
    "id" : "44a92453-49d3-4089-8e09-91d01d7df4c4",
    "prId" : 28130,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28130#pullrequestreview-288405999",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99d6fd80-c380-42e9-ba02-d1635263041d",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Nit [no action needed]: I know that we've been pushing typing, but in the future, it would be preferable if we could somehow separate out this effort from other changes like this enhancement.  Makes things easier to review.",
        "createdAt" : "2019-09-16T03:07:40Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "4d55f370-1261-4958-a7de-33da09d2fc0d",
        "parentId" : "99d6fd80-c380-42e9-ba02-d1635263041d",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea for sure - these do get kind of complicated when you annotate a new module altogether. Hopefully less of an issue going forward especially with all of the work @simonjayhawkins has been putting in",
        "createdAt" : "2019-09-16T03:23:49Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f376f121e20e25848a305e31c501500b8a205f2c",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +2262,2266 @@        index: bool_t = True,\n        indent: Optional[int] = None,\n    ) -> Optional[str]:\n        \"\"\"\n        Convert the object to a JSON string."
  },
  {
    "id" : "e58300ad-09a8-4945-a663-f3f65ca035df",
    "prId" : 28215,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28215#pullrequestreview-338400743",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9599687-9399-4a2f-a411-897fbd465453",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "as a followup I'd like to clean up all of these functions; i think we can move them entirely to pandas/computation/ (including the axis resolvers which is just plain wrong now the way its implemented), can you create an issue for this",
        "createdAt" : "2020-01-01T15:29:38Z",
        "updatedAt" : "2020-01-04T16:42:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2a306a7a-e633-4c59-ae14-6a2dbe0b6584",
        "parentId" : "e9599687-9399-4a2f-a411-897fbd465453",
        "authorId" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "body" : "#30683",
        "createdAt" : "2020-01-04T16:55:06Z",
        "updatedAt" : "2020-01-04T16:55:07Z",
        "lastEditedBy" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "tags" : [
        ]
      },
      {
        "id" : "d8fbc5dd-4693-4c3a-a4e6-e8049f5d0d4a",
        "parentId" : "e9599687-9399-4a2f-a411-897fbd465453",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "and replace ABCSeries in type annotations. ABCSeries resolves to Any.",
        "createdAt" : "2020-01-05T13:19:45Z",
        "updatedAt" : "2020-01-05T13:20:41Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "ddf14aeb-e0a6-40ef-9334-145d45d24bfe",
        "parentId" : "e9599687-9399-4a2f-a411-897fbd465453",
        "authorId" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "body" : "Replace with what? Also, let's continue this in #30683 ",
        "createdAt" : "2020-01-05T13:23:28Z",
        "updatedAt" : "2020-01-05T13:23:28Z",
        "lastEditedBy" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "tags" : [
        ]
      },
      {
        "id" : "0ecf0781-35e0-49e7-afde-505f5f149ea0",
        "parentId" : "e9599687-9399-4a2f-a411-897fbd465453",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I _think_ return type is Dict[str, Union[\"Series\", MultiIndex]]",
        "createdAt" : "2020-01-05T13:27:43Z",
        "updatedAt" : "2020-01-05T13:27:44Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "08f5c36d-c235-4927-a94b-d23f20e871e7",
        "parentId" : "e9599687-9399-4a2f-a411-897fbd465453",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> Also, let's continue this in #30683\r\n\r\nI don't think typing discussion relevant there",
        "createdAt" : "2020-01-05T13:28:13Z",
        "updatedAt" : "2020-01-05T13:28:13Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "8591b8ba-508c-42b7-8ee8-b7fc1108c26a",
        "parentId" : "e9599687-9399-4a2f-a411-897fbd465453",
        "authorId" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "body" : "Okay, I will see if that works. \r\n\r\nThe issue is meant for cleaning up these functions. So, why not fix the typing hints as well. ",
        "createdAt" : "2020-01-05T13:32:27Z",
        "updatedAt" : "2020-01-05T13:32:27Z",
        "lastEditedBy" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fc1bdd57544fc7241ae73dd2832eb958747efc9",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +455,459 @@        return d\n\n    def _get_index_resolvers(self) -> Dict[str, ABCSeries]:\n        from pandas.core.computation.parsing import clean_column_name\n"
  },
  {
    "id" : "00ea6990-87c7-43c3-8069-217a3ed0653d",
    "prId" : 28215,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28215#pullrequestreview-338370400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2b8b48d-f20f-4d4b-9609-b763904c2d6f",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "should this be `if not isinstance(k, int)`?  this is causing mypy failures in #30694.",
        "createdAt" : "2020-01-04T20:44:32Z",
        "updatedAt" : "2020-01-04T20:44:32Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f47505c0-d54b-4486-992d-e12ba0b8c986",
        "parentId" : "b2b8b48d-f20f-4d4b-9609-b763904c2d6f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes that looks like it needs changing",
        "createdAt" : "2020-01-04T20:52:33Z",
        "updatedAt" : "2020-01-04T20:52:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cae5560f-c2f9-4e49-9b73-a2aa1e47b685",
        "parentId" : "b2b8b48d-f20f-4d4b-9609-b763904c2d6f",
        "authorId" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "body" : "Oeh, that's really embarrassing. Yes, it should be `if not isinstance(k, int)`.\r\n\r\nWhat should be best to fix this. Should I make a PR for this?",
        "createdAt" : "2020-01-04T20:54:19Z",
        "updatedAt" : "2020-01-04T20:54:19Z",
        "lastEditedBy" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "tags" : [
        ]
      },
      {
        "id" : "3619da4c-e080-4d9e-8552-ecbefa5708e2",
        "parentId" : "b2b8b48d-f20f-4d4b-9609-b763904c2d6f",
        "authorId" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "body" : "#30698 ",
        "createdAt" : "2020-01-04T21:14:22Z",
        "updatedAt" : "2020-01-04T21:14:22Z",
        "lastEditedBy" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fc1bdd57544fc7241ae73dd2832eb958747efc9",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +462,466 @@            d.update(self._get_axis_resolvers(axis_name))\n\n        return {clean_column_name(k): v for k, v in d.items() if k is not int}\n\n    def _get_cleaned_column_resolvers(self) -> Dict[str, ABCSeries]:"
  },
  {
    "id" : "aaae9708-d969-4961-ad2d-a648a8ae4408",
    "prId" : 28394,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28394#pullrequestreview-479027400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f8ad7df-75a1-445f-ae74-ce06c230eda7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ahh i c",
        "createdAt" : "2020-08-31T23:35:29Z",
        "updatedAt" : "2020-09-01T13:55:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf23fdad7035707f49bd571cf5b9d4d682c9d01f",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +218,222 @@            attrs = dict(attrs)\n        object.__setattr__(self, \"_attrs\", attrs)\n        object.__setattr__(self, \"_flags\", Flags(self, allows_duplicate_labels=True))\n\n    @classmethod"
  },
  {
    "id" : "7c2ac8c0-d123-45da-ac2a-736dd7ad4ae7",
    "prId" : 28394,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28394#pullrequestreview-479748762",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9cf716a-1662-4a1a-a306-8700630fd839",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does this have reasonable testing?",
        "createdAt" : "2020-08-31T23:36:20Z",
        "updatedAt" : "2020-09-01T13:55:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4e2dc837-c18b-43c5-9034-13d379db042b",
        "parentId" : "a9cf716a-1662-4a1a-a306-8700630fd839",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I have tests for every method it's called it (NDFrame.set_axis, NDFrame,rename, DataFrame.set_index, DataFrame.reset_index).\r\n\r\nThe potential issue is places where we do an inplace op that gets us in an invalid state (an NDFrame with duplicate labels but `allows_duplicate_labels=False`). So the known cases are tested, but there's possibly additional places where we need to check this. I hopefully got them all though.",
        "createdAt" : "2020-09-01T13:40:44Z",
        "updatedAt" : "2020-09-01T13:55:21Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf23fdad7035707f49bd571cf5b9d4d682c9d01f",
    "line" : 209,
    "diffHunk" : "@@ -1,1 +3905,3909 @@    def _check_inplace_and_allows_duplicate_labels(self, inplace):\n        if inplace and not self.flags.allows_duplicate_labels:\n            raise ValueError(\n                \"Cannot specify 'inplace=True' when \"\n                \"'self.flags.allows_duplicate_labels' is False.\""
  },
  {
    "id" : "68ac2a6d-c480-48a4-b368-19d76091ec1b",
    "prId" : 28681,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28681#pullrequestreview-296086865",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fba7c603-7d18-4a39-8986-7e5314796e32",
        "parentId" : null,
        "authorId" : "50a8f1f9-e426-4547-baa9-0c028b12e95f",
        "body" : "I thought that handling the anchored freq was a key though, after the several testing, I have found that the approach I took was wrong.\r\n\r\nso I take a new approach, dropping duplicate indices before reindexing like above.",
        "createdAt" : "2019-10-02T08:36:02Z",
        "updatedAt" : "2019-11-14T09:11:40Z",
        "lastEditedBy" : "50a8f1f9-e426-4547-baa9-0c028b12e95f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b0f5c037255895a176fdfd3f651f13ddb2b4a62",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +10444,10448 @@\n        rs = data.div(data.shift(periods=periods, freq=freq, axis=axis, **kwargs)) - 1\n        rs = rs.loc[~rs.index.duplicated()]\n        rs = rs.reindex_like(data)\n        if freq is None:"
  },
  {
    "id" : "af398c72-51ae-4a71-b52b-a8b60b477521",
    "prId" : 28681,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28681#pullrequestreview-296563409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c676cfdb-7719-44f4-87f7-b028a342c7ee",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is not correct, I think you just need to \r\n```data.asfreq(freq=freq).div(data.shift(....))```",
        "createdAt" : "2019-10-02T12:05:31Z",
        "updatedAt" : "2019-11-14T09:11:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "11531c4f-7eec-4cfe-978c-434f02ed9cef",
        "parentId" : "c676cfdb-7719-44f4-87f7-b028a342c7ee",
        "authorId" : "50a8f1f9-e426-4547-baa9-0c028b12e95f",
        "body" : "I also like a try at `.asfreq`. However, this `.asfreq` approach is opposite to existing tests in the pandas/tests/series/test_timeseries.py.\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/0436570f05c3b6e7bbb7c7d8fc8fa2f28a0420a8/pandas/tests/series/test_timeseries.py#L394-L403\r\n\r\nthe above test expects that `freq` and `periods` have the same behavior. I don't know it's ok to do that but, I really don't want to break existing tests.",
        "createdAt" : "2019-10-02T22:34:37Z",
        "updatedAt" : "2019-11-14T09:11:40Z",
        "lastEditedBy" : "50a8f1f9-e426-4547-baa9-0c028b12e95f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b0f5c037255895a176fdfd3f651f13ddb2b4a62",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +10444,10448 @@\n        rs = data.div(data.shift(periods=periods, freq=freq, axis=axis, **kwargs)) - 1\n        rs = rs.loc[~rs.index.duplicated()]\n        rs = rs.reindex_like(data)\n        if freq is None:"
  },
  {
    "id" : "822a5d20-27aa-4487-8fe3-a8c6ca45444a",
    "prId" : 28845,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28845#pullrequestreview-298915032",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce418112-cf40-409a-b3f1-77d980f5de89",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@datapythonista do we want the blank lines on 2280, 2283, 2285, ...?",
        "createdAt" : "2019-10-08T16:39:48Z",
        "updatedAt" : "2019-10-10T12:52:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "25c45584-df72-427d-9709-7562e3e4b254",
        "parentId" : "ce418112-cf40-409a-b3f1-77d980f5de89",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Not sure if we have a convention for that, but I don't think so. I think it'll be more readable without them, and markdown requires them for some implementations, but I don't think rst does.",
        "createdAt" : "2019-10-08T17:08:24Z",
        "updatedAt" : "2019-10-10T12:52:06Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "38b90e084bebe4df20284d18a9698fa968cc4957",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +2278,2282 @@\n            * Series:\n\n                - default is 'index'\n                - allowed values are: {'split','records','index','table'}."
  },
  {
    "id" : "4ba6c612-04d2-4669-8ab0-3df27e424061",
    "prId" : 28845,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28845#pullrequestreview-298915032",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc8000e8-f466-4f9b-9acc-d0dac243467a",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Using next should make it a link I think:\r\n```\r\n:meth:`PeriodIndex.asfreq`\r\n``` ",
        "createdAt" : "2019-10-08T17:10:59Z",
        "updatedAt" : "2019-10-10T12:52:06Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "38b90e084bebe4df20284d18a9698fa968cc4957",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +7931,7935 @@            * 'backfill' / 'bfill': use NEXT valid observation to fill.\n        how : {'start', 'end'}, default end\n            For PeriodIndex only (see PeriodIndex.asfreq).\n        normalize : bool, default False\n            Whether to reset output index to midnight."
  },
  {
    "id" : "21869a70-540d-43f9-a5c7-15553ddfd775",
    "prId" : 28853,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28853#pullrequestreview-299059643",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c33bafc3-40fc-4e6d-a764-ee4496f72d89",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I don't remember why i added this, but ok if everything passes",
        "createdAt" : "2019-10-08T21:25:33Z",
        "updatedAt" : "2019-10-08T21:25:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7812a2ca242c98329600b901b8fa4f4d47613be1",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +4556,4560 @@        # check if we are a multi reindex\n        if self._needs_reindex_multi(axes, method, level):\n            return self._reindex_multi(axes, copy, fill_value)\n\n        # perform the reindex on the axes"
  },
  {
    "id" : "c5cd68da-830f-482e-b582-d5cc0ea5f2b5",
    "prId" : 29062,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29062#pullrequestreview-304223183",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47e26173-239a-4609-acd9-480386fe6ccc",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "are attrs linked to _metadata in any way?",
        "createdAt" : "2019-10-17T21:43:39Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2d485138-b18a-40a3-8b46-88cd604caa20",
        "parentId" : "47e26173-239a-4609-acd9-480386fe6ccc",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Not yet, though perhaps eventually if we can find a suitable way to deprecate `_metadata` for subclasses. With this PR, pandas doesn't use `_metadata` itself anymore (previously, we just used it for `Series.name`.",
        "createdAt" : "2019-10-17T23:31:36Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "a3519a75-254d-448f-b42e-82919050a0bf",
        "parentId" : "47e26173-239a-4609-acd9-480386fe6ccc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "wait, then we *should* deprecate _metadata right?",
        "createdAt" : "2019-10-18T17:16:19Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "59eb4e1e-d9f4-4856-a85e-2fab6231e8c3",
        "parentId" : "47e26173-239a-4609-acd9-480386fe6ccc",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Most likely? I have no idea who is using it or what they're using it for though.",
        "createdAt" : "2019-10-18T22:00:18Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "fc9a9ede-6dfe-4966-bb99-6fee30a84be2",
        "parentId" : "47e26173-239a-4609-acd9-480386fe6ccc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok can you open an issue to deprecate that",
        "createdAt" : "2019-10-19T17:23:35Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "60fd202964b10ea1f0755503c02b88d5ec302de6",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +2060,2064 @@            _data=self._data,\n            _typ=self._typ,\n            _metadata=self._metadata,\n            attrs=self.attrs,\n            **meta"
  },
  {
    "id" : "12353b5a-40d0-43b9-a051-751dfabc5f5e",
    "prId" : 29062,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29062#pullrequestreview-303970591",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3f31a2b-8e76-4359-b57e-31512cb6e896",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Why is this required in the TYPE_CHECKING block?",
        "createdAt" : "2019-10-18T14:40:32Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "3842952c-384d-4e1f-a33f-6c7651efbc88",
        "parentId" : "b3f31a2b-8e76-4359-b57e-31512cb6e896",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Otherwise you'd have a mutable default shared by all the classes. Not sure if there's a better way, but this is the workaround I saw on some mypy thread.",
        "createdAt" : "2019-10-18T14:45:29Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f4ed4a09-c908-4955-b0c5-2b39b037fdd5",
        "parentId" : "b3f31a2b-8e76-4359-b57e-31512cb6e896",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm can you maybe share the error? We already have the `_metadata` defaulting to `[]` so not clear on the distinction.",
        "createdAt" : "2019-10-18T15:03:22Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e9845c52-92b5-4069-a790-07a4c33ca39f",
        "parentId" : "b3f31a2b-8e76-4359-b57e-31512cb6e896",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "There wouldn't be an error, it'd typecheck just fine.\r\n\r\nIt's a runtime issue though, since you could do `pd.Series.attrs['a'] = 'foo'`, which would affect all the instances.\r\n\r\nWith python 3.6+, we can just do\r\n\r\n```\r\nattrs : Dict[Hashable, Any]\r\n```\r\n\r\nbut the workaround for 3.5 is to put it in a TYPE_CHECKING block.",
        "createdAt" : "2019-10-18T15:25:17Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "ccdd4ff6-6192-4bc7-805c-65ada0bff40d",
        "parentId" : "b3f31a2b-8e76-4359-b57e-31512cb6e896",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Ah OK. I wasn't getting the link between runtime and TYPE_CHECKING but understood now. So I guess should either wait for Py35 to drop or should add a TODO here to clean up when that happens and add the definition without declaration",
        "createdAt" : "2019-10-18T15:31:54Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "60fd202964b10ea1f0755503c02b88d5ec302de6",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +191,195 @@    _data = None  # type: BlockManager\n\n    if TYPE_CHECKING:\n        # TODO(PY36): replace with _attrs : Dict[Hashable, Any]\n        # We need the TYPE_CHECKING, because _attrs is not a class attribute"
  },
  {
    "id" : "9f29de2f-1e82-4132-8582-3f318a867d52",
    "prId" : 29062,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29062#pullrequestreview-304004775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de3da735-8b4f-4472-bce6-38369cc0dc48",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Minor but any reason to prefer `Mapping` over `Dict`? I think should stick with the latter generically",
        "createdAt" : "2019-10-18T14:41:33Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e73421fc-5987-4acb-ab63-67a1db013019",
        "parentId" : "de3da735-8b4f-4472-bce6-38369cc0dc48",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is what xarray does. It's probably best to be forgiving in what we accept. This isn't user-facing (yet), but they could give an OrderedDict say.",
        "createdAt" : "2019-10-18T14:46:44Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "1110e7b9-10fa-4a30-bf7f-247d418a05eb",
        "parentId" : "de3da735-8b4f-4472-bce6-38369cc0dc48",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Dict would encompass OrderedDict since its its parent, so won't make a difference there. There are some edge cases where this would make a difference (i.e. if we called `attrs.copy()` but I think should just stick with `Dict` since we don't have this elsewhere and maybe leave to a separate exercise if we wanted to really fine tune those types",
        "createdAt" : "2019-10-18T15:00:28Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "96d1ccd5-e07f-458e-9155-40ccf47b23a3",
        "parentId" : "de3da735-8b4f-4472-bce6-38369cc0dc48",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'd prefer to match xarray here.",
        "createdAt" : "2019-10-18T15:37:55Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "474d8f4c-78b5-46d0-8d20-0b568638a3b2",
        "parentId" : "de3da735-8b4f-4472-bce6-38369cc0dc48",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I'm not against it but this isn't the place to start. We don't do this anywhere else.\r\n\r\n```sh\r\n$ grep \"Dict\\[\" -r pandas --include=\"*.py\" | wc -l\r\n      60\r\n$ grep \"Mapping\\[\" -r pandas --include=\"*.py\" | wc -l\r\n       0\r\n```\r\n\r\nSo if you feel strongly about matching xarray should be done in a separate PR comprehensively instead of just one-off here",
        "createdAt" : "2019-10-18T15:40:31Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "28eac25b-baee-4e3f-af6a-700add584380",
        "parentId" : "de3da735-8b4f-4472-bce6-38369cc0dc48",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Maybe let's step back: why isn't Mapping the correct type?",
        "createdAt" : "2019-10-18T15:58:41Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "a1739197-4823-47b0-8606-6ee38e9aacc4",
        "parentId" : "de3da735-8b4f-4472-bce6-38369cc0dc48",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "It's like asking why is `Dict` not the correct type? For practical purposes there is probably no difference, but for consistency it's not clear why we would designate one-off annotations as `Mapping` when 99% of the other annotations use `Dict`. Even within this PR there is mixed usage and the title makes explicit mention of storing in a `dict` not a mapping\r\n\r\nI don't think asking for internal type consistency is a big deal? Like I said I'm not against matching array but if it's something you feel strongly about should be reviewed across the code base instead of just cherry-picked ",
        "createdAt" : "2019-10-18T16:06:22Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "0136866f-c7e3-49dd-9e1b-30bec588a40f",
        "parentId" : "de3da735-8b4f-4472-bce6-38369cc0dc48",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "from https://github.com/python/typeshed/blob/master/CONTRIBUTING.md\r\n\r\nSome further tips for good type hints:\r\n\r\navoid invariant collection types (List, Dict) in argument positions, in favor of covariant types like Mapping or Sequence;",
        "createdAt" : "2019-10-18T16:26:22Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "721f355c-e85f-4c1a-a328-504cf9b491f5",
        "parentId" : "de3da735-8b4f-4472-bce6-38369cc0dc48",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The storage is a dict, the argument is a mapping. ",
        "createdAt" : "2019-10-18T16:29:18Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "81d0d1c4-6ed5-4629-af10-f0ebefbde1f9",
        "parentId" : "de3da735-8b4f-4472-bce6-38369cc0dc48",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "OK. I wasn't expecting this be such a sticking point so whatever everyone else is fine with works\r\n\r\n@simonjayhawkins thanks for the link. Interestingly enough there are still more Dict appearances in typeshed than Mapping so guess it doesn't matter too much",
        "createdAt" : "2019-10-18T16:33:26Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "60fd202964b10ea1f0755503c02b88d5ec302de6",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +206,210 @@        copy: bool = False,\n        dtype: Optional[Dtype] = None,\n        attrs: Optional[Mapping[Hashable, Any]] = None,\n        fastpath: bool = False,\n    ):"
  },
  {
    "id" : "cd0168e3-2fb4-4d2d-9207-ed0e939aed19",
    "prId" : 29062,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29062#pullrequestreview-304157017",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11566f1c-90a3-43ff-84fe-13b120685c36",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Been a while since we've added something to a frame - do we have to make any consideration for dot access for frames where this was previously a valid label?",
        "createdAt" : "2019-10-18T14:42:59Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "9e85ba32-1eb5-4ee2-b6c9-ab165f1cc9f2",
        "parentId" : "11566f1c-90a3-43ff-84fe-13b120685c36",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Don't think so. We have a blanket statement that `.` is a convenience.",
        "createdAt" : "2019-10-18T14:47:14Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "918af1c3-1350-4c81-b249-eeba02cd4c08",
        "parentId" : "11566f1c-90a3-43ff-84fe-13b120685c36",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "FWIW, we don't need to expose this publicly yet. We can call it `._attrs` until we're ready.\r\n\r\nMy main motivation is ease of implementation in https://github.com/pandas-dev/pandas/pull/28394.\r\n\r\nBut xarray is an example of this being useful in practice.",
        "createdAt" : "2019-10-18T22:01:44Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "60fd202964b10ea1f0755503c02b88d5ec302de6",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +249,253 @@\n    @property\n    def attrs(self) -> Dict[Hashable, Any]:\n        \"\"\"\n        Dictionary of global attributes on this object."
  },
  {
    "id" : "9a4ace7e-8b38-4e66-825c-e7d8dac32417",
    "prId" : 29062,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29062#pullrequestreview-304600286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f0c0fa1-2f39-4a8a-b404-9a4e8273ed61",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "self.attrs.update(other) ?",
        "createdAt" : "2019-10-19T17:24:11Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4ac3cf20-337a-4cad-8914-dc174cda53d3",
        "parentId" : "7f0c0fa1-2f39-4a8a-b404-9a4e8273ed61",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "That'd work for now, but we'll need a for loop in my other PR since we'll have per-attr logic to resolve these.",
        "createdAt" : "2019-10-21T14:23:21Z",
        "updatedAt" : "2019-10-21T14:28:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "60fd202964b10ea1f0755503c02b88d5ec302de6",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +5250,5254 @@        if isinstance(other, NDFrame):\n            for name in other.attrs:\n                self.attrs[name] = other.attrs[name]\n            # For subclasses using _metadata.\n            for name in self._metadata:"
  },
  {
    "id" : "34dcad59-04d1-4b65-a76b-8a87e35d436b",
    "prId" : 29066,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29066#pullrequestreview-304190453",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "180bf496-325e-4658-a9e3-8e65422a13bd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does this raise in the test suite?",
        "createdAt" : "2019-10-18T17:17:02Z",
        "updatedAt" : "2019-10-19T19:03:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c92feb93-1450-495c-a360-4d814a98a5e3",
        "parentId" : "180bf496-325e-4658-a9e3-8e65422a13bd",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : " moved the first assertion to the `else` block to clarify that it is not the assertion that is raising.\r\n\r\nThere _are_ places in the test suite where the `ref._maybe_cache_changed` call raises an `AssertionError` because of a shape mismatch, but AFAICT checking for that situation and only calling it in non-raising cases breaks several tests",
        "createdAt" : "2019-10-19T02:01:02Z",
        "updatedAt" : "2019-10-19T19:03:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "23f322a340cd50980368e14c76a7ef32ea408784",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +3358,3362 @@                try:\n                    ref._maybe_cache_changed(cacher[0], self)\n                except AssertionError:\n                    # ref._data.setitem can raise\n                    #  AssertionError because of shape mismatch"
  },
  {
    "id" : "2b37fc39-2a93-4a02-b999-b4b30d2a9c6a",
    "prId" : 29140,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29140#pullrequestreview-304853847",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5d8e2e6-6b48-4678-a62c-7b54a7c34dd2",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Ultimately I am trying to get rid of all of the internal `_AXIS_*` functions and mappings in core.generic, which seem like relics of the panel days\r\n\r\nIf we buy into just having `index` and `columns` being the potential axes in that order things can be greatly simplified",
        "createdAt" : "2019-10-21T21:15:14Z",
        "updatedAt" : "2020-01-09T17:06:35Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5d812cfdf0c3178d8415cea396c69780347a3bf",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +1075,1079 @@        result = self if inplace else self.copy(deep=copy)\n\n        for axis_no, replacements in enumerate((index, columns)):\n            if replacements is None:\n                continue"
  },
  {
    "id" : "03ae14b2-0907-4bb3-8db4-0e9119a1af35",
    "prId" : 29140,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29140#pullrequestreview-340227153",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad27acf6-ed75-41f2-9916-46496a56dc43",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Couldn't seem to get dict unpacking to place nicely with mypy. @simonjayhawkins",
        "createdAt" : "2020-01-09T00:21:02Z",
        "updatedAt" : "2020-01-09T17:06:35Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5d812cfdf0c3178d8415cea396c69780347a3bf",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +4059,4063 @@\n        mapper = {self._info_axis_name: f}\n        return self.rename(**mapper)  # type: ignore\n\n    def add_suffix(self: FrameOrSeries, suffix: str) -> FrameOrSeries:"
  },
  {
    "id" : "94933d20-00f7-4267-ba33-347571b3b3ad",
    "prId" : 29373,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29373#pullrequestreview-312894477",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af3631be-f46b-4892-a7cb-2c45cfb6b6b1",
        "parentId" : null,
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "Not sure if the blank line is necessary ",
        "createdAt" : "2019-11-07T00:07:35Z",
        "updatedAt" : "2019-11-07T00:07:35Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f05feba5bbc7683083956322d752f7bd2e942b2",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2649,2653 @@            is responsible for engine disposal and connection closure for the SQLAlchemy\n            connectable See `here \\\n                <https://docs.sqlalchemy.org/en/13/core/connections.html>`_\n\n        schema : str, optional"
  },
  {
    "id" : "6ff62c8b-290c-4eeb-9696-452847ca66d2",
    "prId" : 29444,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29444#pullrequestreview-312739697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55c5cc94-72f0-48f9-9d60-996901f340f2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we have this in the Notes section as well (about replace=True for frac > 1)\r\n",
        "createdAt" : "2019-11-06T20:44:18Z",
        "updatedAt" : "2019-11-07T23:38:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d102f277-f54b-4be1-912b-db8aa8a5b0f8",
        "parentId" : "55c5cc94-72f0-48f9-9d60-996901f340f2",
        "authorId" : "340d1beb-6f1d-437f-ad6a-f695319282ed",
        "body" : "I added the Notes session",
        "createdAt" : "2019-11-06T21:00:27Z",
        "updatedAt" : "2019-11-07T23:38:00Z",
        "lastEditedBy" : "340d1beb-6f1d-437f-ad6a-f695319282ed",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfed6dfff7e0257eb4cb16d837b9a12ff7da7980",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +4970,4974 @@\n        An upsample sample of the ``DataFrame`` with replacement:\n        Note that `replace` parameter has to be `True` for `frac` parameter > 1.\n\n        >>> df.sample(frac=2, replace=True, random_state=1)"
  },
  {
    "id" : "a09fa9bf-e8a7-4e88-a773-1da989396cd9",
    "prId" : 29825,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29825#pullrequestreview-324972146",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0aff4de2-a7db-4eb9-a97d-def5ff6c9711",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "did you mean to use bool_t here?",
        "createdAt" : "2019-11-27T20:58:19Z",
        "updatedAt" : "2019-11-29T20:34:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "deee56d4-c863-4879-8bbe-a0ed652c123f",
        "parentId" : "0aff4de2-a7db-4eb9-a97d-def5ff6c9711",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yes.  We can't use `bool` here because NDFrame defines bool, see note on L142",
        "createdAt" : "2019-11-27T21:19:05Z",
        "updatedAt" : "2019-11-29T20:34:07Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2f530279-7ddd-4581-bc7c-e863c5ca9508",
        "parentId" : "0aff4de2-a7db-4eb9-a97d-def5ff6c9711",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, interesting",
        "createdAt" : "2019-12-01T23:29:04Z",
        "updatedAt" : "2019-12-01T23:29:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b8bca08c1f410a4f411d382a94c8b6107b7c3bef",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +5610,5614 @@        }\n\n    def astype(self, dtype, copy: bool_t = True, errors: str = \"raise\"):\n        \"\"\"\n        Cast a pandas object to a specified dtype ``dtype``."
  },
  {
    "id" : "cd4c6d2d-3f7b-4550-82f6-1956f5172655",
    "prId" : 29872,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29872#pullrequestreview-327829240",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7762ad5a-8a73-4033-a9ec-cce0dc86e43b",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is there a better way to do this than the double transpose?",
        "createdAt" : "2019-11-27T04:18:57Z",
        "updatedAt" : "2019-12-27T20:22:58Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "0baffccf-b6fe-49a7-ba0a-bb516f9a1322",
        "parentId" : "7762ad5a-8a73-4033-a9ec-cce0dc86e43b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "What do you have in mind?  Only having to worry about axis==0 is nice in part because we're going to work on block.values which can be 1D for EAs",
        "createdAt" : "2019-11-27T04:30:23Z",
        "updatedAt" : "2019-12-27T20:22:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f6cbb35a-dbc1-44a6-b29b-3209874abfb4",
        "parentId" : "7762ad5a-8a73-4033-a9ec-cce0dc86e43b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "come to think of it, EAs are going to present more poorly-behaved corner cases in the axis=1 case since they aren't preserved under transpose (if only they were 2D!)",
        "createdAt" : "2019-12-04T19:43:54Z",
        "updatedAt" : "2019-12-27T20:22:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "dc9ae3a6-42dd-447a-9227-770d9667fbb7",
        "parentId" : "7762ad5a-8a73-4033-a9ec-cce0dc86e43b",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "https://github.com/pandas-dev/pandas/pull/30091 fixes that.\r\n\r\nThe double transpose will be painfully slow for EAs, so it'd be nice to avoid it if possible, but I'm not sure if it is.",
        "createdAt" : "2019-12-05T20:23:41Z",
        "updatedAt" : "2019-12-27T20:22:58Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "567b88123e7d835605f9f8ddafdb333058fb414f",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +11088,11092 @@\n        if axis == 1:\n            return cum_func(self.T, axis=0, skipna=skipna, *args, **kwargs).T\n\n        def na_accum_func(blk_values):"
  },
  {
    "id" : "623c6915-028b-4c09-b525-fdaed4886d4d",
    "prId" : 29872,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29872#pullrequestreview-336818206",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e14250b-7a07-44c1-aedf-5cb899155c7a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you move to to pandas/core/internals/blocks.py (or maybe a new file, ops?)",
        "createdAt" : "2019-11-27T15:59:57Z",
        "updatedAt" : "2019-12-27T20:22:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ddb5f116-fcc6-438b-905e-88747fe5e1a4",
        "parentId" : "6e14250b-7a07-44c1-aedf-5cb899155c7a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Why?  The only internals-relevant thing here is the `self._data.apply` call at the end",
        "createdAt" : "2019-11-27T17:38:08Z",
        "updatedAt" : "2019-12-27T20:22:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e81dfc55-a9eb-40b7-b9a1-a91e41aea384",
        "parentId" : "6e14250b-7a07-44c1-aedf-5cb899155c7a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "exactly the point these are applied block ops and shoudn't be here. cleaning separating the ops and moving code out of generic.py is always a positive.",
        "createdAt" : "2019-11-27T17:40:14Z",
        "updatedAt" : "2019-12-27T20:22:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dd56a2fe-45d4-40b7-a3e7-929119d3518d",
        "parentId" : "6e14250b-7a07-44c1-aedf-5cb899155c7a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "let me clarify, let's move this to ops.py, this file is huge (just the na_accum_func)",
        "createdAt" : "2019-12-27T16:37:09Z",
        "updatedAt" : "2019-12-27T20:22:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ba53c228-a2f6-44ea-bce9-5cbbe0a6bb71",
        "parentId" : "6e14250b-7a07-44c1-aedf-5cb899155c7a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yah, im planning to move this to nanops in a follow-up (or at the very least after some caffeine)",
        "createdAt" : "2019-12-27T16:41:22Z",
        "updatedAt" : "2019-12-27T20:22:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "567b88123e7d835605f9f8ddafdb333058fb414f",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +11090,11094 @@            return cum_func(self.T, axis=0, skipna=skipna, *args, **kwargs).T\n\n        def na_accum_func(blk_values):\n            # We will be applying this function to block values\n            if blk_values.dtype.kind in [\"m\", \"M\"]:"
  },
  {
    "id" : "af5b016b-7cfd-4f74-b3ce-de3d01f6da2d",
    "prId" : 29991,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29991#pullrequestreview-326157902",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58d84ede-b33d-483c-9e1a-0e074a09345d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should we be generally standarizing on using ``bool_t`` rather than ``bool``?",
        "createdAt" : "2019-12-03T13:51:00Z",
        "updatedAt" : "2019-12-03T13:51:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "109bd0d7-0425-4a63-8b27-4ca62558b43a",
        "parentId" : "58d84ede-b33d-483c-9e1a-0e074a09345d",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "IMO probably not necessary. probably only a few modules where this pattern is needed.",
        "createdAt" : "2019-12-03T13:59:54Z",
        "updatedAt" : "2019-12-03T13:59:54Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "a37849ff634dd718a615a329bcab2a01741a26bf",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +1920,1924 @@\n    @property\n    def empty(self) -> bool_t:\n        \"\"\"\n        Indicator whether DataFrame is empty."
  },
  {
    "id" : "c5cf50fc-e40c-4fbe-be80-4317ee154f15",
    "prId" : 29991,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29991#pullrequestreview-326523580",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "946cd6d3-8834-40d3-8566-9dc4edbf7193",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "why do we have bool here and above but bool_t below?  i expected to need bool_t throughout\r\n\r\nalso i think `other` should have same type as self here",
        "createdAt" : "2019-12-03T16:46:26Z",
        "updatedAt" : "2019-12-03T16:46:26Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "73c75790-2523-4d5d-8ec4-1ed10cae4d9f",
        "parentId" : "946cd6d3-8834-40d3-8566-9dc4edbf7193",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm yea curious what the pattern here is; do only things after `def bool` need the alias? Or do you know if this is no longer an issue with Py36 onwards?",
        "createdAt" : "2019-12-03T18:57:20Z",
        "updatedAt" : "2019-12-03T18:57:20Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "0274ced4-47c9-4dca-bcfc-ed0c26b57963",
        "parentId" : "946cd6d3-8834-40d3-8566-9dc4edbf7193",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "That's what appears to be the case. `def bool` is in the class namespace and doesn't effect the use of bool inside other methods see L8658. However, the functions signatures must be evaluated in the class namespace since any types added to the function signatures after the `def bool` need to use the alias.",
        "createdAt" : "2019-12-03T22:12:36Z",
        "updatedAt" : "2019-12-03T22:12:36Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "274b84c1-0d78-4bfd-b940-28152fa81260",
        "parentId" : "946cd6d3-8834-40d3-8566-9dc4edbf7193",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> also i think `other` should have same type as self here\r\n\r\nhmm, the types should be representative of the runtime behaviour. should `pd.Series()._indexed_same(pd.DataFrame())` raise?\r\n\r\n```\r\n>>> pd.__version__\r\n'0.26.0.dev0+1155.ged20822a5'\r\n>>>\r\n>>> pd.DataFrame()._indexed_same(pd.DataFrame())\r\nTrue\r\n>>>\r\n>>> pd.Series()._indexed_same(pd.DataFrame())\r\nTrue\r\n>>>\r\n>>> pd.Series()._indexed_same(pd.Series())\r\nTrue\r\n>>>\r\n>>> pd.DataFrame()._indexed_same(pd.Series())\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\simon\\pandas\\pandas\\core\\generic.py\", line 1400, in _indexed_same\r\n    self._get_axis(a).equals(other._get_axis(a)) for a in self._AXIS_ORDERS\r\n  File \"C:\\Users\\simon\\pandas\\pandas\\core\\generic.py\", line 1400, in <genexpr>\r\n    self._get_axis(a).equals(other._get_axis(a)) for a in self._AXIS_ORDERS\r\n  File \"C:\\Users\\simon\\pandas\\pandas\\core\\generic.py\", line 444, in _get_axis\r\n    name = self._get_axis_name(axis)\r\n  File \"C:\\Users\\simon\\pandas\\pandas\\core\\generic.py\", line 441, in _get_axis_name\r\n    raise ValueError(\"No axis named {0} for object type {1}\".format(axis, cls))\r\nValueError: No axis named columns for object type <class 'pandas.core.series.Series'>\r\n>>>\r\n```",
        "createdAt" : "2019-12-03T22:26:06Z",
        "updatedAt" : "2019-12-03T22:26:06Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "e5164fce-360c-4a3f-be3a-9e57dba5b952",
        "parentId" : "946cd6d3-8834-40d3-8566-9dc4edbf7193",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'd ask for bool_t to be made consistent across the module, totally OK with leaving `other` here as out of scope",
        "createdAt" : "2019-12-03T23:45:50Z",
        "updatedAt" : "2019-12-03T23:45:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a37849ff634dd718a615a329bcab2a01741a26bf",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +1397,1401 @@    # Comparison Methods\n\n    def _indexed_same(self, other) -> bool:\n        return all(\n            self._get_axis(a).equals(other._get_axis(a)) for a in self._AXIS_ORDERS"
  },
  {
    "id" : "ee323b2e-5daf-4cab-964c-24bfd20eef8c",
    "prId" : 30402,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30402#pullrequestreview-336262709",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3c38345-4de7-4223-ada8-b733e6cd6e6c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "these all need a versionadded 1.0.0 tag",
        "createdAt" : "2019-12-24T16:27:30Z",
        "updatedAt" : "2019-12-26T08:31:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6c96e4a7-f87f-4a9e-8475-7886411c7ad7",
        "parentId" : "b3c38345-4de7-4223-ada8-b733e6cd6e6c",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "added!",
        "createdAt" : "2019-12-24T19:16:35Z",
        "updatedAt" : "2019-12-26T08:31:36Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d02b651792de516ab73c21be7430681c8e17dde5",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +4111,4115 @@             Puts NaNs at the beginning if `first`; `last` puts NaNs at the\n             end.\n        ignore_index : bool, default False\n             If True, the resulting axis will be labeled 0, 1, …, n - 1.\n"
  },
  {
    "id" : "f62e3faa-2a39-4bcd-b4eb-fcbce599a71c",
    "prId" : 30460,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30460#pullrequestreview-336388875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a30da118-1e71-4846-8446-b5fb37eac873",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, in the future let's refactor if possible.",
        "createdAt" : "2019-12-25T23:26:20Z",
        "updatedAt" : "2019-12-25T23:26:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9750c98e98398941a3f50d931e5babec97c182c6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +11132,11136 @@\n        y = com.values_from_object(self).copy()\n        d = self._construct_axes_dict()\n        d[\"copy\"] = False\n"
  },
  {
    "id" : "65ed23a6-4e53-4fe3-ae37-adaa282e3331",
    "prId" : 30460,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30460#pullrequestreview-336388893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec39dd9a-7064-453a-91d2-d279561f4949",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "also add issue numbers here for future reference (follown)",
        "createdAt" : "2019-12-25T23:27:18Z",
        "updatedAt" : "2019-12-25T23:27:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9750c98e98398941a3f50d931e5babec97c182c6",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +11136,11140 @@\n        if issubclass(y.dtype.type, (np.datetime64, np.timedelta64)):\n            # numpy 1.18 started sorting NaTs at the end instead of beginning,\n            #  so we need to work around to maintain backwards-consistency.\n            orig_dtype = y.dtype"
  },
  {
    "id" : "8affbb92-577f-4859-9e1d-109517b35b83",
    "prId" : 30613,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30613#pullrequestreview-337922447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e58ee489-949e-40a0-bc00-60aaeb6aae12",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why wouldn't you instead type .fillna?",
        "createdAt" : "2020-01-02T03:59:06Z",
        "updatedAt" : "2020-01-02T10:19:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d1821549-4c78-4047-bc8e-928b49c47085",
        "parentId" : "e58ee489-949e-40a0-bc00-60aaeb6aae12",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : ".fillna is aready typed as ``Optional[FrameOrSeries]``. The problem here is that ``data`` is typed to ``FrameORSeries`` and it can't accept reassigning type, per mypy's rules. the alternative to the above would be:\r\n\r\n```python\r\nfilled = self.fillna(method=fill_method, axis=axis, limit=limit)\r\nassert isinstance(filled, type(self))\r\ndata = filled\r\n```\r\n\r\nwhich gets repetive with a code base the size of Pandas', IMO.",
        "createdAt" : "2020-01-02T09:54:48Z",
        "updatedAt" : "2020-01-02T16:17:29Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "0122f1fc-e32e-41ef-9338-2c7fcc8de6ad",
        "parentId" : "e58ee489-949e-40a0-bc00-60aaeb6aae12",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Are you saying the Optional is throwing it off or something else?",
        "createdAt" : "2020-01-02T16:48:00Z",
        "updatedAt" : "2020-01-02T16:48:01Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "53696310-c62b-4c55-b8f3-729d612643f2",
        "parentId" : "e58ee489-949e-40a0-bc00-60aaeb6aae12",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Yes, but by design from the mypy folks: Mypy complains if a parameter has its type redefined to a different/broader type. \r\n\r\nSo if ‘data’ has been defined as a type DataFrame, mypy will complain if we try to redefine ‘data’ to be Optional[DataFrame].",
        "createdAt" : "2020-01-02T16:57:22Z",
        "updatedAt" : "2020-01-02T16:57:22Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "77d10b89-6a25-41a1-a92c-797ef94df766",
        "parentId" : "e58ee489-949e-40a0-bc00-60aaeb6aae12",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh I c, since we have inplace args the return type must be Optional. this is super annoying. Let's deprecate inplace! \r\n\r\nyeah ok i understand why you need this. ",
        "createdAt" : "2020-01-03T01:04:00Z",
        "updatedAt" : "2020-01-03T01:04:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6fd326d5a249967f9b6be60fc3c5f7366d914684",
    "line" : 508,
    "diffHunk" : "@@ -1,1 +9885,9889 @@            data = self\n        else:\n            data = self._ensure_type(\n                self.fillna(method=fill_method, axis=axis, limit=limit)\n            )"
  },
  {
    "id" : "868b73d3-0b39-4f4f-9c90-642d40ffe395",
    "prId" : 30615,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30615#pullrequestreview-338351160",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b84e5cbb-890c-4c7f-8e62-bdc68a5bab58",
        "parentId" : null,
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "I think you could take a look here: the default is `None` after your change, and if `None`, `is_copy` will be set to `True`. Here `is_copy` was originally `False`, but as you removed `is_copy`, this will be set to `True`.",
        "createdAt" : "2020-01-02T07:35:49Z",
        "updatedAt" : "2020-01-06T02:08:07Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      },
      {
        "id" : "7f2856c3-dcfe-427d-ac1e-831c83a46bfc",
        "parentId" : "b84e5cbb-890c-4c7f-8e62-bdc68a5bab58",
        "authorId" : "39ac2f3d-6413-4b50-a840-fd3c5ff19ed8",
        "body" : "Tried reverting that change and it still fails even if `is_copy=False` .... seems the initial change of default `is_copy` from `True` to   `None` is breaking those tests  -- prob something silly ive done  with the if else condition",
        "createdAt" : "2020-01-03T00:03:32Z",
        "updatedAt" : "2020-01-06T02:08:07Z",
        "lastEditedBy" : "39ac2f3d-6413-4b50-a840-fd3c5ff19ed8",
        "tags" : [
        ]
      },
      {
        "id" : "8af10053-f060-4a29-8c15-9973ab7a67db",
        "parentId" : "b84e5cbb-890c-4c7f-8e62-bdc68a5bab58",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "right, i meant if those are intended, you might need to take care of warning message changes caused by it",
        "createdAt" : "2020-01-03T06:27:55Z",
        "updatedAt" : "2020-01-06T02:08:07Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      },
      {
        "id" : "b28146f0-99a9-4ce3-aada-f1da109227c0",
        "parentId" : "b84e5cbb-890c-4c7f-8e62-bdc68a5bab58",
        "authorId" : "39ac2f3d-6413-4b50-a840-fd3c5ff19ed8",
        "body" : "ah ok thanks - yeh think i found a workaround now.",
        "createdAt" : "2020-01-04T12:23:51Z",
        "updatedAt" : "2020-01-06T02:08:07Z",
        "lastEditedBy" : "39ac2f3d-6413-4b50-a840-fd3c5ff19ed8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e914148c91c28255c723c0c3d9bb6a1922cbbe3e",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +5027,5031 @@\n        locs = rs.choice(axis_length, size=n, replace=replace, p=weights)\n        return self.take(locs, axis=axis)\n\n    _shared_docs["
  },
  {
    "id" : "b201b316-c563-4085-b5fa-90af88ac76bd",
    "prId" : 30615,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30615#pullrequestreview-339282793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57dc8118-2b35-4aeb-b972-6177c4117083",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Were there test failures if you didn't do this `d.copy()` step?",
        "createdAt" : "2020-01-07T10:36:47Z",
        "updatedAt" : "2020-01-07T10:36:48Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f8eccd72-d684-4938-b574-4d546ad75aad",
        "parentId" : "57dc8118-2b35-4aeb-b972-6177c4117083",
        "authorId" : "39ac2f3d-6413-4b50-a840-fd3c5ff19ed8",
        "body" : "Yes, it was breaking builds with SettingwithCopyError see https://github.com/pandas-dev/pandas/pull/30615#discussion_r363065280 and lower bit of https://github.com/pandas-dev/pandas/pull/30615#issuecomment-570455190",
        "createdAt" : "2020-01-07T14:50:24Z",
        "updatedAt" : "2020-01-07T17:55:59Z",
        "lastEditedBy" : "39ac2f3d-6413-4b50-a840-fd3c5ff19ed8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e914148c91c28255c723c0c3d9bb6a1922cbbe3e",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +7025,7029 @@        missing = locs == -1\n        d = self.take(locs)\n        data = d.copy()\n        data.index = where\n        data.loc[missing] = np.nan"
  },
  {
    "id" : "5c7c1824-8fee-432c-973d-a0bb902a69e2",
    "prId" : 30798,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30798#pullrequestreview-339832741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65bd3687-928f-4520-ba70-39f0172601d3",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Thanks! Can you also add this in the reference docs (where you added it in https://github.com/pandas-dev/pandas/pull/29062/files)",
        "createdAt" : "2020-01-08T12:30:43Z",
        "updatedAt" : "2020-01-08T13:12:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0e7af952f3a4af9b59a60eef4224f4c44e08e35",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +235,239 @@        .. warning::\n\n           attrs is experimental and may change without warning.\n        \"\"\"\n        if self._attrs is None:"
  },
  {
    "id" : "0e233796-c5b5-47fc-9931-5e9622722776",
    "prId" : 30852,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30852#pullrequestreview-355681703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aca84605-180b-49cb-a1bb-8ac5f3fab308",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "huh?",
        "createdAt" : "2020-02-09T22:21:55Z",
        "updatedAt" : "2020-05-27T03:35:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "02adedff-c2c0-4c8d-b95e-e2fea1af8469",
        "parentId" : "aca84605-180b-49cb-a1bb-8ac5f3fab308",
        "authorId" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "body" : "Again, here we are handling `Series.differences(..., axis=1)`.\r\nIn general, we may always stack results in a new axis. For example, we may want to stack result of comparing two ``Series`` on `axis=1`, and in future cases we may want to stack result of comparing two ``DataFrame`` on `axis=2` etc.",
        "createdAt" : "2020-02-10T04:01:01Z",
        "updatedAt" : "2020-05-27T03:35:32Z",
        "lastEditedBy" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "007eeb71ffecca19d5b54ce4ea81d4b2517bcefe",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +8473,8477 @@        diff = concat([self, other], axis=axis, keys=keys)\n\n        if axis >= self.ndim:\n            # No need to reorganize data if stacking on new axis\n            # This currently applies for stacking two Series on columns"
  },
  {
    "id" : "452c1a9f-44c7-40bf-afbc-e1d4ae418092",
    "prId" : 30852,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30852#pullrequestreview-374733696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e292b8b4-67f9-4165-936a-ae3b0e55ba5c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why are you doing this?",
        "createdAt" : "2020-02-09T22:22:12Z",
        "updatedAt" : "2020-05-27T03:35:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f13893af-643d-475b-bb0c-2eaa83d1115f",
        "parentId" : "e292b8b4-67f9-4165-936a-ae3b0e55ba5c",
        "authorId" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "body" : "This is to deal with the same issue as #30485. I want to reorder the index levels according to their position, and not the index names. For example, if we stack the results on `axis='columns'`, we want to reorder the levels from `[0, 1]` to `[1, 0]` after we do concatenation with `keys=[\"self\", \"other\"]`. In the rare that user dataframe has columns name `df.columns.name == [0]`, this would otherwise cause error.\r\n\r\nThat said, given this issue has affected 2 different places, we may want to refactor the `df.reorder_levels` method so we can indicate whether we want to reorder the positions explicitly, similar to what @TomAugspurger mentioned here #30289.",
        "createdAt" : "2020-02-10T04:10:37Z",
        "updatedAt" : "2020-05-27T03:35:32Z",
        "lastEditedBy" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "tags" : [
        ]
      },
      {
        "id" : "3104946b-2c21-4b32-b6d4-89ea274609f1",
        "parentId" : "e292b8b4-67f9-4165-936a-ae3b0e55ba5c",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I don't think this will work for MultiIndex at all",
        "createdAt" : "2020-03-13T22:01:38Z",
        "updatedAt" : "2020-05-27T03:35:32Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d8fcb481-18f8-4ced-bf6e-650e2af79d81",
        "parentId" : "e292b8b4-67f9-4165-936a-ae3b0e55ba5c",
        "authorId" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "body" : "@WillAyd It works. Actually this was written with MultiIndex in mind. \r\nAnyway I have added tests for MultiIndex cases. Can you review?",
        "createdAt" : "2020-03-14T15:22:29Z",
        "updatedAt" : "2020-05-27T03:35:32Z",
        "lastEditedBy" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "007eeb71ffecca19d5b54ce4ea81d4b2517bcefe",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +8479,8483 @@\n        ax = diff._get_axis(axis)\n        ax_names = np.array(ax.names)\n\n        # set index names to positions to avoid confusion"
  },
  {
    "id" : "95e15f81-bd60-4345-bf5c-011264b8f71a",
    "prId" : 30852,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30852#pullrequestreview-391731457",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77d938b4-7d35-4951-a32a-ba6d2efef713",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think you need a check if these are not the same type (and raise), e.g. ```s.compare(df)``` and ```s.compare(5)``` should raise",
        "createdAt" : "2020-04-10T20:59:15Z",
        "updatedAt" : "2020-05-27T03:35:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2a9063cb-a0ae-485c-9dc9-0f363cbece0b",
        "parentId" : "77d938b4-7d35-4951-a32a-ba6d2efef713",
        "authorId" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "body" : "added the type checking, thanks for suggestion",
        "createdAt" : "2020-04-11T03:23:55Z",
        "updatedAt" : "2020-05-27T03:35:32Z",
        "lastEditedBy" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "007eeb71ffecca19d5b54ce4ea81d4b2517bcefe",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +8442,8446 @@    ):\n        from pandas.core.reshape.concat import concat\n\n        if type(self) is not type(other):\n            cls_self, cls_other = type(self).__name__, type(other).__name__"
  },
  {
    "id" : "2fa5888f-55c9-48fd-b378-70ca6e839f06",
    "prId" : 30852,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30852#pullrequestreview-412312711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0539aa3e-afac-46a8-9347-ff3cabba3b67",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a vesionadded 1.1 tag here",
        "createdAt" : "2020-05-12T13:21:16Z",
        "updatedAt" : "2020-05-27T03:35:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "26fe3319-0190-4065-8d42-a39933f0ed19",
        "parentId" : "0539aa3e-afac-46a8-9347-ff3cabba3b67",
        "authorId" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "body" : "done",
        "createdAt" : "2020-05-15T02:50:42Z",
        "updatedAt" : "2020-05-27T03:35:32Z",
        "lastEditedBy" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "007eeb71ffecca19d5b54ce4ea81d4b2517bcefe",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +8407,8411 @@        \"compare\"\n    ] = \"\"\"\n        Compare to another %(klass)s and show the differences.\n\n        .. versionadded:: 1.1.0"
  },
  {
    "id" : "dc7bc420-c81d-4d60-8cee-15c139c70e49",
    "prId" : 30885,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30885#pullrequestreview-344491430",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d056c7e3-c97b-4cce-a107-e0f10cfd7f56",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is this actually being substituted?",
        "createdAt" : "2020-01-16T19:59:11Z",
        "updatedAt" : "2020-01-16T19:59:22Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "c0cb14ac-935d-451c-a104-9b518bd510a7",
        "parentId" : "d056c7e3-c97b-4cce-a107-e0f10cfd7f56",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "Looks like it, see below",
        "createdAt" : "2020-01-17T10:34:44Z",
        "updatedAt" : "2020-01-17T10:34:44Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      }
    ],
    "commit" : "160dbb31c22de81d60ae7258cb226ba99b54e0b7",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +589,593 @@            The values for the new index.\n\n        axis : %(axes_single_arg)s, default 0\n            The axis to update. The value 0 identifies the rows%(axis_description_sub)s.\n"
  },
  {
    "id" : "011e3c08-c60f-4ba6-baa5-7c7b350d742d",
    "prId" : 30929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30929#pullrequestreview-342686533",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54238d12-f0a9-4659-a672-7faf8e904aa5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "show other types here as well (they may not be convered), e.g. a datetime, a categorical",
        "createdAt" : "2020-01-14T04:30:23Z",
        "updatedAt" : "2020-01-24T02:29:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "31a7225b-92a9-4a6c-8ee2-55142ba85b6f",
        "parentId" : "54238d12-f0a9-4659-a672-7faf8e904aa5",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "done",
        "createdAt" : "2020-01-14T16:55:00Z",
        "updatedAt" : "2020-01-24T02:29:44Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa93a84474079de79d9cf101cc9d708ceeec2fab",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +5798,5802 @@        ...         \"d\": pd.Series([\"h\", \"i\", np.nan], dtype=np.dtype(\"O\")),\n        ...         \"e\": pd.Series([10, np.nan, 20], dtype=np.dtype(\"float\")),\n        ...         \"f\": pd.Series([np.nan, 100.5, 200], dtype=np.dtype(\"float\")),\n        ...     }\n        ... )"
  },
  {
    "id" : "08fe2a32-ff2c-4f52-a5b2-0545cd7401ce",
    "prId" : 30929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30929#pullrequestreview-343124087",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f06e230-a6be-4413-a6f0-a42dca640c72",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why only convert_integer? should there be a convert_bool as well? ",
        "createdAt" : "2020-01-15T04:24:50Z",
        "updatedAt" : "2020-01-24T02:29:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "19976c4b-7137-445d-948d-d08b78e8b14a",
        "parentId" : "9f06e230-a6be-4413-a6f0-a42dca640c72",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> why only convert_integer? should there be a convert_bool as well?\r\n\r\nProbably yes",
        "createdAt" : "2020-01-15T10:33:41Z",
        "updatedAt" : "2020-01-24T02:29:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa93a84474079de79d9cf101cc9d708ceeec2fab",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +5750,5754 @@        convert_string : bool, default True\n            Whether object dtypes should be converted to ``StringDtype()``.\n        convert_integer : bool, default True\n            Whether, if possible, conversion can be done to integer extension types.\n        convert_boolean : bool, defaults True"
  },
  {
    "id" : "b83640c4-c02d-44d8-a39d-222910a64457",
    "prId" : 30929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30929#pullrequestreview-342982531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e18c7619-121d-465d-b0c8-c157f07ded64",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what about floats that are integers with nulls? what is the option to convert here?",
        "createdAt" : "2020-01-15T04:25:47Z",
        "updatedAt" : "2020-01-24T02:29:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa93a84474079de79d9cf101cc9d708ceeec2fab",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +5783,5787 @@        If the dtype is integer, convert to an appropriate integer extension type.\n\n        If the dtype is numeric, and consists of all integers, convert to an\n        appropriate integer extension type.\n"
  },
  {
    "id" : "27403887-4eed-4c04-9928-e3f2618140b2",
    "prId" : 30929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30929#pullrequestreview-344948749",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9ddb4ae-0b0d-4e8f-b464-d6940012e288",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "make sure to add to the See Also of each of these",
        "createdAt" : "2020-01-18T15:38:05Z",
        "updatedAt" : "2020-01-24T02:29:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa93a84474079de79d9cf101cc9d708ceeec2fab",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +5702,5706 @@        to_datetime : Convert argument to datetime.\n        to_timedelta : Convert argument to timedelta.\n        to_numeric : Convert argument to numeric type.\n        convert_dtypes : Convert argument to best possible dtype.\n"
  },
  {
    "id" : "426590da-a400-4b7a-b2d1-658ecf694b02",
    "prId" : 30929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30929#pullrequestreview-345022941",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e081688-1f46-4611-8983-ecce2435637a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I suppose adding copy=False is ok, meaning we wouldn't make a copy if everything is already converted.",
        "createdAt" : "2020-01-18T15:40:46Z",
        "updatedAt" : "2020-01-24T02:29:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8795227d-f29e-417b-b722-b50594c21637",
        "parentId" : "8e081688-1f46-4611-8983-ecce2435637a",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "I'm going to leave it for now as *always* doing a copy, because adding `copy=False` would make the logic more complicated.",
        "createdAt" : "2020-01-19T20:08:39Z",
        "updatedAt" : "2020-01-24T02:29:44Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa93a84474079de79d9cf101cc9d708ceeec2fab",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +5736,5740 @@        infer_objects: bool_t = True,\n        convert_string: bool_t = True,\n        convert_integer: bool_t = True,\n        convert_boolean: bool_t = True,\n    ) -> FrameOrSeries:"
  },
  {
    "id" : "28e6def1-2fc6-44a1-b741-4dcdd658e2ec",
    "prId" : 30929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30929#pullrequestreview-345424526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75bb4adc-958a-40df-8df6-0c50078101bc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can sprinkle some comments here to make reading easier",
        "createdAt" : "2020-01-20T16:22:23Z",
        "updatedAt" : "2020-01-24T02:29:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f49bc8ef-dc30-42b9-86f8-0e992c850293",
        "parentId" : "75bb4adc-958a-40df-8df6-0c50078101bc",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "done",
        "createdAt" : "2020-01-20T16:32:50Z",
        "updatedAt" : "2020-01-24T02:29:44Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa93a84474079de79d9cf101cc9d708ceeec2fab",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +5821,5825 @@        Convert the DataFrame to use best possible dtypes.\n\n        >>> dfn = df.convert_dtypes()\n        >>> dfn\n           a  b      c     d     e      f"
  },
  {
    "id" : "54663bbb-67e2-4b27-8af0-c385648c1323",
    "prId" : 30929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30929#pullrequestreview-345942026",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9f65584-9cef-4926-b760-d93079c2ae5c",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would also add a note here in the docstring that the output of the function can change in the future when new nullable dtypes are added in the future (which I think we should then add to this function, to expand the inference automatically, with a new option to turn it off).",
        "createdAt" : "2020-01-21T13:49:02Z",
        "updatedAt" : "2020-01-24T02:29:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b7cdfc54-d085-4097-8b4d-e5287623b33f",
        "parentId" : "c9f65584-9cef-4926-b760-d93079c2ae5c",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "done",
        "createdAt" : "2020-01-21T14:59:01Z",
        "updatedAt" : "2020-01-24T02:29:44Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa93a84474079de79d9cf101cc9d708ceeec2fab",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +5741,5745 @@        \"\"\"\n        Convert columns to best possible dtypes using dtypes supporting ``pd.NA``.\n\n        .. versionadded:: 1.1.0\n"
  },
  {
    "id" : "8e0d02bb-18a8-4ba8-a35b-a998f12688cf",
    "prId" : 31078,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31078#pullrequestreview-344127152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8db70d0c-5117-45fb-a860-d30494eda3ca",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Actually might want to change the message to `Pre-0.20.3` pickles consistently",
        "createdAt" : "2020-01-16T18:34:12Z",
        "updatedAt" : "2020-01-16T18:34:13Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c12599a639aaff0bd76cb44e6027c26e68b9f5ad",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1929,1933 @@\n            else:\n                raise NotImplementedError(\"Pre-0.12 pickles are no longer supported\")\n        elif len(state) == 2:\n            raise NotImplementedError(\"Pre-0.12 pickles are no longer supported\")"
  },
  {
    "id" : "5626b39a-30d0-478b-a899-a97b55677fe2",
    "prId" : 31472,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31472#pullrequestreview-358868531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "552172eb-3ff3-4658-af3c-c9d3a196cbec",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are these on the doctest list that we check?",
        "createdAt" : "2020-02-09T20:57:42Z",
        "updatedAt" : "2020-02-27T17:35:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "083c5b33-bb7c-4fcc-8405-4b22ceba9979",
        "parentId" : "552172eb-3ff3-4658-af3c-c9d3a196cbec",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "Since 4d66fa8 they are.",
        "createdAt" : "2020-02-14T11:07:55Z",
        "updatedAt" : "2020-02-27T17:35:16Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      }
    ],
    "commit" : "94ec83d0ab3416cd968568d93b81ff9014e48076",
    "line" : 247,
    "diffHunk" : "@@ -1,1 +9608,9612 @@        ... ])\n        >>> s.describe()\n        count                      3\n        mean     2006-09-01 08:00:00\n        min      2000-01-01 00:00:00"
  },
  {
    "id" : "ad5e92e2-e050-46e6-9050-cd1a06356a47",
    "prId" : 31809,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31809#pullrequestreview-384804834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ca21a67-6b22-446e-99ed-89a9f072ce04",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if any examples use base / loffset you can remove them",
        "createdAt" : "2020-03-03T03:52:31Z",
        "updatedAt" : "2020-05-09T21:51:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "389284d2-0370-4e7d-8530-452fb9da1f92",
        "parentId" : "5ca21a67-6b22-446e-99ed-89a9f072ce04",
        "authorId" : "60d0b690-e46d-489b-9e53-1306cfe27fca",
        "body" : "I checked again to be sure, but it seems that I have already done that in an earlier commit. Let me know if you noticed something that I didn't :thinking:.",
        "createdAt" : "2020-03-31T14:42:56Z",
        "updatedAt" : "2020-05-09T21:51:14Z",
        "lastEditedBy" : "60d0b690-e46d-489b-9e53-1306cfe27fca",
        "tags" : [
        ]
      }
    ],
    "commit" : "05ddd9b6cd3b1769abade95e94c45728005a9a97",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +8054,8058 @@        2000-01-04     36      90\n\n        If you want to adjust the start of the bins based on a fixed timestamp:\n\n        >>> start, end = '2000-10-01 23:30:00', '2000-10-02 00:30:00'"
  },
  {
    "id" : "c6243f08-8fc7-41e3-8c1c-73baf93299b6",
    "prId" : 31809,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31809#pullrequestreview-404554289",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99669b55-43aa-4c9c-a116-28b626d855d8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "tests for invalid values here?",
        "createdAt" : "2020-04-30T17:54:44Z",
        "updatedAt" : "2020-05-09T21:51:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bdea5d5f-2ddc-4332-b25e-ac0efc1c47a9",
        "parentId" : "99669b55-43aa-4c9c-a116-28b626d855d8",
        "authorId" : "60d0b690-e46d-489b-9e53-1306cfe27fca",
        "body" : "I have added tests as long with a nice ValueError message for `origin` and `offset`\r\nHere:\r\nhttps://github.com/pandas-dev/pandas/blob/f2458dfaf5bdc22e22f58f7b720fa206b3cd88ef/pandas/tests/resample/test_datetime_index.py#L766\r\n\r\nAnd here:\r\nhttps://github.com/pandas-dev/pandas/blob/f2458dfaf5bdc22e22f58f7b720fa206b3cd88ef/pandas/tests/resample/test_datetime_index.py#L780",
        "createdAt" : "2020-05-02T19:27:34Z",
        "updatedAt" : "2020-05-09T21:51:14Z",
        "lastEditedBy" : "60d0b690-e46d-489b-9e53-1306cfe27fca",
        "tags" : [
        ]
      }
    ],
    "commit" : "05ddd9b6cd3b1769abade95e94c45728005a9a97",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +7826,7830 @@            If a timestamp is not used, these values are also supported:\n\n            - 'epoch': `origin` is 1970-01-01\n            - 'start': `origin` is the first value of the timeseries\n            - 'start_day': `origin` is the first day at midnight of the timeseries"
  },
  {
    "id" : "80947198-cb96-4b5f-8b77-7eb05bdf3552",
    "prId" : 32014,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32014#pullrequestreview-359341110",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66fadbfd-7807-40c1-bb6e-d10c014ea611",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "You may want to keep the blank line before the version added. ",
        "createdAt" : "2020-02-15T11:38:20Z",
        "updatedAt" : "2020-02-15T12:14:17Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d98aeb99764607607819a9430a28c6c6231d4ee",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +7549,7553 @@            Determine range time on index or columns value.\n\n            .. versionadded:: 0.24.0\n\n        Returns"
  },
  {
    "id" : "fa6a15b3-b40f-4ffc-a2be-8a5e2b730dd6",
    "prId" : 32085,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32085#pullrequestreview-362037180",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e048a87-0522-4684-9b1a-e38fbbdf71ae",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is this change related to the `_is_scalar_access` fix?",
        "createdAt" : "2020-02-20T13:57:13Z",
        "updatedAt" : "2020-02-20T13:57:17Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2561396a-649a-43d1-800d-756caf6927c2",
        "parentId" : "7e048a87-0522-4684-9b1a-e38fbbdf71ae",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yes.  With the is_scalar_access fix, this line is now reached, where it fails because `_take_with_is_copy` expects an ndarray, not int.",
        "createdAt" : "2020-02-20T15:06:37Z",
        "updatedAt" : "2020-02-20T15:06:38Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f7f6fb33-81ab-420b-8958-066d6d6f6870",
        "parentId" : "7e048a87-0522-4684-9b1a-e38fbbdf71ae",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK!",
        "createdAt" : "2020-02-20T16:15:19Z",
        "updatedAt" : "2020-02-20T16:15:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f89d7671703c9f1f1d5080eed8d23480bb425cd",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +3474,3478 @@            lower = self._get_item_cache(ax[item])\n        else:\n            return self._ixs(item, axis=1)\n        return lower\n"
  },
  {
    "id" : "2276045c-d1c5-4115-bf5b-2d1aadc299fb",
    "prId" : 32363,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32363#pullrequestreview-366839421",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "711e712c-3481-45ed-a941-23f0dfafe642",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is it possible to add subtypes here or no?",
        "createdAt" : "2020-02-29T17:59:42Z",
        "updatedAt" : "2020-03-04T07:03:21Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "9c79b422-fcf5-40a8-8f6c-acc27de66181",
        "parentId" : "711e712c-3481-45ed-a941-23f0dfafe642",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "The passed functions don't have the same signature, because e.g. ``nansum`` has a ``min_count`` parameter and ``nankurt`` does not. So it's not possible without splitting the function into two, which IMO is not worth it.",
        "createdAt" : "2020-03-01T07:09:51Z",
        "updatedAt" : "2020-03-04T07:03:21Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c3db7f600946ccb49c210d583ad30778d5c5ae2",
    "line" : 376,
    "diffHunk" : "@@ -1,1 +11010,11014 @@    axis_descr: str,\n    desc: str,\n    func: Callable,\n    see_also: str = \"\",\n    examples: str = \"\","
  },
  {
    "id" : "e69ea271-061c-48ee-b40b-8b5f8ed0d466",
    "prId" : 32376,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32376#pullrequestreview-367345414",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "303a2a1d-5736-4e60-9d7c-8593a864ad75",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "labels should be the same as index_like parameter of ensure_index",
        "createdAt" : "2020-03-02T15:31:20Z",
        "updatedAt" : "2020-03-02T16:12:47Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "f46dc432-7e16-4bc9-8ffa-1897bae29c34",
        "parentId" : "303a2a1d-5736-4e60-9d7c-8593a864ad75",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "thoughts on Best Practices here?  I'd like to push up the stack where we do ensure_index.  so in this case the annotation is kind of \"you should pass Index, but we're not that strict about it\"",
        "createdAt" : "2020-03-02T16:05:44Z",
        "updatedAt" : "2020-03-02T16:12:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7fab7347-9f31-4b17-97cb-c40d0d80deb4",
        "parentId" : "303a2a1d-5736-4e60-9d7c-8593a864ad75",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "it makes sense to limit the types of internal functions to reduce the number of duplicated checks. maybe add a TODO comment here that the ensure_index added is to be eventually removed",
        "createdAt" : "2020-03-02T16:12:57Z",
        "updatedAt" : "2020-03-02T16:12:58Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "14a7af79-4596-4386-8ef8-637c5da031bf",
        "parentId" : "303a2a1d-5736-4e60-9d7c-8593a864ad75",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> \"you should pass Index, but we're not that strict about it\"\r\n\r\nmypy will be",
        "createdAt" : "2020-03-02T16:14:45Z",
        "updatedAt" : "2020-03-02T16:14:45Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "10c45278-5962-4a2b-b7df-b572e7143d5f",
        "parentId" : "303a2a1d-5736-4e60-9d7c-8593a864ad75",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> mypy will be\r\n\r\nim skeptical in this case because it goes through cython.  This gets called when you do `frame.columns = [\"foo\"]`",
        "createdAt" : "2020-03-02T16:18:37Z",
        "updatedAt" : "2020-03-02T16:18:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8e22941c-6cb6-4946-ad0e-8fe62bad3936",
        "parentId" : "303a2a1d-5736-4e60-9d7c-8593a864ad75",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> im skeptical in this case because it goes through cython\r\n\r\nfair enough, cython is another pain point for us with type annotations.",
        "createdAt" : "2020-03-02T16:35:06Z",
        "updatedAt" : "2020-03-02T16:35:07Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "72d40822845885773387c857f4bf758bd3569c2e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +562,566 @@            return obj\n\n    def _set_axis(self, axis: int, labels: Index) -> None:\n        labels = ensure_index(labels)\n        self._data.set_axis(axis, labels)"
  },
  {
    "id" : "9ec65659-bec3-4c05-a259-ce5da9b7e171",
    "prId" : 32510,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32510#pullrequestreview-374880452",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d986959-05ef-4e7b-8bd9-7bdae4095626",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add versionchanged here",
        "createdAt" : "2020-03-16T02:24:58Z",
        "updatedAt" : "2020-03-17T01:59:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "86298e05-5894-4f80-81ab-34611545365a",
        "parentId" : "7d986959-05ef-4e7b-8bd9-7bdae4095626",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same as you have above (in the good location)",
        "createdAt" : "2020-03-16T02:25:50Z",
        "updatedAt" : "2020-03-17T01:59:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "191702685edbc46e6cdb1f20a77f4ef6204af0e2",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +4798,4802 @@            If int, array-like, or BitGenerator (NumPy>=1.17), seed for\n            random number generator\n            If np.random.RandomState, use as numpy RandomState object.\n\n            ..versionchanged:: 1.1.0"
  },
  {
    "id" : "c1f20025-f62d-43b1-b8af-3d31de3847f1",
    "prId" : 32879,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32879#pullrequestreview-378947835",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c70e054-9397-4498-8104-68f98416ff19",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2020-03-21T20:09:22Z",
        "updatedAt" : "2020-03-21T22:54:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "77b885fa09d44af168fb8300dbc78ee6aab06539",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +368,372 @@            except KeyError:\n                pass\n        raise ValueError(f\"No axis named {axis} for object type {cls.__name__}\")\n\n    def _get_axis(self, axis):"
  },
  {
    "id" : "8bd5b93e-8551-4709-9489-0c9fc14a7898",
    "prId" : 33056,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33056#pullrequestreview-383010325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "000191f3-fa9b-4209-8d77-744dd1651f26",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we are *very* inconsistent on how calling .set_axis in generic.py, e.g. whether using inplace True/False & also _reset_cached_item.\r\n\r\nok here, but think this would be good to be consistent about.",
        "createdAt" : "2020-03-27T15:22:48Z",
        "updatedAt" : "2020-03-27T15:22:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3d65698e-dacb-4388-ac4c-435f8dabbf77",
        "parentId" : "000191f3-fa9b-4209-8d77-744dd1651f26",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yah, #31784 has got me looking at the caching thing now.  is this just to avoid the perf overhead of creating Series objects?",
        "createdAt" : "2020-03-27T15:39:50Z",
        "updatedAt" : "2020-03-27T15:39:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7b9b3545-5012-43fe-a245-8be6d3819966",
        "parentId" : "000191f3-fa9b-4209-8d77-744dd1651f26",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes, it *may* be possible to rip this out as it causes a number of bugs, but would have to see perf impacts.",
        "createdAt" : "2020-03-27T16:22:53Z",
        "updatedAt" : "2020-03-27T16:22:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "96d98da917679a149d5bd19b4a5d5f0054484c60",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +9034,9038 @@            new_ax = index.shift(periods, freq)\n\n        result = self.copy()\n        result.set_axis(new_ax, axis, inplace=True)\n        return result.__finalize__(self)"
  },
  {
    "id" : "dffa0230-0ee5-4e3d-9f39-3617615eeb24",
    "prId" : 33085,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33085#pullrequestreview-383363653",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04c404ae-c66c-4838-b3cb-16e97f453ed6",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Do we need to at minimum always shallow copy here?",
        "createdAt" : "2020-03-29T00:58:00Z",
        "updatedAt" : "2020-03-29T00:58:00Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "0a1fb7e2-ab7a-49d8-adfe-d1b2ba0ddde3",
        "parentId" : "04c404ae-c66c-4838-b3cb-16e97f453ed6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "isnt that what this is doing?",
        "createdAt" : "2020-03-29T01:15:09Z",
        "updatedAt" : "2020-03-29T01:15:09Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9b326ceb-df96-4336-9d7e-e6e4195e750b",
        "parentId" : "04c404ae-c66c-4838-b3cb-16e97f453ed6",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Ah right! Fair.",
        "createdAt" : "2020-03-29T01:16:43Z",
        "updatedAt" : "2020-03-29T01:16:43Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed7751640ee956064fb099056e996484941bf6fa",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +9245,9249 @@            ax = _tz_convert(ax, tz)\n\n        result = self.copy(deep=copy)\n        result = result.set_axis(ax, axis=axis, inplace=False)\n        return result.__finalize__(self)"
  },
  {
    "id" : "db59491a-b814-48fe-9111-96b392c8aee5",
    "prId" : 33118,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33118#pullrequestreview-435023536",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5c57cd4-0443-4bcc-9eed-4738d87c32e9",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "maybe this should be in `elif is_extension_array_dtype(dtype) and self.ndim > 1:` block.",
        "createdAt" : "2020-06-21T19:49:27Z",
        "updatedAt" : "2020-06-22T16:03:18Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "1300e01d-f613-4207-bab0-31b57c5518d3",
        "parentId" : "c5c57cd4-0443-4bcc-9eed-4738d87c32e9",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "although then the issue mentioned in https://github.com/pandas-dev/pandas/issues/33113#issuecomment-646865646 would not be fixed. maybe keep this where it is and a test for https://github.com/pandas-dev/pandas/issues/33113#issuecomment-646865646",
        "createdAt" : "2020-06-21T19:56:18Z",
        "updatedAt" : "2020-06-22T16:03:18Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "76b5ee37-0c3c-4a26-9eca-75f9e14d9a34",
        "parentId" : "c5c57cd4-0443-4bcc-9eed-4738d87c32e9",
        "authorId" : "e01a8ae8-8a48-489b-a1d6-16fde76612ba",
        "body" : "Let's try!",
        "createdAt" : "2020-06-21T20:01:41Z",
        "updatedAt" : "2020-06-22T16:03:18Z",
        "lastEditedBy" : "e01a8ae8-8a48-489b-a1d6-16fde76612ba",
        "tags" : [
        ]
      },
      {
        "id" : "2b4e2004-33e3-4c6c-8c04-97de4ef331ed",
        "parentId" : "c5c57cd4-0443-4bcc-9eed-4738d87c32e9",
        "authorId" : "e01a8ae8-8a48-489b-a1d6-16fde76612ba",
        "body" : "Sorry, did not see your second comment. Ok I'll do that. Anyhow if we reach the \"concat\" part of the code and `results` is empty, then we have a problem.",
        "createdAt" : "2020-06-21T20:05:20Z",
        "updatedAt" : "2020-06-22T16:03:18Z",
        "lastEditedBy" : "e01a8ae8-8a48-489b-a1d6-16fde76612ba",
        "tags" : [
        ]
      },
      {
        "id" : "4b379984-4414-4cee-8a95-9c3ae4e5f788",
        "parentId" : "c5c57cd4-0443-4bcc-9eed-4738d87c32e9",
        "authorId" : "e01a8ae8-8a48-489b-a1d6-16fde76612ba",
        "body" : "Although, one could argue that `pd.concat` of an empty list could return an empty frame or series instead of raising an exception.",
        "createdAt" : "2020-06-21T20:06:28Z",
        "updatedAt" : "2020-06-22T16:03:18Z",
        "lastEditedBy" : "e01a8ae8-8a48-489b-a1d6-16fde76612ba",
        "tags" : [
        ]
      },
      {
        "id" : "d367c00c-b77f-4d6b-a9c7-2e553ffcbb29",
        "parentId" : "c5c57cd4-0443-4bcc-9eed-4738d87c32e9",
        "authorId" : "e01a8ae8-8a48-489b-a1d6-16fde76612ba",
        "body" : "@simonjayhawkins Actually starting to think the other issue was not an issue but an error on the author's part. See https://github.com/pandas-dev/pandas/issues/33113#issuecomment-647176870. Awaiting your answer to proceed.",
        "createdAt" : "2020-06-21T20:23:28Z",
        "updatedAt" : "2020-06-22T16:03:18Z",
        "lastEditedBy" : "e01a8ae8-8a48-489b-a1d6-16fde76612ba",
        "tags" : [
        ]
      },
      {
        "id" : "677e43c2-ea75-44b3-9512-98b0592b6066",
        "parentId" : "c5c57cd4-0443-4bcc-9eed-4738d87c32e9",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I _think_ the other issue **is** relevant.\r\n\r\non master and in this PR (latest commit)...\r\n```\r\n>>> df = pd.DataFrame([[1, 2], [3, 4]])\r\n>>> df\r\n   0  1\r\n0  1  2\r\n1  3  4\r\n>>>\r\n>>> res = df.astype(dict())\r\n>>> res\r\n   0  1\r\n0  1  2\r\n1  3  4\r\n>>>\r\n>>> res is df\r\nFalse\r\n>>>\r\n>>> df = pd.DataFrame([dict(), dict()])\r\n>>>\r\n>>> df.astype(dict())\r\nTraceback (most recent call last):\r\n   ...\r\nValueError: No objects to concatenate\r\n>>>\r\n```\r\n\r\nthis PR before moving https://github.com/pandas-dev/pandas/pull/33118#discussion_r443251242 ...\r\n```\r\n>>> df = pd.DataFrame([dict(), dict()])\r\n>>>\r\n>>> df.astype(dict())\r\nEmpty DataFrame\r\nColumns: []\r\nIndex: [0, 1]\r\n>>>\r\n>>> res is df\r\nFalse\r\n```\r\n\r\nso it appears astype with an empty dict is a valid op with a copy returned. so this should also work on an empty DataFrame (even if created with empty dict).\r\n\r\nthese sort of circumstances can arise on data pipelines and having consistency reduces the complexity of downstream code.\r\n\r\nso I _think_ need to move the changes back and add a test for this.",
        "createdAt" : "2020-06-22T14:54:24Z",
        "updatedAt" : "2020-06-22T16:03:18Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "cfba7ff4-b728-4d52-9ce5-877adf7bfec6",
        "parentId" : "c5c57cd4-0443-4bcc-9eed-4738d87c32e9",
        "authorId" : "e01a8ae8-8a48-489b-a1d6-16fde76612ba",
        "body" : "Ok I will revert the changes back and add a test. I still find it **very strange** to call `.astype(T)` where `T` is an instance of an object and not a type (except of course for string-defined such as `.astype(\"float64\")`).",
        "createdAt" : "2020-06-22T15:05:36Z",
        "updatedAt" : "2020-06-22T16:03:18Z",
        "lastEditedBy" : "e01a8ae8-8a48-489b-a1d6-16fde76612ba",
        "tags" : [
        ]
      },
      {
        "id" : "d7886ef6-e657-4d81-bfe7-0d68804012a2",
        "parentId" : "c5c57cd4-0443-4bcc-9eed-4738d87c32e9",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "DataFrame.astype can also accept a dict of column name -> data type as the dtype argument, https://pandas.pydata.org/docs/dev/reference/api/pandas.DataFrame.astype.html",
        "createdAt" : "2020-06-22T15:08:51Z",
        "updatedAt" : "2020-06-22T16:03:18Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "b8f5b701-9532-4537-bf4b-0250df428618",
        "parentId" : "c5c57cd4-0443-4bcc-9eed-4738d87c32e9",
        "authorId" : "e01a8ae8-8a48-489b-a1d6-16fde76612ba",
        "body" : "Ahhh that makes a lot of sense now. ",
        "createdAt" : "2020-06-22T15:13:40Z",
        "updatedAt" : "2020-06-22T16:03:18Z",
        "lastEditedBy" : "e01a8ae8-8a48-489b-a1d6-16fde76612ba",
        "tags" : [
        ]
      }
    ],
    "commit" : "95fd399a40770240c154abf8fa37de6ae0cd2aea",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +5550,5554 @@\n        # GH 33113: handle empty frame or series\n        if not results:\n            return self.copy()\n"
  },
  {
    "id" : "124ca969-71e4-45c5-acfb-024597b4f732",
    "prId" : 33398,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33398#pullrequestreview-390366847",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c229bbfd-c224-476b-904f-458384e894a5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "IIRC there is an example in io.rst that does this, can you check and augment that example (and if not pls create one.",
        "createdAt" : "2020-04-08T20:42:28Z",
        "updatedAt" : "2020-04-10T20:39:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "79788c33-6acf-476e-8784-d02814ed3c51",
        "parentId" : "c229bbfd-c224-476b-904f-458384e894a5",
        "authorId" : "43a2195e-817d-41e2-898d-0cf5a3b5b4b8",
        "body" : "Good catch -- found it and updated.",
        "createdAt" : "2020-04-08T22:09:57Z",
        "updatedAt" : "2020-04-10T20:39:25Z",
        "lastEditedBy" : "43a2195e-817d-41e2-898d-0cf5a3b5b4b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "14ca83d9e9ebaa02b47437073e92559f7cbb5d87",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3097,3101 @@            detect compression mode from the following extensions: '.gz',\n            '.bz2', '.zip' or '.xz'. (otherwise no compression). If dict given\n            and mode is one of {'zip', 'gzip', 'bz2'}, or inferred as\n            one of the above, other entries passed as\n            additional compression options."
  },
  {
    "id" : "e638a276-749d-4407-911b-8f19ff7a74a9",
    "prId" : 33610,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33610#pullrequestreview-395569044",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ec94e3a-edfd-48b2-b31a-0182f202cc0e",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "+1",
        "createdAt" : "2020-04-17T15:47:02Z",
        "updatedAt" : "2020-04-17T21:33:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fadfb0ad9ae32041e62077c7111d5aab497c7a08",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +7710,7714 @@        index = self._get_axis(axis)\n        if not isinstance(index, DatetimeIndex):\n            raise TypeError(\"Index must be DatetimeIndex\")\n\n        indexer = index.indexer_between_time("
  },
  {
    "id" : "6d65378a-7d2d-4e7a-9904-4db005ed6f56",
    "prId" : 33610,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33610#pullrequestreview-395596503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1ee6c77-96da-4222-ae61-ede34bfd182d",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can \"axis\" be typed as Axis?",
        "createdAt" : "2020-04-17T15:47:24Z",
        "updatedAt" : "2020-04-17T21:33:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5255d137-5edd-4865-9890-3d7568f469a4",
        "parentId" : "e1ee6c77-96da-4222-ae61-ede34bfd182d",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Yeah, but in some cases ``axis`` is returned, so that that would require some refactoring inside the function, which I'd like to do seperately. For example I'm pretty sure ``_AXIS_ALIASES`` can be removed from the code base.",
        "createdAt" : "2020-04-17T16:04:29Z",
        "updatedAt" : "2020-04-17T21:33:06Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "45a3f3f4-fec0-462a-9ccb-a2890b26a3b9",
        "parentId" : "e1ee6c77-96da-4222-ae61-ede34bfd182d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "makes sense, thanks",
        "createdAt" : "2020-04-17T16:23:00Z",
        "updatedAt" : "2020-04-17T21:33:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fadfb0ad9ae32041e62077c7111d5aab497c7a08",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +384,388 @@\n    @classmethod\n    def _get_block_manager_axis(cls, axis) -> int:\n        \"\"\"Map the axis to the block_manager axis.\"\"\"\n        axis = cls._get_axis_number(axis)"
  },
  {
    "id" : "f3095b69-33bc-404c-b443-d10e37957f14",
    "prId" : 33610,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33610#pullrequestreview-395801798",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1880cec-dd56-4c9c-aef2-691a6fe98bd6",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "hmm, can you add the mypy error as a comment.\r\n\r\nIIUC there were issues with deprecating this method, xref #26654.\r\n\r\nFor series, it's a no-op. maybe now that Panel is deprecated, we could have logic in DataFrame and Series instead of NDFrame and simplify. ",
        "createdAt" : "2020-04-17T18:28:31Z",
        "updatedAt" : "2020-04-17T21:33:06Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "e16fa917-2da2-4397-8a0c-561933be13de",
        "parentId" : "d1880cec-dd56-4c9c-aef2-691a6fe98bd6",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Yeah, I remember that. The problem was that ``np.swapaxes(df, 0, 1)``, ``np.swapaxes(series, 0, 0)`` works in master and are tested for. It's not unreasonable that it works, but users should really use ``transpose``/``T`` instead.\r\n\r\nMaybe add ``swapaxes`` to ``_deprecations`` to get it out of the tab-list?",
        "createdAt" : "2020-04-17T22:10:34Z",
        "updatedAt" : "2020-04-17T22:10:35Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "fadfb0ad9ae32041e62077c7111d5aab497c7a08",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +593,597 @@        # ignore needed because of NDFrame constructor is different than\n        # DataFrame/Series constructors.\n        return self._constructor(new_values, *new_axes).__finalize__(  # type: ignore\n            self, method=\"swapaxes\"\n        )"
  },
  {
    "id" : "4c6a2ec4-eca0-4da1-9f0e-bea5e6aec61a",
    "prId" : 33959,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33959#pullrequestreview-413175257",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7600fff8-af33-453c-8e46-6f91efe3210d",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "can you add a comment here that for these methods, limit_direction and limit_area are being ignored and include a link to https://github.com/pandas-dev/pandas/issues/26796",
        "createdAt" : "2020-05-17T15:03:48Z",
        "updatedAt" : "2020-05-29T16:25:56Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "2aa21560-aefb-4b2d-974e-db4ccbd6ba39",
        "parentId" : "7600fff8-af33-453c-8e46-6f91efe3210d",
        "authorId" : "d0eb539f-7aed-425a-ae47-bb8603bd9118",
        "body" : "done",
        "createdAt" : "2020-05-17T15:54:04Z",
        "updatedAt" : "2020-05-29T16:25:56Z",
        "lastEditedBy" : "d0eb539f-7aed-425a-ae47-bb8603bd9118",
        "tags" : [
        ]
      }
    ],
    "commit" : "42895db0e585a6274f45ef41b298c6d597e0e61e",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +6891,6895 @@        # for the methods backfill, bfill, pad, ffill limit_direction and limit_area\n        # are being ignored, see gh-26796 for more information\n        if method in [\"backfill\", \"bfill\", \"pad\", \"ffill\"]:\n            return self.fillna(\n                method=method,"
  },
  {
    "id" : "f41c7e2f-391a-4f3b-9658-225631ff261a",
    "prId" : 34508,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34508#pullrequestreview-421644207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a4c3a7e-4eb3-41ac-8686-b0e449dfba8b",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "you can leave the blank line here",
        "createdAt" : "2020-06-01T07:28:46Z",
        "updatedAt" : "2020-08-07T18:32:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "a00a1b9d385d4b96e90e1dfbf75af98e7155423b",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1203,1207 @@        each other to see if they have the same shape and elements. NaNs in\n        the same location are considered equal.\n\n        The row/column index do not need to have the same type, as long\n        as the values are considered equal. Corresponding columns must be of"
  }
]