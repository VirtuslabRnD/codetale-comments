[
  {
    "id" : "45e69db7-a9b4-4a33-b6ff-3a47911270f6",
    "prId" : 15081,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15081#pullrequestreview-34466151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f815d886-c4d4-4a4b-a1ee-256e4b13e12e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this seems odd that you are returning np.nan for a datetimelike. do tests hit this?",
        "createdAt" : "2017-04-24T10:29:28Z",
        "updatedAt" : "2017-11-25T00:01:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "14b3d411-c924-4715-a7cf-d49dd23ab9a4",
        "parentId" : "f815d886-c4d4-4a4b-a1ee-256e4b13e12e",
        "authorId" : "b134c7c2-a48e-4c3b-9262-35dbb896ab39",
        "body" : "I would assume it does get hit indirectly as it was essentially pulled into the subclasses from the pd.Series instantiation.  It is essentially replicating the behavior that was previously in lines 188-203 of pandas/core/series.py and allowing each object to handle it as seen fit rather than doing it in an if conditional.  Personally this way make more sense to me but since I ended up not making use of this functionality outside of the Series instantiation I'm happy to revert the changes if you'd prefer.",
        "createdAt" : "2017-04-25T05:09:38Z",
        "updatedAt" : "2017-11-25T00:01:17Z",
        "lastEditedBy" : "b134c7c2-a48e-4c3b-9262-35dbb896ab39",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd0b7e9f07e38abe5a3a21ba81f825256a1c209e",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +700,704 @@\n    @Appender(_index_shared_docs['_get_values_from_dict'])\n    def _get_values_from_dict(self, data):\n        if len(data):\n            return np.array([data.get(i, np.nan)"
  },
  {
    "id" : "9968f886-35dc-4389-8071-42e091654b7e",
    "prId" : 19147,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19147#pullrequestreview-87574785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67671036-d280-44d3-a6ab-0466142ec3d8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "just make this a ValueError, we don't want to have custom error messages normally.",
        "createdAt" : "2018-01-09T12:40:53Z",
        "updatedAt" : "2018-01-16T01:43:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d070ced5-d515-4a09-a156-985f50a1277d",
        "parentId" : "67671036-d280-44d3-a6ab-0466142ec3d8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We need to catch this specifically in core.ops.  Want to catch by checking the error message?",
        "createdAt" : "2018-01-09T15:41:52Z",
        "updatedAt" : "2018-01-16T01:43:10Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d65175ff-3424-4bc8-b8bd-21d6e24390a3",
        "parentId" : "67671036-d280-44d3-a6ab-0466142ec3d8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : ">  don't want to have custom error messages normally\r\n\r\nThe error message here \"Cannot shift with no freq\" is the same as the error message raised if adding just an integer when `self.freq` is None.\r\n",
        "createdAt" : "2018-01-09T16:24:02Z",
        "updatedAt" : "2018-01-16T01:43:10Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2231505f86a4fd510d6d82520335e6057bcb8244",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +696,700 @@            elif is_integer_dtype(other) and self.freq is None:\n                # GH#19123\n                raise NullFrequencyError(\"Cannot shift with no freq\")\n            else:  # pragma: no cover\n                return NotImplemented"
  },
  {
    "id" : "2ec0750e-c384-42e5-bded-a4a20837d764",
    "prId" : 19723,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19723#pullrequestreview-98038482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a21dae25-d310-447a-8bf7-3672097bfbf2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why do we need this double assignment ?",
        "createdAt" : "2018-02-20T23:58:01Z",
        "updatedAt" : "2018-02-22T19:04:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "775f171a-8cc1-4fb7-bbac-e515766ce9c3",
        "parentId" : "a21dae25-d310-447a-8bf7-3672097bfbf2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "If we just set `cls.__iadd__ = __add__` then when we check for `Index.__iadd__.__name__` we'll get `__add__` instead of `__iadd__`.  Not a big deal, but its cheap to make it pretty.",
        "createdAt" : "2018-02-21T00:15:47Z",
        "updatedAt" : "2018-02-22T19:04:22Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "082438205436fd436df796603599a7614a42a82f",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +756,760 @@            # alias for __add__\n            return self.__add__(other)\n        cls.__iadd__ = __iadd__\n\n        def __isub__(self, other):"
  },
  {
    "id" : "3392cf6a-0e07-4c29-801f-1261f2fa94a2",
    "prId" : 19835,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19835#pullrequestreview-98528832",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da68be1f-f7a6-4030-ae51-f82a08afe434",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you assert on the operator",
        "createdAt" : "2018-02-22T11:19:23Z",
        "updatedAt" : "2018-02-23T15:26:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3abc51f9053293162c0808c3737260cd8af54b5b",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +649,653 @@        other : Index, np.ndarray\n            object-dtype containing pd.DateOffset objects\n        op : {operator.add, operator.sub}\n\n        Returns"
  },
  {
    "id" : "405074fe-f612-4db7-bfa5-0961e9b8ca27",
    "prId" : 19912,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19912#pullrequestreview-100239570",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98c13ef8-8c18-439f-9ae7-5efc4a0a85b7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what hits this then? You want to make this NOT propagate on the reversed ops yes?",
        "createdAt" : "2018-02-28T11:25:59Z",
        "updatedAt" : "2018-03-01T01:17:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "86f108ca-597c-4fd7-98d9-d331dae11706",
        "parentId" : "98c13ef8-8c18-439f-9ae7-5efc4a0a85b7",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Many cases still hit this (objectdtype, categoricaldtype, miscellaneous scalars...) catching floatdype is the main obvious one.  Handling object dtype correctly is the next PR.",
        "createdAt" : "2018-02-28T21:40:40Z",
        "updatedAt" : "2018-03-01T01:17:38Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "58457d4eb49bb35eeb2dfa4aa3e8b75a2a52e3fb",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +747,751 @@                                        cls=type(self).__name__))\n\n            else:  # pragma: no cover\n                return NotImplemented\n"
  },
  {
    "id" : "a3380b68-708f-458f-9934-a1da8018d6ba",
    "prId" : 19912,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19912#pullrequestreview-101245497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90d913ae-8cec-4e37-8372-32a5dcda8193",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in next pass remove the extra line, want to be consistent on formatting",
        "createdAt" : "2018-03-05T11:38:06Z",
        "updatedAt" : "2018-03-05T11:40:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1b9aa8d5-8e10-4739-8234-d32159395990",
        "parentId" : "90d913ae-8cec-4e37-8372-32a5dcda8193",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Will do.",
        "createdAt" : "2018-03-05T17:05:57Z",
        "updatedAt" : "2018-03-05T17:05:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "58457d4eb49bb35eeb2dfa4aa3e8b75a2a52e3fb",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +807,811 @@                # GH#19123\n                raise NullFrequencyError(\"Cannot shift with no freq\")\n\n            elif is_float_dtype(other):\n                # Explicitly catch invalid dtypes"
  },
  {
    "id" : "72c7b378-276e-4829-b76b-18c1b0788d50",
    "prId" : 19959,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19959#pullrequestreview-112617332",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbe37f00-5872-4977-9727-af8a0d41e4b4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment on why this is",
        "createdAt" : "2018-03-07T14:16:05Z",
        "updatedAt" : "2018-05-19T19:02:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "84d779a2-c09a-4383-a841-980d2f4cd19b",
        "parentId" : "bbe37f00-5872-4977-9727-af8a0d41e4b4",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Addressed, but GitHub UI not surfacing.",
        "createdAt" : "2018-04-16T22:55:53Z",
        "updatedAt" : "2018-05-19T19:02:38Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cb1b439f9668c3af389f2fefe55ecec365fc134",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +986,990 @@                return DatetimeIndex(other) - self\n            elif (is_datetime64_any_dtype(self) and hasattr(other, 'dtype') and\n                  not is_datetime64_any_dtype(other)):\n                # GH#19959 datetime - datetime is well-defined as timedelta,\n                # but any other type - datetime is not well-defined."
  },
  {
    "id" : "a3e0986c-4bec-4579-a91c-d17b448ea8ed",
    "prId" : 20028,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20028#pullrequestreview-103770695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20125374-5114-4a70-a769-c4f482a69d39",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you update the doc-strings here (and in the base class)",
        "createdAt" : "2018-03-07T12:55:00Z",
        "updatedAt" : "2018-03-15T23:45:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bce8362c-de5c-4b1c-afbe-590a8ddf6bf1",
        "parentId" : "20125374-5114-4a70-a769-c4f482a69d39",
        "authorId" : "760a736a-307c-4b33-8713-7be9bc96c514",
        "body" : "@jreback - What specific updates were you referring to? Do the sphinx tags need to be added here?",
        "createdAt" : "2018-03-08T01:21:04Z",
        "updatedAt" : "2018-03-15T23:45:20Z",
        "lastEditedBy" : "760a736a-307c-4b33-8713-7be9bc96c514",
        "tags" : [
        ]
      },
      {
        "id" : "bc5dbff6-a5f8-48d3-8a59-d2efc8308e62",
        "parentId" : "20125374-5114-4a70-a769-c4f482a69d39",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "don't need deprecated in the _summary doc-strings ",
        "createdAt" : "2018-03-14T10:58:17Z",
        "updatedAt" : "2018-03-15T23:45:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ccb33cb0878b5312a4e3ea8f3daf3fe69bb844a1",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1051,1055 @@\n    def _summary(self, name=None):\n        \"\"\"\n        Return a summarized representation\n"
  },
  {
    "id" : "85e25330-8b84-4bf8-bbc4-4ab4fe522b06",
    "prId" : 20510,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20510#pullrequestreview-108412585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "507b280c-c2c4-49b3-8517-4b166988170e",
        "parentId" : null,
        "authorId" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "body" : "I generally [avoid `hasattr`](https://hynek.me/articles/hasattr/) in projects that support Python 2.",
        "createdAt" : "2018-03-28T11:29:33Z",
        "updatedAt" : "2018-04-06T02:55:23Z",
        "lastEditedBy" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "tags" : [
        ]
      },
      {
        "id" : "0f8b4365-b2fc-4572-80dc-02f8d1f5d8ae",
        "parentId" : "507b280c-c2c4-49b3-8517-4b166988170e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah this impl is shared by DTI and TDI so this could be restructured a bit. Please file an issue .",
        "createdAt" : "2018-03-30T19:28:58Z",
        "updatedAt" : "2018-04-06T02:55:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "67a29d54d0df33977a9cb4bd24b974e240073aa3",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1005,1009 @@            result = self + offset\n\n            if hasattr(self, 'tz'):\n                result._tz = self.tz\n"
  },
  {
    "id" : "d49415c0-8148-4654-951d-bd2813690b79",
    "prId" : 20772,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20772#pullrequestreview-116129766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa673940-3d15-4199-8e74-a081d1ea0c11",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "is generating the index needed to know if it a correct frequence? Checking the inferred frequency is not enough?",
        "createdAt" : "2018-04-27T18:57:21Z",
        "updatedAt" : "2018-04-28T10:06:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7555d028-3d82-4fea-b1c1-bebb94c8abc6",
        "parentId" : "fa673940-3d15-4199-8e74-a081d1ea0c11",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK, see it was also done like that below (still wondering though)",
        "createdAt" : "2018-04-27T18:59:12Z",
        "updatedAt" : "2018-04-28T10:06:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b3a44a45-d5ca-4cf5-b788-5981341aa654",
        "parentId" : "fa673940-3d15-4199-8e74-a081d1ea0c11",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "I think it's necessary, at least to a certain extent.  There are cases where multiple frequencies are valid for a given set of dates, so you can have a valid frequency that's not the inferred frequency, e.g. `['2018-01-01', '2018-01-02', '2018-01-03']` could be calendar day or business day.  Users can also define custom frequencies that would need to be validated but would not be the inferred frequency.\r\n\r\nThere are cases where you don't need to generate the entire index to reject invalid frequencies, e.g. if the second generated value doesn't match.  But I don't immediately see how to get around generating the entire index to determine if a frequency is valid.  I suppose you could maybe optimize memory usage with huge indexes by doing some type of elementwise validation, only keeping the current generated element in memory.",
        "createdAt" : "2018-04-27T22:49:19Z",
        "updatedAt" : "2018-04-28T10:06:03Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "9f7e8b88-fda6-44b6-9ed8-9534b60d5056",
        "parentId" : "fa673940-3d15-4199-8e74-a081d1ea0c11",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, yes, I see, that's for sure a valid case.\r\n\r\nFor me, improving the performance of the validation is not very high priority.",
        "createdAt" : "2018-04-28T09:39:03Z",
        "updatedAt" : "2018-04-28T10:06:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "68b8b99f8a036f7aaff5a3a481cdea0a6b138189",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +224,228 @@\n        on_freq = cls._generate(\n            index[0], None, len(index), None, freq, **kwargs)\n        if not np.array_equal(index.asi8, on_freq.asi8):\n            msg = ('Inferred frequency {infer} from passed values does not '"
  },
  {
    "id" : "666a50e5-49d4-4fb1-9875-c0bbb4afabb4",
    "prId" : 21314,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21314#pullrequestreview-126206752",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f92f1852-00da-4d15-9f9c-63923b844e8e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think you can make this is_extension_dtype (here and below)",
        "createdAt" : "2018-06-05T10:54:32Z",
        "updatedAt" : "2018-06-26T22:56:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a1f150ae-59f7-440a-9108-3b1d99ae2d27",
        "parentId" : "f92f1852-00da-4d15-9f9c-63923b844e8e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "That should work for now, but it isn't obvious to me how it will shake out as more EA subclasses get implemented.  Let me give this some thought.",
        "createdAt" : "2018-06-06T01:24:27Z",
        "updatedAt" : "2018-06-26T22:56:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "efd7c752dff40c4bd49eca576c0ccf259778ea2b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +900,904 @@                                .format(dtype=other.dtype,\n                                        cls=type(self).__name__))\n            elif is_categorical_dtype(other):\n                # Categorical op will raise; defer explicitly\n                return NotImplemented"
  },
  {
    "id" : "a1a9fc2d-0f18-4393-a175-da826daef1c4",
    "prId" : 22647,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22647#pullrequestreview-156914896",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86b7df47-ebc0-4bc4-8a90-5e9ed79c1ce0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "versionadded\r\n\r\ncan you test for .dt accessors as well? ",
        "createdAt" : "2018-09-18T12:11:22Z",
        "updatedAt" : "2018-09-19T20:20:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cc55f988-f096-44e3-938e-a84ebb896430",
        "parentId" : "86b7df47-ebc0-4bc4-8a90-5e9ed79c1ce0",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "The .dt accessor tests are here: https://github.com/pandas-dev/pandas/blob/ef263112fa9e7f8ac8a3b965fab7fb111adace20/pandas/tests/series/test_datetime_values.py#L234",
        "createdAt" : "2018-09-19T16:38:29Z",
        "updatedAt" : "2018-09-19T20:20:03Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba7eddde9652c2ed58dae2413e9bc8c4f0a0aa86",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +104,108 @@              order\n            - bool-ndarray where True signifies a DST time, False designates\n              a non-DST time (note that this flag is only applicable for\n              ambiguous times)\n            - 'NaT' will return NaT where there are ambiguous times"
  },
  {
    "id" : "046d75a7-b417-4137-83ff-009f3c4adebe",
    "prId" : 23206,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23206#pullrequestreview-166046900",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ec8edb2-3cd4-4391-b1b0-8ad7bfce847f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "these need to be inside these functions\r\n\r\nthe is so smelly to have to call 2 functions here\r\npls fix",
        "createdAt" : "2018-10-18T11:32:03Z",
        "updatedAt" : "2018-10-18T11:32:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b8302b3fbb647324387b717f8b1b4f0f52090c3d",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +482,486 @@        \"\"\"\n        nv.validate_max(args, kwargs)\n        nv.validate_minmax_axis(axis)\n\n        try:"
  },
  {
    "id" : "5ed9efa9-b29a-45a6-b525-7bb2bef511f0",
    "prId" : 23218,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23218#pullrequestreview-166986398",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a51a111-c0a5-44bd-9dc1-fb631d627bd4",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "how is this related to the rest of the PR?",
        "createdAt" : "2018-10-22T12:52:53Z",
        "updatedAt" : "2018-10-22T12:54:52Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7092d208-a360-4aac-b6a7-9658e65a42ea",
        "parentId" : "2a51a111-c0a5-44bd-9dc1-fb631d627bd4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This PR changes DatetimeArrayMixin._time_shift such that it no longer pins `self.name` for Index subclasses.",
        "createdAt" : "2018-10-22T16:02:09Z",
        "updatedAt" : "2018-10-22T16:02:09Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9c021a4019dc449b44bd2e9104cb8e9f06914e1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +705,709 @@\n    @Appender(DatetimeLikeArrayMixin._time_shift.__doc__)\n    def _time_shift(self, periods, freq=None):\n        result = DatetimeLikeArrayMixin._time_shift(self, periods, freq=freq)\n        result.name = self.name"
  },
  {
    "id" : "659d49bc-7425-4823-928a-b9f4ed7180c3",
    "prId" : 23643,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23643#pullrequestreview-174869807",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "881d82a4-f8c0-43ae-aea6-034126a79a49",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "looks like you can remove part of the comment",
        "createdAt" : "2018-11-14T13:55:04Z",
        "updatedAt" : "2018-11-14T13:57:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cb072e7ec33c860183c8c20bd3596e0a3bff2a0",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +699,703 @@            # TODO(DatetimeArray)\n            # - remove the .asi8 here\n            # - remove the _maybe_box_as_values\n            # - combine with the `else` block\n            new_data = self._concat_same_type(to_concat).asi8"
  },
  {
    "id" : "3b4da457-ff40-42c8-bba5-8ff0ff0958e8",
    "prId" : 23885,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23885#pullrequestreview-178067524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ea4f48e-3841-4081-806f-4fc5e3b198ba",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Would this bubble up in any way?",
        "createdAt" : "2018-11-25T02:09:06Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "5bb5fab6-7d82-40e4-b688-2ca95ed19895",
        "parentId" : "1ea4f48e-3841-4081-806f-4fc5e3b198ba",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Do you mean the whole `isinstance` block or the len-2 assertion?  The former is necessary, the latter is just protecting against me being a dummy.",
        "createdAt" : "2018-11-25T02:28:44Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "494b11d6-2ab8-457f-8e35-ae9708744cc8",
        "parentId" : "1ea4f48e-3841-4081-806f-4fc5e3b198ba",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Referring just to the `len-2`.  While I appreciate dummy-protection, I would still want to know if that `assert` would surface for end-users, that's all.",
        "createdAt" : "2018-11-25T02:33:05Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "987eecdba662c14ddf9d364d9de73af189cb4d71",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +576,580 @@    if isinstance(result, tuple):\n        # divmod, rdivmod\n        assert len(result) == 2\n        return (wrap_arithmetic_op(self, other, result[0]),\n                wrap_arithmetic_op(self, other, result[1]))"
  },
  {
    "id" : "bbbc34e1-a026-47d8-90b8-890bc4553019",
    "prId" : 24024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24024#pullrequestreview-186125421",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "636ae24f-7bf0-48a3-84af-4dd74f40eb5d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't this be ExtensionArray ?",
        "createdAt" : "2018-12-13T01:22:37Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "567a67b6-44c7-4a99-819f-f795353daba4",
        "parentId" : "636ae24f-7bf0-48a3-84af-4dd74f40eb5d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "In place of DateimeLikeArrayMixin? I don't think so. `.view` isn't part of the EA interface.",
        "createdAt" : "2018-12-13T03:57:16Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "dba574f5-8248-4efc-824c-a92e65900f89",
        "parentId" : "636ae24f-7bf0-48a3-84af-4dd74f40eb5d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Should we consider adding it to the EA interface, or otherwise removing it for DatetimeArray as well?",
        "createdAt" : "2018-12-13T15:58:32Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "61c4de81-bda8-4944-b27f-e7704016e6fc",
        "parentId" : "636ae24f-7bf0-48a3-84af-4dd74f40eb5d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "No, I don't think it makes sense for the interface: \r\nhttps://github.com/pandas-dev/pandas/pull/24024#issuecomment-447827817",
        "createdAt" : "2018-12-18T15:26:33Z",
        "updatedAt" : "2019-01-02T16:41:45Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "2436214219fc116239640889715c9bc6575f571b",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +175,179 @@        @staticmethod\n        def wrapper(left, right):\n            if isinstance(left, (np.ndarray, ABCIndex, ABCSeries,\n                                 DatetimeLikeArrayMixin)):\n                left = left.view('i8')"
  },
  {
    "id" : "00c6c9f3-7cbb-4f00-815a-bb229786e68b",
    "prId" : 24024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24024#pullrequestreview-184757128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ec605b6-6d27-4d24-875b-cc717dea4825",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Maybe for another PR to rethink this / clean this up, but, are there still differences between `_values` and `_data` ?",
        "createdAt" : "2018-12-13T15:53:15Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f8b61fd9-c0d0-463e-ab48-8f52cff6634b",
        "parentId" : "1ec605b6-6d27-4d24-875b-cc717dea4825",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Nope, they're all identical now (which is why I moved it `indexes/datetimelike.py` (no subclass overrides it).",
        "createdAt" : "2018-12-13T16:41:07Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "2436214219fc116239640889715c9bc6575f571b",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +74,78 @@    @property\n    def _eadata(self):\n        return self._data\n\n    @property"
  },
  {
    "id" : "80b37bbb-7244-4399-b250-00dce56637fc",
    "prId" : 24039,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24039#pullrequestreview-180568910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71c0d938-1fc4-46ef-8175-27641d82c63c",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this will need checks for 2-tuples in divmod and rdivmod, for scalars for eventual reduction ops",
        "createdAt" : "2018-12-02T02:26:05Z",
        "updatedAt" : "2018-12-03T12:44:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7fdd418a-9ef9-4590-9ca8-38a260e9b195",
        "parentId" : "71c0d938-1fc4-46ef-8175-27641d82c63c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think all the delegated methods return a single value.",
        "createdAt" : "2018-12-02T02:46:26Z",
        "updatedAt" : "2018-12-03T12:44:23Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "e2c19f8d-31d9-40e0-87a7-55cb8bfe4442",
        "parentId" : "71c0d938-1fc4-46ef-8175-27641d82c63c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "If #23885 goes through that will change",
        "createdAt" : "2018-12-02T03:05:53Z",
        "updatedAt" : "2018-12-03T12:44:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3e13fd13-e266-454f-b690-c861bbd04f6c",
        "parentId" : "71c0d938-1fc4-46ef-8175-27641d82c63c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Gotcha. I'd prefer to wait until we can hit that code path before worrying about it.",
        "createdAt" : "2018-12-02T13:06:11Z",
        "updatedAt" : "2018-12-03T12:44:23Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "1afadd4e-803d-45e0-9098-e7dea2697bfa",
        "parentId" : "71c0d938-1fc4-46ef-8175-27641d82c63c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Totally fair.",
        "createdAt" : "2018-12-02T16:53:15Z",
        "updatedAt" : "2018-12-03T12:44:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f3f4c92c5c62eca7970c40b4c785c77b89a178e",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +683,687 @@        result = operator.methodcaller(name, *args, **kwargs)(self._data)\n        if name not in self._raw_methods:\n            result = Index(result, name=self.name)\n        return result"
  },
  {
    "id" : "d08f0e7d-d854-47eb-9fc9-0fc2306e9647",
    "prId" : 24039,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24039#pullrequestreview-180545746",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82309a59-fc0c-4f5c-9876-2e03b268c658",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Is PandasDelegate overkill for this situation?  It's not like `Series.dt` where we construct an object and need to cache it.  Couldn't we just use something like:\r\n\r\n```\r\ndef pass_through_methods(names):\r\n    def decorator(cls):\r\n        for name in names:\r\n            method = wrap_array_method(...)\r\n            setattr(cls, name, method)\r\n        return cls\r\n```\r\n\r\nThere's definitely overlap with the PandasDelegate machinery, but I think that machinery makes for really dense reading, so should be reserved for when we really need it.",
        "createdAt" : "2018-12-02T02:34:37Z",
        "updatedAt" : "2018-12-03T12:44:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f4b2d9af-e1e3-4959-b1e9-1a12f96e9983",
        "parentId" : "82309a59-fc0c-4f5c-9876-2e03b268c658",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Perhaps you're thinking of `Properties` (which subclasses `PandasDelegate`)? `PandasDelegate` doesn't have an `__init__`, it just handles registering and creating the delegated properties.\r\n\r\n",
        "createdAt" : "2018-12-02T02:51:49Z",
        "updatedAt" : "2018-12-03T12:44:23Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "e5e1e6e7-f78f-45e9-aa16-73b7f1767aaa",
        "parentId" : "82309a59-fc0c-4f5c-9876-2e03b268c658",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "But, I don't have a strong preference of one of the other. We use `PandasDelegate` on master, for period, so this PR is a strict generalization of that.",
        "createdAt" : "2018-12-02T02:52:44Z",
        "updatedAt" : "2018-12-03T12:44:23Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f3f4c92c5c62eca7970c40b4c785c77b89a178e",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +642,646 @@\n\nclass DatetimelikeDelegateMixin(PandasDelegate):\n    \"\"\"\n    Delegation mechanism, specific for Datetime, Timedelta, and Period types."
  },
  {
    "id" : "eeac7a64-74ba-44d4-a2f9-4db11f0d43eb",
    "prId" : 24293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24293#pullrequestreview-185371868",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33fcbcdc-43a9-44c6-ba91-edfbfe44f037",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can these inherit the doc-string?",
        "createdAt" : "2018-12-15T19:11:59Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3e1fc17e-3b08-4027-bd92-3d29f5917bae",
        "parentId" : "33fcbcdc-43a9-44c6-ba91-edfbfe44f037",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'll take a look.  Might also get rid of `*args` while at it",
        "createdAt" : "2018-12-15T19:47:56Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "89a144fc-b865-48f7-82d3-db8bbbaf4c81",
        "parentId" : "33fcbcdc-43a9-44c6-ba91-edfbfe44f037",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Hmm the docstrings here and for the corresponding methods in base.IndexOpsMixin are kind of clunky.  This may merit a separate look, @datapythonista ?",
        "createdAt" : "2018-12-15T19:59:30Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3b667612-4b40-47cc-b159-a924e7fadc57",
        "parentId" : "33fcbcdc-43a9-44c6-ba91-edfbfe44f037",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I don't know well what's the class hierarchy and whether makes sense to inherit. But we'll have to add `Parameters`, `Returns` and `Examples` section here if this is public.",
        "createdAt" : "2018-12-16T01:13:32Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4028a14ef585dae19805f05db74ad1495e09e8",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +301,305 @@            return self._na_value\n\n    def argmin(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Returns the indices of the minimum values along an axis."
  },
  {
    "id" : "8bd626ff-eec1-4f2e-8880-52f2c9d7e7eb",
    "prId" : 24293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24293#pullrequestreview-187630325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ec50b4f-275e-4b7b-93c4-268e5005a533",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2018-12-23T19:17:45Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4028a14ef585dae19805f05db74ad1495e09e8",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +347,351 @@                    return self._box_func(i8[-1])\n\n            if self.hasnans:\n                if skipna:\n                    max_stamp = self[~self._isnan].asi8.max()"
  },
  {
    "id" : "568232f7-e2f7-4c0b-a5bc-24dfbc6b3580",
    "prId" : 24293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24293#pullrequestreview-188183055",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45e627c1-02fc-45d9-bb7e-85c6e614c812",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "these quick checks make sense for Index as they are immutable, but may not make much sense here (but i guess can evaluate later)",
        "createdAt" : "2018-12-27T21:57:01Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4028a14ef585dae19805f05db74ad1495e09e8",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +286,290 @@        try:\n            # quick check\n            if len(i8) and self.is_monotonic:\n                if i8[0] != iNaT:\n                    return self._box_func(i8[0])"
  }
]