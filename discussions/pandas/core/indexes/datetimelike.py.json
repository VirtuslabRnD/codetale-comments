[
  {
    "id" : "45e69db7-a9b4-4a33-b6ff-3a47911270f6",
    "prId" : 15081,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15081#pullrequestreview-34466151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f815d886-c4d4-4a4b-a1ee-256e4b13e12e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this seems odd that you are returning np.nan for a datetimelike. do tests hit this?",
        "createdAt" : "2017-04-24T10:29:28Z",
        "updatedAt" : "2017-11-25T00:01:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "14b3d411-c924-4715-a7cf-d49dd23ab9a4",
        "parentId" : "f815d886-c4d4-4a4b-a1ee-256e4b13e12e",
        "authorId" : "b134c7c2-a48e-4c3b-9262-35dbb896ab39",
        "body" : "I would assume it does get hit indirectly as it was essentially pulled into the subclasses from the pd.Series instantiation.  It is essentially replicating the behavior that was previously in lines 188-203 of pandas/core/series.py and allowing each object to handle it as seen fit rather than doing it in an if conditional.  Personally this way make more sense to me but since I ended up not making use of this functionality outside of the Series instantiation I'm happy to revert the changes if you'd prefer.",
        "createdAt" : "2017-04-25T05:09:38Z",
        "updatedAt" : "2017-11-25T00:01:17Z",
        "lastEditedBy" : "b134c7c2-a48e-4c3b-9262-35dbb896ab39",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd0b7e9f07e38abe5a3a21ba81f825256a1c209e",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +700,704 @@\n    @Appender(_index_shared_docs['_get_values_from_dict'])\n    def _get_values_from_dict(self, data):\n        if len(data):\n            return np.array([data.get(i, np.nan)"
  },
  {
    "id" : "9968f886-35dc-4389-8071-42e091654b7e",
    "prId" : 19147,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19147#pullrequestreview-87574785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67671036-d280-44d3-a6ab-0466142ec3d8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "just make this a ValueError, we don't want to have custom error messages normally.",
        "createdAt" : "2018-01-09T12:40:53Z",
        "updatedAt" : "2018-01-16T01:43:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d070ced5-d515-4a09-a156-985f50a1277d",
        "parentId" : "67671036-d280-44d3-a6ab-0466142ec3d8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We need to catch this specifically in core.ops.  Want to catch by checking the error message?",
        "createdAt" : "2018-01-09T15:41:52Z",
        "updatedAt" : "2018-01-16T01:43:10Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d65175ff-3424-4bc8-b8bd-21d6e24390a3",
        "parentId" : "67671036-d280-44d3-a6ab-0466142ec3d8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : ">  don't want to have custom error messages normally\r\n\r\nThe error message here \"Cannot shift with no freq\" is the same as the error message raised if adding just an integer when `self.freq` is None.\r\n",
        "createdAt" : "2018-01-09T16:24:02Z",
        "updatedAt" : "2018-01-16T01:43:10Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2231505f86a4fd510d6d82520335e6057bcb8244",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +696,700 @@            elif is_integer_dtype(other) and self.freq is None:\n                # GH#19123\n                raise NullFrequencyError(\"Cannot shift with no freq\")\n            else:  # pragma: no cover\n                return NotImplemented"
  },
  {
    "id" : "2ec0750e-c384-42e5-bded-a4a20837d764",
    "prId" : 19723,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19723#pullrequestreview-98038482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a21dae25-d310-447a-8bf7-3672097bfbf2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why do we need this double assignment ?",
        "createdAt" : "2018-02-20T23:58:01Z",
        "updatedAt" : "2018-02-22T19:04:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "775f171a-8cc1-4fb7-bbac-e515766ce9c3",
        "parentId" : "a21dae25-d310-447a-8bf7-3672097bfbf2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "If we just set `cls.__iadd__ = __add__` then when we check for `Index.__iadd__.__name__` we'll get `__add__` instead of `__iadd__`.  Not a big deal, but its cheap to make it pretty.",
        "createdAt" : "2018-02-21T00:15:47Z",
        "updatedAt" : "2018-02-22T19:04:22Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "082438205436fd436df796603599a7614a42a82f",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +756,760 @@            # alias for __add__\n            return self.__add__(other)\n        cls.__iadd__ = __iadd__\n\n        def __isub__(self, other):"
  }
]