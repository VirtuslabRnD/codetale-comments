[
  {
    "id" : "45e69db7-a9b4-4a33-b6ff-3a47911270f6",
    "prId" : 15081,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15081#pullrequestreview-34466151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f815d886-c4d4-4a4b-a1ee-256e4b13e12e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this seems odd that you are returning np.nan for a datetimelike. do tests hit this?",
        "createdAt" : "2017-04-24T10:29:28Z",
        "updatedAt" : "2017-11-25T00:01:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "14b3d411-c924-4715-a7cf-d49dd23ab9a4",
        "parentId" : "f815d886-c4d4-4a4b-a1ee-256e4b13e12e",
        "authorId" : "b134c7c2-a48e-4c3b-9262-35dbb896ab39",
        "body" : "I would assume it does get hit indirectly as it was essentially pulled into the subclasses from the pd.Series instantiation.  It is essentially replicating the behavior that was previously in lines 188-203 of pandas/core/series.py and allowing each object to handle it as seen fit rather than doing it in an if conditional.  Personally this way make more sense to me but since I ended up not making use of this functionality outside of the Series instantiation I'm happy to revert the changes if you'd prefer.",
        "createdAt" : "2017-04-25T05:09:38Z",
        "updatedAt" : "2017-11-25T00:01:17Z",
        "lastEditedBy" : "b134c7c2-a48e-4c3b-9262-35dbb896ab39",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd0b7e9f07e38abe5a3a21ba81f825256a1c209e",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +700,704 @@\n    @Appender(_index_shared_docs['_get_values_from_dict'])\n    def _get_values_from_dict(self, data):\n        if len(data):\n            return np.array([data.get(i, np.nan)"
  },
  {
    "id" : "9968f886-35dc-4389-8071-42e091654b7e",
    "prId" : 19147,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19147#pullrequestreview-87574785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67671036-d280-44d3-a6ab-0466142ec3d8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "just make this a ValueError, we don't want to have custom error messages normally.",
        "createdAt" : "2018-01-09T12:40:53Z",
        "updatedAt" : "2018-01-16T01:43:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d070ced5-d515-4a09-a156-985f50a1277d",
        "parentId" : "67671036-d280-44d3-a6ab-0466142ec3d8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We need to catch this specifically in core.ops.  Want to catch by checking the error message?",
        "createdAt" : "2018-01-09T15:41:52Z",
        "updatedAt" : "2018-01-16T01:43:10Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d65175ff-3424-4bc8-b8bd-21d6e24390a3",
        "parentId" : "67671036-d280-44d3-a6ab-0466142ec3d8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : ">  don't want to have custom error messages normally\r\n\r\nThe error message here \"Cannot shift with no freq\" is the same as the error message raised if adding just an integer when `self.freq` is None.\r\n",
        "createdAt" : "2018-01-09T16:24:02Z",
        "updatedAt" : "2018-01-16T01:43:10Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2231505f86a4fd510d6d82520335e6057bcb8244",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +696,700 @@            elif is_integer_dtype(other) and self.freq is None:\n                # GH#19123\n                raise NullFrequencyError(\"Cannot shift with no freq\")\n            else:  # pragma: no cover\n                return NotImplemented"
  },
  {
    "id" : "2ec0750e-c384-42e5-bded-a4a20837d764",
    "prId" : 19723,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19723#pullrequestreview-98038482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a21dae25-d310-447a-8bf7-3672097bfbf2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why do we need this double assignment ?",
        "createdAt" : "2018-02-20T23:58:01Z",
        "updatedAt" : "2018-02-22T19:04:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "775f171a-8cc1-4fb7-bbac-e515766ce9c3",
        "parentId" : "a21dae25-d310-447a-8bf7-3672097bfbf2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "If we just set `cls.__iadd__ = __add__` then when we check for `Index.__iadd__.__name__` we'll get `__add__` instead of `__iadd__`.  Not a big deal, but its cheap to make it pretty.",
        "createdAt" : "2018-02-21T00:15:47Z",
        "updatedAt" : "2018-02-22T19:04:22Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "082438205436fd436df796603599a7614a42a82f",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +756,760 @@            # alias for __add__\n            return self.__add__(other)\n        cls.__iadd__ = __iadd__\n\n        def __isub__(self, other):"
  },
  {
    "id" : "3392cf6a-0e07-4c29-801f-1261f2fa94a2",
    "prId" : 19835,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19835#pullrequestreview-98528832",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da68be1f-f7a6-4030-ae51-f82a08afe434",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you assert on the operator",
        "createdAt" : "2018-02-22T11:19:23Z",
        "updatedAt" : "2018-02-23T15:26:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3abc51f9053293162c0808c3737260cd8af54b5b",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +649,653 @@        other : Index, np.ndarray\n            object-dtype containing pd.DateOffset objects\n        op : {operator.add, operator.sub}\n\n        Returns"
  },
  {
    "id" : "405074fe-f612-4db7-bfa5-0961e9b8ca27",
    "prId" : 19912,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19912#pullrequestreview-100239570",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98c13ef8-8c18-439f-9ae7-5efc4a0a85b7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what hits this then? You want to make this NOT propagate on the reversed ops yes?",
        "createdAt" : "2018-02-28T11:25:59Z",
        "updatedAt" : "2018-03-01T01:17:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "86f108ca-597c-4fd7-98d9-d331dae11706",
        "parentId" : "98c13ef8-8c18-439f-9ae7-5efc4a0a85b7",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Many cases still hit this (objectdtype, categoricaldtype, miscellaneous scalars...) catching floatdype is the main obvious one.  Handling object dtype correctly is the next PR.",
        "createdAt" : "2018-02-28T21:40:40Z",
        "updatedAt" : "2018-03-01T01:17:38Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "58457d4eb49bb35eeb2dfa4aa3e8b75a2a52e3fb",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +747,751 @@                                        cls=type(self).__name__))\n\n            else:  # pragma: no cover\n                return NotImplemented\n"
  },
  {
    "id" : "a3380b68-708f-458f-9934-a1da8018d6ba",
    "prId" : 19912,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19912#pullrequestreview-101245497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90d913ae-8cec-4e37-8372-32a5dcda8193",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in next pass remove the extra line, want to be consistent on formatting",
        "createdAt" : "2018-03-05T11:38:06Z",
        "updatedAt" : "2018-03-05T11:40:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1b9aa8d5-8e10-4739-8234-d32159395990",
        "parentId" : "90d913ae-8cec-4e37-8372-32a5dcda8193",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Will do.",
        "createdAt" : "2018-03-05T17:05:57Z",
        "updatedAt" : "2018-03-05T17:05:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "58457d4eb49bb35eeb2dfa4aa3e8b75a2a52e3fb",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +807,811 @@                # GH#19123\n                raise NullFrequencyError(\"Cannot shift with no freq\")\n\n            elif is_float_dtype(other):\n                # Explicitly catch invalid dtypes"
  },
  {
    "id" : "72c7b378-276e-4829-b76b-18c1b0788d50",
    "prId" : 19959,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19959#pullrequestreview-112617332",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbe37f00-5872-4977-9727-af8a0d41e4b4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment on why this is",
        "createdAt" : "2018-03-07T14:16:05Z",
        "updatedAt" : "2018-05-19T19:02:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "84d779a2-c09a-4383-a841-980d2f4cd19b",
        "parentId" : "bbe37f00-5872-4977-9727-af8a0d41e4b4",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Addressed, but GitHub UI not surfacing.",
        "createdAt" : "2018-04-16T22:55:53Z",
        "updatedAt" : "2018-05-19T19:02:38Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cb1b439f9668c3af389f2fefe55ecec365fc134",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +986,990 @@                return DatetimeIndex(other) - self\n            elif (is_datetime64_any_dtype(self) and hasattr(other, 'dtype') and\n                  not is_datetime64_any_dtype(other)):\n                # GH#19959 datetime - datetime is well-defined as timedelta,\n                # but any other type - datetime is not well-defined."
  },
  {
    "id" : "a3e0986c-4bec-4579-a91c-d17b448ea8ed",
    "prId" : 20028,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20028#pullrequestreview-103770695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20125374-5114-4a70-a769-c4f482a69d39",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you update the doc-strings here (and in the base class)",
        "createdAt" : "2018-03-07T12:55:00Z",
        "updatedAt" : "2018-03-15T23:45:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bce8362c-de5c-4b1c-afbe-590a8ddf6bf1",
        "parentId" : "20125374-5114-4a70-a769-c4f482a69d39",
        "authorId" : "760a736a-307c-4b33-8713-7be9bc96c514",
        "body" : "@jreback - What specific updates were you referring to? Do the sphinx tags need to be added here?",
        "createdAt" : "2018-03-08T01:21:04Z",
        "updatedAt" : "2018-03-15T23:45:20Z",
        "lastEditedBy" : "760a736a-307c-4b33-8713-7be9bc96c514",
        "tags" : [
        ]
      },
      {
        "id" : "bc5dbff6-a5f8-48d3-8a59-d2efc8308e62",
        "parentId" : "20125374-5114-4a70-a769-c4f482a69d39",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "don't need deprecated in the _summary doc-strings ",
        "createdAt" : "2018-03-14T10:58:17Z",
        "updatedAt" : "2018-03-15T23:45:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ccb33cb0878b5312a4e3ea8f3daf3fe69bb844a1",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1051,1055 @@\n    def _summary(self, name=None):\n        \"\"\"\n        Return a summarized representation\n"
  },
  {
    "id" : "85e25330-8b84-4bf8-bbc4-4ab4fe522b06",
    "prId" : 20510,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20510#pullrequestreview-108412585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "507b280c-c2c4-49b3-8517-4b166988170e",
        "parentId" : null,
        "authorId" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "body" : "I generally [avoid `hasattr`](https://hynek.me/articles/hasattr/) in projects that support Python 2.",
        "createdAt" : "2018-03-28T11:29:33Z",
        "updatedAt" : "2018-04-06T02:55:23Z",
        "lastEditedBy" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "tags" : [
        ]
      },
      {
        "id" : "0f8b4365-b2fc-4572-80dc-02f8d1f5d8ae",
        "parentId" : "507b280c-c2c4-49b3-8517-4b166988170e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah this impl is shared by DTI and TDI so this could be restructured a bit. Please file an issue .",
        "createdAt" : "2018-03-30T19:28:58Z",
        "updatedAt" : "2018-04-06T02:55:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "67a29d54d0df33977a9cb4bd24b974e240073aa3",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1005,1009 @@            result = self + offset\n\n            if hasattr(self, 'tz'):\n                result._tz = self.tz\n"
  },
  {
    "id" : "d49415c0-8148-4654-951d-bd2813690b79",
    "prId" : 20772,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20772#pullrequestreview-116129766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa673940-3d15-4199-8e74-a081d1ea0c11",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "is generating the index needed to know if it a correct frequence? Checking the inferred frequency is not enough?",
        "createdAt" : "2018-04-27T18:57:21Z",
        "updatedAt" : "2018-04-28T10:06:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7555d028-3d82-4fea-b1c1-bebb94c8abc6",
        "parentId" : "fa673940-3d15-4199-8e74-a081d1ea0c11",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK, see it was also done like that below (still wondering though)",
        "createdAt" : "2018-04-27T18:59:12Z",
        "updatedAt" : "2018-04-28T10:06:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b3a44a45-d5ca-4cf5-b788-5981341aa654",
        "parentId" : "fa673940-3d15-4199-8e74-a081d1ea0c11",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "I think it's necessary, at least to a certain extent.  There are cases where multiple frequencies are valid for a given set of dates, so you can have a valid frequency that's not the inferred frequency, e.g. `['2018-01-01', '2018-01-02', '2018-01-03']` could be calendar day or business day.  Users can also define custom frequencies that would need to be validated but would not be the inferred frequency.\r\n\r\nThere are cases where you don't need to generate the entire index to reject invalid frequencies, e.g. if the second generated value doesn't match.  But I don't immediately see how to get around generating the entire index to determine if a frequency is valid.  I suppose you could maybe optimize memory usage with huge indexes by doing some type of elementwise validation, only keeping the current generated element in memory.",
        "createdAt" : "2018-04-27T22:49:19Z",
        "updatedAt" : "2018-04-28T10:06:03Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "9f7e8b88-fda6-44b6-9ed8-9534b60d5056",
        "parentId" : "fa673940-3d15-4199-8e74-a081d1ea0c11",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, yes, I see, that's for sure a valid case.\r\n\r\nFor me, improving the performance of the validation is not very high priority.",
        "createdAt" : "2018-04-28T09:39:03Z",
        "updatedAt" : "2018-04-28T10:06:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "68b8b99f8a036f7aaff5a3a481cdea0a6b138189",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +224,228 @@\n        on_freq = cls._generate(\n            index[0], None, len(index), None, freq, **kwargs)\n        if not np.array_equal(index.asi8, on_freq.asi8):\n            msg = ('Inferred frequency {infer} from passed values does not '"
  },
  {
    "id" : "666a50e5-49d4-4fb1-9875-c0bbb4afabb4",
    "prId" : 21314,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21314#pullrequestreview-126206752",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f92f1852-00da-4d15-9f9c-63923b844e8e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think you can make this is_extension_dtype (here and below)",
        "createdAt" : "2018-06-05T10:54:32Z",
        "updatedAt" : "2018-06-26T22:56:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a1f150ae-59f7-440a-9108-3b1d99ae2d27",
        "parentId" : "f92f1852-00da-4d15-9f9c-63923b844e8e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "That should work for now, but it isn't obvious to me how it will shake out as more EA subclasses get implemented.  Let me give this some thought.",
        "createdAt" : "2018-06-06T01:24:27Z",
        "updatedAt" : "2018-06-26T22:56:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "efd7c752dff40c4bd49eca576c0ccf259778ea2b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +900,904 @@                                .format(dtype=other.dtype,\n                                        cls=type(self).__name__))\n            elif is_categorical_dtype(other):\n                # Categorical op will raise; defer explicitly\n                return NotImplemented"
  },
  {
    "id" : "a1a9fc2d-0f18-4393-a175-da826daef1c4",
    "prId" : 22647,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22647#pullrequestreview-156914896",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86b7df47-ebc0-4bc4-8a90-5e9ed79c1ce0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "versionadded\r\n\r\ncan you test for .dt accessors as well? ",
        "createdAt" : "2018-09-18T12:11:22Z",
        "updatedAt" : "2018-09-19T20:20:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cc55f988-f096-44e3-938e-a84ebb896430",
        "parentId" : "86b7df47-ebc0-4bc4-8a90-5e9ed79c1ce0",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "The .dt accessor tests are here: https://github.com/pandas-dev/pandas/blob/ef263112fa9e7f8ac8a3b965fab7fb111adace20/pandas/tests/series/test_datetime_values.py#L234",
        "createdAt" : "2018-09-19T16:38:29Z",
        "updatedAt" : "2018-09-19T20:20:03Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba7eddde9652c2ed58dae2413e9bc8c4f0a0aa86",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +104,108 @@              order\n            - bool-ndarray where True signifies a DST time, False designates\n              a non-DST time (note that this flag is only applicable for\n              ambiguous times)\n            - 'NaT' will return NaT where there are ambiguous times"
  },
  {
    "id" : "046d75a7-b417-4137-83ff-009f3c4adebe",
    "prId" : 23206,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23206#pullrequestreview-166046900",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ec8edb2-3cd4-4391-b1b0-8ad7bfce847f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "these need to be inside these functions\r\n\r\nthe is so smelly to have to call 2 functions here\r\npls fix",
        "createdAt" : "2018-10-18T11:32:03Z",
        "updatedAt" : "2018-10-18T11:32:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b8302b3fbb647324387b717f8b1b4f0f52090c3d",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +482,486 @@        \"\"\"\n        nv.validate_max(args, kwargs)\n        nv.validate_minmax_axis(axis)\n\n        try:"
  },
  {
    "id" : "5ed9efa9-b29a-45a6-b525-7bb2bef511f0",
    "prId" : 23218,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23218#pullrequestreview-166986398",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a51a111-c0a5-44bd-9dc1-fb631d627bd4",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "how is this related to the rest of the PR?",
        "createdAt" : "2018-10-22T12:52:53Z",
        "updatedAt" : "2018-10-22T12:54:52Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7092d208-a360-4aac-b6a7-9658e65a42ea",
        "parentId" : "2a51a111-c0a5-44bd-9dc1-fb631d627bd4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This PR changes DatetimeArrayMixin._time_shift such that it no longer pins `self.name` for Index subclasses.",
        "createdAt" : "2018-10-22T16:02:09Z",
        "updatedAt" : "2018-10-22T16:02:09Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9c021a4019dc449b44bd2e9104cb8e9f06914e1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +705,709 @@\n    @Appender(DatetimeLikeArrayMixin._time_shift.__doc__)\n    def _time_shift(self, periods, freq=None):\n        result = DatetimeLikeArrayMixin._time_shift(self, periods, freq=freq)\n        result.name = self.name"
  },
  {
    "id" : "659d49bc-7425-4823-928a-b9f4ed7180c3",
    "prId" : 23643,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23643#pullrequestreview-174869807",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "881d82a4-f8c0-43ae-aea6-034126a79a49",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "looks like you can remove part of the comment",
        "createdAt" : "2018-11-14T13:55:04Z",
        "updatedAt" : "2018-11-14T13:57:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cb072e7ec33c860183c8c20bd3596e0a3bff2a0",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +699,703 @@            # TODO(DatetimeArray)\n            # - remove the .asi8 here\n            # - remove the _maybe_box_as_values\n            # - combine with the `else` block\n            new_data = self._concat_same_type(to_concat).asi8"
  },
  {
    "id" : "3b4da457-ff40-42c8-bba5-8ff0ff0958e8",
    "prId" : 23885,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23885#pullrequestreview-178067524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ea4f48e-3841-4081-806f-4fc5e3b198ba",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Would this bubble up in any way?",
        "createdAt" : "2018-11-25T02:09:06Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "5bb5fab6-7d82-40e4-b688-2ca95ed19895",
        "parentId" : "1ea4f48e-3841-4081-806f-4fc5e3b198ba",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Do you mean the whole `isinstance` block or the len-2 assertion?  The former is necessary, the latter is just protecting against me being a dummy.",
        "createdAt" : "2018-11-25T02:28:44Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "494b11d6-2ab8-457f-8e35-ae9708744cc8",
        "parentId" : "1ea4f48e-3841-4081-806f-4fc5e3b198ba",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Referring just to the `len-2`.  While I appreciate dummy-protection, I would still want to know if that `assert` would surface for end-users, that's all.",
        "createdAt" : "2018-11-25T02:33:05Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "987eecdba662c14ddf9d364d9de73af189cb4d71",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +576,580 @@    if isinstance(result, tuple):\n        # divmod, rdivmod\n        assert len(result) == 2\n        return (wrap_arithmetic_op(self, other, result[0]),\n                wrap_arithmetic_op(self, other, result[1]))"
  },
  {
    "id" : "bbbc34e1-a026-47d8-90b8-890bc4553019",
    "prId" : 24024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24024#pullrequestreview-186125421",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "636ae24f-7bf0-48a3-84af-4dd74f40eb5d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't this be ExtensionArray ?",
        "createdAt" : "2018-12-13T01:22:37Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "567a67b6-44c7-4a99-819f-f795353daba4",
        "parentId" : "636ae24f-7bf0-48a3-84af-4dd74f40eb5d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "In place of DateimeLikeArrayMixin? I don't think so. `.view` isn't part of the EA interface.",
        "createdAt" : "2018-12-13T03:57:16Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "dba574f5-8248-4efc-824c-a92e65900f89",
        "parentId" : "636ae24f-7bf0-48a3-84af-4dd74f40eb5d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Should we consider adding it to the EA interface, or otherwise removing it for DatetimeArray as well?",
        "createdAt" : "2018-12-13T15:58:32Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "61c4de81-bda8-4944-b27f-e7704016e6fc",
        "parentId" : "636ae24f-7bf0-48a3-84af-4dd74f40eb5d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "No, I don't think it makes sense for the interface: \r\nhttps://github.com/pandas-dev/pandas/pull/24024#issuecomment-447827817",
        "createdAt" : "2018-12-18T15:26:33Z",
        "updatedAt" : "2019-01-02T16:41:45Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "2436214219fc116239640889715c9bc6575f571b",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +175,179 @@        @staticmethod\n        def wrapper(left, right):\n            if isinstance(left, (np.ndarray, ABCIndex, ABCSeries,\n                                 DatetimeLikeArrayMixin)):\n                left = left.view('i8')"
  },
  {
    "id" : "00c6c9f3-7cbb-4f00-815a-bb229786e68b",
    "prId" : 24024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24024#pullrequestreview-184757128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ec605b6-6d27-4d24-875b-cc717dea4825",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Maybe for another PR to rethink this / clean this up, but, are there still differences between `_values` and `_data` ?",
        "createdAt" : "2018-12-13T15:53:15Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f8b61fd9-c0d0-463e-ab48-8f52cff6634b",
        "parentId" : "1ec605b6-6d27-4d24-875b-cc717dea4825",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Nope, they're all identical now (which is why I moved it `indexes/datetimelike.py` (no subclass overrides it).",
        "createdAt" : "2018-12-13T16:41:07Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "2436214219fc116239640889715c9bc6575f571b",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +74,78 @@    @property\n    def _eadata(self):\n        return self._data\n\n    @property"
  },
  {
    "id" : "80b37bbb-7244-4399-b250-00dce56637fc",
    "prId" : 24039,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24039#pullrequestreview-180568910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71c0d938-1fc4-46ef-8175-27641d82c63c",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this will need checks for 2-tuples in divmod and rdivmod, for scalars for eventual reduction ops",
        "createdAt" : "2018-12-02T02:26:05Z",
        "updatedAt" : "2018-12-03T12:44:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7fdd418a-9ef9-4590-9ca8-38a260e9b195",
        "parentId" : "71c0d938-1fc4-46ef-8175-27641d82c63c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think all the delegated methods return a single value.",
        "createdAt" : "2018-12-02T02:46:26Z",
        "updatedAt" : "2018-12-03T12:44:23Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "e2c19f8d-31d9-40e0-87a7-55cb8bfe4442",
        "parentId" : "71c0d938-1fc4-46ef-8175-27641d82c63c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "If #23885 goes through that will change",
        "createdAt" : "2018-12-02T03:05:53Z",
        "updatedAt" : "2018-12-03T12:44:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3e13fd13-e266-454f-b690-c861bbd04f6c",
        "parentId" : "71c0d938-1fc4-46ef-8175-27641d82c63c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Gotcha. I'd prefer to wait until we can hit that code path before worrying about it.",
        "createdAt" : "2018-12-02T13:06:11Z",
        "updatedAt" : "2018-12-03T12:44:23Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "1afadd4e-803d-45e0-9098-e7dea2697bfa",
        "parentId" : "71c0d938-1fc4-46ef-8175-27641d82c63c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Totally fair.",
        "createdAt" : "2018-12-02T16:53:15Z",
        "updatedAt" : "2018-12-03T12:44:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f3f4c92c5c62eca7970c40b4c785c77b89a178e",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +683,687 @@        result = operator.methodcaller(name, *args, **kwargs)(self._data)\n        if name not in self._raw_methods:\n            result = Index(result, name=self.name)\n        return result"
  },
  {
    "id" : "d08f0e7d-d854-47eb-9fc9-0fc2306e9647",
    "prId" : 24039,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24039#pullrequestreview-180545746",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82309a59-fc0c-4f5c-9876-2e03b268c658",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Is PandasDelegate overkill for this situation?  It's not like `Series.dt` where we construct an object and need to cache it.  Couldn't we just use something like:\r\n\r\n```\r\ndef pass_through_methods(names):\r\n    def decorator(cls):\r\n        for name in names:\r\n            method = wrap_array_method(...)\r\n            setattr(cls, name, method)\r\n        return cls\r\n```\r\n\r\nThere's definitely overlap with the PandasDelegate machinery, but I think that machinery makes for really dense reading, so should be reserved for when we really need it.",
        "createdAt" : "2018-12-02T02:34:37Z",
        "updatedAt" : "2018-12-03T12:44:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f4b2d9af-e1e3-4959-b1e9-1a12f96e9983",
        "parentId" : "82309a59-fc0c-4f5c-9876-2e03b268c658",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Perhaps you're thinking of `Properties` (which subclasses `PandasDelegate`)? `PandasDelegate` doesn't have an `__init__`, it just handles registering and creating the delegated properties.\r\n\r\n",
        "createdAt" : "2018-12-02T02:51:49Z",
        "updatedAt" : "2018-12-03T12:44:23Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "e5e1e6e7-f78f-45e9-aa16-73b7f1767aaa",
        "parentId" : "82309a59-fc0c-4f5c-9876-2e03b268c658",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "But, I don't have a strong preference of one of the other. We use `PandasDelegate` on master, for period, so this PR is a strict generalization of that.",
        "createdAt" : "2018-12-02T02:52:44Z",
        "updatedAt" : "2018-12-03T12:44:23Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f3f4c92c5c62eca7970c40b4c785c77b89a178e",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +642,646 @@\n\nclass DatetimelikeDelegateMixin(PandasDelegate):\n    \"\"\"\n    Delegation mechanism, specific for Datetime, Timedelta, and Period types."
  },
  {
    "id" : "eeac7a64-74ba-44d4-a2f9-4db11f0d43eb",
    "prId" : 24293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24293#pullrequestreview-185371868",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33fcbcdc-43a9-44c6-ba91-edfbfe44f037",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can these inherit the doc-string?",
        "createdAt" : "2018-12-15T19:11:59Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3e1fc17e-3b08-4027-bd92-3d29f5917bae",
        "parentId" : "33fcbcdc-43a9-44c6-ba91-edfbfe44f037",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'll take a look.  Might also get rid of `*args` while at it",
        "createdAt" : "2018-12-15T19:47:56Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "89a144fc-b865-48f7-82d3-db8bbbaf4c81",
        "parentId" : "33fcbcdc-43a9-44c6-ba91-edfbfe44f037",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Hmm the docstrings here and for the corresponding methods in base.IndexOpsMixin are kind of clunky.  This may merit a separate look, @datapythonista ?",
        "createdAt" : "2018-12-15T19:59:30Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3b667612-4b40-47cc-b159-a924e7fadc57",
        "parentId" : "33fcbcdc-43a9-44c6-ba91-edfbfe44f037",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I don't know well what's the class hierarchy and whether makes sense to inherit. But we'll have to add `Parameters`, `Returns` and `Examples` section here if this is public.",
        "createdAt" : "2018-12-16T01:13:32Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4028a14ef585dae19805f05db74ad1495e09e8",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +301,305 @@            return self._na_value\n\n    def argmin(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Returns the indices of the minimum values along an axis."
  },
  {
    "id" : "8bd626ff-eec1-4f2e-8880-52f2c9d7e7eb",
    "prId" : 24293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24293#pullrequestreview-187630325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ec50b4f-275e-4b7b-93c4-268e5005a533",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2018-12-23T19:17:45Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4028a14ef585dae19805f05db74ad1495e09e8",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +347,351 @@                    return self._box_func(i8[-1])\n\n            if self.hasnans:\n                if skipna:\n                    max_stamp = self[~self._isnan].asi8.max()"
  },
  {
    "id" : "568232f7-e2f7-4c0b-a5bc-24dfbc6b3580",
    "prId" : 24293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24293#pullrequestreview-188183055",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45e627c1-02fc-45d9-bb7e-85c6e614c812",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "these quick checks make sense for Index as they are immutable, but may not make much sense here (but i guess can evaluate later)",
        "createdAt" : "2018-12-27T21:57:01Z",
        "updatedAt" : "2018-12-28T23:37:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4028a14ef585dae19805f05db74ad1495e09e8",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +286,290 @@        try:\n            # quick check\n            if len(i8) and self.is_monotonic:\n                if i8[0] != iNaT:\n                    return self._box_func(i8[0])"
  },
  {
    "id" : "af234dfd-e388-4efb-b344-6af185b2f0af",
    "prId" : 24378,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24378#pullrequestreview-187419879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "164e4ec1-7bce-4699-80d3-a3b0f269a3df",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you just call super here?",
        "createdAt" : "2018-12-21T14:20:30Z",
        "updatedAt" : "2018-12-21T14:20:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ad4efe98-4e58-4bf5-980d-6cbe4e705400",
        "parentId" : "164e4ec1-7bce-4699-80d3-a3b0f269a3df",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We could, but this is much closer to what we'll want here after the inheritance/composition changeover.",
        "createdAt" : "2018-12-21T14:50:22Z",
        "updatedAt" : "2018-12-21T14:50:22Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bd6964bcdf19a3a95a70d807257ee9774d16c27",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +112,116 @@    def _ensure_localized(self, arg, ambiguous='raise', nonexistent='raise',\n                          from_utc=False):\n        # See DatetimeLikeArrayMixin._ensure_localized.__doc__\n\n        if getattr(self, 'tz', None):"
  },
  {
    "id" : "6ceff72e-0759-480a-be1b-11aae5786ac1",
    "prId" : 24394,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24394#pullrequestreview-187637783",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80790170-7c0c-48cb-9c1f-6c01eca6cd17",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is a general function no? if you simply check for a ``__eadata`` attribute. let's put this elsewhere, maybe pandas.core.base",
        "createdAt" : "2018-12-24T00:39:40Z",
        "updatedAt" : "2018-12-27T22:48:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "86e55c5b-8d8c-412e-beff-09dc2d4e86a2",
        "parentId" : "80790170-7c0c-48cb-9c1f-6c01eca6cd17",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The idea is for _eadata to only exist for a few days until we're ready to complete the switchover.  Regardless, maybe_unwrap_index should only be relevant for DTI/TDI/PI.",
        "createdAt" : "2018-12-24T01:19:25Z",
        "updatedAt" : "2018-12-27T22:48:21Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "00149f8269840083c3e363d5f5fc7aafa2e4598a",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +652,656 @@\n\ndef maybe_unwrap_index(obj):\n    \"\"\"\n    If operating against another Index object, we need to unwrap the underlying"
  },
  {
    "id" : "29d667b9-7d16-4eab-a82c-0bef93b93ae2",
    "prId" : 24395,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24395#pullrequestreview-187581420",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d99a3ad-0291-4984-8c4b-147e40ee6b8b",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "I've deleted the `PeriodIndex` implementation in favor of this, but there looks to be a bug in `PeriodIndex` that causes this to break for frequencies with a multiplier, e.g. `'2D'` (xref #24391).  I've xfailed the associated broken test, but can reinstate the `PeriodIndex` implementation if we'd rather have a fully working version.",
        "createdAt" : "2018-12-22T05:44:20Z",
        "updatedAt" : "2018-12-23T21:02:25Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "88ab2853eb56bcb8c595680cc33449534a84f5f6",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +450,454 @@        nv.validate_repeat(args, kwargs)\n        freq = self.freq if is_period_dtype(self) else None\n        return self._shallow_copy(self.asi8.repeat(repeats), freq=freq)\n\n    @Appender(_index_shared_docs['where'] % _index_doc_kwargs)"
  },
  {
    "id" : "efca68c3-7ae7-4383-bced-912191b336fa",
    "prId" : 24461,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24461#pullrequestreview-188360199",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80eec35e-da72-4632-b3e5-fcaa29b06fdb",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "What's blocking this right now?",
        "createdAt" : "2018-12-28T19:52:10Z",
        "updatedAt" : "2018-12-28T20:35:50Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "5fad1dde-0809-4e95-897c-8d611692bf4d",
        "parentId" : "80eec35e-da72-4632-b3e5-fcaa29b06fdb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think nothing, just forgot to change before pushing.  Will do that now.",
        "createdAt" : "2018-12-28T19:56:45Z",
        "updatedAt" : "2018-12-28T20:35:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5075eabe-bef8-426e-9040-ed98e903c9c3",
        "parentId" : "80eec35e-da72-4632-b3e5-fcaa29b06fdb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Actually no, this needs to wait until DTI._data is a DTA",
        "createdAt" : "2018-12-28T19:58:18Z",
        "updatedAt" : "2018-12-28T20:35:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9873c12ecead738f6da0e4963fac36910f218489",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +478,482 @@        freq = self.freq if is_period_dtype(self) else None\n        return self._shallow_copy(self.asi8.repeat(repeats), freq=freq)\n        # TODO: dispatch to _eadata\n\n    @Appender(_index_shared_docs['where'] % _index_doc_kwargs)"
  },
  {
    "id" : "973bc510-ef67-4731-9d26-a9bd992a3e9d",
    "prId" : 24476,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24476#pullrequestreview-188393542",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61d30b13-5253-4be4-8feb-457e17aa3025",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Will this stick around even after eadata is removed? If so, then yeah getting the docstrings right would be nice.",
        "createdAt" : "2018-12-29T03:12:31Z",
        "updatedAt" : "2018-12-29T15:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "19d816bb-c870-4a26-b7a3-4a974c3c2ed2",
        "parentId" : "61d30b13-5253-4be4-8feb-457e17aa3025",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Some variant of it, or it could be rolled in to the Delegators (though that might then need to be moved to the top of the file).  Regardless, I'll add a docstring.",
        "createdAt" : "2018-12-29T03:38:48Z",
        "updatedAt" : "2018-12-29T15:55:34Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6a8951409a26093548da95ebbe41c25d74d4783",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +32,36 @@\n\ndef ea_passthrough(name):\n    \"\"\"\n    Make an alias for a method of the underlying ExtensionArray."
  },
  {
    "id" : "a8351da7-b574-410a-aeb6-025a9f09638c",
    "prId" : 24573,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24573#pullrequestreview-188850465",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92138161-9a90-4895-80a6-65d738ef7b43",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this should address @jorisvandenbossche's point that docstrings are lost in the existing implementation",
        "createdAt" : "2019-01-02T22:19:57Z",
        "updatedAt" : "2019-01-02T22:25:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fafe66eb35eb84d9c3acfad9101c358a9dc7aca3",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +49,53 @@\n    method.__name__ = array_method.__name__\n    method.__doc__ = array_method.__doc__\n    return method\n"
  },
  {
    "id" : "b9cbaa44-7a7a-4cf1-abfb-fcecb96b9bf1",
    "prId" : 25913,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25913#pullrequestreview-220832459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1359992a-a4bc-4850-9c86-97275f882b87",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you give a comment or 2 about what is going on here",
        "createdAt" : "2019-03-30T18:42:45Z",
        "updatedAt" : "2019-04-29T18:33:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d7205dc3c501a9ff3125debbede7e66d3a564b7",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +579,583 @@        end = min(left[-1], right[-1])\n        start = right[0]\n\n        if end < start:\n            return type(self)(data=[])"
  },
  {
    "id" : "2d394ff1-b4ca-4339-a912-12d8b2aa3efe",
    "prId" : 26280,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26280#pullrequestreview-245161856",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "070f9b80-73f0-4f24-817b-7b2c49d158fa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why this change?",
        "createdAt" : "2019-05-30T12:23:20Z",
        "updatedAt" : "2019-06-25T11:38:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "79e25427-4865-4e9b-9a08-58f7ca8051f8",
        "parentId" : "070f9b80-73f0-4f24-817b-7b2c49d158fa",
        "authorId" : "5d486e53-1409-4c5f-9cac-03c066f838b9",
        "body" : "mypy has the following error for the annotated value function: \r\n\r\n`pandas/core/indexes/datetimelike.py:139: error: \"None\" has no attribute \"_data\"`\r\n\r\nI add annotation ` # type: DatetimeArray ` to `_data`. But mypy still has the same error.\r\nhttps://github.com/pandas-dev/pandas/blob/8154efb0c1a64295cf54e00025b4ab09bcd02752/pandas/core/indexes/datetimes.py#L327\r\n\r\nI guess that mypy mixed up the instance attribute `_data` with the class attributes `_data` which is set `None` in the beginning of DatetimeIndexOpsMixin. ",
        "createdAt" : "2019-05-30T12:35:43Z",
        "updatedAt" : "2019-06-25T11:38:15Z",
        "lastEditedBy" : "5d486e53-1409-4c5f-9cac-03c066f838b9",
        "tags" : [
        ]
      },
      {
        "id" : "e3f9276c-937a-4223-bc9c-8e51f276bb8f",
        "parentId" : "070f9b80-73f0-4f24-817b-7b2c49d158fa",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "cc @WillAyd ",
        "createdAt" : "2019-05-30T12:37:15Z",
        "updatedAt" : "2019-06-25T11:38:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "867d2376-bdde-47fe-8f45-4791e3f2e103",
        "parentId" : "070f9b80-73f0-4f24-817b-7b2c49d158fa",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Sorry missed this ping. This could be a similar conversation to https://github.com/pandas-dev/pandas/pull/26518/files#r287573810",
        "createdAt" : "2019-06-03T22:39:12Z",
        "updatedAt" : "2019-06-25T11:38:15Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ee036f0a-597e-42fb-8119-ab733388da66",
        "parentId" : "070f9b80-73f0-4f24-817b-7b2c49d158fa",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think a better solution is to provide the appropriate type to `_data`. Can you create a `DatetimeLikeArray` in pandas._typing which should be something like `DatetimeLikeArray = TypeVar('DatetimeLikeArray', DatetimeArray, PeriodArray, TimedeltaArray)` and assign that type to `_data` in the class? I think that should resolve.\r\n\r\ncc @jbrockmendel in case he has other insights on the types here",
        "createdAt" : "2019-06-03T22:50:20Z",
        "updatedAt" : "2019-06-25T11:38:15Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b061ac190665d3c4df3adcae2683d2fbf8edf60f",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +134,138 @@    # Abstract data attributes\n\n    @property\n    def values(self):\n        # Note: PeriodArray overrides this to return an ndarray of objects."
  },
  {
    "id" : "2a581b24-f6ad-4aeb-b4f3-81846678fa28",
    "prId" : 27896,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27896#pullrequestreview-275405436",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1eb16fd-2c1a-4bf8-8c0a-625bf0cb20ab",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "sidenote (not for this PR): we should move to `__array_ufunc__` here instead ",
        "createdAt" : "2019-08-14T18:56:40Z",
        "updatedAt" : "2019-08-14T21:42:17Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "3da0be50-0a06-42b8-814d-fc2a592a0d46",
        "parentId" : "f1eb16fd-2c1a-4bf8-8c0a-625bf0cb20ab",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "agreed on this, can you create an issue @jbrockmendel ",
        "createdAt" : "2019-08-15T12:42:24Z",
        "updatedAt" : "2019-08-15T12:42:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4021900d1675eaa0b7354621f3e1ee215e07fd2e",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +165,169 @@        return self._data.asi8\n\n    def __array_wrap__(self, result, context=None):\n        \"\"\"\n        Gets called after a ufunc."
  },
  {
    "id" : "5fdf6a3c-84fd-42fc-8727-2af75882fee5",
    "prId" : 30515,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30515#pullrequestreview-391680954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd4147a1-b228-467f-a8b1-dccb44d72457",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the `   @doc(Index._convert_arr_indexer)`\r\n ",
        "createdAt" : "2020-04-10T21:52:32Z",
        "updatedAt" : "2020-05-03T15:17:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f2db9acb8764b7244c113f88ff4a1c7e30879fa",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +578,582 @@\n    @doc(Index._convert_arr_indexer)\n    def _convert_arr_indexer(self, keyarr):\n        if lib.infer_dtype(keyarr) == \"string\":\n            # Weak reasoning that indexer is a list of strings"
  },
  {
    "id" : "8fa6896f-80fc-4218-8074-808eddd890a0",
    "prId" : 30515,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30515#pullrequestreview-396087530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9728014c-9d56-4b18-a5a0-cf0409737ddf",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "im a little confused.  do we want to end up with a StringArray here or DatetimeArray/PeriodArray?",
        "createdAt" : "2020-04-20T01:01:58Z",
        "updatedAt" : "2020-05-03T15:17:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "20a1134e-7a15-432b-89e7-c99610c39406",
        "parentId" : "9728014c-9d56-4b18-a5a0-cf0409737ddf",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "oh never mind, didnt notice self.dtype arg the first time around",
        "createdAt" : "2020-04-20T01:04:15Z",
        "updatedAt" : "2020-05-03T15:17:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f2db9acb8764b7244c113f88ff4a1c7e30879fa",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +588,592 @@                return keyarr\n\n            converted_arr = extract_array(extension_arr, extract_numpy=True)\n        else:\n            converted_arr = com.asarray_tuplesafe(keyarr)"
  },
  {
    "id" : "dfdd5c84-3fba-4085-9261-e0b18647a0c7",
    "prId" : 30695,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30695#pullrequestreview-338373399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4dba9d46-4d94-4d0f-a74a-7f6e937930ce",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "type if you can",
        "createdAt" : "2020-01-04T23:00:19Z",
        "updatedAt" : "2020-01-04T23:00:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba26905ed1ebe957dde78d2910d9e05fc251a97a",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +601,605 @@    # List-like Methods\n\n    def delete(self, loc):\n        new_i8s = np.delete(self.asi8, loc)\n"
  },
  {
    "id" : "194171bf-bc16-49e3-addb-6ebd1b42be70",
    "prId" : 30704,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30704#pullrequestreview-338376108",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ccc21ce-f526-4968-913d-f144d2727bbb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "comment could be more generic (TDI)",
        "createdAt" : "2020-01-05T00:56:27Z",
        "updatedAt" : "2020-01-05T02:48:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "dddafd66ef9e9e7a3838a8b40d977e1ee25065aa",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +784,788 @@            left, right = self, other\n        elif sort is False:\n            # TDIs are not in the \"correct\" order and we don't want\n            #  to sort but want to remove overlaps\n            left, right = self, other"
  },
  {
    "id" : "aa1c3711-5322-4fba-a3e8-b0ff33ed1c38",
    "prId" : 30714,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30714#pullrequestreview-338640802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d45e747-004c-4e1a-b394-819511ef6925",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "other can a Union[DTI, TDI]",
        "createdAt" : "2020-01-05T20:15:07Z",
        "updatedAt" : "2020-01-05T20:15:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "10f9b190-b21b-466e-89ef-6b87d5ff86cd",
        "parentId" : "2d45e747-004c-4e1a-b394-819511ef6925",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@simonjayhawkins what's the preferred way of typing as `type(self)`?",
        "createdAt" : "2020-01-05T20:16:09Z",
        "updatedAt" : "2020-01-05T20:16:09Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "80473721-aed6-4e91-8714-be6126e332a8",
        "parentId" : "2d45e747-004c-4e1a-b394-819511ef6925",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "def _union(self: _T, other: Type[_T], sort):",
        "createdAt" : "2020-01-05T20:17:54Z",
        "updatedAt" : "2020-01-05T20:17:54Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "ba3151c2-2c74-409e-9a53-400796548659",
        "parentId" : "2d45e747-004c-4e1a-b394-819511ef6925",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "where does _T come from?  I dont see this pattern anywhere else in the code",
        "createdAt" : "2020-01-05T20:46:57Z",
        "updatedAt" : "2020-01-05T20:46:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5a507030-6c39-439c-ab94-8555ae6d7e0a",
        "parentId" : "2d45e747-004c-4e1a-b394-819511ef6925",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i vote for merging and adding annotations in follow-up",
        "createdAt" : "2020-01-05T23:24:21Z",
        "updatedAt" : "2020-01-05T23:24:21Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "41018d4f-b0f2-4326-8713-41caa7c01484",
        "parentId" : "2d45e747-004c-4e1a-b394-819511ef6925",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "followup ok",
        "createdAt" : "2020-01-06T13:28:14Z",
        "updatedAt" : "2020-01-06T13:28:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "262e16be192dca9d9820b703f111568cfd5f07d9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +807,811 @@            return left\n\n    def _union(self, other, sort):\n        if not len(other) or self.equals(other) or not len(self):\n            return super()._union(other, sort=sort)"
  },
  {
    "id" : "c82dcbfc-cdaa-48f1-9170-bef5de934470",
    "prId" : 30877,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30877#pullrequestreview-342284367",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d435bb0e-4807-4368-ad23-46e4a306e69e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "isn't the bool redundant here?",
        "createdAt" : "2020-01-14T04:19:04Z",
        "updatedAt" : "2020-01-14T04:19:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9b944963-ebfc-4f0b-8d1b-e390889273d7",
        "parentId" : "d435bb0e-4807-4368-ad23-46e4a306e69e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "not according to mypy",
        "createdAt" : "2020-01-14T04:20:43Z",
        "updatedAt" : "2020-01-14T04:20:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f7531d51063ad60aa0cc7e8342ed599a996380a",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +159,163 @@        except (KeyError, TypeError, ValueError):\n            return False\n        return bool(\n            is_scalar(res) or isinstance(res, slice) or (is_list_like(res) and len(res))\n        )"
  },
  {
    "id" : "c4229478-cb07-43b2-a016-679e856536f6",
    "prId" : 31143,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31143#pullrequestreview-345428465",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9eccaddc-0681-4ee8-aa3f-574c6fcb125e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't the Index.insert do this string check? e.g. why do you need the if / TypeError here? (rather than just `return self.astype(object).insert(loc, item)`",
        "createdAt" : "2020-01-20T15:11:20Z",
        "updatedAt" : "2020-01-20T15:11:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c193a7dc-a6af-41cd-91f6-8eb70262886a",
        "parentId" : "9eccaddc-0681-4ee8-aa3f-574c6fcb125e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yah its definitely weird (and also doesn't _quite_ match PeriodIndex.insert).  ATM the DTI and TDI versions are effectively identical, so this is just de-deplicating so the next pass only has to de-weird in one place.",
        "createdAt" : "2020-01-20T16:39:18Z",
        "updatedAt" : "2020-01-20T16:39:19Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d2e01893d88ffe3d185b28049ebb2ddea49abfd",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +945,949 @@\n            # fall back to object index\n            if isinstance(item, str):\n                return self.astype(object).insert(loc, item)\n            raise TypeError("
  },
  {
    "id" : "c44b9ce4-8550-47cf-8986-8530ee1cb989",
    "prId" : 31676,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31676#pullrequestreview-353406066",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea076911-8a63-4a19-8611-4c49ce91cdea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what is this now caught by?",
        "createdAt" : "2020-02-05T00:45:22Z",
        "updatedAt" : "2020-02-05T00:45:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "86a84445-6823-4d35-8ea6-5b571b9e0b97",
        "parentId" : "ea076911-8a63-4a19-8611-4c49ce91cdea",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The check in indexing L1800 prevents us from actually getting here",
        "createdAt" : "2020-02-05T00:48:07Z",
        "updatedAt" : "2020-02-05T00:48:07Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "fe9e358a-91f5-41d6-b26d-6758e4a0cd4c",
        "parentId" : "ea076911-8a63-4a19-8611-4c49ce91cdea",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "kk",
        "createdAt" : "2020-02-05T00:56:34Z",
        "updatedAt" : "2020-02-05T00:56:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a1961dea29e38bf35c1d4cd32f59bf24c3a845b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +400,404 @@\n        if not is_scalar(key):\n            raise TypeError(key)\n\n        # we don't allow integer/float indexing for loc"
  },
  {
    "id" : "42ea94f6-b00d-495b-8b4d-2c388e161ba2",
    "prId" : 31970,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31970#pullrequestreview-368488219",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0790ac7-7109-4bd8-9ee1-5c0b2e02de35",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Same comment - this is very confusing",
        "createdAt" : "2020-02-20T23:47:21Z",
        "updatedAt" : "2020-03-11T23:21:23Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b4f45a53-742e-42d2-bc96-851edba68874",
        "parentId" : "a0790ac7-7109-4bd8-9ee1-5c0b2e02de35",
        "authorId" : "a4f1b7e8-eff6-4cf3-a1b5-7627eaa0f198",
        "body" : "Hi @WillAyd, I agree with you and @ simonjayhawkins here. It might be confusing. However, the original docstring is not extended from the base class. It seems like the original code obscures the problem because it does not explicitly indicate the source of the docstring. I try to keep it as it is but use `@doc`.\r\n\r\nIt looks like we all agree this docstring template will confuse other developers, but do you feel needed to fix this issue in this PR? If so, what will be your suggestion? One option that comes in my mind will be using the docstring from the base class, and modify them to fit in this case. I was trying to avoid that because it will change the original docstring relations, and I am not sure if we did this on purpose. \r\n\r\nJust to be clarified, I am very willing to make the additional change to solve this confusion. I just don't know what will be the best way of doing that. One more thing, I have a [comment](https://github.com/pandas-dev/pandas/pull/31970#issuecomment-586631930) related to this. You might also be interested. ",
        "createdAt" : "2020-02-23T00:53:57Z",
        "updatedAt" : "2020-03-11T23:21:23Z",
        "lastEditedBy" : "a4f1b7e8-eff6-4cf3-a1b5-7627eaa0f198",
        "tags" : [
        ]
      },
      {
        "id" : "31096917-d009-400a-b901-a3d2cc5749fc",
        "parentId" : "a0790ac7-7109-4bd8-9ee1-5c0b2e02de35",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is there a more suitable location for the docstring then? Importing the IndexOpsMixin here is strange",
        "createdAt" : "2020-03-03T02:51:12Z",
        "updatedAt" : "2020-03-11T23:21:23Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "0f9d84a8-dec6-48fa-999a-f47d0ff8152a",
        "parentId" : "a0790ac7-7109-4bd8-9ee1-5c0b2e02de35",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Personally I think this should be addressed in a follow up. It's here in `IndexOpsMixin` because that's where the `_shared_docs` was. I think this PR is already too complex to make the change here. And if we change `_shared_docs` before merging this, the conflict here will be quite annoying to fix. Does it make sense?",
        "createdAt" : "2020-03-03T14:00:22Z",
        "updatedAt" : "2020-03-11T23:21:23Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "0545b903-6a00-4ed9-b7a9-34b7fdbf71fb",
        "parentId" : "a0790ac7-7109-4bd8-9ee1-5c0b2e02de35",
        "authorId" : "a4f1b7e8-eff6-4cf3-a1b5-7627eaa0f198",
        "body" : "> Is there a more suitable location for the docstring then? Importing the IndexOpsMixin here is strange\r\n\r\nFor me, I feel this situation might be caused by they are sharing the same interface, but don't have a common ancestor. \r\n\r\nIf we have an interface declaration, I would say putting docstring there would be a good choice. However, Python as a dynamic programming language, don't have to declare the interface.\r\n\r\nNow, I don't have a good solution in mind, but I would like to look for it and see if we can find somewhere that makes more sense.",
        "createdAt" : "2020-03-04T03:48:00Z",
        "updatedAt" : "2020-03-11T23:21:23Z",
        "lastEditedBy" : "a4f1b7e8-eff6-4cf3-a1b5-7627eaa0f198",
        "tags" : [
        ]
      }
    ],
    "commit" : "95a86eec06b2c2d115b607de4d22a492088d3902",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +207,211 @@        )\n\n    @doc(IndexOpsMixin.searchsorted, klass=\"Datetime-like Index\")\n    def searchsorted(self, value, side=\"left\", sorter=None):\n        if isinstance(value, str):"
  },
  {
    "id" : "cbfe62f2-139c-4c02-a3b2-ec71912e08bc",
    "prId" : 32269,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32269#pullrequestreview-365621010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e7142d2-940e-4f72-8e0c-7bd4e5447433",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "can you add a comment why the type:ignore has been added.",
        "createdAt" : "2020-02-27T11:56:37Z",
        "updatedAt" : "2020-02-27T11:58:35Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ae3670e7bf95b95318528e6a37ddad1e84fbe7b",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +863,867 @@\n        freq = self.freq if self._can_fast_union(other) else None\n        new_data = type(self._data)._simple_new(  # type: ignore\n            joined, dtype=self.dtype, freq=freq\n        )"
  },
  {
    "id" : "b285f484-9477-4527-a6ad-6277cae19ec9",
    "prId" : 32280,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32280#pullrequestreview-365750858",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e37145a-4b4a-4671-9868-922b02dd19ec",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is _shallow_copy just not this exactly? it seems we have been expanding to these 2 lines rather than just using _shallow_copy.",
        "createdAt" : "2020-02-27T12:55:25Z",
        "updatedAt" : "2020-02-27T12:55:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b624d6ad-52ef-4d2b-9680-fa58c1778298",
        "parentId" : "4e37145a-4b4a-4671-9868-922b02dd19ec",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "because we're being more careful/explicit about when/whether to retain `self.freq`.  e.g. until recently this method incorrectly retained self.freq for DTI/TDI.",
        "createdAt" : "2020-02-27T15:20:14Z",
        "updatedAt" : "2020-02-27T15:20:14Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cb67b4c3914767a31fa2f5998047af790f09133",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +521,525 @@\n        result = np.where(cond, values, other).astype(\"i8\")\n        arr = type(self._data)._simple_new(result, dtype=self.dtype)\n        return type(self)._simple_new(arr, name=self.name)\n"
  },
  {
    "id" : "1d013bb1-d2b4-4a8b-8ec9-7c4d7bda382a",
    "prId" : 32282,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32282#pullrequestreview-374626879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1fde5b9-b439-49bc-a6d7-106205d35994",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you could change _set_freq to return self to make this idiom more clear (also _set_freq should be marked in the doc-string as a mutating function)",
        "createdAt" : "2020-03-08T15:37:02Z",
        "updatedAt" : "2020-03-13T21:09:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "48f88976-ea71-4229-8cc3-bebbc53c9d97",
        "parentId" : "c1fde5b9-b439-49bc-a6d7-106205d35994",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Holding off on this since _set_freq needs a bigger rethink, xref #31218.  \r\n\r\nAll other comments addressed, i think",
        "createdAt" : "2020-03-13T21:21:52Z",
        "updatedAt" : "2020-03-13T21:21:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e74ebc02ff822fceb9ff44b2405795e5da483789",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +787,791 @@            dates = concat_compat((left.values, right_chunk))\n            result = self._shallow_copy(dates)\n            result._set_freq(\"infer\")\n            # TODO: can we infer that it has self.freq?\n            return result"
  },
  {
    "id" : "f43be477-652e-4728-8ad5-8efdcc2e5972",
    "prId" : 33736,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33736#pullrequestreview-399227461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65bed595-7155-43c0-96c5-2c3fa46f1f97",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "to avoid this pattern in the base class, could _can_fast_union be overridden in PeriodIndex to always return True.",
        "createdAt" : "2020-04-23T08:40:16Z",
        "updatedAt" : "2020-04-23T08:40:16Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "ca2992d6-ba31-48cb-bc95-9a5232dc776e",
        "parentId" : "65bed595-7155-43c0-96c5-2c3fa46f1f97",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "on second thoughts perhaps put in DatetimeIndexOpsMixin and then it's overridden in DatetimeTimedeltaMixin and the cast is not necessary.",
        "createdAt" : "2020-04-23T08:47:23Z",
        "updatedAt" : "2020-04-23T08:47:23Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "62d05ea4-f443-4d55-a740-ee859a026775",
        "parentId" : "65bed595-7155-43c0-96c5-2c3fa46f1f97",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i considered this, but im planning to implement an actual _can_fast_union for PeriodIndex before long",
        "createdAt" : "2020-04-23T15:39:34Z",
        "updatedAt" : "2020-04-23T15:39:35Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "51fcff786ba3ab0e56f41c4836c47498635111cf",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +595,599 @@        else:\n            self = cast(DatetimeTimedeltaMixin, self)\n            freq = self.freq if self._can_fast_union(other) else None\n        new_data = type(self._data)._simple_new(joined, dtype=self.dtype, freq=freq)\n"
  },
  {
    "id" : "accde90b-9211-4e00-91ad-e2b182c7b72a",
    "prId" : 36413,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36413#pullrequestreview-491042154",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a70fec2-0d07-47f8-a814-dacf4547d25d",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "in Index._union we dont copy, probably should",
        "createdAt" : "2020-09-17T03:36:59Z",
        "updatedAt" : "2020-10-07T05:08:34Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "38fe0770-9bdf-4843-94d3-abc746e7cbd4",
        "parentId" : "3a70fec2-0d07-47f8-a814-dacf4547d25d",
        "authorId" : "9bb88d30-ac0c-4c78-9ac4-9178345da078",
        "body" : "The danger here is that someone accidentally modified the original version? Want me to add that to `Index._union` or save for later?",
        "createdAt" : "2020-09-17T04:02:03Z",
        "updatedAt" : "2020-10-07T05:08:34Z",
        "lastEditedBy" : "9bb88d30-ac0c-4c78-9ac4-9178345da078",
        "tags" : [
        ]
      },
      {
        "id" : "1cd5cc17-ce8f-499c-92fa-171b39b5a5e1",
        "parentId" : "3a70fec2-0d07-47f8-a814-dacf4547d25d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "lets go ahead and make it consistent now, yah",
        "createdAt" : "2020-09-17T22:53:47Z",
        "updatedAt" : "2020-10-07T05:08:34Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "17254c4768a9cd873d86f428fee14dbfa7834ceb",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +727,731 @@            return self.copy()._get_reconciled_name_object(other)\n        if len(other) == 0:\n            return other.copy()._get_reconciled_name_object(self)\n\n        if not isinstance(other, type(self)):"
  },
  {
    "id" : "d8ea6d57-204c-4498-b9df-ff617d13bb37",
    "prId" : 36413,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36413#pullrequestreview-495776296",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3703c90c-362e-4675-918e-c14e716b27a4",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "in the base class you got rid of the `_get_reconciled_name_object` usage.  why going the other direction here?",
        "createdAt" : "2020-09-24T16:08:35Z",
        "updatedAt" : "2020-10-07T05:08:34Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7a3a446e-91ed-4c0e-acf6-91fcfaf24dd8",
        "parentId" : "3703c90c-362e-4675-918e-c14e716b27a4",
        "authorId" : "9bb88d30-ac0c-4c78-9ac4-9178345da078",
        "body" : "Still keeping this around for the rare case where you want to return the same values but with a possible name change. In base.py it only shows up in the one `intersection` return clause (and not in `union` because of the `union`/`_union` split). It is interesting though that the version of `intersection` in datetimelike.py has two more quick return clauses than the base class.",
        "createdAt" : "2020-09-24T17:03:07Z",
        "updatedAt" : "2020-10-07T05:08:34Z",
        "lastEditedBy" : "9bb88d30-ac0c-4c78-9ac4-9178345da078",
        "tags" : [
        ]
      }
    ],
    "commit" : "17254c4768a9cd873d86f428fee14dbfa7834ceb",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +725,729 @@\n        if len(self) == 0:\n            return self.copy()._get_reconciled_name_object(other)\n        if len(other) == 0:\n            return other.copy()._get_reconciled_name_object(self)"
  },
  {
    "id" : "c3f7b4e4-68ce-4302-ad63-952f07e9ff89",
    "prId" : 36439,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36439#pullrequestreview-491444707",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0ecbcf9-06f1-4560-9077-580722d3aaab",
        "parentId" : null,
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "Would ``super().insert(loc, item)`` be better, more independent on the class name? Here and in``PeriodIndex``.",
        "createdAt" : "2020-09-18T11:14:54Z",
        "updatedAt" : "2020-09-18T11:15:22Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      },
      {
        "id" : "2370934b-7221-432d-a9b6-e1768c5684ed",
        "parentId" : "e0ecbcf9-06f1-4560-9077-580722d3aaab",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "super() is non-idiomatic here because of the somewhat complex inheitance chain we have; meaning you have to really undertand the mro as a reader; this is simpler. We don't actualy use super() except in a few small cases (maybe should change those).",
        "createdAt" : "2020-09-18T13:04:35Z",
        "updatedAt" : "2020-09-18T13:05:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "086e1b187dc89bfbd781ba5df476baaae6701ced",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +947,951 @@            return self.astype(object).insert(loc, item)\n\n        return DatetimeIndexOpsMixin.insert(self, loc, item)"
  },
  {
    "id" : "e2f70da3-d3e2-4662-b6d9-8a4b03fe21fc",
    "prId" : 36962,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36962#pullrequestreview-504376767",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f1999ef-156b-426b-8fa0-49e0de70cd9a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not is_dtype_equal?",
        "createdAt" : "2020-10-08T01:29:45Z",
        "updatedAt" : "2020-10-08T01:56:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9dc366fc-4421-4f01-aad3-c631b86f97d2",
        "parentId" : "5f1999ef-156b-426b-8fa0-49e0de70cd9a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i tend to avoid that for perf",
        "createdAt" : "2020-10-08T01:47:53Z",
        "updatedAt" : "2020-10-08T01:56:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7792f7fdc5c467805ab91df2894d47bf01f5dcca",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +152,156 @@\n            should_try = False\n            if other.dtype == object:\n                should_try = other.inferred_type in inferrable\n            elif is_categorical_dtype(other.dtype):"
  }
]