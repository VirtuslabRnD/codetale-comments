[
  {
    "id" : "74d5d009-86be-43f0-99ce-6b503d0a9877",
    "prId" : 17236,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17236#pullrequestreview-59519168",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4e7a44a-af8a-412a-80d9-d07d44ad26d8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this shouldn't need a noqa (if its line length, break it on the prarens",
        "createdAt" : "2017-08-30T10:36:09Z",
        "updatedAt" : "2017-08-30T16:34:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f13fbc64-b561-4319-bb0f-e829b26d897b",
        "parentId" : "c4e7a44a-af8a-412a-80d9-d07d44ad26d8",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think some of these are unused  and just there to export as part of the API.",
        "createdAt" : "2017-08-30T10:52:22Z",
        "updatedAt" : "2017-08-30T16:34:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "e46c1db9-39c4-418d-bfb8-0b9b57480c12",
        "parentId" : "c4e7a44a-af8a-412a-80d9-d07d44ad26d8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k",
        "createdAt" : "2017-08-30T11:01:34Z",
        "updatedAt" : "2017-08-30T16:34:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c8205c0681b486ed73bdcb816b3728bee1a5f78",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1,5 @@from pandas.core.indexes.base import (Index,\n                                      _new_Index,\n                                      _ensure_index,\n                                      _ensure_index_from_sequences,\n                                      _get_na_value,"
  },
  {
    "id" : "05424c5a-d305-4632-a065-95d8e3e4f0da",
    "prId" : 20613,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20613#pullrequestreview-116279415",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25f13e29-8d12-4d5a-b473-21340911fb61",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "isn't this already passed in as ``sort=True``?",
        "createdAt" : "2018-04-28T13:58:02Z",
        "updatedAt" : "2018-05-01T00:20:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d2dc1afe-ace9-476f-8675-970984dc200d",
        "parentId" : "25f13e29-8d12-4d5a-b473-21340911fb61",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "What do you mean?",
        "createdAt" : "2018-04-28T19:05:59Z",
        "updatedAt" : "2018-05-01T00:20:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "377e73fe-cd4a-43ec-8394-32800f65eca4",
        "parentId" : "25f13e29-8d12-4d5a-b473-21340911fb61",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I mean this is deeply buried here, why is this showing a user facing warning? IOW what is the user call that triggers this?",
        "createdAt" : "2018-04-29T21:10:37Z",
        "updatedAt" : "2018-05-01T00:20:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "98bdfe37-79e4-433d-8142-014f21a2564a",
        "parentId" : "25f13e29-8d12-4d5a-b473-21340911fb61",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> IOW what is the user call that triggers this?\r\n\r\n`pd.concat` or `DataFrame.append` with unaligned objects and an unspecified `sort`.\r\n\r\nWhere else would it go? Before this point we don't know what the indexes to align are, and whether or not they're aligned.",
        "createdAt" : "2018-04-30T13:06:01Z",
        "updatedAt" : "2018-05-01T00:20:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e1b0241358c10893939d135e91ab16cfa48cadd",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +111,115 @@        for other in indexes[1:]:\n            if not index.equals(other):\n\n                if sort is None:\n                    # TODO: remove once pd.concat sort default changes"
  },
  {
    "id" : "e07d739b-a5bb-4a06-ba20-dbb4f3c2bb73",
    "prId" : 20613,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20613#pullrequestreview-116476509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "137bb200-eede-4a7b-bd1c-00fca66299d3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would move ``_unique_indices`` from a nested function to module level (e.g. same as ``_union_indices`` (and maybe conform the spelling indices / indexes), and simply add a ``sort=`` kwarg (which you are already passing into fast_unique_multiple_lists). Then you can do the warning there. just makes this whole function a bit simpler.",
        "createdAt" : "2018-05-01T00:15:19Z",
        "updatedAt" : "2018-05-01T00:20:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e1b0241358c10893939d135e91ab16cfa48cadd",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +112,116 @@            if not index.equals(other):\n\n                if sort is None:\n                    # TODO: remove once pd.concat sort default changes\n                    warnings.warn(_sort_msg, FutureWarning, stacklevel=8)"
  },
  {
    "id" : "458391a8-0336-4fd3-91d6-b4769bb19247",
    "prId" : 25063,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25063#pullrequestreview-198815959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "371d0d3f-4081-4eae-94b8-c871e2b38a15",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Why was this necessary?",
        "createdAt" : "2019-01-31T20:58:00Z",
        "updatedAt" : "2019-02-01T20:06:14Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "dd02481b-fc2f-4fb6-847b-ba0aaf187ff0",
        "parentId" : "371d0d3f-4081-4eae-94b8-c871e2b38a15",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "For some concat tests. Basically, this `sort=sort` was only added in the PR that added a sort keyword (so before it was working fine without it), and I assume it was needed because initially it had a default of True. But now we switched it back to False, we don't need it. \r\nAnd the reason the tests were failing is because it was passing True, which is not allowed.\r\n",
        "createdAt" : "2019-01-31T21:09:28Z",
        "updatedAt" : "2019-02-01T20:06:14Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c5a0376dd93c38ffe71225cec9cea15fd9624f0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +113,117 @@        index = indexes[0]\n        for other in indexes[1:]:\n            index = index.intersection(other)\n    else:\n        index = _union_indexes(indexes, sort=sort)"
  },
  {
    "id" : "6d242594-c7ee-444b-acc1-96b6cfb40179",
    "prId" : 35098,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35098#pullrequestreview-444866749",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe3217ec-88a2-43ec-978a-44aed113e4d9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "really? why is this",
        "createdAt" : "2020-07-07T13:24:34Z",
        "updatedAt" : "2020-07-08T16:02:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f112cdd8-b430-4985-a5c8-f4e1024013ab",
        "parentId" : "fe3217ec-88a2-43ec-978a-44aed113e4d9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "IIRC sort is implemented for all union index types, or is it showing a warning?",
        "createdAt" : "2020-07-07T13:24:54Z",
        "updatedAt" : "2020-07-08T16:02:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3ad11f4d-d2d6-4e91-9c9a-e6a45c5545d0",
        "parentId" : "fe3217ec-88a2-43ec-978a-44aed113e4d9",
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "@jreback \r\nPassing `sort=True` to `Index.union` throws an error:\r\n\r\n```python\r\n    def _validate_sort_keyword(self, sort):\r\n        if sort not in [None, False]:\r\n            raise ValueError(\r\n                \"The 'sort' keyword only takes the values of \"\r\n                f\"None or False; {sort} was passed.\"\r\n            )\r\n```\r\n\r\nFirst thing `Index.union` [does](https://github.com/pandas-dev/pandas/blob/031fb16835af1f92522649d0b1f53808c5d9338c/pandas/core/indexes/base.py#L2527) is:\r\n\r\n```python\r\nself._validate_sort_keyword(sort)\r\nself._assert_can_do_setop(other)\r\n```\r\n\r\nHave no idea why a boolean argument is handled this way, but it's explicitly stated in the docstring, so it was done consciously:\r\n<details>\r\n```\r\n        sort : bool or None, default None\r\n            Whether to sort the resulting Index.\r\n\r\n            * None : Sort the result, except when\r\n\r\n              1. `self` and `other` are equal.\r\n              2. `self` or `other` has length 0.\r\n              3. Some values in `self` or `other` cannot be compared.\r\n                 A RuntimeWarning is issued in this case.\r\n\r\n            * False : do not sort the result.\r\n\r\n            .. versionadded:: 0.24.0\r\n\r\n            .. versionchanged:: 0.24.1\r\n\r\n               Changed the default value from ``True`` to ``None``\r\n               (without change in behaviour).\r\n```\r\n</details>",
        "createdAt" : "2020-07-07T13:40:25Z",
        "updatedAt" : "2020-07-08T16:02:12Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      },
      {
        "id" : "3242c1be-03d5-4a39-beed-f87751bab290",
        "parentId" : "fe3217ec-88a2-43ec-978a-44aed113e4d9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm IIRC we did this deliberartly as we don't support this, can you see if can add an existing issue reference here (in both places if possible). future us will be puzzzled otherwise.",
        "createdAt" : "2020-07-08T12:54:30Z",
        "updatedAt" : "2020-07-08T16:02:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fbf4793c-3c67-4046-8f9f-cf22ad1ca6cf",
        "parentId" : "fe3217ec-88a2-43ec-978a-44aed113e4d9",
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "@jreback \r\nDid a little digging. The API was changed in issue #24959. `sort` had been introduced to all the Index set-operations before, and then we discovered that the operations didn't guarantee sorting in edge cases. We decided to change the default to `sort=None` for set-ops to signify that and fix this in the future: ensure that `sort=True` always sorts for every set-op and then change the default to `sort=False` and deprecate `sort=None`. As far as I can tell, the last attempt to implement `sort=True` and deprecate `sort=None` was in #25980, and the PR went stale, so we never finished the job.\r\n\r\nWhile we can and do hit edge cases in `Index.union`, there is a crutch in `_get_combined_index` that saves us if `union` doesn't sort:\r\n\r\n```python\r\n    if sort:\r\n        try:\r\n            index = index.sort_values()\r\n        except TypeError:\r\n            pass\r\n```\r\n\r\nI've added a comment to this PR to clarify all this stuff. ",
        "createdAt" : "2020-07-08T15:12:19Z",
        "updatedAt" : "2020-07-08T16:02:12Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c371bd884f290969be408166829f446d7c2c2f7",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +221,225 @@                if sort:\n                    sort = None\n                result = result.union(other, sort=sort)\n            return result\n    elif kind == \"array\":"
  },
  {
    "id" : "8e3f1688-6e2c-42d7-bb0d-4e66cdc15335",
    "prId" : 36413,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36413#pullrequestreview-491006177",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "567f775e-5790-4478-b4c3-aef7240dccde",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we totally remove get_consenus_names? (alt could cal it `get_result_name` and use these routines under the hood)",
        "createdAt" : "2020-09-17T16:12:53Z",
        "updatedAt" : "2020-10-07T05:08:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "59e821e9-97f4-4513-91e8-a239a72145d8",
        "parentId" : "567f775e-5790-4478-b4c3-aef7240dccde",
        "authorId" : "9bb88d30-ac0c-4c78-9ac4-9178345da078",
        "body" : "Only other place `get_consensus_names` is used is in `concat` for the nested MultiIndex case. In fact, looking at master, this ends up dropping level names even when they all agree since it operates jointly on all levels, rather than going level-by-level like `get_unanimous_names`. Swapping in `get_unanimous_names` here lets us totally drop `get_consensus_names` and seems to work very well, all tests passed.",
        "createdAt" : "2020-09-17T21:36:31Z",
        "updatedAt" : "2020-10-07T05:08:34Z",
        "lastEditedBy" : "9bb88d30-ac0c-4c78-9ac4-9178345da078",
        "tags" : [
        ]
      }
    ],
    "commit" : "17254c4768a9cd873d86f428fee14dbfa7834ceb",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +58,62 @@    \"get_objs_combined_axis\",\n    \"union_indexes\",\n    \"get_unanimous_names\",\n    \"all_indexes_same\",\n]"
  }
]