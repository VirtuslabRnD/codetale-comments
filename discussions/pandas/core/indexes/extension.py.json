[
  {
    "id" : "39a862b8-9a09-4e53-859e-1cbe61834137",
    "prId" : 30629,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30629#pullrequestreview-337910869",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95005bf1-bd9a-4ad4-af34-e55218d8d0f7",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm somewhat confused by this function. Documented as working on `methods` but seems to accept attributes as well?",
        "createdAt" : "2020-01-02T23:34:55Z",
        "updatedAt" : "2020-01-03T00:55:32Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "64638188-59d8-4114-a575-3df749327689",
        "parentId" : "95005bf1-bd9a-4ad4-af34-e55218d8d0f7",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Will update docstring.  This clause is for regular class attributes, in particular a few List[str] that we share",
        "createdAt" : "2020-01-02T23:56:56Z",
        "updatedAt" : "2020-01-03T00:55:32Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ccb13eec9b157faf7bf52141389a16ea9822d03",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +43,47 @@            method = property(fget, fset)\n\n    elif not callable(attr):\n        # just a normal attribute, no wrapping\n        method = attr"
  },
  {
    "id" : "784550ab-2b50-47e0-9b49-9fd4451bfb7a",
    "prId" : 30629,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30629#pullrequestreview-337918853",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "015df903-e5cb-4a3d-b980-05f9b8fef91b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you could type this -> Callable[[Type[T]], Type[T]] i think",
        "createdAt" : "2020-01-03T00:42:57Z",
        "updatedAt" : "2020-01-03T00:55:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ccb13eec9b157faf7bf52141389a16ea9822d03",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +58,62 @@\n\ndef inherit_names(names: List[str], delegate, cache: bool = False):\n    \"\"\"\n    Class decorator to pin attributes from an ExtensionArray to a Index subclass."
  },
  {
    "id" : "bd3b736c-56fb-4270-8133-a91c39c0c44b",
    "prId" : 30648,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30648#pullrequestreview-338363647",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0d0c32b-f0fc-4bb6-b774-93a19cec5acf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "at some point should type these",
        "createdAt" : "2020-01-04T18:09:20Z",
        "updatedAt" : "2020-01-04T18:10:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "63a31e7dd476912e543464170ac5b60aa82c66d1",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +85,89 @@\n\ndef make_wrapped_comparison_op(opname):\n    \"\"\"\n    Create a comparison method that dispatches to ``._data``."
  },
  {
    "id" : "f9308e6a-c41e-44b2-9eab-8e7829cb2abc",
    "prId" : 30717,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30717#pullrequestreview-343049156",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eadea7b4-504b-4cb2-87f5-9456e3488180",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Why are you overwriting the base Index one? \r\n\r\nAlso, this dropped the docstring.",
        "createdAt" : "2020-01-10T08:52:35Z",
        "updatedAt" : "2020-01-10T08:55:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "11c16857-9ddc-4a0d-8ac0-0f1071ffed22",
        "parentId" : "eadea7b4-504b-4cb2-87f5-9456e3488180",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Because the base class uses ._values, where we want ._data here",
        "createdAt" : "2020-01-10T16:31:30Z",
        "updatedAt" : "2020-01-10T16:31:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bbf36377-4e46-42a9-86e4-a35a5dfb6e19",
        "parentId" : "eadea7b4-504b-4cb2-87f5-9456e3488180",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But `_values` and `_data` is the same?",
        "createdAt" : "2020-01-10T19:50:29Z",
        "updatedAt" : "2020-01-10T19:50:29Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "bed7c3c9-1d11-433e-80dd-dbf4f3c0ef38",
        "parentId" : "eadea7b4-504b-4cb2-87f5-9456e3488180",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I guess.  Past-me must have thought it not-obvious that this would always hold.  If it can be removed, go for it.",
        "createdAt" : "2020-01-10T19:56:21Z",
        "updatedAt" : "2020-01-10T19:56:21Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9bde5efd-f96c-4baa-98a9-99bc417ea57d",
        "parentId" : "eadea7b4-504b-4cb2-87f5-9456e3488180",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Did you also see my docstring comment?",
        "createdAt" : "2020-01-13T09:14:45Z",
        "updatedAt" : "2020-01-13T09:14:45Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e0e22f4c-e94d-4d0a-9ec0-d1e60ea73d8a",
        "parentId" : "eadea7b4-504b-4cb2-87f5-9456e3488180",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I did.  In this case I think removing the method makes sense.  More generally I wonder if we can use a metaclass or something to automatically inherit docstrings and remove a lot of boilerplate (cc @bashtage IIRC you do something like this in arch)",
        "createdAt" : "2020-01-13T16:11:01Z",
        "updatedAt" : "2020-01-13T16:11:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a0b352a2-004f-4348-9672-1828612b4591",
        "parentId" : "eadea7b4-504b-4cb2-87f5-9456e3488180",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Maybe open a new issue to see if we can do this smarter? \r\n\r\nBut for 1.0.0, I would just add back the docstring",
        "createdAt" : "2020-01-15T08:26:11Z",
        "updatedAt" : "2020-01-15T08:26:11Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef38914e522366462f339d58a44141eec479b59c",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +194,198 @@        if self.hasnans:\n            return self._shallow_copy(self._data[~self._isnan])\n        return self._shallow_copy()\n\n    def repeat(self, repeats, axis=None):"
  },
  {
    "id" : "8577bdfa-a0de-47f1-8678-04009d59e951",
    "prId" : 30717,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30717#pullrequestreview-341279878",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6663eb95-1dc8-442e-ac66-83aa92d8e6eb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Should we use a faster constructor (simple_new ?) when we just want to wrap the correct type of ExtensionArray in the index?",
        "createdAt" : "2020-01-10T08:55:29Z",
        "updatedAt" : "2020-01-10T08:55:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "de6f27d9-ee5d-448a-84e0-d6dcfb480165",
        "parentId" : "6663eb95-1dc8-442e-ac66-83aa92d8e6eb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think that'd work.  IIRC there were some corner cases involving CategoricalIndex.dtype, not sure if those are relevant here",
        "createdAt" : "2020-01-10T16:32:46Z",
        "updatedAt" : "2020-01-10T16:32:46Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef38914e522366462f339d58a44141eec479b59c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +176,180 @@        result = self._data[key]\n        if isinstance(result, type(self._data)):\n            return type(self)(result, name=self.name)\n\n        # Includes cases where we get a 2D ndarray back for MPL compat"
  },
  {
    "id" : "82654375-08c2-4caa-8ec7-21125cdd3c77",
    "prId" : 30809,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30809#pullrequestreview-339628699",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e944f7a9-ce8c-4cd5-880b-ad6b5afa48ea",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "```suggestion\r\n    def repeat(self, repeats: Union[int, Sequence[int]], axis: Axis=None):\r\n```\r\n\r\nmight be nice to add while moving",
        "createdAt" : "2020-01-08T03:20:19Z",
        "updatedAt" : "2020-01-08T03:20:24Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8270cfc19eca1a07f7ffc4671db09ad4b39daf33",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +165,169 @@    _data: ExtensionArray\n\n    def repeat(self, repeats, axis=None):\n        nv.validate_repeat(tuple(), dict(axis=axis))\n        result = self._data.repeat(repeats, axis=axis)"
  },
  {
    "id" : "1a30f94b-b247-462d-8430-cdb28a2e0c92",
    "prId" : 31136,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31136#pullrequestreview-345508456",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afdda1ab-3ec9-402c-90bb-a09fe128ad18",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe i am reading this wrong, but you have 2 contraditory conditions here no?\r\n\r\ne.g. you likely don't need the 3rd case (actually do you *really* need the 1st case)? e.g. doesn't an object ndarray pass thru here?",
        "createdAt" : "2020-01-20T15:30:16Z",
        "updatedAt" : "2020-01-24T15:25:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e02353ae-85dd-45fb-9593-8fa015f29b4e",
        "parentId" : "afdda1ab-3ec9-402c-90bb-a09fe128ad18",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Does take always copy? I recall an issue about it possibly not in some cases.",
        "createdAt" : "2020-01-20T16:32:53Z",
        "updatedAt" : "2020-01-24T15:25:11Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "0fbb51d4-e104-400e-8340-4aec2dbd4700",
        "parentId" : "afdda1ab-3ec9-402c-90bb-a09fe128ad18",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "tricky. it *should* always copy but it doesn't. @jorisvandenbossche was reverting the series.take method deprecation.",
        "createdAt" : "2020-01-20T16:38:03Z",
        "updatedAt" : "2020-01-24T15:25:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ae9b00e7-7b44-4a59-b144-291c27c3d02d",
        "parentId" : "afdda1ab-3ec9-402c-90bb-a09fe128ad18",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "(sorry, the previous comment about take was on the wrong issue).\r\n\r\n---\r\n\r\nOn this one, we want to be very limited I think. This is written to handle just index **sub**classes with object dtype.\r\n\r\nEverything else (including object-dtype Index (not subclasses), ndarray, Series, etc.) should be handled by our usual mechanics.",
        "createdAt" : "2020-01-20T19:25:40Z",
        "updatedAt" : "2020-01-24T15:25:11Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "3851bc56-a6d2-47c3-b72f-005d5ab643e6",
        "parentId" : "afdda1ab-3ec9-402c-90bb-a09fe128ad18",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "DTI/TDI/PI take calls lib.maybe_indices_to_slices, and if it gets a slice back returns a slice (i.e. view)",
        "createdAt" : "2020-01-20T19:42:17Z",
        "updatedAt" : "2020-01-24T15:25:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "199f8843-bf62-4129-9194-7f668ec8bbd0",
        "parentId" : "afdda1ab-3ec9-402c-90bb-a09fe128ad18",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : ">On this one, we want to be very limited I think. This is written to handle just index subclasses with object dtype.\r\n\r\nwait, we have *Index* subclasses now (that are object dtype) and not in pandas? I don't think we have *any* testing around this at all.",
        "createdAt" : "2020-01-20T19:45:13Z",
        "updatedAt" : "2020-01-24T15:25:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d453d15c-ecae-4e11-92ea-8afacc24b27a",
        "parentId" : "afdda1ab-3ec9-402c-90bb-a09fe128ad18",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "how did this come up?",
        "createdAt" : "2020-01-20T19:45:24Z",
        "updatedAt" : "2020-01-24T15:25:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9c523c64-355e-4ae7-adeb-b76e336d8f89",
        "parentId" : "afdda1ab-3ec9-402c-90bb-a09fe128ad18",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "xarray, see #31109.",
        "createdAt" : "2020-01-20T19:53:49Z",
        "updatedAt" : "2020-01-24T15:25:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3b5c7ad5fa5af033c07c31adec9be88f6c10d7f",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +118,122 @@            isinstance(other, Index)\n            and is_object_dtype(other.dtype)\n            and type(other) is not Index\n        ):\n            # We return NotImplemented for object-dtype index *subclasses* so they have"
  },
  {
    "id" : "33915f70-ebe3-4618-841e-afd9540f8fb4",
    "prId" : 31136,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31136#pullrequestreview-348395301",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0452daa9-2108-4777-a0f5-37de3ad02d4e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Why only object dtype? You could have Index subclasses with a different dtype?  (or is that not realistic?)",
        "createdAt" : "2020-01-20T20:00:46Z",
        "updatedAt" : "2020-01-24T15:25:11Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "da8938bd-58f2-44f9-a0d3-e3d98cf4db04",
        "parentId" : "0452daa9-2108-4777-a0f5-37de3ad02d4e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "That's my suspicion. It's at least true for the xarray case.\r\n\r\n@dcherian does xarray have any Index subclasses that have a non `object` dtype?",
        "createdAt" : "2020-01-20T21:05:49Z",
        "updatedAt" : "2020-01-24T15:25:11Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "36a92361-0991-488e-ab1c-daa79674cdfd",
        "parentId" : "0452daa9-2108-4777-a0f5-37de3ad02d4e",
        "authorId" : "0c742014-0649-46ad-a792-f1cde94f2ac4",
        "body" : "This is a question for @shoyer ",
        "createdAt" : "2020-01-20T22:06:46Z",
        "updatedAt" : "2020-01-24T15:25:11Z",
        "lastEditedBy" : "0c742014-0649-46ad-a792-f1cde94f2ac4",
        "tags" : [
        ]
      },
      {
        "id" : "a5329ba8-c179-4855-a8e4-4f564b4cbad4",
        "parentId" : "0452daa9-2108-4777-a0f5-37de3ad02d4e",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "Xarray only has one Index subclass, which is of object dtype. It's definitely a little fragile, though, so we would like to eventually get rid of it.",
        "createdAt" : "2020-01-20T23:48:06Z",
        "updatedAt" : "2020-01-24T15:25:11Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "dcbee0bd-72fe-4217-82a5-a49dcdf552b7",
        "parentId" : "0452daa9-2108-4777-a0f5-37de3ad02d4e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> so we would like to eventually get rid of it.\r\n\r\nIIRC CFTime is for the \"UT\" timezone, which is always within 1 second of UTC, right?  Can this be represented as a tzinfo object?",
        "createdAt" : "2020-01-26T17:55:49Z",
        "updatedAt" : "2020-01-26T17:55:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3b5c7ad5fa5af033c07c31adec9be88f6c10d7f",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +117,121 @@        if (\n            isinstance(other, Index)\n            and is_object_dtype(other.dtype)\n            and type(other) is not Index\n        ):"
  },
  {
    "id" : "8414bca0-d063-43bf-916d-279d746b1c77",
    "prId" : 31635,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31635#pullrequestreview-355619184",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d83e170d-1d6e-437f-bd4c-88894bf3e375",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if you can type at some point (doc-string inherited)?",
        "createdAt" : "2020-02-09T16:50:25Z",
        "updatedAt" : "2020-02-09T16:50:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "792c59d487ae469e7c1fffaef84e86097403a9ea",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +244,248 @@        return self._shallow_copy(result)\n\n    def _concat_same_dtype(self, to_concat, name):\n        arr = type(self._data)._concat_same_type(to_concat)\n        return type(self)._simple_new(arr, name=name)"
  },
  {
    "id" : "b15d7d1c-909e-4422-a38e-89f6fdcf281a",
    "prId" : 32476,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32476#pullrequestreview-370687344",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56c23ff0-0e4d-4cd6-acc0-2c0089989c94",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Any reason not to make an abstractmethod?",
        "createdAt" : "2020-03-06T15:41:26Z",
        "updatedAt" : "2020-03-12T15:43:58Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ed08d2ef-0c84-4115-b3bf-d9808579e216",
        "parentId" : "56c23ff0-0e4d-4cd6-acc0-2c0089989c94",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "good idea, updated",
        "createdAt" : "2020-03-06T18:41:03Z",
        "updatedAt" : "2020-03-12T15:43:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8c60ef23-55aa-4c4f-aacb-9e66a3822c44",
        "parentId" : "56c23ff0-0e4d-4cd6-acc0-2c0089989c94",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "So this I believe is ideal but any concerns on backward compat? Otherwise lgtm",
        "createdAt" : "2020-03-06T20:39:37Z",
        "updatedAt" : "2020-03-12T15:43:58Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "1dfe2568-280e-4610-bd73-9105b2e87923",
        "parentId" : "56c23ff0-0e4d-4cd6-acc0-2c0089989c94",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> any concerns on backward compat?\r\n\r\nNothing comes to mind",
        "createdAt" : "2020-03-06T22:22:04Z",
        "updatedAt" : "2020-03-12T15:43:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ac526930-1f02-420f-a1c7-5f7cae978161",
        "parentId" : "56c23ff0-0e4d-4cd6-acc0-2c0089989c94",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Gothca. This is non-public right?",
        "createdAt" : "2020-03-06T23:03:31Z",
        "updatedAt" : "2020-03-12T15:43:58Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "aafa4f99-4cc6-433b-8937-024589f3c43b",
        "parentId" : "56c23ff0-0e4d-4cd6-acc0-2c0089989c94",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "`ExtensionIndex` needs to inherit from `abc.ABC` in order for the abstractmethod decorator to actually work, right?\r\n```python\r\nIn [1]: import abc\r\n\r\nIn [2]: class Foo: \r\n   ...:     @abc.abstractmethod \r\n   ...:     def some_meth(self): \r\n   ...:         pass \r\n   ...: \r\n\r\nIn [3]: class Bar(Foo): \r\n   ...:     pass \r\n   ...: \r\n\r\nIn [4]: bar = Bar()\r\n\r\nIn [5]: class Foo2(abc.ABC): \r\n   ...:     @abc.abstractmethod \r\n   ...:     def some_meth(self): \r\n   ...:         pass \r\n   ...: \r\n\r\nIn [6]: class Bar2(Foo2): \r\n   ...:     pass \r\n   ...:\r\n\r\nIn [7]: bar2 = Bar2()\r\n---------------------------------------------------------------------------\r\nTypeError: Can't instantiate abstract class Bar2 with abstract methods some_meth\r\n```",
        "createdAt" : "2020-03-06T23:34:23Z",
        "updatedAt" : "2020-03-12T15:43:58Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "faf902605145d67ded084677d9b36e5e092458dd",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +251,255 @@\n    def insert(self, loc: int, item):\n        # ExtensionIndex subclasses must override Index.insert\n        raise AbstractMethodError(self)\n"
  }
]