[
  {
    "id" : "00fd66ca-9394-4fb7-9c1e-6da9267ef11e",
    "prId" : 16236,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16236#pullrequestreview-57495533",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "can you call this `_append` ? (then it is more in line with `_append_same_dtype`)",
        "createdAt" : "2017-08-21T11:27:14Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "27c477b7-2a66-469d-84a9-8291ad10c246",
        "parentId" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Actually, I think it would make more sense to change ``_append_same_dtype`` to ``_concat_same_dtype`` (also in ``IntervalIndex``, ``DatetimeIndex``, ``CategoryIndex``), since it already disregards ``self`` (it is conceptually a ``@classmethod``). Shall I proceed?",
        "createdAt" : "2017-08-21T12:24:14Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "267b84b5-cf87-4add-851f-a3c5f8686cf3",
        "parentId" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "since it is only use by append, I prefer using append in the name, but no strong feelings",
        "createdAt" : "2017-08-21T12:43:30Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "699094c9-3944-4afb-b46e-614c495300d6",
        "parentId" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "You are right that it's currently used only by append, but usually you expect x.append(y) to concatenate x to y or to elements of y; instead this only concatenates elements of y. So since you don't object I will go with my proposal.",
        "createdAt" : "2017-08-21T12:56:03Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "821e8230-129c-4889-a8af-079f3f1f3c31",
        "parentId" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> instead this only concatenates elements of y\r\n\r\nin the end it *is* used to concatenate both y to x, just that this is passed like that in `append` to this helper function. So it is still only used for append. ",
        "createdAt" : "2017-08-21T12:59:56Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "afa98523-c75c-4740-ac36-0bb84a7bd979",
        "parentId" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "> So it is still only used for append.\r\n\r\nSure, I don't object to that. We can agree it is a concat operation used to implement appending: the switch happens when ``append(self, other)`` does ``to_concat = [self] + list(other)``.",
        "createdAt" : "2017-08-21T13:14:26Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "554ee79709cbb5fdd3e8ef8e3e6553e6fa499cf9",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1744,1748 @@        return self._concat(to_concat, name)\n\n    def _concat(self, to_concat, name):\n\n        typs = _concat.get_dtype_kinds(to_concat)"
  },
  {
    "id" : "2e846aaa-8412-4702-a8a5-e1c023a58d8d",
    "prId" : 17414,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17414#pullrequestreview-60271775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97269772-2ee2-43cc-b312-8c36f88920ca",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "**Not Blocking** : I would really like if we could condense this into one line (doc-string convention), but it's hard to see ATM what to remove from this...",
        "createdAt" : "2017-09-02T07:20:37Z",
        "updatedAt" : "2017-09-02T12:40:07Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "670ef1aa-34d0-4597-b03c-11e17a83870f",
        "parentId" : "97269772-2ee2-43cc-b312-8c36f88920ca",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "I haven't got a better proposal either.",
        "createdAt" : "2017-09-02T08:50:51Z",
        "updatedAt" : "2017-09-02T12:40:07Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc67b9af36090ed45cde7a0b2321db0e9a1d08fe",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2530,2534 @@        \"\"\"\n        Return an Index of values for requested level, equal to the length\n        of the index.\n\n        Parameters"
  },
  {
    "id" : "8040820d-9cfb-43df-b0e1-6f3543dbc1cc",
    "prId" : 17815,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17815#pullrequestreview-68006798",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6257e1c-fc9e-4ea8-ab1b-1f031fdb6a06",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this does not do the same thing as ``.to_series()`` where the values and the index are the same.\r\nis there a reason you are doing this?",
        "createdAt" : "2017-10-08T16:25:22Z",
        "updatedAt" : "2017-10-09T07:38:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4cac53ed-530c-4ec2-b2c6-8c8c7afd5345",
        "parentId" : "c6257e1c-fc9e-4ea8-ab1b-1f031fdb6a06",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> where the values and the index are the same.\r\n\r\nNot sure I get you here.  The implementation I wrote tries to be consistent with what was done with `MultiIndex` by constructing `DataFrame` with data and setting the index if needed.",
        "createdAt" : "2017-10-08T20:48:03Z",
        "updatedAt" : "2017-10-09T07:38:20Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "07ada9aa-11b5-4f12-801f-0fb1df1c2711",
        "parentId" : "c6257e1c-fc9e-4ea8-ab1b-1f031fdb6a06",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok this is reasonable, side issue this is a little suspect:\r\n\r\n```\r\nIn [4]: pd.MultiIndex.from_product([range(3),list('ab')], names=['foo', 'bar']).to_frame()\r\nOut[4]: \r\n        bar  foo\r\nfoo bar         \r\n0   a     a    0\r\n    b     b    0\r\n1   a     a    1\r\n    b     b    1\r\n2   a     a    2\r\n    b     b    2\r\n\r\nIn [5]: pd.MultiIndex.from_product([range(3),list('ab')], names=['foo', 'bar']).to_series()\r\nOut[5]: \r\nfoo  bar\r\n0    a      (0, a)\r\n     b      (0, b)\r\n1    a      (1, a)\r\n     b      (1, b)\r\n2    a      (2, a)\r\n     b      (2, b)\r\ndtype: object\r\n```",
        "createdAt" : "2017-10-09T12:16:09Z",
        "updatedAt" : "2017-10-09T12:16:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "17ba7eb3-6201-4078-b130-86f37ba9f9dc",
        "parentId" : "c6257e1c-fc9e-4ea8-ab1b-1f031fdb6a06",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "What is suspect about it? \r\nThe index seems toe same in both examples?",
        "createdAt" : "2017-10-09T14:46:28Z",
        "updatedAt" : "2017-10-09T14:46:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c0aaec3cc03bdb2f58a993d008ba4d4ed36c8ee",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1022,1026 @@        \"\"\"\n\n        from pandas import DataFrame\n        result = DataFrame(self._shallow_copy(), columns=[self.name or 0])\n"
  },
  {
    "id" : "b85e1a44-9884-4616-959b-21f811a671fd",
    "prId" : 18401,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18401#pullrequestreview-78352393",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46ef4406-8ff5-4582-a041-6e9f18798973",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here (eg. about why we don't convert for uint)",
        "createdAt" : "2017-11-21T11:10:54Z",
        "updatedAt" : "2017-11-23T23:53:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4c4b17bd-3da9-472d-93c4-35825c3f2e03",
        "parentId" : "46ef4406-8ff5-4582-a041-6e9f18798973",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "done",
        "createdAt" : "2017-11-22T07:22:26Z",
        "updatedAt" : "2017-11-23T23:53:58Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0852ecbbc5bfb47bb4cf23fbe32fe0de46eb5e91",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +686,690 @@\n        from .numeric import Int64Index, UInt64Index\n        if not is_unsigned_integer_dtype(dtype):\n            # skip int64 conversion attempt if uint-like dtype is passed, as\n            # this could return Int64Index when UInt64Index is what's desrired"
  },
  {
    "id" : "148f1250-0cc9-455b-9daf-556ae471aa93",
    "prId" : 18677,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18677#pullrequestreview-82453367",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6b33c87-75e0-49ba-992f-f13f40c29ef1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I guess we have an import issue if we import this at the top (with the fully qualified path)?",
        "createdAt" : "2017-12-11T11:02:12Z",
        "updatedAt" : "2017-12-11T11:06:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "60421314618f39a77f5d4a94a4b3f2462118e7fa",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1055,1059 @@    def astype(self, dtype, copy=True):\n        if is_categorical_dtype(dtype):\n            from .category import CategoricalIndex\n            return CategoricalIndex(self.values, name=self.name, dtype=dtype,\n                                    copy=copy)"
  },
  {
    "id" : "99861188-358e-43c8-ae85-be719d0cda57",
    "prId" : 18707,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18707#pullrequestreview-82354099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "014c14f6-5949-48b3-896f-aba802118459",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "instead of this, simply list the kwargs that we accept, ``name=None, index=None`` and pass them thru.",
        "createdAt" : "2017-12-10T15:47:13Z",
        "updatedAt" : "2017-12-10T17:57:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec05208ba2f24cb5c9da5134bbc1e1081f5fb5a3",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1001,1005 @@        Series : dtype will be based on the type of the Index values.\n        \"\"\"\n\n        from pandas import Series\n"
  },
  {
    "id" : "0cffeacd-50d7-45fd-887f-991e2e6c228e",
    "prId" : 19048,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19048#pullrequestreview-86299591",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8aee6135-5ac3-4039-9a76-542d1a2b3caf",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "The `IntervalIndex` changes are more about future proofing; the `dtype` kwarg currently doesn't do anything for `IntervalIndex`, so there aren't really any tests that can be added.  I plan to create a PR to allow conversion between subtypes and initializing with non-inferred subtype (e.g. `interval[int64]` to `interval[float64]`) where I believe the same issue will come into play, so figured I'd put this code in place now while it's fresh on my mind.\r\n\r\nAlso, switched from `IntervalIndex.from_intervals` to the `IntervalIndex` constructor since the constructor does everything `from_intervals` does, but has more features and better testing.  Would eventually like to either remove `from_intervals` or just redirect it to the constructor.",
        "createdAt" : "2018-01-03T05:46:52Z",
        "updatedAt" : "2018-01-03T07:25:34Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4080bc09c3aa685c0d4dc3f40cfa03f6d6b0da10",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +204,208 @@        if is_interval_dtype(data) or is_interval_dtype(dtype):\n            from .interval import IntervalIndex\n            return IntervalIndex(data, dtype=dtype, name=name, copy=copy)\n\n        # index-like"
  },
  {
    "id" : "038b8971-beec-4d0e-b8cb-2f52e1ee1fc6",
    "prId" : 19333,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19333#pullrequestreview-90349927",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78c7d413-ae21-48cf-b389-b4e689509cbe",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't this be left alone, and rather define this in ``TimedeltaIndex``?",
        "createdAt" : "2018-01-21T22:13:33Z",
        "updatedAt" : "2018-02-21T15:43:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "06e067c3-6cc7-453a-966b-e5bfa7192f59",
        "parentId" : "78c7d413-ae21-48cf-b389-b4e689509cbe",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This for for numeric-dtyped indexes.  e.g. `pd.Index(range(3)) * pd.Timedelta(days=1)` goes through this path.",
        "createdAt" : "2018-01-21T22:31:37Z",
        "updatedAt" : "2018-02-21T15:43:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3de841d4-92e4-4828-8dc1-9eb7ac2ec000",
        "parentId" : "78c7d413-ae21-48cf-b389-b4e689509cbe",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why doesn't this just raise NotImplementedError? which then Timedelta would handle? or is that too recursive a path?",
        "createdAt" : "2018-01-21T22:43:55Z",
        "updatedAt" : "2018-02-21T15:43:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "eddcaec1-6179-46d7-8ab6-94f8bfd31739",
        "parentId" : "78c7d413-ae21-48cf-b389-b4e689509cbe",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "For one thing b/c there’s pytimedelta and timedelta64 that need to be handled.",
        "createdAt" : "2018-01-21T23:49:37Z",
        "updatedAt" : "2018-02-21T15:43:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e3dec40cc79bc49a61c2227939c6eb63e0a9f94",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +3919,3923 @@\n    def _evaluate_with_timedelta_like(self, other, op, opstr, reversed=False):\n        # Timedelta knows how to operate with np.array, so dispatch to that\n        # operation and then wrap the results\n        other = Timedelta(other)"
  },
  {
    "id" : "4afde6a5-b933-41a3-b230-80b35c4de1e6",
    "prId" : 19333,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19333#pullrequestreview-96829006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "614e4db4-5fb1-4e42-a804-9e792e4bae8a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some comments (or expand the top ones), this code does a lot",
        "createdAt" : "2018-02-15T12:28:05Z",
        "updatedAt" : "2018-02-21T15:43:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e3dec40cc79bc49a61c2227939c6eb63e0a9f94",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +3927,3931 @@\n        with np.errstate(all='ignore'):\n            result = op(values, other)\n\n        attrs = self._get_attributes_dict()"
  },
  {
    "id" : "075bf521-7099-4f65-af14-7d3783987942",
    "prId" : 19520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19520#pullrequestreview-97817962",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5fd807b-20c5-4ce0-9ea6-c0795e43c821",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is_array_like *might* work here",
        "createdAt" : "2018-02-20T13:30:38Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5562b99d55062b2bb0a5b359bd5375adb3a46e",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +2584,2588 @@        # use this, e.g. DatetimeIndex\n        s = getattr(series, '_values', None)\n        if isinstance(s, (ExtensionArray, Index)) and is_scalar(key):\n            try:\n                return s[key]"
  },
  {
    "id" : "c7adbaae-7ea0-42be-8c87-0dc53e15de47",
    "prId" : 19522,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19522#pullrequestreview-94308247",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cadda7c-79c5-41d6-b422-7723f08f9e1f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "consider moving this function to core/ops (and parameterizing so you can use it for index/series)",
        "createdAt" : "2018-02-06T11:22:14Z",
        "updatedAt" : "2018-02-06T18:39:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "85d501c3f084291c3eeaa9e09065a3329f446316",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +81,85 @@\n\ndef _make_invalid_op(name):\n    \"\"\"\n    Return a binary method that always raises a TypeError."
  },
  {
    "id" : "7b4fe476-1296-4bce-88b3-dbbf79b9732f",
    "prId" : 19558,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19558#pullrequestreview-95985447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cd37860-ac7b-440b-ba7f-4da060eaf1d1",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "For the `_values`, shouldn't this be `PeriodIndex` for now? Similar as for DatetimeTZ now has DTI[tz], and so in the future it would become PeriodArray. \r\n\r\n(but not sure where this is currently actually used)",
        "createdAt" : "2018-02-11T16:25:10Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "690bfa2f-8f4c-42d8-aa1b-6a1920688176",
        "parentId" : "5cd37860-ac7b-440b-ba7f-4da060eaf1d1",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "No I don't think so, since `Series[Period]._values` returns an ndarray of objects. `Series[datetime-with-TZ]._values` is the only special one, and I'm only changing `Index._values` to match `Series._values` for now.",
        "createdAt" : "2018-02-11T20:22:24Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "8dea9a71-b44f-46c6-be4f-617bb1cc924e",
        "parentId" : "5cd37860-ac7b-440b-ba7f-4da060eaf1d1",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, but that is because we don't have a PeriodBlock that is backed by a PeriodIndex, as is the case for DatetimeTZ, so at the moment you cannot really have Period values in a series. \r\nI am not saying that this should be the case now, only that I think it might be more logical. But, it might well be that we then first need to add a working \"PeriodBlock\" (ExtensionBlock backed by PeriodIndex/PeriodArray) to have this work.",
        "createdAt" : "2018-02-11T20:26:00Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "df0fed42-d8ef-46d7-95f7-9a9bdd93a368",
        "parentId" : "5cd37860-ac7b-440b-ba7f-4da060eaf1d1",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'm confused what your proposing / saying then. Is it just that `._values` being a `PeriodIndex` would be more consistent with `._values` returning a `DatetimeIndex`?\r\n\r\nWhat we have now \"works\", but is internally inconsistent. I'm updating `Index._values` to be consistent with `Series._values`, and changing uses of `.values` / `._values` / `._ndarray_values` to be the correct one for that use.",
        "createdAt" : "2018-02-11T20:39:16Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "053d8185-965c-4920-b398-41115e05901f",
        "parentId" : "5cd37860-ac7b-440b-ba7f-4da060eaf1d1",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> Is it just that ._values being a PeriodIndex would be more consistent with ._values returning a DatetimeIndex?\r\n\r\nYes. So regardless of what `._values` currently does or doesn't return for Index/Series. Just from looking at your table, returning `PeriodIndex` would make more sense IMO, as this is (at this moment) the closest thing to an array-like that preserves the information. \r\nBut, I don't know what implication it would have for Series ops that `._values` would start returning a PeriodIndex instead of object array of Periods, so it was really just a question, not a request for change.",
        "createdAt" : "2018-02-11T20:50:27Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "085b7cd5-8ada-4dd5-864f-21b05b67d146",
        "parentId" : "5cd37860-ac7b-440b-ba7f-4da060eaf1d1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in theory these *should* return an ``Index`` type for ``._values`` for PI and II, and it might work, but would be disruptive w/o a Block type to hold it. This is why for example we have the ``is_period_arraylike`` methods to detect an array of Periods. The holder ATM is a ndarray[object].",
        "createdAt" : "2018-02-12T23:59:48Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3af8a21ea0e13ba5fc73db464f6e327552c71b0e",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +621,625 @@        index             | values          | _values      | _ndarray_values |\n        ----------------- | --------------- | ------------ | --------------- |\n        PeriodIndex       | ndarray[object] | ndarray[obj] | ndarray[int]    |\n        IntervalIndex     | ndarray[object] | ndarray[obj] | ndarray[object] |\n"
  },
  {
    "id" : "934f4a14-12a4-43a5-a696-56c8af5af687",
    "prId" : 19849,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19849#pullrequestreview-99492100",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e58ff47-f4c9-44a5-ac2b-69c894f1b1bf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think might be able to dispense with this entirely, and just *always* do\r\n\r\n```\r\nfrom pandas.core.ops import get_op_result_name\r\n\r\n....\r\n\r\nreturn self._shallow_copy(name=get_op_result_name(self, other))\r\n```",
        "createdAt" : "2018-02-24T16:27:42Z",
        "updatedAt" : "2018-11-06T13:10:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2e907df5-7f84-4950-804b-56437ef5b793",
        "parentId" : "0e58ff47-f4c9-44a5-ac2b-69c894f1b1bf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do this in ``_wrap_setup_result``",
        "createdAt" : "2018-02-24T16:28:10Z",
        "updatedAt" : "2018-11-06T13:10:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b0b4ffae-694b-4f3a-b678-2cd835e70f8b",
        "parentId" : "0e58ff47-f4c9-44a5-ac2b-69c894f1b1bf",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "So if I eliminate `self.get_setop_name_object` and use `_wrap_setop_result`, other tests fail, because those tests assume the corner cases return the same object.  ",
        "createdAt" : "2018-02-26T22:25:18Z",
        "updatedAt" : "2018-11-06T13:10:47Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa7311ad48b2af262f403db824836bf87f126ffd",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +2753,2757 @@        \"\"\"\n        name = get_op_result_name(self, other)\n        if self.name != name:\n            return self._shallow_copy(name=name)\n        return self"
  },
  {
    "id" : "87cdda1a-d0ad-4a9b-87a7-d8a76238e01c",
    "prId" : 19849,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19849#pullrequestreview-136249666",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e189545-7e51-4212-9bf9-fa5e42e55400",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Would shallowcopy work here? Constructor isn’t used very often in the indexes.",
        "createdAt" : "2018-07-11T04:12:44Z",
        "updatedAt" : "2018-11-06T13:10:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9fdf29e6-3b8a-47ab-993e-5929ce24591e",
        "parentId" : "0e189545-7e51-4212-9bf9-fa5e42e55400",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "@jbrockmendel  repeating (part of) reply from a few months ago:\r\n> the issue comes down to whether we use `self._shallow_copy()` to return the result of set operations. When I tried using `self._shallow_copy()` in `Index._wrap_setop_result()`, and looked at what was happening, then `CategoricalIndex` was the problem. So it was easier to leave the existing implementation of `Index._wrap_setop_result`. If we were to handle #10186, then I could experiment more with changing the implementation of `Index._wrap_setop_result`.",
        "createdAt" : "2018-07-11T13:55:27Z",
        "updatedAt" : "2018-11-06T13:10:47Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa7311ad48b2af262f403db824836bf87f126ffd",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +2851,2855 @@\n    def _wrap_setop_result(self, other, result):\n        return self._constructor(result, name=get_op_result_name(self, other))\n\n    def intersection(self, other):"
  },
  {
    "id" : "8d916190-9db0-4de7-a4ec-a08518129542",
    "prId" : 19985,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19985#pullrequestreview-102282282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "835a7341-92b5-48aa-986b-9ece66f8e583",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "There is still some discussion on whether we want to document `args` and `kwargs`, but I think we should. If they are ignored, I think it'd be useful for users (and also developers) to know it, and why they are present. If they are being sent to numpy, that's also something worth mentioning.",
        "createdAt" : "2018-03-05T11:29:14Z",
        "updatedAt" : "2018-03-09T02:22:20Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "8f8264aa-a42e-4159-801f-36412807ac7a",
        "parentId" : "835a7341-92b5-48aa-986b-9ece66f8e583",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "these are for numpy compat (only a small set of methods are like this). see the validate_repeat below.",
        "createdAt" : "2018-03-05T11:42:31Z",
        "updatedAt" : "2018-03-09T02:22:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "72f9ed30-af66-46d5-8fe7-5796c24e902c",
        "parentId" : "835a7341-92b5-48aa-986b-9ece66f8e583",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In this case the `*kwargs` are not ignored, but you get an informative error message if you try to pass any additional keyword (also in case of the numpy ones like `axis`). So therefore I would personally not document them.",
        "createdAt" : "2018-03-05T13:47:54Z",
        "updatedAt" : "2018-03-09T02:22:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7849ab82-172c-4b83-b77a-16ad592521a0",
        "parentId" : "835a7341-92b5-48aa-986b-9ece66f8e583",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would agree that mentioned **kwargs are for numpy compat is not a bad idea",
        "createdAt" : "2018-03-08T11:48:29Z",
        "updatedAt" : "2018-03-09T02:22:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "68af3bc3-d001-40c8-a0c7-f45a4eedeadf",
        "parentId" : "835a7341-92b5-48aa-986b-9ece66f8e583",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I thought it was only for the nice error message, but indeed it is also accepting (not raising) the argument when it is the default value (in this case `axis=None`). \r\nIn that case, it's fine for me as well to actually document this",
        "createdAt" : "2018-03-08T12:30:13Z",
        "updatedAt" : "2018-03-09T02:22:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "84869696d87891cb673398a67419d940da27aad7",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +705,709 @@        ----------\n        repeats : int\n            The number of repetitions for each element.\n        **kwargs\n            Additional keywords have no effect but might be accepted for"
  },
  {
    "id" : "8e37eb47-603e-4212-9b98-c270acb6b387",
    "prId" : 19985,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19985#pullrequestreview-102521803",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9eb76043-4cd5-4cb9-9033-a6edc4c2e6c3",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "May be we could have the `is_unique` methods? Just an idea, not sure if it's so related...",
        "createdAt" : "2018-03-09T01:37:37Z",
        "updatedAt" : "2018-03-09T02:22:20Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "84869696d87891cb673398a67419d940da27aad7",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +718,722 @@        --------\n        Series.repeat : Equivalent function for Series\n        numpy.repeat : Underlying implementation\n\n        Examples"
  },
  {
    "id" : "246b4357-6cd7-4127-a811-d1f9a41ff806",
    "prId" : 20028,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20028#pullrequestreview-103770695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cd893bf-e2b6-4978-af2f-b9bc28657741",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you don't need a deprecated tag on the ``_summary`` methods",
        "createdAt" : "2018-03-14T10:57:38Z",
        "updatedAt" : "2018-03-15T23:45:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ccb33cb0878b5312a4e3ea8f3daf3fe69bb844a1",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1388,1392 @@    def _summary(self, name=None):\n        \"\"\"\n        Return a summarized representation\n\n        Parameters"
  },
  {
    "id" : "042776e4-a894-4a8f-b678-f65a9d2a94b6",
    "prId" : 20028,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20028#pullrequestreview-103770695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0f217f4-ed2d-4ed0-94c1-8fe5d5815e85",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a Parameters & Returns section",
        "createdAt" : "2018-03-14T10:57:50Z",
        "updatedAt" : "2018-03-15T23:45:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ccb33cb0878b5312a4e3ea8f3daf3fe69bb844a1",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1419,1423 @@    def summary(self, name=None):\n        \"\"\"\n        Return a summarized representation\n        .. deprecated:: 0.23.0\n        \"\"\""
  },
  {
    "id" : "7c41eacc-2e49-4e81-a3f0-b8ad630d4daa",
    "prId" : 20114,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20114#pullrequestreview-102854221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b41ac5ad-8f80-4977-ac3b-b9fadae3d127",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "can you update see also here as well?",
        "createdAt" : "2018-03-10T15:33:05Z",
        "updatedAt" : "2018-03-10T15:39:06Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a1f3cf66-0859-41d0-a729-0510d696e899",
        "parentId" : "b41ac5ad-8f80-4977-ac3b-b9fadae3d127",
        "authorId" : "2716051c-3e5a-4f07-ac76-1aa18bafe5f3",
        "body" : "adjusted in 8763f33",
        "createdAt" : "2018-03-10T15:39:28Z",
        "updatedAt" : "2018-03-10T15:39:28Z",
        "lastEditedBy" : "2716051c-3e5a-4f07-ac76-1aa18bafe5f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "8763f332d1ca312cd4685fc9507b34061642da2b",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +4035,4039 @@        See Also\n        --------\n        Series.drop_duplicates : equivalent method on Series\n        DataFrame.drop_duplicates : equivalent method on DataFrame\n        Index.duplicated : related method on Index, indicating duplicate"
  },
  {
    "id" : "45f91433-a834-4c59-9033-29ddc56b9049",
    "prId" : 20117,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20117#pullrequestreview-102853504",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3adf4eb-1e55-47ec-b986-bd31676ee90c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you coordinate text with #20114, seems some slight differences",
        "createdAt" : "2018-03-10T14:57:36Z",
        "updatedAt" : "2018-03-14T15:00:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6a7f2d1b-4e25-4e09-a5c8-c934fe5df71b",
        "parentId" : "e3adf4eb-1e55-47ec-b986-bd31676ee90c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Looks like they are in the zone together already :-) \r\n(they are sitting close to me: we removed the extended summary in the other PR as Tom asked, or are there other differences?)",
        "createdAt" : "2018-03-10T15:02:55Z",
        "updatedAt" : "2018-03-14T15:00:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2e94c007-a63c-4b5b-aefc-a3620a1255fd",
        "parentId" : "e3adf4eb-1e55-47ec-b986-bd31676ee90c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "great, seemed likely.",
        "createdAt" : "2018-03-10T15:09:55Z",
        "updatedAt" : "2018-03-14T15:00:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e02eda665e82e456c1181e218997e3ec04ef141e",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +4330,4334 @@        Indicate duplicate index values.\n\n        Duplicated values are indicated as ``True`` values in the resulting\n        array. Either all duplicates, all except the first, or all except the\n        last occurrence of duplicates can be indicated."
  },
  {
    "id" : "40ccfac6-77f9-49a8-90de-0a843e1c9e33",
    "prId" : 20123,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20123#pullrequestreview-102853984",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a80a9698-f50c-4f3b-9d97-264dd311b3fa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you show a datetimeindex example (with has a NaT)",
        "createdAt" : "2018-03-10T15:33:13Z",
        "updatedAt" : "2018-03-12T21:16:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "195421e1fd1cace5ea50d8cc11001df540d78b18",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +2060,2064 @@        value.\n\n        >>> idx = pd.Index(['black', '', 'red', None])\n        >>> idx\n        Index(['black', '', 'red', None], dtype='object')"
  },
  {
    "id" : "f44f5711-6690-4972-a543-d449855030d2",
    "prId" : 20168,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20168#pullrequestreview-102857131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e26c858a-ef04-46fe-9bb3-347c29bba4bf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pandas.Series.all",
        "createdAt" : "2018-03-10T17:22:07Z",
        "updatedAt" : "2018-03-13T20:55:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "23c2c3d7c4ff3dce7e62c83f65113c6890b319ca",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +4349,4353 @@        See Also\n        --------\n        pandas.Index.all : Return whether all elements are True.\n        pandas.Series.all : Return whether all elements are True.\n"
  },
  {
    "id" : "27c2858e-6b49-4933-a38c-b9097eeab782",
    "prId" : 20223,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20223#pullrequestreview-103102667",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ca59fec-4c80-43db-896a-d5b13b3f06b8",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This note is not really clear to me. What do you want to explain? \r\nYou already show above that the return value in case of DatetimeIndex is different.",
        "createdAt" : "2018-03-12T08:28:56Z",
        "updatedAt" : "2018-03-12T08:29:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2829c638-35bc-492d-b003-dde3b755a6b7",
        "parentId" : "6ca59fec-4c80-43db-896a-d5b13b3f06b8",
        "authorId" : "9d486cfc-f35c-4891-b6bf-1949b6c42450",
        "body" : "Basically, I wanted to explain why get_duplicates return a DatetimeIndex instead of a list when dates are used.\r\n\r\nWhen dates are passed to the Index class, the DatetimeIndexOpsMixin.get_duplicates function is used. This function calls the Index.get_duplicates and converts the results to DatetimeIndex.\r\n\r\nI did not want to get into such details, since I could not mention private classes in the docstring.\r\n\r\nShould I get into even less detail? I was wondering whether the following note is enough:\r\n\"In case of datetime-like indexes, DatetimeIndex is returned instead of a list.\"",
        "createdAt" : "2018-03-12T09:23:19Z",
        "updatedAt" : "2018-03-12T09:23:20Z",
        "lastEditedBy" : "9d486cfc-f35c-4891-b6bf-1949b6c42450",
        "tags" : [
        ]
      },
      {
        "id" : "aad5814e-cc6a-4cc9-abdd-bd30ca43619b",
        "parentId" : "6ca59fec-4c80-43db-896a-d5b13b3f06b8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK, I understand. What is important to the user is what is returned, and you already show in the examples that for DatetimeIndex a DatetimeIndex and not a list is returned. \r\nThe fact that this internally is implemented by overwriting that method in DatetimeIndex is not really important for users, so I would then just remove this comment.\r\n\r\nFeel free to open a PR for it!",
        "createdAt" : "2018-03-12T15:50:51Z",
        "updatedAt" : "2018-03-12T15:50:51Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "c818a22417c4d43f55b934caa8ba011ba814b9d5",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +1762,1766 @@        -----\n        In case of datetime-like indexes, the function is overridden where the\n        result is converted to DatetimeIndex.\n        \"\"\"\n        from collections import defaultdict"
  },
  {
    "id" : "faff70bc-3329-43ad-a2fc-842873fbd80e",
    "prId" : 20356,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20356#pullrequestreview-162915392",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e21c96d1-0eb3-43c9-bd6f-05247415bd12",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "comment as to what case this is",
        "createdAt" : "2018-03-15T10:33:14Z",
        "updatedAt" : "2018-11-14T21:41:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "23e06dfa-5504-49ed-970d-ffd5c9d77681",
        "parentId" : "e21c96d1-0eb3-43c9-bd6f-05247415bd12",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Looks like you can do `flip_order = self_is_mi`?",
        "createdAt" : "2018-10-09T14:27:50Z",
        "updatedAt" : "2018-11-14T21:41:23Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b5d0aa0ac44701f87bd991f8d943247f2c3f2b3",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +4003,4007 @@        # Case where only one index is multi\n        # make the indices into mi's that match\n        flip_order = False\n        if self_is_mi:\n            self, other = other, self"
  },
  {
    "id" : "8ab39966-5f7b-4f96-9570-738c4fcdad81",
    "prId" : 20356,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20356#pullrequestreview-162306255",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76a66385-e611-4cd3-a5a1-fcff4b64c043",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment or 2 here to indicate what is going on",
        "createdAt" : "2018-10-07T21:53:04Z",
        "updatedAt" : "2018-11-14T21:41:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b5d0aa0ac44701f87bd991f8d943247f2c3f2b3",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +3977,3981 @@            # Join left and right\n            # Join on same leveled multi-index frames is supported\n            join_idx, lidx, ridx = self_jnlevels.join(other_jnlevels, how,\n                                                      return_indexers=True)\n"
  },
  {
    "id" : "016ed060-90d9-4c71-bd30-97ea4688772f",
    "prId" : 20356,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20356#pullrequestreview-162915392",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9439a3ff-e04d-4f13-be93-15f77139c44c",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Why is the first one special? Maybe a longer variable name would clarify this. If not, a comment would be appreciated.",
        "createdAt" : "2018-10-09T14:26:48Z",
        "updatedAt" : "2018-11-14T21:41:23Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "5b169572-72d2-4804-8ad6-720a903bd1eb",
        "parentId" : "9439a3ff-e04d-4f13-be93-15f77139c44c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "(Understood that this existing code, so feel free to ignore these comments).",
        "createdAt" : "2018-10-09T14:29:27Z",
        "updatedAt" : "2018-11-14T21:41:23Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b5d0aa0ac44701f87bd991f8d943247f2c3f2b3",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +3999,4003 @@            return multi_join_idx, lidx, ridx\n\n        jl = list(overlap)[0]\n\n        # Case where only one index is multi"
  },
  {
    "id" : "77baa186-065d-432b-9e94-ae8faa459aaf",
    "prId" : 20548,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20548#pullrequestreview-114179184",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44846579-2279-4040-83aa-5859b2c1664b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you also add a mention on ``set_names`` itself that the names must be hashable (and examples if you want)",
        "createdAt" : "2018-04-21T18:02:55Z",
        "updatedAt" : "2018-04-22T14:48:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "97a2b06c305f70ffd0c1e4fcbce4169d1f54ccf9",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1313,1317 @@\n    def _set_names(self, values, level=None):\n        \"\"\"\n        Set new names on index. Each name has to be a hashable type.\n"
  },
  {
    "id" : "a82814af-b469-43ba-bc1d-4ead566ae00e",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-109412132",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fade4cac-e789-4fea-a3ff-7dc515a0c948",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is so `Index(intervals, dtype=object)` works correctly (Index, not IntervalIndex)",
        "createdAt" : "2018-04-04T16:52:44Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +274,278 @@        # interval\n        if ((is_interval_dtype(data) or is_interval_dtype(dtype)) and\n                not is_object_dtype(dtype)):\n            from .interval import IntervalIndex\n            closed = kwargs.get('closed', None)"
  },
  {
    "id" : "f0978a2b-a89d-43d4-b8df-c174aedbbb8f",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-135623884",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d677e09-c5f9-45f8-a6a8-30126996b833",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this hit in the tests?",
        "createdAt" : "2018-04-14T14:08:37Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "be2388ac-bced-420f-ad04-0b67eeab4bc8",
        "parentId" : "5d677e09-c5f9-45f8-a6a8-30126996b833",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "added a test for this that will appear in my next commit",
        "createdAt" : "2018-07-09T23:02:45Z",
        "updatedAt" : "2018-07-13T01:00:54Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +273,277 @@\n        # interval\n        if ((is_interval_dtype(data) or is_interval_dtype(dtype)) and\n                not is_object_dtype(dtype)):\n            from .interval import IntervalIndex"
  },
  {
    "id" : "35d4519c-b5ea-4fb5-a431-0f3b9eb0d875",
    "prId" : 20721,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20721#pullrequestreview-114781012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3c3e6ab-aaac-4ead-8cdc-e3686d93f3a7",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback This special case is because we sometimes construct DatetimeIndex objects where the `_data` attribute still is a DatetimeIndex in itself. \r\nTo me this seems like something we should not do? (it doesn't hurt, but there is also no reason to have it I think, so better always store the ndarray to be consistent?)\r\n\r\n",
        "createdAt" : "2018-04-24T13:13:59Z",
        "updatedAt" : "2018-04-24T13:13:59Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "420c4d89-890f-4890-ac61-f482c6e68449",
        "parentId" : "c3c3e6ab-aaac-4ead-8cdc-e3686d93f3a7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we should never do that\r\nhow did this come up?",
        "createdAt" : "2018-04-24T13:19:24Z",
        "updatedAt" : "2018-04-24T13:19:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "94715734-0a70-4f8e-bcc3-726aaf215312",
        "parentId" : "c3c3e6ab-aaac-4ead-8cdc-e3686d93f3a7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Just opened an issue about it: https://github.com/pandas-dev/pandas/issues/20810 \r\nIt came up from fixing the warnings in the tests. The above case, where `orig` is not always a ndarray (hence my special case `if` statement), triggered it, because `orig` always comes from a `_data` attribute, and so I expected it to always be a ndarray.",
        "createdAt" : "2018-04-24T13:28:13Z",
        "updatedAt" : "2018-04-24T13:28:13Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "feb7caf297a7867d344576eee352b34f34f429a9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +551,555 @@            if not isinstance(orig, np.ndarray):\n                # orig is a DatetimeIndex\n                orig = orig.values\n            orig = orig if orig.base is None else orig.base\n            new = self._data if self._data.base is None else self._data.base"
  },
  {
    "id" : "2c673607-29cf-4573-b695-966358fc095e",
    "prId" : 20770,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20770#pullrequestreview-115775561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79ab6164-d56a-4aad-b3f6-857adf251e13",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I *think* this covers generators as well?",
        "createdAt" : "2018-04-26T20:26:59Z",
        "updatedAt" : "2018-05-01T11:03:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bfb2db17-5844-430b-a828-e3935ef8f845",
        "parentId" : "79ab6164-d56a-4aad-b3f6-857adf251e13",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "sure",
        "createdAt" : "2018-04-26T22:56:53Z",
        "updatedAt" : "2018-05-01T11:03:09Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "c62973b28b29f2884f27d335b0b93c0440928b82",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +4882,4886 @@        return Index(index_like, name=index_like.name, copy=copy)\n\n    if is_iterator(index_like):\n        index_like = list(index_like)\n"
  },
  {
    "id" : "a1875256-64d9-4a87-abb7-8b303783d67d",
    "prId" : 21116,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21116#pullrequestreview-121622431",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44a14fab-a1f1-462f-ac90-6c3529040c41",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can u add a versionadded tag",
        "createdAt" : "2018-05-18T09:37:16Z",
        "updatedAt" : "2018-05-21T11:14:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0d6677c2-08aa-4c5b-a8f3-fde2ac7abe12",
        "parentId" : "44a14fab-a1f1-462f-ac90-6c3529040c41",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "(done)",
        "createdAt" : "2018-05-19T15:52:36Z",
        "updatedAt" : "2018-05-21T11:14:28Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "57a5332f3125a4dfbf165a454325fa611a5a3429",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +3172,3176 @@            If list-like, elements must be names or indexes of levels.\n\n        Returns\n        -------\n        index : Index or MultiIndex"
  },
  {
    "id" : "44f165e1-5f77-40a5-a2f2-fc3f4e063292",
    "prId" : 21216,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21216#pullrequestreview-128721074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8c7af73-6e59-4776-a59c-c9c0854b9a45",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "side issue (another PR). The imports inside functions should be as simple as possible, e.g.\r\nfrom pandas import DatetimeIndex (several occurrences of this)",
        "createdAt" : "2018-06-14T10:06:07Z",
        "updatedAt" : "2018-06-14T10:06:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc7e5c03d9abba90e3e9b4d3bc3f6f7f77a1aaa4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1177,1181 @@        try:\n            if is_datetime64tz_dtype(dtype):\n                from pandas.core.indexes.datetimes import DatetimeIndex\n                return DatetimeIndex(self.values, name=self.name, dtype=dtype,\n                                     copy=copy)"
  },
  {
    "id" : "c5defe7c-30df-4491-9361-192f83c0cdf1",
    "prId" : 21503,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21503#pullrequestreview-129848656",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6482ca1a-4448-4dd8-b176-b068a7ad5c42",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what effect did this have? e.g. was this a bug before or just not used?",
        "createdAt" : "2018-06-18T22:13:55Z",
        "updatedAt" : "2018-06-19T10:00:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8abda507-5bc1-41c6-a079-0740dbdb8b61",
        "parentId" : "6482ca1a-4448-4dd8-b176-b068a7ad5c42",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "To the best of my understanding, it was not used: not in the sense that this line was not hit, but because the locations for missing keys were then taken from ``new_indexer`` (see three lines below), where they were correctly marked with -1.",
        "createdAt" : "2018-06-19T07:38:09Z",
        "updatedAt" : "2018-06-19T10:00:13Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b07ab0f91f349875e342cbe495f583177d57aa2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3628,3632 @@\n                # need to retake to have the same size as the indexer\n                indexer[~check] = -1\n\n                # reset the new indexer to account for the new size"
  },
  {
    "id" : "2722d88c-0887-4a70-9321-58e1ff1e71ed",
    "prId" : 22580,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22580#pullrequestreview-153723904",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f6b1e65-e1b2-4c5a-b1f2-9d58555a98a2",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "A bit of prose here explaining:\r\n\r\n    To override the name of the resulting column, specify `name`:",
        "createdAt" : "2018-09-10T11:06:46Z",
        "updatedAt" : "2018-09-13T16:19:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "65d4b925a4fa58ec0eda8593e679a94240e802cd",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1158,1162 @@        1  Bear\n        2   Cow\n\n        To override the name of the resulting column, specify `name`:\n"
  },
  {
    "id" : "053194d4-0b38-416a-8d4a-6731a997c2b7",
    "prId" : 22699,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22699#pullrequestreview-156010662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fab6313-5c83-4b61-927e-63ed60c8a72e",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What's the point in using `warnings.filterwarnings` instead of `pytest.mark.filterwarnings`? Wondering if we shouldn't always use the latter for consistency",
        "createdAt" : "2018-09-17T15:23:02Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "803c2ca5-29f0-4ffe-8115-a848dfed1b7a",
        "parentId" : "9fab6313-5c83-4b61-927e-63ed60c8a72e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "laziness / not wanting to introduce copy-paste errors. New code should essentially always use marks, and I can make the changes here if you want. I mostly cleaned up Panel to remove these `catch_warnings` / `filterwarnings`, but introduced one copy-paste error in the process (caught before pushing I think), so I'm inclined to not make unnecessary changes.",
        "createdAt" : "2018-09-17T16:03:37Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "2582b5d0-06b4-4cb5-839b-f6064ac1279b",
        "parentId" : "9fab6313-5c83-4b61-927e-63ed60c8a72e",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Makes sense. Maybe not a hard rule on this change but it would be helpful to use this instead in functions where there is a big diff",
        "createdAt" : "2018-09-17T16:27:21Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4990fc2d984b536e5c7c97ad55d4f550ae661867",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +99,103 @@            # comparisons, this will raise in the future\n            with warnings.catch_warnings(record=True):\n                warnings.filterwarnings(\"ignore\", \"elementwise\", FutureWarning)\n                with np.errstate(all='ignore'):\n                    result = op(self.values, np.asarray(other))"
  },
  {
    "id" : "857a0560-378a-4d34-b860-8c7df4b086e7",
    "prId" : 22811,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22811#pullrequestreview-162308702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5b67de6-2fad-406b-8746-95ceed8d207e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you make sure this is added to all subclasses as well (mutli, interval) I think have there own impl. ",
        "createdAt" : "2018-09-23T12:13:36Z",
        "updatedAt" : "2018-11-18T22:59:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2359dc45-1ac7-48f5-b551-b912354bdfb3",
        "parentId" : "a5b67de6-2fad-406b-8746-95ceed8d207e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you do this (in this PR), can ideally update the tests for .difference for all types to parameterize it where appropriate",
        "createdAt" : "2018-10-07T23:02:32Z",
        "updatedAt" : "2018-11-18T22:59:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "13a23f7558ccde3710e8786320c28e4d271a7ca9",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +2958,2962 @@            Sort the resulting index if possible\n\n            .. versionadded:: 0.24.0\n\n        Returns"
  },
  {
    "id" : "b2b19d80-548c-4ff7-9592-602349007e30",
    "prId" : 22862,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22862#pullrequestreview-163605590",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17cf8437-aafa-4813-96cb-055959184e7a",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Should the `isinstance(data, PeriodIndex)` check below (L376) be deleted?",
        "createdAt" : "2018-10-10T23:55:36Z",
        "updatedAt" : "2018-10-25T13:49:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4065bdb2505d219c0bb0d32e55cd65897d550d7c",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +321,325 @@            from pandas import PeriodIndex\n            result = PeriodIndex(data, copy=copy, name=name, **kwargs)\n            return result\n\n        # extension dtype"
  },
  {
    "id" : "35d86efb-5096-4f16-b2e9-337a4b808fdc",
    "prId" : 22862,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22862#pullrequestreview-166125964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcd5d891-44dd-4c56-a5b2-0cfbf546f951",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "why the `and not is_object_dtype` ?",
        "createdAt" : "2018-10-18T13:21:40Z",
        "updatedAt" : "2018-10-25T13:49:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9fb91aba-8d6a-4a6f-896d-a28b50371fc1",
        "parentId" : "fcd5d891-44dd-4c56-a5b2-0cfbf546f951",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We require that `Index(..., dtype=object)` always return an `Index`, and not a subclass. So this makes `Index(PeriodArray, dtype='object')` and `Index[ndarray[object]]`",
        "createdAt" : "2018-10-18T14:32:52Z",
        "updatedAt" : "2018-10-25T13:49:58Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4065bdb2505d219c0bb0d32e55cd65897d550d7c",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +318,322 @@                return result\n\n        elif is_period_dtype(data) and not is_object_dtype(dtype):\n            from pandas import PeriodIndex\n            result = PeriodIndex(data, copy=copy, name=name, **kwargs)"
  },
  {
    "id" : "b2eba33e-7cca-4a9b-a1be-12591c0c1413",
    "prId" : 22866,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22866#pullrequestreview-174477212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc02c6f2-83bc-49ae-ad9c-7647359f806b",
        "parentId" : null,
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "compatability -> compatibility\r\n\r\nBy the way: reusing the same docstring would be a + for me. I would rather describe the actual operation (so on ``MuiltiIndex``) and then say that it is idempotent on flat ``Index``es.",
        "createdAt" : "2018-11-13T16:57:43Z",
        "updatedAt" : "2018-11-13T16:57:44Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "bea4e85520a030ba5dcc8e98f73077d284641da0",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1120,1124 @@        .. versionadded:: 0.24.0\n\n        This is implemented for compatability with subclass implementations\n        when chaining.\n"
  },
  {
    "id" : "c9c15c36-d460-45ae-9fe6-6bb5974ba2cd",
    "prId" : 23320,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23320#pullrequestreview-169886204",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "165d9027-1ff1-4718-84ce-419559836009",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Actually, I think we should use here the name of the dtype instead of the class, as this will bubble up for Series as well\r\n\r\n```\r\nIn [3]: ser + tdnat\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-3-4ad1d16388f8> in <module>()\r\n----> 1 ser + tdnat\r\n\r\n~/scipy/pandas/pandas/core/ops.py in wrapper(left, right)\r\n   1419             #  that may incorrectly raise TypeError when we\r\n   1420             #  should get NullFrequencyError\r\n-> 1421             result = op(pd.Index(left), right)\r\n   1422             return construct_result(left, result,\r\n   1423                                     index=left.index, name=res_name,\r\n\r\n~/scipy/pandas/pandas/core/indexes/base.py in index_arithmetic_method(self, other)\r\n    137         # handle time-based others\r\n    138         if isinstance(other, (ABCDateOffset, np.timedelta64, timedelta)):\r\n--> 139             return self._evaluate_with_timedelta_like(other, op)\r\n    140         elif isinstance(other, (datetime, np.datetime64)):\r\n    141             return self._evaluate_with_datetime_like(other, op)\r\n\r\n~/scipy/pandas/pandas/core/indexes/base.py in _evaluate_with_timedelta_like(self, other, op)\r\n   4708                             \"is invalid\".format(opname=op.__name__,\r\n   4709                                                 cls=type(self).__name__,\r\n-> 4710                                                 other=type(other).__name__))\r\n   4711 \r\n   4712         other = Timedelta(other)\r\n\r\nTypeError: Operation add between Int64Index and timedelta64 is invalid\r\n```",
        "createdAt" : "2018-10-30T16:33:42Z",
        "updatedAt" : "2018-10-30T16:33:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a8fdbcc8-e59b-4e81-a221-9f29263d53dc",
        "parentId" : "165d9027-1ff1-4718-84ce-419559836009",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "will update in follow-up PR that addresses the bug above.",
        "createdAt" : "2018-10-30T16:56:32Z",
        "updatedAt" : "2018-10-30T16:56:33Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "481bb90f0fa1663a9dcb916b8484f69b34e5d787",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +4707,4711 @@            raise TypeError(\"Operation {opname} between {cls} and {other} \"\n                            \"is invalid\".format(opname=op.__name__,\n                                                cls=type(self).__name__,\n                                                other=type(other).__name__))\n"
  },
  {
    "id" : "0f6f024a-e2ab-4c9e-9556-72d2f2f4342a",
    "prId" : 23431,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23431#pullrequestreview-170519343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73a8a7b9-4ff0-4653-b51a-62af7d722f8b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so we should really define an ``empty()`` on Index, Series, and EA.",
        "createdAt" : "2018-11-01T00:02:38Z",
        "updatedAt" : "2018-11-01T00:03:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "775c62ed-2018-48a3-8bfa-dba1e9d82b12",
        "parentId" : "73a8a7b9-4ff0-4653-b51a-62af7d722f8b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you make an issue for this.",
        "createdAt" : "2018-11-01T00:02:49Z",
        "updatedAt" : "2018-11-01T00:03:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "538175f6-fa44-4fd0-86a2-ab51c1c54163",
        "parentId" : "73a8a7b9-4ff0-4653-b51a-62af7d722f8b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "will do.",
        "createdAt" : "2018-11-01T00:14:05Z",
        "updatedAt" : "2018-11-01T00:14:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "17d76000c83a284439190cbf50f97f4dc9b24eb2",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +2953,2957 @@        if self.equals(other):\n            # pass an empty np.ndarray with the appropriate dtype\n            return self._shallow_copy(self._data[:0])\n\n        other, result_name = self._convert_can_do_setop(other)"
  },
  {
    "id" : "f6f1ff74-1349-427f-a2b8-c1749aef2d8e",
    "prId" : 23538,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23538#pullrequestreview-193416202",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef477bf8-329b-4dc7-9a32-ffca0532da2f",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "What's the type of `other`? Shouldn't it be an Index or subclass by this point? Why do you need to wrap it in an `Index(other)`?",
        "createdAt" : "2019-01-15T03:10:09Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "5c4dbc62-a716-4578-b7fe-a6d1bc7057d8",
        "parentId" : "ef477bf8-329b-4dc7-9a32-ffca0532da2f",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "At this point other can still be some other kind of iterable. If you assume other is an iterable at Index.union, then by the time it gets to _union_incompatible_dtypes it would still be an iterable",
        "createdAt" : "2019-01-17T00:28:16Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      }
    ],
    "commit" : "b840f49f2f520b4f5676f50029365cdf89bc2209",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +2263,2267 @@\n    def _union_incompatible_dtypes(self, other, sort):\n        \"\"\"\n        Casts this and other index to object dtype to allow the formation\n        of a union between incompatible types."
  },
  {
    "id" : "d94fc774-98fc-42e0-a124-d87ea3a08b42",
    "prId" : 23538,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23538#pullrequestreview-193416902",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9d5bc3c-28b5-471d-8a0c-32d31c4b3f80",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Same question here on the type of `other`. If we can assume that it's an Index by the time we get here, why is the `type(self) is type(other)` needed?",
        "createdAt" : "2019-01-15T03:13:43Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "e32923b0-5ec5-4f0b-b518-196f4816a411",
        "parentId" : "d9d5bc3c-28b5-471d-8a0c-32d31c4b3f80",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "same reason as above. other can be a non index an iterable. assert_can_do_setop just checks if other is \"list_like\" not whether its an index ",
        "createdAt" : "2019-01-17T00:31:48Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      }
    ],
    "commit" : "b840f49f2f520b4f5676f50029365cdf89bc2209",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +2286,2290 @@        return Index.union(this, other, sort=sort).astype(object, copy=False)\n\n    def _is_compatible_with_other(self, other):\n        \"\"\"\n        Check whether this and the other dtype are compatible with each other."
  },
  {
    "id" : "78a8f11c-bd8a-4b07-a58f-7268abdf7dd1",
    "prId" : 23538,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23538#pullrequestreview-202104360",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a7733f8-d9f4-4a9b-b984-7f41840c1cc9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string Paramaters / Returns",
        "createdAt" : "2019-02-11T13:29:39Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b840f49f2f520b4f5676f50029365cdf89bc2209",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +2265,2269 @@        \"\"\"\n        Casts this and other index to object dtype to allow the formation\n        of a union between incompatible types.\n\n        Parameters"
  },
  {
    "id" : "3e65cefc-2d6f-42c5-bdcf-90f1a374a43d",
    "prId" : 23538,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23538#pullrequestreview-202104360",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8574c6ca-327d-4177-96d0-c9d5d82a911a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2019-02-11T13:29:45Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b840f49f2f520b4f5676f50029365cdf89bc2209",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +2288,2292 @@    def _is_compatible_with_other(self, other):\n        \"\"\"\n        Check whether this and the other dtype are compatible with each other.\n        Meaning a union can be formed between them without needing to be cast\n        to dtype object."
  },
  {
    "id" : "c727e5d1-4719-4693-ab9e-15510496165f",
    "prId" : 23538,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23538#pullrequestreview-202104360",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11e69ee4-4c71-4a93-baad-f2ea1f0b826f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "versionchanged 0.25.0",
        "createdAt" : "2019-02-11T13:29:59Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b840f49f2f520b4f5676f50029365cdf89bc2209",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +2313,2317 @@\n        If the Index objects are incompatible, both Index objects will be\n        cast to dtype('object') first.\n\n            .. versionchanged:: 0.25.0"
  },
  {
    "id" : "c1e5e252-1d0b-42fc-8444-dc6baf411ddf",
    "prId" : 23538,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23538#pullrequestreview-213151332",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46cefff3-6227-448c-afe8-d9ef5a2dc96c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "a 1-line comment the various examples maybe useful",
        "createdAt" : "2019-03-03T02:41:45Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "90538a7a-4e7e-4c43-9968-8ab2f4b7860b",
        "parentId" : "46cefff3-6227-448c-afe8-d9ef5a2dc96c",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "done",
        "createdAt" : "2019-03-12T00:49:01Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      }
    ],
    "commit" : "b840f49f2f520b4f5676f50029365cdf89bc2209",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +2355,2359 @@        Union mismatched dtypes\n\n        >>> idx1 = pd.Index(['a', 'b', 'c', 'd'])\n        >>> idx2 = pd.Index([1, 2, 3, 4])\n        >>> idx1.union(idx2)"
  },
  {
    "id" : "f033b495-9b36-4b0b-8bb0-7bbe9833ed35",
    "prId" : 23538,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23538#pullrequestreview-213154766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad113d52-ad73-4b41-a320-58a3125d596c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there an issue for this?",
        "createdAt" : "2019-03-03T02:42:21Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a1dc77f1-a1f3-4836-9677-5181de8a5cdf",
        "parentId" : "ad113d52-ad73-4b41-a320-58a3125d596c",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "created here: #25678",
        "createdAt" : "2019-03-12T01:06:39Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      }
    ],
    "commit" : "b840f49f2f520b4f5676f50029365cdf89bc2209",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +2440,2444 @@        return self._constructor(result, name=get_op_result_name(self, other))\n\n    # TODO: standardize return type of non-union setops type(self vs other)\n    def intersection(self, other, sort=False):\n        \"\"\""
  },
  {
    "id" : "5e5ccc3a-3951-4ca9-821d-fa238da28598",
    "prId" : 23552,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23552#pullrequestreview-172978550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ef2eae5-f20c-4c6f-96fc-7e10c1959996",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Why does this need to be skipped?",
        "createdAt" : "2018-11-08T13:51:35Z",
        "updatedAt" : "2018-11-08T13:56:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0b88f624-71e0-4e59-b148-50f4e8818dc1",
        "parentId" : "8ef2eae5-f20c-4c6f-96fc-7e10c1959996",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, you are skipping the deprecated things, to avoid warnings?",
        "createdAt" : "2018-11-08T13:52:12Z",
        "updatedAt" : "2018-11-08T13:56:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "83770bc7-1da1-4769-896d-ecef950f35e2",
        "parentId" : "8ef2eae5-f20c-4c6f-96fc-7e10c1959996",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "yes, that's correct",
        "createdAt" : "2018-11-08T14:22:15Z",
        "updatedAt" : "2018-11-08T14:25:17Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0547690c174d2d374609bede882c6c991327f22",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1876,1880 @@        Works on different Index of types.\n\n        >>> pd.Index([1, 2, 2, 3, 3, 3, 4]).get_duplicates()  # doctest: +SKIP\n        [2, 3]\n"
  },
  {
    "id" : "5ad336e5-3008-45a5-96a4-2fed94f80e61",
    "prId" : 23628,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23628#pullrequestreview-173956801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89879d16-ed3a-4fe9-9ed7-1da694d1cbb3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this should never copy, right? \r\n\r\ncan you add a comment about why this is needed here",
        "createdAt" : "2018-11-11T22:56:23Z",
        "updatedAt" : "2018-11-14T21:16:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "76a09042-2102-4831-905f-2ad79dd6ab4f",
        "parentId" : "89879d16-ed3a-4fe9-9ed7-1da694d1cbb3",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Right. Added.",
        "createdAt" : "2018-11-12T15:32:36Z",
        "updatedAt" : "2018-11-14T21:16:15Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "265ffcb70dce16599d1464d31458adb23c9666a7",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +527,531 @@            # This is no-copy for when _values is an ndarray,\n            # which should be always at this point.\n            values = np.asarray(values._values)\n\n        result = object.__new__(cls)"
  },
  {
    "id" : "1aa83b38-426a-4b7d-bba9-2aca0a731449",
    "prId" : 23886,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23886#pullrequestreview-178192387",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2c863bb-ed43-4d8b-a513-501e648767c0",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "If you know what this function does, can you add a short summary?",
        "createdAt" : "2018-11-25T00:42:31Z",
        "updatedAt" : "2018-11-27T05:31:53Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "329d0dcb-739a-4b37-8201-49e42fb5e5d2",
        "parentId" : "a2c863bb-ed43-4d8b-a513-501e648767c0",
        "authorId" : "860b5a14-02e3-4cbd-bc3c-f8113572b31d",
        "body" : "@datapythonista I've added in a summary based on what I've understood from playing around with the function. I think you / the original author of the function should verify it though.",
        "createdAt" : "2018-11-26T07:46:06Z",
        "updatedAt" : "2018-11-27T05:31:53Z",
        "lastEditedBy" : "860b5a14-02e3-4cbd-bc3c-f8113572b31d",
        "tags" : [
        ]
      },
      {
        "id" : "9e448389-0c74-469c-9a21-14659cc6c107",
        "parentId" : "a2c863bb-ed43-4d8b-a513-501e648767c0",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "@jreback, do you mind reviewing the summary?",
        "createdAt" : "2018-11-26T09:26:14Z",
        "updatedAt" : "2018-11-27T05:31:53Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b34280bd9e7fec3dd77b4d43041452cb914c5869",
    "line" : 530,
    "diffHunk" : "@@ -1,1 +2601,2605 @@        `mask` is used to ignore NA values in the index during calculation.\n\n        Parameters\n        ----------\n        where : Index"
  },
  {
    "id" : "7ab83260-cffc-44ff-92b1-739f1a9746b9",
    "prId" : 23961,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23961#pullrequestreview-179330974",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d461960-8711-4005-b9fc-6ae8edc5f1be",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe this goes in conversion",
        "createdAt" : "2018-11-28T13:08:06Z",
        "updatedAt" : "2018-11-28T14:51:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e400ed61-6ffe-4804-9a4b-1a313673740c",
        "parentId" : "3d461960-8711-4005-b9fc-6ae8edc5f1be",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I considered that, thought that ndarray-like methods should take priority",
        "createdAt" : "2018-11-28T14:44:52Z",
        "updatedAt" : "2018-11-28T14:51:42Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a70b3199ac1cb3e3af45d6f3734d6bf4a5010d51",
    "line" : 170,
    "diffHunk" : "@@ -1,1 +740,744 @@        \"\"\"\n\n    @Appender(_index_shared_docs['astype'])\n    def astype(self, dtype, copy=True):\n        if is_dtype_equal(self.dtype, dtype):"
  },
  {
    "id" : "27b3ef40-40c7-40d7-a2a3-ed71414cc72e",
    "prId" : 23961,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23961#pullrequestreview-179335456",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afe96c56-c0b3-41a7-a8ba-2fff1ff28b9f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "would move these near the ssection you currently have named indexer",
        "createdAt" : "2018-11-28T13:11:43Z",
        "updatedAt" : "2018-11-28T14:51:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b311ea83-9b78-4316-8405-2262b1a1d8f0",
        "parentId" : "afe96c56-c0b3-41a7-a8ba-2fff1ff28b9f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "done",
        "createdAt" : "2018-11-28T14:53:03Z",
        "updatedAt" : "2018-11-28T14:53:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a70b3199ac1cb3e3af45d6f3734d6bf4a5010d51",
    "line" : 3436,
    "diffHunk" : "@@ -1,1 +3142,3146 @@        return new_index, indexer, new_indexer\n\n    # --------------------------------------------------------------------\n    # Join Methods\n"
  },
  {
    "id" : "53113b7f-2b58-411d-ab46-3f4e5c1e8a96",
    "prId" : 24227,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24227#pullrequestreview-188127314",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30e8e7f7-09d3-4d0d-aefa-50ce9a88f806",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't this be in the ExtensionArray section? (like you do in the internals unwrapping)? maybe make this a function that you call from both?",
        "createdAt" : "2018-12-26T16:40:56Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "31d58ab4-a28f-469e-9273-759b7f1d97cc",
        "parentId" : "30e8e7f7-09d3-4d0d-aefa-50ce9a88f806",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "isn't this just extract_arrays?",
        "createdAt" : "2018-12-26T16:42:17Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d09880d8-c5e9-49f0-a815-22ed5dcf7020",
        "parentId" : "30e8e7f7-09d3-4d0d-aefa-50ce9a88f806",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We want to do this early on, in case there is any ndarray-specific handling in the constructor.\r\n\r\n`extract_array` unboxes a Series or Index. This is unboxing a PandasArray.",
        "createdAt" : "2018-12-26T17:23:28Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b81cb773-da4b-4c4c-89ec-d4982c0b4f17",
        "parentId" : "30e8e7f7-09d3-4d0d-aefa-50ce9a88f806",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, still I think you could easily add this to that function, to avoid litering checks like this around.",
        "createdAt" : "2018-12-26T18:39:25Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "547611d6-f72f-43ba-9cf4-9bcda8e9fd50",
        "parentId" : "30e8e7f7-09d3-4d0d-aefa-50ce9a88f806",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "So it turns out we can just call `extract_array` here with `extract_numpy=True`... That wasn't my original intent for the method, but I think it'll be OK.",
        "createdAt" : "2018-12-27T02:58:36Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "45a88b5d-618e-4230-a12f-532061d5c605",
        "parentId" : "30e8e7f7-09d3-4d0d-aefa-50ce9a88f806",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Ahhh never mind, we can't call it since that would *also* unwrap the array from a Series / Index, which we don't want to do at this point.",
        "createdAt" : "2018-12-27T02:59:45Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "1633fbaa-aae8-474c-aec9-fa77047ff316",
        "parentId" : "30e8e7f7-09d3-4d0d-aefa-50ce9a88f806",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't this then be ``.to_numpy()`` this is peering into an internal property",
        "createdAt" : "2018-12-27T16:32:51Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f50a57a7468068e191f23683283d55857d9729",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +265,269 @@\n        from .range import RangeIndex\n        if isinstance(data, ABCPandasArray):\n            # ensure users don't accidentally put a PandasArray in an index.\n            data = data.to_numpy()"
  },
  {
    "id" : "cb8194f2-3200-4766-81cb-3d435ef39e92",
    "prId" : 24521,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24521#pullrequestreview-188542860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0df72a5f-aedb-478f-8b2f-2a57b78322a8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so we generally want to use safe_sort if we can (and it seems we are using a safe_sort, sort_values, and np.sort) in various places. let's start (as i mentioned above) with a single function that can sort (you may have to have some ugly if/else logic inside it to handle the differnt types of objects, e.g. ndarrays & Index)",
        "createdAt" : "2018-12-31T23:41:46Z",
        "updatedAt" : "2019-01-19T18:22:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bbc95339-2a55-4626-aa0b-7d12e2a1eec8",
        "parentId" : "0df72a5f-aedb-478f-8b2f-2a57b78322a8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "It *may* pay to do a pre-cursor PR for this factoring out.",
        "createdAt" : "2018-12-31T23:42:01Z",
        "updatedAt" : "2019-01-19T18:22:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b15248d3b8169b3fbde53e91fb02ef091e5ee00",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +2519,2523 @@        if sort:\n            try:\n                the_diff = sorting.safe_sort(the_diff)\n            except TypeError:\n                pass"
  },
  {
    "id" : "9dc7f381-3956-40ce-ab45-f8e8515af27d",
    "prId" : 24521,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24521#pullrequestreview-191992212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d385d2b-9945-4480-898e-2f0d7fb32475",
        "parentId" : null,
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "On Master ``intersection`` does not generally sort by default so I have put ``sort=False`` here for now for compatibility reasons so that the current behaviour of ``join(..., how='inner')`` does not change for now and all of the tests expecting the results _not_ to be sorted don't break. We could change this in future so that the ``intersection`` function here will simply take the ``sort`` parameter passed to the ``join`` function but this would involve changing some of the ``join`` tests that do not expect sorted results.",
        "createdAt" : "2019-01-12T15:35:43Z",
        "updatedAt" : "2019-01-19T18:22:04Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      },
      {
        "id" : "fbae8410-8072-44d6-9187-2456f0916bc3",
        "parentId" : "4d385d2b-9945-4480-898e-2f0d7fb32475",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a TODO about this; this might be #24730 ",
        "createdAt" : "2019-01-13T22:02:10Z",
        "updatedAt" : "2019-01-19T18:22:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b15248d3b8169b3fbde53e91fb02ef091e5ee00",
    "line" : 145,
    "diffHunk" : "@@ -1,1 +3250,3254 @@            # TODO: sort=False here for backwards compat. It may\n            # be better to use the sort parameter passed into join\n            join_index = self.intersection(other, sort=False)\n        elif how == 'outer':\n            # TODO: sort=True here for backwards compat. It may"
  },
  {
    "id" : "4091212f-c743-4f3e-adcc-c0d117b59145",
    "prId" : 24521,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24521#pullrequestreview-191992212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ceca1475-6d62-4c35-b936-34e124be0de0",
        "parentId" : null,
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "On Master ``union`` does generally sort by default so I have left the default ``sort=True`` here for now for compatibility reasons so the current behaviour of ``join(..., how='outer')`` does not change for now and all of the tests expecting the results of this type of join to be sorted don't break.",
        "createdAt" : "2019-01-12T15:38:10Z",
        "updatedAt" : "2019-01-19T18:22:04Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      },
      {
        "id" : "9d2fda1d-a082-499b-b0bf-d7e7427d25b5",
        "parentId" : "ceca1475-6d62-4c35-b936-34e124be0de0",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a TODO",
        "createdAt" : "2019-01-13T22:02:21Z",
        "updatedAt" : "2019-01-19T18:22:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b15248d3b8169b3fbde53e91fb02ef091e5ee00",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +3254,3258 @@            # TODO: sort=True here for backwards compat. It may\n            # be better to use the sort parameter passed into join\n            join_index = self.union(other)\n\n        if sort:"
  },
  {
    "id" : "fca10f7b-d4c0-455e-a0fa-fa0b056ee04f",
    "prId" : 24521,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24521#pullrequestreview-194370002",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e736ee30-bb9d-4659-bd18-2f4164eee469",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, I still think we can use ``_get_reconcile_name_object`` here (maybe need to wrap ``taken`` in ``Index``), but can do in a followup.",
        "createdAt" : "2019-01-19T21:04:13Z",
        "updatedAt" : "2019-01-19T21:04:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b15248d3b8169b3fbde53e91fb02ef091e5ee00",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +2395,2399 @@        taken = other.take(indexer)\n\n        if sort:\n            taken = sorting.safe_sort(taken.values)\n            if self.name != other.name:"
  },
  {
    "id" : "45c1ef07-935c-4c6d-992b-1ebdc0b0d6e9",
    "prId" : 24533,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24533#pullrequestreview-188565052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1b4db80-99b2-4afd-9858-e2499866ed2f",
        "parentId" : null,
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "I have left the warning here. It is possible to move it into the ``safe_sort`` function but this function is called in other places which means that this warning would also then be raised in many other places.",
        "createdAt" : "2019-01-01T18:22:07Z",
        "updatedAt" : "2019-01-01T18:22:07Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      },
      {
        "id" : "bcce44d8-acf9-4304-8e9a-420e631ec8d8",
        "parentId" : "c1b4db80-99b2-4afd-9858-e2499866ed2f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what kind of test hits this now?",
        "createdAt" : "2019-01-01T18:24:53Z",
        "updatedAt" : "2019-01-01T18:24:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8e6efb17-0e5a-4646-87d9-eeb69bc34de2",
        "parentId" : "c1b4db80-99b2-4afd-9858-e2499866ed2f",
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "This test in ``pandas/tests/indexes/test_base.py``, for example, where ``left_index`` is an ``Int64Index`` and ``right_index`` is a ``DatetimeIndex``:\r\n```\r\ndef test_outer_join_sort(self):\r\n    left_index = Index(np.random.permutation(15))\r\n    right_index = tm.makeDateIndex(10)\r\n\r\n    with tm.assert_produces_warning(RuntimeWarning):\r\n        result = left_index.join(right_index, how='outer')\r\n\r\n    # right_index in this case because DatetimeIndex has join precedence\r\n    # over Int64Index\r\n    with tm.assert_produces_warning(RuntimeWarning):\r\n        expected = right_index.astype(object).union(\r\n        left_index.astype(object))\r\n\r\n    tm.assert_index_equal(result, expected)\r\n```\r\nwith the following error (if not caught by the ``except TypeError``):\r\n```\r\nTypeError: Cannot compare type 'Timestamp' with type 'int'\r\n```",
        "createdAt" : "2019-01-01T18:48:03Z",
        "updatedAt" : "2019-01-01T18:49:21Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8bfb9185298e7ab58c5f2130fb5e380d6e507d5",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +2311,2315 @@                warnings.warn(\"%s, sort order is undefined for \"\n                              \"incomparable objects\" % e, RuntimeWarning,\n                              stacklevel=3)\n\n        # for subclasses"
  },
  {
    "id" : "7ab12cee-f7cc-4be5-8e79-3147d9ea6853",
    "prId" : 24708,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24708#pullrequestreview-191370733",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5aa6d757-f544-4023-9e49-36dd40e2f480",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "FYI, the code down on L747 is looking pretty dead to me (on master as well, since `is_extension_array_dtype(dtype)` was True for datetimetz dtype). Haven't tested though.",
        "createdAt" : "2019-01-10T19:12:21Z",
        "updatedAt" : "2019-01-11T12:59:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "213a77e2-5119-4e1b-91a6-adfa45a5506c",
        "parentId" : "5aa6d757-f544-4023-9e49-36dd40e2f480",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "there are probably a number of cases where this can be changed, cc @jbrockmendel ",
        "createdAt" : "2019-01-10T19:15:36Z",
        "updatedAt" : "2019-01-11T12:59:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8332c40626f001577fa585f695cb1e93e05b6c38",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +740,744 @@            tz = pandas_dtype(dtype).tz\n            return (DatetimeIndex(np.asarray(self))\n                    .tz_localize(\"UTC\").tz_convert(tz))\n\n        elif is_extension_array_dtype(dtype):"
  },
  {
    "id" : "92881554-9d9a-4fe4-9640-5ee8367f199f",
    "prId" : 25063,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25063#pullrequestreview-199242862",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2131d203-0a92-4a82-a349-4e0ebcb4ed9d",
        "parentId" : null,
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "\"...are equal, *either one is empty*,  or when ...\"",
        "createdAt" : "2019-02-01T19:57:47Z",
        "updatedAt" : "2019-02-01T20:06:14Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c5a0376dd93c38ffe71225cec9cea15fd9624f0",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +2368,2372 @@            * False : do not sort the result.\n            * None : sort the result, except when `self` and `other` are equal\n              or when the values cannot be compared.\n\n            .. versionadded:: 0.24.0"
  },
  {
    "id" : "cc64bf0c-86a3-49a2-9159-2929a5b78f64",
    "prId" : 25263,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25263#pullrequestreview-202261369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32aa0084-76b6-4daa-9425-20831958f6a8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should these not be individually converted?",
        "createdAt" : "2019-02-11T13:03:20Z",
        "updatedAt" : "2019-02-23T22:15:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a354a2b6-44cb-4144-8cb2-391b28fba03f",
        "parentId" : "32aa0084-76b6-4daa-9425-20831958f6a8",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "They are eventually, but when they are individually converted (after 3 nested function calls), it's impossible to infer what the UTC offset was in the original strings.\r\n\r\nThis is the earliest opportunity to check that the UTC offsets are the same.",
        "createdAt" : "2019-02-11T18:18:10Z",
        "updatedAt" : "2019-02-23T22:15:07Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb4814aa1ff5c5032e89e1e30202dbef40128995",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +4873,4877 @@        if (isinstance(start, (compat.string_types, datetime))\n                and isinstance(end, (compat.string_types, datetime))):\n            try:\n                ts_start = Timestamp(start)\n                ts_end = Timestamp(end)"
  },
  {
    "id" : "cd3ef0b8-6776-4de0-a0ce-a6ead65bacf8",
    "prId" : 25263,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25263#pullrequestreview-322251041",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d162763-1460-4dc5-a3c6-4d232742e60c",
        "parentId" : null,
        "authorId" : "2ce4d3a6-0a7e-47c7-8851-14cebbd5ac28",
        "body" : "Why is this?\r\nI often do `DataFrame.truncate` where one argument might be `Europe/London` and the second might be `UTC`! This used to work fine (and honestly, why shouldn't it?).",
        "createdAt" : "2019-11-25T12:47:06Z",
        "updatedAt" : "2019-11-25T12:47:06Z",
        "lastEditedBy" : "2ce4d3a6-0a7e-47c7-8851-14cebbd5ac28",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb4814aa1ff5c5032e89e1e30202dbef40128995",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +4880,4884 @@            else:\n                if not tz_compare(ts_start.tzinfo, ts_end.tzinfo):\n                    raise ValueError(\"Both dates must have the \"\n                                     \"same UTC offset\")\n"
  },
  {
    "id" : "d8171db1-f4e2-4572-bfb8-3dcd5bc2c9f6",
    "prId" : 26852,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26852#pullrequestreview-250031718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7fd7f3d-1d95-4a4e-8975-379fdf13bc0a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Only for the datetime-like indexes (we should probably rather remove it, but that's another issue)",
        "createdAt" : "2019-06-14T17:31:13Z",
        "updatedAt" : "2019-06-17T05:51:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "708dbb75818c6e31d9618841881c9dc7bdd98eff",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +504,508 @@    def asi8(self):\n        \"\"\"\n        Integer representation of the values.\n\n        Returns"
  },
  {
    "id" : "df5bdf3a-90ae-41da-ac2b-85dd17998cf7",
    "prId" : 27100,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27100#pullrequestreview-255999874",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05a830da-fac9-4dae-951c-c9ee86a18a03",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Kind of gross, but I had to do this in a few places since uniqueness isn't sufficient for `IntervalIndex`, as a query on a unique `IntervalIndex` can still have multiple values returned if they come from the overlap of 2+ intervals.",
        "createdAt" : "2019-06-28T17:27:59Z",
        "updatedAt" : "2019-07-02T14:21:36Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "332c97f3-10bd-4a2d-971e-f9c22ab3b517",
        "parentId" : "05a830da-fac9-4dae-951c-c9ee86a18a03",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why do you need the getattr? isn't self.is_overlapping enough?",
        "createdAt" : "2019-06-28T19:23:03Z",
        "updatedAt" : "2019-07-02T14:21:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7aebc277-d6f5-430e-a22f-43db363ccbac",
        "parentId" : "05a830da-fac9-4dae-951c-c9ee86a18a03",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "It's a safeguard since `is_overlapping` is currently only implemented for `IntervalIndex` and this code can hit any type of index.\r\n\r\nIt could be added to the base `Index` class but it's slightly ambiguous in terms of meaning - it could just simply return `False` or could essentially be `not self.is_unique` (since duplicate points technically overlap).  Would also contribute to API bloat since it'd be public and not really useful outside of `IntervalIndex` for end users. Depends on what tradeoffs we want to make for internal code clarity.",
        "createdAt" : "2019-06-28T22:43:46Z",
        "updatedAt" : "2019-07-02T14:21:36Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6226bdd45d6b0c0ba50b454d7a0993ad29e2e561",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +3238,3242 @@                # check is_overlapping for IntervalIndex compat\n                if (self.is_unique and\n                        not getattr(self, 'is_overlapping', False)):\n                    indexer = self.get_indexer(target, method=method,\n                                               limit=limit,"
  },
  {
    "id" : "14a02c03-7b18-4b6a-b588-b934ba16fe63",
    "prId" : 27237,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27237#pullrequestreview-350313160",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fa82942-96bd-4284-8741-09e787c5f5ea",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Does the output needs to be an index, or can it just be an array-like?",
        "createdAt" : "2020-01-29T08:39:25Z",
        "updatedAt" : "2020-04-27T02:11:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "fc6890f8-b0c5-4e4a-b55d-6dce82490d23",
        "parentId" : "9fa82942-96bd-4284-8741-09e787c5f5ea",
        "authorId" : "e3663fd4-6ec5-41f6-a788-8c61749efa01",
        "body" : "In this case, yes. It has to return an Index. We could try to rewrap the arraylike in an `Index`, but that's kind of hard if it's supposed to be a `MultiIndex`, for example. I can just add an `if not isinstance(index, Index): index = Index(index)`.",
        "createdAt" : "2020-01-29T18:03:28Z",
        "updatedAt" : "2020-04-27T02:11:38Z",
        "lastEditedBy" : "e3663fd4-6ec5-41f6-a788-8c61749efa01",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d5ba530d4cffea873ba501cbda3a1d50ea172af",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +4381,4385 @@            builtin :meth:`sorted` function, with the notable difference that\n            this `key` function should be *vectorized*. It should expect an\n            ``Index`` and return an ``Index`` of the same shape.\n\n            .. versionadded:: 1.1.0"
  },
  {
    "id" : "42bfac2b-3332-40aa-b238-7c037795d846",
    "prId" : 27392,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27392#pullrequestreview-265155758",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58e2cd69-1e83-4927-aef3-b5df4317a3f1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a TODO that we can return a Integer Array at some point",
        "createdAt" : "2019-07-20T20:30:27Z",
        "updatedAt" : "2019-07-30T01:06:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "13a3d2a4-70d4-45c9-852c-4c4a090e798b",
        "parentId" : "58e2cd69-1e83-4927-aef3-b5df4317a3f1",
        "authorId" : "f7f26e80-fbf6-4c86-9239-b1f32f9f4826",
        "body" : "TODO added",
        "createdAt" : "2019-07-23T03:29:14Z",
        "updatedAt" : "2019-07-30T01:06:52Z",
        "lastEditedBy" : "f7f26e80-fbf6-4c86-9239-b1f32f9f4826",
        "tags" : [
        ]
      }
    ],
    "commit" : "fad37c8d931f0992f76c89694018032388deae25",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +453,457 @@\n                    return Index(subarr, copy=copy, dtype=object, name=name)\n                elif inferred in [\"floating\", \"mixed-integer-float\", \"integer-na\"]:\n                    # TODO: Returns IntegerArray for integer-na case in the future\n                    from .numeric import Float64Index"
  },
  {
    "id" : "ef4504d1-a0a3-40fe-98cb-5123d43ded6c",
    "prId" : 27727,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27727#pullrequestreview-270503755",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "732b6d51-df16-438d-970d-d62d530dae01",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "should there be references to specific Index types in `pandas/core/indexes/base.py`?",
        "createdAt" : "2019-08-04T09:17:59Z",
        "updatedAt" : "2019-08-04T09:17:59Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "63ce41cf-f412-406a-96b1-060adca373a0",
        "parentId" : "732b6d51-df16-438d-970d-d62d530dae01",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We've already got a few; in this case Index is serving as less of a base class and more of a ObjectIndex.",
        "createdAt" : "2019-08-04T15:46:52Z",
        "updatedAt" : "2019-08-04T15:46:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a69cfe919395d249c04dff65920e3cf3f01c3863",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +4318,4322 @@        \"\"\"\n        # must be overridden in specific classes\n        klasses = (ABCDatetimeIndex, ABCTimedeltaIndex, ABCPeriodIndex, ExtensionArray)\n        to_concat = [\n            x.astype(object) if isinstance(x, klasses) else x for x in to_concat"
  },
  {
    "id" : "f1bbfa58-cb29-41e1-99dc-62fd292c31eb",
    "prId" : 28257,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28257#pullrequestreview-283566329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c65cab0-7e07-4955-8ff5-02b292bfc381",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "rather than try/except you can just check ``other.is_unique`` first",
        "createdAt" : "2019-09-04T12:07:56Z",
        "updatedAt" : "2019-10-11T09:47:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1d2b66abc18a835c073932a91ef1783c8602814",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2492,2496 @@                result.extend([x for x in rvals if x not in value_set])\n        else:\n            # find indexes of things in \"other\" that are not in \"self\"\n            if self.is_unique:\n                indexer = self.get_indexer(other)"
  },
  {
    "id" : "700e9af7-8d90-47c6-be25-444500811919",
    "prId" : 28394,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28394#pullrequestreview-435065855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b3fbf06-da80-41c8-96f4-28d5de54ecdd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "instead of adding this, can you not just repr the index where we *already* handle this correctly?",
        "createdAt" : "2020-06-20T14:54:12Z",
        "updatedAt" : "2020-09-01T13:55:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d7fc8e6c-8d6d-4162-901e-51d9e134e178",
        "parentId" : "6b3fbf06-da80-41c8-96f4-28d5de54ecdd",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can you clarify? You're saying we already have a method to build a DataFrame displaying duplicates and their locations?",
        "createdAt" : "2020-06-22T16:00:40Z",
        "updatedAt" : "2020-09-01T13:55:21Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf23fdad7035707f49bd571cf5b9d4d682c9d01f",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +499,503 @@        if not self.is_unique:\n            msg = \"\"\"Index has duplicates.\"\"\"\n            duplicates = self._format_duplicate_message()\n            msg += \"\\n{}\".format(duplicates)\n"
  },
  {
    "id" : "c670ba7f-8714-47a9-aa37-a663388a9530",
    "prId" : 28394,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28394#pullrequestreview-479748762",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "087d5917-c011-4c6b-a928-f56d670fbf3c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string here. i see that you are forming the list of duplicates; this *could* potentially be very large, which i guess is ok?",
        "createdAt" : "2020-08-31T23:43:42Z",
        "updatedAt" : "2020-09-01T13:55:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dd8bec45-5e30-428d-8d73-62e78347013c",
        "parentId" : "087d5917-c011-4c6b-a928-f56d670fbf3c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think we're probably OK here. The frame we construct won't ever be any larger than the input.",
        "createdAt" : "2020-09-01T13:37:33Z",
        "updatedAt" : "2020-09-01T13:55:21Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf23fdad7035707f49bd571cf5b9d4d682c9d01f",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +522,526 @@        from pandas import Series\n\n        duplicates = self[self.duplicated(keep=\"first\")].unique()\n        assert len(duplicates)\n"
  },
  {
    "id" : "8bb66c47-32dd-46ee-888d-91a5ce20b454",
    "prId" : 28394,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28394#pullrequestreview-479740588",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0993e58-fa8d-40b9-a4ec-b371bc1e6f06",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "where is this called? is it public?",
        "createdAt" : "2020-08-31T23:44:00Z",
        "updatedAt" : "2020-09-01T13:55:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2e12760b-c784-4e54-9ecd-27117f846803",
        "parentId" : "a0993e58-fa8d-40b9-a4ec-b371bc1e6f06",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Not public. It's called whenever `.flags.allows_duplicate_labels` is set to True (so in `.set_flags(...)` or via `.__finalize__`.",
        "createdAt" : "2020-09-01T13:28:43Z",
        "updatedAt" : "2020-09-01T13:55:21Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf23fdad7035707f49bd571cf5b9d4d682c9d01f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +484,488 @@        return type(self)\n\n    def _maybe_check_unique(self):\n        \"\"\"\n        Check that an Index has no duplicates."
  },
  {
    "id" : "c424eb8e-1365-4733-b0d1-d7dbf5f1da00",
    "prId" : 28957,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28957#pullrequestreview-301513963",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97e4f075-d524-4483-91d5-6617f87d722c",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Same comment here",
        "createdAt" : "2019-10-14T15:51:17Z",
        "updatedAt" : "2019-10-14T20:14:12Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "69076bd3-c319-4297-bf66-820c6fb1f116",
        "parentId" : "97e4f075-d524-4483-91d5-6617f87d722c",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "I added the type hints after complaints from mypy. I agree it's strange it doesn't infer and I'll see if something can be done to make it infer.",
        "createdAt" : "2019-10-14T16:15:24Z",
        "updatedAt" : "2019-10-14T20:14:12Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "b8cfe78a-5afa-43a8-9cab-a8d5e142ef13",
        "parentId" : "97e4f075-d524-4483-91d5-6617f87d722c",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think should be able to infer as long as you construct with values. Empty construction complains because it is not known then what types of value the object should hold. \r\n\r\nNot sure if FrozenSet would act differently but that’s how builtins work",
        "createdAt" : "2019-10-14T16:17:31Z",
        "updatedAt" : "2019-10-14T20:14:12Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ac12f854-2d05-44d9-b604-5dc552e0df93",
        "parentId" : "97e4f075-d524-4483-91d5-6617f87d722c",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Same here. A frozenset that only contains strings, could conceivably have non-strings, and I think that's what mypy complains about.",
        "createdAt" : "2019-10-14T20:07:09Z",
        "updatedAt" : "2019-10-14T20:14:12Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "f62fdf10fcee4fff82c727a3dd4967981b17e568",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +210,214 @@        | IndexOpsMixin._deprecations\n        | frozenset([\"asobject\", \"contains\", \"dtype_str\", \"get_values\", \"set_value\"])\n    )  # type: FrozenSet[str]\n\n    # To hand over control to subclasses"
  },
  {
    "id" : "0a520cce-8098-4663-b784-ac3437b4a281",
    "prId" : 29580,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29580#pullrequestreview-316362948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cbb68a8-3ea4-40e2-8919-b775a6d69098",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "you can now remove the assert and comment added in #29475 on L657? ",
        "createdAt" : "2019-11-13T12:30:04Z",
        "updatedAt" : "2019-11-13T15:26:18Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "34bb9ff4-e02d-42d0-b1c1-3b6922d08ec8",
        "parentId" : "1cbb68a8-3ea4-40e2-8919-b775a6d69098",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yes, updated",
        "createdAt" : "2019-11-13T15:26:31Z",
        "updatedAt" : "2019-11-13T15:26:31Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "98abafd6-6c69-46b7-8a8a-9a3d9a71ad91",
        "parentId" : "1cbb68a8-3ea4-40e2-8919-b775a6d69098",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "updated+green",
        "createdAt" : "2019-11-13T16:07:28Z",
        "updatedAt" : "2019-11-13T16:07:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "50fc54f0b667ae1361394f11433153091cbad37a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +231,235 @@\n    _typ = \"index\"\n    _data: Union[ExtensionArray, np.ndarray]\n    _id = None\n    name = None"
  },
  {
    "id" : "05ea1f49-81a1-494e-ab6e-f06b53e14fad",
    "prId" : 29725,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29725#pullrequestreview-319446976",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "521e044c-564d-4702-8c46-a93533d30056",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Not sure how we historically handle but unfortunate this accepts kwargs - I suppose if someone keeps supplying `fastpath` nothing will change. Not sure if we should explicitly raise now in that case",
        "createdAt" : "2019-11-20T00:36:53Z",
        "updatedAt" : "2019-11-25T01:34:07Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "eac1407c-50a6-49de-808b-a2d09bd7c00d",
        "parentId" : "521e044c-564d-4702-8c46-a93533d30056",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I changed `test_deprecated_fastpath` so instead of checking for a FutureWarning, it checks for a TypeError",
        "createdAt" : "2019-11-20T00:41:03Z",
        "updatedAt" : "2019-11-25T01:34:07Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "89e69123c740edef3cd13bf9e3abb8377204d49c",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +260,264 @@\n    def __new__(\n        cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs,\n    ) -> \"Index\":\n"
  },
  {
    "id" : "685e81dc-5edf-4101-ad14-e3ee24ae2cee",
    "prId" : 29766,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29766#pullrequestreview-321141582",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b11a4b80-2d45-4914-96ea-9d387547f896",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "should we keep one (some) of the removed tests to provide coverage here",
        "createdAt" : "2019-11-21T12:17:26Z",
        "updatedAt" : "2019-11-22T18:06:06Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "37c22482-adc6-4d40-941e-292bbebcdd80",
        "parentId" : "b11a4b80-2d45-4914-96ea-9d387547f896",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We have tests that hit this when unpickling old MultiIndexes.  Are you suggesting something else?",
        "createdAt" : "2019-11-21T19:44:24Z",
        "updatedAt" : "2019-11-22T18:06:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb15c4742ce9807dfc71d533083d2496675a05b2",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +165,169 @@        if \"labels\" in d and \"codes\" not in d:\n            # GH#23752 \"labels\" kwarg has been replaced with \"codes\"\n            d[\"codes\"] = d.pop(\"labels\")\n\n    return cls.__new__(cls, **d)"
  },
  {
    "id" : "0553676e-1afb-4d87-b3ee-ec149b65f894",
    "prId" : 29766,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29766#pullrequestreview-322645737",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9088082-0849-4d99-b1a3-648bc88b0cbb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we have an issue about removing *this* code at some point, what are the pre-conditions for that?",
        "createdAt" : "2019-11-25T23:11:01Z",
        "updatedAt" : "2019-11-25T23:11:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ac2e5d19-a72e-4633-8674-9687df5649c7",
        "parentId" : "d9088082-0849-4d99-b1a3-648bc88b0cbb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> what are the pre-conditions for that?\r\n\r\nnot wanting/needing to support sufficiently-old pickles",
        "createdAt" : "2019-11-25T23:23:23Z",
        "updatedAt" : "2019-11-25T23:23:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ee016c70-c03e-4a54-8e69-3e1ba7390cc8",
        "parentId" : "d9088082-0849-4d99-b1a3-648bc88b0cbb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you clarify, meaning < 0.23.4? later? (if you can pls put in the issue)",
        "createdAt" : "2019-11-25T23:30:21Z",
        "updatedAt" : "2019-11-25T23:30:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb15c4742ce9807dfc71d533083d2496675a05b2",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +164,168 @@    if issubclass(cls, ABCMultiIndex):\n        if \"labels\" in d and \"codes\" not in d:\n            # GH#23752 \"labels\" kwarg has been replaced with \"codes\"\n            d[\"codes\"] = d.pop(\"labels\")\n"
  },
  {
    "id" : "c3319083-a354-41a6-9057-eb3758ecc422",
    "prId" : 29926,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29926#pullrequestreview-326070681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18e22962-4707-4208-bc98-80a0ec777451",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The actual change is that I raise an error here when the key is not a scalar (which would happen anyway below otherwise, I think, as `_engine.get_value` is meant for scalar indices).",
        "createdAt" : "2019-11-29T10:41:08Z",
        "updatedAt" : "2019-12-03T10:52:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4c221c9d-efdc-4a43-8709-13563d28f5d4",
        "parentId" : "18e22962-4707-4208-bc98-80a0ec777451",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : ">  I think, as _engine.get_value is meant for scalar indices).\r\n\r\nMight be worth renaming something like get_value_scalar (not for this PR)",
        "createdAt" : "2019-11-29T19:59:41Z",
        "updatedAt" : "2019-12-03T10:52:32Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b76c6cc5-4298-4c4f-aadc-60999b872974",
        "parentId" : "18e22962-4707-4208-bc98-80a0ec777451",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you don't need the else here, can you add the issue number and short comment",
        "createdAt" : "2019-11-29T22:53:32Z",
        "updatedAt" : "2019-12-03T10:52:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ed907978-0d86-4fc6-9031-ae4888877756",
        "parentId" : "18e22962-4707-4208-bc98-80a0ec777451",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Added a comment to explain",
        "createdAt" : "2019-12-03T11:30:43Z",
        "updatedAt" : "2019-12-03T11:30:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "263e31a2ce6cf332ad10698c9bd7aae1f3191768",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +4597,4601 @@                # if key is not a scalar, directly raise an error (the code below\n                # would convert to numpy arrays and raise later any way) - GH29926\n                raise InvalidIndexError(key)\n\n        s = com.values_from_object(series)"
  },
  {
    "id" : "48f2f903-58ec-47b9-8183-803456a62229",
    "prId" : 29926,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29926#pullrequestreview-326070681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3461ac4f-1597-48af-973b-72718b2c7ad8",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I removed the `Index` from this check, because the line above (`s = getattr(series, \"_values\", series)`) should nowadays extract the EA from the Index (and no Series is backed by an Index any more)",
        "createdAt" : "2019-11-29T10:42:00Z",
        "updatedAt" : "2019-12-03T10:52:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d6f85c48-14b2-469f-a84c-183eadf6c22e",
        "parentId" : "3461ac4f-1597-48af-973b-72718b2c7ad8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "maybe modernize to use extract_array?",
        "createdAt" : "2019-11-29T20:01:03Z",
        "updatedAt" : "2019-12-03T10:52:32Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "243ab8e3-0d68-49b0-9976-adafb5378f23",
        "parentId" : "3461ac4f-1597-48af-973b-72718b2c7ad8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Indeed, used `extract_array`",
        "createdAt" : "2019-12-03T11:30:34Z",
        "updatedAt" : "2019-12-03T11:30:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "263e31a2ce6cf332ad10698c9bd7aae1f3191768",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +4579,4583 @@        # Things like `Series._get_value` (via .at) pass the EA directly here.\n        s = extract_array(series, extract_numpy=True)\n        if isinstance(s, ExtensionArray):\n            if is_scalar(key):\n                # GH 20882, 21257"
  },
  {
    "id" : "666e8757-8e07-4248-98fb-daf6589ab67c",
    "prId" : 30335,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30335#pullrequestreview-336808213",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18797395-beb4-43bf-a7a0-5c94e8f0e0a2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in series.py you can change name.setter to use maybe_extract_name (ok for followon)",
        "createdAt" : "2019-12-27T15:59:23Z",
        "updatedAt" : "2019-12-27T15:59:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "880c092498d34c7ca98663a4830724446f80bc98",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +1215,1219 @@    @name.setter\n    def name(self, value):\n        maybe_extract_name(value, None, type(self))\n        self._name = value\n"
  },
  {
    "id" : "a984dde9-714e-418c-b9a6-90fe85d93d94",
    "prId" : 30335,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30335#pullrequestreview-336808409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "526d69f1-12f1-4d5f-b867-1addae05c13b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see my comment above, can be more general so need to relocate i think as this is common between series/index)",
        "createdAt" : "2019-12-27T16:00:15Z",
        "updatedAt" : "2019-12-27T16:00:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "880c092498d34c7ca98663a4830724446f80bc98",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +5473,5477 @@\n\ndef maybe_extract_name(name, obj, cls) -> Optional[Hashable]:\n    \"\"\"\n    If no name is passed, then extract it from data, validating hashability."
  },
  {
    "id" : "2930a753-c5b9-4968-b48f-0c1077d5c4cc",
    "prId" : 30574,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30574#pullrequestreview-337363485",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf7cf781-4f4a-470f-93d0-05f23683eeba",
        "parentId" : null,
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "TypeError instead?",
        "createdAt" : "2019-12-31T01:01:19Z",
        "updatedAt" : "2019-12-31T12:14:27Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "66dd9424-7564-4fe5-a1df-de5c9b9a8555",
        "parentId" : "bf7cf781-4f4a-470f-93d0-05f23683eeba",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think a RuntimeError is best, since we don't check the type or valuje of `value` checked here.",
        "createdAt" : "2019-12-31T12:13:58Z",
        "updatedAt" : "2019-12-31T12:14:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "df4762a8990974229666a96313e910d647bab6c9",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1221,1225 @@        if self._no_setting_name:\n            # Used in MultiIndex.levels to avoid silently ignoring name updates.\n            raise RuntimeError(\n                \"Cannot set name on a level of a MultiIndex. Use \"\n                \"'MultiIndex.set_names' instead.\""
  },
  {
    "id" : "b9803976-ef4b-4791-a89d-3c9952434cf7",
    "prId" : 30586,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30586#pullrequestreview-337421586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88f9f7bd-4bc0-4d01-83b8-77ad3026b0d6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "private?",
        "createdAt" : "2019-12-31T17:32:24Z",
        "updatedAt" : "2019-12-31T17:32:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6cb32af3-a372-4f2e-abe0-8263123f31b2",
        "parentId" : "88f9f7bd-4bc0-4d01-83b8-77ad3026b0d6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "until we have a reason to unprivatize it, i figure its safer this way",
        "createdAt" : "2019-12-31T17:42:41Z",
        "updatedAt" : "2019-12-31T17:42:42Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "970d047f65e4e9e6f1282c1aa48620032a9daf0f",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +5456,5460 @@\n\ndef _maybe_cast_with_dtype(data: np.ndarray, dtype: np.dtype, copy: bool) -> np.ndarray:\n    \"\"\"\n    If a dtype is passed, cast to the closest matching dtype that is supported"
  },
  {
    "id" : "0a494258-3e6e-4ab0-947b-c42ee00f915e",
    "prId" : 30586,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30586#pullrequestreview-337468545",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7ced07f-ae3e-4652-84cb-9ebd2b5603d9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should be in pandas/core/dtypes/cast.py and i think duplicates some code there, but ok for now.",
        "createdAt" : "2020-01-01T01:46:49Z",
        "updatedAt" : "2020-01-01T01:46:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "285ee4ea-d930-4431-aedd-3b3233e56d22",
        "parentId" : "e7ced07f-ae3e-4652-84cb-9ebd2b5603d9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yes, there's definitely some duplication to get rid of, but first there are some kinks to iron out, in particular #21311, #17246.",
        "createdAt" : "2020-01-01T02:10:44Z",
        "updatedAt" : "2020-01-01T02:10:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "970d047f65e4e9e6f1282c1aa48620032a9daf0f",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +5538,5542 @@            res = data.astype(\"i8\", copy=False)\n            if (res == data).all():\n                return res  # TODO: might still need to copy\n        except (OverflowError, TypeError, ValueError):\n            pass"
  },
  {
    "id" : "9c9adcaf-691a-4c6e-9640-b0c9258fa2c9",
    "prId" : 30586,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30586#pullrequestreview-337468556",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bd69db4-2c60-4fad-b0de-cbcd64321ed0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you need to remove the original no?",
        "createdAt" : "2020-01-01T01:47:54Z",
        "updatedAt" : "2020-01-01T01:47:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e6f78b35-7c2f-4ca2-bb5a-895d4e3ca855",
        "parentId" : "3bd69db4-2c60-4fad-b0de-cbcd64321ed0",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The original is still used once.  The next PR in this sequence removes that usage.",
        "createdAt" : "2020-01-01T02:11:11Z",
        "updatedAt" : "2020-01-01T02:11:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "970d047f65e4e9e6f1282c1aa48620032a9daf0f",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +5510,5514 @@\n\ndef _try_convert_to_int_array(\n    data: np.ndarray, copy: bool, dtype: np.dtype\n) -> np.ndarray:"
  },
  {
    "id" : "a87184ff-3fab-45de-8538-7947650bb4da",
    "prId" : 30588,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30588#pullrequestreview-340679761",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6bb9ab6-c438-4c00-a897-5dd496d94321",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "`deprecate_ndim_indexing` also checks `np.ndim(result) > 1`, so this check should be unnecessary.",
        "createdAt" : "2020-01-09T16:47:20Z",
        "updatedAt" : "2020-01-09T18:52:13Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "5bd85a57-86c0-4f59-a263-362cabd3c05b",
        "parentId" : "c6bb9ab6-c438-4c00-a897-5dd496d94321",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We have to do the check anyway, the only question is if we put this line inside or outside the check.  i prefer inside, but fine either way",
        "createdAt" : "2020-01-09T17:07:20Z",
        "updatedAt" : "2020-01-09T18:52:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "1bf1842f-dc42-4d48-bc44-48f674e2530b",
        "parentId" : "c6bb9ab6-c438-4c00-a897-5dd496d94321",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Ah, missed that we had the return here. This looks good.",
        "createdAt" : "2020-01-09T17:09:27Z",
        "updatedAt" : "2020-01-09T18:52:13Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "74dffbedacb34bde7e5a8fb2396e0fef9efac499",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +3905,3909 @@        result = getitem(key)\n        if not is_scalar(result):\n            if np.ndim(result) > 1:\n                deprecate_ndim_indexing(result)\n                return result"
  },
  {
    "id" : "1c7413ce-7fff-4edc-bf97-3719b8e7dd39",
    "prId" : 30874,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30874#pullrequestreview-345029709",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e7baf1f-9dd8-4889-abe1-dcfa4402df5a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why are you doing this?",
        "createdAt" : "2020-01-18T16:08:27Z",
        "updatedAt" : "2020-01-18T16:09:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1a2b67dc-0b91-4011-99ef-e202fa7da7e7",
        "parentId" : "5e7baf1f-9dd8-4889-abe1-dcfa4402df5a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "mypy wont allow us to annotate with \"str\" because Index has a \"str\" attribute.  Same thing with how we use \"bool_t\" in generic.py",
        "createdAt" : "2020-01-18T16:28:25Z",
        "updatedAt" : "2020-01-18T16:28:25Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3139a361-5d48-414c-a66a-f3efe2757170",
        "parentId" : "5e7baf1f-9dd8-4889-abe1-dcfa4402df5a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, we should simply move these to _typing then (can be a followon)",
        "createdAt" : "2020-01-18T16:30:55Z",
        "updatedAt" : "2020-01-18T16:30:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "05ffec66-ce9f-4300-9d2f-ebb5850025b4",
        "parentId" : "5e7baf1f-9dd8-4889-abe1-dcfa4402df5a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "and we should change the str attribute to something else",
        "createdAt" : "2020-01-18T16:31:21Z",
        "updatedAt" : "2020-01-18T16:31:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bccd6e2e-aa19-4fb7-9015-cd7ac82c01a5",
        "parentId" : "5e7baf1f-9dd8-4889-abe1-dcfa4402df5a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i think we're OK with this being a follow-up, yah?",
        "createdAt" : "2020-01-19T22:06:24Z",
        "updatedAt" : "2020-01-19T22:06:25Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c39a72b2c61c66d66403ed1986d3cbcb775c0ebf",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +97,101 @@)\n_index_shared_docs = dict()\nstr_t = str\n\n"
  },
  {
    "id" : "75f3b743-0d7a-4ab6-88e1-4aa71a4f7c53",
    "prId" : 31047,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31047#pullrequestreview-343368731",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c451a5b-09b1-4c0b-915e-cffd564e32a3",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think all these `is_boolean`, `is_integer`... could have a `See Also` section where they reference each other.",
        "createdAt" : "2020-01-15T16:56:57Z",
        "updatedAt" : "2020-01-17T02:41:32Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "755a0f77f25ab990047f4dd9d97e9a6220bfc7dd",
    "line" : 158,
    "diffHunk" : "@@ -1,1 +1792,1796 @@\n    def is_numeric(self) -> bool:\n        \"\"\"\n        Check if the Index only consists of numeric data.\n"
  },
  {
    "id" : "8946cc82-1af5-4684-8608-706f73802399",
    "prId" : 31047,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31047#pullrequestreview-344575246",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b195c950-447a-4fd5-a8c4-3d6b92146e55",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "For a case like this, this might be a bit duplicative with the first line.\r\n\r\nDo we (or the validation script) always require an explanation of the return type?",
        "createdAt" : "2020-01-15T21:12:02Z",
        "updatedAt" : "2020-01-17T02:41:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c106f1ac-6c3a-411c-b1d6-3e63bece0ed9",
        "parentId" : "b195c950-447a-4fd5-a8c4-3d6b92146e55",
        "authorId" : "2dcd3b71-9611-4d94-bfa1-ad321793a02c",
        "body" : "Yes the validation script requires a description for return values. Related error code: `'RT03': 'Return value has no description'`. I confirmed this by removing one of the explanations, leaving only the return type, and the error appears when I ran `python3 scripts/validate_docstrings.py --errors=RT03`",
        "createdAt" : "2020-01-16T17:33:09Z",
        "updatedAt" : "2020-01-17T02:41:32Z",
        "lastEditedBy" : "2dcd3b71-9611-4d94-bfa1-ad321793a02c",
        "tags" : [
        ]
      },
      {
        "id" : "9121b327-02b5-43bb-aa05-b7b5b97dd373",
        "parentId" : "b195c950-447a-4fd5-a8c4-3d6b92146e55",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "(this discussion is certainly not a blocker for this PR, to be clear)\r\n\r\n@datapythonista what's your view on this? It's of course easiest to be consistent / have a clear rule in the validation. But personally, I find that it doesn't add any value in this specific case.",
        "createdAt" : "2020-01-16T19:33:11Z",
        "updatedAt" : "2020-01-17T02:41:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "44112265-79fe-43b5-b192-9c3b75806444",
        "parentId" : "b195c950-447a-4fd5-a8c4-3d6b92146e55",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I agree it's probably a bit repetitive. I think it may add value, even if from the short summary and the the name of the function, it should be easier for most people to infer what is the output (what True and False mean), I guess beginners can appreciate having it explicit. It's difficult sometimes to know if what is obvious for us it's for other people.\r\n\r\nIn any case, assuming it literally doesn't add any value, with all the work we've got with docstrings, I would just simply move forward, since there are so many other things that I think are more important and worth more our time. I think this looks fine to me, even if the repetition is not ideal.",
        "createdAt" : "2020-01-16T19:42:24Z",
        "updatedAt" : "2020-01-17T02:41:32Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "f749c61c-5572-4bd7-9172-1dd65e234fe8",
        "parentId" : "b195c950-447a-4fd5-a8c4-3d6b92146e55",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Duplicate content can also add noise, as you might need to read both to ensure you don't miss something. \r\n\r\nAnyway, not a discussion to continue on this PR",
        "createdAt" : "2020-01-17T13:26:46Z",
        "updatedAt" : "2020-01-17T13:26:46Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "755a0f77f25ab990047f4dd9d97e9a6220bfc7dd",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1654,1658 @@        -------\n        bool\n            Whether or not the Index has duplicate values.\n\n        Examples"
  },
  {
    "id" : "04c1005b-956b-4beb-8367-21da09988e3f",
    "prId" : 31084,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31084#pullrequestreview-344238912",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2dae9fd2-0658-4cbd-afbb-026bff8db3c6",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What does this need to change for?",
        "createdAt" : "2020-01-16T21:44:58Z",
        "updatedAt" : "2020-01-16T21:45:09Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ed7d0489-a082-43fd-b727-b6bf4779d010",
        "parentId" : "2dae9fd2-0658-4cbd-afbb-026bff8db3c6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "`self._data[:0]` is an ndarray for RangeIndex, so we can't pass it to self._simple_new below",
        "createdAt" : "2020-01-16T21:47:44Z",
        "updatedAt" : "2020-01-16T21:47:45Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7304d23a48d1b4777cd50efc725c070632f708e",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +3107,3111 @@            attrs = self._get_attributes_dict()\n            attrs.pop(\"freq\", None)  # don't preserve freq\n            if isinstance(self, ABCRangeIndex):\n                values = range(0)\n            else:"
  },
  {
    "id" : "74a1d1f5-7b92-4b9e-a9a7-f217c6404efe",
    "prId" : 31134,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31134#pullrequestreview-345030160",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f656c0b9-887c-450f-bd01-6c89e48c3620",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add Paramters / Returns & typing as much as you can.\r\n\r\nThis likely duplicates some existing routines, no?",
        "createdAt" : "2020-01-19T20:43:31Z",
        "updatedAt" : "2020-01-19T20:43:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a756bca1-2efa-4668-b01c-c8151a673197",
        "parentId" : "f656c0b9-887c-450f-bd01-6c89e48c3620",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "No, it de-duplicates code that we have I think in two places in Index.get_value and one each in DTI and TDI.\r\n\r\nThat said, this is one of the things we'll be able to simplify if/when we do the _values thing mentioned in #31037.\r\n\r\nWill annotate in  next pass",
        "createdAt" : "2020-01-19T22:14:02Z",
        "updatedAt" : "2020-01-19T22:14:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e0b24edbc4b82f36942d1b301d0d989426403f3",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +4638,4642 @@\n    def _get_values_for_loc(self, series, loc):\n        \"\"\"\n        Do a positional lookup on the given Series, returning either a scalar\n        or a Series."
  },
  {
    "id" : "5fdac235-11db-4a0c-aced-87bd10a49282",
    "prId" : 31181,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31181#pullrequestreview-346476538",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30f854a8-79c2-4039-88d2-90a0351d3552",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "the error here is `pandas\\core\\indexes\\base.py:910: error: \"Index\" has no attribute \"categories\"`. should this special case be in CategoricalIndex instead of in the base Index class?",
        "createdAt" : "2020-01-22T10:44:50Z",
        "updatedAt" : "2020-01-22T19:29:09Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f188ed19dc4cb74eb05cda7abf164c899d38e30",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +908,912 @@            is_justify = False\n        elif self.inferred_type == \"categorical\":\n            if is_object_dtype(self.categories):  # type: ignore\n                is_justify = False\n"
  },
  {
    "id" : "76b6fae2-e12c-449a-a61a-7cabaaff680d",
    "prId" : 31388,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31388#pullrequestreview-349354063",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a375b697-3418-473b-a486-edd11eff5b7b",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "could also update return type on L4769 and docstring. would need PrettyDict to be generic, see other comment.",
        "createdAt" : "2020-01-28T13:00:56Z",
        "updatedAt" : "2020-01-28T18:52:36Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6b9751159b044e8933568436282ab26b085d00b",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +4792,4796 @@        result = {k: self.take(v) for k, v in result.items()}\n\n        return PrettyDict(result)\n\n    def map(self, mapper, na_action=None):"
  },
  {
    "id" : "d2e4e797-50c0-4901-afb5-0e91d1abfe59",
    "prId" : 31401,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31401#pullrequestreview-351974091",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc0f24ff-af6b-4244-9dea-304167cebb1e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why does _wrap_setop_result not do this?",
        "createdAt" : "2020-02-01T22:26:03Z",
        "updatedAt" : "2020-02-01T22:26:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "19d247bf-cc96-40d8-86da-1a6730fbeffa",
        "parentId" : "fc0f24ff-af6b-4244-9dea-304167cebb1e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "ATM it does in a roundabout manner.  Index._wrap_setop_result calls self._constructor, which is `type(self)` whereas the subclasses use _shallow_copy.",
        "createdAt" : "2020-02-01T22:43:18Z",
        "updatedAt" : "2020-02-01T22:43:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0a600372-69d8-4d50-8ffe-ab405a1eb5a6",
        "parentId" : "fc0f24ff-af6b-4244-9dea-304167cebb1e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok",
        "createdAt" : "2020-02-02T22:56:29Z",
        "updatedAt" : "2020-02-02T22:56:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bff494454ea2b33f7b52c8d86256148fc7873d0",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +2568,2572 @@                value_set = set(lvals)\n                result.extend([x for x in rvals if x not in value_set])\n                result = Index(result)._values  # do type inference here\n        else:\n            # find indexes of things in \"other\" that are not in \"self\""
  },
  {
    "id" : "c6f39f64-bd7b-4410-b165-31ec01265d0f",
    "prId" : 31423,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31423#pullrequestreview-350233734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1db800b5-1cd6-4441-ae11-74e0a6e7947c",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Might be beneficial to add a comment detailing why these imports are delayed.\r\n\r\nWe used to delay these imports but looks like they got moved to the top as part of a cleaning/refactor, and would want to prevent that from happening again:\r\nhttps://github.com/pandas-dev/pandas/blob/250574eda5302b6941f8c766f520f67226aadad7/pandas/core/indexes/base.py#L194-L198\r\n",
        "createdAt" : "2020-01-29T16:13:55Z",
        "updatedAt" : "2020-01-29T16:57:27Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd6ee1b47231f476c5cdd3a9e54f9e733b160653",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +294,298 @@        elif is_categorical_dtype(data) or is_categorical_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas.core.indexes.category import CategoricalIndex\n\n            return CategoricalIndex(data, dtype=dtype, copy=copy, name=name, **kwargs)"
  },
  {
    "id" : "c9684361-30c6-491c-a0e5-bbece2a4799f",
    "prId" : 31769,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31769#pullrequestreview-355004482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df9ed2df-4fde-4e4f-a3a8-4010e455a836",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Since this is for iloc, changing to positional (otherwise you can get confusing error message as \"cannot do slice indexing on FloatIndex with indexer of type float\" (which for label-based slice indexing would of course be totally fine)",
        "createdAt" : "2020-02-07T08:48:33Z",
        "updatedAt" : "2020-02-07T08:48:33Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "9038ebce6930447d7e0ba3eb4ba0e9f054fa8eb1",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +3161,3165 @@            self._validate_indexer(\"positional\", key.start, \"iloc\")\n            self._validate_indexer(\"positional\", key.stop, \"iloc\")\n            self._validate_indexer(\"positional\", key.step, \"iloc\")\n            return key\n"
  },
  {
    "id" : "d6f819f8-d93b-4135-b75b-1f9f6c76e31f",
    "prId" : 32006,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32006#pullrequestreview-361512038",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b4c1ec1-db08-4ffb-92b0-ef7251185ef1",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "less verbose here: \"New Index object\"",
        "createdAt" : "2020-02-19T23:23:02Z",
        "updatedAt" : "2020-02-19T23:23:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7cf9b69f0d8116d2f5a7adf1ddcfd419ce2b9b4b",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +843,847 @@        -------\n        Index\n            Index refer to new object which is a copy of this object.\n\n        Notes"
  },
  {
    "id" : "9f1a3962-eb5a-492b-85ac-b8a5121c5278",
    "prId" : 32006,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32006#pullrequestreview-361512202",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "497f6d83-5e3f-42ef-ba1a-1626a147a025",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "\"Set\" her and on 835 are unnecessary",
        "createdAt" : "2020-02-19T23:23:27Z",
        "updatedAt" : "2020-02-19T23:23:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7cf9b69f0d8116d2f5a7adf1ddcfd419ce2b9b4b",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +836,840 @@        deep : bool, default False\n        dtype : numpy dtype or pandas type, optional\n            Set dtype for new object.\n        names : list-like, optional\n            Kept for compatibility with MultiIndex. Should not be used."
  },
  {
    "id" : "cef077d6-6d44-4bb1-a30d-4014d28d3cf7",
    "prId" : 32006,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32006#pullrequestreview-361512471",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04ce0886-ac43-4a59-a424-006d735015c2",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "\"pandas type\" isnt a thing, possibly \"ExtensionDType\"?  i think strs are also accepted if they can be mapped to dtypes",
        "createdAt" : "2020-02-19T23:24:09Z",
        "updatedAt" : "2020-02-19T23:24:09Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7cf9b69f0d8116d2f5a7adf1ddcfd419ce2b9b4b",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +835,839 @@            Set name for new object.\n        deep : bool, default False\n        dtype : numpy dtype or pandas type, optional\n            Set dtype for new object.\n        names : list-like, optional"
  },
  {
    "id" : "c2bfdd4d-f3f5-4b9a-929a-02c7dd8fb05d",
    "prId" : 32009,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32009#pullrequestreview-363059611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6dec0dd-23bd-4ea8-8ad6-cfdf62f871cb",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I don't think this whole description is very clear. May be you can simply mention in the short summary this is a conditional. And explain what exactly does in the extended summary.",
        "createdAt" : "2020-02-17T08:37:17Z",
        "updatedAt" : "2020-02-23T01:13:01Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "7ea69b8d-8cb0-4f10-bb3a-15d89ce062ae",
        "parentId" : "f6dec0dd-23bd-4ea8-8ad6-cfdf62f871cb",
        "authorId" : "1c687085-ac1d-4abf-946a-479db6b2f1b3",
        "body" : "Okay, I've copied the short summary from `Series.where` and `DataFrame.where`.",
        "createdAt" : "2020-02-23T01:14:24Z",
        "updatedAt" : "2020-02-23T01:15:43Z",
        "lastEditedBy" : "1c687085-ac1d-4abf-946a-479db6b2f1b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "90c00c75c6de5b9ec7c5a1a7a8bdc2ad92cb25c7",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +3939,3943 @@        Replace values where the condition is False.\n\n        The replacement is taken from other.\n\n        Parameters"
  },
  {
    "id" : "acc613b6-eda9-410c-b919-2be53f430179",
    "prId" : 32015,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32015#pullrequestreview-359340468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8d03ad1-f14c-43cc-9ec2-b24110e398ae",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Can you add a blank line before",
        "createdAt" : "2020-02-15T11:18:52Z",
        "updatedAt" : "2020-02-15T12:19:48Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f01dcf630660dd67478ca1c00ae9fd76e692e540",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +5157,5161 @@        Index(['a', 'c'], dtype='object')\n\n        >>> idx = pd.Index(['a', 'b', 'c'])\n        >>> idx.delete([0, 2])\n        Index(['b'], dtype='object')"
  },
  {
    "id" : "a2abc576-931b-4598-b67e-8f51211aa567",
    "prId" : 32036,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32036#pullrequestreview-360044546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac213848-e75a-434d-afb7-8ee4b788ab7a",
        "parentId" : null,
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "One other bug found when updating tests, will update the whatsnew",
        "createdAt" : "2020-02-18T02:55:13Z",
        "updatedAt" : "2020-03-26T15:32:02Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a288ef9ed972cf738717521df6b0a777194308c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +671,675 @@\n        elif is_extension_array_dtype(dtype):\n            return Index(np.asarray(self), name=self.name, dtype=dtype, copy=copy)\n\n        try:"
  },
  {
    "id" : "5db161f7-c0a8-4f03-b3cd-a5edb735f8eb",
    "prId" : 32280,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32280#pullrequestreview-365746821",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e03fa24-a70b-4909-83e4-b2b0908c7028",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why don't you generally just do this? IOW why is this just for period dtype,",
        "createdAt" : "2020-02-27T12:54:55Z",
        "updatedAt" : "2020-02-27T12:55:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "96d915b9-3e76-4bd7-a384-249f6269975c",
        "parentId" : "0e03fa24-a70b-4909-83e4-b2b0908c7028",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Because PeriodIndex is the only one where .values casts to object.  I'm exploring a couple of options for longer-term solutions here",
        "createdAt" : "2020-02-27T15:14:03Z",
        "updatedAt" : "2020-02-27T15:14:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cb67b4c3914767a31fa2f5998047af790f09133",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +4235,4239 @@        try:\n            np.putmask(values, mask, self._convert_for_op(value))\n            if is_period_dtype(self.dtype):\n                # .values cast to object, so we need to cast back\n                values = type(self)(values)._data"
  },
  {
    "id" : "928a3f68-1313-4314-9dd4-57e4c8a089ec",
    "prId" : 32467,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32467#pullrequestreview-372173796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "012d5d37-2710-46bc-9d85-d72fa039c579",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would make\r\n\r\nextract_values_for_argsort(ArrayLike) -> np.array\r\n\r\nwhich does this for a single array and just call it here (and below); locate in pandas/core/consruction near extract_array",
        "createdAt" : "2020-03-08T15:54:56Z",
        "updatedAt" : "2020-03-08T15:55:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "aa2b111a-7b0e-45e9-8970-41e828d22ab0",
        "parentId" : "012d5d37-2710-46bc-9d85-d72fa039c579",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "there are a couple more places in Index where I _think_ this same pattern can be used.  once that is verified, i was thinking of making this a method in Index/ExtensionIndex",
        "createdAt" : "2020-03-08T16:35:46Z",
        "updatedAt" : "2020-03-08T16:35:46Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d1da6de9-1f5a-4d66-98c1-e964e21b99f8",
        "parentId" : "012d5d37-2710-46bc-9d85-d72fa039c579",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "gentle ping.  ive got a branch that does this for the remaining places in indexes.base and does implement this as `_get_engine_target`",
        "createdAt" : "2020-03-10T17:33:26Z",
        "updatedAt" : "2020-03-10T17:33:26Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5485e3c6bb9b9b0e2066394a35451b2d4df85b3",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +3570,3574 @@        assert self.dtype == other.dtype\n\n        if is_extension_array_dtype(self.dtype):\n            lvalues = self._data._values_for_argsort()\n            rvalues = other._data._values_for_argsort()"
  },
  {
    "id" : "53faee2e-43c6-466f-983d-e56099abf4c2",
    "prId" : 32905,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32905#pullrequestreview-379064942",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d8acc55-1837-4f64-aff9-d9a917601857",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i dont think we want to change this.  instead can you do the same values-> _values edit on L3072?",
        "createdAt" : "2020-03-22T22:38:22Z",
        "updatedAt" : "2020-03-26T13:45:15Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f0b918d7-f818-4645-983b-48f050ae0c0d",
        "parentId" : "1d8acc55-1837-4f64-aff9-d9a917601857",
        "authorId" : "1eeb5ee1-cf9c-4c6e-b49e-4d34e0395fb6",
        "body" : "Ah, good call; should be all set.",
        "createdAt" : "2020-03-22T23:09:42Z",
        "updatedAt" : "2020-03-26T13:45:15Z",
        "lastEditedBy" : "1eeb5ee1-cf9c-4c6e-b49e-4d34e0395fb6",
        "tags" : [
        ]
      }
    ],
    "commit" : "689077dee53de1d293dc2a577b3416144fe981fb",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +3066,3070 @@    def _filter_indexer_tolerance(\n        self,\n        target: Union[\"Index\", np.ndarray, ExtensionArray],\n        indexer: np.ndarray,\n        tolerance,"
  },
  {
    "id" : "7ee1c5a9-6017-4187-8b5c-5345278e9725",
    "prId" : 33026,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33026#pullrequestreview-381611294",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "261161ca-fec1-4f42-80a3-fc2efc00b422",
        "parentId" : null,
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Just checking for scalars _before_ testing for an `__array__` attribute since things like `np.array([1, 2])[0]` pass both",
        "createdAt" : "2020-03-25T23:35:14Z",
        "updatedAt" : "2020-03-26T03:19:59Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d9d5d16d6a8d8cf6285d5558affb35d16d23c71",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +399,403 @@            raise cls._scalar_data_error(data)\n        elif hasattr(data, \"__array__\"):\n            return Index(np.asarray(data), dtype=dtype, copy=copy, name=name, **kwargs)\n        else:\n            if tupleize_cols and is_list_like(data):"
  },
  {
    "id" : "83f38d11-5fe9-4052-b30c-f84c2db702a6",
    "prId" : 33291,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33291#pullrequestreview-387789760",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdfe1adc-d486-404f-ae6e-81b354d2e495",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is the stack level required here? Wouldn’t it be thrown when calling directly without it?",
        "createdAt" : "2020-04-04T21:11:59Z",
        "updatedAt" : "2020-04-04T21:11:59Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "1d42c6ae-9ce2-46f2-8315-fc971f40d933",
        "parentId" : "fdfe1adc-d486-404f-ae6e-81b354d2e495",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "A stacklevel is always required (and when the user would call it directly, it needs to be 2). The default in the stdlib is kind of useless",
        "createdAt" : "2020-04-05T07:31:43Z",
        "updatedAt" : "2020-04-05T07:31:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "930e8c35d867d6b23f6cf8ee6fec981ea0723d67",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1960,1964 @@            \"Check index.inferred_type directly instead.\",\n            FutureWarning,\n            stacklevel=2,\n        )\n        return self.inferred_type in [\"mixed\"]"
  },
  {
    "id" : "c42578d5-100f-4d20-b42e-e3161852d9ee",
    "prId" : 33945,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33945#pullrequestreview-405170216",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78f482b2-5703-4cd4-b5a8-e0424acc534e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is possible we need to optimize this at some point (pandas_dtype) to fast path things",
        "createdAt" : "2020-05-04T16:55:01Z",
        "updatedAt" : "2020-05-04T16:55:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7fee01e89b66d8c3961b154be22520af47a8bce",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +632,636 @@            Index with values cast to specified dtype.\n        \"\"\"\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n"
  },
  {
    "id" : "36debe35-d7b7-4f68-9765-8a30f558bab8",
    "prId" : 35604,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35604#pullrequestreview-466783113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0da2b8fb-e5dd-4d0c-83d0-5771e3fe2c74",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you comment that this is the MI one?\r\n\r\nit *might* be better to actually have a helper method to compute the _sort_indexer where you define for Index and MI then this method becomes simpler.",
        "createdAt" : "2020-08-12T15:40:08Z",
        "updatedAt" : "2020-09-06T04:24:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "02b8680f-7dc3-4293-bab9-b3c28190b3a0",
        "parentId" : "0da2b8fb-e5dd-4d0c-83d0-5771e3fe2c74",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "also for MI we are basically ignoreing na_position right?",
        "createdAt" : "2020-08-12T15:40:26Z",
        "updatedAt" : "2020-09-06T04:24:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "042385ef-c961-408d-abd6-b59d2c86c8df",
        "parentId" : "0da2b8fb-e5dd-4d0c-83d0-5771e3fe2c74",
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "Done.",
        "createdAt" : "2020-08-13T13:53:35Z",
        "updatedAt" : "2020-09-06T04:24:40Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      }
    ],
    "commit" : "49353091097562cd924c1567962833dd3fc2216c",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +4515,4519 @@            )\n        else:\n            _as = idx.argsort()\n            if not ascending:\n                _as = _as[::-1]"
  },
  {
    "id" : "d026621a-7a56-4e1f-9054-077fd74d10ff",
    "prId" : 35991,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35991#pullrequestreview-478217466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eafbee8c-1d2f-422f-ae46-4bbcb35c89c7",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "does Sequence not subsume ArrayLike?",
        "createdAt" : "2020-08-30T15:48:18Z",
        "updatedAt" : "2020-08-30T16:47:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b8d34ab1-0b84-4d58-807e-8fd571ac27ba",
        "parentId" : "eafbee8c-1d2f-422f-ae46-4bbcb35c89c7",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "see https://github.com/pandas-dev/pandas/issues/28770",
        "createdAt" : "2020-08-30T16:36:57Z",
        "updatedAt" : "2020-08-30T16:47:47Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "9439a120525d8e53af37e56bafad16f351c2f41b",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +5531,5535 @@\ndef ensure_index(\n    index_like: Union[AnyArrayLike, Sequence], copy: bool = False\n) -> Index:\n    \"\"\""
  },
  {
    "id" : "c79845fb-0243-4e77-8a9e-1d7a5802bcaa",
    "prId" : 35991,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35991#pullrequestreview-478217271",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92fc74b4-cfef-4e49-93fb-478d08969db7",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "isnt Optional redundant here?",
        "createdAt" : "2020-08-30T15:48:52Z",
        "updatedAt" : "2020-08-30T16:47:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "4c7d3c20-a549-49cb-a117-9f1b6038ef2d",
        "parentId" : "92fc74b4-cfef-4e49-93fb-478d08969db7",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "we've got `no_implicit_optional=True` in out setup.cfg (but I don't know why?)\r\n\r\nit would work, but only since we have Label = Optional[Hashable] to allow `None` to be a Label. Label would be easier to grok if it were Union[Hashable, None] (or if Hashable included None) but for consistency we use Optional.\r\n\r\nHere, for consistency of keyword parameter annotations, don't really want to remove the Optional, even though already accounted for in Label.\r\n\r\nbut I'll change if blocker.\r\n ",
        "createdAt" : "2020-08-30T16:34:26Z",
        "updatedAt" : "2020-08-30T16:47:47Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "9439a120525d8e53af37e56bafad16f351c2f41b",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +4927,4931 @@        self,\n        start: Optional[Label] = None,\n        end: Optional[Label] = None,\n        step: Optional[int] = None,\n        kind: Optional[str_t] = None,"
  },
  {
    "id" : "27af8312-bdbe-4eed-bb1f-fd07b7b55891",
    "prId" : 35991,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35991#pullrequestreview-481168097",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62efbc06-b8f6-4a3b-b476-cf54829970eb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment before this (and in other cases where we use TypeVar like this); also pls confirm that the ref is consistent (e.g. FrameOrSeries is different )",
        "createdAt" : "2020-09-01T23:40:40Z",
        "updatedAt" : "2020-09-01T23:40:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e1ac0fbf-3740-44c9-ae21-f52629d96006",
        "parentId" : "62efbc06-b8f6-4a3b-b476-cf54829970eb",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "TL;DR lmk explictly what you want to name the TypeVar otherwise i'll leave it as is for now pending further discussion.\r\n\r\n---\r\n\r\n> also pls confirm that the ref is consistent\r\n\r\nwe are far from consistent, the use of TypeVar outside of pandas._typing is\r\n\r\n_T = TypeVar(\"_T\", bound=\"NDArrayBackedExtensionArray\") added in #33660\r\n\r\nDatetimeLikeArrayT = TypeVar(\"DatetimeLikeArrayT\", bound=\"DatetimeLikeArrayMixin\") added in #33706\r\n\r\nBaseMaskedArrayT = TypeVar(\"BaseMaskedArrayT\", bound=\"BaseMaskedArray\") added in #31728\r\n\r\n_T = TypeVar(\"_T\", bound=\"BaseExprVisitor\") added in #31365\r\n\r\nScalarResult = TypeVar(\"ScalarResult\")\r\n\r\nOutputFrameOrSeries = TypeVar(\"OutputFrameOrSeries\", bound=NDFrame) added in #33286\r\n\r\n_T = TypeVar(\"_T\", bound=\"DatetimeIndexOpsMixin\") added in #33839\r\n\r\nT = TypeVar(\"T\", bound=\"BlockManager\") added in #32421\r\n\r\nDatetimeScalar = TypeVar(\"DatetimeScalar\", Scalar, datetime)\r\n\r\nand a couple of uses of \r\n_KT = TypeVar(\"_KT\")\r\n_VT = TypeVar(\"_VT\")\r\n\r\nmy preference is `_<classname>T`, i.e. leading underscore followed by the class name passed as the bound argument followed by a uppercase T to indicate TypeVar. (of course where a union is used instead of a bound this allows for more imaginative naming)\r\n\r\nIn pandas._typing, the TypeVars are imported by other modules, so we don't use leading underscores\r\n\r\nsee also https://github.com/numpy/numpy/blob/3fbc84a5662ffd985a071b0bbdcd59e655041ad3/numpy/__init__.pyi for other ideas on naming.\r\n\r\nwe could add `Self` suffix instead of `T` for TypeVars used to preserve return types or we could drop the `T` altogether. so using that naming convention, we would change the `_IndexT` added here to `_IndexSelf` since this TypeVar is used to maintain the return type of `.copy()`\r\n\r\nfor abstract/base classes we could add `SubClass` suffix (so `FrameOrSeries` could be `NDFrameSubClass`)\r\n\r\n> e.g. FrameOrSeries is different\r\n\r\nFrameOrSeries was originally\r\n\r\n`FrameOrSeries = TypeVar(\"FrameOrSeries\", \"Series\", \"DataFrame\")`\r\n\r\nbefore being changed in #28173 to \r\n\r\n`FrameOrSeries = TypeVar(\"FrameOrSeries\", bound=\"NDFrame\")`\r\n\r\n> can you add a comment before this (and in other cases where we use TypeVar like this)\r\n\r\nTypeVar is a fundamental building block[1] of typing and if we are consistent with the naming, additional comments explaining fundamental use of typing shouldn't be necessary.\r\n\r\n[1] from https://www.python.org/dev/peps/pep-0484/\r\n\r\n> Fundamental building blocks:\r\n>\r\n>- Any, used as def get(key: str) -> Any: ...\r\n>- Union, used as Union[Type1, Type2, Type3]\r\n>- Callable, used as Callable[[Arg1Type, Arg2Type], ReturnType]\r\n>- Tuple, used by listing the element types, for example Tuple[int, int, str]. The empty tuple can be typed as Tuple[()]. Arbitrary-length homogeneous tuples can be expressed using one type and ellipsis, for example Tuple[int, ...]. (The ... here are part of the syntax, a literal ellipsis.)\r\n>- TypeVar, used as X = TypeVar('X', Type1, Type2, Type3) or simply Y = TypeVar('Y') (see above for more details)\r\n>- Generic, used to create user-defined generic classes\r\n>- Type, used to annotate class objects\r\n\r\n",
        "createdAt" : "2020-09-02T13:02:44Z",
        "updatedAt" : "2020-09-02T13:02:44Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "a855aab5-b627-4506-b63f-d45cbde841ba",
        "parentId" : "62efbc06-b8f6-4a3b-b476-cf54829970eb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah as long as consistent doesn't matter much, IndexT looks good to me: importable (no leading _), not too crazy",
        "createdAt" : "2020-09-02T18:43:49Z",
        "updatedAt" : "2020-09-02T18:43:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4628e076-b570-461f-b4ea-2650754e4b8a",
        "parentId" : "62efbc06-b8f6-4a3b-b476-cf54829970eb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "obviously can do this in a dedicated PR",
        "createdAt" : "2020-09-02T18:44:06Z",
        "updatedAt" : "2020-09-02T18:44:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9439a120525d8e53af37e56bafad16f351c2f41b",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +191,195 @@\n\n_IndexT = TypeVar(\"_IndexT\", bound=\"Index\")\n\n"
  }
]