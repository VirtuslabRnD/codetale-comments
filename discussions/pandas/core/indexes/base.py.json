[
  {
    "id" : "00fd66ca-9394-4fb7-9c1e-6da9267ef11e",
    "prId" : 16236,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16236#pullrequestreview-57495533",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "can you call this `_append` ? (then it is more in line with `_append_same_dtype`)",
        "createdAt" : "2017-08-21T11:27:14Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "27c477b7-2a66-469d-84a9-8291ad10c246",
        "parentId" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Actually, I think it would make more sense to change ``_append_same_dtype`` to ``_concat_same_dtype`` (also in ``IntervalIndex``, ``DatetimeIndex``, ``CategoryIndex``), since it already disregards ``self`` (it is conceptually a ``@classmethod``). Shall I proceed?",
        "createdAt" : "2017-08-21T12:24:14Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "267b84b5-cf87-4add-851f-a3c5f8686cf3",
        "parentId" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "since it is only use by append, I prefer using append in the name, but no strong feelings",
        "createdAt" : "2017-08-21T12:43:30Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "699094c9-3944-4afb-b46e-614c495300d6",
        "parentId" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "You are right that it's currently used only by append, but usually you expect x.append(y) to concatenate x to y or to elements of y; instead this only concatenates elements of y. So since you don't object I will go with my proposal.",
        "createdAt" : "2017-08-21T12:56:03Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "821e8230-129c-4889-a8af-079f3f1f3c31",
        "parentId" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> instead this only concatenates elements of y\r\n\r\nin the end it *is* used to concatenate both y to x, just that this is passed like that in `append` to this helper function. So it is still only used for append. ",
        "createdAt" : "2017-08-21T12:59:56Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "afa98523-c75c-4740-ac36-0bb84a7bd979",
        "parentId" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "> So it is still only used for append.\r\n\r\nSure, I don't object to that. We can agree it is a concat operation used to implement appending: the switch happens when ``append(self, other)`` does ``to_concat = [self] + list(other)``.",
        "createdAt" : "2017-08-21T13:14:26Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "554ee79709cbb5fdd3e8ef8e3e6553e6fa499cf9",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1744,1748 @@        return self._concat(to_concat, name)\n\n    def _concat(self, to_concat, name):\n\n        typs = _concat.get_dtype_kinds(to_concat)"
  },
  {
    "id" : "2e846aaa-8412-4702-a8a5-e1c023a58d8d",
    "prId" : 17414,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17414#pullrequestreview-60271775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97269772-2ee2-43cc-b312-8c36f88920ca",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "**Not Blocking** : I would really like if we could condense this into one line (doc-string convention), but it's hard to see ATM what to remove from this...",
        "createdAt" : "2017-09-02T07:20:37Z",
        "updatedAt" : "2017-09-02T12:40:07Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "670ef1aa-34d0-4597-b03c-11e17a83870f",
        "parentId" : "97269772-2ee2-43cc-b312-8c36f88920ca",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "I haven't got a better proposal either.",
        "createdAt" : "2017-09-02T08:50:51Z",
        "updatedAt" : "2017-09-02T12:40:07Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc67b9af36090ed45cde7a0b2321db0e9a1d08fe",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2530,2534 @@        \"\"\"\n        Return an Index of values for requested level, equal to the length\n        of the index.\n\n        Parameters"
  },
  {
    "id" : "8040820d-9cfb-43df-b0e1-6f3543dbc1cc",
    "prId" : 17815,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17815#pullrequestreview-68006798",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6257e1c-fc9e-4ea8-ab1b-1f031fdb6a06",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this does not do the same thing as ``.to_series()`` where the values and the index are the same.\r\nis there a reason you are doing this?",
        "createdAt" : "2017-10-08T16:25:22Z",
        "updatedAt" : "2017-10-09T07:38:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4cac53ed-530c-4ec2-b2c6-8c8c7afd5345",
        "parentId" : "c6257e1c-fc9e-4ea8-ab1b-1f031fdb6a06",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> where the values and the index are the same.\r\n\r\nNot sure I get you here.  The implementation I wrote tries to be consistent with what was done with `MultiIndex` by constructing `DataFrame` with data and setting the index if needed.",
        "createdAt" : "2017-10-08T20:48:03Z",
        "updatedAt" : "2017-10-09T07:38:20Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "07ada9aa-11b5-4f12-801f-0fb1df1c2711",
        "parentId" : "c6257e1c-fc9e-4ea8-ab1b-1f031fdb6a06",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok this is reasonable, side issue this is a little suspect:\r\n\r\n```\r\nIn [4]: pd.MultiIndex.from_product([range(3),list('ab')], names=['foo', 'bar']).to_frame()\r\nOut[4]: \r\n        bar  foo\r\nfoo bar         \r\n0   a     a    0\r\n    b     b    0\r\n1   a     a    1\r\n    b     b    1\r\n2   a     a    2\r\n    b     b    2\r\n\r\nIn [5]: pd.MultiIndex.from_product([range(3),list('ab')], names=['foo', 'bar']).to_series()\r\nOut[5]: \r\nfoo  bar\r\n0    a      (0, a)\r\n     b      (0, b)\r\n1    a      (1, a)\r\n     b      (1, b)\r\n2    a      (2, a)\r\n     b      (2, b)\r\ndtype: object\r\n```",
        "createdAt" : "2017-10-09T12:16:09Z",
        "updatedAt" : "2017-10-09T12:16:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "17ba7eb3-6201-4078-b130-86f37ba9f9dc",
        "parentId" : "c6257e1c-fc9e-4ea8-ab1b-1f031fdb6a06",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "What is suspect about it? \r\nThe index seems toe same in both examples?",
        "createdAt" : "2017-10-09T14:46:28Z",
        "updatedAt" : "2017-10-09T14:46:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c0aaec3cc03bdb2f58a993d008ba4d4ed36c8ee",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1022,1026 @@        \"\"\"\n\n        from pandas import DataFrame\n        result = DataFrame(self._shallow_copy(), columns=[self.name or 0])\n"
  },
  {
    "id" : "b85e1a44-9884-4616-959b-21f811a671fd",
    "prId" : 18401,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18401#pullrequestreview-78352393",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46ef4406-8ff5-4582-a041-6e9f18798973",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here (eg. about why we don't convert for uint)",
        "createdAt" : "2017-11-21T11:10:54Z",
        "updatedAt" : "2017-11-23T23:53:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4c4b17bd-3da9-472d-93c4-35825c3f2e03",
        "parentId" : "46ef4406-8ff5-4582-a041-6e9f18798973",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "done",
        "createdAt" : "2017-11-22T07:22:26Z",
        "updatedAt" : "2017-11-23T23:53:58Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0852ecbbc5bfb47bb4cf23fbe32fe0de46eb5e91",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +686,690 @@\n        from .numeric import Int64Index, UInt64Index\n        if not is_unsigned_integer_dtype(dtype):\n            # skip int64 conversion attempt if uint-like dtype is passed, as\n            # this could return Int64Index when UInt64Index is what's desrired"
  },
  {
    "id" : "148f1250-0cc9-455b-9daf-556ae471aa93",
    "prId" : 18677,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18677#pullrequestreview-82453367",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6b33c87-75e0-49ba-992f-f13f40c29ef1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I guess we have an import issue if we import this at the top (with the fully qualified path)?",
        "createdAt" : "2017-12-11T11:02:12Z",
        "updatedAt" : "2017-12-11T11:06:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "60421314618f39a77f5d4a94a4b3f2462118e7fa",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1055,1059 @@    def astype(self, dtype, copy=True):\n        if is_categorical_dtype(dtype):\n            from .category import CategoricalIndex\n            return CategoricalIndex(self.values, name=self.name, dtype=dtype,\n                                    copy=copy)"
  },
  {
    "id" : "99861188-358e-43c8-ae85-be719d0cda57",
    "prId" : 18707,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18707#pullrequestreview-82354099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "014c14f6-5949-48b3-896f-aba802118459",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "instead of this, simply list the kwargs that we accept, ``name=None, index=None`` and pass them thru.",
        "createdAt" : "2017-12-10T15:47:13Z",
        "updatedAt" : "2017-12-10T17:57:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec05208ba2f24cb5c9da5134bbc1e1081f5fb5a3",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1001,1005 @@        Series : dtype will be based on the type of the Index values.\n        \"\"\"\n\n        from pandas import Series\n"
  },
  {
    "id" : "0cffeacd-50d7-45fd-887f-991e2e6c228e",
    "prId" : 19048,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19048#pullrequestreview-86299591",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8aee6135-5ac3-4039-9a76-542d1a2b3caf",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "The `IntervalIndex` changes are more about future proofing; the `dtype` kwarg currently doesn't do anything for `IntervalIndex`, so there aren't really any tests that can be added.  I plan to create a PR to allow conversion between subtypes and initializing with non-inferred subtype (e.g. `interval[int64]` to `interval[float64]`) where I believe the same issue will come into play, so figured I'd put this code in place now while it's fresh on my mind.\r\n\r\nAlso, switched from `IntervalIndex.from_intervals` to the `IntervalIndex` constructor since the constructor does everything `from_intervals` does, but has more features and better testing.  Would eventually like to either remove `from_intervals` or just redirect it to the constructor.",
        "createdAt" : "2018-01-03T05:46:52Z",
        "updatedAt" : "2018-01-03T07:25:34Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4080bc09c3aa685c0d4dc3f40cfa03f6d6b0da10",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +204,208 @@        if is_interval_dtype(data) or is_interval_dtype(dtype):\n            from .interval import IntervalIndex\n            return IntervalIndex(data, dtype=dtype, name=name, copy=copy)\n\n        # index-like"
  }
]