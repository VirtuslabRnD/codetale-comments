[
  {
    "id" : "00fd66ca-9394-4fb7-9c1e-6da9267ef11e",
    "prId" : 16236,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16236#pullrequestreview-57495533",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "can you call this `_append` ? (then it is more in line with `_append_same_dtype`)",
        "createdAt" : "2017-08-21T11:27:14Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "27c477b7-2a66-469d-84a9-8291ad10c246",
        "parentId" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Actually, I think it would make more sense to change ``_append_same_dtype`` to ``_concat_same_dtype`` (also in ``IntervalIndex``, ``DatetimeIndex``, ``CategoryIndex``), since it already disregards ``self`` (it is conceptually a ``@classmethod``). Shall I proceed?",
        "createdAt" : "2017-08-21T12:24:14Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "267b84b5-cf87-4add-851f-a3c5f8686cf3",
        "parentId" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "since it is only use by append, I prefer using append in the name, but no strong feelings",
        "createdAt" : "2017-08-21T12:43:30Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "699094c9-3944-4afb-b46e-614c495300d6",
        "parentId" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "You are right that it's currently used only by append, but usually you expect x.append(y) to concatenate x to y or to elements of y; instead this only concatenates elements of y. So since you don't object I will go with my proposal.",
        "createdAt" : "2017-08-21T12:56:03Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "821e8230-129c-4889-a8af-079f3f1f3c31",
        "parentId" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> instead this only concatenates elements of y\r\n\r\nin the end it *is* used to concatenate both y to x, just that this is passed like that in `append` to this helper function. So it is still only used for append. ",
        "createdAt" : "2017-08-21T12:59:56Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "afa98523-c75c-4740-ac36-0bb84a7bd979",
        "parentId" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "> So it is still only used for append.\r\n\r\nSure, I don't object to that. We can agree it is a concat operation used to implement appending: the switch happens when ``append(self, other)`` does ``to_concat = [self] + list(other)``.",
        "createdAt" : "2017-08-21T13:14:26Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "554ee79709cbb5fdd3e8ef8e3e6553e6fa499cf9",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1744,1748 @@        return self._concat(to_concat, name)\n\n    def _concat(self, to_concat, name):\n\n        typs = _concat.get_dtype_kinds(to_concat)"
  }
]