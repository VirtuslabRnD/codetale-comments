[
  {
    "id" : "00fd66ca-9394-4fb7-9c1e-6da9267ef11e",
    "prId" : 16236,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16236#pullrequestreview-57495533",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "can you call this `_append` ? (then it is more in line with `_append_same_dtype`)",
        "createdAt" : "2017-08-21T11:27:14Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "27c477b7-2a66-469d-84a9-8291ad10c246",
        "parentId" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Actually, I think it would make more sense to change ``_append_same_dtype`` to ``_concat_same_dtype`` (also in ``IntervalIndex``, ``DatetimeIndex``, ``CategoryIndex``), since it already disregards ``self`` (it is conceptually a ``@classmethod``). Shall I proceed?",
        "createdAt" : "2017-08-21T12:24:14Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "267b84b5-cf87-4add-851f-a3c5f8686cf3",
        "parentId" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "since it is only use by append, I prefer using append in the name, but no strong feelings",
        "createdAt" : "2017-08-21T12:43:30Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "699094c9-3944-4afb-b46e-614c495300d6",
        "parentId" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "You are right that it's currently used only by append, but usually you expect x.append(y) to concatenate x to y or to elements of y; instead this only concatenates elements of y. So since you don't object I will go with my proposal.",
        "createdAt" : "2017-08-21T12:56:03Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "821e8230-129c-4889-a8af-079f3f1f3c31",
        "parentId" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> instead this only concatenates elements of y\r\n\r\nin the end it *is* used to concatenate both y to x, just that this is passed like that in `append` to this helper function. So it is still only used for append. ",
        "createdAt" : "2017-08-21T12:59:56Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "afa98523-c75c-4740-ac36-0bb84a7bd979",
        "parentId" : "7112a529-1bd1-48a8-8488-1a44a405e8fe",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "> So it is still only used for append.\r\n\r\nSure, I don't object to that. We can agree it is a concat operation used to implement appending: the switch happens when ``append(self, other)`` does ``to_concat = [self] + list(other)``.",
        "createdAt" : "2017-08-21T13:14:26Z",
        "updatedAt" : "2017-08-21T15:24:01Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "554ee79709cbb5fdd3e8ef8e3e6553e6fa499cf9",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1744,1748 @@        return self._concat(to_concat, name)\n\n    def _concat(self, to_concat, name):\n\n        typs = _concat.get_dtype_kinds(to_concat)"
  },
  {
    "id" : "2e846aaa-8412-4702-a8a5-e1c023a58d8d",
    "prId" : 17414,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17414#pullrequestreview-60271775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97269772-2ee2-43cc-b312-8c36f88920ca",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "**Not Blocking** : I would really like if we could condense this into one line (doc-string convention), but it's hard to see ATM what to remove from this...",
        "createdAt" : "2017-09-02T07:20:37Z",
        "updatedAt" : "2017-09-02T12:40:07Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "670ef1aa-34d0-4597-b03c-11e17a83870f",
        "parentId" : "97269772-2ee2-43cc-b312-8c36f88920ca",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "I haven't got a better proposal either.",
        "createdAt" : "2017-09-02T08:50:51Z",
        "updatedAt" : "2017-09-02T12:40:07Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc67b9af36090ed45cde7a0b2321db0e9a1d08fe",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2530,2534 @@        \"\"\"\n        Return an Index of values for requested level, equal to the length\n        of the index.\n\n        Parameters"
  },
  {
    "id" : "8040820d-9cfb-43df-b0e1-6f3543dbc1cc",
    "prId" : 17815,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17815#pullrequestreview-68006798",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6257e1c-fc9e-4ea8-ab1b-1f031fdb6a06",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this does not do the same thing as ``.to_series()`` where the values and the index are the same.\r\nis there a reason you are doing this?",
        "createdAt" : "2017-10-08T16:25:22Z",
        "updatedAt" : "2017-10-09T07:38:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4cac53ed-530c-4ec2-b2c6-8c8c7afd5345",
        "parentId" : "c6257e1c-fc9e-4ea8-ab1b-1f031fdb6a06",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> where the values and the index are the same.\r\n\r\nNot sure I get you here.  The implementation I wrote tries to be consistent with what was done with `MultiIndex` by constructing `DataFrame` with data and setting the index if needed.",
        "createdAt" : "2017-10-08T20:48:03Z",
        "updatedAt" : "2017-10-09T07:38:20Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "07ada9aa-11b5-4f12-801f-0fb1df1c2711",
        "parentId" : "c6257e1c-fc9e-4ea8-ab1b-1f031fdb6a06",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok this is reasonable, side issue this is a little suspect:\r\n\r\n```\r\nIn [4]: pd.MultiIndex.from_product([range(3),list('ab')], names=['foo', 'bar']).to_frame()\r\nOut[4]: \r\n        bar  foo\r\nfoo bar         \r\n0   a     a    0\r\n    b     b    0\r\n1   a     a    1\r\n    b     b    1\r\n2   a     a    2\r\n    b     b    2\r\n\r\nIn [5]: pd.MultiIndex.from_product([range(3),list('ab')], names=['foo', 'bar']).to_series()\r\nOut[5]: \r\nfoo  bar\r\n0    a      (0, a)\r\n     b      (0, b)\r\n1    a      (1, a)\r\n     b      (1, b)\r\n2    a      (2, a)\r\n     b      (2, b)\r\ndtype: object\r\n```",
        "createdAt" : "2017-10-09T12:16:09Z",
        "updatedAt" : "2017-10-09T12:16:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "17ba7eb3-6201-4078-b130-86f37ba9f9dc",
        "parentId" : "c6257e1c-fc9e-4ea8-ab1b-1f031fdb6a06",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "What is suspect about it? \r\nThe index seems toe same in both examples?",
        "createdAt" : "2017-10-09T14:46:28Z",
        "updatedAt" : "2017-10-09T14:46:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c0aaec3cc03bdb2f58a993d008ba4d4ed36c8ee",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1022,1026 @@        \"\"\"\n\n        from pandas import DataFrame\n        result = DataFrame(self._shallow_copy(), columns=[self.name or 0])\n"
  },
  {
    "id" : "b85e1a44-9884-4616-959b-21f811a671fd",
    "prId" : 18401,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18401#pullrequestreview-78352393",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46ef4406-8ff5-4582-a041-6e9f18798973",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here (eg. about why we don't convert for uint)",
        "createdAt" : "2017-11-21T11:10:54Z",
        "updatedAt" : "2017-11-23T23:53:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4c4b17bd-3da9-472d-93c4-35825c3f2e03",
        "parentId" : "46ef4406-8ff5-4582-a041-6e9f18798973",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "done",
        "createdAt" : "2017-11-22T07:22:26Z",
        "updatedAt" : "2017-11-23T23:53:58Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0852ecbbc5bfb47bb4cf23fbe32fe0de46eb5e91",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +686,690 @@\n        from .numeric import Int64Index, UInt64Index\n        if not is_unsigned_integer_dtype(dtype):\n            # skip int64 conversion attempt if uint-like dtype is passed, as\n            # this could return Int64Index when UInt64Index is what's desrired"
  },
  {
    "id" : "148f1250-0cc9-455b-9daf-556ae471aa93",
    "prId" : 18677,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18677#pullrequestreview-82453367",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6b33c87-75e0-49ba-992f-f13f40c29ef1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I guess we have an import issue if we import this at the top (with the fully qualified path)?",
        "createdAt" : "2017-12-11T11:02:12Z",
        "updatedAt" : "2017-12-11T11:06:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "60421314618f39a77f5d4a94a4b3f2462118e7fa",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1055,1059 @@    def astype(self, dtype, copy=True):\n        if is_categorical_dtype(dtype):\n            from .category import CategoricalIndex\n            return CategoricalIndex(self.values, name=self.name, dtype=dtype,\n                                    copy=copy)"
  },
  {
    "id" : "99861188-358e-43c8-ae85-be719d0cda57",
    "prId" : 18707,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18707#pullrequestreview-82354099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "014c14f6-5949-48b3-896f-aba802118459",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "instead of this, simply list the kwargs that we accept, ``name=None, index=None`` and pass them thru.",
        "createdAt" : "2017-12-10T15:47:13Z",
        "updatedAt" : "2017-12-10T17:57:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec05208ba2f24cb5c9da5134bbc1e1081f5fb5a3",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1001,1005 @@        Series : dtype will be based on the type of the Index values.\n        \"\"\"\n\n        from pandas import Series\n"
  },
  {
    "id" : "0cffeacd-50d7-45fd-887f-991e2e6c228e",
    "prId" : 19048,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19048#pullrequestreview-86299591",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8aee6135-5ac3-4039-9a76-542d1a2b3caf",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "The `IntervalIndex` changes are more about future proofing; the `dtype` kwarg currently doesn't do anything for `IntervalIndex`, so there aren't really any tests that can be added.  I plan to create a PR to allow conversion between subtypes and initializing with non-inferred subtype (e.g. `interval[int64]` to `interval[float64]`) where I believe the same issue will come into play, so figured I'd put this code in place now while it's fresh on my mind.\r\n\r\nAlso, switched from `IntervalIndex.from_intervals` to the `IntervalIndex` constructor since the constructor does everything `from_intervals` does, but has more features and better testing.  Would eventually like to either remove `from_intervals` or just redirect it to the constructor.",
        "createdAt" : "2018-01-03T05:46:52Z",
        "updatedAt" : "2018-01-03T07:25:34Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4080bc09c3aa685c0d4dc3f40cfa03f6d6b0da10",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +204,208 @@        if is_interval_dtype(data) or is_interval_dtype(dtype):\n            from .interval import IntervalIndex\n            return IntervalIndex(data, dtype=dtype, name=name, copy=copy)\n\n        # index-like"
  },
  {
    "id" : "038b8971-beec-4d0e-b8cb-2f52e1ee1fc6",
    "prId" : 19333,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19333#pullrequestreview-90349927",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78c7d413-ae21-48cf-b389-b4e689509cbe",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't this be left alone, and rather define this in ``TimedeltaIndex``?",
        "createdAt" : "2018-01-21T22:13:33Z",
        "updatedAt" : "2018-02-21T15:43:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "06e067c3-6cc7-453a-966b-e5bfa7192f59",
        "parentId" : "78c7d413-ae21-48cf-b389-b4e689509cbe",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This for for numeric-dtyped indexes.  e.g. `pd.Index(range(3)) * pd.Timedelta(days=1)` goes through this path.",
        "createdAt" : "2018-01-21T22:31:37Z",
        "updatedAt" : "2018-02-21T15:43:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3de841d4-92e4-4828-8dc1-9eb7ac2ec000",
        "parentId" : "78c7d413-ae21-48cf-b389-b4e689509cbe",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why doesn't this just raise NotImplementedError? which then Timedelta would handle? or is that too recursive a path?",
        "createdAt" : "2018-01-21T22:43:55Z",
        "updatedAt" : "2018-02-21T15:43:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "eddcaec1-6179-46d7-8ab6-94f8bfd31739",
        "parentId" : "78c7d413-ae21-48cf-b389-b4e689509cbe",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "For one thing b/c there’s pytimedelta and timedelta64 that need to be handled.",
        "createdAt" : "2018-01-21T23:49:37Z",
        "updatedAt" : "2018-02-21T15:43:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e3dec40cc79bc49a61c2227939c6eb63e0a9f94",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +3919,3923 @@\n    def _evaluate_with_timedelta_like(self, other, op, opstr, reversed=False):\n        # Timedelta knows how to operate with np.array, so dispatch to that\n        # operation and then wrap the results\n        other = Timedelta(other)"
  },
  {
    "id" : "4afde6a5-b933-41a3-b230-80b35c4de1e6",
    "prId" : 19333,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19333#pullrequestreview-96829006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "614e4db4-5fb1-4e42-a804-9e792e4bae8a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some comments (or expand the top ones), this code does a lot",
        "createdAt" : "2018-02-15T12:28:05Z",
        "updatedAt" : "2018-02-21T15:43:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e3dec40cc79bc49a61c2227939c6eb63e0a9f94",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +3927,3931 @@\n        with np.errstate(all='ignore'):\n            result = op(values, other)\n\n        attrs = self._get_attributes_dict()"
  },
  {
    "id" : "075bf521-7099-4f65-af14-7d3783987942",
    "prId" : 19520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19520#pullrequestreview-97817962",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5fd807b-20c5-4ce0-9ea6-c0795e43c821",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is_array_like *might* work here",
        "createdAt" : "2018-02-20T13:30:38Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5562b99d55062b2bb0a5b359bd5375adb3a46e",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +2584,2588 @@        # use this, e.g. DatetimeIndex\n        s = getattr(series, '_values', None)\n        if isinstance(s, (ExtensionArray, Index)) and is_scalar(key):\n            try:\n                return s[key]"
  },
  {
    "id" : "c7adbaae-7ea0-42be-8c87-0dc53e15de47",
    "prId" : 19522,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19522#pullrequestreview-94308247",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cadda7c-79c5-41d6-b422-7723f08f9e1f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "consider moving this function to core/ops (and parameterizing so you can use it for index/series)",
        "createdAt" : "2018-02-06T11:22:14Z",
        "updatedAt" : "2018-02-06T18:39:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "85d501c3f084291c3eeaa9e09065a3329f446316",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +81,85 @@\n\ndef _make_invalid_op(name):\n    \"\"\"\n    Return a binary method that always raises a TypeError."
  },
  {
    "id" : "7b4fe476-1296-4bce-88b3-dbbf79b9732f",
    "prId" : 19558,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19558#pullrequestreview-95985447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cd37860-ac7b-440b-ba7f-4da060eaf1d1",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "For the `_values`, shouldn't this be `PeriodIndex` for now? Similar as for DatetimeTZ now has DTI[tz], and so in the future it would become PeriodArray. \r\n\r\n(but not sure where this is currently actually used)",
        "createdAt" : "2018-02-11T16:25:10Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "690bfa2f-8f4c-42d8-aa1b-6a1920688176",
        "parentId" : "5cd37860-ac7b-440b-ba7f-4da060eaf1d1",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "No I don't think so, since `Series[Period]._values` returns an ndarray of objects. `Series[datetime-with-TZ]._values` is the only special one, and I'm only changing `Index._values` to match `Series._values` for now.",
        "createdAt" : "2018-02-11T20:22:24Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "8dea9a71-b44f-46c6-be4f-617bb1cc924e",
        "parentId" : "5cd37860-ac7b-440b-ba7f-4da060eaf1d1",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, but that is because we don't have a PeriodBlock that is backed by a PeriodIndex, as is the case for DatetimeTZ, so at the moment you cannot really have Period values in a series. \r\nI am not saying that this should be the case now, only that I think it might be more logical. But, it might well be that we then first need to add a working \"PeriodBlock\" (ExtensionBlock backed by PeriodIndex/PeriodArray) to have this work.",
        "createdAt" : "2018-02-11T20:26:00Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "df0fed42-d8ef-46d7-95f7-9a9bdd93a368",
        "parentId" : "5cd37860-ac7b-440b-ba7f-4da060eaf1d1",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'm confused what your proposing / saying then. Is it just that `._values` being a `PeriodIndex` would be more consistent with `._values` returning a `DatetimeIndex`?\r\n\r\nWhat we have now \"works\", but is internally inconsistent. I'm updating `Index._values` to be consistent with `Series._values`, and changing uses of `.values` / `._values` / `._ndarray_values` to be the correct one for that use.",
        "createdAt" : "2018-02-11T20:39:16Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "053d8185-965c-4920-b398-41115e05901f",
        "parentId" : "5cd37860-ac7b-440b-ba7f-4da060eaf1d1",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> Is it just that ._values being a PeriodIndex would be more consistent with ._values returning a DatetimeIndex?\r\n\r\nYes. So regardless of what `._values` currently does or doesn't return for Index/Series. Just from looking at your table, returning `PeriodIndex` would make more sense IMO, as this is (at this moment) the closest thing to an array-like that preserves the information. \r\nBut, I don't know what implication it would have for Series ops that `._values` would start returning a PeriodIndex instead of object array of Periods, so it was really just a question, not a request for change.",
        "createdAt" : "2018-02-11T20:50:27Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "085b7cd5-8ada-4dd5-864f-21b05b67d146",
        "parentId" : "5cd37860-ac7b-440b-ba7f-4da060eaf1d1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in theory these *should* return an ``Index`` type for ``._values`` for PI and II, and it might work, but would be disruptive w/o a Block type to hold it. This is why for example we have the ``is_period_arraylike`` methods to detect an array of Periods. The holder ATM is a ndarray[object].",
        "createdAt" : "2018-02-12T23:59:48Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3af8a21ea0e13ba5fc73db464f6e327552c71b0e",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +621,625 @@        index             | values          | _values      | _ndarray_values |\n        ----------------- | --------------- | ------------ | --------------- |\n        PeriodIndex       | ndarray[object] | ndarray[obj] | ndarray[int]    |\n        IntervalIndex     | ndarray[object] | ndarray[obj] | ndarray[object] |\n"
  },
  {
    "id" : "934f4a14-12a4-43a5-a696-56c8af5af687",
    "prId" : 19849,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19849#pullrequestreview-99492100",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e58ff47-f4c9-44a5-ac2b-69c894f1b1bf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think might be able to dispense with this entirely, and just *always* do\r\n\r\n```\r\nfrom pandas.core.ops import get_op_result_name\r\n\r\n....\r\n\r\nreturn self._shallow_copy(name=get_op_result_name(self, other))\r\n```",
        "createdAt" : "2018-02-24T16:27:42Z",
        "updatedAt" : "2018-11-06T13:10:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2e907df5-7f84-4950-804b-56437ef5b793",
        "parentId" : "0e58ff47-f4c9-44a5-ac2b-69c894f1b1bf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do this in ``_wrap_setup_result``",
        "createdAt" : "2018-02-24T16:28:10Z",
        "updatedAt" : "2018-11-06T13:10:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b0b4ffae-694b-4f3a-b678-2cd835e70f8b",
        "parentId" : "0e58ff47-f4c9-44a5-ac2b-69c894f1b1bf",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "So if I eliminate `self.get_setop_name_object` and use `_wrap_setop_result`, other tests fail, because those tests assume the corner cases return the same object.  ",
        "createdAt" : "2018-02-26T22:25:18Z",
        "updatedAt" : "2018-11-06T13:10:47Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa7311ad48b2af262f403db824836bf87f126ffd",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +2753,2757 @@        \"\"\"\n        name = get_op_result_name(self, other)\n        if self.name != name:\n            return self._shallow_copy(name=name)\n        return self"
  },
  {
    "id" : "87cdda1a-d0ad-4a9b-87a7-d8a76238e01c",
    "prId" : 19849,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19849#pullrequestreview-136249666",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e189545-7e51-4212-9bf9-fa5e42e55400",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Would shallowcopy work here? Constructor isn’t used very often in the indexes.",
        "createdAt" : "2018-07-11T04:12:44Z",
        "updatedAt" : "2018-11-06T13:10:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9fdf29e6-3b8a-47ab-993e-5929ce24591e",
        "parentId" : "0e189545-7e51-4212-9bf9-fa5e42e55400",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "@jbrockmendel  repeating (part of) reply from a few months ago:\r\n> the issue comes down to whether we use `self._shallow_copy()` to return the result of set operations. When I tried using `self._shallow_copy()` in `Index._wrap_setop_result()`, and looked at what was happening, then `CategoricalIndex` was the problem. So it was easier to leave the existing implementation of `Index._wrap_setop_result`. If we were to handle #10186, then I could experiment more with changing the implementation of `Index._wrap_setop_result`.",
        "createdAt" : "2018-07-11T13:55:27Z",
        "updatedAt" : "2018-11-06T13:10:47Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa7311ad48b2af262f403db824836bf87f126ffd",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +2851,2855 @@\n    def _wrap_setop_result(self, other, result):\n        return self._constructor(result, name=get_op_result_name(self, other))\n\n    def intersection(self, other):"
  },
  {
    "id" : "8d916190-9db0-4de7-a4ec-a08518129542",
    "prId" : 19985,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19985#pullrequestreview-102282282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "835a7341-92b5-48aa-986b-9ece66f8e583",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "There is still some discussion on whether we want to document `args` and `kwargs`, but I think we should. If they are ignored, I think it'd be useful for users (and also developers) to know it, and why they are present. If they are being sent to numpy, that's also something worth mentioning.",
        "createdAt" : "2018-03-05T11:29:14Z",
        "updatedAt" : "2018-03-09T02:22:20Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "8f8264aa-a42e-4159-801f-36412807ac7a",
        "parentId" : "835a7341-92b5-48aa-986b-9ece66f8e583",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "these are for numpy compat (only a small set of methods are like this). see the validate_repeat below.",
        "createdAt" : "2018-03-05T11:42:31Z",
        "updatedAt" : "2018-03-09T02:22:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "72f9ed30-af66-46d5-8fe7-5796c24e902c",
        "parentId" : "835a7341-92b5-48aa-986b-9ece66f8e583",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In this case the `*kwargs` are not ignored, but you get an informative error message if you try to pass any additional keyword (also in case of the numpy ones like `axis`). So therefore I would personally not document them.",
        "createdAt" : "2018-03-05T13:47:54Z",
        "updatedAt" : "2018-03-09T02:22:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7849ab82-172c-4b83-b77a-16ad592521a0",
        "parentId" : "835a7341-92b5-48aa-986b-9ece66f8e583",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would agree that mentioned **kwargs are for numpy compat is not a bad idea",
        "createdAt" : "2018-03-08T11:48:29Z",
        "updatedAt" : "2018-03-09T02:22:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "68af3bc3-d001-40c8-a0c7-f45a4eedeadf",
        "parentId" : "835a7341-92b5-48aa-986b-9ece66f8e583",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I thought it was only for the nice error message, but indeed it is also accepting (not raising) the argument when it is the default value (in this case `axis=None`). \r\nIn that case, it's fine for me as well to actually document this",
        "createdAt" : "2018-03-08T12:30:13Z",
        "updatedAt" : "2018-03-09T02:22:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "84869696d87891cb673398a67419d940da27aad7",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +705,709 @@        ----------\n        repeats : int\n            The number of repetitions for each element.\n        **kwargs\n            Additional keywords have no effect but might be accepted for"
  },
  {
    "id" : "8e37eb47-603e-4212-9b98-c270acb6b387",
    "prId" : 19985,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19985#pullrequestreview-102521803",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9eb76043-4cd5-4cb9-9033-a6edc4c2e6c3",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "May be we could have the `is_unique` methods? Just an idea, not sure if it's so related...",
        "createdAt" : "2018-03-09T01:37:37Z",
        "updatedAt" : "2018-03-09T02:22:20Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "84869696d87891cb673398a67419d940da27aad7",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +718,722 @@        --------\n        Series.repeat : Equivalent function for Series\n        numpy.repeat : Underlying implementation\n\n        Examples"
  },
  {
    "id" : "246b4357-6cd7-4127-a811-d1f9a41ff806",
    "prId" : 20028,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20028#pullrequestreview-103770695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cd893bf-e2b6-4978-af2f-b9bc28657741",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you don't need a deprecated tag on the ``_summary`` methods",
        "createdAt" : "2018-03-14T10:57:38Z",
        "updatedAt" : "2018-03-15T23:45:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ccb33cb0878b5312a4e3ea8f3daf3fe69bb844a1",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1388,1392 @@    def _summary(self, name=None):\n        \"\"\"\n        Return a summarized representation\n\n        Parameters"
  },
  {
    "id" : "042776e4-a894-4a8f-b678-f65a9d2a94b6",
    "prId" : 20028,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20028#pullrequestreview-103770695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0f217f4-ed2d-4ed0-94c1-8fe5d5815e85",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a Parameters & Returns section",
        "createdAt" : "2018-03-14T10:57:50Z",
        "updatedAt" : "2018-03-15T23:45:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ccb33cb0878b5312a4e3ea8f3daf3fe69bb844a1",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1419,1423 @@    def summary(self, name=None):\n        \"\"\"\n        Return a summarized representation\n        .. deprecated:: 0.23.0\n        \"\"\""
  },
  {
    "id" : "7c41eacc-2e49-4e81-a3f0-b8ad630d4daa",
    "prId" : 20114,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20114#pullrequestreview-102854221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b41ac5ad-8f80-4977-ac3b-b9fadae3d127",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "can you update see also here as well?",
        "createdAt" : "2018-03-10T15:33:05Z",
        "updatedAt" : "2018-03-10T15:39:06Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a1f3cf66-0859-41d0-a729-0510d696e899",
        "parentId" : "b41ac5ad-8f80-4977-ac3b-b9fadae3d127",
        "authorId" : "2716051c-3e5a-4f07-ac76-1aa18bafe5f3",
        "body" : "adjusted in 8763f33",
        "createdAt" : "2018-03-10T15:39:28Z",
        "updatedAt" : "2018-03-10T15:39:28Z",
        "lastEditedBy" : "2716051c-3e5a-4f07-ac76-1aa18bafe5f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "8763f332d1ca312cd4685fc9507b34061642da2b",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +4035,4039 @@        See Also\n        --------\n        Series.drop_duplicates : equivalent method on Series\n        DataFrame.drop_duplicates : equivalent method on DataFrame\n        Index.duplicated : related method on Index, indicating duplicate"
  },
  {
    "id" : "45f91433-a834-4c59-9033-29ddc56b9049",
    "prId" : 20117,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20117#pullrequestreview-102853504",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3adf4eb-1e55-47ec-b986-bd31676ee90c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you coordinate text with #20114, seems some slight differences",
        "createdAt" : "2018-03-10T14:57:36Z",
        "updatedAt" : "2018-03-14T15:00:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6a7f2d1b-4e25-4e09-a5c8-c934fe5df71b",
        "parentId" : "e3adf4eb-1e55-47ec-b986-bd31676ee90c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Looks like they are in the zone together already :-) \r\n(they are sitting close to me: we removed the extended summary in the other PR as Tom asked, or are there other differences?)",
        "createdAt" : "2018-03-10T15:02:55Z",
        "updatedAt" : "2018-03-14T15:00:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2e94c007-a63c-4b5b-aefc-a3620a1255fd",
        "parentId" : "e3adf4eb-1e55-47ec-b986-bd31676ee90c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "great, seemed likely.",
        "createdAt" : "2018-03-10T15:09:55Z",
        "updatedAt" : "2018-03-14T15:00:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e02eda665e82e456c1181e218997e3ec04ef141e",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +4330,4334 @@        Indicate duplicate index values.\n\n        Duplicated values are indicated as ``True`` values in the resulting\n        array. Either all duplicates, all except the first, or all except the\n        last occurrence of duplicates can be indicated."
  },
  {
    "id" : "40ccfac6-77f9-49a8-90de-0a843e1c9e33",
    "prId" : 20123,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20123#pullrequestreview-102853984",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a80a9698-f50c-4f3b-9d97-264dd311b3fa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you show a datetimeindex example (with has a NaT)",
        "createdAt" : "2018-03-10T15:33:13Z",
        "updatedAt" : "2018-03-12T21:16:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "195421e1fd1cace5ea50d8cc11001df540d78b18",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +2060,2064 @@        value.\n\n        >>> idx = pd.Index(['black', '', 'red', None])\n        >>> idx\n        Index(['black', '', 'red', None], dtype='object')"
  },
  {
    "id" : "f44f5711-6690-4972-a543-d449855030d2",
    "prId" : 20168,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20168#pullrequestreview-102857131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e26c858a-ef04-46fe-9bb3-347c29bba4bf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pandas.Series.all",
        "createdAt" : "2018-03-10T17:22:07Z",
        "updatedAt" : "2018-03-13T20:55:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "23c2c3d7c4ff3dce7e62c83f65113c6890b319ca",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +4349,4353 @@        See Also\n        --------\n        pandas.Index.all : Return whether all elements are True.\n        pandas.Series.all : Return whether all elements are True.\n"
  },
  {
    "id" : "27c2858e-6b49-4933-a38c-b9097eeab782",
    "prId" : 20223,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20223#pullrequestreview-103102667",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ca59fec-4c80-43db-896a-d5b13b3f06b8",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This note is not really clear to me. What do you want to explain? \r\nYou already show above that the return value in case of DatetimeIndex is different.",
        "createdAt" : "2018-03-12T08:28:56Z",
        "updatedAt" : "2018-03-12T08:29:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2829c638-35bc-492d-b003-dde3b755a6b7",
        "parentId" : "6ca59fec-4c80-43db-896a-d5b13b3f06b8",
        "authorId" : "9d486cfc-f35c-4891-b6bf-1949b6c42450",
        "body" : "Basically, I wanted to explain why get_duplicates return a DatetimeIndex instead of a list when dates are used.\r\n\r\nWhen dates are passed to the Index class, the DatetimeIndexOpsMixin.get_duplicates function is used. This function calls the Index.get_duplicates and converts the results to DatetimeIndex.\r\n\r\nI did not want to get into such details, since I could not mention private classes in the docstring.\r\n\r\nShould I get into even less detail? I was wondering whether the following note is enough:\r\n\"In case of datetime-like indexes, DatetimeIndex is returned instead of a list.\"",
        "createdAt" : "2018-03-12T09:23:19Z",
        "updatedAt" : "2018-03-12T09:23:20Z",
        "lastEditedBy" : "9d486cfc-f35c-4891-b6bf-1949b6c42450",
        "tags" : [
        ]
      },
      {
        "id" : "aad5814e-cc6a-4cc9-abdd-bd30ca43619b",
        "parentId" : "6ca59fec-4c80-43db-896a-d5b13b3f06b8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK, I understand. What is important to the user is what is returned, and you already show in the examples that for DatetimeIndex a DatetimeIndex and not a list is returned. \r\nThe fact that this internally is implemented by overwriting that method in DatetimeIndex is not really important for users, so I would then just remove this comment.\r\n\r\nFeel free to open a PR for it!",
        "createdAt" : "2018-03-12T15:50:51Z",
        "updatedAt" : "2018-03-12T15:50:51Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "c818a22417c4d43f55b934caa8ba011ba814b9d5",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +1762,1766 @@        -----\n        In case of datetime-like indexes, the function is overridden where the\n        result is converted to DatetimeIndex.\n        \"\"\"\n        from collections import defaultdict"
  },
  {
    "id" : "faff70bc-3329-43ad-a2fc-842873fbd80e",
    "prId" : 20356,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20356#pullrequestreview-162915392",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e21c96d1-0eb3-43c9-bd6f-05247415bd12",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "comment as to what case this is",
        "createdAt" : "2018-03-15T10:33:14Z",
        "updatedAt" : "2018-11-14T21:41:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "23e06dfa-5504-49ed-970d-ffd5c9d77681",
        "parentId" : "e21c96d1-0eb3-43c9-bd6f-05247415bd12",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Looks like you can do `flip_order = self_is_mi`?",
        "createdAt" : "2018-10-09T14:27:50Z",
        "updatedAt" : "2018-11-14T21:41:23Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b5d0aa0ac44701f87bd991f8d943247f2c3f2b3",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +4003,4007 @@        # Case where only one index is multi\n        # make the indices into mi's that match\n        flip_order = False\n        if self_is_mi:\n            self, other = other, self"
  },
  {
    "id" : "8ab39966-5f7b-4f96-9570-738c4fcdad81",
    "prId" : 20356,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20356#pullrequestreview-162306255",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76a66385-e611-4cd3-a5a1-fcff4b64c043",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment or 2 here to indicate what is going on",
        "createdAt" : "2018-10-07T21:53:04Z",
        "updatedAt" : "2018-11-14T21:41:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b5d0aa0ac44701f87bd991f8d943247f2c3f2b3",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +3977,3981 @@            # Join left and right\n            # Join on same leveled multi-index frames is supported\n            join_idx, lidx, ridx = self_jnlevels.join(other_jnlevels, how,\n                                                      return_indexers=True)\n"
  },
  {
    "id" : "016ed060-90d9-4c71-bd30-97ea4688772f",
    "prId" : 20356,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20356#pullrequestreview-162915392",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9439a3ff-e04d-4f13-be93-15f77139c44c",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Why is the first one special? Maybe a longer variable name would clarify this. If not, a comment would be appreciated.",
        "createdAt" : "2018-10-09T14:26:48Z",
        "updatedAt" : "2018-11-14T21:41:23Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "5b169572-72d2-4804-8ad6-720a903bd1eb",
        "parentId" : "9439a3ff-e04d-4f13-be93-15f77139c44c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "(Understood that this existing code, so feel free to ignore these comments).",
        "createdAt" : "2018-10-09T14:29:27Z",
        "updatedAt" : "2018-11-14T21:41:23Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b5d0aa0ac44701f87bd991f8d943247f2c3f2b3",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +3999,4003 @@            return multi_join_idx, lidx, ridx\n\n        jl = list(overlap)[0]\n\n        # Case where only one index is multi"
  },
  {
    "id" : "77baa186-065d-432b-9e94-ae8faa459aaf",
    "prId" : 20548,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20548#pullrequestreview-114179184",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44846579-2279-4040-83aa-5859b2c1664b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you also add a mention on ``set_names`` itself that the names must be hashable (and examples if you want)",
        "createdAt" : "2018-04-21T18:02:55Z",
        "updatedAt" : "2018-04-22T14:48:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "97a2b06c305f70ffd0c1e4fcbce4169d1f54ccf9",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1313,1317 @@\n    def _set_names(self, values, level=None):\n        \"\"\"\n        Set new names on index. Each name has to be a hashable type.\n"
  },
  {
    "id" : "a82814af-b469-43ba-bc1d-4ead566ae00e",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-109412132",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fade4cac-e789-4fea-a3ff-7dc515a0c948",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is so `Index(intervals, dtype=object)` works correctly (Index, not IntervalIndex)",
        "createdAt" : "2018-04-04T16:52:44Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +274,278 @@        # interval\n        if ((is_interval_dtype(data) or is_interval_dtype(dtype)) and\n                not is_object_dtype(dtype)):\n            from .interval import IntervalIndex\n            closed = kwargs.get('closed', None)"
  },
  {
    "id" : "f0978a2b-a89d-43d4-b8df-c174aedbbb8f",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-135623884",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d677e09-c5f9-45f8-a6a8-30126996b833",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this hit in the tests?",
        "createdAt" : "2018-04-14T14:08:37Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "be2388ac-bced-420f-ad04-0b67eeab4bc8",
        "parentId" : "5d677e09-c5f9-45f8-a6a8-30126996b833",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "added a test for this that will appear in my next commit",
        "createdAt" : "2018-07-09T23:02:45Z",
        "updatedAt" : "2018-07-13T01:00:54Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +273,277 @@\n        # interval\n        if ((is_interval_dtype(data) or is_interval_dtype(dtype)) and\n                not is_object_dtype(dtype)):\n            from .interval import IntervalIndex"
  },
  {
    "id" : "35d4519c-b5ea-4fb5-a431-0f3b9eb0d875",
    "prId" : 20721,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20721#pullrequestreview-114781012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3c3e6ab-aaac-4ead-8cdc-e3686d93f3a7",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback This special case is because we sometimes construct DatetimeIndex objects where the `_data` attribute still is a DatetimeIndex in itself. \r\nTo me this seems like something we should not do? (it doesn't hurt, but there is also no reason to have it I think, so better always store the ndarray to be consistent?)\r\n\r\n",
        "createdAt" : "2018-04-24T13:13:59Z",
        "updatedAt" : "2018-04-24T13:13:59Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "420c4d89-890f-4890-ac61-f482c6e68449",
        "parentId" : "c3c3e6ab-aaac-4ead-8cdc-e3686d93f3a7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we should never do that\r\nhow did this come up?",
        "createdAt" : "2018-04-24T13:19:24Z",
        "updatedAt" : "2018-04-24T13:19:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "94715734-0a70-4f8e-bcc3-726aaf215312",
        "parentId" : "c3c3e6ab-aaac-4ead-8cdc-e3686d93f3a7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Just opened an issue about it: https://github.com/pandas-dev/pandas/issues/20810 \r\nIt came up from fixing the warnings in the tests. The above case, where `orig` is not always a ndarray (hence my special case `if` statement), triggered it, because `orig` always comes from a `_data` attribute, and so I expected it to always be a ndarray.",
        "createdAt" : "2018-04-24T13:28:13Z",
        "updatedAt" : "2018-04-24T13:28:13Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "feb7caf297a7867d344576eee352b34f34f429a9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +551,555 @@            if not isinstance(orig, np.ndarray):\n                # orig is a DatetimeIndex\n                orig = orig.values\n            orig = orig if orig.base is None else orig.base\n            new = self._data if self._data.base is None else self._data.base"
  },
  {
    "id" : "2c673607-29cf-4573-b695-966358fc095e",
    "prId" : 20770,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20770#pullrequestreview-115775561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79ab6164-d56a-4aad-b3f6-857adf251e13",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I *think* this covers generators as well?",
        "createdAt" : "2018-04-26T20:26:59Z",
        "updatedAt" : "2018-05-01T11:03:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bfb2db17-5844-430b-a828-e3935ef8f845",
        "parentId" : "79ab6164-d56a-4aad-b3f6-857adf251e13",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "sure",
        "createdAt" : "2018-04-26T22:56:53Z",
        "updatedAt" : "2018-05-01T11:03:09Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "c62973b28b29f2884f27d335b0b93c0440928b82",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +4882,4886 @@        return Index(index_like, name=index_like.name, copy=copy)\n\n    if is_iterator(index_like):\n        index_like = list(index_like)\n"
  }
]