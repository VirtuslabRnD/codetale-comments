[
  {
    "id" : "021ae96a-3291-4596-9432-5fa843f484b8",
    "prId" : 17482,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17482#pullrequestreview-62425572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cfa633c7-29b3-4770-afea-917ba27f35e0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "much cleaner, nice!",
        "createdAt" : "2017-09-13T12:53:24Z",
        "updatedAt" : "2017-09-14T05:33:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6cc86053ed1cdfaaaa0b5b23be259f087acc54e",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +1139,1143 @@        raise ValueError(msg.format(end=end))\n\n    if is_float(periods):\n        periods = int(periods)\n    elif not is_integer(periods) and periods is not None:"
  },
  {
    "id" : "4dc28e3b-2f96-46ba-9bb2-ddcaa81ac45f",
    "prId" : 17482,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17482#pullrequestreview-62643417",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbffd073-80a9-4b30-91b9-b7f6d5d37c44",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this what we do elsewhere? this is effectively floored not that this is bad, just wondering if its consistent",
        "createdAt" : "2017-09-13T12:54:19Z",
        "updatedAt" : "2017-09-14T05:33:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8a602d97-2dc4-4e07-b0fc-e92e4f3e33b4",
        "parentId" : "bbffd073-80a9-4b30-91b9-b7f6d5d37c44",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "It's floored elsewhere too, e.g. https://github.com/pandas-dev/pandas/blob/f11bbf2f505d81900cc83ce387a6a1b1d2a2f866/pandas/core/indexes/period.py#L199-L200\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/fa557f7391589f351b1260f46b3b3db22492f50b/pandas/core/indexes/datetimes.py#L292-L293\r\n",
        "createdAt" : "2017-09-14T05:33:53Z",
        "updatedAt" : "2017-09-14T05:33:54Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6cc86053ed1cdfaaaa0b5b23be259f087acc54e",
    "line" : 175,
    "diffHunk" : "@@ -1,1 +1161,1165 @@    if is_number(endpoint):\n        if periods is None:\n            periods = int((end - start) // freq)\n\n        if start is None:"
  },
  {
    "id" : "97e88e6c-dd90-4084-b211-9d789180ce77",
    "prId" : 17563,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17563#pullrequestreview-63329260",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17aa3829-48c8-4fff-9b9c-725717e4fced",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "We are discussing to change this behaviour, but the above is still correct on master. However, I would change the example to already add `get_loc(Interval(..))` cases (the case we intent to keep working, the scalar numerical value might raise in the future). So that way we can just remove those case that will not be valid anymore, but keep the exact match for actual Interval objects examples.",
        "createdAt" : "2017-09-18T11:23:47Z",
        "updatedAt" : "2017-09-20T14:58:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b0161d6c-791a-4db6-bb62-967faae16959",
        "parentId" : "17aa3829-48c8-4fff-9b9c-725717e4fced",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Added an interval example",
        "createdAt" : "2017-09-18T12:08:09Z",
        "updatedAt" : "2017-09-20T14:58:10Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "28c9c89e8ea1232070519dca2adf2b6b78f5ec1f",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +723,727 @@        >>> overlapping_index = pd.IntervalIndex.from_intervals([i2, i3])\n        >>> overlapping_index.get_loc(1.5)\n        array([0, 1], dtype=int64)\n        \"\"\"\n        self._check_method(method)"
  },
  {
    "id" : "c51ec7ed-7403-4693-b6b5-42bb99c97d58",
    "prId" : 18202,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18202#pullrequestreview-75990417",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51a8f2ea-03c5-4dd6-92e0-20bd3a42bc3c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this right?",
        "createdAt" : "2017-11-13T03:16:03Z",
        "updatedAt" : "2017-11-15T15:22:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f60ca122-d665-47d5-89ac-c2f5afc53bcd",
        "parentId" : "51a8f2ea-03c5-4dd6-92e0-20bd3a42bc3c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah, if it's just the attribute name the attribute docstring is filled in. But currently that's buggy because `@cache_readonly` doesn't copy of the docstring.",
        "createdAt" : "2017-11-13T03:21:27Z",
        "updatedAt" : "2017-11-15T15:22:18Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "34834fae25bd7ea1eb6a364c9d2c841e0837eb38",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +122,126 @@    copy : boolean, default False\n        Copy the meta-data\n    mid\n    values\n    is_non_overlapping_monotonic"
  },
  {
    "id" : "741d2114-e0d8-4b73-a4cb-0a432f1d2f32",
    "prId" : 18300,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18300#pullrequestreview-76988448",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26000461-0cf4-40c3-bb72-fa9f2760f73d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes u need to use a nan compat with left iow this could be a NaT",
        "createdAt" : "2017-11-15T07:24:36Z",
        "updatedAt" : "2017-11-25T04:05:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bf80b462-dbce-43b9-8d5b-068d5d21ce45",
        "parentId" : "26000461-0cf4-40c3-bb72-fa9f2760f73d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i think we have a left.na_value iirc (might be spelled differently)",
        "createdAt" : "2017-11-15T07:26:51Z",
        "updatedAt" : "2017-11-25T04:05:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4cf27e39-b266-468d-860f-66986ba142fa",
        "parentId" : "26000461-0cf4-40c3-bb72-fa9f2760f73d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "or maybe the underlying already handles this in the insert",
        "createdAt" : "2017-11-15T07:27:34Z",
        "updatedAt" : "2017-11-25T04:05:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "027e772f-2701-45ae-b66d-49b500a7a1e1",
        "parentId" : "26000461-0cf4-40c3-bb72-fa9f2760f73d",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Updated.  Procedure I'm following is \"check if any type of NA value is passed -> raise if the wrong type of NA is passed\".  I suppose I could just bypass this and only check if the right type of NA is passed, if that would be preferred.",
        "createdAt" : "2017-11-16T01:42:50Z",
        "updatedAt" : "2017-11-25T04:05:28Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e40103261b31126da621a899a248706e608fd206",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1010,1014 @@        elif is_scalar(item) and isna(item):\n            # GH 18295\n            left_insert = right_insert = item\n        else:\n            raise ValueError('can only insert Interval objects and NA into '"
  },
  {
    "id" : "f8c2cb4e-aa19-408c-be47-24e4a03a67d1",
    "prId" : 19231,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19231#pullrequestreview-88694964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8abf883d-3263-4269-ba94-5d421974be4c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you could do:`` not is_dtype(equal(dtype, self.dtype)``",
        "createdAt" : "2018-01-13T21:50:09Z",
        "updatedAt" : "2018-01-13T21:54:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6f25314d-30a0-41b9-a58d-c2c0edc680d3",
        "parentId" : "8abf883d-3263-4269-ba94-5d421974be4c",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "I think this needs to be a bit more specific than `not is_dtype_equal`; what this is really looking for is an `IntervalDtype` with a different subtype than the existing dtype.  Just having `not is_dtype_equal` would allow non-interval dtypes to pass through as well.\r\n\r\nI could make the \"different subtype\" part more explicit with `and not is_dtype_equal(dtype.subtype, self.dtype.subtype)`.  Though this would be a partial dupe of the `IntervalDtype.__eq__` logic.  Could also just add a comment noting the \"different subtype\" part, if that would be preferable.",
        "createdAt" : "2018-01-14T19:32:43Z",
        "updatedAt" : "2018-01-14T19:32:44Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "75a2d925-95a4-4f51-b7d8-7dc48a55a0b8",
        "parentId" : "8abf883d-3263-4269-ba94-5d421974be4c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I c, this is ok then. these are guaranteed to be II types and thus they are comparable",
        "createdAt" : "2018-01-14T21:26:27Z",
        "updatedAt" : "2018-01-14T21:26:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8caf9f2e1e87327941920c1d676e3ef3fe3c31f9",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +702,706 @@    def astype(self, dtype, copy=True):\n        dtype = pandas_dtype(dtype)\n        if is_interval_dtype(dtype) and dtype != self.dtype:\n            try:\n                new_left = self.left.astype(dtype.subtype)"
  },
  {
    "id" : "8839c4b3-661b-46ac-af08-59cb6f5120c8",
    "prId" : 19339,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19339#pullrequestreview-90687269",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10571540-0299-4935-8009-61ed87d37713",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a version added ",
        "createdAt" : "2018-01-22T11:25:05Z",
        "updatedAt" : "2018-01-24T08:01:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "09914af1-a737-42c8-ad3d-3285a3132d52",
        "parentId" : "10571540-0299-4935-8009-61ed87d37713",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "done",
        "createdAt" : "2018-01-23T01:48:02Z",
        "updatedAt" : "2018-01-24T08:01:34Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "da2eac2a022c044677b537a903acfa9fc532717a",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +154,158 @@        Copy the meta-data\n    dtype : dtype or None, default None\n        If None, dtype will be inferred\n\n        ..versionadded:: 0.23.0"
  },
  {
    "id" : "87cc8b86-58ef-4ea9-8156-29846e36d6fd",
    "prId" : 19339,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19339#pullrequestreview-90687320",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f7a5bae-4052-445c-a465-b6b9d2ed58d3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "vesionadded",
        "createdAt" : "2018-01-22T11:26:35Z",
        "updatedAt" : "2018-01-24T08:01:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6e99f6a8-bf97-4858-ace7-18b6b39a2294",
        "parentId" : "2f7a5bae-4052-445c-a465-b6b9d2ed58d3",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "done",
        "createdAt" : "2018-01-23T01:48:23Z",
        "updatedAt" : "2018-01-24T08:01:34Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "da2eac2a022c044677b537a903acfa9fc532717a",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +431,435 @@            copy the data\n        dtype : dtype or None, default None\n            If None, dtype will be inferred\n\n            ..versionadded:: 0.23.0"
  },
  {
    "id" : "a34463b1-17de-4d23-ae9a-6af33003623a",
    "prId" : 19339,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19339#pullrequestreview-90687344",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbff361d-4176-4881-bf2d-889cdd27915c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2018-01-22T11:26:42Z",
        "updatedAt" : "2018-01-24T08:01:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ef5052d7-99a6-424b-b094-ca3b9e3d4bc5",
        "parentId" : "dbff361d-4176-4881-bf2d-889cdd27915c",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "done",
        "createdAt" : "2018-01-23T01:48:33Z",
        "updatedAt" : "2018-01-24T08:01:34Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "da2eac2a022c044677b537a903acfa9fc532717a",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +475,479 @@            copy the data\n        dtype : dtype or None, default None\n            If None, dtype will be inferred\n\n            ..versionadded:: 0.23.0"
  },
  {
    "id" : "92e599cf-6d63-4682-a6dc-3bac1dbb0d5e",
    "prId" : 19339,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19339#pullrequestreview-90687399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fbed1b99-fcb2-43ea-820f-e162566cb8a3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2018-01-22T11:27:05Z",
        "updatedAt" : "2018-01-24T08:01:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "46a45ffe-d6b7-4c5a-ae03-bd97a6296e0f",
        "parentId" : "fbed1b99-fcb2-43ea-820f-e162566cb8a3",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "done",
        "createdAt" : "2018-01-23T01:48:55Z",
        "updatedAt" : "2018-01-24T08:01:34Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "da2eac2a022c044677b537a903acfa9fc532717a",
    "line" : 197,
    "diffHunk" : "@@ -1,1 +569,573 @@            by-default copy the data, this is compat only and ignored\n        dtype : dtype or None, default None\n            If None, dtype will be inferred\n\n            ..versionadded:: 0.23.0"
  },
  {
    "id" : "a4a9f3fc-5542-44c6-9548-fec7cd444c1c",
    "prId" : 19339,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19339#pullrequestreview-91089369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b58a5111-658e-41bf-be4c-b76d89226c9b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a 1-liner here, noting that this must be an interval dtype",
        "createdAt" : "2018-01-23T11:38:28Z",
        "updatedAt" : "2018-01-24T08:01:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5cd7dde6-7e51-414a-b905-ba7d93903a05",
        "parentId" : "b58a5111-658e-41bf-be4c-b76d89226c9b",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "done",
        "createdAt" : "2018-01-24T08:02:10Z",
        "updatedAt" : "2018-01-24T08:02:11Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "da2eac2a022c044677b537a903acfa9fc532717a",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +260,264 @@        right = _ensure_index(right, copy=copy)\n\n        if dtype is not None:\n            # GH 19262: dtype must be an IntervalDtype to override inferred\n            dtype = pandas_dtype(dtype)"
  },
  {
    "id" : "4b880591-0eac-43bc-bd47-be8d5db7e7cd",
    "prId" : 19339,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19339#pullrequestreview-91089401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0b6228f-a05b-4401-895e-7432be25d1a5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a 1-liner here showing the format of th expected input (list-of-tuples)",
        "createdAt" : "2018-01-23T11:39:21Z",
        "updatedAt" : "2018-01-24T08:01:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "99ba1d62-36c1-466c-9661-51bb6114ea18",
        "parentId" : "f0b6228f-a05b-4401-895e-7432be25d1a5",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "done",
        "createdAt" : "2018-01-24T08:02:18Z",
        "updatedAt" : "2018-01-24T08:02:18Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "da2eac2a022c044677b537a903acfa9fc532717a",
    "line" : 256,
    "diffHunk" : "@@ -1,1 +596,600 @@                lhs = rhs = np.nan\n            else:\n                try:\n                    # need list of length 2 tuples, e.g. [(0, 1), (1, 2), ...]\n                    lhs, rhs = d"
  },
  {
    "id" : "cab6e361-7e50-4d76-9294-c53f08a03650",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-109455981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51f02088-c966-4313-bbea-abf9694ddede",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "note: This was missing a `,` at the end of the first line.\r\n\r\n```python\r\nIn [2]: pd.IntervalIndex.from_breaks([1, 2])\r\nOut[2]:\r\nIntervalIndex([(1, 2]]  # <-- missing comma\r\n              closed='right',\r\n              dtype='interval[int64]')\r\n```",
        "createdAt" : "2018-04-04T18:53:48Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 929,
    "diffHunk" : "@@ -1,1 +944,948 @@                summary = '[{tail}]'.format(tail=', '.join(tail))\n\n        return summary + ',' + self._format_space()\n\n    def _format_attrs(self):"
  },
  {
    "id" : "437d440d-b984-4a85-bb30-f9d18dd7824b",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-109505123",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b3bd3ef-bf2c-4768-b0a5-ecbb9d2b2f2e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This could in principle be moved to the base Index class (same for shape, itemsize, dtype, ..)",
        "createdAt" : "2018-04-04T21:31:11Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 747,
    "diffHunk" : "@@ -1,1 +361,365 @@    def size(self):\n        # Avoid materializing ndarray[Interval]\n        return self._data.size\n\n    @property"
  },
  {
    "id" : "89331ca0-cfc7-4393-86f2-32dc76280dc7",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-109863318",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64f14db4-2ce2-4f0e-b08d-58647afddd70",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so you are copying then constructing again???",
        "createdAt" : "2018-04-05T15:50:26Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f8a1e4ad-dc8c-47fd-b2cd-151117a6c087",
        "parentId" : "64f14db4-2ce2-4f0e-b08d-58647afddd70",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Left & right are shallow copied just like before, and `_simple_new` is called just like before. Unless I made a mistake (which I don't think I did), this is identical to before.",
        "createdAt" : "2018-04-05T20:22:03Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 331,
    "diffHunk" : "@@ -1,1 +183,187 @@    @Appender(_index_shared_docs['_shallow_copy'])\n    def _shallow_copy(self, left=None, right=None, **kwargs):\n        result = self._data._shallow_copy(left=left, right=right)\n        attributes = self._get_attributes_dict()\n        attributes.update(kwargs)"
  },
  {
    "id" : "538caed8-b996-48d4-ae1f-55082d0d77b2",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-109864753",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d77c160d-0960-4d19-8c03-3adbabd8181e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this needed? its a very odd thing to have generally for non-scalar based ndarray like things (meaning for float64 this makes perfect sense but fro composed things much less so)",
        "createdAt" : "2018-04-05T15:51:55Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "68ebaf25-2489-4cf8-9aa9-8dad1e43c77c",
        "parentId" : "d77c160d-0960-4d19-8c03-3adbabd8181e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> its a very odd thing to have generally for non-scalar based ndarray like things\r\n\r\nA bit strange, yeah, since there are two representations: left & right arrays, or an array of Interval objects.\r\n\r\nAnyway, on master this inherited from IndexOpsMixin, which reports the `ndarray[Interval]` version.\r\nThis is inconsistent with `Categorical`, which reports the itemsize of the codes. I'd also prefer that it's consistent with `nbytes`, which (should) report the memory used by the ExtensionArray, not the array of objects.",
        "createdAt" : "2018-04-05T20:26:34Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 756,
    "diffHunk" : "@@ -1,1 +368,372 @@        return self._data.shape\n\n    @property\n    def itemsize(self):\n        # Avoid materializing ndarray[Interval]"
  },
  {
    "id" : "b0abfdc9-2611-4adb-b6c2-dda39565f44a",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-112208496",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e12b56cb-2f0d-41a7-a874-795ec2981ec5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "prob can consolidate this with base Index (why is closed passed?)",
        "createdAt" : "2018-04-14T14:09:56Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 249,
    "diffHunk" : "@@ -1,1 +163,167 @@\n    @classmethod\n    def _simple_new(cls, array, name, closed=None):\n        \"\"\"\n        Construct from an IntervalArray"
  },
  {
    "id" : "f3bd3105-2844-4ec1-b2c7-221630867276",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-112208496",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4830b6be-0b5b-46b9-997d-6f9149b73e9a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this looks like the higher level (in base) maybe can just remove",
        "createdAt" : "2018-04-14T14:11:48Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 917,
    "diffHunk" : "@@ -1,1 +881,885 @@    def take(self, indices, axis=0, allow_fill=True,\n             fill_value=None, **kwargs):\n        result = self._data.take(indices, axis=axis, allow_fill=allow_fill,\n                                 fill_value=fill_value, **kwargs)\n        attributes = self._get_attributes_dict()"
  },
  {
    "id" : "e753614d-2cc7-4fa8-9a69-0560df1d99b8",
    "prId" : 20946,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20946#pullrequestreview-117783567",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d828f4a3-37a5-44cd-896c-f3630362bea4",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Reorganized here to be alphabetical.",
        "createdAt" : "2018-05-04T22:22:25Z",
        "updatedAt" : "2018-05-04T22:22:25Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c82ef3791cebe6576433b65f2e3067ef29fde12",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +175,179 @@    from_tuples\n    get_indexer\n    get_loc\n\n    Examples"
  },
  {
    "id" : "e6466793-167e-48dc-b73c-2afe0fdf445a",
    "prId" : 22811,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22811#pullrequestreview-166764490",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f0f4da1-db98-4955-b41a-cb6cf98c038f",
        "parentId" : null,
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "This is a bit awkward at the moment because ``difference`` is the only set operation with the ``sort`` parameter. But if we add a ``sort`` parameter to the other set operations I think we can get rid of the ``if`` statement",
        "createdAt" : "2018-10-20T22:25:22Z",
        "updatedAt" : "2018-11-18T22:59:13Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "13a23f7558ccde3710e8786320c28e4d271a7ca9",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1050,1054 @@\n            if op_name == 'difference':\n                result = getattr(self._multiindex, op_name)(other._multiindex,\n                                                            sort)\n            else:"
  },
  {
    "id" : "6f6bbd7b-311b-4d00-8f93-f6423669567f",
    "prId" : 23327,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23327#pullrequestreview-168239378",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2108b0c3-53a6-4830-afb7-30a9e1687ee4",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Specifically, without this change a datetime-like `IntervalIndex` with `closed='both'` containing two or more instances of `NaT` would be marked as overlapping due to the `NaT`'s.\r\n\r\nSince `NaT` is converted to -9223372036854775808 during i8 conversion, the `IntervalTree` previously interpreted this as an `Interval` of length zero (same start/end), which would include the point in the `closed='both'` case.  So, if two of these occurred they would be interpreted as overlapping at a point.\r\n\r\nI've added a relevant `_maybe_convert_i8` test for this behavior.",
        "createdAt" : "2018-10-25T07:26:58Z",
        "updatedAt" : "2018-11-27T03:13:06Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd6349286c2832fc54b33fb928051045f7d79973",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +630,634 @@                # convert NaT from it's i8 value to np.nan so it's not viewed\n                # as a valid value, maybe causing errors (e.g. is_overlapping)\n                key_i8 = key_i8.where(~key._isnan)\n\n        # ensure consistency with IntervalIndex subtype"
  },
  {
    "id" : "ece8a01f-ef0f-425b-a1b3-1b0f0d4b99b7",
    "prId" : 23538,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23538#pullrequestreview-189199697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d99f0a2-4637-4869-815c-7225312fd655",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what is this all about?",
        "createdAt" : "2019-01-02T00:05:48Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "99cae714-0af6-4c08-ba63-5733b0b1511e",
        "parentId" : "4d99f0a2-4637-4869-815c-7225312fd655",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "Since interval indexes don't inherit their set operation behavior from the parent Index class this enforces that incompatible types are treated as object dtype unions. This was reviewed by @jschendel who also made a couple suggestions about it.",
        "createdAt" : "2019-01-02T02:37:07Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      },
      {
        "id" : "9b8eced0-8a8e-4df0-8fde-00c7d6cae9d4",
        "parentId" : "4d99f0a2-4637-4869-815c-7225312fd655",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, its the op_name stuff that is a bit fishy to me, cc @jschendel ",
        "createdAt" : "2019-01-02T02:44:42Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4f1718db-35ea-4552-ab0c-3ad7e9bb077b",
        "parentId" : "4d99f0a2-4637-4869-815c-7225312fd655",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Agreed that it's a bit fishy and kind of gross.  In part this is because we just have a single function that's trying to patch all of the set ops, so I don't find it particularly surprising that we're finding the need to special case things as more corner cases are discovered, especially since we're relying on non-interval specific implementations of the set ops.\r\n\r\nReally, I'd like for these to have interval specific implementations, as I think that'd clean things up a bit, though probably out of scope here.  Right now things are done in a bit a round about way, as the set ops are done via IntervalIndex-->tuples-->MultiIndex-->SetOp or IntervalIndex-->Index[object]-->SetOp, which is certainly not optimal in terms of performance, and can be a bit lossy in terms of metadata.\r\n\r\nGiven that these could use custom implementations, I'm not too concerned about the code getting a little gross.  Certainly would want to curtail it as much as possible though.  Would more so want to make sure the tests are clear and extensive so that the necessary guardrails are in place when writing the custom implementations.",
        "createdAt" : "2019-01-03T21:58:42Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b840f49f2f520b4f5676f50029365cdf89bc2209",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1083,1087 @@            other = ensure_index(other)\n            if not isinstance(other, IntervalIndex):\n                result = getattr(self.astype(object), op_name)(other)\n                if op_name in ('difference',):\n                    result = result.astype(self.dtype)"
  },
  {
    "id" : "cd1fa006-45e2-41fd-b257-1a8e13515a9d",
    "prId" : 23591,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23591#pullrequestreview-173436926",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99decef6-4279-44cb-8686-c454b189e185",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "note that we should actually change the default for Index suclasses i think",
        "createdAt" : "2018-11-09T14:38:57Z",
        "updatedAt" : "2018-11-09T14:39:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8f5e90b9a27237cbba6ecfd4e7222d1414732a4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1063,1067 @@\n    @property\n    def is_all_dates(self):\n        \"\"\"\n        This is False even when left/right contain datetime-like objects,"
  },
  {
    "id" : "4d240f85-1567-43ad-a2cc-0a1cac010dc0",
    "prId" : 24134,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24134#pullrequestreview-183318290",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1b6e166-1c1b-4bdb-967d-64321b96ac98",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why do we need this new arg? just change the output tests, which are incorrect",
        "createdAt" : "2018-12-09T14:11:35Z",
        "updatedAt" : "2018-12-10T18:18:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cb282b5e-e270-4827-b78a-aa8da2c0905c",
        "parentId" : "d1b6e166-1c1b-4bdb-967d-64321b96ac98",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "In 0.23.4, we didn't have the leading space for indexes.\r\n\r\n```\r\nIn [2]: df = pd.Series(1, index=pd.IntervalIndex.from_breaks([1, 2, 3, 4])).to_frame()\r\n\r\nIn [3]: df\r\nOut[3]:\r\n        0\r\n(1, 2]  1\r\n(2, 3]  1\r\n(3, 4]  1\r\n```",
        "createdAt" : "2018-12-09T20:47:35Z",
        "updatedAt" : "2018-12-10T18:18:51Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "34239406-f6e4-45f2-8bb4-8573c5151e41",
        "parentId" : "d1b6e166-1c1b-4bdb-967d-64321b96ac98",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "wasn’t this the same issue you recently adjusted for DTi? this keywords just promote inconsistency ",
        "createdAt" : "2018-12-09T23:01:31Z",
        "updatedAt" : "2018-12-10T18:18:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4b623608-98b1-4dd4-8256-51e8c431dbf1",
        "parentId" : "d1b6e166-1c1b-4bdb-967d-64321b96ac98",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "No I don't think so.\r\n\r\nAFAICT, this is happing because `IntervalIndex` and `Series[Interval]` are now both using `GenericArrayFormatter` to format the values. Series need a leading space, but indexes don't. So I think things should be more consistent. If you want I can remove the keyword and go back to the old implementation which just did the formatting on its own, but I suspect you don't want that :)",
        "createdAt" : "2018-12-10T11:51:25Z",
        "updatedAt" : "2018-12-10T18:18:51Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "bfb15f9b-5029-4054-b52b-7f65329dc7ad",
        "parentId" : "d1b6e166-1c1b-4bdb-967d-64321b96ac98",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok i guess",
        "createdAt" : "2018-12-10T17:56:45Z",
        "updatedAt" : "2018-12-10T18:18:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f95ae76ec24f3165f8b56ed33a92849099535e01",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1019,1023 @@        return ExtensionArrayFormatter(values=self,\n                                       na_rep=na_rep,\n                                       justify='all',\n                                       leading_space=False).get_result()\n"
  },
  {
    "id" : "b776bcfa-a814-487f-8584-21242a60769a",
    "prId" : 24521,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24521#pullrequestreview-188532586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a31ce04-4dcb-41fb-9c76-9552b0e19ef2",
        "parentId" : null,
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "Now all the set operations should be implemented for ``MultiIndex`` so I can get rid of the ``if`` statement",
        "createdAt" : "2018-12-31T20:12:32Z",
        "updatedAt" : "2019-01-19T18:22:04Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b15248d3b8169b3fbde53e91fb02ef091e5ee00",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1105,1109 @@                raise TypeError(msg.format(op=op_name))\n\n            result = getattr(self._multiindex, op_name)(other._multiindex,\n                                                        sort=sort)\n            result_name = get_op_result_name(self, other)"
  },
  {
    "id" : "cba18a95-da8d-4206-9f14-7ca86c7817d1",
    "prId" : 25820,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25820#pullrequestreview-228913675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d5127f7-9d08-4b3e-903d-396e78e750ad",
        "parentId" : null,
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "I would prefer checking monotonic_decreasing directly, so:\r\n\r\n```\r\nvalues = [self.right, self.left]\r\nsort_order = np.lexsort(values)\r\nreturn is_monotonic(sort_order, False)[1]\r\n```\r\n\r\n(But adding the properties to  ``IntervalTree`` is even better).\r\n",
        "createdAt" : "2019-04-07T09:03:56Z",
        "updatedAt" : "2019-04-21T13:35:14Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "8cec08ff-2380-439b-8990-6bc252b7e8e7",
        "parentId" : "6d5127f7-9d08-4b3e-903d-396e78e750ad",
        "authorId" : "5d486e53-1409-4c5f-9cac-03c066f838b9",
        "body" : "I have tried in this way. But `is_monotonic(sort_order, False)[1]` returns `False` for stationary IntervalIndex, e.g. `IntervalIndex([(0, 1], (0, 1]],\r\n              closed='right',\r\n              dtype='interval[int64]')`. By definition, `is_monotonic_decreasing` should be `True` for equal values.\r\n\r\n`is_monotonic(sort_order, False)[0]` returns `True` for the stationary IntervalIndex.\r\n\r\n",
        "createdAt" : "2019-04-14T15:27:54Z",
        "updatedAt" : "2019-04-21T13:35:14Z",
        "lastEditedBy" : "5d486e53-1409-4c5f-9cac-03c066f838b9",
        "tags" : [
        ]
      },
      {
        "id" : "a26e72b1-ff90-42e7-b714-11c54cfca871",
        "parentId" : "6d5127f7-9d08-4b3e-903d-396e78e750ad",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "You are right, as lexsort does treats equal values as increasing their index location, so is_monotonic(...)[1] will fail. \r\n\r\nIt would still deliver  efficiency gains from calculating ``is_monotonic_increasing`` and ``unique`` simultaneous using ``is_monotonic`` in ``IntervalTree`` as described above. Would you be up for adding this? Else this PR is good IMO.",
        "createdAt" : "2019-04-15T19:40:22Z",
        "updatedAt" : "2019-04-21T13:35:14Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "03f6076f-130e-4a3b-943b-002ed7df7fd0",
        "parentId" : "6d5127f7-9d08-4b3e-903d-396e78e750ad",
        "authorId" : "5d486e53-1409-4c5f-9cac-03c066f838b9",
        "body" : "When implementing `is_unique` in this way, I got a similar problem. That is, `is_monotonic(sort_order, False)[2]` returns `False` for an IntervalIndex with consecutively identity element, e.g. `IntervalIndex([(0, 1], (0, 1], (2, 3]])` .\r\n\r\n`IntervalIndex.is_unique` is being handled in #25159 ",
        "createdAt" : "2019-04-21T13:45:00Z",
        "updatedAt" : "2019-04-21T13:45:00Z",
        "lastEditedBy" : "5d486e53-1409-4c5f-9cac-03c066f838b9",
        "tags" : [
        ]
      }
    ],
    "commit" : "480b353f10fb1cedf91291dfd6c73bbcb224cb23",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +455,459 @@        decreasing values), else False\n        \"\"\"\n        return self[::-1].is_monotonic_increasing\n\n    @cache_readonly"
  },
  {
    "id" : "f427676a-e984-473f-8370-576fa6db96f2",
    "prId" : 26225,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26225#pullrequestreview-240286910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d103b53-d39d-47e0-936a-512e9c63e872",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does this need a @appender for the doc-string?",
        "createdAt" : "2019-04-28T15:32:04Z",
        "updatedAt" : "2019-06-06T08:09:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "95cd5166-0ed8-41e3-abf8-24db00daa1dc",
        "parentId" : "3d103b53-d39d-47e0-936a-512e9c63e872",
        "authorId" : "5d486e53-1409-4c5f-9cac-03c066f838b9",
        "body" : "the dict `_interval_shared_docs` in `IntervalArray` and the dict `_index_shared_docs` in `Index` don't have the key `intersection`. ",
        "createdAt" : "2019-05-01T14:58:33Z",
        "updatedAt" : "2019-06-06T08:09:42Z",
        "lastEditedBy" : "5d486e53-1409-4c5f-9cac-03c066f838b9",
        "tags" : [
        ]
      },
      {
        "id" : "f4a7162a-ec7a-4308-81a8-ec2db739c532",
        "parentId" : "3d103b53-d39d-47e0-936a-512e9c63e872",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so this would take on Index doc-string. Pls check this; you may need to add it to the shared_docs to have a more customized doc-string.",
        "createdAt" : "2019-05-05T21:48:11Z",
        "updatedAt" : "2019-06-06T08:09:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3f5d9bac-44f2-45e1-9164-d709c75272d6",
        "parentId" : "3d103b53-d39d-47e0-936a-512e9c63e872",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Confirmed that this picks up the Index.intersection. Can customize for IntervalIndex down the road.",
        "createdAt" : "2019-05-21T20:38:36Z",
        "updatedAt" : "2019-06-06T08:09:42Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea2550afb0ddc4b5fb417632fdca654b6e053b5c",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +1141,1145 @@    @Appender(_index_shared_docs['intersection'])\n    @SetopCheck(op_name='intersection')\n    def intersection(self, other, sort=False):\n        if self.left.is_unique and self.right.is_unique:\n            taken = self._intersection_unique(other)"
  },
  {
    "id" : "0235f889-829a-4ac4-bd45-e21db117f258",
    "prId" : 26225,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26225#pullrequestreview-233799223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d11e22a7-35c5-42d4-b975-6a5fb141fded",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you give a doc-string to these functions",
        "createdAt" : "2019-05-05T21:49:11Z",
        "updatedAt" : "2019-06-06T08:09:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea2550afb0ddc4b5fb417632fdca654b6e053b5c",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +1167,1171 @@        taken : IntervalIndex\n        \"\"\"\n        lindexer = self.left.get_indexer(other.left)\n        rindexer = self.right.get_indexer(other.right)\n"
  },
  {
    "id" : "937631d4-9f1c-460a-9fe8-ef31664a26d5",
    "prId" : 26225,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26225#pullrequestreview-241280741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fb89880-9729-4b12-b7f3-2144147b52f7",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "It looks like there are still some bugs.  The example below hits the other `else` path of this block (misread things when making my original comment if you saw it before the edit):\r\n```python\r\nIn [1]: import pandas as pd\r\n\r\nIn [2]: ii1 = pd.IntervalIndex.from_tuples([(0, 3), (0, 2)])\r\n\r\nIn [3]: ii2 = pd.IntervalIndex.from_tuples([(0, 2), (1, 3)])\r\n\r\nIn [4]: ii1\r\nOut[4]: \r\nIntervalIndex([(0, 3], (0, 2]],\r\n              closed='right',\r\n              dtype='interval[int64]')\r\n\r\nIn [5]: ii2\r\nOut[5]: \r\nIntervalIndex([(0, 2], (1, 3]],\r\n              closed='right',\r\n              dtype='interval[int64]')\r\n\r\nIn [6]: ii1.intersection(ii2)\r\nOut[6]: \r\nIntervalIndex([(0, 3], (0, 2]],\r\n              closed='right',\r\n              dtype='interval[int64]')\r\n```",
        "createdAt" : "2019-05-23T15:26:58Z",
        "updatedAt" : "2019-06-06T08:09:42Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea2550afb0ddc4b5fb417632fdca654b6e053b5c",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +1142,1146 @@    @SetopCheck(op_name='intersection')\n    def intersection(self, other, sort=False):\n        if self.left.is_unique and self.right.is_unique:\n            taken = self._intersection_unique(other)\n        else:"
  },
  {
    "id" : "d65a6f3c-76af-4df7-8c68-4bf6750def39",
    "prId" : 26225,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26225#pullrequestreview-242443563",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "daa61d08-26b1-431a-a78b-6ddc52e56394",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add types on the args if straightforward to do so",
        "createdAt" : "2019-05-26T15:21:20Z",
        "updatedAt" : "2019-06-06T08:09:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "485e661f-d186-4eb0-9ea8-6bc025ee0ee2",
        "parentId" : "daa61d08-26b1-431a-a78b-6ddc52e56394",
        "authorId" : "5d486e53-1409-4c5f-9cac-03c066f838b9",
        "body" : "May I add typing in another PR? I have PR about typing before which cannot pass the CI check.",
        "createdAt" : "2019-05-27T03:27:21Z",
        "updatedAt" : "2019-06-06T08:09:42Z",
        "lastEditedBy" : "5d486e53-1409-4c5f-9cac-03c066f838b9",
        "tags" : [
        ]
      },
      {
        "id" : "fd29bb98-4b4b-45a9-9f4a-dc53d25aaec9",
        "parentId" : "daa61d08-26b1-431a-a78b-6ddc52e56394",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "I'm fine with typing being added in another PR",
        "createdAt" : "2019-05-28T04:27:39Z",
        "updatedAt" : "2019-06-06T08:09:42Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea2550afb0ddc4b5fb417632fdca654b6e053b5c",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +1153,1157 @@        return taken\n\n    def _intersection_unique(self, other):\n        \"\"\"\n        Used when the IntervalIndex does not have any common endpoint,"
  },
  {
    "id" : "64354625-01ed-46ba-a372-eb5554765322",
    "prId" : 26225,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26225#pullrequestreview-244680018",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b1a2ad4-4fa3-4abe-93f8-9688dc6eb007",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "There might be an issue with this approach when dupes are present in `self` and `other`.  For other index types, such a scenario can result in more dupes being present in the intersection than in `self`.  This behavior looks a bit buggy and inconsistent though, so I'm not sure if we actually want `IntervalIndex` to be consistent with it.\r\n\r\nSome examples of the buggy and inconsistent behavior with `Index`:\r\n```python\r\nIn [2]: idx2 = pd.Index(list('aa')) \r\n   ...: idx3 = pd.Index(list('aaa')) \r\n   ...: idx3b = pd.Index(list('baaa'))\r\n\r\nIn [3]: idx2.intersection(idx3)\r\nOut[3]: Index(['a', 'a', 'a', 'a'], dtype='object')\r\n\r\nIn [4]: idx3.intersection(idx3)\r\nOut[4]: Index(['a', 'a', 'a'], dtype='object')\r\n\r\nIn [5]: idx2.intersection(idx3)\r\nOut[5]: Index(['a', 'a', 'a', 'a'], dtype='object')\r\n\r\nIn [6]: idx2.intersection(idx3b)\r\nOut[6]: Index(['a', 'a', 'a'], dtype='object')\r\n```\r\nIt seems strange that `[3]` has more dupes present than in either original index but `[4]` does not.  Similarly, it seems like `[5]` and `[6]` should be identical, as the presence of a non-intersecting element shouldn't impact the number of dupes returned.\r\n\r\n@jreback : Do you know what the expected behavior for `intersection` with dupes should be?  Or if there are any dependencies on the behavior of `intersection` that would dictate this?\r\n\r\nIf we treat indexes like multisets, then the intersection should contain the minimum multiplicity of dupes, e.g. `idx2.intersection(idx3)` and `idx3.intersection(idx2)` should both have length 2, so you maintain the property of the intersection being a subset of the original indexes.",
        "createdAt" : "2019-05-30T06:09:54Z",
        "updatedAt" : "2019-06-06T08:09:42Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "4adbe42d-5fe1-4876-a1b5-88d6d45ddb10",
        "parentId" : "5b1a2ad4-4fa3-4abe-93f8-9688dc6eb007",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah this is weird as these are set ops\r\n\r\nwhat happens (meaning how much breakage) if\r\n- raise if left and right are not unique\r\n- uniquify left and right\r\n\r\nprob need to do this for all set ops",
        "createdAt" : "2019-05-30T11:51:44Z",
        "updatedAt" : "2019-06-06T08:09:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "07a67080-b938-4393-b24a-7f6508a4e593",
        "parentId" : "5b1a2ad4-4fa3-4abe-93f8-9688dc6eb007",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Haven't had time to extensively test this out but I made the two changes you suggested in `indexes/base.py` for `intersection` and both resulted in some breakage.  Aside some from breakage in the index set ops tests, there was also some breakage in `tests/reshape/test_merge.py`.",
        "createdAt" : "2019-06-03T04:58:04Z",
        "updatedAt" : "2019-06-06T08:09:42Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea2550afb0ddc4b5fb417632fdca654b6e053b5c",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +1189,1193 @@        taken : IntervalIndex\n        \"\"\"\n        mask = np.zeros(len(self), dtype=bool)\n\n        if self.hasnans and other.hasnans:"
  },
  {
    "id" : "2bc96031-d608-41d1-9300-fc92f8d469c8",
    "prId" : 26391,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26391#pullrequestreview-238375254",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e5b1e01-4811-4592-a6ae-c3f8da4e8461",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "acutally can't you just do this\r\n\r\n```\r\npairs = [(left[idx], right[idx] for idx in checks_idx]\r\nreturn len(set(pairs)) == len(pairs)\r\n```",
        "createdAt" : "2019-05-16T11:55:05Z",
        "updatedAt" : "2019-05-16T11:55:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d6461581-f896-4ebf-ad87-09979c87b25a",
        "parentId" : "0e5b1e01-4811-4592-a6ae-c3f8da4e8461",
        "authorId" : "5d486e53-1409-4c5f-9cac-03c066f838b9",
        "body" : "The present approach may be better in which `False` is returned once a duplicate is found.\r\nTo compare the length, we run over all potential duplicates. \r\n\r\n",
        "createdAt" : "2019-05-16T13:01:05Z",
        "updatedAt" : "2019-05-16T13:01:05Z",
        "lastEditedBy" : "5d486e53-1409-4c5f-9cac-03c066f838b9",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3af9c91232096f37a6dda138511738bcab33e11",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +472,476 @@\n        seen_pairs = set()\n        check_idx = np.where(left.duplicated(keep=False))[0]\n        for idx in check_idx:\n            pair = (left[idx], right[idx])"
  },
  {
    "id" : "c198e557-daaf-44b4-8ba1-63254f882f20",
    "prId" : 26870,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26870#pullrequestreview-250443558",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b20296ab-49cb-4a23-8a19-97a7575cafb6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "typing nitpick, we use single quotes on these annotations, otherwise lgtm. ping on green.\r\n\r\n@WillAyd can we systematically check this?",
        "createdAt" : "2019-06-17T11:41:38Z",
        "updatedAt" : "2019-06-18T14:21:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f485c35d1b656c48e01b87628e73e9d3e5a7838",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1141,1145 @@    @Appender(_index_shared_docs['intersection'])\n    @SetopCheck(op_name='intersection')\n    def intersection(self,\n                     other: 'IntervalIndex',\n                     sort: bool = False"
  },
  {
    "id" : "832a7b3b-c299-4146-a7ea-f6718ba9fa5f",
    "prId" : 27100,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27100#pullrequestreview-255888628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d0d62f1-0e03-4744-863a-cc3b43d11c2a",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Changed this to `InvalidIndexError` for consistency with the base method.",
        "createdAt" : "2019-06-28T17:29:42Z",
        "updatedAt" : "2019-07-02T14:21:36Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6226bdd45d6b0c0ba50b454d7a0993ad29e2e561",
    "line" : 231,
    "diffHunk" : "@@ -1,1 +851,855 @@            msg = ('cannot handle overlapping indices; use '\n                   'IntervalIndex.get_indexer_non_unique')\n            raise InvalidIndexError(msg)\n\n        target = ensure_index(target)"
  },
  {
    "id" : "2c833b73-a245-4aaf-8c95-cdf11610b520",
    "prId" : 27100,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27100#pullrequestreview-256042248",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85bb9fb7-d8b2-4454-a666-b1e8faca0b98",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here on what its doing",
        "createdAt" : "2019-06-28T19:24:29Z",
        "updatedAt" : "2019-07-02T14:21:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f38324ed-5252-4ed7-81e9-d3805915b44b",
        "parentId" : "85bb9fb7-d8b2-4454-a666-b1e8faca0b98",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "done",
        "createdAt" : "2019-06-29T16:08:16Z",
        "updatedAt" : "2019-07-02T14:21:36Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6226bdd45d6b0c0ba50b454d7a0993ad29e2e561",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +808,812 @@        if is_list_like(key):\n            raise KeyError(key)\n\n        if isinstance(key, Interval):\n            if self.closed != key.closed:"
  },
  {
    "id" : "5752ccdd-64f1-467b-b4ce-6f646bedf3f0",
    "prId" : 27100,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27100#pullrequestreview-256042250",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a615007e-970f-4378-a6ed-07c119631991",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a commen here on what you are doing",
        "createdAt" : "2019-06-28T19:25:01Z",
        "updatedAt" : "2019-07-02T14:21:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6870586d-b9f2-4b31-8075-e1bd0180e361",
        "parentId" : "a615007e-970f-4378-a6ed-07c119631991",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "done",
        "createdAt" : "2019-06-29T16:08:20Z",
        "updatedAt" : "2019-07-02T14:21:36Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6226bdd45d6b0c0ba50b454d7a0993ad29e2e561",
    "line" : 190,
    "diffHunk" : "@@ -1,1 +822,826 @@                # scalar is not comparable to II subtype --> invalid label\n                raise KeyError(key)\n\n        matches = mask.sum()\n        if matches == 0:"
  },
  {
    "id" : "8468cea8-e62c-414c-b28f-e9b7f97eea20",
    "prId" : 27100,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27100#pullrequestreview-256042253",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3e6aba4-c129-46ab-80ac-0844c333514c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some comments on the cases",
        "createdAt" : "2019-06-28T19:25:23Z",
        "updatedAt" : "2019-07-02T14:21:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8f40e064-193c-4228-bc52-ba807d062c4b",
        "parentId" : "d3e6aba4-c129-46ab-80ac-0844c333514c",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "done",
        "createdAt" : "2019-06-29T16:08:24Z",
        "updatedAt" : "2019-07-02T14:21:36Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6226bdd45d6b0c0ba50b454d7a0993ad29e2e561",
    "line" : 238,
    "diffHunk" : "@@ -1,1 +855,859 @@        target = ensure_index(target)\n\n        if isinstance(target, IntervalIndex):\n            # equal indexes -> 1:1 positional match\n            if self.equals(target):"
  },
  {
    "id" : "d8afcbc9-6449-4aa3-a0f8-cf73e6558f13",
    "prId" : 27100,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27100#pullrequestreview-256041988",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "befa2721-62f8-44cb-a96c-a132c69f6330",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "blank line above this one",
        "createdAt" : "2019-06-29T16:04:03Z",
        "updatedAt" : "2019-07-02T14:21:36Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "6226bdd45d6b0c0ba50b454d7a0993ad29e2e561",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +799,803 @@        Only exact matches will be returned if an interval is provided.\n\n        >>> index.get_loc(pd.Interval(0, 1))\n        0\n        \"\"\""
  },
  {
    "id" : "6639f4a5-122b-45ac-a628-72fda8515b58",
    "prId" : 27100,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27100#pullrequestreview-256582422",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "741cf327-5472-4e6c-a1df-f1d9b8770205",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe worth it to make a helper method for indexing with an II (as this is the same code as in get_indexer for unique)",
        "createdAt" : "2019-07-01T22:07:32Z",
        "updatedAt" : "2019-07-02T14:21:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6226bdd45d6b0c0ba50b454d7a0993ad29e2e561",
    "line" : 325,
    "diffHunk" : "@@ -1,1 +895,899 @@        target = ensure_index(target)\n\n        # check that target IntervalIndex is compatible\n        if isinstance(target, IntervalIndex):\n            common_subtype = find_common_type(["
  },
  {
    "id" : "00b05d6d-95a8-4b66-b6da-2cf1d5bfeee5",
    "prId" : 27424,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27424#pullrequestreview-264998620",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b894c464-9a16-45ee-a799-8b78c5c510e5",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "if you also make `AnyArrayLike` an Alias instead of a TypeVar, then this module doesn't need to be changed at all.",
        "createdAt" : "2019-07-22T16:24:06Z",
        "updatedAt" : "2019-07-24T15:11:05Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "61accf81-2a5f-4160-a51c-6c18a646a8fd",
        "parentId" : "b894c464-9a16-45ee-a799-8b78c5c510e5",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Same thing though - this just loosens the type checking which isn't desired. Actually moved towards TypeVars for reasons described in https://github.com/pandas-dev/pandas/issues/26453#issuecomment-497025873\r\n\r\nMight update #27050 to include some of that info",
        "createdAt" : "2019-07-22T16:27:12Z",
        "updatedAt" : "2019-07-24T15:11:05Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "39f88253-c404-4129-a826-cbdaab11f9ce",
        "parentId" : "b894c464-9a16-45ee-a799-8b78c5c510e5",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> Actually moved towards TypeVars for reasons described in [#26453 (comment)](https://github.com/pandas-dev/pandas/issues/26453#issuecomment-497025873)\r\n\r\ni don't think that applies here.\r\n\r\n`target` does not need to be a TypeVar, the type of `target` does not need to be maintained.\r\n\r\n`target` can be any of `[\"ExtensionArray\", \"Index\", \"Series\", \"SparseSeries\", np.ndarray]`\r\n\r\n`ensure_index` is not yet typed. but presumably will have a return type of `Index`.\r\n\r\nso reassigning with an `Index` to a variable that has a type of Union of `[\"ExtensionArray\", \"Index\", \"Series\", \"SparseSeries\", np.ndarray]` is perfectly valid.\r\n\r\n",
        "createdAt" : "2019-07-22T17:21:22Z",
        "updatedAt" : "2019-07-24T15:11:05Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "db4603c1-9219-43bf-ac74-fb2bbea1d5d4",
        "parentId" : "b894c464-9a16-45ee-a799-8b78c5c510e5",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "We could add Union alternatives for each TypeVar in the central module but I think that confounds the point of generic programming and/or makes our type system weaker. Another option would be to allow redefinition of variables which mypy supplies a setting for:\r\n\r\nhttps://mypy.readthedocs.io/en/latest/command_line.html?highlight=allow-redefinition#miscellaneous-strictness-flags\r\n\r\nBut I also think that makes for a weaker type system, and generally there's not a lot of downside to creating a separate variable here instead of allowing it's type to implicitly be altered by the return of `ensure_index`",
        "createdAt" : "2019-07-22T17:57:18Z",
        "updatedAt" : "2019-07-24T15:11:05Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f941c4db-b809-43a6-94d7-9ae347b61176",
        "parentId" : "b894c464-9a16-45ee-a799-8b78c5c510e5",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> Another option would be to allow redefinition of variables which mypy supplies a setting for:\r\n> \r\n> https://mypy.readthedocs.io/en/latest/command_line.html?highlight=allow-redefinition#miscellaneous-strictness-flags\r\n> \r\n> But I also think that makes for a weaker type system\r\n\r\ndefinitely. we should rule this out.\r\n\r\n\r\n> generally there's not a lot of downside to creating a separate variable here instead of allowing it's type to implicitly be altered by the return of `ensure_index`\r\n\r\ndisagree. the return type of `ensure_index` would need to conform to the type of `target`.\r\n\r\nis creating new variables not weakening the type system? ",
        "createdAt" : "2019-07-22T19:10:51Z",
        "updatedAt" : "2019-07-24T15:11:05Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e77b75ccc82c64cadb97a357661150ca4ef1e1f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +907,911 @@            raise InvalidIndexError(msg)\n\n        target_as_index = ensure_index(target)\n\n        if isinstance(target_as_index, IntervalIndex):"
  },
  {
    "id" : "1b6feebd-cd31-4356-bd92-643f913f9e56",
    "prId" : 28128,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28128#pullrequestreview-279343625",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "699a7535-3976-4194-bba9-fe7ba9c7f511",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is this required because of inheritance? Not used in function body AFAICT so somewhat odd",
        "createdAt" : "2019-08-25T16:11:40Z",
        "updatedAt" : "2019-08-25T16:11:47Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e9ebb1dd-6bcc-4ca5-8873-171196223893",
        "parentId" : "699a7535-3976-4194-bba9-fe7ba9c7f511",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "yes. subclasses should have the same or additional arguments. not less.",
        "createdAt" : "2019-08-25T16:23:42Z",
        "updatedAt" : "2019-08-25T16:23:42Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fc30bf4b14f80ab49d38d4fa7885fd72bc80d31",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +789,793 @@\n    def get_loc(\n        self, key: Any, method: Optional[str] = None, tolerance=None\n    ) -> Union[int, slice, np.ndarray]:\n        \"\"\""
  },
  {
    "id" : "e15ea74a-381a-45a0-9921-9300c878885f",
    "prId" : 29178,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29178#pullrequestreview-305966002",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69dc721b-8aac-44cf-9ed2-38b6cf8bf7a0",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Was going to suggest annotating `sort` but looks like unused? Maybe delete altogether?\r\n\r\nCan annotate the return here at least as `Callable` would be helpful too (better with subscripting if not too much effort). At first glance I assume `setop` meant that this set some value and wouldn't return anything, but looks not to be the case",
        "createdAt" : "2019-10-23T15:08:38Z",
        "updatedAt" : "2019-10-25T02:03:49Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "633c583a4d14fb56e60a542664ded82cdb0504a4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1341,1345 @@        return self[mask]\n\n    def _setop(op_name: str, sort=None):\n        @SetopCheck(op_name=op_name)\n        def func(self, other, sort=sort):"
  },
  {
    "id" : "3739c4bb-4c2f-44c8-b7d0-cd96b0b3e4a7",
    "prId" : 30390,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30390#pullrequestreview-335620211",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d23f86ff-3250-4426-b507-4781f4f2e124",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "IIRC docstrings that fit on a single line are allowed.  I don't really have an opinion on this, but would much rather see you implement e.g. #28115 (not on the list i suggested previously) than this.",
        "createdAt" : "2019-12-21T18:50:20Z",
        "updatedAt" : "2019-12-21T19:24:40Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "aa9dd6b6-1c49-454b-90e3-8d04c540abf8",
        "parentId" : "d23f86ff-3250-4426-b507-4781f4f2e124",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "Gotta be honest, I have no clue where to start with.\r\nAnd I really appreciate the fact you want me to be more involved, means a lot to me.",
        "createdAt" : "2019-12-21T19:32:42Z",
        "updatedAt" : "2019-12-21T19:32:42Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "227a9821-0718-49e0-bc74-a9bec3ee02a5",
        "parentId" : "d23f86ff-3250-4426-b507-4781f4f2e124",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> Gotta be honest, I have no clue where to start with.\r\n\r\nI suggested #28115 because it is relatively straightforward as a stepping-stone.  You would need to go to the pd.Timestamp class and define a `fromisocalendar` method on it that behaves just like the datetime.datetime version, but returning a Timestamp.",
        "createdAt" : "2019-12-21T19:43:03Z",
        "updatedAt" : "2019-12-21T19:43:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "da687f07-b281-410b-8385-87aeff43f647",
        "parentId" : "d23f86ff-3250-4426-b507-4781f4f2e124",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "@jbrockmendel That's the exact lead I needed. thank you:)",
        "createdAt" : "2019-12-21T19:47:33Z",
        "updatedAt" : "2019-12-21T19:47:33Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      }
    ],
    "commit" : "adb088b5919f9450425c1b1170aa293ea3b0831f",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +524,528 @@        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._data.dtype\n"
  },
  {
    "id" : "05c18444-4f14-4cf2-89f1-d2d27190fce9",
    "prId" : 30574,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30574#pullrequestreview-337280550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6228c96-6ce5-4225-8e60-15bde0f55b41",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "does this need to be set to False in each _simple_new, or can it just use the class-level default?",
        "createdAt" : "2019-12-30T23:12:12Z",
        "updatedAt" : "2019-12-31T12:14:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b287cf1f-8c76-4ffa-bfa9-b33ab43140d7",
        "parentId" : "c6228c96-6ce5-4225-8e60-15bde0f55b41",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "If it’s just on the class, won’t it be shared amongst all instances? I think I should change the type declaration to not have a default. ",
        "createdAt" : "2019-12-31T01:22:28Z",
        "updatedAt" : "2019-12-31T12:14:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b64c5ca4-1809-415e-94b6-6330a209edd1",
        "parentId" : "c6228c96-6ce5-4225-8e60-15bde0f55b41",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> If it’s just on the class, won’t it be shared amongst all instances?\r\n\r\nI think the relevant thing is: when you set `level._no_setting_name = True` in the one place where you do that, will that update the class attribute, and the answer should be no.",
        "createdAt" : "2019-12-31T01:34:00Z",
        "updatedAt" : "2019-12-31T12:14:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d6054524-c230-4bef-a668-6bf34574e1b1",
        "parentId" : "c6228c96-6ce5-4225-8e60-15bde0f55b41",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Yeah, ``level._no_setting_name = True`` adds an instance attribute, so there shouldn't happen anything on the class attribute.",
        "createdAt" : "2019-12-31T01:36:08Z",
        "updatedAt" : "2019-12-31T12:14:27Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "df4762a8990974229666a96313e910d647bab6c9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +235,239 @@        result._data = array\n        result.name = name\n        result._no_setting_name = False\n        result._reset_identity()\n        return result"
  },
  {
    "id" : "0d07de60-9c00-4d8a-ae85-cd9081442ef7",
    "prId" : 30605,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30605#pullrequestreview-337519565",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "878ec7a2-2b15-48c5-a6d5-ca8027a43fbd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same as above, should we also add this attribute as an empty dict in Index?",
        "createdAt" : "2020-01-02T01:01:24Z",
        "updatedAt" : "2020-01-02T01:01:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ebaf4676-fad3-4806-baed-0792924f838d",
        "parentId" : "878ec7a2-2b15-48c5-a6d5-ca8027a43fbd",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "id rather not have a dummy attr on Index, but im building up to implementing ExtensionIndex which will have it",
        "createdAt" : "2020-01-02T01:50:55Z",
        "updatedAt" : "2020-01-02T01:50:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d8a0940b-4736-4203-8735-01bb5c3c78fa",
        "parentId" : "878ec7a2-2b15-48c5-a6d5-ca8027a43fbd",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see my comment below",
        "createdAt" : "2020-01-02T02:39:49Z",
        "updatedAt" : "2020-01-02T02:39:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "322e935e6745ce7ff8ae2b0c060079a2027b7e88",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +215,219 @@    _mask = None\n\n    _raw_inherit = {\"_ndarray_values\", \"__array__\", \"overlaps\", \"contains\"}\n\n    # --------------------------------------------------------------------"
  },
  {
    "id" : "ebeb9a94-008e-4d17-87bc-96fd575a3854",
    "prId" : 30605,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30605#pullrequestreview-337521647",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ecec933-ba3a-4154-8c78-94d0c82d8e88",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "comment.\r\n\r\ncan we not put these methods on Index?",
        "createdAt" : "2020-01-02T01:01:46Z",
        "updatedAt" : "2020-01-02T01:01:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8b56b415-b81b-4708-8177-2ad5e0cb499e",
        "parentId" : "4ecec933-ba3a-4154-8c78-94d0c82d8e88",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "You mean remove them from IntervalIndex?  No idea.  @jschendel?",
        "createdAt" : "2020-01-02T01:48:54Z",
        "updatedAt" : "2020-01-02T01:48:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "36be968d-3594-4e12-96ee-9a1436c5c48b",
        "parentId" : "4ecec933-ba3a-4154-8c78-94d0c82d8e88",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no the delegation methods that you added could be on Index itself.",
        "createdAt" : "2020-01-02T02:39:39Z",
        "updatedAt" : "2020-01-02T02:39:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "014a832a-18d0-46bb-bed8-d8b040e23f0f",
        "parentId" : "4ecec933-ba3a-4154-8c78-94d0c82d8e88",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i see.  yes, the point of this exercise is to build up to moving as much of it to to either ExtensionIndex or even Index as possible.  Doing this on II/CI before refactoring is just to limit the scope.",
        "createdAt" : "2020-01-02T03:01:08Z",
        "updatedAt" : "2020-01-02T03:01:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "02147130-be0a-487e-962b-32f19352d18e",
        "parentId" : "4ecec933-ba3a-4154-8c78-94d0c82d8e88",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "its fine, but then will have to clean later",
        "createdAt" : "2020-01-02T03:02:48Z",
        "updatedAt" : "2020-01-02T03:02:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "322e935e6745ce7ff8ae2b0c060079a2027b7e88",
    "line" : 194,
    "diffHunk" : "@@ -1,1 +1252,1256 @@        method = getattr(self._data, name)\n        res = method(*args, **kwargs)\n        if is_scalar(res) or name in self._raw_inherit:\n            return res\n        return type(self)(res, name=self.name)"
  },
  {
    "id" : "8e40d855-98e5-4e0f-995f-f875eef25ad1",
    "prId" : 30640,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30640#pullrequestreview-338375958",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b7e5597-7807-4eec-805f-759d345dfa8d",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "to be consistent with our other EAs, these need to be dispatched/wrapped the same way they are in datetimelike or categorical.  im planning to move the relevant code to indexes.extension so this can re-use the existing code.\r\n\r\nThe relevant test will be `arr == series` --> Series, `idx == series` --> ndarray[bool]",
        "createdAt" : "2020-01-03T15:16:00Z",
        "updatedAt" : "2020-01-03T15:16:01Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "eeae9992-4c8e-419d-9d79-7d7d9a44f0a9",
        "parentId" : "0b7e5597-7807-4eec-805f-759d345dfa8d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "You should now be able to use indexes.extension.make_wrapped_comparison_op",
        "createdAt" : "2020-01-05T00:49:24Z",
        "updatedAt" : "2020-01-05T00:49:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8237ab072143e49102e829952fc601ab9a46afc",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +233,237 @@        \"contains\",\n        \"__eq__\",\n        \"__ne__\",\n    }\n"
  },
  {
    "id" : "957196ad-fecf-44d2-b814-e1ca7543a2c7",
    "prId" : 31055,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31055#pullrequestreview-343616607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40eadc3d-af5f-49a8-9921-fab67ed692af",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Not super familiar with `_simple_new` but does this not contradict the base class requiring an `ndarray` or subclass thereof? \r\n\r\nI think passing because `ndarray` right now resolves to `Any`, but if that didn't happen I think mypy would reasonably complain about this",
        "createdAt" : "2020-01-15T23:18:32Z",
        "updatedAt" : "2020-01-16T00:53:54Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "2ddb3045-d4fe-401e-a16a-820ca812ec98",
        "parentId" : "40eadc3d-af5f-49a8-9921-fab67ed692af",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "if you're suggesting that i remove the annotation on Index._simple_new, sure",
        "createdAt" : "2020-01-16T00:52:41Z",
        "updatedAt" : "2020-01-16T00:53:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc6a6b4945c8845c2424f982bb1a54b8fd6f000d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +260,264 @@            Ignored.\n        \"\"\"\n        assert isinstance(array, IntervalArray), type(array)\n\n        result = IntervalMixin.__new__(cls)"
  },
  {
    "id" : "5b59da82-c519-4bc5-bd45-56acaeab1f0a",
    "prId" : 31406,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31406#pullrequestreview-351909743",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fbc34297-2b61-4ad8-90b6-765338f5d46f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is ok, but doesn't follow the other patterns of inference, where we use infer_dtype. but for known dtypes this is (sligthly) cheaper.",
        "createdAt" : "2020-01-31T03:31:09Z",
        "updatedAt" : "2020-02-01T23:39:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "25924aac-40e7-469f-afa7-5dc26bde7f26",
        "parentId" : "fbc34297-2b61-4ad8-90b6-765338f5d46f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see holds_integer in the indexes/base.py",
        "createdAt" : "2020-01-31T03:33:08Z",
        "updatedAt" : "2020-02-01T23:39:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "de8b2d24-9935-4a05-9b55-96c1b0464cd6",
        "parentId" : "fbc34297-2b61-4ad8-90b6-765338f5d46f",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Another other option would be to defer to `self.left` or `self.right`, e.g.\r\n```python\r\ndef holds_integer(self):\r\n    return self.left.holds_integer()\r\n```\r\n\r\nThere is a slight difference here, in that `Float64Index` returns `False` for `holds_integer`.  The main difference this would cause is with `at` based indexing.  For example, on this branch we have:\r\n\r\n```python\r\nIn [2]: s_ii = pd.Series(list('abc'), index=pd.interval_range(0.0, periods=3, freq=2))\r\n\r\nIn [3]: s_fi = pd.Series(list('abc'), index=[0.0, 1.0, 2.0])\r\n\r\nIn [4]: s_ii\r\nOut[4]: \r\n(0.0, 2.0]    a\r\n(2.0, 4.0]    b\r\n(4.0, 6.0]    c\r\ndtype: object\r\n\r\nIn [5]: s_fi\r\nOut[5]: \r\n0.0    a\r\n1.0    b\r\n2.0    c\r\ndtype: object\r\n\r\nIn [6]: s_ii.at[1]\r\nOut[6]: 'a'\r\n\r\nIn [7]: s_fi.at[1]\r\n---------------------------------------------------------------------------\r\nValueError: At based indexing on an non-integer index can only have non-integer indexers\r\n```\r\n\r\nDo we want `In [6]` to produce the same `ValueError` as `In [7]`?  Changing `holds_integer` to delegate to `self.left` would achieve this.  I'm not sure what the correct answer here is though, and would be fine with either.",
        "createdAt" : "2020-01-31T03:53:50Z",
        "updatedAt" : "2020-02-01T23:39:03Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "4e6b3898-fd50-49a1-a8e4-7d58b6b59035",
        "parentId" : "fbc34297-2b61-4ad8-90b6-765338f5d46f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@jschendel the Float64Index behavior was changed in #31329 so s_fi.at[1] returns \"b\".  This was done to make .at behavior match .loc behavior.\r\n\r\nDeferring to self.left or self.right seems reasonable, but we may need something other than holds_integer.  Most of the places where it is used are de-facto used like it is here, but that doesn't match the docstring description.",
        "createdAt" : "2020-01-31T16:33:12Z",
        "updatedAt" : "2020-02-01T23:39:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a8d7de54-089c-4917-b689-b2b3294b2f16",
        "parentId" : "fbc34297-2b61-4ad8-90b6-765338f5d46f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this seems fine for now, @jbrockmendel if you can make a note to re-visit later",
        "createdAt" : "2020-02-01T23:19:02Z",
        "updatedAt" : "2020-02-01T23:39:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f38085b7fa4fe016c6b1cdc0b95e392048bfae2",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +525,529 @@\n    def holds_integer(self):\n        return self.dtype.subtype.kind not in [\"m\", \"M\"]\n        # TODO: There must already exist something for this?\n"
  },
  {
    "id" : "07990edb-849d-4260-84a9-8b841ea82623",
    "prId" : 35636,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35636#pullrequestreview-463822759",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f226b70-e495-42ee-abc4-0224f977f54f",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "from #33940\r\n\r\n> Index and Series are consistent when it comes to not being equal with other array-likes:\r\n\r\nnot necessarily in this PR, but is this behaviour consistent with other Index types\r\n\r\n```\r\n>>> x = np.linspace(0, 100, num=3)\r\n>>> x\r\narray([  0.,  50., 100.])\r\n>>>\r\n>>> idx = pd.IntervalIndex.from_breaks(x)\r\n>>> idx\r\nIntervalIndex([(0.0, 50.0], (50.0, 100.0]],\r\n              closed='right',\r\n              dtype='interval[float64]')\r\n>>>\r\n>>> arr = idx.values\r\n>>> arr\r\n<IntervalArray>\r\n[(0.0, 50.0], (50.0, 100.0]]\r\nLength: 2, closed: right, dtype: interval[float64]\r\n>>>\r\n>>> idx.equals(arr)\r\nTrue\r\n>>>\r\n>>> arr.equals(idx)\r\nFalse\r\n>>>\r\n```",
        "createdAt" : "2020-08-08T19:30:42Z",
        "updatedAt" : "2020-08-10T14:18:54Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0e63277f06ef7d19ec89bc7bb69aaf0382c011e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1013,1017 @@            return True\n\n        # if we can coerce to an IntervalIndex then we can compare\n        if not isinstance(other, IntervalIndex):\n            if not is_interval_dtype(other):"
  },
  {
    "id" : "e41237f8-a9d5-470e-9192-4625bbbe28fc",
    "prId" : 35966,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35966#pullrequestreview-483177898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ea1c02a-a75e-49a2-aeee-f1334ced25e8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm what if you do this in the return key_i8 (e.g. inside `infer_dtype_from_scalar`), I *think* we do with for Timestamp/Timedelta?",
        "createdAt" : "2020-09-01T23:43:20Z",
        "updatedAt" : "2020-09-06T22:33:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f98def2d-cb88-4378-bb70-11197b230d22",
        "parentId" : "5ea1c02a-a75e-49a2-aeee-f1334ced25e8",
        "authorId" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "body" : "Yeah, that's how it was before. I didn't realize that we return key_i8 for Timestamp/Timedelta, so thanks for pointing that out.\r\n\r\nIMO, it makes a lot more sense for the `val` returned from `infer_dtype_from_scalar` to be have the dtype of the returned `dtype` (ie returning `Period(2020-01), 'period[M]'` as opposed to `600, 'period[M]'`, since 600 is an int, not 'period[M]'). But I'm willing to do it either way\r\n\r\n",
        "createdAt" : "2020-09-02T14:41:37Z",
        "updatedAt" : "2020-09-06T22:33:09Z",
        "lastEditedBy" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "tags" : [
        ]
      },
      {
        "id" : "772d7b94-bef4-411f-891c-2372c78fc3ab",
        "parentId" : "5ea1c02a-a75e-49a2-aeee-f1334ced25e8",
        "authorId" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "body" : "Despite my opinion above, I think we have two options (using example of `infer_dtype_from_scalar(Period('2020-01'))`):\r\n\r\n1. Returning `val=Period('2020-01')`, in which case we need to convert `key` to `key.ordinal` in this Interval code\r\n2. Returning `val=600`, in which case we'd need to convert the ordinal value back to a Period in the `sanitize_array` function\r\n\r\nWhat would you prefer @jreback? If you prefer 2, how would I convert from an ordinal value back to a Period?",
        "createdAt" : "2020-09-02T14:48:29Z",
        "updatedAt" : "2020-09-06T22:33:09Z",
        "lastEditedBy" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "tags" : [
        ]
      },
      {
        "id" : "70d5d00f-d98e-4978-b3cd-f74f419feea7",
        "parentId" : "5ea1c02a-a75e-49a2-aeee-f1334ced25e8",
        "authorId" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "body" : "@jreback What do you think here?",
        "createdAt" : "2020-09-04T19:45:54Z",
        "updatedAt" : "2020-09-06T22:33:09Z",
        "lastEditedBy" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "tags" : [
        ]
      },
      {
        "id" : "bfee9944-87a6-4e14-875a-339d182b8624",
        "parentId" : "5ea1c02a-a75e-49a2-aeee-f1334ced25e8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes I think restore the code in pandas/core/dtypes/cast.py and remove the added code here and it should just work",
        "createdAt" : "2020-09-04T22:03:47Z",
        "updatedAt" : "2020-09-06T22:33:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "60daf00b-a32e-401c-83be-740b97ae26a9",
        "parentId" : "5ea1c02a-a75e-49a2-aeee-f1334ced25e8",
        "authorId" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "body" : "Doing that would break the [sanitize_array function](https://github.com/pandas-dev/pandas/pull/35966/files#diff-65590f3c100517411c1217385d9c68f6R471) as it is expecting the returned value of `infer_dtype_from_scalar` to be the Period, not the Period.ordinal value.\r\n\r\nBut if, in the `sanitize_array` function, I convert the ordinal value back into a Period then everything should work. This would be essentially the opposite of the logic above:\r\n```python\r\nif lib.is_period(key):\r\n    key = ordinal_to_period(ordinal)\r\n```\r\n\r\n@jreback I'm fine doing this, but idk a way to do that `ordinal_to_period`, do you?",
        "createdAt" : "2020-09-04T23:00:50Z",
        "updatedAt" : "2020-09-06T22:33:09Z",
        "lastEditedBy" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "tags" : [
        ]
      },
      {
        "id" : "92901ed3-ac94-4a7e-bba7-54f75f5d99cf",
        "parentId" : "5ea1c02a-a75e-49a2-aeee-f1334ced25e8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this won't break sanitize_array as it feeds back to construct_1d_arraylike_from_scalar which can take a Period (or *should* be able to).\r\n\r\nwe don't want to convert back and forth.",
        "createdAt" : "2020-09-05T02:55:54Z",
        "updatedAt" : "2020-09-06T22:33:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bafcf398-547b-4738-a8cb-d551c0d50e6e",
        "parentId" : "5ea1c02a-a75e-49a2-aeee-f1334ced25e8",
        "authorId" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "body" : "@jreback do you want me to make this change? If so, how do i convert from ordinal to period?",
        "createdAt" : "2020-09-06T19:53:49Z",
        "updatedAt" : "2020-09-06T22:33:09Z",
        "lastEditedBy" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "tags" : [
        ]
      },
      {
        "id" : "327f2525-b542-42a5-8e57-b8ac3fc4cfa7",
        "parentId" : "5ea1c02a-a75e-49a2-aeee-f1334ced25e8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no we do not want to covert back\nrather it shouldn't convert to ordinal in the first place (which is what the original code was doing)",
        "createdAt" : "2020-09-06T20:40:43Z",
        "updatedAt" : "2020-09-06T22:33:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3ddba7bc-fbd9-402e-a72c-32138c93a486",
        "parentId" : "5ea1c02a-a75e-49a2-aeee-f1334ced25e8",
        "authorId" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "body" : "Correct, the original code in `sanitize_array` called\r\n```python\r\ndtype, value = infer_dtype_from_scalar(value)\r\n```\r\nWhich does not convert a Period to it's ordinal value, but it also would return `dtype=\"object\"` which is the why Period columns would be typed as \"object\" instead of \"Period\". To correct this error, I changed that code to\r\n```python\r\ndtype, value = infer_dtype_from_scalar(value, pandas_dtype=True)\r\n```\r\nWhich does (at least in the original version) convert the Period to it's ordinal value\r\n\r\n@jreback Are you suggesting that `infer_dtype_from_scalar(..., pandas_dtype=True)` shouldn't convert to ordinal in the first place or that I shouldn't add `pandas_dtype=True` in the first place?",
        "createdAt" : "2020-09-06T21:55:52Z",
        "updatedAt" : "2020-09-06T22:33:09Z",
        "lastEditedBy" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "tags" : [
        ]
      },
      {
        "id" : "e03f3f28-0de3-4b23-92a4-b0bfdcf60bbd",
        "parentId" : "5ea1c02a-a75e-49a2-aeee-f1334ced25e8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "> Are you suggesting that infer_dtype_from_scalar(..., pandas_dtype=True) shouldn't convert to ordinal in the first place\n\nyes",
        "createdAt" : "2020-09-06T22:15:00Z",
        "updatedAt" : "2020-09-06T22:33:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dba7c5c5-9611-4b2b-b54d-61744c2487a8",
        "parentId" : "5ea1c02a-a75e-49a2-aeee-f1334ced25e8",
        "authorId" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "body" : "Haha, @jreback I wasn't expecting you to pick that one and made changes in the opposite direction (I will revert though).\r\n\r\nI totally agree that `infer_dtype_from_scalar(..., pandas_dtype=True)` shouldn't convert to ordinal in the first place, but if that's the case, then\r\n```python\r\nif lib.is_period(key):\r\n    key_i8 = key.ordinal\r\n```\r\nin `pandas/core/indexes/interval.py` is still necessary",
        "createdAt" : "2020-09-06T22:23:04Z",
        "updatedAt" : "2020-09-06T22:33:09Z",
        "lastEditedBy" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "tags" : [
        ]
      },
      {
        "id" : "7cb5a71a-bbc3-43db-b966-7995ce416d80",
        "parentId" : "5ea1c02a-a75e-49a2-aeee-f1334ced25e8",
        "authorId" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "body" : "Reverted, are we good then? Or are you still looking for something else in this PR?",
        "createdAt" : "2020-09-06T22:39:52Z",
        "updatedAt" : "2020-09-06T22:39:52Z",
        "lastEditedBy" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "tags" : [
        ]
      }
    ],
    "commit" : "320e8d3ce5baac0d212f3980eba7c429e44cc297",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +614,618 @@            key_dtype, key_i8 = infer_dtype_from_scalar(key, pandas_dtype=True)\n            if lib.is_period(key):\n                key_i8 = key.ordinal\n        else:\n            # DatetimeIndex/TimedeltaIndex"
  },
  {
    "id" : "b828fd68-5e19-49d0-ab1a-00f026721d00",
    "prId" : 36310,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36310#pullrequestreview-501469099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6345bad-b260-48a5-9866-129b8869d160",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "umm, now i am confused, what is different about these?",
        "createdAt" : "2020-09-22T22:10:53Z",
        "updatedAt" : "2020-10-01T16:39:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e7921a10-1355-4133-9dcf-15569e5607f0",
        "parentId" : "f6345bad-b260-48a5-9866-129b8869d160",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "without this, mypy thinks _values is ExtensionArray and has a bunch of new complaints since we access `self._values.left` below",
        "createdAt" : "2020-09-22T22:16:03Z",
        "updatedAt" : "2020-10-01T16:39:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2e47ccc0-ef18-417a-9aa5-566b835d184e",
        "parentId" : "f6345bad-b260-48a5-9866-129b8869d160",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "kk, should try to remove this at some point",
        "createdAt" : "2020-10-02T21:59:05Z",
        "updatedAt" : "2020-10-02T21:59:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "865b3fcc540e96e269509c9ffdc9d7a9fe7e7cce",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +198,202 @@\n    _data: IntervalArray\n    _values: IntervalArray\n\n    # --------------------------------------------------------------------"
  },
  {
    "id" : "052ba7cf-a85e-4fd6-b344-de6df2c69854",
    "prId" : 36310,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36310#pullrequestreview-500530126",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5f1531f-a40c-4b80-8f56-169e716e3562",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is there a reason you use `_values` for left/right, but `_data` for mid/length ?\r\n\r\n(I suppose both are fine, since they are aliases, but should try to be consistent in which one is used here?)",
        "createdAt" : "2020-10-01T07:34:22Z",
        "updatedAt" : "2020-10-01T16:39:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "6860d2c9-3975-416f-ab8c-546bb7293f55",
        "parentId" : "d5f1531f-a40c-4b80-8f56-169e716e3562",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "no, will standardize",
        "createdAt" : "2020-10-01T16:38:37Z",
        "updatedAt" : "2020-10-01T16:39:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "865b3fcc540e96e269509c9ffdc9d7a9fe7e7cce",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +874,878 @@    @cache_readonly\n    def mid(self):\n        return Index(self._data.mid, copy=False)\n\n    @property"
  },
  {
    "id" : "3985e431-2180-4a90-973e-3069278063c0",
    "prId" : 37873,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37873#pullrequestreview-534829031",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "819b33f6-4267-44e1-b59d-787d59ae265e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this user faing?",
        "createdAt" : "2020-11-15T23:13:35Z",
        "updatedAt" : "2020-11-25T21:26:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2531c576-e234-4924-bb85-b2e73e7779b7",
        "parentId" : "819b33f6-4267-44e1-b59d-787d59ae265e",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "Yep, non existing Keys for IntervalIndex",
        "createdAt" : "2020-11-15T23:14:56Z",
        "updatedAt" : "2020-11-25T21:26:14Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      },
      {
        "id" : "1e422f7f-13a8-4950-99f2-4f8aba2790eb",
        "parentId" : "819b33f6-4267-44e1-b59d-787d59ae265e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@jreback i think this is about ready, only question is if we want to further flesh out the exception message here",
        "createdAt" : "2020-11-19T20:34:32Z",
        "updatedAt" : "2020-11-25T21:26:14Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d00d77a254989627392aae368dac2370c560a66d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +807,811 @@        # we have missing values\n        if (locs == -1).any():\n            raise KeyError(keyarr[locs == -1].tolist())\n\n        return locs"
  }
]