[
  {
    "id" : "72007ed2-2710-407c-a478-f5c15b811a71",
    "prId" : 17367,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17367#pullrequestreview-69391270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bea59d89-7e38-47eb-9138-5387fd3bd31e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "the array version of this function is almost trivial\r\nif u can add it alongside the other and call here\r\n(u just need to type the input as ndarray i think)",
        "createdAt" : "2017-10-14T12:33:28Z",
        "updatedAt" : "2017-10-14T19:09:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a61fda9a-4d0e-4d5d-a576-af86428cc836",
        "parentId" : "bea59d89-7e38-47eb-9138-5387fd3bd31e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually ignore the above this is ok here",
        "createdAt" : "2017-10-14T12:37:34Z",
        "updatedAt" : "2017-10-14T19:09:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e7051a3e66b2ab1ae6e75fcb9194d83c247ed38",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +647,651 @@            if isinstance(offset, offsets.Tick):\n                if isinstance(other, np.ndarray):\n                    nanos = np.vectorize(tslib._delta_to_nanoseconds)(other)\n                else:\n                    nanos = tslib._delta_to_nanoseconds(other)"
  },
  {
    "id" : "8a551b11-0b62-43f4-880b-0b13213edcec",
    "prId" : 17680,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17680#pullrequestreview-65435322",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0cf4a08-184d-4a54-bf53-2db4baebb10c",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Same (\"Index with\" vs \"Index of\")",
        "createdAt" : "2017-09-27T06:13:30Z",
        "updatedAt" : "2017-10-05T21:07:06Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "76880401201aa286c764909faa32e5e8d409a83b",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +171,175 @@    Period : Represents a period of time\n    DatetimeIndex : Index with datetime64 data\n    TimedeltaIndex : Index of timedelta64 data\n    \"\"\"\n    _box_scalars = True"
  },
  {
    "id" : "1b0ac993-6ea0-4858-bf61-479d1b806485",
    "prId" : 17755,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17755#pullrequestreview-72708421",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7c83f5b-7cd6-4b5c-9bd9-5aa135f34d1c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this might already be implemented by a superclass",
        "createdAt" : "2017-10-05T18:50:37Z",
        "updatedAt" : "2017-11-04T00:39:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5523a2f4-4eb7-4e1b-8625-ad8189591243",
        "parentId" : "d7c83f5b-7cd6-4b5c-9bd9-5aa135f34d1c",
        "authorId" : "84f3b0a4-88e4-4a54-8a82-f6dd7c170a75",
        "body" : "@jreback Yes, but the 1st argument is not same.\r\nhttps://github.com/Licht-T/pandas/blob/6255812c30978c6a55f1758927f9c300e35cc82b/pandas/core/indexes/base.py#L1558",
        "createdAt" : "2017-10-05T23:49:54Z",
        "updatedAt" : "2017-11-04T00:39:18Z",
        "lastEditedBy" : "84f3b0a4-88e4-4a54-8a82-f6dd7c170a75",
        "tags" : [
        ]
      },
      {
        "id" : "beb1a2e6-e043-4f58-b1ab-f9e7bb6ede1d",
        "parentId" : "d7c83f5b-7cd6-4b5c-9bd9-5aa135f34d1c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I c. ok, we should make this much more generic (IOW just pass in self and have the engine extract what it needs), but that's another issue.",
        "createdAt" : "2017-10-29T20:02:39Z",
        "updatedAt" : "2017-11-04T00:39:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec608001111df27b2d30cd7e5ca99bbc7310e593",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +278,282 @@        return cls._from_ordinals(data, name=name, freq=freq)\n\n    @cache_readonly\n    def _engine(self):\n        return self._engine_type(lambda: self, len(self))"
  },
  {
    "id" : "ca416a8e-c169-4a19-a9fc-eb4e6f0021cd",
    "prId" : 18202,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18202#pullrequestreview-75989280",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71dc52a4-88d2-4f56-88bc-2ce91ab9f82d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm maybe we can auto gen these?",
        "createdAt" : "2017-11-13T03:16:42Z",
        "updatedAt" : "2017-11-15T15:22:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "34834fae25bd7ea1eb6a364c9d2c841e0837eb38",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +163,167 @@\n    Attributes\n    ----------\n    day\n    dayofweek"
  },
  {
    "id" : "01e06bfe-4b7f-4ece-9234-986198ee0df3",
    "prId" : 18677,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18677#pullrequestreview-82328151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fae1c7ab-da55-4892-b517-34da626ae298",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same\r\n\r\nside thing, I *think* that we could make a more generic astype in  ``indexes.base`` and remove *some* boiler plate *maybe* (of course separate PR), you can make an issue if you want (or just PR!)",
        "createdAt" : "2017-12-09T15:41:55Z",
        "updatedAt" : "2017-12-11T07:40:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "60421314618f39a77f5d4a94a4b3f2462118e7fa",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +520,524 @@        elif is_period_dtype(dtype):\n            return self.asfreq(freq=dtype.freq)\n        elif is_categorical_dtype(dtype):\n            return CategoricalIndex(self.values, name=self.name, dtype=dtype,\n                                    copy=copy)"
  },
  {
    "id" : "38dafff7-2e15-4f63-b59c-85659c3ab007",
    "prId" : 18952,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18952#pullrequestreview-103255459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "937ec495-ea70-42e5-8c38-17ff729ccbf2",
        "parentId" : null,
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "For some reason ``freq='B'`` had to be handled differently because it was causing a lot of resample tests to fail when handled in the same way as all the other freq values. Not sure if this is a bug or if there is a better way of handling this.",
        "createdAt" : "2018-03-12T23:28:57Z",
        "updatedAt" : "2018-07-30T20:07:58Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6716ca3a8eed559e9dceb14a6eb927a5fa4f4fd",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +504,508 @@        end = how == 'E'\n        if end:\n            if freq == 'B':\n                # roll forward to ensure we land on B date\n                adjust = Timedelta(1, 'D') - Timedelta(1, 'ns')"
  },
  {
    "id" : "32a89847-9b4b-4952-b90f-8e01716e5b15",
    "prId" : 19849,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19849#pullrequestreview-136053772",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d4cb627-41b8-4b72-9073-e69f0d42d0d1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think could just remove this entirely here if ``_wrap_setop_result`` is defined in ``Index.base`` AND you move ``_apply_meta`` functionaily to inside of ``_shallow_copy`` for PI. (could also do this as a followup), but want to try to avoid duplicating ``_wrap_setup_result`` everywhere.",
        "createdAt" : "2018-07-10T10:31:01Z",
        "updatedAt" : "2018-11-06T13:10:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e083c023-1238-430e-bf85-9cc17fc637d3",
        "parentId" : "5d4cb627-41b8-4b72-9073-e69f0d42d0d1",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "The reason we can't move it to base from category is because in the case of category, we need to preserve the categories, and in the case of period, we need to preserve frequency. \r\n\r\nSo we could investigate in a separate PR about moving the `_apply_meta()` functionality.",
        "createdAt" : "2018-07-10T13:54:05Z",
        "updatedAt" : "2018-11-06T13:10:47Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      },
      {
        "id" : "30d57617-b1c2-4a3d-b556-9b740c79ac44",
        "parentId" : "5d4cb627-41b8-4b72-9073-e69f0d42d0d1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah that's fine",
        "createdAt" : "2018-07-11T00:11:52Z",
        "updatedAt" : "2018-11-06T13:10:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa7311ad48b2af262f403db824836bf87f126ffd",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +850,854 @@\n    def _wrap_setop_result(self, other, result):\n        name = get_op_result_name(self, other)\n        result = self._apply_meta(result)\n        result.name = name"
  },
  {
    "id" : "ddad7a25-4874-4926-b469-73dda93af9eb",
    "prId" : 19912,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19912#pullrequestreview-101383618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b319f01-4e1b-4252-87a1-a83731dbee90",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you added lots of things here, but don't appear to be tested",
        "createdAt" : "2018-02-28T11:27:55Z",
        "updatedAt" : "2018-03-01T01:17:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f8ff8f1d-b2c5-4ac5-9564-37b74df1d8d3",
        "parentId" : "3b319f01-4e1b-4252-87a1-a83731dbee90",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "These are not new cases; they are currently handled in a jumble in maybe_convert_timedeltalike.  This method already exists for DatetimeIndex.",
        "createdAt" : "2018-02-28T21:36:15Z",
        "updatedAt" : "2018-03-01T01:17:38Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "fdacc8b4-81a3-4999-ace4-b58d599700be",
        "parentId" : "3b319f01-4e1b-4252-87a1-a83731dbee90",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Would this be easier to push through if `_add_offset` were separated from the rest of the PR?  This doesn't change any behavior, but does let us remove a particularly inelegant piece of code.",
        "createdAt" : "2018-03-02T17:19:46Z",
        "updatedAt" : "2018-03-02T17:19:46Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "88e6110c-32c4-4f42-b743-682a2856f5ab",
        "parentId" : "3b319f01-4e1b-4252-87a1-a83731dbee90",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "well, you are adding code here, not removing code, so not sure what is changing",
        "createdAt" : "2018-03-04T20:02:42Z",
        "updatedAt" : "2018-03-04T20:02:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2bfd3065-d840-4dd0-9e9c-f290aadee215",
        "parentId" : "3b319f01-4e1b-4252-87a1-a83731dbee90",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "If this is a deal-breaker I can change this to just alias `_add_offset = _add_delta` (which is the method currently called when a `DateOffset` is added to a `PeriodIndex`).  The point of this part of the PR is a) by separating the methods for Tick vs non-Tick offsets, we get to simplify elsewhere, and b) `_add_delta` is a thin wrapper around `_maybe_convert_timedelta`, which is on the messy side.",
        "createdAt" : "2018-03-06T00:40:18Z",
        "updatedAt" : "2018-03-06T00:40:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "58457d4eb49bb35eeb2dfa4aa3e8b75a2a52e3fb",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +712,716 @@        assert not isinstance(other, Tick)\n        base = frequencies.get_base_alias(other.rule_code)\n        if base != self.freq.rule_code:\n            msg = _DIFFERENT_FREQ_INDEX.format(self.freqstr, other.freqstr)\n            raise IncompatibleFrequency(msg)"
  },
  {
    "id" : "218cd702-8a8f-4a78-a4e2-9b519d68c968",
    "prId" : 20772,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20772#pullrequestreview-116048027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f646d1b-ae61-45e7-9e2d-1ae6f2372bbc",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Not sure if we really need to deprecate setting this: it's user facing, but I think the only case it works is if you set to the existing frequency.  Could potentially remove the setter entirely, causing an `AttributeError` to be raised, or could raise a custom `AttributeError` within the setter to give a better message directing users to `.asfreq`.",
        "createdAt" : "2018-04-20T23:14:31Z",
        "updatedAt" : "2018-04-28T10:06:03Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "4518bc2b-31cf-42f1-9fd9-251dfeec7d33",
        "parentId" : "6f646d1b-ae61-45e7-9e2d-1ae6f2372bbc",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, IMO it was buggy, and as you say, only if it was the same frequency, it was working. But given that corner case, it maybe does not hurt to do the deprecation I would say.\r\n\r\nI think the custom AttributeError message is a good idea in the future.",
        "createdAt" : "2018-04-27T19:01:31Z",
        "updatedAt" : "2018-04-28T10:06:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "68b8b99f8a036f7aaff5a3a481cdea0a6b138189",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +571,575 @@               'removed in a future version; use PeriodIndex.asfreq instead. '\n               'The PeriodIndex.freq setter is not guaranteed to work.')\n        warnings.warn(msg, FutureWarning, stacklevel=2)\n        self._freq = value\n"
  },
  {
    "id" : "b66aff14-88d3-4430-bc45-60794670441d",
    "prId" : 21314,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21314#pullrequestreview-129785956",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67b50889-1d5d-426d-9e56-eefa0392c925",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Is the docstring for `is_full` correct?  It looks to me like 1) it is flipped True/False and 2) the word \"missing\" is ambiguous since it can refer to `pd.NaT`/`np.nan`",
        "createdAt" : "2018-06-04T14:45:36Z",
        "updatedAt" : "2018-06-26T22:56:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "13c09988-4bb7-4b00-b917-b8ec7cd3f7c8",
        "parentId" : "67b50889-1d5d-426d-9e56-eefa0392c925",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "feel free to update, I don't remember why this was added / what is purpose is",
        "createdAt" : "2018-06-05T10:52:35Z",
        "updatedAt" : "2018-06-26T22:56:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "82f55d56-507e-439f-8c35-31120227a458",
        "parentId" : "67b50889-1d5d-426d-9e56-eefa0392c925",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah I don't remember even why we have this (can follow up later)",
        "createdAt" : "2018-06-19T00:45:43Z",
        "updatedAt" : "2018-06-26T22:56:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "efd7c752dff40c4bd49eca576c0ccf259778ea2b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +559,563 @@        if not self.is_monotonic:\n            raise ValueError('Index is not monotonic')\n        values = self.asi8\n        return ((values[1:] - values[:-1]) < 2).all()\n"
  },
  {
    "id" : "da5eeeee-411c-4021-bde8-e279e6009c2e",
    "prId" : 21314,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21314#pullrequestreview-125605562",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efcd77db-b5d2-45f2-a830-a86651004b16",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "It might be nice to implement DateOffset * arraylike so we don't have to right this broadcasting repeatedly.",
        "createdAt" : "2018-06-04T14:46:34Z",
        "updatedAt" : "2018-06-26T22:56:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "efd7c752dff40c4bd49eca576c0ccf259778ea2b",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +771,775 @@        asi8 = self.asi8\n        new_data = asi8 - other.ordinal\n        new_data = np.array([self.freq * x for x in new_data])\n\n        if self.hasnans:"
  },
  {
    "id" : "6464ec0b-4c92-45e2-897f-85c274ce8bee",
    "prId" : 21782,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21782#pullrequestreview-135190401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90a46f79-d50b-4049-9c9c-1114d5459ca5",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I _think_ the answer to this is a) yes, but b) if we remove this method entirely then when the inherited method is called from `__sub__` it will correctly get wrapped.",
        "createdAt" : "2018-07-07T01:58:10Z",
        "updatedAt" : "2018-07-07T01:58:10Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "10e5559785dafd7b0c703e680a27344b08655053",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +699,703 @@        new_data = PeriodArrayMixin._sub_period(self, other)\n\n        # TODO: Should name=self.name be passed here?\n        return Index(new_data)\n"
  },
  {
    "id" : "c02dc9e6-4597-47dd-9985-313f0f9a7392",
    "prId" : 22862,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22862#pullrequestreview-166136812",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "147a284e-37f2-42a0-937e-0804d3025ec6",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Are people OK with PeriodIndex also being an accessor? That seemed like the easiest way to dispatch things down to PeriodArray.",
        "createdAt" : "2018-10-10T21:41:43Z",
        "updatedAt" : "2018-10-25T13:49:57Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f0285860-d93f-4938-a029-5b72e0a43152",
        "parentId" : "147a284e-37f2-42a0-937e-0804d3025ec6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Is performance affected?  I'm still in the \"inheritance is the easiest way to dispatch\" camp, but recognize that I've lost this one.",
        "createdAt" : "2018-10-10T23:39:22Z",
        "updatedAt" : "2018-10-25T13:49:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8a903ccd-d9b6-42cd-a7d3-3389e0506361",
        "parentId" : "147a284e-37f2-42a0-937e-0804d3025ec6",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Beyond an extra function call (or two), I don't think so, though I will check. These aren't descriptors so we aren't changing getattribute.",
        "createdAt" : "2018-10-12T17:21:53Z",
        "updatedAt" : "2018-10-25T13:49:57Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "4b6b9c58-c333-45d8-85ca-136762811977",
        "parentId" : "147a284e-37f2-42a0-937e-0804d3025ec6",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we could make a generic mechanism to do this at some point. We are eventually going to be doing this with all Index.",
        "createdAt" : "2018-10-18T14:34:49Z",
        "updatedAt" : "2018-10-25T13:49:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "38d68dfa-9c52-42ff-8782-4baf70a11a68",
        "parentId" : "147a284e-37f2-42a0-937e-0804d3025ec6",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Related to that, as I think this is for a follow-up, how do we keep track of the follow-up ideas? Update a list in the top-post (to not have it somewhere in the middle be hidden by github)",
        "createdAt" : "2018-10-18T14:52:13Z",
        "updatedAt" : "2018-10-25T13:49:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4065bdb2505d219c0bb0d32e55cd65897d550d7c",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +101,105 @@                overwrite=True)\nclass PeriodIndex(DatelikeOps, DatetimeIndexOpsMixin,\n                  Int64Index, PeriodDelegateMixin):\n    \"\"\"\n    Immutable ndarray holding ordinal values indicating regular periods in"
  },
  {
    "id" : "8cfe6e27-4d4e-4496-8f43-c518e0edef99",
    "prId" : 22862,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22862#pullrequestreview-164362544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e7863a8-6ba6-4717-854e-c03a3f2f879c",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "So from some printing in the tests, some exploration on what is passed here:\r\n\r\n- PeriodArray and int64 ndarray ordinals. I think those both are fine, it will probably hard to avoid mixing both? Or do we want a separate one for ordinals?\r\n- object array of Periods. \r\n  - One example of this is `PeriodIndex.difference` (from the base Index implementation). This base implementation basically works, except that there is a `sorting.safe_sort` call on the resulting PeriodArray, which destroys the PeriodArray. But this is of course solvable in `sorting.safe_sort`, by making that EA aware.\r\n  - So I think eventually we could try to solve all those cases where object is passed. But I would say, let's leave that for follow-ups ?\r\n- None -> this is from plain `self.shallow_copy()` calls without arguments. This is fine I think.\r\n",
        "createdAt" : "2018-10-12T09:09:06Z",
        "updatedAt" : "2018-10-25T13:49:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "34232838-ab43-4c39-8f39-6b2ec690623e",
        "parentId" : "2e7863a8-6ba6-4717-854e-c03a3f2f879c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is basically what motivated #23095.  Even if the solution is unwanted there, I think it identifies all the extant places where unwanted types are currently passed to _shallow_copy",
        "createdAt" : "2018-10-12T18:36:29Z",
        "updatedAt" : "2018-10-25T13:49:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4065bdb2505d219c0bb0d32e55cd65897d550d7c",
    "line" : 321,
    "diffHunk" : "@@ -1,1 +315,319 @@\n    def _shallow_copy(self, values=None, **kwargs):\n        # TODO: simplify, figure out type of values\n        if values is None:\n            values = self._data"
  },
  {
    "id" : "851bf3b6-ef38-4d6e-91d3-11c8006a133c",
    "prId" : 22862,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22862#pullrequestreview-164131978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3365faf5-8fa1-46dc-96e0-db31f649ae15",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think this delegation is a good idea for the dtype-specific ones, but it might be more explicit to keep general ones as `size` and `shape` as actual properties calling the underlying values (but could be shared for the different index classes based on EA). \r\nAnyway, not that important for this PR, this can be refactored after converting all Arrays.",
        "createdAt" : "2018-10-12T09:13:28Z",
        "updatedAt" : "2018-10-25T13:49:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4065bdb2505d219c0bb0d32e55cd65897d550d7c",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +93,97 @@\n@delegate_names(PeriodArray,\n                PeriodArray._datetimelike_ops + ['size', 'asi8', 'shape'],\n                typ='property')\n@delegate_names(PeriodArray,"
  },
  {
    "id" : "95287e54-afe3-4d0a-add9-9b8dc8df0e41",
    "prId" : 22862,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22862#pullrequestreview-164363188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efefb25a-0041-4f2d-8787-74be46062377",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, I'm not wild about this.  I still think the best option is to nail down the constructors before doing the whole PeriodArray changeover.",
        "createdAt" : "2018-10-12T18:38:33Z",
        "updatedAt" : "2018-10-25T13:49:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4065bdb2505d219c0bb0d32e55cd65897d550d7c",
    "line" : 341,
    "diffHunk" : "@@ -1,1 +335,339 @@                values = period_array(values, freq=self.freq)\n\n        # I don't like overloading shallow_copy with freq changes.\n        # See if it's used anywhere outside of test_resample_empty_dataframe\n        attributes = self._get_attributes_dict()"
  },
  {
    "id" : "f9b8ebe8-827b-4361-8521-05e330337f6c",
    "prId" : 22862,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22862#pullrequestreview-164782148",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ab5a20e-af70-4bc6-b1ea-34de1ea195d9",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Where is this (and _maybe_box_as_index) used?",
        "createdAt" : "2018-10-12T18:40:16Z",
        "updatedAt" : "2018-10-25T13:49:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "11300575-1d4a-46c6-94ae-c65ca8e1347a",
        "parentId" : "4ab5a20e-af70-4bc6-b1ea-34de1ea195d9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It's used in the `sort_values` and `_concat_same_dtype` implementations that are shared between the datetimelike indexes \r\n(but those might certainly be considered for a re-thinking in a follow-up PR I think)",
        "createdAt" : "2018-10-15T07:10:12Z",
        "updatedAt" : "2018-10-25T13:49:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0f2f1f32-69c0-4988-aede-a06d03aa7bf5",
        "parentId" : "4ab5a20e-af70-4bc6-b1ea-34de1ea195d9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> It's used in the `sort_values` and `_concat_same_dtype` implementations that are shared between the datetimelike indexes\r\n\r\nThe only place I'm seeing it is in `astype` (in master)",
        "createdAt" : "2018-10-15T15:36:59Z",
        "updatedAt" : "2018-10-25T13:49:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "1e76b873-f06a-495d-b8a2-ea05f16e1305",
        "parentId" : "4ab5a20e-af70-4bc6-b1ea-34de1ea195d9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I was talking about this branch I think (I don't think it is used in master?)",
        "createdAt" : "2018-10-15T16:10:11Z",
        "updatedAt" : "2018-10-25T13:49:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4065bdb2505d219c0bb0d32e55cd65897d550d7c",
    "line" : 379,
    "diffHunk" : "@@ -1,1 +367,371 @@        return func\n\n    def _maybe_box_as_values(self, values, **attribs):\n        \"\"\"Box an array of ordinals to a PeriodArray\n"
  },
  {
    "id" : "8fd62d10-35d4-4686-93d3-406dfd9c5e64",
    "prId" : 22862,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22862#pullrequestreview-164765209",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df458ff6-765d-4e46-9000-3682b4958f33",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "On principle shouldn't we be avoiding DatetimeIndex._simple_new here?  The performance impact can't be that big a deal can it?\r\n\r\nSidenote: probably should have a to_index method for DatetimeArray etc, so this last line just becomes `return result.to_index(name=self.name)`",
        "createdAt" : "2018-10-12T18:41:52Z",
        "updatedAt" : "2018-10-25T13:49:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3ae24ffe-7609-445f-af5a-502870b7d7ac",
        "parentId" : "df458ff6-765d-4e46-9000-3682b4958f33",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> On principle shouldn't we be avoiding DatetimeIndex._simple_new here?\r\n\r\nIn principle yes, but since our default constructors are that convoluted (and that is not something we can easily change), I think we should consider the `_simple_new` as an \"internal public\" method, meaning that we can use it throughout the pandas codebase (so outside it's own class definition where one can do `self._simple_new`)\r\n\r\n> probably should have a to_index method for DatetimeArray etc\r\n\r\nPersonally, I think Arrays should be completely ignorant of the Index concept. That keeps a clearer separation of concerns",
        "createdAt" : "2018-10-15T07:15:03Z",
        "updatedAt" : "2018-10-25T13:49:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "799e7de4-a454-4ae7-82f8-c8cf305f6fd9",
        "parentId" : "df458ff6-765d-4e46-9000-3682b4958f33",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> Personally, I think Arrays should be completely ignorant of the Index concept\r\n\r\nThat's fair.  `arr.to_index()` really isn't any less verbose than `pd.Index(arr)`",
        "createdAt" : "2018-10-15T15:33:43Z",
        "updatedAt" : "2018-10-25T13:49:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4065bdb2505d219c0bb0d32e55cd65897d550d7c",
    "line" : 409,
    "diffHunk" : "@@ -1,1 +396,400 @@        from pandas import DatetimeIndex\n        result = self._data.to_timestamp(freq=freq, how=how)\n        return DatetimeIndex._simple_new(result,\n                                         name=self.name,\n                                         freq=result.freq)"
  },
  {
    "id" : "87a4b282-6a7d-4565-acd8-0bef0becf220",
    "prId" : 22862,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22862#pullrequestreview-164365149",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e77127a8-d498-4444-813d-d70385272577",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Is there an overarching logic behind when you're using .values vs when ._data?  The latter I guess is slightly more performant, but the former seems easier to remember as \"this is always lossless (or at least will be)\"",
        "createdAt" : "2018-10-12T18:44:00Z",
        "updatedAt" : "2018-10-25T13:49:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4065bdb2505d219c0bb0d32e55cd65897d550d7c",
    "line" : 421,
    "diffHunk" : "@@ -1,1 +408,412 @@    def _maybe_convert_timedelta(self, other):\n        # just dispatch, return ndarray\n        return self._data._maybe_convert_timedelta(other)\n\n    # ------------------------------------------------------------------------"
  },
  {
    "id" : "08a29048-a092-4864-abc3-567b0f7d0385",
    "prId" : 22862,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22862#pullrequestreview-164365385",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33ce58f0-1a26-478e-bb57-7bdbc976521c",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Any particular reason for PeriodIndex instead of type(self) or shallow_copy?",
        "createdAt" : "2018-10-12T18:44:45Z",
        "updatedAt" : "2018-10-25T13:49:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4065bdb2505d219c0bb0d32e55cd65897d550d7c",
    "line" : 477,
    "diffHunk" : "@@ -1,1 +475,479 @@        item : scalar item to coerce\n        \"\"\"\n        return PeriodIndex([item], **self._get_attributes_dict())\n\n    def __array__(self, dtype=None):"
  },
  {
    "id" : "96084620-61ee-4671-adb9-1c17b7f77466",
    "prId" : 23110,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23110#pullrequestreview-164456092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "848d7d52-7309-47ca-825e-224d291d19e0",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "What is the performance implication of using _simple_new vs just Int64Index(...)?  If its sufficiently small, we should be using the public constructors",
        "createdAt" : "2018-10-12T19:01:47Z",
        "updatedAt" : "2018-10-13T08:30:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "773adc8c-6e7c-4de8-8026-c26be102e1b5",
        "parentId" : "848d7d52-7309-47ca-825e-224d291d19e0",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Relatively it is a big difference:\r\n\r\n```\r\nIn [8]: values = np.arange(100000)\r\n\r\nIn [9]: %timeit pd.Index(values)\r\n31 µs ± 140 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)\r\n\r\nIn [10]: %timeit pd.Index._simple_new(values)\r\n1.62 µs ± 26.1 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\r\n```\r\n\r\nbut if that will be significant in actual code, I don't know.\r\n\r\nBut since we are using that in many places, I leave changing `_simple_new` calls to the public constructor for another PR.",
        "createdAt" : "2018-10-13T08:19:09Z",
        "updatedAt" : "2018-10-13T08:30:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "5457843a-e9b9-4f78-b138-d9e0ab833a7f",
        "parentId" : "848d7d52-7309-47ca-825e-224d291d19e0",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jbrockmendel this leads a bit further, but given that the public constructors (`__init__`) of Index classes are very complex (something we will not be able to change I think), I think that we need to see `_simple_new` as kind of a \"internal public\" method within the pandas code base.",
        "createdAt" : "2018-10-13T08:33:52Z",
        "updatedAt" : "2018-10-13T08:33:52Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "45758473d550279e22ab0acc877c7b4f7b13b2d6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +307,311 @@    @cache_readonly\n    def _int64index(self):\n        return Int64Index._simple_new(self.asi8, name=self.name)\n\n    @property"
  }
]