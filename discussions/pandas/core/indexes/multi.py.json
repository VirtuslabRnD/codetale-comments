[
  {
    "id" : "796e58c5-fccc-4149-aa20-6f3df16b65c7",
    "prId" : 16324,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16324#pullrequestreview-37719935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ae992b4-18a8-4766-8d6d-ce5c5ce9b5ed",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "maybe refer to the github issue number of the pr for the discussion about it?",
        "createdAt" : "2017-05-11T14:35:17Z",
        "updatedAt" : "2017-05-11T22:53:14Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "8101d0de-a554-499f-9c0c-09a82b2969d9",
        "parentId" : "7ae992b4-18a8-4766-8d6d-ce5c5ce9b5ed",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "done",
        "createdAt" : "2017-05-11T22:52:47Z",
        "updatedAt" : "2017-05-11T22:53:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "de514f135b7e9b7bc820aebb49622004dc04b25d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +632,636 @@        # choose our engine based on our size\n        # the hashing based MultiIndex for larger\n        # sizes, and the MultiIndexOjbect for smaller\n        # xref: https://github.com/pandas-dev/pandas/pull/16324\n        l = len(self)"
  },
  {
    "id" : "68839a9e-5ab0-4660-a14c-3e4d11f70c6a",
    "prId" : 16782,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16782#pullrequestreview-48469501",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5da320f-19bd-4910-a2e4-53e7e2f6644d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you *might* be able to change this to ``_ensure_index(values)`` I think (as its more idiomatic). I also don't think you will need the ``.values``",
        "createdAt" : "2017-06-28T05:12:01Z",
        "updatedAt" : "2017-07-07T10:25:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8fa677ad-f912-471d-9bab-d55d0a5db52e",
        "parentId" : "d5da320f-19bd-4910-a2e4-53e7e2f6644d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`_ensure_index` is not meant to support values for a MultiIndex I think:\r\n\r\n```\r\nIn [159]: pd.core.indexes.base._ensure_index([(1, 2), (3, 4)])\r\nOut[159]: Index([(1, 2), (3, 4)], dtype='object')\r\n```",
        "createdAt" : "2017-06-29T12:21:47Z",
        "updatedAt" : "2017-07-07T10:25:07Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d4dc5333-1bf0-48b5-8a48-1ea2e04a8de8",
        "parentId" : "d5da320f-19bd-4910-a2e4-53e7e2f6644d",
        "authorId" : "527d1837-84fe-4ac4-a66f-bc8d6638806f",
        "body" : "Not able to address this before 0.20.3",
        "createdAt" : "2017-07-06T21:31:59Z",
        "updatedAt" : "2017-07-07T10:25:07Z",
        "lastEditedBy" : "527d1837-84fe-4ac4-a66f-bc8d6638806f",
        "tags" : [
        ]
      }
    ],
    "commit" : "94ac6b16b8b33809525a9240afd59834d51db94f",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +2623,2627 @@    def isin(self, values, level=None):\n        if level is None:\n            values = MultiIndex.from_tuples(values,\n                                            names=self.names).values\n            return algos.isin(self.values, values)"
  },
  {
    "id" : "b0aeb2e1-d857-4ccf-bfa2-ff0df774f41b",
    "prId" : 17414,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17414#pullrequestreview-60271801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1d521ee-4fe1-42fc-ad0c-d88e4b42ace1",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Let's explain what `values` is here since you are updating the docs.",
        "createdAt" : "2017-09-02T08:52:56Z",
        "updatedAt" : "2017-09-02T12:40:07Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc67b9af36090ed45cde7a0b2321db0e9a1d08fe",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +893,897 @@        Returns\n        -------\n        values : Index\n            ``values`` is a level of this MultiIndex converted to\n            a single :class:`Index` (or subclass thereof)."
  },
  {
    "id" : "463dbd4a-b9d3-48a0-872c-b51577bf9323",
    "prId" : 18440,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18440#pullrequestreview-78960577",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83ac41a4-f1fe-47e8-b670-34ab55db9244",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2017-11-24T17:01:04Z",
        "updatedAt" : "2017-11-25T16:27:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a220aaa586a047f7dbc8b90989961331efe3a0a",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1271,1275 @@        from pandas.core.reshape.util import cartesian_product\n\n        if not is_list_like(iterables):\n            raise TypeError(\"Input must be a list / sequence of iterables.\")\n        elif is_iterator(iterables):"
  },
  {
    "id" : "e0e00e32-25c9-413f-988e-230faedba25b",
    "prId" : 18677,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18677#pullrequestreview-82333843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fa3b39c-f104-44fe-b04a-14a5e64b5a59",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "test fo this?",
        "createdAt" : "2017-12-09T15:40:53Z",
        "updatedAt" : "2017-12-11T07:40:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fdf81432-60da-41a8-bf0c-0773b190eccc",
        "parentId" : "8fa3b39c-f104-44fe-b04a-14a5e64b5a59",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Wrote a test for it in `test_multi.py`, which overrides the test in `common.py`:\r\n\r\nhttps://github.com/jschendel/pandas/blob/31d4d62295035123453ab24f393176750661a283/pandas/tests/indexes/test_multi.py#L558-L568",
        "createdAt" : "2017-12-09T19:53:31Z",
        "updatedAt" : "2017-12-11T07:40:52Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "60421314618f39a77f5d4a94a4b3f2462118e7fa",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +2720,2724 @@        dtype = pandas_dtype(dtype)\n        if is_categorical_dtype(dtype):\n            msg = '> 1 ndim Categorical are not supported at this time'\n            raise NotImplementedError(msg)\n        elif not is_object_dtype(dtype):"
  },
  {
    "id" : "cdb40a3d-1f4b-438a-9dcf-b57919dd9eb5",
    "prId" : 19074,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19074#pullrequestreview-88447861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29f535ec-24b9-4f33-bc89-ecf39dc66b21",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "blank lines in between things",
        "createdAt" : "2018-01-12T11:34:03Z",
        "updatedAt" : "2018-01-27T18:16:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "468bb08cb14ce265b78babbcbbb066adc1d08d51",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +771,775 @@        # Calculate the number of bits needed to represent labels in each\n        # level, as log2 of their sizes (including -1 for NaN):\n        sizes = np.ceil(np.log2([len(l) + 1 for l in self.levels]))\n\n        # Sum bit counts, starting from the _right_...."
  },
  {
    "id" : "874fda13-2d93-4cf7-b06e-38a58003e1c9",
    "prId" : 19074,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19074#pullrequestreview-89339797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a841b5b-f1ec-422f-9082-c971158203be",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there any reason why these are defined in python, rather than in cython? these could then be cdef classes, and you can type _codes_to_int.",
        "createdAt" : "2018-01-17T00:25:54Z",
        "updatedAt" : "2018-01-27T18:16:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ca412c1f-272d-4067-9ea5-aab167a400fc",
        "parentId" : "8a841b5b-f1ec-422f-9082-c971158203be",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "cython doesn't allow multiple inheritance (and avoiding it would complicate the code a lot)",
        "createdAt" : "2018-01-17T06:33:51Z",
        "updatedAt" : "2018-01-27T18:16:25Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "468bb08cb14ce265b78babbcbbb066adc1d08d51",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +46,50 @@\n\nclass MultiIndexUIntEngine(libindex.BaseMultiIndexCodesEngine,\n                           libindex.UInt64Engine):\n    \"\"\""
  },
  {
    "id" : "2432c806-61ba-4d75-b01b-6cc2d3cca4c3",
    "prId" : 19074,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19074#pullrequestreview-91811512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80a1a56e-16e8-406b-863d-ea8726b5171d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you give a 1-liner what is going on here",
        "createdAt" : "2018-01-26T03:16:32Z",
        "updatedAt" : "2018-01-27T18:16:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e24d932a-961f-40f6-bffe-d15c986c51d6",
        "parentId" : "80a1a56e-16e8-406b-863d-ea8726b5171d",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "(done)",
        "createdAt" : "2018-01-26T11:33:16Z",
        "updatedAt" : "2018-01-27T18:16:25Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "468bb08cb14ce265b78babbcbbb066adc1d08d51",
    "line" : 192,
    "diffHunk" : "@@ -1,1 +2349,2353 @@                                                     drop_level)\n\n                if len(key) == self.nlevels and self.is_unique:\n                    # Complete key in unique index -> standard get_loc\n                    return (self._engine.get_loc(key), None)"
  },
  {
    "id" : "34dbdc24-98b0-40f2-8093-73dce79e1b8e",
    "prId" : 19558,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19558#pullrequestreview-95668451",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7feb97ec-c7c6-4d82-b01e-ff9f6c2a930c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why not _ndarray_values here?",
        "createdAt" : "2018-02-10T15:39:51Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9af9d0a5-d2c6-483a-b378-ff88f4dc4c60",
        "parentId" : "7feb97ec-c7c6-4d82-b01e-ff9f6c2a930c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Using `_ndarray_values` breaks tests for categoricals. We've baked knowledge of cats into `algost.take_nd` / `take_1d`, to handle it, so passing the `codes` here will break things further down.",
        "createdAt" : "2018-02-11T20:30:02Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "3af8a21ea0e13ba5fc73db464f6e327552c71b0e",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +2658,2662 @@            olabels = olabels[olabels != -1]\n            ovalues = algos.take_nd(\n                np.asarray(other.levels[i]._values),\n                olabels, allow_fill=False)\n"
  },
  {
    "id" : "5d6bca24-2887-4dfc-b7cd-de963860ed37",
    "prId" : 19831,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19831#pullrequestreview-98808289",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6531c5e-b6c5-4e61-a68a-2bb3d50820a9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "just turn this into an Index (and call _format_native_types) on that",
        "createdAt" : "2018-02-23T02:24:11Z",
        "updatedAt" : "2018-10-31T17:02:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "86f0b167-73a9-45bd-af79-6be5b9230417",
        "parentId" : "f6531c5e-b6c5-4e61-a68a-2bb3d50820a9",
        "authorId" : "da19b543-f846-4415-b573-9ab03a8005fd",
        "body" : "Gotcha.  I took this as a desire to make this clear we'll be treating this a normal index since the outputs should be the same.  a23252385e9de1a2af0832a82e168d825315d937",
        "createdAt" : "2018-02-23T04:11:22Z",
        "updatedAt" : "2018-10-31T17:02:03Z",
        "lastEditedBy" : "da19b543-f846-4415-b573-9ab03a8005fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdc20d4c55807387bf10ff321936b4f8b87c0a6f",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +733,737 @@            new_labels.append(label)\n\n        if len(new_levels) == 1:\n            return Index(new_levels[0])._format_native_types()\n        else:"
  },
  {
    "id" : "28f82534-dd6e-4ab2-aa7f-997cb2c4bc1b",
    "prId" : 19831,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19831#pullrequestreview-170362751",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "784f2888-3ab7-498f-9520-504af328e48b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you don't need this else, and i think you have a hanging return statement",
        "createdAt" : "2018-10-31T12:24:48Z",
        "updatedAt" : "2018-10-31T17:02:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5a04ab47-c456-4102-a61c-e8e34b3664a1",
        "parentId" : "784f2888-3ab7-498f-9520-504af328e48b",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I just need to remove the hanging return statement, since we return something in both blocks already as it is.",
        "createdAt" : "2018-10-31T16:53:41Z",
        "updatedAt" : "2018-10-31T17:02:03Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdc20d4c55807387bf10ff321936b4f8b87c0a6f",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +735,739 @@        if len(new_levels) == 1:\n            return Index(new_levels[0])._format_native_types()\n        else:\n            # reconstruct the multi-index\n            mi = MultiIndex(levels=new_levels, labels=new_labels,"
  },
  {
    "id" : "07d0362e-c8b6-4f14-8e53-4f3433c0ea85",
    "prId" : 20548,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20548#pullrequestreview-111065477",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6a0cd6d-39a5-43d9-b41f-4577e832bd3f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "looks good here. can you update the doc-string with the comment below",
        "createdAt" : "2018-04-11T01:50:44Z",
        "updatedAt" : "2018-04-22T14:48:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "97a2b06c305f70ffd0c1e4fcbce4169d1f54ccf9",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +657,661 @@\n        Note that you generally want to set this *after* changing levels, so\n        that it only acts on copies\n        \"\"\"\n        # GH 15110"
  },
  {
    "id" : "f61a64e3-d3cf-4988-b022-2ef7520c243f",
    "prId" : 21613,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21613#pullrequestreview-131846525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28f6c520-0601-4bb5-b8da-feaefb6bfe6c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "to_hierarchical is listed elsewhere in this file in a doc-string",
        "createdAt" : "2018-06-25T11:09:35Z",
        "updatedAt" : "2018-06-26T02:25:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "03178cc5-af86-4edf-84fa-b9a5bc91d12d",
        "parentId" : "28f6c520-0601-4bb5-b8da-feaefb6bfe6c",
        "authorId" : "db2002f5-d426-4f7c-9815-4de0d8b60e7d",
        "body" : "Thanks - it is mentioned as a part of enumeration of methods of `MultiIndex` - should it be removed?",
        "createdAt" : "2018-06-25T13:03:31Z",
        "updatedAt" : "2018-06-26T02:25:49Z",
        "lastEditedBy" : "db2002f5-d426-4f7c-9815-4de0d8b60e7d",
        "tags" : [
        ]
      },
      {
        "id" : "e600ad4a-ec66-4ce3-b89e-387df0e43fea",
        "parentId" : "28f6c520-0601-4bb5-b8da-feaefb6bfe6c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes",
        "createdAt" : "2018-06-25T22:25:45Z",
        "updatedAt" : "2018-06-26T02:25:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "73106107-a7c5-4ab0-a4df-28890be4747d",
        "parentId" : "28f6c520-0601-4bb5-b8da-feaefb6bfe6c",
        "authorId" : "db2002f5-d426-4f7c-9815-4de0d8b60e7d",
        "body" : "Thanks - updated for all of the latest review comments",
        "createdAt" : "2018-06-26T02:29:20Z",
        "updatedAt" : "2018-06-26T02:29:20Z",
        "lastEditedBy" : "db2002f5-d426-4f7c-9815-4de0d8b60e7d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d2eb264970ca631f0e3baef0556412ff72dd227",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1181,1185 @@\n    def to_hierarchical(self, n_repeat, n_shuffle=1):\n        \"\"\"\n        .. deprecated:: 0.24.0\n"
  },
  {
    "id" : "a8cfc294-bc42-47f2-82b2-5cd7f19bfc63",
    "prId" : 21657,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21657#pullrequestreview-132809399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d6ec877-138c-4d8a-a843-2f675fff0556",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "elif here",
        "createdAt" : "2018-06-28T10:28:25Z",
        "updatedAt" : "2018-06-29T09:13:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e3735e94-e933-4a3e-846b-31219d076534",
        "parentId" : "6d6ec877-138c-4d8a-a843-2f675fff0556",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "So I need the 'if' here because the result of `categorical.get_values()` can still be an Index with extension dtype / datetime dtype. \r\n\r\nI would like to explore a bit more how to streamline the path from series/index/array object -> numpy array that is boxed if needed (currenlty that doesn't seem to easy, and is handled again in many different places), but that is for another PR",
        "createdAt" : "2018-06-28T11:58:42Z",
        "updatedAt" : "2018-06-29T09:13:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "2261eefcddc97086edd5877f13e0df52833f9a8f",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +815,819 @@            if is_categorical_dtype(vals):\n                vals = vals.get_values()\n            if (isinstance(vals.dtype, (PandasExtensionDtype, ExtensionDtype))\n                    or hasattr(vals, '_box_values')):\n                vals = vals.astype(object)"
  },
  {
    "id" : "b7cb26fa-eb60-4578-b465-057f1afe36d5",
    "prId" : 22511,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22511#pullrequestreview-157945099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b65d2209-759f-4c36-8c6a-d75db5c4e95b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "might be nice to show an example when you use a ``option_context`` to say limit the ``max_seq_items``",
        "createdAt" : "2018-09-23T13:20:20Z",
        "updatedAt" : "2019-06-11T19:54:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "05035e98-a345-4a61-a76c-fa89a105ad42",
        "parentId" : "b65d2209-759f-4c36-8c6a-d75db5c4e95b",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "But ``MultiIndex.to_hierarchical`` is deprecated, so it's not worth it here IMO. Could make a test for ``options_context`` in ``test_format.py`` though.\r\n\r\nWhat the response to my comments to @jorisvandenbossche?\r\n\r\nCC @jorisvandenbossche \r\n",
        "createdAt" : "2018-09-23T13:54:00Z",
        "updatedAt" : "2019-06-11T19:54:02Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "f2ab6a08-722b-4f41-9d75-63012ef8f0b2",
        "parentId" : "b65d2209-759f-4c36-8c6a-d75db5c4e95b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I mean generally show . how to do it in the doc-string. hmm you don't have *any* tests with options_context???? that we for sure need.",
        "createdAt" : "2018-09-23T16:58:26Z",
        "updatedAt" : "2019-06-11T19:54:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d96c98c94a5f98dd44228b2770e9c64ddaabd64",
    "line" : 234,
    "diffHunk" : "@@ -1,1 +1590,1594 @@                    (1, 'one'),\n                    (1, 'two'),\n                    (1, 'two'),\n                    (1, 'two'),\n                    (2, 'one'),"
  },
  {
    "id" : "fb60eb85-cb70-45ee-92e1-4a82a024825c",
    "prId" : 22780,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22780#pullrequestreview-157264570",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d66c901-67b9-41e5-9609-0545be40bf46",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can u share docstrings at all?",
        "createdAt" : "2018-09-20T13:15:47Z",
        "updatedAt" : "2018-09-20T16:22:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cad9dbfb-7292-471f-b42b-e453ee1f9f83",
        "parentId" : "4d66c901-67b9-41e5-9609-0545be40bf46",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think they're all different enough that sharing would be burdensome.",
        "createdAt" : "2018-09-20T13:17:31Z",
        "updatedAt" : "2018-09-20T16:22:22Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "332dbcab41019d6557e3dc4070f01af47bbcd2e9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +291,295 @@    @property\n    def _is_homogeneous(self):\n        \"\"\"Whether the levels of a MultiIndex all have the same dtype.\n\n        This looks at the dtypes of the levels."
  },
  {
    "id" : "87ba5099-38c2-4ba7-abaf-6ed532e7ad40",
    "prId" : 22811,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22811#pullrequestreview-166764543",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4109a27b-22e4-4016-a1fd-b5351bb42749",
        "parentId" : null,
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "The old way of doing this using ``set`` did not preserve the original order so I took this code from the ``difference`` method in ``pandas/core/indexes/base.py``:\r\nhttps://github.com/pandas-dev/pandas/blob/145c2275e3560edc30ff418a57df67ba3c4c30d6/pandas/core/indexes/base.py#L2950-L2957",
        "createdAt" : "2018-10-20T22:28:49Z",
        "updatedAt" : "2018-11-18T22:59:13Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "13a23f7558ccde3710e8786320c28e4d271a7ca9",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +2826,2830 @@                              names=result_names, verify_integrity=False)\n\n        this = self._get_unique_index()\n\n        indexer = this.get_indexer(other)"
  },
  {
    "id" : "553f3af8-d974-43b8-9556-a990a20c035e",
    "prId" : 23141,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23141#pullrequestreview-171245508",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "534cbf7c-1f1a-400a-a8a0-1c82159e0b3d",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Doesn't this lose CategoricalDtype info?\r\n\r\nCan you ensure we have a test for\r\n\r\n```python\r\nIn [12]: idx = pd.MultiIndex.from_product([['a', 'b'], pd.Categorical(['A', 'B'])])\r\n\r\nIn [13]: idx.to_frame().dtypes\r\nOut[13]:\r\n0      object\r\n1    category\r\ndtype: object\r\n\r\n```\r\n\r\nand make sure that doesn't regress?",
        "createdAt" : "2018-11-02T13:50:49Z",
        "updatedAt" : "2018-12-07T22:24:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "22dc83b8-f22c-44b9-8491-c03b2ef83f55",
        "parentId" : "534cbf7c-1f1a-400a-a8a0-1c82159e0b3d",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "Any reason not to just update the original implementation to use OrderedDict? Would satisfy both the guaranteed ordering and dtype fidelity.",
        "createdAt" : "2018-11-02T18:43:36Z",
        "updatedAt" : "2018-12-07T22:24:27Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      },
      {
        "id" : "bfa65370-fff5-491e-a6e5-0543f1645922",
        "parentId" : "534cbf7c-1f1a-400a-a8a0-1c82159e0b3d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Seems reasonable to me.",
        "createdAt" : "2018-11-02T19:44:09Z",
        "updatedAt" : "2018-12-07T22:24:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "9159b2dcc9da90128f63552fe7e83d7270d34518",
    "line" : 282,
    "diffHunk" : "@@ -1,1 +1467,1471 @@\n        # Guarantee resulting column order\n        result = DataFrame(\n            OrderedDict([\n                ((level if name is None else name),"
  },
  {
    "id" : "5ae62e99-d484-48da-bf7d-8568b758461d",
    "prId" : 23141,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23141#pullrequestreview-173705055",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab4e04cd-6dda-4be7-a038-0664c08f88a8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here guarantiing sort order",
        "createdAt" : "2018-11-11T16:32:10Z",
        "updatedAt" : "2018-12-07T22:24:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9159b2dcc9da90128f63552fe7e83d7270d34518",
    "line" : 275,
    "diffHunk" : "@@ -1,1 +1465,1469 @@        else:\n            idx_names = self.names\n\n        # Guarantee resulting column order\n        result = DataFrame("
  },
  {
    "id" : "49f8e2c6-2868-4e45-b2ae-c0c04f8d90a0",
    "prId" : 23141,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23141#pullrequestreview-182526592",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85631082-bb71-4244-88ef-84f97c7ff6cd",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I guess it'll be `Index` when the `DataFrame` has a single column. Would be useful to explain that.",
        "createdAt" : "2018-12-06T10:04:38Z",
        "updatedAt" : "2018-12-07T22:24:27Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "65bb4402-e4cc-43cb-ac92-0da91456dda0",
        "parentId" : "85631082-bb71-4244-88ef-84f97c7ff6cd",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "fixed, we changed this so that it's always MultiIndex now",
        "createdAt" : "2018-12-07T01:59:54Z",
        "updatedAt" : "2018-12-07T22:24:27Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      }
    ],
    "commit" : "9159b2dcc9da90128f63552fe7e83d7270d34518",
    "line" : 229,
    "diffHunk" : "@@ -1,1 +471,475 @@        -------\n        MultiIndex\n            The MultiIndex representation of the given DataFrame.\n\n        See Also"
  },
  {
    "id" : "f2266395-22fe-46d3-924b-7d07e6c77dfc",
    "prId" : 23141,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23141#pullrequestreview-182526803",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf9b4264-c03f-4ded-a0bc-5f633a41aa1c",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "This is too long for what is needed. Also, much better to use some meaningful data. We've been using in many places a small dataset of animals and their number of legs, wings... I'd use the same here.",
        "createdAt" : "2018-12-06T10:10:19Z",
        "updatedAt" : "2018-12-07T22:24:27Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "5ca8ed1f-cada-4a87-beb9-c98e73725fb1",
        "parentId" : "cf9b4264-c03f-4ded-a0bc-5f633a41aa1c",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "Changed. I didn't want to use a dataset with numeric data since I think that the example should demonstrate the tie between multiindexes and metadataframes. Instead I used a weather related example (which was the inspiration for this addition in the first place)",
        "createdAt" : "2018-12-07T02:01:08Z",
        "updatedAt" : "2018-12-07T22:24:27Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      }
    ],
    "commit" : "9159b2dcc9da90128f63552fe7e83d7270d34518",
    "line" : 242,
    "diffHunk" : "@@ -1,1 +484,488 @@        >>> df = pd.DataFrame([['HI', 'Temp'], ['HI', 'Precip'],\n        ...                    ['NJ', 'Temp'], ['NJ', 'Precip']],\n        ...                   columns=['a', 'b'])\n        >>> df\n              a       b"
  },
  {
    "id" : "23e15102-c7bc-4484-9272-c98d8c18b6c7",
    "prId" : 23291,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23291#pullrequestreview-167863887",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f165dd74-babe-4aaf-bdde-711f69d29bb3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can just add\r\n```\r\nelif is_list_like(levels):\r\n   levels = list(levels)\r\n```",
        "createdAt" : "2018-10-23T16:58:45Z",
        "updatedAt" : "2018-10-25T06:12:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3c2e9bac-37b2-4c05-8221-5b31c9dc70cb",
        "parentId" : "f165dd74-babe-4aaf-bdde-711f69d29bb3",
        "authorId" : "991036bf-cf2e-4c40-bc03-e2569d828f5f",
        "body" : "Tried this approach, but unfortunately, it breaks functionality where one passes to set_levels CategoricalIndex (or in general, something else which is more complex than a list).\r\n\r\nSpecifically, this turns\r\n\r\n```python\r\nindex.set_levels(CategoricalIndex(list(\"bac\")), 0)\r\n```\r\n\r\ninto \r\n\r\n```python\r\nindex.set_levels(list(\"bac\"), 0)\r\n```\r\n\r\nand breaks [test_set_levels_categorical](https://github.com/pandas-dev/pandas/blob/master/pandas/tests/indexes/multi/test_get_set.py#L385)\r\n\r\nI can add change this with \r\n\r\n```python\r\nif is_list_like(levels) and not isinstance(levels, Index):\r\n```\r\n\r\nbut I'm not sure what's better",
        "createdAt" : "2018-10-24T06:15:41Z",
        "updatedAt" : "2018-10-25T06:12:22Z",
        "lastEditedBy" : "991036bf-cf2e-4c40-bc03-e2569d828f5f",
        "tags" : [
        ]
      },
      {
        "id" : "684a92cd-185a-4138-a27d-99225c125812",
        "parentId" : "f165dd74-babe-4aaf-bdde-711f69d29bb3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "the 2nd would be fine, we don't need/want any more api checkers)",
        "createdAt" : "2018-10-24T11:48:22Z",
        "updatedAt" : "2018-10-25T06:12:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "15f3505fe8030c83d70920eb775a23cb45ad3e1a",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +394,398 @@\n        if level is not None and not is_list_like(level):\n            if not is_list_like(levels):\n                raise TypeError(\"Levels must be list-like\")\n            if is_list_like(levels[0]):"
  },
  {
    "id" : "d0e0346e-f94b-42db-81ae-7470126bfdf2",
    "prId" : 23752,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23752#pullrequestreview-176177987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc5be7c4-6bde-407b-9455-afc7f35e3839",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think you need a blank line *before* the deprecated? @datapythonista ",
        "createdAt" : "2018-11-18T23:18:39Z",
        "updatedAt" : "2018-12-05T17:44:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3fd9197a-bcc2-460e-9556-c542b63567ba",
        "parentId" : "bc5be7c4-6bde-407b-9455-afc7f35e3839",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Yeah, changed.",
        "createdAt" : "2018-11-19T08:10:16Z",
        "updatedAt" : "2018-12-05T17:44:58Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8d00ad61651cfcecf6f9da6a1b23ee232531e8f",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +135,139 @@\n        .. deprecated:: 0.24.0\n            Use ``codes`` instead\n    sortorder : optional int\n        Level of sortedness (must be lexicographically sorted by that"
  },
  {
    "id" : "3b290beb-afdd-4373-868a-fd191fb6ff76",
    "prId" : 23752,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23752#pullrequestreview-176111981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3b39a84-f6f2-45fd-9a56-17750862a613",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a versionadded tag",
        "createdAt" : "2018-11-18T23:18:48Z",
        "updatedAt" : "2018-12-05T17:44:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8d00ad61651cfcecf6f9da6a1b23ee232531e8f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +127,131 @@    levels : sequence of arrays\n        The unique labels for each level\n    codes : sequence of arrays\n        Integers for each level designating which label at each location\n"
  },
  {
    "id" : "c3c183d2-14df-4bde-af24-fc68abf9aedb",
    "prId" : 23752,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23752#pullrequestreview-176111981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53fb1638-67fb-4872-9f5f-a12df7aaee52",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can remove labels",
        "createdAt" : "2018-11-18T23:19:02Z",
        "updatedAt" : "2018-12-05T17:44:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8d00ad61651cfcecf6f9da6a1b23ee232531e8f",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +178,182 @@    names\n    levels\n    codes\n    nlevels\n    levshape"
  },
  {
    "id" : "906b8c0a-1ca6-4cfb-b26d-9cbe87ae2fa1",
    "prId" : 23752,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23752#pullrequestreview-180578100",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55ca2b07-7ee4-473f-b8c2-9f5a195825ac",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a versinoadded tag here",
        "createdAt" : "2018-12-02T21:13:50Z",
        "updatedAt" : "2018-12-05T17:44:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8d00ad61651cfcecf6f9da6a1b23ee232531e8f",
    "line" : 267,
    "diffHunk" : "@@ -1,1 +638,642 @@           New name for deprecated method `set_labels`.\n\n        Parameters\n        ----------\n        codes : sequence or list of sequence"
  },
  {
    "id" : "5c22de0f-5da0-4ee6-96c9-785ab649ec39",
    "prId" : 25063,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25063#pullrequestreview-198823514",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "363fcddb-49b0-4058-9f89-a63f5c7d26bd",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This makes the meaning of `sort=None` consistent across Index & MultiIndex, but is a change from prior versions. Are we OK with that?\r\n\r\nEither way is fine by me.",
        "createdAt" : "2019-01-31T21:04:00Z",
        "updatedAt" : "2019-02-01T20:06:14Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "3e3780e6-4c08-432c-986c-fbca99ba287a",
        "parentId" : "363fcddb-49b0-4058-9f89-a63f5c7d26bd",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yeah, I am not fully sure why I needed to change this. I suppose because you actually already changed it in your PR (so the tests you added need this). \r\nBut indeed, I can also change the test so it checks for an error instead of a warning. But on the other hand, it is just yet another inconsistency ..\r\n\r\n",
        "createdAt" : "2019-01-31T21:11:59Z",
        "updatedAt" : "2019-02-01T20:06:14Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c437cfcb-68de-4d41-959c-ea0550b99db2",
        "parentId" : "363fcddb-49b0-4058-9f89-a63f5c7d26bd",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I couldn't remember if I changed it or left it :)\r\n\r\nAgain, it's not clear to me what's best, but I very slightly lean towards keeping the previous behavior of raising here.",
        "createdAt" : "2019-01-31T21:15:25Z",
        "updatedAt" : "2019-02-01T20:06:14Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "4fd02319-159d-4e73-beaa-509d94248aa9",
        "parentId" : "363fcddb-49b0-4058-9f89-a63f5c7d26bd",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK, changed this to previous behaviour of not raising",
        "createdAt" : "2019-01-31T21:21:46Z",
        "updatedAt" : "2019-02-01T20:06:14Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "213d3fd7-979c-4025-a675-6a0423e18751",
        "parentId" : "363fcddb-49b0-4058-9f89-a63f5c7d26bd",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think you have an extra \"not\" there :)\r\n\r\nThis will raise when there are incomparable objects.",
        "createdAt" : "2019-01-31T21:24:38Z",
        "updatedAt" : "2019-02-01T20:06:14Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "6837e160-e5ac-4eb3-ab67-4e76e412f274",
        "parentId" : "363fcddb-49b0-4058-9f89-a63f5c7d26bd",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "sorry, about which line are you speaking?",
        "createdAt" : "2019-01-31T21:26:25Z",
        "updatedAt" : "2019-02-01T20:06:14Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0ea57e34-cad8-4b2a-8006-45826da20817",
        "parentId" : "363fcddb-49b0-4058-9f89-a63f5c7d26bd",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Your comment \r\nhttps://github.com/pandas-dev/pandas/pull/25063#discussion_r252845226 not the code :)",
        "createdAt" : "2019-01-31T21:27:31Z",
        "updatedAt" : "2019-02-01T20:06:14Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c75b5811-0f58-43f1-8604-0fee6a0b5b1d",
        "parentId" : "363fcddb-49b0-4058-9f89-a63f5c7d26bd",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "ah, yes :-)",
        "createdAt" : "2019-01-31T21:28:20Z",
        "updatedAt" : "2019-02-01T20:06:14Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c5a0376dd93c38ffe71225cec9cea15fd9624f0",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +3012,3016 @@                                  assume_unique=True)\n        difference = this.values.take(label_diff)\n        if sort is None:\n            difference = sorted(difference)\n"
  },
  {
    "id" : "cef88794-bd37-4d7b-9664-e88e658bb1b8",
    "prId" : 25189,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25189#pullrequestreview-201547915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "345e8d12-0059-4bee-9127-0acd8b05295c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we fully test this? (test with tuples as well)",
        "createdAt" : "2019-02-08T02:43:06Z",
        "updatedAt" : "2019-02-20T16:02:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "73ac6294-64f4-45a9-859e-ce00397d31ce",
        "parentId" : "345e8d12-0059-4bee-9127-0acd8b05295c",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "@jreback: not fully. i've added a test that is basically a cut and paste from another test. could parameterise now or refactor in a follow-on PR. i prefer the later since some other refactoring of the tests may be possible and may detract from the current change.",
        "createdAt" : "2019-02-08T12:05:46Z",
        "updatedAt" : "2019-02-20T16:02:57Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "403789a72616d16cb843680f8f1941b7beef0651",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +331,335 @@            arrays = list(arrays)\n\n        # Check if elements of array are list-like\n        for array in arrays:\n            if not is_list_like(array):"
  },
  {
    "id" : "a125efb0-df48-4c96-a094-b0f3ab2955d9",
    "prId" : 25189,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25189#pullrequestreview-201555521",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa7a0f32-c6e3-4bb0-979b-33240507aeff",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "We could maybe think about how to improve the actual message as well, because on a first read I was interpreting this as \"Input must be [a list] or [a sequence of array-likes]\" (while of course it is \"[list or sequence] of array-likes\"), which confused me at first ..\r\n\r\nTo be true to the code, what it actually needs to be is a \"list-like of list-likes\"? Which is also not that nice to write .. \r\nI am wondering if a more strict error message (stricter than what we allow), something like \"Input must be a list of arrays\" is not actually easier to understand for users.",
        "createdAt" : "2019-02-08T08:25:55Z",
        "updatedAt" : "2019-02-20T16:02:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "358d7439-0839-4d3a-8144-1a756c2786ae",
        "parentId" : "fa7a0f32-c6e3-4bb0-979b-33240507aeff",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I was also thinking that the messages should be changed from `Input must be...` to something along the lines of `'arrays' parameter of MultiIndex.from_arrays must be...` and then regurgitate whatever is in the docstring. ",
        "createdAt" : "2019-02-08T08:44:43Z",
        "updatedAt" : "2019-02-20T16:02:57Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "9b2e246e-b9e9-4d62-87be-6808a8a05320",
        "parentId" : "fa7a0f32-c6e3-4bb0-979b-33240507aeff",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> I am wondering if a more strict error message (stricter than what we allow), something like \"Input must be a list of arrays\" is not actually easier to understand for users.\r\n\r\nIIUC the reason that a sequence is accepted is to provide backward compatibility with zip. So sequence does not necessarily need to be mentioned in the docstring.",
        "createdAt" : "2019-02-08T12:28:28Z",
        "updatedAt" : "2019-02-20T16:02:57Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "403789a72616d16cb843680f8f1941b7beef0651",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +325,329 @@                   names=['number', 'color'])\n        \"\"\"\n        error_msg = \"Input must be a list / sequence of array-likes.\"\n        if not is_list_like(arrays):\n            raise TypeError(error_msg)"
  },
  {
    "id" : "47533605-4dab-4ceb-9ccb-849c3c8542e8",
    "prId" : 26355,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26355#pullrequestreview-236424492",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5fed865-cec0-449c-99f6-c85a921fb81b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a comment here that this is a single-level MI",
        "createdAt" : "2019-05-12T14:42:44Z",
        "updatedAt" : "2019-05-13T18:15:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "01080d68-22ea-460b-9869-5ad8715cc6d8",
        "parentId" : "e5fed865-cec0-449c-99f6-c85a921fb81b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what do new_levels and new_codes look like here (from your test)",
        "createdAt" : "2019-05-12T14:43:25Z",
        "updatedAt" : "2019-05-13T18:15:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1919be9f-6be9-4050-9384-87d7b485abb2",
        "parentId" : "e5fed865-cec0-449c-99f6-c85a921fb81b",
        "authorId" : "093d4877-be84-4d27-a655-b3adee9eed25",
        "body" : "The value of `new_levels` is `[array(['1', '2', '3'], dtype='<U21')]`.\r\nThe value of `new_codes` is `[FrozenNDArray([0, 2], dtype='int8')]`",
        "createdAt" : "2019-05-12T15:09:17Z",
        "updatedAt" : "2019-05-13T18:15:45Z",
        "lastEditedBy" : "093d4877-be84-4d27-a655-b3adee9eed25",
        "tags" : [
        ]
      },
      {
        "id" : "da4d276d-4aa4-4ede-b7ec-1773b122717e",
        "parentId" : "e5fed865-cec0-449c-99f6-c85a921fb81b",
        "authorId" : "093d4877-be84-4d27-a655-b3adee9eed25",
        "body" : "Added a comment in d47089ee3ef92152f9577602b84073455bb49763",
        "createdAt" : "2019-05-12T15:25:38Z",
        "updatedAt" : "2019-05-13T18:15:45Z",
        "lastEditedBy" : "093d4877-be84-4d27-a655-b3adee9eed25",
        "tags" : [
        ]
      },
      {
        "id" : "7bc9066e-eb7f-4a13-9803-fb1e536a55b7",
        "parentId" : "e5fed865-cec0-449c-99f6-c85a921fb81b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok use levels[0].take(codes[0])",
        "createdAt" : "2019-05-12T15:28:09Z",
        "updatedAt" : "2019-05-13T18:15:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f5f4bec8-63a3-458b-a137-41c7188ad3ad",
        "parentId" : "e5fed865-cec0-449c-99f6-c85a921fb81b",
        "authorId" : "093d4877-be84-4d27-a655-b3adee9eed25",
        "body" : "Done in 159a828e910d1d2f2b17abcd7a7fb0b5acc79b7a",
        "createdAt" : "2019-05-12T15:35:51Z",
        "updatedAt" : "2019-05-13T18:15:45Z",
        "lastEditedBy" : "093d4877-be84-4d27-a655-b3adee9eed25",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1d0565e279fcc83e381faef1428c4d4d282c3c1",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +946,950 @@            new_codes.append(level_codes)\n\n        if len(new_levels) == 1:\n            # a single-level multi-index\n            return Index(new_levels[0].take("
  },
  {
    "id" : "be930ace-341b-4a4e-a50d-f95764af8d9e",
    "prId" : 26408,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26408#pullrequestreview-238721131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "609f10d4-822c-4e43-9f9d-538c231f2285",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pls use new style formatting, e.g. .format()",
        "createdAt" : "2019-05-16T11:43:34Z",
        "updatedAt" : "2019-05-31T04:51:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "05026239-b000-4e25-b672-182d702986b4",
        "parentId" : "609f10d4-822c-4e43-9f9d-538c231f2285",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can change the other usages in this function as well",
        "createdAt" : "2019-05-16T11:44:24Z",
        "updatedAt" : "2019-05-31T04:51:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b09e35d9-69a0-4618-ad01-830d7737de1f",
        "parentId" : "609f10d4-822c-4e43-9f9d-538c231f2285",
        "authorId" : "f7f26e80-fbf6-4c86-9239-b1f32f9f4826",
        "body" : "Thanks, I have reformatted the error string",
        "createdAt" : "2019-05-17T03:05:07Z",
        "updatedAt" : "2019-05-31T04:51:19Z",
        "lastEditedBy" : "f7f26e80-fbf6-4c86-9239-b1f32f9f4826",
        "tags" : [
        ]
      }
    ],
    "commit" : "a141e4041cca521a31c09ab5a1c03f409bc0ce42",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +313,317 @@                           level_len=len(level)))\n                raise ValueError(msg)\n            if len(level_codes) and level_codes.min() < -1:\n                raise ValueError(\"On level {level}, code value ({code})\"\n                                 \" < -1\".format("
  },
  {
    "id" : "012455f9-ff88-4eb9-816d-f61ba5135e5c",
    "prId" : 26408,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26408#pullrequestreview-239277669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecd2712c-1536-4ea4-9521-9c34395af6a1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you return the codes here (and change the doc-string of _verify_integrity",
        "createdAt" : "2019-05-19T18:36:57Z",
        "updatedAt" : "2019-05-31T04:51:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "48afa600-e6c0-49cb-9004-9346bc33c05d",
        "parentId" : "ecd2712c-1536-4ea4-9521-9c34395af6a1",
        "authorId" : "f7f26e80-fbf6-4c86-9239-b1f32f9f4826",
        "body" : "refactored corresponding code segments and doc-string updated",
        "createdAt" : "2019-05-20T02:45:56Z",
        "updatedAt" : "2019-05-31T04:51:19Z",
        "lastEditedBy" : "f7f26e80-fbf6-4c86-9239-b1f32f9f4826",
        "tags" : [
        ]
      }
    ],
    "commit" : "a141e4041cca521a31c09ab5a1c03f409bc0ce42",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +323,327 @@                                     level=i))\n\n        codes = [self._validate_codes(level, code)\n                 for level, code in zip(levels, codes)]\n        new_codes = FrozenList(codes)"
  },
  {
    "id" : "7bb431b0-6485-47ef-8a84-0d3a20ce4197",
    "prId" : 26408,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26408#pullrequestreview-243162594",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43bb3895-567b-4313-a7e4-96303590fb2f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "don't we end up calling verify_integrity twice? here (and in _set_codes)?",
        "createdAt" : "2019-05-29T02:25:54Z",
        "updatedAt" : "2019-05-31T04:51:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "654ce76f-a350-4535-be9c-6732ead32ca6",
        "parentId" : "43bb3895-567b-4313-a7e4-96303590fb2f",
        "authorId" : "f7f26e80-fbf6-4c86-9239-b1f32f9f4826",
        "body" : "Now that the set_codes are called with default verify_integrity=False, verification would not be called twice",
        "createdAt" : "2019-05-29T10:11:31Z",
        "updatedAt" : "2019-05-31T04:51:19Z",
        "lastEditedBy" : "f7f26e80-fbf6-4c86-9239-b1f32f9f4826",
        "tags" : [
        ]
      }
    ],
    "commit" : "a141e4041cca521a31c09ab5a1c03f409bc0ce42",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +1803,1807 @@        self._set_codes(codes)\n        new_codes = self._verify_integrity()\n        self._set_codes(new_codes)\n        self._set_names(names)\n        self.sortorder = sortorder"
  },
  {
    "id" : "595e8ec8-42a1-465a-98e9-b88ba4fc6303",
    "prId" : 27576,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27576#pullrequestreview-266764874",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75208c59-1bda-4091-8e98-3629318717a9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string",
        "createdAt" : "2019-07-25T17:03:13Z",
        "updatedAt" : "2019-07-25T19:42:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6d3aaf64-618b-4adf-8fbf-67d750c1e1f7",
        "parentId" : "75208c59-1bda-4091-8e98-3629318717a9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sure",
        "createdAt" : "2019-07-25T17:09:38Z",
        "updatedAt" : "2019-07-25T19:42:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0559a17010318cbd1da18fce62cb78994663a9e",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +3465,3469 @@\n\ndef maybe_droplevels(index, key):\n    \"\"\"\n    Attempt to drop level or levels from the given index."
  },
  {
    "id" : "c2e916ba-eac8-4269-b63c-53ed1ebea47d",
    "prId" : 27576,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27576#pullrequestreview-266911453",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e21d5d51-4422-4aca-baff-3a1eb54fe7e8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in future maybe pull this out to a module level function",
        "createdAt" : "2019-07-25T22:11:47Z",
        "updatedAt" : "2019-07-25T22:11:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0559a17010318cbd1da18fce62cb78994663a9e",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +2749,2753 @@\n        # different name to distinguish from maybe_droplevels\n        def maybe_mi_droplevels(indexer, levels, drop_level: bool):\n            if not drop_level:\n                return self[indexer]"
  },
  {
    "id" : "b361b52e-0bea-4331-a7c7-7c761e593321",
    "prId" : 28097,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28097#pullrequestreview-307492212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "753e893a-2d72-450f-a501-ecd58e72ec20",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, can you eliminate the branch, and just always pass ``fill_value=True`` ?",
        "createdAt" : "2019-10-25T12:54:13Z",
        "updatedAt" : "2019-10-25T12:54:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "55ded405-8a54-4d33-a665-4895eded2987",
        "parentId" : "753e893a-2d72-450f-a501-ecd58e72ec20",
        "authorId" : "7627866b-49e8-48fc-9905-a5182558148d",
        "body" : "If remove the branch, for example,\r\n```\r\ndf = DataFrame([[\"x\", 1, 10], [\"y\", 2, 20]], columns=[\"A\", \"B\", \"C\"]).set_index([\"A\", \"B\"])\r\nresult = df.groupby(level=[\"A\", \"B\"]).sum() \r\n```\r\nraise exception. ",
        "createdAt" : "2019-10-25T16:25:19Z",
        "updatedAt" : "2019-10-25T16:25:19Z",
        "lastEditedBy" : "7627866b-49e8-48fc-9905-a5182558148d",
        "tags" : [
        ]
      },
      {
        "id" : "ec85de96-969a-4c7a-af9b-ef0a3864e02d",
        "parentId" : "753e893a-2d72-450f-a501-ecd58e72ec20",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually i think this is incorrect \r\n\r\n@WillAyd wasn’t done here\r\n\r\nthis branch can be simplified i think",
        "createdAt" : "2019-10-25T22:57:21Z",
        "updatedAt" : "2019-10-25T22:57:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "88834159-ec1c-404e-9bd1-fa4770aba9cb",
        "parentId" : "753e893a-2d72-450f-a501-ecd58e72ec20",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Sorry misread the approval above",
        "createdAt" : "2019-10-25T23:02:46Z",
        "updatedAt" : "2019-10-25T23:02:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "860086a5-46fd-4481-a69b-65c65a4fae26",
        "parentId" : "753e893a-2d72-450f-a501-ecd58e72ec20",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "@proost do you mind simplifying this in a follow up PR?",
        "createdAt" : "2019-10-25T23:31:11Z",
        "updatedAt" : "2019-10-25T23:31:12Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef08517703cdb61ba9fb6420a0f9797f9744f85d",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1312,1316 @@            grouper = level_index.take(codes)\n        else:\n            grouper = level_index.take(codes, fill_value=True)\n\n        return grouper, codes, level_index"
  },
  {
    "id" : "8825ad4e-8480-4963-819f-17410ca925a8",
    "prId" : 28735,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28735#pullrequestreview-296200026",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47ef60d7-7fa4-4171-857a-5ec82b74f063",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "youn't need to make the private function, the point of the cache_readonly decorate is to cache the results here",
        "createdAt" : "2019-10-02T11:43:23Z",
        "updatedAt" : "2019-10-03T19:03:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "620c699b-b86f-4a4c-8092-146ed530a6a7",
        "parentId" : "47ef60d7-7fa4-4171-857a-5ec82b74f063",
        "authorId" : "60c8e4cb-b7ef-4974-822d-c9a482b0c3b3",
        "body" : "I made the private function to be able to call it in _verify_integrity and prevent duplicate code.\r\nWhat would you suggest? Does this prevent the result to be cached correctly?",
        "createdAt" : "2019-10-02T12:25:24Z",
        "updatedAt" : "2019-10-03T19:03:53Z",
        "lastEditedBy" : "60c8e4cb-b7ef-4974-822d-c9a482b0c3b3",
        "tags" : [
        ]
      },
      {
        "id" : "bfd447ff-3831-451f-86c9-12ce2b72eba7",
        "parentId" : "47ef60d7-7fa4-4171-857a-5ec82b74f063",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ahh i c, ok then. can you add a doc-string to _lexsort_depth in that case (and typing -> int)",
        "createdAt" : "2019-10-02T12:27:40Z",
        "updatedAt" : "2019-10-03T19:03:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c09450684f5426cc9d51b622892369c6fffe040c",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1795,1799 @@            return self.sortorder\n\n        return self._lexsort_depth()\n\n    def _lexsort_depth(self) -> int:"
  },
  {
    "id" : "e37cd1f5-1965-47ef-b3df-7b3e95dddaef",
    "prId" : 28919,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28919#pullrequestreview-320743811",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75682c1f-2976-43cf-81f0-b717050c9473",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "rather than having changing MultiIndex like this, can you just update .get_loc on Index? e.g. it correctly returns -1 for a null input?",
        "createdAt" : "2019-11-20T12:55:14Z",
        "updatedAt" : "2020-01-07T13:28:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "77f38bfa-1090-4106-b5e0-089b1ab59fea",
        "parentId" : "75682c1f-2976-43cf-81f0-b717050c9473",
        "authorId" : "7627866b-49e8-48fc-9905-a5182558148d",
        "body" : "@jreback \r\nWell, That is more than this issue. For example,\r\n```\r\nIn [2]: idx = pd.Index(['a','b',None,'c','d']) \r\n   ...: idx.get_loc(None)                                                       \r\nOut[2]: 2\r\n```\r\nLike this case, some Index `.get_loc` can find NA value. I thought it meant NA value doesn't consider as missing. But if return -1 for a null input, then it regards as missing. From then, this PR get off topic. this PR deals with Multiindex's missing and single index missing both. I think for single index separate issue.\r\n ",
        "createdAt" : "2019-11-21T09:32:22Z",
        "updatedAt" : "2020-01-07T13:28:36Z",
        "lastEditedBy" : "7627866b-49e8-48fc-9905-a5182558148d",
        "tags" : [
        ]
      }
    ],
    "commit" : "29621b231ca7d7105069ae9d6f2a1f31d2bc471c",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +2579,2583 @@        if is_scalar(key) and isna(key):\n            return -1\n        else:\n            return level_index.get_loc(key)\n"
  },
  {
    "id" : "8ddb6aee-a0f8-4eb2-9405-d68d580a4716",
    "prId" : 28919,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28919#pullrequestreview-339232180",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d8c5d05-08f1-46e3-a9fb-d6e5d29e8076",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "the edits from L3408 down to here look like they are just nice cleanups independent of the rest of this PR.  is that accurate?",
        "createdAt" : "2020-01-07T02:19:52Z",
        "updatedAt" : "2020-01-07T13:28:36Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ad2b4e68-262d-4d9d-a233-d2d9ced35583",
        "parentId" : "1d8c5d05-08f1-46e3-a9fb-d6e5d29e8076",
        "authorId" : "7627866b-49e8-48fc-9905-a5182558148d",
        "body" : "@jbrockmendel \r\nFor NA values, someone fixes #30677, then more accurate. \"Index.isin\" has a bug nonetheless in terms of checking NA value can be possible, This is more accurate",
        "createdAt" : "2020-01-07T13:25:43Z",
        "updatedAt" : "2020-01-07T13:28:36Z",
        "lastEditedBy" : "7627866b-49e8-48fc-9905-a5182558148d",
        "tags" : [
        ]
      }
    ],
    "commit" : "29621b231ca7d7105069ae9d6f2a1f31d2bc471c",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +3409,3413 @@            if levs.size == 0:\n                return np.zeros(len(levs), dtype=np.bool_)\n            return levs.isin(values)\n\n"
  },
  {
    "id" : "235f4eb7-ba45-41c4-8549-89286cbbbc08",
    "prId" : 28933,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28933#pullrequestreview-318059295",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00329bd2-ceba-483a-ba8b-9546e0b454d9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you move this to a separate function. Please type & document",
        "createdAt" : "2019-11-18T00:42:55Z",
        "updatedAt" : "2020-02-02T21:30:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "025d304ae21f1003bc3dedff732ab9f16da77dee",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +3083,3087 @@        if indexer is None:\n            return Int64Index([])._ndarray_values\n\n        indexer = self._reorder_indexer(seq, indexer)\n"
  },
  {
    "id" : "e0fa4844-579d-49ca-9266-779afae06ded",
    "prId" : 28933,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28933#pullrequestreview-320345709",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62d620cd-c9b9-42bb-a07c-ef0929a447a5",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We iterate over `seq`, so presumably it can't be a label or a slice. Can you confirm that it's just listlike or arraylike?",
        "createdAt" : "2019-11-18T17:15:14Z",
        "updatedAt" : "2020-02-02T21:30:15Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "7d8f60ff-558a-47e5-896e-cd096ca1afd9",
        "parentId" : "62d620cd-c9b9-42bb-a07c-ef0929a447a5",
        "authorId" : "60c8e4cb-b7ef-4974-822d-c9a482b0c3b3",
        "body" : "This is the same argument as in .get_locs, it is always a list, sometime with only one element, and the element can be a slice/label/list/mask for one level of the multi index.",
        "createdAt" : "2019-11-18T17:40:59Z",
        "updatedAt" : "2020-02-02T21:30:15Z",
        "lastEditedBy" : "60c8e4cb-b7ef-4974-822d-c9a482b0c3b3",
        "tags" : [
        ]
      },
      {
        "id" : "44b68396-df59-485f-99dd-b2c10276daa3",
        "parentId" : "62d620cd-c9b9-42bb-a07c-ef0929a447a5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think we just use ArrayLike here (can you try to type seq as well)",
        "createdAt" : "2019-11-20T13:33:31Z",
        "updatedAt" : "2020-02-02T21:30:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "79256a64-c909-4f94-b462-a3422e77da14",
        "parentId" : "62d620cd-c9b9-42bb-a07c-ef0929a447a5",
        "authorId" : "60c8e4cb-b7ef-4974-822d-c9a482b0c3b3",
        "body" : "Ok for ArrayLike.\r\nFor seq, I logged the type passed when running the test suite, and seq is a tuple that can contains the following type:\r\n```\r\n<class 'int'>\r\n<class 'list'>\r\n<class 'numpy.int64'>\r\n<class 'numpy.ndarray'>\r\n<class 'pandas.core.indexes.numeric.Int64Index'>\r\n<class 'pandas.core.series.Series'>\r\n<class 'set'>\r\n<class 'slice'>\r\n<class 'str'>\r\n<class 'tuple'>\r\n```\r\nSo the type of seq would be something like \r\n`Tuple[Union[Scalar, AnyArrayLike, Iterable], …] `\r\nDoes that make sense?",
        "createdAt" : "2019-11-20T21:48:50Z",
        "updatedAt" : "2020-02-02T21:30:15Z",
        "lastEditedBy" : "60c8e4cb-b7ef-4974-822d-c9a482b0c3b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "025d304ae21f1003bc3dedff732ab9f16da77dee",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +3097,3101 @@        Parameters\n        ----------\n        seq : label/slice/list/mask or a sequence of such\n        indexer: an Int64Index indexer of self\n"
  },
  {
    "id" : "2b75d1d1-15f3-43c5-9022-c96207bd3d71",
    "prId" : 28933,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28933#pullrequestreview-318514880",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2add1356-74e5-451b-8f98-17baa72b80ff",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is `k` an array? If so, pass `k.dtype` here.",
        "createdAt" : "2019-11-18T17:15:51Z",
        "updatedAt" : "2020-02-02T21:30:15Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "21e43bae-da54-48d1-90dd-1a13665a59c9",
        "parentId" : "2add1356-74e5-451b-8f98-17baa72b80ff",
        "authorId" : "60c8e4cb-b7ef-4974-822d-c9a482b0c3b3",
        "body" : "k can be a slice, a mask, a single label or a list.\r\nThe only case to really handle here is a list, because it is the only kind of input that can be used in a different order than the level. For the other, it just ensure that it is not put out of order. ",
        "createdAt" : "2019-11-18T17:44:45Z",
        "updatedAt" : "2020-02-02T21:30:15Z",
        "lastEditedBy" : "60c8e4cb-b7ef-4974-822d-c9a482b0c3b3",
        "tags" : [
        ]
      },
      {
        "id" : "341d453a-190e-4428-9725-de98cc9d6a5e",
        "parentId" : "2add1356-74e5-451b-8f98-17baa72b80ff",
        "authorId" : "60c8e4cb-b7ef-4974-822d-c9a482b0c3b3",
        "body" : "Most of the time (I mean in the example for multi index in the doc for example), k is a python list of label. ",
        "createdAt" : "2019-11-18T17:48:24Z",
        "updatedAt" : "2020-02-02T21:30:15Z",
        "lastEditedBy" : "60c8e4cb-b7ef-4974-822d-c9a482b0c3b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "025d304ae21f1003bc3dedff732ab9f16da77dee",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +3127,3131 @@            if com.is_bool_indexer(k):\n                new_order = np.arange(n)[indexer]\n            elif is_list_like(k):\n                # Generate a map with all level codes as sorted initially\n                key_order_map = np.ones(len(self.levels[i]), dtype=np.uint64) * len("
  },
  {
    "id" : "94614f99-7b75-4754-a07a-d3f078cb5ef9",
    "prId" : 28933,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28933#pullrequestreview-320398131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75822e30-0756-46b6-9e21-a7da159d6405",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I *think* that if you _sort_levels_monotonic then you don't need to reorder the indexers. is this possible?",
        "createdAt" : "2019-11-20T13:42:50Z",
        "updatedAt" : "2020-02-02T21:30:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ab1edf3a-54d8-4396-ba78-c482588d0d37",
        "parentId" : "75822e30-0756-46b6-9e21-a7da159d6405",
        "authorId" : "60c8e4cb-b7ef-4974-822d-c9a482b0c3b3",
        "body" : "The levels of the given index is maybe already monotonic, but we don't want to have the order as the index, but the same order as the keys in seq.\r\nIn the test case, the index are sorted, but we wanna return them in another order.\r\nIf I don't reorder the indexers, I will have to reorder the index itself before getting the indexer.\r\nI did try this approach at the beginnig (reindexing then getting the indexer as previously done), but this is not possible due to the variety of type that can be given as key (slice, mask, array).\r\n",
        "createdAt" : "2019-11-20T22:22:34Z",
        "updatedAt" : "2020-02-02T21:30:15Z",
        "lastEditedBy" : "60c8e4cb-b7ef-4974-822d-c9a482b0c3b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "025d304ae21f1003bc3dedff732ab9f16da77dee",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +3130,3134 @@                # Generate a map with all level codes as sorted initially\n                key_order_map = np.ones(len(self.levels[i]), dtype=np.uint64) * len(\n                    self.levels[i]\n                )\n                # Set order as given in the indexer list"
  },
  {
    "id" : "264a99ff-30b8-4e3e-8c93-2d5647936d49",
    "prId" : 29766,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29766#pullrequestreview-321141943",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67958194-ebd0-4aa5-a2fb-b9d9cc44224f",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "same",
        "createdAt" : "2019-11-21T12:17:46Z",
        "updatedAt" : "2019-11-22T18:06:06Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "ee3573af-de87-4978-b8cb-2d3b50049b3f",
        "parentId" : "67958194-ebd0-4aa5-a2fb-b9d9cc44224f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "ideally i think we should just get kwargs out of the signature of this function, but im fine with adding a test for this in the interim",
        "createdAt" : "2019-11-21T19:45:02Z",
        "updatedAt" : "2019-11-22T18:06:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb15c4742ce9807dfc71d533083d2496675a05b2",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +953,957 @@        names = self._validate_names(name=name, names=names, deep=deep)\n        if \"labels\" in kwargs:\n            raise TypeError(\"'labels' argument has been removed; use 'codes' instead\")\n        if deep:\n            from copy import deepcopy"
  },
  {
    "id" : "ec291fd2-a7c0-4f44-b4df-63b7434e77fc",
    "prId" : 29840,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29840#pullrequestreview-323794860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "787f75ac-282c-4285-a543-6aeed0140a1b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i would move this to pandas.core.dtypes.cast",
        "createdAt" : "2019-11-27T13:04:31Z",
        "updatedAt" : "2019-11-29T20:37:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bd56aba5-edeb-4045-bea2-4261bbd8d3ab",
        "parentId" : "787f75ac-282c-4285-a543-6aeed0140a1b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "its only ever used here, and doesnt really have anything to do with dtypes",
        "createdAt" : "2019-11-27T16:17:15Z",
        "updatedAt" : "2019-11-29T20:37:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5d019ac0c5f52369a9d578ce8e9593aa2b6fe66",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +3434,3438 @@\n\ndef _coerce_indexer_frozen(array_like, categories, copy: bool = False) -> np.ndarray:\n    \"\"\"\n    Coerce the array_like indexer to the smallest integer dtype that can encode all"
  },
  {
    "id" : "4ce5015e-a225-4679-be64-bcc4b2d7343d",
    "prId" : 29840,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29840#pullrequestreview-323979933",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "258d766a-7802-4c61-acbc-3584a8e7b8e4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shoulnt' you be calling _coerce_indexer_frozen here (with copy=True)?",
        "createdAt" : "2019-11-27T20:56:03Z",
        "updatedAt" : "2019-11-29T20:37:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f649ae5f-020c-4380-98f9-64e73423cbbc",
        "parentId" : "258d766a-7802-4c61-acbc-3584a8e7b8e4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "no, _coerce_indexer_frozen returns an ndarrary that is not writeable, whereas here we have a non-writeable ndarray and need to get a writeable copy",
        "createdAt" : "2019-11-27T22:49:20Z",
        "updatedAt" : "2019-11-29T20:37:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5d019ac0c5f52369a9d578ce8e9593aa2b6fe66",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +1095,1099 @@                nan_index = len(level)\n                level = np.append(level, na_rep)\n                assert not level_codes.flags.writeable  # i.e. copy is needed\n                level_codes = level_codes.copy()  # make writeable\n                level_codes[mask] = nan_index"
  },
  {
    "id" : "ef3803fc-b777-4f97-96e5-a1266a1e5375",
    "prId" : 30234,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30234#pullrequestreview-331361386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "502858ad-ce5f-464d-8379-25d00892a449",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "These were failing on the `dtype=int64` part. That's only present in the repr on 32-bit systems IIRC, so easier to skip.",
        "createdAt" : "2019-12-12T16:31:52Z",
        "updatedAt" : "2019-12-12T16:31:55Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "418dedf6ae966f65233a982efaf3cbbc7c258224",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +2903,2907 @@        >>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\n\n        >>> mi.get_locs('b')  # doctest: +SKIP\n        array([1, 2], dtype=int64)\n"
  },
  {
    "id" : "8b95b313-94e6-4455-9bec-87ff627ae44d",
    "prId" : 31203,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31203#pullrequestreview-346612020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "feb0ea61-e9a4-441f-8411-d8b2f7a37170",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "FYI, at least in our tests, this isn't changing behavior. I added an `assert com.index_labels_to_array(codes, dtype=object).dtype == com.index_labels_to_array(codes)` temporarily,  so we were always inferring object dtype here (in our tests).",
        "createdAt" : "2020-01-22T14:08:11Z",
        "updatedAt" : "2020-01-22T14:09:00Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "78514cf40bd8c77d6cec7ef2a6938b3ed0099584",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2059,2063 @@        if not isinstance(codes, (np.ndarray, Index)):\n            try:\n                codes = com.index_labels_to_array(codes, dtype=object)\n            except ValueError:\n                pass"
  },
  {
    "id" : "248d4af0-bb14-4a13-9ec2-4e5f7933d4b3",
    "prId" : 31312,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31312#pullrequestreview-356822957",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5aa78c5-4931-4fc1-9faf-2de23597b58a",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "im pretty sure ive seen similar code in other Index subclasses.  is there anything we can share?\r\n\r\nwe only want to catch TypeError from non-comparable types, right?  are there any TypeErrors we might want to not pass on?",
        "createdAt" : "2020-02-10T23:37:24Z",
        "updatedAt" : "2020-02-11T10:39:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "07d674a1-37da-45f3-812b-12af0a414245",
        "parentId" : "d5aa78c5-4931-4fc1-9faf-2de23597b58a",
        "authorId" : "a976b74e-e526-4565-91d1-0e822f104469",
        "body" : "I could only see the same code in the base Index: https://github.com/pandas-dev/pandas/blob/9d66896cd85fdb08c4fdc945105a39e3d1e796f3/pandas/core/indexes/base.py#L2663-L2667\r\n\r\nYes, the goal is to catch TypeError from non-comparable types. I don't see any other reasons for TypeErrors to be raised but I'm not well-versed enough in pandas implementation to be 100% sure.  `Index.intersection()` does the same thing.",
        "createdAt" : "2020-02-11T10:40:11Z",
        "updatedAt" : "2020-02-11T10:40:12Z",
        "lastEditedBy" : "a976b74e-e526-4565-91d1-0e822f104469",
        "tags" : [
        ]
      },
      {
        "id" : "20d9fdf1-1d76-436e-b321-93a48e61c193",
        "parentId" : "d5aa78c5-4931-4fc1-9faf-2de23597b58a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "thanks for taking a look",
        "createdAt" : "2020-02-11T16:51:40Z",
        "updatedAt" : "2020-02-11T16:51:40Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b790aeffcb5f12b71296aca0e304f701fdbc180f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +3323,3327 @@                uniq_tuples = self._inner_indexer(lvals, rvals)[0]\n                sort = False  # uniq_tuples is already sorted\n            except TypeError:\n                pass\n"
  },
  {
    "id" : "c2cad37a-cec0-472c-b946-08d70e3bdafa",
    "prId" : 31662,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31662#pullrequestreview-353409443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99db0b93-c3c3-4230-ad11-7edd7ff04fa9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should think about making try_mi non-nested (just for cleanliness), give it a better name and type in the future.",
        "createdAt" : "2020-02-05T00:58:40Z",
        "updatedAt" : "2020-02-05T00:58:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "eed31c99-cf68-4c48-a2b0-80f91528b163",
        "parentId" : "99db0b93-c3c3-4230-ad11-7edd7ff04fa9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yah there's plenty more to do here, but this is a big step",
        "createdAt" : "2020-02-05T01:07:01Z",
        "updatedAt" : "2020-02-05T01:07:01Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fd6bd963cf2392d778b544bc547185ff10e7e98",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +2327,2331 @@            raise InvalidIndexError(key)\n\n        def _try_mi(k):\n            # TODO: what if a level contains tuples??\n            loc = self.get_loc(k)"
  },
  {
    "id" : "3ae820d1-dab4-48cc-a8aa-dd72be3a6151",
    "prId" : 31736,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31736#pullrequestreview-355620993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cd3b6be-f0a0-4acf-be9e-56818a48019c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would rename to _get_values_for_positional_loc to make this extra clear (I know for indexes we *only* have the concept of positional indexing, but still). follown ok.\r\n\r\nalso pls type / doc-string as much as possible",
        "createdAt" : "2020-02-09T17:03:34Z",
        "updatedAt" : "2020-02-09T17:03:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b3e89025-2166-4270-8cbc-a3dd3b919ada",
        "parentId" : "0cd3b6be-f0a0-4acf-be9e-56818a48019c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> _get_values_for_positional_loc\r\n\r\ngood idea, will follow up",
        "createdAt" : "2020-02-09T17:26:29Z",
        "updatedAt" : "2020-02-09T17:26:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b9b267b0fce93d2437c8fc10749b80b2be0cbaa",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +2353,2357 @@        \"\"\"\n        Do a positional lookup on the given Series, returning either a scalar\n        or a Series.\n\n        Assumes that `series.index is self`"
  },
  {
    "id" : "b41a39b7-60e4-45c9-b01e-ead2c07b5595",
    "prId" : 31857,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31857#pullrequestreview-363036386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b126f24-2839-4cca-993a-ba3c0010af9f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can remove this comment at some point",
        "createdAt" : "2020-02-22T16:05:13Z",
        "updatedAt" : "2020-02-22T16:05:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e01806f623cd346994e78e63a7eb337d89a3e8e",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +2402,2406 @@        new key.\n\n        Only relevant for MultiIndex.\n        \"\"\"\n        # GH#10331"
  },
  {
    "id" : "27ff61fc-08aa-411f-acf6-faa7332ca75f",
    "prId" : 32312,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32312#pullrequestreview-367952006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ca2af21-ee97-4a63-9708-3434b2714c6d",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm not sure about this one in particular so we collectively should clarify\r\n\r\nI don't know that the `is_lexsorted` implementation is really well defined for a MultiIndex. For instance, I think it only (as a bug) ever looks at the first two levels of a MultiIndex, failing conditions like this:\r\n\r\n```python\r\n>>> pd.MultiIndex.from_arrays([['a', 'b', 'c', 'd'],['e', 'f', 'g', 'h'],[\"z\", \"y\", \"x\", \"w\"]]).is_lexsorted()\r\nTrue\r\n>>> pd.MultiIndex.from_arrays([['a', 'b', 'c', 'd'],['e', 'f', 'g', 'h'],[\"w\", \"x\", \"y\", \"z\"]]).is_lexsorted()\r\nTrue\r\n```\r\n\r\n@toobaz any thoughts on this?",
        "createdAt" : "2020-02-27T23:56:02Z",
        "updatedAt" : "2020-03-15T10:39:42Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "bda8bd09-7925-4faa-9b1b-eb6bf1ff2f37",
        "parentId" : "4ca2af21-ee97-4a63-9708-3434b2714c6d",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : ">  For instance, I think it only (as a bug) ever looks at the first two levels of a MultiIndex, failing conditions like this:\r\n\r\n@WillAyd isn't it correct there, though? The first level (`Index(['a', 'b', 'c', 'd'], dtype='object')`) is sorted, and so the whole MultiIndex is also lexically sorted.\r\n\r\nFrom what I understand about lexical sorting, the third level only needs to be looked at if there's a tie in the first two, e.g.\r\n```\r\n>>> pd.MultiIndex.from_arrays([['a', 'a', 'c', 'd'],['e', 'e', 'g', 'h'],[\"x\", \"y\", \"y\", \"z\"]]).is_lexsorted()                                                                                               \r\nTrue\r\n\r\n>>> pd.MultiIndex.from_arrays([['a', 'a', 'c', 'd'],['e', 'e', 'g', 'h'],[\"y\", \"x\", \"y\", \"z\"]]).is_lexsorted()                                                                                               \r\nFalse\r\n```",
        "createdAt" : "2020-02-28T16:18:51Z",
        "updatedAt" : "2020-03-15T10:39:42Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      },
      {
        "id" : "3b4178f7-1ae0-46d5-897a-4a6e01b65db8",
        "parentId" : "4ca2af21-ee97-4a63-9708-3434b2714c6d",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I don't think the first level alone should be the decider here - maybe @TomAugspurger or @jreback know more of the history / intent",
        "createdAt" : "2020-03-03T01:11:08Z",
        "updatedAt" : "2020-03-15T10:39:42Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "3c5bd71a-d5d1-415b-be6a-67fa0686dd7c",
        "parentId" : "4ca2af21-ee97-4a63-9708-3434b2714c6d",
        "authorId" : "5e0a8bfc-72c5-4411-9449-dc3f8405b416",
        "body" : "In the wikipedia page https://en.wikipedia.org/wiki/Lexicographical_order it is said: *\"Given two different sequences of the same length, a1, a2,...,ak and b1,b2,...,bk, the first one is smaller than the second one for the lexicographical order, if ai < bi (for the order of A), for the first i where ai and bi differ.\"*\r\n\r\n```\r\n>>> pd.MultiIndex.from_arrays([['a', 'b', 'c', 'd'],['e', 'f', 'g', 'h'],[\"z\", \"y\", \"x\", \"w\"]]).is_lexsorted()\r\nTrue\r\n```\r\n\r\nIn the above example, as I understand, the first level is sorted because a<b<c<d, so lexical sorting does not need to look in the next level. ",
        "createdAt" : "2020-03-03T09:17:44Z",
        "updatedAt" : "2020-03-15T10:39:42Z",
        "lastEditedBy" : "5e0a8bfc-72c5-4411-9449-dc3f8405b416",
        "tags" : [
        ]
      },
      {
        "id" : "7bd038b6-97a5-42d0-b501-21b582329899",
        "parentId" : "4ca2af21-ee97-4a63-9708-3434b2714c6d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yep, this is correct.\r\n\r\nBut I think this discussion highlights that a sentence describing why this index is lex-sorted would be helpful.",
        "createdAt" : "2020-03-03T12:53:00Z",
        "updatedAt" : "2020-03-15T10:39:42Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "e957a3709aaa1e74bf15e38a1a0693e4765d7fff",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1644,1648 @@        >>> pd.MultiIndex.from_arrays([[0, 1, 1], ['a', 'c', 'b']]).is_lexsorted()\n        False\n        >>> pd.MultiIndex.from_arrays([['a', 'a', 'b', 'b'],\n        ...                            ['aa', 'bb', 'aa', 'bb']]).is_lexsorted()\n        True"
  },
  {
    "id" : "de342d4c-69bc-4ade-90d8-15f314f29b0a",
    "prId" : 32646,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32646#pullrequestreview-374742234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab86b34f-5701-4604-87e6-a39bbd0a9dcb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this hit in any tests?",
        "createdAt" : "2020-03-12T02:37:19Z",
        "updatedAt" : "2020-03-16T23:04:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1abcec62-beae-4800-a186-10775549d2ac",
        "parentId" : "ab86b34f-5701-4604-87e6-a39bbd0a9dcb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "no, can add one",
        "createdAt" : "2020-03-12T02:39:32Z",
        "updatedAt" : "2020-03-16T23:04:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "50a0964c-98b7-48d1-84b3-3f758595113c",
        "parentId" : "ab86b34f-5701-4604-87e6-a39bbd0a9dcb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add one",
        "createdAt" : "2020-03-14T03:44:44Z",
        "updatedAt" : "2020-03-16T23:04:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5d0d9b77-b51b-4081-ab7f-5bc4a74114cc",
        "parentId" : "ab86b34f-5701-4604-87e6-a39bbd0a9dcb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "added+green (though no azure)",
        "createdAt" : "2020-03-14T17:41:28Z",
        "updatedAt" : "2020-03-16T23:04:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2985332a441fcfa5086f082f8868d61ec8ffc837",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +3245,3249 @@\n        if not is_object_dtype(other.dtype):\n            raise NotImplementedError(\n                \"Can only union MultiIndex with MultiIndex or Index of tuples, \"\n                \"try mi.to_flat_index().union(other) instead.\""
  },
  {
    "id" : "aa47d9a6-b57c-47cb-959b-e33043066093",
    "prId" : 32646,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32646#pullrequestreview-374413416",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "335e6199-cafa-4ba4-8c62-244ab8e884b0",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "By not passing an ndarray (`_ndarray_values`), I think `fast_unique_multiple` might get a lot slower?",
        "createdAt" : "2020-03-13T14:01:35Z",
        "updatedAt" : "2020-03-16T23:04:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d85cdaf6-3ab7-4b56-8508-e27a78a63509",
        "parentId" : "335e6199-cafa-4ba4-8c62-244ab8e884b0",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "we only get here with object dtype, so they are equivalent",
        "createdAt" : "2020-03-13T15:47:52Z",
        "updatedAt" : "2020-03-16T23:04:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e866e45f-5f77-4fb0-a2eb-6b1322645405",
        "parentId" : "335e6199-cafa-4ba4-8c62-244ab8e884b0",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, yes, I had interpreted the `if not is_object_dtype(..)` the other way around ..",
        "createdAt" : "2020-03-13T15:53:01Z",
        "updatedAt" : "2020-03-16T23:04:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "2985332a441fcfa5086f082f8868d61ec8ffc837",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +3250,3254 @@            )\n\n        uniq_tuples = lib.fast_unique_multiple([self._values, other._values], sort=sort)\n\n        return MultiIndex.from_arrays("
  },
  {
    "id" : "2eed22ce-fcda-4f4c-81db-e557bf21e46e",
    "prId" : 32669,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32669#pullrequestreview-374657285",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51baf1cc-8400-45ea-85ff-168e06b1ef5e",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "comment pointing back to this thread?",
        "createdAt" : "2020-03-13T16:28:41Z",
        "updatedAt" : "2020-03-14T06:55:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7f2424ae-f9ce-4444-801a-d4d4f0f8c5bf",
        "parentId" : "51baf1cc-8400-45ea-85ff-168e06b1ef5e",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "ok",
        "createdAt" : "2020-03-13T22:47:12Z",
        "updatedAt" : "2020-03-14T06:55:52Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c5a56c906bb1a11d5b719c4b80f5f23419a7f6b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +994,998 @@            return MultiIndex.from_tuples(values, names=names, **kwargs)\n\n        result = self.copy(**kwargs)\n        result._cache = self._cache.copy()\n        # GH32669"
  },
  {
    "id" : "5bb3e5b9-6cf7-4d7b-b55b-be4b0cb9097e",
    "prId" : 32772,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32772#pullrequestreview-376356456",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71580cf5-dedc-4967-b73e-86d5f747e4f4",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "do we need to worry about both name and names being passed?",
        "createdAt" : "2020-03-17T19:03:45Z",
        "updatedAt" : "2020-03-17T19:03:46Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "532de855-37a1-432c-bae5-cc916691ff12",
        "parentId" : "71580cf5-dedc-4967-b73e-86d5f747e4f4",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "``MultiIndex.from_tuples`` only accepts ``names``, and Mi uses ``name`` in some locations, so yes (but it a part of the ickyness of MultiIndex, so should ideally be refactored away).",
        "createdAt" : "2020-03-17T19:52:27Z",
        "updatedAt" : "2020-03-17T19:52:27Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb4f8ecf9982299be9b0201b1a348d47d021b8f2",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +990,994 @@    def _shallow_copy(self, values=None, **kwargs):\n        if values is not None:\n            names = kwargs.pop(\"names\", kwargs.pop(\"name\", self.names))\n            return MultiIndex.from_tuples(values, names=names, **kwargs)\n"
  }
]