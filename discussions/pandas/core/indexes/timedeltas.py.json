[
  {
    "id" : "7700a953-11eb-4388-bc6c-3b9f15207e81",
    "prId" : 17482,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17482#pullrequestreview-61790914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c23bc534-ccbf-41fc-af29-a4bdce26fd37",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some examples",
        "createdAt" : "2017-09-11T11:47:51Z",
        "updatedAt" : "2017-09-14T05:33:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6cc86053ed1cdfaaaa0b5b23be259f087acc54e",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +979,983 @@    closed : string, default None\n        Make the interval closed with respect to the given frequency to\n        the 'left', 'right', or both sides (None)\n\n    Returns"
  },
  {
    "id" : "6a746603-f3b1-4c5f-9e38-b982d1a8a7bf",
    "prId" : 18397,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18397#pullrequestreview-78320208",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fad53f67-cd5e-4f9c-8a38-01dde382d37d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't we define the ``_add_comparison_method`` to take a function and live in ``indexes/base``? to avoid this repeated code?",
        "createdAt" : "2017-11-22T02:02:01Z",
        "updatedAt" : "2017-11-22T02:02:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c48f00ec-bd06-4746-802f-a34d9c354ef4",
        "parentId" : "fad53f67-cd5e-4f9c-8a38-01dde382d37d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'm open to this.  It isn't entirely trivial because it references DatetimeIndex, TimedeltaIndex, super... I'll take a look at how much datetimelike-specific logic is there; it may be more at home in indexes.datetimelike.\r\n\r\nFor now I'd advocate closing this fairly straightforward fix.",
        "createdAt" : "2017-11-22T02:17:58Z",
        "updatedAt" : "2017-11-22T02:17:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d7687e54-ff4d-41c8-8c8a-e40c24ef1e8d",
        "parentId" : "fad53f67-cd5e-4f9c-8a38-01dde382d37d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok pls add to list (opening an issue is ok too, e.g. if its a bigger thing, not likely to get to anytime soon, etc).",
        "createdAt" : "2017-11-22T02:22:04Z",
        "updatedAt" : "2017-11-22T02:22:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6ae7d3b5-7345-42ec-8a8f-c0a39924d151",
        "parentId" : "fad53f67-cd5e-4f9c-8a38-01dde382d37d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah there's definitely some logic shared between the timedeltas and datetimes version, but its a little bit deceptive in part because `_to_m8` is defined differently in each module.",
        "createdAt" : "2017-11-22T02:30:59Z",
        "updatedAt" : "2017-11-22T02:30:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c36e8704447305a1163f064acba4c891379f9a56",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +181,185 @@                             \"round\", \"floor\", \"ceil\"]\n\n    @classmethod\n    def _add_comparison_methods(cls):\n        \"\"\" add in comparison methods \"\"\""
  },
  {
    "id" : "0ec23816-04f7-4788-a7b1-1893ea443a19",
    "prId" : 20408,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20408#pullrequestreview-105187223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "834f4b23-ade8-44f8-9a2a-1cbe8f127898",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Would using something like `is_number(label) and not is_timedelta64_dtype(label)` be more appropriate here?\r\n\r\nRight now it looks like a few things can sneak through, e.g. booleans:\r\n```python\r\nIn [2]: s = pd.Series(list('abcde'), pd.timedelta_range(0, 4, freq='ns'))\r\n\r\nIn [3]: s\r\nOut[3]:\r\n00:00:00           a\r\n00:00:00.000000    b\r\n00:00:00.000000    c\r\n00:00:00.000000    d\r\n00:00:00.000000    e\r\nFreq: N, dtype: object\r\n\r\nIn [4]: s.loc[False:True]\r\nOut[4]:\r\n00:00:00           a\r\n00:00:00.000000    b\r\nFreq: N, dtype: object\r\n```\r\nThis doesn't seem like the intended behavior, and `is_number` returns `True` for booleans.",
        "createdAt" : "2018-03-19T06:49:02Z",
        "updatedAt" : "2018-03-19T10:06:02Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "44428933-25ad-4745-a538-3f3d6a02b972",
        "parentId" : "834f4b23-ade8-44f8-9a2a-1cbe8f127898",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "``is_number`` is pretty general, technically a ``bool`` is a number (as it derives from int, as does np.timedelta).",
        "createdAt" : "2018-03-19T10:02:54Z",
        "updatedAt" : "2018-03-19T10:06:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "96bd1a9f-f844-4921-871d-ddeaa286cb0c",
        "parentId" : "834f4b23-ade8-44f8-9a2a-1cbe8f127898",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "> `is_number` is pretty general\r\n\r\nYes, this was the point I was trying to make. The current approach here doesn't look general enough, as things like booleans are still allowed, as per my example.  Seems like using `is_number(label) and not is_timedelta64_dtype(label)` would catch this appropriately.",
        "createdAt" : "2018-03-19T20:29:18Z",
        "updatedAt" : "2018-03-19T20:29:18Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "cda4d2e1-d868-44fc-afe7-b7f51ce3cea1",
        "parentId" : "834f4b23-ade8-44f8-9a2a-1cbe8f127898",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "Yes, this is a gotcha. See https://github.com/numpy/numpy/issues/10685 for the upstream numpy issue.",
        "createdAt" : "2018-03-19T20:43:24Z",
        "updatedAt" : "2018-03-19T20:43:24Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "8218cc89-1e01-4993-8b44-6d3358c438b3",
        "parentId" : "834f4b23-ade8-44f8-9a2a-1cbe8f127898",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jschendel you make a good point\r\n\r\ncan u open an issue (or PR!)",
        "createdAt" : "2018-03-20T00:32:29Z",
        "updatedAt" : "2018-03-20T00:32:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1a266ca4-349c-441f-974a-352f6d716b21",
        "parentId" : "834f4b23-ade8-44f8-9a2a-1cbe8f127898",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "@jreback : Will do.  Looking into this now more generally across various types of indexes.",
        "createdAt" : "2018-03-20T00:38:13Z",
        "updatedAt" : "2018-03-20T00:38:13Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "199e819dc426f5b31905f98d8da5d6b5d6051ca7",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +831,835 @@                        Timedelta(1, 'ns'))\n        elif ((is_integer(label) or is_float(label)) and\n              not is_timedelta64_dtype(label)):\n            self._invalid_indexer('slice', label)\n"
  },
  {
    "id" : "e0e2f298-c96a-4cdb-a94d-ebf7aa64090f",
    "prId" : 22549,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22549#pullrequestreview-153315838",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da6132b8-2521-48d4-9a0c-42c1f65847bb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not sure if we use isna else for NaT checking?\r\n",
        "createdAt" : "2018-09-04T11:39:16Z",
        "updatedAt" : "2018-09-07T15:40:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7ebd5192-5989-4d77-ba6a-7fd1d53f7cff",
        "parentId" : "da6132b8-2521-48d4-9a0c-42c1f65847bb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think in this context `isna` is less clear.  Since there is a specific na-like object we are catching here, we should be explicit about it.",
        "createdAt" : "2018-09-04T15:41:33Z",
        "updatedAt" : "2018-09-07T15:40:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "c3020d71-762d-4d2c-a736-ef31c1de087f",
        "parentId" : "da6132b8-2521-48d4-9a0c-42c1f65847bb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok this comment looks good",
        "createdAt" : "2018-09-07T12:12:58Z",
        "updatedAt" : "2018-09-07T15:40:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "acf7b6eef81ac00098ea468a599ae420c0acf2a4",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +489,493 @@        loc : int\n        \"\"\"\n        if is_list_like(key) or (isinstance(key, datetime) and key is not NaT):\n            # GH#20464 datetime check here is to ensure we don't allow\n            #   datetime objects to be incorrectly treated as timedelta"
  },
  {
    "id" : "7b89c17f-a49c-4118-a4bd-e370c1aef3e3",
    "prId" : 23433,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23433#pullrequestreview-170491598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1d837d2-6bf6-46f6-b150-2548c9feef40",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Same questions for all your assert statements:\r\n\r\n* Are these internal? If not, it would be nice to have user-friendly error messages.\r\n* Can these assert statements be tested in any way?",
        "createdAt" : "2018-10-31T20:15:03Z",
        "updatedAt" : "2018-11-02T18:53:53Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "ed06978e-2fef-4410-b7b4-f5f667952e17",
        "parentId" : "f1d837d2-6bf6-46f6-b150-2548c9feef40",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "The question of testing is actually more general to all of these changes.  Even though it's been labeled as internal, not sure if any of these edits will surface in any way.",
        "createdAt" : "2018-10-31T20:15:50Z",
        "updatedAt" : "2018-11-02T18:53:53Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "a2deabfa-8709-4e2c-987d-6d911fa5d162",
        "parentId" : "f1d837d2-6bf6-46f6-b150-2548c9feef40",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> The edits in simplenew are thoroughly internal; users shouldn’t get near it.\r\n>\r\n> Not sure what testing these assertions would look like. Can you elaborate what you have in mind?\r\n\r\n(moving your responses to the conversation bubble in the UI, organizational thing)\r\n\r\n@jbrockmendel : What I was wondering was whether we could trigger these `assert` statements (e.g. an invalid input to a publicly facing function or method)?\r\n\r\nMight be tricky if these edits are purely internal, and if it is too difficult, not a big deal.  Just out of curiosity since tests are good if we can have them.",
        "createdAt" : "2018-10-31T21:19:24Z",
        "updatedAt" : "2018-11-02T18:53:53Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "a7394a12-5bd4-4905-acc4-471dcc240003",
        "parentId" : "f1d837d2-6bf6-46f6-b150-2548c9feef40",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I see.  Yah, we could\r\nWrite tests where we directly pass invalid inputs to simplenew. (Typing with thumbs, feel free to reformat if necessary)",
        "createdAt" : "2018-10-31T22:03:39Z",
        "updatedAt" : "2018-11-02T18:53:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7dd05e81f8a24e0a3e7294f5f2e8adee0fe3bac",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +203,207 @@        if values.dtype == 'i8':\n            values = values.view('m8[ns]')\n        assert values.dtype == 'm8[ns]', values.dtype\n\n        result = super(TimedeltaIndex, cls)._simple_new(values, freq)"
  },
  {
    "id" : "bedae425-39bb-46eb-922d-dfaf8fd6f962",
    "prId" : 23433,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23433#pullrequestreview-170518268",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4adabdd1-8eb4-4055-bc3b-222891572d79",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do you need this here? the array conversion",
        "createdAt" : "2018-10-31T23:58:31Z",
        "updatedAt" : "2018-11-02T18:53:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "88cd4d0a-f2ce-4790-b037-c08795e5de7a",
        "parentId" : "4adabdd1-8eb4-4055-bc3b-222891572d79",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This whole block is taken out of the top of `TimedeltaArray._simple_new`.  I think we could get here with e.g. another TimedeltaIndex for `data`.",
        "createdAt" : "2018-11-01T00:07:16Z",
        "updatedAt" : "2018-11-02T18:53:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7dd05e81f8a24e0a3e7294f5f2e8adee0fe3bac",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +168,172 @@            data = np.array(data, copy=True)\n\n        data = np.array(data, copy=False)\n        if data.dtype == np.object_:\n            data = array_to_timedelta64(data)"
  },
  {
    "id" : "92305d71-d87e-48c5-ada2-cd20ee282bd0",
    "prId" : 23433,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23433#pullrequestreview-170517511",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6173c5a-3309-4846-8417-6764dbcccb84",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is this needed?",
        "createdAt" : "2018-10-31T23:59:30Z",
        "updatedAt" : "2018-11-02T18:53:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "967292a0-f933-4dc6-89ab-a704a3994c96",
        "parentId" : "b6173c5a-3309-4846-8417-6764dbcccb84",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Because until #23430, without pinning this it would use DatetimeLikeArrayMixin._shallow_copy",
        "createdAt" : "2018-11-01T00:02:40Z",
        "updatedAt" : "2018-11-02T18:53:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7dd05e81f8a24e0a3e7294f5f2e8adee0fe3bac",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +210,214 @@        return result\n\n    _shallow_copy = Index._shallow_copy\n\n    @property"
  },
  {
    "id" : "7b5438b9-5935-4552-ae9a-f885b15ee4a4",
    "prId" : 23433,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23433#pullrequestreview-170520179",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98d680d2-f07e-4abc-beed-dd1248f11bd9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why are these checks NOT done in _simple_new? this is inconsistent with other code.\r\n\r\nWe should be really really clear on what is acceptable in _simple_new vs. what is not. IIRC from another of your PR's you did checks on object type in _simple_new for example. ",
        "createdAt" : "2018-11-01T00:08:49Z",
        "updatedAt" : "2018-11-02T18:53:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "21162d26-de6c-4f60-a90d-59e21d3a4d2f",
        "parentId" : "98d680d2-f07e-4abc-beed-dd1248f11bd9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "AFAICT the current verbose-checking is largely driven by the weird cases (that these PRs get rid of) where `None` or `[]` is passed to `_shallow_copy`.\r\n\r\nThis and the associated DatetimeIndex PR impose a simple/strict API for _simple_new: it expects an np.ndarray that may be either i8 or M8[ns]/m8[ns].\r\n",
        "createdAt" : "2018-11-01T00:19:56Z",
        "updatedAt" : "2018-11-02T18:53:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7dd05e81f8a24e0a3e7294f5f2e8adee0fe3bac",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +170,174 @@        data = np.array(data, copy=False)\n        if data.dtype == np.object_:\n            data = array_to_timedelta64(data)\n        if data.dtype != _TD_DTYPE:\n            if is_timedelta64_dtype(data):"
  },
  {
    "id" : "a4f5c0cc-d21c-4675-8a28-b98c229bc64b",
    "prId" : 24394,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24394#pullrequestreview-188276976",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "236295ea-5c15-4128-9a20-4bb8926c66f5",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "`_make_wrapped_arith_op` is going away entirely. Why are we making these changes?",
        "createdAt" : "2018-12-28T12:00:22Z",
        "updatedAt" : "2018-12-28T12:02:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "00149f8269840083c3e363d5f5fc7aafa2e4598a",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +246,250 @@    __divmod__ = _make_wrapped_arith_op(\"__divmod__\")\n    __rdivmod__ = _make_wrapped_arith_op(\"__rdivmod__\")\n    __truediv__ = _make_wrapped_arith_op(\"__truediv__\")\n    __rtruediv__ = _make_wrapped_arith_op(\"__rtruediv__\")\n    if compat.PY2:"
  },
  {
    "id" : "14ae6bf7-e5de-45c9-ae61-ccc289056afe",
    "prId" : 24476,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24476#pullrequestreview-188702809",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22217ad3-6a7c-4c6a-bfb1-c487d557ea7b",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The same here, this had a docstring before",
        "createdAt" : "2019-01-02T14:54:00Z",
        "updatedAt" : "2019-01-02T14:54:00Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6a8951409a26093548da95ebbe41c25d74d4783",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +318,322 @@\n    @property\n    def freq(self):  # TODO: get via eadata\n        return self._freq\n"
  },
  {
    "id" : "ca634d9b-b484-4fba-9ba2-8af95c8bdebd",
    "prId" : 24517,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24517#pullrequestreview-188542252",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09279372-eb54-42c1-a6b7-8acfa6f049c4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can't these just be in the DatetimeIndexOpsMixin?",
        "createdAt" : "2018-12-31T23:09:41Z",
        "updatedAt" : "2018-12-31T23:39:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "aefc8613-17c5-42a5-87b7-f5e2360d2863",
        "parentId" : "09279372-eb54-42c1-a6b7-8acfa6f049c4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We could, but would have to override for PeriodIndex.  Either way is fine by me.",
        "createdAt" : "2018-12-31T23:12:23Z",
        "updatedAt" : "2018-12-31T23:39:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "470bfb42-944e-4280-bd8b-fb1258ad9fd4",
        "parentId" : "09279372-eb54-42c1-a6b7-8acfa6f049c4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok i c. either way is fine then.",
        "createdAt" : "2018-12-31T23:20:00Z",
        "updatedAt" : "2018-12-31T23:39:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1456b6aadf897045266fd95ddb75a60ab60ddcc7",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +281,285 @@\n    @property\n    def _data(self):\n        return self._eadata._data\n"
  },
  {
    "id" : "3c259ba5-a86e-4b91-b754-b3a7c31891dc",
    "prId" : 25913,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25913#pullrequestreview-222615281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19bbffd3-040f-4707-ad3c-bee8ea81fd32",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, we have specialized do-strings for all of these? Is this the same way we handle union? \r\n\r\ncc @reidy-p ",
        "createdAt" : "2019-03-30T18:45:34Z",
        "updatedAt" : "2019-04-29T18:33:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f1aeec90-42cb-4930-ae5a-a0af95b76df1",
        "parentId" : "19bbffd3-040f-4707-ad3c-bee8ea81fd32",
        "authorId" : "e6e3c674-c60b-4d28-bb04-2413947f6bb9",
        "body" : "@jreback I am not sure what do-strings are?",
        "createdAt" : "2019-04-02T09:42:58Z",
        "updatedAt" : "2019-04-29T18:33:03Z",
        "lastEditedBy" : "e6e3c674-c60b-4d28-bb04-2413947f6bb9",
        "tags" : [
        ]
      },
      {
        "id" : "4b88209b-382a-479a-8d75-a0d53b73abbf",
        "parentId" : "19bbffd3-040f-4707-ad3c-bee8ea81fd32",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "doc-string",
        "createdAt" : "2019-04-02T12:32:05Z",
        "updatedAt" : "2019-04-29T18:33:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "131d85e6-7e1f-446d-bec8-17b8cced5e08",
        "parentId" : "19bbffd3-040f-4707-ad3c-bee8ea81fd32",
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "Yeah I think we have specialised doc-strings for the set operations that override the base class",
        "createdAt" : "2019-04-03T20:00:39Z",
        "updatedAt" : "2019-04-29T18:33:03Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      },
      {
        "id" : "3a0de02b-711c-4816-b4ca-f7846c2ad835",
        "parentId" : "19bbffd3-040f-4707-ad3c-bee8ea81fd32",
        "authorId" : "e6e3c674-c60b-4d28-bb04-2413947f6bb9",
        "body" : "Yes there is a specialised doc-string in /pandas/core/indexes/timedeltas that overwrites the docstring for intersection.",
        "createdAt" : "2019-04-04T08:19:09Z",
        "updatedAt" : "2019-04-29T18:33:03Z",
        "lastEditedBy" : "e6e3c674-c60b-4d28-bb04-2413947f6bb9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d7205dc3c501a9ff3125debbede7e66d3a564b7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +380,384 @@                          sort=sort)\n\n    def intersection(self, other, sort=False):\n        \"\"\"\n        Specialized intersection for TimedeltaIndex objects."
  },
  {
    "id" : "858f675f-edb7-461a-a340-fdebd0a538ce",
    "prId" : 27577,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27577#pullrequestreview-266327302",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d62e28ab-c4c2-4403-8561-abb2854622e7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use asarray or pass copy=False",
        "createdAt" : "2019-07-24T22:54:04Z",
        "updatedAt" : "2019-07-24T23:43:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f6180d85-198b-482e-bc01-fe3daf27f3e7",
        "parentId" : "d62e28ab-c4c2-4403-8561-abb2854622e7",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "sure. was keeping the code as close to original as possible. ",
        "createdAt" : "2019-07-24T22:57:40Z",
        "updatedAt" : "2019-07-24T23:43:32Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "91ee50ab9118e9044f967f9eb0863ccc412c8bd3",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +304,308 @@                values=self, nat_rep=na_rep, justify=\"all\"\n            ).get_result()\n        )\n\n    # -------------------------------------------------------------------"
  },
  {
    "id" : "e181c37c-bf50-4ffd-9abc-5cb727330622",
    "prId" : 29604,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29604#pullrequestreview-316777688",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ec4a4c5-6005-430f-9c52-3e49dd337a3f",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "could this be shared in one of the datetimelike classes?",
        "createdAt" : "2019-11-14T00:36:12Z",
        "updatedAt" : "2019-11-14T14:38:46Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "c0b4d119-0ca2-4d07-bae6-78bef191e4b1",
        "parentId" : "5ec4a4c5-6005-430f-9c52-3e49dd337a3f",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "I don't think so: PeriodIndex doesn't allow ``freq=None`` and ``DatetimeIndexOpsMixin`` is shared with that`. Don't know if that's a bug in PeriodIndex or as intended, as I haven't worked much with datetime objects.\r\n\r\nMy motivation with this is getting kwargs out of a basic method and make child classes just build on that using ``super`` + the specific stuff. That is easier to reason about IMO.",
        "createdAt" : "2019-11-14T08:26:06Z",
        "updatedAt" : "2019-11-14T14:38:46Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "2109eae0b085deb923a15696cc4c483c543152e1",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +411,415 @@        new_idx = super().difference(other, sort=sort)\n        new_idx.freq = None\n        return new_idx\n\n    def _wrap_joined_index(self, joined, other):"
  },
  {
    "id" : "b8dabf7c-6032-4251-bc01-e76c05da0fac",
    "prId" : 30950,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30950#pullrequestreview-344949789",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2183ae72-efb0-4735-bbe1-cbff54d8001c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can likely move this to the base class an use shared impl with Timedelta (and I guess with DTI?)",
        "createdAt" : "2020-01-18T16:02:30Z",
        "updatedAt" : "2020-01-18T16:02:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "24682dc7d6d521f82f1ac30978e7ed9004cb1c85",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +353,357 @@                f\"not {type(value).__name__}\"\n            )\n        if isinstance(value, Index):\n            value = value._data\n"
  }
]