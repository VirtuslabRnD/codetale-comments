[
  {
    "id" : "7700a953-11eb-4388-bc6c-3b9f15207e81",
    "prId" : 17482,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17482#pullrequestreview-61790914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c23bc534-ccbf-41fc-af29-a4bdce26fd37",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some examples",
        "createdAt" : "2017-09-11T11:47:51Z",
        "updatedAt" : "2017-09-14T05:33:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6cc86053ed1cdfaaaa0b5b23be259f087acc54e",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +979,983 @@    closed : string, default None\n        Make the interval closed with respect to the given frequency to\n        the 'left', 'right', or both sides (None)\n\n    Returns"
  },
  {
    "id" : "6a746603-f3b1-4c5f-9e38-b982d1a8a7bf",
    "prId" : 18397,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18397#pullrequestreview-78320208",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fad53f67-cd5e-4f9c-8a38-01dde382d37d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't we define the ``_add_comparison_method`` to take a function and live in ``indexes/base``? to avoid this repeated code?",
        "createdAt" : "2017-11-22T02:02:01Z",
        "updatedAt" : "2017-11-22T02:02:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c48f00ec-bd06-4746-802f-a34d9c354ef4",
        "parentId" : "fad53f67-cd5e-4f9c-8a38-01dde382d37d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'm open to this.  It isn't entirely trivial because it references DatetimeIndex, TimedeltaIndex, super... I'll take a look at how much datetimelike-specific logic is there; it may be more at home in indexes.datetimelike.\r\n\r\nFor now I'd advocate closing this fairly straightforward fix.",
        "createdAt" : "2017-11-22T02:17:58Z",
        "updatedAt" : "2017-11-22T02:17:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d7687e54-ff4d-41c8-8c8a-e40c24ef1e8d",
        "parentId" : "fad53f67-cd5e-4f9c-8a38-01dde382d37d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok pls add to list (opening an issue is ok too, e.g. if its a bigger thing, not likely to get to anytime soon, etc).",
        "createdAt" : "2017-11-22T02:22:04Z",
        "updatedAt" : "2017-11-22T02:22:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6ae7d3b5-7345-42ec-8a8f-c0a39924d151",
        "parentId" : "fad53f67-cd5e-4f9c-8a38-01dde382d37d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah there's definitely some logic shared between the timedeltas and datetimes version, but its a little bit deceptive in part because `_to_m8` is defined differently in each module.",
        "createdAt" : "2017-11-22T02:30:59Z",
        "updatedAt" : "2017-11-22T02:30:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c36e8704447305a1163f064acba4c891379f9a56",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +181,185 @@                             \"round\", \"floor\", \"ceil\"]\n\n    @classmethod\n    def _add_comparison_methods(cls):\n        \"\"\" add in comparison methods \"\"\""
  },
  {
    "id" : "0ec23816-04f7-4788-a7b1-1893ea443a19",
    "prId" : 20408,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20408#pullrequestreview-105187223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "834f4b23-ade8-44f8-9a2a-1cbe8f127898",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Would using something like `is_number(label) and not is_timedelta64_dtype(label)` be more appropriate here?\r\n\r\nRight now it looks like a few things can sneak through, e.g. booleans:\r\n```python\r\nIn [2]: s = pd.Series(list('abcde'), pd.timedelta_range(0, 4, freq='ns'))\r\n\r\nIn [3]: s\r\nOut[3]:\r\n00:00:00           a\r\n00:00:00.000000    b\r\n00:00:00.000000    c\r\n00:00:00.000000    d\r\n00:00:00.000000    e\r\nFreq: N, dtype: object\r\n\r\nIn [4]: s.loc[False:True]\r\nOut[4]:\r\n00:00:00           a\r\n00:00:00.000000    b\r\nFreq: N, dtype: object\r\n```\r\nThis doesn't seem like the intended behavior, and `is_number` returns `True` for booleans.",
        "createdAt" : "2018-03-19T06:49:02Z",
        "updatedAt" : "2018-03-19T10:06:02Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "44428933-25ad-4745-a538-3f3d6a02b972",
        "parentId" : "834f4b23-ade8-44f8-9a2a-1cbe8f127898",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "``is_number`` is pretty general, technically a ``bool`` is a number (as it derives from int, as does np.timedelta).",
        "createdAt" : "2018-03-19T10:02:54Z",
        "updatedAt" : "2018-03-19T10:06:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "96bd1a9f-f844-4921-871d-ddeaa286cb0c",
        "parentId" : "834f4b23-ade8-44f8-9a2a-1cbe8f127898",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "> `is_number` is pretty general\r\n\r\nYes, this was the point I was trying to make. The current approach here doesn't look general enough, as things like booleans are still allowed, as per my example.  Seems like using `is_number(label) and not is_timedelta64_dtype(label)` would catch this appropriately.",
        "createdAt" : "2018-03-19T20:29:18Z",
        "updatedAt" : "2018-03-19T20:29:18Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "cda4d2e1-d868-44fc-afe7-b7f51ce3cea1",
        "parentId" : "834f4b23-ade8-44f8-9a2a-1cbe8f127898",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "Yes, this is a gotcha. See https://github.com/numpy/numpy/issues/10685 for the upstream numpy issue.",
        "createdAt" : "2018-03-19T20:43:24Z",
        "updatedAt" : "2018-03-19T20:43:24Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "8218cc89-1e01-4993-8b44-6d3358c438b3",
        "parentId" : "834f4b23-ade8-44f8-9a2a-1cbe8f127898",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jschendel you make a good point\r\n\r\ncan u open an issue (or PR!)",
        "createdAt" : "2018-03-20T00:32:29Z",
        "updatedAt" : "2018-03-20T00:32:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1a266ca4-349c-441f-974a-352f6d716b21",
        "parentId" : "834f4b23-ade8-44f8-9a2a-1cbe8f127898",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "@jreback : Will do.  Looking into this now more generally across various types of indexes.",
        "createdAt" : "2018-03-20T00:38:13Z",
        "updatedAt" : "2018-03-20T00:38:13Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "199e819dc426f5b31905f98d8da5d6b5d6051ca7",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +831,835 @@                        Timedelta(1, 'ns'))\n        elif ((is_integer(label) or is_float(label)) and\n              not is_timedelta64_dtype(label)):\n            self._invalid_indexer('slice', label)\n"
  }
]