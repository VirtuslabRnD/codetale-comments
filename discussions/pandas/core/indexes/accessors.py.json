[
  {
    "id" : "fb076c0c-29f1-477f-a1b6-5030c4cc6516",
    "prId" : 18827,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18827#pullrequestreview-86908362",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de785b2d-fc3d-442d-b576-9f0861f3ae02",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "generally would like these to be non-private",
        "createdAt" : "2018-01-05T13:54:30Z",
        "updatedAt" : "2018-01-15T12:33:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a2269f7f-6ee4-4c77-81ed-3a15ca8fd866",
        "parentId" : "de785b2d-fc3d-442d-b576-9f0861f3ae02",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think it's best for methods and attributes on the accessor to be private. Imagine if we wanted to delegate a method like `.get_values`, so `foo.bar.get_values`. This would break the accessor, since its `get_values` would be broken.",
        "createdAt" : "2018-01-05T14:03:53Z",
        "updatedAt" : "2018-01-15T12:33:52Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd402442d62d3abab6dc296657545c6dfcafa43e",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +35,39 @@        self._freeze()\n\n    def _get_values(self):\n        data = self.values\n        if is_datetime64_dtype(data.dtype):"
  },
  {
    "id" : "f53e4bb8-8d9f-45c8-bc37-0edd9a3d3333",
    "prId" : 18827,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18827#pullrequestreview-86920824",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a18fb0c-c22d-44e6-8a04-171917f7fac7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we be consistent for validation, IOW either do it in ``__new__`` or in ``__init__``?",
        "createdAt" : "2018-01-05T13:55:38Z",
        "updatedAt" : "2018-01-15T12:33:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8e220353-d91b-4dc1-a22c-971d4c3a43e8",
        "parentId" : "0a18fb0c-c22d-44e6-8a04-171917f7fac7",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I had to put this in `__new__` since we don't instantiate a `CombinedDatetimelikeProperties`, just one of its parents. I *think* this is unavoidable, but it would be nice to make it more consistent with the others. I'll see what I can do.",
        "createdAt" : "2018-01-05T14:11:05Z",
        "updatedAt" : "2018-01-15T12:33:52Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "9e2836a1-5f0b-487b-888c-7e23954a1b3b",
        "parentId" : "0a18fb0c-c22d-44e6-8a04-171917f7fac7",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "One option is to write a `Properties._validate` do most of the work here. But it feels weird to have a base class decide which child class should be instantiated. I think having it in `__new__` (with a comment for why it's there) is clearest.",
        "createdAt" : "2018-01-05T14:47:23Z",
        "updatedAt" : "2018-01-15T12:33:52Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd402442d62d3abab6dc296657545c6dfcafa43e",
    "line" : 175,
    "diffHunk" : "@@ -1,1 +212,216 @@class CombinedDatetimelikeProperties(DatetimeProperties, TimedeltaProperties):\n\n    def __new__(cls, data):\n        # CombinedDatetimelikeProperties isn't really instantiated. Instead\n        # we need to choose which parent (datetime or timedelta) is"
  },
  {
    "id" : "356455f9-3cb4-4dec-88a6-52b95d79c5f7",
    "prId" : 20142,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20142#pullrequestreview-102858471",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb55b763-7eed-48d7-b183-56cdbd3ff37a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I *think* we need ``import datetime`` here",
        "createdAt" : "2018-03-10T17:03:45Z",
        "updatedAt" : "2018-03-17T12:09:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "de322879-0877-4d31-93d8-404b78e1a9dc",
        "parentId" : "cb55b763-7eed-48d7-b183-56cdbd3ff37a",
        "authorId" : "f5c2fd9c-6b98-46ce-b4c1-d667b7e2d24b",
        "body" : "I don't seem to need the import, but to clarify things, I've added more to the description.",
        "createdAt" : "2018-03-10T18:11:19Z",
        "updatedAt" : "2018-03-17T12:09:31Z",
        "lastEditedBy" : "f5c2fd9c-6b98-46ce-b4c1-d667b7e2d24b",
        "tags" : [
        ]
      }
    ],
    "commit" : "48ca62c44def96b51014580fa6ae1809bb53f415",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +173,177 @@        Examples\n        --------\n        >>> s = pd.Series(pd.to_timedelta(np.arange(5), unit='d'))\n        >>> s\n        0   0 days"
  },
  {
    "id" : "b02d71f0-10a3-4c60-9c7b-c6f9d99ccb75",
    "prId" : 32475,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32475#pullrequestreview-371365828",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21cc9a7a-3339-4394-b176-83cb1ae2f6c2",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@simonjayhawkins does the annotation now make this check unnecessary?  not sure if we have a policy for this",
        "createdAt" : "2020-03-09T17:05:56Z",
        "updatedAt" : "2020-03-09T17:05:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "61308e7c4d36bcb26edd6953562d53be8335288f",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +31,35 @@    def __init__(self, data: \"Series\", orig):\n        if not isinstance(data, ABCSeries):\n            raise TypeError(\n                f\"cannot convert an object of type {type(data)} to a datetimelike index\"\n            )"
  }
]