[
  {
    "id" : "fb076c0c-29f1-477f-a1b6-5030c4cc6516",
    "prId" : 18827,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18827#pullrequestreview-86908362",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de785b2d-fc3d-442d-b576-9f0861f3ae02",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "generally would like these to be non-private",
        "createdAt" : "2018-01-05T13:54:30Z",
        "updatedAt" : "2018-01-15T12:33:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a2269f7f-6ee4-4c77-81ed-3a15ca8fd866",
        "parentId" : "de785b2d-fc3d-442d-b576-9f0861f3ae02",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think it's best for methods and attributes on the accessor to be private. Imagine if we wanted to delegate a method like `.get_values`, so `foo.bar.get_values`. This would break the accessor, since its `get_values` would be broken.",
        "createdAt" : "2018-01-05T14:03:53Z",
        "updatedAt" : "2018-01-15T12:33:52Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd402442d62d3abab6dc296657545c6dfcafa43e",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +35,39 @@        self._freeze()\n\n    def _get_values(self):\n        data = self.values\n        if is_datetime64_dtype(data.dtype):"
  },
  {
    "id" : "f53e4bb8-8d9f-45c8-bc37-0edd9a3d3333",
    "prId" : 18827,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18827#pullrequestreview-86920824",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a18fb0c-c22d-44e6-8a04-171917f7fac7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we be consistent for validation, IOW either do it in ``__new__`` or in ``__init__``?",
        "createdAt" : "2018-01-05T13:55:38Z",
        "updatedAt" : "2018-01-15T12:33:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8e220353-d91b-4dc1-a22c-971d4c3a43e8",
        "parentId" : "0a18fb0c-c22d-44e6-8a04-171917f7fac7",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I had to put this in `__new__` since we don't instantiate a `CombinedDatetimelikeProperties`, just one of its parents. I *think* this is unavoidable, but it would be nice to make it more consistent with the others. I'll see what I can do.",
        "createdAt" : "2018-01-05T14:11:05Z",
        "updatedAt" : "2018-01-15T12:33:52Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "9e2836a1-5f0b-487b-888c-7e23954a1b3b",
        "parentId" : "0a18fb0c-c22d-44e6-8a04-171917f7fac7",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "One option is to write a `Properties._validate` do most of the work here. But it feels weird to have a base class decide which child class should be instantiated. I think having it in `__new__` (with a comment for why it's there) is clearest.",
        "createdAt" : "2018-01-05T14:47:23Z",
        "updatedAt" : "2018-01-15T12:33:52Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd402442d62d3abab6dc296657545c6dfcafa43e",
    "line" : 175,
    "diffHunk" : "@@ -1,1 +212,216 @@class CombinedDatetimelikeProperties(DatetimeProperties, TimedeltaProperties):\n\n    def __new__(cls, data):\n        # CombinedDatetimelikeProperties isn't really instantiated. Instead\n        # we need to choose which parent (datetime or timedelta) is"
  },
  {
    "id" : "356455f9-3cb4-4dec-88a6-52b95d79c5f7",
    "prId" : 20142,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20142#pullrequestreview-102858471",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb55b763-7eed-48d7-b183-56cdbd3ff37a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I *think* we need ``import datetime`` here",
        "createdAt" : "2018-03-10T17:03:45Z",
        "updatedAt" : "2018-03-17T12:09:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "de322879-0877-4d31-93d8-404b78e1a9dc",
        "parentId" : "cb55b763-7eed-48d7-b183-56cdbd3ff37a",
        "authorId" : "f5c2fd9c-6b98-46ce-b4c1-d667b7e2d24b",
        "body" : "I don't seem to need the import, but to clarify things, I've added more to the description.",
        "createdAt" : "2018-03-10T18:11:19Z",
        "updatedAt" : "2018-03-17T12:09:31Z",
        "lastEditedBy" : "f5c2fd9c-6b98-46ce-b4c1-d667b7e2d24b",
        "tags" : [
        ]
      }
    ],
    "commit" : "48ca62c44def96b51014580fa6ae1809bb53f415",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +173,177 @@        Examples\n        --------\n        >>> s = pd.Series(pd.to_timedelta(np.arange(5), unit='d'))\n        >>> s\n        0   0 days"
  },
  {
    "id" : "b02d71f0-10a3-4c60-9c7b-c6f9d99ccb75",
    "prId" : 32475,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32475#pullrequestreview-371365828",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21cc9a7a-3339-4394-b176-83cb1ae2f6c2",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@simonjayhawkins does the annotation now make this check unnecessary?  not sure if we have a policy for this",
        "createdAt" : "2020-03-09T17:05:56Z",
        "updatedAt" : "2020-03-09T17:05:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "61308e7c4d36bcb26edd6953562d53be8335288f",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +31,35 @@    def __init__(self, data: \"Series\", orig):\n        if not isinstance(data, ABCSeries):\n            raise TypeError(\n                f\"cannot convert an object of type {type(data)} to a datetimelike index\"\n            )"
  },
  {
    "id" : "067582f1-36a2-4c58-9bff-9b981681e323",
    "prId" : 33208,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33208#pullrequestreview-387116143",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b16635a-8cef-41b5-9fa6-0c7253c1d198",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I wonder whether needs to be in the class description.\r\n\r\nwith help(pd.core.indexes.accessors.DatetimeProperties)\r\n\r\nunder Data descriptors defined here:\r\n\r\nwe have\r\n\r\n |  dayofweek\r\n |      The day of the week with Monday=0, Sunday=6.\r\n |      \r\n |      Return the day of the week. It is assumed the week starts on\r\n |      Monday, which is denoted by 0 and ends on Sunday which is denoted\r\n |      by 6. This method is available on both Series with datetime\r\n |      values (using the `dt` accessor) or DatetimeIndex.\r\n |      \r\n |      Returns\r\n |      -------\r\n |      Series or Index\r\n |          Containing integers indicating the day number.\r\n |      \r\n |      See Also\r\n |      --------\r\n |      Series.dt.dayofweek : Alias.\r\n |      Series.dt.weekday : Alias.\r\n |      Series.dt.day_name : Returns the name of the day of the week.\r\n |      \r\n |      Examples\r\n |      --------\r\n |      >>> s = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\r\n |      >>> s.dt.dayofweek\r\n |      2016-12-31    5\r\n |      2017-01-01    6\r\n |      2017-01-02    0\r\n |      2017-01-03    1\r\n |      2017-01-04    2\r\n |      2017-01-05    3\r\n |      2017-01-06    4\r\n |      2017-01-07    5\r\n |      2017-01-08    6\r\n |      Freq: D, dtype: int64\r\n\r\nand for hour, second and quarter we just have \r\n\r\n\r\n |  hour\r\n |      The hours of the datetime.\r\n\r\nsecond\r\n |      The seconds of the datetime.\r\n\r\n|  quarter\r\n |      The quarter of the date.\r\n\r\n \r\nmaybe these examples should be in the descriptor docstrings instead. wdyt?",
        "createdAt" : "2020-04-02T09:51:26Z",
        "updatedAt" : "2020-04-03T10:13:19Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "bdfdfcba-38a1-4217-a0d1-5c11ca76eb98",
        "parentId" : "1b16635a-8cef-41b5-9fa6-0c7253c1d198",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "I believe that we should have them for both, because the class's docstring is telling the user/developer that this class is responsible for accessing the fields, and some examples on.\r\n\r\nAnd on top of that we should also supply specific examples for each field accessor, would love to do so in a follow up.",
        "createdAt" : "2020-04-03T09:55:55Z",
        "updatedAt" : "2020-04-03T10:13:19Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      }
    ],
    "commit" : "793f82cb9a8ead4961497f15414709e11da939a2",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +164,168 @@    1    2\n    2    3\n    dtype: int64\n\n    Returns a Series indexed like the original Series."
  }
]