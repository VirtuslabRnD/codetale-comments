[
  {
    "id" : "353aa939-9c83-4eb3-939d-b31299c5abce",
    "prId" : 16015,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16015#pullrequestreview-63228393",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60a911f3-bc0f-4493-961e-5d6e0ee7b797",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "msg?",
        "createdAt" : "2017-09-17T14:40:49Z",
        "updatedAt" : "2017-09-23T16:33:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "43f90cc13786b57b89709cdb7dd8d2c023adaee6",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +180,184 @@        # overridden.\n        if dtype is not None and (categories is not None or\n                                  ordered is not None):\n            raise TypeError(\"Cannot specify both `dtype` and `categories` \"\n                            \"or `ordered`\")"
  },
  {
    "id" : "8c02ff89-c442-4b31-bd1d-60581c4fefe4",
    "prId" : 17491,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17491#pullrequestreview-62293282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14816afd-3ec3-4528-87d1-c595f31701d6",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "this feels not clean. The `tolist` of Categorical should already ensure this?",
        "createdAt" : "2017-09-12T15:33:12Z",
        "updatedAt" : "2017-09-12T15:42:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a211efca-a197-423d-b33c-07aa5d1d16e8",
        "parentId" : "14816afd-3ec3-4528-87d1-c595f31701d6",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "fixed up",
        "createdAt" : "2017-09-12T23:17:48Z",
        "updatedAt" : "2017-09-12T23:17:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "05f8a6f6b192e9037747d2d0251b8506b53a70d1",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +256,260 @@    def __iter__(self):\n        \"\"\" iterate like Categorical \"\"\"\n        return self._data.__iter__()\n\n    @property"
  },
  {
    "id" : "28f58b3b-2a7d-45b8-a70d-e28de0768ff2",
    "prId" : 17503,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17503#pullrequestreview-63035002",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34f12c97-e52f-45a5-9987-2624cdd72a05",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I don't think this is needed? Base `Index` already defines this as `self._values.tolist()`, and `_values` and `_data` is both a Categorical ?",
        "createdAt" : "2017-09-15T13:01:04Z",
        "updatedAt" : "2017-09-15T13:01:05Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4cf873b410fe5db149d9bce0d84087900ea246b",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +255,259 @@\n    def tolist(self):\n        return self._data.tolist()\n\n    @property"
  },
  {
    "id" : "0a2c38a4-3fc5-4029-8c49-4e1793c6280b",
    "prId" : 19849,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19849#pullrequestreview-135762883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83e8a2aa-c209-4407-aa95-e4bef044a131",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use _shallow_copy here, we *never* call _simple_new directly.  (another reason why the super method should use ``_shallow_copy``, but that's for new PR)",
        "createdAt" : "2018-03-07T22:25:15Z",
        "updatedAt" : "2018-11-06T13:10:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c730a7e1-804d-4491-9894-6b85415f61c0",
        "parentId" : "83e8a2aa-c209-4407-aa95-e4bef044a131",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "done",
        "createdAt" : "2018-03-08T21:36:14Z",
        "updatedAt" : "2018-11-06T13:10:47Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      },
      {
        "id" : "b1ab1aed-1ad3-4efb-9ef0-2bc0f1c58a4e",
        "parentId" : "83e8a2aa-c209-4407-aa95-e4bef044a131",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you move this method to Index.base? does it break anything?",
        "createdAt" : "2018-07-10T10:28:12Z",
        "updatedAt" : "2018-11-06T13:10:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa7311ad48b2af262f403db824836bf87f126ffd",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +327,331 @@\n    def _wrap_setop_result(self, other, result):\n        name = get_op_result_name(self, other)\n        return self._shallow_copy(result, name=name)\n"
  },
  {
    "id" : "6db10525-38e3-41a9-a255-4ddc243eca6d",
    "prId" : 20286,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20286#pullrequestreview-105361138",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e00e4b0-6217-4b53-bd5c-5fc1c0176bff",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "@jorisvandenbossche @l736x the point I was trying to make was that since we mention that the ordering property gets retained with a mapping, that we should have an example for an ordered `CategoricalIndex` explicitly showing this. It could be something as simple as:\r\n\r\n```python\r\nNote that one-to-one mappings will retain the ordering of the CategoricalIndex\r\nidx = pd.CategoricalIndex(['a,'b','c'], ordered=True)\r\nidx.map({'a': 3, 'b': 2, 'c': 1})\r\n```\r\n\r\nJust my $.02 though @jorisvandenbossche I'm good to go whenever you want to merge",
        "createdAt" : "2018-03-20T00:18:38Z",
        "updatedAt" : "2018-03-21T21:27:02Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "83ce3569-76dc-4c0c-8d5e-186163629fda",
        "parentId" : "4e00e4b0-6217-4b53-bd5c-5fc1c0176bff",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It would indeed be good to have an example for this. But maybe just adding `ordered=True` to the example above is enough? (without adding another example)",
        "createdAt" : "2018-03-20T13:56:20Z",
        "updatedAt" : "2018-03-21T21:27:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ec46c1d5-34f3-4d6d-8b73-4edf2539ecc9",
        "parentId" : "4e00e4b0-6217-4b53-bd5c-5fc1c0176bff",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Works for me",
        "createdAt" : "2018-03-20T14:06:03Z",
        "updatedAt" : "2018-03-21T21:27:02Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecbaca0dbdd2d2d743c10c523b72ea9935f6ad26",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +703,707 @@        >>> idx.map({'a': 'first', 'b': 'second', 'c': 'third'})\n        CategoricalIndex(['first', 'second', 'third'], categories=['first',\n                         'second', 'third'], ordered=False, dtype='category')\n\n        If the mapping is one-to-one the ordering of the categories is"
  },
  {
    "id" : "9634e2dd-8d76-4f18-b5d8-2b5c84ce218e",
    "prId" : 21659,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21659#pullrequestreview-132597509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81b3552e-d172-45ac-ab0c-445cca4ef845",
        "parentId" : null,
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "It should be noted that in master this dtype comparison is quite slow:\r\n\r\n```python\r\n>>> d = pd.api.types.CategoricalDtype(categories=['a', 'b', 'c'])\r\n>>> %timeit d == d\r\n149 µs  # master\r\n524 ns  # this PR\r\n```\r\n\r\nThis is the reason for the focus on improving dtype comparisons also in this PR, so this check doesn't cause slowdowns on other parts of pandas. Otherwise the performance benefits of this PR would be ambivalent, causing some slowdowns also).",
        "createdAt" : "2018-06-27T20:33:51Z",
        "updatedAt" : "2018-06-28T10:56:22Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff2de3facbece7f04d7f865f68835744f079f238",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +170,174 @@            elif ordered is not None and ordered != data.ordered:\n                data = data.set_ordered(ordered)\n            if isinstance(dtype, CategoricalDtype) and dtype != data.dtype:\n                # we want to silently ignore dtype='category'\n                data = data._set_dtype(dtype)"
  },
  {
    "id" : "da8e72e2-384c-4f1a-bd21-690a145e1661",
    "prId" : 21986,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21986#pullrequestreview-140436784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "367ee3b5-314a-4596-a1a1-e1b851c45673",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We’re there cases before where the wrong thing was passed? I.e. None != ordered != self.ordered?",
        "createdAt" : "2018-07-22T16:43:17Z",
        "updatedAt" : "2018-07-28T18:53:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "c72a8c6a-2bf0-4dff-9186-f1f839569839",
        "parentId" : "367ee3b5-314a-4596-a1a1-e1b851c45673",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this tested anywhere? I agree this should have broken things",
        "createdAt" : "2018-07-25T10:03:27Z",
        "updatedAt" : "2018-07-28T18:53:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "70cfed4e-701d-45b9-ab4c-c23377a59a1c",
        "parentId" : "367ee3b5-314a-4596-a1a1-e1b851c45673",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "It appears that all instances of this private method `_create_from_codes`  in the codebase never passed an arg to `ordered` (i.e.  `ordered` always defaulted to `None` which always got reassigned to `self.ordered` here) ",
        "createdAt" : "2018-07-25T18:10:33Z",
        "updatedAt" : "2018-07-28T18:53:13Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "56920d66-82ca-4c91-a66f-ce0cd053ab25",
        "parentId" : "367ee3b5-314a-4596-a1a1-e1b851c45673",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "```\r\n(pandas-dev) matthewroeschke:pandas-mroeschke matthewroeschke$ grep -R --include=\"*.py\" _create_from_codes .\r\n./pandas/core/indexes/category.py:    def _create_from_codes(self, codes, categories=None, ordered=None,\r\n./pandas/core/indexes/category.py:                new_target = self._create_from_codes(codes)\r\n./pandas/core/indexes/category.py:        return self._create_from_codes(taken)\r\n./pandas/core/indexes/category.py:        return self._create_from_codes(np.delete(self.codes, loc))\r\n./pandas/core/indexes/category.py:        return self._create_from_codes(codes)\r\n./pandas/core/indexes/category.py:        result = self._create_from_codes(codes, name=name)\r\n./pandas/core/indexes/category.py:        # if name is None, _create_from_codes sets self.name\r\n```",
        "createdAt" : "2018-07-25T18:11:57Z",
        "updatedAt" : "2018-07-28T18:53:13Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "05e4a36cd7d5c8449e362fc30fca03cf867144e0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +134,138 @@            name = self.name\n        cat = Categorical.from_codes(codes, categories=categories,\n                                     ordered=ordered)\n        return CategoricalIndex(cat, name=name)\n"
  },
  {
    "id" : "69a3f4b5-1cac-46df-8283-7811349f8666",
    "prId" : 22547,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22547#pullrequestreview-151190165",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71df2070-d035-4207-9e6a-4c529984f50d",
        "parentId" : null,
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "Hey- why can we get rid of the categories and ordered params out of interest?",
        "createdAt" : "2018-08-30T21:26:37Z",
        "updatedAt" : "2018-08-30T21:26:37Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      },
      {
        "id" : "078255f7-345b-4eb6-a562-3733385e2144",
        "parentId" : "71df2070-d035-4207-9e6a-4c529984f50d",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "The dtype is a ``CategoricalDtype``, which contains attributes ``categories`` and ``ordered``. So we're  not really removing them, only passinf the dtype around instead, which is clearer IMO.",
        "createdAt" : "2018-08-30T21:30:29Z",
        "updatedAt" : "2018-08-30T21:30:30Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "77323b88d809e409f5b1fa74242e96f948f1797e",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +461,465 @@        values = np.where(cond, self.values, other)\n\n        cat = Categorical(values, dtype=self.dtype)\n        return self._shallow_copy(cat, **self._get_attributes_dict())\n"
  },
  {
    "id" : "3da48099-c2d6-415c-8941-20ee74e19da2",
    "prId" : 24114,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24114#pullrequestreview-182792410",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65d6a2c2-5e2a-46b6-ac98-9fa8905e8ca9",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "https://github.com/pandas-dev/pandas/issues/24144",
        "createdAt" : "2018-12-07T17:21:09Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "539d3cb5aec33eb5fc7534eb09b6f0715a809abc",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +502,506 @@    @Appender(_index_shared_docs['where'])\n    def where(self, cond, other=None):\n        # TODO: Investigate an alternative implementation with\n        # 1. copy the underyling Categorical\n        # 2. setitem with `cond` and `other`"
  },
  {
    "id" : "e7e51bba-a17e-413f-bd0c-a317aebe3898",
    "prId" : 24852,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24852#pullrequestreview-205081123",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e344366d-afbb-4dfb-afd7-d7b9726538de",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Does this render? Might need a blank line thereafter",
        "createdAt" : "2019-01-21T03:47:36Z",
        "updatedAt" : "2019-02-19T08:40:32Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "7ed10027-b4bf-4e51-a6ee-88fd457379d4",
        "parentId" : "e344366d-afbb-4dfb-afd7-d7b9726538de",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Yes, it renders. See e.g. https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.drop.html, where under ``dtype`` there also is a no blank line.",
        "createdAt" : "2019-01-21T10:54:10Z",
        "updatedAt" : "2019-02-19T08:40:32Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "5e5dc3e4-4f19-4c42-bfca-acaa99847909",
        "parentId" : "e344366d-afbb-4dfb-afd7-d7b9726538de",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Indeed, only a blank line before it is needed (because in this case the next line is a different block)",
        "createdAt" : "2019-02-19T08:32:33Z",
        "updatedAt" : "2019-02-19T08:40:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "76970f3991b90e9eb86e9b0aee640b2d563fb6e5",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +67,71 @@        `categories` or `ordered`.\n\n        .. versionadded:: 0.21.0\n    copy : bool, default False\n        Make a copy of input ndarray."
  },
  {
    "id" : "17762dd0-5b87-4491-9a29-8c7988657913",
    "prId" : 24852,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24852#pullrequestreview-208838806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4404b4c-1e82-48f5-b726-2c8276d3847e",
        "parentId" : null,
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "pandas.pydata.org supports https, shouldn't that be used instead?\r\n\r\nOTOH, I can see that in the code base we use a mix of **http**://pandas.pydata.org and **https**://pandas.pydata.org, so such a change could also be a seperate commit, where this is doe for the whole code base.",
        "createdAt" : "2019-02-23T11:14:22Z",
        "updatedAt" : "2019-02-23T11:14:22Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "37c4b788-0d15-4203-b68f-2348680af51c",
        "parentId" : "b4404b4c-1e82-48f5-b726-2c8276d3847e",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea separate PR is fine",
        "createdAt" : "2019-02-28T00:28:43Z",
        "updatedAt" : "2019-02-28T00:28:43Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "76970f3991b90e9eb86e9b0aee640b2d563fb6e5",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +108,112 @@    -----\n    See the `user guide\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#categoricalindex>`_\n    for more.\n"
  },
  {
    "id" : "925e1f59-e6fb-4a28-8aa7-f1b7c0153a70",
    "prId" : 30605,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30605#pullrequestreview-337515598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "037aeb14-e851-45f8-a563-e7fe3933edee",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i find this name hard to grok, these are the delegates to the array right, so can we call this\r\n_delegated_to_array?",
        "createdAt" : "2020-01-02T01:00:36Z",
        "updatedAt" : "2020-01-02T01:01:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bf1a369e-d8d4-4b0c-a8d7-c0a271f0740b",
        "parentId" : "037aeb14-e851-45f8-a563-e7fe3933edee",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yah, im planning on doing a refactor to clean all of these up",
        "createdAt" : "2020-01-02T01:47:54Z",
        "updatedAt" : "2020-01-02T01:47:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "322e935e6745ce7ff8ae2b0c060079a2027b7e88",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +159,163 @@    _typ = \"categoricalindex\"\n\n    _raw_inherit = {\n        \"argsort\",\n        \"_internal_get_values\","
  },
  {
    "id" : "0322f3fe-9f19-4c30-8704-4e6f0742df6f",
    "prId" : 30605,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30605#pullrequestreview-337566433",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82b65258-c8a6-4a15-84b7-936abad704dc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here on what is happening",
        "createdAt" : "2020-01-02T01:00:53Z",
        "updatedAt" : "2020-01-02T01:01:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e2b36f9d-5f84-4cc9-b172-3bba448da691",
        "parentId" : "82b65258-c8a6-4a15-84b7-936abad704dc",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "is_scalar is the heavier check, can you put ‘name in self._raw_inherit’ as the first check.",
        "createdAt" : "2020-01-02T08:39:46Z",
        "updatedAt" : "2020-01-02T08:39:46Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "322e935e6745ce7ff8ae2b0c060079a2027b7e88",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +910,914 @@            raise ValueError(\"cannot use inplace with CategoricalIndex\")\n        res = method(*args, **kwargs)\n        if is_scalar(res) or name in self._raw_inherit:\n            return res\n        return CategoricalIndex(res, name=self.name)"
  },
  {
    "id" : "4b7d88ea-d4ed-469a-9456-62ac22794fe0",
    "prId" : 30703,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30703#pullrequestreview-338374113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bad3c213-70f8-489f-beaa-04b88166a4eb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "didn't you deprecate this?",
        "createdAt" : "2020-01-04T23:27:05Z",
        "updatedAt" : "2020-01-05T18:59:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5f2bbb0e-a0c6-45b3-b08d-1355d9217abd",
        "parentId" : "bad3c213-70f8-489f-beaa-04b88166a4eb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "#30702, will need to be rebased",
        "createdAt" : "2020-01-04T23:28:00Z",
        "updatedAt" : "2020-01-05T18:59:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "870743408bb1f4f9f2328876b01ee4d8e19c8aab",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +723,727 @@        return self._shallow_copy(keyarr)\n\n    def take_nd(self, *args, **kwargs):\n        \"\"\"Alias for `take`\"\"\"\n        warnings.warn("
  },
  {
    "id" : "8216157c-3b0b-4a87-be75-13b98c03a3fb",
    "prId" : 30902,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30902#pullrequestreview-344949952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79302cee-729a-4113-8e84-dd1349580aa2",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I assume this is to check that key is hashable. can you not type key as Hashable?",
        "createdAt" : "2020-01-11T10:05:35Z",
        "updatedAt" : "2020-01-19T21:48:55Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "bc1c270e-632f-46a1-918e-0948403e5c02",
        "parentId" : "79302cee-729a-4113-8e84-dd1349580aa2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "that's not a run-time check",
        "createdAt" : "2020-01-18T16:06:23Z",
        "updatedAt" : "2020-01-19T21:48:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "892c9c2a512fa9ae76fc9f3a7a2b2b553421990b",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +391,395 @@            return self.hasnans\n\n        hash(key)\n        return contains(self, key, container=self._engine)\n"
  },
  {
    "id" : "3bee5cd5-cf61-42d9-8673-786f1a40c1b9",
    "prId" : 32079,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32079#pullrequestreview-362729891",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95d22e58-1a4a-4493-9f5d-ae62ecfac0a4",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i think this constructor is analogous to passing i8 to the DTI/TDI/PI constructors.  i wonder if there is some EA attribute/constructor that this corresponds to",
        "createdAt" : "2020-02-21T02:37:05Z",
        "updatedAt" : "2020-02-25T10:50:10Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f07ff4ca-980c-4323-ae3f-4b7dd0401b64",
        "parentId" : "95d22e58-1a4a-4493-9f5d-ae62ecfac0a4",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "Not sure I understand what you mean, but those three all inherit from `DatetimeTimedeltaMixin` which has its own `_wrap_joined_index` method",
        "createdAt" : "2020-02-21T14:07:36Z",
        "updatedAt" : "2020-02-25T10:50:10Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      },
      {
        "id" : "59fee17c-dbed-4932-99db-23349f686c44",
        "parentId" : "95d22e58-1a4a-4493-9f5d-ae62ecfac0a4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "dont worry about it, was just spitballing, tangential to this PR",
        "createdAt" : "2020-02-21T15:54:56Z",
        "updatedAt" : "2020-02-25T10:50:10Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a994d53d01328bc87fa5348f2a32bbea51d78a5",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +791,795 @@    ) -> \"CategoricalIndex\":\n        name = get_op_result_name(self, other)\n        return self._create_from_codes(joined, name=name)\n\n"
  },
  {
    "id" : "f3642960-ce28-4116-918b-9d3b776a5e35",
    "prId" : 36362,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36362#pullrequestreview-488018484",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aad6ecd1-f368-4d64-8750-ec62f6c62dbd",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "would it make sense to align the method names here",
        "createdAt" : "2020-09-14T17:53:38Z",
        "updatedAt" : "2020-09-14T17:53:38Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "f5aad236-a003-4a88-97d8-323a4301de85",
        "parentId" : "aad6ecd1-f368-4d64-8750-ec62f6c62dbd",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "im aiming to get there before long, but not there yet.  Index and subclasses still have several similar-but-not-identical methods like this",
        "createdAt" : "2020-09-14T18:03:48Z",
        "updatedAt" : "2020-09-14T18:03:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f810e865eece128c8fee53098713112178f5c9f8",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +514,518 @@\n    def _maybe_cast_indexer(self, key) -> int:\n        return self._data._unbox_scalar(key)\n\n    @Appender(_index_shared_docs[\"get_indexer\"] % _index_doc_kwargs)"
  },
  {
    "id" : "9167153c-466b-496d-9ad9-93902e445bc1",
    "prId" : 36400,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36400#pullrequestreview-489967927",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd16bcec-657f-420c-9bc6-75f22b6a011e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is hit in tests?",
        "createdAt" : "2020-09-16T19:45:50Z",
        "updatedAt" : "2020-09-16T19:46:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1846ab7aff4fc72122245b1fb34a4f7582dc30f",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +427,431 @@            code_value = self._data._validate_where_value(value)\n        except (TypeError, ValueError):\n            return self.astype(object).putmask(mask, value)\n\n        codes = self._data._ndarray.copy()"
  },
  {
    "id" : "a348e408-9ec9-4c1d-893c-f1b7f82d5904",
    "prId" : 36400,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36400#pullrequestreview-490178658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc232f2d-09ca-47ce-9508-c3c4949e8c11",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this hit in tests?",
        "createdAt" : "2020-09-16T19:46:11Z",
        "updatedAt" : "2020-09-16T19:46:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "35986fe9-f62f-4fd2-b98e-237b2ffb9df7",
        "parentId" : "bc232f2d-09ca-47ce-9508-c3c4949e8c11",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "looks like we have coverage for all of the datetimelike but none of the categorical; will update",
        "createdAt" : "2020-09-17T01:15:49Z",
        "updatedAt" : "2020-09-17T01:15:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1846ab7aff4fc72122245b1fb34a4f7582dc30f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +432,436 @@        np.putmask(codes, mask, code_value)\n        cat = self._data._from_backing_data(codes)\n        return type(self)._simple_new(cat, name=self.name)\n\n    def reindex(self, target, method=None, level=None, limit=None, tolerance=None):"
  },
  {
    "id" : "bbe86ada-83bc-4320-b80f-41a2bf0d22b3",
    "prId" : 36400,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36400#pullrequestreview-490792215",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "543aca99-03e8-4835-8a5f-238010240068",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "not necessarily for today. but is there any value to pushing this down to the array and having a putmask_compat until NEP18 can be supported?\r\n\r\nputmask on the Index returns a copy whereas putmask compat on the array would be expected to be inplace. This may not be so easy for Categorical, but for other numpy backed arrays could be more trivial.\r\n\r\nalso is the goal of extension array backed indexes to allow 3rd party EAs in the Index. If so, putmask on the array would need to be added to the EA interface?",
        "createdAt" : "2020-09-17T11:46:48Z",
        "updatedAt" : "2020-09-17T11:59:54Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "6efc6032-1960-4bf7-b1c9-089bdc2ac55b",
        "parentId" : "543aca99-03e8-4835-8a5f-238010240068",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> [...] putmask on the array would need to be added to the EA interface?\r\n\r\nI would be in favor of this",
        "createdAt" : "2020-09-17T15:03:13Z",
        "updatedAt" : "2020-09-17T15:03:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d7b93e9f-9d52-4a0b-ae2f-b92a5d6617c4",
        "parentId" : "543aca99-03e8-4835-8a5f-238010240068",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yep I am also +1 on this as this is a 'standard' array method, can you create an issue (we might have one?)",
        "createdAt" : "2020-09-17T16:40:14Z",
        "updatedAt" : "2020-09-17T16:40:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1846ab7aff4fc72122245b1fb34a4f7582dc30f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +423,427 @@        return type(self)._simple_new(cat, name=self.name)\n\n    def putmask(self, mask, value):\n        try:\n            code_value = self._data._validate_where_value(value)"
  },
  {
    "id" : "4d845447-2259-4fc5-ad2d-22a2ab2442fb",
    "prId" : 40612,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40612#pullrequestreview-629935565",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89ca4874-2cd0-4fd8-8f4c-4fb20773af3a",
        "parentId" : null,
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "No need to add the return type to the function signature now, as the overloads will be used anyway, but I guess it's OK to keep\r\n\r\n----\r\n\r\ne.g.:\r\n```python\r\nfrom typing import overload, Literal, Optional, Union\r\n\r\n\r\n@overload\r\ndef foo(bar: int) -> float: ...\r\n\r\n@overload\r\ndef foo(bar: str) -> None: ...\r\n\r\n\r\n\r\ndef foo(bar: Union[str, int]): ...\r\n\r\n\r\nbar: Union[int, str]\r\nreveal_type(foo(bar))  # Revealed type is 'Union[builtins.float, None]'\r\n```",
        "createdAt" : "2021-04-07T09:15:05Z",
        "updatedAt" : "2021-04-16T23:01:02Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      },
      {
        "id" : "f70f0280-a827-439c-adf4-b3e187f83a43",
        "parentId" : "89ca4874-2cd0-4fd8-8f4c-4fb20773af3a",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I think it is best to always include the types in the actual signature as well so that mypy checks the consistency of the function itself and reports an error with...\r\n\r\n```\r\ndef foo(bar: Union[str, int]) -> float | None:\r\n    return \"42\"\r\n```",
        "createdAt" : "2021-04-07T11:59:46Z",
        "updatedAt" : "2021-04-16T23:01:02Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "43452e55-e189-45a8-b96b-762241dad54f",
        "parentId" : "89ca4874-2cd0-4fd8-8f4c-4fb20773af3a",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "That's a good point, thanks!",
        "createdAt" : "2021-04-07T12:19:17Z",
        "updatedAt" : "2021-04-16T23:01:02Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      }
    ],
    "commit" : "262b28d62243a720c5125a1231697a2203ee2c33",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +525,529 @@        self, values: ArrayLike\n    ) -> tuple[np.ndarray, np.ndarray]:\n        # both returned ndarrays are np.intp\n        \"\"\"\n        get_indexer_non_unique but after unrapping the target Index object."
  },
  {
    "id" : "c318d8b4-5586-48b0-83d8-63617ae3c159",
    "prId" : 41153,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/41153#pullrequestreview-718689431",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "132beaca-9aa0-4d97-bd6b-28b93a3bda81",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can annotate dtype as Dtype",
        "createdAt" : "2021-07-26T17:57:56Z",
        "updatedAt" : "2021-07-26T17:57:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2a6b86a9-f0fa-46c0-b6af-45b739ed467f",
        "parentId" : "132beaca-9aa0-4d97-bd6b-28b93a3bda81",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Ok.",
        "createdAt" : "2021-07-28T23:31:40Z",
        "updatedAt" : "2021-07-28T23:31:41Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "3f0c5e2c-03c0-4e39-9097-f8327e2be04e",
        "parentId" : "132beaca-9aa0-4d97-bd6b-28b93a3bda81",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "should we change/deprecate Index.astype(np.int32), also Index(foo, dtype=np.int32)?",
        "createdAt" : "2021-07-29T16:24:07Z",
        "updatedAt" : "2021-07-29T16:24:07Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "34dd27d3-232d-4e04-a7c0-054102d19ee7",
        "parentId" : "132beaca-9aa0-4d97-bd6b-28b93a3bda81",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Hmm, `Index.astype(np.int32)` returning an `Int64Index` is probably used internally, so a deprecation would require if/else clauses at various locations in the code base. Probably possible, but could we get this PR in first? This PR isn't public-facing, so I don't see a problem just merging this first/separately.",
        "createdAt" : "2021-07-29T23:21:06Z",
        "updatedAt" : "2021-07-29T23:25:28Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "f8d00197-c2f8-4e68-8db5-6a26dc71e150",
        "parentId" : "132beaca-9aa0-4d97-bd6b-28b93a3bda81",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "doing that as a follow-up sounds good",
        "createdAt" : "2021-07-30T03:22:48Z",
        "updatedAt" : "2021-07-30T03:22:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb72c68f92120a9d2800b8b258f1989cdd139cfd",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +284,288 @@    @doc(Index.astype)\n    def astype(self, dtype: Dtype, copy: bool = True) -> Index:\n        from pandas.core.api import NumericIndex\n\n        dtype = pandas_dtype(dtype)"
  }
]