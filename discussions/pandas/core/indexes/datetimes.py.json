[
  {
    "id" : "b4b6cf12-8455-40dc-ac4f-3fb2d545232f",
    "prId" : 15081,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15081#pullrequestreview-34466151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71a5341f-4abe-4bbd-aa08-c3a9cb0626a2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if this is needed for datetimeliek then push this to the super class rather than having 2 impls.",
        "createdAt" : "2017-04-24T10:30:06Z",
        "updatedAt" : "2017-11-25T00:01:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5189327d-6ed6-4ae0-842b-f56b8d6f8094",
        "parentId" : "71a5341f-4abe-4bbd-aa08-c3a9cb0626a2",
        "authorId" : "b134c7c2-a48e-4c3b-9262-35dbb896ab39",
        "body" : "See the above comment.",
        "createdAt" : "2017-04-25T05:08:16Z",
        "updatedAt" : "2017-11-25T00:01:17Z",
        "lastEditedBy" : "b134c7c2-a48e-4c3b-9262-35dbb896ab39",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd0b7e9f07e38abe5a3a21ba81f825256a1c209e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1459,1463 @@\n    @Appender(_index_shared_docs['_get_values_from_dict'])\n    def _get_values_from_dict(self, data):\n        if len(data):\n            # coerce back to datetime objects for lookup"
  },
  {
    "id" : "19422adc-a804-4865-b69e-466f87779762",
    "prId" : 17482,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17482#pullrequestreview-63174492",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81382931-e753-48b6-aba3-a36585bcb494",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "side issue we can prob remove the experimental (but new PR for that)",
        "createdAt" : "2017-09-13T01:10:06Z",
        "updatedAt" : "2017-09-14T05:33:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "306e4037-8ba6-40c5-9ae5-25946426db52",
        "parentId" : "81382931-e753-48b6-aba3-a36585bcb494",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Did this in #17554, as there were other doc related fixes that needed to be made.",
        "createdAt" : "2017-09-15T22:10:31Z",
        "updatedAt" : "2017-09-15T22:10:31Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6cc86053ed1cdfaaaa0b5b23be259f087acc54e",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +2095,2099 @@                normalize=True, name=None, closed=None, **kwargs):\n    \"\"\"\n    **EXPERIMENTAL** Return a fixed frequency DatetimeIndex, with\n    CustomBusinessDay as the default frequency\n"
  },
  {
    "id" : "5c043174-88b8-4f73-a42c-4b2e7f08b82a",
    "prId" : 18164,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18164#pullrequestreview-99156115",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1998c2a0-8341-4f61-9504-c8e6a117e14f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can change this here to be day_name",
        "createdAt" : "2018-02-25T16:24:06Z",
        "updatedAt" : "2018-03-02T03:27:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ff0bc311-1a6b-4f7c-8554-125149e21f44",
        "parentId" : "1998c2a0-8341-4f61-9504-c8e6a117e14f",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "We discussed just depreciating `weekday_name` for now (and removing it in a future version)",
        "createdAt" : "2018-02-25T21:04:30Z",
        "updatedAt" : "2018-03-02T03:27:53Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "422a85ad-5eca-4082-bb3a-c0b80cbefe24",
        "parentId" : "1998c2a0-8341-4f61-9504-c8e6a117e14f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "exactly, but you can actually remove the implementation. The deprecation still remains, but you can remove internal code.",
        "createdAt" : "2018-02-25T21:05:43Z",
        "updatedAt" : "2018-03-02T03:27:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d97f43b2a16351aeeaf4e993f7014b5e803e2b4d",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1713,1717 @@\n    weekday_name = _field_accessor(\n        'weekday_name',\n        'weekday_name',\n        \"The name of day in a week (ex: Friday)\\n\\n.. deprecated:: 0.23.0\")"
  },
  {
    "id" : "0009499b-3931-4051-97c4-31f8f7949a55",
    "prId" : 18164,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18164#pullrequestreview-100628046",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9da0096b-40d8-42aa-ae3e-9d5b30d99fc4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if weekday_name is here can u remove",
        "createdAt" : "2018-03-01T23:09:09Z",
        "updatedAt" : "2018-03-02T03:27:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d97f43b2a16351aeeaf4e993f7014b5e803e2b4d",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +259,263 @@    to_pydatetime\n    to_series\n    to_frame\n    month_name\n    day_name"
  },
  {
    "id" : "19f32885-4c9b-4976-add7-660acacf57fd",
    "prId" : 18376,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18376#pullrequestreview-79004802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "320ead92-7004-482d-9e38-0a2ae43ece14",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is odd to use ``tzinfo``, these are already wrapped scalars, or an index type, so ``.tz`` is appropriate",
        "createdAt" : "2017-11-20T00:24:12Z",
        "updatedAt" : "2018-01-05T19:26:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d178b7c6-8ca4-44af-ab26-a133d9ed0f85",
        "parentId" : "320ead92-7004-482d-9e38-0a2ae43ece14",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "That was my first thought too but `other` could be a raw `datetime`.",
        "createdAt" : "2017-11-20T00:51:13Z",
        "updatedAt" : "2018-01-05T19:26:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0f3f437c-1562-45cd-99b9-fa6d1f9ff36a",
        "parentId" : "320ead92-7004-482d-9e38-0a2ae43ece14",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use .tz, you can simply wrap ``other = pd.Timestamp(other)``",
        "createdAt" : "2017-11-25T15:03:17Z",
        "updatedAt" : "2018-01-05T19:26:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "31b73367e04ef11edaada670920e7705faf21059",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +663,667 @@    def _assert_tzawareness_compat(self, other):\n        # adapted from _Timestamp._assert_tzawareness_compat\n        other_tz = getattr(other, 'tzinfo', None)\n        if is_datetime64tz_dtype(other):\n            # Get tzinfo from Series dtype"
  },
  {
    "id" : "7e48df33-138a-4c69-ab42-fc4c51210a5e",
    "prId" : 18376,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18376#pullrequestreview-81595344",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54a89aa5-4182-4f46-8800-952a5b4de345",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think would make sense to make a single routine in tslib/timezones.pyx which does the tzawareness check (make it a function), then call it both from Timestamp and here.",
        "createdAt" : "2017-12-06T11:36:04Z",
        "updatedAt" : "2018-01-05T19:26:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a1fdd936-0777-4dc1-9dff-45dc099ba0ba",
        "parentId" : "54a89aa5-4182-4f46-8800-952a5b4de345",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I see the appeal in this but have some reservations.  Do you mind saving this for the next round so I can give it some more thought?",
        "createdAt" : "2017-12-06T17:05:57Z",
        "updatedAt" : "2018-01-05T19:26:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "31b73367e04ef11edaada670920e7705faf21059",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +666,670 @@        if is_datetime64tz_dtype(other):\n            # Get tzinfo from Series dtype\n            other_tz = other.dtype.tz\n        if self.tz is None:\n            if other_tz is not None:"
  },
  {
    "id" : "451d7f1e-9b98-41bb-81cd-e6509c0bf99b",
    "prId" : 19301,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19301#pullrequestreview-90339311",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93f0a12b-9ac8-458c-b382-ddc1e499a958",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think I prefer to return in the if/elif, then just raise instead of an else",
        "createdAt" : "2018-01-21T17:53:09Z",
        "updatedAt" : "2018-02-01T15:58:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ea12058fef4aae679d5e4ccc590126dfe3b24a9",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +123,127 @@                # Following Timestamp convention, __eq__ is all-False\n                # and __ne__ is all True, others raise TypeError.\n                if opname == '__eq__':\n                    return np.zeros(shape=self.shape, dtype=bool)\n                elif opname == '__ne__':"
  },
  {
    "id" : "8df9de04-bb2a-4483-88e6-2d0732b52380",
    "prId" : 19558,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19558#pullrequestreview-95985447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd959773-c03a-40dd-8abf-53f275ace6c9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "huh?",
        "createdAt" : "2018-02-10T15:39:40Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "488ae0dd-7113-4d50-ba2e-2c2d8e450ff7",
        "parentId" : "bd959773-c03a-40dd-8abf-53f275ace6c9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Do you have a concrete question? It's not the nicest design, but for me the comment above is clear (and I suppose the idea is that this is temporary until there is a DatetimeTZArray)",
        "createdAt" : "2018-02-11T16:27:32Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "52654740-6881-466f-8bf0-47e4624351f9",
        "parentId" : "bd959773-c03a-40dd-8abf-53f275ace6c9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "all of this hacking around is not great. The problem is these temporary work-around become more and more. Really need to bite the bullet and fix up the implementations to avoid this.",
        "createdAt" : "2018-02-13T00:04:02Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3af8a21ea0e13ba5fc73db464f6e327552c71b0e",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +1123,1127 @@        # result with out TZ.\n        if self.tz is not None:\n            naive = type(self)(self._ndarray_values, copy=False)\n        else:\n            naive = self"
  },
  {
    "id" : "740dd163-5441-4981-8229-aa7bd2d60d85",
    "prId" : 19558,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19558#pullrequestreview-95985447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1def3c8a-3dc5-4575-88f1-6fcabe0e7e3e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah we really ought to fix this",
        "createdAt" : "2018-02-13T00:02:36Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3af8a21ea0e13ba5fc73db464f6e327552c71b0e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +681,685 @@    @property\n    def _values(self):\n        # tz-naive -> ndarray\n        # tz-aware -> DatetimeIndex\n        if self.tz is not None:"
  },
  {
    "id" : "538b3eec-195d-4052-a564-77498987f5e9",
    "prId" : 19744,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19744#pullrequestreview-97884911",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1e560d5-89fe-448a-9c87-35b6febe287e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what is the purpose of these comments (esp here, after the return)?",
        "createdAt" : "2018-02-20T11:06:41Z",
        "updatedAt" : "2018-02-20T16:09:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d78d5a53-5235-48ea-af82-f79e93dcecff",
        "parentId" : "d1e560d5-89fe-448a-9c87-35b6febe287e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "a) to make sure it gets seen during review, b) as a note to myself or the next pass",
        "createdAt" : "2018-02-20T16:08:49Z",
        "updatedAt" : "2018-02-20T16:09:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "249b7ba8c4767c487abf73e2ab10cb6c85616b51",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +973,977 @@                          PerformanceWarning)\n            return self.astype('O') + np.array(other)\n            # TODO: pass freq='infer' like we do in _sub_offset_array?\n            # TODO: This works for __add__ but loses dtype in __sub__\n"
  },
  {
    "id" : "4af33a21-d376-4d93-be5a-c813eaba7af7",
    "prId" : 19849,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19849#pullrequestreview-102468296",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27cdef4b-9596-49f7-8ec7-0cfaff1bccb8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you just call the super ``.union()`` here (after any conversion isneeded)? then you can inline the union_corner bizness",
        "createdAt" : "2018-03-07T22:25:55Z",
        "updatedAt" : "2018-11-06T13:10:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f8c78d5f-3da7-402a-8fff-976cce41c2f9",
        "parentId" : "27cdef4b-9596-49f7-8ec7-0cfaff1bccb8",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "done",
        "createdAt" : "2018-03-08T21:36:21Z",
        "updatedAt" : "2018-11-06T13:10:47Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa7311ad48b2af262f403db824836bf87f126ffd",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +594,598 @@        \"\"\"\n        self._assert_can_do_setop(other)\n\n        if len(other) == 0 or self.equals(other) or len(self) == 0:\n            return super(DatetimeIndex, self).union(other)"
  },
  {
    "id" : "bffccda2-1379-45f7-b858-6878966664b0",
    "prId" : 20017,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20017#pullrequestreview-102840026",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45703493-65cc-4493-91aa-7e425297a7d3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can remove the see....from are instead add an entry in See Also to to_datetime",
        "createdAt" : "2018-03-10T01:59:16Z",
        "updatedAt" : "2018-03-10T04:13:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0d5da41f-9961-4769-906f-a7750d006e78",
        "parentId" : "45703493-65cc-4493-91aa-7e425297a7d3",
        "authorId" : "2c1dbb03-4ca7-49ad-84e3-0e33909a67fc",
        "body" : "@jreback, done",
        "createdAt" : "2018-03-10T04:35:53Z",
        "updatedAt" : "2018-03-10T04:35:53Z",
        "lastEditedBy" : "2c1dbb03-4ca7-49ad-84e3-0e33909a67fc",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6052d5258e4db3b9849cf97a65cdb044a87df87",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +215,219 @@        Name to be stored in the index\n    dayfirst : bool, default False\n        If True, parse dates in `data` with the day first order\n    yearfirst : bool, default False\n        If True parse dates in `data` with the year first order"
  },
  {
    "id" : "f796f387-affc-45e9-a3aa-9d3277b167c6",
    "prId" : 20096,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20096#pullrequestreview-102856596",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60e8c478-4402-4341-960b-d00845dc6229",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes this is correct",
        "createdAt" : "2018-03-10T16:59:36Z",
        "updatedAt" : "2018-03-13T12:11:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ccc22488-5a7b-40f7-a93a-23b96a47942a",
        "parentId" : "60e8c478-4402-4341-960b-d00845dc6229",
        "authorId" : "ec86b043-06e2-49ba-a729-ba7663f4b6fd",
        "body" : "Thanks..",
        "createdAt" : "2018-03-10T17:11:47Z",
        "updatedAt" : "2018-03-13T12:11:57Z",
        "lastEditedBy" : "ec86b043-06e2-49ba-a729-ba7663f4b6fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff006651a4dc21ac7480eb8d7e64e65d782a92c5",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +2003,2007 @@                        dtype='datetime64[ns, Europe/Berlin]', freq='H')\n\n        >>> dti.tz_convert(None)\n        DatetimeIndex(['2014-08-01 07:00:00',\n                       '2014-08-01 08:00:00',"
  },
  {
    "id" : "cb03d7b9-7ce9-4686-93b7-be3fe4df38c1",
    "prId" : 20275,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20275#pullrequestreview-102878907",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53b2903f-9493-4acd-8533-1ce82878d98d",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Second example showing DatetimeIndex.is_year_start.",
        "createdAt" : "2018-03-11T11:33:50Z",
        "updatedAt" : "2018-03-14T18:51:11Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "1795edda-8a09-407e-b255-f325ac9c9a04",
        "parentId" : "53b2903f-9493-4acd-8533-1ce82878d98d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you then also write something like \"This attribute is both available on a DatetimeIndex as a Series with datetime values\" or for the Series example: \"On a Series with datetime values, the attribute can be accessed with `.dt`\"",
        "createdAt" : "2018-03-11T11:41:15Z",
        "updatedAt" : "2018-03-14T18:51:11Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "fea68efb03906449ac6b8e215ac93cf32a1d6257",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +1774,1778 @@        1    False\n        2    True\n        dtype: bool\n\n        >>> idx = pd.date_range(\"2017-12-30\", periods=3)"
  },
  {
    "id" : "e715bb44-107f-42fb-a383-ea4b117b5aad",
    "prId" : 20510,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20510#pullrequestreview-108516995",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8e59554-68ff-456a-a961-8105c7c6b64e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "same here",
        "createdAt" : "2018-04-01T12:19:39Z",
        "updatedAt" : "2018-04-06T02:55:23Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "67a29d54d0df33977a9cb4bd24b974e240073aa3",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +682,686 @@    @property\n    def tz(self):\n        # GH 18595\n        return self._tz\n"
  },
  {
    "id" : "ca23bfcd-1adb-49df-ac4c-1c0c8153e7cc",
    "prId" : 20912,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20912#pullrequestreview-118540974",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce37256d-0a57-4bee-bf28-8cfb65f64712",
        "parentId" : null,
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "``tz_localize_to_utc`` returns an array and not a ``DatetimeIndex`` so I then convert this array to a ``DatetimeIndex`` called ``index`` so I can pass ``index.values`` to ``_simple_new`` below",
        "createdAt" : "2018-05-08T21:29:22Z",
        "updatedAt" : "2018-07-09T16:01:15Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "e18d996ee8e9d49cdf6606525edc3e4b9402ddbe",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +551,555 @@\n                if tz is not None and getattr(index, 'tz', None) is None:\n                    arr = conversion.tz_localize_to_utc(_ensure_int64(index),\n                                                        tz,\n                                                        ambiguous=ambiguous)"
  },
  {
    "id" : "07a2e1d6-916a-4216-a735-b132bbf07676",
    "prId" : 20912,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20912#pullrequestreview-134067494",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de983dd9-0c7a-4dfe-921f-a6b8e77ad667",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "\r\ni don’t like having 2 different construction paths generally: eg we always need to be an ndarray or already converted to a DTI by the time _simple_new gets called\r\n\r\nwhat i would do is run all of the index tests and see what the current state is\r\nthen probably settle on an ndarray input to _simple_new and put an assertion to validate this",
        "createdAt" : "2018-07-01T15:32:49Z",
        "updatedAt" : "2018-07-09T16:01:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7bb1e859-b47b-400a-b51c-ba1630f14755",
        "parentId" : "de983dd9-0c7a-4dfe-921f-a6b8e77ad667",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Which 2 different construction paths do you mean? \r\nWith the update above, `index` is always an index, and it's always the values that are passed to `_simple_new`. So it is ndarray input to `_simple_new`. ",
        "createdAt" : "2018-07-02T13:06:20Z",
        "updatedAt" : "2018-07-09T16:01:15Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0861eb87-1e80-48f0-9b2c-286501dd9b39",
        "parentId" : "de983dd9-0c7a-4dfe-921f-a6b8e77ad667",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "my point is that we need an assertion to validate this. it may be that everything is fixed, but we should actually test this.",
        "createdAt" : "2018-07-03T16:05:30Z",
        "updatedAt" : "2018-07-09T16:01:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e18d996ee8e9d49cdf6606525edc3e4b9402ddbe",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +577,581 @@            index = index[:-1]\n\n        index = cls._simple_new(index.values, name=name, freq=freq, tz=tz)\n\n        return index"
  },
  {
    "id" : "b2c0e190-c1e0-4225-a6d0-76a92ceb1710",
    "prId" : 20912,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20912#pullrequestreview-136000157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35cee44a-2bd0-48a6-9180-6693ff5adabf",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Why is this one still needed? I thought the idea was now to ensure ndarrays are passed to `_simple_new` and not DatetimeIndexes?",
        "createdAt" : "2018-07-10T15:46:38Z",
        "updatedAt" : "2018-07-10T15:46:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4adcf368-c80b-4a1a-a7a7-ae87f3ee6b93",
        "parentId" : "35cee44a-2bd0-48a6-9180-6693ff5adabf",
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "Well-spotted! I inserted this when I was trying to investigate why some tests were failing and I meant to move it before pushing the commit but forgot. I think we can move this line to just before the call to ``_simple_new`` in this file:\r\nhttps://github.com/pandas-dev/pandas/blob/1dd05ccf56b163dc51786e4f5ce76b279cc0dec3/pandas/core/arrays/datetimelike.py#L43-L53\r\n\r\nDoes this make sense? I did the same thing here:\r\nhttps://github.com/pandas-dev/pandas/blob/1dd05ccf56b163dc51786e4f5ce76b279cc0dec3/pandas/core/indexes/base.py#L501-L513",
        "createdAt" : "2018-07-10T20:40:41Z",
        "updatedAt" : "2018-07-10T20:40:41Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "e18d996ee8e9d49cdf6606525edc3e4b9402ddbe",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +612,616 @@            values = _ensure_int64(values).view(_NS_DTYPE)\n\n        values = getattr(values, 'values', values)\n\n        assert isinstance(values, np.ndarray), \"values is not an np.ndarray\""
  },
  {
    "id" : "83f1bfb3-83ed-4941-a5c0-1d537564e74c",
    "prId" : 21216,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21216#pullrequestreview-126896683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cbef506-ecbc-492c-8e94-0abd6e674e58",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why did this need changing?",
        "createdAt" : "2018-06-05T10:45:39Z",
        "updatedAt" : "2018-06-14T06:34:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9711dbf9-d8e2-4899-9219-67921c920467",
        "parentId" : "9cbef506-ecbc-492c-8e94-0abd6e674e58",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "After this refactor, I was getting errors where the repr didn't look correct but the i8 data was correct in the case when a tz was passed in the `DatetimeIndex` constructor.\r\n\r\n`_is_dates_only` tries to:\r\n> return a boolean if we are only dates (and don't have a timezone)\r\n\r\nbut checks for timezones by re-passing `self.values` into `DatetimeIndex`. I am not sure the historical reason why this was the case, but checking `self.tz is None` fixed the repr issue (and seems to achieve what that function was trying to do in the first place)",
        "createdAt" : "2018-06-07T18:09:17Z",
        "updatedAt" : "2018-06-14T06:34:16Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc7e5c03d9abba90e3e9b4d3bc3f6f7f77a1aaa4",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +796,800 @@        \"\"\"Return a boolean if we are only dates (and don't have a timezone)\"\"\"\n        from pandas.io.formats.format import _is_dates_only\n        return _is_dates_only(self.values) and self.tz is None\n\n    @property"
  },
  {
    "id" : "5f28028f-5640-4264-a9c3-55c4c911f1e4",
    "prId" : 22288,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22288#pullrequestreview-149547818",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ef44f61-fee0-4ca2-92b2-2c6855a699a7",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not unique to this PR, but I think freq._should_cache and freq._normalize_cache may be unnecessary; those predate DateOffsets being immutable",
        "createdAt" : "2018-08-26T19:11:05Z",
        "updatedAt" : "2018-09-05T16:52:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ed681c9bba45ac2f939e85951127de569ae28c7",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +388,392 @@        # Note: This always returns False\n        return (freq._should_cache() and\n                not (freq._normalize_cache and not _normalized) and\n                _naive_in_cache_range(start, end))\n"
  },
  {
    "id" : "e62cb7d9-6997-49ca-ad7f-cfb3fd42365f",
    "prId" : 22504,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22504#pullrequestreview-149517154",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd16c569-334e-4ffb-b949-e56d4bab0ecc",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Hmmm...that output formatting of the lines is a little weird there.  Should they be more aligned?",
        "createdAt" : "2018-08-25T18:06:48Z",
        "updatedAt" : "2018-11-03T07:01:18Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e825d8336569c6c19014f94b325c30e009fb6f7",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +1541,1545 @@    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n               '2018-01-05', '2018-01-08'],\n              dtype='datetime64[ns]', freq='B')\n    \"\"\"\n    if freq is None:"
  },
  {
    "id" : "705c4e30-706f-49bb-82a4-7c35ca55f30b",
    "prId" : 22504,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22504#pullrequestreview-149521206",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1b18026-da07-4deb-a9b7-5a678ede09d0",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Not sure we need to document `**kwargs`?\r\n\r\ncc @WillAyd @datapythonista ",
        "createdAt" : "2018-08-25T18:07:13Z",
        "updatedAt" : "2018-11-03T07:01:18Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "8d66411d-d9bb-453c-ae15-296f6f667d03",
        "parentId" : "d1b18026-da07-4deb-a9b7-5a678ede09d0",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Yes, we've been documenting them, even when we need to say that they don't have any effect. Explicit is better than implicit. :)",
        "createdAt" : "2018-08-25T21:23:19Z",
        "updatedAt" : "2018-11-03T07:01:18Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e825d8336569c6c19014f94b325c30e009fb6f7",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +1518,1522 @@        the 'left', 'right', or both sides (None).\n    **kwargs\n        For compatibility. Has no effect on the result.\n\n    Notes"
  },
  {
    "id" : "2a74f859-0370-4c9f-8efc-31550f9bfecc",
    "prId" : 23113,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23113#pullrequestreview-183279183",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77b4dcb7-d21b-4b3a-a78d-bc12c6e67068",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Does anyone know why the result's `.name` isn't set to `self.name` here?",
        "createdAt" : "2018-12-10T16:34:43Z",
        "updatedAt" : "2018-12-10T16:34:49Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d8bc1acb8759c1e069a7761d2604369ec011e50",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +1145,1149 @@\n    to_perioddelta = wrap_array_method(DatetimeArrayMixin.to_perioddelta,\n                                       False)\n    to_period = wrap_array_method(DatetimeArrayMixin.to_period, True)\n    normalize = wrap_array_method(DatetimeArrayMixin.normalize, True)"
  },
  {
    "id" : "0e55d991-be3c-4e1c-ae5e-1b000a51dec3",
    "prId" : 23431,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23431#pullrequestreview-170449292",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ffd49a6-62aa-47c3-b196-74838025dc17",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Same questions for all your `assert` statements:\r\n\r\n* Are these internal?  If not, it would be nice to have user-friendly error messages.\r\n* Can these `assert` statements be tested in any way?",
        "createdAt" : "2018-10-31T20:09:26Z",
        "updatedAt" : "2018-10-31T20:09:34Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "17d76000c83a284439190cbf50f97f4dc9b24eb2",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +335,339 @@        \"\"\"\n        # DatetimeArray._simple_new will accept either i8 or M8[ns] dtypes\n        assert isinstance(values, np.ndarray), type(values)\n\n        result = super(DatetimeIndex, cls)._simple_new(values, freq, tz,"
  },
  {
    "id" : "16653995-a36f-445b-be08-6f89d419f812",
    "prId" : 23431,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23431#pullrequestreview-170519325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b1d70a2-4471-4fb1-b643-e6ad8f885e58",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why do you need to define this? (or is this a mix-in)?",
        "createdAt" : "2018-11-01T00:03:14Z",
        "updatedAt" : "2018-11-01T00:03:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ddf6d04a-c250-45df-aed3-cb62b524941b",
        "parentId" : "7b1d70a2-4471-4fb1-b643-e6ad8f885e58",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Same as in the TimedeltaIndex PR; we need to get the Index version specifically until we get rid of the DatetimeLikeArrayMixin version in #23430.",
        "createdAt" : "2018-11-01T00:14:00Z",
        "updatedAt" : "2018-11-01T00:14:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "17d76000c83a284439190cbf50f97f4dc9b24eb2",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +176,180 @@    \"\"\"\n    _resolution = cache_readonly(DatetimeArrayMixin._resolution.fget)\n    _shallow_copy = Index._shallow_copy\n\n    _typ = 'datetimeindex'"
  },
  {
    "id" : "19d57525-d4f3-4e42-a1f2-206949bbb89f",
    "prId" : 23518,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23518#pullrequestreview-173032175",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28f7ad42-375e-4bb6-864b-302b7466d323",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is not yet tested I suppose then? ",
        "createdAt" : "2018-11-08T15:43:59Z",
        "updatedAt" : "2018-11-08T15:43:59Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "5cd6592a-e569-4c2b-a698-31f2b8d3d513",
        "parentId" : "28f7ad42-375e-4bb6-864b-302b7466d323",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "That is accurate.",
        "createdAt" : "2018-11-08T15:59:01Z",
        "updatedAt" : "2018-11-08T15:59:01Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5be1a0d2ae44accf588edf996bc6c165f81748e5",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +206,210 @@    # dummy attribute so that datetime.__eq__(DatetimeArray) defers\n    # by returning NotImplemented\n    timetuple = None\n\n    # define my properties & methods for delegation"
  },
  {
    "id" : "819ecf17-fe80-4f83-8b93-34a3e4cf7227",
    "prId" : 23538,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23538#pullrequestreview-181078205",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93507d51-5565-47d5-9679-8b37c1de2bc0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use ``not len(other)...... not len(self)``",
        "createdAt" : "2018-12-02T21:25:41Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "487659fd-92a1-495d-ab5d-f133bd43c604",
        "parentId" : "93507d51-5565-47d5-9679-8b37c1de2bc0",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "done",
        "createdAt" : "2018-12-04T03:22:05Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      }
    ],
    "commit" : "b840f49f2f520b4f5676f50029365cdf89bc2209",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +456,460 @@            return super()._union(other, sort=sort)\n\n        if len(other) == 0 or self.equals(other) or len(self) == 0:\n            return super().union(other, sort=sort)\n"
  },
  {
    "id" : "46defa30-7da2-4476-a157-128f05ed9dbd",
    "prId" : 23587,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23587#pullrequestreview-173701617",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d53bbb6-f922-45ff-bd52-4aa753997c7e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so we not use _tz elsewhere? ",
        "createdAt" : "2018-11-10T04:21:03Z",
        "updatedAt" : "2018-11-12T10:53:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "28e2a224-f095-4d59-84d8-d9db3479896f",
        "parentId" : "2d53bbb6-f922-45ff-bd52-4aa753997c7e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not sure what you're referring to.  Maybe this comment was supposed to be somewhere else in the file?",
        "createdAt" : "2018-11-10T15:56:24Z",
        "updatedAt" : "2018-11-12T10:53:40Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "fc0cbeb9-eedf-4c35-9ed7-b03f76e2ed65",
        "parentId" : "2d53bbb6-f922-45ff-bd52-4aa753997c7e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we have a ``_tz`` attribute on datetimelikes\r\n\r\nI see you have added this (i guess previously). \r\n```\r\n    def _timezone(self):\r\n        \"\"\" Comparable timezone both for pytz / dateutil\"\"\"\r\n        return timezones.get_timezone(self.tzinfo)\r\n```\r\n\r\nwhat is the point of ``_timezones`` when ``_tz`` already does this? ",
        "createdAt" : "2018-11-11T15:04:32Z",
        "updatedAt" : "2018-11-12T10:53:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7211f79c0ce4e1f8c9a035ce0c00364885d29c8",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +1110,1114 @@\n    _timezone = cache_readonly(DatetimeArray._timezone.fget)\n    is_normalized = cache_readonly(DatetimeArray.is_normalized.fget)\n    _resolution = cache_readonly(DatetimeArray._resolution.fget)\n"
  },
  {
    "id" : "2f41c44b-e85e-416d-8ea0-4a9d1f1284aa",
    "prId" : 23621,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23621#pullrequestreview-175348873",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efa51903-d95c-4de4-9f99-066fa7429cbe",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think using .tz_localize() here is more explict",
        "createdAt" : "2018-11-15T13:33:12Z",
        "updatedAt" : "2018-11-18T00:54:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa0e39b1ea7d2d5e8ebedc9e4f0b9aabaf99886e",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +995,999 @@            # needed to localize naive datetimes\n            if key.tzinfo is None:\n                key = Timestamp(key, tz=self.tz)\n            else:\n                key = Timestamp(key).tz_convert(self.tz)"
  },
  {
    "id" : "4dd93226-238c-454d-8019-f278b2ae24d3",
    "prId" : 23621,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23621#pullrequestreview-175348873",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5d883ea-0c02-4442-b9fd-e77b62342859",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "also can you modify this comment to reflect the code",
        "createdAt" : "2018-11-15T13:33:34Z",
        "updatedAt" : "2018-11-18T00:54:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa0e39b1ea7d2d5e8ebedc9e4f0b9aabaf99886e",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +993,997 @@\n        if isinstance(key, datetime):\n            # needed to localize naive datetimes\n            if key.tzinfo is None:\n                key = Timestamp(key, tz=self.tz)"
  },
  {
    "id" : "6fc12bb8-a3f5-47aa-9edb-401e9589d652",
    "prId" : 23643,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23643#pullrequestreview-174079514",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c062a3d-b8c5-44cd-9af9-700fc8d6eefd",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Could you start adding comments like `TODO(DatetimeArray)` here? Once we switch to composition, we should be able to remove the PeriodIndex implementation and use this.",
        "createdAt" : "2018-11-12T19:17:32Z",
        "updatedAt" : "2018-11-14T12:56:37Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "a9654385-1113-474e-bf15-5a81d8064f67",
        "parentId" : "1c062a3d-b8c5-44cd-9af9-700fc8d6eefd",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Good idea",
        "createdAt" : "2018-11-12T20:26:38Z",
        "updatedAt" : "2018-11-14T12:56:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cb072e7ec33c860183c8c20bd3596e0a3bff2a0",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +556,560 @@\n        # TODO(DatetimeArray): change dispatch once inheritance is removed\n        # call DatetimeArray method\n        result = DatetimeArray.unique(self)\n        return self._shallow_copy(result._data)"
  },
  {
    "id" : "268730d9-9a07-4cfb-8c87-3704dbbca198",
    "prId" : 23675,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23675#pullrequestreview-174846472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5fa459d-0f61-4f5f-ada1-4b97e8d015d3",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "IIRC we had to do this because we would cast a list of integers to a numpy array with dtype object; therefore any dtype inspection would be object instead of integer.\r\n\r\nI see that you've modified that casting above so we may not need this case anymore?",
        "createdAt" : "2018-11-13T21:24:20Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "e4c4c396-654b-4dc2-9e7c-2960102bff03",
        "parentId" : "c5fa459d-0f61-4f5f-ada1-4b97e8d015d3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is still needed.  There is a test that specifically passes `np.array([0], dtype=object)` which would fail if we didn't special-case the inferred-dtype.",
        "createdAt" : "2018-11-13T22:32:03Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "13df71fb-cf3a-412e-b750-63d6df498f94",
        "parentId" : "c5fa459d-0f61-4f5f-ada1-4b97e8d015d3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah this is ok",
        "createdAt" : "2018-11-14T13:01:48Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "03d5b353bc367cc06417716c58d40f990d3eee7d",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +287,291 @@            #  also complex or categorical or other extension\n            copy = False\n            if lib.infer_dtype(data) == 'integer':\n                data = data.astype(np.int64)\n            else:"
  },
  {
    "id" : "aa571f35-f661-4438-b9d3-dd25a7f89e15",
    "prId" : 23675,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23675#pullrequestreview-180587380",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6cf8af2-6241-45fd-a44a-cf189215a7b6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you *could* just write this as\r\n\r\n```\r\ntry:\r\n      data = datas.astype(np.int64)\r\nexcept:\r\n     ...\r\n```\r\n*might* be more clear ",
        "createdAt" : "2018-12-02T21:48:48Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "01c00077-1753-41e1-8558-9e04e484fd52",
        "parentId" : "e6cf8af2-6241-45fd-a44a-cf189215a7b6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The issue with that is np.array(['20160405']) becomes np.array([20160405]) instead of 2016-04-05.\r\n",
        "createdAt" : "2018-12-02T22:08:00Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bb0ead29-b992-4958-8cf8-e62ddfe0a204",
        "parentId" : "e6cf8af2-6241-45fd-a44a-cf189215a7b6",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok sure",
        "createdAt" : "2018-12-03T00:30:53Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "03d5b353bc367cc06417716c58d40f990d3eee7d",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +284,288 @@\n        if is_object_dtype(data) or is_string_dtype(data):\n            # TODO: We do not have tests specific to string-dtypes,\n            #  also complex or categorical or other extension\n            copy = False"
  },
  {
    "id" : "bbd9647f-927e-4c9f-925e-dd37e459deeb",
    "prId" : 23739,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23739#pullrequestreview-175810488",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f9f546e-7bd5-44c1-90a9-cce8391d69d7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would just remove the keyword in the future, we don't need to offer this additional funtionaility, this was mainly for backwards compat originally.",
        "createdAt" : "2018-11-16T12:59:55Z",
        "updatedAt" : "2018-11-16T14:44:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f70c230e-ce35-4fdc-9002-f9056d5cca0b",
        "parentId" : "5f9f546e-7bd5-44c1-90a9-cce8391d69d7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, my idea is to remove it in the future. But I think we first need to deprecate the behaviour, so people can switch, and once that is done, we can deprecate the full keyword. \r\nSee also some of the notes about it in https://github.com/pandas-dev/pandas/issues/17832",
        "createdAt" : "2018-11-16T13:04:20Z",
        "updatedAt" : "2018-11-16T14:44:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "980e71f1-8b6a-4b20-858f-49abc64953a2",
        "parentId" : "5f9f546e-7bd5-44c1-90a9-cce8391d69d7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But, we can of course already discourage the 'False' behaviour, by also deprecating that (only allowing `keep_tz=True`",
        "createdAt" : "2018-11-16T13:06:19Z",
        "updatedAt" : "2018-11-16T14:44:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "38265917-dd61-4124-9435-8788df369584",
        "parentId" : "5f9f546e-7bd5-44c1-90a9-cce8391d69d7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah I think i would deprecate any non-None",
        "createdAt" : "2018-11-16T13:57:22Z",
        "updatedAt" : "2018-11-16T14:44:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1390ed5455e2cd281dba6835427a4dfddab0007",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +503,507 @@\n            .. versionchanged:: 0.24\n                The default value will change to True in a future release.\n                You can set ``keep_tz=True`` to already obtain the future\n                behaviour and silence the warning."
  },
  {
    "id" : "61dd5479-ce73-48db-8748-167f261def88",
    "prId" : 23919,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23919#pullrequestreview-178573406",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2afe1d6-478a-4b78-bed8-528b4617a62a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "you can check `__reduce__`, `d` should be `_data` and the attributes dict",
        "createdAt" : "2018-11-26T23:28:13Z",
        "updatedAt" : "2018-11-28T20:03:04Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "3adcf010-881c-40f4-9977-7bc278a8d2e4",
        "parentId" : "c2afe1d6-478a-4b78-bed8-528b4617a62a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "good idea, that seems to work; just pushed",
        "createdAt" : "2018-11-26T23:51:12Z",
        "updatedAt" : "2018-11-28T20:03:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e285fe79-fd4f-4650-b31e-6d6468856977",
        "parentId" : "c2afe1d6-478a-4b78-bed8-528b4617a62a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Looks like this broke the legacy pickle tests; reverted.",
        "createdAt" : "2018-11-27T01:12:52Z",
        "updatedAt" : "2018-11-28T20:03:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc40717a87971899fb4e1cec5a88f084c30e389f",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +54,58 @@        # we ignore warnings from passing verify_integrity=False\n        # TODO: If we knew what was going in to **d, we might be able to\n        #  go through _simple_new instead\n        warnings.simplefilter(\"ignore\")\n        result = cls.__new__(cls, verify_integrity=False, **d)"
  },
  {
    "id" : "a8637b09-478d-4db9-9491-ef4aee65599c",
    "prId" : 23961,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23961#pullrequestreview-179330778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c67fa44-e460-4548-9b75-d470ba5a3786",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you annotate these",
        "createdAt" : "2018-11-28T13:07:39Z",
        "updatedAt" : "2018-11-28T14:51:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bc9db836-3b6a-42b1-bcac-acfc506e480b",
        "parentId" : "6c67fa44-e460-4548-9b75-d470ba5a3786",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "These are end-of-section separators; the methods below are un-grouped.  I can collect all the groups at the top so there is only one un-annotated?",
        "createdAt" : "2018-11-28T14:44:30Z",
        "updatedAt" : "2018-11-28T14:51:42Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a70b3199ac1cb3e3af45d6f3734d6bf4a5010d51",
    "line" : 225,
    "diffHunk" : "@@ -1,1 +648,652 @@            return self._shallow_copy(left_chunk)\n\n    # --------------------------------------------------------------------\n\n    @Appender(_index_shared_docs['astype'])"
  },
  {
    "id" : "93bcefa3-2288-4879-bf2a-8357d41a4abd",
    "prId" : 24074,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24074#pullrequestreview-181795773",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e965de0-e0a2-4729-b0cf-9bbedc80b795",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Could you explain the reasoning behind this change? I don't see why just DatetimeIndex would need to have the integrity verified.",
        "createdAt" : "2018-12-03T18:25:27Z",
        "updatedAt" : "2018-12-05T20:35:05Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "48932f0a-bfa8-4a2f-b619-71a84236c6f2",
        "parentId" : "9e965de0-e0a2-4729-b0cf-9bbedc80b795",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Without this we get a couple of failing pickle-based tests.  tests.frame.test_block_internals.test_pickle and tests.series.test_timeseries.test_pickle",
        "createdAt" : "2018-12-03T19:03:35Z",
        "updatedAt" : "2018-12-05T20:35:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7f1161c5-003c-489e-9270-54a2bb6bad24",
        "parentId" : "9e965de0-e0a2-4729-b0cf-9bbedc80b795",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Gotcha, I've been fighting those too errors too. I suspect they were working before because DatetimeIndex accepts `data=None` for range-based constructors, which we don't want for the arrays.",
        "createdAt" : "2018-12-03T19:09:53Z",
        "updatedAt" : "2018-12-05T20:35:05Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "d45d3c63-91d0-47e6-a730-e4e0ea95ced4",
        "parentId" : "9e965de0-e0a2-4729-b0cf-9bbedc80b795",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is because you need to define ``__reduce__`` on in ``ExtensionArray``. This should *never* be hit by a non-DTI.",
        "createdAt" : "2018-12-04T02:44:36Z",
        "updatedAt" : "2018-12-05T20:35:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e6dd43f0-9990-4991-8a10-3e81f76e1cff",
        "parentId" : "9e965de0-e0a2-4729-b0cf-9bbedc80b795",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "It isn't.  The issue is that this function calls `DatetimeIndex.__new__` with `verify_integrity=False` (since it is unpickling a previously-constructed DTI, integrity has presumably already been verified, so we can skip that somewhat-costly step), and the pickle-tested cases raise ValueError because when we _try_ to verify their integrity they fail",
        "createdAt" : "2018-12-04T03:24:50Z",
        "updatedAt" : "2018-12-05T20:35:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "1488bad7-459a-4092-9514-2f77818d97d3",
        "parentId" : "9e965de0-e0a2-4729-b0cf-9bbedc80b795",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think you need to add back verfiy_integrity to the constructor",
        "createdAt" : "2018-12-04T03:40:03Z",
        "updatedAt" : "2018-12-05T20:35:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "febfafa4-59d5-4de7-b8a4-4144a77d4712",
        "parentId" : "9e965de0-e0a2-4729-b0cf-9bbedc80b795",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think that cases where validate_frequency raises are asking for trouble and the tests cases that fail this check are wonky.\r\n\r\n@TomAugspurger you said you've battled with this.  Any thoughts?",
        "createdAt" : "2018-12-04T04:05:02Z",
        "updatedAt" : "2018-12-05T20:35:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8042c9c7-fbb8-45ac-8d9e-7030b7a1cbac",
        "parentId" : "9e965de0-e0a2-4729-b0cf-9bbedc80b795",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> and the tests cases that fail this check are wonky.\r\n\r\nYah, tracking one of these down, we are pickling+unpickling `df` defined:\r\n\r\n```\r\n@pytest.fixture\r\ndef timezone_frame()\r\n    df = DataFrame({'A': date_range('20130101', periods=3),\r\n                    'B': date_range('20130101', periods=3,\r\n                                    tz='US/Eastern'),\r\n                    'C': date_range('20130101', periods=3,\r\n                                    tz='CET')})\r\n    df.iloc[1, 1] = NaT\r\n    df.iloc[1, 2] = NaT\r\n    return df\r\n```\r\n\r\nThe problem derives from the fact that we've called `__setitem__` (or an equivalent) and should be setting `freq=None` when we do so.\r\n\r\n```\r\n>>> dti = df['B']._values\r\n>>> dti\r\nDatetimeIndex(['2013-01-01 00:00:00-05:00', 'NaT',\r\n               '2013-01-03 00:00:00-05:00'],\r\n              dtype='datetime64[ns, US/Eastern]', freq='D')\r\n\r\n>>> DatetimeIndex._validate_frequency(dti, freq=dti.freq)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python2.7/site-packages/pandas/core/indexes/datetimelike.py\", line 230, in _validate_frequency\r\n    raise ValueError(msg.format(infer=inferred, passed=freq.freqstr))\r\nValueError: Inferred frequency None from passed values does not conform to passed frequency D\r\n```",
        "createdAt" : "2018-12-04T04:19:15Z",
        "updatedAt" : "2018-12-05T20:35:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "302e1dc9-ce80-406d-b48d-db0b2deb6139",
        "parentId" : "9e965de0-e0a2-4729-b0cf-9bbedc80b795",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> @TomAugspurger you said you've battled with this. Any thoughts?\r\n \r\nMedium-term, we can change `DatetimeArray.__new__` to `__init__` and all these problems go away (I think). We *may* not be able to do that until after the split though... I haven't tried.",
        "createdAt" : "2018-12-04T12:44:34Z",
        "updatedAt" : "2018-12-05T20:35:06Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "1abcbb89-a66e-4343-ad90-bd84ebf56627",
        "parentId" : "9e965de0-e0a2-4729-b0cf-9bbedc80b795",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I assume Index subclasses are forced to use `__new__` since `Index.__new__` may return subclasses. But our arrays don't have that restriction.",
        "createdAt" : "2018-12-04T12:45:54Z",
        "updatedAt" : "2018-12-05T20:35:06Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "7fd3c467-23f8-4ba1-9461-3d5c2cd23d14",
        "parentId" : "9e965de0-e0a2-4729-b0cf-9bbedc80b795",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is fixed by #24096",
        "createdAt" : "2018-12-04T17:53:51Z",
        "updatedAt" : "2018-12-05T20:35:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0c381765-b304-4312-b40f-4bc861398a70",
        "parentId" : "9e965de0-e0a2-4729-b0cf-9bbedc80b795",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "let's fix that one first then. this needs to be changed here.",
        "createdAt" : "2018-12-05T12:35:53Z",
        "updatedAt" : "2018-12-05T20:35:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c0c0f7c4-9751-4470-afe6-eb77ffceb819",
        "parentId" : "9e965de0-e0a2-4729-b0cf-9bbedc80b795",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The changes over in #24096 seem to be... different? I don't know how to explain it, but doesn't the fact that we're having to copy data over in #24096 seem disconnected from pickling?\r\n",
        "createdAt" : "2018-12-05T12:44:37Z",
        "updatedAt" : "2018-12-05T20:35:06Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "37339ae2-845c-4ab9-adf6-001740fffcff",
        "parentId" : "9e965de0-e0a2-4729-b0cf-9bbedc80b795",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> but doesn't the fact that we're having to copy data over in #24096 seem disconnected from pickling?\r\n\r\nPickling turns out to be only tangentially related to the \"real\" problem.  In the status quo, altering a datetime64tz column alters the DatetimeIndex that backs it, but doesn't set its `freq` to `None`.  When that DataFrame is pickled and then unpickled, it tries to reconstruct that `DatetimeIndex`, but is passing arguments that _should_ raise `ValueError`.  ATM that gets side-stepped by passing `verify_integrity=False`.\r\n\r\nSo the goal of #24096 is to not corrupt the DatetimeIndex in the first place, making `verify_integrity=False` unnecessary.\r\n\r\nThat's still pretty roundabout.  Any clearer?",
        "createdAt" : "2018-12-05T14:52:31Z",
        "updatedAt" : "2018-12-05T20:35:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "40fb8577-6380-451f-a869-8770ef4cc2e9",
        "parentId" : "9e965de0-e0a2-4729-b0cf-9bbedc80b795",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah, that does help.",
        "createdAt" : "2018-12-05T14:53:58Z",
        "updatedAt" : "2018-12-05T20:35:06Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d7cb39462cacf909520e80a1e9da6d76405d164",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +45,49 @@    tz = d.pop('tz', None)\n\n    if \"data\" in d and not isinstance(d[\"data\"], DatetimeIndex):\n        # Avoid need to verify integrity by calling simple_new directly\n        data = d.pop(\"data\")"
  }
]