[
  {
    "id" : "ec9cd5e8-cbb7-4763-b4a7-e8c8fa459d5b",
    "prId" : 21872,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21872#pullrequestreview-136586123",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c798562-895a-435c-a409-0fd4bc70ad27",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you change to absolute imports, I think we are moving away from the relative ones fro readability.",
        "createdAt" : "2018-07-12T10:15:06Z",
        "updatedAt" : "2018-07-12T19:19:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "935ac7b2b48a98ead0e2140ce3a681649184a18a",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +20,24 @@from pandas.tseries.offsets import Tick, DateOffset\nfrom pandas.tseries.frequencies import to_offset\n\nfrom . import datetimelike as dtl\n"
  },
  {
    "id" : "94a8942b-1fe2-450f-a6e1-66cb29c3777f",
    "prId" : 21872,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21872#pullrequestreview-136722366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77b808f9-1806-4e6c-bac1-5d6d4f91ff51",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so I would define the comparison methods on the class itself, then this should be trivial to change to use the EAMixins",
        "createdAt" : "2018-07-12T10:16:01Z",
        "updatedAt" : "2018-07-12T19:19:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8e0d5b80-8597-4019-b265-08936c9de7fe",
        "parentId" : "77b808f9-1806-4e6c-bac1-5d6d4f91ff51",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I agree we should move in this direction, but prefer to do it separately.  ATM the PR still broadly resembles cut/paste.",
        "createdAt" : "2018-07-12T16:07:41Z",
        "updatedAt" : "2018-07-12T19:19:26Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "935ac7b2b48a98ead0e2140ce3a681649184a18a",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +271,275 @@\n    @classmethod\n    def _add_comparison_methods(cls):\n        \"\"\"add in comparison methods\"\"\"\n        cls.__eq__ = _td_array_cmp('__eq__', cls)"
  },
  {
    "id" : "ea22137c-0989-42d6-8b22-a41c6d66314c",
    "prId" : 23205,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23205#pullrequestreview-166161383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d54aec1e-173e-44d5-9cbf-8552f2795bc2",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "you are going a little bit in circles here, as `asi8` itself is already `self.values.view('i8')` ?",
        "createdAt" : "2018-10-18T11:35:44Z",
        "updatedAt" : "2018-10-22T18:26:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a81128e8-935c-41af-9d13-6d6f9b28c130",
        "parentId" : "d54aec1e-173e-44d5-9cbf-8552f2795bc2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I find `asi8` much more explicit than alues (BTW as I mentioned to jreback the \"v\" key on my keyboard is sticky; I'm going to stop copy-pasting and let you guys infer the missing letter for a while).\r\n",
        "createdAt" : "2018-10-18T15:37:58Z",
        "updatedAt" : "2018-10-22T18:26:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1e11274820813348d7159cb783677a44e45c3e9",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +372,376 @@        Timedelta.to_timedelta64\n        \"\"\"\n        return self.asi8.view('m8[ns]')\n\n    @property"
  },
  {
    "id" : "41071ada-cc2a-48e2-9006-868a662373bc",
    "prId" : 23205,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23205#pullrequestreview-166162766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47d804c6-cfc7-41f7-95c1-62f4c1da40fa",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "do we need both `to_timedelta64` and `asm8` ?",
        "createdAt" : "2018-10-18T11:36:06Z",
        "updatedAt" : "2018-10-22T18:26:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2a689242-f229-4e12-b60e-99114906a1b3",
        "parentId" : "47d804c6-cfc7-41f7-95c1-62f4c1da40fa",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "If we were starting fresh I would say no, but as it is I think consistency with the scalar type is really worthwhile.  (and to your point aboe DatetimeIndex should have a `to_datetime64` method)",
        "createdAt" : "2018-10-18T15:40:31Z",
        "updatedAt" : "2018-10-22T18:26:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1e11274820813348d7159cb783677a44e45c3e9",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +375,379 @@\n    @property\n    def asm8(self):\n        \"\"\"\n        Vectorized analogue of Timedelta.asm8"
  },
  {
    "id" : "e2347447-cc11-41da-a18c-3b09c1163dae",
    "prId" : 23215,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23215#pullrequestreview-165872961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6a3fd9e-0153-4ee1-a381-091b2b34fc4e",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This fixes the bug in TimedeltaIndex + np.timedelta64('NaT')",
        "createdAt" : "2018-10-17T23:15:05Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0466b9c8efd2f38f61a79fdf90464ee71ae72750",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +227,231 @@            # the timedelta interpretation we would get by returning self + NaT\n            result = self.asi8.view('m8[ms]') + NaT.to_datetime64()\n            return DatetimeArrayMixin(result)\n\n        i8 = self.asi8"
  },
  {
    "id" : "7a924f76-dfa0-44d7-ab90-69613d9f4eb5",
    "prId" : 23215,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23215#pullrequestreview-165873095",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14d1a803-5c72-4a59-835e-3b33c5b1caf7",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This fixes a bug with failing to attach `tz`",
        "createdAt" : "2018-10-17T23:15:41Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0466b9c8efd2f38f61a79fdf90464ee71ae72750",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +233,237 @@                                      arr_mask=self._isnan)\n        result = self._maybe_mask_results(result)\n        return DatetimeArrayMixin(result, tz=other.tz)\n\n    def _addsub_offset_array(self, other, op):"
  },
  {
    "id" : "f6a86588-e6cb-4e41-8251-a358c8e7f368",
    "prId" : 23433,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23433#pullrequestreview-170519718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbb04df6-30eb-4a2a-8b55-80668fa1fdde",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in future, or here ok, can you add a doc-string",
        "createdAt" : "2018-11-01T00:08:12Z",
        "updatedAt" : "2018-11-02T18:53:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "776f3461-9cfb-4916-a230-a06e4c88b9e4",
        "parentId" : "cbb04df6-30eb-4a2a-8b55-80668fa1fdde",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "will do in next pass",
        "createdAt" : "2018-11-01T00:16:33Z",
        "updatedAt" : "2018-11-02T18:53:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7dd05e81f8a24e0a3e7294f5f2e8adee0fe3bac",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +112,116 @@\n    @classmethod\n    def _simple_new(cls, values, freq=None, dtype=_TD_DTYPE):\n        # `dtype` is passed by _shallow_copy in corner cases, should always\n        #  be timedelta64[ns] if present"
  },
  {
    "id" : "fcc693cd-d0d8-48e4-b14a-b3d48737233f",
    "prId" : 23433,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23433#pullrequestreview-171327135",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c520e699-43e5-41a0-87b3-accedef86161",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so why do you need to accept object type here (you are also checking for this in TDI.__new__). ?",
        "createdAt" : "2018-11-01T00:25:15Z",
        "updatedAt" : "2018-11-02T18:53:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b3cbda87-5480-47b4-9971-7d1bef0b41d0",
        "parentId" : "c520e699-43e5-41a0-87b3-accedef86161",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "ATM we are checking for it in `TimedeltaArray._simple_new`, so de-facto accepting it in `TimedeltaArray.__new__`.  This is leaving the effective `__new__` policy unchanged while clearing up the `_simple_new` policy",
        "createdAt" : "2018-11-01T00:43:41Z",
        "updatedAt" : "2018-11-02T18:53:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "19a04004-36cb-447b-a0ef-a763a6597204",
        "parentId" : "c520e699-43e5-41a0-87b3-accedef86161",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, assume this is on the list to de-duplicate",
        "createdAt" : "2018-11-03T13:12:09Z",
        "updatedAt" : "2018-11-03T13:12:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7dd05e81f8a24e0a3e7294f5f2e8adee0fe3bac",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +132,136 @@        freq, freq_infer = dtl.maybe_infer_freq(freq)\n\n        values = np.array(values, copy=False)\n        if values.dtype == np.object_:\n            values = array_to_timedelta64(values)"
  },
  {
    "id" : "994625e5-0afe-4abd-aef7-15a8541d5315",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173209630",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3a79af7-4962-4435-a749-132fd565c0a4",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Could potentially just get the freq here for Series[timedelta64[ns]]. If `TimedeltaArray` were done, we could change the following `elif` to an `if` and re-use that. For now I think we could check for timedelta dtype and do `inferred_freq = data.dt.freq` (which I assume is cheaper than re-inferring the freq?)",
        "createdAt" : "2018-11-08T22:06:09Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "80ab7a00-eca1-4fe3-83c7-1ef9b8422d80",
        "parentId" : "d3a79af7-4962-4435-a749-132fd565c0a4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, I'm looking forward to this.\r\n\r\n> and do `inferred_freq = data.dt.freq`\r\n\r\nOne of the first things I tried to do around here was get DatetimeIndex/TimedeltaIndex to have a `.dt` dummy property returning `self` so we wouldn't have to check for Index vs. Series; gotta get around to making that happen.",
        "createdAt" : "2018-11-08T22:52:50Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +441,445 @@        data = np.array(data, copy=False)\n    elif isinstance(data, ABCSeries):\n        data = data._values\n    elif isinstance(data, (ABCTimedeltaIndex, TimedeltaArrayMixin)):\n        inferred_freq = data.freq"
  },
  {
    "id" : "55c0645b-7518-4d04-ae31-d6c0a6a52ae9",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173703337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c2f3da4-dadd-4741-9196-39876ebb54b2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what if this is not true?",
        "createdAt" : "2018-11-10T04:07:41Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c069ce0d-c16f-4713-aec4-f3148580a151",
        "parentId" : "4c2f3da4-dadd-4741-9196-39876ebb54b2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "How do you mean?  Won't the `astype` always have to make a copy in this context?",
        "createdAt" : "2018-11-10T16:12:04Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e0495bbc-2462-48e9-857c-252dd105e192",
        "parentId" : "4c2f3da4-dadd-4741-9196-39876ebb54b2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i don't know if it does or not (i would guess it actually doesn't normally), but looking again, this is ok",
        "createdAt" : "2018-11-11T15:51:20Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +472,476 @@            # TODO: watch out for overflows\n            data = data.astype(_TD_DTYPE)\n            copy = False\n\n    elif is_datetime64_dtype(data):"
  },
  {
    "id" : "f972d621-4246-40d4-95dd-92ceaf9ae6ba",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173703337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7718a78f-9205-438f-99d3-7d09a739874d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do u actually test this is not making a copy? on int64 input is the only case i think",
        "createdAt" : "2018-11-10T04:10:46Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b356c286-6ef3-4e70-957d-bd262f5e56a7",
        "parentId" : "7718a78f-9205-438f-99d3-7d09a739874d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I know I've seen tests about similar things, but not entirely sure they hit this case.  I think I'll implement a test and in one of the upcoming test-collection passes keep an eye out for similar tests to group together.",
        "createdAt" : "2018-11-10T16:46:42Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "db999d4f-91de-42ce-9f39-8be6429532a9",
        "parentId" : "7718a78f-9205-438f-99d3-7d09a739874d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok sure, yeah keeping zero copy is hard, we have very limited testing on this now",
        "createdAt" : "2018-11-11T15:49:47Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +455,459 @@        # treat as multiples of the given unit\n        data, copy_made = ints_to_td64ns(data, unit=unit)\n        copy = copy and not copy_made\n\n    elif is_float_dtype(data):"
  },
  {
    "id" : "ca666191-affa-4b26-aed6-393d9fe3a50c",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173666345",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84fdad59-ac6b-4a30-858e-e1f7a20bd5c6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can this be just a view?",
        "createdAt" : "2018-11-10T04:11:33Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f60f858b-d360-4ca1-8324-a4076220ddfc",
        "parentId" : "84fdad59-ac6b-4a30-858e-e1f7a20bd5c6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "No, that incorrectly multiplies/divides the values:\r\n\r\n```\r\n>>> arr = np.array([1], 'm8[s]')\r\n>>> arr.view('m8[ns]')\r\narray([1], dtype='timedelta64[ns]')\r\n```",
        "createdAt" : "2018-11-10T16:13:47Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +519,523 @@        data = data.view(dtype_str)\n\n        # TODO: watch out for overflows when converting from lower-resolution\n        data = data.astype(\"timedelta64[ns]\")\n        # the astype conversion makes a copy, so we can avoid re-copying later"
  },
  {
    "id" : "43ae583b-eb42-4d90-b955-0967f5d05f98",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173713594",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c348b851-35f7-4a25-8afb-a759bd4285a1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this how we indicate a multiple returns here? @datapythonista ",
        "createdAt" : "2018-11-11T15:48:37Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cc7bc1ba-bcd8-401e-85f0-3b1928f7ff43",
        "parentId" : "c348b851-35f7-4a25-8afb-a759bd4285a1",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "The right format IMO should be something like:\r\n```\r\nReturns\r\n-------\r\ndata : numpy.ndarray\r\n    The sequence converted to a numpy array of type ``timedelta64[ns]``.\r\ninferred_freq : Tick or None\r\n    The inferred frequency of the sequence.\r\n```\r\n\r\nWe're adding this validation in #23432",
        "createdAt" : "2018-11-11T20:38:57Z",
        "updatedAt" : "2018-11-11T20:38:57Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +417,421 @@    Returns\n    -------\n    ndarray[timedelta64[ns]]\n    inferred_freq : Tick or None\n"
  },
  {
    "id" : "32168cbd-6623-4d5d-a965-7f8aabfbae7b",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173706580",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72d01275-f37e-4c67-b9b5-2be986fed932",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is the is_string_dtype needed? ",
        "createdAt" : "2018-11-11T15:49:21Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8c58fe9a-0295-4043-b8cc-ba7d46d4b60e",
        "parentId" : "72d01275-f37e-4c67-b9b5-2be986fed932",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "because we have test cases where we pass e.g. `np.array(['2 Days', '3 Days'], dtype='|S6')`",
        "createdAt" : "2018-11-11T17:16:36Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2c4389fb-cd58-4329-8ab1-8e4283cdbd1b",
        "parentId" : "72d01275-f37e-4c67-b9b5-2be986fed932",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ahh ok",
        "createdAt" : "2018-11-11T17:21:00Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +447,451 @@\n    # Convert whatever we have into timedelta64[ns] dtype\n    if is_object_dtype(data) or is_string_dtype(data):\n        # no need to make a copy, need to convert if string-dtyped\n        data = objects_to_td64ns(data, unit=unit, errors=errors)"
  },
  {
    "id" : "7ca391d9-7e64-43fc-aeba-93d0ea918a30",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173713618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "796e0a2c-583a-4c93-b5c6-2a610369a921",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "If this is public, it'd be nice to have a short description for the parameters.",
        "createdAt" : "2018-11-11T20:40:33Z",
        "updatedAt" : "2018-11-11T20:50:56Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +413,417 @@    copy : bool, default False\n    unit : str, default \"ns\"\n    errors : {\"raise\", \"coerce\", \"ignore\"}, default \"raise\"\n\n    Returns"
  },
  {
    "id" : "af6067ee-434f-46b3-957e-276d2954588c",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173713618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc6128c8-e29e-43bd-9acd-ca9881896632",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "If you can capitalize the first letter of the sentence, and finish with a period, that would be great.\r\n```suggestion\r\n    ValueError : Data cannot be converted to timedelta64[ns].\r\n```",
        "createdAt" : "2018-11-11T20:41:49Z",
        "updatedAt" : "2018-11-11T20:50:56Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +422,426 @@    Raises\n    ------\n    ValueError : data cannot be converted to timedelta64[ns]\n\n    Notes"
  },
  {
    "id" : "844fefef-8e84-48fd-b450-e246e85e30fd",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173713618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "755df710-be97-4576-996a-c39e0cf02ba3",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Still under discussion, but I think the standard we're moving to is to use single backticks for variables, arguments, attributes, functions, methods classes. And double backticks for values and code or pseudo-code. I think the `errors=ignore` should be double backticks.\r\n```suggestion\r\n    Unlike `pandas.to_timedelta`, if setting ```errors=ignore``` will not cause\r\n```",
        "createdAt" : "2018-11-11T20:43:49Z",
        "updatedAt" : "2018-11-11T20:50:56Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +426,430 @@    Notes\n    -----\n    Unlike `pandas.to_timedelta`, if setting `errors=ignore` will not cause\n    errors to be ignored; they are caught and subsequently ignored at a\n    higher level."
  },
  {
    "id" : "1ac613e7-3c92-44e4-90c7-e4a0a1cd589b",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173716434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c078237e-48da-4a3e-b7ec-190db1d4c8fe",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Short description of params.\r\n\r\nAlso, I'd move the `with integer-dtype` to the description, and I wouldn't abbreviate numpy in the type (I wouldn't anywhere, and I don't know if there is agreement on not abbreviating it here).\r\n\r\nAt some point would be nice to have a limited list of types (`str, int, list-like, numpy.array, Series...`), and that would allow us to validate typos, descriptions instead of types... So, would be nice to have just pure types here, and the additional information in the description.",
        "createdAt" : "2018-11-11T20:48:35Z",
        "updatedAt" : "2018-11-11T20:50:56Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "a435de1e-d37c-4924-a689-67293c109830",
        "parentId" : "c078237e-48da-4a3e-b7ec-190db1d4c8fe",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Good notes all around.  Mind if I apply them in the next pass?  The CI is pretty backed up ATM.",
        "createdAt" : "2018-11-11T21:44:37Z",
        "updatedAt" : "2018-11-11T21:44:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b2f94129-130a-4fcc-a783-6f450caa21e3",
        "parentId" : "c078237e-48da-4a3e-b7ec-190db1d4c8fe",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Sure. We'll start soon adding them to the CI and that won't be an option, but you're still on time to do it in two passes. :)",
        "createdAt" : "2018-11-11T21:49:17Z",
        "updatedAt" : "2018-11-11T21:49:18Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +499,503 @@    ----------\n    data : np.ndarray with integer-dtype\n    unit : str, default \"ns\"\n\n    Returns"
  },
  {
    "id" : "de87646c-a39f-4ad2-a36e-f1e252a3714c",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173713618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "999a7b71-455e-4e6f-9390-af461db96958",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Same format as before (same as in parameters)",
        "createdAt" : "2018-11-11T20:49:01Z",
        "updatedAt" : "2018-11-11T20:50:56Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +504,508 @@    -------\n    ndarray[timedelta64[ns]]\n    bool : whether a copy was made\n    \"\"\"\n    copy_made = False"
  },
  {
    "id" : "7d5c5e0d-cd6f-4b94-ac79-e29c2b762461",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173713618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f4aeb27-cf82-4e30-951f-c266c5b0be67",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "same",
        "createdAt" : "2018-11-11T20:49:40Z",
        "updatedAt" : "2018-11-11T20:50:56Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +539,543 @@    data : ndarray or Index\n    unit : str, default \"ns\"\n    errors : {\"raise\", \"coerce\", \"ignore\"}, default \"raise\"\n\n    Returns"
  },
  {
    "id" : "900b591a-d8c0-4cc9-999e-066f6c8b1183",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173713618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8c87d00-0326-473f-b94e-1813bca9cf44",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "`numpy.ndarray` and a short description including the type.",
        "createdAt" : "2018-11-11T20:50:15Z",
        "updatedAt" : "2018-11-11T20:50:56Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +543,547 @@    Returns\n    -------\n    ndarray[timedelta64[ns]]\n\n    Raises"
  },
  {
    "id" : "c7307a69-d64b-41f8-9a29-1efa391a33ac",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173713618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bd31ed5-5332-49a7-98b2-065a90906ef9",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Capital + period",
        "createdAt" : "2018-11-11T20:50:27Z",
        "updatedAt" : "2018-11-11T20:50:56Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 189,
    "diffHunk" : "@@ -1,1 +547,551 @@    Raises\n    ------\n    ValueError : data cannot be converted to timedelta64[ns]\n\n    Notes"
  },
  {
    "id" : "0c4bd386-2dd7-4041-91e7-643d63a8c6ae",
    "prId" : 23587,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23587#pullrequestreview-173267398",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51e230cc-5b9a-4630-8fbc-94c07581850e",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "leftover? Will this cause merge conflicts with another branch you have going?",
        "createdAt" : "2018-11-09T03:51:11Z",
        "updatedAt" : "2018-11-12T10:53:40Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "42ab59b2-967b-4eec-9c08-c5f5c2596392",
        "parentId" : "51e230cc-5b9a-4630-8fbc-94c07581850e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The section is currently empty, put it in place for consistency.  I don't expect any conflicts ATM.",
        "createdAt" : "2018-11-09T03:56:45Z",
        "updatedAt" : "2018-11-12T10:53:40Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7211f79c0ce4e1f8c9a035ce0c00364885d29c8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +191,195 @@        return cls._simple_new(index, freq=freq)\n\n    # ----------------------------------------------------------------\n    # Array-Like / EA-Interface Methods\n"
  },
  {
    "id" : "80846af8-755b-4044-b74d-9201cd493e88",
    "prId" : 23642,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23642#pullrequestreview-174092893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "670c3c7e-c150-4eee-a0a3-7eef169b11c6",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Why's `rmul` have a different pattern?",
        "createdAt" : "2018-11-12T20:32:15Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "23e3736b-ac66-4ef9-88e8-9e29d30b83f3",
        "parentId" : "670c3c7e-c150-4eee-a0a3-7eef169b11c6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Because multiplication is commutative.  Or am I misunderstanding the question?",
        "createdAt" : "2018-11-12T21:05:46Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2df7d65b6e6f87c8facac41c33cca9044f1ce1cc",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +324,328 @@\n    __mul__ = _wrap_tdi_op(operator.mul)\n    __rmul__ = __mul__\n    __truediv__ = _wrap_tdi_op(operator.truediv)\n    __floordiv__ = _wrap_tdi_op(operator.floordiv)"
  },
  {
    "id" : "82b6ad92-856c-4bc5-ae92-7b05316932a9",
    "prId" : 23642,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23642#pullrequestreview-174444120",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ee06b5b-91fc-4db2-b41a-c57cec6ee88c",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Is there an issue if we define `__div__` without the condition on `compat.PY2` (i.e. also define the method for Python 3.x)?",
        "createdAt" : "2018-11-13T05:32:48Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "a8d5a8f2-92d3-425b-ac17-5d242057efa7",
        "parentId" : "9ee06b5b-91fc-4db2-b41a-c57cec6ee88c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not that I'm aware of, but it's the pattern we follow everywhere else",
        "createdAt" : "2018-11-13T15:58:24Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2df7d65b6e6f87c8facac41c33cca9044f1ce1cc",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +330,334 @@\n    if compat.PY2:\n        __div__ = __truediv__\n\n    # Note: TimedeltaIndex overrides this in call to cls._add_numeric_methods"
  },
  {
    "id" : "0cdea69d-e232-45d9-ba42-7f9826ce2213",
    "prId" : 23642,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23642#pullrequestreview-175960946",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be50d8e5-be5e-4757-88a9-c1200fa82049",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we should use the already existing machinery and simply implement this ``_create_arithmetic_method``\r\nand a limited form of:    \r\n\r\n```\r\n@classmethod\r\n    def _add_arithmetic_ops(cls):\r\n```\r\n\r\notherwise you have different styles here than elsewhere.",
        "createdAt" : "2018-11-14T13:28:33Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2aa44f72-3b3a-4f4f-b64d-5f08728fb905",
        "parentId" : "be50d8e5-be5e-4757-88a9-c1200fa82049",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We use this pattern in plenty of places: nattype, Timedelta, field accessors TDA/DTA/PA, ... Using the classmethod in this context doesn't add anything except a layer of indirection.",
        "createdAt" : "2018-11-14T15:06:05Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a5de4b42-13fb-4b2a-b1b1-ea83d8ec0825",
        "parentId" : "be50d8e5-be5e-4757-88a9-c1200fa82049",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right but that'st the point, we *should* be using this here as this IS using the mixin that implements this. This is creating yet another pattern.",
        "createdAt" : "2018-11-14T15:24:37Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1e89aa56-f0a9-4261-8057-3eda71e64e2e",
        "parentId" : "be50d8e5-be5e-4757-88a9-c1200fa82049",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> as this IS using the mixin that implements this\r\n\r\nNo, it isn't.  It inherits from ExtensionOpsMixin to use _add_comparison_comps, NOT _add_arithmetic_ops.  In fact if were to try to use _add_arithmetic_ops that would be working at cross-purposes with `_add_datetimelike_methods`, which specifically implements add/sub-like methods.\r\n\r\nI'm as big a fan of internal consistency and de-duplication as the next guy, but this isn't the place to make that stand.",
        "createdAt" : "2018-11-14T17:30:34Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "fb0c9064-e3cc-44ea-9346-c89bcc482033",
        "parentId" : "be50d8e5-be5e-4757-88a9-c1200fa82049",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback ok for now? \r\n\r\n(anyway, I think the goal is to rework this a bit at some point, to not wrap TimedeltaIndex here, rather the other way around)",
        "createdAt" : "2018-11-16T19:53:27Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "216189a4-67f5-4154-9230-2e8ccace2334",
        "parentId" : "be50d8e5-be5e-4757-88a9-c1200fa82049",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> I think the goal is to rework this a bit at some point, to not wrap TimedeltaIndex here, rather the other way around\r\n\r\nCorrect",
        "createdAt" : "2018-11-16T20:05:17Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2df7d65b6e6f87c8facac41c33cca9044f1ce1cc",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +323,327 @@        return NotImplemented\n\n    __mul__ = _wrap_tdi_op(operator.mul)\n    __rmul__ = __mul__\n    __truediv__ = _wrap_tdi_op(operator.truediv)"
  },
  {
    "id" : "aa02e806-b718-439b-9c3c-fd0fdf99ae1d",
    "prId" : 23642,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23642#pullrequestreview-175963513",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "546a8066-8217-4acd-93cf-b329a77b0824",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "how are you implmenting rfloordiv but not rdiv / rtruediv?",
        "createdAt" : "2018-11-14T13:29:32Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e5edf314-8ec8-4fd5-acfd-4a2e8a85a885",
        "parentId" : "546a8066-8217-4acd-93cf-b329a77b0824",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "very specifically implementing only the methods needed to extend the affected tests.  I'll double-check why i couldn't extend tests for rdiv and rtruediv",
        "createdAt" : "2018-11-14T15:02:43Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "26856fd0-2adb-4c85-9e90-a2c2c9f8a0b0",
        "parentId" : "546a8066-8217-4acd-93cf-b329a77b0824",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok",
        "createdAt" : "2018-11-14T15:23:54Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8b996c80-1709-4cef-89ae-a7a5eddb4985",
        "parentId" : "546a8066-8217-4acd-93cf-b329a77b0824",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jbrockmendel any findings here?",
        "createdAt" : "2018-11-16T19:54:27Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "786dd346-4f79-4d73-862d-de13ee47b1d5",
        "parentId" : "546a8066-8217-4acd-93cf-b329a77b0824",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "AFAICT we don't have test cases for the other methods, at least not in tests.arithmetic.test_timedelta64.  I've scoured the other test files to centralize arithmetic tests, but it's conceivable I've missed some.\r\n\r\nWe definitely need such tests, but I'd rather do that in a dedicated PR, and would prefer not to implement the methods here without the corresponding tests.",
        "createdAt" : "2018-11-16T20:07:16Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b693ea6a-0e4f-40fb-972c-501f7572eee4",
        "parentId" : "546a8066-8217-4acd-93cf-b329a77b0824",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> We definitely need such tests, but I'd rather do that in a dedicated PR, and would prefer not to implement the methods here without the corresponding tests.\r\n\r\n+1",
        "createdAt" : "2018-11-16T20:13:04Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "2df7d65b6e6f87c8facac41c33cca9044f1ce1cc",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +327,331 @@    __truediv__ = _wrap_tdi_op(operator.truediv)\n    __floordiv__ = _wrap_tdi_op(operator.floordiv)\n    __rfloordiv__ = _wrap_tdi_op(ops.rfloordiv)\n\n    if compat.PY2:"
  },
  {
    "id" : "52043699-8cbd-4354-a763-bb12e7cb4ed2",
    "prId" : 23642,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23642#pullrequestreview-174904481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd3c9e14-2db8-4439-b4c7-509f0b86ee53",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you can move ``__abs_``_ here as well",
        "createdAt" : "2018-11-14T13:29:53Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9f2b71a8-24a9-4917-b60d-fb88ab367321",
        "parentId" : "bd3c9e14-2db8-4439-b4c7-509f0b86ee53",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sure",
        "createdAt" : "2018-11-14T15:01:15Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2df7d65b6e6f87c8facac41c33cca9044f1ce1cc",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +337,341 @@            return type(self)(-self._data, freq=-self.freq)\n        return type(self)(-self._data)\n\n    def __abs__(self):\n        # Note: freq is not preserved"
  },
  {
    "id" : "9ff0640f-4269-4fe1-aa4c-da761f0f7c73",
    "prId" : 23643,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23643#pullrequestreview-174869807",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d60cac96-52ae-4b85-9bdb-b6b3d94fec94",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "(why) was this change necessary?",
        "createdAt" : "2018-11-12T19:40:31Z",
        "updatedAt" : "2018-11-14T12:56:37Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "0f90bc83-7c67-42de-8aa5-028e3036f78f",
        "parentId" : "d60cac96-52ae-4b85-9bdb-b6b3d94fec94",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Because in the copy, from_factorized, concat_same_type methods we are passing dtype to this",
        "createdAt" : "2018-11-12T20:35:29Z",
        "updatedAt" : "2018-11-14T12:56:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "69bf5bd9-5eaf-478d-b57f-aa918d37025c",
        "parentId" : "d60cac96-52ae-4b85-9bdb-b6b3d94fec94",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Whoops, I completely missed that the `dtype` argument wasn't present there before. I thought you were changing it from None to `_TD_DTYPE`.",
        "createdAt" : "2018-11-12T20:39:30Z",
        "updatedAt" : "2018-11-14T12:56:37Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "74341037-0a5c-4bfb-a5ef-4ae6bbc194fe",
        "parentId" : "d60cac96-52ae-4b85-9bdb-b6b3d94fec94",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't this not still be passed as None and an if check inside? e.g.\r\n\r\n```\r\nif dtype is None:\r\n     dtype = _TD_DTYPE\r\n```\r\n\r\nas seems passing None should error now",
        "createdAt" : "2018-11-14T13:53:56Z",
        "updatedAt" : "2018-11-14T13:57:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cb072e7ec33c860183c8c20bd3596e0a3bff2a0",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +141,145 @@        return result\n\n    def __new__(cls, values, freq=None, dtype=_TD_DTYPE):\n\n        freq, freq_infer = dtl.maybe_infer_freq(freq)"
  },
  {
    "id" : "ec305c87-a055-464f-8a80-18ee7b46a92e",
    "prId" : 23771,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23771#pullrequestreview-176106010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "880e240f-192e-4459-a7cd-8a1baabdcb0e",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This will be made unnecessary by #23642.",
        "createdAt" : "2018-11-18T21:07:52Z",
        "updatedAt" : "2018-11-18T22:17:43Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c4ad24bd40740dbb274b6c0a384e2b3e57671ac",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +305,309 @@            return type(self)(-self._data, freq=-self.freq)\n        return type(self)(-self._data)\n\n    # ----------------------------------------------------------------\n    # Conversion Methods - Vectorized analogues of Timedelta methods"
  },
  {
    "id" : "bedee53d-f0ee-4c07-a872-2bf1996500d8",
    "prId" : 23789,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23789#pullrequestreview-176575474",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9de4b6af-02b0-4986-b2e1-ea4762d4cd71",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "nitpick but I would write this as\r\n```\r\nvalues, inferred_freq = sequence_to_td64ns(\r\n        values, copy=copy, unit=None)\r\n```",
        "createdAt" : "2018-11-20T01:41:26Z",
        "updatedAt" : "2018-11-27T18:52:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "580c6b4f-9734-462d-9bd4-ab5eb0a801a2",
        "parentId" : "9de4b6af-02b0-4986-b2e1-ea4762d4cd71",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sure",
        "createdAt" : "2018-11-20T01:54:43Z",
        "updatedAt" : "2018-11-27T18:52:33Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3d775e3c8d5eb42a949f7a3b994cceb4ee508f2",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +169,173 @@        values, inferred_freq = sequence_to_td64ns(\n            values, copy=copy, unit=None)\n        if inferred_freq is not None:\n            if freq is not None and freq != inferred_freq:\n                raise ValueError('Inferred frequency {inferred} from passed '"
  },
  {
    "id" : "41be31da-fc44-4cee-966d-341ebfbcb937",
    "prId" : 23789,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23789#pullrequestreview-177477569",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49a3366b-1c38-475f-891c-8a436146b678",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think you could simplify a lot of these checks if also pass ``inferred_freq`` (optionally to ``._validate_frequencey``, and for example handle the fact that result could be a scalar (just ignore the validation) / sequence (do the validation)",
        "createdAt" : "2018-11-21T12:50:57Z",
        "updatedAt" : "2018-11-27T18:52:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "04ae7f4f-809b-42f9-8b65-1fbd8ee0ec62",
        "parentId" : "49a3366b-1c38-475f-891c-8a436146b678",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "ill take a look at this",
        "createdAt" : "2018-11-21T13:53:22Z",
        "updatedAt" : "2018-11-27T18:52:33Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "55f7369f-ed0c-4285-8a29-8df044c81b3b",
        "parentId" : "49a3366b-1c38-475f-891c-8a436146b678",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think you're right that we can change this from a 3-4 liner into a 1-2 liner.  Since this pattern shows up in all four of TDA/DTA/TDI/DTI constructors (actually, future tense for DTA), I'd like to do change them all at once in a dedicated follow-up",
        "createdAt" : "2018-11-22T01:25:10Z",
        "updatedAt" : "2018-11-27T18:52:33Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3d775e3c8d5eb42a949f7a3b994cceb4ee508f2",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +181,185 @@\n        result = cls._simple_new(values, freq=freq)\n        # check that we are matching freqs\n        if inferred_freq is None and len(result) > 0:\n            if freq is not None and not freq_infer:"
  },
  {
    "id" : "94030508-ac31-43bc-872a-5d34ff68cb77",
    "prId" : 23789,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23789#pullrequestreview-178067895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e61819d-09e4-4e4d-bcd7-1cb1cd66251e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this *only* for TimedeltaArray? the index should not be doing this",
        "createdAt" : "2018-11-25T02:09:57Z",
        "updatedAt" : "2018-11-27T18:52:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5f488555-3658-4e4c-b927-02472e977643",
        "parentId" : "9e61819d-09e4-4e4d-bcd7-1cb1cd66251e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yes, `TimedeltaIndex` still uses the _engine/caching implementation",
        "createdAt" : "2018-11-25T02:22:38Z",
        "updatedAt" : "2018-11-27T18:52:33Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0c89f49c-be85-426c-8598-cf9f9540ecc1",
        "parentId" : "9e61819d-09e4-4e4d-bcd7-1cb1cd66251e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I much prefer comments in the code to non-obvious things.",
        "createdAt" : "2018-11-25T02:44:19Z",
        "updatedAt" : "2018-11-27T18:52:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3828ac1b-3c79-4755-a5c3-bc17ea63d2fd",
        "parentId" : "9e61819d-09e4-4e4d-bcd7-1cb1cd66251e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'll add comments to that effect",
        "createdAt" : "2018-11-25T03:02:30Z",
        "updatedAt" : "2018-11-27T18:52:33Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3d775e3c8d5eb42a949f7a3b994cceb4ee508f2",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +255,259 @@    @property\n    def _is_unique(self):\n        return len(unique1d(self.asi8)) == len(self)\n\n    # ----------------------------------------------------------------"
  },
  {
    "id" : "92a28a3b-9b80-41f8-b18f-b87095d9db2f",
    "prId" : 23789,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23789#pullrequestreview-178399175",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3138e42-b0db-4f84-8a0c-e621f0885d5c",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is not covered according to codecov",
        "createdAt" : "2018-11-26T09:39:19Z",
        "updatedAt" : "2018-11-27T18:52:33Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7a97f196-e939-4aa3-97ee-82cd20d34f47",
        "parentId" : "a3138e42-b0db-4f84-8a0c-e621f0885d5c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Thanks.  I'm fairly sure the matching line in `TimedeltaIndex.__new__` is covered by a targeted test.  I'll update that test to cover this too (and after #23675 I plan to do a pass to de-duplicate a bunch of the DTA/TDA/DTI/TDI constructors)",
        "createdAt" : "2018-11-26T17:06:26Z",
        "updatedAt" : "2018-11-27T18:52:33Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3d775e3c8d5eb42a949f7a3b994cceb4ee508f2",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +171,175 @@        if inferred_freq is not None:\n            if freq is not None and freq != inferred_freq:\n                raise ValueError('Inferred frequency {inferred} from passed '\n                                 'values does not conform to passed frequency '\n                                 '{passed}'"
  },
  {
    "id" : "42da18fb-9e97-4eb6-b109-25e6eff5f39b",
    "prId" : 23829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23829#pullrequestreview-177435326",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9e5eacc-7db0-46f0-bfc7-99254b568e7f",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Do we need to ensure `other` is a np.ndarray and not TimedeltaArray here? (meaning, extract the numpy array out of the TimedeltaArray)",
        "createdAt" : "2018-11-21T09:15:52Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c82cea09-0bd1-45a3-b8c0-5540067c26ce",
        "parentId" : "e9e5eacc-7db0-46f0-bfc7-99254b568e7f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "No.  `self._data.__div__(other)` would return `NotImplemented` if other were a `TimedeltaArray`.  This PR includes a test that covers TDA/TDA.",
        "createdAt" : "2018-11-21T14:03:59Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "975d4452-2ed8-4861-8c24-8a2e09726f85",
        "parentId" : "e9e5eacc-7db0-46f0-bfc7-99254b568e7f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, but that is another level of redirection, while we know this will happen and can directly do the correct thing here? \r\n(I suppose `is_timedelta64_dtype` only passes through those two cases of ndarray or TimedeltaArray?)",
        "createdAt" : "2018-11-21T15:16:16Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "13ebbb28-0a99-4378-bb28-cf1bfa5e5114",
        "parentId" : "e9e5eacc-7db0-46f0-bfc7-99254b568e7f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> I suppose is_timedelta64_dtype only passes through those two cases of ndarray or TimedeltaArray?\r\n\r\nYes, since we exclude Series and Index at the start.\r\n\r\n> Yes, but that is another level of redirection, while we know this will happen and can directly do the correct thing here?\r\n\r\nI guess we could replace `other` with `getattr(other, \"_data\", other)` (or if/when TimedeltaArray gets an `__array__` method, just `np.array(other)`, which would be prettier)",
        "createdAt" : "2018-11-21T17:19:37Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "6d9f6f14-5521-4b99-b52f-f055ffa27013",
        "parentId" : "e9e5eacc-7db0-46f0-bfc7-99254b568e7f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "In the (hopefully not too distant future), TimedeltaArray will no longer be an Index. In this case we would want to explicitly grab the `._data` out of it and proceed?",
        "createdAt" : "2018-11-21T21:15:58Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "2398a728-9bde-4bf0-a8e8-ab1078b719a0",
        "parentId" : "e9e5eacc-7db0-46f0-bfc7-99254b568e7f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "And what's the return type here? Does this need to be wrapped in a a `type(self)` so that we return a TimedeltaArray?",
        "createdAt" : "2018-11-21T21:18:20Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "1dd4d6f3-22fc-496a-8d86-47850f1a0f2a",
        "parentId" : "e9e5eacc-7db0-46f0-bfc7-99254b568e7f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> And what's the return type here?\r\n\r\nfloat-dtyped ndarray",
        "createdAt" : "2018-11-21T21:28:57Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d72bf9053803d1a9239682fd47b4a0ca7aaa0c06",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +395,399 @@        elif is_timedelta64_dtype(other):\n            # let numpy handle it\n            return self._data / other\n\n        elif is_object_dtype(other):"
  },
  {
    "id" : "9c024368-6963-4105-b412-d4cb929c578c",
    "prId" : 23829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23829#pullrequestreview-177403111",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed1ff9b8-912e-40d4-a0aa-e99f751e6392",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Do we need to allow this? \r\nI would be fine with raising a TypeError here.\r\n\r\n(I first wanted to say: can't we dispatch that to numpy, thinking that numpy object dtype would handle that, but they raise a TypeError)",
        "createdAt" : "2018-11-21T09:19:44Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "6d49d1d8-fe1d-4f77-b7ad-91d8f36e0d7d",
        "parentId" : "ed1ff9b8-912e-40d4-a0aa-e99f751e6392",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I can see why this would be first on the chopping block if we had to support fewer cases.  Is there a compelling reason _not_ to handle this case?",
        "createdAt" : "2018-11-21T14:05:13Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "c224d928-96d0-4e53-b307-990649aa99ce",
        "parentId" : "ed1ff9b8-912e-40d4-a0aa-e99f751e6392",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "You can also turn around the question :) Is there a compelling reason to *do* handle this case?\r\n\r\nIt's just an extra case to support. And eg, we could discuss whether this should return object dtype data or timedelta, as you are inferring now? Looking at Series behaviour with int64 and object integers, it actually returns object. For datetimes it now raises. So at least, our support is at the moment not very consistent.",
        "createdAt" : "2018-11-21T15:33:30Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "3c8d627c-4328-457b-b15e-555f65ac67a1",
        "parentId" : "ed1ff9b8-912e-40d4-a0aa-e99f751e6392",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> Is there a compelling reason to do handle this case?\r\n\r\nBecause a selling point of pandas is that things Just Work?  Because the code and tests are already written, so the marginal cost is \\approx zero?\r\n\r\n> our support is at the moment not very consistent\r\n\r\nFair enough.  If a goal is to make things more consistent (which I'm +1 on BTW) then we're probably not going to go around and start breaking the places where it currently is supported.",
        "createdAt" : "2018-11-21T17:15:28Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d890af8a-879b-4344-b5cc-590c77bf5fec",
        "parentId" : "ed1ff9b8-912e-40d4-a0aa-e99f751e6392",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i agree with @jbrockmendel here",
        "createdAt" : "2018-11-21T19:39:28Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d72bf9053803d1a9239682fd47b4a0ca7aaa0c06",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +397,401 @@            return self._data / other\n\n        elif is_object_dtype(other):\n            # Note: we do not do type inference on the result, so either\n            #  an object array or numeric-dtyped (if numpy does inference)"
  },
  {
    "id" : "ee6da0bb-0780-4b81-afc6-fdce10c86529",
    "prId" : 23829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23829#pullrequestreview-177353670",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05a1c509-e31a-4d27-8fd2-95bb2eaffb3e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "don't we use\r\n```\r\nresult[:] = np.nan\r\n```\r\nelsewhere?",
        "createdAt" : "2018-11-21T13:06:03Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "74e5208a-f1cb-490c-86f0-a9988f54a9a9",
        "parentId" : "05a1c509-e31a-4d27-8fd2-95bb2eaffb3e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We definitely do that in the cython code since that is a C call instead of a python call.  Happy to do that here, too.",
        "createdAt" : "2018-11-21T14:06:37Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a27f6baa-4708-4a1d-a9c9-72a2ef010d0b",
        "parentId" : "05a1c509-e31a-4d27-8fd2-95bb2eaffb3e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "its prob ok, I agree we prob use ``.fll`` in python code",
        "createdAt" : "2018-11-21T17:24:48Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d72bf9053803d1a9239682fd47b4a0ca7aaa0c06",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +370,374 @@            if other is NaT:\n                # specifically timedelta64-NaT\n                result = np.empty(self.shape, dtype=np.float64)\n                result.fill(np.nan)\n                return result"
  },
  {
    "id" : "a6524aa9-679b-49a4-8ea7-5e6bcdccdd45",
    "prId" : 23829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23829#pullrequestreview-179553696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4105638-7d50-435d-b32f-95a63521dbeb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually this is really close to what soft_convert_objects does.",
        "createdAt" : "2018-11-21T19:41:18Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "77e4e330-2aea-4484-82ca-cf321644150f",
        "parentId" : "c4105638-7d50-435d-b32f-95a63521dbeb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "That isn't clear to me.  `soft_convert_objects` doesn't call `lib.infer_dtype` or any analogue.",
        "createdAt" : "2018-11-22T01:21:49Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "61759f0a-196e-483b-a778-9afb839a074b",
        "parentId" : "c4105638-7d50-435d-b32f-95a63521dbeb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you are essentially re-implementing it. i would rather not do that.",
        "createdAt" : "2018-11-23T02:53:07Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dc45ca43-4381-4d9c-9314-2b1de6611c71",
        "parentId" : "c4105638-7d50-435d-b32f-95a63521dbeb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'm not clear on what you have in mind.  Something like:\r\n\r\n```\r\nif lib.infer_dtype(result) == 'timedelta':\r\n    result = soft_convert_objects(result, timedelta=True, coerce=False)\r\n    return type(self)(result)\r\nreturn result\r\n```\r\n?",
        "createdAt" : "2018-11-23T16:26:41Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2091a1bb-a3d5-4983-9e51-fdc5688489cc",
        "parentId" : "c4105638-7d50-435d-b32f-95a63521dbeb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes",
        "createdAt" : "2018-11-23T21:10:34Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d42194d7-276f-4192-be58-fba11ae34d68",
        "parentId" : "c4105638-7d50-435d-b32f-95a63521dbeb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "That's just swapping out `result, _ = sequence_to_td64ns(result)` with `result = soft_convert_objects(result, datetime=False, numeric=False, timedelta=True, coerce=False, copy=False)`, which in turn can be boiled down to a call to `result = lib.maybe_convert_objects(result, convert_timedelta=True)`, which involves a ton of unnecessary checks given that we already know that `lib.infer_dtype(result) == 'timedelta'`.  `sequence_to_td64ns` is the function for this use case.",
        "createdAt" : "2018-11-23T21:52:33Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3f880c71-5f32-415b-a8d4-c9457b0de702",
        "parentId" : "c4105638-7d50-435d-b32f-95a63521dbeb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "then before we do anything else,  pls use soft_convert_objects. you basically wrote all new routines. I actually don't have a problem with changing the usage of soft_convert_objects to use your new ones, but pls dont' write new things.",
        "createdAt" : "2018-11-25T02:14:08Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0495f0af-143d-4e62-8d75-a2428c187291",
        "parentId" : "c4105638-7d50-435d-b32f-95a63521dbeb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> I actually don't have a problem with changing the usage of soft_convert_objects to use your new ones\r\n\r\n`soft_convert_objects` is for a different use case.  Having that use `sequence_to_td64ns` would not make sense either.\r\n\r\n> you basically wrote all new routines [...] but pls dont' write new things.\r\n\r\nThe \"all new routine\" you're talking about is literally one line in this method `result, _ = sequence_to_td64ns(result)` (`sequence_to_td64ns` is _not_ part of this PR).  I'm really not clear on a) why you think soft_convert_objects is a good fit here, and even more b) why using this specifically-designed-for-TimedeltaArray-constructor function bothers you so much.",
        "createdAt" : "2018-11-25T02:36:50Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "63d38362-f63f-4459-9f2f-86a679d6e146",
        "parentId" : "c4105638-7d50-435d-b32f-95a63521dbeb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "because we are constantly adding new code w/o using the existing code; its like the existing code is being completely bypassed and a new infrastructure is being written around it. i would much rather have the existing code be modified where need be and used.not using existing code just causes many many more issues later and re-discovered bugs. ",
        "createdAt" : "2018-11-25T02:42:33Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7744fda9-97b3-421e-8718-a679285c8d58",
        "parentId" : "c4105638-7d50-435d-b32f-95a63521dbeb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "OK, I can get behind that goal.  Making a dedicated pass to see what parts of core.dtypes can be used to de-duplicate code is something I'd definitely be up for.\r\n\r\nBut the fact remains that soft_convert_objects is not appropriate here.",
        "createdAt" : "2018-11-25T03:15:02Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a2685822-e7f5-41a6-9eb9-7fa5ddbbaef0",
        "parentId" : "c4105638-7d50-435d-b32f-95a63521dbeb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@jreback updated to avoid the need for this discussion at all, and to allow for short-circuiting evaluation in non-timedelta cases.",
        "createdAt" : "2018-11-26T17:35:59Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "6ea48f84-d739-435c-a031-a571f36a6c5a",
        "parentId" : "c4105638-7d50-435d-b32f-95a63521dbeb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Another option would simply be to do no inference at all, just leave the result as object. That is eg what a numeric Series does with object array.",
        "createdAt" : "2018-11-26T23:38:13Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a70c8d01-dabb-4f37-91e5-f41274cfeb78",
        "parentId" : "c4105638-7d50-435d-b32f-95a63521dbeb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok reversing here. i agree with @jorisvandenbossche we don't infer object dtypes in ops (only in the constructor), so this seems reasonable\r\n\r\n```\r\nIn [2]: pd.Series([1,2, 3]) / pd.Series([1,1,1], dtype=object)\r\nOut[2]: \r\n0    1\r\n1    2\r\n2    3\r\ndtype: object\r\n```",
        "createdAt" : "2018-11-27T02:31:17Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "959d5f84-f827-46cd-be8e-8e1aeb79d070",
        "parentId" : "c4105638-7d50-435d-b32f-95a63521dbeb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Fair enough, will change",
        "createdAt" : "2018-11-27T02:52:33Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "1a829c6c-30ed-428e-b9a9-29905129ec3a",
        "parentId" : "c4105638-7d50-435d-b32f-95a63521dbeb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "changed.  this ends up changing the behavior of the `DataFrame` test case, but that's largely driven by the fact that `DataFrame([NaT])` gets inferred as `datetime64[ns]`",
        "createdAt" : "2018-11-27T03:09:29Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ada642c7-302d-4824-8af9-58f8f4ae3b46",
        "parentId" : "c4105638-7d50-435d-b32f-95a63521dbeb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what is changed here? shouldn't is_object_type result in a TypeError or a NotImplemented?",
        "createdAt" : "2018-11-28T17:50:47Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9c977bd8-094f-42dd-bd77-e733169bb6a0",
        "parentId" : "c4105638-7d50-435d-b32f-95a63521dbeb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "There are two independent questions that have been asked about the object-dtype case:\r\n\r\n1) should we just raise TypeError instead or should we handle it so it Just Works (the latter being what this PR does)\r\n2) Given that we handle this case, do we try to infer the output dtpye or just return object dtype?  This PR originally did the former, then changed to do the latter following discussion.",
        "createdAt" : "2018-11-28T18:51:52Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d0846f48-c71a-4bdb-9439-d52585f150fa",
        "parentId" : "c4105638-7d50-435d-b32f-95a63521dbeb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok this is fine, you are returning object dtype (which is consistent with how we do for Series now)",
        "createdAt" : "2018-11-28T22:42:22Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d72bf9053803d1a9239682fd47b4a0ca7aaa0c06",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +402,406 @@            #  will be returned.  GH#23829\n            result = [self[n] / other[n] for n in range(len(self))]\n            result = np.array(result)\n            return result\n"
  },
  {
    "id" : "63ca1f28-0c3e-4b2a-b904-b4edbe469b70",
    "prId" : 23829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23829#pullrequestreview-178587948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fba6caf-9f9d-431c-8618-5041af181103",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add commments where appropriate",
        "createdAt" : "2018-11-27T02:31:43Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d72bf9053803d1a9239682fd47b4a0ca7aaa0c06",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +412,416 @@        # X / timedelta is defined only for timedelta-like X\n        other = lib.item_from_zerodim(other)\n\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCIndexClass)):\n            return NotImplemented"
  },
  {
    "id" : "0e420d35-a949-4be0-9705-c608fd0ae250",
    "prId" : 23829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23829#pullrequestreview-179554010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df50b8f6-cf9d-41fe-b815-ce42cd179bb5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "or can raise NotImplemented here? does that work?",
        "createdAt" : "2018-11-27T02:32:04Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b9a30ad0-5266-4d7c-aadb-bafe7bd020c1",
        "parentId" : "df50b8f6-cf9d-41fe-b815-ce42cd179bb5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think that might be fragile; might depend on having `__array__` implemented.  Either way, better to make it explicit than rely on numpy imlpementation",
        "createdAt" : "2018-11-27T02:55:09Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b555b902-a68f-468b-be70-040946492439",
        "parentId" : "df50b8f6-cf9d-41fe-b815-ce42cd179bb5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same comment as above",
        "createdAt" : "2018-11-28T17:50:59Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c07700cb-3fac-44f8-a1ab-cc4ebdb6660f",
        "parentId" : "df50b8f6-cf9d-41fe-b815-ce42cd179bb5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, can you add a comment here (and above), were we do the operation but do not infer the output type (just for posterity), otherwise this PR lgtm. ping on green.",
        "createdAt" : "2018-11-28T22:43:06Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d72bf9053803d1a9239682fd47b4a0ca7aaa0c06",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +443,447 @@            return other / self._data\n\n        elif is_object_dtype(other):\n            # Note: unlike in __truediv__, we do not _need_ to do type#\n            #  inference on the result.  It does not raise, a numeric array"
  },
  {
    "id" : "7ffc4340-30a2-45d9-9f70-3285e5b704d5",
    "prId" : 23885,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23885#pullrequestreview-180579023",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d48a0f44-19ed-401c-9dc4-a5416a0e4222",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "any nice way to remove some of this duplication (floordir / div), maybe with some helper functions. ",
        "createdAt" : "2018-12-02T21:38:50Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "987eecdba662c14ddf9d364d9de73af189cb4d71",
    "line" : 230,
    "diffHunk" : "@@ -1,1 +548,552 @@\n        elif is_object_dtype(other):\n            result = [other[n] // self[n] for n in range(len(self))]\n            result = np.array(result)\n            return result"
  },
  {
    "id" : "f34cbf7e-b171-4134-b8e6-58591e2df42c",
    "prId" : 23885,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23885#pullrequestreview-180580483",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8c942d7-83ee-41b1-8fdb-753866db1306",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can this share with ``__mod__``?",
        "createdAt" : "2018-12-02T21:39:35Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7bff6187-ea25-448c-8506-182cdc78e6ab",
        "parentId" : "f8c942d7-83ee-41b1-8fdb-753866db1306",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not really.  For div and divmod either timedeltas or numeric are valid.  For reversed ops only timedeltas are valid.\r\n",
        "createdAt" : "2018-12-02T22:14:57Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "987eecdba662c14ddf9d364d9de73af189cb4d71",
    "line" : 252,
    "diffHunk" : "@@ -1,1 +570,574 @@        # Note: This is a naive implementation, can likely be optimized\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCIndexClass)):\n            return NotImplemented\n\n        other = lib.item_from_zerodim(other)"
  },
  {
    "id" : "bc1fd02c-3e4d-4d21-81bf-544173229951",
    "prId" : 23885,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23885#pullrequestreview-180579023",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea9bdfb4-648a-4a01-b3a7-d9dacb5154ca",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can this share with ``__divmod__``?",
        "createdAt" : "2018-12-02T21:39:48Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "987eecdba662c14ddf9d364d9de73af189cb4d71",
    "line" : 273,
    "diffHunk" : "@@ -1,1 +591,595 @@\n    def __rdivmod__(self, other):\n        # Note: This is a naive implementation, can likely be optimized\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCIndexClass)):\n            return NotImplemented"
  },
  {
    "id" : "d87b506e-240f-4bda-be50-82688ef5f8fc",
    "prId" : 23885,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23885#pullrequestreview-180580499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e676f55-74ef-465d-82fe-0a5f2d42d707",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "lots of this impl matches how this is done in Timedelta. too bad can't easily share.",
        "createdAt" : "2018-12-02T21:42:19Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e2bb19e9-65d5-4246-b015-c88d953ec414",
        "parentId" : "0e676f55-74ef-465d-82fe-0a5f2d42d707",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "After DTA/TDA are done I might look at this more seriously.",
        "createdAt" : "2018-12-02T22:15:29Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "987eecdba662c14ddf9d364d9de73af189cb4d71",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +327,331 @@        if len(other) != len(self) and not is_timedelta64_dtype(other):\n            # Exclude timedelta64 here so we correctly raise TypeError\n            #  for that instead of ValueError\n            raise ValueError(\"Cannot multiply with unequal lengths\")\n"
  },
  {
    "id" : "b3b47ef4-eee2-43ad-877c-297d8c792b36",
    "prId" : 23885,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23885#pullrequestreview-180579023",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0ced160-d7f9-4598-98d7-8ddc34c106dd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can this share with floordiv?",
        "createdAt" : "2018-12-02T21:42:35Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "987eecdba662c14ddf9d364d9de73af189cb4d71",
    "line" : 190,
    "diffHunk" : "@@ -1,1 +508,512 @@\n    def __rfloordiv__(self, other):\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCIndexClass)):\n            return NotImplemented\n"
  },
  {
    "id" : "c189a79e-79ee-48b8-aa18-07f73bebe193",
    "prId" : 23885,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23885#pullrequestreview-180591764",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1f607a1-179e-48cf-86fd-b542c5f74d3d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so you don't do this everywhere?\r\n\r\nmaybe add a function that you call to avoid repeating code\r\n```\r\ndef _prepare_other(other):\r\n   other = lib.item_from_zerodim(other)\r\n   if is_list_like(other) and not hasattr(other, \"dtype\"):\r\n            # list, tuple\r\n            other = np.array(other)\r\n   return other\r\n```",
        "createdAt" : "2018-12-03T00:50:47Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e03b569b-d955-42db-821c-9c76c0c4b337",
        "parentId" : "a1f607a1-179e-48cf-86fd-b542c5f74d3d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I opened #23853 for exactly this reason.  It merits a dedicated PR.",
        "createdAt" : "2018-12-03T01:28:50Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "53617eeb-7d49-45a1-9961-4e20e5a55bff",
        "parentId" : "a1f607a1-179e-48cf-86fd-b542c5f74d3d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right, but now you are missing some code here on several of the operators (from_zero_dim), so maybe better to fix now.",
        "createdAt" : "2018-12-03T01:31:07Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "987eecdba662c14ddf9d364d9de73af189cb4d71",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +309,313 @@\n    def __mul__(self, other):\n        other = lib.item_from_zerodim(other)\n\n        if isinstance(other, (ABCDataFrame, ABCSeries, ABCIndexClass)):"
  },
  {
    "id" : "a70eb89a-07bb-42b8-9874-6a40f1293a27",
    "prId" : 23885,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23885#pullrequestreview-180588657",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b86d167-05e8-4a25-8987-31721247d423",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "might be useful to put this in a method that can be shared across multiple ops",
        "createdAt" : "2018-12-03T01:09:07Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "987eecdba662c14ddf9d364d9de73af189cb4d71",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +331,335 @@\n        if is_object_dtype(other):\n            # this multiplication will succeed only if all elements of other\n            #  are int or float scalars, so we will end up with\n            #  timedelta64[ns]-dtyped result"
  },
  {
    "id" : "e243ea99-dd98-4418-9325-64f5c6c3a642",
    "prId" : 23885,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23885#pullrequestreview-180588657",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4afa3a66-6380-4f3f-84fa-f2586b2653a6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this looks an awful lot like _maybe_mask_missing (in Index)",
        "createdAt" : "2018-12-03T01:12:21Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "987eecdba662c14ddf9d364d9de73af189cb4d71",
    "line" : 164,
    "diffHunk" : "@@ -1,1 +482,486 @@\n            # numpy timedelta64 does not natively support floordiv, so operate\n            #  on the i8 values\n            result = self.asi8 // other.asi8\n            mask = self._isnan | other._isnan"
  },
  {
    "id" : "b29e88a0-f160-4392-9353-d19cb92bb15f",
    "prId" : 24024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24024#pullrequestreview-184493680",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "054739ff-df82-4bc2-b43c-e19869e19700",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you define this in the super class (as I think it repeats fro DTA)? ahh, maybe not as you have a dtype= default",
        "createdAt" : "2018-12-13T01:18:20Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9a3329f2-1e42-4c7a-84e7-eb54ea9c0605",
        "parentId" : "054739ff-df82-4bc2-b43c-e19869e19700",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "They ended up quite similar. The default dtype isn't a deal breaker. We can just make that None.\r\n\r\nThe main additional complexity in DTA is the timezone handling. I suspect they could be merged with a bit of effort.",
        "createdAt" : "2018-12-13T03:55:33Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "2436214219fc116239640889715c9bc6575f571b",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +192,196 @@        self._freq = freq\n\n    @classmethod\n    def _simple_new(cls, values, freq=None, dtype=_TD_DTYPE):\n        return cls(values, dtype=dtype, freq=freq)"
  },
  {
    "id" : "baa8310f-6426-41c4-9e3f-ca65a14a8582",
    "prId" : 24405,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24405#pullrequestreview-187990292",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50b2fa53-8e74-4df9-a4cb-8ed05c2a4746",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this doesn't make sense to return i8 here (if above you are returning ``m8``",
        "createdAt" : "2018-12-25T16:40:08Z",
        "updatedAt" : "2018-12-28T19:28:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "afe5ad89-0562-4800-9c39-c17555e4ca74",
        "parentId" : "50b2fa53-8e74-4df9-a4cb-8ed05c2a4746",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "See discussion on the same code in #24024; this is the same behavior we have in master for TimedeltaIndex.",
        "createdAt" : "2018-12-25T20:59:30Z",
        "updatedAt" : "2018-12-28T19:28:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "dadb9db0-b459-4850-814f-f50adaf36b5e",
        "parentId" : "50b2fa53-8e74-4df9-a4cb-8ed05c2a4746",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this actually tested? this is not correct",
        "createdAt" : "2018-12-25T23:56:54Z",
        "updatedAt" : "2018-12-28T19:28:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "979b7f4e-1d3c-451a-b9d4-d90ead517614",
        "parentId" : "50b2fa53-8e74-4df9-a4cb-8ed05c2a4746",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@TomAugspurger insight here?",
        "createdAt" : "2018-12-26T00:23:43Z",
        "updatedAt" : "2018-12-28T19:28:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8c891921-c628-43fe-89c2-ce1a35d08f6b",
        "parentId" : "50b2fa53-8e74-4df9-a4cb-8ed05c2a4746",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is identical to https://github.com/pandas-dev/pandas/pull/24405/files#diff-0be8361afef6d9bf7222ddb4f8878f36L293. I don't know why that's the behavior on master.",
        "createdAt" : "2018-12-27T02:42:56Z",
        "updatedAt" : "2018-12-28T19:28:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "6843b6df-892c-4b8b-979e-5742c8e549bf",
        "parentId" : "50b2fa53-8e74-4df9-a4cb-8ed05c2a4746",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This was just moved from TimedeltaIndex to TimedeltaArray",
        "createdAt" : "2018-12-27T02:43:22Z",
        "updatedAt" : "2018-12-28T19:28:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "eac662b7a1eaf2c280ee91d9f9843963be4f106b",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +255,259 @@                return values\n            result = self._data.astype(dtype, copy=copy)\n            return result.astype('i8')\n        elif is_timedelta64_ns_dtype(dtype):\n            if copy:"
  },
  {
    "id" : "92c9b46d-2535-44fb-9289-e3aa0f47e810",
    "prId" : 24405,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24405#pullrequestreview-188199316",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13df63b4-d95a-4df0-b462-f63f964d85cc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there a rule for using _eadata? e.g. is it simply going to substitue for _data?",
        "createdAt" : "2018-12-28T00:34:55Z",
        "updatedAt" : "2018-12-28T19:28:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e0383d97-bca8-4f57-af37-235ad635a1c3",
        "parentId" : "13df63b4-d95a-4df0-b462-f63f964d85cc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "_eadata exists (until #24024 is done) on the _index_ classes, not on the array classes.",
        "createdAt" : "2018-12-28T00:36:59Z",
        "updatedAt" : "2018-12-28T19:28:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "eac662b7a1eaf2c280ee91d9f9843963be4f106b",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +249,253 @@            if self._hasnans:\n                # avoid double-copying\n                result = self._data.astype(dtype, copy=False)\n                values = self._maybe_mask_results(result,\n                                                  fill_value=None,"
  }
]