[
  {
    "id" : "ec9cd5e8-cbb7-4763-b4a7-e8c8fa459d5b",
    "prId" : 21872,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21872#pullrequestreview-136586123",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c798562-895a-435c-a409-0fd4bc70ad27",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you change to absolute imports, I think we are moving away from the relative ones fro readability.",
        "createdAt" : "2018-07-12T10:15:06Z",
        "updatedAt" : "2018-07-12T19:19:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "935ac7b2b48a98ead0e2140ce3a681649184a18a",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +20,24 @@from pandas.tseries.offsets import Tick, DateOffset\nfrom pandas.tseries.frequencies import to_offset\n\nfrom . import datetimelike as dtl\n"
  },
  {
    "id" : "94a8942b-1fe2-450f-a6e1-66cb29c3777f",
    "prId" : 21872,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21872#pullrequestreview-136722366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77b808f9-1806-4e6c-bac1-5d6d4f91ff51",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so I would define the comparison methods on the class itself, then this should be trivial to change to use the EAMixins",
        "createdAt" : "2018-07-12T10:16:01Z",
        "updatedAt" : "2018-07-12T19:19:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8e0d5b80-8597-4019-b265-08936c9de7fe",
        "parentId" : "77b808f9-1806-4e6c-bac1-5d6d4f91ff51",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I agree we should move in this direction, but prefer to do it separately.  ATM the PR still broadly resembles cut/paste.",
        "createdAt" : "2018-07-12T16:07:41Z",
        "updatedAt" : "2018-07-12T19:19:26Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "935ac7b2b48a98ead0e2140ce3a681649184a18a",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +271,275 @@\n    @classmethod\n    def _add_comparison_methods(cls):\n        \"\"\"add in comparison methods\"\"\"\n        cls.__eq__ = _td_array_cmp('__eq__', cls)"
  },
  {
    "id" : "ea22137c-0989-42d6-8b22-a41c6d66314c",
    "prId" : 23205,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23205#pullrequestreview-166161383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d54aec1e-173e-44d5-9cbf-8552f2795bc2",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "you are going a little bit in circles here, as `asi8` itself is already `self.values.view('i8')` ?",
        "createdAt" : "2018-10-18T11:35:44Z",
        "updatedAt" : "2018-10-22T18:26:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a81128e8-935c-41af-9d13-6d6f9b28c130",
        "parentId" : "d54aec1e-173e-44d5-9cbf-8552f2795bc2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I find `asi8` much more explicit than alues (BTW as I mentioned to jreback the \"v\" key on my keyboard is sticky; I'm going to stop copy-pasting and let you guys infer the missing letter for a while).\r\n",
        "createdAt" : "2018-10-18T15:37:58Z",
        "updatedAt" : "2018-10-22T18:26:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1e11274820813348d7159cb783677a44e45c3e9",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +372,376 @@        Timedelta.to_timedelta64\n        \"\"\"\n        return self.asi8.view('m8[ns]')\n\n    @property"
  },
  {
    "id" : "41071ada-cc2a-48e2-9006-868a662373bc",
    "prId" : 23205,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23205#pullrequestreview-166162766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47d804c6-cfc7-41f7-95c1-62f4c1da40fa",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "do we need both `to_timedelta64` and `asm8` ?",
        "createdAt" : "2018-10-18T11:36:06Z",
        "updatedAt" : "2018-10-22T18:26:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2a689242-f229-4e12-b60e-99114906a1b3",
        "parentId" : "47d804c6-cfc7-41f7-95c1-62f4c1da40fa",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "If we were starting fresh I would say no, but as it is I think consistency with the scalar type is really worthwhile.  (and to your point aboe DatetimeIndex should have a `to_datetime64` method)",
        "createdAt" : "2018-10-18T15:40:31Z",
        "updatedAt" : "2018-10-22T18:26:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1e11274820813348d7159cb783677a44e45c3e9",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +375,379 @@\n    @property\n    def asm8(self):\n        \"\"\"\n        Vectorized analogue of Timedelta.asm8"
  },
  {
    "id" : "e2347447-cc11-41da-a18c-3b09c1163dae",
    "prId" : 23215,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23215#pullrequestreview-165872961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6a3fd9e-0153-4ee1-a381-091b2b34fc4e",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This fixes the bug in TimedeltaIndex + np.timedelta64('NaT')",
        "createdAt" : "2018-10-17T23:15:05Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0466b9c8efd2f38f61a79fdf90464ee71ae72750",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +227,231 @@            # the timedelta interpretation we would get by returning self + NaT\n            result = self.asi8.view('m8[ms]') + NaT.to_datetime64()\n            return DatetimeArrayMixin(result)\n\n        i8 = self.asi8"
  },
  {
    "id" : "7a924f76-dfa0-44d7-ab90-69613d9f4eb5",
    "prId" : 23215,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23215#pullrequestreview-165873095",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14d1a803-5c72-4a59-835e-3b33c5b1caf7",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This fixes a bug with failing to attach `tz`",
        "createdAt" : "2018-10-17T23:15:41Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0466b9c8efd2f38f61a79fdf90464ee71ae72750",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +233,237 @@                                      arr_mask=self._isnan)\n        result = self._maybe_mask_results(result)\n        return DatetimeArrayMixin(result, tz=other.tz)\n\n    def _addsub_offset_array(self, other, op):"
  },
  {
    "id" : "f6a86588-e6cb-4e41-8251-a358c8e7f368",
    "prId" : 23433,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23433#pullrequestreview-170519718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbb04df6-30eb-4a2a-8b55-80668fa1fdde",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in future, or here ok, can you add a doc-string",
        "createdAt" : "2018-11-01T00:08:12Z",
        "updatedAt" : "2018-11-02T18:53:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "776f3461-9cfb-4916-a230-a06e4c88b9e4",
        "parentId" : "cbb04df6-30eb-4a2a-8b55-80668fa1fdde",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "will do in next pass",
        "createdAt" : "2018-11-01T00:16:33Z",
        "updatedAt" : "2018-11-02T18:53:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7dd05e81f8a24e0a3e7294f5f2e8adee0fe3bac",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +112,116 @@\n    @classmethod\n    def _simple_new(cls, values, freq=None, dtype=_TD_DTYPE):\n        # `dtype` is passed by _shallow_copy in corner cases, should always\n        #  be timedelta64[ns] if present"
  },
  {
    "id" : "fcc693cd-d0d8-48e4-b14a-b3d48737233f",
    "prId" : 23433,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23433#pullrequestreview-171327135",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c520e699-43e5-41a0-87b3-accedef86161",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so why do you need to accept object type here (you are also checking for this in TDI.__new__). ?",
        "createdAt" : "2018-11-01T00:25:15Z",
        "updatedAt" : "2018-11-02T18:53:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b3cbda87-5480-47b4-9971-7d1bef0b41d0",
        "parentId" : "c520e699-43e5-41a0-87b3-accedef86161",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "ATM we are checking for it in `TimedeltaArray._simple_new`, so de-facto accepting it in `TimedeltaArray.__new__`.  This is leaving the effective `__new__` policy unchanged while clearing up the `_simple_new` policy",
        "createdAt" : "2018-11-01T00:43:41Z",
        "updatedAt" : "2018-11-02T18:53:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "19a04004-36cb-447b-a0ef-a763a6597204",
        "parentId" : "c520e699-43e5-41a0-87b3-accedef86161",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, assume this is on the list to de-duplicate",
        "createdAt" : "2018-11-03T13:12:09Z",
        "updatedAt" : "2018-11-03T13:12:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7dd05e81f8a24e0a3e7294f5f2e8adee0fe3bac",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +132,136 @@        freq, freq_infer = dtl.maybe_infer_freq(freq)\n\n        values = np.array(values, copy=False)\n        if values.dtype == np.object_:\n            values = array_to_timedelta64(values)"
  },
  {
    "id" : "994625e5-0afe-4abd-aef7-15a8541d5315",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173209630",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3a79af7-4962-4435-a749-132fd565c0a4",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Could potentially just get the freq here for Series[timedelta64[ns]]. If `TimedeltaArray` were done, we could change the following `elif` to an `if` and re-use that. For now I think we could check for timedelta dtype and do `inferred_freq = data.dt.freq` (which I assume is cheaper than re-inferring the freq?)",
        "createdAt" : "2018-11-08T22:06:09Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "80ab7a00-eca1-4fe3-83c7-1ef9b8422d80",
        "parentId" : "d3a79af7-4962-4435-a749-132fd565c0a4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, I'm looking forward to this.\r\n\r\n> and do `inferred_freq = data.dt.freq`\r\n\r\nOne of the first things I tried to do around here was get DatetimeIndex/TimedeltaIndex to have a `.dt` dummy property returning `self` so we wouldn't have to check for Index vs. Series; gotta get around to making that happen.",
        "createdAt" : "2018-11-08T22:52:50Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +441,445 @@        data = np.array(data, copy=False)\n    elif isinstance(data, ABCSeries):\n        data = data._values\n    elif isinstance(data, (ABCTimedeltaIndex, TimedeltaArrayMixin)):\n        inferred_freq = data.freq"
  },
  {
    "id" : "55c0645b-7518-4d04-ae31-d6c0a6a52ae9",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173703337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c2f3da4-dadd-4741-9196-39876ebb54b2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what if this is not true?",
        "createdAt" : "2018-11-10T04:07:41Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c069ce0d-c16f-4713-aec4-f3148580a151",
        "parentId" : "4c2f3da4-dadd-4741-9196-39876ebb54b2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "How do you mean?  Won't the `astype` always have to make a copy in this context?",
        "createdAt" : "2018-11-10T16:12:04Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e0495bbc-2462-48e9-857c-252dd105e192",
        "parentId" : "4c2f3da4-dadd-4741-9196-39876ebb54b2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i don't know if it does or not (i would guess it actually doesn't normally), but looking again, this is ok",
        "createdAt" : "2018-11-11T15:51:20Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +472,476 @@            # TODO: watch out for overflows\n            data = data.astype(_TD_DTYPE)\n            copy = False\n\n    elif is_datetime64_dtype(data):"
  },
  {
    "id" : "f972d621-4246-40d4-95dd-92ceaf9ae6ba",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173703337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7718a78f-9205-438f-99d3-7d09a739874d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do u actually test this is not making a copy? on int64 input is the only case i think",
        "createdAt" : "2018-11-10T04:10:46Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b356c286-6ef3-4e70-957d-bd262f5e56a7",
        "parentId" : "7718a78f-9205-438f-99d3-7d09a739874d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I know I've seen tests about similar things, but not entirely sure they hit this case.  I think I'll implement a test and in one of the upcoming test-collection passes keep an eye out for similar tests to group together.",
        "createdAt" : "2018-11-10T16:46:42Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "db999d4f-91de-42ce-9f39-8be6429532a9",
        "parentId" : "7718a78f-9205-438f-99d3-7d09a739874d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok sure, yeah keeping zero copy is hard, we have very limited testing on this now",
        "createdAt" : "2018-11-11T15:49:47Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +455,459 @@        # treat as multiples of the given unit\n        data, copy_made = ints_to_td64ns(data, unit=unit)\n        copy = copy and not copy_made\n\n    elif is_float_dtype(data):"
  },
  {
    "id" : "ca666191-affa-4b26-aed6-393d9fe3a50c",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173666345",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84fdad59-ac6b-4a30-858e-e1f7a20bd5c6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can this be just a view?",
        "createdAt" : "2018-11-10T04:11:33Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f60f858b-d360-4ca1-8324-a4076220ddfc",
        "parentId" : "84fdad59-ac6b-4a30-858e-e1f7a20bd5c6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "No, that incorrectly multiplies/divides the values:\r\n\r\n```\r\n>>> arr = np.array([1], 'm8[s]')\r\n>>> arr.view('m8[ns]')\r\narray([1], dtype='timedelta64[ns]')\r\n```",
        "createdAt" : "2018-11-10T16:13:47Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +519,523 @@        data = data.view(dtype_str)\n\n        # TODO: watch out for overflows when converting from lower-resolution\n        data = data.astype(\"timedelta64[ns]\")\n        # the astype conversion makes a copy, so we can avoid re-copying later"
  },
  {
    "id" : "43ae583b-eb42-4d90-b955-0967f5d05f98",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173713594",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c348b851-35f7-4a25-8afb-a759bd4285a1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this how we indicate a multiple returns here? @datapythonista ",
        "createdAt" : "2018-11-11T15:48:37Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cc7bc1ba-bcd8-401e-85f0-3b1928f7ff43",
        "parentId" : "c348b851-35f7-4a25-8afb-a759bd4285a1",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "The right format IMO should be something like:\r\n```\r\nReturns\r\n-------\r\ndata : numpy.ndarray\r\n    The sequence converted to a numpy array of type ``timedelta64[ns]``.\r\ninferred_freq : Tick or None\r\n    The inferred frequency of the sequence.\r\n```\r\n\r\nWe're adding this validation in #23432",
        "createdAt" : "2018-11-11T20:38:57Z",
        "updatedAt" : "2018-11-11T20:38:57Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +417,421 @@    Returns\n    -------\n    ndarray[timedelta64[ns]]\n    inferred_freq : Tick or None\n"
  },
  {
    "id" : "32168cbd-6623-4d5d-a965-7f8aabfbae7b",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173706580",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72d01275-f37e-4c67-b9b5-2be986fed932",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is the is_string_dtype needed? ",
        "createdAt" : "2018-11-11T15:49:21Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8c58fe9a-0295-4043-b8cc-ba7d46d4b60e",
        "parentId" : "72d01275-f37e-4c67-b9b5-2be986fed932",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "because we have test cases where we pass e.g. `np.array(['2 Days', '3 Days'], dtype='|S6')`",
        "createdAt" : "2018-11-11T17:16:36Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2c4389fb-cd58-4329-8ab1-8e4283cdbd1b",
        "parentId" : "72d01275-f37e-4c67-b9b5-2be986fed932",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ahh ok",
        "createdAt" : "2018-11-11T17:21:00Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +447,451 @@\n    # Convert whatever we have into timedelta64[ns] dtype\n    if is_object_dtype(data) or is_string_dtype(data):\n        # no need to make a copy, need to convert if string-dtyped\n        data = objects_to_td64ns(data, unit=unit, errors=errors)"
  },
  {
    "id" : "7ca391d9-7e64-43fc-aeba-93d0ea918a30",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173713618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "796e0a2c-583a-4c93-b5c6-2a610369a921",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "If this is public, it'd be nice to have a short description for the parameters.",
        "createdAt" : "2018-11-11T20:40:33Z",
        "updatedAt" : "2018-11-11T20:50:56Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +413,417 @@    copy : bool, default False\n    unit : str, default \"ns\"\n    errors : {\"raise\", \"coerce\", \"ignore\"}, default \"raise\"\n\n    Returns"
  },
  {
    "id" : "af6067ee-434f-46b3-957e-276d2954588c",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173713618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc6128c8-e29e-43bd-9acd-ca9881896632",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "If you can capitalize the first letter of the sentence, and finish with a period, that would be great.\r\n```suggestion\r\n    ValueError : Data cannot be converted to timedelta64[ns].\r\n```",
        "createdAt" : "2018-11-11T20:41:49Z",
        "updatedAt" : "2018-11-11T20:50:56Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +422,426 @@    Raises\n    ------\n    ValueError : data cannot be converted to timedelta64[ns]\n\n    Notes"
  },
  {
    "id" : "844fefef-8e84-48fd-b450-e246e85e30fd",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173713618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "755df710-be97-4576-996a-c39e0cf02ba3",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Still under discussion, but I think the standard we're moving to is to use single backticks for variables, arguments, attributes, functions, methods classes. And double backticks for values and code or pseudo-code. I think the `errors=ignore` should be double backticks.\r\n```suggestion\r\n    Unlike `pandas.to_timedelta`, if setting ```errors=ignore``` will not cause\r\n```",
        "createdAt" : "2018-11-11T20:43:49Z",
        "updatedAt" : "2018-11-11T20:50:56Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +426,430 @@    Notes\n    -----\n    Unlike `pandas.to_timedelta`, if setting `errors=ignore` will not cause\n    errors to be ignored; they are caught and subsequently ignored at a\n    higher level."
  },
  {
    "id" : "1ac613e7-3c92-44e4-90c7-e4a0a1cd589b",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173716434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c078237e-48da-4a3e-b7ec-190db1d4c8fe",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Short description of params.\r\n\r\nAlso, I'd move the `with integer-dtype` to the description, and I wouldn't abbreviate numpy in the type (I wouldn't anywhere, and I don't know if there is agreement on not abbreviating it here).\r\n\r\nAt some point would be nice to have a limited list of types (`str, int, list-like, numpy.array, Series...`), and that would allow us to validate typos, descriptions instead of types... So, would be nice to have just pure types here, and the additional information in the description.",
        "createdAt" : "2018-11-11T20:48:35Z",
        "updatedAt" : "2018-11-11T20:50:56Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "a435de1e-d37c-4924-a689-67293c109830",
        "parentId" : "c078237e-48da-4a3e-b7ec-190db1d4c8fe",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Good notes all around.  Mind if I apply them in the next pass?  The CI is pretty backed up ATM.",
        "createdAt" : "2018-11-11T21:44:37Z",
        "updatedAt" : "2018-11-11T21:44:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b2f94129-130a-4fcc-a783-6f450caa21e3",
        "parentId" : "c078237e-48da-4a3e-b7ec-190db1d4c8fe",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Sure. We'll start soon adding them to the CI and that won't be an option, but you're still on time to do it in two passes. :)",
        "createdAt" : "2018-11-11T21:49:17Z",
        "updatedAt" : "2018-11-11T21:49:18Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +499,503 @@    ----------\n    data : np.ndarray with integer-dtype\n    unit : str, default \"ns\"\n\n    Returns"
  },
  {
    "id" : "de87646c-a39f-4ad2-a36e-f1e252a3714c",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173713618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "999a7b71-455e-4e6f-9390-af461db96958",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Same format as before (same as in parameters)",
        "createdAt" : "2018-11-11T20:49:01Z",
        "updatedAt" : "2018-11-11T20:50:56Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +504,508 @@    -------\n    ndarray[timedelta64[ns]]\n    bool : whether a copy was made\n    \"\"\"\n    copy_made = False"
  },
  {
    "id" : "7d5c5e0d-cd6f-4b94-ac79-e29c2b762461",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173713618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f4aeb27-cf82-4e30-951f-c266c5b0be67",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "same",
        "createdAt" : "2018-11-11T20:49:40Z",
        "updatedAt" : "2018-11-11T20:50:56Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +539,543 @@    data : ndarray or Index\n    unit : str, default \"ns\"\n    errors : {\"raise\", \"coerce\", \"ignore\"}, default \"raise\"\n\n    Returns"
  },
  {
    "id" : "900b591a-d8c0-4cc9-999e-066f6c8b1183",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173713618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8c87d00-0326-473f-b94e-1813bca9cf44",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "`numpy.ndarray` and a short description including the type.",
        "createdAt" : "2018-11-11T20:50:15Z",
        "updatedAt" : "2018-11-11T20:50:56Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +543,547 @@    Returns\n    -------\n    ndarray[timedelta64[ns]]\n\n    Raises"
  },
  {
    "id" : "c7307a69-d64b-41f8-9a29-1efa391a33ac",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-173713618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bd31ed5-5332-49a7-98b2-065a90906ef9",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Capital + period",
        "createdAt" : "2018-11-11T20:50:27Z",
        "updatedAt" : "2018-11-11T20:50:56Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 189,
    "diffHunk" : "@@ -1,1 +547,551 @@    Raises\n    ------\n    ValueError : data cannot be converted to timedelta64[ns]\n\n    Notes"
  },
  {
    "id" : "0c4bd386-2dd7-4041-91e7-643d63a8c6ae",
    "prId" : 23587,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23587#pullrequestreview-173267398",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51e230cc-5b9a-4630-8fbc-94c07581850e",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "leftover? Will this cause merge conflicts with another branch you have going?",
        "createdAt" : "2018-11-09T03:51:11Z",
        "updatedAt" : "2018-11-12T10:53:40Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "42ab59b2-967b-4eec-9c08-c5f5c2596392",
        "parentId" : "51e230cc-5b9a-4630-8fbc-94c07581850e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The section is currently empty, put it in place for consistency.  I don't expect any conflicts ATM.",
        "createdAt" : "2018-11-09T03:56:45Z",
        "updatedAt" : "2018-11-12T10:53:40Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7211f79c0ce4e1f8c9a035ce0c00364885d29c8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +191,195 @@        return cls._simple_new(index, freq=freq)\n\n    # ----------------------------------------------------------------\n    # Array-Like / EA-Interface Methods\n"
  },
  {
    "id" : "80846af8-755b-4044-b74d-9201cd493e88",
    "prId" : 23642,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23642#pullrequestreview-174092893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "670c3c7e-c150-4eee-a0a3-7eef169b11c6",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Why's `rmul` have a different pattern?",
        "createdAt" : "2018-11-12T20:32:15Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "23e3736b-ac66-4ef9-88e8-9e29d30b83f3",
        "parentId" : "670c3c7e-c150-4eee-a0a3-7eef169b11c6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Because multiplication is commutative.  Or am I misunderstanding the question?",
        "createdAt" : "2018-11-12T21:05:46Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2df7d65b6e6f87c8facac41c33cca9044f1ce1cc",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +324,328 @@\n    __mul__ = _wrap_tdi_op(operator.mul)\n    __rmul__ = __mul__\n    __truediv__ = _wrap_tdi_op(operator.truediv)\n    __floordiv__ = _wrap_tdi_op(operator.floordiv)"
  },
  {
    "id" : "82b6ad92-856c-4bc5-ae92-7b05316932a9",
    "prId" : 23642,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23642#pullrequestreview-174444120",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ee06b5b-91fc-4db2-b41a-c57cec6ee88c",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Is there an issue if we define `__div__` without the condition on `compat.PY2` (i.e. also define the method for Python 3.x)?",
        "createdAt" : "2018-11-13T05:32:48Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "a8d5a8f2-92d3-425b-ac17-5d242057efa7",
        "parentId" : "9ee06b5b-91fc-4db2-b41a-c57cec6ee88c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not that I'm aware of, but it's the pattern we follow everywhere else",
        "createdAt" : "2018-11-13T15:58:24Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2df7d65b6e6f87c8facac41c33cca9044f1ce1cc",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +330,334 @@\n    if compat.PY2:\n        __div__ = __truediv__\n\n    # Note: TimedeltaIndex overrides this in call to cls._add_numeric_methods"
  },
  {
    "id" : "0cdea69d-e232-45d9-ba42-7f9826ce2213",
    "prId" : 23642,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23642#pullrequestreview-175960946",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be50d8e5-be5e-4757-88a9-c1200fa82049",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we should use the already existing machinery and simply implement this ``_create_arithmetic_method``\r\nand a limited form of:    \r\n\r\n```\r\n@classmethod\r\n    def _add_arithmetic_ops(cls):\r\n```\r\n\r\notherwise you have different styles here than elsewhere.",
        "createdAt" : "2018-11-14T13:28:33Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2aa44f72-3b3a-4f4f-b64d-5f08728fb905",
        "parentId" : "be50d8e5-be5e-4757-88a9-c1200fa82049",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We use this pattern in plenty of places: nattype, Timedelta, field accessors TDA/DTA/PA, ... Using the classmethod in this context doesn't add anything except a layer of indirection.",
        "createdAt" : "2018-11-14T15:06:05Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a5de4b42-13fb-4b2a-b1b1-ea83d8ec0825",
        "parentId" : "be50d8e5-be5e-4757-88a9-c1200fa82049",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right but that'st the point, we *should* be using this here as this IS using the mixin that implements this. This is creating yet another pattern.",
        "createdAt" : "2018-11-14T15:24:37Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1e89aa56-f0a9-4261-8057-3eda71e64e2e",
        "parentId" : "be50d8e5-be5e-4757-88a9-c1200fa82049",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> as this IS using the mixin that implements this\r\n\r\nNo, it isn't.  It inherits from ExtensionOpsMixin to use _add_comparison_comps, NOT _add_arithmetic_ops.  In fact if were to try to use _add_arithmetic_ops that would be working at cross-purposes with `_add_datetimelike_methods`, which specifically implements add/sub-like methods.\r\n\r\nI'm as big a fan of internal consistency and de-duplication as the next guy, but this isn't the place to make that stand.",
        "createdAt" : "2018-11-14T17:30:34Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "fb0c9064-e3cc-44ea-9346-c89bcc482033",
        "parentId" : "be50d8e5-be5e-4757-88a9-c1200fa82049",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback ok for now? \r\n\r\n(anyway, I think the goal is to rework this a bit at some point, to not wrap TimedeltaIndex here, rather the other way around)",
        "createdAt" : "2018-11-16T19:53:27Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "216189a4-67f5-4154-9230-2e8ccace2334",
        "parentId" : "be50d8e5-be5e-4757-88a9-c1200fa82049",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> I think the goal is to rework this a bit at some point, to not wrap TimedeltaIndex here, rather the other way around\r\n\r\nCorrect",
        "createdAt" : "2018-11-16T20:05:17Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2df7d65b6e6f87c8facac41c33cca9044f1ce1cc",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +323,327 @@        return NotImplemented\n\n    __mul__ = _wrap_tdi_op(operator.mul)\n    __rmul__ = __mul__\n    __truediv__ = _wrap_tdi_op(operator.truediv)"
  },
  {
    "id" : "aa02e806-b718-439b-9c3c-fd0fdf99ae1d",
    "prId" : 23642,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23642#pullrequestreview-175963513",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "546a8066-8217-4acd-93cf-b329a77b0824",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "how are you implmenting rfloordiv but not rdiv / rtruediv?",
        "createdAt" : "2018-11-14T13:29:32Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e5edf314-8ec8-4fd5-acfd-4a2e8a85a885",
        "parentId" : "546a8066-8217-4acd-93cf-b329a77b0824",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "very specifically implementing only the methods needed to extend the affected tests.  I'll double-check why i couldn't extend tests for rdiv and rtruediv",
        "createdAt" : "2018-11-14T15:02:43Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "26856fd0-2adb-4c85-9e90-a2c2c9f8a0b0",
        "parentId" : "546a8066-8217-4acd-93cf-b329a77b0824",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok",
        "createdAt" : "2018-11-14T15:23:54Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8b996c80-1709-4cef-89ae-a7a5eddb4985",
        "parentId" : "546a8066-8217-4acd-93cf-b329a77b0824",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jbrockmendel any findings here?",
        "createdAt" : "2018-11-16T19:54:27Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "786dd346-4f79-4d73-862d-de13ee47b1d5",
        "parentId" : "546a8066-8217-4acd-93cf-b329a77b0824",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "AFAICT we don't have test cases for the other methods, at least not in tests.arithmetic.test_timedelta64.  I've scoured the other test files to centralize arithmetic tests, but it's conceivable I've missed some.\r\n\r\nWe definitely need such tests, but I'd rather do that in a dedicated PR, and would prefer not to implement the methods here without the corresponding tests.",
        "createdAt" : "2018-11-16T20:07:16Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b693ea6a-0e4f-40fb-972c-501f7572eee4",
        "parentId" : "546a8066-8217-4acd-93cf-b329a77b0824",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> We definitely need such tests, but I'd rather do that in a dedicated PR, and would prefer not to implement the methods here without the corresponding tests.\r\n\r\n+1",
        "createdAt" : "2018-11-16T20:13:04Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "2df7d65b6e6f87c8facac41c33cca9044f1ce1cc",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +327,331 @@    __truediv__ = _wrap_tdi_op(operator.truediv)\n    __floordiv__ = _wrap_tdi_op(operator.floordiv)\n    __rfloordiv__ = _wrap_tdi_op(ops.rfloordiv)\n\n    if compat.PY2:"
  },
  {
    "id" : "52043699-8cbd-4354-a763-bb12e7cb4ed2",
    "prId" : 23642,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23642#pullrequestreview-174904481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd3c9e14-2db8-4439-b4c7-509f0b86ee53",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you can move ``__abs_``_ here as well",
        "createdAt" : "2018-11-14T13:29:53Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9f2b71a8-24a9-4917-b60d-fb88ab367321",
        "parentId" : "bd3c9e14-2db8-4439-b4c7-509f0b86ee53",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sure",
        "createdAt" : "2018-11-14T15:01:15Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2df7d65b6e6f87c8facac41c33cca9044f1ce1cc",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +337,341 @@            return type(self)(-self._data, freq=-self.freq)\n        return type(self)(-self._data)\n\n    def __abs__(self):\n        # Note: freq is not preserved"
  },
  {
    "id" : "9ff0640f-4269-4fe1-aa4c-da761f0f7c73",
    "prId" : 23643,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23643#pullrequestreview-174869807",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d60cac96-52ae-4b85-9bdb-b6b3d94fec94",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "(why) was this change necessary?",
        "createdAt" : "2018-11-12T19:40:31Z",
        "updatedAt" : "2018-11-14T12:56:37Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "0f90bc83-7c67-42de-8aa5-028e3036f78f",
        "parentId" : "d60cac96-52ae-4b85-9bdb-b6b3d94fec94",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Because in the copy, from_factorized, concat_same_type methods we are passing dtype to this",
        "createdAt" : "2018-11-12T20:35:29Z",
        "updatedAt" : "2018-11-14T12:56:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "69bf5bd9-5eaf-478d-b57f-aa918d37025c",
        "parentId" : "d60cac96-52ae-4b85-9bdb-b6b3d94fec94",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Whoops, I completely missed that the `dtype` argument wasn't present there before. I thought you were changing it from None to `_TD_DTYPE`.",
        "createdAt" : "2018-11-12T20:39:30Z",
        "updatedAt" : "2018-11-14T12:56:37Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "74341037-0a5c-4bfb-a5ef-4ae6bbc194fe",
        "parentId" : "d60cac96-52ae-4b85-9bdb-b6b3d94fec94",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't this not still be passed as None and an if check inside? e.g.\r\n\r\n```\r\nif dtype is None:\r\n     dtype = _TD_DTYPE\r\n```\r\n\r\nas seems passing None should error now",
        "createdAt" : "2018-11-14T13:53:56Z",
        "updatedAt" : "2018-11-14T13:57:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cb072e7ec33c860183c8c20bd3596e0a3bff2a0",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +141,145 @@        return result\n\n    def __new__(cls, values, freq=None, dtype=_TD_DTYPE):\n\n        freq, freq_infer = dtl.maybe_infer_freq(freq)"
  }
]