[
  {
    "id" : "49b5fa7a-b282-418a-8ea7-937da608d1b9",
    "prId" : 24227,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24227#pullrequestreview-185386380",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6899e09d-bc42-4c67-9fcd-4b836aab7237",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is this `self._ndarray` the only difference with the base fillna implementation?",
        "createdAt" : "2018-12-12T18:17:20Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "79f4b134-a9af-4e63-ba40-3246ff5b6715",
        "parentId" : "6899e09d-bc42-4c67-9fcd-4b836aab7237",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yup. we have an issue somewhere for this.",
        "createdAt" : "2018-12-12T18:35:35Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "94930d9e-06ee-4532-86bd-343c069f13de",
        "parentId" : "6899e09d-bc42-4c67-9fcd-4b836aab7237",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "huh? we have *another* accessor, ``_ndarray``?",
        "createdAt" : "2018-12-15T21:59:26Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b73e0bb0-746c-4eac-b415-0fa24e1ab332",
        "parentId" : "6899e09d-bc42-4c67-9fcd-4b836aab7237",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "What's the question? `_ndarray` is the attribute the data is stored under: https://github.com/pandas-dev/pandas/pull/24227/files#diff-c42d18d11951747332a3104156c139c4R135",
        "createdAt" : "2018-12-16T12:53:40Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f50a57a7468068e191f23683283d55857d9729",
    "line" : 272,
    "diffHunk" : "@@ -1,1 +270,274 @@            if method is not None:\n                func = pad_1d if method == 'pad' else backfill_1d\n                new_values = func(self._ndarray, limit=limit,\n                                  mask=mask)\n                new_values = self._from_sequence(new_values, dtype=self.dtype)"
  },
  {
    "id" : "f33fbba0-5b7d-41b8-bfb4-279b03c93116",
    "prId" : 24227,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24227#pullrequestreview-185366329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71e9bf0d-bc9a-4b2b-91ea-08709d4878ae",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "not `np.concatenate([x._ndarray for x in to_concat])`?  or does `__array__` take care of that?",
        "createdAt" : "2018-12-15T20:05:00Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "54b80c1a-da81-4c20-8074-b080383305aa",
        "parentId" : "71e9bf0d-bc9a-4b2b-91ea-08709d4878ae",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "NumPy handles it.",
        "createdAt" : "2018-12-15T20:37:00Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f50a57a7468068e191f23683283d55857d9729",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +151,155 @@    @classmethod\n    def _concat_same_type(cls, to_concat):\n        return cls(np.concatenate(to_concat))\n\n    # ------------------------------------------------------------------------"
  },
  {
    "id" : "1a116e9f-375c-4b08-837d-65070e90e506",
    "prId" : 24227,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24227#pullrequestreview-185385609",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2843fc4-476d-4a21-b355-a1a5147827a6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what is this?",
        "createdAt" : "2018-12-15T21:57:00Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a89ed431-3b6e-45bc-88e6-68bfe0670f17",
        "parentId" : "f2843fc4-476d-4a21-b355-a1a5147827a6",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Added a comment, and a note in the docstring.\r\n\r\n```\r\n# TODO(NumPy1.13): remove this\r\n# Compat for NumPy 1.12, which doesn't provide NDArrayOperatorsMixin\r\n# or __array_ufunc__, so those operations won't be available to people\r\n# on older NumPys.\r\n#\r\n# We would normally write this as bases=(...), then \"class Foo(*bases):\r\n# but Python2 doesn't allow unpacking tuples in the class statement.\r\n# So, we fall back to \"object\", to avoid writing a metaclass.\r\n```\r\n\r\n",
        "createdAt" : "2018-12-16T12:32:28Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f50a57a7468068e191f23683283d55857d9729",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +84,88 @@# but Python2 doesn't allow unpacking tuples in the class statement.\n# So, we fall back to \"object\", to avoid writing a metaclass.\ntry:\n    from numpy.lib.mixins import NDArrayOperatorsMixin\nexcept ImportError:"
  },
  {
    "id" : "ed4b1fba-fab2-4651-a418-09fc9db7c340",
    "prId" : 24227,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24227#pullrequestreview-185385742",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd8ed2b9-3a22-4eef-9198-93e09c8ac077",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "huh?",
        "createdAt" : "2018-12-15T21:58:11Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b44e052b-5880-4f1f-b68b-a2c612feacb5",
        "parentId" : "cd8ed2b9-3a22-4eef-9198-93e09c8ac077",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is your question about what `at` does? Or the implementation?\r\n\r\nThis is from https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.lib.mixins.NDArrayOperatorsMixin.html. I've added a comment with the differences.",
        "createdAt" : "2018-12-16T12:35:44Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f50a57a7468068e191f23683283d55857d9729",
    "line" : 202,
    "diffHunk" : "@@ -1,1 +200,204 @@                # but not scalar reductions\n                return result\n        elif method == 'at':\n            # no return value\n            return None"
  },
  {
    "id" : "2ed0744a-d833-4634-af88-f30126857556",
    "prId" : 24227,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24227#pullrequestreview-188126619",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fbf95b4-9083-4fe6-a278-fd47428cce72",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we need to deal with boolean here?",
        "createdAt" : "2018-12-26T16:06:05Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ad04f237-5e8d-46e1-8003-6831d7237406",
        "parentId" : "9fbf95b4-9083-4fe6-a278-fd47428cce72",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Bool is considered numeric by `DataFrame._get_numeric_data`",
        "createdAt" : "2018-12-26T17:20:05Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "81cddbaa-0c4a-4ea9-baf5-5763ca98bd6b",
        "parentId" : "9fbf95b4-9083-4fe6-a278-fd47428cce72",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so maybe you need\r\n```\r\n@property\r\ndef _is_boolean(self):\r\n    return self.kind == 'b'\r\n```",
        "createdAt" : "2018-12-27T16:22:27Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f50a57a7468068e191f23683283d55857d9729",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +52,56 @@\n    @property\n    def _is_numeric(self):\n        # exclude object, str, unicode, void.\n        return self.kind in set('biufc')"
  },
  {
    "id" : "600fe1e1-cd66-468a-a7f3-f3c37f042310",
    "prId" : 24227,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24227#pullrequestreview-188289217",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e53a41b0-786a-4600-94bc-6c444a73fc15",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think you should assert that values is an actual ndarray here, otherwise we can accidently pass in an ExtensionArray, which should be an explicit operation and not implicity convertible. (maybe check here an in _from_sequence). ",
        "createdAt" : "2018-12-27T20:49:26Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d998511b-2c5c-459a-997b-8ebec3995d5b",
        "parentId" : "e53a41b0-786a-4600-94bc-6c444a73fc15",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Checking in `__init__`.\r\n\r\n`_from_sequence` should allow any sequence of scalars, including ExtensionArrays.",
        "createdAt" : "2018-12-28T13:22:17Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f50a57a7468068e191f23683283d55857d9729",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +122,126 @@    def __init__(self, values, copy=False):\n        if isinstance(values, type(self)):\n            values = values._ndarray\n        if not isinstance(values, np.ndarray):\n            raise ValueError(\"'values' must be a NumPy array.\")"
  },
  {
    "id" : "e1dee61e-c124-46c7-9fef-886aa5057fea",
    "prId" : 24227,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24227#pullrequestreview-188301617",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "151b3631-3613-4e0f-b33a-4a8d8c7fc026",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "these should be python or numpy scalars. are we allowing things, e.g. a Timestamp here? I think that would be weird.",
        "createdAt" : "2018-12-27T20:50:18Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "53148d13-87f5-4e14-98bd-a13bdf786c89",
        "parentId" : "151b3631-3613-4e0f-b33a-4a8d8c7fc026",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Why would Timestamp be weird? It subclasses datetime.datetime.",
        "createdAt" : "2018-12-28T13:21:42Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "d2a5cd0d-53d5-4615-8753-1a9b2d45fa0f",
        "parentId" : "151b3631-3613-4e0f-b33a-4a8d8c7fc026",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "because these are *numpy* extension arrays, they should be pretty true to that",
        "createdAt" : "2018-12-28T13:27:08Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "25b9ea29-d8e9-46a5-bca2-848c55c770ff",
        "parentId" : "151b3631-3613-4e0f-b33a-4a8d8c7fc026",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I don't understand. The type on `_from_sequence` is `Sequence[T]` where `T` is scalars of the dtype. `Categorical[T]`, for example, meets that type.\r\n\r\nWhy would we choose to exclude some sequences here?",
        "createdAt" : "2018-12-28T13:37:41Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "07f25542-4de8-4339-97ed-15115cfa0a5a",
        "parentId" : "151b3631-3613-4e0f-b33a-4a8d8c7fc026",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think I was confusing comment from `__init__` with this one. This one is about the type of the scalars, not the container, so ignore my last comment.\r\n\r\nBut, NumPy handles Timestamps with object dtype\r\n\r\n```python\r\nIn [2]: pd.arrays.PandasArray._from_sequence([pd.Timestamp('2000'), pd.Timestamp('2000')])\r\nOut[2]:\r\n<PandasArray>\r\n[Timestamp('2000-01-01 00:00:00'), Timestamp('2000-01-01 00:00:00')]\r\nLength: 2, dtype: object\r\n```\r\n\r\nI don't think that inspecting the values in the sequence is a good idea. We should just pass them through to numpy.",
        "createdAt" : "2018-12-28T13:44:29Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "e4354616-dcc5-46a5-8b81-9f069946f85e",
        "parentId" : "151b3631-3613-4e0f-b33a-4a8d8c7fc026",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "This is going to lead to abuse of these containers which is very hard to reverse. I would rather put some controls here. Maybe its just an idea for the future.",
        "createdAt" : "2018-12-28T14:07:01Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f5c43b27-d028-496c-a936-f2188afa865f",
        "parentId" : "151b3631-3613-4e0f-b33a-4a8d8c7fc026",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Do you have a concrete example? I don't see what you're getting at",
        "createdAt" : "2018-12-28T14:07:56Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "5964af5b-1d6b-4e0d-9b02-d1d71ace67b3",
        "parentId" : "151b3631-3613-4e0f-b33a-4a8d8c7fc026",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "your Timestamp example is the prototypical. This leads to use doing much inference later. Not allowing creation with a pandas scalar type would be a good start here. I am not objecting to say ``datetime.date``, but rather passing a ``Timestamp`` or ``Period``",
        "createdAt" : "2018-12-28T14:10:54Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "aa73ee6a-83ba-4341-93af-5df2e6b9f39f",
        "parentId" : "151b3631-3613-4e0f-b33a-4a8d8c7fc026",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "How would we do that check? Iterating over the values of the array and doing a bunch of isinstances sounds just as bad or worse that inferring later.\r\n\r\nI'd prefer to keep this method simple and match the ExtensionArray API.",
        "createdAt" : "2018-12-28T14:13:49Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "1837985e-b8f1-4aaa-a891-a7c98f1b8f09",
        "parentId" : "151b3631-3613-4e0f-b33a-4a8d8c7fc026",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I also don't really see a case where this would actually matter. If we're calling `PandasArray._from_sequence` then we know we want a PandasArray. ",
        "createdAt" : "2018-12-28T14:15:02Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "2804fef8-a52c-4dce-90bb-32dad769f6e9",
        "parentId" : "151b3631-3613-4e0f-b33a-4a8d8c7fc026",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Note that there's an interesting NumPy issue for requiring object-dtype to be opt-in https://github.com/numpy/numpy/issues/5353. That might be worth exploring (but it's blocked by strings for now).",
        "createdAt" : "2018-12-28T14:27:01Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f1399de7-caae-4970-93a1-af8384c2727c",
        "parentId" : "151b3631-3613-4e0f-b33a-4a8d8c7fc026",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "that issue is from 4 years ago. its a good idea and should have been done a while ago.",
        "createdAt" : "2018-12-28T14:29:14Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "aeda53f6-699a-466d-9fcd-46115b669be8",
        "parentId" : "151b3631-3613-4e0f-b33a-4a8d8c7fc026",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Open source, someone needs to do it. I might be able to once we have a strong need for it.",
        "createdAt" : "2018-12-28T14:31:21Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "cec75758-8b28-4ff2-aeda-322949fe2b42",
        "parentId" : "151b3631-3613-4e0f-b33a-4a8d8c7fc026",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you know I agree! ",
        "createdAt" : "2018-12-28T14:32:41Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f50a57a7468068e191f23683283d55857d9729",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +136,140 @@\n    @classmethod\n    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        if isinstance(dtype, PandasDtype):\n            dtype = dtype._dtype"
  },
  {
    "id" : "183c656e-7702-4d89-99bf-852855a3fee2",
    "prId" : 27949,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27949#pullrequestreview-292458275",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "663fae26-4d3c-4b18-be41-d040d71a963c",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "it looks like this is only used once, can re-inline?  Also looks like `not scalar_key` is redundant with `is_list_like(key)`.  If the latter is not the case, I'd be curious why that is",
        "createdAt" : "2019-09-23T21:52:23Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9d2e8517-3cb9-42e4-a6e4-f2dc109e6801",
        "parentId" : "663fae26-4d3c-4b18-be41-d040d71a963c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Resolved, I think. I was passing the wrong thing to `is_list_like`.\r\n\r\n>  If the latter is not the case, I'd be curious why that is\r\n\r\nIt's irrelevant to this PR, but to satiate your curiosity, the difference is 0-dim ndarrays.  They are apparently neither list-like nor scalars.\r\n\r\n```python\r\nIn [17]: a = np.array(1)\r\n\r\nIn [18]: pd._libs.lib.is_scalar(a)\r\nOut[18]: False\r\n\r\nIn [19]: pd.api.types.is_list_like(a)\r\nOut[19]: False\r\n```",
        "createdAt" : "2019-09-24T14:20:06Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e92cded0ca1e3747d02b417d27d4d7d039fe1b4",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +236,240 @@            key = np.asarray(key)\n\n        if not scalar_value:\n            value = np.asarray(value, dtype=self._ndarray.dtype)\n"
  },
  {
    "id" : "15a7b732-0e69-4852-9db8-fca2bee00d66",
    "prId" : 29597,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29597#pullrequestreview-317098749",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0879d191-f81d-4d2d-a87d-09e248aa9f99",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "why is this necessary?",
        "createdAt" : "2019-11-14T16:26:15Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "77c47f99-a3ec-427a-9709-4765a7370660",
        "parentId" : "0879d191-f81d-4d2d-a87d-09e248aa9f99",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "For StringArray.take. It wasn't needed before since PandasArray uses `np.nan` as its na_value, which is the default used in take algos.",
        "createdAt" : "2019-11-14T16:40:05Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "589a961100f6e2674dd6101a5e4cde8edf31fd03",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +281,285 @@        if fill_value is None:\n            # Primarily for subclasses\n            fill_value = self.dtype.na_value\n        result = take(\n            self._ndarray, indices, allow_fill=allow_fill, fill_value=fill_value"
  },
  {
    "id" : "3f5c38c8-83b1-4813-8a1f-02d6060dad07",
    "prId" : 30322,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30322#pullrequestreview-338642935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9eafcbe-7e2c-48ae-b57a-084088caec6b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we share the docs-strings with the base?",
        "createdAt" : "2020-01-06T13:33:01Z",
        "updatedAt" : "2020-01-06T20:08:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fff20a02fb120dc30660f2512afcd240b5a6b12d",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +422,426 @@    # ------------------------------------------------------------------------\n    # Additional Methods\n    def to_numpy(self, dtype=None, copy=False, na_value=lib._no_default):\n        result = np.asarray(self._ndarray, dtype=dtype)\n"
  },
  {
    "id" : "58b37f3d-18db-48f4-86ea-d108501e53f5",
    "prId" : 31037,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31037#pullrequestreview-343409109",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c790e329-c109-4164-b6f1-3f822e454435",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this seems like a worthwhile cleanup independent of other decisions/discussion in this PR",
        "createdAt" : "2020-01-15T16:24:04Z",
        "updatedAt" : "2020-01-23T15:17:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "84c2f060-3ab7-45a3-bace-f5b72f87e1e7",
        "parentId" : "c790e329-c109-4164-b6f1-3f822e454435",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is actually not a \"clean-up\", but for performance (the specific purpose of the PR). From profiling, it appeared that getting the name of a numpy dtype is very costly:\r\n\r\n```\r\nIn [8]: dtype = np.dtype(\"int64\")\r\n\r\nIn [9]: %timeit dtype.name \r\n1.78 µs ± 6.75 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\r\n```\r\n\r\n(accessing `.array` for a numpy dtyped series (so creating a PandasArray) gives more or less the same time now, so doing this gave a 2x speed-up)",
        "createdAt" : "2020-01-15T17:54:38Z",
        "updatedAt" : "2020-01-23T15:17:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "53fd7e5257eeca9d768ab8951d9211e38b053ec8",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +56,60 @@    @property\n    def name(self):\n        return self._dtype.name\n\n    @property"
  },
  {
    "id" : "749ec1d6-f622-437b-9b81-3b04f2743424",
    "prId" : 31348,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31348#pullrequestreview-348799588",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5678a994-605c-4fe7-869f-727eb70a7644",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i see how this is more accurate than just \"numpy.dtype\", but can we be more specific here?",
        "createdAt" : "2020-01-27T16:20:40Z",
        "updatedAt" : "2020-01-31T09:32:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d5be64cc-dfad-46f1-8005-a0bb1c3ea07b",
        "parentId" : "5678a994-605c-4fe7-869f-727eb70a7644",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "it's the types accepted by np.dtype which is more permissive than just another np.dtype. Object is  straight out of the numpy docs.\r\n\r\ndo you want to restrict this as before, or establish the actual types accepted by numpy?",
        "createdAt" : "2020-01-27T16:24:45Z",
        "updatedAt" : "2020-01-31T09:32:30Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "ee754145-1e06-43b5-8af9-7f9c7bce7dff",
        "parentId" : "5678a994-605c-4fe7-869f-727eb70a7644",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "if its straight out of the numpy docs, then sounds fine",
        "createdAt" : "2020-01-27T16:29:10Z",
        "updatedAt" : "2020-01-31T09:32:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "34e60a6bec3a13fb0dc6ff0c0f4f392028af19be",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +36,40 @@    ----------\n    dtype : object\n        Object to be converted to a NumPy data type object.\n\n    See Also"
  },
  {
    "id" : "238acb20-5011-40af-803d-6e13450c5869",
    "prId" : 36357,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36357#pullrequestreview-494900973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdc1103e-3a26-4429-8c14-33f29e28e588",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "not pd.NA?",
        "createdAt" : "2020-09-23T16:28:25Z",
        "updatedAt" : "2020-09-29T20:46:33Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "378ac7a9-a701-48b5-9063-3bb1a2486ef9",
        "parentId" : "bdc1103e-3a26-4429-8c14-33f29e28e588",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is for `object` dtype strings (the default), not `string` dtype, so those are still using np.nan (or None)",
        "createdAt" : "2020-09-23T17:27:33Z",
        "updatedAt" : "2020-09-29T20:46:33Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "458c2a03-87b4-4752-b7b9-14ed39072705",
        "parentId" : "bdc1103e-3a26-4429-8c14-33f29e28e588",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "And StringArray overrides it to be pd.NA",
        "createdAt" : "2020-09-23T17:45:27Z",
        "updatedAt" : "2020-09-29T20:46:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb2fb24439c69a040d2f1eec144c514cdf27d1f2",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +383,387 @@    # ------------------------------------------------------------------------\n    # String methods interface\n    _str_na_value = np.nan\n\n"
  },
  {
    "id" : "38865b95-8b64-4e4e-88b8-5aa91916ae75",
    "prId" : 36870,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36870#pullrequestreview-502250366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15c8fd99-1432-43ad-962c-af82bf873020",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "isn't this the same code you added in arrays/integer?",
        "createdAt" : "2020-10-05T12:44:34Z",
        "updatedAt" : "2020-10-05T17:05:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1fd4597a-97d5-4769-9d46-b435035418a6",
        "parentId" : "15c8fd99-1432-43ad-962c-af82bf873020",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "similar, but i dont see a nice way to share it in the short term.  medium-term ive got some thoughts kicking around",
        "createdAt" : "2020-10-05T17:00:33Z",
        "updatedAt" : "2020-10-05T17:05:19Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1890dc71ac7f8c14884b10e7fff4028ad4cd9bf2",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +401,405 @@    _create_comparison_method = _create_arithmetic_method\n\n    def _wrap_ndarray_result(self, result: np.ndarray):\n        # If we have timedelta64[ns] result, return a TimedeltaArray instead\n        #  of a PandasArray"
  },
  {
    "id" : "1b105477-9f3e-4ca7-a6f7-d4e52dc0fcf0",
    "prId" : 40396,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40396#pullrequestreview-611037522",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec7f27ae-5150-4572-b62f-57000b0d92c0",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "BTW, we probably don't need to add this one here, since when going through a DataFrame/Series op, this will also already be catched on that level (and be don't consistently catch it in other EA ops). But this keeps current behaviour (and this not used in practice anyway)",
        "createdAt" : "2021-03-12T18:08:38Z",
        "updatedAt" : "2021-03-17T10:19:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "3996d098e567f77e711aa5c81be0f1284f80be89",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +378,382 @@        pd_op = ops.get_array_op(op)\n        with np.errstate(all=\"ignore\"):\n            result = pd_op(self._ndarray, other)\n\n        if op is divmod or op is ops.rdivmod:"
  },
  {
    "id" : "7b78b1d5-cb17-4873-8dfa-7b04cd1c626c",
    "prId" : 40545,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40545#pullrequestreview-626746041",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f0efdac-b933-4b31-bef8-c90aad10b92c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can return type all of theses i guess as Union[Scalar, ndarray] .....",
        "createdAt" : "2021-04-02T01:50:33Z",
        "updatedAt" : "2021-04-02T01:51:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "95c0b9dc779e5eb08b32cc99be9f321d0d90db47",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +302,306 @@        ddof=1,\n        keepdims: bool = False,\n        skipna: bool = True,\n    ):\n        nv.validate_stat_ddof_func("
  }
]