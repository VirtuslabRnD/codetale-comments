[
  {
    "id" : "26f1f639-897f-49d9-8b29-c19c2171aa5e",
    "prId" : 27949,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27949#pullrequestreview-288808222",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbc706ea-ee89-41fb-9fb2-a88e89cb8be2",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Would we consider just failing here if non-string / NA data makes its way through? Not sure our `None` / NA handling is consistent enough to introduce this",
        "createdAt" : "2019-09-09T16:28:31Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f9ed0b9b-1764-48e8-b38a-63679670c5dc",
        "parentId" : "dbc706ea-ee89-41fb-9fb2-a88e89cb8be2",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> Would we consider just failing here if non-string / NA data makes its way through?\r\n\r\nIt's a bit hidden, but we do fail here.\r\n\r\n```pytb\r\nIn [4]: pd.arrays.StringArray._from_sequence(['a', 'b', 1])\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-4-26199d15894d> in <module>\r\n----> 1 pd.arrays.StringArray._from_sequence(['a', 'b', 1])\r\n\r\n~/sandbox/pandas/pandas/core/arrays/string_.py in _from_sequence(cls, scalars, dtype, copy)\r\n    134         if dtype:\r\n    135             assert dtype == \"string\"\r\n--> 136         result = super()._from_sequence(scalars, dtype=object, copy=copy)\r\n    137         # convert None to np.nan\r\n    138         # TODO: it would be nice to do this in _validate / lib.is_string_array\r\n\r\n~/sandbox/pandas/pandas/core/arrays/numpy_.py in _from_sequence(cls, scalars, dtype, copy)\r\n    149         if copy and result is scalars:\r\n    150             result = result.copy()\r\n--> 151         return cls(result)\r\n    152\r\n    153     @classmethod\r\n\r\n~/sandbox/pandas/pandas/core/arrays/string_.py in __init__(self, values, copy)\r\n    123         super().__init__(values, copy=copy)\r\n    124         self._dtype = StringDtype()\r\n--> 125         self._validate()\r\n    126\r\n    127     def _validate(self):\r\n\r\n~/sandbox/pandas/pandas/core/arrays/string_.py in _validate(self)\r\n    128         \"\"\"Validate that we only store NA or strings.\"\"\"\r\n    129         if len(self._ndarray) and not lib.is_string_array(self._ndarray, skipna=True):\r\n--> 130             raise ValueError(\"Must provide strings\")\r\n    131\r\n    132     @classmethod\r\n\r\nValueError: Must provide strings\r\n\r\n```\r\n\r\nThis is through `StringArray._validate()`, which is called at the end of `StringArray.__init__`.",
        "createdAt" : "2019-09-16T18:12:10Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e92cded0ca1e3747d02b417d27d4d7d039fe1b4",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +176,180 @@        # TODO: it would be nice to do this in _validate / lib.is_string_array\n        # We are already doing a scan over the values there.\n        result[result.isna()] = np.nan\n        return result\n"
  },
  {
    "id" : "5647fcc9-3a15-4247-bc6c-46debc762d06",
    "prId" : 27949,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27949#pullrequestreview-290216713",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41008a42-880b-4778-aa67-2f74ceab7247",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "what does this branch do?",
        "createdAt" : "2019-09-18T20:49:39Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7c63c4f1-ca82-4413-8416-32153d5e297d",
        "parentId" : "41008a42-880b-4778-aa67-2f74ceab7247",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Raises on invalid input.",
        "createdAt" : "2019-09-19T11:27:54Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e92cded0ca1e3747d02b417d27d4d7d039fe1b4",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +77,81 @@        if string == \"string\":\n            return cls()\n        return super().construct_from_string(string)\n\n    @classmethod"
  },
  {
    "id" : "161c24aa-ee80-4b4c-bd69-65aae82b23f9",
    "prId" : 27949,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27949#pullrequestreview-290602366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bd066e0-1212-4002-8090-aaeebf7decd5",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is this a pattern we use elsewhere?  i would have guessed that Series/Index would not be allowed here.",
        "createdAt" : "2019-09-18T20:52:41Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "65f402a8-42a8-4a24-9cc7-236207505ec7",
        "parentId" : "2bd066e0-1212-4002-8090-aaeebf7decd5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "also wont extract_array be redundant with the check on 149-150?",
        "createdAt" : "2019-09-18T20:53:13Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "debdd12b-4439-4dde-9901-03d1d7b234d6",
        "parentId" : "2bd066e0-1212-4002-8090-aaeebf7decd5",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : ">  i would have guessed that Series/Index would not be allowed here.\r\n\r\nWhy's that? Generally, the type on `value` is Sequence.\r\n\r\n>  also wont extract_array be redundant with the check on 149-150?\r\n\r\nYep.",
        "createdAt" : "2019-09-19T12:38:55Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "0d4425fb-a878-4b7f-87d7-60866a28c569",
        "parentId" : "2bd066e0-1212-4002-8090-aaeebf7decd5",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We actually do need the second check for `type(self)`. `extract_numpy=True` only extracts ndarrays from PandasArray, not from subclasses (which I think is the desired behavior).",
        "createdAt" : "2019-09-19T14:18:53Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e92cded0ca1e3747d02b417d27d4d7d039fe1b4",
    "line" : 186,
    "diffHunk" : "@@ -1,1 +184,188 @@\n    def __setitem__(self, key, value):\n        value = extract_array(value, extract_numpy=True)\n        if isinstance(value, type(self)):\n            # extract_array doesn't extract PandasArray subclasses"
  },
  {
    "id" : "cb31b70f-9778-4514-9da6-77d7aed1b674",
    "prId" : 27949,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27949#pullrequestreview-290612164",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "162bfefd-1181-4e25-ae30-79192ae18c80",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "could adapt is_valid_na_for_dtype",
        "createdAt" : "2019-09-18T20:53:54Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e143ac3a-1fd4-4c87-b7d8-f3fdadf807c9",
        "parentId" : "162bfefd-1181-4e25-ae30-79192ae18c80",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'd prefer to keep it local to the method using it until we have another need for the same check.",
        "createdAt" : "2019-09-19T14:31:26Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e92cded0ca1e3747d02b417d27d4d7d039fe1b4",
    "line" : 203,
    "diffHunk" : "@@ -1,1 +201,205 @@                raise ValueError(\n                    \"Cannot set non-string value '{}' into a StringArray.\".format(value)\n                )\n        else:\n            if not is_array_like(value):"
  },
  {
    "id" : "7023936d-e66d-4edb-89ae-c5ca2ead7db8",
    "prId" : 27949,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27949#pullrequestreview-291824138",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc14c582-695b-4590-849f-d908bc01899a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "my comment above, should we allow multiple of these? e.g. str",
        "createdAt" : "2019-09-23T14:44:29Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e92cded0ca1e3747d02b417d27d4d7d039fe1b4",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +70,74 @@        \"\"\"\n        The alias for StringDtype is ``'string'``.\n        \"\"\"\n        return \"string\"\n"
  },
  {
    "id" : "41e03b44-01fe-4b5c-814f-f19b5058302e",
    "prId" : 27949,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27949#pullrequestreview-291852038",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5014ace9-bde8-4278-9403-03914f7f0e81",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "IIRC we tend to preserve ``None`` as the missing value token if a user passes an ``object`` array (rather than replacing as ``np.nan``, so am surprised this doesn't break any tests. (note that I have always found this to be weird :->)",
        "createdAt" : "2019-09-23T14:46:38Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a675ed07-a00e-4987-af6d-5384b5712445",
        "parentId" : "5014ace9-bde8-4278-9403-03914f7f0e81",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah. I think no tests break since the `.str.<method>` tests just preserve `np.nan` or `None` through ops. And I'm *only* allowing `np.nan` here, which gets preserved.\r\n\r\nI really don't think we want to allow `np.nan` or `None` here. It is indeed weird that we allow both.",
        "createdAt" : "2019-09-23T15:11:23Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e92cded0ca1e3747d02b417d27d4d7d039fe1b4",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +176,180 @@        # TODO: it would be nice to do this in _validate / lib.is_string_array\n        # We are already doing a scan over the values there.\n        result[result.isna()] = np.nan\n        return result\n"
  },
  {
    "id" : "be76831f-b348-425a-9cd0-bc331504b761",
    "prId" : 27949,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27949#pullrequestreview-291824138",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2227e649-4d4d-4817-8b4c-1812fcc68973",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same question as @jbrockmendel above, might be nice to have some helper functions to do this (as IIIRC we do this elsewhere), but clearly can be a followup",
        "createdAt" : "2019-09-23T14:53:04Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e92cded0ca1e3747d02b417d27d4d7d039fe1b4",
    "line" : 204,
    "diffHunk" : "@@ -1,1 +202,206 @@                    \"Cannot set non-string value '{}' into a StringArray.\".format(value)\n                )\n        else:\n            if not is_array_like(value):\n                value = np.asarray(value, dtype=object)"
  },
  {
    "id" : "6d2d2c76-d899-4145-a314-3fc6c0cbb82c",
    "prId" : 27949,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27949#pullrequestreview-292057843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e573cb0-c80e-4adf-9da5-01a33d863d8e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "doesn't object dtype allow sum? ",
        "createdAt" : "2019-09-23T14:53:21Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6bcb4f2d-10a1-4bdc-9668-93a9defa7356",
        "parentId" : "6e573cb0-c80e-4adf-9da5-01a33d863d8e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Kinda. Seems to be broken when there are any `NA` values present.\r\n\r\nWant me to implement it here? Shouldn't be more that ~10 LOC + tests.",
        "createdAt" : "2019-09-23T15:13:35Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "61c59126-00f6-4ef8-b844-8f1131a0a696",
        "parentId" : "6e573cb0-c80e-4adf-9da5-01a33d863d8e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I *think* it works now (but of course with no nans); doesn't have to be here (but if easy sure)",
        "createdAt" : "2019-09-23T15:35:40Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "40f2017f-0544-4fdd-934f-d1f6649c81b1",
        "parentId" : "6e573cb0-c80e-4adf-9da5-01a33d863d8e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Added `.sum`. object also supports `.cumsum()`, but that's not implemented for EAs yet (open PR). ",
        "createdAt" : "2019-09-23T21:13:48Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e92cded0ca1e3747d02b417d27d4d7d039fe1b4",
    "line" : 225,
    "diffHunk" : "@@ -1,1 +223,227 @@\n    def _reduce(self, name, skipna=True, **kwargs):\n        raise TypeError(\"Cannot perform reduction '{}' with string dtype\".format(name))\n\n    def value_counts(self, dropna=False):"
  },
  {
    "id" : "4db0a473-aa72-4c5b-9c6f-3bc6f5427457",
    "prId" : 27949,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27949#pullrequestreview-297223038",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb02aa88-1f86-4656-8f77-ffae8ebe9993",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does this pass if you passing a StringArray itself? (and do we infer correctly in is_string_array)?",
        "createdAt" : "2019-10-02T12:17:08Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a495d08d-f5fe-4365-9e2a-62df578ac88d",
        "parentId" : "fb02aa88-1f86-4656-8f77-ffae8ebe9993",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> does this pass if you passing a StringArray itself? \r\n\r\nDone.\r\n\r\n> and do we infer correctly in is_string_array\r\n\r\nWe (Cython) actually raises on `lib.is_string_array(StringArray)` since it's expecting an ndarray. Not sure what's best here. IIUC, we only use `len(values)` and `values.dtype`.\r\n",
        "createdAt" : "2019-10-04T01:02:09Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e92cded0ca1e3747d02b417d27d4d7d039fe1b4",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +157,161 @@\n    def _validate(self):\n        \"\"\"Validate that we only store NA or strings.\"\"\"\n        if len(self._ndarray) and not lib.is_string_array(self._ndarray, skipna=True):\n            raise ValueError("
  },
  {
    "id" : "379fc7ce-e6e8-4b08-9cd3-f1a83efc5464",
    "prId" : 27949,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27949#pullrequestreview-296201453",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fabc02a-c1e3-49d5-93d7-96ad5b5e69f4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in the future we can change this impl to be a a Dictionary encoded type I think (which Categorical will subclass), but for a different day",
        "createdAt" : "2019-10-02T12:19:08Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "66611fb4-b51b-4ec3-a290-1665e243ee63",
        "parentId" : "5fabc02a-c1e3-49d5-93d7-96ad5b5e69f4",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "We can discuss this at https://github.com/pandas-dev/pandas/issues/20899",
        "createdAt" : "2019-10-02T12:30:32Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e92cded0ca1e3747d02b417d27d4d7d039fe1b4",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +176,180 @@        # TODO: it would be nice to do this in _validate / lib.is_string_array\n        # We are already doing a scan over the values there.\n        result[result.isna()] = np.nan\n        return result\n"
  },
  {
    "id" : "1a1d3872-beca-4895-a1c0-84bbb55f976e",
    "prId" : 27949,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27949#pullrequestreview-297223117",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7bb79aa-befe-4987-94a0-487c76484256",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we have sufficient testing to properly handle 'string' in pandas_dtype? (I think yes but confirming)",
        "createdAt" : "2019-10-02T12:19:40Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7fe1c0f9-977b-4055-a13f-8535340f5ed3",
        "parentId" : "b7bb79aa-befe-4987-94a0-487c76484256",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yep, I think so.",
        "createdAt" : "2019-10-04T01:02:33Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e92cded0ca1e3747d02b417d27d4d7d039fe1b4",
    "line" : 217,
    "diffHunk" : "@@ -1,1 +215,219 @@\n    def astype(self, dtype, copy=True):\n        dtype = pandas_dtype(dtype)\n        if isinstance(dtype, StringDtype):\n            if copy:"
  },
  {
    "id" : "49b9b9bf-c538-4d4f-98e7-d2f97cba8c79",
    "prId" : 27949,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27949#pullrequestreview-296200516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1f3177d-4644-4bf3-81f0-4b864817ccfa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we should add value_counts to the base EA class, any idea why we don't have this? (if you can create an issue)",
        "createdAt" : "2019-10-02T12:21:10Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f3173d72-b61e-4538-9633-5f0724ee0d4f",
        "parentId" : "d1f3177d-4644-4bf3-81f0-4b864817ccfa",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "See https://github.com/pandas-dev/pandas/issues/22843, where I actually argue to remove it",
        "createdAt" : "2019-10-02T12:28:37Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e92cded0ca1e3747d02b417d27d4d7d039fe1b4",
    "line" : 227,
    "diffHunk" : "@@ -1,1 +225,229 @@        raise TypeError(\"Cannot perform reduction '{}' with string dtype\".format(name))\n\n    def value_counts(self, dropna=False):\n        from pandas import value_counts\n"
  },
  {
    "id" : "35f0d6da-6240-4fee-9146-4fec12849c3a",
    "prId" : 29182,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29182#pullrequestreview-305942232",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53c18914-7574-4da3-9ce3-69ff3a60232a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't we make a new base EA mixin class for this? e.g. this is pretty generic code",
        "createdAt" : "2019-10-23T14:19:46Z",
        "updatedAt" : "2019-10-23T14:19:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c22810ce-1eca-4e4a-8105-5b25e0bbcd5d",
        "parentId" : "53c18914-7574-4da3-9ce3-69ff3a60232a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "and have String/Integer array use this? (maybe actually just put in the EA base class itself?)",
        "createdAt" : "2019-10-23T14:22:25Z",
        "updatedAt" : "2019-10-23T14:22:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "26b5265a-3990-4e9a-8a2b-1bcf10789d67",
        "parentId" : "53c18914-7574-4da3-9ce3-69ff3a60232a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "For now, this one is different than the one in IntegerArray, so it cannot directly be shared with that. I thought about putting this in the PandasArray class, but the StringArray is the only subclass of it that is actually used. So therefore I kept it here. But open to other options.",
        "createdAt" : "2019-10-23T14:24:49Z",
        "updatedAt" : "2019-10-23T14:24:49Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1b6486fa-0136-4da5-a601-f798c7a27763",
        "parentId" : "53c18914-7574-4da3-9ce3-69ff3a60232a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> maybe actually just put in the EA base class itself?\r\n\r\nThat's not possible, because it depends on the internals (eg StringArray uses `_ndarray` for the data, `IntegerArray` uses `_data` and `_mask`). The only thing that could be put in the base EA class is the signature with a NotImplementedError, but I need to check how that interacts with pyarrow (as the code there does a hasattr check, so if the method is present, it expects it to work)",
        "createdAt" : "2019-10-23T14:27:19Z",
        "updatedAt" : "2019-10-23T14:27:19Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "42a8e81a-2b72-4a3d-98b8-b4d28c080654",
        "parentId" : "53c18914-7574-4da3-9ce3-69ff3a60232a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok cool. yeah this can certainly be handled in a followup; but i think we DO want to generally enable these types of conversions.",
        "createdAt" : "2019-10-23T14:35:31Z",
        "updatedAt" : "2019-10-23T14:35:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcb3fd0e2b7347e0e72934e7bbc1ab1157bf8da6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +183,187 @@        return cls._from_sequence(strings, dtype=dtype, copy=copy)\n\n    def __arrow_array__(self, type=None):\n        \"\"\"\n        Convert myself into a pyarrow Array."
  },
  {
    "id" : "cffa4650-bc8a-4a06-8657-790044d56841",
    "prId" : 29597,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29597#pullrequestreview-317099437",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c1ac7e5-7347-4915-aeff-018277f2c7e6",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is the colon here meaningful or a typo?",
        "createdAt" : "2019-11-14T16:26:40Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "94fe9927-e767-4f18-ab32-bdba99d80e54",
        "parentId" : "0c1ac7e5-7347-4915-aeff-018277f2c7e6",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "That's how sphinx extracts docs for class attributes: https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#directive-autoattribute",
        "createdAt" : "2019-11-14T16:41:02Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "589a961100f6e2674dd6101a5e4cde8edf31fd03",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +48,52 @@    \"\"\"\n\n    #: StringDtype.na_value uses pandas.NA\n    na_value = libmissing.NA\n"
  },
  {
    "id" : "e123a44d-46d7-4c74-a52b-c168c95e4a7d",
    "prId" : 29597,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29597#pullrequestreview-317105252",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d1c7112-45e4-410d-af5a-d59ce50a6a2b",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "do we want to include _any_ na value?  e.g NaT seems like it should be excluded",
        "createdAt" : "2019-11-14T16:27:43Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "c19af64d-40a3-4176-8ff0-9ebd55002643",
        "parentId" : "7d1c7112-45e4-410d-af5a-d59ce50a6a2b",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "It's not clear to me. We at least want to handle None, NA, and nan here. You'd prefer raising on NaT?",
        "createdAt" : "2019-11-14T16:43:00Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "6b079eac-dfbb-48ff-819b-7872b4d3a69f",
        "parentId" : "7d1c7112-45e4-410d-af5a-d59ce50a6a2b",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I am personally fine with not allowing pd.NaT (it's clearly specific to time-like data). \r\n\r\nBut we should then have a helper function for it (or we probably already have one somewhere), or have it as an option in `isna`, as previously (in the PR to my fork), this was:\r\n\r\n```\r\n            if (\r\n                value is libmissing.NA\r\n                or value is None\r\n                or (\r\n                    is_float_dtype(value)\r\n                    and not isinstance(value, str)\r\n                    and np.isnan(value)\r\n                )\r\n            ):\r\n```",
        "createdAt" : "2019-11-14T16:48:52Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "589a961100f6e2674dd6101a5e4cde8edf31fd03",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +219,223 @@        # validate new items\n        if scalar_value:\n            if isna(value):\n                value = StringDtype.na_value\n            elif not isinstance(value, str):"
  },
  {
    "id" : "28cdb7e9-1e80-4b2d-a5ab-4485bd1f36e7",
    "prId" : 30077,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30077#pullrequestreview-327730059",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf0803ee-df01-4509-b9ef-56cccde4efdf",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "does this copy become unnecessary at some point in the future when pyarrow becomes aware of pd.NA?",
        "createdAt" : "2019-12-05T17:26:25Z",
        "updatedAt" : "2019-12-18T14:19:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "47548a9b-f1e5-41aa-976b-13a28bd0d8ca",
        "parentId" : "cf0803ee-df01-4509-b9ef-56cccde4efdf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> does this copy become unnecessary at some point in the future when pyarrow becomes aware of pd.NA?\r\n\r\nYep. For now we need to turn the NAs into Nones (or nans) so that the conversion code from pyarrow works.\r\n",
        "createdAt" : "2019-12-05T17:37:22Z",
        "updatedAt" : "2019-12-18T14:19:17Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ed8650366f434bd4ab36c40f3ae0e1a549859c4",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +210,214 @@            type = pa.string()\n\n        values = self._ndarray.copy()\n        values[self.isna()] = None\n        return pa.array(values, type=type, from_pandas=True)"
  },
  {
    "id" : "0a4a10fc-54e8-46f0-a039-fd5a6ffe3a25",
    "prId" : 30231,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30231#pullrequestreview-331315936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46afacf6-d45f-4582-bc01-ba14c8d548cc",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "```suggestion\r\n    For comparision methods, this returns a :class:`pandas.arrays.BooleanArray`\r\n```",
        "createdAt" : "2019-12-12T15:46:38Z",
        "updatedAt" : "2019-12-16T14:16:29Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3b10ac62c5531843e45b5cec5dbace801f61455",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +154,158 @@    ValueError: StringArray requires an object-dtype ndarray of strings.\n\n    For comparision methods, this returns a :class:`pandas.BooleanArray`\n\n    >>> pd.array([\"a\", None, \"c\"], dtype=\"string\") == \"a\""
  }
]