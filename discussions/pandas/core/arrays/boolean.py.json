[
  {
    "id" : "f559deba-c69c-4f83-8c68-00c7593bc01d",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-315174562",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a87024d-e140-4438-83e4-1ebe68be2d1e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Still need to update this for Boolean and test this",
        "createdAt" : "2019-11-11T21:50:14Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 643,
    "diffHunk" : "@@ -1,1 +641,645 @@        mask = self._mask\n\n        # coerce to a nan-aware float if needed\n        if mask.any():\n            data = self._data.astype(\"float64\")"
  },
  {
    "id" : "ce78af5a-1ec8-42cf-9ce0-5f89a9340db2",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-316603593",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "048bfeae-de06-497f-bd84-989f5e5ecbe7",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can you check: does this handle indexing a BooleanArray with another BooleanArray well? Does it have to go through object dtype?",
        "createdAt" : "2019-11-13T22:36:20Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 282,
    "diffHunk" : "@@ -1,1 +280,284 @@                return self.dtype.na_value\n            return self._data[item]\n        return type(self)(self._data[item], self._mask[item])\n\n    def _coerce_to_ndarray(self, force_bool: bool = False):"
  },
  {
    "id" : "b49804c9-efb3-4411-929c-9d695b24e8b1",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-318367123",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7032d08-e649-4314-b1ee-eb50b60512d3",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I suppose \"boolean\" -> `cls.name`. I can do the same in StringArray.",
        "createdAt" : "2019-11-18T14:25:58Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +87,91 @@    @classmethod\n    def construct_from_string(cls, string: str) -> ExtensionDtype:\n        if string == \"boolean\":\n            return cls()\n        return super().construct_from_string(string)"
  },
  {
    "id" : "9ded62e9-33b1-4e9c-b818-2c698dc8e67a",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-319808094",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c101820b-1164-4cda-b810-c2c29b54db1b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this have a test?",
        "createdAt" : "2019-11-19T16:41:01Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e3cfee66-53f8-4cd9-8d3f-ddc4bebc872a",
        "parentId" : "c101820b-1164-4cda-b810-c2c29b54db1b",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Good catch, not directly, so added one",
        "createdAt" : "2019-11-20T12:38:16Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +120,124 @@    if isinstance(values, BooleanArray):\n        if mask is not None:\n            raise ValueError(\"cannot pass mask for BooleanArray input\")\n        values, mask = values._data, values._mask\n        if copy:"
  },
  {
    "id" : "99279fdc-8802-4d72-bf82-d2664c220719",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-319808094",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f9fff50-0e1d-4045-8a8a-59984ad7b0e8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't these checks be near the top?\r\n\r\nare these tested? can you handle ndim==0?",
        "createdAt" : "2019-11-19T16:43:21Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bbe5552e-752d-463b-833d-ce990744cc5d",
        "parentId" : "9f9fff50-0e1d-4045-8a8a-59984ad7b0e8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It's only here that it is guaranteed to be an ndarray (could be a list before). \r\nBut added a test for it\r\n\r\n> can you handle ndim==0?\r\n\r\nI don't think we want to handle that?",
        "createdAt" : "2019-11-20T12:41:04Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +169,173 @@                mask = mask | mask_values\n\n    if not values.ndim == 1:\n        raise ValueError(\"values must be a 1D list-like\")\n    if not mask.ndim == 1:"
  },
  {
    "id" : "e06e0856-c297-4e95-b062-e6436112f6ce",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-322298463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d11c4512-72fb-46e0-9bda-b3e8db03a77f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "don't you need an isinstance check on values that it must be a BooleanArray? or ndim==1",
        "createdAt" : "2019-11-19T16:44:28Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "75842f0b-8efd-43d1-b706-00db45c00531",
        "parentId" : "d11c4512-72fb-46e0-9bda-b3e8db03a77f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> don't you need an isinstance check on values that it must be a BooleanArray? or ndim==1\r\n\r\nThere is already a isinstance check for the values being a boolean ndarray (so *not* a BooleanArray). But will add a check for ndim==1\r\n",
        "createdAt" : "2019-11-19T21:10:36Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7efb2f7d-9adc-411e-991f-08dcfea1eb51",
        "parentId" : "d11c4512-72fb-46e0-9bda-b3e8db03a77f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "> There is already a isinstance check for the values being a boolean ndarray (so not a BooleanArray). But will add a check for ndim==1\r\n\r\nonly when you actually coerce, not here though\r\n\r\nthis is something we should check (here and in IntegerArray) as if you accidently pass a non ndim==1 then it would be an error (can be a followup)",
        "createdAt" : "2019-11-25T13:52:57Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "38abe136-803b-4b67-97c2-1e70a6968d9c",
        "parentId" : "d11c4512-72fb-46e0-9bda-b3e8db03a77f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> only when you actually coerce, not here though\r\n\r\nNot fully sure I understand. We don't do any coercing in this `__init__` constructor, and a few lines above there are isinstance checks that the input can only be boolean ndarrays.\r\n\r\n> this is something we should check (here and in IntegerArray) as if you accidently pass a non ndim==1 then it would be an error (can be a followup)\r\n\r\nAs following your comment, I already added a ndim check; I now raise an error if ndim is not 1 (on the lines below)",
        "createdAt" : "2019-11-25T14:23:04Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 240,
    "diffHunk" : "@@ -1,1 +238,242 @@                \"mask should be boolean numpy array. Use \"\n                \"the 'array' function instead\"\n            )\n        if not values.ndim == 1:\n            raise ValueError(\"values must be a 1D array\")"
  },
  {
    "id" : "ffd46f6b-e05c-4222-b184-ef9ae18c3fa5",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-319185183",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6097369-9259-493e-b553-64cdfdd08149",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add parameters here & type",
        "createdAt" : "2019-11-19T16:45:25Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 285,
    "diffHunk" : "@@ -1,1 +283,287 @@\n    def _coerce_to_ndarray(self, force_bool: bool = False):\n        \"\"\"\n        Coerce to an ndarary of object dtype or bool dtype (if force_bool=True).\n"
  },
  {
    "id" : "93decf66-0d9b-4612-95fc-2359f81cd1cc",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-319354994",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5a0f96e-7e50-4e2c-a945-2fb69b7282b0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this a cached property? (isna)?",
        "createdAt" : "2019-11-19T16:45:44Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "de5e2bed-422e-45e9-8c13-75f3cb1bfcfa",
        "parentId" : "d5a0f96e-7e50-4e2c-a945-2fb69b7282b0",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> is this a cached property? (isna)?\r\n\r\nCurrently we don't do any caching of any properties (also not on integer array). \r\nI think it can be interesting to look into that, but would leave that for a separate PR (this can be done for IntegerArray as well) ",
        "createdAt" : "2019-11-19T21:12:04Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 295,
    "diffHunk" : "@@ -1,1 +293,297 @@        \"\"\"\n        if force_bool:\n            if not self.isna().any():\n                return self._data\n            else:"
  },
  {
    "id" : "5da7c0cb-95c8-4e03-91f5-5241cb5a25f5",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-319354994",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60391b8e-b925-4ea4-b09d-145f26d56465",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this 2nd path seems duplicative of the below",
        "createdAt" : "2019-11-19T16:46:24Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a14ef4d0-c227-40f3-9d7c-7b1d53d7658d",
        "parentId" : "60391b8e-b925-4ea4-b09d-145f26d56465",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> this 2nd path seems duplicative of the below\r\n\r\nThe difference is that this path still does a `arr.astype(dtype, copy=False)` (to take the passed `dtype` into account)",
        "createdAt" : "2019-11-19T21:13:41Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 317,
    "diffHunk" : "@@ -1,1 +315,319 @@            # TODO can optimize this to not go through object dtype for\n            # numeric dtypes\n            arr = self._coerce_to_ndarray()\n            return arr.astype(dtype, copy=False)\n        # by default (no dtype specified), return an object array"
  },
  {
    "id" : "60cebcef-effa-4ebb-9af7-c4224de04f6f",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-319354994",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "088b8be3-98ff-4697-92de-444033b76be8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what about other names? do we raise?",
        "createdAt" : "2019-11-19T16:47:48Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "625a034d-b253-4c6d-94c2-699e2e7c6f41",
        "parentId" : "088b8be3-98ff-4697-92de-444033b76be8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> what about other names? do we raise?\r\n\r\nNo, they work, but the result of the numpy operation already has the correct dtype (eg std, var, .. results in a float), so they don't need to be post-processed.\r\n\r\n(but just realizing that min/max should return boolean not an int. For sum and prod the int is correct)\r\n",
        "createdAt" : "2019-11-19T21:20:29Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 660,
    "diffHunk" : "@@ -1,1 +658,662 @@            if int_result == result:\n                result = int_result\n\n        elif name in [\"min\", \"max\"] and notna(result):\n            result = np.bool_(result)"
  },
  {
    "id" : "ead6d4e5-07c3-4f89-9422-b3ad617c89e8",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-320028550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64437e60-e042-4533-8797-98632aa02a96",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Does this validate that they're actually 0 or 1? Don't you also need a check that the min / max is in that bound?",
        "createdAt" : "2019-11-20T15:43:10Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "bfce9cc0-5f88-4c5e-baf2-13f250e15163",
        "parentId" : "64437e60-e042-4533-8797-98632aa02a96",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Ah, sorry you've astyped to bool, so going back to float will make these 0 and 1.",
        "createdAt" : "2019-11-20T15:46:40Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +145,149 @@        values[~mask_values] = values_object[~mask_values].astype(bool)\n\n        # if the values were integer-like, validate it were actually 0/1's\n        if inferred_dtype in integer_like:\n            if not np.all("
  },
  {
    "id" : "e2d52276-bf11-49df-96de-3faff132eb81",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-322298463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a1279de-4699-48f7-845e-337843fe8caa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are you preparing this for a followup? issue?",
        "createdAt" : "2019-11-25T13:45:45Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "34749e2d-d243-4418-a3d8-2623ec1474cd",
        "parentId" : "4a1279de-4699-48f7-845e-337843fe8caa",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I'll open an issue (the same is true for integer array)",
        "createdAt" : "2019-11-25T14:17:34Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +132,136 @@            values = values.copy()\n    else:\n        # TODO conversion from integer/float ndarray can be done more efficiently\n        #  (avoid roundtrip through object)\n        values_object = np.asarray(values, dtype=object)"
  },
  {
    "id" : "d65b5517-f4d3-4c2c-8210-50c38dd91f86",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-322298463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f6e29c1-f94b-4e36-8519-0ca238569940",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "tests hit here?",
        "createdAt" : "2019-11-25T13:46:27Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f32c540d-00cf-4be5-9a80-9c3af58a103d",
        "parentId" : "8f6e29c1-f94b-4e36-8519-0ca238569940",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> tests hit here?\r\n\r\nYes, there is a test that passes all kinds of non-boolean-like values\r\n\r\nIn general, I ran locally pytest with coverage, and there is 97% coverage for this file. The main non-covered things are some parts of the ufunc related code, and some length mismatch errors in the ops code.",
        "createdAt" : "2019-11-25T14:19:00Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +139,143 @@        integer_like = (\"floating\", \"integer\", \"mixed-integer-float\")\n        if inferred_dtype not in (\"boolean\", \"empty\") + integer_like:\n            raise TypeError(\"Need to pass bool-like values\")\n\n        mask_values = isna(values_object)"
  },
  {
    "id" : "06439ff0-afc0-4748-a6c3-a7df966f2d73",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-322298463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddb149e3-8f6f-4852-95d5-d62b4ac44851",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this hit in a test?",
        "createdAt" : "2019-11-25T13:46:50Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1f347e98-8e72-4355-bd9e-d7463e294670",
        "parentId" : "ddb149e3-8f6f-4852-95d5-d62b4ac44851",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes",
        "createdAt" : "2019-11-25T14:19:46Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +151,155 @@                == values_object[~mask_values].astype(float)\n            ):\n                raise TypeError(\"Need to pass bool-like values\")\n\n    if mask is None and mask_values is None:"
  },
  {
    "id" : "f8a20a28-de2d-4c08-b483-fe46cc930f3f",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-322298463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c48ef36-e179-4494-8eac-9d4eb34fa0bd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we need to copy mask_values for any inputs?",
        "createdAt" : "2019-11-25T13:47:16Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "683905b2-98b5-43bf-b82e-a7181a0a008a",
        "parentId" : "3c48ef36-e179-4494-8eac-9d4eb34fa0bd",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`mask_values` is the result of `pd.isna(values_object)`, so should always be \"its own\" object (it's never a passed mask), so no need to copy it.",
        "createdAt" : "2019-11-25T14:21:09Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 158,
    "diffHunk" : "@@ -1,1 +156,160 @@        mask = np.zeros(len(values), dtype=bool)\n    elif mask is None:\n        mask = mask_values\n    else:\n        if isinstance(mask, np.ndarray) and mask.dtype == np.bool_:"
  },
  {
    "id" : "bb200128-dfec-4a6c-b262-5fc60a08c05a",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-322298463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bc3fb9a-fa28-4d4c-9d6c-52b34bbe4ce6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "test hit all this?",
        "createdAt" : "2019-11-25T13:47:40Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "505e5f24-036c-42d8-9882-37ff94eb2930",
        "parentId" : "3bc3fb9a-fa28-4d4c-9d6c-52b34bbe4ce6",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> test hit all this?\r\n\r\nYes",
        "createdAt" : "2019-11-25T14:21:23Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 173,
    "diffHunk" : "@@ -1,1 +171,175 @@    if not values.ndim == 1:\n        raise ValueError(\"values must be a 1D list-like\")\n    if not mask.ndim == 1:\n        raise ValueError(\"mask must be a 1D list-like\")\n"
  },
  {
    "id" : "f5da3c21-7d9e-4fa3-96b3-65cd1fede932",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-322379878",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4eb3943e-ec0c-4d30-aeb4-a353c54ffcc7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we have tests for this?",
        "createdAt" : "2019-11-25T13:53:33Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e794e5f2-b328-48ec-b10a-8cd657d00960",
        "parentId" : "4eb3943e-ec0c-4d30-aeb4-a353c54ffcc7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> do we have tests for this?\r\n\r\nDo we need that? This is an internal assertion, that should never be raised to the user but is here to help the developer (I don't think we should add tests for those asserts). So the \"test\" is that this actually never occurs in the tests.",
        "createdAt" : "2019-11-25T14:25:40Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f42ce2a7-aec6-4498-a5aa-5373bfecee5f",
        "parentId" : "4eb3943e-ec0c-4d30-aeb4-a353c54ffcc7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "BTW, I can also leave it out (the assert). For BooleanArray, the `dtype` is not very useful. I think this parameter is mainly used for cases where multiple dtypes are possible per array (eg int64, int32 etc for IntegerArray)",
        "createdAt" : "2019-11-25T14:27:11Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2aa382c2-d30e-43a1-956b-dccb05e37858",
        "parentId" : "4eb3943e-ec0c-4d30-aeb4-a353c54ffcc7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right i think it actually should *always* be None here, as this is internally passed. however a user might *try* to pass something that is not None (so this should maybe be a ValueError)",
        "createdAt" : "2019-11-25T15:48:33Z",
        "updatedAt" : "2019-11-25T15:48:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 261,
    "diffHunk" : "@@ -1,1 +259,263 @@    def _from_sequence(cls, scalars, dtype=None, copy: bool = False):\n        if dtype:\n            assert dtype == \"boolean\"\n        values, mask = coerce_to_array(scalars, copy=copy)\n        return BooleanArray(values, mask)"
  },
  {
    "id" : "a7c5bfbb-8ef7-42ac-86f3-8db7a707c9a2",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-322277656",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b863d45-7d7c-4013-b734-a400b1c1aa2c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "a lot of these are highly shared with IntegerArray (for followup)",
        "createdAt" : "2019-11-25T13:54:44Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 381,
    "diffHunk" : "@@ -1,1 +379,383 @@            if self._mask[i]:\n                yield self.dtype.na_value\n            else:\n                yield self._data[i]\n"
  },
  {
    "id" : "d943f0a0-5173-473c-bc99-56e2af5f974e",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-322277656",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3efbb449-dab5-4737-a302-2abc0f26509f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can be generic int he Int/Bool mixin baseclass (followup)",
        "createdAt" : "2019-11-25T13:55:52Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 666,
    "diffHunk" : "@@ -1,1 +664,668 @@        return result\n\n    def _maybe_mask_result(self, result, mask, other, op_name):\n        \"\"\"\n        Parameters"
  },
  {
    "id" : "8f352a42-bbd0-4f96-b8b5-3fe6fe6d4b49",
    "prId" : 29842,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29842#pullrequestreview-328471842",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae9f37fa-20d1-4cf1-9485-b12b7ab8b112",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this is to convert to a python bool?  why not just `bool(other)`?  `item` i usually think of as being an array method",
        "createdAt" : "2019-12-06T02:59:54Z",
        "updatedAt" : "2019-12-06T21:40:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "71cc7eec-b008-4d7a-8615-7253fcd7eced",
        "parentId" : "ae9f37fa-20d1-4cf1-9485-b12b7ab8b112",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`item` is the general method to get a python scalar (here we of course know we want a bool).\r\n\r\nBut Tom, why is it exactly needed to convert this? I would think the numpy operations later on work fine with a numpy scalar as well?",
        "createdAt" : "2019-12-06T07:15:14Z",
        "updatedAt" : "2019-12-06T21:40:16Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "81f53624-8f6c-4290-b910-3250be2644ab",
        "parentId" : "ae9f37fa-20d1-4cf1-9485-b12b7ab8b112",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "IIRC, we do things like `if right is False` or `if right is True`, which will fail for numpy booleans. I don't want to have to worry about checking both, so easier to convert here.",
        "createdAt" : "2019-12-06T21:38:09Z",
        "updatedAt" : "2019-12-06T21:40:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "31c2bc6dc3c8d7ef7cbf7aea41d6d686f7ff58ca",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +585,589 @@                other, mask = coerce_to_array(other, copy=False)\n            elif isinstance(other, np.bool_):\n                other = other.item()\n\n            if other_is_scalar and not (other is libmissing.NA or lib.is_bool(other)):"
  },
  {
    "id" : "2769249d-534f-40ba-9165-c14abf0cecde",
    "prId" : 29961,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29961#pullrequestreview-326791653",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca92bc77-60b7-45c5-a8e3-fded33d60068",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Pending the discussion in https://github.com/pandas-dev/pandas/issues/30038.",
        "createdAt" : "2019-12-04T11:53:46Z",
        "updatedAt" : "2019-12-04T11:58:22Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "d083c88db6cb50ced1d81e12dd510164b8101056",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +485,489 @@            if self.isna().any():\n                raise ValueError(\"cannot convert NA to integer\")\n        # for float dtype, ensure we use np.nan before casting (numpy cannot\n        # deal with pd.NA)\n        na_value = self._na_value"
  },
  {
    "id" : "585b025e-a63a-438e-8b73-7114d66a7867",
    "prId" : 30062,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30062#pullrequestreview-329828195",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b61fe4af-dfe0-4f21-a2f6-423f1dd935d0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use not len(self)",
        "createdAt" : "2019-12-10T13:07:43Z",
        "updatedAt" : "2019-12-10T13:33:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e9b666ac-df35-4a95-8799-af174289a5a4",
        "parentId" : "b61fe4af-dfe0-4f21-a2f6-423f1dd935d0",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In pandas/core, we actually use the `len(..) == 0` pattern more than `not len(..)`. I personally also find that easier to read.\r\n\r\n(the typical pythonic idiom recommendation is about doing `if (not) container:` instead of `if (not) len(container)` for empty containers, but that of course doesn't hold for arrays)",
        "createdAt" : "2019-12-10T13:31:46Z",
        "updatedAt" : "2019-12-10T13:33:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec7d072112a20973fce8e1af1c8e22d526e671ff",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +626,630 @@            return result\n        else:\n            if result or len(self) == 0:\n                return result\n            else:"
  },
  {
    "id" : "542a8e73-655c-44f6-b71f-7021ad2b76c5",
    "prId" : 30062,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30062#pullrequestreview-329828195",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0036f36-6bf5-46be-9129-074ffbc55d0b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "might want to add a link for kleene logic here",
        "createdAt" : "2019-12-10T13:08:10Z",
        "updatedAt" : "2019-12-10T13:33:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "29e034c5-f59c-42ce-9c3e-155acba26470",
        "parentId" : "b0036f36-6bf5-46be-9129-074ffbc55d0b",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In the See Also section, we can only add links to other API pages. But, in the long description of the docstring a bit above, I already included a link about the Kleene logic.",
        "createdAt" : "2019-12-10T13:22:36Z",
        "updatedAt" : "2019-12-10T13:33:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec7d072112a20973fce8e1af1c8e22d526e671ff",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +658,662 @@        See Also\n        --------\n        numpy.all : Numpy version of this method.\n        BooleanArray.any : Return whether any element is True.\n"
  },
  {
    "id" : "86cffa5e-914c-4137-9a00-6a00f391d31d",
    "prId" : 30062,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30062#pullrequestreview-329818692",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fd36037-d380-4ebe-a2b2-dc8742d4928d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same as above",
        "createdAt" : "2019-12-10T13:08:17Z",
        "updatedAt" : "2019-12-10T13:33:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec7d072112a20973fce8e1af1c8e22d526e671ff",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +694,698 @@            return result\n        else:\n            if not result or len(self) == 0:\n                return result\n            else:"
  },
  {
    "id" : "9566bee3-1471-4a8a-b466-21c2b284f3ae",
    "prId" : 30062,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30062#pullrequestreview-329837388",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41b3f929-9b3b-4b6a-860d-1e8c726fd862",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we usually use lists for these checks ",
        "createdAt" : "2019-12-10T13:09:04Z",
        "updatedAt" : "2019-12-10T13:33:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9402c7e8-2c77-4a9c-9197-eb81565a56b7",
        "parentId" : "41b3f929-9b3b-4b6a-860d-1e8c726fd862",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In this file we actually use more `in {}` than `in []` (both are used), but since Tom and I wrote this file, that's probably not an argument ;) \r\nHappy to change it, purely performance wise the set is faster (but this is about nanoseconds of course ..)\r\n\r\n ",
        "createdAt" : "2019-12-10T13:32:36Z",
        "updatedAt" : "2019-12-10T13:33:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "50bdff23-6ab5-4bfa-b3ba-07ab006e4f88",
        "parentId" : "41b3f929-9b3b-4b6a-860d-1e8c726fd862",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Heh, I'm probably to blame for the sets :) I like them more for membership tests, though it doesn't matter for small sets.",
        "createdAt" : "2019-12-10T13:37:07Z",
        "updatedAt" : "2019-12-10T13:37:08Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec7d072112a20973fce8e1af1c8e22d526e671ff",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +796,800 @@    def _reduce(self, name, skipna=True, **kwargs):\n\n        if name in {\"any\", \"all\"}:\n            return getattr(self, name)(skipna=skipna, **kwargs)\n"
  },
  {
    "id" : "2b1efa67-4183-4043-82c8-f0cd468ceb07",
    "prId" : 30077,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30077#pullrequestreview-327384953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46a50495-f74b-438b-a8a5-c816c592248f",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "```suggestion\r\n            bool_arr = BooleanArray._from_sequence(np.asarray(arr))\r\n```\r\n\r\nNo?",
        "createdAt" : "2019-12-05T08:47:21Z",
        "updatedAt" : "2019-12-18T14:19:17Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "62ba7fcc-1290-4106-8b97-49e50790e43a",
        "parentId" : "46a50495-f74b-438b-a8a5-c816c592248f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "There is no way that a conversion from a pyarrow boolean array (which uses a bitmask) to a numpy array can be without a copy, so it shouldn't matter I think",
        "createdAt" : "2019-12-05T08:48:39Z",
        "updatedAt" : "2019-12-18T14:19:17Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ed8650366f434bd4ab36c40f3ae0e1a549859c4",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +117,121 @@        for arr in chunks:\n            # TODO should optimize this without going through object array\n            bool_arr = BooleanArray._from_sequence(np.array(arr))\n            results.append(bool_arr)\n"
  },
  {
    "id" : "b7bfcbc8-c26d-4976-a48e-da87b97c434c",
    "prId" : 30077,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30077#pullrequestreview-327777375",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1d71fbd-95c4-480b-b69f-8625fe18858f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can u write this method generically and put on the base class or Arrow mxin class\r\n\r\nas it already looks like it would work for any extension type (except the final use of BooleanArray)",
        "createdAt" : "2019-12-05T11:53:36Z",
        "updatedAt" : "2019-12-18T14:19:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "799bc521-9bdc-472b-87ed-c74277a8ea10",
        "parentId" : "f1d71fbd-95c4-480b-b69f-8625fe18858f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The IntegerDtype implementation is different, though. The implementation here is indeed more or less the same as for the StringArray, but once we we fix the mentioned TODO (to avoid going through object dtype), the Boolean one will also be custom.\r\n\r\nThe StringDtype one could still be put in a base mixin (it needs to be a mixin, and not directly in the base ExtensionDtype class, as for pyarrow the presence or absence of this method is relevant), but no one else would be using it for now.",
        "createdAt" : "2019-12-05T17:34:27Z",
        "updatedAt" : "2019-12-18T14:19:17Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ca81eaaf-9a00-4b53-b4fb-43f24dd7f79a",
        "parentId" : "f1d71fbd-95c4-480b-b69f-8625fe18858f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, yeah we want avoid repeating this code as much as possible, so having ageneric (but working) impl would be good, and using helper / properties to ease the burden on each dtype would also be great. sure this could be done later as well. ",
        "createdAt" : "2019-12-05T18:57:29Z",
        "updatedAt" : "2019-12-18T14:19:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ed8650366f434bd4ab36c40f3ae0e1a549859c4",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +115,119 @@\n        results = []\n        for arr in chunks:\n            # TODO should optimize this without going through object array\n            bool_arr = BooleanArray._from_sequence(np.array(arr))"
  },
  {
    "id" : "2a7180fc-6fd1-4758-b615-724d0e9f3c74",
    "prId" : 30077,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30077#pullrequestreview-329884935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a022afdd-0425-4e2f-98be-b1c0afd37e85",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can this be annotated?  or at least have types in the docstring",
        "createdAt" : "2019-12-05T17:24:19Z",
        "updatedAt" : "2019-12-18T14:19:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b11e46e2-662a-4e32-aa5c-8fd518804ddf",
        "parentId" : "a022afdd-0425-4e2f-98be-b1c0afd37e85",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The type is mentioned in the docstring (just not in a parameters section, but can turn it into a more fully fledged docstring). No one except for pyarrow should be calling this method though.\r\n\r\nQuestion for annotating: how does it work to annotate it with pyarrow objects that cannot necessarily be imported? (since it's an optional dependency)",
        "createdAt" : "2019-12-05T17:36:37Z",
        "updatedAt" : "2019-12-18T14:19:17Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "557fb3cc-9c6b-43d7-94f0-bbc61a5ae4a8",
        "parentId" : "a022afdd-0425-4e2f-98be-b1c0afd37e85",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Any idea about the annotation?",
        "createdAt" : "2019-12-10T14:42:01Z",
        "updatedAt" : "2019-12-18T14:19:17Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ed8650366f434bd4ab36c40f3ae0e1a549859c4",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +104,108 @@        return True\n\n    def __from_arrow__(self, array):\n        \"\"\"Construct BooleanArray from passed pyarrow Array/ChunkedArray\"\"\"\n        import pyarrow"
  },
  {
    "id" : "8b29c531-655f-4d2f-86fc-49a8dadc532a",
    "prId" : 30308,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30308#pullrequestreview-333511182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9cd7bd3-b29e-4300-90ad-1f3320f569f0",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Just out of curiosity in what way is this expensive? I would think should be a pretty quick op",
        "createdAt" : "2019-12-17T18:26:10Z",
        "updatedAt" : "2020-01-02T15:03:10Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "629dfb43-3e24-4773-8738-6ad4f9872451",
        "parentId" : "c9cd7bd3-b29e-4300-90ad-1f3320f569f0",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I suppose \"relatively expensive\" would be better. What I meant was that it's not a simple attribute lookup, since it makes ~two passes~ one pass over the data.\r\n\r\nIf / when we have an optional mask, this will something like `self._mask is not None`.",
        "createdAt" : "2019-12-17T19:07:53Z",
        "updatedAt" : "2020-01-02T15:03:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "5004d91cfa3c897e0748de6bca8f2b9e7d92b329",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +312,316 @@    @property\n    def _hasna(self) -> bool:\n        # Note: this is expensive right now! The hope is that we can\n        # make this faster by having an optional mask, but not have to change\n        # source code using it.."
  },
  {
    "id" : "a0d8cfc5-3218-4270-aacb-1c7f7c5a989a",
    "prId" : 30308,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30308#pullrequestreview-337371295",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55b84616-a28b-40a0-8cf8-2fcc36583ba9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this could easily be cached (and then updated on setitem / other mutation)",
        "createdAt" : "2019-12-31T13:03:03Z",
        "updatedAt" : "2020-01-02T15:03:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5004d91cfa3c897e0748de6bca8f2b9e7d92b329",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +314,318 @@        # Note: this is expensive right now! The hope is that we can\n        # make this faster by having an optional mask, but not have to change\n        # source code using it..\n        return self._mask.any()\n"
  },
  {
    "id" : "37950f34-57a1-487a-a86d-47a854d7e794",
    "prId" : 30619,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30619#pullrequestreview-338364334",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd93efcd-f164-47d1-8111-d02f212051c2",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "changed for consistency with IntervalDType and CatergoricalDType. ExtensionDtype subclasses with class attribute for name do not need to override construct_from_string\r\n\r\non master:\r\n\r\n```python\r\n>>> import pandas as pd; pd.__version__\r\n'0.26.0.dev0+1554.g0913ed04d'\r\n>>>\r\n>>> pd.core.dtypes.dtypes.CategoricalDtype.name\r\n'category'\r\n>>>\r\n>>> pd.core.dtypes.dtypes.IntervalDtype.name\r\n'interval'\r\n>>>\r\n>>> pd.core.arrays.boolean.BooleanDtype.name\r\n<property object at 0x0000026B6A278E58>\r\n>>>\r\n>>> pd.core.arrays.string_.StringDtype.name\r\n<property object at 0x0000026B6A550908>\r\n>>>\r\n```",
        "createdAt" : "2020-01-02T15:51:11Z",
        "updatedAt" : "2020-01-02T16:11:33Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "bf1f8e89-f8b0-4e22-831a-c7430460a33c",
        "parentId" : "cd93efcd-f164-47d1-8111-d02f212051c2",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is it possible to do this the other way? I think property is a little nicer than class attributes\r\n\r\n@TomAugspurger ",
        "createdAt" : "2020-01-02T16:44:41Z",
        "updatedAt" : "2020-01-02T16:46:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "062836bf-75af-4910-8aea-91befaad15a6",
        "parentId" : "cd93efcd-f164-47d1-8111-d02f212051c2",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "`construct_from_string` is a class method, so I think it makes more sense to make `name` a class attribute. \r\n\r\n(should probably consider making PeriodDType.name and DatetimeTZDtype.name class attributes for consistency)",
        "createdAt" : "2020-01-02T16:56:51Z",
        "updatedAt" : "2020-01-02T16:56:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "8ecf9894-ce18-4f85-83d2-cb0d58ef375d",
        "parentId" : "cd93efcd-f164-47d1-8111-d02f212051c2",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I guess the only downside is non-dynamic names? I don't think we can make `PeriodDtype.name` a class attribute, since it depends on the freq.",
        "createdAt" : "2020-01-02T17:13:27Z",
        "updatedAt" : "2020-01-02T17:13:28Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "33e5af23-af8c-407e-9e70-2eae3a61762e",
        "parentId" : "cd93efcd-f164-47d1-8111-d02f212051c2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "for the static ones this seems fine",
        "createdAt" : "2020-01-04T18:28:32Z",
        "updatedAt" : "2020-01-04T18:28:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "264256e1d61ddd9fc9309388b821a60450af2b5e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +61,65 @@    \"\"\"\n\n    name = \"boolean\"\n\n    @property"
  }
]