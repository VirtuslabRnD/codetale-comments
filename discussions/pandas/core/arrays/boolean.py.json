[
  {
    "id" : "f559deba-c69c-4f83-8c68-00c7593bc01d",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-315174562",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a87024d-e140-4438-83e4-1ebe68be2d1e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Still need to update this for Boolean and test this",
        "createdAt" : "2019-11-11T21:50:14Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 643,
    "diffHunk" : "@@ -1,1 +641,645 @@        mask = self._mask\n\n        # coerce to a nan-aware float if needed\n        if mask.any():\n            data = self._data.astype(\"float64\")"
  },
  {
    "id" : "ce78af5a-1ec8-42cf-9ce0-5f89a9340db2",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-316603593",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "048bfeae-de06-497f-bd84-989f5e5ecbe7",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can you check: does this handle indexing a BooleanArray with another BooleanArray well? Does it have to go through object dtype?",
        "createdAt" : "2019-11-13T22:36:20Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 282,
    "diffHunk" : "@@ -1,1 +280,284 @@                return self.dtype.na_value\n            return self._data[item]\n        return type(self)(self._data[item], self._mask[item])\n\n    def _coerce_to_ndarray(self, force_bool: bool = False):"
  },
  {
    "id" : "b49804c9-efb3-4411-929c-9d695b24e8b1",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-318367123",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7032d08-e649-4314-b1ee-eb50b60512d3",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I suppose \"boolean\" -> `cls.name`. I can do the same in StringArray.",
        "createdAt" : "2019-11-18T14:25:58Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +87,91 @@    @classmethod\n    def construct_from_string(cls, string: str) -> ExtensionDtype:\n        if string == \"boolean\":\n            return cls()\n        return super().construct_from_string(string)"
  },
  {
    "id" : "9ded62e9-33b1-4e9c-b818-2c698dc8e67a",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-319808094",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c101820b-1164-4cda-b810-c2c29b54db1b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this have a test?",
        "createdAt" : "2019-11-19T16:41:01Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e3cfee66-53f8-4cd9-8d3f-ddc4bebc872a",
        "parentId" : "c101820b-1164-4cda-b810-c2c29b54db1b",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Good catch, not directly, so added one",
        "createdAt" : "2019-11-20T12:38:16Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +120,124 @@    if isinstance(values, BooleanArray):\n        if mask is not None:\n            raise ValueError(\"cannot pass mask for BooleanArray input\")\n        values, mask = values._data, values._mask\n        if copy:"
  },
  {
    "id" : "99279fdc-8802-4d72-bf82-d2664c220719",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-319808094",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f9fff50-0e1d-4045-8a8a-59984ad7b0e8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't these checks be near the top?\r\n\r\nare these tested? can you handle ndim==0?",
        "createdAt" : "2019-11-19T16:43:21Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bbe5552e-752d-463b-833d-ce990744cc5d",
        "parentId" : "9f9fff50-0e1d-4045-8a8a-59984ad7b0e8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It's only here that it is guaranteed to be an ndarray (could be a list before). \r\nBut added a test for it\r\n\r\n> can you handle ndim==0?\r\n\r\nI don't think we want to handle that?",
        "createdAt" : "2019-11-20T12:41:04Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +169,173 @@                mask = mask | mask_values\n\n    if not values.ndim == 1:\n        raise ValueError(\"values must be a 1D list-like\")\n    if not mask.ndim == 1:"
  },
  {
    "id" : "e06e0856-c297-4e95-b062-e6436112f6ce",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-322298463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d11c4512-72fb-46e0-9bda-b3e8db03a77f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "don't you need an isinstance check on values that it must be a BooleanArray? or ndim==1",
        "createdAt" : "2019-11-19T16:44:28Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "75842f0b-8efd-43d1-b706-00db45c00531",
        "parentId" : "d11c4512-72fb-46e0-9bda-b3e8db03a77f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> don't you need an isinstance check on values that it must be a BooleanArray? or ndim==1\r\n\r\nThere is already a isinstance check for the values being a boolean ndarray (so *not* a BooleanArray). But will add a check for ndim==1\r\n",
        "createdAt" : "2019-11-19T21:10:36Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7efb2f7d-9adc-411e-991f-08dcfea1eb51",
        "parentId" : "d11c4512-72fb-46e0-9bda-b3e8db03a77f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "> There is already a isinstance check for the values being a boolean ndarray (so not a BooleanArray). But will add a check for ndim==1\r\n\r\nonly when you actually coerce, not here though\r\n\r\nthis is something we should check (here and in IntegerArray) as if you accidently pass a non ndim==1 then it would be an error (can be a followup)",
        "createdAt" : "2019-11-25T13:52:57Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "38abe136-803b-4b67-97c2-1e70a6968d9c",
        "parentId" : "d11c4512-72fb-46e0-9bda-b3e8db03a77f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> only when you actually coerce, not here though\r\n\r\nNot fully sure I understand. We don't do any coercing in this `__init__` constructor, and a few lines above there are isinstance checks that the input can only be boolean ndarrays.\r\n\r\n> this is something we should check (here and in IntegerArray) as if you accidently pass a non ndim==1 then it would be an error (can be a followup)\r\n\r\nAs following your comment, I already added a ndim check; I now raise an error if ndim is not 1 (on the lines below)",
        "createdAt" : "2019-11-25T14:23:04Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 240,
    "diffHunk" : "@@ -1,1 +238,242 @@                \"mask should be boolean numpy array. Use \"\n                \"the 'array' function instead\"\n            )\n        if not values.ndim == 1:\n            raise ValueError(\"values must be a 1D array\")"
  },
  {
    "id" : "ffd46f6b-e05c-4222-b184-ef9ae18c3fa5",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-319185183",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6097369-9259-493e-b553-64cdfdd08149",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add parameters here & type",
        "createdAt" : "2019-11-19T16:45:25Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 285,
    "diffHunk" : "@@ -1,1 +283,287 @@\n    def _coerce_to_ndarray(self, force_bool: bool = False):\n        \"\"\"\n        Coerce to an ndarary of object dtype or bool dtype (if force_bool=True).\n"
  },
  {
    "id" : "93decf66-0d9b-4612-95fc-2359f81cd1cc",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-319354994",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5a0f96e-7e50-4e2c-a945-2fb69b7282b0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this a cached property? (isna)?",
        "createdAt" : "2019-11-19T16:45:44Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "de5e2bed-422e-45e9-8c13-75f3cb1bfcfa",
        "parentId" : "d5a0f96e-7e50-4e2c-a945-2fb69b7282b0",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> is this a cached property? (isna)?\r\n\r\nCurrently we don't do any caching of any properties (also not on integer array). \r\nI think it can be interesting to look into that, but would leave that for a separate PR (this can be done for IntegerArray as well) ",
        "createdAt" : "2019-11-19T21:12:04Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 295,
    "diffHunk" : "@@ -1,1 +293,297 @@        \"\"\"\n        if force_bool:\n            if not self.isna().any():\n                return self._data\n            else:"
  },
  {
    "id" : "5da7c0cb-95c8-4e03-91f5-5241cb5a25f5",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-319354994",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60391b8e-b925-4ea4-b09d-145f26d56465",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this 2nd path seems duplicative of the below",
        "createdAt" : "2019-11-19T16:46:24Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a14ef4d0-c227-40f3-9d7c-7b1d53d7658d",
        "parentId" : "60391b8e-b925-4ea4-b09d-145f26d56465",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> this 2nd path seems duplicative of the below\r\n\r\nThe difference is that this path still does a `arr.astype(dtype, copy=False)` (to take the passed `dtype` into account)",
        "createdAt" : "2019-11-19T21:13:41Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 317,
    "diffHunk" : "@@ -1,1 +315,319 @@            # TODO can optimize this to not go through object dtype for\n            # numeric dtypes\n            arr = self._coerce_to_ndarray()\n            return arr.astype(dtype, copy=False)\n        # by default (no dtype specified), return an object array"
  },
  {
    "id" : "60cebcef-effa-4ebb-9af7-c4224de04f6f",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-319354994",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "088b8be3-98ff-4697-92de-444033b76be8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what about other names? do we raise?",
        "createdAt" : "2019-11-19T16:47:48Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "625a034d-b253-4c6d-94c2-699e2e7c6f41",
        "parentId" : "088b8be3-98ff-4697-92de-444033b76be8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> what about other names? do we raise?\r\n\r\nNo, they work, but the result of the numpy operation already has the correct dtype (eg std, var, .. results in a float), so they don't need to be post-processed.\r\n\r\n(but just realizing that min/max should return boolean not an int. For sum and prod the int is correct)\r\n",
        "createdAt" : "2019-11-19T21:20:29Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 660,
    "diffHunk" : "@@ -1,1 +658,662 @@            if int_result == result:\n                result = int_result\n\n        elif name in [\"min\", \"max\"] and notna(result):\n            result = np.bool_(result)"
  },
  {
    "id" : "ead6d4e5-07c3-4f89-9422-b3ad617c89e8",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-320028550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64437e60-e042-4533-8797-98632aa02a96",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Does this validate that they're actually 0 or 1? Don't you also need a check that the min / max is in that bound?",
        "createdAt" : "2019-11-20T15:43:10Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "bfce9cc0-5f88-4c5e-baf2-13f250e15163",
        "parentId" : "64437e60-e042-4533-8797-98632aa02a96",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Ah, sorry you've astyped to bool, so going back to float will make these 0 and 1.",
        "createdAt" : "2019-11-20T15:46:40Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +145,149 @@        values[~mask_values] = values_object[~mask_values].astype(bool)\n\n        # if the values were integer-like, validate it were actually 0/1's\n        if inferred_dtype in integer_like:\n            if not np.all("
  },
  {
    "id" : "e2d52276-bf11-49df-96de-3faff132eb81",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-322298463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a1279de-4699-48f7-845e-337843fe8caa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are you preparing this for a followup? issue?",
        "createdAt" : "2019-11-25T13:45:45Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "34749e2d-d243-4418-a3d8-2623ec1474cd",
        "parentId" : "4a1279de-4699-48f7-845e-337843fe8caa",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I'll open an issue (the same is true for integer array)",
        "createdAt" : "2019-11-25T14:17:34Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +132,136 @@            values = values.copy()\n    else:\n        # TODO conversion from integer/float ndarray can be done more efficiently\n        #  (avoid roundtrip through object)\n        values_object = np.asarray(values, dtype=object)"
  },
  {
    "id" : "d65b5517-f4d3-4c2c-8210-50c38dd91f86",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-322298463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f6e29c1-f94b-4e36-8519-0ca238569940",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "tests hit here?",
        "createdAt" : "2019-11-25T13:46:27Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f32c540d-00cf-4be5-9a80-9c3af58a103d",
        "parentId" : "8f6e29c1-f94b-4e36-8519-0ca238569940",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> tests hit here?\r\n\r\nYes, there is a test that passes all kinds of non-boolean-like values\r\n\r\nIn general, I ran locally pytest with coverage, and there is 97% coverage for this file. The main non-covered things are some parts of the ufunc related code, and some length mismatch errors in the ops code.",
        "createdAt" : "2019-11-25T14:19:00Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +139,143 @@        integer_like = (\"floating\", \"integer\", \"mixed-integer-float\")\n        if inferred_dtype not in (\"boolean\", \"empty\") + integer_like:\n            raise TypeError(\"Need to pass bool-like values\")\n\n        mask_values = isna(values_object)"
  },
  {
    "id" : "06439ff0-afc0-4748-a6c3-a7df966f2d73",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-322298463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddb149e3-8f6f-4852-95d5-d62b4ac44851",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this hit in a test?",
        "createdAt" : "2019-11-25T13:46:50Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1f347e98-8e72-4355-bd9e-d7463e294670",
        "parentId" : "ddb149e3-8f6f-4852-95d5-d62b4ac44851",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes",
        "createdAt" : "2019-11-25T14:19:46Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +151,155 @@                == values_object[~mask_values].astype(float)\n            ):\n                raise TypeError(\"Need to pass bool-like values\")\n\n    if mask is None and mask_values is None:"
  },
  {
    "id" : "f8a20a28-de2d-4c08-b483-fe46cc930f3f",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-322298463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c48ef36-e179-4494-8eac-9d4eb34fa0bd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we need to copy mask_values for any inputs?",
        "createdAt" : "2019-11-25T13:47:16Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "683905b2-98b5-43bf-b82e-a7181a0a008a",
        "parentId" : "3c48ef36-e179-4494-8eac-9d4eb34fa0bd",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`mask_values` is the result of `pd.isna(values_object)`, so should always be \"its own\" object (it's never a passed mask), so no need to copy it.",
        "createdAt" : "2019-11-25T14:21:09Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 158,
    "diffHunk" : "@@ -1,1 +156,160 @@        mask = np.zeros(len(values), dtype=bool)\n    elif mask is None:\n        mask = mask_values\n    else:\n        if isinstance(mask, np.ndarray) and mask.dtype == np.bool_:"
  },
  {
    "id" : "bb200128-dfec-4a6c-b262-5fc60a08c05a",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-322298463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bc3fb9a-fa28-4d4c-9d6c-52b34bbe4ce6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "test hit all this?",
        "createdAt" : "2019-11-25T13:47:40Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "505e5f24-036c-42d8-9882-37ff94eb2930",
        "parentId" : "3bc3fb9a-fa28-4d4c-9d6c-52b34bbe4ce6",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> test hit all this?\r\n\r\nYes",
        "createdAt" : "2019-11-25T14:21:23Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 173,
    "diffHunk" : "@@ -1,1 +171,175 @@    if not values.ndim == 1:\n        raise ValueError(\"values must be a 1D list-like\")\n    if not mask.ndim == 1:\n        raise ValueError(\"mask must be a 1D list-like\")\n"
  },
  {
    "id" : "f5da3c21-7d9e-4fa3-96b3-65cd1fede932",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-322379878",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4eb3943e-ec0c-4d30-aeb4-a353c54ffcc7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we have tests for this?",
        "createdAt" : "2019-11-25T13:53:33Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e794e5f2-b328-48ec-b10a-8cd657d00960",
        "parentId" : "4eb3943e-ec0c-4d30-aeb4-a353c54ffcc7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> do we have tests for this?\r\n\r\nDo we need that? This is an internal assertion, that should never be raised to the user but is here to help the developer (I don't think we should add tests for those asserts). So the \"test\" is that this actually never occurs in the tests.",
        "createdAt" : "2019-11-25T14:25:40Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f42ce2a7-aec6-4498-a5aa-5373bfecee5f",
        "parentId" : "4eb3943e-ec0c-4d30-aeb4-a353c54ffcc7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "BTW, I can also leave it out (the assert). For BooleanArray, the `dtype` is not very useful. I think this parameter is mainly used for cases where multiple dtypes are possible per array (eg int64, int32 etc for IntegerArray)",
        "createdAt" : "2019-11-25T14:27:11Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2aa382c2-d30e-43a1-956b-dccb05e37858",
        "parentId" : "4eb3943e-ec0c-4d30-aeb4-a353c54ffcc7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right i think it actually should *always* be None here, as this is internally passed. however a user might *try* to pass something that is not None (so this should maybe be a ValueError)",
        "createdAt" : "2019-11-25T15:48:33Z",
        "updatedAt" : "2019-11-25T15:48:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 261,
    "diffHunk" : "@@ -1,1 +259,263 @@    def _from_sequence(cls, scalars, dtype=None, copy: bool = False):\n        if dtype:\n            assert dtype == \"boolean\"\n        values, mask = coerce_to_array(scalars, copy=copy)\n        return BooleanArray(values, mask)"
  },
  {
    "id" : "a7c5bfbb-8ef7-42ac-86f3-8db7a707c9a2",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-322277656",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b863d45-7d7c-4013-b734-a400b1c1aa2c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "a lot of these are highly shared with IntegerArray (for followup)",
        "createdAt" : "2019-11-25T13:54:44Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 381,
    "diffHunk" : "@@ -1,1 +379,383 @@            if self._mask[i]:\n                yield self.dtype.na_value\n            else:\n                yield self._data[i]\n"
  },
  {
    "id" : "d943f0a0-5173-473c-bc99-56e2af5f974e",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-322277656",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3efbb449-dab5-4737-a302-2abc0f26509f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can be generic int he Int/Bool mixin baseclass (followup)",
        "createdAt" : "2019-11-25T13:55:52Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 666,
    "diffHunk" : "@@ -1,1 +664,668 @@        return result\n\n    def _maybe_mask_result(self, result, mask, other, op_name):\n        \"\"\"\n        Parameters"
  },
  {
    "id" : "8f352a42-bbd0-4f96-b8b5-3fe6fe6d4b49",
    "prId" : 29842,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29842#pullrequestreview-328471842",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae9f37fa-20d1-4cf1-9485-b12b7ab8b112",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this is to convert to a python bool?  why not just `bool(other)`?  `item` i usually think of as being an array method",
        "createdAt" : "2019-12-06T02:59:54Z",
        "updatedAt" : "2019-12-06T21:40:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "71cc7eec-b008-4d7a-8615-7253fcd7eced",
        "parentId" : "ae9f37fa-20d1-4cf1-9485-b12b7ab8b112",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`item` is the general method to get a python scalar (here we of course know we want a bool).\r\n\r\nBut Tom, why is it exactly needed to convert this? I would think the numpy operations later on work fine with a numpy scalar as well?",
        "createdAt" : "2019-12-06T07:15:14Z",
        "updatedAt" : "2019-12-06T21:40:16Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "81f53624-8f6c-4290-b910-3250be2644ab",
        "parentId" : "ae9f37fa-20d1-4cf1-9485-b12b7ab8b112",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "IIRC, we do things like `if right is False` or `if right is True`, which will fail for numpy booleans. I don't want to have to worry about checking both, so easier to convert here.",
        "createdAt" : "2019-12-06T21:38:09Z",
        "updatedAt" : "2019-12-06T21:40:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "31c2bc6dc3c8d7ef7cbf7aea41d6d686f7ff58ca",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +585,589 @@                other, mask = coerce_to_array(other, copy=False)\n            elif isinstance(other, np.bool_):\n                other = other.item()\n\n            if other_is_scalar and not (other is libmissing.NA or lib.is_bool(other)):"
  },
  {
    "id" : "2769249d-534f-40ba-9165-c14abf0cecde",
    "prId" : 29961,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29961#pullrequestreview-326791653",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca92bc77-60b7-45c5-a8e3-fded33d60068",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Pending the discussion in https://github.com/pandas-dev/pandas/issues/30038.",
        "createdAt" : "2019-12-04T11:53:46Z",
        "updatedAt" : "2019-12-04T11:58:22Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "d083c88db6cb50ced1d81e12dd510164b8101056",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +485,489 @@            if self.isna().any():\n                raise ValueError(\"cannot convert NA to integer\")\n        # for float dtype, ensure we use np.nan before casting (numpy cannot\n        # deal with pd.NA)\n        na_value = self._na_value"
  }
]