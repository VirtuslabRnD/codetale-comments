[
  {
    "id" : "2d8148ca-6888-43ed-8eed-7848d0649aee",
    "prId" : 19902,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19902#pullrequestreview-105570267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bf56c33-bd1b-4450-83d3-1d107bbc0ffc",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Do we want this for our arrays? \r\nI am not sure this should be called `.values`. \r\nAnd we already have `_ndarray_values` ?",
        "createdAt" : "2018-03-20T14:01:32Z",
        "updatedAt" : "2018-07-02T22:07:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "53a62ec6-b225-42eb-9fc7-13f48a33dd3a",
        "parentId" : "2bf56c33-bd1b-4450-83d3-1d107bbc0ffc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is a good question, and I think relates to the inheritance vs composition question.  As with several other comments, the narrow-context answer is that this PR is designed to involve essentially zero _changes_ to behavior, is just moving methods/properties from their existing locations in the index classes.\r\n\r\nAs for questions about whether a method/property is needed in the array classes, these are all going to be needed by the arithmetic/comparison methods (ported in a later pass)",
        "createdAt" : "2018-03-20T23:16:57Z",
        "updatedAt" : "2018-07-02T22:07:22Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a684c2d6d939d372a18bfa7788258762420ccb5c",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +37,41 @@    def values(self):\n        \"\"\" return the underlying data as an ndarray \"\"\"\n        return self._data.view(np.ndarray)\n\n    @property"
  },
  {
    "id" : "bd887467-539a-473a-b4cf-4421fc25f788",
    "prId" : 19902,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19902#pullrequestreview-105358025",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ac8e347-082a-4c30-95d0-150f9b5c9935",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "same: is this needed on the arrays?",
        "createdAt" : "2018-03-20T14:11:21Z",
        "updatedAt" : "2018-07-02T22:07:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "a684c2d6d939d372a18bfa7788258762420ccb5c",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +53,57 @@\n    @property  # NB: override with cache_readonly in immutable subclasses\n    def hasnans(self):\n        \"\"\" return if I have any nans; enables various perf speedups \"\"\"\n        return self._isnan.any()"
  },
  {
    "id" : "20e361be-4e9e-4d27-8920-567835fe33e3",
    "prId" : 19902,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19902#pullrequestreview-105570329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b141f30-73ec-43ed-8c63-ad1d15ee13e1",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "this should be `isna()` ?",
        "createdAt" : "2018-03-20T14:12:22Z",
        "updatedAt" : "2018-07-02T22:07:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "80ae4802-11ba-4c37-9ba5-1f14481aceed",
        "parentId" : "9b141f30-73ec-43ed-8c63-ad1d15ee13e1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'm open to the name-change.  This is the existing name.",
        "createdAt" : "2018-03-20T23:17:16Z",
        "updatedAt" : "2018-07-02T22:07:22Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a684c2d6d939d372a18bfa7788258762420ccb5c",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +48,52 @@\n    @property  # NB: override with cache_readonly in immutable subclasses\n    def _isnan(self):\n        \"\"\" return if each value is nan\"\"\"\n        return (self.asi8 == iNaT)"
  },
  {
    "id" : "fa55e9f3-1d48-41f2-87ed-0a59db86aaf6",
    "prId" : 19902,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19902#pullrequestreview-105358025",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de5ffbd0-21e2-4ed3-9bca-7335db3f3349",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "how is this different from `fillna` ?",
        "createdAt" : "2018-03-20T14:12:44Z",
        "updatedAt" : "2018-07-02T22:07:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "a684c2d6d939d372a18bfa7788258762420ccb5c",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +57,61 @@        return self._isnan.any()\n\n    def _maybe_mask_results(self, result, fill_value=None, convert=None):\n        \"\"\"\n        Parameters"
  },
  {
    "id" : "b45e21ea-3526-4d6c-a9f6-f07680ca2846",
    "prId" : 21782,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21782#pullrequestreview-135205285",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b787463-695b-4ac4-ba4e-f5c725c1bf6a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so for future, any methods that we implement in the sub classes but not here, should be an AbstractMethodError (not specific to this comment, just generally)",
        "createdAt" : "2018-07-07T14:04:35Z",
        "updatedAt" : "2018-07-07T14:07:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "10e5559785dafd7b0c703e680a27344b08655053",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +34,38 @@        raise com.AbstractMethodError(self)\n\n    def _box_values(self, values):\n        \"\"\"\n        apply box func to passed values"
  },
  {
    "id" : "438625b6-24f3-4754-8ddf-e2b5b2be84a0",
    "prId" : 21803,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21803#pullrequestreview-135232443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5d5b335-4650-40d7-973b-f079fd1ea793",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "don't need the else here",
        "createdAt" : "2018-07-07T22:33:58Z",
        "updatedAt" : "2018-07-07T23:28:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4170ba77-f468-4062-ab95-2ac5e5a211a9",
        "parentId" : "a5d5b335-4650-40d7-973b-f079fd1ea793",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is the existing `__getitem__` moved verbatim.  Can de-indent in the next pass.",
        "createdAt" : "2018-07-07T23:23:55Z",
        "updatedAt" : "2018-07-07T23:28:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3f33cdb5-abf9-405b-8ff3-b8b05c2b28b7",
        "parentId" : "a5d5b335-4650-40d7-973b-f079fd1ea793",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "thanks!",
        "createdAt" : "2018-07-08T12:56:07Z",
        "updatedAt" : "2018-07-08T12:56:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "192c9200e690b69e2e3d4cb7f4d9b041854be9e3",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +109,113 @@            val = getitem(key)\n            return self._box_func(val)\n        else:\n            if com.is_bool_indexer(key):\n                key = np.asarray(key)"
  },
  {
    "id" : "a769e9e1-1d8d-4cce-997d-bf0566dadf06",
    "prId" : 21815,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21815#pullrequestreview-135239718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7131f534-ab61-460a-b963-1acbe1effebc",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Just de-indenting this block, requested on the previous PR.",
        "createdAt" : "2018-07-08T17:26:23Z",
        "updatedAt" : "2018-07-08T17:26:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b9358611e0cf47b231bdd0f6cbeeef4c73302eb",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +114,118 @@            val = getitem(key)\n            return self._box_func(val)\n\n        if com.is_bool_indexer(key):\n            key = np.asarray(key)"
  },
  {
    "id" : "2c7899cc-c952-474b-b819-a4789cd20284",
    "prId" : 21815,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21815#pullrequestreview-135239735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "995f19a5-88b4-42bc-8e20-6fde55a5e480",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "`self.astype('O')` is used a few times, so that's the only one we need for now",
        "createdAt" : "2018-07-08T17:26:57Z",
        "updatedAt" : "2018-07-08T17:26:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b9358611e0cf47b231bdd0f6cbeeef4c73302eb",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +150,154 @@        if is_object_dtype(dtype):\n            return self._box_values(self.asi8)\n        return super(DatetimeLikeArrayMixin, self).astype(dtype, copy)\n\n    # ------------------------------------------------------------------"
  },
  {
    "id" : "29664c7f-a0af-449e-a105-ae6a75214c2a",
    "prId" : 21815,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21815#pullrequestreview-135247031",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d8c642b-7e0f-4cfb-bd5e-6f78db1a5a77",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "at some point pls add a doc-string",
        "createdAt" : "2018-07-08T22:01:48Z",
        "updatedAt" : "2018-07-08T22:03:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b9358611e0cf47b231bdd0f6cbeeef4c73302eb",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +148,152 @@\n    def astype(self, dtype, copy=True):\n        if is_object_dtype(dtype):\n            return self._box_values(self.asi8)\n        return super(DatetimeLikeArrayMixin, self).astype(dtype, copy)"
  },
  {
    "id" : "f8c691a4-f202-414b-9180-67fcdc2e727f",
    "prId" : 21872,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21872#pullrequestreview-136505995",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a1af072-a399-48db-95eb-6d1f88683536",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yes, if you can.",
        "createdAt" : "2018-07-12T05:23:09Z",
        "updatedAt" : "2018-07-12T19:19:26Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "935ac7b2b48a98ead0e2140ce3a681649184a18a",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +54,58 @@\n    name = '__{name}__'.format(name=op.__name__)\n    # TODO: docstring?\n    return compat.set_function_name(cmp_method, name, cls)\n"
  },
  {
    "id" : "f7627ef1-db6a-4547-98c3-1a02430ba2b5",
    "prId" : 21872,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21872#pullrequestreview-136718176",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d15742ca-3ddd-4a81-96b6-aaa98a7f8055",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "\"8 aware arrays\" ?",
        "createdAt" : "2018-07-12T05:23:37Z",
        "updatedAt" : "2018-07-12T19:19:26Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "5bf56bb3-e4e6-49dd-b9c8-159d48a5d5ef",
        "parentId" : "d15742ca-3ddd-4a81-96b6-aaa98a7f8055",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is the existing docstring in indexes.datetimelike.  I'm open to suggestions.",
        "createdAt" : "2018-07-12T15:57:16Z",
        "updatedAt" : "2018-07-12T19:19:26Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "935ac7b2b48a98ead0e2140ce3a681649184a18a",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +477,481 @@        \"\"\"\n        We have been called because a comparison between\n        8 aware arrays. numpy >= 1.11 will\n        now warn about NaT comparisons\n        \"\"\""
  },
  {
    "id" : "931b1c35-bcb8-4b46-b36a-cdc7f99ca2da",
    "prId" : 21872,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21872#pullrequestreview-136506084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ece46183-e4cd-4a92-9c34-2e01be971a92",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "docstring",
        "createdAt" : "2018-07-12T05:23:59Z",
        "updatedAt" : "2018-07-12T19:19:26Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "935ac7b2b48a98ead0e2140ce3a681649184a18a",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +527,531 @@# Shared Constructor Helpers\n\ndef validate_periods(periods):\n    \"\"\"\n    If a `periods` argument is passed to the Datetime/Timedelta Array/Index"
  },
  {
    "id" : "3258c594-d12c-47c0-a2a4-4f7d882bb76e",
    "prId" : 21926,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21926#pullrequestreview-139088132",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4fc17ed-388b-483e-a9e4-8f2ae07f84d2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you do this ?",
        "createdAt" : "2018-07-17T12:13:18Z",
        "updatedAt" : "2018-07-19T15:51:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "18edebf1-b4aa-4c16-8d29-3abca32e6262",
        "parentId" : "f4fc17ed-388b-483e-a9e4-8f2ae07f84d2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you update this",
        "createdAt" : "2018-07-20T12:50:49Z",
        "updatedAt" : "2018-07-20T12:51:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fbbe40b3-8524-4900-910d-3bfd80e9df1c",
        "parentId" : "f4fc17ed-388b-483e-a9e4-8f2ae07f84d2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Already done",
        "createdAt" : "2018-07-20T13:48:09Z",
        "updatedAt" : "2018-07-20T13:48:09Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8db496db-8a9b-40cf-b6d4-9180c8578799",
        "parentId" : "f4fc17ed-388b-483e-a9e4-8f2ae07f84d2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, does tz_compare not take None as an arg? hmm make should add the check there? as I don't think we check for None's elsewhere (not really sure about this)",
        "createdAt" : "2018-07-20T13:59:46Z",
        "updatedAt" : "2018-07-20T13:59:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b7e7853d-c918-43d2-baa1-a6ddc04e47ac",
        "parentId" : "f4fc17ed-388b-483e-a9e4-8f2ae07f84d2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "None-tz comparisons are a pretty special case that get handled separately.  I’m OK with tzcompare not taking None.",
        "createdAt" : "2018-07-20T14:47:52Z",
        "updatedAt" : "2018-07-20T14:47:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a72f980688a0556f95119b547b2936fa6b49697a",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +644,648 @@            dtype = DatetimeTZDtype.construct_from_string(dtype)\n            dtz = getattr(dtype, 'tz', None)\n            if dtz is not None:\n                if tz is not None and not timezones.tz_compare(tz, dtz):\n                    raise ValueError(\"cannot supply both a tz and a dtype\""
  },
  {
    "id" : "39f51dec-1e27-45dd-b0d9-968d7ff37a0a",
    "prId" : 21926,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21926#pullrequestreview-139043247",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f6726c3-e161-4fb2-957b-5323a07def56",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you do absolute imports",
        "createdAt" : "2018-07-18T10:34:40Z",
        "updatedAt" : "2018-07-19T15:51:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4981353b-e271-4733-8766-996cafd95e2b",
        "parentId" : "3f6726c3-e161-4fb2-957b-5323a07def56",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Tried it, causes import-time errors",
        "createdAt" : "2018-07-18T16:36:07Z",
        "updatedAt" : "2018-07-19T15:51:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f7d9eb05-f5ab-4a9c-a3eb-347309d03aed",
        "parentId" : "3f6726c3-e161-4fb2-957b-5323a07def56",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i see, we import in __init__ all of the extension arrays which import this. hmm.",
        "createdAt" : "2018-07-20T12:50:25Z",
        "updatedAt" : "2018-07-20T12:51:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a72f980688a0556f95119b547b2936fa6b49697a",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +30,34 @@from pandas.core.algorithms import checked_add_with_arr\n\nfrom .base import ExtensionOpsMixin\n\n"
  },
  {
    "id" : "889cec63-56dd-497a-9992-d5264a45a2ef",
    "prId" : 22697,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22697#pullrequestreview-156318299",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21de23ae-68e8-4de1-8e54-9bd1976aed82",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "versionchanged -> 0.24.0",
        "createdAt" : "2018-09-18T11:25:52Z",
        "updatedAt" : "2018-09-19T21:51:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9bbfe8a57aa33e41a31b1413075b3ac7024daed",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +536,540 @@        periods : int\n            Number of periods (or increments) to shift by,\n            can be positive or negative.\n\n            .. versionchanged:: 0.24.0"
  },
  {
    "id" : "91013921-1187-4113-92a0-4cd5cacd2951",
    "prId" : 22697,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22697#pullrequestreview-156318299",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdebd765-5839-460c-af42-d15e4ff4e5f8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you edit the Series.shift to add a See Also back to here",
        "createdAt" : "2018-09-18T11:26:25Z",
        "updatedAt" : "2018-09-19T21:51:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9bbfe8a57aa33e41a31b1413075b3ac7024daed",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +551,555 @@\n        See Also\n        --------\n        Index.shift : Shift values of Index.\n        \"\"\""
  },
  {
    "id" : "bd441e04-c0aa-4f26-8046-af51dc1dfa49",
    "prId" : 22699,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22699#pullrequestreview-155976572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f343b64-8870-4cea-ac26-853a2820dcab",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Not fully related to this change, but do we actually want to ignore the warning here? Shouldn't we rather fix it if numpy will do something differently in the future?",
        "createdAt" : "2018-09-17T12:04:07Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7cbfd274-24f4-4cc7-8673-f4865bd3a890",
        "parentId" : "6f343b64-8870-4cea-ac26-853a2820dcab",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Added to https://github.com/pandas-dev/pandas/issues/22698",
        "createdAt" : "2018-09-17T15:14:05Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4990fc2d984b536e5c7c97ad55d4f550ae661867",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +60,64 @@        # comparisons, this will raise in the future\n        with warnings.catch_warnings(record=True):\n            warnings.filterwarnings(\"ignore\", \"elementwise\", FutureWarning)\n            with np.errstate(all='ignore'):\n                result = op(self.values, np.asarray(other))"
  },
  {
    "id" : "20241951-2995-49e9-a73d-b499a06b3165",
    "prId" : 22949,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22949#pullrequestreview-161112029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c682d57-03ee-4810-87c2-b191e65b4802",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "how is this relevant here? this is simply a re-definition of what shift means. I understand the desire to make things clear, but this has *always* been the case, for example in comparing a DTI to an Index.",
        "createdAt" : "2018-10-03T11:13:30Z",
        "updatedAt" : "2018-10-03T19:20:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "67faabcd95ed8bf3a43a02623f18b4ce9d8e4a3f",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +560,564 @@        Shift each value by `periods`.\n\n        Note this is different from ExtensionArray.shift, which\n        shifts the *position* of each element, padding the end with\n        missing values."
  },
  {
    "id" : "937d155f-c75c-4fde-b32a-ea061b97bf6c",
    "prId" : 23215,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23215#pullrequestreview-166288552",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "737981d3-c458-4dc6-85cc-78f8c91ec5fb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "why raise the TypeError instead of returning NotImplemented ?",
        "createdAt" : "2018-10-18T11:49:42Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "bb3fb34c-bdc6-456b-a517-3244d51e291e",
        "parentId" : "737981d3-c458-4dc6-85cc-78f8c91ec5fb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "More explicit, and it's not something I anticipate being overridden.",
        "createdAt" : "2018-10-18T20:47:14Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0466b9c8efd2f38f61a79fdf90464ee71ae72750",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +346,350 @@        # Overriden by PeriodArray\n        raise TypeError(\"cannot subtract Period from a {cls}\"\n                        .format(cls=type(self).__name__))\n\n    def _add_offset(self, offset):"
  },
  {
    "id" : "5eaddeaf-a506-4efb-810a-cb53eec57a6a",
    "prId" : 23215,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23215#pullrequestreview-169077424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6105008-5cce-49cf-bfa6-5fec71a40dee",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you update the doc-string for fill_value",
        "createdAt" : "2018-10-28T03:39:37Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0466b9c8efd2f38f61a79fdf90464ee71ae72750",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +225,229 @@        \"\"\"\n        Parameters\n        ----------\n        result : a ndarray\n        fill_value : object, default iNaT"
  },
  {
    "id" : "57caeb2e-226c-4c84-94e2-bf73e519c16b",
    "prId" : 23425,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23425#pullrequestreview-170524910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85fb7c15-f2b1-484c-ad53-e3f8db48857a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "isn't this pretty much what _nat_new did? I find this is repeating lots of code, why don't you make a method to create the null array instead.",
        "createdAt" : "2018-10-31T11:59:55Z",
        "updatedAt" : "2018-11-06T16:16:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a492c9c2-079b-4d09-aafc-fac0ef99e89c",
        "parentId" : "85fb7c15-f2b1-484c-ad53-e3f8db48857a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "`_nat_new` also did casting+boxing that this doesn't.  These two lines aren't repeated often enough to merit a method.",
        "createdAt" : "2018-10-31T15:15:58Z",
        "updatedAt" : "2018-11-06T16:16:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ed62878a-a48e-4390-97bd-02ff785e8bdf",
        "parentId" : "85fb7c15-f2b1-484c-ad53-e3f8db48857a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok",
        "createdAt" : "2018-11-01T00:53:50Z",
        "updatedAt" : "2018-11-06T16:16:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d3d38d29f83b08c78031febfd18ee31a0f06114",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +372,376 @@        return the i8 result view\n        \"\"\"\n        if isna(other):\n            # i.e np.timedelta64(\"NaT\"), not recognized by delta_to_nanoseconds\n            new_values = np.empty(len(self), dtype='i8')"
  },
  {
    "id" : "7b678b2e-ee30-4da7-abde-359acc44166c",
    "prId" : 23593,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23593#pullrequestreview-186218607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59078560-d220-432e-86af-901900055113",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i doubt we test this, but why not astype here if ``dtype`` is not (object, None), then return ``__array__`` on that? which possibly would recurse but should be ok",
        "createdAt" : "2018-12-18T12:55:52Z",
        "updatedAt" : "2019-01-05T20:26:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "81321674-529c-4faf-bd9a-76bca32bfa8a",
        "parentId" : "59078560-d220-432e-86af-901900055113",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Hmm in my quick experiments, that gets into a recursion error pretty quickly. We would need to be careful to not use __array__ in anything that `.astype` calls\r\n\r\n1. `_format_native_types`\r\n2. `Categorical.__init__`\r\n3. `PeriodIndex.asfreq`\r\n\r\nand currently the fallback on `astype` for unrecognized dtypes is to call `np.asarray(self, dtype=dtype)`, so that would need to be changed as well.",
        "createdAt" : "2018-12-18T18:34:53Z",
        "updatedAt" : "2019-01-05T20:26:04Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4120586e626a4d3815a7f69132af70429a54dea8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +393,397 @@\n    def __array__(self, dtype=None):\n        # used for Timedelta/DatetimeArray, overwritten by PeriodArray\n        if is_object_dtype(dtype):\n            return np.array(list(self), dtype=object)"
  },
  {
    "id" : "0302c50b-a2be-45c6-a9ec-6aab5939ada3",
    "prId" : 23593,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23593#pullrequestreview-189437849",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39cfabe1-19b1-4c74-8ec4-aae99547e3b2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would raise if dtype not in [None, object]",
        "createdAt" : "2019-01-04T16:38:08Z",
        "updatedAt" : "2019-01-05T20:26:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4120586e626a4d3815a7f69132af70429a54dea8",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +396,400 @@        if is_object_dtype(dtype):\n            return np.array(list(self), dtype=object)\n        return self._data\n\n    @property"
  },
  {
    "id" : "f61abf04-63be-4946-b320-9ce8f95fe3bc",
    "prId" : 23643,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23643#pullrequestreview-174079698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15a8242d-850a-4215-8e0e-4c1a5e34c486",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I suppose this closes  https://github.com/pandas-dev/pandas/issues/23586 then? Can you confirm and add a \"closes #23586\" to the original issue?",
        "createdAt" : "2018-11-12T19:18:29Z",
        "updatedAt" : "2018-11-14T12:56:37Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c4114dc3-98e9-40d9-8436-61c6a87568e5",
        "parentId" : "15a8242d-850a-4215-8e0e-4c1a5e34c486",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yep, will do.",
        "createdAt" : "2018-11-12T20:27:12Z",
        "updatedAt" : "2018-11-14T12:56:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cb072e7ec33c860183c8c20bd3596e0a3bff2a0",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +204,208 @@    #   * _reduce\n\n    def unique(self):\n        result = unique1d(self.asi8)\n        return type(self)(result, dtype=self.dtype)"
  },
  {
    "id" : "e96d3e2b-bf49-49c7-9927-d7cdfd418e2f",
    "prId" : 23771,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23771#pullrequestreview-176115114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "191dd3b2-5e88-4e20-84ba-aef86ad1ad5f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "worth comments here?",
        "createdAt" : "2018-11-18T23:09:14Z",
        "updatedAt" : "2018-11-18T23:11:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0fc0e5a3-31d3-45cd-b899-98a2643819cc",
        "parentId" : "191dd3b2-5e88-4e20-84ba-aef86ad1ad5f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not really.  It would just say `# wrap result in TimedeltaArray` which is pretty redundant given the one-liner here",
        "createdAt" : "2018-11-19T00:17:43Z",
        "updatedAt" : "2018-11-19T00:17:43Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c4ad24bd40740dbb274b6c0a384e2b3e57671ac",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +796,800 @@                return NotImplemented\n\n            if is_timedelta64_dtype(result) and isinstance(result, np.ndarray):\n                from pandas.core.arrays import TimedeltaArrayMixin\n                # TODO: infer freq?"
  },
  {
    "id" : "3c11dfde-04e4-4aab-a3cc-5be924f806d8",
    "prId" : 24038,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24038#pullrequestreview-180544203",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4d204e7-a4d9-4893-8857-a6b18d7f3172",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Index --> Array/Index",
        "createdAt" : "2018-12-02T01:23:52Z",
        "updatedAt" : "2018-12-02T02:41:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "54042f9c944159fa0f61b8ba57c375e41a2d5f3e",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +84,88 @@class DatelikeOps(object):\n    \"\"\"\n    Common ops for DatetimeIndex/PeriodIndex, but not TimedeltaIndex.\n    \"\"\"\n"
  },
  {
    "id" : "5df1b19f-7563-402f-a325-b114687c3a80",
    "prId" : 24038,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24038#pullrequestreview-180544215",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "552e3898-6962-41f2-b46f-70dd3c33decb",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not a big deal, but is there a reason not to put this docstring in the normal docstring place and then accomplish the formatting with `@Substitution(...)`?",
        "createdAt" : "2018-12-02T01:24:46Z",
        "updatedAt" : "2018-12-02T02:41:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "54042f9c944159fa0f61b8ba57c375e41a2d5f3e",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +91,95 @@        return Index(self.format(date_format=date_format),\n                     dtype=compat.text_type)\n    strftime.__doc__ = \"\"\"\n    Convert to Index using specified date_format.\n"
  },
  {
    "id" : "d179048f-c4e4-48e5-beec-8b0bf1d8d0d2",
    "prId" : 24038,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24038#pullrequestreview-180544227",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39483acd-d22b-417a-98f2-370060f65892",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Can we avoid having these in the TimedeltaArray/Index namespace?",
        "createdAt" : "2018-12-02T01:25:19Z",
        "updatedAt" : "2018-12-02T02:41:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "54042f9c944159fa0f61b8ba57c375e41a2d5f3e",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +132,136 @@    \"\"\"\n\n    _round_doc = (\n        \"\"\"\n        Perform {op} operation on the data to the specified `freq`."
  },
  {
    "id" : "21f945d6-88a8-4c4e-92dd-b8ee6efd0984",
    "prId" : 24038,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24038#pullrequestreview-180544239",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d2d2240-b6bb-4190-9ebc-fbb787bb21e7",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Array/Index/Series",
        "createdAt" : "2018-12-02T01:25:38Z",
        "updatedAt" : "2018-12-02T02:41:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "54042f9c944159fa0f61b8ba57c375e41a2d5f3e",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +170,174 @@        Returns\n        -------\n        DatetimeIndex, TimedeltaIndex, or Series\n            Index of the same type for a DatetimeIndex or TimedeltaIndex,\n            or a Series with the same index for a Series."
  },
  {
    "id" : "20cefd89-840e-465a-b7ce-b1bb660e5c3f",
    "prId" : 24038,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24038#pullrequestreview-180544255",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "147b946a-a4f6-42dd-9c41-3ea6524271f3",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The array classes don't have _shallow_copy anymore.  Use _simple_new directly?",
        "createdAt" : "2018-12-02T01:26:27Z",
        "updatedAt" : "2018-12-02T02:41:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "54042f9c944159fa0f61b8ba57c375e41a2d5f3e",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +247,251 @@            attribs['tz'] = None\n        return self._ensure_localized(\n            self._shallow_copy(result, **attribs), ambiguous, nonexistent\n        )\n"
  },
  {
    "id" : "f345ccfa-19ce-49a3-94e0-14df0d5e5e67",
    "prId" : 24038,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24038#pullrequestreview-180545555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ec9b32f-b64d-4bc8-a5cb-ec943b403366",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Is there any way to avoid this?  We've pretty assiduously kept the EA subclasses Index-ignorant so far",
        "createdAt" : "2018-12-02T01:27:56Z",
        "updatedAt" : "2018-12-02T02:41:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "91b9953f-b92f-4a06-870a-8e6745f67a57",
        "parentId" : "6ec9b32f-b64d-4bc8-a5cb-ec943b403366",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "That's what the old version did. I haven't looked at which is more appropriate here.",
        "createdAt" : "2018-12-02T02:42:22Z",
        "updatedAt" : "2018-12-02T02:42:23Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "54042f9c944159fa0f61b8ba57c375e41a2d5f3e",
    "line" : 226,
    "diffHunk" : "@@ -1,1 +1225,1229 @@    i8 1d array\n    \"\"\"\n    from pandas import Index\n    from pandas.core.arrays import PeriodArray\n"
  },
  {
    "id" : "2d36c8fb-4639-4937-b7f5-61e58b5447be",
    "prId" : 24038,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24038#pullrequestreview-180544284",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e22a450-22b5-4695-b1e8-6578d6b1da9a",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Do the array classes have _ensure_localized?",
        "createdAt" : "2018-12-02T01:28:37Z",
        "updatedAt" : "2018-12-02T02:41:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "54042f9c944159fa0f61b8ba57c375e41a2d5f3e",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +246,250 @@        if 'tz' in attribs:\n            attribs['tz'] = None\n        return self._ensure_localized(\n            self._shallow_copy(result, **attribs), ambiguous, nonexistent\n        )"
  },
  {
    "id" : "062eb3dc-455b-4d34-b61f-51c73ca0652b",
    "prId" : 24157,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24157#pullrequestreview-184651501",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "600b5515-790c-450a-962a-05f524bcfd41",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you comment here",
        "createdAt" : "2018-12-13T13:09:12Z",
        "updatedAt" : "2018-12-13T19:50:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b927925a14def3d3d8710493517d34ebe950c040",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +352,356 @@                else:\n                    freq = self.freq\n            elif key is Ellipsis:\n                # GH#21282 indexing with Ellipsis is similar to a full slice,\n                #  should preserve `freq` attribute"
  },
  {
    "id" : "1b6527bd-cf95-4476-ad51-5ba4304a564f",
    "prId" : 24352,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24352#pullrequestreview-186621352",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47c71c29-e643-4f57-9b6d-a2ce12e53d35",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "These repeated if checks could maybe be moved into the `maybe_integer_op_deprecated`. @jbrockmendel is there a recommended Cython equivalent for `is_period_dtype`?",
        "createdAt" : "2018-12-19T16:06:07Z",
        "updatedAt" : "2018-12-19T16:43:21Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2351bfd7615837b3c79e801ad9020938369cd11",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +921,925 @@            return self._add_datetime_arraylike(other)\n        elif is_integer_dtype(other):\n            if not is_period_dtype(self):\n                maybe_integer_op_deprecated(self)\n            result = self._addsub_int_array(other, operator.add)"
  },
  {
    "id" : "1843b85f-5dd5-4599-b4de-93b232162487",
    "prId" : 24364,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24364#pullrequestreview-187469604",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c70c1520-d354-4f19-afa4-d3e705b855e1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "IIRC this is a general Index property, are changing this globally? (ok by me)",
        "createdAt" : "2018-12-21T17:03:45Z",
        "updatedAt" : "2018-12-21T17:06:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc3a301a04073e8d34eeea68c895e7313a5f9b27",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +465,469 @@\n    @property  # NB: override with cache_readonly in immutable subclasses\n    def _hasnans(self):\n        \"\"\"\n        return if I have any nans; enables various perf speedups"
  },
  {
    "id" : "2531af6a-70c8-428d-bc36-efe94ec258cc",
    "prId" : 24405,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24405#pullrequestreview-187801770",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46951bfe-004c-47a9-9f33-08333e0f7425",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pass copy flag here",
        "createdAt" : "2018-12-24T18:27:53Z",
        "updatedAt" : "2018-12-28T19:28:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4b0c787b-ac45-4a1b-96bd-217e47fd1f9c",
        "parentId" : "46951bfe-004c-47a9-9f33-08333e0f7425",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do this here",
        "createdAt" : "2018-12-25T16:37:18Z",
        "updatedAt" : "2018-12-28T19:28:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "443cd355-b010-4302-bec8-c0a569e3e902",
        "parentId" : "46951bfe-004c-47a9-9f33-08333e0f7425",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "np.asarray doesn't take `copy` kwarg; broke a bunch of tests in the previous push",
        "createdAt" : "2018-12-25T16:46:50Z",
        "updatedAt" : "2018-12-28T19:28:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "eac662b7a1eaf2c280ee91d9f9843963be4f106b",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +438,442 @@            return Categorical(self, dtype=dtype)\n        else:\n            return np.asarray(self, dtype=dtype)\n\n    def view(self, dtype=None):"
  },
  {
    "id" : "a21209d5-3635-423a-81b0-c7859d267b8e",
    "prId" : 24405,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24405#pullrequestreview-187726709",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10b8a4ac-f40a-460b-aa61-d5e15fd37539",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pass copy? (I don't know if we have this arg to Categorical)",
        "createdAt" : "2018-12-24T18:28:07Z",
        "updatedAt" : "2018-12-28T19:28:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "81f544bc-c6f9-4e96-a615-f0e975c0bf88",
        "parentId" : "10b8a4ac-f40a-460b-aa61-d5e15fd37539",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> I don't know if we have this arg to Categorical\r\n\r\nWe don't.",
        "createdAt" : "2018-12-24T19:03:04Z",
        "updatedAt" : "2018-12-28T19:28:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "63caf6e6-53a0-4759-b4da-bdcb4b49fefe",
        "parentId" : "10b8a4ac-f40a-460b-aa61-d5e15fd37539",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, i guess we should (can you create an issue).",
        "createdAt" : "2018-12-24T19:19:42Z",
        "updatedAt" : "2018-12-28T19:28:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "eac662b7a1eaf2c280ee91d9f9843963be4f106b",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +436,440 @@            raise TypeError(msg.format(name=type(self).__name__, dtype=dtype))\n        elif is_categorical_dtype(dtype):\n            return Categorical(self, dtype=dtype)\n        else:\n            return np.asarray(self, dtype=dtype)"
  },
  {
    "id" : "a84aec72-6cfd-4c1d-b69e-5d65c311199e",
    "prId" : 24461,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24461#pullrequestreview-188357874",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47172762-6f1b-4510-a582-b83ddc0d32e5",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "not a big  deal, but did you intend to include values_for_argsort? Maybe update the title?\r\n\r\nThough I suspect this isn't being tested yet.",
        "createdAt" : "2018-12-28T11:51:59Z",
        "updatedAt" : "2018-12-28T20:35:50Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "efeb72be-ec22-49cd-9208-e537d07a4c41",
        "parentId" : "47172762-6f1b-4510-a582-b83ddc0d32e5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think past-me included this in the hopes of making rebasing \\epsilon simpler.",
        "createdAt" : "2018-12-28T19:43:24Z",
        "updatedAt" : "2018-12-28T20:35:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9873c12ecead738f6da0e4963fac36910f218489",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +590,594 @@        return cls(values, dtype=original.dtype)\n\n    def _values_for_argsort(self):\n        return self._data\n"
  },
  {
    "id" : "ec0bf458-a5f7-479d-888c-5b7c9d22415d",
    "prId" : 24461,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24461#pullrequestreview-188276285",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54e8baec-4d92-42ba-a2ab-686317bdf7c5",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Hold off on changing the signature `v` to `value` until \r\nhttps://github.com/pandas-dev/pandas/pull/24350/files/ff8bbc361b5bed4c244ba38a4a49c0e2e79758e5#diff-99633b1041c2ea6283aa3d5bcf79e8cd is resolved.",
        "createdAt" : "2018-12-28T11:55:04Z",
        "updatedAt" : "2018-12-28T20:35:50Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "9873c12ecead738f6da0e4963fac36910f218489",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +598,602 @@    #  pandas assumes they're there.\n\n    def searchsorted(self, value, side='left', sorter=None):\n        \"\"\"\n        Find indices where elements should be inserted to maintain order."
  },
  {
    "id" : "831109ca-01e0-487c-9087-5c735a14161a",
    "prId" : 24477,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24477#pullrequestreview-188392861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "693cc094-e3f6-44d6-8da1-be1232cea2bc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "key could be a scalar here right? (in which case u will get an odd exception about len of unsized object)",
        "createdAt" : "2018-12-29T02:48:42Z",
        "updatedAt" : "2018-12-29T12:17:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "58851138-dcd3-4927-8a27-d364257fd6e1",
        "parentId" : "693cc094-e3f6-44d6-8da1-be1232cea2bc",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Hrm... yeah\r\n\r\n```python\r\nIn [3]: pd.period_range('2000', periods=2)._data\r\nOut[3]:\r\n<PeriodArray>\r\n['2000-01-01', '2000-01-02']\r\nLength: 2, dtype: period[D]\r\n\r\nIn [4]: arr = pd.period_range('2000', periods=2)._data\r\n\r\nIn [5]: arr[0] = arr[[0, 1]]\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-5-9a9ffe90069d> in <module>\r\n----> 1 arr[0] = arr[[0, 1]]\r\n\r\n~/sandbox/pandas/pandas/core/arrays/datetimelike.py in __setitem__(self, key, value)\r\n    494             is_slice = isinstance(key, slice)\r\n    495             if (not is_slice\r\n--> 496                     and len(key) != len(value)\r\n    497                     and not com.is_bool_indexer(key)):\r\n    498                 msg = (\"shape mismatch: value array of length '{}' does not \"\r\n\r\nTypeError: object of type 'int' has no len()\r\n```\r\n\r\nThis is a gap in the base extension tests as well. I'll ad one. that should be a... what? ValueError for trying to set list-like into a single element?",
        "createdAt" : "2018-12-29T02:54:36Z",
        "updatedAt" : "2018-12-29T12:17:37Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "24e0e3cf-8966-47bb-83eb-baf8bed303ac",
        "parentId" : "693cc094-e3f6-44d6-8da1-be1232cea2bc",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "NumPy raises with `ValueError: setting an array element with a sequence.` which seems like a fine error message to me.",
        "createdAt" : "2018-12-29T02:55:05Z",
        "updatedAt" : "2018-12-29T12:17:37Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "e4542809-2970-4b85-97fc-f5286d205edf",
        "parentId" : "693cc094-e3f6-44d6-8da1-be1232cea2bc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yep seems good\r\nmaybe just let it fall thru this if will work?",
        "createdAt" : "2018-12-29T02:57:24Z",
        "updatedAt" : "2018-12-29T12:17:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c3588901-89c7-4c19-88cf-e455728fcb5c",
        "parentId" : "693cc094-e3f6-44d6-8da1-be1232cea2bc",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Seemed a tad easier to explicitly check for a scalar `key` here.\r\n\r\nActually, grr, this is kinda annoying but NumPy allows setting a sequence of length 1.\r\n\r\n```python\r\nIn [2]: x = np.array([1, 2])\r\n\r\nIn [3]: x[0] = x[[0]]\r\n```\r\n\r\nbut now I would raise on that.\r\n\r\n```python\r\nIn [10]: arr = pd.period_range('2000', periods=2)._data\r\n\r\nIn [11]: arr[0] = arr[[0]]\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-11-666653b9c59a> in <module>\r\n----> 1 arr[0] = arr[[0]]\r\n\r\n~/sandbox/pandas/pandas/core/arrays/datetimelike.py in __setitem__(self, key, value)\r\n    495\r\n    496             if lib.is_scalar(key):\r\n--> 497                 raise ValueError(\"setting an array element with a sequence.\")\r\n    498\r\n    499             if (not is_slice\r\n\r\nValueError: setting an array element with a sequence.\r\n```\r\n\r\nThoughts? I think this should raise, since a length-1 sequence is more like a sequence than a scalar.",
        "createdAt" : "2018-12-29T03:04:15Z",
        "updatedAt" : "2018-12-29T12:17:37Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "171c2505-1040-4fe2-8c32-25ce5a9ed573",
        "parentId" : "693cc094-e3f6-44d6-8da1-be1232cea2bc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah i think we raise on this\r\n\r\nthis is why setitem in Block is so complicated :)",
        "createdAt" : "2018-12-29T03:15:00Z",
        "updatedAt" : "2018-12-29T12:17:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1b7d1da98bbf4bb37a986b17c542e280bbdd677",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +498,502 @@\n            if (not is_slice\n                    and len(key) != len(value)\n                    and not com.is_bool_indexer(key)):\n                msg = (\"shape mismatch: value array of length '{}' does not \""
  },
  {
    "id" : "55b9ec2b-ba2e-42aa-b25c-234e268399ba",
    "prId" : 24477,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24477#pullrequestreview-188411713",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2319d925-c5e2-42e8-88ef-7275328c869b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "would be nice to move smoe of this logic a big higher up to EA base if possible and/or make some helper methods to avoid code duplication of EA's implementating setitem, but for another time.",
        "createdAt" : "2018-12-29T14:04:02Z",
        "updatedAt" : "2018-12-29T14:04:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1b7d1da98bbf4bb37a986b17c542e280bbdd677",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +521,525 @@            raise TypeError(msg.format(scalar=self._scalar_type.__name__,\n                                       typ=type(value).__name__))\n        self._data[key] = value\n        self._maybe_clear_freq()\n"
  },
  {
    "id" : "59bd5f79-f874-467e-a124-4f23d4405dd0",
    "prId" : 24484,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24484#pullrequestreview-188416364",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7edad80-c862-4aeb-b1f9-2b900e7bf4d8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this was just fixed?",
        "createdAt" : "2018-12-29T16:42:27Z",
        "updatedAt" : "2018-12-29T20:32:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "44eb3930-528a-447c-b1c1-83eb8c62b61a",
        "parentId" : "b7edad80-c862-4aeb-b1f9-2b900e7bf4d8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I thought so too, but no.  I expect it won't be too tough to fix nanops to apply the DTI fix to DTA, will do so in an upcoming pass after the 24024-specific parts are de-duplicated",
        "createdAt" : "2018-12-29T16:46:28Z",
        "updatedAt" : "2018-12-29T20:32:34Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf9960748aef4ccb984b7e988a8f093f4fd4c403",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +1427,1431 @@        Series.max : Return the maximum value in a Series.\n        \"\"\"\n        # TODO: skipna is broken with max.\n        # See https://github.com/pandas-dev/pandas/issues/24265\n        nv.validate_max(args, kwargs)"
  },
  {
    "id" : "0f954a64-ba08-427d-b641-33fee1ef0f53",
    "prId" : 24484,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24484#pullrequestreview-188423299",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b5c4a9e-e1e8-47ad-9876-20da27d1ce0a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are these meant in inherit docstrings? these should have Parameters if not",
        "createdAt" : "2018-12-29T21:57:11Z",
        "updatedAt" : "2018-12-29T21:57:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "df73521f-c751-4c62-86c7-9b8ae416f04e",
        "parentId" : "0b5c4a9e-e1e8-47ad-9876-20da27d1ce0a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "these are copied from the DatetimeIndexOps versions, with \"Index\" changes to \"Array\" and Index.min/Index.max added to the See Also sections.  These will be templated/shared before long hopefully",
        "createdAt" : "2018-12-29T22:05:41Z",
        "updatedAt" : "2018-12-29T22:05:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7eb6c4cb-249f-4463-90aa-52e273d77bfe",
        "parentId" : "0b5c4a9e-e1e8-47ad-9876-20da27d1ce0a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok can u make a follow up issue for this ",
        "createdAt" : "2018-12-29T22:07:50Z",
        "updatedAt" : "2018-12-29T22:07:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf9960748aef4ccb984b7e988a8f093f4fd4c403",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1398,1402 @@    def min(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the minimum value of the Array or minimum along\n        an axis.\n"
  },
  {
    "id" : "2dda280b-ba6a-4a73-9cb4-51255e3bea5d",
    "prId" : 24493,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24493#pullrequestreview-188447187",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b46f6c7-be16-4aab-9505-7c9d075d0fa2",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "IIRC cython doesn't play nicely with docstring templating; might be worth opening an issue over there to request it",
        "createdAt" : "2018-12-30T18:15:17Z",
        "updatedAt" : "2019-01-03T01:07:31Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fd9110f1857828c4da2e6cb003da7cc076a54cd",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +244,248 @@              closest existing time\n            - 'NaT' will return NaT where there are nonexistent times\n            - timedelta objects will shift nonexistent times by the timedelta\n            - 'raise' will raise an NonExistentTimeError if there are\n              nonexistent times"
  },
  {
    "id" : "60643f95-4810-4c9e-abc3-804dcc857ae7",
    "prId" : 24757,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24757#pullrequestreview-209892380",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2aecad3b-169c-41b9-a4aa-7b1e53f6b7be",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a versionadded",
        "createdAt" : "2019-03-03T02:56:12Z",
        "updatedAt" : "2019-06-03T18:18:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "111c345f211f6675bc76072b858c4a3880a21c88",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1449,1453 @@        skipna : bool, default True\n            Whether to ignore any NaT elements\n\n        Returns\n        -------"
  },
  {
    "id" : "1ad0b6c7-c1e5-4372-9853-a5bb684d56f7",
    "prId" : 24757,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24757#pullrequestreview-210126538",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee84c9e1-68b1-4a4c-80b2-74323d38e9c3",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add here that this is not implemented for PeriodArray?",
        "createdAt" : "2019-03-04T13:05:37Z",
        "updatedAt" : "2019-06-03T18:18:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "111c345f211f6675bc76072b858c4a3880a21c88",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1444,1448 @@\n        .. versionadded:: 0.25.0\n\n        Parameters\n        ----------"
  },
  {
    "id" : "7f4405ef-6d0f-4982-a651-6c36e6ca60f9",
    "prId" : 25789,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25789#pullrequestreview-216473470",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d79e54c8-14aa-48b5-a405-69a0e8fbbb65",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does Any not encompan NaTType here?",
        "createdAt" : "2019-03-19T21:58:41Z",
        "updatedAt" : "2019-03-19T23:03:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0f6084df-18b5-4fb6-a2bd-dad86b61e738",
        "parentId" : "d79e54c8-14aa-48b5-a405-69a0e8fbbb65",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Valid question. I mostly changed this to get it to pass since `Scalar` isn't a real thing as indicated by subsequent TODO. Think I should just remove Any altogether for the time being?",
        "createdAt" : "2019-03-19T22:00:46Z",
        "updatedAt" : "2019-03-19T23:03:31Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "cfa8ed14-1a97-4a53-a579-deaeca082a2b",
        "parentId" : "d79e54c8-14aa-48b5-a405-69a0e8fbbb65",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no it would fail for that. What we need is a type that is an allowed datetime value, e.g: string, datetime / Timestamp, NaT). These can of course be done later, but should start setting up a pandas.typing i think.",
        "createdAt" : "2019-03-19T23:18:39Z",
        "updatedAt" : "2019-03-19T23:18:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bffaecdc-c571-4303-95dc-bf5e9e2300bc",
        "parentId" : "d79e54c8-14aa-48b5-a405-69a0e8fbbb65",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, I'd rather have an import from pandas.typing and avoid imports that aren't \"really\" used (i.e. NaTType).",
        "createdAt" : "2019-03-19T23:48:17Z",
        "updatedAt" : "2019-03-19T23:48:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "739bcab3316918638afc19392204f37cf35bb477",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +463,467 @@            self,\n            key,    # type: Union[int, Sequence[int], Sequence[bool], slice]\n            value,  # type: Union[NaTType, Any, Sequence[Any]]\n    ):\n        # type: (...) -> None"
  },
  {
    "id" : "75933af7-59fc-4e4e-93e9-7e36c494ad83",
    "prId" : 26071,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26071#pullrequestreview-229298401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "842c43f2-25cd-4e03-b6b9-b8ee96af5237",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Per discussions with @jreback we'd like to avoid the use of `cast` almost entirely. Would be preferable if you could just assign to a new variable within this branch",
        "createdAt" : "2019-04-22T15:17:26Z",
        "updatedAt" : "2019-04-29T18:59:59Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "1fef3aa7-352c-43ee-bb3c-32fa3af8ec37",
        "parentId" : "842c43f2-25cd-4e03-b6b9-b8ee96af5237",
        "authorId" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "body" : "> almost entirely\r\n\r\nAre there instances in this PR where you'd like to keep `cast`? Otherwise, I'll work around it the handful of places it appears.",
        "createdAt" : "2019-04-22T16:05:06Z",
        "updatedAt" : "2019-04-29T18:59:59Z",
        "lastEditedBy" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "tags" : [
        ]
      },
      {
        "id" : "fbba0bc9-0e08-406c-8df7-61e0b2135936",
        "parentId" : "842c43f2-25cd-4e03-b6b9-b8ee96af5237",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "If you can work around where it appears might be the most readable",
        "createdAt" : "2019-04-22T16:34:31Z",
        "updatedAt" : "2019-04-29T18:59:59Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "821c0569-cefc-4d87-8b4e-6a942f77536c",
        "parentId" : "842c43f2-25cd-4e03-b6b9-b8ee96af5237",
        "authorId" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "body" : "In this case, are you imagining a solution like this?\r\n```py\r\nif not is_slice:\r\n    key_sequence = key\r\n    if (len(key_sequence) != len(value)\r\n            and not com.is_bool_indexer(key_sequence)):\r\n        msg = (\"shape mismatch: value array of length '{}' does \"\r\n                \"not match indexing result of length '{}'.\")\r\n        raise ValueError(msg.format(\r\n            len(key_sequence), len(value)))\r\n    if len(key_sequence) == 0:\r\n        return\r\n```\r\nThat's how I read your comment above.\r\n\r\nJust assigning a new variable leaves us with the same incompatible-type errors when calling `len()` that we started with. Using `key_sequence = key  # type: Sequence` gives us the error `Incompatible types in assignment (expression has type \"Union[int, Sequence[int], Sequence[bool], slice]\", variable has type \"Sequence[Any]\")`. The fundamental problem is that assigning to a new variable doesn't provide any new type information.\r\n\r\nI haven't been able to think of a way to do this without at least one `cast` or a handful of ignores. As currently written, the single `cast` with the reassignment to `key` is about as unobtrusive as it gets. I think this is exactly what `cast` is for.\r\n\r\nWhat's the reasoning for trying to avoid a construction like this?\r\n```py\r\nif not is_slice:\r\n    key = cast(Sequence, key)\r\n...\r\n```\r\nI'm sensitive to the idea that casting adds some cognitive overhead for authors and maintainers, but it's minimal in this case.",
        "createdAt" : "2019-04-22T16:34:35Z",
        "updatedAt" : "2019-04-29T18:59:59Z",
        "lastEditedBy" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "tags" : [
        ]
      },
      {
        "id" : "00c4369c-61b1-447a-b39d-0d14008ee78a",
        "parentId" : "842c43f2-25cd-4e03-b6b9-b8ee96af5237",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Would doing something like `key_sequence = key # type: Sequence[bool]` work in the above? It sounds like the new error is the result of implicitly casting from a more refined `Sequence[bool]` (or int) in the union to a generic `Sequence` ",
        "createdAt" : "2019-04-22T16:36:37Z",
        "updatedAt" : "2019-04-29T18:59:59Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "2f578e0c-c646-4fb6-b48d-45e0d4b0eafc",
        "parentId" : "842c43f2-25cd-4e03-b6b9-b8ee96af5237",
        "authorId" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "body" : "No, if the error message is put another away, the right side the equal sign is typed as `Union[int, Sequence[int], Sequence[bool], slice]` because that's what we told mypy `key` is in the `__setitem__` signature.\r\n\r\nIf we use something like `key_sequence = key # type: Sequence[bool]`, we're only telling mypy that `key_sequence` expects `Sequence[bool]`. We're not telling it anything about `key`, only `key_sequence`. That type comment doesn't narrow down `key`.\r\n\r\n`cast(Sequence, key)`, on the other hand, explicitly tells mypy \"key is a Sequence right here\".",
        "createdAt" : "2019-04-22T16:42:34Z",
        "updatedAt" : "2019-04-29T18:59:59Z",
        "lastEditedBy" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "tags" : [
        ]
      },
      {
        "id" : "90624116-ffa0-4c75-b3b9-d1d526529957",
        "parentId" : "842c43f2-25cd-4e03-b6b9-b8ee96af5237",
        "authorId" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "body" : "The underlying error message, `Argument 1 to \"len\" has incompatible type \"Union[int, Sequence[int], Sequence[bool], slice]\"; expected \"Sized\"`, is really complaining because we're calling `len` on a variable that might be `int` or `slice`, neither of which support `len`. It's not really important for that error message what's inside the Sequence, only that the variable is definitely of a type that can respond to `len`.",
        "createdAt" : "2019-04-22T16:45:54Z",
        "updatedAt" : "2019-04-29T18:59:59Z",
        "lastEditedBy" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "tags" : [
        ]
      },
      {
        "id" : "23414e39-8720-4a60-b496-ef63a355c62b",
        "parentId" : "842c43f2-25cd-4e03-b6b9-b8ee96af5237",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "@gwrome is your last comment in reference to the static analysis or actual possible code paths?",
        "createdAt" : "2019-04-22T22:48:19Z",
        "updatedAt" : "2019-04-29T18:59:59Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "be9150f5-ba1d-46a6-a36c-a9781ea545b4",
        "parentId" : "842c43f2-25cd-4e03-b6b9-b8ee96af5237",
        "authorId" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "body" : "Static analysis. At that point in the actual execution, `slice` and `int` have already been handled. Mypy just isn't sophisticated enough to realize that.",
        "createdAt" : "2019-04-22T23:51:42Z",
        "updatedAt" : "2019-04-29T18:59:59Z",
        "lastEditedBy" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f840e9da2ed3898dd78baace69b49e6db1048c6",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +481,485 @@\n            if not is_slice:\n                key = cast(Sequence, key)\n                if (len(key) != len(value)\n                        and not com.is_bool_indexer(key)):"
  },
  {
    "id" : "4bf23e06-17ee-4b2a-ab23-579460a578a5",
    "prId" : 27633,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27633#pullrequestreview-270469893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca06f3b9-4a00-4c53-b915-3c7565e12b7e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is not returning an EA?",
        "createdAt" : "2019-08-02T16:16:44Z",
        "updatedAt" : "2019-08-03T20:08:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "bea44cfc-9395-44c2-9ab4-f7b0e06b834d",
        "parentId" : "ca06f3b9-4a00-4c53-b915-3c7565e12b7e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "correct, the current implementation is only used to return an ndarray.",
        "createdAt" : "2019-08-02T16:44:12Z",
        "updatedAt" : "2019-08-03T20:08:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7defcd13-82dd-4d88-bcb4-e7dc87b73a76",
        "parentId" : "ca06f3b9-4a00-4c53-b915-3c7565e12b7e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But so that is \"violating\" the spec? (it should return a new EA (not self), but not an ndarray)",
        "createdAt" : "2019-08-02T17:28:56Z",
        "updatedAt" : "2019-08-03T20:08:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "8d0e86e6-c305-4ead-ac49-f09f5ede767e",
        "parentId" : "ca06f3b9-4a00-4c53-b915-3c7565e12b7e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yes, but its already in place and used extensively.  I guess we could alter the spec to allow returning ndarray",
        "createdAt" : "2019-08-02T20:45:27Z",
        "updatedAt" : "2019-08-03T20:08:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7b7903d9-1a86-4876-96f1-0ae70fc5890e",
        "parentId" : "ca06f3b9-4a00-4c53-b915-3c7565e12b7e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> I guess we could alter the spec to allow returning ndarray\r\n\r\nSorry to further bother on this PR, but I would not alter the spec. For the interface, it should just be a new EA of the same type, no? \r\n\r\nShouldn't we (ideally, at some point) change our own implementation to return an EA as well for consistency?",
        "createdAt" : "2019-08-03T19:07:07Z",
        "updatedAt" : "2019-08-03T20:08:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "c44aada5f9c45da39457b2059608852127e59e86",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +557,561 @@        if dtype is None or dtype is self.dtype:\n            return type(self)(self._data, dtype=self.dtype)\n        return self._data.view(dtype=dtype)\n\n    # ------------------------------------------------------------------"
  },
  {
    "id" : "28af1ee7-3816-430d-a521-04c2082ef076",
    "prId" : 27791,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27791#pullrequestreview-272018317",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99756868-29c2-4553-9415-4a8faeb070d0",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The `astype(object)` is not needed?",
        "createdAt" : "2019-08-07T05:41:15Z",
        "updatedAt" : "2019-08-07T06:15:15Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "fc303484-5a1c-4288-9ef2-00761ce9bf06",
        "parentId" : "99756868-29c2-4553-9415-4a8faeb070d0",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "otherwise it comes back with string-dtype",
        "createdAt" : "2019-08-07T14:39:02Z",
        "updatedAt" : "2019-08-07T14:39:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "fa048d39-dc18-4e72-99a9-6f1d362fd8fd",
        "parentId" : "99756868-29c2-4553-9415-4a8faeb070d0",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It already seems to give object dtype?\r\n\r\n```\r\nIn [9]: pd.date_range(\"2012\", periods=3).array._format_native_types()                                                                                         \r\nOut[9]: array(['2012-01-01', '2012-01-02', '2012-01-03'], dtype=object)\r\n```",
        "createdAt" : "2019-08-07T14:41:08Z",
        "updatedAt" : "2019-08-07T14:41:09Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "06c49383-9f4c-4524-89cd-3d8f2c0d3915",
        "parentId" : "99756868-29c2-4553-9415-4a8faeb070d0",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "If you pass a format to strftime it'll come back with str-dtype",
        "createdAt" : "2019-08-07T14:48:53Z",
        "updatedAt" : "2019-08-07T14:48:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c118ac382155d4ba351e53428b7510be13f263d4",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +181,185 @@              dtype='object')\n        \"\"\"\n        return self._format_native_types(date_format=date_format).astype(object)\n\n"
  },
  {
    "id" : "f47f4c6e-dfe2-4c65-b7cb-205a5fb57f44",
    "prId" : 27791,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27791#pullrequestreview-272572647",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4184f25a-e74a-49d8-aa8d-13bea32226f4",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "if `other` is a timedelta64 dtype, the `_from_sequence` is not needed (and rather confusing the reader IMO)",
        "createdAt" : "2019-08-07T05:42:46Z",
        "updatedAt" : "2019-08-07T06:15:15Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ddb74960-fda4-47f6-b678-947d0af8e030",
        "parentId" : "4184f25a-e74a-49d8-aa8d-13bea32226f4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "it is timedelta64, but not necessarily timedelta64[ns].",
        "createdAt" : "2019-08-07T14:19:37Z",
        "updatedAt" : "2019-08-07T14:19:38Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "fd575af0-47b1-444a-b727-82d40b1182b8",
        "parentId" : "4184f25a-e74a-49d8-aa8d-13bea32226f4",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jbrockmendel I think we should avoid using `_from_sequence` for that in our code base. Maybe `array(.., dtype='timedelta64[ns])` instead ?",
        "createdAt" : "2019-08-08T13:03:30Z",
        "updatedAt" : "2019-08-08T13:03:31Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "734c2075-ae15-427c-a81f-557abbccc378",
        "parentId" : "4184f25a-e74a-49d8-aa8d-13bea32226f4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "why do you want to avoid _from_sequence?",
        "createdAt" : "2019-08-08T13:32:37Z",
        "updatedAt" : "2019-08-08T13:32:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c118ac382155d4ba351e53428b7510be13f263d4",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1019,1023 @@            from pandas.core.arrays import TimedeltaArray\n\n            other = TimedeltaArray._from_sequence(other)\n\n        self_i8 = self.asi8"
  }
]