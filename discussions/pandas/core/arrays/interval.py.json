[
  {
    "id" : "7c543cff-baf4-4b58-9685-138a31163518",
    "prId" : 17753,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17753#pullrequestreview-256472980",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3526de88-4845-4951-8045-9bb5d0bf5110",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "I should be able to implement this in the next day or two if we want to get it in for 0.25.0; it should be relatively straight-forward and we have good testing infrastructure from `overlaps` that could be partially reused.",
        "createdAt" : "2019-07-01T17:37:26Z",
        "updatedAt" : "2019-07-01T17:39:33Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "30c77f0620344ed8bbc482ef8d19ee9030b48d9a",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +1057,1061 @@        if isinstance(other, Interval):\n            raise NotImplementedError(\n                'contains not implemented for two intervals'\n            )\n"
  },
  {
    "id" : "0d801170-9b5a-4eb2-bff1-918f473228d4",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-110362746",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45f1fb43-bf91-4028-ba84-1b4e365abe92",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is SO duplicating II\r\nhave to do something about this - this is a technical debt nightmare \r\n",
        "createdAt" : "2018-04-04T17:05:35Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a7febf35-2750-4463-9cfa-5ed3bfb0378b",
        "parentId" : "45f1fb43-bf91-4028-ba84-1b4e365abe92",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Did you see IntervalIndex._simple_new? There isn't any duplicated code between the two.",
        "createdAt" : "2018-04-04T17:14:42Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "1c8e4c13-ccd6-4d74-bac9-8e6b8d34b1bd",
        "parentId" : "45f1fb43-bf91-4028-ba84-1b4e365abe92",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so EA takes a different take on construction that in Index. Where we use _simple_new and _shalllow_copy, but conceptually these are the same things. Would be ok with changing the spellings inside Index to conform this. This is my main objection generally. We spell things one way and a different way in EA, this is so confusing.",
        "createdAt" : "2018-04-05T16:01:08Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e39baec6-4c31-4fd7-aac1-0a3be4a8e5a5",
        "parentId" : "45f1fb43-bf91-4028-ba84-1b4e365abe92",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback Can you elaborate on this comment (as you say this is your main objection, but I don't fully understand it).\r\n\r\nSo `IntervalArray._simple_new` construct from left/right, while `IntervalIndex._simple_new` now constructs from values (IntervalArray), while previously it constructed from left/right. So yes, this is different between array and index, but, for IntervalIndex it is now more consistent with the base Index._simple_new (which constructs from values), so I think that is a good thing. ",
        "createdAt" : "2018-04-09T08:29:17Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +146,150 @@\n        closed = closed or 'right'\n        left = _ensure_index(left, copy=copy)\n        right = _ensure_index(right, copy=copy)\n"
  },
  {
    "id" : "c28dfb95-3f6f-4254-93c4-9d9809153669",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-110646900",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f77d61a-3aeb-475f-99d0-d2c4a65f9b9f",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Should this support the case where `value` is `np.nan`?  Doesn't look like that currently works.",
        "createdAt" : "2018-04-05T00:35:33Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "f89d5707-f9a6-4660-8a53-40f47f9aa25e",
        "parentId" : "5f77d61a-3aeb-475f-99d0-d2c4a65f9b9f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yes, it currently fails. I'll see what can be done.",
        "createdAt" : "2018-04-06T15:10:39Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "60487b58-e468-4734-bdeb-3d1d63a61f71",
        "parentId" : "5f77d61a-3aeb-475f-99d0-d2c4a65f9b9f",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Looks like there's also something strange going on with datetime data:\r\n```python-traceback\r\nIn [2]: ia = pd.interval_range(pd.Timestamp('20180101'), periods=3).values\r\n\r\nIn [3]: ia\r\nOut[3]:\r\nIntervalArray([(2018-01-01, 2018-01-02], (2018-01-02, 2018-01-03], (2018-01-03, 2018-01-04]],\r\n              closed='right',\r\n              dtype='interval[datetime64[ns]]')\r\n\r\nIn [4]: new_iv = pd.Interval(pd.Timestamp('20180101'), pd.Timestamp('20180105'))\r\n\r\nIn [5]: new_iv\r\nOut[5]: Interval('2018-01-01', '2018-01-05', closed='right')\r\n\r\nIn [6]: ia[0] = new_iv\r\n\r\nIn [7]: ia\r\nOut[7]: ---------------------------------------------------------------------------\r\nValueError: left side of interval must be <= right side\r\n\r\nIn [8]: ia.left\r\nOut[8]: DatetimeIndex(['2018-01-01', '2018-01-05', '2018-01-03'], dtype='datetime64[ns]', freq='D')\r\n\r\nIn [9]: ia.right\r\nOut[9]: DatetimeIndex(['2018-01-05', '2018-01-03', '2018-01-04'], dtype='datetime64[ns]', freq='D')\r\n```",
        "createdAt" : "2018-04-09T23:07:47Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 455,
    "diffHunk" : "@@ -1,1 +453,457 @@        return self._shallow_copy(left, right)\n\n    def __setitem__(self, key, value):\n        # na value: need special casing to set directly on numpy arrays\n        needs_float_conversion = False"
  },
  {
    "id" : "1818de21-a601-4c59-9076-79327c3e4593",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-109767466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7cbe9b8-c82b-4788-b0b0-c4eeb5517619",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so there is lots of copying of other code because you can't share the Index base things for this. You need prob push some of this code (e.g. formatting) to something like IndexOpsMixin (or the like). and use that here.",
        "createdAt" : "2018-04-05T16:06:55Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 821,
    "diffHunk" : "@@ -1,1 +819,823 @@                tail = [formatter(x) for x in self]\n                summary = '[{tail}]'.format(tail=', '.join(tail))\n\n        return summary\n"
  },
  {
    "id" : "897784f1-76ff-463c-beea-e67de36f625b",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-135823068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1954760c-e890-47b1-b990-3fc17252732b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "did we default this before here? (e.g. this should be filled in I think by now). maybe assert that it is not None here (and push the default higher up). IOW don't want to have in too many places.",
        "createdAt" : "2018-04-14T14:02:31Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "61ade145-aa79-42b3-b4da-86fd4c7cb75d",
        "parentId" : "1954760c-e890-47b1-b990-3fc17252732b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I believe closed should always be not-None here by-definition? ",
        "createdAt" : "2018-07-10T10:13:35Z",
        "updatedAt" : "2018-07-13T01:00:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3d123c51-ba5c-432e-ad32-ea394a936855",
        "parentId" : "1954760c-e890-47b1-b990-3fc17252732b",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "There are a couple corner cases: empty data and purely NA data.  In both cases, the inferred `closed` will be `None`, so if `closed` is also not passed to the constructor it will be `None` here.",
        "createdAt" : "2018-07-10T13:29:49Z",
        "updatedAt" : "2018-07-13T01:00:54Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +145,149 @@        result = IntervalMixin.__new__(cls)\n\n        closed = closed or 'right'\n        left = _ensure_index(left, copy=copy)\n        right = _ensure_index(right, copy=copy)"
  },
  {
    "id" : "5bf2a47a-0e39-4360-92d9-d944b16d763b",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-112208496",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f20a147-9ed0-4912-95e1-44185c41ac13",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yep",
        "createdAt" : "2018-04-14T14:07:36Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 793,
    "diffHunk" : "@@ -1,1 +791,795 @@\n        # TODO: integrate with categorical and make generic\n        # name argument is unused here; just for compat with base / categorical\n        n = len(self)\n        max_seq_items = min((get_option("
  },
  {
    "id" : "f2fe621f-b1fe-4186-b448-a3a7235d4abe",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-112208496",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f865215b-5be6-4ea4-a92b-1abbbd9687be",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "move these 2 up near nbytes",
        "createdAt" : "2018-04-14T14:08:00Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 924,
    "diffHunk" : "@@ -1,1 +922,926 @@            return self.left + 0.5 * self.length\n\n    @property\n    def is_non_overlapping_monotonic(self):\n        \"\"\""
  },
  {
    "id" : "359e4331-d1a8-49a3-9025-e9efc7e335da",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-135245141",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4fe04a3-c745-402a-a80a-e167e816a76a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can do in a followup (though prob easy here) to use\r\n``format_object_summary`` from ``pandas.core.formats.printing`` as this is vastly simplified",
        "createdAt" : "2018-07-08T20:57:37Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c93440b1-794c-47da-94c4-d8208e089262",
        "parentId" : "f4fe04a3-c745-402a-a80a-e167e816a76a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "its used generally for all Indexes now",
        "createdAt" : "2018-07-08T20:57:46Z",
        "updatedAt" : "2018-07-13T01:00:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 791,
    "diffHunk" : "@@ -1,1 +789,793 @@\n    def _format_data(self):\n\n        # TODO: integrate with categorical and make generic\n        # name argument is unused here; just for compat with base / categorical"
  },
  {
    "id" : "2710ca91-e8e4-4650-bee8-d6f5a173c30d",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-135672087",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54cbf2f2-fdef-4b8f-a8f4-b9ab8c49c53b",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Should we make `IntervalArray.closed` a setter as well?",
        "createdAt" : "2018-07-10T02:55:32Z",
        "updatedAt" : "2018-07-13T01:00:54Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "67ed2f01-f664-4cd2-a5ef-33e68ecc99d9",
        "parentId" : "54cbf2f2-fdef-4b8f-a8f4-b9ab8c49c53b",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "I don't think this would be a problem with the current implementation, but #19371 makes me a bit hesitant since it'd make a `closed` setter a (limited) `dtype` setter.",
        "createdAt" : "2018-07-10T04:40:14Z",
        "updatedAt" : "2018-07-13T01:00:54Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 892,
    "diffHunk" : "@@ -1,1 +890,894 @@\n    @Appender(_interval_shared_docs['set_closed'] % _shared_docs_kwargs)\n    def set_closed(self, closed):\n        if closed not in _VALID_CLOSED:\n            msg = \"invalid option for 'closed': {closed}\""
  },
  {
    "id" : "ce1edaa3-ca64-4067-8d2a-e4bdbd8de593",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-135830707",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b917a039-9f7a-451d-8a0c-f826b62e624f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not sure I am clear why this is problematic. is there a failure possible when updating the 2nd one?",
        "createdAt" : "2018-07-10T10:16:44Z",
        "updatedAt" : "2018-07-13T01:00:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8a54524c-4be1-44c4-b540-5a195c89d680",
        "parentId" : "b917a039-9f7a-451d-8a0c-f826b62e624f",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Without the forcing the copy I'm seeing `test_setitem_sequence` fail:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/1dd05ccf56b163dc51786e4f5ce76b279cc0dec3/pandas/tests/extension/base/setitem.py#L17-L23",
        "createdAt" : "2018-07-10T13:46:37Z",
        "updatedAt" : "2018-07-13T01:00:54Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 486,
    "diffHunk" : "@@ -1,1 +484,488 @@\n        # Need to ensure that left and right are updated atomically, so we're\n        # forced to copy, update the copy, and swap in the new values.\n        left = self.left.copy(deep=True)\n        if needs_float_conversion:"
  },
  {
    "id" : "10ded839-e757-4b04-9913-ffb78c4002c8",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-140211239",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "228d21b0-71dc-4f02-8f2f-ad2c67c956c3",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jschendel a bit after the fact, but I don't think that we should add this to `IntervalArray`. We deprecated `itemsize` some time ago for Series/Index (https://github.com/pandas-dev/pandas/pull/20721). \r\nJust noticed this because we get the warning during the test:\r\n\r\n```\r\npandas/tests/indexes/interval/test_interval.py::TestIntervalIndex::()::test_itemsize\r\n  /home/travis/build/pandas-dev/pandas/pandas/core/arrays/interval.py:694: FutureWarning: Int64Index.itemsize is deprecated and will be removed in a future version\r\n    return self.left.itemsize + self.right.itemsize\r\n```",
        "createdAt" : "2018-07-24T08:54:33Z",
        "updatedAt" : "2018-07-24T08:54:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d7643510-16ba-41e4-96de-f0b44e463a41",
        "parentId" : "228d21b0-71dc-4f02-8f2f-ad2c67c956c3",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "This was originally part of `IntervalIndex` and is currently what `IntervalIndex` calls under the hood, so if we remove it from `IntervalArray` we'd need to add it back `IntervalIndex`.  Can certainly do that, unless there's some objection based on it making the two inconsistent.  Removing it from `IntervalArray` seems like the best course of action though.",
        "createdAt" : "2018-07-24T23:59:32Z",
        "updatedAt" : "2018-07-24T23:59:32Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "055a16ca-176c-4ef6-9d86-0bdf005781e5",
        "parentId" : "228d21b0-71dc-4f02-8f2f-ad2c67c956c3",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, removing it from `IntervalArray` is the best way forward I think. \r\nAlso, on `IntervalIndex` it should be deprecated (now it is deprecated on the base IndexOpsMixin class, but by overriding it in IntervalIndex, it lost that deprecation. But apparently IntervalIndex is the only index that is not tested in the base tests, so this 'regression' was not catched by the tests).",
        "createdAt" : "2018-07-25T08:31:37Z",
        "updatedAt" : "2018-07-25T08:31:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "cd73a192-1be4-4df2-bf78-34b4a5b18334",
        "parentId" : "228d21b0-71dc-4f02-8f2f-ad2c67c956c3",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Opened https://github.com/pandas-dev/pandas/issues/22049 so we don't loose track of this discussion",
        "createdAt" : "2018-07-25T08:33:58Z",
        "updatedAt" : "2018-07-25T08:33:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 694,
    "diffHunk" : "@@ -1,1 +692,696 @@    @property\n    def itemsize(self):\n        return self.left.itemsize + self.right.itemsize\n\n    def take(self, indices, allow_fill=False, fill_value=None, axis=None,"
  },
  {
    "id" : "c7855c50-fe9e-40d2-a46a-4826712807ff",
    "prId" : 22939,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22939#pullrequestreview-162265217",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17922129-a783-460f-acc7-81a08f7dfacd",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add some examples to the docstring",
        "createdAt" : "2018-10-04T06:59:13Z",
        "updatedAt" : "2018-10-18T05:37:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0d0dc560-0898-47dc-80f6-27c124a4f21d",
        "parentId" : "17922129-a783-460f-acc7-81a08f7dfacd",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "done",
        "createdAt" : "2018-10-06T18:03:29Z",
        "updatedAt" : "2018-10-18T05:37:18Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a765e93af569b9256835631fbbeb73f2b2bd77e2",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +1063,1067 @@        --------\n        Interval.overlaps : Check whether two Interval objects overlap.\n    \"\"\"\n\n    @Appender(_interval_shared_docs['overlaps'] % _shared_docs_kwargs)"
  },
  {
    "id" : "5f1f47d5-95c3-4746-83e4-7a847b9e8122",
    "prId" : 22939,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22939#pullrequestreview-168185605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2af7bfc-0eb0-412d-94df-7419cc6b3bfa",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Do we intend to eventually support `IntervalArray.overlaps(IntervalArray)`, where the arrays are the same shape?",
        "createdAt" : "2018-10-24T11:21:26Z",
        "updatedAt" : "2018-10-24T11:21:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "bc46ff7d-a624-4cb4-b95e-445b05ae2fb2",
        "parentId" : "c2af7bfc-0eb0-412d-94df-7419cc6b3bfa",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "There was discussion about this in #18975 but no consensus on the behavior.  I'd be open to implementing it if there is demand. I could see adding a `how` parameter that accepts `{'any', 'all', 'pairwise'}`  to determine the behavior (e.g. for `'any'`/`'all'` the boolean indicates if the given interval overlaps any/all of the intervals in the supplied array, and `'pairwise'` requiring the lengths to be the same and indicating if the nth element overlaps the nth element of the supplied array.\r\n\r\nI don't have a use case for `IntervalArray.overlaps(IntervalArray)` though, so not entirely sure what portions of the above are practically useful, if any, or if some other behavior would be more commonly used.  The `'pairwise'` option would be straightforward to implement, with the other two maybe requiring some care to implement in a performant manner.",
        "createdAt" : "2018-10-25T02:06:51Z",
        "updatedAt" : "2018-10-25T02:06:52Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a765e93af569b9256835631fbbeb73f2b2bd77e2",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +1068,1072 @@    def overlaps(self, other):\n        if isinstance(other, (IntervalArray, ABCIntervalIndex)):\n            raise NotImplementedError\n        elif not isinstance(other, Interval):\n            msg = '`other` must be Interval-like, got {other}'"
  },
  {
    "id" : "e987179c-d8bb-4f72-8af1-ba2c8b0e35e9",
    "prId" : 23157,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23157#pullrequestreview-167831573",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "540e1a56-e461-4bc0-99da-2f9ba71cb47c",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think we should keep this out of the docs until we know if or how to expose this publicly (which will in any case not be `pd.core.arrays.IntervalArray`)",
        "createdAt" : "2018-10-15T09:26:57Z",
        "updatedAt" : "2018-10-18T03:48:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "30f26f4c-0187-4016-bc54-c45019e2483c",
        "parentId" : "540e1a56-e461-4bc0-99da-2f9ba71cb47c",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "`ci/code_checks.sh` won't check the `IntervalArray` docstring if the Examples section is missing.  I've added a TODO note to myself to modify the example once `IntervalArray` has been made public; can open an issue for it as well if need be.\r\n\r\nThe issue for making extension arrays public has a milestone of 0.24.0, so I should be able to address this prior to release, and it should just be a matter of pasting the updated call. Can remove the example though, if you'd still prefer that approach.",
        "createdAt" : "2018-10-16T06:00:42Z",
        "updatedAt" : "2018-10-18T03:48:50Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "5086286b-3cc7-4650-9560-9b4a80c64544",
        "parentId" : "540e1a56-e461-4bc0-99da-2f9ba71cb47c",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "ping @jorisvandenbossche : thoughts on the above?",
        "createdAt" : "2018-10-24T01:58:14Z",
        "updatedAt" : "2018-10-24T01:58:14Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "2b6d4de9-9512-485a-9d52-1261c1abc9c5",
        "parentId" : "540e1a56-e461-4bc0-99da-2f9ba71cb47c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK, let's decide about it / clean-up later",
        "createdAt" : "2018-10-24T10:16:08Z",
        "updatedAt" : "2018-10-24T10:16:08Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "af757a0d13ed48bca644047d176d46620672c612",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +111,115 @@    ``Interval`` objects:\n\n    >>> pd.core.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)])\n    IntervalArray([(0, 1], (1, 5]],\n                  closed='right',"
  },
  {
    "id" : "6c38d9be-660e-41a7-89bf-672863de967f",
    "prId" : 24395,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24395#pullrequestreview-187581306",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd2f50bd-3002-4a06-a6d5-13a18837e54d",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "The base class implementation works for `IntervalArray` as well, but a couple off-the-cuff timings had this implementation 1.5x - 2x faster.",
        "createdAt" : "2018-12-22T05:38:34Z",
        "updatedAt" : "2018-12-23T21:02:25Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "88ab2853eb56bcb8c595680cc33449534a84f5f6",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +1003,1007 @@\n    @Appender(_extension_array_shared_docs['repeat'] % _shared_docs_kwargs)\n    def repeat(self, repeats, *args, **kwargs):\n        nv.validate_repeat(args, kwargs)\n        left_repeat = self.left.repeat(repeats)"
  },
  {
    "id" : "bf4d4dcb-8683-4cdf-84a8-2f69aef4126b",
    "prId" : 28371,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28371#pullrequestreview-338546122",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69bf5be8-abff-4da5-ae59-7fab69fa5ee0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ideally would share this code as much as possible in a base mixin , might require spitting  some function / methods",
        "createdAt" : "2020-01-01T14:37:50Z",
        "updatedAt" : "2020-01-08T13:25:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bfc191e0-9269-47c3-acb0-c7952ec35b63",
        "parentId" : "69bf5be8-abff-4da5-ae59-7fab69fa5ee0",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok as a follow up but if possible now pls do it",
        "createdAt" : "2020-01-01T14:38:05Z",
        "updatedAt" : "2020-01-08T13:25:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6ec8dd39-978d-4e3e-a719-8f2594afcc9e",
        "parentId" : "69bf5be8-abff-4da5-ae59-7fab69fa5ee0",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This whole function here is rather interval specific (eg the fact that the storage array is a StructArray, the fact that we need the handle the mask in a special way, the conversion of the subtype, .. are all specific to intervals)",
        "createdAt" : "2020-01-06T09:39:29Z",
        "updatedAt" : "2020-01-08T13:25:48Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3037494cf87272011d8ba78d8220029d1a29ad8",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1103,1107 @@            ],\n            names=[\"left\", \"right\"],\n        )\n        mask = self.isna()\n        if mask.any():"
  },
  {
    "id" : "55a6a386-2eed-4a09-90c3-1a4a2eeec0af",
    "prId" : 30588,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30588#pullrequestreview-340726979",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8170e50d-0d49-4d95-bb06-718db256f36f",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can you clarify what this case is? Does this raise a warning?",
        "createdAt" : "2020-01-09T16:46:21Z",
        "updatedAt" : "2020-01-09T18:52:13Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "04406f1c-f9fd-484a-af5a-dba4658952e7",
        "parentId" : "8170e50d-0d49-4d95-bb06-718db256f36f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'll add a comment.\r\n\r\nIt will issue a warning a few lines earlier when we do `left = self.left[value]`.\r\n\r\nLooking at this more closely, we might want to zip the columns rather than stack them",
        "createdAt" : "2020-01-09T17:09:43Z",
        "updatedAt" : "2020-01-09T18:52:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "4da4b14b-2e36-4840-98a2-4d2b7895d742",
        "parentId" : "8170e50d-0d49-4d95-bb06-718db256f36f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "And what's being returned here? An ndarray of intervals?",
        "createdAt" : "2020-01-09T17:13:23Z",
        "updatedAt" : "2020-01-09T18:52:13Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "fb4b6b54-0385-4f1b-8833-746631b18f9e",
        "parentId" : "8170e50d-0d49-4d95-bb06-718db256f36f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@jschendel thoughts on what should be returned here?",
        "createdAt" : "2020-01-09T17:23:36Z",
        "updatedAt" : "2020-01-09T18:52:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b304ed7a-a306-4cdb-a8df-dfb729b72162",
        "parentId" : "8170e50d-0d49-4d95-bb06-718db256f36f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "it looks like we can just disallow this entirely",
        "createdAt" : "2020-01-09T18:17:11Z",
        "updatedAt" : "2020-01-09T18:52:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "878f75da-dbee-4c73-ba5a-c0478d53686f",
        "parentId" : "8170e50d-0d49-4d95-bb06-718db256f36f",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Yeah, I'd say disallow it entirely.",
        "createdAt" : "2020-01-09T18:31:19Z",
        "updatedAt" : "2020-01-09T18:52:13Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "74dffbedacb34bde7e5a8fb2396e0fef9efac499",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +503,507 @@            if is_scalar(left) and isna(left):\n                return self._fill_value\n            if np.ndim(left) > 1:\n                # GH#30588 multi-dimensional indexer disallowed\n                raise ValueError(\"multi-dimensional indexing not allowed\")"
  },
  {
    "id" : "96180f8c-1e45-415e-b33b-5e1360fec59a",
    "prId" : 30588,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30588#pullrequestreview-340749466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "177c0094-5c64-4151-95e7-ee2cba900a58",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "My intention with this block of code was to only handle scalars here.  Since `self.left` and `self.right` are always indexes, and we're using `__getitem__` on them to get `left`/`right`, my assumption at the time was that `left`/`right` would either always be a scalar or an `Index` (1d), so `not isinstance(left, ABCIndexClass)` would imply scalar (I guess could use `is_scalar` instead of the `isinstance`).\r\n\r\nWith this PR it looks like `Index.__getitem__`  can return a scalar, `Index`, or `ndarray` with `ndim `> 1?  With the last case being temporary until we remove this behavior?  Or am I omitting a case where something else could be returned?  If these are the only three cases, could we handle the `ndim` > 1 case separately before this `if` block?\r\n\r\nSomething like:\r\n```python\r\nleft = self.left[value]\r\nright = self.right[value]\r\n\r\n# TODO: remove this block when Index.__getitem__ returning ndim > 1 is deprecated\r\nif np.ndim(left) > 1:\r\n    # GH#30588 multi-dimensional indexer disallowed\r\n    raise ValueError(...)\r\n\r\n# scalar\r\nif not isinstance(left, ABCIndexClass):\r\n    ....\r\n```\r\n\r\nMakes the logic less nested and easier to remove when we go through with the deprecation.",
        "createdAt" : "2020-01-09T18:43:40Z",
        "updatedAt" : "2020-01-09T18:52:13Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "4ab5bd33-8625-43c1-a5c0-5f66595f72fb",
        "parentId" : "177c0094-5c64-4151-95e7-ee2cba900a58",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Updated so that this raises ValueError for >1dim indexing on IntervalArray",
        "createdAt" : "2020-01-09T19:07:15Z",
        "updatedAt" : "2020-01-09T19:07:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "74dffbedacb34bde7e5a8fb2396e0fef9efac499",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +501,505 @@        # scalar\n        if not isinstance(left, ABCIndexClass):\n            if is_scalar(left) and isna(left):\n                return self._fill_value\n            if np.ndim(left) > 1:"
  },
  {
    "id" : "2b6e5a75-6eaa-4022-998e-68e6904dcbb5",
    "prId" : 30640,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30640#pullrequestreview-338364068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "837bee79-f284-445f-a026-d081f8cd781f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this particular check can be pushed to the base class",
        "createdAt" : "2020-01-03T12:06:51Z",
        "updatedAt" : "2020-01-03T12:08:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ed1200ae-2459-48a1-bef8-7ec8ed164534",
        "parentId" : "837bee79-f284-445f-a026-d081f8cd781f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I don't quite follow. Whose the base class here? ExtensionArray?",
        "createdAt" : "2020-01-03T13:23:23Z",
        "updatedAt" : "2020-01-03T13:28:51Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "755d3302-558e-4843-9353-59d54a0bf644",
        "parentId" : "837bee79-f284-445f-a026-d081f8cd781f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes",
        "createdAt" : "2020-01-04T18:20:02Z",
        "updatedAt" : "2020-01-04T18:20:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8237ab072143e49102e829952fc601ab9a46afc",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +553,557 @@    def __eq__(self, other):\n        # ensure pandas array for list-like and eliminate non-interval scalars\n        if is_list_like(other):\n            if len(self) != len(other):\n                raise ValueError(\"Lengths must match to compare\")"
  },
  {
    "id" : "405f65e3-f1dd-4a97-b77b-48e4d91f0bfb",
    "prId" : 30640,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30640#pullrequestreview-338052825",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44f7ff18-5057-46a8-a05e-15cc3a849a66",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "at this point can’t u just wrap other in array()?",
        "createdAt" : "2020-01-03T12:07:55Z",
        "updatedAt" : "2020-01-03T12:08:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8237ab072143e49102e829952fc601ab9a46afc",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +562,566 @@\n        # determine the dtype of the elements we want to compare\n        if isinstance(other, Interval):\n            other_dtype = \"interval\"\n        elif not is_categorical_dtype(other):"
  },
  {
    "id" : "2e7f6a47-0753-48b6-a9af-e68860c52c68",
    "prId" : 30640,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30640#pullrequestreview-338376217",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72761db9-231c-4e82-951a-a89d7a683694",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can this check be just `self[i] == obj`?",
        "createdAt" : "2020-01-05T00:48:43Z",
        "updatedAt" : "2020-01-05T00:48:43Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "cc97962d-c3e4-4bc3-b306-1949fe58a66a",
        "parentId" : "72761db9-231c-4e82-951a-a89d7a683694",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "It could but there'd be a perf hit for actually materializing the `Interval` object.",
        "createdAt" : "2020-01-05T01:01:57Z",
        "updatedAt" : "2020-01-05T01:01:57Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8237ab072143e49102e829952fc601ab9a46afc",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +594,598 @@                and self.closed == obj.closed\n                and self.left[i] == obj.left\n                and self.right[i] == obj.right\n            ):\n                result[i] = True"
  },
  {
    "id" : "1e782442-6192-44c9-a36d-b15194705a16",
    "prId" : 32782,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32782#pullrequestreview-384327958",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc776f8b-1ac3-4190-ba44-e149a7362dfc",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Since we're raising here we can remove the future references that are no longer being used:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/23b6b935c6ad7f2f24adeb8379d8524c1404dc1f/pandas/core/arrays/interval.py#L554-L555\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/23b6b935c6ad7f2f24adeb8379d8524c1404dc1f/pandas/core/arrays/interval.py#L560-L561",
        "createdAt" : "2020-03-31T01:01:20Z",
        "updatedAt" : "2020-04-06T22:51:40Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "959f6747169a92f4912256377248a9bd8a05c9b7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +543,547 @@                raise TypeError(msg) from err\n\n        if needs_float_conversion:\n            raise ValueError(\"Cannot set float NaN to integer-backed IntervalArray\")\n"
  },
  {
    "id" : "41805f35-1f84-4fca-9fa6-dc2a136b3ed2",
    "prId" : 36310,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36310#pullrequestreview-491842710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6311f1f7-c8f9-4837-984f-5d858c38e3b3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you order  these left then right. also the ordering of the function calls for left is differnt?",
        "createdAt" : "2020-09-19T00:49:40Z",
        "updatedAt" : "2020-10-01T16:39:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "865b3fcc540e96e269509c9ffdc9d7a9fe7e7cce",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +250,254 @@        left = maybe_upcast_datetimelike_array(left)\n        left = extract_array(left, extract_numpy=True)\n        right = maybe_upcast_datetimelike_array(right)\n        right = extract_array(right, extract_numpy=True)\n"
  },
  {
    "id" : "3467b8f8-525a-4cce-b613-401ff6e1ae74",
    "prId" : 36310,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36310#pullrequestreview-491842710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56306336-b8cb-4ed1-a5f1-315d8b03ed54",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment on what you are doing here",
        "createdAt" : "2020-09-19T00:50:12Z",
        "updatedAt" : "2020-10-01T16:39:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "865b3fcc540e96e269509c9ffdc9d7a9fe7e7cce",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +246,250 @@\n        # For dt64/td64 we want DatetimeArray/TimedeltaArray instead of ndarray\n        from pandas.core.ops.array_ops import maybe_upcast_datetimelike_array\n\n        left = maybe_upcast_datetimelike_array(left)"
  },
  {
    "id" : "1b5e3305-1138-4428-9654-7414c14f136a",
    "prId" : 36310,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36310#pullrequestreview-499835680",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a412e28-4a4d-4fbb-881e-a29f4e4e0f28",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is `other` here known to be a particular type (like `IntervalArray`), or is it something like `Union[IntervalArray, Series, Index,Interval]`. If it's just IntervalArray it'd be a bit faster to compare with `other._left` and `right._left`.",
        "createdAt" : "2020-09-30T19:53:03Z",
        "updatedAt" : "2020-10-01T16:39:53Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "dbb33d07-7a06-4083-a06d-f5cc6c84d27b",
        "parentId" : "5a412e28-4a4d-4fbb-881e-a29f4e4e0f28",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "at this point `other` can be an Interval or IntervalArray",
        "createdAt" : "2020-09-30T21:46:23Z",
        "updatedAt" : "2020-10-01T16:39:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "865b3fcc540e96e269509c9ffdc9d7a9fe7e7cce",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +596,600 @@            if self.closed != other.closed:\n                return np.zeros(len(self), dtype=bool)\n            return (self._left == other.left) & (self._right == other.right)\n\n        # non-interval/non-object dtype -> no matches"
  },
  {
    "id" : "8b53a9e0-f1e7-4897-8962-8274d6ff447e",
    "prId" : 36310,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36310#pullrequestreview-501527333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3cf9f26c-11a9-4919-83e5-8d5040fd5bd8",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Above we are first ensuring that the arrays passed to `_simple_new` are an index, and then we extract the array again. Is this roundtrip to index and back needed?",
        "createdAt" : "2020-10-01T07:30:34Z",
        "updatedAt" : "2020-10-01T16:39:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7a7da851-194f-4a43-8881-af8425104974",
        "parentId" : "3cf9f26c-11a9-4919-83e5-8d5040fd5bd8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think we can avoid the roundtrip eventually, will be best accomplished by being stricter in what we pass to _simple_new",
        "createdAt" : "2020-10-01T16:38:24Z",
        "updatedAt" : "2020-10-01T16:39:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5439eb20-77b3-4ace-a893-2a8720985590",
        "parentId" : "3cf9f26c-11a9-4919-83e5-8d5040fd5bd8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Sounds good, would be a nice follow-up",
        "createdAt" : "2020-10-03T07:21:22Z",
        "updatedAt" : "2020-10-03T07:21:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "865b3fcc540e96e269509c9ffdc9d7a9fe7e7cce",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +249,253 @@\n        left = maybe_upcast_datetimelike_array(left)\n        left = extract_array(left, extract_numpy=True)\n        right = maybe_upcast_datetimelike_array(right)\n        right = extract_array(right, extract_numpy=True)"
  },
  {
    "id" : "e6d5daee-b4f4-4add-9d69-d35d74683cd0",
    "prId" : 36310,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36310#pullrequestreview-501495146",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4c80364-2caf-4157-a910-8e1548b20383",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could add copy=False to .astype (not sure how much any of this matters though)",
        "createdAt" : "2020-10-02T21:57:55Z",
        "updatedAt" : "2020-10-02T21:59:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c72777ec-00ff-40e4-8ab6-31109720008d",
        "parentId" : "b4c80364-2caf-4157-a910-8e1548b20383",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "merge is ok now and can see if this matters on followup",
        "createdAt" : "2020-10-02T23:33:47Z",
        "updatedAt" : "2020-10-02T23:33:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "865b3fcc540e96e269509c9ffdc9d7a9fe7e7cce",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +687,691 @@                # We need to use Index rules for astype to prevent casting\n                #  np.nan entries to int subtypes\n                new_left = Index(self._left, copy=False).astype(dtype.subtype)\n                new_right = Index(self._right, copy=False).astype(dtype.subtype)\n            except TypeError as err:"
  },
  {
    "id" : "718e18b8-75ce-41b3-b022-8b7011f9b349",
    "prId" : 36310,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36310#pullrequestreview-501488990",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d8fc091-97ec-420b-bcc2-4b652166267d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why do you need to wrap? doesn't this *always* have the same _na_value as the Array?",
        "createdAt" : "2020-10-02T21:58:31Z",
        "updatedAt" : "2020-10-02T21:59:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c088b447-2934-4510-a811-8cb98c318afd",
        "parentId" : "4d8fc091-97ec-420b-bcc2-4b652166267d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "self._left can be an ndarray, which doesnt have _na_value",
        "createdAt" : "2020-10-02T23:05:52Z",
        "updatedAt" : "2020-10-02T23:05:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "865b3fcc540e96e269509c9ffdc9d7a9fe7e7cce",
    "line" : 196,
    "diffHunk" : "@@ -1,1 +762,766 @@            from pandas import Index\n\n            fill_value = Index(self._left, copy=False)._na_value\n            empty = IntervalArray.from_breaks([fill_value] * (empty_len + 1))\n        else:"
  },
  {
    "id" : "4a089b25-30ae-4dd2-ba2c-4ffb1ee4d6d4",
    "prId" : 37047,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37047#pullrequestreview-506200808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f283f04a-f526-4fe7-8cfc-0e69078a72e5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there a reason we don't call _validate in _simple_new (with a passed in verify_integrity arg)? ",
        "createdAt" : "2020-10-11T16:30:40Z",
        "updatedAt" : "2020-10-12T02:23:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4d00d803-61c1-4cea-8a97-3b04bf89c748",
        "parentId" : "f283f04a-f526-4fe7-8cfc-0e69078a72e5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "bc then it wouldnt be simple",
        "createdAt" : "2020-10-11T17:38:01Z",
        "updatedAt" : "2020-10-12T02:23:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "66c70e89a65dd6b3b0b2db6bca84a0040323e69a",
    "line" : 164,
    "diffHunk" : "@@ -1,1 +364,368 @@\n        result = cls._simple_new(combined, closed)\n        result._validate()\n        return result\n"
  },
  {
    "id" : "db0c1d2b-2738-4438-9615-5722c8c1d598",
    "prId" : 37047,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37047#pullrequestreview-506202488",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ed03874-e883-4cdd-86ff-63ec44c0b0e9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can this method be more strict? e.g. *only* accept Union[np.ndarray, \"DatetimeArray\", \"TimedeltaArray\"]\r\n\r\ne.g. things that have *already* been casted?",
        "createdAt" : "2020-10-11T17:58:53Z",
        "updatedAt" : "2020-10-12T02:23:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f7aa4d4b-9123-4053-a53d-f164adf789bf",
        "parentId" : "5ed03874-e883-4cdd-86ff-63ec44c0b0e9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i think we can do quite a bit less back-and-forth casting eventually, yes",
        "createdAt" : "2020-10-11T18:01:30Z",
        "updatedAt" : "2020-10-12T02:23:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "66c70e89a65dd6b3b0b2db6bca84a0040323e69a",
    "line" : 362,
    "diffHunk" : "@@ -1,1 +1411,1415 @@\ndef _get_combined_data(\n    left: Union[\"Index\", ArrayLike], right: Union[\"Index\", ArrayLike]\n) -> Union[np.ndarray, \"DatetimeArray\", \"TimedeltaArray\"]:\n    # For dt64/td64 we want DatetimeArray/TimedeltaArray instead of ndarray"
  },
  {
    "id" : "45416971-2de6-4342-b7f5-ae53d6d4c7a0",
    "prId" : 37124,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37124#pullrequestreview-510548466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3d7f87f-699a-464d-80f7-11b9db9b0c22",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "were these not working before? tests on these?",
        "createdAt" : "2020-10-16T01:13:19Z",
        "updatedAt" : "2020-11-02T20:22:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "66bf32ad-917a-4c65-a0e0-441122be8d49",
        "parentId" : "c3d7f87f-699a-464d-80f7-11b9db9b0c22",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "ATM IntervalArray comparison is only only defined for `__eq__`, and IntervalIndex gets its inequality comparisons from the base Index class.  We have tests for the IntervalIndex comparisons, which after this PR indirectly test the IntervalArray comparisons.  But the IntervalIndex comparison tests don't use the box_with_array pattern we use for other tests, so will need to be updated in what i expect will be a dedicated+big(ish) PR",
        "createdAt" : "2020-10-16T14:54:16Z",
        "updatedAt" : "2020-11-02T20:22:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "badb99d0a6873ce717cd621b785ac90edb159338",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +558,562 @@                other = type(self)(other)\n\n            if op is operator.eq:\n                return (self._left == other.left) & (self._right == other.right)\n            elif op is operator.ne:"
  },
  {
    "id" : "48f7795b-7f99-469d-b304-6589f49813a5",
    "prId" : 37124,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37124#pullrequestreview-517557848",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2581393-035e-4bc6-8431-dace5ce858a8",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add a comment with an actual explanation instead of (only) the link?",
        "createdAt" : "2020-10-27T10:48:21Z",
        "updatedAt" : "2020-11-02T20:22:49Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "badb99d0a6873ce717cd621b785ac90edb159338",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +588,592 @@                if obj is NA:\n                    # comparison with np.nan returns NA\n                    # github.com/pandas-dev/pandas/pull/37124#discussion_r509095092\n                    result[i] = op is operator.ne\n                else:"
  },
  {
    "id" : "d160f5c4-c394-4014-97e5-4268960680eb",
    "prId" : 38024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38024#pullrequestreview-537529073",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b5f63dd-b3bf-40bc-a230-e53038c96e50",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you factor this out into a function (maybe_cast_inputs), this is crazy otherwise",
        "createdAt" : "2020-11-24T13:34:56Z",
        "updatedAt" : "2020-11-24T13:35:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "383788e5-9590-4005-ac28-eae0739cd6da",
        "parentId" : "6b5f63dd-b3bf-40bc-a230-e53038c96e50",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is how it was before (I am just reverting / fixing conflicts). I prefer to keep this PR a clean revert, and do any other refactor as follow-up",
        "createdAt" : "2020-11-24T14:06:56Z",
        "updatedAt" : "2020-11-24T14:06:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0058b627-18db-4d23-9f31-7e056f1d7371",
        "parentId" : "6b5f63dd-b3bf-40bc-a230-e53038c96e50",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i c ok.",
        "createdAt" : "2020-11-24T14:11:54Z",
        "updatedAt" : "2020-11-24T14:11:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b6a24205a0a723a751679adfc2d6ee7a36f082e",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +222,226 @@                right = right.astype(dtype.subtype)\n\n        # coerce dtypes to match if needed\n        if is_float_dtype(left) and is_integer_dtype(right):\n            right = right.astype(left.dtype)"
  },
  {
    "id" : "c08cbc9b-29fe-45fd-a319-c7fe61832fc4",
    "prId" : 38353,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38353#pullrequestreview-547418628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c91f673-8e41-4d60-af06-374c3eafc9ec",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ideally type values here, though i guess this is public so might be tricky)",
        "createdAt" : "2020-12-08T16:41:52Z",
        "updatedAt" : "2020-12-13T17:58:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "baf458c66da6a4168b0e4d57638c18aec63cf7f5",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1439,1443 @@        )\n\n    def isin(self, values) -> np.ndarray:\n        if not hasattr(values, \"dtype\"):\n            values = np.array(values)"
  },
  {
    "id" : "8c656ae9-928c-4faf-86c6-4f014a907a23",
    "prId" : 38353,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38353#pullrequestreview-548738787",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "775f7816-2d87-47c5-8eae-dd9386a7edba",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "really?",
        "createdAt" : "2020-12-08T16:42:26Z",
        "updatedAt" : "2020-12-13T17:58:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2e01628f-844d-4748-b105-520bfa04e90e",
        "parentId" : "775f7816-2d87-47c5-8eae-dd9386a7edba",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can you be more specific?",
        "createdAt" : "2020-12-08T16:49:42Z",
        "updatedAt" : "2020-12-13T17:58:35Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9c749ea6-fa69-42f0-94af-31a7055ae33f",
        "parentId" : "775f7816-2d87-47c5-8eae-dd9386a7edba",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "its the conversion to complex128. can you at least comment on why you are doing it",
        "createdAt" : "2020-12-10T00:21:37Z",
        "updatedAt" : "2020-12-13T17:58:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3fc88b70-3a94-4e60-bc20-df2aa8d8dbfb",
        "parentId" : "775f7816-2d87-47c5-8eae-dd9386a7edba",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "ill add a comment",
        "createdAt" : "2020-12-10T01:00:06Z",
        "updatedAt" : "2020-12-13T17:58:35Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "baf458c66da6a4168b0e4d57638c18aec63cf7f5",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +1454,1458 @@\n                # error: \"ArrayLike\" has no attribute \"view\"  [attr-defined]\n                left = self._combined.view(\"complex128\")  # type:ignore[attr-defined]\n                right = values._combined.view(\"complex128\")\n                return np.in1d(left, right)"
  },
  {
    "id" : "6a287321-c94d-4404-9c7c-c8183b11e3ee",
    "prId" : 38353,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38353#pullrequestreview-548739008",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff072a79-ad6c-4791-a741-874dd90bef43",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why not just *always* do left._concat_same_type to make this simpler? (could have the i8 check inside that if needbe)",
        "createdAt" : "2020-12-08T16:43:35Z",
        "updatedAt" : "2020-12-13T17:58:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9b269788-739d-42a2-be55-e0b21257c3e9",
        "parentId" : "ff072a79-ad6c-4791-a741-874dd90bef43",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "because we want to end up with shape (N, 2), not (2N,).\r\n\r\n(back when IntervalArray was briefly backed by a single array, that array was exactly `_combined`)",
        "createdAt" : "2020-12-08T16:51:20Z",
        "updatedAt" : "2020-12-13T17:58:35Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "aa78ec00-32f2-41bf-a9eb-3ca3d8309c75",
        "parentId" : "ff072a79-ad6c-4791-a741-874dd90bef43",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right but i am saying why don't you just left_concat_same_type then reshape?",
        "createdAt" : "2020-12-10T00:22:10Z",
        "updatedAt" : "2020-12-13T17:58:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4c8e47ce-5889-4a8c-af62-2b658d516841",
        "parentId" : "ff072a79-ad6c-4791-a741-874dd90bef43",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "because then we'd have the wrong contiguity",
        "createdAt" : "2020-12-10T01:00:41Z",
        "updatedAt" : "2020-12-13T17:58:36Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "baf458c66da6a4168b0e4d57638c18aec63cf7f5",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +1470,1474 @@        left = self.left._values.reshape(-1, 1)\n        right = self.right._values.reshape(-1, 1)\n        if needs_i8_conversion(left.dtype):\n            comb = left._concat_same_type([left, right], axis=1)\n        else:"
  }
]