[
  {
    "id" : "94f9dfb2-7613-4cc4-bc89-6def955c58ac",
    "prId" : 23581,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23581#pullrequestreview-173650264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e7a2d88-3a6d-4097-b59d-845b0d12cd99",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "versionsdded tag",
        "createdAt" : "2018-11-10T04:44:14Z",
        "updatedAt" : "2018-12-28T22:13:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b9e251d28a5f6fd8aae2f10cd503bc7667c6cb9",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +14,18 @@    \"\"\"\n    Create an array.\n\n    .. versionadded:: 0.24.0\n"
  },
  {
    "id" : "31e19e32-1b85-4189-940b-8f86019a8bc4",
    "prId" : 23581,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23581#pullrequestreview-173700331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5443f956-bd7d-4fe4-a854-1d2f1ec15a4f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you show with a np.nan and no inference (and maybe with Int32) for the same",
        "createdAt" : "2018-11-11T14:33:03Z",
        "updatedAt" : "2018-12-28T22:13:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b9e251d28a5f6fd8aae2f10cd503bc7667c6cb9",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +123,127 @@    :meth:`numpy.array`, and a :class:`arrays.PandasArray` is returned.\n\n    >>> pd.array([1, 2])\n    <PandasArray>\n    [1, 2]"
  },
  {
    "id" : "642b8fcb-0acb-449b-9ad8-7025d2ff8f9c",
    "prId" : 23581,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23581#pullrequestreview-173879058",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da9bc422-c900-43ca-be22-dd279fe38395",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use is_period_arraylike here (though IIRC we are trying to get rid of this), its the correct way for now (I think), see my next comment though",
        "createdAt" : "2018-11-11T14:36:17Z",
        "updatedAt" : "2018-12-28T22:13:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2d51732c-7847-4777-8380-080bf3338e17",
        "parentId" : "da9bc422-c900-43ca-be22-dd279fe38395",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think\r\n\r\n``lib.is_period_array(np.array(data, copy=False))`` might be the right way to do this (and will be *much* faster)",
        "createdAt" : "2018-11-11T14:37:59Z",
        "updatedAt" : "2018-12-28T22:13:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1214b6a5-7350-4684-81ba-6736fbb3700e",
        "parentId" : "da9bc422-c900-43ca-be22-dd279fe38395",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Hmm, we only know that we have a `Sequence` at the point, not an ndarray like is expected by `is_period_array`.\r\n\r\nI also suspect that we'll have more of these `elif`s for more dtypes, in which case maybe inferring the dtype once is faster than checking each? But perhaps not.",
        "createdAt" : "2018-11-12T12:34:53Z",
        "updatedAt" : "2018-12-28T22:13:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b9e251d28a5f6fd8aae2f10cd503bc7667c6cb9",
    "line" : 207,
    "diffHunk" : "@@ -1,1 +205,209 @@\n    if dtype is None:\n        inferred_dtype = lib.infer_dtype(data)\n        if inferred_dtype == 'period':\n            try:"
  },
  {
    "id" : "7c4a36f4-47d6-46db-85ac-c26ce1ef2e44",
    "prId" : 23581,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23581#pullrequestreview-176808095",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffab19b9-2ee9-4114-8274-65fbc83cdc5f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "did you add tests for cases where you specify an EA (either thru Series, or directoy) and a dtype is specified? This could be a *different* dtype, what do we do then? .astype? (I think we should), e.g. this is analagous to\r\n\r\n```\r\nIn [1]: arr = np.array([1,2])\r\n\r\nIn [2]: np.array(arr, dtype=float)\r\nOut[2]: array([1., 2.])\r\n```\r\n\r\nwe should mention this in the doc-string and test at least somewhat for this. ",
        "createdAt" : "2018-11-17T21:52:52Z",
        "updatedAt" : "2018-12-28T22:13:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7b1e0828-f424-4b87-948a-4330f63f9e28",
        "parentId" : "ffab19b9-2ee9-4114-8274-65fbc83cdc5f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I added a test.\r\n\r\nI'm not sure it's worth mentioning in the docstring. It feels like a corner case, and is covered by the first line of the dtype description: `The dtype to use for the array. `",
        "createdAt" : "2018-11-20T14:59:31Z",
        "updatedAt" : "2018-12-28T22:13:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b9e251d28a5f6fd8aae2f10cd503bc7667c6cb9",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +34,38 @@        If not specified, there are two possibilities:\n\n        1. When `data` is a :class:`Series`, :class:`Index`, or\n           :class:`ExtensionArray`, the `dtype` will be taken\n           from the data."
  },
  {
    "id" : "bcd5ba9f-c67b-4460-9c40-d427222d10fd",
    "prId" : 23581,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23581#pullrequestreview-177221007",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "993160a7-47d3-4d2b-80dc-d1827b554a6f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is not true, it is passed onto np.array",
        "createdAt" : "2018-11-21T12:36:42Z",
        "updatedAt" : "2018-12-28T22:13:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ecb2b564-f510-4d6a-adde-0b8612e3984d",
        "parentId" : "993160a7-47d3-4d2b-80dc-d1827b554a6f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is trying to convey the fact that\r\n\r\n```python\r\nnp.array([pd.Period('2000', 'D')], dtype=object)\r\n```\r\n\r\nwill return a PeriodArray, rather than an object-dtype ndarray. I'll try to clarify that an ndarray's `.dtype` is ignored *for inference*.",
        "createdAt" : "2018-11-21T12:43:27Z",
        "updatedAt" : "2018-12-28T22:13:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "5ff8c1fb-8454-4dc0-92b3-0159246c6b71",
        "parentId" : "993160a7-47d3-4d2b-80dc-d1827b554a6f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right, ok",
        "createdAt" : "2018-11-21T12:47:08Z",
        "updatedAt" : "2018-12-28T22:13:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b9e251d28a5f6fd8aae2f10cd503bc7667c6cb9",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +40,44 @@           from the data.\n\n        Note that when `data` is a NumPy array, ``data.dtype`` is\n        *not* used for inferring the array type. This is because\n        NumPy cannot represent all the types of data that can be"
  },
  {
    "id" : "04dec450-d0cf-4773-a107-abbbd34e14b8",
    "prId" : 23581,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23581#pullrequestreview-177411154",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3069c81-7391-4cd6-9e0e-f689687f4a74",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "also when `data` is a numpy array I assume?",
        "createdAt" : "2018-11-21T12:37:37Z",
        "updatedAt" : "2018-12-28T22:13:35Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "fb80c66f-c326-4099-97db-57758f16a94d",
        "parentId" : "e3069c81-7391-4cd6-9e0e-f689687f4a74",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, I see the note a couple of lines below. However, I don't think that is completely true:\r\n\r\n```\r\nIn [1]: pd.array(np.array([1, 2], dtype='int32'))                                                                                                                                                                   \r\nOut[1]: array([1, 2], dtype=int32)\r\n\r\nIn [2]: pd.array([1, 2])                                                                                                                                                                                            \r\nOut[2]: array([1, 2])\r\n```\r\n\r\nMaybe a logical example, but so strictly spoken, `data.dtype` is not ignored here in that first case.\r\n\r\n",
        "createdAt" : "2018-11-21T12:43:28Z",
        "updatedAt" : "2018-12-28T22:13:35Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7bddcee3-5e5f-4fb5-b1fa-8e0cd4316036",
        "parentId" : "e3069c81-7391-4cd6-9e0e-f689687f4a74",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I've clarified that `data.dtype` is ignored only when it comes to inference.",
        "createdAt" : "2018-11-21T20:03:56Z",
        "updatedAt" : "2018-12-28T22:13:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b9e251d28a5f6fd8aae2f10cd503bc7667c6cb9",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +36,40 @@        1. When `data` is a :class:`Series`, :class:`Index`, or\n           :class:`ExtensionArray`, the `dtype` will be taken\n           from the data.\n        2. Otherwise, pandas will attempt to infer the `dtype`\n           from the data."
  },
  {
    "id" : "79759f26-4483-44dd-93e9-38d1ef472dde",
    "prId" : 23581,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23581#pullrequestreview-178730950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0568748-7329-4cf0-b29c-0dad75b952af",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I find this statement a bit misleading, as we actually don't infer from scalars (at least not in the sense of eg how Series does it), we only use numpy's inference? \r\n\r\nIf we say that we infer, I would expect those to do the same:\r\n\r\n```\r\nIn [3]: pd.array([pd.Timestamp(\"2012-01-01\")])                                                                                                                                                                      \r\nOut[3]: array([Timestamp('2012-01-01 00:00:00')], dtype=object)\r\n\r\nIn [5]: pd.array([pd.Timestamp(\"2012-01-01\")], dtype='datetime64[ns]')                                                                                                                                              \r\nOut[5]: array(['2012-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\r\n```\r\n\r\n",
        "createdAt" : "2018-11-21T12:47:49Z",
        "updatedAt" : "2018-12-28T22:13:35Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "774a91b6-08c7-4c9c-b28f-047260728a0d",
        "parentId" : "c0568748-7329-4cf0-b29c-0dad75b952af",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, looking now further down in the implementation :-) I see you do handle this case for Period, so here it indeed infers:\r\n\r\n```\r\nIn [6]: pd.array([pd.Period('2012-01-01', freq='D')])                                                                                                                                                               \r\nOut[6]: \r\n<PeriodArray>\r\n['2012-01-01']\r\nLength: 1, dtype: period[D]\r\n```",
        "createdAt" : "2018-11-21T12:49:00Z",
        "updatedAt" : "2018-12-28T22:13:35Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "99b575f6-cc16-4f30-9ec4-1cf1e469303b",
        "parentId" : "c0568748-7329-4cf0-b29c-0dad75b952af",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I haven't stated it explicitly, but it would be nice if 3rd parties could eventually hook into this as well. Right now I think it's just Period (and maybe interval?) that get inferred. Maybe timestamps with timezones once DatetimeArray is done.",
        "createdAt" : "2018-11-21T13:07:25Z",
        "updatedAt" : "2018-12-28T22:13:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "2d20d5e0-a702-4765-8e1f-8f0c8c407303",
        "parentId" : "c0568748-7329-4cf0-b29c-0dad75b952af",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "And not Timestamps without timezones?",
        "createdAt" : "2018-11-21T14:49:39Z",
        "updatedAt" : "2018-12-28T22:13:35Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f2fb03f7-2caa-4d0d-afa5-f9322fa792a6",
        "parentId" : "c0568748-7329-4cf0-b29c-0dad75b952af",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "It seems that `lib.infer_dtype` doesn't distinguish the two\r\n\r\n```python\r\nIn [5]: lib.infer_dtype([pd.Timestamp('2017', tz='utc')])\r\nOut[5]: 'datetime'\r\n\r\nIn [6]: lib.infer_dtype([pd.Timestamp('2017', tz='US/Central')])\r\nOut[6]: 'datetime'\r\n```\r\n\r\nI've added interval to what we'll infer. Perhaps we should be explicit in the docs for that? Though that kinda closes the door to inference for 3rd party arrays.",
        "createdAt" : "2018-11-21T20:01:59Z",
        "updatedAt" : "2018-12-28T22:13:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "1973015b-ed3f-48a1-881d-d0090155011f",
        "parentId" : "c0568748-7329-4cf0-b29c-0dad75b952af",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> Perhaps we should be explicit in the docs for that? \r\n\r\nYes, I would do that. \r\nWould we, in the longer term, the inference happening here be the same as the inference happening in `Series` ? Or would that actually add to much corner cases from there we don't want to carry over?\r\n\r\n> Though that kinda closes the door to inference for 3rd party arrays.\r\n\r\nHow would you envision third party arrays participate in inference? That seems a bit difficult in any case (trying out all registered ones, ..?), and IMO more error prone for users (if you forget to import the 3rd party library, you silently get different results)",
        "createdAt" : "2018-11-27T10:33:38Z",
        "updatedAt" : "2018-12-28T22:13:35Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "80123603-91cc-4901-820a-011795ab5664",
        "parentId" : "c0568748-7329-4cf0-b29c-0dad75b952af",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> Would we, in the longer term, the inference happening here be the same as the inference happening in Series ? Or would that actually add to much corner cases from there we don't want to carry over?\r\n\r\nThat's what I want (long term).\r\n\r\n> How would you envision third party arrays participate in inference?\r\n\r\nHaven't thought about it beyond \"check for 3rd party scalar types\". I'm not familiar with how infer_dtype works.\r\n",
        "createdAt" : "2018-11-27T11:26:28Z",
        "updatedAt" : "2018-12-28T22:13:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b9e251d28a5f6fd8aae2f10cd503bc7667c6cb9",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +38,42 @@           from the data.\n        2. Otherwise, pandas will attempt to infer the `dtype`\n           from the data.\n\n        Note that when `data` is a NumPy array, ``data.dtype`` is"
  },
  {
    "id" : "8b65deeb-c865-4cca-8c88-468fd8e2521c",
    "prId" : 23581,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23581#pullrequestreview-183693096",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "168d3edd-8ce4-4dfd-bb1c-e01ab4adfb2f",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "You could also combine this check with checking in the end that the returned value has a dimension of 1 (so not 0 for scalars or >= 2)",
        "createdAt" : "2018-12-10T21:37:18Z",
        "updatedAt" : "2018-12-28T22:13:35Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "99391817-446b-4113-b3b6-da27aa7e6901",
        "parentId" : "168d3edd-8ce4-4dfd-bb1c-e01ab4adfb2f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think we should have it early, to avoid passing scalars to `ExtensionArray._from_sequence`. Subclasses should probably validate that on their own, but I think we'd like a consistent error message.",
        "createdAt" : "2018-12-11T14:08:46Z",
        "updatedAt" : "2018-12-28T22:13:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b9e251d28a5f6fd8aae2f10cd503bc7667c6cb9",
    "line" : 191,
    "diffHunk" : "@@ -1,1 +189,193 @@            \"Cannot pass scalar '{}' to 'pandas.array'.\"\n        )\n        raise ValueError(msg.format(data))\n\n    data = extract_array(data, extract_numpy=True)"
  },
  {
    "id" : "a6796f5a-7d51-4726-8e65-7d5ba113e119",
    "prId" : 23581,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23581#pullrequestreview-183678411",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8e38c21-7fff-4b7e-8df5-80c9681f9207",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add an example which raises for scalars, 2d?",
        "createdAt" : "2018-12-11T13:39:19Z",
        "updatedAt" : "2018-12-28T22:13:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b9e251d28a5f6fd8aae2f10cd503bc7667c6cb9",
    "line" : 170,
    "diffHunk" : "@@ -1,1 +168,172 @@\n    >>> pd.array([pd.Period('2000', freq=\"D\"), pd.Period(\"2000\", freq=\"D\")])\n    <PeriodArray>\n    ['2000-01-01', '2000-01-01']\n    Length: 2, dtype: period[D]"
  },
  {
    "id" : "ef320541-eeb8-4eec-af63-4f6bc9b9792a",
    "prId" : 24660,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24660#pullrequestreview-190224879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95c36243-edb9-4443-9b00-6a804bbfe8f4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add an example with datetime64[ns]",
        "createdAt" : "2019-01-08T12:50:02Z",
        "updatedAt" : "2019-01-08T15:24:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "351c781c55b5391833ab8cccf23669226cc8de52",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +123,127 @@    Length: 2, dtype: str32\n\n    Finally, Pandas has arrays that mostly overlap with NumPy\n\n      * :class:`arrays.DatetimeArray`"
  },
  {
    "id" : "eb264977-7320-4ed1-afb6-3f82061ebc12",
    "prId" : 26071,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26071#pullrequestreview-226851758",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6412d54-6a74-41f9-8294-841fdcbc4353",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Do know of an alternate way that `is_extension_array_dtype` would only cause type checking to expect the ExtensionDtype here rather than explicitly casting? May ultimately have applications in other pieces of codebase if possible",
        "createdAt" : "2019-04-14T19:17:20Z",
        "updatedAt" : "2019-04-29T18:59:59Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "c76cbdd0-27bb-4271-ad73-7f6c75a3eca8",
        "parentId" : "b6412d54-6a74-41f9-8294-841fdcbc4353",
        "authorId" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "body" : "I'm haven't been able to find a better solution.\r\n\r\nMypy infers the narrowing of Unions based on some logic, but I suspect the control flow here is more complicated than mypy can follow without help. E.g., if it were sufficient to replace `is_extension_array_dtype` here with `isinstance(dtype, ExtensionDtype)`, mypy would follow it, and we wouldn't need an explicit cast. But `is_extension_array_dtype` is more complicated than that. Even changing `is_extension_array_dtype` to simply return `isinstance(dtype, ExtensionDtype)` is too complex for mypy to follow.",
        "createdAt" : "2019-04-15T16:58:00Z",
        "updatedAt" : "2019-04-29T18:59:59Z",
        "lastEditedBy" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "tags" : [
        ]
      },
      {
        "id" : "08875d67-34c0-41b5-854b-cbadffe8106b",
        "parentId" : "b6412d54-6a74-41f9-8294-841fdcbc4353",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "OK thanks. This looks related to https://github.com/python/mypy/issues/5206 (may not completely resolve)",
        "createdAt" : "2019-04-15T20:01:40Z",
        "updatedAt" : "2019-04-29T18:59:59Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f840e9da2ed3898dd78baace69b49e6db1048c6",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +230,234 @@\n    if is_extension_array_dtype(dtype):\n        cls = cast(ExtensionDtype, dtype).construct_array_type()\n        return cls._from_sequence(data, dtype=dtype, copy=copy)\n"
  }
]