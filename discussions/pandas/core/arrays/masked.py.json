[
  {
    "id" : "f98a7c34-9509-42ab-a1d3-00de130bbfde",
    "prId" : 30789,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30789#pullrequestreview-339394992",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34b04ffc-7916-46ee-9ba2-5650b2b4637c",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I suspect IntegerArray has some `isna().any()` that can be updated to use this property.",
        "createdAt" : "2020-01-07T17:39:48Z",
        "updatedAt" : "2020-01-08T07:20:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "e86a6f11f4b5e2d64533c44bd23a5ea082f08bd4",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +153,157 @@\n    @property\n    def _hasna(self) -> bool:\n        # Note: this is expensive right now! The hope is that we can\n        # make this faster by having an optional mask, but not have to change"
  },
  {
    "id" : "abbe9926-8d2f-4508-84b2-c5fe27c72c2a",
    "prId" : 30789,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30789#pullrequestreview-339402854",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e35f5781-d369-4727-b81f-21f2a96d8b59",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Possibly out of scope, but I see the same optimization issue we had with Categorical. Can you convert `item` to an ndarray before doing this `elif`? Or do you want to keep this as a straight refactor, and do that as a followup?",
        "createdAt" : "2020-01-07T17:41:19Z",
        "updatedAt" : "2020-01-08T07:20:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "4e5a5898-6ebe-493a-8a96-0260e66e2352",
        "parentId" : "e35f5781-d369-4727-b81f-21f2a96d8b59",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, I also noted that on the PR (https://github.com/pandas-dev/pandas/pull/30747#issuecomment-571278131), I think it is still worth thinking this through if we need a more general \"check\" function (https://github.com/pandas-dev/pandas/issues/30744#issuecomment-571276333, #30738)",
        "createdAt" : "2020-01-07T17:54:21Z",
        "updatedAt" : "2020-01-08T07:20:16Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "e86a6f11f4b5e2d64533c44bd23a5ea082f08bd4",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +36,40 @@            return self._data[item]\n\n        elif com.is_bool_indexer(item):\n            item = check_bool_array_indexer(self, item)\n"
  },
  {
    "id" : "0780ffb3-f740-467d-88b1-05e7431603bb",
    "prId" : 30789,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30789#pullrequestreview-339399953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80cb61b9-db5c-4d58-9b25-ffc7e5f2a7c0",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "could do _validate_fill_value like DTA/TDA/PA to avoid allowing e.g. NaT here",
        "createdAt" : "2020-01-07T17:48:53Z",
        "updatedAt" : "2020-01-08T07:20:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e86a6f11f4b5e2d64533c44bd23a5ea082f08bd4",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +179,183 @@        # we always fill with 1 internally\n        # to avoid upcasting\n        data_fill_value = self._internal_fill_value if isna(fill_value) else fill_value\n        result = take(\n            self._data, indexer, fill_value=data_fill_value, allow_fill=allow_fill"
  },
  {
    "id" : "060baf64-a828-4a9e-95aa-ba099c5d20d8",
    "prId" : 30789,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30789#pullrequestreview-339864005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87a81ca2-812c-46c0-8058-843a0a68fcda",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "would remove / modify these comments",
        "createdAt" : "2020-01-08T13:34:10Z",
        "updatedAt" : "2020-01-08T13:34:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e86a6f11f4b5e2d64533c44bd23a5ea082f08bd4",
    "line" : 179,
    "diffHunk" : "@@ -1,1 +177,181 @@\n    def take(self, indexer, allow_fill=False, fill_value=None):\n        # we always fill with 1 internally\n        # to avoid upcasting\n        data_fill_value = self._internal_fill_value if isna(fill_value) else fill_value"
  },
  {
    "id" : "db5d1cba-9c7f-474a-9bb9-53680b63c66c",
    "prId" : 31728,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31728#pullrequestreview-354904719",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecfa7a3e-a69e-4bec-b792-7843bc0955bb",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "we need to add the typevar to avoid...\r\n\r\npandas\\core\\arrays\\integer.py:117: error: Incompatible return value type (got \"BaseMaskedArray\", expected \"IntegerArray\")\r\npandas\\core\\arrays\\boolean.py:122: error: Incompatible return value type (got \"BaseMaskedArray\", expected \"BooleanArray\")\r\n\r\nwe can't use the unbound typevar from pandas._typing here otherwise we get...\r\n\r\npandas\\core\\arrays\\masked.py:183: error: Too many arguments for \"object\"\r\n\r\nsince the typevar is needed here, it is also used for the other methods that return type(self)",
        "createdAt" : "2020-02-06T00:44:41Z",
        "updatedAt" : "2020-02-06T01:58:06Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "18420433-c82c-4879-ad00-e742bd55d7aa",
        "parentId" : "ecfa7a3e-a69e-4bec-b792-7843bc0955bb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "As I said in another issue, I don't have problems with it if there is no way around it, but it needs to be documented then",
        "createdAt" : "2020-02-06T08:34:42Z",
        "updatedAt" : "2020-02-06T08:35:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b09a80de-06f8-4a0f-a1d4-7d474046b1da",
        "parentId" : "ecfa7a3e-a69e-4bec-b792-7843bc0955bb",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I don't think this is a problem; it's documented in PEP 484\r\n\r\nhttps://www.python.org/dev/peps/pep-0484/#annotating-instance-and-class-methods",
        "createdAt" : "2020-02-07T02:51:46Z",
        "updatedAt" : "2020-02-07T02:51:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "554ddc0f2de492d41ec2cdec09d413a1420245c8",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +181,185 @@\n    @classmethod\n    def _concat_same_type(cls: Type[BaseMaskedArrayT], to_concat) -> BaseMaskedArrayT:\n        data = np.concatenate([x._data for x in to_concat])\n        mask = np.concatenate([x._mask for x in to_concat])"
  },
  {
    "id" : "f994ba61-5816-40ce-bc4c-68a6a0a33ab6",
    "prId" : 31728,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31728#pullrequestreview-354143037",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5df26efb-e960-4e91-9e58-af8817ebd261",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "\\_\\_init__ needs to be declared in the base class...\r\n\r\npandas\\core\\arrays\\masked.py:56: error: Too many arguments for \"BaseMaskedArray\"\r\npandas\\core\\arrays\\masked.py:181: error: Too many arguments for \"BaseMaskedArray\"\r\npandas\\core\\arrays\\masked.py:207: error: Too many arguments for \"BaseMaskedArray\"\r\npandas\\core\\arrays\\masked.py:207: error: Unexpected keyword argument \"copy\" for \"BaseMaskedArray\"\r\npandas\\core\\arrays\\masked.py:213: error: Too many arguments for \"BaseMaskedArray\"\r\npandas\\core\\arrays\\masked.py:213: error: Unexpected keyword argument \"copy\" for \"BaseMaskedArray\"\r\n\r\nalso creating this ensures that the subclasses have the correct signature for the constructor to work with `__invert__`, ` _concat_same_type`, `take` and `copy` from the base class.\r\n\r\nwe could just use a AbstractMethodError but I think it makes sense to put the shared functionality here.\r\n\r\nBooleanArray has checking for values.ndim and mask.ndim. IntegerArray does not. It may make sense to have that check here also if applicable to IntegerArray.",
        "createdAt" : "2020-02-06T00:57:39Z",
        "updatedAt" : "2020-02-06T01:58:06Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "554ddc0f2de492d41ec2cdec09d413a1420245c8",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +30,34 @@    _internal_fill_value: Scalar\n\n    def __init__(self, values: np.ndarray, mask: np.ndarray, copy: bool = False):\n        if copy:\n            values = values.copy()"
  },
  {
    "id" : "bf89e66e-5c46-4a45-bc04-601b99b32c0b",
    "prId" : 31728,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31728#pullrequestreview-354270488",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5bef1e8-4e27-44a2-b5f6-ecec1c00a205",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "We otherwise don't type self, or do we? \r\n(self is always the type of the class, no?)",
        "createdAt" : "2020-02-06T08:35:17Z",
        "updatedAt" : "2020-02-06T08:35:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "554ddc0f2de492d41ec2cdec09d413a1420245c8",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +187,191 @@\n    def take(\n        self: BaseMaskedArrayT,\n        indexer,\n        allow_fill: bool = False,"
  }
]