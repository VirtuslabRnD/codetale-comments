[
  {
    "id" : "69cbe633-3b10-4080-8210-35361f6aa20a",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-90190408",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d47dbe6a-3156-468d-9bd7-8b52ca9212f1",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "By having our internal arrays inherit from `PandasObject`, they also get a `_constructor` method. So we should either make sure this is never used (apart from in methods inside the array itself), or add this to the interface (my preference would be the first)",
        "createdAt" : "2018-01-19T09:47:02Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "98c9a0c7-475b-4bf0-839d-2271c4265c01",
        "parentId" : "d47dbe6a-3156-468d-9bd7-8b52ca9212f1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah, the methods in PandasObject needs to be ABC in the ExtensionArray ",
        "createdAt" : "2018-01-19T11:20:19Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f38f40d7-e3ac-4ae0-9d0d-0b86a882f2b2",
        "parentId" : "d47dbe6a-3156-468d-9bd7-8b52ca9212f1",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "On the other hand, I don't think all methods/attributes of PandasObject should be added to the public ExtensionArray (to keep those internal + to not clutter the ExtensionArray API)",
        "createdAt" : "2018-01-19T12:35:02Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "fb8eea74-3b61-4947-8435-6fd51c08b189",
        "parentId" : "d47dbe6a-3156-468d-9bd7-8b52ca9212f1",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "FYI, I'm consistently testing these changes against\r\n\r\n1. An implementation of `IntervalArary`: https://github.com/TomAugspurger/pandas/compare/pandas-array-interface-3...TomAugspurger:pandas-array-upstream+interval?expand=1\r\n2. A branch on pandas-ip: https://github.com/ContinuumIO/pandas-ip/tree/pandas-array-upstream-compat\r\n\r\nNeither inherit from `PandasObject` at the moment, so we're OK.",
        "createdAt" : "2018-01-19T17:45:13Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +151,155 @@\n\nclass Categorical(ExtensionArray, PandasObject):\n    \"\"\"\n    Represents a categorical variable in classic R / S-plus fashion"
  },
  {
    "id" : "d17b4313-81b6-443d-8098-35316e6e5316",
    "prId" : 19269,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19269#pullrequestreview-89188073",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10261b04-23a5-4f80-95ee-4aa681a0214e",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Note: I changed this from `except Exception` for the linter.",
        "createdAt" : "2018-01-16T16:07:34Z",
        "updatedAt" : "2018-01-18T11:54:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b0812060-0063-45c3-9e78-bfdd3fd04db9",
        "parentId" : "10261b04-23a5-4f80-95ee-4aa681a0214e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "+1",
        "createdAt" : "2018-01-16T17:51:21Z",
        "updatedAt" : "2018-01-18T11:54:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "70da106b38afefe9d31824f870017ab1d9e8aa20",
    "line" : 558,
    "diffHunk" : "@@ -1,1 +556,560 @@        try:\n            codes = np.asarray(codes, np.int64)\n        except (ValueError, TypeError):\n            raise ValueError(\n                \"codes need to be convertible to an arrays of integers\")"
  },
  {
    "id" : "7312ef5d-d905-4b90-abaf-18773a7359a3",
    "prId" : 19684,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19684#pullrequestreview-97192117",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9d9348b-ee72-45c7-91e5-22094d6e5f36",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Note, I added this keyword since it's *possible* have a tuple / list for a `category`.",
        "createdAt" : "2018-02-13T20:40:59Z",
        "updatedAt" : "2018-02-21T12:52:48Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "3c2a1808-9646-42b7-ab05-303971a1e2da",
        "parentId" : "b9d9348b-ee72-45c7-91e5-22094d6e5f36",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Do we need to add a test for this? (I mean filling a categorical with such categories, so the purpose of `validate_scalar_dict_value=False` is exercised)",
        "createdAt" : "2018-02-16T14:22:10Z",
        "updatedAt" : "2018-02-21T12:52:48Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc1f9606204e126723867024fbf35f953dcf31c7",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1611,1615 @@        filled : Categorical with NA/NaN filled\n        \"\"\"\n        value, method = validate_fillna_kwargs(\n            value, method, validate_scalar_dict_value=False\n        )"
  },
  {
    "id" : "ad787adf-51f4-429f-92cd-e96bc4051240",
    "prId" : 19909,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19909#pullrequestreview-103059812",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "990333a4-b5da-4fbc-9aab-3d9c25e542b0",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is there a reason this does `self.get_values().tolist()` instead of directly `self.tolist()` ?",
        "createdAt" : "2018-03-01T22:59:27Z",
        "updatedAt" : "2018-03-15T11:33:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "cf1b60ce-879b-4209-b8ba-154b198e5f52",
        "parentId" : "990333a4-b5da-4fbc-9aab-3d9c25e542b0",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think to avoid an infinite loop.\r\n\r\n`Categorical.tolist` calls `tolist` which calls `Categorical.__iter__`.\r\n\r\nNeed to do `get_values` break that cycle / extract the python scalar types.",
        "createdAt" : "2018-03-02T12:45:27Z",
        "updatedAt" : "2018-03-15T11:33:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "349ab491-f2c9-443d-9aa5-72ed745bd510",
        "parentId" : "990333a4-b5da-4fbc-9aab-3d9c25e542b0",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It just feels that we are doing to much work. To iterate, we first create an array, iterate through it to create a list, and then iterate through the list ..",
        "createdAt" : "2018-03-02T12:48:04Z",
        "updatedAt" : "2018-03-15T11:33:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "762f317c-6bce-4d50-b1e2-64ac8120e360",
        "parentId" : "990333a4-b5da-4fbc-9aab-3d9c25e542b0",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "So get_values either returns a array or a Datetime(like)Index. For the array we can just iterate over it, but for the Datetime(like)Index I think as well . The tolist implementation there is `list(self.astype(object))`",
        "createdAt" : "2018-03-02T12:52:08Z",
        "updatedAt" : "2018-03-15T11:33:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "82464f09-d0ce-424b-a0a5-3c08248d7ef6",
        "parentId" : "990333a4-b5da-4fbc-9aab-3d9c25e542b0",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Sorry, that previous comment was of course wrong, as that is exactly checking the `get_values().tolist()`",
        "createdAt" : "2018-03-02T12:55:02Z",
        "updatedAt" : "2018-03-15T11:33:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ca02595b-2867-4610-839b-cae778c2e12d",
        "parentId" : "990333a4-b5da-4fbc-9aab-3d9c25e542b0",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'm not sure if there's a strictly better way. If we want iter(Categorical) to not immediately do any work, then we do something like\r\n\r\n```python\r\n    def iter2(self):\r\n        for i in range(len(self)):\r\n            yield asscalar(self[i])\r\n```\r\n\r\nSo while `cat.iter2()` is instant, actually consuming the iterator is slow. 22 seconds for a length-2,000,000 array, vs. 11 ms for the same array with the current implementation.\r\n\r\nAm I missing another way, that doesn't rely on many calls to __getitem__?",
        "createdAt" : "2018-03-02T13:05:47Z",
        "updatedAt" : "2018-03-15T11:33:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c3efb0d5-3aa4-4ecb-879c-0c52e68204ad",
        "parentId" : "990333a4-b5da-4fbc-9aab-3d9c25e542b0",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "More correct comment: I think we can leave out the `tolist`, and do `iter(self.get_values()`\r\n\r\nOr alternatively move the logic to `__iter__` (using `get_values`) and let `tolist` just call `list(iter)`?",
        "createdAt" : "2018-03-02T13:07:11Z",
        "updatedAt" : "2018-03-15T11:33:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "af3bc6fa-7521-43ec-b608-a0bcef2e7948",
        "parentId" : "990333a4-b5da-4fbc-9aab-3d9c25e542b0",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We need to call `tolist()` on the NumPy array from `.get_values()` so that the scalars are converted to Python types.\r\n\r\nBut yes, moving the logic sounds fine.",
        "createdAt" : "2018-03-02T13:09:32Z",
        "updatedAt" : "2018-03-15T11:33:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "573b5df7-102d-4f9b-ac1f-26192bb79ba9",
        "parentId" : "990333a4-b5da-4fbc-9aab-3d9c25e542b0",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, yes, therefore we need the tolist. \r\nBut then moving the logic is maybe not best, as then `tolist` would consume an iterator coming from a list .. \r\n\r\nIt's all just complex with the different unboxing depending on the type :-)",
        "createdAt" : "2018-03-02T13:25:16Z",
        "updatedAt" : "2018-03-15T11:33:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9836bf21-6712-411b-8905-9533db866802",
        "parentId" : "990333a4-b5da-4fbc-9aab-3d9c25e542b0",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Simplified slightly if you want to take one last look. Basically, we didn't have to worry about the different unboxing for different types, since `Categorical.get_values()` with datetimes returns a DatetimeIndex, and when we `.tolist()` on that we get the right unboxing.",
        "createdAt" : "2018-03-02T14:22:59Z",
        "updatedAt" : "2018-03-15T11:33:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "2dedc515-0964-45c3-b694-6485a009b0cf",
        "parentId" : "990333a4-b5da-4fbc-9aab-3d9c25e542b0",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Looks good!",
        "createdAt" : "2018-03-02T14:34:31Z",
        "updatedAt" : "2018-03-15T11:33:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ce033a34-d782-4cb1-8850-6f2407b2daa8",
        "parentId" : "990333a4-b5da-4fbc-9aab-3d9c25e542b0",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is the whole ``.get_values()`` fiasco (which I created a while back :). I think should be addressed sooner rather than later.",
        "createdAt" : "2018-03-07T13:49:47Z",
        "updatedAt" : "2018-03-15T11:33:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9278037d-5af4-4d83-8191-771bf24863e5",
        "parentId" : "990333a4-b5da-4fbc-9aab-3d9c25e542b0",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Any issues with the current implementation? Currently there's a tradeoff between how expensive `it = iter(Categorical)` is vs. `next(it)`.\r\n\r\nSomewhere, we have to go from numpy scalars to Python scalars. The fastest way to do that is with `tolist()`, but that has upfront memory overhead. We could avoid that by doing it in the `next`, but that has time overhead for\r\n\r\n1. converting to Python scalars elementwise\r\n2. An extra call to CategoricalIndex.categories.__getitem__ per element\r\n\r\nso that `next(it)` becomes *much* slower. I don't think there's much more to be done right now.\r\n",
        "createdAt" : "2018-03-12T14:15:36Z",
        "updatedAt" : "2018-03-15T11:33:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "05fced650bac03f122689ce6f8fd423f89bea3d6",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1716,1720 @@    def __iter__(self):\n        \"\"\"Returns an Iterator over the values of this Categorical.\"\"\"\n        return iter(self.get_values().tolist())\n\n    def _tidy_repr(self, max_vals=10, footer=True):"
  },
  {
    "id" : "23efcb34-e5ee-4701-9409-55fac197f4b7",
    "prId" : 19938,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19938#pullrequestreview-103670438",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c1888d1-31f0-4f68-aa80-29104e31ea98",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "The interface we have to ``hashtable.get_labels()`` is very odd right now, IOW we have a ``check_null`` flag which then makes the caller *know* to substitute values to iNaT (for int64) and know which are the sentinels. This is breaking the abstrastion. Rather would either like to be able to pass in the actual sentinel (not the *output* sentinel, but that's another confusion). e.g . you would simply pass -1 here.\r\n\r\nI think its worth re-factoring this (maybe before this PR), though I suppose could be after. ",
        "createdAt" : "2018-03-13T12:14:26Z",
        "updatedAt" : "2018-03-14T11:29:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c2fd8ce5-36c4-4cf7-adf8-22e2450a7951",
        "parentId" : "7c1888d1-31f0-4f68-aa80-29104e31ea98",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "https://github.com/pandas-dev/pandas/issues/20328\r\n\r\nYes, that'd be nicer.",
        "createdAt" : "2018-03-13T12:25:35Z",
        "updatedAt" : "2018-03-14T11:29:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f1c70545-5e98-48cb-84cf-b96aac749977",
        "parentId" : "7c1888d1-31f0-4f68-aa80-29104e31ea98",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we actually want this to be public?",
        "createdAt" : "2018-03-13T23:16:29Z",
        "updatedAt" : "2018-03-14T11:29:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "190764a1-a287-4027-bd0b-5770a24eda2d",
        "parentId" : "7c1888d1-31f0-4f68-aa80-29104e31ea98",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "factorize in general? I don’t see why not. It’s present on series and index. ",
        "createdAt" : "2018-03-13T23:36:00Z",
        "updatedAt" : "2018-03-14T11:29:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "a8966675-1c3e-4ce1-86a3-67a10e62df1e",
        "parentId" : "7c1888d1-31f0-4f68-aa80-29104e31ea98",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "https://github.com/pandas-dev/pandas/pull/19938#issuecomment-372648259 was in reference to the API docs. We whitelist the methods on Categorical that are included in the API docs (just `__array__` and `from_codes` for now).",
        "createdAt" : "2018-03-14T01:47:36Z",
        "updatedAt" : "2018-03-14T11:29:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e006d1a187b35941da3a548415f097160e5bb92",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +2118,2122 @@\n        codes = self.codes.astype('int64')\n        codes[codes == -1] = iNaT\n        # We set missing codes, normally -1, to iNaT so that the\n        # Int64HashTable treats them as missing values."
  },
  {
    "id" : "56911269-dfb0-4672-aa94-2c2c5cc9757c",
    "prId" : 19957,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19957#pullrequestreview-100935057",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5f4569b-9e5a-478f-b743-c4cc2c4c9b14",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Not sure if this changes our opinion on `_values_for_argsort`, but the apparently Python2 has issues with passing through the arguments correctly to the `super()` call.\r\n\r\n```\r\n____________________ TestCategoricalSort.test_numpy_argsort ____________________\r\n\r\nself = <pandas.tests.categorical.test_sorting.TestCategoricalSort object at 0x7efcb391f950>\r\n\r\n    def test_numpy_argsort(self):\r\n        c = Categorical([5, 3, 1, 4, 2], ordered=True)\r\n    \r\n        expected = np.array([2, 4, 1, 3, 0])\r\n>       tm.assert_numpy_array_equal(np.argsort(c), expected,\r\n                                    check_dtype=False)\r\n\r\npandas/tests/categorical/test_sorting.py:26: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n../miniconda3/envs/pandas/lib/python2.7/site-packages/numpy/core/fromnumeric.py:886: in argsort\r\n    return argsort(axis, kind, order)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = [5, 3, 1, 4, 2]\r\nCategories (5, int64): [1 < 2 < 3 < 4 < 5]\r\nascending = -1, kind = 'quicksort', args = (None,), kwargs = {}\r\n\r\n    def argsort(self, ascending=True, kind='quicksort', *args, **kwargs):\r\n        \"\"\"\r\n            Returns the indices that would sort the Categorical instance if\r\n            'sort_values' was called. This function is implemented to provide\r\n            compatibility with numpy ndarray objects.\r\n    \r\n            While an ordering is applied to the category values, arg-sorting\r\n            in this context refers more to organizing and grouping together\r\n            based on matching category values. Thus, this function can be\r\n            called on an unordered Categorical instance unlike the functions\r\n            'Categorical.min' and 'Categorical.max'.\r\n    \r\n            Returns\r\n            -------\r\n            argsorted : numpy array\r\n    \r\n            See also\r\n            --------\r\n            numpy.ndarray.argsort\r\n            \"\"\"\r\n        # Keep the implementation here just for the docstring.\r\n        return super(Categorical, self).argsort(ascending=ascending, kind=kind,\r\n>                                               *args, **kwargs)\r\nE       TypeError: argsort() got multiple values for keyword argument 'ascending'\r\n```\r\n\r\nChanging the Categorical.argsort to accept just `*args, **kwargs` fixes things, since `ExtensionArray` does the argument validation, but it's a bit unfortunate.",
        "createdAt" : "2018-03-02T22:33:37Z",
        "updatedAt" : "2018-03-20T19:49:48Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "48852457373eff62847ff976bbdcced12923cc94",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1382,1386 @@        return self._codes.copy()\n\n    def argsort(self, *args, **kwargs):\n        # TODO(PY2): use correct signature\n        # We have to do *args, **kwargs to avoid a a py2-only signature"
  },
  {
    "id" : "5093cb23-28b3-4e29-ad9b-bfa6bdbfe565",
    "prId" : 19957,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19957#pullrequestreview-103674145",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10029666-1b5b-4a31-beb5-eb77ed0bbe17",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do these doc-strings meet the new standards? ",
        "createdAt" : "2018-03-13T23:14:59Z",
        "updatedAt" : "2018-03-20T19:49:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ac436b75-6d5b-4ba9-b87d-d570c5cac0fc",
        "parentId" : "10029666-1b5b-4a31-beb5-eb77ed0bbe17",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "7bbe796 does, aside from examples which isn't really possible.",
        "createdAt" : "2018-03-14T02:19:00Z",
        "updatedAt" : "2018-03-20T19:49:48Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "48852457373eff62847ff976bbdcced12923cc94",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1389,1393 @@\n        Parameters\n        ----------\n        ascending : bool, default True\n            Whether the indices should result in an ascending"
  },
  {
    "id" : "9c998479-4492-49eb-8322-e6e3fa9de17a",
    "prId" : 20286,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20286#pullrequestreview-105610695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c902503-dcc1-47ce-b598-d66483f7591d",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This is simplified to the point that I think you can now just say \"If the mapping correspondence is one-to-one the result is a ...\" in the second sentence",
        "createdAt" : "2018-03-21T05:39:27Z",
        "updatedAt" : "2018-03-21T21:27:02Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecbaca0dbdd2d2d743c10c523b72ea9935f6ad26",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1084,1088 @@        Map categories using input correspondence (dict, Series, or function).\n\n        Maps the categories to new categories. If the mapping correspondence is\n        one-to-one the result is a :class:`~pandas.Categorical` which has the\n        same order property as the original, otherwise a :class:`~pandas.Index`"
  },
  {
    "id" : "0d928110-b3a0-472e-bde2-af5bb202ad87",
    "prId" : 20583,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20583#pullrequestreview-115906488",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9da4ad8-ba04-44f5-8f6b-97d66d991f68",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you update this docstring?",
        "createdAt" : "2018-04-28T10:37:26Z",
        "updatedAt" : "2018-05-01T10:07:16Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdf7525812ca670f9406ab8df333030d36d30947",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +676,680 @@            appearance in codes (unless ordered=True, in which case the\n            original order is preserved), followed by any unrepresented\n            categories in the original order.\n        \"\"\"\n"
  },
  {
    "id" : "74b35af3-5c9e-4fd2-84d5-31cdd521a6e9",
    "prId" : 20583,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20583#pullrequestreview-117202155",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c960b80f-4824-4ef5-b35b-ffa1fe4d6641",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Haven't thought this through, but can this `if` block be replaced with `self.remove_unused_cateogories()._codes_for_groupby(sort=sort, observed=False)`?",
        "createdAt" : "2018-05-01T11:14:19Z",
        "updatedAt" : "2018-05-01T11:16:48Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "8ea3bbea-0e87-4d3a-92a6-2a2ff0f6d5b5",
        "parentId" : "c960b80f-4824-4ef5-b35b-ffa1fe4d6641",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no, you actually need the uniques",
        "createdAt" : "2018-05-03T10:10:50Z",
        "updatedAt" : "2018-05-03T10:10:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdf7525812ca670f9406ab8df333030d36d30947",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +681,685 @@        # we only care about observed values\n        if observed:\n            unique_codes = unique1d(self.codes)\n            cat = self.copy()\n"
  },
  {
    "id" : "b0fa0f8e-59ad-4326-8fc6-f74b59623943",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-135245141",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84053ac7-acf8-4685-a2db-2b03a9655a35",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "`__array__` has to return an ndarray. Without this, Categorical[ExtensionArray]` would fail, as `take_1d(...)` would be an ExtensionArray.",
        "createdAt" : "2018-04-04T16:51:38Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "72c1a869-54d6-4931-9139-4afb6601aa8b",
        "parentId" : "84053ac7-acf8-4685-a2db-2b03a9655a35",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "comment this.",
        "createdAt" : "2018-04-05T15:47:17Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4c732b81-2d09-42e4-b492-2a7fc76b5a0e",
        "parentId" : "84053ac7-acf8-4685-a2db-2b03a9655a35",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I have an update on this section already in intna",
        "createdAt" : "2018-07-08T20:54:31Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1245,1249 @@        if dtype and not is_dtype_equal(dtype, self.categories.dtype):\n            return np.asarray(ret, dtype)\n        if is_extension_array_dtype(ret):\n            # When we're a Categorical[ExtensionArray], like Interval,\n            # we need to ensure __array__ get's all the way to an"
  },
  {
    "id" : "3e824e68-54d8-4405-8fbc-57b42eabb619",
    "prId" : 20779,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20779#pullrequestreview-114184161",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "656cb1c0-6f76-4db3-af5a-47b9c2d2a426",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add versionadded (anytime you add the param)",
        "createdAt" : "2018-04-21T21:53:55Z",
        "updatedAt" : "2018-05-31T10:39:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f14357f74eced232ee23f5f659b64cae7bbaae1",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +2127,2131 @@        Parameters\n        ----------\n        dropna : boolean, default True\n            Don't consider counts of NaN/NaT.\n"
  },
  {
    "id" : "d514ada9-7bf6-45e4-bf43-8a517218c88c",
    "prId" : 20826,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20826#pullrequestreview-115910738",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3d2f3fc-e9b7-459f-be23-c91f82111ea5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this does NOT belong here at all, you are mixing up parsing with setting the categories. you can do this via a separate function *inside* parser.pyx",
        "createdAt" : "2018-04-27T10:34:16Z",
        "updatedAt" : "2018-11-23T10:39:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9ee08f44-9f04-4114-b515-d113039140ae",
        "parentId" : "a3d2f3fc-e9b7-459f-be23-c91f82111ea5",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think there were issues with that (either nogil, or having to share code with the Python parser).",
        "createdAt" : "2018-04-27T11:33:12Z",
        "updatedAt" : "2018-11-23T10:39:57Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "fe922887-a68e-4288-b169-b291c6bd08a7",
        "parentId" : "a3d2f3fc-e9b7-459f-be23-c91f82111ea5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "well it certainly doesn’t belong here\r\nthis is conflating parsing with categories",
        "createdAt" : "2018-04-27T11:36:20Z",
        "updatedAt" : "2018-11-23T10:39:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4e234b12-36f1-4d41-b7c9-ce566d1fd328",
        "parentId" : "a3d2f3fc-e9b7-459f-be23-c91f82111ea5",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I see now that this is called outside a nogil block, so a standalone method for that should be fine. If you want to open an issue though, because I don't think it should hold up the release.",
        "createdAt" : "2018-04-27T11:37:38Z",
        "updatedAt" : "2018-11-23T10:39:57Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "cc16486e-58fc-401e-af05-c110bceb5d00",
        "parentId" : "a3d2f3fc-e9b7-459f-be23-c91f82111ea5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this isn't necessary for the RC. this needs to be fixed in this PR.",
        "createdAt" : "2018-04-27T11:56:22Z",
        "updatedAt" : "2018-11-23T10:39:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f96a854203c57cb40cdc0ebfa89173d62a50b8f2",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +582,586 @@            elif is_timedelta64_dtype(dtype.categories):\n                cats = to_timedelta(inferred_categories, errors=\"coerce\")\n            elif dtype.categories.is_boolean():\n                if true_values is None:\n                    true_values = [\"True\", \"TRUE\", \"true\"]"
  },
  {
    "id" : "2a11ef48-02f2-45bf-a36f-13959d85734b",
    "prId" : 20841,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20841#pullrequestreview-116145913",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e04760c-2013-4ccf-8c9e-b8e9d6dff7b2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe just put the warning inline here?",
        "createdAt" : "2018-04-28T13:41:57Z",
        "updatedAt" : "2018-04-30T11:17:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9ae9ca64-8076-47e9-a090-b787da17be52",
        "parentId" : "4e04760c-2013-4ccf-8c9e-b8e9d6dff7b2",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "That messes with the formatting.",
        "createdAt" : "2018-04-28T18:51:00Z",
        "updatedAt" : "2018-04-30T11:17:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "12485c525cd18f967c473ccb5f99c887e4f972b2",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +1778,1782 @@        if allow_fill is None:\n            if (indexer < 0).any():\n                warn(_take_msg, FutureWarning, stacklevel=2)\n                allow_fill = True\n"
  },
  {
    "id" : "b652444a-fb2f-42f6-8b4e-1efa9ce81416",
    "prId" : 20841,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20841#pullrequestreview-116145986",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b605f95-3bd3-4a6c-a8dd-330a595b29e9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this condition tested?",
        "createdAt" : "2018-04-28T13:42:27Z",
        "updatedAt" : "2018-04-30T11:17:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "71df7665-014a-4383-8f56-1eabb374ff77",
        "parentId" : "8b605f95-3bd3-4a6c-a8dd-330a595b29e9",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yep.",
        "createdAt" : "2018-04-28T18:54:22Z",
        "updatedAt" : "2018-04-30T11:17:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "12485c525cd18f967c473ccb5f99c887e4f972b2",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +1782,1786 @@\n        if isna(fill_value):\n            # For categorical, any NA value is considered a user-facing\n            # NA value. Our storage NA value is -1.\n            fill_value = -1"
  },
  {
    "id" : "2bd45a47-62e1-4b90-89f3-c3560096d648",
    "prId" : 22072,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22072#pullrequestreview-141316560",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2dcf709c-da42-401d-8f46-a30b4cf9a036",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the issue reference",
        "createdAt" : "2018-07-28T13:00:40Z",
        "updatedAt" : "2018-08-11T12:07:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "213c4ea42f2aaaa4f8c8ed359297b2b864c0f7ca",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2539,2543 @@        codes = values.codes\n    else:\n        # The value of ordered is irrelevant since we don't use cat as such,\n        # but only the resulting categories, the order of which is independent\n        # from ordered. Set ordered to False as default. See GH #15457"
  },
  {
    "id" : "d632aa83-2380-4e33-a390-8238186d1f16",
    "prId" : 22762,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22762#pullrequestreview-161998208",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e69d1199-ab5e-4835-b210-37d4af9e7bdc",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The `skipna` is ignored here (which is actually a missing feature in the current implementation I suppose?)",
        "createdAt" : "2018-10-01T14:43:17Z",
        "updatedAt" : "2018-10-12T11:40:31Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4e9d21f5-2438-4239-9fb7-b077cb12f051",
        "parentId" : "e69d1199-ab5e-4835-b210-37d4af9e7bdc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes i think that's right",
        "createdAt" : "2018-10-05T11:46:53Z",
        "updatedAt" : "2018-10-12T11:40:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "aeaf5f32c0939d6bedc99240b47dd54252dda96a",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +2075,2079 @@            msg = 'Categorical cannot perform the operation {op}'\n            raise TypeError(msg.format(op=name))\n        return func(**kwargs)\n\n    def min(self, numeric_only=None, **kwargs):"
  },
  {
    "id" : "9b346b24-f92f-4eb0-ae6d-26e2b9485704",
    "prId" : 23293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23293#pullrequestreview-167936832",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca1cb2b9-e215-44de-8e17-ef5664506d3d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't this be in the super class? e.g. this is a pretty general condition",
        "createdAt" : "2018-10-24T13:08:15Z",
        "updatedAt" : "2019-07-01T18:47:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "731e34b0-1444-4d2a-9d79-db7e6b77383d",
        "parentId" : "ca1cb2b9-e215-44de-8e17-ef5664506d3d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The super class of Categorical is ExtensionArray, and I don't want to put it in there (it's not necessarily that should be done in general for all EAs). ",
        "createdAt" : "2018-10-24T14:23:59Z",
        "updatedAt" : "2019-07-01T18:47:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "7486d260178176f9e9674c8036bc3063a067b24a",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1296,1300 @@    def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n        # for binary ops, use our custom dunder methods\n        result = ops.maybe_dispatch_ufunc_to_dunder_op(\n            self, ufunc, method, *inputs, **kwargs)\n        if result is not NotImplemented:"
  },
  {
    "id" : "586e6dd3-9056-48dc-ad29-57d002bbc080",
    "prId" : 23293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23293#pullrequestreview-168635695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6edbaeb4-23c8-4096-b6d2-82cc3e19abce",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "blank line here",
        "createdAt" : "2018-10-26T00:23:56Z",
        "updatedAt" : "2019-07-01T18:47:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7486d260178176f9e9674c8036bc3063a067b24a",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1301,1305 @@            return result\n\n        # for all other cases, raise for now (similarly as what happens in\n        # Series.__array_prepare__)\n        raise TypeError(\"Object with dtype {dtype} cannot perform \""
  },
  {
    "id" : "b865ecc8-27f4-44a8-a77a-ce5b40c3324f",
    "prId" : 23398,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23398#pullrequestreview-169093400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7af05be8-8f6b-438d-85d4-374a4984eaea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you update the tests to also test ``to_list`` (just 1 is enough)",
        "createdAt" : "2018-10-28T13:55:02Z",
        "updatedAt" : "2018-12-12T17:04:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c57e8eb08e472431d24339919a64514911a798b5",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +569,573 @@        return list(self)\n\n    to_list = tolist\n\n    @property"
  },
  {
    "id" : "73e0033b-58d5-46ab-acd8-21e72c12551e",
    "prId" : 23398,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23398#pullrequestreview-170237856",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fbc45c2-a594-4810-b4a6-859f6393ddeb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a note whereever you are doing this that tolist is not actually deprecated, just suppressed in the ``__dir__``. We *could* also make an attribute for this, but prob not worth it",
        "createdAt" : "2018-10-31T13:03:17Z",
        "updatedAt" : "2018-12-12T17:04:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c57e8eb08e472431d24339919a64514911a798b5",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +311,315 @@    _dtype = CategoricalDtype(ordered=False)\n    # tolist is not actually deprecated, just suppressed in the __dir__\n    _deprecations = frozenset(['labels', 'tolist'])\n    _typ = 'categorical'\n"
  },
  {
    "id" : "70043d9e-8b4f-4d27-ac69-e375e54b44d8",
    "prId" : 24128,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24128#pullrequestreview-182941153",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14e18b05-0305-4ee1-a053-162b644bf6ec",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Add `fill_value` to the docstring (with a versionadded).",
        "createdAt" : "2018-12-08T02:19:23Z",
        "updatedAt" : "2018-12-26T00:16:53Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "bbeada8a-e5ba-4c61-b1b0-ce91ca7c10f5",
        "parentId" : "14e18b05-0305-4ee1-a053-162b644bf6ec",
        "authorId" : "bf1e9aa3-448f-4bfb-ae6e-ae0babf94b7c",
        "body" : "added",
        "createdAt" : "2018-12-08T11:16:14Z",
        "updatedAt" : "2018-12-26T00:16:53Z",
        "lastEditedBy" : "bf1e9aa3-448f-4bfb-ae6e-ae0babf94b7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a03cbf5e4afe65c8b6fe8a1eb1eee517d0fc5913",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1259,1263 @@        return tuple([len(self._codes)])\n\n    def shift(self, periods, fill_value=None):\n        \"\"\"\n        Shift Categorical by desired number of periods."
  },
  {
    "id" : "61db30a7-621a-4bf7-90c2-f6eda27344eb",
    "prId" : 24128,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24128#pullrequestreview-182991935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29e62369-39b1-4694-92f2-3b8d6d3aeeef",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Hmm this isn't quite right... Codes are integers, but users don't deal with those directly, they deal with the values in the categories.\r\n\r\nI think something like\r\n\r\n```\r\nelif key in self.categories:\r\n    fill_value = self.categories.get_loc(key)\r\nelse:\r\n    raise ValueError(\"'fill_value={}' is not present in this Categorical's categories\".format(fill_value))\r\n```",
        "createdAt" : "2018-12-08T02:26:58Z",
        "updatedAt" : "2018-12-26T00:16:53Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "de4e53bd-6239-485e-b2a7-bedacc958ac6",
        "parentId" : "29e62369-39b1-4694-92f2-3b8d6d3aeeef",
        "authorId" : "bf1e9aa3-448f-4bfb-ae6e-ae0babf94b7c",
        "body" : "sorry, not sure what `key` is in your example, can you specify? @TomAugspurger ",
        "createdAt" : "2018-12-08T11:14:23Z",
        "updatedAt" : "2018-12-26T00:16:53Z",
        "lastEditedBy" : "bf1e9aa3-448f-4bfb-ae6e-ae0babf94b7c",
        "tags" : [
        ]
      },
      {
        "id" : "b9f406b0-87dc-444d-ac0c-4e35b317dd0e",
        "parentId" : "29e62369-39b1-4694-92f2-3b8d6d3aeeef",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "sorry, `fill_value`.",
        "createdAt" : "2018-12-08T11:42:18Z",
        "updatedAt" : "2018-12-26T00:16:53Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b5eca1d7-8490-493b-8b82-387dbc9034b8",
        "parentId" : "29e62369-39b1-4694-92f2-3b8d6d3aeeef",
        "authorId" : "bf1e9aa3-448f-4bfb-ae6e-ae0babf94b7c",
        "body" : "added",
        "createdAt" : "2018-12-08T11:51:31Z",
        "updatedAt" : "2018-12-26T00:16:53Z",
        "lastEditedBy" : "bf1e9aa3-448f-4bfb-ae6e-ae0babf94b7c",
        "tags" : [
        ]
      },
      {
        "id" : "4a5ba60e-b0fa-4572-90a3-aeede78ada0a",
        "parentId" : "29e62369-39b1-4694-92f2-3b8d6d3aeeef",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is also not right, you can pass a null value here, which is de-facto missing,  so need a\r\n\r\n```\r\nif isna(fill_value):\r\n    fill_value = -1\r\nelif.....\r\n```\r\n",
        "createdAt" : "2018-12-09T18:36:49Z",
        "updatedAt" : "2018-12-26T00:16:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a06362f6-c378-42d2-86b7-f4cf187a69d7",
        "parentId" : "29e62369-39b1-4694-92f2-3b8d6d3aeeef",
        "authorId" : "bf1e9aa3-448f-4bfb-ae6e-ae0babf94b7c",
        "body" : "changed",
        "createdAt" : "2018-12-09T19:49:48Z",
        "updatedAt" : "2018-12-26T00:16:53Z",
        "lastEditedBy" : "bf1e9aa3-448f-4bfb-ae6e-ae0babf94b7c",
        "tags" : [
        ]
      },
      {
        "id" : "d4d7daee-afc9-4dda-a16a-8dfbb08a116a",
        "parentId" : "29e62369-39b1-4694-92f2-3b8d6d3aeeef",
        "authorId" : "bf1e9aa3-448f-4bfb-ae6e-ae0babf94b7c",
        "body" : "changed",
        "createdAt" : "2018-12-09T19:50:33Z",
        "updatedAt" : "2018-12-26T00:16:53Z",
        "lastEditedBy" : "bf1e9aa3-448f-4bfb-ae6e-ae0babf94b7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a03cbf5e4afe65c8b6fe8a1eb1eee517d0fc5913",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1284,1288 @@            codes = np.roll(codes, ensure_platform_int(periods), axis=0)\n            if isna(fill_value):\n                fill_value = -1\n            elif fill_value in self.categories:\n                fill_value = self.categories.get_loc(fill_value)"
  },
  {
    "id" : "dd85ffd8-0b7d-4033-a3e5-4e3aee6e4de7",
    "prId" : 24128,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24128#pullrequestreview-182991907",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fa5a3c1-6737-4bfe-9004-2bd336e837ed",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see my comment below, -1 is an implementation detail and is not need to be mentioned here",
        "createdAt" : "2018-12-09T18:37:10Z",
        "updatedAt" : "2018-12-26T00:16:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6d82eda7-179b-4382-bbb4-49b5bd19eae1",
        "parentId" : "9fa5a3c1-6737-4bfe-9004-2bd336e837ed",
        "authorId" : "bf1e9aa3-448f-4bfb-ae6e-ae0babf94b7c",
        "body" : "removed",
        "createdAt" : "2018-12-09T19:48:55Z",
        "updatedAt" : "2018-12-26T00:16:53Z",
        "lastEditedBy" : "bf1e9aa3-448f-4bfb-ae6e-ae0babf94b7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a03cbf5e4afe65c8b6fe8a1eb1eee517d0fc5913",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1268,1272 @@            Number of periods to move, can be positive or negative\n        fill_value : object, optional\n            The scalar value to use for newly introduced missing values.\n\n            .. versionadded:: 0.24.0"
  },
  {
    "id" : "99e1266f-b3d0-4d8a-ae15-505d32194e11",
    "prId" : 24128,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24128#pullrequestreview-186309705",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2df1147e-e41c-42bc-91cc-54fc9955b26a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there a test for this (should raise KeyError)",
        "createdAt" : "2018-12-18T21:54:25Z",
        "updatedAt" : "2018-12-26T00:16:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d2117eab-eccd-4b0b-9169-f5fd67d4afa0",
        "parentId" : "2df1147e-e41c-42bc-91cc-54fc9955b26a",
        "authorId" : "bf1e9aa3-448f-4bfb-ae6e-ae0babf94b7c",
        "body" : "why it should raise the KeyError, we are checking that it is in the categories before we do get_loc, no?",
        "createdAt" : "2018-12-18T22:19:42Z",
        "updatedAt" : "2018-12-26T00:16:53Z",
        "lastEditedBy" : "bf1e9aa3-448f-4bfb-ae6e-ae0babf94b7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a03cbf5e4afe65c8b6fe8a1eb1eee517d0fc5913",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1286,1290 @@                fill_value = -1\n            elif fill_value in self.categories:\n                fill_value = self.categories.get_loc(fill_value)\n            else:\n                raise ValueError(\"'fill_value={}' is not present \""
  },
  {
    "id" : "e1dd6127-7573-4868-af3c-11401199767b",
    "prId" : 24128,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24128#pullrequestreview-186314882",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f66f8b7-8cca-429f-8696-a62f018d9582",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "test for this?",
        "createdAt" : "2018-12-18T21:54:33Z",
        "updatedAt" : "2018-12-26T00:16:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "21fe1ce1-ec21-48d0-9e1c-35d4b3a6d70e",
        "parentId" : "1f66f8b7-8cca-429f-8696-a62f018d9582",
        "authorId" : "bf1e9aa3-448f-4bfb-ae6e-ae0babf94b7c",
        "body" : "added to test_categorical.py",
        "createdAt" : "2018-12-18T22:35:12Z",
        "updatedAt" : "2018-12-26T00:16:53Z",
        "lastEditedBy" : "bf1e9aa3-448f-4bfb-ae6e-ae0babf94b7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a03cbf5e4afe65c8b6fe8a1eb1eee517d0fc5913",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1284,1288 @@            codes = np.roll(codes, ensure_platform_int(periods), axis=0)\n            if isna(fill_value):\n                fill_value = -1\n            elif fill_value in self.categories:\n                fill_value = self.categories.get_loc(fill_value)"
  },
  {
    "id" : "e5854f43-3fe7-4b82-90cf-abe739b1bbc7",
    "prId" : 24398,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24398#pullrequestreview-187626211",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c5ded83-da93-4d89-a072-54b506fe065b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would rather deprecate categories & ordered here in favor of dtype",
        "createdAt" : "2018-12-23T15:06:34Z",
        "updatedAt" : "2019-01-08T14:54:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "17b1b9ca-2175-4fe8-9ea7-63917212dc7d",
        "parentId" : "6c5ded83-da93-4d89-a072-54b506fe065b",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Yeah, ok, I've updated.",
        "createdAt" : "2018-12-23T16:28:42Z",
        "updatedAt" : "2019-01-08T14:54:11Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "0459ad0986e445e69819fa573def6861e0d79b3e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +604,608 @@\n    @classmethod\n    def from_codes(cls, codes, categories=None, ordered=None, dtype=None):\n        \"\"\"\n        Make a Categorical type from codes and categories or dtype."
  },
  {
    "id" : "92d3b029-7586-4b4b-9428-669535b4f5aa",
    "prId" : 24398,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24398#pullrequestreview-190206975",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b1886a5-1643-42f7-90e2-c97a92686a54",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "```suggestion\r\n            `categories` or ``dtype.categories``, or else is -1 for NaN\r\n```",
        "createdAt" : "2019-01-08T11:53:47Z",
        "updatedAt" : "2019-01-08T14:54:11Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0459ad0986e445e69819fa573def6861e0d79b3e",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +619,623 @@        codes : array-like, integers\n            An integer array, where each integer points to a category in\n            categories or dtype.categories, or else is -1 for NaN\n        categories : index-like, optional\n            The categories for the categorical. Items need to be unique."
  },
  {
    "id" : "f5313ea5-ec26-46db-9f2a-99ebbea0d83d",
    "prId" : 24680,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24680#pullrequestreview-190553850",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea5b03ed-9c23-483a-bd8a-353cd6eb6b30",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "This change shouldn't alter existing behavior, as `self` and `cat` should be identical within this branch of the `if`/`else`.  More so a defensive future-proofing change in case future modifications cause a divergence between `self` and `cat` prior to this.  All operations at this point should be in relation to `cat` anyways, as that's the object we'll be returning.",
        "createdAt" : "2019-01-09T02:34:28Z",
        "updatedAt" : "2019-01-09T02:36:16Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5ec2e7be496fe4a22b3873957ca7d17ca4024e9",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +855,859 @@                cat._codes[cat._codes >= len(new_dtype.categories)] = -1\n        else:\n            codes = _recode_for_categories(cat.codes, cat.categories,\n                                           new_dtype.categories)\n            cat._codes = codes"
  },
  {
    "id" : "47331dbf-6ecd-4b64-98fd-eba64b2f9e78",
    "prId" : 25206,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25206#pullrequestreview-201652819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dec3a57f-3b3a-499a-a559-9fb38521b5f5",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Should the first zip arg be counts[:-1]?",
        "createdAt" : "2019-02-08T05:12:43Z",
        "updatedAt" : "2019-02-09T00:54:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "60e02878-acc7-4073-9a4d-a23a48bb00a0",
        "parentId" : "dec3a57f-3b3a-499a-a559-9fb38521b5f5",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "`zip` stops when the shortest sequence is exhausted, so as written should be equivalent to if `counts[:-1]` was the first argument instead:\r\n```python\r\nIn [1]: list(zip('abcd', 'abc'))\r\nOut[1]: [('a', 'a'), ('b', 'b'), ('c', 'c')]\r\n```\r\nNot against changing if the consensus is that `counts[:-1]` is more readable though.",
        "createdAt" : "2019-02-08T05:26:17Z",
        "updatedAt" : "2019-02-09T00:54:49Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "2df66c1f-776d-407d-9274-e0f165a019fd",
        "parentId" : "dec3a57f-3b3a-499a-a559-9fb38521b5f5",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Doesn't really matter. Since the 2nd iterator is smaller than the first, `zip` will be exhausted once the second iterator is done.",
        "createdAt" : "2019-02-08T05:40:21Z",
        "updatedAt" : "2019-02-09T00:54:49Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "9ba81ee3-8b3e-4564-841f-c9f63c4720a2",
        "parentId" : "dec3a57f-3b3a-499a-a559-9fb38521b5f5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Thanks for the reminder.  I must still be used to the py2 rules",
        "createdAt" : "2019-02-08T16:01:20Z",
        "updatedAt" : "2019-02-09T00:54:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f452fb412b595d8b697722c5b8675651c34d4782",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2168,2172 @@                                               categories.size)\n        counts = counts.cumsum()\n        result = (r[start:end] for start, end in zip(counts, counts[1:]))\n        result = dict(zip(categories, result))\n        return result"
  },
  {
    "id" : "d971db23-08cb-4404-a273-6722053ae59d",
    "prId" : 26403,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26403#pullrequestreview-257102040",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b400588-faf0-4a0f-a409-31cd5929d2ed",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we really need to user the internal one here? (and all others); I *really* don't want to expose that even to our code.",
        "createdAt" : "2019-07-02T00:13:40Z",
        "updatedAt" : "2019-07-03T02:20:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7728daf3-9ce8-4016-9dba-f118e26dae70",
        "parentId" : "8b400588-faf0-4a0f-a409-31cd5929d2ed",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "See the overview that Jeremy gave above (https://github.com/pandas-dev/pandas/pull/26403#issuecomment-507351745) and this comment for more details on why `_ordered` was needed: https://github.com/pandas-dev/pandas/pull/26403#discussion_r299144624 \r\nThat explains clearly the context on why this was added, and I am fine with it.",
        "createdAt" : "2019-07-02T14:42:59Z",
        "updatedAt" : "2019-07-03T02:20:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "10dfc047-7014-4e5c-9650-6e299a7f34d4",
        "parentId" : "8b400588-faf0-4a0f-a409-31cd5929d2ed",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok that's fine then, @jschendel can you create an issue for this so we don't forget at removal time.",
        "createdAt" : "2019-07-02T18:46:16Z",
        "updatedAt" : "2019-07-03T02:20:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b962d9f6-b5a9-4db1-a928-80384a2936be",
        "parentId" : "8b400588-faf0-4a0f-a409-31cd5929d2ed",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "sure, back at work today so will create the issue later on tonight",
        "createdAt" : "2019-07-02T19:28:08Z",
        "updatedAt" : "2019-07-03T02:20:44Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "219f03cf499c18b013ccc772358ccd4d722dd4db",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +333,337 @@        if is_categorical_dtype(values):\n            if dtype.categories is None:\n                dtype = CategoricalDtype(values.categories, dtype._ordered)\n        elif not isinstance(values, (ABCIndexClass, ABCSeries)):\n            # sanitize_array coerces np.nan to a string under certain versions"
  },
  {
    "id" : "e3a3a622-4cde-453f-b782-f962efbbb8e6",
    "prId" : 26497,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26497#pullrequestreview-241422781",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1162baa0-df67-4c0e-9a40-783b8e65b82b",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can we use refs for these instead instead? I think this would be, e.g. :ref:\\`categorical\\`.",
        "createdAt" : "2019-05-23T13:06:31Z",
        "updatedAt" : "2019-05-23T13:08:59Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "23f8f1fc-fff0-4b7a-a96e-cead94e89e0d",
        "parentId" : "1162baa0-df67-4c0e-9a40-783b8e65b82b",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "I like the explicit urls in the doc strings: If in doubt after reading a doc string, I can just copy/paste the url into a browser....couldn't do that with a ref.",
        "createdAt" : "2019-05-23T19:43:44Z",
        "updatedAt" : "2019-05-23T19:43:45Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "6b7d836e-3271-43db-b628-69f103cadd5b",
        "parentId" : "1162baa0-df67-4c0e-9a40-783b8e65b82b",
        "authorId" : "2495003f-bc9d-4140-b0d4-e41900a2e828",
        "body" : "It looks like both are used in various parts of the documentation, although :ref: does seem a bit more common now that I look. Is there an agreed best practice?",
        "createdAt" : "2019-05-23T20:04:45Z",
        "updatedAt" : "2019-05-23T20:04:46Z",
        "lastEditedBy" : "2495003f-bc9d-4140-b0d4-e41900a2e828",
        "tags" : [
        ]
      }
    ],
    "commit" : "79aba222f3cdaa2ed9be9f2479991b42ce2a2520",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +273,277 @@    -----\n    See the `user guide\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html>`_\n    for more.\n"
  },
  {
    "id" : "c3e8ac11-5ef2-4d6f-843e-557768ce85d3",
    "prId" : 26721,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26721#pullrequestreview-247369846",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ec44f02-aff7-4cab-b400-f810f3b26767",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here on what is happening",
        "createdAt" : "2019-06-08T14:33:12Z",
        "updatedAt" : "2019-06-08T19:56:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "59a3c6722fe8121483389e49980d322555f89e43",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2667,2671 @@\n    if is_categorical(values):\n        values = CategoricalIndex(values)\n        # The CategoricalIndex level we want to build has the same categories\n        # as values but its codes are by def [0, ..., len(n_categories) - 1]"
  },
  {
    "id" : "39df531d-7333-4dac-a330-1c802378aadb",
    "prId" : 27026,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27026#pullrequestreview-304244934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d747fa3-da05-493b-a6ed-ef346e5dc63b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "cool, can you type & add a doc-string?",
        "createdAt" : "2019-09-09T12:35:02Z",
        "updatedAt" : "2019-11-13T02:43:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1ae547e6-c6b8-4dd4-a215-5ea5fd113fad",
        "parentId" : "8d747fa3-da05-493b-a6ed-ef346e5dc63b",
        "authorId" : "ac0af0a3-006f-4da7-a294-6b5567cb5c6a",
        "body" : "fixed (only added types for the boolean arguments in both replace functions, do the `to_replace` and `value` parameters need types?)",
        "createdAt" : "2019-10-20T07:03:51Z",
        "updatedAt" : "2019-11-13T02:43:08Z",
        "lastEditedBy" : "ac0af0a3-006f-4da7-a294-6b5567cb5c6a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4d3f8489e467c072e4d96a4e515b76f7243e7d8",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +2499,2503 @@        Categories (2, int64): [2, 3]\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        cat = self if inplace else self.copy()\n        if to_replace in cat.categories:"
  },
  {
    "id" : "738820ad-e756-441b-9326-de317ca7f896",
    "prId" : 27026,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27026#pullrequestreview-311123478",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "657af47a-4ed7-42dc-9269-68c79c209ec2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you type these more specifically (can be a followon PR)",
        "createdAt" : "2019-11-04T14:54:41Z",
        "updatedAt" : "2019-11-13T02:43:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4d3f8489e467c072e4d96a4e515b76f7243e7d8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2472,2476 @@        return algorithms.isin(self.codes, code_values)\n\n    def replace(self, to_replace, value, inplace: bool = False):\n        \"\"\"\n        Replaces all instances of one value with another"
  },
  {
    "id" : "ecff1905-602f-418b-a453-8129f155fb8c",
    "prId" : 27318,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27318#pullrequestreview-260359970",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3e11d03-e5af-4fe7-a734-1130dceb153c",
        "parentId" : null,
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "mypy is not able to infer the dtype type here, so I have to do a cast.",
        "createdAt" : "2019-07-10T06:31:48Z",
        "updatedAt" : "2019-07-24T23:41:56Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "1bfc5476-7df8-4da5-b732-137ebee29952",
        "parentId" : "c3e11d03-e5af-4fe7-a734-1130dceb153c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "For a typing dummy, can you explain why this is needed?",
        "createdAt" : "2019-07-10T20:59:11Z",
        "updatedAt" : "2019-07-24T23:41:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d30d88c9-198d-446c-b9d9-17cd9a53e4ef",
        "parentId" : "c3e11d03-e5af-4fe7-a734-1130dceb153c",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I can add something to the contributing guide about this",
        "createdAt" : "2019-07-10T21:13:01Z",
        "updatedAt" : "2019-07-24T23:41:56Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b76f27ed5edcb5f2f04004b98e936f3d86fb46bd",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +526,530 @@        \"\"\"\n        if is_categorical_dtype(dtype):\n            dtype = cast(Union[str, CategoricalDtype], dtype)\n\n            # GH 10696/18593"
  },
  {
    "id" : "a13c47ba-565a-4796-b304-d951b3717f0d",
    "prId" : 27461,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27461#pullrequestreview-264508676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8cd69c8-4954-486e-8753-549dc6645761",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "side issue, we should probably not use these as private functions, rather should just make them public (or actually hide them and make an interface); could make an issue about this.",
        "createdAt" : "2019-07-20T19:26:36Z",
        "updatedAt" : "2019-07-20T19:39:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2e186366-1a49-44da-a32d-f4b133e909ed",
        "parentId" : "b8cd69c8-4954-486e-8753-549dc6645761",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yah, ive got a branch going that de-privatizing things like this.  holding off since i have too many PRs as it is",
        "createdAt" : "2019-07-20T19:32:44Z",
        "updatedAt" : "2019-07-20T19:39:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0439f685a5e9d94121723decc7f015b8602f4366",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +52,56 @@import pandas.core.algorithms as algorithms\nfrom pandas.core.algorithms import (\n    _get_data_algo,\n    _hashtables,\n    factorize,"
  },
  {
    "id" : "1ceae871-482c-41ba-a52f-7c0de1831ab1",
    "prId" : 27633,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27633#pullrequestreview-270304049",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "826dfa60-0775-44c1-bcb8-0bd017fdd5ea",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "the default implementation does not work here? (or is this more efficient?)",
        "createdAt" : "2019-08-02T16:16:05Z",
        "updatedAt" : "2019-08-03T20:08:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "938c3466-23c2-4994-b73b-99941544cf60",
        "parentId" : "826dfa60-0775-44c1-bcb8-0bd017fdd5ea",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is more efficient, yes (note the fastpath kwarg)",
        "createdAt" : "2019-08-02T16:44:36Z",
        "updatedAt" : "2019-08-03T20:08:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f7170925-6dff-4aea-bb6c-c62e2c80216a",
        "parentId" : "826dfa60-0775-44c1-bcb8-0bd017fdd5ea",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add a note for that? (eg \"override base implementation to use fastpath\")",
        "createdAt" : "2019-08-02T17:29:43Z",
        "updatedAt" : "2019-08-03T20:08:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "c44aada5f9c45da39457b2059608852127e59e86",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +1761,1765 @@        if dtype is not None:\n            raise NotImplementedError(dtype)\n        return self._constructor(values=self._codes, dtype=self.dtype, fastpath=True)\n\n    def to_dense(self):"
  },
  {
    "id" : "a1c28853-9645-4349-88eb-60a1a78602be",
    "prId" : 27791,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27791#pullrequestreview-272572833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc9a69da-a320-4822-9bd2-cbdd08dd4223",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "IIRC @jschendel didn't we just change this to make a perf fix? is this change compat with that",
        "createdAt" : "2019-08-07T13:15:07Z",
        "updatedAt" : "2019-08-07T13:16:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8be0d6f1-90f9-42ea-9915-fd60bde0a17b",
        "parentId" : "bc9a69da-a320-4822-9bd2-cbdd08dd4223",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I put together this version by looking at the old version and taking out the non-executed paths.  So this shouldn't take a hti",
        "createdAt" : "2019-08-07T17:17:11Z",
        "updatedAt" : "2019-08-07T17:17:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "886223b3-24b7-44a6-8e20-f9317395d728",
        "parentId" : "bc9a69da-a320-4822-9bd2-cbdd08dd4223",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "@jreback : I think you're referring to #27669, which should not be impacted by this.",
        "createdAt" : "2019-08-07T19:00:25Z",
        "updatedAt" : "2019-08-07T19:00:26Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "6004bf6e-50e9-49e9-af67-4b859cf37078",
        "parentId" : "bc9a69da-a320-4822-9bd2-cbdd08dd4223",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "OT: we *might* be able to remove is_categorical entirely?",
        "createdAt" : "2019-08-08T12:36:20Z",
        "updatedAt" : "2019-08-08T12:36:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7343afa4-a302-4d2f-ac22-438565320615",
        "parentId" : "bc9a69da-a320-4822-9bd2-cbdd08dd4223",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah we should.  Will need to be deprecated since its in the API",
        "createdAt" : "2019-08-08T13:32:54Z",
        "updatedAt" : "2019-08-08T13:32:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c118ac382155d4ba351e53428b7510be13f263d4",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +2728,2732 @@        raise TypeError(\"Input must be list-like\")\n\n    if is_categorical_dtype(values):\n        values = extract_array(values)\n        # The Categorical we want to build has the same categories"
  },
  {
    "id" : "ba19fd02-6d98-4d55-b5e2-42b22bc549b4",
    "prId" : 27929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27929#pullrequestreview-322764279",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b25a5591-4358-4080-8ac9-34e4870f6cc7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is not correct for i8 types, which should be pd.NaT. how to fix this?",
        "createdAt" : "2019-11-25T23:06:51Z",
        "updatedAt" : "2019-12-02T09:38:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ee4e556d-3d06-4a92-9147-c6370a1796e1",
        "parentId" : "b25a5591-4358-4080-8ac9-34e4870f6cc7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "We could check the `categories.dtype.na_value` if it exists. But since this is the current behaviour, it's not critical to fix in this PR I think.",
        "createdAt" : "2019-11-26T07:07:04Z",
        "updatedAt" : "2019-12-02T09:38:06Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "260201cf5bc2419a229222f2258a4bb6d31b988c",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +2180,2184 @@                pointer = self._codes[good].min()\n            else:\n                return np.nan\n        else:\n            pointer = self._codes.min()"
  },
  {
    "id" : "233f79f4-03c6-4752-b63d-3f1014e1c966",
    "prId" : 28037,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28037#pullrequestreview-279899339",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3fbb779-859f-4545-8393-6000edfd56be",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Not urgent but if you modify this again would be nice to clean up comment below",
        "createdAt" : "2019-08-26T23:56:51Z",
        "updatedAt" : "2019-11-14T00:48:45Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "bf543091-a0fe-4775-a66a-13bd0919e86f",
        "parentId" : "a3fbb779-859f-4545-8393-6000edfd56be",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "good idea",
        "createdAt" : "2019-08-27T00:15:45Z",
        "updatedAt" : "2019-11-14T00:48:45Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc2c0d57c3f9f7f3a6f3b9bd1e7bb811ce85d4ff",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +78,82 @@    @unpack_zerodim_and_defer(opname)\n    def f(self, other):\n        # On python2, you can usually compare any type to any type, and\n        # Categoricals can be seen as a custom type, but having different\n        # results depending whether categories are the same or not is kind of"
  },
  {
    "id" : "782b518f-7c78-4754-b16c-fe617ba2df04",
    "prId" : 28438,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28438#pullrequestreview-289419636",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60302881-187f-4eb9-893c-0886ee3d5e83",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Kinda pedantic, but we can have other NA values here.\r\n\r\n```python\r\nIn [18]: cat = pd.Categorical([pd.Timestamp('2000'), pd.NaT])\r\n```\r\n\r\nIn this case, it's not a float that we're refusing to cast. So perhaps `Cannot convert NA to integer`.",
        "createdAt" : "2019-09-17T17:01:29Z",
        "updatedAt" : "2019-09-17T17:21:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "47693751-8dce-4c20-aa51-458035bcca1d",
        "parentId" : "60302881-187f-4eb9-893c-0886ee3d5e83",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Agree this seems more correct; do we want to think about consistency with `Series` as @jreback pointed out above?  Incidentally I just noticed that `Series` seems to be misbehaving as well in this special case, so probably worth a separate issue or PR:\r\n```python\r\n[ins] In [5]: pd.Series([pd.Timestamp(\"2000\"), pd.NaT]).astype(int)             \r\nOut[5]: \r\n0     946684800000000000\r\n1   -9223372036854775808\r\ndtype: int64\r\n```",
        "createdAt" : "2019-09-17T17:16:03Z",
        "updatedAt" : "2019-09-17T17:21:20Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "754a3edcd632fe9b17adeaf05680be7eeae31bcd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +522,526 @@            return self._set_dtype(dtype)\n        if is_integer_dtype(dtype) and self.isna().any():\n            msg = \"Cannot convert float NaN to integer\"\n            raise ValueError(msg)\n        return np.array(self, dtype=dtype, copy=copy)"
  },
  {
    "id" : "de6e0a78-9ecb-4db8-8d48-49ff15abbda4",
    "prId" : 28762,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28762#pullrequestreview-297811953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54afa227-2108-43a9-bb0e-dbb706b85159",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe the following an elif",
        "createdAt" : "2019-10-05T23:06:42Z",
        "updatedAt" : "2019-10-07T00:37:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "261854062c4e5a3cc4cbd6aa64211db7241e57e6",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +522,526 @@            return self._set_dtype(dtype)\n        if is_extension_array_dtype(dtype):\n            return array(self, dtype=dtype, copy=copy)  # type: ignore # GH 28770\n        if is_integer_dtype(dtype) and self.isna().any():\n            msg = \"Cannot convert float NaN to integer\""
  },
  {
    "id" : "988461dc-f49b-487f-8d76-61dcbe79ff61",
    "prId" : 28795,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28795#pullrequestreview-297811050",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8c2b05e-c202-4a8a-97d5-fcaef3e97f22",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "lgtm, i would add a comment here that this is perf sensitive",
        "createdAt" : "2019-10-05T22:29:07Z",
        "updatedAt" : "2019-10-06T05:55:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f4a9ab1063e656f4560c0ae44c7f1bfa62c6e44",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1402,1406 @@        # searchsorted is very performance sensitive. By converting codes\n        # to same dtype as self.codes, we get much faster performance.\n        if is_scalar(value):\n            codes = self.categories.get_loc(value)\n            codes = self.codes.dtype.type(codes)"
  },
  {
    "id" : "c483d826-67a0-4d88-b5da-4003cd61961f",
    "prId" : 29820,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29820#pullrequestreview-321935858",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6226ecd6-11e9-44e7-b430-bcb020237441",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Do we have a performance test for this?",
        "createdAt" : "2019-11-23T23:56:08Z",
        "updatedAt" : "2019-11-24T00:47:27Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "3fc48cad-67bb-415e-b0b6-c2b8cb6dfa8a",
        "parentId" : "6226ecd6-11e9-44e7-b430-bcb020237441",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "No, no ASV's for this ATM. I actually can't get ASV to run locally, maybe a Windows issue?\r\n\r\nAnyway, I've added I've a ASV test set, but haven't been able to run it myself, unforfunately. Isn't there a web page, where we post ASVs?",
        "createdAt" : "2019-11-24T00:50:40Z",
        "updatedAt" : "2019-11-24T00:50:59Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c4126895fe6c1c49994cd008573e3a9a5ffad9c",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +125,129 @@                    # check for NaN needed if we are not equal or larger\n                    mask = self._codes == -1\n                    ret[mask] = False\n                return ret\n            else:"
  },
  {
    "id" : "36b89049-5b71-422b-bff3-8b2d784def10",
    "prId" : 29989,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29989#pullrequestreview-326326264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08621d38-6220-4a4e-8db0-519bac4fc400",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add part of the above docstring to this method? (the interesting parts for internal use, eg what it returns)\r\n\r\n(and potentially the same comment for some of the other cases below)",
        "createdAt" : "2019-12-03T10:32:33Z",
        "updatedAt" : "2019-12-04T17:27:09Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "5e0104d4-7a4b-4988-844d-d4654b4be7d7",
        "parentId" : "08621d38-6220-4a4e-8db0-519bac4fc400",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "good idea",
        "createdAt" : "2019-12-03T17:38:49Z",
        "updatedAt" : "2019-12-04T17:27:09Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd346df08f6a639afab49057255b441783fa561c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1460,1464 @@        return Series(count, index=CategoricalIndex(ix), dtype=\"int64\")\n\n    def _internal_get_values(self):\n        \"\"\"\n        Return the values."
  },
  {
    "id" : "7b91c256-e367-46cc-8883-947b030ea23a",
    "prId" : 30588,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30588#pullrequestreview-340811664",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fcfad7c-701b-4afa-a343-91fb2ac3c79d",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This should also raise a warning? \r\n\r\n(but adding the warning is not a blocker for the RC, since that's a future deprecation, as long as the behaviour change is already there)",
        "createdAt" : "2020-01-09T19:38:01Z",
        "updatedAt" : "2020-01-09T19:55:00Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "82c16e50-0132-427b-971f-5027a7bd9d97",
        "parentId" : "5fcfad7c-701b-4afa-a343-91fb2ac3c79d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Actually, we are returning plain integer codes here, which doesn't look good.\r\n\r\nAnd checked with 0.25, and there multi-dim indexing on categorical/categoricalindex basically fails (it \"returns\", but whenever you do something it gives an error; even converting to the result to a numpy array (the original matplotlib use case for the 2d indexing) fails). \r\nSo I would also raise an error here, like you did for some other arrays.",
        "createdAt" : "2020-01-09T19:45:37Z",
        "updatedAt" : "2020-01-09T19:55:00Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e5ef9b4a-018c-4487-8c13-70b0c42f7269",
        "parentId" : "5fcfad7c-701b-4afa-a343-91fb2ac3c79d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Agreed this should raise to match Interval. Will push an update.",
        "createdAt" : "2020-01-09T20:15:51Z",
        "updatedAt" : "2020-01-09T20:15:52Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "71fb87f2-01f7-43f7-be38-407adfb0e758",
        "parentId" : "5fcfad7c-701b-4afa-a343-91fb2ac3c79d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It's not straightforward, as actually this already gets catched before in the boolean checking ..",
        "createdAt" : "2020-01-09T20:18:01Z",
        "updatedAt" : "2020-01-09T20:18:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "aa72c209-15c5-43d1-80af-727162aeb564",
        "parentId" : "5fcfad7c-701b-4afa-a343-91fb2ac3c79d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "(I would be fine with doing a clean-up for my comments in a follow-up PR)",
        "createdAt" : "2020-01-09T20:18:20Z",
        "updatedAt" : "2020-01-09T20:18:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b70dea06-ecc2-4ed1-b5bc-35765ec77a74",
        "parentId" : "5fcfad7c-701b-4afa-a343-91fb2ac3c79d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah, this is a bit tricky. Will look a bit longer.",
        "createdAt" : "2020-01-09T20:37:27Z",
        "updatedAt" : "2020-01-09T20:37:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "8144626c-c0ce-47e3-8a66-9dfef6e72530",
        "parentId" : "5fcfad7c-701b-4afa-a343-91fb2ac3c79d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "this raised an error in 0.25, it raises a different (but wrong) error now, so I think fine to do in a follow-up",
        "createdAt" : "2020-01-09T20:39:17Z",
        "updatedAt" : "2020-01-09T20:39:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4c45b381-a5a0-4254-a97a-8c46eecb4b1e",
        "parentId" : "5fcfad7c-701b-4afa-a343-91fb2ac3c79d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'm very confused by what's going on with with `Series.__getitem__` here. Are we OK with changing this for categorical after the RC?",
        "createdAt" : "2020-01-09T21:02:05Z",
        "updatedAt" : "2020-01-09T21:02:06Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "74dffbedacb34bde7e5a8fb2396e0fef9efac499",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +2010,2014 @@        result = self._codes[key]\n        if result.ndim > 1:\n            return result\n        return self._constructor(result, dtype=self.dtype, fastpath=True)\n"
  },
  {
    "id" : "ea774582-999a-4685-b5d8-09001e39e487",
    "prId" : 31734,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31734#pullrequestreview-355632130",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "453a3a83-0774-4ae0-b7c6-642367c99a74",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some comments here on the procure for what you are doing.",
        "createdAt" : "2020-02-09T17:26:53Z",
        "updatedAt" : "2020-02-17T00:22:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4520e609-1376-4c95-a743-7082972c1586",
        "parentId" : "453a3a83-0774-4ae0-b7c6-642367c99a74",
        "authorId" : "ac0af0a3-006f-4da7-a294-6b5567cb5c6a",
        "body" : "fixed, added comments around `replace_dict` generation",
        "createdAt" : "2020-02-09T20:42:41Z",
        "updatedAt" : "2020-02-17T00:22:48Z",
        "lastEditedBy" : "ac0af0a3-006f-4da7-a294-6b5567cb5c6a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a2e12d1eee0b7a5309b40f2a67ba783e85523a5",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +2443,2447 @@\n        # build a dict of (to replace -> value) pairs\n        if is_list_like(to_replace):\n            # if to_replace is list-like and value is scalar\n            replace_dict = {replace_value: value for replace_value in to_replace}"
  },
  {
    "id" : "91864170-eb13-43cc-aebc-d5dca0f27474",
    "prId" : 31734,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31734#pullrequestreview-358909728",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1545bc26-cd69-4b0a-b71d-420a57525ad7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "move the isna check first as it an never be true by definition (no nulls in categories); also simplifies the logic slightly\r\n\r\n```\r\n\r\nif isna(….):\r\n    ….\r\n   continue\r\n\r\n….rest of logic\r\n```",
        "createdAt" : "2020-02-12T12:42:48Z",
        "updatedAt" : "2020-02-17T00:22:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4cdd4b2f-b84a-483b-a73e-3c226fd8141e",
        "parentId" : "1545bc26-cd69-4b0a-b71d-420a57525ad7",
        "authorId" : "ac0af0a3-006f-4da7-a294-6b5567cb5c6a",
        "body" : "@jreback This breaks a lot of other tests. I think isna should be allowed. The [documentation](https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html) says \"All values of categorical data are either in categories or np.nan\"\r\n\r\nPS I merged master",
        "createdAt" : "2020-02-14T03:49:27Z",
        "updatedAt" : "2020-02-17T00:22:48Z",
        "lastEditedBy" : "ac0af0a3-006f-4da7-a294-6b5567cb5c6a",
        "tags" : [
        ]
      },
      {
        "id" : "84fd7b44-85d7-478f-a03d-4e6999c79137",
        "parentId" : "1545bc26-cd69-4b0a-b71d-420a57525ad7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you are missing my point. you simply need to reorganize, its the same condition w/o the dedent",
        "createdAt" : "2020-02-14T12:32:14Z",
        "updatedAt" : "2020-02-17T00:22:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a2e12d1eee0b7a5309b40f2a67ba783e85523a5",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +2454,2458 @@        for replace_value, new_value in replace_dict.items():\n            if replace_value in cat.categories:\n                if isna(new_value):\n                    cat.remove_categories(replace_value, inplace=True)\n                    continue"
  },
  {
    "id" : "b4d94e2c-8e6e-4ab3-8cb9-dd55294514a4",
    "prId" : 31734,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31734#pullrequestreview-359408333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1564027-7c7a-47d2-94f3-d13200130350",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you put a blank line here (before other cases), and remove the one before the for loop. Its just confusing where the comment applies now",
        "createdAt" : "2020-02-16T14:47:03Z",
        "updatedAt" : "2020-02-17T00:22:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a2e12d1eee0b7a5309b40f2a67ba783e85523a5",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +2450,2454 @@            replace_dict = {to_replace: value}\n\n        # other cases, like if both to_replace and value are list-like or if\n        # to_replace is a dict, are handled separately in NDFrame\n        for replace_value, new_value in replace_dict.items():"
  },
  {
    "id" : "d7b17dc3-a12b-4c6a-9dd1-b884fd61602e",
    "prId" : 31794,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31794#pullrequestreview-356614057",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee6a7435-ddb3-4558-aa59-1cee4e4b0ed9",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm does this universally work if we just call `to_numpy`? I suppose could copy where undesired but maybe better than if...else branching",
        "createdAt" : "2020-02-08T00:53:43Z",
        "updatedAt" : "2020-02-11T19:45:08Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "47b4164d-4809-49db-b97e-a4206f4cd06b",
        "parentId" : "ee6a7435-ddb3-4558-aa59-1cee4e4b0ed9",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Yeah the if / else isn't too pretty but I think we have to worry if `codes` is a numpy array already or possibly a bare list. Ideally it'd be nice to just do `pd.array(codes)` instead of `np.asarray(codes)`, but it looks like `min` and `max` haven't been implemented yet for IntegerArray so we get an error soon after.",
        "createdAt" : "2020-02-08T01:25:56Z",
        "updatedAt" : "2020-02-11T19:45:08Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "3a72cdd1-74bf-4d41-b375-5539f170b6b3",
        "parentId" : "ee6a7435-ddb3-4558-aa59-1cee4e4b0ed9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In principle we could do a `pd.array(codes).to_numpy(\"int64\")`\r\nBut a problem with that is that it will convert an already integer array of potentially lower bitsize than int64",
        "createdAt" : "2020-02-08T10:43:48Z",
        "updatedAt" : "2020-02-11T19:45:08Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9c122604-aff1-472f-b73c-acb09c4e68d6",
        "parentId" : "ee6a7435-ddb3-4558-aa59-1cee4e4b0ed9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Has numpy a concept of \"any integer dtype\"? \r\nBecause then we could also simply do `codes = np.asarray(codes, dtype=\"any int\")`\r\n\r\nAnother option could be this (to avoid converting an already int ndarray to int64)::\r\n\r\n```\r\nif not isinstance(codes, np.ndarray):\r\n    codes = np.asarray(codes, dtype=\"int64\")\r\n```\r\n\r\nwhich seems simpler as what you have now",
        "createdAt" : "2020-02-08T10:48:44Z",
        "updatedAt" : "2020-02-11T19:45:08Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f291a0dc-1c4f-4a95-8c47-35c9975e166e",
        "parentId" : "ee6a7435-ddb3-4558-aa59-1cee4e4b0ed9",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "> Another option could be this (to avoid converting an already int ndarray to int64)::\r\n> \r\n> ```\r\n> if not isinstance(codes, np.ndarray):\r\n>     codes = np.asarray(codes, dtype=\"int64\")\r\n> ```\r\n> \r\n> which seems simpler as what you have now\r\n\r\nI think we want it to raise if codes is something like `[0.0, 1.0, 2.0]` but this would make it a valid input",
        "createdAt" : "2020-02-08T15:16:36Z",
        "updatedAt" : "2020-02-11T19:45:08Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "7e1925cd-ed3a-403a-b114-aeb339ce95ea",
        "parentId" : "ee6a7435-ddb3-4558-aa59-1cee4e4b0ed9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> I think we want it to raise if codes is something like [0.0, 1.0, 2.0] but this would make it a valid input\r\n\r\nAh, yes indeed...\r\n\r\n(we should probably try to gather some of those situations we run into handling array-like input including nullable dtypes, to see if we can extract some useful helpers for those cases)",
        "createdAt" : "2020-02-11T12:27:10Z",
        "updatedAt" : "2020-02-11T19:45:08Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9edcfb9058fbc00be88415163f59add3dfcf396",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +645,649 @@            raise ValueError(msg)\n\n        if is_extension_array_dtype(codes) and is_integer_dtype(codes):\n            # Avoid the implicit conversion of Int to object\n            if isna(codes).any():"
  }
]