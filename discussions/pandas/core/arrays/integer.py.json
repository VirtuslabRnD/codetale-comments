[
  {
    "id" : "1b19df9c-e074-46f1-8f5d-e64741ff1a36",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-135215068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89d6e3ca-6e2e-46c1-8a13-a5715433488e",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Document what the mask indicates (indices of missing values missing values I assume).",
        "createdAt" : "2018-05-24T01:18:26Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "8b867fa7-803c-47f8-b34f-18dcd699821f",
        "parentId" : "89d6e3ca-6e2e-46c1-8a13-a5715433488e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "done",
        "createdAt" : "2018-07-07T21:41:46Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +126,130 @@    values : 1D list-like\n    dtype : integer dtype\n    mask : boolean 1D array, optional\n    copy : boolean, default False\n        if True, copy the input"
  },
  {
    "id" : "08325565-8d73-4a9f-a2b9-cccf8dd77b9b",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-123195484",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2b6725d-852f-4329-bdcf-12ba75c78106",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "should this raise a ValueError instead of AssertionError?",
        "createdAt" : "2018-05-24T18:50:19Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "298eaef4-1767-48cc-98e5-c6b43744e8cc",
        "parentId" : "c2b6725d-852f-4329-bdcf-12ba75c78106",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no, this is an internal construction error, need to satisfy the input guarantees",
        "createdAt" : "2018-05-24T22:32:53Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 168,
    "diffHunk" : "@@ -1,1 +166,170 @@        mask = isna(values)\n    else:\n        assert len(mask) == len(values)\n\n    if not values.ndim == 1:"
  },
  {
    "id" : "6bebc52f-240e-4903-a630-4473d1b16a02",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-135207573",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "176109ea-c218-467b-952f-4a47df25bc61",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "In `core.ops` many things first attempt to dispatch to `expressions.evaluate` for `numexpr` boost.  Is that worth implementing here?  (this also comes up in the ongoing effort to make sure Index and Series arith ops behave identically)",
        "createdAt" : "2018-07-07T15:09:14Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7756ab63-e7b1-4534-90b4-bf6f51b188f1",
        "parentId" : "176109ea-c218-467b-952f-4a47df25bc61",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "for EA I think directly to here is best, the the EA author can choose what to do. If we want to expose some helpers in core/ops would be great though",
        "createdAt" : "2018-07-07T15:36:51Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 530,
    "diffHunk" : "@@ -1,1 +528,532 @@    @classmethod\n    def _create_arithmetic_method(cls, op):\n        def integer_arithmetic_method(self, other):\n\n            op_name = op.__name__"
  },
  {
    "id" : "88feb5a2-bdac-48d8-b600-5fea60cef943",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-135610328",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf8f9f06-f8cd-4949-9ff7-ecc1b017fa8f",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "should import `range` from `pandas.compat` to make this lazy in py2",
        "createdAt" : "2018-07-09T19:54:24Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "be4b5366-2729-4e83-9ebb-1ebc4718fe37",
        "parentId" : "bf8f9f06-f8cd-4949-9ff7-ecc1b017fa8f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "done",
        "createdAt" : "2018-07-09T22:06:12Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 266,
    "diffHunk" : "@@ -1,1 +264,268 @@        # arrays as list-like. The default implementation makes successive\n        # calls to ``__getitem__``, which may be slower than necessary.\n        for i in range(len(self)):\n            if self._mask[i]:\n                yield self.dtype.na_value"
  },
  {
    "id" : "2437cd0e-d6ae-4218-aa05-65d714b17eae",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-139192389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d84f2cbf-8474-420f-9034-1ed96a5521dc",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would make the constructor here a simple setting of `self._data, self._mask = values, mask`. \r\nThe `coerce_to_array` is doing a lot more than is needed for constructing the IntegerArray if you already have a correct values and mask, and we can use `coerce_to_array` explicitly there were this is not the case.",
        "createdAt" : "2018-07-10T03:36:20Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a9e49f8e-ef90-4224-864c-d8e64125ce73",
        "parentId" : "d84f2cbf-8474-420f-9034-1ed96a5521dc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is not possible, as quite a lot of checking / coercion needs to occur on the input. e.g. make it an ndarray if not, coerce dtype. this is the point of ``coerce_to_array``, to make it DRY (as I also have to do this with setitem).",
        "createdAt" : "2018-07-11T10:04:11Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ea57cda2-7797-4b9c-8a99-522a5bdf5f83",
        "parentId" : "d84f2cbf-8474-420f-9034-1ed96a5521dc",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It *is* possible, just a different API design choice. \r\nI personally think it makes it cleaner code-wise, to clearly separate those case where coercion and checking is needed (there we would still use `coerce_to_array` or another method calling that under the hood) and those internal places where it is not needed (as those also exist: eg getitem). \r\nIt is very similar to the `fastpath` keyword in many constructors, but I think we agree on is not a good design to mix both in the same constructor.",
        "createdAt" : "2018-07-11T21:30:38Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4aba1854-68d3-4356-bd2a-89edd16560ac",
        "parentId" : "d84f2cbf-8474-420f-9034-1ed96a5521dc",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "I agree with @jorisvandenbossche, we certainly could make a simpler constructor which doesn't call `coerce_to_array()` internally. This is a perfect use case for an alternative constructor, e.g., `IntegerArray.from_values()`.\r\n\r\nIn general I think this is a better/cleaner pattern to use for internal APIs in pandas, because it involves less introspection (which tends to be error/bug prone).",
        "createdAt" : "2018-07-11T21:39:21Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "b8d6e07f-9b1d-4453-9cd4-731a033cb35f",
        "parentId" : "d84f2cbf-8474-420f-9034-1ed96a5521dc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "did you see my response above?",
        "createdAt" : "2018-07-11T21:40:56Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8e8ce538-fbef-4dfb-be36-675d3e60bfcf",
        "parentId" : "d84f2cbf-8474-420f-9034-1ed96a5521dc",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "`pd.Series(array, dtype='Int64')` could call `IntegerArray.from_values(array, dtype='Int64')` internally. It doesn't need to call the `IntegerArray()` constructor directly.",
        "createdAt" : "2018-07-11T21:51:22Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "25b3f5ff-059e-418a-9d4a-62356a645fc9",
        "parentId" : "d84f2cbf-8474-420f-9034-1ed96a5521dc",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you respond here further?",
        "createdAt" : "2018-07-20T20:21:27Z",
        "updatedAt" : "2018-07-20T20:49:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 223,
    "diffHunk" : "@@ -1,1 +221,225 @@        \"\"\"\n        self._data, self._mask = coerce_to_array(\n            values, dtype=dtype, mask=mask, copy=copy)\n\n    @classmethod"
  },
  {
    "id" : "dff92710-ebec-41ee-ac45-123e12ad54d3",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-135659346",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4897cd8c-fc4c-4ce2-aabb-c7b20fc30652",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you specify when what is returned?",
        "createdAt" : "2018-07-10T03:47:41Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 376,
    "diffHunk" : "@@ -1,1 +374,378 @@        -------\n        array : ndarray or IntegerArray\n            NumPy ndarray or IntergerArray with 'dtype' for its dtype.\n\n        Raises"
  },
  {
    "id" : "61265eeb-471e-4872-8a67-fc35078a96c8",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-139192389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fa18e22-98a6-44cd-9297-93e3fdccd08e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you give this an explanation summary?",
        "createdAt" : "2018-07-10T04:03:51Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e94dc819-3c40-4047-b495-f3e3884fdb65",
        "parentId" : "8fa18e22-98a6-44cd-9297-93e3fdccd08e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This one",
        "createdAt" : "2018-07-20T20:38:14Z",
        "updatedAt" : "2018-07-20T20:49:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 505,
    "diffHunk" : "@@ -1,1 +503,507 @@    def _maybe_mask_result(self, result, mask, other, op_name):\n        \"\"\"\n        Parameters\n        ----------\n        result : array-like"
  },
  {
    "id" : "30c68123-3568-4bb4-b162-148960bf3861",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-137634213",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e99bfd1-fd83-464f-b062-555ac6f9c9ec",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Without trying to overcomplicated things have we considered moving some of these items to a `MaskedEAMixin`? I'm thinking of taking a stab at the Boolean EA next and can see this being generalizable along with a few other methods (`__iter__`, `__setitem__`, perhaps `take`, etc...)",
        "createdAt" : "2018-07-16T23:20:11Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b444dd19-23a4-4ecf-a5ac-908a3239a2c5",
        "parentId" : "1e99bfd1-fd83-464f-b062-555ac6f9c9ec",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "certainly could, though I think might be better just to just directly subclass ``IntegerArray`` and the dtype, but that's for another PR :>",
        "createdAt" : "2018-07-16T23:36:30Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 233,
    "diffHunk" : "@@ -1,1 +231,235 @@        return cls(values, dtype=original.dtype)\n\n    def __getitem__(self, item):\n        if is_integer(item):\n            if self._mask[item]:"
  },
  {
    "id" : "37652fb5-7109-42eb-940d-83fe5686c593",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-139192389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f05f5a7-80e3-4480-943d-ad1d57fabba0",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> False is missing\r\n\r\nI don't think this is true currently?\r\n\r\nBut given the discussion earlier, I think it would be good to actually implement what you stated there to follow the example of arrow?",
        "createdAt" : "2018-07-20T20:26:59Z",
        "updatedAt" : "2018-07-20T20:49:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 202,
    "diffHunk" : "@@ -1,1 +200,204 @@    We represent an IntegerArray with 2 numpy arrays\n    - data: contains a numpy integer array of the appropriate dtype\n    - mask: a boolean array holding a mask on the data, False is missing\n    \"\"\"\n"
  },
  {
    "id" : "c1d680c6-81c8-404f-9cf1-b03110f03827",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-139192389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33b18e66-fc55-485f-b03d-3a3ca2a839cb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Should we treat converting to float separately here? (that could be easily made more performant, as a probably common use case for astype)",
        "createdAt" : "2018-07-20T20:35:28Z",
        "updatedAt" : "2018-07-20T20:49:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 394,
    "diffHunk" : "@@ -1,1 +392,396 @@        # coerce\n        data = self._coerce_to_ndarray()\n        return data.astype(dtype=dtype, copy=False)\n\n    @property"
  },
  {
    "id" : "611b495d-99ef-4f0d-a967-bb09cb13936f",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-139192389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e44dc32-da76-443f-83b6-4ab3177b4be9",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Do we want to catch those warnings if it will raise in the future?",
        "createdAt" : "2018-07-20T20:37:55Z",
        "updatedAt" : "2018-07-20T20:49:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 487,
    "diffHunk" : "@@ -1,1 +485,489 @@            # numpy will show a DeprecationWarning on invalid elementwise\n            # comparisons, this will raise in the future\n            with warnings.catch_warnings(record=True):\n                with np.errstate(all='ignore'):\n                    result = op(self._data, other)"
  },
  {
    "id" : "a44d6e4d-5d19-451f-8554-5315317ade0b",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-139192389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3efd5784-3a44-4266-ac3c-8e78804a0488",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Should we try to convert to IntegerArray here if possible? \r\neg `s + s.tolist()` gives floats (in case `s` is a series with int-na dtype)",
        "createdAt" : "2018-07-20T20:39:08Z",
        "updatedAt" : "2018-07-20T20:49:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 543,
    "diffHunk" : "@@ -1,1 +541,545 @@                    \"can only perform ops with 1-d structures\")\n            elif is_list_like(other):\n                other = np.asarray(other)\n                if not other.ndim:\n                    other = other.item()"
  },
  {
    "id" : "c168e777-d304-4add-8549-d3790c537234",
    "prId" : 22070,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22070#pullrequestreview-141316627",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bf46aa1-a4c5-4a78-ad36-f337bf3aed22",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you update doc-string",
        "createdAt" : "2018-07-28T13:03:46Z",
        "updatedAt" : "2018-08-14T15:59:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5948ae5d3a89a5e8418210d00de9fe29c0faa0ea",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +80,84 @@def integer_array(values, dtype=None, copy=False):\n    \"\"\"\n    Infer and return an integer array of the values.\n\n    Parameters"
  },
  {
    "id" : "f62058dc-430d-42c2-840f-08902d5caa97",
    "prId" : 22070,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22070#pullrequestreview-141316627",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e076f3c-8211-4e57-8102-ce75fd053d09",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there still a ref to to_integer_array? (I see it in the diff, but I also see that you changed it above)",
        "createdAt" : "2018-07-28T13:06:06Z",
        "updatedAt" : "2018-08-14T15:59:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5948ae5d3a89a5e8418210d00de9fe29c0faa0ea",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +96,100 @@    ------\n    TypeError if incompatible types\n    \"\"\"\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\n    return IntegerArray(values, mask)"
  },
  {
    "id" : "4d682748-df0a-4efa-862e-4753b3da3a5e",
    "prId" : 22070,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22070#pullrequestreview-141317702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c72e580-7334-4269-a7b8-80f66083482d",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback additional question: what do you find of writing `IntegerArray(...)` instead of `type(self)(...)` ? \r\n\r\nPython perfectly allows that (and is the same here, as we don't subclass this one further), and I personally find that easier to read.",
        "createdAt" : "2018-07-28T13:49:34Z",
        "updatedAt" : "2018-08-14T15:59:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "83edbd44-7381-4c31-9721-b680dc9e4982",
        "parentId" : "8c72e580-7334-4269-a7b8-80f66083482d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I like using ``type()`` as I expect this to be subclasses for ``BooleanArray``, though it could be that this not needed for that, but want to keep open that possiblitiy.",
        "createdAt" : "2018-07-28T13:53:29Z",
        "updatedAt" : "2018-08-14T15:59:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5948ae5d3a89a5e8418210d00de9fe29c0faa0ea",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +258,262 @@                return self.dtype.na_value\n            return self._data[item]\n        return type(self)(self._data[item], self._mask[item])\n\n    def _coerce_to_ndarray(self):"
  }
]