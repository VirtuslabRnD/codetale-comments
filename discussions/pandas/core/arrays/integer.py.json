[
  {
    "id" : "1b19df9c-e074-46f1-8f5d-e64741ff1a36",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-135215068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89d6e3ca-6e2e-46c1-8a13-a5715433488e",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Document what the mask indicates (indices of missing values missing values I assume).",
        "createdAt" : "2018-05-24T01:18:26Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "8b867fa7-803c-47f8-b34f-18dcd699821f",
        "parentId" : "89d6e3ca-6e2e-46c1-8a13-a5715433488e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "done",
        "createdAt" : "2018-07-07T21:41:46Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +126,130 @@    values : 1D list-like\n    dtype : integer dtype\n    mask : boolean 1D array, optional\n    copy : boolean, default False\n        if True, copy the input"
  },
  {
    "id" : "08325565-8d73-4a9f-a2b9-cccf8dd77b9b",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-123195484",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2b6725d-852f-4329-bdcf-12ba75c78106",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "should this raise a ValueError instead of AssertionError?",
        "createdAt" : "2018-05-24T18:50:19Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "298eaef4-1767-48cc-98e5-c6b43744e8cc",
        "parentId" : "c2b6725d-852f-4329-bdcf-12ba75c78106",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no, this is an internal construction error, need to satisfy the input guarantees",
        "createdAt" : "2018-05-24T22:32:53Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 168,
    "diffHunk" : "@@ -1,1 +166,170 @@        mask = isna(values)\n    else:\n        assert len(mask) == len(values)\n\n    if not values.ndim == 1:"
  },
  {
    "id" : "6bebc52f-240e-4903-a630-4473d1b16a02",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-135207573",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "176109ea-c218-467b-952f-4a47df25bc61",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "In `core.ops` many things first attempt to dispatch to `expressions.evaluate` for `numexpr` boost.  Is that worth implementing here?  (this also comes up in the ongoing effort to make sure Index and Series arith ops behave identically)",
        "createdAt" : "2018-07-07T15:09:14Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7756ab63-e7b1-4534-90b4-bf6f51b188f1",
        "parentId" : "176109ea-c218-467b-952f-4a47df25bc61",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "for EA I think directly to here is best, the the EA author can choose what to do. If we want to expose some helpers in core/ops would be great though",
        "createdAt" : "2018-07-07T15:36:51Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 530,
    "diffHunk" : "@@ -1,1 +528,532 @@    @classmethod\n    def _create_arithmetic_method(cls, op):\n        def integer_arithmetic_method(self, other):\n\n            op_name = op.__name__"
  },
  {
    "id" : "88feb5a2-bdac-48d8-b600-5fea60cef943",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-135610328",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf8f9f06-f8cd-4949-9ff7-ecc1b017fa8f",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "should import `range` from `pandas.compat` to make this lazy in py2",
        "createdAt" : "2018-07-09T19:54:24Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "be4b5366-2729-4e83-9ebb-1ebc4718fe37",
        "parentId" : "bf8f9f06-f8cd-4949-9ff7-ecc1b017fa8f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "done",
        "createdAt" : "2018-07-09T22:06:12Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 266,
    "diffHunk" : "@@ -1,1 +264,268 @@        # arrays as list-like. The default implementation makes successive\n        # calls to ``__getitem__``, which may be slower than necessary.\n        for i in range(len(self)):\n            if self._mask[i]:\n                yield self.dtype.na_value"
  },
  {
    "id" : "2437cd0e-d6ae-4218-aa05-65d714b17eae",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-139192389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d84f2cbf-8474-420f-9034-1ed96a5521dc",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would make the constructor here a simple setting of `self._data, self._mask = values, mask`. \r\nThe `coerce_to_array` is doing a lot more than is needed for constructing the IntegerArray if you already have a correct values and mask, and we can use `coerce_to_array` explicitly there were this is not the case.",
        "createdAt" : "2018-07-10T03:36:20Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a9e49f8e-ef90-4224-864c-d8e64125ce73",
        "parentId" : "d84f2cbf-8474-420f-9034-1ed96a5521dc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is not possible, as quite a lot of checking / coercion needs to occur on the input. e.g. make it an ndarray if not, coerce dtype. this is the point of ``coerce_to_array``, to make it DRY (as I also have to do this with setitem).",
        "createdAt" : "2018-07-11T10:04:11Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ea57cda2-7797-4b9c-8a99-522a5bdf5f83",
        "parentId" : "d84f2cbf-8474-420f-9034-1ed96a5521dc",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It *is* possible, just a different API design choice. \r\nI personally think it makes it cleaner code-wise, to clearly separate those case where coercion and checking is needed (there we would still use `coerce_to_array` or another method calling that under the hood) and those internal places where it is not needed (as those also exist: eg getitem). \r\nIt is very similar to the `fastpath` keyword in many constructors, but I think we agree on is not a good design to mix both in the same constructor.",
        "createdAt" : "2018-07-11T21:30:38Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4aba1854-68d3-4356-bd2a-89edd16560ac",
        "parentId" : "d84f2cbf-8474-420f-9034-1ed96a5521dc",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "I agree with @jorisvandenbossche, we certainly could make a simpler constructor which doesn't call `coerce_to_array()` internally. This is a perfect use case for an alternative constructor, e.g., `IntegerArray.from_values()`.\r\n\r\nIn general I think this is a better/cleaner pattern to use for internal APIs in pandas, because it involves less introspection (which tends to be error/bug prone).",
        "createdAt" : "2018-07-11T21:39:21Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "b8d6e07f-9b1d-4453-9cd4-731a033cb35f",
        "parentId" : "d84f2cbf-8474-420f-9034-1ed96a5521dc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "did you see my response above?",
        "createdAt" : "2018-07-11T21:40:56Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8e8ce538-fbef-4dfb-be36-675d3e60bfcf",
        "parentId" : "d84f2cbf-8474-420f-9034-1ed96a5521dc",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "`pd.Series(array, dtype='Int64')` could call `IntegerArray.from_values(array, dtype='Int64')` internally. It doesn't need to call the `IntegerArray()` constructor directly.",
        "createdAt" : "2018-07-11T21:51:22Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "25b3f5ff-059e-418a-9d4a-62356a645fc9",
        "parentId" : "d84f2cbf-8474-420f-9034-1ed96a5521dc",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you respond here further?",
        "createdAt" : "2018-07-20T20:21:27Z",
        "updatedAt" : "2018-07-20T20:49:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 223,
    "diffHunk" : "@@ -1,1 +221,225 @@        \"\"\"\n        self._data, self._mask = coerce_to_array(\n            values, dtype=dtype, mask=mask, copy=copy)\n\n    @classmethod"
  },
  {
    "id" : "dff92710-ebec-41ee-ac45-123e12ad54d3",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-135659346",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4897cd8c-fc4c-4ce2-aabb-c7b20fc30652",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you specify when what is returned?",
        "createdAt" : "2018-07-10T03:47:41Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 376,
    "diffHunk" : "@@ -1,1 +374,378 @@        -------\n        array : ndarray or IntegerArray\n            NumPy ndarray or IntergerArray with 'dtype' for its dtype.\n\n        Raises"
  },
  {
    "id" : "61265eeb-471e-4872-8a67-fc35078a96c8",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-139192389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fa18e22-98a6-44cd-9297-93e3fdccd08e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you give this an explanation summary?",
        "createdAt" : "2018-07-10T04:03:51Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e94dc819-3c40-4047-b495-f3e3884fdb65",
        "parentId" : "8fa18e22-98a6-44cd-9297-93e3fdccd08e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This one",
        "createdAt" : "2018-07-20T20:38:14Z",
        "updatedAt" : "2018-07-20T20:49:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 505,
    "diffHunk" : "@@ -1,1 +503,507 @@    def _maybe_mask_result(self, result, mask, other, op_name):\n        \"\"\"\n        Parameters\n        ----------\n        result : array-like"
  },
  {
    "id" : "30c68123-3568-4bb4-b162-148960bf3861",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-137634213",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e99bfd1-fd83-464f-b062-555ac6f9c9ec",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Without trying to overcomplicated things have we considered moving some of these items to a `MaskedEAMixin`? I'm thinking of taking a stab at the Boolean EA next and can see this being generalizable along with a few other methods (`__iter__`, `__setitem__`, perhaps `take`, etc...)",
        "createdAt" : "2018-07-16T23:20:11Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b444dd19-23a4-4ecf-a5ac-908a3239a2c5",
        "parentId" : "1e99bfd1-fd83-464f-b062-555ac6f9c9ec",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "certainly could, though I think might be better just to just directly subclass ``IntegerArray`` and the dtype, but that's for another PR :>",
        "createdAt" : "2018-07-16T23:36:30Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 233,
    "diffHunk" : "@@ -1,1 +231,235 @@        return cls(values, dtype=original.dtype)\n\n    def __getitem__(self, item):\n        if is_integer(item):\n            if self._mask[item]:"
  },
  {
    "id" : "37652fb5-7109-42eb-940d-83fe5686c593",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-139192389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f05f5a7-80e3-4480-943d-ad1d57fabba0",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> False is missing\r\n\r\nI don't think this is true currently?\r\n\r\nBut given the discussion earlier, I think it would be good to actually implement what you stated there to follow the example of arrow?",
        "createdAt" : "2018-07-20T20:26:59Z",
        "updatedAt" : "2018-07-20T20:49:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 202,
    "diffHunk" : "@@ -1,1 +200,204 @@    We represent an IntegerArray with 2 numpy arrays\n    - data: contains a numpy integer array of the appropriate dtype\n    - mask: a boolean array holding a mask on the data, False is missing\n    \"\"\"\n"
  },
  {
    "id" : "c1d680c6-81c8-404f-9cf1-b03110f03827",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-139192389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33b18e66-fc55-485f-b03d-3a3ca2a839cb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Should we treat converting to float separately here? (that could be easily made more performant, as a probably common use case for astype)",
        "createdAt" : "2018-07-20T20:35:28Z",
        "updatedAt" : "2018-07-20T20:49:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 394,
    "diffHunk" : "@@ -1,1 +392,396 @@        # coerce\n        data = self._coerce_to_ndarray()\n        return data.astype(dtype=dtype, copy=False)\n\n    @property"
  },
  {
    "id" : "611b495d-99ef-4f0d-a967-bb09cb13936f",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-139192389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e44dc32-da76-443f-83b6-4ab3177b4be9",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Do we want to catch those warnings if it will raise in the future?",
        "createdAt" : "2018-07-20T20:37:55Z",
        "updatedAt" : "2018-07-20T20:49:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 487,
    "diffHunk" : "@@ -1,1 +485,489 @@            # numpy will show a DeprecationWarning on invalid elementwise\n            # comparisons, this will raise in the future\n            with warnings.catch_warnings(record=True):\n                with np.errstate(all='ignore'):\n                    result = op(self._data, other)"
  },
  {
    "id" : "a44d6e4d-5d19-451f-8554-5315317ade0b",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-139192389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3efd5784-3a44-4266-ac3c-8e78804a0488",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Should we try to convert to IntegerArray here if possible? \r\neg `s + s.tolist()` gives floats (in case `s` is a series with int-na dtype)",
        "createdAt" : "2018-07-20T20:39:08Z",
        "updatedAt" : "2018-07-20T20:49:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 543,
    "diffHunk" : "@@ -1,1 +541,545 @@                    \"can only perform ops with 1-d structures\")\n            elif is_list_like(other):\n                other = np.asarray(other)\n                if not other.ndim:\n                    other = other.item()"
  },
  {
    "id" : "c168e777-d304-4add-8549-d3790c537234",
    "prId" : 22070,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22070#pullrequestreview-141316627",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bf46aa1-a4c5-4a78-ad36-f337bf3aed22",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you update doc-string",
        "createdAt" : "2018-07-28T13:03:46Z",
        "updatedAt" : "2018-08-14T15:59:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5948ae5d3a89a5e8418210d00de9fe29c0faa0ea",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +80,84 @@def integer_array(values, dtype=None, copy=False):\n    \"\"\"\n    Infer and return an integer array of the values.\n\n    Parameters"
  },
  {
    "id" : "f62058dc-430d-42c2-840f-08902d5caa97",
    "prId" : 22070,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22070#pullrequestreview-141316627",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e076f3c-8211-4e57-8102-ce75fd053d09",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there still a ref to to_integer_array? (I see it in the diff, but I also see that you changed it above)",
        "createdAt" : "2018-07-28T13:06:06Z",
        "updatedAt" : "2018-08-14T15:59:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5948ae5d3a89a5e8418210d00de9fe29c0faa0ea",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +96,100 @@    ------\n    TypeError if incompatible types\n    \"\"\"\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\n    return IntegerArray(values, mask)"
  },
  {
    "id" : "4d682748-df0a-4efa-862e-4753b3da3a5e",
    "prId" : 22070,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22070#pullrequestreview-141317702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c72e580-7334-4269-a7b8-80f66083482d",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback additional question: what do you find of writing `IntegerArray(...)` instead of `type(self)(...)` ? \r\n\r\nPython perfectly allows that (and is the same here, as we don't subclass this one further), and I personally find that easier to read.",
        "createdAt" : "2018-07-28T13:49:34Z",
        "updatedAt" : "2018-08-14T15:59:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "83edbd44-7381-4c31-9721-b680dc9e4982",
        "parentId" : "8c72e580-7334-4269-a7b8-80f66083482d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I like using ``type()`` as I expect this to be subclasses for ``BooleanArray``, though it could be that this not needed for that, but want to keep open that possiblitiy.",
        "createdAt" : "2018-07-28T13:53:29Z",
        "updatedAt" : "2018-08-14T15:59:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5948ae5d3a89a5e8418210d00de9fe29c0faa0ea",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +258,262 @@                return self.dtype.na_value\n            return self._data[item]\n        return type(self)(self._data[item], self._mask[item])\n\n    def _coerce_to_ndarray(self):"
  },
  {
    "id" : "2186fa24-9537-401a-997e-802b0252a09d",
    "prId" : 22343,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22343#pullrequestreview-146197733",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65297008-4a97-4d2a-a0d9-28f17482deda",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This was necessary so that \r\n\r\n```python\r\nIn [8]: s.values\r\nOut[8]: IntegerArray([0, nan, 2], dtype='Int8')\r\n\r\nIn [9]: s.astype('uint32')\r\n```\r\n\r\nstill raises. Previously, it did\r\n\r\n```python\r\nIn [4]: pd.core.arrays.IntegerArray([1, None, 2], dtype='uint8').astype('uint32')\r\nOut[4]: array([         1, 2415919104,          2], dtype=uint32)\r\n```\r\n\r\nwhich I don't think we want. This was only tested at the `Series[IntegerArray].astype` level, which never called EA.astype",
        "createdAt" : "2018-08-14T14:35:01Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "fe1ede18-37bb-4441-8c1f-66475b2ad8e1",
        "parentId" : "65297008-4a97-4d2a-a0d9-28f17482deda",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add a test for this?",
        "createdAt" : "2018-08-14T18:37:35Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "2606d02bb738fa914d48d5b460725b506d8e0a0a",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +393,397 @@        # coerce\n        data = self._coerce_to_ndarray()\n        return astype_nansafe(data, dtype, copy=None)\n\n    @property"
  },
  {
    "id" : "05aa30b1-1ce4-4354-a693-759564a37ee3",
    "prId" : 22699,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22699#pullrequestreview-156347907",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf294df0-63f2-4959-bba1-eeb43ce324ab",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "@jreback could you take a close look here. I think you ran into this when writing a test.",
        "createdAt" : "2018-09-16T20:10:50Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "4827f99d-ccaf-459a-bd6f-6a88ffe1b4aa",
        "parentId" : "cf294df0-63f2-4959-bba1-eeb43ce324ab",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is there a test that causes this warning?  (I can see this locally, but I didn't see it appearing when running tests)",
        "createdAt" : "2018-09-17T12:21:52Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "51498d03-a3ca-4f22-b7ba-6f9b58fd5c95",
        "parentId" : "cf294df0-63f2-4959-bba1-eeb43ce324ab",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Hmm, ignore previous comment, I thought pytest automatically shows all warnings, which is not the case. Shouldn't we edit out `setup.cfg` to do that?",
        "createdAt" : "2018-09-17T12:22:40Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "41244c43-85fb-49fc-b13f-844bacb22523",
        "parentId" : "cf294df0-63f2-4959-bba1-eeb43ce324ab",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is a deprecation warning from NumPy right now, which is filtered interactive, but pytest removes that filter by default. Some of the `integer_array` tests were hitting this.",
        "createdAt" : "2018-09-17T15:16:01Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "6f7760bf-c2bf-4daa-8568-b2475573067d",
        "parentId" : "cf294df0-63f2-4959-bba1-eeb43ce324ab",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh I didn't know numpy did this:\r\n\r\n```\r\nIn [1]: np.dtype('Int64')\r\n/Users/jreback/miniconda3/envs/pandas/bin/ipython:1: DeprecationWarning: Numeric-style type codes are deprecated and will result in an error in the future.\r\n  #!/Users/jreback/miniconda3/envs/pandas/bin/python\r\nOut[1]: dtype('int64')\r\n```\r\n\r\nI guess so, thanks\r\n",
        "createdAt" : "2018-09-18T11:39:41Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "eb377897-cf60-45ac-b2f3-4a972cb155d8",
        "parentId" : "cf294df0-63f2-4959-bba1-eeb43ce324ab",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah. I'm waiting to hear back on https://github.com/numpy/numpy/pull/7476#issuecomment-422358051\r\n\r\nIf `np.dtype(\"int\") == \"Int64\"` errors in the future, we may have to rework some things.",
        "createdAt" : "2018-09-18T12:48:50Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4990fc2d984b536e5c7c97ad55d4f550ae661867",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +152,156 @@            # Avoid DeprecationWarning from NumPy about np.dtype(\"Int64\")\n            # https://github.com/numpy/numpy/pull/7476\n            dtype = dtype.lower()\n        if not issubclass(type(dtype), _IntegerDtype):\n            try:"
  },
  {
    "id" : "438f60c5-44e2-4c02-abf5-ce22cc2a7a29",
    "prId" : 22762,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22762#pullrequestreview-162001474",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdb07e4b-8e7e-4737-8974-81b245de21c9",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Should this be `if not skipna and mask.any():`? I think if we're skipping NA anyway, it shouldn't matter correctness wise, does it? And performance-wise, it'd be nice to not have to astype and set if we are just skipping them anyway.",
        "createdAt" : "2018-09-19T13:55:55Z",
        "updatedAt" : "2018-10-12T11:40:31Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "4de4b427-a8b4-4174-bfc4-804b1f6746cc",
        "parentId" : "bdb07e4b-8e7e-4737-8974-81b245de21c9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in theory yes, but must be something odd underneath, correctness fails when i change it.",
        "createdAt" : "2018-09-19T14:24:30Z",
        "updatedAt" : "2018-10-12T11:40:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "29ad4c12-ebba-44b1-90f5-e9e57dcd4a58",
        "parentId" : "bdb07e4b-8e7e-4737-8974-81b245de21c9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so this doesn't work, because we *only* allow the ``skipna`` parameter to ``nanops``, rather than a mask (e.g. it computes its own mask), which if we don't set to np.nan doesn't work. \r\n\r\nSo I think this could be added (e.g. allow skipna as a mask itself) to just use that.",
        "createdAt" : "2018-09-19T14:43:20Z",
        "updatedAt" : "2018-10-12T11:40:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "11a7e69b-9377-42d7-b654-70aa169f7b99",
        "parentId" : "bdb07e4b-8e7e-4737-8974-81b245de21c9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "You could also mask the data for now *before* passing to `nanops` ? \r\n\r\nSomething like\r\n\r\n```\r\nif mask.any():\r\n    data = data[~mask]\r\n...\r\nresult = op(data, ..)\r\n```\r\n\r\n---\r\n\r\nAdditional question, can't we prevent the casting to float if `skipna=False` and there are NaNs (`if mask.any()`), assuming that the result will always be NaN in that case ?\r\n\r\nThat might also simplify the code in the end that checks if the result is NaN or not",
        "createdAt" : "2018-10-01T14:49:03Z",
        "updatedAt" : "2018-10-12T11:40:31Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "8f2425f1-c61d-4e29-82f4-a9c2a755d000",
        "parentId" : "bdb07e4b-8e7e-4737-8974-81b245de21c9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see my comment above, this is not possible as all of the special casing for nan removals is already in nanops, and silly to duplicate here.",
        "createdAt" : "2018-10-05T11:57:50Z",
        "updatedAt" : "2018-10-12T11:40:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "aeaf5f32c0939d6bedc99240b47dd54252dda96a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +536,540 @@\n        # coerce to a nan-aware float if needed\n        if mask.any():\n            data = self._data.astype('float64')\n            data[mask] = self._na_value"
  },
  {
    "id" : "653468e6-b1e0-4b84-9058-f2f464cb63a7",
    "prId" : 22762,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22762#pullrequestreview-156852281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e236f77f-432a-4169-bdf2-4bf4442c221c",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Don't you need an `else: data = data[~mask]`? Else we have the \"missing\" 1s in the array.",
        "createdAt" : "2018-09-19T13:57:39Z",
        "updatedAt" : "2018-10-12T11:40:31Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "1a34e823-f104-4466-b0db-b5e6b25302c6",
        "parentId" : "e236f77f-432a-4169-bdf2-4bf4442c221c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no the opposite, if nothing is masked, we are using all values",
        "createdAt" : "2018-09-19T14:30:05Z",
        "updatedAt" : "2018-10-12T11:40:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9618b0ca-de74-4924-a623-0e6c64d9c3f0",
        "parentId" : "e236f77f-432a-4169-bdf2-4bf4442c221c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Of course, I was mistaken.",
        "createdAt" : "2018-09-19T14:31:55Z",
        "updatedAt" : "2018-10-12T11:40:31Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "aeaf5f32c0939d6bedc99240b47dd54252dda96a",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +539,543 @@            data = self._data.astype('float64')\n            data[mask] = self._na_value\n\n        op = getattr(nanops, 'nan' + name)\n        result = op(data, axis=0, skipna=skipna, mask=mask)"
  },
  {
    "id" : "a9d07d1d-ae3a-477a-b8e3-2b5723fa5d11",
    "prId" : 22762,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22762#pullrequestreview-162257461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82f297e3-64d7-4005-80a3-80e6212c23fb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I am not sure it is always correct to convert back to int. \r\nEg mean and median always give float I think? (to not have the dtype return value depend on the values)",
        "createdAt" : "2018-10-05T12:55:30Z",
        "updatedAt" : "2018-10-12T11:40:31Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "84f66151-a267-4328-adb1-757d8ac12b2a",
        "parentId" : "82f297e3-64d7-4005-80a3-80e6212c23fb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is tricky, for some ops, you always want to preserve the dtype, e.g. min/max, but for numeric ones that is not always the case, ok, let me see what i can do with this",
        "createdAt" : "2018-10-06T13:47:59Z",
        "updatedAt" : "2018-10-12T11:40:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "aeaf5f32c0939d6bedc99240b47dd54252dda96a",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +552,556 @@            int_result = int(result)\n            if int_result == result:\n                result = int_result\n\n        return result"
  },
  {
    "id" : "3386db3a-f95f-4e26-9cbb-384a450b9279",
    "prId" : 23155,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23155#pullrequestreview-165899198",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43fad13a-a11b-436f-9597-a374baa4fffb",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is moved from `dispatch_to_extension_array`.",
        "createdAt" : "2018-10-14T18:49:49Z",
        "updatedAt" : "2018-10-18T21:26:48Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "8e2b8702-f341-4db1-a905-3b073abe8889",
        "parentId" : "43fad13a-a11b-436f-9597-a374baa4fffb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2018-10-15T11:35:47Z",
        "updatedAt" : "2018-10-18T21:26:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "15231284-2ec5-41d8-9f36-ce6d21c9ced5",
        "parentId" : "43fad13a-a11b-436f-9597-a374baa4fffb",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Had to keep this one in an elif, so that we avoid the `else` block raising a TypeError.",
        "createdAt" : "2018-10-18T01:49:53Z",
        "updatedAt" : "2018-10-18T21:26:48Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "03a367e047456de392d9af0bfcd0e58839dff9fe",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +604,608 @@                other, mask = other._data, other._mask\n\n            elif getattr(other, 'ndim', None) == 0:\n                other = other.item()\n"
  },
  {
    "id" : "9418b26e-33fe-4c3d-adc7-d0ec1a10e842",
    "prId" : 23155,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23155#pullrequestreview-166211842",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd761ced-904c-4aba-bc10-533a0115c5d3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should we just put this in the base class? (for the ops mixin)",
        "createdAt" : "2018-10-14T21:49:35Z",
        "updatedAt" : "2018-10-18T21:26:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a46e343a-4217-4aa9-916f-a43dbbf9efcc",
        "parentId" : "cd761ced-904c-4aba-bc10-533a0115c5d3",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "That seems a little too invasive for a base class. I’d rather leave that up to the subclasser. ",
        "createdAt" : "2018-10-15T01:30:06Z",
        "updatedAt" : "2018-10-18T21:26:48Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "8d904f96-8faa-46e6-9e4b-a793f0fec0ef",
        "parentId" : "cd761ced-904c-4aba-bc10-533a0115c5d3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so what arithmetic subclass would not want this set?\r\n\r\nis there an example?",
        "createdAt" : "2018-10-15T01:57:46Z",
        "updatedAt" : "2018-10-18T21:26:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "71a6a3c5-8e2b-4e65-b05a-77bc776c61e2",
        "parentId" : "cd761ced-904c-4aba-bc10-533a0115c5d3",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "To clarify, I'm not sure if there's a way to *unset* it, if you don't want to set it in a subclass (you don't want to opt into numpy's array stuff at all).",
        "createdAt" : "2018-10-15T10:59:41Z",
        "updatedAt" : "2018-10-18T21:26:48Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "17e1594f-189b-49f8-b856-e6756cd0db57",
        "parentId" : "cd761ced-904c-4aba-bc10-533a0115c5d3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I just find this a detail which would likely be forgotten in any subclass, I don't see a harm and much upset in setting it onthe base class (you can always unset if you really really think you need to).",
        "createdAt" : "2018-10-15T11:34:29Z",
        "updatedAt" : "2018-10-18T21:26:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "97240060-9bb2-4b32-bcab-635ddda412d9",
        "parentId" : "cd761ced-904c-4aba-bc10-533a0115c5d3",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can you unset it?",
        "createdAt" : "2018-10-15T12:02:26Z",
        "updatedAt" : "2018-10-18T21:26:48Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "89ddf5d9-e3cf-4982-b36a-ad3d3732308e",
        "parentId" : "cd761ced-904c-4aba-bc10-533a0115c5d3",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I don't really know if setting `__array_priority__ = 0` is enough to \"unset\" it, and I don't know what all setting `__array_priority__` in the first place opts you into.",
        "createdAt" : "2018-10-15T12:50:06Z",
        "updatedAt" : "2018-10-18T21:26:48Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "0d1fd865-c337-4bea-b913-bfb6b0a03b7b",
        "parentId" : "cd761ced-904c-4aba-bc10-533a0115c5d3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you document this in the Mixin itself though (if you are not going to set it by defaulrt). It is so non-obvious that you need to do this.",
        "createdAt" : "2018-10-18T17:33:18Z",
        "updatedAt" : "2018-10-18T21:26:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "03a367e047456de392d9af0bfcd0e58839dff9fe",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +282,286 @@        return data\n\n    __array_priority__ = 1000  # higher than ndarray so ops dispatch to us\n\n    def __array__(self, dtype=None):"
  },
  {
    "id" : "7ebd4dc6-0e65-4f83-b119-1e1270da23fc",
    "prId" : 23237,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23237#pullrequestreview-167309139",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "077b1aaf-83e7-4f7e-972f-4f2c0fcca6f2",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Shoudn't this `any` be `all` ? \r\nBecause now this allows something like this: \r\n\r\n```\r\nIn [14]: pd.core.arrays.integer_array([np.nan, {'a':1}])\r\nOut[14]: IntegerArray([nan, nan], dtype='Int64')\r\n```\r\n\r\nA cornercase, but basically any python object that is not a datetime or string (something that numpy will convert to an object array).",
        "createdAt" : "2018-10-23T07:29:23Z",
        "updatedAt" : "2018-10-23T07:29:59Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "8e657d0c-8657-4c47-be9c-6fa685415844",
        "parentId" : "077b1aaf-83e7-4f7e-972f-4f2c0fcca6f2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "good catch, yep need to have all here",
        "createdAt" : "2018-10-23T09:20:34Z",
        "updatedAt" : "2018-10-23T09:20:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "14399b11230c37371f717b140010461d8a820080",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +174,178 @@    if is_object_dtype(values):\n        inferred_type = lib.infer_dtype(values)\n        if inferred_type is 'mixed' and isna(values).any():\n            values = np.empty(len(values))\n            values.fill(np.nan)"
  },
  {
    "id" : "33505400-c219-4931-8a46-08845b30d6c0",
    "prId" : 23293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23293#pullrequestreview-256020461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b62c6d65-ff34-4061-b342-42a276b2997b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "how does this handle an upcasted result, e.g. we do ``np.exp(pd.Series([1,2,3], dtype='Int64'))``? and this is now a float array, does it hit this machinery?",
        "createdAt" : "2019-06-27T21:40:25Z",
        "updatedAt" : "2019-07-01T18:47:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "501a66cf-d2cd-4d94-8e5a-1d595bcbf09a",
        "parentId" : "b62c6d65-ff34-4061-b342-42a276b2997b",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah, it returns a float64 series (this is tested).",
        "createdAt" : "2019-06-29T02:36:29Z",
        "updatedAt" : "2019-07-01T18:47:58Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "7486d260178176f9e9674c8036bc3063a067b24a",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +379,383 @@            # raise for reduce up above.\n\n            if is_integer_dtype(x.dtype):\n                m = mask.copy()\n                return IntegerArray(x, m)"
  },
  {
    "id" : "3c139fac-5114-4631-b09d-caf9153388dd",
    "prId" : 23601,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23601#pullrequestreview-223478075",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a63661f-cb3c-4f02-b776-68a635750b73",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "should `NaN` have been hardcoded here?",
        "createdAt" : "2019-04-05T18:43:38Z",
        "updatedAt" : "2019-04-05T18:43:38Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "a9efc48a-2d0c-4a35-b70f-40125c5d78e0",
        "parentId" : "4a63661f-cb3c-4f02-b776-68a635750b73",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Why not? This is used for the Integer data display, where we currently use NaN.\r\n\r\n(whether we should use rather 'NA' instead of 'NaN', that's another question)",
        "createdAt" : "2019-04-05T20:30:03Z",
        "updatedAt" : "2019-04-05T20:30:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "8a8c96d2-9781-4ba8-a88f-a40fd4cf4e94",
        "parentId" : "4a63661f-cb3c-4f02-b776-68a635750b73",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "just wondering whether it would be a problem with `to_string(na_rep=...)`. will do some tests.",
        "createdAt" : "2019-04-05T20:49:53Z",
        "updatedAt" : "2019-04-05T20:49:54Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "de4496e9-b597-4450-971c-cd501f413057",
        "parentId" : "4a63661f-cb3c-4f02-b776-68a635750b73",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, yes, that's a good reason. But in general, this `_formatter` does not follow display options at all, is that correct? \r\nIn which case this is something to think about in general.",
        "createdAt" : "2019-04-05T21:02:32Z",
        "updatedAt" : "2019-04-05T21:02:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad113b374641b6eb1f0cb7b28d7d38e24099902",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +269,273 @@        def fmt(x):\n            if isna(x):\n                return 'NaN'\n            return str(x)\n        return fmt"
  },
  {
    "id" : "74db78bd-73d2-4b8a-ae49-4da3b199c717",
    "prId" : 25265,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25265#pullrequestreview-218316548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36975f66-cdde-4fa9-bc97-1f72aa3c69f8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually, just check this if if ``dtype is not None``",
        "createdAt" : "2019-03-22T13:17:01Z",
        "updatedAt" : "2019-05-14T10:40:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fd3884c8-1ba1-4d5d-9ea2-7b47f8c30fc9",
        "parentId" : "36975f66-cdde-4fa9-bc97-1f72aa3c69f8",
        "authorId" : "57169613-71f2-401f-9315-121e3968aed4",
        "body" : "Like this?\r\n```suggestion\r\n    elif is_bool_dtype(values) and dtype is not None:\r\n```",
        "createdAt" : "2019-03-22T13:25:26Z",
        "updatedAt" : "2019-05-14T10:40:28Z",
        "lastEditedBy" : "57169613-71f2-401f-9315-121e3968aed4",
        "tags" : [
        ]
      },
      {
        "id" : "cb56f567-97aa-4670-93c0-18bfc852fedf",
        "parentId" : "36975f66-cdde-4fa9-bc97-1f72aa3c69f8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes, does that work?",
        "createdAt" : "2019-03-22T13:39:32Z",
        "updatedAt" : "2019-05-14T10:40:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "40bc1c64-e1ca-4228-8230-85afda0e9269",
        "parentId" : "36975f66-cdde-4fa9-bc97-1f72aa3c69f8",
        "authorId" : "57169613-71f2-401f-9315-121e3968aed4",
        "body" : "Yes, tests are okay.",
        "createdAt" : "2019-03-22T14:10:26Z",
        "updatedAt" : "2019-05-14T10:40:28Z",
        "lastEditedBy" : "57169613-71f2-401f-9315-121e3968aed4",
        "tags" : [
        ]
      },
      {
        "id" : "81ba1275-9c6c-4f2d-8cd5-dc81a4c09be0",
        "parentId" : "36975f66-cdde-4fa9-bc97-1f72aa3c69f8",
        "authorId" : "57169613-71f2-401f-9315-121e3968aed4",
        "body" : "BTW, doesn't change the case `integer_array(array, dtype=None)`, though.",
        "createdAt" : "2019-03-22T14:11:23Z",
        "updatedAt" : "2019-05-14T10:40:28Z",
        "lastEditedBy" : "57169613-71f2-401f-9315-121e3968aed4",
        "tags" : [
        ]
      },
      {
        "id" : "0a3a5439-8477-4a1e-a3d9-24aa5bce91d5",
        "parentId" : "36975f66-cdde-4fa9-bc97-1f72aa3c69f8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you show an explicit case when this fails: integer_array(array, dtype=None)",
        "createdAt" : "2019-03-22T16:28:25Z",
        "updatedAt" : "2019-05-14T10:40:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fed39447-456e-476d-a8a9-5fdc91b2873c",
        "parentId" : "36975f66-cdde-4fa9-bc97-1f72aa3c69f8",
        "authorId" : "57169613-71f2-401f-9315-121e3968aed4",
        "body" : "`integer_array([True, False], dtype=None)`. You see, this will fail here on line 193 https://github.com/pandas-dev/pandas/blob/d0acd206a59279f9cea9615bfc8b9279273d495c/pandas/core/arrays/integer.py#L190-L195\r\nbecause previous conditions won't trigger while target dtype is None. On the other hand we can't cast every boolean array to int because there're cases when we want this TypeError to trigger, as outlined in my previous [comment](https://github.com/pandas-dev/pandas/pull/25265#issuecomment-475614024)",
        "createdAt" : "2019-03-25T09:12:42Z",
        "updatedAt" : "2019-05-14T10:40:28Z",
        "lastEditedBy" : "57169613-71f2-401f-9315-121e3968aed4",
        "tags" : [
        ]
      },
      {
        "id" : "544fcdf0-b463-483e-828d-7413d3470998",
        "parentId" : "36975f66-cdde-4fa9-bc97-1f72aa3c69f8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "again can you modify the check so that a ``dtype=None`` case doesn't matter for boolean? write a test and see what needs modification while avoiding breaking other code",
        "createdAt" : "2019-03-25T11:59:47Z",
        "updatedAt" : "2019-05-14T10:40:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6b75ede8-204e-4ed9-b440-19e491f1c4b2",
        "parentId" : "36975f66-cdde-4fa9-bc97-1f72aa3c69f8",
        "authorId" : "57169613-71f2-401f-9315-121e3968aed4",
        "body" : "See my latest commit, should work for this case, but kind of ugly.",
        "createdAt" : "2019-03-25T13:10:22Z",
        "updatedAt" : "2019-05-14T10:40:28Z",
        "lastEditedBy" : "57169613-71f2-401f-9315-121e3968aed4",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bce8a1e45a4e8fcdf91e137722e903d75483c73",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +189,193 @@                values.dtype))\n\n    elif is_bool_dtype(values) and is_integer_dtype(dtype):\n        values = np.array(values, dtype=int, copy=copy)\n"
  },
  {
    "id" : "b351e5ed-5735-4485-bd6a-2a3dba1b6889",
    "prId" : 25265,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25265#pullrequestreview-231553361",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "464da30f-0130-434b-9886-33fbd8be1886",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "np.asarray? ",
        "createdAt" : "2019-04-28T18:26:12Z",
        "updatedAt" : "2019-05-14T10:40:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6356b8e2-2e0f-4c38-b889-0e36f4211347",
        "parentId" : "464da30f-0130-434b-9886-33fbd8be1886",
        "authorId" : "57169613-71f2-401f-9315-121e3968aed4",
        "body" : "It's like in other places in the code, e.g. https://github.com/pandas-dev/pandas/blob/f2e2eac1e8d3c2adfb72bcc792a2e34d174e5a7e/pandas/core/arrays/integer.py#L179",
        "createdAt" : "2019-04-29T08:10:00Z",
        "updatedAt" : "2019-05-14T10:40:28Z",
        "lastEditedBy" : "57169613-71f2-401f-9315-121e3968aed4",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bce8a1e45a4e8fcdf91e137722e903d75483c73",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +190,194 @@\n    elif is_bool_dtype(values) and is_integer_dtype(dtype):\n        values = np.array(values, dtype=int, copy=copy)\n\n    elif not (is_integer_dtype(values) or is_float_dtype(values)):"
  },
  {
    "id" : "9b597f1d-5232-4a81-98ba-69e686c82dcd",
    "prId" : 27830,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27830#pullrequestreview-274238392",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "faa9290b-5df8-4a6a-bc6d-6476afeb234f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you make these elif (future PR ok)",
        "createdAt" : "2019-08-13T12:12:50Z",
        "updatedAt" : "2019-08-13T12:13:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5dc85a4c94175d8c31151e6dd4f849d0d578b713",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +708,712 @@                        \"can only perform ops with 1-d structures\"\n                    )\n                if len(self) != len(other):\n                    raise ValueError(\"Lengths must match\")\n                if not (is_float_dtype(other) or is_integer_dtype(other)):"
  },
  {
    "id" : "8a691a6b-6041-4a65-9bd2-02549f683457",
    "prId" : 29353,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29353#pullrequestreview-310774863",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d3cd394-9ff9-4353-996e-45ce473c61e0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "which args are meant to be passed in?",
        "createdAt" : "2019-11-02T15:06:47Z",
        "updatedAt" : "2019-11-09T00:01:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "48a0ce29-7e13-4b7a-aeb9-b59104d415b7",
        "parentId" : "3d3cd394-9ff9-4353-996e-45ce473c61e0",
        "authorId" : "ccf5de4f-937c-4f8e-b4c8-f179a178d9f9",
        "body" : "This is supposed to let the ddof argument to be passed in here in order to fix the issue.\r\n",
        "createdAt" : "2019-11-02T15:13:40Z",
        "updatedAt" : "2019-11-09T00:01:07Z",
        "lastEditedBy" : "ccf5de4f-937c-4f8e-b4c8-f179a178d9f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "567977e62f97b08b16e0b90f844d7d17a7382147",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +653,657 @@\n        op = getattr(nanops, \"nan\" + name)\n        result = op(data, axis=0, skipna=skipna, mask=mask, **kwargs)\n\n        # if we have a boolean op, don't coerce"
  },
  {
    "id" : "4193ed22-516d-49aa-a1a9-122de6bbc5b6",
    "prId" : 29483,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29483#pullrequestreview-315008924",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3653b26a-e5eb-4430-bdd0-7bd494788aee",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "When is this False?",
        "createdAt" : "2019-11-09T01:07:46Z",
        "updatedAt" : "2019-11-19T11:09:44Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "c429b8d7-8984-4e8f-8560-7a330b32b772",
        "parentId" : "3653b26a-e5eb-4430-bdd0-7bd494788aee",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The passed pyarrow values can be either a pyarrow.Array or pyarrow.ChunkedArray. Added a comment for this",
        "createdAt" : "2019-11-11T16:27:03Z",
        "updatedAt" : "2019-11-19T11:09:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "5290afca06ac9904c9374190cd9de19755eb0763",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +90,94 @@        import pyarrow\n\n        if isinstance(array, pyarrow.Array):\n            chunks = [array]\n        else:"
  },
  {
    "id" : "b57dcab8-6c64-4951-b4e3-eb938305f078",
    "prId" : 29964,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29964#pullrequestreview-326648239",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cab889eb-a2d4-47e9-a215-8422cd3037e5",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This preserves the behavior / implementation on master.\r\n\r\nI think someday we may want masked-versions of our algos, but that's down the road.",
        "createdAt" : "2019-12-03T15:19:58Z",
        "updatedAt" : "2019-12-30T16:13:50Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "9dd3e0c3-a980-4591-87d2-bf5d4d4c8722",
        "parentId" : "cab889eb-a2d4-47e9-a215-8422cd3037e5",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> I think someday we may want masked-versions of our algos, but that's down the road.\r\n\r\nYes, I was thinking the same in the BooleanArray PR. Created an issue fr this: https://github.com/pandas-dev/pandas/issues/30037",
        "createdAt" : "2019-12-04T08:04:15Z",
        "updatedAt" : "2019-12-30T16:13:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5d6832f7f7f21a3a1f19ab0f56eaa48c25845de",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +625,629 @@        # TODO: https://github.com/pandas-dev/pandas/issues/30037\n        # use masked algorithms, rather than object-dtype / np.nan.\n        return self._coerce_to_ndarray(na_value=np.nan), np.nan\n\n    def _values_for_argsort(self) -> np.ndarray:"
  },
  {
    "id" : "983a1d35-9533-4712-9aa5-c269825c91af",
    "prId" : 29964,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29964#pullrequestreview-329833091",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edfa2e30-ee2c-4ec1-a417-996c91a5c1a3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can likely remove my comment :->",
        "createdAt" : "2019-12-10T13:30:45Z",
        "updatedAt" : "2019-12-30T16:13:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5d6832f7f7f21a3a1f19ab0f56eaa48c25845de",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +375,379 @@        coerce to an ndarary of object dtype\n        \"\"\"\n        if dtype is None:\n            dtype = object\n"
  },
  {
    "id" : "9d7bdd6c-9262-482f-bf71-a3d537e1e6be",
    "prId" : 29964,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29964#pullrequestreview-329854480",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e772b82-5aca-424a-a8cc-f16618e35536",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this doesn't make any sense, by definition we have a nullable type. why does it matter if it has NAs which we are not caring about",
        "createdAt" : "2019-12-10T13:32:06Z",
        "updatedAt" : "2019-12-30T16:13:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8ade8c58-5b0c-4f4d-836c-2c84417c505b",
        "parentId" : "0e772b82-5aca-424a-a8cc-f16618e35536",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is for IntegerArray.astype(\"int\"), so converting to a NumPy array.\r\n\r\nApparently, the expected behavior is for that to succeed if there are no missing values, and raise if there are any (that's the behavior on master).",
        "createdAt" : "2019-12-10T13:41:41Z",
        "updatedAt" : "2019-12-30T16:13:50Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "1e323eab-2b4d-442a-8ba1-e769a594c36e",
        "parentId" : "0e772b82-5aca-424a-a8cc-f16618e35536",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> this doesn't make any sense, by definition we have a nullable type. why does it matter if it has NAs which we are not caring about\r\n\r\nSorry, I don't understand your comment. Do you mean we should always raise? Why don't we care about NAs?\r\n\r\n(given your comments, the confusion is maybe this: this function is about conversion of IntegerArray -> numpy array (for astype, `__array__`, ..), not about coercing an array-like -> IntegerArray)",
        "createdAt" : "2019-12-10T13:43:24Z",
        "updatedAt" : "2019-12-30T16:13:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "5a969308-4c26-4e60-bfb3-4030abddddb2",
        "parentId" : "0e772b82-5aca-424a-a8cc-f16618e35536",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ahh ok. yeah maybe this could be more clear.",
        "createdAt" : "2019-12-10T14:01:48Z",
        "updatedAt" : "2019-12-30T16:13:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5d6832f7f7f21a3a1f19ab0f56eaa48c25845de",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +389,393 @@                return self._data.astype(dtype)\n            else:\n                raise ValueError(\n                    \"cannot convert to integer NumPy array with missing values\"\n                )"
  },
  {
    "id" : "51b663db-3ae2-4f24-a7fd-0f42ddc98a42",
    "prId" : 30183,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30183#pullrequestreview-330091120",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5939e3e7-edd4-4fd9-9ed4-f8f4dc9a0689",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "With just this change, the truediv tests failed on master.  We apparently didn't catch it because the masked values weren't being compared in `_checkop`",
        "createdAt" : "2019-12-10T19:35:09Z",
        "updatedAt" : "2019-12-10T21:10:21Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0264f991eb579ce28833a12ba93afcc83d47a59",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +744,748 @@            # nans propagate\n            if mask is None:\n                mask = self._mask.copy()\n            else:\n                mask = self._mask | mask"
  },
  {
    "id" : "18ad0d14-9305-407c-a5d8-a373abdfcaed",
    "prId" : 30210,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30210#pullrequestreview-331255213",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43e16b86-c396-4729-bbcf-d9a329d5c92e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "shouldn't this check for `self._data == 1` ?",
        "createdAt" : "2019-12-12T14:06:19Z",
        "updatedAt" : "2019-12-12T17:52:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "aa851434-92cb-4bf8-98ff-0a5f6db25dc2",
        "parentId" : "43e16b86-c396-4729-bbcf-d9a329d5c92e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, no, because it is for the reversed op? (maybe add a comment)",
        "createdAt" : "2019-12-12T14:07:55Z",
        "updatedAt" : "2019-12-12T17:52:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b9dc276a-2d10-450d-90a3-3433597e080f",
        "parentId" : "43e16b86-c396-4729-bbcf-d9a329d5c92e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Your call on whether a comment is needed. It's clear IMO, though I wrote it :)",
        "createdAt" : "2019-12-12T14:10:50Z",
        "updatedAt" : "2019-12-12T17:52:28Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "b8eefcfe154290b2621ecc6afe994c598e1909ed",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +760,764 @@                # 1 ** x is 1.\n                if omask is not None:\n                    mask = np.where((other == 1) & ~omask, False, mask)\n                else:\n                    mask = np.where(other == 1, False, mask)"
  },
  {
    "id" : "b37a32e3-601f-4f6d-bebc-c4aa4d384147",
    "prId" : 30258,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30258#pullrequestreview-332289546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3673d616-9782-4bab-b196-f79e9155631b",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is this docstring not inherited from the base class?",
        "createdAt" : "2019-12-13T19:49:53Z",
        "updatedAt" : "2019-12-13T19:49:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "eb7ae005-4c9b-441d-bcbd-2ed4a2a42a1f",
        "parentId" : "3673d616-9782-4bab-b196-f79e9155631b",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "not as far as I'm aware. Should it be?",
        "createdAt" : "2019-12-13T20:01:57Z",
        "updatedAt" : "2019-12-13T20:01:57Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "bf21fe1f-56e3-409b-bf2c-f6370f831085",
        "parentId" : "3673d616-9782-4bab-b196-f79e9155631b",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "It looks like `inspect.getdoc(object)` https://docs.python.org/3/library/inspect.html?highlight=inspect#inspect.getdoc could get the baseclass docstring.\r\n\r\nI'm using VSCode and not showing baseclass docstring when no docstring exists on derived class.\r\n\r\n`_IntegerDtype().construct_array_type.__doc__` returns None if no docstring exists on derived class but `help(_IntegerDtype().construct_array_type)` does show the inherited doctstring.\r\n",
        "createdAt" : "2019-12-13T20:15:59Z",
        "updatedAt" : "2019-12-13T20:24:44Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "84d00c73-6ace-4826-8d50-1ce9d5896d42",
        "parentId" : "3673d616-9782-4bab-b196-f79e9155631b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok this is odd then I agree with @TomAugspurger that these should inherit the baseclass, odd that they are not.",
        "createdAt" : "2019-12-15T21:45:27Z",
        "updatedAt" : "2019-12-15T21:45:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8839e1bafccc796ca41617af02c12aa68c452378",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +79,83 @@    @classmethod\n    def construct_array_type(cls):\n        \"\"\"\n        Return the array type associated with this dtype.\n"
  },
  {
    "id" : "ea30c514-0de2-4f1f-a61d-f6e98ec30419",
    "prId" : 30789,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30789#pullrequestreview-339864005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "056bd14d-ede0-4407-aefc-e221a042c518",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2020-01-08T13:32:54Z",
        "updatedAt" : "2020-01-08T13:34:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e86a6f11f4b5e2d64533c44bd23a5ea082f08bd4",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +29,33 @@from pandas.core.tools.numeric import to_numeric\n\nfrom .masked import BaseMaskedArray\n\n"
  },
  {
    "id" : "0d8b7cd5-a489-4fa6-bb34-a71b4262fff6",
    "prId" : 30971,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30971#pullrequestreview-342135739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95fd6905-270f-499a-894c-873d0d66eefe",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Do you think this case is tested for both NA and not-NA results?",
        "createdAt" : "2020-01-13T20:54:06Z",
        "updatedAt" : "2020-01-15T08:08:05Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c6513675-208b-4e85-bc1f-109f479c2058",
        "parentId" : "95fd6905-270f-499a-894c-873d0d66eefe",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, in the `TestNumericReduce` I needed to patch below to check for pd.NA instead of np.nan, all reductions are tested with both skipna=True and False, and the \"data\" in those base extension tests include some missing data (at least in our tests for integer/boolean)",
        "createdAt" : "2020-01-13T21:01:28Z",
        "updatedAt" : "2020-01-15T08:08:05Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9926fba8282ff9e4f338d29885049b18c437db1",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +566,570 @@        # if we have a preservable numeric op,\n        # provide coercion back to an integer type if possible\n        elif name in [\"sum\", \"min\", \"max\", \"prod\"]:\n            int_result = int(result)\n            if int_result == result:"
  },
  {
    "id" : "a6ac0044-8384-4a60-97a0-d7c0c8ac767d",
    "prId" : 31347,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31347#pullrequestreview-351455800",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13fd1de6-2239-4287-bef9-2a5d057ce181",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "this doesn't infer this?",
        "createdAt" : "2020-01-31T11:36:51Z",
        "updatedAt" : "2020-01-31T11:36:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "4d4561f0-6d08-4cd3-8b4a-b45f311288ca",
        "parentId" : "13fd1de6-2239-4287-bef9-2a5d057ce181",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "looks like it now does, probably added this to address mypy error in another module before addressing `pandas\\core\\arrays\\integer.py:712: error: Need type annotation for 'Int16Dtype'` etc in this module. (these changes are broken off another branch)\r\n\r\nI'll look into this further, and whether we can find variable type annotations throughout the codebase that are no longer needed as more types are added.\r\n\r\n",
        "createdAt" : "2020-01-31T11:50:49Z",
        "updatedAt" : "2020-01-31T11:50:49Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "13a6f19be8b5c813b29dcd529e160568f1406d49",
    "line" : 296,
    "diffHunk" : "@@ -1,1 +767,771 @@\n\n_dtypes: Dict[str, _IntegerDtype] = {\n    \"int8\": Int8Dtype(),\n    \"int16\": Int16Dtype(),"
  }
]