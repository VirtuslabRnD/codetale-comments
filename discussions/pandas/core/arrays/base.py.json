[
  {
    "id" : "4186ef71-573d-4c3e-aa48-b1338e642d83",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-92682680",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16297491-9cdb-464f-a531-c0ccd38e5afc",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'd advocate leaving base.py open for (near-)future usage as pandas-internal base and putting the \"use this if you want to write your own\" file in e.g. extension.py",
        "createdAt" : "2018-01-20T17:52:46Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "caf0915b-6547-4f21-b823-5cf7ae51fd79",
        "parentId" : "16297491-9cdb-464f-a531-c0ccd38e5afc",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I have a slight preference for `base.py` since it's a base class for all extension arrays. I don't think that having `ExtensionArray` in `arrays.base`  precludes having a pandas-internal base there as well.",
        "createdAt" : "2018-01-26T17:08:35Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "061ef5bf-7749-41cb-959f-9ce65e51f40f",
        "parentId" : "16297491-9cdb-464f-a531-c0ccd38e5afc",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It will be publicly exposed through pd.api.extensions anyway I think",
        "createdAt" : "2018-01-26T17:12:26Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ba283dbe-f6fc-454a-9a41-41b1a4b9aa0d",
        "parentId" : "16297491-9cdb-464f-a531-c0ccd38e5afc",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Adding stuff to the public API is waiting on https://github.com/pandas-dev/pandas/pull/19304",
        "createdAt" : "2018-01-30T19:06:41Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@\"\"\"An interface for extending pandas with custom arrays.\"\"\"\nfrom pandas.errors import AbstractMethodError\n"
  },
  {
    "id" : "5e4639b6-a36b-4e3d-bfe0-26796e86706c",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-92065344",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20433c23-496a-4b54-b22d-b1c2283043ca",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "Let's strongly consider exposing a helper function to make this easier to write, or at least an example of what this would look like (we can save this for later). It's not obvious how to write this with NumPy.",
        "createdAt" : "2018-01-26T18:13:39Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "7983963c-2097-4761-a760-091e674c8c92",
        "parentId" : "20433c23-496a-4b54-b22d-b1c2283043ca",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I added an example that I hope gets things correct for an extension type backed by a NumPy structured array.\r\n\r\nOne trouble with this providing a helper function is that we don't know much about how the extension array is actually storing the data. Although, we could rely on the assumption that the underlying storage is convertible to a NumPy array, and proceed from there. Though this would perhaps be sub-optimal for many extension arrays.",
        "createdAt" : "2018-01-27T10:25:42Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "3d431753-a957-40f2-9f49-4f7760b342a6",
        "parentId" : "20433c23-496a-4b54-b22d-b1c2283043ca",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "For GeometryArray, we have followed the same idea the write `take` (so it's not necessarily only if you have a *structured* array, just when you have an array backing up your ExtensionArray)",
        "createdAt" : "2018-01-27T17:09:16Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "cdcf6cbb-43f5-4444-9e7f-7a4c79b850d4",
        "parentId" : "20433c23-496a-4b54-b22d-b1c2283043ca",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is fine as it is a pandas standard.",
        "createdAt" : "2018-01-28T21:02:07Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 173,
    "diffHunk" : "@@ -1,1 +171,175 @@        This should follow pandas' semantics where -1 indicates missing values.\n        Positions where indexer is ``-1`` should be filled with the missing\n        value for this type.\n\n        This is called by ``Series.__getitem__``, ``.loc``, ``iloc``, when the"
  },
  {
    "id" : "7c5050b7-29ef-421b-899a-21b79c2a2c4b",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93130434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f75af8fa-00e2-48f7-b739-b0769ccaa635",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this should be tested on registration of the sub-type",
        "createdAt" : "2018-01-28T21:01:10Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "be3e52b5-0e8b-4e45-b3fe-3120a930fe00",
        "parentId" : "f75af8fa-00e2-48f7-b739-b0769ccaa635",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "What do you mean \"registration\"? We could override `ABC.register`, but I don't think there's an (easy) way to validate this if they just subclass `ExtensionArray`.\r\n\r\nIf people want to mess with this, that's fine, their stuff just won't work with pandas.",
        "createdAt" : "2018-01-30T12:50:51Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "cc9636ce-9ab6-4036-8605-0965cadafce1",
        "parentId" : "f75af8fa-00e2-48f7-b739-b0769ccaa635",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what I mean is that when you register things, we should actually test that the interface is respected. If we had final methods this would not be necessary, but if someone override ndim this is a problem. ",
        "createdAt" : "2018-02-01T00:10:14Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +124,128 @@        # type: () -> int\n        \"\"\"Extension Arrays are only allowed to be 1-dimensional.\"\"\"\n        return 1\n\n    @property"
  },
  {
    "id" : "28303246-31fe-4c00-8f56-987305b72c51",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93130434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e97098cb-7d65-4516-bf80-e696d91b7ce3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "need to list this in the very top doc-string",
        "createdAt" : "2018-02-01T00:11:32Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 213,
    "diffHunk" : "@@ -1,1 +211,215 @@    # ------------------------------------------------------------------------\n    @property\n    def _fill_value(self):\n        # type: () -> Any\n        \"\"\"The missing value for this type, e.g. np.nan\"\"\""
  },
  {
    "id" : "09eabe1c-69ec-431b-b267-56d9c0fb1632",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93130434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "baee5a17-0930-47dd-87b0-d0f8985c1fc5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "need to list this in the very top doc-string",
        "createdAt" : "2018-02-01T00:11:46Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 239,
    "diffHunk" : "@@ -1,1 +237,241 @@        raise AbstractMethodError(cls)\n\n    def _can_hold_na(self):\n        # type: () -> bool\n        \"\"\"Whether your array can hold missing values. True by default."
  },
  {
    "id" : "34e8f1cd-8a4f-4aa1-bbdf-537c8278a5d9",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93728124",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e0b4d5a-60a1-41d7-811f-74c84e57ab10",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The two lines above can be removed here and mentioned in the list below (actually only formatting_values, as concat_same_type is already there)",
        "createdAt" : "2018-02-02T19:21:35Z",
        "updatedAt" : "2018-02-02T19:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@    * copy\n    * _formatting_values\n    * _concat_same_type\n\n    Some additional methods are required to satisfy pandas' internal, private"
  },
  {
    "id" : "e22ac5dd-23d6-49a2-8363-541bdcebb3dc",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93728124",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ff9007f-dc0a-47ad-90b7-bb9363174a93",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "this is repetitive with above (the list of methods that are required), and there is also a typo in \"for ~~proper~~ this array to be properly\"",
        "createdAt" : "2018-02-02T19:23:12Z",
        "updatedAt" : "2018-02-02T19:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +54,58 @@\n    Additionally, certain methods and interfaces are required for proper\n    this array to be properly stored inside a ``DataFrame`` or ``Series``.\n    \"\"\"\n    # ------------------------------------------------------------------------"
  },
  {
    "id" : "331cbffe-0a63-4282-b5cd-74981069de49",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93728124",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf08ba3e-f319-4698-b0b3-c7dbe9adfa71",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "let's make this just \"NumPy array\", as this is not specific to structured arrays",
        "createdAt" : "2018-02-02T19:25:19Z",
        "updatedAt" : "2018-02-02T19:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 180,
    "diffHunk" : "@@ -1,1 +178,182 @@        Examples\n        --------\n        Suppose the extension array somehow backed by a NumPy structured array\n        and that the underlying structured array is stored as ``self.data``.\n        Then ``take`` may be written as"
  },
  {
    "id" : "01b67243-2bcb-4686-aa2d-6eb6da963671",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93737363",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c3c166a-ea9f-4de1-95c5-3da98579c75a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "One question here is: should the keyword argument `fill_value` actually be honored? (like `if fill_value is None: fill_value = self._fill_value`) \r\nAre there case where pandas will actually pass a certain value? \r\n\r\nIn any case some clarification would be helpful, also if it is just in the signature for compatibility but may be ignored (maybe in a follow-up).",
        "createdAt" : "2018-02-02T19:28:05Z",
        "updatedAt" : "2018-02-02T19:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "057f8c19-5407-4cb2-87dc-ce01ff9ae209",
        "parentId" : "4c3c166a-ea9f-4de1-95c5-3da98579c75a",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "re `fill_value`, I based this off `Categorical.take`. It does `assert isna(fill_value)`, but otherwise ignores it.\r\n\r\nI think that since ExtensionArray.take returns an ExtensionArray, most implementations will just ignore fill_value. I'll clarify it in the docs.",
        "createdAt" : "2018-02-02T19:53:00Z",
        "updatedAt" : "2018-02-02T19:53:00Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 189,
    "diffHunk" : "@@ -1,1 +187,191 @@               mask = indexer == -1\n               result = self.data.take(indexer)\n               result[mask] = self._fill_value\n               return type(self)(result)\n        \"\"\""
  },
  {
    "id" : "600c446a-f1c9-4ecc-90d2-8f97d2365036",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93737973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a06b61b-6a18-492a-b3af-f86a15145d2b",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Maybe we can provide a default implementation of `return np.asarray(self)` ? (so a densified object array). That is what I do in geopandas, and I suppose would also work for the IPadresses ?",
        "createdAt" : "2018-02-02T19:29:53Z",
        "updatedAt" : "2018-02-02T19:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d0206811-f4f3-4388-92af-a9a0466ffffd",
        "parentId" : "5a06b61b-6a18-492a-b3af-f86a15145d2b",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yes, I suppose that'll be OK for many implementations.",
        "createdAt" : "2018-02-02T19:55:07Z",
        "updatedAt" : "2018-02-02T19:55:07Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 222,
    "diffHunk" : "@@ -1,1 +220,224 @@        # At the moment, this has to be an array since we use result.dtype\n        \"\"\"An array of values to be printed in, e.g. the Series repr\"\"\"\n        raise AbstractMethodError(self)\n\n    @classmethod"
  },
  {
    "id" : "f89d73ac-09a5-489e-ba85-cf25f8f504a7",
    "prId" : 19520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19520#pullrequestreview-94151978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82f1c08c-34df-4745-84cb-cc7daaa30c39",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Interface change: This should have been a property.",
        "createdAt" : "2018-02-05T21:39:04Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5562b99d55062b2bb0a5b359bd5375adb3a46e",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +306,310 @@\n    @property\n    def _can_hold_na(self):\n        # type: () -> bool\n        \"\"\"Whether your array can hold missing values. True by default."
  },
  {
    "id" : "9176022f-6ec7-4cc2-bdf1-5e06b1946785",
    "prId" : 19520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19520#pullrequestreview-94320528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3c037af-ab3b-4a73-85e5-1587c9b43f70",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "NO, this should be implemented only by subclasses. ",
        "createdAt" : "2018-02-06T11:06:19Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8827e1ca-5fe1-41cf-a2ce-a134db6cb49e",
        "parentId" : "a3c037af-ab3b-4a73-85e5-1587c9b43f70",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Why?",
        "createdAt" : "2018-02-06T11:59:30Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "9ff3ad18-1409-48b7-a3db-2747ceed511e",
        "parentId" : "a3c037af-ab3b-4a73-85e5-1587c9b43f70",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is a very sensible default IMO, subclasses can always override if needed",
        "createdAt" : "2018-02-06T12:09:57Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5562b99d55062b2bb0a5b359bd5375adb3a46e",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +288,292 @@        # At the moment, this has to be an array since we use result.dtype\n        \"\"\"An array of values to be printed in, e.g. the Series repr\"\"\"\n        return np.array(self)\n\n    @classmethod"
  },
  {
    "id" : "1c0de5cd-1672-40b8-b42e-165bf7bf22a4",
    "prId" : 19520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19520#pullrequestreview-94750496",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a45fe87-e34a-40aa-839b-e873e62d9d8d",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Added some notes on the semantics of setitem if people want to take a look.",
        "createdAt" : "2018-02-07T15:29:25Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5562b99d55062b2bb0a5b359bd5375adb3a46e",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +94,98 @@    def __setitem__(self, key, value):\n        # type: (Union[int, np.ndarray], Any) -> None\n        \"\"\"Set one or more values inplace.\n\n        This method is not required to satisfy the pandas extension array"
  },
  {
    "id" : "cee5ac0e-8156-4eee-bec7-1bb5dde2376f",
    "prId" : 19558,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19558#pullrequestreview-95985447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ace055f0-c465-4d9a-a5ed-82ff60c1decb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I find it a bit strange that we say this is not part of the interface, but still provide here a default implementation and say what it is. \r\n\r\nIf it is not part of the interface, we could also define it on our own subclasses without defining it here. \r\nBut on the other hand, that will raise errors when an external extension array does not have this method. Eg some attributes on Series will call into this, which makes it somehow part of the interface.",
        "createdAt" : "2018-02-12T13:21:26Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7004dc75-8d22-4c38-9c77-636cc39b8941",
        "parentId" : "ace055f0-c465-4d9a-a5ed-82ff60c1decb",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> I find it a bit strange that we say this is not part of the interface, but still provide here a default implementation and say what it is.\r\n\r\nThis simplifies the implementation since\r\n\r\na.) we don't have to have a `PandasExtensionArray` that subclasses `ExtensionArray`, just to define this method.\r\nb.) we can safely call `._values` anywhere in our code without checking whether it's an extension array or a pandas extension array.\r\n\r\nMy preference is to leave it out of the interface until someone sees an actual need for it. I suspect this could come up if / when we start allowing custom indexes with their own indexing engines, but that seems like a ways down the road...",
        "createdAt" : "2018-02-12T14:33:23Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "419818c7-873d-4523-a3e2-30155a6b2284",
        "parentId" : "ace055f0-c465-4d9a-a5ed-82ff60c1decb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, I understand those reasons, but that means it *is* part of the interface (in the sense that if somebody would be stupid to implement a `_ndarray_values` property that returns something differently, it will break code?) \r\nIt's just a part of the interface that we ask not to implement?\r\n\r\nTo give an example, for GeoPandas, I was wondering if I would overwrite this property to return my `self.data` (the integer pointers) instead of a materialized array (which can be costly). \r\nFor things like `Series.strides`, `Series.itemsize`, .. this will be OK (and in principle no user should call this anyway .. so maybe I should not worry about it), but if it is used in other places as well that I am not really sure about, such an implementation might actually give a wrong result (but at the same time, if this is called in certain places for my column with an extension array, I want to know that, because materializing can be costly and I want to avoid this as much as possible).\r\n",
        "createdAt" : "2018-02-12T14:52:46Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "84fe3a8c-65a8-4b5b-b2ac-1fa1d1bca9e6",
        "parentId" : "ace055f0-c465-4d9a-a5ed-82ff60c1decb",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I see your point. Your GeoPandas concern is a good one. But I'm not sure how to proceeded :/ Do you have a preference for\r\n\r\na.) Adding it to the interface\r\nb.) Leaving it out of the interface, with a default implementation on EA\r\nc.) Making a pandas-specific EA that defines `_ndarray_values`, so uses of `_ndarray_values` will need to check for that attr.\r\n\r\n`._values` / `._ndarray_values` are meant to be internal, and I don't want to limit future refactorings with backwards compatibility concerns. I'm also not even sure how to document it beyond what's already there.",
        "createdAt" : "2018-02-12T16:05:53Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "6d4476a2-1fcf-47a5-b0be-763b73a56daf",
        "parentId" : "ace055f0-c465-4d9a-a5ed-82ff60c1decb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Maybe the best option is to leave it for now? :)\r\n\r\nIdeally, the Series machinery should not use `_ndarray_values` too often, as this would require knowledge of what those values mean (codes, ordinals, ...), which Series does not need to know (if there is knowledge required, it should somehow dispatch the operation to the underlying (extension) array itself). \r\n\r\nAnd this is already the case I think. From a quick scan, currently in the PR, I see `ndarray_values` is mainly used for:\r\n\r\n- indexing (values used in the engine) -> for now we don't support extension arrays to be the data for Index (apart from our own), so this is a worry for later if we want to tackle that\r\n- Index object operations (eg the setops) -> same as above\r\n- in some specific cases where we know the parent object (eg we know it is a PeriodIndex, we just want to get the ordinals)\r\n- for algos (eg take, unique) -> either they dispatch to EA (eg take) or for now the fallback is object array anyhow (eg value_counts), and in general this is something we still need to discuss how to handle in general (factorize, unique, ..)\r\n- some Series attributes (shape, itemsize, strides, size) -> shape can also be derived from `_values` directly (like `nbytes`) as it is part of the EA interface. And from the others, I think `size` would be nice to not have to materialize the EA (itemsize and strides I don't care about). Can we let this return `len(self._values)`, which is part of the interface? (I am not sure to what extent `.size` and `__len__` on numpy arrays are different / have different performance)",
        "createdAt" : "2018-02-12T18:49:54Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "356fb4fd-ba02-4493-960f-bc7ccb4e2a63",
        "parentId" : "ace055f0-c465-4d9a-a5ed-82ff60c1decb",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Your assessment looks correct. Nothing that's series specific currently uses `_ndarray_values`, so it's really just code that is Index-specific or index / series agnostic.\r\n\r\nI can change `.shape` and `.size` to use `._values` instead of  instead of `._ndarary` values. I'll just have to override it in `DatetimeIndex` to avoid a recursion error.",
        "createdAt" : "2018-02-12T19:00:14Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "19a90c95-b50c-41ca-83c8-de8a7dbb4206",
        "parentId" : "ace055f0-c465-4d9a-a5ed-82ff60c1decb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i agree with @jorisvandenbossche assessment here. maybe if we can ultimatley remove this would be good, and simply dispatch to the array object. If Index is a proper EA then this would be possible.",
        "createdAt" : "2018-02-12T23:53:54Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3af8a21ea0e13ba5fc73db464f6e327552c71b0e",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +273,277 @@        \"\"\"Internal pandas method for lossy conversion to a NumPy ndarray.\n\n        This method is not part of the pandas interface.\n\n        The expectation is that this is cheap to compute, and is primarily"
  },
  {
    "id" : "d20aea79-a762-454b-8f4a-5cba5fd8058a",
    "prId" : 19869,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19869#pullrequestreview-103373765",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c99d77ef-0683-48f1-88e1-f9b55c7bf4b8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "future PR should prob add some examples here :> (and other doc-strings). ",
        "createdAt" : "2018-03-13T10:17:06Z",
        "updatedAt" : "2018-03-13T10:17:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b1c79771-2c4e-4c3f-86af-a97ebab47c3b",
        "parentId" : "c99d77ef-0683-48f1-88e1-f9b55c7bf4b8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "True :) The only problem is that for ExtensionArray we don't have a direct working example, as you first need to subclass it (unless we use one of the existing ones like Categorical, but that also seems a bit strange)",
        "createdAt" : "2018-03-13T10:39:37Z",
        "updatedAt" : "2018-03-13T10:39:37Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "41dd12875f3bfc443e41df258d02d8722d62813b",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +241,245 @@\n        Returns\n        -------\n        uniques : ExtensionArray\n        \"\"\""
  },
  {
    "id" : "eddbc8e1-b899-4965-8ebb-b3b09f21fddc",
    "prId" : 19909,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19909#pullrequestreview-99388054",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be4b450c-c0d9-41ae-9905-e44d94f57274",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "A `putmask` type method would be *extremely* useful here.\r\n\r\nI'll see what I can do to simplify this.",
        "createdAt" : "2018-02-26T16:26:53Z",
        "updatedAt" : "2018-03-15T11:33:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "793ee8fe-90fa-4aff-9c96-d2d25b7ae866",
        "parentId" : "be4b450c-c0d9-41ae-9905-e44d94f57274",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "How would that be different with `array[mask] = values` ?",
        "createdAt" : "2018-02-26T17:15:37Z",
        "updatedAt" : "2018-03-15T11:33:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "05fced650bac03f122689ce6f8fd423f89bea3d6",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +262,266 @@        filled : ExtensionArray with NA/NaN filled\n        \"\"\"\n        from pandas.api.types import is_scalar\n        from pandas.util._validators import validate_fillna_kwargs\n        from pandas.core.missing import pad_1d, backfill_1d"
  },
  {
    "id" : "aa8e58bd-c9ee-45e2-a7ab-46384777cac9",
    "prId" : 20707,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20707#pullrequestreview-112295310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f59a4a73-72cf-471b-9be4-994843bae731",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add a note about the experimental status in this file as well (eg in module docstring at line 1).",
        "createdAt" : "2018-04-16T06:54:06Z",
        "updatedAt" : "2018-04-21T11:35:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "f425ad913676469f6337f58ce497285e29abf096",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +21,25 @@    may be stored directly inside a :class:`DataFrame` or :class:`Series`.\n\n    .. versionadded:: 0.23.0\n\n    Notes"
  },
  {
    "id" : "1975b818-e9a6-4c5f-85eb-385a474b1a67",
    "prId" : 20814,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20814#pullrequestreview-115852775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae887ea9-1ea4-41c6-acd8-5d0c44848056",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I personally found the previous example that uses something like `self.data` more illustrating how it could look like (except the part on checking for empty, and that the masking would not be done manually anymore). But of course, the example that you did now has the advantage of being an actual working implementation (only one that you won't use in many cases). ",
        "createdAt" : "2018-04-26T15:05:52Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e6064b01-b8fc-4b05-afc3-13a39e039eb2",
        "parentId" : "ae887ea9-1ea4-41c6-acd8-5d0c44848056",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Any thoughts on the new example? I added a comment about how to proceed if your array is backed by an ndarray.",
        "createdAt" : "2018-04-27T00:48:25Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "198103f5-5903-445c-8ef9-1da38b7ad84b",
        "parentId" : "ae887ea9-1ea4-41c6-acd8-5d0c44848056",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Maybe add a similar comment to the `fill_value = self.dtype.na_value` line ? (that there you can pass the low-level value that is used in the backing non-object ndarray instead `self.dtype.na_value`",
        "createdAt" : "2018-04-27T08:08:42Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d9852255-370d-4eaa-a31f-2e934830b2af",
        "parentId" : "ae887ea9-1ea4-41c6-acd8-5d0c44848056",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, I see you added a note about that in the normal comments below the docstring (but maybe still add a short note like \"pass here the appropriate NA value for the physical storage, see below\")",
        "createdAt" : "2018-04-27T08:10:36Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec0cecd292947aa4d8416991e9f8920a4cd9a831",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +521,525 @@        --------\n        Here's an example implementation, which relies on casting the\n        extension array to object dtype. This uses the helper method\n        :func:`pandas.api.extensions.take`.\n"
  },
  {
    "id" : "520039d6-384d-4b8d-aebc-b975e98815a4",
    "prId" : 20814,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20814#pullrequestreview-115794593",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77dc0e5a-d78d-46df-878f-efd3ac5bcffa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you share this doc?",
        "createdAt" : "2018-04-26T22:23:05Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "00904060-8f39-470f-8bce-78bda9c77ceb",
        "parentId" : "77dc0e5a-d78d-46df-878f-efd3ac5bcffa",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "we want people to look at the source code of this (as we explicitly say the code of this base class is kind of the documentation), so I would certainly try to keep this one here (not sure if it would be easy to reuse it for the `take` function)",
        "createdAt" : "2018-04-26T22:30:18Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "188af406-1d33-41fb-8156-2c5d65816c0e",
        "parentId" : "77dc0e5a-d78d-46df-878f-efd3ac5bcffa",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Sharing docs between these two are a bit difficult because of circular import issues. The docstring would have to go in a third module, which isn't desirable.",
        "createdAt" : "2018-04-27T01:03:31Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec0cecd292947aa4d8416991e9f8920a4cd9a831",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +470,474 @@        Parameters\n        ----------\n        indices : sequence of integers\n            Indices to be taken.\n        allow_fill : bool, default False"
  }
]