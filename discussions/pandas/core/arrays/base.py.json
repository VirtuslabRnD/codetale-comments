[
  {
    "id" : "4186ef71-573d-4c3e-aa48-b1338e642d83",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-92682680",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16297491-9cdb-464f-a531-c0ccd38e5afc",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'd advocate leaving base.py open for (near-)future usage as pandas-internal base and putting the \"use this if you want to write your own\" file in e.g. extension.py",
        "createdAt" : "2018-01-20T17:52:46Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "caf0915b-6547-4f21-b823-5cf7ae51fd79",
        "parentId" : "16297491-9cdb-464f-a531-c0ccd38e5afc",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I have a slight preference for `base.py` since it's a base class for all extension arrays. I don't think that having `ExtensionArray` in `arrays.base`  precludes having a pandas-internal base there as well.",
        "createdAt" : "2018-01-26T17:08:35Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "061ef5bf-7749-41cb-959f-9ce65e51f40f",
        "parentId" : "16297491-9cdb-464f-a531-c0ccd38e5afc",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It will be publicly exposed through pd.api.extensions anyway I think",
        "createdAt" : "2018-01-26T17:12:26Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ba283dbe-f6fc-454a-9a41-41b1a4b9aa0d",
        "parentId" : "16297491-9cdb-464f-a531-c0ccd38e5afc",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Adding stuff to the public API is waiting on https://github.com/pandas-dev/pandas/pull/19304",
        "createdAt" : "2018-01-30T19:06:41Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@\"\"\"An interface for extending pandas with custom arrays.\"\"\"\nfrom pandas.errors import AbstractMethodError\n"
  },
  {
    "id" : "5e4639b6-a36b-4e3d-bfe0-26796e86706c",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-92065344",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20433c23-496a-4b54-b22d-b1c2283043ca",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "Let's strongly consider exposing a helper function to make this easier to write, or at least an example of what this would look like (we can save this for later). It's not obvious how to write this with NumPy.",
        "createdAt" : "2018-01-26T18:13:39Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "7983963c-2097-4761-a760-091e674c8c92",
        "parentId" : "20433c23-496a-4b54-b22d-b1c2283043ca",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I added an example that I hope gets things correct for an extension type backed by a NumPy structured array.\r\n\r\nOne trouble with this providing a helper function is that we don't know much about how the extension array is actually storing the data. Although, we could rely on the assumption that the underlying storage is convertible to a NumPy array, and proceed from there. Though this would perhaps be sub-optimal for many extension arrays.",
        "createdAt" : "2018-01-27T10:25:42Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "3d431753-a957-40f2-9f49-4f7760b342a6",
        "parentId" : "20433c23-496a-4b54-b22d-b1c2283043ca",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "For GeometryArray, we have followed the same idea the write `take` (so it's not necessarily only if you have a *structured* array, just when you have an array backing up your ExtensionArray)",
        "createdAt" : "2018-01-27T17:09:16Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "cdcf6cbb-43f5-4444-9e7f-7a4c79b850d4",
        "parentId" : "20433c23-496a-4b54-b22d-b1c2283043ca",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is fine as it is a pandas standard.",
        "createdAt" : "2018-01-28T21:02:07Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 173,
    "diffHunk" : "@@ -1,1 +171,175 @@        This should follow pandas' semantics where -1 indicates missing values.\n        Positions where indexer is ``-1`` should be filled with the missing\n        value for this type.\n\n        This is called by ``Series.__getitem__``, ``.loc``, ``iloc``, when the"
  },
  {
    "id" : "7c5050b7-29ef-421b-899a-21b79c2a2c4b",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93130434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f75af8fa-00e2-48f7-b739-b0769ccaa635",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this should be tested on registration of the sub-type",
        "createdAt" : "2018-01-28T21:01:10Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "be3e52b5-0e8b-4e45-b3fe-3120a930fe00",
        "parentId" : "f75af8fa-00e2-48f7-b739-b0769ccaa635",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "What do you mean \"registration\"? We could override `ABC.register`, but I don't think there's an (easy) way to validate this if they just subclass `ExtensionArray`.\r\n\r\nIf people want to mess with this, that's fine, their stuff just won't work with pandas.",
        "createdAt" : "2018-01-30T12:50:51Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "cc9636ce-9ab6-4036-8605-0965cadafce1",
        "parentId" : "f75af8fa-00e2-48f7-b739-b0769ccaa635",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what I mean is that when you register things, we should actually test that the interface is respected. If we had final methods this would not be necessary, but if someone override ndim this is a problem. ",
        "createdAt" : "2018-02-01T00:10:14Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +124,128 @@        # type: () -> int\n        \"\"\"Extension Arrays are only allowed to be 1-dimensional.\"\"\"\n        return 1\n\n    @property"
  },
  {
    "id" : "28303246-31fe-4c00-8f56-987305b72c51",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93130434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e97098cb-7d65-4516-bf80-e696d91b7ce3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "need to list this in the very top doc-string",
        "createdAt" : "2018-02-01T00:11:32Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 213,
    "diffHunk" : "@@ -1,1 +211,215 @@    # ------------------------------------------------------------------------\n    @property\n    def _fill_value(self):\n        # type: () -> Any\n        \"\"\"The missing value for this type, e.g. np.nan\"\"\""
  },
  {
    "id" : "09eabe1c-69ec-431b-b267-56d9c0fb1632",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93130434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "baee5a17-0930-47dd-87b0-d0f8985c1fc5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "need to list this in the very top doc-string",
        "createdAt" : "2018-02-01T00:11:46Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 239,
    "diffHunk" : "@@ -1,1 +237,241 @@        raise AbstractMethodError(cls)\n\n    def _can_hold_na(self):\n        # type: () -> bool\n        \"\"\"Whether your array can hold missing values. True by default."
  },
  {
    "id" : "34e8f1cd-8a4f-4aa1-bbdf-537c8278a5d9",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93728124",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e0b4d5a-60a1-41d7-811f-74c84e57ab10",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The two lines above can be removed here and mentioned in the list below (actually only formatting_values, as concat_same_type is already there)",
        "createdAt" : "2018-02-02T19:21:35Z",
        "updatedAt" : "2018-02-02T19:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@    * copy\n    * _formatting_values\n    * _concat_same_type\n\n    Some additional methods are required to satisfy pandas' internal, private"
  },
  {
    "id" : "e22ac5dd-23d6-49a2-8363-541bdcebb3dc",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93728124",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ff9007f-dc0a-47ad-90b7-bb9363174a93",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "this is repetitive with above (the list of methods that are required), and there is also a typo in \"for ~~proper~~ this array to be properly\"",
        "createdAt" : "2018-02-02T19:23:12Z",
        "updatedAt" : "2018-02-02T19:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +54,58 @@\n    Additionally, certain methods and interfaces are required for proper\n    this array to be properly stored inside a ``DataFrame`` or ``Series``.\n    \"\"\"\n    # ------------------------------------------------------------------------"
  },
  {
    "id" : "331cbffe-0a63-4282-b5cd-74981069de49",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93728124",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf08ba3e-f319-4698-b0b3-c7dbe9adfa71",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "let's make this just \"NumPy array\", as this is not specific to structured arrays",
        "createdAt" : "2018-02-02T19:25:19Z",
        "updatedAt" : "2018-02-02T19:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 180,
    "diffHunk" : "@@ -1,1 +178,182 @@        Examples\n        --------\n        Suppose the extension array somehow backed by a NumPy structured array\n        and that the underlying structured array is stored as ``self.data``.\n        Then ``take`` may be written as"
  },
  {
    "id" : "01b67243-2bcb-4686-aa2d-6eb6da963671",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93737363",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c3c166a-ea9f-4de1-95c5-3da98579c75a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "One question here is: should the keyword argument `fill_value` actually be honored? (like `if fill_value is None: fill_value = self._fill_value`) \r\nAre there case where pandas will actually pass a certain value? \r\n\r\nIn any case some clarification would be helpful, also if it is just in the signature for compatibility but may be ignored (maybe in a follow-up).",
        "createdAt" : "2018-02-02T19:28:05Z",
        "updatedAt" : "2018-02-02T19:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "057f8c19-5407-4cb2-87dc-ce01ff9ae209",
        "parentId" : "4c3c166a-ea9f-4de1-95c5-3da98579c75a",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "re `fill_value`, I based this off `Categorical.take`. It does `assert isna(fill_value)`, but otherwise ignores it.\r\n\r\nI think that since ExtensionArray.take returns an ExtensionArray, most implementations will just ignore fill_value. I'll clarify it in the docs.",
        "createdAt" : "2018-02-02T19:53:00Z",
        "updatedAt" : "2018-02-02T19:53:00Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 189,
    "diffHunk" : "@@ -1,1 +187,191 @@               mask = indexer == -1\n               result = self.data.take(indexer)\n               result[mask] = self._fill_value\n               return type(self)(result)\n        \"\"\""
  },
  {
    "id" : "600c446a-f1c9-4ecc-90d2-8f97d2365036",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93737973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a06b61b-6a18-492a-b3af-f86a15145d2b",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Maybe we can provide a default implementation of `return np.asarray(self)` ? (so a densified object array). That is what I do in geopandas, and I suppose would also work for the IPadresses ?",
        "createdAt" : "2018-02-02T19:29:53Z",
        "updatedAt" : "2018-02-02T19:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d0206811-f4f3-4388-92af-a9a0466ffffd",
        "parentId" : "5a06b61b-6a18-492a-b3af-f86a15145d2b",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yes, I suppose that'll be OK for many implementations.",
        "createdAt" : "2018-02-02T19:55:07Z",
        "updatedAt" : "2018-02-02T19:55:07Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 222,
    "diffHunk" : "@@ -1,1 +220,224 @@        # At the moment, this has to be an array since we use result.dtype\n        \"\"\"An array of values to be printed in, e.g. the Series repr\"\"\"\n        raise AbstractMethodError(self)\n\n    @classmethod"
  },
  {
    "id" : "f89d73ac-09a5-489e-ba85-cf25f8f504a7",
    "prId" : 19520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19520#pullrequestreview-94151978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82f1c08c-34df-4745-84cb-cc7daaa30c39",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Interface change: This should have been a property.",
        "createdAt" : "2018-02-05T21:39:04Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5562b99d55062b2bb0a5b359bd5375adb3a46e",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +306,310 @@\n    @property\n    def _can_hold_na(self):\n        # type: () -> bool\n        \"\"\"Whether your array can hold missing values. True by default."
  },
  {
    "id" : "9176022f-6ec7-4cc2-bdf1-5e06b1946785",
    "prId" : 19520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19520#pullrequestreview-94320528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3c037af-ab3b-4a73-85e5-1587c9b43f70",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "NO, this should be implemented only by subclasses. ",
        "createdAt" : "2018-02-06T11:06:19Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8827e1ca-5fe1-41cf-a2ce-a134db6cb49e",
        "parentId" : "a3c037af-ab3b-4a73-85e5-1587c9b43f70",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Why?",
        "createdAt" : "2018-02-06T11:59:30Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "9ff3ad18-1409-48b7-a3db-2747ceed511e",
        "parentId" : "a3c037af-ab3b-4a73-85e5-1587c9b43f70",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is a very sensible default IMO, subclasses can always override if needed",
        "createdAt" : "2018-02-06T12:09:57Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5562b99d55062b2bb0a5b359bd5375adb3a46e",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +288,292 @@        # At the moment, this has to be an array since we use result.dtype\n        \"\"\"An array of values to be printed in, e.g. the Series repr\"\"\"\n        return np.array(self)\n\n    @classmethod"
  },
  {
    "id" : "1c0de5cd-1672-40b8-b42e-165bf7bf22a4",
    "prId" : 19520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19520#pullrequestreview-94750496",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a45fe87-e34a-40aa-839b-e873e62d9d8d",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Added some notes on the semantics of setitem if people want to take a look.",
        "createdAt" : "2018-02-07T15:29:25Z",
        "updatedAt" : "2018-02-22T16:31:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea5562b99d55062b2bb0a5b359bd5375adb3a46e",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +94,98 @@    def __setitem__(self, key, value):\n        # type: (Union[int, np.ndarray], Any) -> None\n        \"\"\"Set one or more values inplace.\n\n        This method is not required to satisfy the pandas extension array"
  },
  {
    "id" : "cee5ac0e-8156-4eee-bec7-1bb5dde2376f",
    "prId" : 19558,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19558#pullrequestreview-95985447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ace055f0-c465-4d9a-a5ed-82ff60c1decb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I find it a bit strange that we say this is not part of the interface, but still provide here a default implementation and say what it is. \r\n\r\nIf it is not part of the interface, we could also define it on our own subclasses without defining it here. \r\nBut on the other hand, that will raise errors when an external extension array does not have this method. Eg some attributes on Series will call into this, which makes it somehow part of the interface.",
        "createdAt" : "2018-02-12T13:21:26Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7004dc75-8d22-4c38-9c77-636cc39b8941",
        "parentId" : "ace055f0-c465-4d9a-a5ed-82ff60c1decb",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> I find it a bit strange that we say this is not part of the interface, but still provide here a default implementation and say what it is.\r\n\r\nThis simplifies the implementation since\r\n\r\na.) we don't have to have a `PandasExtensionArray` that subclasses `ExtensionArray`, just to define this method.\r\nb.) we can safely call `._values` anywhere in our code without checking whether it's an extension array or a pandas extension array.\r\n\r\nMy preference is to leave it out of the interface until someone sees an actual need for it. I suspect this could come up if / when we start allowing custom indexes with their own indexing engines, but that seems like a ways down the road...",
        "createdAt" : "2018-02-12T14:33:23Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "419818c7-873d-4523-a3e2-30155a6b2284",
        "parentId" : "ace055f0-c465-4d9a-a5ed-82ff60c1decb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, I understand those reasons, but that means it *is* part of the interface (in the sense that if somebody would be stupid to implement a `_ndarray_values` property that returns something differently, it will break code?) \r\nIt's just a part of the interface that we ask not to implement?\r\n\r\nTo give an example, for GeoPandas, I was wondering if I would overwrite this property to return my `self.data` (the integer pointers) instead of a materialized array (which can be costly). \r\nFor things like `Series.strides`, `Series.itemsize`, .. this will be OK (and in principle no user should call this anyway .. so maybe I should not worry about it), but if it is used in other places as well that I am not really sure about, such an implementation might actually give a wrong result (but at the same time, if this is called in certain places for my column with an extension array, I want to know that, because materializing can be costly and I want to avoid this as much as possible).\r\n",
        "createdAt" : "2018-02-12T14:52:46Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "84fe3a8c-65a8-4b5b-b2ac-1fa1d1bca9e6",
        "parentId" : "ace055f0-c465-4d9a-a5ed-82ff60c1decb",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I see your point. Your GeoPandas concern is a good one. But I'm not sure how to proceeded :/ Do you have a preference for\r\n\r\na.) Adding it to the interface\r\nb.) Leaving it out of the interface, with a default implementation on EA\r\nc.) Making a pandas-specific EA that defines `_ndarray_values`, so uses of `_ndarray_values` will need to check for that attr.\r\n\r\n`._values` / `._ndarray_values` are meant to be internal, and I don't want to limit future refactorings with backwards compatibility concerns. I'm also not even sure how to document it beyond what's already there.",
        "createdAt" : "2018-02-12T16:05:53Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "6d4476a2-1fcf-47a5-b0be-763b73a56daf",
        "parentId" : "ace055f0-c465-4d9a-a5ed-82ff60c1decb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Maybe the best option is to leave it for now? :)\r\n\r\nIdeally, the Series machinery should not use `_ndarray_values` too often, as this would require knowledge of what those values mean (codes, ordinals, ...), which Series does not need to know (if there is knowledge required, it should somehow dispatch the operation to the underlying (extension) array itself). \r\n\r\nAnd this is already the case I think. From a quick scan, currently in the PR, I see `ndarray_values` is mainly used for:\r\n\r\n- indexing (values used in the engine) -> for now we don't support extension arrays to be the data for Index (apart from our own), so this is a worry for later if we want to tackle that\r\n- Index object operations (eg the setops) -> same as above\r\n- in some specific cases where we know the parent object (eg we know it is a PeriodIndex, we just want to get the ordinals)\r\n- for algos (eg take, unique) -> either they dispatch to EA (eg take) or for now the fallback is object array anyhow (eg value_counts), and in general this is something we still need to discuss how to handle in general (factorize, unique, ..)\r\n- some Series attributes (shape, itemsize, strides, size) -> shape can also be derived from `_values` directly (like `nbytes`) as it is part of the EA interface. And from the others, I think `size` would be nice to not have to materialize the EA (itemsize and strides I don't care about). Can we let this return `len(self._values)`, which is part of the interface? (I am not sure to what extent `.size` and `__len__` on numpy arrays are different / have different performance)",
        "createdAt" : "2018-02-12T18:49:54Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "356fb4fd-ba02-4493-960f-bc7ccb4e2a63",
        "parentId" : "ace055f0-c465-4d9a-a5ed-82ff60c1decb",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Your assessment looks correct. Nothing that's series specific currently uses `_ndarray_values`, so it's really just code that is Index-specific or index / series agnostic.\r\n\r\nI can change `.shape` and `.size` to use `._values` instead of  instead of `._ndarary` values. I'll just have to override it in `DatetimeIndex` to avoid a recursion error.",
        "createdAt" : "2018-02-12T19:00:14Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "19a90c95-b50c-41ca-83c8-de8a7dbb4206",
        "parentId" : "ace055f0-c465-4d9a-a5ed-82ff60c1decb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i agree with @jorisvandenbossche assessment here. maybe if we can ultimatley remove this would be good, and simply dispatch to the array object. If Index is a proper EA then this would be possible.",
        "createdAt" : "2018-02-12T23:53:54Z",
        "updatedAt" : "2018-02-13T11:54:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3af8a21ea0e13ba5fc73db464f6e327552c71b0e",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +273,277 @@        \"\"\"Internal pandas method for lossy conversion to a NumPy ndarray.\n\n        This method is not part of the pandas interface.\n\n        The expectation is that this is cheap to compute, and is primarily"
  },
  {
    "id" : "d20aea79-a762-454b-8f4a-5cba5fd8058a",
    "prId" : 19869,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19869#pullrequestreview-103373765",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c99d77ef-0683-48f1-88e1-f9b55c7bf4b8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "future PR should prob add some examples here :> (and other doc-strings). ",
        "createdAt" : "2018-03-13T10:17:06Z",
        "updatedAt" : "2018-03-13T10:17:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b1c79771-2c4e-4c3f-86af-a97ebab47c3b",
        "parentId" : "c99d77ef-0683-48f1-88e1-f9b55c7bf4b8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "True :) The only problem is that for ExtensionArray we don't have a direct working example, as you first need to subclass it (unless we use one of the existing ones like Categorical, but that also seems a bit strange)",
        "createdAt" : "2018-03-13T10:39:37Z",
        "updatedAt" : "2018-03-13T10:39:37Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "41dd12875f3bfc443e41df258d02d8722d62813b",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +241,245 @@\n        Returns\n        -------\n        uniques : ExtensionArray\n        \"\"\""
  },
  {
    "id" : "eddbc8e1-b899-4965-8ebb-b3b09f21fddc",
    "prId" : 19909,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19909#pullrequestreview-99388054",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be4b450c-c0d9-41ae-9905-e44d94f57274",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "A `putmask` type method would be *extremely* useful here.\r\n\r\nI'll see what I can do to simplify this.",
        "createdAt" : "2018-02-26T16:26:53Z",
        "updatedAt" : "2018-03-15T11:33:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "793ee8fe-90fa-4aff-9c96-d2d25b7ae866",
        "parentId" : "be4b450c-c0d9-41ae-9905-e44d94f57274",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "How would that be different with `array[mask] = values` ?",
        "createdAt" : "2018-02-26T17:15:37Z",
        "updatedAt" : "2018-03-15T11:33:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "05fced650bac03f122689ce6f8fd423f89bea3d6",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +262,266 @@        filled : ExtensionArray with NA/NaN filled\n        \"\"\"\n        from pandas.api.types import is_scalar\n        from pandas.util._validators import validate_fillna_kwargs\n        from pandas.core.missing import pad_1d, backfill_1d"
  },
  {
    "id" : "aa8e58bd-c9ee-45e2-a7ab-46384777cac9",
    "prId" : 20707,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20707#pullrequestreview-112295310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f59a4a73-72cf-471b-9be4-994843bae731",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add a note about the experimental status in this file as well (eg in module docstring at line 1).",
        "createdAt" : "2018-04-16T06:54:06Z",
        "updatedAt" : "2018-04-21T11:35:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "f425ad913676469f6337f58ce497285e29abf096",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +21,25 @@    may be stored directly inside a :class:`DataFrame` or :class:`Series`.\n\n    .. versionadded:: 0.23.0\n\n    Notes"
  },
  {
    "id" : "1975b818-e9a6-4c5f-85eb-385a474b1a67",
    "prId" : 20814,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20814#pullrequestreview-115852775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae887ea9-1ea4-41c6-acd8-5d0c44848056",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I personally found the previous example that uses something like `self.data` more illustrating how it could look like (except the part on checking for empty, and that the masking would not be done manually anymore). But of course, the example that you did now has the advantage of being an actual working implementation (only one that you won't use in many cases). ",
        "createdAt" : "2018-04-26T15:05:52Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e6064b01-b8fc-4b05-afc3-13a39e039eb2",
        "parentId" : "ae887ea9-1ea4-41c6-acd8-5d0c44848056",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Any thoughts on the new example? I added a comment about how to proceed if your array is backed by an ndarray.",
        "createdAt" : "2018-04-27T00:48:25Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "198103f5-5903-445c-8ef9-1da38b7ad84b",
        "parentId" : "ae887ea9-1ea4-41c6-acd8-5d0c44848056",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Maybe add a similar comment to the `fill_value = self.dtype.na_value` line ? (that there you can pass the low-level value that is used in the backing non-object ndarray instead `self.dtype.na_value`",
        "createdAt" : "2018-04-27T08:08:42Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d9852255-370d-4eaa-a31f-2e934830b2af",
        "parentId" : "ae887ea9-1ea4-41c6-acd8-5d0c44848056",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, I see you added a note about that in the normal comments below the docstring (but maybe still add a short note like \"pass here the appropriate NA value for the physical storage, see below\")",
        "createdAt" : "2018-04-27T08:10:36Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec0cecd292947aa4d8416991e9f8920a4cd9a831",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +521,525 @@        --------\n        Here's an example implementation, which relies on casting the\n        extension array to object dtype. This uses the helper method\n        :func:`pandas.api.extensions.take`.\n"
  },
  {
    "id" : "520039d6-384d-4b8d-aebc-b975e98815a4",
    "prId" : 20814,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20814#pullrequestreview-115794593",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77dc0e5a-d78d-46df-878f-efd3ac5bcffa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you share this doc?",
        "createdAt" : "2018-04-26T22:23:05Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "00904060-8f39-470f-8bce-78bda9c77ceb",
        "parentId" : "77dc0e5a-d78d-46df-878f-efd3ac5bcffa",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "we want people to look at the source code of this (as we explicitly say the code of this base class is kind of the documentation), so I would certainly try to keep this one here (not sure if it would be easy to reuse it for the `take` function)",
        "createdAt" : "2018-04-26T22:30:18Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "188af406-1d33-41fb-8156-2c5d65816c0e",
        "parentId" : "77dc0e5a-d78d-46df-878f-efd3ac5bcffa",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Sharing docs between these two are a bit difficult because of circular import issues. The docstring would have to go in a third module, which isn't desirable.",
        "createdAt" : "2018-04-27T01:03:31Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec0cecd292947aa4d8416991e9f8920a4cd9a831",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +470,474 @@        Parameters\n        ----------\n        indices : sequence of integers\n            Indices to be taken.\n        allow_fill : bool, default False"
  },
  {
    "id" : "30456e10-cbb2-41b5-a689-95866eb17e49",
    "prId" : 21185,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21185#pullrequestreview-125557134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "396c6575-9e60-442c-b31d-0025a5732a77",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Remove the leading space. Add a trailing `.`",
        "createdAt" : "2018-06-04T12:55:10Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2c91d706510b16a8a9f82dbeafa7d35396697d1",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +389,393 @@\n    def dropna(self):\n        \"\"\" Return ExtensionArray without NA values\n\n        Returns"
  },
  {
    "id" : "a270dc05-0ca2-4922-b9cc-82c87832403c",
    "prId" : 21261,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21261#pullrequestreview-131343761",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78f0f435-1654-458f-8a4f-dc599aa38f4d",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Should we make this `is_list_like(param)` more strict as `is_array_like` ? \r\n\r\nFor example, if you create ExtensionArray of sets, and do an operation where the right value is a single set, the current code will not work.",
        "createdAt" : "2018-06-22T14:19:31Z",
        "updatedAt" : "2018-06-29T00:18:42Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "856e5659-ae30-4c66-b7bf-8c17bc05c8a8",
        "parentId" : "78f0f435-1654-458f-8a4f-dc599aa38f4d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Or similar with dicts (for which we already have a dummy implementation in the tests)\r\n\r\n(I am also fine with leaving this for later, as there are other places where we have problems with iterable scalar elements)",
        "createdAt" : "2018-06-22T14:20:22Z",
        "updatedAt" : "2018-06-29T00:18:42Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "bab2e3b2-d72c-427e-94f0-0d886c6bbeb2",
        "parentId" : "78f0f435-1654-458f-8a4f-dc599aa38f4d",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "@jorisvandenbossche I think I want to leave it for now.  Because you'd like to be able to do an operation such as `EABackedSeries + list(objects)` and using `is_array_type` means you have to have a dtype.",
        "createdAt" : "2018-06-22T20:52:52Z",
        "updatedAt" : "2018-06-29T00:18:42Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fc93e49a28eccc4c66294e7238ba63f0e7bda29",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +708,712 @@        def _binop(self, other):\n            def convert_values(param):\n                if isinstance(param, ExtensionArray) or is_list_like(param):\n                    ovalues = param\n                else:  # Assume its an object"
  },
  {
    "id" : "f0733609-d1fb-4a92-b9a0-404e1c343fcf",
    "prId" : 21261,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21261#pullrequestreview-133234021",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9280bdc-de11-45c3-923c-883342263e3a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "if this fails, I think we should still convert it to an array instead of keeping it as a list?\r\n\r\nOr does that happen on another level? \r\n(anyway, also for usability with the ExtensionArray itself, I think coercing it to an array makes more sense)",
        "createdAt" : "2018-06-22T14:21:27Z",
        "updatedAt" : "2018-06-29T00:18:42Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "774ffb54-268b-4695-9b00-4d641a05ade1",
        "parentId" : "b9280bdc-de11-45c3-923c-883342263e3a",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "If we convert to an array, then we could have a dtype problem. This allows the result to be of any type.",
        "createdAt" : "2018-06-22T20:54:20Z",
        "updatedAt" : "2018-06-29T00:18:42Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      },
      {
        "id" : "011663db-07a2-431e-81e7-0b9cde889b2d",
        "parentId" : "b9280bdc-de11-45c3-923c-883342263e3a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> If we convert to an array, then we could have a dtype problem\r\n\r\nIt will be converted to an array anyhow, if not here, then at the level above when the `res` is passed to the series constructor. So personally I would already do the conversion here (we can use the same logic / code as what is done in the series constructor to coerce a passed list)",
        "createdAt" : "2018-06-29T10:00:15Z",
        "updatedAt" : "2018-06-29T10:00:15Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "3a52771f-ddf8-419a-abb1-d2f861f0cd7b",
        "parentId" : "b9280bdc-de11-45c3-923c-883342263e3a",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "@jorisvandenbossche But why repeat that logic?  If we leave it as a list, then the Series constructor will do the inference on the dtype.  ",
        "createdAt" : "2018-06-29T13:50:54Z",
        "updatedAt" : "2018-06-29T13:50:54Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fc93e49a28eccc4c66294e7238ba63f0e7bda29",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +724,728 @@                    res = self._from_sequence(res)\n                except TypeError:\n                    pass\n\n            return res"
  },
  {
    "id" : "94823234-1434-4407-bda2-9ea37bdf212e",
    "prId" : 21261,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21261#pullrequestreview-131344685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9adbfd9d-cf9c-423c-a30a-bdbcffc16701",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "can you use a parameter name instead of the positional argument ?",
        "createdAt" : "2018-06-22T14:22:18Z",
        "updatedAt" : "2018-06-29T00:18:42Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "3bba965a-fa53-45a4-8128-8ec43fc72497",
        "parentId" : "9adbfd9d-cf9c-423c-a30a-bdbcffc16701",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "I could do that, but not specifying the parameter is consistent with all the other usages of `_get_op_name`, so I think I should be consistent with code that is elsewhere.",
        "createdAt" : "2018-06-22T20:56:12Z",
        "updatedAt" : "2018-06-29T00:18:42Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fc93e49a28eccc4c66294e7238ba63f0e7bda29",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +728,732 @@            return res\n\n        op_name = ops._get_op_name(op, True)\n        return set_function_name(_binop, op_name, cls)\n"
  },
  {
    "id" : "09fba047-fae5-44d2-a98d-f812588efefe",
    "prId" : 22387,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22387#pullrequestreview-147604015",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70a776fc-c90d-448f-9776-ed9326a49ee3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think update in the ExtensionArray doc-string?",
        "createdAt" : "2018-08-20T11:09:26Z",
        "updatedAt" : "2018-08-22T12:32:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5ae7e7de-446f-4181-b185-030cb9aff6ea",
        "parentId" : "70a776fc-c90d-448f-9776-ed9326a49ee3",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Currently, in the class docstring we only mention the methods that either needs to implemented (because they raise AbstractMethodError otherwise) or either have a suboptimal implementation because it does the object ndarray roundtrip. \r\nThis is not the case here (which is not saying we couldn't also list other methods that can be overriden for specific reasons)",
        "createdAt" : "2018-08-20T11:30:55Z",
        "updatedAt" : "2018-08-22T12:32:16Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5b556d77466ae317c4772628c1f5ef4392b1bad",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +405,409 @@        return self[~self.isna()]\n\n    def shift(self, periods=1):\n        # type: (int) -> ExtensionArray\n        \"\"\""
  },
  {
    "id" : "cb75c739-ea29-42a4-98d0-764e43da5e76",
    "prId" : 22387,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22387#pullrequestreview-148456409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cca7a286-7ba9-479a-b0c1-801b8708cf69",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a versionadded tag",
        "createdAt" : "2018-08-22T12:24:28Z",
        "updatedAt" : "2018-08-22T12:32:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5b556d77466ae317c4772628c1f5ef4392b1bad",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +411,415 @@\n        Newly introduced missing values are filled with\n        ``self.dtype.na_value``.\n\n        .. versionadded:: 0.24.0"
  },
  {
    "id" : "1d96fab5-1f54-4687-8f3f-2250cef2f011",
    "prId" : 22762,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22762#pullrequestreview-160325775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa7625dd-40c5-4e80-80a9-7833d96df34b",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you specify what is? (specific kwargs supported by the reduction method)",
        "createdAt" : "2018-10-01T14:40:32Z",
        "updatedAt" : "2018-10-12T11:40:31Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "aeaf5f32c0939d6bedc99240b47dd54252dda96a",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +695,699 @@            Additional keyword arguments passed to the reduction function.\n            Currently, `ddof` is the only supported kwarg.\n\n        Returns\n        -------"
  },
  {
    "id" : "448fbc67-fc8d-4b96-8604-2d3119851828",
    "prId" : 22932,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22932#pullrequestreview-162480409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "346568d3-c253-4a7a-88c4-b14c3f5ec44f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jbrockmendel can't we use dispatch_to_extension_op here to avoid duplication of code?",
        "createdAt" : "2018-10-07T22:57:24Z",
        "updatedAt" : "2018-10-07T22:57:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3c4c3c9d-7616-4fe8-8eaf-99e5572f4613",
        "parentId" : "346568d3-c253-4a7a-88c4-b14c3f5ec44f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I asked something similar a few days ago.  If Tom says it isn't feasible, I believe him.",
        "createdAt" : "2018-10-08T00:03:54Z",
        "updatedAt" : "2018-10-08T00:03:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "c69e28ba-557d-4225-972b-574d513fbae6",
        "parentId" : "346568d3-c253-4a7a-88c4-b14c3f5ec44f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "We are *inside* the extension array here, so it would also be strange to use (which doesn't prevent that both could share a helper function, if that would be appropriate). \r\nBut here we need to construct the divmod correctly, while dispatch_to_extension_op should assume this is already done correctly by the EA",
        "createdAt" : "2018-10-08T08:04:10Z",
        "updatedAt" : "2018-10-08T08:04:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e50c6127-e42b-4776-93dd-de160bf07089",
        "parentId" : "346568d3-c253-4a7a-88c4-b14c3f5ec44f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> which doesn't prevent that both could share a helper function,\r\n\r\nRight. This is possible, if people want it. I'll push up a commit with some kind of `do_extension_op` that both of these call to so people can take a look.",
        "createdAt" : "2018-10-08T11:13:00Z",
        "updatedAt" : "2018-10-08T11:13:00Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c562a165-37db-4eab-a25d-533bc315f2f6",
        "parentId" : "346568d3-c253-4a7a-88c4-b14c3f5ec44f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Ah, now that I take a look it's not so straightforward. The two are similar but just slightly different in enough places that they wouldn't benefit from sharing code really.\r\n\r\n1. The unboxing of values. `dispatch_to_extension_op` knows that at least one of the two is a Series[EA]. `_binop` knows that `self` is an EA.\r\n2. The op: `dispatch_to_extension_op` dispatches, `_binop` is defining it in a list comprehension\r\n3. The re-boxing: `_binop` has the whole maybe re-constructing `_from_seqence` that the `dispatch_to_extension_op` doesn't have to worry about at all.",
        "createdAt" : "2018-10-08T11:20:31Z",
        "updatedAt" : "2018-10-08T11:20:31Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "af4c39ab-6878-42d8-8597-cff2d92460ab",
        "parentId" : "346568d3-c253-4a7a-88c4-b14c3f5ec44f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, as said above, they are doing different things, so I agree it is not worth here.",
        "createdAt" : "2018-10-08T11:29:10Z",
        "updatedAt" : "2018-10-08T11:29:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "fdd00fbc-ad5f-4c41-8447-cde53a58d064",
        "parentId" : "346568d3-c253-4a7a-88c4-b14c3f5ec44f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "> Yes, as said above, they are doing different things, so I agree it is not worth here.\r\n\r\nThey do different things because this function is a bunch of stuff all put together (as @TomAugspurger enumerated above)., if this were split apart into more component pieces, then sharing code would be better.\r\n\r\nWe really should be very cognizant of not creating whole new technical debt with things by duplicating code.\r\n",
        "createdAt" : "2018-10-08T12:25:23Z",
        "updatedAt" : "2018-10-08T12:25:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "07b594fb-35cb-4e47-a4be-a3ac3522cce0",
        "parentId" : "346568d3-c253-4a7a-88c4-b14c3f5ec44f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Which bits of code would be de-duplicated though (specific lines)? They three items I listed out are similar across the two, but different. ",
        "createdAt" : "2018-10-08T12:28:24Z",
        "updatedAt" : "2018-10-08T12:28:24Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "ccdfb2b6-19a3-4cfa-8bc9-b200528adcdf",
        "parentId" : "346568d3-c253-4a7a-88c4-b14c3f5ec44f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> They do different things because this function is a bunch of stuff all put together\r\n\r\nSorry, but apart from that the above may be true, they still do fundamentally something different. The dispatch functions calls the EA to perform an operation, the above code *is* the EA doing the operation. There is nothing to be shared here.\r\n\r\nI fully agree we should be careful not to create unnecessary technical debt, but that is IMO unrelated to this specific piece of code.",
        "createdAt" : "2018-10-08T12:31:23Z",
        "updatedAt" : "2018-10-08T12:31:23Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "6613343b-2ee5-4849-a135-feb29d78c776",
        "parentId" : "346568d3-c253-4a7a-88c4-b14c3f5ec44f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "> Which bits of code would be de-duplicated though (specific lines)? They three items I listed out are similar across the two, but different.\r\n\r\nI would make an effort to try to fix this. It makes a future reader of this code wonder why there are 2 different implementations of basically the same thing. At the very least using something like\r\n\r\n``def _construct_divmod_result(left, result, index, name, dtype=None):``\r\n\r\nIts certainly easy to right *new* code. What is tricky is to integrate with our existing base. I don't think this goes far enough.\r\n",
        "createdAt" : "2018-10-08T12:50:11Z",
        "updatedAt" : "2018-10-08T12:50:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "79b909b5-1391-4b01-b75f-9ddd8f89f864",
        "parentId" : "346568d3-c253-4a7a-88c4-b14c3f5ec44f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you be more specific in how the existing `_construct_divmod_result` could be used in the above code?",
        "createdAt" : "2018-10-08T12:56:07Z",
        "updatedAt" : "2018-10-08T12:56:08Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e92324a3-96b4-4973-85a8-470e6f668470",
        "parentId" : "346568d3-c253-4a7a-88c4-b14c3f5ec44f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "OK I don't understand what you want so feel free to push here.\r\n\r\nBut before you put too much time into it, keep in mind that at this point the version in `_binop` has a List of scalars, that *may* be convertible back to an ExtensionArray after unpacking into a tuple of lists. The version in `core/ops.py` already has a tuple of arrays., which it knows has to be converted to a Series. ",
        "createdAt" : "2018-10-08T13:00:15Z",
        "updatedAt" : "2018-10-08T13:00:15Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "37b1a1c3-dd84-4086-9db7-66291da8e7be",
        "parentId" : "346568d3-c253-4a7a-88c4-b14c3f5ec44f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "> OK I don't understand what you want so feel free to push here.\r\n\r\nBecause this is creating a very hard to understand situation where a future reader will not understand why we have 2 different places where handling ops. The current de-facto standard is pandas/core/ops.py\r\n\r\nso now they have to understand / disambiguate why & where to see the code paths. These conceptually do exactly the same thing, so why 2. I don't know exactly what code should be change / integrated here. I would see if its is possible to integrate these rather than adding a bunch of new code.\r\n\r\n",
        "createdAt" : "2018-10-08T13:32:21Z",
        "updatedAt" : "2018-10-08T13:32:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "38dc4f0d-f12a-429b-b0cd-2ee3d9d45fd2",
        "parentId" : "346568d3-c253-4a7a-88c4-b14c3f5ec44f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> I would see if its is possible to integrate these rather than adding a bunch of new code.\r\n\r\nI started and in \r\nhttps://github.com/pandas-dev/pandas/pull/22932#discussion_r223328039 explained why that wasn't possible.\r\n\r\nBut if you have ideas that I don't see then feel free to push them here. But based on \r\n\r\n> I don't know exactly what code should be change / integrated here.\r\n\r\nit sounds like you don't have anything specific in mind? If so, perhaps trust @jorisvandenbossche and I when we say that these are doing two different things, and so can't be shared?",
        "createdAt" : "2018-10-08T13:40:11Z",
        "updatedAt" : "2018-10-08T13:40:11Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "34ed3da9-7472-4d33-b6ca-7280c433bcf7",
        "parentId" : "346568d3-c253-4a7a-88c4-b14c3f5ec44f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "They do not do \"conceptually exactly the same thing\". Paraphrasing myself from above:\r\n\r\n>  The dispatch function calls the EA to perform an operation, the above code *is* the EA doing the operation.\r\n\r\nWhy would those two different things necessarily need to live in the same place / code path?\r\n\r\nOf course, we could still move the whole `EA._create_method` to `ops.py` (which would indeed be similar as functions like `add_flex_arithmetic_methods` in ops.py that is used in `series.py` to add methods to Series). But this is then not related to the change in this PR, and should be left for another issue/PR to discuss (personally I don't think that would be an improvement).\r\n\r\n> I would see if its is possible to integrate these rather than adding a bunch of new code.\r\n\r\nWell, and both Tom and me who have looked into the code, say: we don't think it is possible. \r\n",
        "createdAt" : "2018-10-08T13:47:45Z",
        "updatedAt" : "2018-10-08T13:47:45Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "6b0ae3d5-3a06-4da1-a431-8c2fbeb8432a",
        "parentId" : "346568d3-c253-4a7a-88c4-b14c3f5ec44f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@TomAugspurger I saw your comment. I also @jorisvandenbossche comments. I have not looked at this in detail, nor do I have time to. My point is that this instantly creates technical debt no matter how you slice it.\r\n\r\nIt may require some reorganization to integrate this, and I appreciate that. So happy to defer this, maybe @jbrockmendel has more insight.\r\n",
        "createdAt" : "2018-10-08T13:48:17Z",
        "updatedAt" : "2018-10-08T13:48:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1388d692-e903-4826-81e9-411cd0208d28",
        "parentId" : "346568d3-c253-4a7a-88c4-b14c3f5ec44f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'll be doing a sparse-de-duplication PR following #22880, can take a fresh look at this then.  In the interim, I wouldn't let this issue hold up this PR.",
        "createdAt" : "2018-10-08T13:48:58Z",
        "updatedAt" : "2018-10-08T13:48:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "84feba4b-6cba-4799-9ac9-7b22e3b2d287",
        "parentId" : "346568d3-c253-4a7a-88c4-b14c3f5ec44f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> My point is that this instantly creates technical debt no matter how you slice it. \r\n\r\nIt really doesn't. They're doing two different things.",
        "createdAt" : "2018-10-08T13:50:20Z",
        "updatedAt" : "2018-10-08T13:50:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "8cc383b8-51fd-4ea9-9b78-c9829a62f6d4",
        "parentId" : "346568d3-c253-4a7a-88c4-b14c3f5ec44f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This PR is fixing a bug, not doing a refactor of how the ops on EA's are implemented\\*\\* . If somebody want to look into that, it should be done in a separate PR anyway. So merging.\r\n\r\n\\*\\* and I fully acknowledge that sometimes, to properly fix a bug, you also need to refactor otherwise you just keep adding hacks. However, I don't think that is the case here, see all the comments above.",
        "createdAt" : "2018-10-08T13:53:00Z",
        "updatedAt" : "2018-10-08T13:53:00Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec814db9acea380be0b9e82474e7365bf2a20536",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +795,799 @@                return res\n\n            if op.__name__ in {'divmod', 'rdivmod'}:\n                a, b = zip(*res)\n                res = _maybe_convert(a), _maybe_convert(b)"
  },
  {
    "id" : "78734fd0-be0d-4036-ab16-f5d967de5610",
    "prId" : 23255,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23255#pullrequestreview-182989572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d58ff2f-02bf-40c7-ac43-f3022bfa8b8a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a versionadded here",
        "createdAt" : "2018-12-09T18:46:18Z",
        "updatedAt" : "2019-01-02T02:01:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f42235aad6aa0dcdb4d3324792001062a7242c43",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +139,143 @@\n        .. versionadded:: 0.24.0\n\n        Parameters\n        ----------"
  },
  {
    "id" : "99273ed3-0cd6-4d23-8f98-65a57d098e38",
    "prId" : 23255,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23255#pullrequestreview-187548198",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc694637-7bd4-4b88-8b77-666aa38c4273",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "IIRC this came up in the discussion of Interval parsing from strings. did we already create some machinery fro this? @jschendel @TomAugspurger @jorisvandenbossche ",
        "createdAt" : "2018-12-09T18:47:53Z",
        "updatedAt" : "2019-01-02T02:01:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3e9f03ea-edcb-417c-818a-62d0bd5dacde",
        "parentId" : "fc694637-7bd4-4b88-8b77-666aa38c4273",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I am not fully sure what you are hinting on. But, the docstring is certainly wrong here (I suppose copy pasted from `_from_sequence`), as here the input should be a sequence of strings, not of scalars of the dtype.",
        "createdAt" : "2018-12-10T10:42:34Z",
        "updatedAt" : "2019-01-02T02:01:21Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "96ddec92-235a-464e-9493-5c454e81d93a",
        "parentId" : "fc694637-7bd4-4b88-8b77-666aa38c4273",
        "authorId" : "287271b7-536e-4f62-9f31-06429d0563b6",
        "body" : "Fixed the docstring.\r\n\r\nI wasn't able to find anything that added the machinery, but if I'm wrong let me know and I will use it instead of this new method.",
        "createdAt" : "2018-12-21T21:49:44Z",
        "updatedAt" : "2019-01-02T02:01:21Z",
        "lastEditedBy" : "287271b7-536e-4f62-9f31-06429d0563b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f42235aad6aa0dcdb4d3324792001062a7242c43",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +143,147 @@        ----------\n        strings : Sequence\n            Each element will be an instance of the scalar type for this\n            array, ``cls.dtype.type``.\n        dtype : dtype, optional"
  },
  {
    "id" : "032bd8bc-707d-4489-81d6-78ff0ba1e967",
    "prId" : 23255,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23255#pullrequestreview-183123421",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82842ce5-d47d-441a-be1d-97ddd1f2b08a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would make this a NotImplementedError, as I don't think it should be required to implement this?",
        "createdAt" : "2018-12-10T10:41:23Z",
        "updatedAt" : "2019-01-02T02:01:21Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "f42235aad6aa0dcdb4d3324792001062a7242c43",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +156,160 @@\n        \"\"\"\n        raise AbstractMethodError(cls)\n\n    @classmethod"
  },
  {
    "id" : "a0c4fd3f-9e8c-4e59-ae54-8cbc26fa1172",
    "prId" : 23255,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23255#pullrequestreview-188450160",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0645fe2-a613-4387-a111-55636807b257",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add ``_from_sequence_of_strings`` in the Notes section at the top, next to the other constructors",
        "createdAt" : "2018-12-30T20:41:32Z",
        "updatedAt" : "2019-01-02T02:01:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f3a40830-00f4-4fbd-9ece-69fe336a7841",
        "parentId" : "f0645fe2-a613-4387-a111-55636807b257",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually this is not required, so put it separately (the ones at the very top are required)",
        "createdAt" : "2018-12-30T20:42:09Z",
        "updatedAt" : "2019-01-02T02:01:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f42235aad6aa0dcdb4d3324792001062a7242c43",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +134,138 @@        raise AbstractMethodError(cls)\n\n    @classmethod\n    def _from_sequence_of_strings(cls, strings, dtype=None, copy=False):\n        \"\"\"Construct a new ExtensionArray from a sequence of strings."
  },
  {
    "id" : "0c4a93dc-c991-4dc0-b4f7-cc6cc49f57ff",
    "prId" : 23601,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23601#pullrequestreview-173489979",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5205ba89-13ad-44ad-b9e9-24f816a787df",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "blank line above",
        "createdAt" : "2018-11-09T16:33:38Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad113b374641b6eb1f0cb7b28d7d38e24099902",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +681,685 @@    # Printing\n    # ------------------------------------------------------------------------\n    def __repr__(self):\n        from pandas.io.formats.printing import format_object_summary\n"
  },
  {
    "id" : "09a7375c-1f47-4706-a7a4-f7cf3c80293b",
    "prId" : 23601,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23601#pullrequestreview-173906624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34c0c00c-8e3f-4315-81d3-37052829c64a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add a comment here explaining that is basically defining `__repr__` but with some py2/3 compat things handled for you? Because EA authors might wonder why this is not `__repr__`",
        "createdAt" : "2018-11-12T13:41:40Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "813f8d5c-7ee8-43ce-802c-d4c04a136ea0",
        "parentId" : "34c0c00c-8e3f-4315-81d3-37052829c64a",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I didn’t really realize the effects of this on downstream users of EA. This really should be implemented in repr, so that we don’t interact poorly with a custom str method. ",
        "createdAt" : "2018-11-12T13:50:02Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad113b374641b6eb1f0cb7b28d7d38e24099902",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +682,686 @@    # ------------------------------------------------------------------------\n    def __repr__(self):\n        from pandas.io.formats.printing import format_object_summary\n\n        template = ("
  },
  {
    "id" : "fd4fd435-134e-41d9-bfac-83d81eaf97f8",
    "prId" : 23601,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23601#pullrequestreview-177413166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e0a3a2b-674d-46ce-9457-df2a9249ded3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "lowercase Length",
        "createdAt" : "2018-11-18T22:21:28Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3e12f81b-d943-4258-80ea-039fe5fd51c8",
        "parentId" : "6e0a3a2b-674d-46ce-9457-df2a9249ded3",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Why lower? It's uppercase in the Series repr.",
        "createdAt" : "2018-11-19T12:14:02Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "2cf24e7e-d169-4fd4-bfc8-cd724412598d",
        "parentId" : "6e0a3a2b-674d-46ce-9457-df2a9249ded3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "its lowercase everywhere (else)",
        "createdAt" : "2018-11-19T12:47:01Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c805c0a0-4203-40bd-b900-4603c1135063",
        "parentId" : "6e0a3a2b-674d-46ce-9457-df2a9249ded3",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Everywhere else being index? Categorical uses a capital. I'd like to eventually use pieces of this for the categorical repr, and would rather not break that repr, so I think a capital makes more sense here.",
        "createdAt" : "2018-11-20T14:46:17Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "18fb0ec2-b851-4ee4-9da8-53a84dc26e60",
        "parentId" : "6e0a3a2b-674d-46ce-9457-df2a9249ded3",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In index it is as part of the \"keywords\" in the constructor-resembling repr. There it indeed makes sense to have it lowercase. But here, I think capitalized is much more logical (it's the first item on that line), and consistent with Series and Categorical.",
        "createdAt" : "2018-11-21T11:19:15Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f8c6717e-2f6a-4ffd-b85b-344c2b8bd08c",
        "parentId" : "6e0a3a2b-674d-46ce-9457-df2a9249ded3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, I guess if we match the EA's to Series, except for the quoting (e.g. quote in EA, but no change in Series, meaning no quoting), then Index is separate. I am still concerned with these slight differences however. \r\n\r\nE.g. even here, dtype is lowercase and Length is uppercase",
        "createdAt" : "2018-11-21T12:43:53Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a560954b-03a4-41bb-9984-b37bdc10b416",
        "parentId" : "6e0a3a2b-674d-46ce-9457-df2a9249ded3",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Keep in mind that any discussion of quoting whether or not to quote is up to the individual array.\r\n\r\nAre you specifically talking about quoting within PeriodArray here? Do we plan to quote within DatetimeArray and TimedeltaArray?",
        "createdAt" : "2018-11-21T20:10:26Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad113b374641b6eb1f0cb7b28d7d38e24099902",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +687,691 @@            u'{class_name}'\n            u'{data}\\n'\n            u'Length: {length}, dtype: {dtype}'\n        )\n        # the short repr has no trailing newline, while the truncated"
  },
  {
    "id" : "f854bdb5-b908-4486-9c1c-0208b428662f",
    "prId" : 23601,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23601#pullrequestreview-176801660",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba53c1ec-835f-46ec-bfba-a1c0453282ea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i find this a very confusing argument. why do you think you need it? I would rather have consistentcy among the repr.",
        "createdAt" : "2018-11-18T22:23:17Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d351f2fb-5db2-4c48-bc8b-dc8cd0e1f220",
        "parentId" : "ba53c1ec-835f-46ec-bfba-a1c0453282ea",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We needed it to get the period tests passing. PeriodIndex quotes scalar values, but `Series[Period]` doesn't (which is fine, since the Series repr isn't supposed to be code).",
        "createdAt" : "2018-11-19T12:13:02Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b2683fd5-dc77-42eb-840a-e88c27d27827",
        "parentId" : "ba53c1ec-835f-46ec-bfba-a1c0453282ea",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "well, maybe fix that. This is completely inconsistent with the rest of the reprs.",
        "createdAt" : "2018-11-19T12:13:54Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e6ce4215-73f8-4711-9062-70a902fd58a9",
        "parentId" : "ba53c1ec-835f-46ec-bfba-a1c0453282ea",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Datetime is the same.\r\n\r\n```python\r\nIn [2]: pd.date_range('2017', periods=4)\r\nOut[2]: DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03', '2017-01-04'], dtype='datetime64[ns]', freq='D')\r\n\r\nIn [3]: pd.Series(pd.date_range('2017', periods=4))\r\nOut[3]:\r\n0   2017-01-01\r\n1   2017-01-02\r\n2   2017-01-03\r\n3   2017-01-04\r\ndtype: datetime64[ns]\r\n```",
        "createdAt" : "2018-11-19T12:17:50Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "62f92603-13c4-4a6a-b273-db4bcd4eb3a3",
        "parentId" : "ba53c1ec-835f-46ec-bfba-a1c0453282ea",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is a Series repr, that is different from Index. Array is *much* more like Index.",
        "createdAt" : "2018-11-19T12:47:35Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d958325c-f320-4fc7-a56e-5199c4b8b159",
        "parentId" : "ba53c1ec-835f-46ec-bfba-a1c0453282ea",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Responded in \r\nhttps://github.com/pandas-dev/pandas/pull/23601#issuecomment-439882626",
        "createdAt" : "2018-11-20T14:48:11Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad113b374641b6eb1f0cb7b28d7d38e24099902",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +708,712 @@        Parameters\n        ----------\n        boxed: bool, default False\n            An indicated for whether or not your array is being printed\n            within a Series, DataFrame, or Index (True), or just by"
  },
  {
    "id" : "fdaea475-8e24-4fdc-abce-5206540a0605",
    "prId" : 23601,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23601#pullrequestreview-180797751",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "521688ea-df44-4e60-8121-8055000b06c3",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Doesn't Index also use `False` like Array? (as I thought this was to satisfy the difference between Series/DataFrame vs Index)",
        "createdAt" : "2018-12-01T14:05:22Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c01cc91b-9647-442d-93b0-ab0eed911c1c",
        "parentId" : "521688ea-df44-4e60-8121-8055000b06c3",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Index is hypothetical at this point, until we support EA-backed indexes. This isn't currently called by our index reprs. So we can choose to define it how we want.  Or we can make this a `box=None/Series/Index` argument.",
        "createdAt" : "2018-12-01T19:41:20Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "d83e82d7-c47c-4649-91c1-895d4bfca02b",
        "parentId" : "521688ea-df44-4e60-8121-8055000b06c3",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "For external EAs, yes. But eg PeriodArray is stored in an Index, and there `box` is used for this purpose, no?",
        "createdAt" : "2018-12-01T21:32:18Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4ae6d646-cb52-4e86-bc6a-a20aa763a7bf",
        "parentId" : "521688ea-df44-4e60-8121-8055000b06c3",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "It was not. Done in 3825aeb7f61b4d350888882689bce521b4a603ce\r\n",
        "createdAt" : "2018-12-02T13:16:27Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "8277ffe7-6905-40e5-8bcf-3424d47e506d",
        "parentId" : "521688ea-df44-4e60-8121-8055000b06c3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would add this arg to the Index formatters as well for compatiblity.",
        "createdAt" : "2018-12-02T16:32:32Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6d73dead-ddc3-4c79-810a-00a3cb4f75eb",
        "parentId" : "521688ea-df44-4e60-8121-8055000b06c3",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'm not sure I follow the need for adding it to the index formatters, since indexes are boxed by definition.",
        "createdAt" : "2018-12-03T14:42:32Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad113b374641b6eb1f0cb7b28d7d38e24099902",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +710,714 @@        boxed: bool, default False\n            An indicated for whether or not your array is being printed\n            within a Series, DataFrame, or Index (True), or just by\n            itself (False). This may be useful if you want scalar values\n            to appear differently within a Series versus on its own (e.g."
  },
  {
    "id" : "d488cf05-accb-48bd-93c3-1d6b264116d8",
    "prId" : 23947,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23947#pullrequestreview-180522117",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fcc3769-6cac-439f-87bf-e55679895535",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "len(self) inside double backticks, or write it out as \"length of \\`self\\`\".",
        "createdAt" : "2018-12-01T12:07:03Z",
        "updatedAt" : "2018-12-08T19:34:21Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "31a9cc853894e4d5feee02b4c036086dd0ec9968",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +454,458 @@\n        If ``periods > len(self)``, then an array of size\n        len(self) is returned, with all values filled with\n        ``self.dtype.na_value``.\n        \"\"\""
  },
  {
    "id" : "fd2bdc3d-9a7f-406d-8fe4-4bac62b1f2d6",
    "prId" : 23947,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23947#pullrequestreview-182215691",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abad178f-82b9-4b0c-bde2-29bc1998e4cb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a blank line here",
        "createdAt" : "2018-12-06T12:30:17Z",
        "updatedAt" : "2018-12-08T19:34:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "31a9cc853894e4d5feee02b4c036086dd0ec9968",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +462,466 @@            return self.copy()\n\n        empty = self._from_sequence(\n            [self.dtype.na_value] * min(abs(periods), len(self)),\n            dtype=self.dtype"
  },
  {
    "id" : "b51f6955-a572-402d-a8e4-79d3f7108420",
    "prId" : 24349,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24349#pullrequestreview-186537111",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22fddbad-d55c-4069-91af-9155c3873a7e",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Need a versionadded. Will do that on merge maybe, unless there are other comments on the implementation.",
        "createdAt" : "2018-12-19T13:12:54Z",
        "updatedAt" : "2018-12-19T14:37:03Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a16c253de660e645f5855ca9ec423feb09bafdac",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +584,588 @@        \"\"\"\n        Repeat elements of an array.\n\n        .. versionadded:: 0.24.0\n"
  },
  {
    "id" : "8b4efed3-7b1f-40a0-9944-e933c714186a",
    "prId" : 24350,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24350#pullrequestreview-187623947",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31fc520a-3766-40c6-914e-0abb295f1876",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "how does this interact with pandas/core/base.py impl?",
        "createdAt" : "2018-12-19T14:20:45Z",
        "updatedAt" : "2018-12-28T19:54:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ee718647-3928-4f2c-8d5a-4f4b42b0be38",
        "parentId" : "31fc520a-3766-40c6-914e-0abb295f1876",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Ah, good catch. We should change that to `self._values.searchsorted`, so that the EA implementation is used.",
        "createdAt" : "2018-12-19T14:24:13Z",
        "updatedAt" : "2018-12-28T19:54:52Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "38cc702e-d2d4-4984-8c74-ab0c2b52e42f",
        "parentId" : "31fc520a-3766-40c6-914e-0abb295f1876",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "and how did things change then? ",
        "createdAt" : "2018-12-23T15:13:41Z",
        "updatedAt" : "2018-12-28T19:54:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a91fcec63155c010a1f6677b61dbd6d0235b111d",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +562,566 @@        # Note: the base tests provided by pandas only test the basics.\n        # We do not test\n        # 1. Values outside the range of the `data_for_sorting` fixture\n        # 2. Values between the values in the `data_for_sorting` fixture\n        # 3. Missing values."
  },
  {
    "id" : "072ee938-919e-4614-b21f-b176f4a73c1d",
    "prId" : 24350,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24350#pullrequestreview-188370565",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75ecedae-f6fc-40ff-99a0-4912ffc43c9a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "IIRC you have an issue to show a warning here for EA's that don't redefined this I think?",
        "createdAt" : "2018-12-28T21:15:06Z",
        "updatedAt" : "2018-12-28T21:15:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a91fcec63155c010a1f6677b61dbd6d0235b111d",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +566,570 @@        # 3. Missing values.\n        arr = self.astype(object)\n        return arr.searchsorted(value, side=side, sorter=sorter)\n\n    def _values_for_factorize(self):"
  },
  {
    "id" : "62c4e2a1-61d0-4359-91fb-97d0be1fec32",
    "prId" : 24447,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24447#pullrequestreview-187973578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46a3f675-1135-4037-9a40-4db726d08a43",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "I think these could be written more explicitly as:\r\n```python\r\nif axis is not None:\r\n    raise ValueError('...')\r\n```\r\nI don't think `nv.validate_repeat` is doing more than that but could be missing something.  The advantage to using `nv.validate_repeat` simply being that the error message is kept in a single place instead of being explicitly written in each method.",
        "createdAt" : "2018-12-26T23:09:11Z",
        "updatedAt" : "2018-12-26T23:09:11Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "9ae60548-eb8c-42ad-ba35-bb96c0eabdb6",
        "parentId" : "46a3f675-1135-4037-9a40-4db726d08a43",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is exactly why we have it this way",
        "createdAt" : "2018-12-26T23:13:14Z",
        "updatedAt" : "2018-12-26T23:13:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "62f040d73561a90c472aec8a944be8daf2efd76d",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +639,643 @@    @Appender(_extension_array_shared_docs['repeat'])\n    def repeat(self, repeats, axis=None):\n        nv.validate_repeat(tuple(), dict(axis=axis))\n        ind = np.arange(len(self)).repeat(repeats)\n        return self.take(ind)"
  },
  {
    "id" : "c9e68e81-c42c-4d9b-997a-bb7e1fdf82d1",
    "prId" : 25789,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25789#pullrequestreview-216465794",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8deb825d-05e7-4c65-9f13-0de52edfa9da",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we can switch to the py3 style now i think (here or later)",
        "createdAt" : "2019-03-19T21:58:15Z",
        "updatedAt" : "2019-03-19T23:03:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7010d401-58b5-4dfd-bdc4-845f8c3dda0f",
        "parentId" : "8deb825d-05e7-4c65-9f13-0de52edfa9da",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea planning to do later to minimize diff",
        "createdAt" : "2019-03-19T21:59:17Z",
        "updatedAt" : "2019-03-19T23:03:31Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "2d49d650-b607-4814-95ee-bd6239a4c25f",
        "parentId" : "8deb825d-05e7-4c65-9f13-0de52edfa9da",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "great",
        "createdAt" : "2019-03-19T23:17:32Z",
        "updatedAt" : "2019-03-19T23:17:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "739bcab3316918638afc19392204f37cf35bb477",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +368,372 @@\n    def _values_for_argsort(self):\n        # type: () -> np.ndarray\n        \"\"\"\n        Return values for sorting."
  },
  {
    "id" : "e2baf936-3bcd-44ae-b62c-9770c4d7ac04",
    "prId" : 25829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25829#pullrequestreview-220834591",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4799d02-e8a9-4aa5-972b-613aac87ed71",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so this is a the first stab at ArrayLike (e.g. to put into pandas.typing)",
        "createdAt" : "2019-03-28T20:23:46Z",
        "updatedAt" : "2019-03-28T20:23:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "57748e2b-7422-421f-9368-f103bdefb033",
        "parentId" : "d4799d02-e8a9-4aa5-972b-613aac87ed71",
        "authorId" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "body" : "Seems like a reasonable place to start.",
        "createdAt" : "2019-03-29T18:51:32Z",
        "updatedAt" : "2019-03-29T18:51:33Z",
        "lastEditedBy" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "tags" : [
        ]
      },
      {
        "id" : "a2ee3975-0975-4c81-8770-60d518fcf358",
        "parentId" : "d4799d02-e8a9-4aa5-972b-613aac87ed71",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "these are ok here for now, mainly adding things that we *should* add",
        "createdAt" : "2019-03-30T18:33:38Z",
        "updatedAt" : "2019-03-30T18:33:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "18202c19-f093-48b8-95dc-5503c8871133",
        "parentId" : "d4799d02-e8a9-4aa5-972b-613aac87ed71",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Agreed this would be great @gwrome do you mind opening up an issue as a follow up?",
        "createdAt" : "2019-03-30T19:20:19Z",
        "updatedAt" : "2019-03-30T19:20:19Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "9f2fc88d-770d-4792-bba9-e87987fb6241",
        "parentId" : "d4799d02-e8a9-4aa5-972b-613aac87ed71",
        "authorId" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "body" : "No problem. I should be able to do that this weekend. ",
        "createdAt" : "2019-03-30T19:33:58Z",
        "updatedAt" : "2019-03-30T19:33:58Z",
        "lastEditedBy" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "tags" : [
        ]
      }
    ],
    "commit" : "23aba8a5d19246b88c60c9fb0677036ad72488c3",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +339,343 @@        return np.array(self, dtype=dtype, copy=copy)\n\n    def isna(self) -> Union[ABCExtensionArray, np.ndarray]:\n        \"\"\"\n        A 1-D array indicating if each value is missing."
  },
  {
    "id" : "867f19a9-3ffa-444e-9760-c65628fe121c",
    "prId" : 27083,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27083#pullrequestreview-255447494",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c4da078-067a-4047-bf78-5fd6f9fd39d0",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We need to deprecate `deep` right? Or is in not in 0.24?",
        "createdAt" : "2019-06-27T19:55:52Z",
        "updatedAt" : "2019-06-27T20:24:42Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "6a945612-c418-4cc2-807c-8cb646442694",
        "parentId" : "9c4da078-067a-4047-bf78-5fd6f9fd39d0",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Oh, just saw https://github.com/pandas-dev/pandas/pull/27083#pullrequestreview-255410112.\r\n\r\nSlight preference for deprecation, but don't have strong thoughts here.",
        "createdAt" : "2019-06-27T19:57:29Z",
        "updatedAt" : "2019-06-27T20:24:42Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb5e1f9a5c1c7819e4b73f430b65c9df6bccd608",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +821,825 @@        raise AbstractMethodError(self)\n\n    def copy(self) -> ABCExtensionArray:\n        \"\"\"\n        Return a copy of the array."
  },
  {
    "id" : "f2ff02b3-03f0-4910-9254-13de39955837",
    "prId" : 27137,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27137#pullrequestreview-257724323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07e4f44d-a374-4c44-a0b1-345640c52483",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so we aren't specific that these are actually intp (and NOT int64's)",
        "createdAt" : "2019-07-03T20:39:55Z",
        "updatedAt" : "2019-07-03T20:39:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "47c6b57bb7d2b7959f5f96db6aeebe803d2dc1b0",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +410,414 @@        Returns\n        -------\n        index_array : ndarray\n            Array of indices that sort ``self``. If NaN values are contained,\n            NaN values are placed at the end."
  },
  {
    "id" : "be70be29-33cc-4fe4-9974-966731455b32",
    "prId" : 27279,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27279#pullrequestreview-261957180",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f291d146-6e5a-44de-8768-0ad95cc2e7fb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you leave the `pandas.` here?",
        "createdAt" : "2019-07-10T02:28:42Z",
        "updatedAt" : "2019-07-11T12:57:51Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "91851f22-000c-4e07-9158-3860c85c2124",
        "parentId" : "f291d146-6e5a-44de-8768-0ad95cc2e7fb",
        "authorId" : "e9b6f2e7-8cc4-4a1d-896a-123f3e06eda5",
        "body" : "@jorisvandenbossche\r\nI've removed `pandas.` to resolve the Docstring validation error. [From CI](https://dev.azure.com/pandas-dev/pandas/_build/results?buildId=14281&view=logs):\r\n```\r\npandas/core/arrays/base.py(770,): error SA05: pandas.api.extensions.ExtensionArray.take: pandas.api.extensions.take in `See Also` section does not need `pandas` prefix, use api.extensions.take instead.\r\n```\r\nWhat do you recommend to do?",
        "createdAt" : "2019-07-11T12:53:38Z",
        "updatedAt" : "2019-07-11T12:57:51Z",
        "lastEditedBy" : "e9b6f2e7-8cc4-4a1d-896a-123f3e06eda5",
        "tags" : [
        ]
      },
      {
        "id" : "58e0624e-4e02-4c40-a371-44125b46e9b6",
        "parentId" : "f291d146-6e5a-44de-8768-0ad95cc2e7fb",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I dislike this listing rule in this case. I believe it's to ensure we consistently do things like `DataFrame.merge` instead of `pandas.DataFrame.merge`.\r\n\r\nBut I think the (redundant) namespacing here is helpful here since I wouldn't immediately associate `api...` with `pandas.api...`.\r\n\r\nRegardless, for now we can just please the linter.",
        "createdAt" : "2019-07-15T17:11:05Z",
        "updatedAt" : "2019-07-15T17:11:05Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "016289d5d6569ac5eaead2b972121347e13969da",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +814,818 @@        --------\n        numpy.take\n        api.extensions.take\n\n        Notes"
  },
  {
    "id" : "8f910569-0dae-40aa-bb17-f11b2fb0d668",
    "prId" : 27279,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27279#pullrequestreview-260728690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d095f088-6e2d-4ff8-90d7-b1201f5494c6",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Should we include more of the methods of the EA interface that start with an underscore? (I think that was the idea of https://github.com/pandas-dev/pandas/issues/24067)",
        "createdAt" : "2019-07-10T02:29:52Z",
        "updatedAt" : "2019-07-11T12:57:51Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "59971818-d876-4bf1-8f75-a113b826d57e",
        "parentId" : "d095f088-6e2d-4ff8-90d7-b1201f5494c6",
        "authorId" : "e9b6f2e7-8cc4-4a1d-896a-123f3e06eda5",
        "body" : "@jorisvandenbossche Ok, I've added all the methods. That raised some more Docstring validation errors which are resolved now.\r\nThank you for reviewing!",
        "createdAt" : "2019-07-11T14:16:27Z",
        "updatedAt" : "2019-07-11T14:16:27Z",
        "lastEditedBy" : "e9b6f2e7-8cc4-4a1d-896a-123f3e06eda5",
        "tags" : [
        ]
      }
    ],
    "commit" : "016289d5d6569ac5eaead2b972121347e13969da",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +71,75 @@    _reduce\n    _values_for_argsort\n    _values_for_factorize\n\n    Notes"
  },
  {
    "id" : "2fe2241b-d2ff-4334-99c1-baff6dd9d3de",
    "prId" : 27633,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27633#pullrequestreview-268971614",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "989f5937-a3f9-406d-b1d2-033c20775ee6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add dtypeto the doc-string",
        "createdAt" : "2019-07-31T12:22:50Z",
        "updatedAt" : "2019-08-03T20:08:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c44aada5f9c45da39457b2059608852127e59e86",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +866,870 @@    def view(self, dtype=None) -> Union[ABCExtensionArray, np.ndarray]:\n        \"\"\"\n        Return a view on the array.\n\n        Parameters"
  },
  {
    "id" : "c0c281a2-a036-4971-9f2e-77ffbd022b02",
    "prId" : 27633,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27633#pullrequestreview-270518890",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9afba064-97f6-4d5c-b58a-754ac53269b2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why would this return a np.ndarray OR an EA for an EA? (is this @jorisvandenbossche question)?\r\n\r\nwhen / why would this be the case? this is pretty confusing.",
        "createdAt" : "2019-08-04T22:18:17Z",
        "updatedAt" : "2019-08-04T22:18:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b2a0a86a-4996-4c03-bbe9-225ec3ce6cfc",
        "parentId" : "9afba064-97f6-4d5c-b58a-754ac53269b2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yes, this is the same as Joris's question.  The answer is that it is probably better to return EA-only, but ATM DTA/TDA/PA have existing implementations that return ndarray",
        "createdAt" : "2019-08-04T23:13:57Z",
        "updatedAt" : "2019-08-04T23:13:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c44aada5f9c45da39457b2059608852127e59e86",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +864,868 @@        raise AbstractMethodError(self)\n\n    def view(self, dtype=None) -> Union[ABCExtensionArray, np.ndarray]:\n        \"\"\"\n        Return a view on the array."
  },
  {
    "id" : "e3ab881b-9f56-4970-a63f-7f472e30db67",
    "prId" : 29293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29293#pullrequestreview-310280849",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5726c8bd-7dc0-46f5-ba9f-c3ce60941346",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "The documentation says the first parameter is an `ExtensionArray subclass`.\r\n\r\nI don't think this counts?",
        "createdAt" : "2019-10-31T23:53:46Z",
        "updatedAt" : "2019-11-01T21:04:52Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "06982a28-5a54-4597-a3d4-6b32b82f9f60",
        "parentId" : "5726c8bd-7dc0-46f5-ba9f-c3ce60941346",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We're calling a classmethod of the EA subclass, so it works with an instance too.  I don't think this benefits much from changing `self` to `type(self)`, but can do if you have a strong opinion.",
        "createdAt" : "2019-11-01T00:43:24Z",
        "updatedAt" : "2019-11-01T21:04:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b113c4f5-aeb4-4e25-9562-50b22b39b1d5",
        "parentId" : "5726c8bd-7dc0-46f5-ba9f-c3ce60941346",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I have no problem with the implementation, but the documentation should be clarified to indicate that we're accepting both the class itself and instances.\r\n\r\nI would consider changing the parameter name as well, since `cls` is often used to indicate the class itself (and not instances).  Maybe call it `cls_or_instance` ?",
        "createdAt" : "2019-11-01T03:46:24Z",
        "updatedAt" : "2019-11-01T21:04:52Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab4966daaa520d7b9f94ec5b21b50b5dc5fa64da",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1180,1184 @@                    # We catch all regular exceptions here, and fall back\n                    # to an ndarray.\n                    res = try_cast_to_ea(self, arr)\n                    if not isinstance(res, type(self)):\n                        # exception raised in _from_sequence; ensure we have ndarray"
  },
  {
    "id" : "67cd80e7-f265-4d71-bdba-052fb32c1791",
    "prId" : 29293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29293#pullrequestreview-310775512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48ce159f-de1f-489e-aea1-d4cddbc67391",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if can type at some point",
        "createdAt" : "2019-11-02T15:30:03Z",
        "updatedAt" : "2019-11-02T15:30:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab4966daaa520d7b9f94ec5b21b50b5dc5fa64da",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +33,37 @@\n\ndef try_cast_to_ea(cls_or_instance, obj, dtype=None):\n    \"\"\"\n    Call to `_from_sequence` that returns the object unchanged on Exception."
  },
  {
    "id" : "29287c05-7c08-4374-92db-510b14e81b6c",
    "prId" : 30652,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30652#pullrequestreview-404507718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c643a76c-4df7-45df-924d-145d1efa29a9",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think we should have some guidance here that if `other` is a Series then you should return NotImplemented.",
        "createdAt" : "2020-05-01T19:18:23Z",
        "updatedAt" : "2020-05-08T11:10:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "52a6a2c4-2d02-4de8-92ae-0f6603f4d07a",
        "parentId" : "c643a76c-4df7-45df-924d-145d1efa29a9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "could use ops.common.unpack_zerodim_and_defer",
        "createdAt" : "2020-05-01T22:53:32Z",
        "updatedAt" : "2020-05-08T11:10:20Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b35538fd-214b-40cb-b45e-2ae925a21cec",
        "parentId" : "c643a76c-4df7-45df-924d-145d1efa29a9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> could use ops.common.unpack_zerodim_and_defer\r\n\r\nThis method is to be implemented by EA authors, so those can't use that helper (unless we expose somewhere a public version of this). \r\n\r\n(we could of course use that for our own EAs, but this PR is not changing any existing `__eq__` implementation at the moment)",
        "createdAt" : "2020-05-02T07:26:11Z",
        "updatedAt" : "2020-05-08T11:10:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e1434abc-3346-4b6b-a266-02491155f5db",
        "parentId" : "c643a76c-4df7-45df-924d-145d1efa29a9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> I think we should have some guidance here that if other is a Series then you should return NotImplemented.\r\n\r\nAdded a comment about that",
        "createdAt" : "2020-05-02T07:30:21Z",
        "updatedAt" : "2020-05-08T11:10:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c7273f7c8d938668d64f27de2021ee2343858da",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +338,342 @@    def __eq__(self, other: Any) -> ArrayLike:\n        \"\"\"\n        Return for `self == other` (element-wise equality).\n        \"\"\"\n        # Implementer note: this should return a boolean numpy ndarray or"
  },
  {
    "id" : "4632800a-bb09-42bc-88c8-737599f32ea4",
    "prId" : 30652,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30652#pullrequestreview-404511313",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1068d207-aad7-4170-94b8-6ce0453e0143",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We should verify that this is the behavior we want. Namely\r\n\r\n1. other array-likes are not equivalent, even if they are all equal.\r\n2. *subclasses* are not equivalent, even if they are all equal.\r\n\r\nThe first seems fine. Not sure about the second.",
        "createdAt" : "2020-05-01T19:19:35Z",
        "updatedAt" : "2020-05-08T11:10:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "00b5c36a-3ed1-4d31-ae20-d2592cc580b2",
        "parentId" : "1068d207-aad7-4170-94b8-6ce0453e0143",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I was planning to open an issue about this after this PR (and keep it strict here), because this is right now a bit inconsistent within pandas, and might require a more general discussion / clean-up (eg Series.equals is more strict (requires same dtype) than Index.equals ...) \r\nBut we can certainly also have the discussion here.",
        "createdAt" : "2020-05-01T19:32:43Z",
        "updatedAt" : "2020-05-08T11:10:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "6a863b86-3923-44bf-b09f-900579d1e036",
        "parentId" : "1068d207-aad7-4170-94b8-6ce0453e0143",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Happy to be strict for now.",
        "createdAt" : "2020-05-01T20:36:04Z",
        "updatedAt" : "2020-05-08T11:10:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "406d496c-ecc9-4954-a322-61a53b9822e7",
        "parentId" : "1068d207-aad7-4170-94b8-6ce0453e0143",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I made it even more strict (same dtype, not just same class), and added a test for that. \r\nWill open an issue for the general discussion.",
        "createdAt" : "2020-05-02T07:36:43Z",
        "updatedAt" : "2020-05-08T11:10:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "6b1872ad-fe4d-4f9c-b164-a9aa0d3157f8",
        "parentId" : "1068d207-aad7-4170-94b8-6ce0453e0143",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I opened an issue for this at https://github.com/pandas-dev/pandas/issues/33940\r\n\r\nIn the end, it seems mainly to come to whether the dtype should exactly be equal or not. \r\n\r\nSince for EAs, the dtype is right now tied to the array class, using equal dtype for now also implies the same class (no additional check to allow sublcasses).",
        "createdAt" : "2020-05-02T08:37:40Z",
        "updatedAt" : "2020-05-08T11:10:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c7273f7c8d938668d64f27de2021ee2343858da",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +722,726 @@        \"\"\"\n        if not type(self) == type(other):\n            return False\n        elif not self.dtype == other.dtype:\n            return False"
  },
  {
    "id" : "81918b50-1b1d-4ac1-88b2-d583a3dce6e9",
    "prId" : 30652,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30652#pullrequestreview-404552799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6568950b-e855-4af0-85d2-aecc88c6da28",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is the `.item()` necessary?",
        "createdAt" : "2020-05-01T22:55:48Z",
        "updatedAt" : "2020-05-08T11:10:20Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7b75a942-fce8-4f4e-9686-5c96f94dd6e7",
        "parentId" : "6568950b-e855-4af0-85d2-aecc88c6da28",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> is the .item() necessary?\r\n\r\nIt's to have a python bool, instead of a numpy bool, as result. \r\nI added a comment to the tests to make it explicit this is the reason we are asserting with `is True/False` (and later on we don't inadvertedly \"clean\" that up)",
        "createdAt" : "2020-05-02T07:41:46Z",
        "updatedAt" : "2020-05-08T11:10:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "23358cba-10b0-42e9-9390-4baecf226ae2",
        "parentId" : "6568950b-e855-4af0-85d2-aecc88c6da28",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "thanks for clarifying.  i was recently reminded that `np.array(np.timedelta64(1234, \"ns\")).item()` gives an int instead of timedelta64, so im now cautious around `.item()`",
        "createdAt" : "2020-05-02T19:07:04Z",
        "updatedAt" : "2020-05-08T11:10:20Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c7273f7c8d938668d64f27de2021ee2343858da",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +733,737 @@                equal_values = equal_values.fillna(False)\n            equal_na = self.isna() & other.isna()\n            return (equal_values | equal_na).all().item()\n\n    def _values_for_factorize(self) -> Tuple[np.ndarray, Any]:"
  },
  {
    "id" : "f3411dcc-33fe-4f2d-8e18-009c40b1417e",
    "prId" : 30908,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30908#pullrequestreview-344949885",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5452b2e5-ced2-4c8f-a200-0063a1f6b3d2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "may want to add some text to the top of the EA that says EA by default are not hashable",
        "createdAt" : "2020-01-18T16:04:54Z",
        "updatedAt" : "2020-01-19T21:46:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3851d9095d193d6e553c341a070c175da0a69870",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1077,1081 @@        raise TypeError(f\"cannot perform {name} with type {self.dtype}\")\n\n    def __hash__(self):\n        raise TypeError(f\"unhashable type: {repr(type(self).__name__)}\")\n"
  },
  {
    "id" : "641f0bd2-be5f-4cc3-b109-db8a1c90cd3b",
    "prId" : 32730,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32730#pullrequestreview-375678319",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2ace5e9-5661-4ea3-ae8f-f2dbd72dfa41",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "according to the docstring the return type should be just ExtensionArray?",
        "createdAt" : "2020-03-15T18:08:56Z",
        "updatedAt" : "2020-03-17T01:13:27Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "71e62418-2312-4083-9a71-2762823cc410",
        "parentId" : "d2ace5e9-5661-4ea3-ae8f-f2dbd72dfa41",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you update either the doc-string or the type",
        "createdAt" : "2020-03-16T01:21:44Z",
        "updatedAt" : "2020-03-17T01:13:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "18e7fe9e-4a35-40f5-9e60-442ddcabfe2f",
        "parentId" : "d2ace5e9-5661-4ea3-ae8f-f2dbd72dfa41",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "updated",
        "createdAt" : "2020-03-16T16:40:49Z",
        "updatedAt" : "2020-03-17T01:13:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f4b36c6e-7edf-4dda-8205-1926dab8e48d",
        "parentId" : "d2ace5e9-5661-4ea3-ae8f-f2dbd72dfa41",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you indicate *when* it returns an ndarray? \r\n\r\n(I am wondering if we actually should be strict here, and tighten this method to always return an EA)",
        "createdAt" : "2020-03-16T19:54:38Z",
        "updatedAt" : "2020-03-17T01:13:27Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ac398a52-c114-4771-912d-80a4ef6f5703",
        "parentId" : "d2ace5e9-5661-4ea3-ae8f-f2dbd72dfa41",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "lgtm outside of this comment",
        "createdAt" : "2020-03-16T22:33:13Z",
        "updatedAt" : "2020-03-17T01:13:27Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "2641b00e-872f-4ddf-bcf7-43bd8ee87da1",
        "parentId" : "d2ace5e9-5661-4ea3-ae8f-f2dbd72dfa41",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> Can you indicate when it returns an ndarray?\r\n\r\nIt isn't obvious to me how; did you have something in mind?\r\n\r\n> (I am wondering if we actually should be strict here, and tighten this method to always return an EA)\r\n\r\nxref #24877 same idea but for astype.",
        "createdAt" : "2020-03-17T01:12:06Z",
        "updatedAt" : "2020-03-17T01:13:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ef8585047db0e1465e0510d00d056cc6c48a559",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +932,936 @@        raise AbstractMethodError(self)\n\n    def view(self, dtype=None) -> ArrayLike:\n        \"\"\"\n        Return a view on the array."
  },
  {
    "id" : "70a46644-c447-448d-8abb-4a3ac9ec8e2b",
    "prId" : 33465,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33465#pullrequestreview-418256890",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95ec50ac-604c-4a79-b08e-da773de617d3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so we atcually *ever* hit this base type? I think we override this everywhere",
        "createdAt" : "2020-05-22T15:47:14Z",
        "updatedAt" : "2020-05-26T15:47:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "731cc68f-3ddc-4f54-b974-7b9e7af7878d",
        "parentId" : "95ec50ac-604c-4a79-b08e-da773de617d3",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "floats arrays are PandasArrays, and those get their astype from ExtensionsArray.\r\n\r\n```python\r\n>>> pd.array([1.5, 2.5])\r\n<PandasArray>\r\n[1.5, 2.5]\r\nLength: 2, dtype: float64\r\n```\r\n\r\nAllowing any ExtensionArray by default to convert to StringArray seems reasonable to me (and if subclassers don't want that, they can make their own astype implementation disallowing StringArrays).",
        "createdAt" : "2020-05-24T14:57:21Z",
        "updatedAt" : "2020-05-26T15:47:24Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "ed4ac0d7-bbc1-4b2f-8f97-e191c4c2e615",
        "parentId" : "95ec50ac-604c-4a79-b08e-da773de617d3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "kk, can you add a commment to this effect here (agree with your statement), but comment for future readers",
        "createdAt" : "2020-05-25T17:08:46Z",
        "updatedAt" : "2020-05-26T15:47:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "890df4c6-0980-489e-b959-feaf9a975ba0",
        "parentId" : "95ec50ac-604c-4a79-b08e-da773de617d3",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> can you add a commment to this effect here\r\n\r\nAll methods in this base class are there for subclasses to (potentially) use, so I don't think a comment about that is needed \r\n(a comment about always being able to astype to string dtype is fine though)",
        "createdAt" : "2020-05-25T17:17:24Z",
        "updatedAt" : "2020-05-26T15:47:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e2200aa6-15bf-4a8c-a557-51a6a418f7df",
        "parentId" : "95ec50ac-604c-4a79-b08e-da773de617d3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i understand I would move the impl that is currently in Decimal to here as it correctly handles the astype from the *same* type (whereas this one will coerce to a numpy array)",
        "createdAt" : "2020-05-26T12:42:36Z",
        "updatedAt" : "2020-05-26T15:47:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "08ff77af0b30d33055063af9cfcaa07fb2040b90",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +452,456 @@            NumPy ndarray with 'dtype' for its dtype.\n        \"\"\"\n        from pandas.core.arrays.string_ import StringDtype\n\n        dtype = pandas_dtype(dtype)"
  },
  {
    "id" : "23fc0f9e-25f6-40f0-9b53-448b1eb410e6",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-530185703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "884d2646-1f81-454e-8e1c-e0e8d60c9d21",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we have a common base dtype for strings? (i think we should)",
        "createdAt" : "2020-11-13T13:27:33Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3015ff3a-88fd-41a6-a8ab-6959eb378d78",
        "parentId" : "884d2646-1f81-454e-8e1c-e0e8d60c9d21",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "see https://github.com/pandas-dev/pandas/pull/35259#issuecomment-726845053",
        "createdAt" : "2020-11-13T16:00:56Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +480,484 @@        # FIXME: Really hard-code here?\n        if isinstance(\n            dtype, (ArrowStringDtype, StringDtype)\n        ):  # allow conversion to StringArrays\n            return dtype.construct_array_type()._from_sequence(self, copy=False)"
  },
  {
    "id" : "b5c610f1-f01e-491c-81e3-0b34c1d57f09",
    "prId" : 35933,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35933#pullrequestreview-477479345",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24526b37-53e2-4b50-a57a-26eade92b8f9",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I recall that replacing\r\n```\r\ncls.__add__ = cls._create_arithmetic_method(operator.add)\r\n```\r\netc. with\r\n```\r\nsetattr(cls, \"__add__\",  cls._create_arithmetic_method(operator.add))\r\n```\r\n\r\nsolves mypy issues, although I'm not getting failures if I remove this classmethod added here, so not sure what the mypy error is here.\r\n\r\nwhich way do you prefer?",
        "createdAt" : "2020-08-27T19:06:14Z",
        "updatedAt" : "2020-08-27T21:49:29Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "41289d3f-e731-4bfb-91c2-8b6f6cdfef57",
        "parentId" : "24526b37-53e2-4b50-a57a-26eade92b8f9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i prefer the aesthetics of the `cls.__add__ =` variant, but not a strong enough preference to make a fuss over",
        "createdAt" : "2020-08-27T21:44:02Z",
        "updatedAt" : "2020-08-27T21:49:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bf688ad3-045e-4883-9a92-775788236a45",
        "parentId" : "24526b37-53e2-4b50-a57a-26eade92b8f9",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "sure",
        "createdAt" : "2020-08-28T08:13:37Z",
        "updatedAt" : "2020-08-28T08:13:38Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9e411c1af312b71ad4d69279c9dc1c7f1db8b69",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1169,1173 @@\n    @classmethod\n    def _create_arithmetic_method(cls, op):\n        raise AbstractMethodError(cls)\n"
  }
]