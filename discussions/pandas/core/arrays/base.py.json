[
  {
    "id" : "4186ef71-573d-4c3e-aa48-b1338e642d83",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-92682680",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16297491-9cdb-464f-a531-c0ccd38e5afc",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'd advocate leaving base.py open for (near-)future usage as pandas-internal base and putting the \"use this if you want to write your own\" file in e.g. extension.py",
        "createdAt" : "2018-01-20T17:52:46Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "caf0915b-6547-4f21-b823-5cf7ae51fd79",
        "parentId" : "16297491-9cdb-464f-a531-c0ccd38e5afc",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I have a slight preference for `base.py` since it's a base class for all extension arrays. I don't think that having `ExtensionArray` in `arrays.base`  precludes having a pandas-internal base there as well.",
        "createdAt" : "2018-01-26T17:08:35Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "061ef5bf-7749-41cb-959f-9ce65e51f40f",
        "parentId" : "16297491-9cdb-464f-a531-c0ccd38e5afc",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It will be publicly exposed through pd.api.extensions anyway I think",
        "createdAt" : "2018-01-26T17:12:26Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ba283dbe-f6fc-454a-9a41-41b1a4b9aa0d",
        "parentId" : "16297491-9cdb-464f-a531-c0ccd38e5afc",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Adding stuff to the public API is waiting on https://github.com/pandas-dev/pandas/pull/19304",
        "createdAt" : "2018-01-30T19:06:41Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@\"\"\"An interface for extending pandas with custom arrays.\"\"\"\nfrom pandas.errors import AbstractMethodError\n"
  },
  {
    "id" : "5e4639b6-a36b-4e3d-bfe0-26796e86706c",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-92065344",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20433c23-496a-4b54-b22d-b1c2283043ca",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "Let's strongly consider exposing a helper function to make this easier to write, or at least an example of what this would look like (we can save this for later). It's not obvious how to write this with NumPy.",
        "createdAt" : "2018-01-26T18:13:39Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "7983963c-2097-4761-a760-091e674c8c92",
        "parentId" : "20433c23-496a-4b54-b22d-b1c2283043ca",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I added an example that I hope gets things correct for an extension type backed by a NumPy structured array.\r\n\r\nOne trouble with this providing a helper function is that we don't know much about how the extension array is actually storing the data. Although, we could rely on the assumption that the underlying storage is convertible to a NumPy array, and proceed from there. Though this would perhaps be sub-optimal for many extension arrays.",
        "createdAt" : "2018-01-27T10:25:42Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "3d431753-a957-40f2-9f49-4f7760b342a6",
        "parentId" : "20433c23-496a-4b54-b22d-b1c2283043ca",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "For GeometryArray, we have followed the same idea the write `take` (so it's not necessarily only if you have a *structured* array, just when you have an array backing up your ExtensionArray)",
        "createdAt" : "2018-01-27T17:09:16Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "cdcf6cbb-43f5-4444-9e7f-7a4c79b850d4",
        "parentId" : "20433c23-496a-4b54-b22d-b1c2283043ca",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is fine as it is a pandas standard.",
        "createdAt" : "2018-01-28T21:02:07Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 173,
    "diffHunk" : "@@ -1,1 +171,175 @@        This should follow pandas' semantics where -1 indicates missing values.\n        Positions where indexer is ``-1`` should be filled with the missing\n        value for this type.\n\n        This is called by ``Series.__getitem__``, ``.loc``, ``iloc``, when the"
  },
  {
    "id" : "7c5050b7-29ef-421b-899a-21b79c2a2c4b",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93130434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f75af8fa-00e2-48f7-b739-b0769ccaa635",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this should be tested on registration of the sub-type",
        "createdAt" : "2018-01-28T21:01:10Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "be3e52b5-0e8b-4e45-b3fe-3120a930fe00",
        "parentId" : "f75af8fa-00e2-48f7-b739-b0769ccaa635",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "What do you mean \"registration\"? We could override `ABC.register`, but I don't think there's an (easy) way to validate this if they just subclass `ExtensionArray`.\r\n\r\nIf people want to mess with this, that's fine, their stuff just won't work with pandas.",
        "createdAt" : "2018-01-30T12:50:51Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "cc9636ce-9ab6-4036-8605-0965cadafce1",
        "parentId" : "f75af8fa-00e2-48f7-b739-b0769ccaa635",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what I mean is that when you register things, we should actually test that the interface is respected. If we had final methods this would not be necessary, but if someone override ndim this is a problem. ",
        "createdAt" : "2018-02-01T00:10:14Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +124,128 @@        # type: () -> int\n        \"\"\"Extension Arrays are only allowed to be 1-dimensional.\"\"\"\n        return 1\n\n    @property"
  },
  {
    "id" : "28303246-31fe-4c00-8f56-987305b72c51",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93130434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e97098cb-7d65-4516-bf80-e696d91b7ce3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "need to list this in the very top doc-string",
        "createdAt" : "2018-02-01T00:11:32Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 213,
    "diffHunk" : "@@ -1,1 +211,215 @@    # ------------------------------------------------------------------------\n    @property\n    def _fill_value(self):\n        # type: () -> Any\n        \"\"\"The missing value for this type, e.g. np.nan\"\"\""
  },
  {
    "id" : "09eabe1c-69ec-431b-b267-56d9c0fb1632",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93130434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "baee5a17-0930-47dd-87b0-d0f8985c1fc5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "need to list this in the very top doc-string",
        "createdAt" : "2018-02-01T00:11:46Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 239,
    "diffHunk" : "@@ -1,1 +237,241 @@        raise AbstractMethodError(cls)\n\n    def _can_hold_na(self):\n        # type: () -> bool\n        \"\"\"Whether your array can hold missing values. True by default."
  },
  {
    "id" : "34e8f1cd-8a4f-4aa1-bbdf-537c8278a5d9",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93728124",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e0b4d5a-60a1-41d7-811f-74c84e57ab10",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The two lines above can be removed here and mentioned in the list below (actually only formatting_values, as concat_same_type is already there)",
        "createdAt" : "2018-02-02T19:21:35Z",
        "updatedAt" : "2018-02-02T19:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@    * copy\n    * _formatting_values\n    * _concat_same_type\n\n    Some additional methods are required to satisfy pandas' internal, private"
  },
  {
    "id" : "e22ac5dd-23d6-49a2-8363-541bdcebb3dc",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93728124",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ff9007f-dc0a-47ad-90b7-bb9363174a93",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "this is repetitive with above (the list of methods that are required), and there is also a typo in \"for ~~proper~~ this array to be properly\"",
        "createdAt" : "2018-02-02T19:23:12Z",
        "updatedAt" : "2018-02-02T19:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +54,58 @@\n    Additionally, certain methods and interfaces are required for proper\n    this array to be properly stored inside a ``DataFrame`` or ``Series``.\n    \"\"\"\n    # ------------------------------------------------------------------------"
  },
  {
    "id" : "331cbffe-0a63-4282-b5cd-74981069de49",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93728124",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf08ba3e-f319-4698-b0b3-c7dbe9adfa71",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "let's make this just \"NumPy array\", as this is not specific to structured arrays",
        "createdAt" : "2018-02-02T19:25:19Z",
        "updatedAt" : "2018-02-02T19:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 180,
    "diffHunk" : "@@ -1,1 +178,182 @@        Examples\n        --------\n        Suppose the extension array somehow backed by a NumPy structured array\n        and that the underlying structured array is stored as ``self.data``.\n        Then ``take`` may be written as"
  },
  {
    "id" : "01b67243-2bcb-4686-aa2d-6eb6da963671",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93737363",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c3c166a-ea9f-4de1-95c5-3da98579c75a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "One question here is: should the keyword argument `fill_value` actually be honored? (like `if fill_value is None: fill_value = self._fill_value`) \r\nAre there case where pandas will actually pass a certain value? \r\n\r\nIn any case some clarification would be helpful, also if it is just in the signature for compatibility but may be ignored (maybe in a follow-up).",
        "createdAt" : "2018-02-02T19:28:05Z",
        "updatedAt" : "2018-02-02T19:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "057f8c19-5407-4cb2-87dc-ce01ff9ae209",
        "parentId" : "4c3c166a-ea9f-4de1-95c5-3da98579c75a",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "re `fill_value`, I based this off `Categorical.take`. It does `assert isna(fill_value)`, but otherwise ignores it.\r\n\r\nI think that since ExtensionArray.take returns an ExtensionArray, most implementations will just ignore fill_value. I'll clarify it in the docs.",
        "createdAt" : "2018-02-02T19:53:00Z",
        "updatedAt" : "2018-02-02T19:53:00Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 189,
    "diffHunk" : "@@ -1,1 +187,191 @@               mask = indexer == -1\n               result = self.data.take(indexer)\n               result[mask] = self._fill_value\n               return type(self)(result)\n        \"\"\""
  },
  {
    "id" : "600c446a-f1c9-4ecc-90d2-8f97d2365036",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93737973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a06b61b-6a18-492a-b3af-f86a15145d2b",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Maybe we can provide a default implementation of `return np.asarray(self)` ? (so a densified object array). That is what I do in geopandas, and I suppose would also work for the IPadresses ?",
        "createdAt" : "2018-02-02T19:29:53Z",
        "updatedAt" : "2018-02-02T19:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d0206811-f4f3-4388-92af-a9a0466ffffd",
        "parentId" : "5a06b61b-6a18-492a-b3af-f86a15145d2b",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yes, I suppose that'll be OK for many implementations.",
        "createdAt" : "2018-02-02T19:55:07Z",
        "updatedAt" : "2018-02-02T19:55:07Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 222,
    "diffHunk" : "@@ -1,1 +220,224 @@        # At the moment, this has to be an array since we use result.dtype\n        \"\"\"An array of values to be printed in, e.g. the Series repr\"\"\"\n        raise AbstractMethodError(self)\n\n    @classmethod"
  }
]