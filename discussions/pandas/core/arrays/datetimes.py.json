[
  {
    "id" : "c56eefe7-f288-4d31-af52-421530393d51",
    "prId" : 21721,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21721#pullrequestreview-134478819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7a55bd9-a217-407b-a086-0715dfd0021b",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Does this only make sense if `tz_convert` requires its input to be sorted?  I don't think it does.",
        "createdAt" : "2018-07-04T20:51:34Z",
        "updatedAt" : "2018-07-05T14:57:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9053bcd7-d595-4aa6-ba22-48b44c35c8f8",
        "parentId" : "f7a55bd9-a217-407b-a086-0715dfd0021b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah not sure why that indexer is there",
        "createdAt" : "2018-07-04T22:54:07Z",
        "updatedAt" : "2018-07-05T14:57:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3072b23b-addc-44fe-b7d8-9c4de9fb7be9",
        "parentId" : "f7a55bd9-a217-407b-a086-0715dfd0021b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "In the next pass I'll see if this can be simplified.",
        "createdAt" : "2018-07-04T23:03:22Z",
        "updatedAt" : "2018-07-05T14:57:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "70e404734aefd82a62d0eecde2633966bbcd9e01",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +124,128 @@        values = self.asi8\n        indexer = values.argsort()\n        result = conversion.tz_convert(values.take(indexer), utc, self.tz)\n\n        n = len(indexer)"
  },
  {
    "id" : "dbc4d883-3fe2-4b39-a114-4baab7494fff",
    "prId" : 21776,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21776#pullrequestreview-135096324",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6b5359f-f503-44dc-baed-de5acb160865",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "todo update doc-string",
        "createdAt" : "2018-07-06T17:30:27Z",
        "updatedAt" : "2018-07-06T17:31:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "74ac363810314216a757336d4a9cc9c8d99c1892",
    "line" : 447,
    "diffHunk" : "@@ -1,1 +555,559 @@        \"\"\")\n\n    def to_julian_date(self):\n        \"\"\"\n        Convert DatetimeIndex to float64 ndarray of Julian Dates."
  },
  {
    "id" : "91f833bb-29d3-45f0-a12f-a6adc4a36fac",
    "prId" : 21782,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21782#pullrequestreview-135190341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34e7774d-e542-452e-96af-b7ea9fffbf43",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "changed from existing version on DatetimeIndex where it says \r\n\r\n```\r\n        Returns\r\n        -------\r\n        Timestamps : ndarray\r\n```",
        "createdAt" : "2018-07-07T01:55:57Z",
        "updatedAt" : "2018-07-07T01:55:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "10e5559785dafd7b0c703e680a27344b08655053",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +117,121 @@        Yields\n        -------\n        tstamp : Timestamp\n        \"\"\"\n"
  },
  {
    "id" : "2e4c5a45-ece0-46ad-9a26-087d58bc1392",
    "prId" : 21803,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21803#pullrequestreview-135217487",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8120adff-37ca-476a-84b5-00dc9b6e651f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this condition could actually be handled to by ``to_offset`` (future PR) (except for the not-None part)",
        "createdAt" : "2018-07-07T22:35:45Z",
        "updatedAt" : "2018-07-07T23:28:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e5b28f3e-81f1-44e1-9f13-56ab65f2064c",
        "parentId" : "8120adff-37ca-476a-84b5-00dc9b6e651f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, I anticipate _most_ of the existing constructors will be moved from the Index subclasses to the Array subclasses; for now I just need something that works for the cases that are called internally.",
        "createdAt" : "2018-07-07T23:24:41Z",
        "updatedAt" : "2018-07-07T23:28:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "192c9200e690b69e2e3d4cb7f4d9b041854be9e3",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +105,109 @@\n    def __new__(cls, values, freq=None, tz=None):\n        if (freq is not None and not isinstance(freq, DateOffset) and\n                freq != 'infer'):\n            freq = to_offset(freq)"
  },
  {
    "id" : "0b52012c-5b59-4c2b-8e04-d6b1599dcef0",
    "prId" : 22016,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22016#pullrequestreview-139269081",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b891c282-2222-4494-865f-d489b8464741",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "One of two things changed from the existing version.  ATM this is:\r\n\r\n```\r\n                index = tools.to_datetime(np.linspace(start.value,\r\n                                                      end.value, periods),\r\n                                          utc=True)\r\n                index = index.tz_convert(tz)\r\n```\r\n\r\nChanged to avoid the dependency on `tools`.",
        "createdAt" : "2018-07-21T21:02:50Z",
        "updatedAt" : "2018-07-25T19:12:19Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e33ff43416efb0a564b34df2b92e5f4109563321",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +294,298 @@                end = end.tz_localize(tz)\n                arr = np.linspace(start.value, end.value, periods)\n                index = cls._simple_new(arr.astype('M8[ns]'), freq=None, tz=tz)\n\n        if not left_closed and len(index) and index[0] == start:"
  },
  {
    "id" : "db74583c-5e21-46b0-bc62-5cd8b2b48eb0",
    "prId" : 22074,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22074#pullrequestreview-141321422",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03d42ab1-a901-4163-8ab8-3849f6f2a14b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "since we do this all over the place, thing about making a type for this (for in internal use only), and/or maybe a ``is_datetime_scalar`` or something, just so we are consistent",
        "createdAt" : "2018-07-28T12:56:43Z",
        "updatedAt" : "2018-07-30T19:03:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d8670696-35de-4493-be55-7698bfb065a1",
        "parentId" : "03d42ab1-a901-4163-8ab8-3849f6f2a14b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I've got a branch going looking at `core.dtypes.common` (inspired by noticing the footgun status if `is_datetimelike`), will look at this there so I can get all the places it is used in one swoop.",
        "createdAt" : "2018-07-28T16:36:46Z",
        "updatedAt" : "2018-07-30T19:03:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ac9102d8b2200f9144a88fc3ac94148a329d3d4",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +101,105 @@\n        if isinstance(other, (datetime, np.datetime64, compat.string_types)):\n            if isinstance(other, (datetime, np.datetime64)):\n                # GH#18435 strings get a pass from tzawareness compat\n                self._assert_tzawareness_compat(other)"
  },
  {
    "id" : "4942b539-e86c-4736-987d-74a9f6199b95",
    "prId" : 22074,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22074#pullrequestreview-141321387",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81c792dd-d0d0-4f80-9791-59d53e55399e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "huh? why don't you just implement and raise NotIMplemented?",
        "createdAt" : "2018-07-28T12:57:27Z",
        "updatedAt" : "2018-07-30T19:03:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6b3393b5-7b2e-435d-a32d-adfc6dd941a9",
        "parentId" : "81c792dd-d0d0-4f80-9791-59d53e55399e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is is a quirk of the stdlib `datetime` implementation.  `datetime == other` will return `NotImplemented` instead of raising `TypeError` iff `other` has a `timetuple` attribute.",
        "createdAt" : "2018-07-28T16:35:13Z",
        "updatedAt" : "2018-07-30T19:03:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ac9102d8b2200f9144a88fc3ac94148a329d3d4",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +163,167 @@    _object_ops = ['weekday_name', 'freq', 'tz']\n\n    # dummy attribute so that datetime.__eq__(DatetimeArray) defers\n    # by returning NotImplemented\n    timetuple = None"
  },
  {
    "id" : "86cf9cd2-a5c6-4760-9293-71e5d1a6510f",
    "prId" : 22288,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22288#pullrequestreview-151481483",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38228b51-a1ae-4038-ba3b-b62bd47aca3e",
        "parentId" : null,
        "authorId" : "aa76ca2b-2c97-45f3-bb6a-3e0ee670395b",
        "body" : "can do `dtype='M8[ns]'` in the linspace call",
        "createdAt" : "2018-08-26T13:09:12Z",
        "updatedAt" : "2018-09-05T16:52:00Z",
        "lastEditedBy" : "aa76ca2b-2c97-45f3-bb6a-3e0ee670395b",
        "tags" : [
        ]
      },
      {
        "id" : "f1f4fbdb-7cb4-4447-8d89-b3dca823fc7a",
        "parentId" : "38228b51-a1ae-4038-ba3b-b62bd47aca3e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you do this (does it work?)",
        "createdAt" : "2018-08-31T10:28:27Z",
        "updatedAt" : "2018-09-05T16:52:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "37b261e1-8093-46e9-8a10-68bb354f60fa",
        "parentId" : "38228b51-a1ae-4038-ba3b-b62bd47aca3e",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "This failed on the numpy compat build unfortunately.",
        "createdAt" : "2018-08-31T17:17:04Z",
        "updatedAt" : "2018-09-05T16:52:00Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ed681c9bba45ac2f939e85951127de569ae28c7",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +282,286 @@        else:\n            # Create a linearly spaced date_range in local time\n            arr = np.linspace(start.value, end.value, periods)\n            index = cls._simple_new(\n                arr.astype('M8[ns]', copy=False), freq=None, tz=tz"
  },
  {
    "id" : "408790e0-2cb5-4a15-bf63-9bc1225aecec",
    "prId" : 22288,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22288#pullrequestreview-152030834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0db0c665-8f18-474a-94e4-82c5959a0c3a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "e.g. figure out localize_args here (from a passed freq)",
        "createdAt" : "2018-09-04T11:58:57Z",
        "updatedAt" : "2018-09-05T16:52:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ed681c9bba45ac2f939e85951127de569ae28c7",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +1326,1330 @@    -------\n    ts : Timestamp\n    \"\"\"\n    # Make sure start and end are timezone localized if:\n    # 1) freq = a Timedelta-like frequency (Tick)"
  },
  {
    "id" : "0a796fdb-2561-44a6-81e4-25f9acf0f9ff",
    "prId" : 22544,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22544#pullrequestreview-152287708",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aad4c20b-d8f7-43f3-8468-96e4528f9b5f",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Where is pandas making the default English? Haven't looked in detail but assumed this would be system dependent",
        "createdAt" : "2018-09-02T17:58:18Z",
        "updatedAt" : "2018-09-04T17:37:26Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "a3e03776-3d94-4640-b124-4be6cf12cd49",
        "parentId" : "aad4c20b-d8f7-43f3-8468-96e4528f9b5f",
        "authorId" : "8d2a3b12-73f9-4428-b3c5-ad2026cb2d6b",
        "body" : "I would expect that to be system independent (when programming, I'd rather have predictable results).\r\n\r\nCode is implemented in `get_date_name_field()`:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/86e8f23be6d8496cb39ee836b5b02f5c91fda0ba/pandas/_libs/tslibs/fields.pyx#L102-L103\r\nhttps://github.com/pandas-dev/pandas/blob/86e8f23be6d8496cb39ee836b5b02f5c91fda0ba/pandas/_libs/tslibs/fields.pyx#L117-L118\r\n\r\n`DAYS_FULL` and `MONTHS_FULL` are hard-coded in Pandas:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/86e8f23be6d8496cb39ee836b5b02f5c91fda0ba/pandas/_libs/tslibs/ccalendar.pyx#L39-L48",
        "createdAt" : "2018-09-02T19:35:28Z",
        "updatedAt" : "2018-09-04T17:37:26Z",
        "lastEditedBy" : "8d2a3b12-73f9-4428-b3c5-ad2026cb2d6b",
        "tags" : [
        ]
      },
      {
        "id" : "ef1dbc14-baeb-46df-9222-bc9e7b9ad7cc",
        "parentId" : "aad4c20b-d8f7-43f3-8468-96e4528f9b5f",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "The idea was for `day_name` to replace the depreciated `weekday_name` which defaulted to hardcoded english names (without localization support).",
        "createdAt" : "2018-09-03T22:11:18Z",
        "updatedAt" : "2018-09-04T17:37:26Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "d3418db8-cf52-4217-a719-d4c1371e1557",
        "parentId" : "aad4c20b-d8f7-43f3-8468-96e4528f9b5f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "agree this should say the default is based on the locale",
        "createdAt" : "2018-09-04T11:42:21Z",
        "updatedAt" : "2018-09-04T17:37:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f9c12d76-1795-4fc6-a7b3-e5e034ad1911",
        "parentId" : "aad4c20b-d8f7-43f3-8468-96e4528f9b5f",
        "authorId" : "8d2a3b12-73f9-4428-b3c5-ad2026cb2d6b",
        "body" : "@jreback As you can see in the code snippets above, it is not based on the locale. The default is always English.",
        "createdAt" : "2018-09-04T11:45:01Z",
        "updatedAt" : "2018-09-04T17:37:26Z",
        "lastEditedBy" : "8d2a3b12-73f9-4428-b3c5-ad2026cb2d6b",
        "tags" : [
        ]
      },
      {
        "id" : "1c68cde5-2d05-44e1-bdfa-b6865b16d7c0",
        "parentId" : "aad4c20b-d8f7-43f3-8468-96e4528f9b5f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sure it does, just pass a locale name",
        "createdAt" : "2018-09-04T11:47:08Z",
        "updatedAt" : "2018-09-04T17:37:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c295985a-6360-440f-9b00-daa7d5413bcc",
        "parentId" : "aad4c20b-d8f7-43f3-8468-96e4528f9b5f",
        "authorId" : "8d2a3b12-73f9-4428-b3c5-ad2026cb2d6b",
        "body" : "@jreback Sorry, I do not understand your last comment. Are you still saying when no locale is passed as parameter then the default behavior is to use the system locale instead of always English? Or are you saying the default locale (English) should be specified instead of `locale=None` in the method declaration?\r\n\r\nI am confused because it seemed to me you first asked to change the docstring to state that the default was the system locale instead of English (which is not true).",
        "createdAt" : "2018-09-04T11:59:26Z",
        "updatedAt" : "2018-09-04T17:37:26Z",
        "lastEditedBy" : "8d2a3b12-73f9-4428-b3c5-ad2026cb2d6b",
        "tags" : [
        ]
      },
      {
        "id" : "b94f4bbb-7ec3-485c-9b6e-25710c82ad1b",
        "parentId" : "aad4c20b-d8f7-43f3-8468-96e4528f9b5f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why don't you try both ways and see",
        "createdAt" : "2018-09-04T12:01:57Z",
        "updatedAt" : "2018-09-04T17:37:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "19c99487-6f2e-43d9-bc27-51ab7072f4e1",
        "parentId" : "aad4c20b-d8f7-43f3-8468-96e4528f9b5f",
        "authorId" : "8d2a3b12-73f9-4428-b3c5-ad2026cb2d6b",
        "body" : "@jreback Which both ways? Could you be more explicit about what you are trying to say? Explicit is better than implicit and words are free. :stuck_out_tongue_winking_eye: \r\n\r\nI tried changing the system locale and verified the default behavior was to use English. Maybe I did something wrong, in which case, could you provide a better way to verify it? Also, I searched through the Pandas code and it seemed to me (as shown above), that the default is English, not system locale.",
        "createdAt" : "2018-09-04T12:11:14Z",
        "updatedAt" : "2018-09-04T17:37:26Z",
        "lastEditedBy" : "8d2a3b12-73f9-4428-b3c5-ad2026cb2d6b",
        "tags" : [
        ]
      },
      {
        "id" : "02a6126a-be4b-4ad2-a1f8-39c2a6a45129",
        "parentId" : "aad4c20b-d8f7-43f3-8468-96e4528f9b5f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is fully tested, why don't you have a look, just grep for day_name and see",
        "createdAt" : "2018-09-04T12:23:30Z",
        "updatedAt" : "2018-09-04T17:37:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a457cff6-9c7f-4c4b-a91e-57756f37718d",
        "parentId" : "aad4c20b-d8f7-43f3-8468-96e4528f9b5f",
        "authorId" : "8d2a3b12-73f9-4428-b3c5-ad2026cb2d6b",
        "body" : "@jreback Yeah, the tests seem to verify the same behavior: when locale is `None`, the default is always English, not system locale. I still do not get what you are trying to tell me then... :cry:",
        "createdAt" : "2018-09-04T12:41:44Z",
        "updatedAt" : "2018-09-04T17:37:26Z",
        "lastEditedBy" : "8d2a3b12-73f9-4428-b3c5-ad2026cb2d6b",
        "tags" : [
        ]
      },
      {
        "id" : "e181379c-a389-4e4e-99f0-b5a07fc51a57",
        "parentId" : "aad4c20b-d8f7-43f3-8468-96e4528f9b5f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you show here what you are running exactly",
        "createdAt" : "2018-09-04T12:45:49Z",
        "updatedAt" : "2018-09-04T17:37:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9a089823-703d-450b-a573-d6b82a642b2f",
        "parentId" : "aad4c20b-d8f7-43f3-8468-96e4528f9b5f",
        "authorId" : "8d2a3b12-73f9-4428-b3c5-ad2026cb2d6b",
        "body" : "@jreback I do not think the code I am running is relevant here. Unless you refer to a trivial example like the one I added in the docstring (but why would you need that?):\r\n\r\n```python\r\nidx = pd.DatetimeIndex(start='2018-09-02', freq='D', periods=3)\r\nidx.day_name()\r\n```\r\n\r\nCan you explain why you still say the default when `locale=None` is based on the system's locale? I checked the tests, the code and the behavior and everything seems to prove otherwise: the default when `locale=None` is English, and hence the proposed docstring. Did you check anything?",
        "createdAt" : "2018-09-04T13:56:35Z",
        "updatedAt" : "2018-09-04T17:37:26Z",
        "lastEditedBy" : "8d2a3b12-73f9-4428-b3c5-ad2026cb2d6b",
        "tags" : [
        ]
      },
      {
        "id" : "a6b46dc2-448b-400a-8924-989031c96770",
        "parentId" : "aad4c20b-d8f7-43f3-8468-96e4528f9b5f",
        "authorId" : "8d2a3b12-73f9-4428-b3c5-ad2026cb2d6b",
        "body" : "@jreback If you tell me exactly what changes to the current docstring you have on your mind (it seems other reviewers are okay with it), I may better understand what you are saying. :heart:",
        "createdAt" : "2018-09-04T17:43:21Z",
        "updatedAt" : "2018-09-04T17:46:19Z",
        "lastEditedBy" : "8d2a3b12-73f9-4428-b3c5-ad2026cb2d6b",
        "tags" : [
        ]
      },
      {
        "id" : "12ce9038-d31c-460d-ba93-6aee2ef03640",
        "parentId" : "aad4c20b-d8f7-43f3-8468-96e4528f9b5f",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "@Peque @jreback The default locale is English as `day_name` is meant to replace `weekday_name` which defaulted to english. So the docstring here is correct.\r\n\r\n@Peque feel free to open up a new issue suggesting that `day_name` and `month_name` should default to system locale. This would be an API change.",
        "createdAt" : "2018-09-04T18:34:56Z",
        "updatedAt" : "2018-09-04T18:34:56Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "7d06fa89-12aa-432c-8b05-c666e79c2afd",
        "parentId" : "aad4c20b-d8f7-43f3-8468-96e4528f9b5f",
        "authorId" : "8d2a3b12-73f9-4428-b3c5-ad2026cb2d6b",
        "body" : "@mroeschke Yeah, but I do prefer the current behavior, so I would rather not open that issue (and note I am not a native English speaker nor live in an English country).\r\n\r\nWhen programming, I prefer everything in English by default. :stuck_out_tongue_winking_eye: ",
        "createdAt" : "2018-09-04T23:07:40Z",
        "updatedAt" : "2018-09-04T23:07:40Z",
        "lastEditedBy" : "8d2a3b12-73f9-4428-b3c5-ad2026cb2d6b",
        "tags" : [
        ]
      },
      {
        "id" : "dbbff941-c5fc-4b19-a8ea-b60c7375fe25",
        "parentId" : "aad4c20b-d8f7-43f3-8468-96e4528f9b5f",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Gotcha @Peque. I hold a similar opinion for API transition sake.\r\n\r\nTherefore, I think there's no action with this docstring here as far as I'm concerned. ",
        "createdAt" : "2018-09-04T23:18:12Z",
        "updatedAt" : "2018-09-04T23:18:12Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1216484685f6b29f479be59ad9ea4d078149a17b",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +800,804 @@        locale : str, optional\n            Locale determining the language in which to return the month name.\n            Default is English locale.\n\n        Returns"
  },
  {
    "id" : "8bf1375f-5d69-41be-84fa-d35827dad95a",
    "prId" : 22644,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22644#pullrequestreview-163839627",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ec1a157-d27a-4619-b18f-1890bc454ba0",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you reuse the explanation about what a non-existent time is that is in the `errors` keyword below?\r\n\r\n(and idem for the other occurences of this in docstrings)",
        "createdAt" : "2018-10-11T14:22:11Z",
        "updatedAt" : "2018-10-24T22:22:30Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cf16e2f197e8405f27ebdfa4c2718620261df04",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +644,648 @@            where clocks moved forward due to DST.\n\n            - 'shift' will shift the nonexistent times forward to the closest\n              existing time\n            - 'NaT' will return NaT where there are nonexistent times"
  },
  {
    "id" : "1113bcac-6d1d-46d6-a0b6-0da4e3aa75aa",
    "prId" : 23051,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23051#pullrequestreview-162775520",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7a43ba4-cdd6-4dcb-9768-daeab209b649",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "you need a blank line before `Returns`",
        "createdAt" : "2018-10-09T08:46:52Z",
        "updatedAt" : "2018-10-26T01:18:19Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e0f2425daf34c17f9d777e34ce4bd1e5fc0f70b",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1002,1006 @@        Indicates whether the date is the {first_or_last} day of the month.\n\n        Returns\n        -------\n        Series or array"
  },
  {
    "id" : "0a3fa668-832b-452a-9276-02bed71bd1b4",
    "prId" : 23051,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23051#pullrequestreview-162775520",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8473cdaa-6499-4c8c-b9a9-7fa880a41005",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Missing blank line before `Examples`.",
        "createdAt" : "2018-10-09T10:07:33Z",
        "updatedAt" : "2018-10-26T01:18:19Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e0f2425daf34c17f9d777e34ce4bd1e5fc0f70b",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1015,1019 @@            is the last day of the month.\n\n        Examples\n        --------\n        This method is available on Series with datetime values under"
  },
  {
    "id" : "ac3ddaed-9db6-4ebd-bec2-07f8f136e3ae",
    "prId" : 23093,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23093#pullrequestreview-164015080",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46cd2d83-7874-4818-b7d8-807c9ce8d4e0",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Moved these checks here from inside `__new__`",
        "createdAt" : "2018-10-11T15:19:58Z",
        "updatedAt" : "2018-10-11T22:13:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "24366847-e7f0-44a6-b79b-dbf8906df01b",
        "parentId" : "46cd2d83-7874-4818-b7d8-807c9ce8d4e0",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "+1, as long as we're OK with ignoring gibberish arguments when there not actually used (which seems to be what we do right now).\r\n\r\n```python\r\n\r\nIn [9]: idx = pd.PeriodIndex(['2000', '2001'], freq='D')\r\n\r\nIn [10]: pd.PeriodIndex(idx, start='foo')\r\nOut[10]: PeriodIndex(['2000-01-01', '2001-01-01'], dtype='period[D]', freq='D')\r\n```",
        "createdAt" : "2018-10-11T21:05:18Z",
        "updatedAt" : "2018-10-11T22:13:49Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "04c75ca93ebaf693f9a60c7ff609806300083f88",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +228,232 @@            raise ValueError('Must provide freq argument if no data is '\n                             'supplied')\n\n        if com.count_not_none(start, end, periods, freq) != 3:\n            raise ValueError('Of the four parameters: start, end, periods, '"
  },
  {
    "id" : "6823cb2a-2bf3-4ba5-b010-083e2c566d97",
    "prId" : 23113,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23113#pullrequestreview-164568714",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6777b75-04e5-4b12-9b92-e24f38b1f6bd",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I find this a rather \"obscure\" method (meaning, not directly sure how it would be useful for me as a user). But I am also not a frequent user of periods/offsets, so difficult to say (and maybe a good example in the docstring might already help). \r\n\r\nSo what I want to say: in case this is indeed rather for internal use, I would not make it a public method on the array class (but can still do the move but make it for example private here)",
        "createdAt" : "2018-10-13T08:47:02Z",
        "updatedAt" : "2018-10-18T20:51:09Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1da2e8e1-f942-4836-8235-6963b1b772ef",
        "parentId" : "e6777b75-04e5-4b12-9b92-e24f38b1f6bd",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is used indirectly in DatetimeIndex + DateOffset, so will be needed for DatetimeArray + DateOffset.",
        "createdAt" : "2018-10-13T16:30:06Z",
        "updatedAt" : "2018-10-18T20:51:09Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b12cd336-2afa-448a-9846-13bcd09f73b0",
        "parentId" : "e6777b75-04e5-4b12-9b92-e24f38b1f6bd",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we might want to make this private, i dont' think we need to expose to the user",
        "createdAt" : "2018-10-14T13:26:38Z",
        "updatedAt" : "2018-10-18T20:51:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "13272d82-0674-4f85-a98c-5800d57c649d",
        "parentId" : "e6777b75-04e5-4b12-9b92-e24f38b1f6bd",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I privatized this earlier today, but have now changed my mind.  For DateOffset arithmetic to work \"for free\" it needs to have the same name.  We can revisit this later if needbe.",
        "createdAt" : "2018-10-14T22:25:52Z",
        "updatedAt" : "2018-10-18T20:51:10Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "62c835d0-8ba3-474e-915f-d8b6d5b4639d",
        "parentId" : "e6777b75-04e5-4b12-9b92-e24f38b1f6bd",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK, can you then add a comment like `TODO(EA): make this private`, for once we do the actual split (because I suppose then this is no longer a problem?)",
        "createdAt" : "2018-10-15T06:55:53Z",
        "updatedAt" : "2018-10-18T20:51:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d8bc1acb8759c1e069a7761d2604369ec011e50",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +825,829 @@        Calculate TimedeltaArray of difference between index\n        values and index converted to PeriodArray at specified\n        freq. Used for vectorized offsets\n\n        Parameters"
  },
  {
    "id" : "3d0a9628-7be9-4efa-8464-24f4882d5fbd",
    "prId" : 23215,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23215#pullrequestreview-168500637",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94da5523-a32a-44e3-9d2e-3333753cdec8",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Much less verbose than the old 522-526.  Not sure if there was a reason for the old version.",
        "createdAt" : "2018-10-18T00:06:43Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "14d24794-5c71-443b-a4ce-5fbac43c00b5",
        "parentId" : "94da5523-a32a-44e3-9d2e-3333753cdec8",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Why does this use `type(self)(new_values)`, while the PeriodArrayMixin version uses `self._shallow_copy`? Is that necessary due to inconsistent constructors, or can we standardize?",
        "createdAt" : "2018-10-19T13:54:19Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "54f2affe-d014-498d-9da1-cfc915f01eb1",
        "parentId" : "94da5523-a32a-44e3-9d2e-3333753cdec8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Because shallow_copy doesn't allow `freq='infer'`",
        "createdAt" : "2018-10-19T14:15:00Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "aa8c620b-98c1-4aa5-b0e3-873cf144fc7b",
        "parentId" : "94da5523-a32a-44e3-9d2e-3333753cdec8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you, regardless of the docstring appender, add a single line comment like `# add a timedelta-like or DateOffset, yielding a ...` (as is done for some of the others as well). \r\nThat at least makes reading the code a bit easier.",
        "createdAt" : "2018-10-19T18:58:25Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "766ce864-9c2c-4caf-8495-6400317efd66",
        "parentId" : "94da5523-a32a-44e3-9d2e-3333753cdec8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jbrockmendel related to your initial comment. If I do the following (mimicking the old and new code):\r\n\r\n```\r\nIn [15]: new_values = np.array([1, 2, 3], dtype='datetime64[ns]')\r\n\r\nIn [16]: pd.DatetimeIndex(new_values, tz='Europe/Brussels')\r\nOut[16]: \r\nDatetimeIndex(['1970-01-01 00:00:00.000000001+01:00',\r\n               '1970-01-01 00:00:00.000000002+01:00',\r\n               '1970-01-01 00:00:00.000000003+01:00'],\r\n              dtype='datetime64[ns, Europe/Brussels]', freq=None)\r\n\r\nIn [17]: pd.DatetimeIndex(new_values, tz='UTC').tz_convert('Europe/Brussels')\r\nOut[17]: \r\nDatetimeIndex(['1970-01-01 01:00:00.000000001+01:00',\r\n               '1970-01-01 01:00:00.000000002+01:00',\r\n               '1970-01-01 01:00:00.000000003+01:00'],\r\n              dtype='datetime64[ns, Europe/Brussels]', freq=None)\r\n```\r\n\r\nis not giving the same result (or did I do something wrong in the example? I assumed that `self.tz` was 'Europe/Brussels')\r\n\r\nBut that is just from looking at the small piece of code here in the diff, not the broader picture where and how it is called etc.",
        "createdAt" : "2018-10-19T19:07:17Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0dbe4d54-7105-43a7-887f-48f65b15ad53",
        "parentId" : "94da5523-a32a-44e3-9d2e-3333753cdec8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@jorisvandenbossche turns out I had it right the first time.  The problem with the example you gave is that you're passing `M8[ns]` instead of `i8`.\r\n\r\n```\r\nIn [3]: new_values = np.array([1, 2, 3])\r\n\r\nIn [4]: pd.DatetimeIndex(new_values, tz='Europe/Brussels')\r\nOut[4]: \r\nDatetimeIndex(['1970-01-01 01:00:00.000000001+01:00',\r\n               '1970-01-01 01:00:00.000000002+01:00',\r\n               '1970-01-01 01:00:00.000000003+01:00'],\r\n              dtype='datetime64[ns, Europe/Brussels]', freq=None)\r\n\r\nIn [5]: pd.DatetimeIndex(new_values, tz='UTC').tz_convert('Europe/Brussels')\r\nOut[5]: \r\nDatetimeIndex(['1970-01-01 01:00:00.000000001+01:00',\r\n               '1970-01-01 01:00:00.000000002+01:00',\r\n               '1970-01-01 01:00:00.000000003+01:00'],\r\n              dtype='datetime64[ns, Europe/Brussels]', freq=None)\r\n```",
        "createdAt" : "2018-10-20T00:04:34Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "cd869180-fdf7-4b5c-9ec5-f539ed89d9ae",
        "parentId" : "94da5523-a32a-44e3-9d2e-3333753cdec8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah ... subtle difference :) \r\nThen the docstring of `_add_delta` is incorrect I think.",
        "createdAt" : "2018-10-22T13:00:21Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1ae15c86-4954-44d6-9183-bd84198b36e3",
        "parentId" : "94da5523-a32a-44e3-9d2e-3333753cdec8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> Then the docstring of _add_delta is incorrect I think.\r\n\r\nCan you elaborate on this?",
        "createdAt" : "2018-10-22T16:05:32Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bc58ac13-2f0f-4f99-a6a5-007c2423b437",
        "parentId" : "94da5523-a32a-44e3-9d2e-3333753cdec8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> Can you elaborate on this?\r\n\r\nAdded a comment on the relevant line",
        "createdAt" : "2018-10-22T19:04:28Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "44b54e07-b5dd-4325-85df-c85ac2d0e81a",
        "parentId" : "94da5523-a32a-44e3-9d2e-3333753cdec8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> Can you, regardless of the docstring appender, add a single line comment like # add a timedelta-like or DateOffset, yielding a ... (as is done for some of the others as well).\r\nThat at least makes reading the code a bit easier.\r\n\r\nCan you do this one?",
        "createdAt" : "2018-10-22T19:16:07Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "06305826-29d1-4153-bf6d-40bc06cde42a",
        "parentId" : "94da5523-a32a-44e3-9d2e-3333753cdec8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you do this one?",
        "createdAt" : "2018-10-25T17:21:45Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9ac80a1c-52ec-4733-9c49-0fdd85b8e18d",
        "parentId" : "94da5523-a32a-44e3-9d2e-3333753cdec8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "My bad; this got lost in the shuffle.  I'll look at this now.",
        "createdAt" : "2018-10-25T17:24:32Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "71cf9970-0bd2-4340-bfd0-e6bfafcabd7a",
        "parentId" : "94da5523-a32a-44e3-9d2e-3333753cdec8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Just updated.  It's much less pretty than before, but more Technically Correct.",
        "createdAt" : "2018-10-25T17:32:39Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0466b9c8efd2f38f61a79fdf90464ee71ae72750",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +501,505 @@        \"\"\"\n        new_values = dtl.DatetimeLikeArrayMixin._add_delta(self, delta)\n        return type(self)(new_values, tz=self.tz, freq='infer')\n\n    # -----------------------------------------------------------------"
  },
  {
    "id" : "500bfa4c-efa3-438f-aafb-7839b258e739",
    "prId" : 23215,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23215#pullrequestreview-167178084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "297d958a-4b5e-4376-9324-5ce28a65e7b8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add an assert on the dtype",
        "createdAt" : "2018-10-23T01:49:40Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0466b9c8efd2f38f61a79fdf90464ee71ae72750",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +430,434 @@            raise ValueError(\"cannot add indices of unequal length\")\n\n        if isinstance(other, np.ndarray):\n            assert is_datetime64_dtype(other)\n            other = type(self)(other)"
  },
  {
    "id" : "da087532-5b7e-4d96-a7d4-d90707d01688",
    "prId" : 23215,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23215#pullrequestreview-167184826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d145a24c-6b21-421a-a17a-df95beef316e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is always a scalar other?",
        "createdAt" : "2018-10-23T01:50:16Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6352dd92-8d72-40ca-9fbf-bbfa537aa744",
        "parentId" : "d145a24c-6b21-421a-a17a-df95beef316e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yes",
        "createdAt" : "2018-10-23T02:18:52Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0466b9c8efd2f38f61a79fdf90464ee71ae72750",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +469,473 @@    def _sub_datetimelike_scalar(self, other):\n        # subtract a datetime from myself, yielding a ndarray[timedelta64[ns]]\n        assert isinstance(other, (datetime, np.datetime64))\n        assert other is not NaT\n        other = Timestamp(other)"
  },
  {
    "id" : "86c3a5ef-7650-4a15-925c-b4401c6f3eaa",
    "prId" : 23215,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23215#pullrequestreview-168643147",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6a5ebc2-a1d9-4682-a889-38aeef86a2a3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this correct?",
        "createdAt" : "2018-10-26T01:15:20Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0466b9c8efd2f38f61a79fdf90464ee71ae72750",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +76,80 @@        if field in self._object_ops:\n            result = fields.get_date_name_field(values, field)\n            result = self._maybe_mask_results(result, fill_value=None)\n\n        else:"
  },
  {
    "id" : "1f8347ff-7914-4783-aa2f-cc15128762e7",
    "prId" : 23215,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23215#pullrequestreview-168649012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f4c455b-b23d-4bd3-9ecc-345254156b26",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this correct?",
        "createdAt" : "2018-10-26T01:15:46Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e9793475-aa28-48c2-9ea7-4cda674d2c0d",
        "parentId" : "3f4c455b-b23d-4bd3-9ecc-345254156b26",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "You asked me to change the default for `fill_value` from `None` to `iNaT`, so places that used to not pass anything are updated to pass `None`.",
        "createdAt" : "2018-10-26T01:23:35Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "78aa71f9-51e0-44de-8dd6-9debe166cda9",
        "parentId" : "3f4c455b-b23d-4bd3-9ecc-345254156b26",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm yeah i c. maybe it would be better to infer based on the type of result? I just don't lke having to specific this at all (and here it shoud be np.nan anyhow). IOW it can either be ``iNaT`` if its a datetimelike op, else its ``np.nan`` if the result is object / float.",
        "createdAt" : "2018-10-26T01:35:14Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c8a913ea-eebb-465d-aae3-09c1d9edbe1f",
        "parentId" : "3f4c455b-b23d-4bd3-9ecc-345254156b26",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I was thinking of doing something similar in the next pass",
        "createdAt" : "2018-10-26T01:38:10Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "12cdaad6-7171-4a49-891d-2697ab98fd84",
        "parentId" : "3f4c455b-b23d-4bd3-9ecc-345254156b26",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k cool",
        "createdAt" : "2018-10-26T01:58:20Z",
        "updatedAt" : "2018-10-28T05:23:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0466b9c8efd2f38f61a79fdf90464ee71ae72750",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +882,886 @@        result = fields.get_date_name_field(values, 'month_name',\n                                            locale=locale)\n        result = self._maybe_mask_results(result, fill_value=None)\n        return result\n"
  },
  {
    "id" : "d4eaf00f-d0ea-4825-82ba-2711aa6ec083",
    "prId" : 23430,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23430#pullrequestreview-171466934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "765228aa-d1ae-4bd1-ac00-169664aa78bd",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Why self.asi8 and not self or self._data here? Simple_new doesn't take M8 values?",
        "createdAt" : "2018-11-02T14:22:23Z",
        "updatedAt" : "2018-11-02T14:22:35Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "997f89b3-e6be-4b64-b47c-29fd6bb77cf3",
        "parentId" : "765228aa-d1ae-4bd1-ac00-169664aa78bd",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "`_simple_new(int64values, tz=tz)` will get you the same thing as `__new__(int64values, tz=tz)`, but the same is _not_ true with M8 values.  I find that really helpful.",
        "createdAt" : "2018-11-02T14:58:49Z",
        "updatedAt" : "2018-11-02T14:58:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "63c2d2d8-2a28-4b56-bcc2-236435bafb07",
        "parentId" : "765228aa-d1ae-4bd1-ac00-169664aa78bd",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "You are referring to the timezone difference you mentioned earlier?\r\n\r\nI personally find that very confusing that `DatetimeArray(self._data, tz=..)` and `DatetimeArray(self._data.view(int), tz=..)` do not give the same. To the extent possible, I would not repeat this pattern for our Arrays? \r\n(of course, in the DatetimeIndex constructor we cannot just change it, unless we want to deprecate that first).",
        "createdAt" : "2018-11-05T09:22:51Z",
        "updatedAt" : "2018-11-05T09:22:52Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0f02db0b09775c69d972ae8e25c2b630cef54f5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +587,591 @@\n        # No conversion since timestamps are all UTC to begin with\n        return self._simple_new(self.asi8, tz=tz, freq=self.freq)\n\n    def tz_localize(self, tz, ambiguous='raise', nonexistent='raise',"
  },
  {
    "id" : "71e42386-e657-4d0e-8305-5bc439dd63bf",
    "prId" : 23502,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23502#pullrequestreview-171415751",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "649619f4-5a67-4c8b-aad7-1c17cce05833",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Comment in previous line should be removed, will update",
        "createdAt" : "2018-11-05T05:13:36Z",
        "updatedAt" : "2018-11-08T23:58:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "59b7064d5ffa495deeb8605eed9569d1d8a9a34a",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +118,122 @@        else:\n            if isinstance(other, list):\n                try:\n                    other = type(self)(other)\n                except ValueError:"
  },
  {
    "id" : "47f0494f-2327-420b-a010-0fdbc67d0f31",
    "prId" : 23502,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23502#pullrequestreview-172571377",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f45ad7da-fb14-4afb-ac59-f6a24a7a13cf",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`isna(other)` ?",
        "createdAt" : "2018-11-05T11:06:05Z",
        "updatedAt" : "2018-11-08T23:58:49Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "718d30aa-af0a-4367-8b8d-f9525ff20c45",
        "parentId" : "f45ad7da-fb14-4afb-ac59-f6a24a7a13cf",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "It turns out that `isna(DatetimeArray)` doesn't work at the moment.  I want to keep the footprint of these PRs contained as long as possible, so chose to avoid changing it for now.",
        "createdAt" : "2018-11-05T17:58:04Z",
        "updatedAt" : "2018-11-08T23:58:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7db8d62d-b0b8-4baf-8aa0-60c2b76de29f",
        "parentId" : "f45ad7da-fb14-4afb-ac59-f6a24a7a13cf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But you are adding the `isna` method in this PR (to DatetimelikeArrayMixin above), shouldn't it then work?",
        "createdAt" : "2018-11-07T10:06:43Z",
        "updatedAt" : "2018-11-08T23:58:49Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "cb1b0d83-98e0-4453-951c-ca8d96b6d085",
        "parentId" : "f45ad7da-fb14-4afb-ac59-f6a24a7a13cf",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "`isna(other)` may not work until `DatetimelikeArray(mixin)` inherits from ExtensionArray. I suspect there's a check in `isna` that only dispatches for EAs.",
        "createdAt" : "2018-11-07T14:32:32Z",
        "updatedAt" : "2018-11-08T23:58:49Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "a20cc3a2-50a6-42e8-8b64-3511e27abbfa",
        "parentId" : "f45ad7da-fb14-4afb-ac59-f6a24a7a13cf",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> isna(other) may not work until `DatetimelikeArray(mixin)` inherits from ExtensionArray. I suspect there's a check in `isna` that only dispatches for EAs.\r\n\r\nGenerally right.  The check also catches a couple other things.",
        "createdAt" : "2018-11-07T16:15:44Z",
        "updatedAt" : "2018-11-08T23:58:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "59b7064d5ffa495deeb8605eed9569d1d8a9a34a",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +141,145 @@                    other = type(self)(other)\n                result = meth(self, other)\n                o_mask = other._isnan\n\n            result = com.values_from_object(result)"
  },
  {
    "id" : "9e8507cc-8473-45af-aad8-cfc3b3b12a36",
    "prId" : 23502,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23502#pullrequestreview-173202072",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4f01206-36df-432c-a744-3c8d25aa0885",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Are there tests in here that need this?",
        "createdAt" : "2018-11-07T09:49:04Z",
        "updatedAt" : "2018-11-08T23:58:49Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "128b8b13-75f1-4d91-901e-45fc87ec78b8",
        "parentId" : "f4f01206-36df-432c-a744-3c8d25aa0885",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Do we eventually want this on DatetimelikeArray (the most base class) so that all the arrays inherit the same value? It looks like PeriodArray doesn't define it or `__array_ufunc__` yet (there's an open issue IIRC).\r\n\r\nI don't see any tests between `op(ndarray, datetimearray)`, but I may be missing them.",
        "createdAt" : "2018-11-07T14:37:59Z",
        "updatedAt" : "2018-11-08T23:58:49Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "611b9aef-29ca-4b06-8c8f-4b8f22eeb1b5",
        "parentId" : "f4f01206-36df-432c-a744-3c8d25aa0885",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> I don't see any tests between op(ndarray, datetimearray), but I may be missing them.\r\n\r\n`tests.arrays.test_datetimes.test_cmp_dt64_arraylike_tznaive`.  The fact that it isn't obvious suggests it can be made more clear.  I'll see what I can do.",
        "createdAt" : "2018-11-07T16:24:48Z",
        "updatedAt" : "2018-11-08T23:58:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "93f49cbe-2eed-4888-b156-1afe78ad801c",
        "parentId" : "f4f01206-36df-432c-a744-3c8d25aa0885",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Or I just can't reed well. Looks good.",
        "createdAt" : "2018-11-08T22:27:39Z",
        "updatedAt" : "2018-11-08T23:58:49Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "59b7064d5ffa495deeb8605eed9569d1d8a9a34a",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +177,181 @@\n    # ensure that operations with numpy arrays defer to our implementation\n    __array_priority__ = 1000\n\n    # -----------------------------------------------------------------"
  },
  {
    "id" : "a4e2be50-8edb-409c-9f22-e1c7852eff62",
    "prId" : 23524,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23524#pullrequestreview-171851088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e04388c-29ed-498b-bf57-3c55a6a642a5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can .astype(dtype) if not None, then coerce to ndarray",
        "createdAt" : "2018-11-06T01:59:56Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "91864f26-daf8-4c53-8158-05cb2634d125",
        "parentId" : "8e04388c-29ed-498b-bf57-3c55a6a642a5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "That makes sense.  For the time being I think matching the `Index.__array__` behavior makes sense (in part because this is overriding `Index.__array__` on `DatetimeIndex`",
        "createdAt" : "2018-11-06T03:04:59Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "81eec240-4924-4b48-bb15-fb6ea11e98c2",
        "parentId" : "8e04388c-29ed-498b-bf57-3c55a6a642a5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sgtm. I *think* we are generally ignoring dtyep here anyhow (and AFAIR dtype is None always), unless explicity passed (llke you did)",
        "createdAt" : "2018-11-06T03:10:30Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7f5cd66bea1266994f93d0ef93d3ef434a0fdf",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +395,399 @@        elif is_int64_dtype(dtype):\n            return self.asi8\n\n        # TODO: warn that conversion may be lossy?\n        return self._data.view(np.ndarray)  # follow Index.__array__"
  },
  {
    "id" : "7c1625e2-6aee-4bb4-98fa-f36a3194f4c6",
    "prId" : 23524,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23524#pullrequestreview-172101614",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eca43add-eb92-4547-b908-f5518b465a9a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this actually tested? use ``is_int64_dtype`` here",
        "createdAt" : "2018-11-06T03:40:29Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "03c7c213-e0f0-4a68-ba53-a2219935df50",
        "parentId" : "eca43add-eb92-4547-b908-f5518b465a9a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "it is now, and done.",
        "createdAt" : "2018-11-06T16:14:46Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7f5cd66bea1266994f93d0ef93d3ef434a0fdf",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +394,398 @@            return np.array(list(self), dtype=object)\n        elif is_int64_dtype(dtype):\n            return self.asi8\n\n        # TODO: warn that conversion may be lossy?"
  },
  {
    "id" : "b868e1e1-7aad-445a-9291-ed9134693f1b",
    "prId" : 23524,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23524#pullrequestreview-172951141",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fbfb472-73df-43c2-ae66-b22c4f18e32d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "am a little bit hesistant to make this change as we should make this more generally rather than piecemeal (e.g. not just for DTI), but for all Index types.",
        "createdAt" : "2018-11-07T14:01:44Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ea316622-3d0b-4612-8c0b-303b74cbeade",
        "parentId" : "6fbfb472-73df-43c2-ae66-b22c4f18e32d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think you're right that we do need to take a close look at all of the `__array__` methods (also `view` and `astype`), and we will as the DTA/TDA sequence of PRs progresses.  Most of that is out of scope for this PR.",
        "createdAt" : "2018-11-07T16:07:43Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d0eee205-23d5-4705-a709-9bb73b0978e2",
        "parentId" : "6fbfb472-73df-43c2-ae66-b22c4f18e32d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback Note that this is not Index, but Array. Index is correctly converting to M8[ns], while on Array it is currently actually giving object dtype, which I would say is a bug.\r\n\r\nBut you are right that this should be fixed for all Array classes",
        "createdAt" : "2018-11-07T18:03:48Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f04f85ab-5b70-4f87-ae32-f8521da24859",
        "parentId" : "6fbfb472-73df-43c2-ae66-b22c4f18e32d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I guess ok to do here. Can you create an issue to test / resolve this generally. Its not great that it works for one subclass but not the others.",
        "createdAt" : "2018-11-08T13:22:45Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7f5cd66bea1266994f93d0ef93d3ef434a0fdf",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +397,401 @@\n        # TODO: warn that conversion may be lossy?\n        return self._data.view(np.ndarray)  # follow Index.__array__\n\n    def __iter__(self):"
  },
  {
    "id" : "310d9f15-3588-4b17-9087-dc203fac79d0",
    "prId" : 23524,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23524#pullrequestreview-173035919",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7993c7cf-f8df-464d-85f6-191299d8bca2",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Other question: what is the `.view(np.ndarray)` part doing if it is already an array? Can we remove it?",
        "createdAt" : "2018-11-08T15:01:39Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "453bfb7e-9bce-4d63-821f-e9874ab0a6d2",
        "parentId" : "7993c7cf-f8df-464d-85f6-191299d8bca2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "It can probably be removed; this is taken directly from the `Index.__array__` implementation, so I think the maybe-removing this should be done at the same time those methods are overhauled (ill be opening an Issue shortly)",
        "createdAt" : "2018-11-08T16:05:58Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7f5cd66bea1266994f93d0ef93d3ef434a0fdf",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +397,401 @@\n        # TODO: warn that conversion may be lossy?\n        return self._data.view(np.ndarray)  # follow Index.__array__\n\n    def __iter__(self):"
  },
  {
    "id" : "1d4b010c-a68a-4e43-b29b-18feeeacb028",
    "prId" : 23524,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23524#pullrequestreview-173420686",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3856e33-1274-4fc1-ac0e-4fe098828bae",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think we can remove this elif branch. Numpy will afterwards convert the M8[ns] data to int, and in that way ensure the semantics of `np.asarray` regarding copy/no copy is followed.",
        "createdAt" : "2018-11-09T09:57:44Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "89b5102c-5e34-46bc-8087-cf3dd67c7887",
        "parentId" : "f3856e33-1274-4fc1-ac0e-4fe098828bae",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jbrockmendel I opened https://github.com/pandas-dev/pandas/pull/23593, a PR doing the `__array__` for all datetimelike EAs, not only DatetimeArray (but so there is a bit of overlap with this PR)",
        "createdAt" : "2018-11-09T10:54:31Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "297e4c7f-c0ee-46dd-a262-8900e2bdfefc",
        "parentId" : "f3856e33-1274-4fc1-ac0e-4fe098828bae",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Great, I'll take a look at 23593.",
        "createdAt" : "2018-11-09T14:00:03Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7f5cd66bea1266994f93d0ef93d3ef434a0fdf",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +394,398 @@            return np.array(list(self), dtype=object)\n        elif is_int64_dtype(dtype):\n            return self.asi8\n\n        # TODO: warn that conversion may be lossy?"
  },
  {
    "id" : "32bcf85d-b252-4f14-8454-94818272122a",
    "prId" : 23539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23539#pullrequestreview-172524333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5bae80bf-b31f-405f-be70-e988b41c572b",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Just curious, why can we drop the `if`-logic?",
        "createdAt" : "2018-11-07T05:50:12Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "bd338fc4-af0b-4d94-bd74-df65da6f1fe6",
        "parentId" : "5bae80bf-b31f-405f-be70-e988b41c572b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "because it is unnecessary.  if `inferred` is `None`, then we're setting `result.freq=None` which is what it should be anyway.  It isn't a big deal, but these 4 lines are repeated 4 times and after looking at these for weeks I find it an eyesore.",
        "createdAt" : "2018-11-07T14:50:00Z",
        "updatedAt" : "2018-11-11T18:58:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "898444f17553dbb7ed012fbdfd49f1b2864f9466",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +235,239 @@        result = cls._simple_new(values, freq=freq, tz=tz)\n        if freq_infer:\n            result.freq = to_offset(result.inferred_freq)\n\n        # NB: Among other things not yet ported from the DatetimeIndex"
  },
  {
    "id" : "c83738c6-7e67-4e63-8709-a5b0b02592fb",
    "prId" : 23675,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23675#pullrequestreview-176104840",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b35f2d6a-8af2-4468-a0a0-006b21eb87c9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you document the allow_object param here",
        "createdAt" : "2018-11-18T17:50:33Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6a32887a-c396-4881-a862-3876821a85f2",
        "parentId" : "b35f2d6a-8af2-4468-a0a0-006b21eb87c9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sure",
        "createdAt" : "2018-11-18T20:34:01Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "03d5b353bc367cc06417716c58d40f990d3eee7d",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1514,1518 @@    data : np.ndarray[object]\n    dayfirst : bool\n    yearfirst : bool\n    utc : bool, default False\n        Whether to convert timezone-aware timestamps to UTC"
  },
  {
    "id" : "412f63ea-479f-4dff-9ea7-431910845489",
    "prId" : 23675,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23675#pullrequestreview-180579264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85b81da3-da04-4ac4-9fd2-7e67e75fbaaa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why this addtiional level of try/except here? wouldn't this just raise anyhow?",
        "createdAt" : "2018-11-27T01:58:43Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1fe65aa7-70d7-4eec-b514-89b46e8c74d3",
        "parentId" : "85b81da3-da04-4ac4-9fd2-7e67e75fbaaa",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Presumably to re-raise the original exception if the fallback fails.  This is the existing behavior.\r\n\r\nI think @mroeschke and I are vaguely planning to revisit this before long and combine datetime_to_datetime64 into array_to_datetime, fixing the many idiosyncracies of these calls.",
        "createdAt" : "2018-11-27T02:04:38Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "4f6f7c7f-e58f-4de2-aac3-45cd04a35a7f",
        "parentId" : "85b81da3-da04-4ac4-9fd2-7e67e75fbaaa",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe i wasn't clear. I think you can simply remove the try/except and it will work the way it is now. (and same below).",
        "createdAt" : "2018-11-27T02:07:02Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "41076246-f3cc-460f-be87-05dc47407d86",
        "parentId" : "85b81da3-da04-4ac4-9fd2-7e67e75fbaaa",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "If the claim you're making is that it will raise under the same conditions, I agree.  If the claim is that it will raise _the same exception_, I don't.  i.e. if the `conversion.datetime_to_datetime64` were not inside its own try/except, then we could end up getting a TypeError in cases where we currently get a ValueError",
        "createdAt" : "2018-11-27T02:11:25Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "36fa11ff-0715-4a49-a7df-9d15a8eb6de6",
        "parentId" : "85b81da3-da04-4ac4-9fd2-7e67e75fbaaa",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "really? i don't think that is actually possible. the original exception is re-raised here.",
        "createdAt" : "2018-11-27T02:13:17Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "68323320-754e-4f1e-a10f-59b77436cb9d",
        "parentId" : "85b81da3-da04-4ac4-9fd2-7e67e75fbaaa",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> the original exception is re-raised here\r\n\r\nThat's my point.  We are definitely not communicating well.  I'm going to take that as a queue to step away from the desk for a few minutes.",
        "createdAt" : "2018-11-27T02:19:15Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "fde4e590-ac30-47c7-9327-480b5e4dac3f",
        "parentId" : "85b81da3-da04-4ac4-9fd2-7e67e75fbaaa",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "OK, trying again.\r\n\r\nMy understanding of your suggestion is that you want to change:\r\n\r\n```\r\ntry:\r\n    result, inferred_tz = array_to_datetime(...)\r\nexcept ValueError as e:\r\n    try:\r\n        result, inferred_tz = datetime_to_datetime64(...)\r\n        return [...]\r\n    except (ValueError, TypeError):\r\n        raise e\r\n```\r\n\r\nto:\r\n\r\n```\r\ntry:\r\n    result, inferred_tz = array_to_datetime(...)\r\nexcept ValueError as e:\r\n    result, inferred_tz = datetime_to_datetime64(...)\r\n    return [...]\r\n```\r\n\r\nMy claim is that if we did that, then in cases where `datetime_to_datetime64` raises a `TypeError`, we would not re-raise `e` like we do in the status quo.",
        "createdAt" : "2018-11-27T18:56:47Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b155e74b-0824-4ba8-a5b3-6194ed4ef23b",
        "parentId" : "85b81da3-da04-4ac4-9fd2-7e67e75fbaaa",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@jreback did this resolve the miscommunication?",
        "createdAt" : "2018-11-28T23:51:42Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0de91371-e318-4111-8a76-f1c5ea6d329b",
        "parentId" : "85b81da3-da04-4ac4-9fd2-7e67e75fbaaa",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "again if datetime_to_datetime64 raises\r\nwon’t it just bubble up which is the same thing as a reraise here",
        "createdAt" : "2018-11-28T23:57:39Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "df9daa5d-94b7-46a0-95b6-d27c7ec3ab9a",
        "parentId" : "85b81da3-da04-4ac4-9fd2-7e67e75fbaaa",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "That sounds like a \"no\" on the resolving miscommunication.  Did I at least accurately summarize your suggested change?",
        "createdAt" : "2018-11-29T00:05:31Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "829eeaa6-1106-4444-b7bd-fc60ae898c04",
        "parentId" : "85b81da3-da04-4ac4-9fd2-7e67e75fbaaa",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "@jbrockmendel is correct here.\r\n\r\nside-note, we could clarify all this with python-3 style\r\n\r\n```python\r\nexcept (ValueError, TypeError) as e2:\r\n    raise e2 from e\r\n```\r\n\r\nor six's https://pythonhosted.org/six/#six.raise_from, but it's probably just easier to wait until next month.",
        "createdAt" : "2018-12-01T12:17:35Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "87b98557-787c-4890-a32f-3478035e5640",
        "parentId" : "85b81da3-da04-4ac4-9fd2-7e67e75fbaaa",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "> That sounds like a \"no\" on the resolving miscommunication. Did I at least accurately summarize your suggested change?\r\n\r\nnot resolved, but I see from @TomAugspurger which what i was getting at. i guess ok for now.",
        "createdAt" : "2018-12-02T21:44:53Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "03d5b353bc367cc06417716c58d40f990d3eee7d",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +1554,1558 @@            #  return them as i8 to distinguish from wall times\n            return values.view('i8'), tz_parsed\n        except (ValueError, TypeError):\n            raise e\n"
  },
  {
    "id" : "fdb5d5ca-7c7e-4c0e-b0d3-9a0fa277efde",
    "prId" : 23675,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23675#pullrequestreview-180530080",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f22d43ca-9e35-4eea-9e33-56ec6eacdd82",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Just to verify: getting an you'll get an `np.int64`-dtype `result` if and only if `inferred_tz` is not None?",
        "createdAt" : "2018-12-01T12:24:14Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f780f62c-d176-414b-ae16-788a96ebceef",
        "parentId" : "f22d43ca-9e35-4eea-9e33-56ec6eacdd82",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "correct",
        "createdAt" : "2018-12-01T16:48:39Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "03d5b353bc367cc06417716c58d40f990d3eee7d",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1525,1529 @@    -------\n    result : ndarray\n        np.int64 dtype if returned values represent UTC timestamps\n        np.datetime64[ns] if returned values represent wall times\n        object if mixed timezones"
  },
  {
    "id" : "1105254a-fbf7-4fcc-b990-b469deba93dd",
    "prId" : 23675,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23675#pullrequestreview-180591374",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa577629-ee45-4b63-84d0-7c14567e536b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe just remove the else and do the ``raise TypeError(result)`` at the end ",
        "createdAt" : "2018-12-02T21:47:24Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f25f3fde-6422-46e6-b82a-b9db3c6141ea",
        "parentId" : "fa577629-ee45-4b63-84d0-7c14567e536b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think its worth distinguishing between hittable TypeError and defensive TypeError",
        "createdAt" : "2018-12-02T22:13:05Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "38ab0492-4a4d-4d04-a0ee-79712ad3c69f",
        "parentId" : "fa577629-ee45-4b63-84d0-7c14567e536b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you comment more then.",
        "createdAt" : "2018-12-03T00:32:02Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "14fa366b-78d5-4d99-8de7-d0d97de0036b",
        "parentId" : "fa577629-ee45-4b63-84d0-7c14567e536b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sure",
        "createdAt" : "2018-12-03T01:27:03Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "03d5b353bc367cc06417716c58d40f990d3eee7d",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +1574,1578 @@        if allow_object:\n            return result, tz_parsed\n        raise TypeError(result)\n    else:  # pragma: no cover\n        # GH#23675 this TypeError should never be hit, whereas the TypeError"
  },
  {
    "id" : "91b372fb-17ac-4863-9693-bc7100b1a02c",
    "prId" : 23675,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23675#pullrequestreview-180591643",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f56c5a71-4829-4d95-8220-c08c0692e0b7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is not more clear.\r\n\r\nCan you put the cases where each of these would be hit",
        "createdAt" : "2018-12-03T01:29:55Z",
        "updatedAt" : "2018-12-03T01:33:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "03d5b353bc367cc06417716c58d40f990d3eee7d",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +1576,1580 @@        raise TypeError(result)\n    else:  # pragma: no cover\n        # GH#23675 this TypeError should never be hit, whereas the TypeError\n        #  in the object-dtype branch above is reachable.\n        raise TypeError(result)"
  },
  {
    "id" : "95f88960-0c4e-4008-a579-4bd19929c09a",
    "prId" : 23681,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23681#pullrequestreview-175140382",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a1035bb-6955-4dbf-a229-31368aa3fcf4",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Should this be done immediately? A `Series[datetime64[ns, tz]]` will not have a `.tz` attribute.\r\n\r\nOn this branch:\r\n\r\n```python\r\nIn [16]: ser = pd.Series(pd.date_range('2017', periods=4, tz='UTC'))\r\n\r\nIn [17]: pd.core.arrays.DatetimeArrayMixin(ser).tz\r\n\r\nIn [18]: pd.core.arrays.DatetimeArrayMixin(ser._values).tz\r\nOut[18]: <UTC>\r\n```\r\n\r\nI suspect we're never hitting this case (passing a series but not a dtype or `tz`), but fixing it now may save some future debugging.",
        "createdAt" : "2018-11-14T21:33:26Z",
        "updatedAt" : "2018-11-15T19:33:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "101db84b-1d66-41ec-a0be-db4baca88a95",
        "parentId" : "8a1035bb-6955-4dbf-a229-31368aa3fcf4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Good catch",
        "createdAt" : "2018-11-15T00:12:48Z",
        "updatedAt" : "2018-11-15T19:33:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddb1662bc226bb663680e3184d8e70abf511f17d",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +219,223 @@        tz = dtl.validate_tz_from_dtype(dtype, tz)\n\n        if isinstance(values, ABCSeries):\n            # extract to ndarray or DatetimeIndex\n            values = values._values"
  },
  {
    "id" : "513ccd60-8b2e-4faf-ae69-2f1494cdcd0a",
    "prId" : 23990,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23990#pullrequestreview-180567939",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8561ceb5-08e5-45cd-a87a-0f635840f60d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is this not cached?",
        "createdAt" : "2018-11-29T20:22:31Z",
        "updatedAt" : "2018-12-03T22:25:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d48d4ae0-f7cd-4d33-868a-dbd7d9059107",
        "parentId" : "8561ceb5-08e5-45cd-a87a-0f635840f60d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Very strange behavior I couldn't figure out.\r\n\r\n\r\n```python\r\nIn [13]: idx = pd.DatetimeIndex(['2000']).tz_localize(\"UTC\")\r\n\r\nIn [14]: result = idx.tz_convert(\"US/Central\")\r\n\r\nIn [15]: result\r\nOut[15]: DatetimeIndex(['1999-12-31 18:00:00-06:00'], dtype='datetime64[ns, UTC]', freq=None)\r\n\r\nIn [16]: result.tz\r\nOut[16]: <DstTzInfo 'US/Central' LMT-1 day, 18:09:00 STD>\r\n```\r\n\r\nI really don't know why, but that only occurred when the tz was cached.",
        "createdAt" : "2018-11-29T20:34:22Z",
        "updatedAt" : "2018-12-03T22:25:06Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "967d4025-4989-496a-9a5e-dc77dca989a7",
        "parentId" : "8561ceb5-08e5-45cd-a87a-0f635840f60d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right the tz itself can change depending on what date is being localized",
        "createdAt" : "2018-12-02T16:23:28Z",
        "updatedAt" : "2018-12-03T22:25:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cde369f6e87c093a592766226f3a3db4c7cd846",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +334,338 @@        return lambda x: Timestamp(x, freq=self.freq, tz=self.tz)\n\n    @property\n    def dtype(self):\n        if self.tz is None:"
  },
  {
    "id" : "12d723a8-a7c8-40a4-9e57-c642ed251abf",
    "prId" : 24024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24024#pullrequestreview-184490516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bacfdc77-987a-4cb9-98ed-eaa2108bf029",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is .array defined on an Index?",
        "createdAt" : "2018-12-13T01:08:53Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ad5f6002-1b60-4558-8501-53e73f0e1baa",
        "parentId" : "bacfdc77-987a-4cb9-98ed-eaa2108bf029",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yep. Same return value as `Series`.",
        "createdAt" : "2018-12-13T03:33:21Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "2436214219fc116239640889715c9bc6575f571b",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +150,154 @@                self._assert_tzawareness_compat(other)\n                if isinstance(other, (ABCIndexClass, ABCSeries)):\n                    other = other.array\n\n                if (is_datetime64_dtype(other) and"
  },
  {
    "id" : "a092b536-6539-46cf-b074-32721b597a6f",
    "prId" : 24024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24024#pullrequestreview-184490998",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcede4d3-c29a-47d6-a14d-a7ff89c0d28e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is the asi8 check needed?",
        "createdAt" : "2018-12-13T01:09:27Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7b5271dc-26c1-4290-9b44-a0613bb32ea8",
        "parentId" : "bcede4d3-c29a-47d6-a14d-a7ff89c0d28e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Else a datetime64[ns] ndarray would not be boxed in a DatetimeArray, and things like `other._isnan` would fail.",
        "createdAt" : "2018-12-13T03:36:33Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "2436214219fc116239640889715c9bc6575f571b",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +154,158 @@                if (is_datetime64_dtype(other) and\n                        not is_datetime64_ns_dtype(other) or\n                        not hasattr(other, 'asi8')):\n                    # e.g. other.dtype == 'datetime64[s]'\n                    # or an object-dtype ndarray"
  },
  {
    "id" : "afea4d3b-c04a-44c0-8359-df5cd3b9c54f",
    "prId" : 24024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24024#pullrequestreview-184645244",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bad75f3-d837-4252-9ca8-dd7f8a6e7e67",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "don't we have another PR for this?",
        "createdAt" : "2018-12-13T01:14:00Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3cc032fc-e9b8-4b10-9b3c-9f539d7c4636",
        "parentId" : "8bad75f3-d837-4252-9ca8-dd7f8a6e7e67",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Possibly https://github.com/pandas-dev/pandas/pull/23593/files?",
        "createdAt" : "2018-12-13T03:46:39Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "679170b0-1b70-453c-9abd-3c459d72bbd9",
        "parentId" : "8bad75f3-d837-4252-9ca8-dd7f8a6e7e67",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right ok",
        "createdAt" : "2018-12-13T12:52:02Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2436214219fc116239640889715c9bc6575f571b",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +530,534 @@            return self.asi8\n\n        return self._data\n\n    def __iter__(self):"
  },
  {
    "id" : "13fe5e7a-7792-442f-b87f-258568639344",
    "prId" : 24024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24024#pullrequestreview-184768050",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb04efe9-dba4-487d-a262-d77d8b23d3df",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Time to rename DatetimeArrayMixin to DatetimeArray ?",
        "createdAt" : "2018-12-13T15:31:29Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "314cf5ce-8a37-4694-9b68-25f6ea897442",
        "parentId" : "cb04efe9-dba4-487d-a262-d77d8b23d3df",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yes, but as a followup. https://github.com/pandas-dev/pandas/issues/24231",
        "createdAt" : "2018-12-13T16:20:24Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f88cb656-023d-4d1b-977a-0427b628d873",
        "parentId" : "cb04efe9-dba4-487d-a262-d77d8b23d3df",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Just out of interest, why not here? (it seems like 'an easy one')",
        "createdAt" : "2018-12-13T16:24:42Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b6218c9a-286e-4594-8303-204d71b9ad80",
        "parentId" : "cb04efe9-dba4-487d-a262-d77d8b23d3df",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Just for ease of review, to limit extraneous changes in the diff.\r\n\r\nBut I'm perfectly happy to get a +1 one from everyone on the DatetimeArrayMixin version, then do a big find / replace to remove the Mixin suffix.",
        "createdAt" : "2018-12-13T17:02:00Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "2436214219fc116239640889715c9bc6575f571b",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +179,183 @@\nclass DatetimeArrayMixin(dtl.DatetimeLikeArrayMixin,\n                         dtl.TimelikeOps,\n                         dtl.DatelikeOps):\n    \"\"\""
  },
  {
    "id" : "7bcc6b55-f3a1-4f3d-9f2e-3c593697fffe",
    "prId" : 24024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24024#pullrequestreview-186322088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8656cc39-1af7-49c1-9713-d7969844e10d",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Why is `tz` not a keyword? Because that is included in dtype? \r\nFor me, it feels logical to have here the attributes of the array as keywords (that is also done in PeriodArray I think where freq is part of the dtype)",
        "createdAt" : "2018-12-13T15:32:35Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a8f26cd8-c3d1-48cd-a72b-7ba2b2dddfac",
        "parentId" : "8656cc39-1af7-49c1-9713-d7969844e10d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Not having `tz` in the `__init__` allows us to share a signature across DatetimeArray, TimedetlaArray, and PeriodArray. We're *close* to being able to share an implementation.\r\n\r\nSince `tz` would be redundant with `dtype`, I found it easier to be strict and just allow dtype.\r\n\r\nFor PeriodArray, `freq` is actually redundant with `dtype`, but `freq` is already there for not having to re-infer for DTA and TDA, so it's probably best to support it.",
        "createdAt" : "2018-12-13T16:22:21Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "bd532e4b-2c66-4d7e-8018-06104d58d53b",
        "parentId" : "8656cc39-1af7-49c1-9713-d7969844e10d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you point to an example where it allows code sharing? (in the arithmetic code?) \r\n(as to me, it feels a bit as code smell to need the dtype here, which you actually don't need, other than to carry the attribute)",
        "createdAt" : "2018-12-13T16:27:17Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "3609f29f-fe77-4a1a-b2d9-bf3e96cdf884",
        "parentId" : "8656cc39-1af7-49c1-9713-d7969844e10d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "(didn't look in detail, but personally, I would rather consider having a separate constructor (like we now have `_simple_new`) that allows this code sharing. That would also make it explicit in the code that it is done that way, and keep the init more straightforward)",
        "createdAt" : "2018-12-13T16:29:19Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "5700c00c-7043-4a49-ae94-37744127de7b",
        "parentId" : "8656cc39-1af7-49c1-9713-d7969844e10d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> Can you point to an example where it allows code sharing?\r\n\r\nBy code-sharing I meant merging `DatetimeArray.__init__ and TimedeltaArray.__init__`, but we don't currently do this.\r\n\r\n> and keep the init more straightforward\r\n\r\nI think that whether DatetimeArray gets the (maybe) tz from `tz=` or `dtype=` is mainly irrelevant for the complexity of the `init`. We'll still need to validate that tz against the maybe tz on the `data`, and we'll still need to normalize the tz.",
        "createdAt" : "2018-12-13T17:08:14Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "29466e06-5bf0-4aaa-a267-a319138910a3",
        "parentId" : "8656cc39-1af7-49c1-9713-d7969844e10d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "And just to re-iterate, `tz` is not a \"direct\" property of the DatetimeArray. Rather it's a reference to `self.dtype.tz`, which is an Optional timezone. We don't set a `self._tz = tz` in the `__init__`.",
        "createdAt" : "2018-12-18T15:14:47Z",
        "updatedAt" : "2019-01-02T16:41:45Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "d12d9531-1972-4853-b30d-dc69488edd19",
        "parentId" : "8656cc39-1af7-49c1-9713-d7969844e10d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I agree with @TomAugspurger here, this is an internal constructor and should just accept dtype",
        "createdAt" : "2018-12-18T23:07:43Z",
        "updatedAt" : "2019-01-02T16:41:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2436214219fc116239640889715c9bc6575f571b",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +238,242 @@    _freq = None\n\n    def __init__(self, values, dtype=_NS_DTYPE, freq=None, copy=False):\n        if isinstance(values, (ABCSeries, ABCIndexClass)):\n            values = values._values"
  },
  {
    "id" : "ddba834f-6546-46ef-8d1e-7d2385002750",
    "prId" : 24024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24024#pullrequestreview-188791278",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "daa0d6c4-9331-4458-9ad7-9c1a079e5da6",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I was wondering if we still need this one. So it seems the only difference with the class init is that here a `tz` is allowed? \r\nIt is somehow needed for code sharing between the different datetime-like arrays?",
        "createdAt" : "2018-12-13T15:37:45Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c487b327-6423-4401-a765-ee1becc44613",
        "parentId" : "daa0d6c4-9331-4458-9ad7-9c1a079e5da6",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "IIRC I briefly looked into this. It should be possible with a bit of effort.",
        "createdAt" : "2018-12-13T16:25:32Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "1b8ac342-f7a0-4099-8d15-b08d9ebcc25e",
        "parentId" : "daa0d6c4-9331-4458-9ad7-9c1a079e5da6",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Consolidating this discussion into \r\nhttps://github.com/pandas-dev/pandas/pull/24024/files/e7505cd6424704122ff4fcfd438bef8b08085068#diff-b8a7b94d7e2ed5f7f109922e7bd3480c",
        "createdAt" : "2018-12-14T15:03:14Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "a6f8ab3a-cfd7-488d-8b4d-c461952b3033",
        "parentId" : "daa0d6c4-9331-4458-9ad7-9c1a079e5da6",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "(about `_simple_new`) the link you posted above seems to lead me nowhere (or problem of github with the huge PR) \r\n\r\nDo you know what it was linking to?",
        "createdAt" : "2019-01-02T19:09:36Z",
        "updatedAt" : "2019-01-02T19:09:37Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e490e020-4f51-4758-ab2f-f7a64cbfd12d",
        "parentId" : "daa0d6c4-9331-4458-9ad7-9c1a079e5da6",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "No, I'm not sure. I'm writing up an issue on the constructors now. I'll include this point.",
        "createdAt" : "2019-01-02T19:11:20Z",
        "updatedAt" : "2019-01-02T19:11:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "2436214219fc116239640889715c9bc6575f571b",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +308,312 @@\n    @classmethod\n    def _simple_new(cls, values, freq=None, tz=None):\n        \"\"\"\n        we require the we have a dtype compat for the values"
  },
  {
    "id" : "ea61d625-6feb-4113-aa7a-81e806263fcc",
    "prId" : 24024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24024#pullrequestreview-185133759",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4de33ea3-14a9-456a-9b28-2300eb57cdd3",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Bug: the `msg` string doesn't have a format placeholder.",
        "createdAt" : "2018-12-14T14:35:51Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "2436214219fc116239640889715c9bc6575f571b",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +279,283 @@                \" Got {} instead.\"\n            )\n            raise ValueError(msg.format(values.dtype))\n\n        dtype = pandas_dtype(dtype)"
  },
  {
    "id" : "7097b3ac-1ab6-4567-9acf-49a565d8d4d2",
    "prId" : 24056,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24056#pullrequestreview-180586356",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1aaa936-9350-42c5-b3ae-4cb29fe73725",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you have a test hit this?",
        "createdAt" : "2018-12-03T00:07:34Z",
        "updatedAt" : "2018-12-05T03:01:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8e95a3b6-afd6-4cf9-9002-151a6707b81b",
        "parentId" : "a1aaa936-9350-42c5-b3ae-4cb29fe73725",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yes",
        "createdAt" : "2018-12-03T00:12:17Z",
        "updatedAt" : "2018-12-05T03:01:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b02f5d17d585f34247561b18234eb2154bd9586",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +224,228 @@            if np.ndim(values) == 0:\n                # i.e. iterator\n                values = list(values)\n            values = np.array(values)\n"
  },
  {
    "id" : "9a6f8fe8-c9ff-4e38-9b0b-a7b02e579c0c",
    "prId" : 24074,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24074#pullrequestreview-181077497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3243b016-7317-473c-a776-2e01acbcf18e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there a reason you don't want to add ``verify_integrity`` here (as maybe ``_verify_integrity=True``)?",
        "createdAt" : "2018-12-04T02:38:02Z",
        "updatedAt" : "2018-12-05T20:35:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b23e359c-e87d-432d-97e9-35a37f010c6a",
        "parentId" : "3243b016-7317-473c-a776-2e01acbcf18e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We've deprecated the kwarg in the DatetimeIndex constructor to get rid of it.  In cases where verify_integrity is not needed, a different constructor (e.g. simple_new) should be used.",
        "createdAt" : "2018-12-04T03:17:13Z",
        "updatedAt" : "2018-12-05T20:35:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d7cb39462cacf909520e80a1e9da6d76405d164",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +216,220 @@            dayfirst=dayfirst, yearfirst=yearfirst, ambiguous=ambiguous)\n\n    @classmethod\n    def _from_sequence(cls, data, dtype=None, copy=False,\n                       tz=None, freq=None,"
  },
  {
    "id" : "2439153f-89cb-4a0e-a9cf-c24e7ee07c13",
    "prId" : 24074,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24074#pullrequestreview-181967132",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15b9ae82-2f36-4d22-bbc9-1a30f89a14ff",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this explicity handled?",
        "createdAt" : "2018-12-05T20:41:04Z",
        "updatedAt" : "2018-12-05T20:42:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e488a111-0606-4f6a-a4c1-e1bfc1311cc0",
        "parentId" : "15b9ae82-2f36-4d22-bbc9-1a30f89a14ff",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Via maybe_convert_dtype",
        "createdAt" : "2018-12-05T20:51:53Z",
        "updatedAt" : "2018-12-05T20:51:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d7cb39462cacf909520e80a1e9da6d76405d164",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +1455,1459 @@    Raises\n    ------\n    TypeError : PeriodDType data is passed\n    \"\"\"\n"
  },
  {
    "id" : "eb291d95-6a11-4167-bebb-0af2f628554c",
    "prId" : 24157,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24157#pullrequestreview-184795862",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a001f7b-a2b1-4ea0-9a7a-83c1cddbf80a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is the TODO case here, what is an example? do you have an xfailed test?",
        "createdAt" : "2018-12-13T13:10:25Z",
        "updatedAt" : "2018-12-13T19:50:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fdd440b0-5b36-4be2-962a-a9197e56fd9a",
        "parentId" : "0a001f7b-a2b1-4ea0-9a7a-83c1cddbf80a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "example is Categorical(TimedeltaIndex) where we should do another pass through maybe_convert_dtype in order to issue the FutureWarning.  I'm assuming there are other corner cases here that will need to be caught/tested.",
        "createdAt" : "2018-12-13T18:07:00Z",
        "updatedAt" : "2018-12-13T19:50:45Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b927925a14def3d3d8710493517d34ebe950c040",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1657,1661 @@    elif is_categorical_dtype(data):\n        # GH#18664 preserve tz in going DTI->Categorical->DTI\n        # TODO: cases where we need to do another pass through this func,\n        #  e.g. the categories are timedelta64s\n        data = data.categories.take(data.codes, fill_value=NaT)"
  },
  {
    "id" : "6f26c4ff-2815-44cf-a1c0-64bd07df222c",
    "prId" : 24190,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24190#pullrequestreview-183525053",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c04f20b-bd78-4e11-a5de-6282715af24b",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Same question here - does removing these not have any impact?",
        "createdAt" : "2018-12-11T05:59:13Z",
        "updatedAt" : "2018-12-11T19:55:41Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e43300b0-3144-4b05-8041-368c621caf7f",
        "parentId" : "0c04f20b-bd78-4e11-a5de-6282715af24b",
        "authorId" : "1dd7fcb4-603d-4ccc-b07d-33b53a355df3",
        "body" : "These were suggested by @datapythonista according to PR #24099. All ‘\\n’ should be removed. I am not sure if these ones are supposed to be left there?",
        "createdAt" : "2018-12-11T06:05:44Z",
        "updatedAt" : "2018-12-11T19:55:41Z",
        "lastEditedBy" : "1dd7fcb4-603d-4ccc-b07d-33b53a355df3",
        "tags" : [
        ]
      },
      {
        "id" : "cc7ff367-fcc1-4e0d-9d43-3259f4255b8b",
        "parentId" : "0c04f20b-bd78-4e11-a5de-6282715af24b",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "OK but then this would be in conflict with the above change, so should revert back there",
        "createdAt" : "2018-12-11T06:15:23Z",
        "updatedAt" : "2018-12-11T19:55:41Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b4ad052b-01ab-4b92-8fab-d862bc87436a",
        "parentId" : "0c04f20b-bd78-4e11-a5de-6282715af24b",
        "authorId" : "1dd7fcb4-603d-4ccc-b07d-33b53a355df3",
        "body" : "I can revert back this one, what about the one above “\\n{}\\n”?\r\n",
        "createdAt" : "2018-12-11T06:18:19Z",
        "updatedAt" : "2018-12-11T19:55:41Z",
        "lastEditedBy" : "1dd7fcb4-603d-4ccc-b07d-33b53a355df3",
        "tags" : [
        ]
      },
      {
        "id" : "2d6c8ca0-ba7a-4e56-9584-1d0637dc4e65",
        "parentId" : "0c04f20b-bd78-4e11-a5de-6282715af24b",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "IIUC you want to revert the `\\n{}\\n` as that's what was implemented with the PR you just linked to. You can then leave these as is",
        "createdAt" : "2018-12-11T06:22:45Z",
        "updatedAt" : "2018-12-11T19:55:41Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "386c95a1-3660-4806-af89-4d20c49274a7",
        "parentId" : "0c04f20b-bd78-4e11-a5de-6282715af24b",
        "authorId" : "1dd7fcb4-603d-4ccc-b07d-33b53a355df3",
        "body" : "Ok, I will revert those, thanks.",
        "createdAt" : "2018-12-11T06:26:19Z",
        "updatedAt" : "2018-12-11T19:55:41Z",
        "lastEditedBy" : "1dd7fcb4-603d-4ccc-b07d-33b53a355df3",
        "tags" : [
        ]
      }
    ],
    "commit" : "dad7f707229359a5976f2b1c6f1279c21b32f6a7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1071,1075 @@        return tslib.ints_to_pydatetime(timestamps, box=\"date\")\n\n    year = _field_accessor('year', 'Y', \"The year of the datetime.\")\n    month = _field_accessor('month', 'M',\n                            \"The month as January=1, December=12. \")"
  },
  {
    "id" : "a6ff1241-40b0-404b-94e4-b0f8a8662989",
    "prId" : 24405,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24405#pullrequestreview-187726691",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a5eda7a-869d-44c0-b50c-9abeacc75669",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why are you returning the DTA here? shouldn't the caller unwrap if so desired?",
        "createdAt" : "2018-12-24T18:27:23Z",
        "updatedAt" : "2018-12-28T19:28:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f866a169-cf00-445b-a677-8887bc96c88d",
        "parentId" : "0a5eda7a-869d-44c0-b50c-9abeacc75669",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'm pretty sure the comment above is meant to address that.  @TomAugspurger ?",
        "createdAt" : "2018-12-24T19:02:14Z",
        "updatedAt" : "2018-12-28T19:28:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e249e459-a997-4702-8ea9-7e65b8855390",
        "parentId" : "0a5eda7a-869d-44c0-b50c-9abeacc75669",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe so, but its not very clear. Further the change should actually be in the block if this is true. this is splitting logic.",
        "createdAt" : "2018-12-24T19:19:18Z",
        "updatedAt" : "2018-12-28T19:28:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "eac662b7a1eaf2c280ee91d9f9843963be4f106b",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +493,497 @@                # The astype in Block._astype expects this to return an\n                # ndarray, but we could maybe work around it there.\n                result = result._data\n            return result\n        elif is_datetime64tz_dtype(self.dtype) and is_dtype_equal(self.dtype,"
  },
  {
    "id" : "27b1727e-07fe-4d0b-bdd4-e50e3ef41fc8",
    "prId" : 24405,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24405#pullrequestreview-188331500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcdfa2fa-fc42-42a7-8255-ef49ae2e437a",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Just noticed... it'd be nice to leave a bunch of `TODO: Use super` for places like this.\r\n\r\nActually... I think Python2 will force us to make this changes when we switch inheritance to composition, since we won't be able to call the unbound method with a DatetimeIndex anymore (I think).",
        "createdAt" : "2018-12-28T17:06:01Z",
        "updatedAt" : "2018-12-28T19:28:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "eac662b7a1eaf2c280ee91d9f9843963be4f106b",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +502,506 @@        elif is_period_dtype(dtype):\n            return self.to_period(freq=dtype.freq)\n        return dtl.DatetimeLikeArrayMixin.astype(self, dtype, copy)\n\n    # ----------------------------------------------------------------"
  },
  {
    "id" : "a0cfed91-e042-4e68-b6f1-39ef23ac32d7",
    "prId" : 24517,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24517#pullrequestreview-188534485",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "699c6ab2-ac48-49a7-9ac3-14b5f090531e",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Hmm why was this necessary? Ideally everyone would reference `self.dtype.tz`",
        "createdAt" : "2018-12-31T20:44:05Z",
        "updatedAt" : "2018-12-31T23:39:48Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "8c1343f8-4d49-4d4a-b686-7e74f5ffbd3d",
        "parentId" : "699c6ab2-ac48-49a7-9ac3-14b5f090531e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think if you update the `tz` property defend below to be \r\n\r\n```python\r\n    @property\r\n    def tz(self):\r\n        \"\"\"\r\n        Return timezone, if any.\r\n\r\n        Returns\r\n        -------\r\n        datetime.tzinfo, pytz.tzinfo.BaseTZInfo, dateutil.tz.tz.tzfile, or None\r\n            Returns None when the array is tz-naive.\r\n        \"\"\"\r\n        # GH 18595\r\n        return getattr(self.dtype, 'tz', None)\r\n\r\n    @tz.setter\r\n    def tz(self, value):\r\n        # GH 3746: Prevent localizing or converting the index by setting tz\r\n        raise AttributeError(\"Cannot directly set timezone. Use tz_localize() \"\r\n                             \"or tz_convert() as appropriate\")\r\n```\r\n\r\nthen things will hopefully work.",
        "createdAt" : "2018-12-31T20:44:37Z",
        "updatedAt" : "2018-12-31T23:39:48Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1456b6aadf897045266fd95ddb75a60ab60ddcc7",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +407,411 @@        return self._dtype\n\n    @property\n    def tz(self):\n        \"\"\""
  },
  {
    "id" : "f96f0e7b-4193-4b44-86ba-65f59064c5be",
    "prId" : 24517,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24517#pullrequestreview-188543133",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "123a212d-86fb-43fd-bf5d-2860d194f16e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is it cheap to detect when you need to call maybe_get_tz & tz_standarize? ideally these could be called in the DatetimeTZDtype constructor / alternatively could have a dedicate constructor, \r\n\r\n``DateteimeTZDtype.construct_from_tztype``, and will pave the way for a unified dtype as well. ",
        "createdAt" : "2018-12-31T23:49:40Z",
        "updatedAt" : "2018-12-31T23:49:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1456b6aadf897045266fd95ddb75a60ab60ddcc7",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +232,236 @@        result._data = values\n        result._freq = freq\n        if tz is None:\n            dtype = _NS_DTYPE\n        else:"
  },
  {
    "id" : "1d9057f2-be50-4f34-b39b-b6d59495882d",
    "prId" : 24517,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24517#pullrequestreview-188559732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e63ae24-6260-489b-961b-465f2ccf1150",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is there any reason this uses the private attribute instead of the dtype property?",
        "createdAt" : "2019-01-01T13:24:19Z",
        "updatedAt" : "2019-01-01T13:24:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "affc1023-2d8d-4d23-8aa0-9e7b6be0ec54",
        "parentId" : "7e63ae24-6260-489b-961b-465f2ccf1150",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "No, feel free to change",
        "createdAt" : "2019-01-01T15:03:24Z",
        "updatedAt" : "2019-01-01T15:03:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1456b6aadf897045266fd95ddb75a60ab60ddcc7",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +418,422 @@        \"\"\"\n        # GH 18595\n        return getattr(self._dtype, \"tz\", None)\n\n    @tz.setter"
  },
  {
    "id" : "ed17e48a-3252-4bf1-8292-6b414a84b69a",
    "prId" : 24577,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24577#pullrequestreview-188888711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bb3a925-1fa4-4592-b344-9590d11ecef4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "isn't the conversion just (line 50)\r\n\r\n```\r\nIn [1]: from pandas._libs.tslibs import conversion\r\n\r\nIn [2]: ts = pd.Timestamp('20181001', tz='UTC')\r\n\r\nIn [3]: np.int64(conversion.pydt_to_i8(ts)).view('M8[ns]')\r\nOut[3]: numpy.datetime64('2018-10-01T00:00:00.000000000')\r\n\r\nIn [5]: ts.to_datetime64()\r\nOut[5]: numpy.datetime64('2018-10-01T00:00:00.000000000')\r\n```",
        "createdAt" : "2019-01-03T01:56:05Z",
        "updatedAt" : "2019-01-03T02:00:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "46ba2b8f-d986-46ca-a542-8695608d75c3",
        "parentId" : "4bb3a925-1fa4-4592-b344-9590d11ecef4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this routine should really just be in conversion.pyx",
        "createdAt" : "2019-01-03T01:59:53Z",
        "updatedAt" : "2019-01-03T02:00:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "efe62a94-58b4-4ec2-9b56-88ae91c501b6",
        "parentId" : "4bb3a925-1fa4-4592-b344-9590d11ecef4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I’m hoping we can do something clever see #24576.  Not sure we are internally consistent enough to do that yet though.",
        "createdAt" : "2019-01-03T02:02:19Z",
        "updatedAt" : "2019-01-03T02:02:19Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ebf812e1-1dac-444b-9396-fc06ab5b59cb",
        "parentId" : "4bb3a925-1fa4-4592-b344-9590d11ecef4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok",
        "createdAt" : "2019-01-03T02:24:39Z",
        "updatedAt" : "2019-01-03T02:24:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1793bbc380b143c3d81eae829b8125cace22ae69",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +35,39 @@\n\ndef _to_M8(key, tz=None):\n    \"\"\"\n    Timestamp-like => dt64"
  },
  {
    "id" : "1e3aa19e-7387-4fb3-b1f1-ea91ada626ee",
    "prId" : 24596,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24596#pullrequestreview-189117466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f68136f2-1b8c-47ae-bb54-a11e4fe322af",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "DatetimeArray does the \"right thing\" by default (returns an object-dtype array for tz-aware). No deprecation needed. ",
        "createdAt" : "2019-01-03T17:57:15Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f4fbde4472700525959dbb7255185e36155f21",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +525,529 @@\n    def __array__(self, dtype=None):\n        if is_object_dtype(dtype) or (dtype is None and self.tz):\n            return np.array(list(self), dtype=object)\n        elif is_int64_dtype(dtype):"
  },
  {
    "id" : "9e9e1efc-9dcb-4383-a209-0108a022f302",
    "prId" : 24686,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24686#pullrequestreview-191422438",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7ff149d-81e3-4344-95ec-0c51d3203671",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is it assumed that the caller is responsible for timezone normalization?",
        "createdAt" : "2019-01-09T19:01:12Z",
        "updatedAt" : "2019-01-09T22:35:17Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "7fad0a08-cbd9-4120-80c9-6418cce42b61",
        "parentId" : "c7ff149d-81e3-4344-95ec-0c51d3203671",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "By this I mean ensuring that the following have the same dtype\r\n\r\n```python\r\n\r\nIn [7]: idx = pd.date_range('2000', periods=12, tz=\"US/Central\")\r\n\r\nIn [8]: pd.arrays.DatetimeArray._simple_new(idx, dtype=idx.dtype).tz\r\nOut[8]: <DstTzInfo 'US/Central' LMT-1 day, 18:09:00 STD>\r\n\r\nIn [9]: pd.arrays.DatetimeArray._simple_new(idx, dtype=pd.DatetimeTZDtype(tz=idx[0].tz)).tz\r\nOut[9]: <DstTzInfo 'US/Central' LMT-1 day, 18:09:00 STD>\r\n```\r\n\r\nas written this may not be true (haven't checked)",
        "createdAt" : "2019-01-09T19:28:56Z",
        "updatedAt" : "2019-01-09T22:35:17Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "029ad3e7-541b-4c71-b10b-15bc3faa3523",
        "parentId" : "c7ff149d-81e3-4344-95ec-0c51d3203671",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yah, assuming at this point we've got valid dtype",
        "createdAt" : "2019-01-09T19:32:13Z",
        "updatedAt" : "2019-01-09T22:35:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "cdcf2763-63b9-4981-9939-8b51c799fed0",
        "parentId" : "c7ff149d-81e3-4344-95ec-0c51d3203671",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "should the timezones.tz_standardize just go in the Datetime64TZDType constructor?",
        "createdAt" : "2019-01-09T20:04:22Z",
        "updatedAt" : "2019-01-09T22:35:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "c4daa2fa-bb6b-45d4-8045-dae955bc6ca9",
        "parentId" : "c7ff149d-81e3-4344-95ec-0c51d3203671",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Just to be clear, this may be a non-issue. We may not have anywhere on master where we extract a scalar and build a new DatetimeTZDtype from that scalars tz.\r\n\r\n> should the timezones.tz_standardize just go in the Datetime64TZDType constructor?\r\n \r\nThat's a reasonable idea. AFAIK, DatetimeTZDtype is only used on arrays. I'm not sure what the value of a standalone DatetimeTZDtype with a non-normalized tz is.",
        "createdAt" : "2019-01-09T20:37:40Z",
        "updatedAt" : "2019-01-09T22:35:17Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f770ea12-c6a4-4344-ac52-1bb83e9c57bd",
        "parentId" : "c7ff149d-81e3-4344-95ec-0c51d3203671",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "https://github.com/pandas-dev/pandas/issues/24713",
        "createdAt" : "2019-01-10T21:26:58Z",
        "updatedAt" : "2019-01-10T21:26:59Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "f63e32d6cf68b5e1ddc9a3c03dfeb3763e54c289",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +337,341 @@        result._data = values\n        result._freq = freq\n        result._dtype = dtype\n        return result\n"
  },
  {
    "id" : "b3822ba0-0e3a-4566-b912-81c9957cbc18",
    "prId" : 24686,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24686#pullrequestreview-191007702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c83eb3c8-65b4-4700-a94e-57c108b9ebd4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "umm, shouldn't these *always* be i8?",
        "createdAt" : "2019-01-09T23:57:39Z",
        "updatedAt" : "2019-01-09T23:58:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "38de6293-1ec7-487b-954c-b5573a472451",
        "parentId" : "c83eb3c8-65b4-4700-a94e-57c108b9ebd4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "No.  they can be datetime64[ns]",
        "createdAt" : "2019-01-10T00:03:41Z",
        "updatedAt" : "2019-01-10T00:03:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "87f1a8ec-2977-4f8b-8c02-a8903b2e7d73",
        "parentId" : "c83eb3c8-65b4-4700-a94e-57c108b9ebd4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "*really*? this is really really strange to do this, we should have a single implementation.",
        "createdAt" : "2019-01-10T00:07:02Z",
        "updatedAt" : "2019-01-10T00:07:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7a49f84e-70eb-4dd7-a398-995bc432178f",
        "parentId" : "c83eb3c8-65b4-4700-a94e-57c108b9ebd4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Really really.  I don’t have the bandwidth to address this concern ATM.  Pls open an issue if you feel strongly about it.",
        "createdAt" : "2019-01-10T00:38:05Z",
        "updatedAt" : "2019-01-10T00:38:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f63e32d6cf68b5e1ddc9a3c03dfeb3763e54c289",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +331,335 @@    def _simple_new(cls, values, freq=None, dtype=_NS_DTYPE):\n        assert isinstance(values, np.ndarray)\n        if values.dtype == 'i8':\n            values = values.view(_NS_DTYPE)\n"
  },
  {
    "id" : "3996ac6e-e709-4e95-ab64-eb87b85e7d1f",
    "prId" : 24708,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24708#pullrequestreview-191274936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7212a7af-3568-4541-9245-a162bd987b06",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "IIRC this was for a mixed tz test. Verifying now, and will add a comment..",
        "createdAt" : "2019-01-10T15:44:02Z",
        "updatedAt" : "2019-01-11T12:59:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "6f93e61c-0fb5-4452-98f0-1b3e444bee89",
        "parentId" : "7212a7af-3568-4541-9245-a162bd987b06",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Sorry, not necessarily mixed. Just cases where a sequence of Timestamp objects w/ tz are passed.\r\n\r\n```python\r\nresult = Index([Timestamp('2011-01-01 10:00', tz='Asia/Tokyo')])\r\n```\r\n\r\nthat seems to extract the tz and extract the i8 `.value` from the timestamps.",
        "createdAt" : "2019-01-10T15:50:43Z",
        "updatedAt" : "2019-01-11T12:59:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "8332c40626f001577fa585f695cb1e93e05b6c38",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +1746,1750 @@            # want to treat the (now i8-valued) data as UTC timestamps,\n            # not wall times.\n            int_as_wall_time = False\n\n    # `data` may have originally been a Categorical[datetime64[ns, tz]],"
  },
  {
    "id" : "5aedd188-4f53-4da0-870b-b9b2907af73b",
    "prId" : 24708,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24708#pullrequestreview-191646084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "925c010d-f257-401b-a8e1-418f2a2a6a32",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "versionadded tag",
        "createdAt" : "2019-01-11T12:47:10Z",
        "updatedAt" : "2019-01-11T12:59:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "919841f2-260f-4391-a883-bbb9e180f76d",
        "parentId" : "925c010d-f257-401b-a8e1-418f2a2a6a32",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "this is a private function",
        "createdAt" : "2019-01-11T12:49:51Z",
        "updatedAt" : "2019-01-11T12:59:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "8332c40626f001577fa585f695cb1e93e05b6c38",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +1684,1688 @@        nanosecond-precision UNIX epoch (wall time in UTC).\n        This is used in DatetimeIndex.__init__ to deprecate the wall-time\n        behaviour.\n\n        ..versionadded:: 0.24.0"
  },
  {
    "id" : "35ad702b-c80a-4a1b-aad3-cea702caa4f7",
    "prId" : 27027,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27027#pullrequestreview-254058415",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a5e2a76-2ef4-487f-b3e5-c79ada856edc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this actually hit in the test suite? ",
        "createdAt" : "2019-06-25T14:34:33Z",
        "updatedAt" : "2019-06-27T20:28:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6d1ff615-5b2d-44d2-a410-0e1a63bd6e65",
        "parentId" : "4a5e2a76-2ef4-487f-b3e5-c79ada856edc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yes, plus a dedicated test is added by this PR.",
        "createdAt" : "2019-06-25T14:47:16Z",
        "updatedAt" : "2019-06-27T20:28:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f99a00a907f9bb114d6c1d7b5fda84e94671c00",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +310,314 @@            )\n            raise ValueError(msg.format(type(values).__name__))\n        if values.ndim != 1:\n            raise ValueError(\"Only 1-dimensional input arrays are supported.\")\n"
  },
  {
    "id" : "e7fe8f7d-f09f-4d2c-86ef-98a4776bf0c8",
    "prId" : 27088,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27088#pullrequestreview-255556428",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd574c67-2e76-4ee9-a1bb-f3c5d5b4749b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "of u feel like typing the args here would be great (or follow up done too)",
        "createdAt" : "2019-06-28T02:08:56Z",
        "updatedAt" : "2019-06-28T03:01:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e987c53e9185e455109f6cfc2cf0044908c4df1f",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +2136,2140 @@    is_not_none : argument that should not be None\n    freq : Tick, DateOffset, or None\n    tz : str, timezone object or None\n    ambiguous: str, localization behavior for ambiguous times\n    nonexistent: str, localization behavior for nonexistent times"
  },
  {
    "id" : "ef0c5faa-a852-4ffd-aef3-c8e62817680b",
    "prId" : 27632,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27632#pullrequestreview-267908597",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "023251dd-ca98-467f-b38e-0c4dc8d4e035",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "start and ",
        "createdAt" : "2019-07-29T16:50:34Z",
        "updatedAt" : "2019-07-29T16:52:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab65e0f7906aea9eb10781e2f42acb9bfa97204b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +497,501 @@            if closed is not None:\n                raise ValueError(\n                    \"Closed has to be None if not both of startand end are defined\"\n                )\n        if start is NaT or end is NaT:"
  },
  {
    "id" : "e56e464a-d47d-4713-bfe8-830138900fc1",
    "prId" : 28532,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28532#pullrequestreview-293780256",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c56a168-85f8-4800-b84c-f7ae7e20b59d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we should have an index method which does this no? ",
        "createdAt" : "2019-09-20T12:36:36Z",
        "updatedAt" : "2019-09-20T12:36:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "80e33d4c-a286-4fbe-b04b-aacd09a9fc8e",
        "parentId" : "2c56a168-85f8-4800-b84c-f7ae7e20b59d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "For the check or the raising?  The check could be `isinstance(data, ABCMultiIndex)`.  No strong preference.",
        "createdAt" : "2019-09-20T14:21:02Z",
        "updatedAt" : "2019-09-20T14:21:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0e60d54f-5515-4fe2-9c79-2a280a6c2ed7",
        "parentId" : "2c56a168-85f8-4800-b84c-f7ae7e20b59d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no, something that does the right thing on an Index/MultiIndex, e.g. that gets (data._data) on an index and just passes thru on a MI",
        "createdAt" : "2019-09-23T12:02:40Z",
        "updatedAt" : "2019-09-23T12:02:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8087a87f-7c76-424b-ae19-3e9ba097795d",
        "parentId" : "2c56a168-85f8-4800-b84c-f7ae7e20b59d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think we want to move to use the `extract_array` pattern here, but that currently raises ValueError on MultiIndex (where we want to raise TypeError here)",
        "createdAt" : "2019-09-23T12:49:26Z",
        "updatedAt" : "2019-09-23T12:49:26Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b4bd2512-839e-4e06-9b72-564f1c76275d",
        "parentId" : "2c56a168-85f8-4800-b84c-f7ae7e20b59d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok the reason I am harping on this is its an inconsistency between Index and MultiIndex. ok on merging this and creating an issue / followup ?",
        "createdAt" : "2019-09-26T12:29:05Z",
        "updatedAt" : "2019-09-26T12:29:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "216bb17b-e91f-410a-9d23-7cba8c808d66",
        "parentId" : "2c56a168-85f8-4800-b84c-f7ae7e20b59d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> creating an issue / followup ?\r\n\r\nyes",
        "createdAt" : "2019-09-26T14:46:26Z",
        "updatedAt" : "2019-09-26T14:46:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a13ee888d8d4251c24f404ec443ea2f0f195c78",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1921,1925 @@        if data.nlevels > 1:\n            # Without this check, data._data below is None\n            raise TypeError(\"Cannot create a DatetimeArray from a MultiIndex.\")\n        data = data._data\n"
  },
  {
    "id" : "05335992-fb4c-4753-8dd8-776eaf7d4bd0",
    "prId" : 30336,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30336#pullrequestreview-334817908",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "507899e2-2f36-476d-92c3-7706e4d36ec0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use ``not len``",
        "createdAt" : "2019-12-19T17:43:51Z",
        "updatedAt" : "2019-12-19T17:44:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "008878d8-9477-49b6-aae8-66a87957bec6",
        "parentId" : "507899e2-2f36-476d-92c3-7706e4d36ec0",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "follow-up, ive got a branch specifically collecting these things",
        "createdAt" : "2019-12-19T18:18:44Z",
        "updatedAt" : "2019-12-19T18:18:45Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8744a01cbc196e31921348743cf31f1c4d3a64a",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +803,807 @@            )\n            result = self.astype(\"O\") + offset\n            if len(self) == 0:\n                # _from_sequence won't be able to infer self.tz\n                return type(self)._from_sequence(result).tz_localize(self.tz)"
  },
  {
    "id" : "a203986a-82b1-4a02-abc9-57c92f9eef64",
    "prId" : 32668,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32668#pullrequestreview-374419751",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc9472c9-a083-42b0-ad7d-3bf1923774b1",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "is this part of the bugfix or additional cleanup?",
        "createdAt" : "2020-03-13T12:33:03Z",
        "updatedAt" : "2020-03-14T19:40:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "a190caa2-658b-4806-ad54-70484b0e383f",
        "parentId" : "dc9472c9-a083-42b0-ad7d-3bf1923774b1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Cleanup for perf; my eye twitches whenever i see is_foo_dtype(values) that could be is_foo_dtype(values.dtype)",
        "createdAt" : "2020-03-13T15:59:39Z",
        "updatedAt" : "2020-03-14T19:40:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecd66f24b768ef044382bc497bb42db5667aba4a",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1905,1909 @@    TypeError : PeriodDType data is passed\n    \"\"\"\n    if not hasattr(data, \"dtype\"):\n        # e.g. collections.deque\n        return data, copy"
  },
  {
    "id" : "f293d2f5-bd92-4f2d-a0f7-d27d909f6d75",
    "prId" : 33406,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33406#pullrequestreview-428160770",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1630a2e7-8d1b-48c4-b111-df85526ffdf0",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@MomIsBestFriend why cant we just do `res = freq` here?  (im trying to clean up usages of `base_and_stride`)",
        "createdAt" : "2020-06-10T15:15:38Z",
        "updatedAt" : "2020-06-10T15:15:38Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0274c624cba19440f1be609116d2fd9f65c69e79",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1104,1108 @@            if res is None:\n                base, stride = libfrequencies._base_and_stride(freq)\n                res = f\"{stride}{base}\"\n\n            freq = res"
  },
  {
    "id" : "8a77b9c0-454e-4468-b4b1-5e3e720c8e10",
    "prId" : 33498,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33498#pullrequestreview-394709904",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09d68996-e1cb-4985-bc1c-1bddf9817b42",
        "parentId" : null,
        "authorId" : "60d0b690-e46d-489b-9e53-1306cfe27fca",
        "body" : "I simplified a bit the code here. Since `start` and `end` are either None or a `Timestamp` (L364-368), the use of `getattr` was not necessary.",
        "createdAt" : "2020-04-16T15:03:27Z",
        "updatedAt" : "2020-05-09T16:24:22Z",
        "lastEditedBy" : "60d0b690-e46d-489b-9e53-1306cfe27fca",
        "tags" : [
        ]
      }
    ],
    "commit" : "71438d6f7509191d532b60dbb6359b4c0bb87f24",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +386,390 @@            )\n            end = _maybe_localize_point(\n                end, end_tz, end, freq, tz, ambiguous, nonexistent\n            )\n        if freq is not None:"
  },
  {
    "id" : "b737521d-28e1-4934-b155-59c189e8da70",
    "prId" : 33498,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33498#pullrequestreview-404169712",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8515ada3-3b97-4ee4-a030-ea6865daf972",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this some kind of list returned?",
        "createdAt" : "2020-04-26T20:30:11Z",
        "updatedAt" : "2020-05-09T16:24:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a76ded50-90e1-457a-8dba-d0c138abafb5",
        "parentId" : "8515ada3-3b97-4ee4-a030-ea6865daf972",
        "authorId" : "60d0b690-e46d-489b-9e53-1306cfe27fca",
        "body" : "`generate_range` is an iterator function present in `pandas/tseries/offsets.py`.  So, here, `xdr` is an iterator (hence the conversion in a numpy array just after). This code was hidden in the previous version of `generate_regular_range`.\r\n\r\n---\r\nTo be complete, in an earlier version of this PR I created two wrappers of `generate_regular_range`:\r\n\r\n* `generate_timestamps_range`: wrapper of `generate_regular_range`, and used to call `generate_range` to handle the cases when freq was not an instance of `Tick`\r\n* `generate_timedeltas_range`: wrapper of `generate_regular_range`\r\n\r\nBoth of them were really small and a bit unnecessary (especially `generate_timedeltas_range`). So it has been removed after a remark of @jbrockmendel https://github.com/pandas-dev/pandas/pull/33498#discussion_r408425826.",
        "createdAt" : "2020-05-01T13:52:44Z",
        "updatedAt" : "2020-05-09T16:24:22Z",
        "lastEditedBy" : "60d0b690-e46d-489b-9e53-1306cfe27fca",
        "tags" : [
        ]
      }
    ],
    "commit" : "71438d6f7509191d532b60dbb6359b4c0bb87f24",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +401,405 @@                values = generate_regular_range(start, end, periods, freq)\n            else:\n                xdr = generate_range(start=start, end=end, periods=periods, offset=freq)\n                values = np.array([x.value for x in xdr], dtype=np.int64)\n"
  }
]