[
  {
    "id" : "8a545f4f-d30c-457b-b1f2-6299117d7eef",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-523503021",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74b3cb66-403a-40f4-91a3-0fc3faecee1b",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "We should probably also test the type of the (chunked) array, to ensure it is string data:\r\n\r\n```\r\nIn [19]: arr = pa.array([\"a\", \"b\"])\r\n\r\nIn [20]: arr\r\nOut[20]: \r\n<pyarrow.lib.StringArray object at 0x7f6af85e2768>\r\n[\r\n  \"a\",\r\n  \"b\"\r\n]\r\n\r\nIn [21]: pa.types.is_string(arr.type)\r\nOut[21]: True\r\n```",
        "createdAt" : "2020-10-28T09:01:39Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "740cda86-376d-47a7-b652-af3c1068ce9c",
        "parentId" : "74b3cb66-403a-40f4-91a3-0fc3faecee1b",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "not part of interface so have added a test.",
        "createdAt" : "2020-11-04T16:00:35Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 187,
    "diffHunk" : "@@ -1,1 +185,189 @@        if isinstance(values, pa.Array):\n            self._data = pa.chunked_array([values])\n        elif isinstance(values, pa.ChunkedArray):\n            self._data = values\n        else:"
  },
  {
    "id" : "eb74cc0c-1c56-44dc-9298-408c5aecf337",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-530582380",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7756408b-ed19-43bc-81b9-93ab0956e21b",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Instead of defining `_from_factorize` / `_values_for_factorize`, I think we should actually rather implement `factorize` itself, to avoid a conversion to python objects. See the comment about both ways in the base class:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/5a74e970f73cc199af18da7b1bcea37e708becc1/pandas/core/arrays/base.py#L852-L859\r\n\r\nSee for example fletcher's implementation of `factorize`: https://github.com/xhochy/fletcher/blob/b8e541f2bfb8973c4290698f0c576d62980a0ce4/fletcher/base.py#L1082-L1123\r\n\r\n(this could also be left for a follow-up PR, though)",
        "createdAt" : "2020-11-12T19:51:28Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "80c2aace-31dc-4cb6-b3f8-406cfdc8a55d",
        "parentId" : "7756408b-ed19-43bc-81b9-93ab0956e21b",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "agree. this was added as a baseline in https://github.com/pandas-dev/pandas/pull/35259/commits/ae49807ed406b622667a1896177dc9e560d074f2 to lockdown the passing tests dependent on a factorize method being present.\r\n\r\nI think a follow-on would be good. Once we have a PR merged with basic functionality, we can start to do the rest of the task in parallel.",
        "createdAt" : "2020-11-14T11:01:39Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "6d8fb0c9-c2ed-4375-8abd-8e9e585b83ce",
        "parentId" : "7756408b-ed19-43bc-81b9-93ab0956e21b",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> (factorize) I think a follow-on would be good.\r\n\r\nSounds good, I am starting to gather some follow-up items in https://github.com/pandas-dev/pandas/issues/35169 (feel free to edit and add more items)",
        "createdAt" : "2020-11-14T14:46:01Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 256,
    "diffHunk" : "@@ -1,1 +254,258 @@\n    @classmethod\n    def _from_factorized(cls, values, original):\n        return cls._from_sequence(values)\n"
  },
  {
    "id" : "dc76edc4-016c-4aed-bfb8-8c033297c9ae",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-531774919",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da0b8e3d-96bc-47e4-aa2a-6b33310c9909",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this where you list data? ",
        "createdAt" : "2020-11-13T13:31:28Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a943959f-c999-40bd-a1fc-5185248992ab",
        "parentId" : "da0b8e3d-96bc-47e4-aa2a-6b33310c9909",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "not sure on this one.\r\n\r\nthe pythonic way to get the pyarrow data would be through the arrow array protocol i.e. pa.array(\\<ArrowStringArray>)\r\n\r\nmaybe we should privatize data?",
        "createdAt" : "2020-11-16T13:22:25Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "d9e79e8e-d4ae-431e-9c63-98ed26d2dd37",
        "parentId" : "da0b8e3d-96bc-47e4-aa2a-6b33310c9909",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yeah, maybe using `_data` instead of `data` is good (that also matches what we do for the masked arrays). \r\n\r\nI suppose some power users will want to access this, but for now, indeed using `pa.array(..)` seems like a perfect way to do this (or be fine with `_data` being used, like it is for the masked arrays, cfr https://github.com/pandas-dev/pandas/issues/34873)\r\n\r\n(in any case, I wouldn't list `data` here in the docstring)",
        "createdAt" : "2020-11-16T20:59:12Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +153,157 @@    Attributes\n    ----------\n    None\n\n    Methods"
  },
  {
    "id" : "291c0f5f-cd06-415d-a378-357f8fd34df9",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-530072652",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "334add43-f4b3-48cc-a661-8f8003f9a2fd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this extraneous?",
        "createdAt" : "2020-11-13T13:31:35Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4ec13909-2e52-4eda-b5fc-3d3c754a02ca",
        "parentId" : "334add43-f4b3-48cc-a661-8f8003f9a2fd",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "No, this is needed to suppress sphinx/autodoc to create pages for all the attributes/methods (this is also used for other array and index classes, to avoid lots of duplicates html pages)",
        "createdAt" : "2020-11-13T13:46:22Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 158,
    "diffHunk" : "@@ -1,1 +156,160 @@\n    Methods\n    -------\n    None\n"
  },
  {
    "id" : "24883291-5ca9-4c9b-97b9-80375be91922",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-530314369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d89830b-fb31-4f9b-a2e3-47058b2826b2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "type",
        "createdAt" : "2020-11-13T13:32:23Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6e79656d-7f2c-4b15-af50-95024e6183fe",
        "parentId" : "7d89830b-fb31-4f9b-a2e3-47058b2826b2",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "#37817 as precursor",
        "createdAt" : "2020-11-13T18:37:39Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 260,
    "diffHunk" : "@@ -1,1 +258,262 @@\n    @classmethod\n    def _concat_same_type(cls, to_concat) -> ArrowStringArray:\n        \"\"\"\n        Concatenate multiple ArrowStringArray."
  },
  {
    "id" : "35d56710-9796-41eb-a4fe-e81f7888c5a0",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-531359276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2cec6dc-926b-4738-b21c-e2915e4b7376",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "isn't this a pretty well defined output type? e.g. Union[str, NA,] or array of these?",
        "createdAt" : "2020-11-13T13:33:08Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9d7c5f47-c08d-494a-b32b-039ee7c0646e",
        "parentId" : "b2cec6dc-926b-4738-b21c-e2915e4b7376",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "also related to https://github.com/pandas-dev/pandas/pull/35259#discussion_r517352902. If we don't consider subclasses and restrict dtype.na_value to be pd.NA, then this should be well defined.",
        "createdAt" : "2020-11-16T14:17:06Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 278,
    "diffHunk" : "@@ -1,1 +276,280 @@        )\n\n    def __getitem__(self, item: Any) -> Any:\n        \"\"\"Select a subset of self.\n"
  },
  {
    "id" : "549a97b3-abfb-40d3-8448-a9074608d88b",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-531959867",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86aa6183-a241-43d3-ab87-4ba96e4acf01",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "type output",
        "createdAt" : "2020-11-13T13:34:34Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "39a6ae5d-c6df-47a4-9d82-ca064335e1cf",
        "parentId" : "86aa6183-a241-43d3-ab87-4ba96e4acf01",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "see also https://github.com/pandas-dev/pandas/pull/35259#discussion_r517352902",
        "createdAt" : "2020-11-14T13:03:39Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "137b4aeb-0f26-4a05-84ac-ec8093a3bece",
        "parentId" : "86aa6183-a241-43d3-ab87-4ba96e4acf01",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "`_as_pandas_scalar` is an artefact of fletcher. It was a module level function and was moved to a class method to access self._dtype.na_value in https://github.com/pandas-dev/pandas/pull/35259/commits/1a200a2b00dc25e57dce1a7f59fa40ab6fb1ae27 see https://github.com/pandas-dev/pandas/pull/35259#discussion_r517351810\r\n\r\nas stated in https://github.com/pandas-dev/pandas/pull/35259/files#r522951940 the return type of \\_\\_getitem__ is either the same as the return type here or an array of that type.\r\n\r\n`_as_pandas_scalar` is only used in \\_\\_getitem__ . I'm not sure if we will want to re-use this. maybe in a base class for arrow backed EA. or we could subsume this method into \\_\\_getitem__",
        "createdAt" : "2020-11-16T14:34:08Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "1be77b17-855e-4043-8f04-c4c36d31be61",
        "parentId" : "86aa6183-a241-43d3-ab87-4ba96e4acf01",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think there will come more use-cases of `_as_pandas_scalar`. There are other functions that can return a scalar as well, apart from `__getitem__`, such as reductions (although for string data specifically, there are not many reductions supported of course)",
        "createdAt" : "2020-11-16T20:44:54Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "cdf44527-8a77-41be-9c60-310aa4b1c2aa",
        "parentId" : "86aa6183-a241-43d3-ab87-4ba96e4acf01",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "sure. am happy keeping it. will probably create an alias for the return type of `_as_pandas_scalar` and then use in the return type of \\_\\_getitem__.  have opened #37898 as a precursor for the discussion on typing of \\_\\_getitem__ in EA. \r\n\r\nsee https://github.com/pandas-dev/pandas/pull/37898#issue-521850554\r\n\r\n> could create a scalar type alias in each of the EA classes similar to DTScalarOrNaT in DatetimeLikeArrayMixin\r\n",
        "createdAt" : "2020-11-16T20:52:06Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "a68116d0-e6f3-428a-adb6-b9f217f61981",
        "parentId" : "86aa6183-a241-43d3-ab87-4ba96e4acf01",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah would do this more generally with support for scalars in the base class as a first class item",
        "createdAt" : "2020-11-17T01:45:12Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 325,
    "diffHunk" : "@@ -1,1 +323,327 @@            return self._as_pandas_scalar(value)\n\n    def _as_pandas_scalar(self, arrow_scalar: pa.Scalar):\n        scalar = arrow_scalar.as_py()\n        if scalar is None:"
  },
  {
    "id" : "caa37455-ae43-4d63-aaa4-d272f5062fb9",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-530170035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "340ba761-35ed-4460-bda5-088b565db3a3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "type the args & output",
        "createdAt" : "2020-11-13T13:34:42Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9db484f0-de12-4958-ad73-0ecd022879bf",
        "parentId" : "340ba761-35ed-4460-bda5-088b565db3a3",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "the base class is not yet typed. I think generally better to type base classes first. To keep the diff here focussed will to a precursor.",
        "createdAt" : "2020-11-13T15:42:55Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 332,
    "diffHunk" : "@@ -1,1 +330,334 @@            return scalar\n\n    def fillna(self, value=None, method=None, limit=None):\n        \"\"\"\n        Fill NA/NaN values using the specified method."
  },
  {
    "id" : "845b6fef-9c45-4995-930e-e06c3638d65f",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-531777878",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "482157d7-088a-44b1-9a3e-776b21694483",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is this needed to do the actual calculation? \r\nBecause if the pyarrow function raises, that basically means that the scalar it either NA or either not a string? In which cases the result is either all NA or all False/all True (depending on the op being eq or ne)? \r\n\r\n(but, since this need to be further worked on in general (eg support python-based StringArray, support other comparison ops, etc), it's certainly fine to put this comment on a follow-up TODO list)",
        "createdAt" : "2020-11-16T20:48:21Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "3ffaf060-c2ab-4f49-97bc-f3884a8ace35",
        "parentId" : "482157d7-088a-44b1-9a3e-776b21694483",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> In which cases the result is either all NA or all False/all True (depending on the op being eq or ne)?\r\n\r\nI started down this route, but it is not all False/all True if there are null values in the array and also needs to put in the true/false logic. It's not difficult, but this instead of writing 'new' logic, this is effectively a copy/paste of code in StringArray that we may be able to refactor out.",
        "createdAt" : "2020-11-16T20:59:04Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "146e54d3-5a76-4b8b-84a9-113d789a1d8d",
        "parentId" : "482157d7-088a-44b1-9a3e-776b21694483",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, let's do this in a targeted follow-up.",
        "createdAt" : "2020-11-16T21:03:34Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 431,
    "diffHunk" : "@@ -1,1 +429,433 @@                valid = ~mask\n                result = np.zeros(len(self), dtype=\"bool\")\n                result[valid] = op(np.array(self)[valid], other)\n                return BooleanArray(result, mask)\n        else:"
  },
  {
    "id" : "a006b3af-3087-42a8-be89-3d1ca86a3b9e",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-533817152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9b5a4f8-3eef-4022-906a-f06a609a667b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "when would this be true? (e.g. have pyarrow but now pyarrow.compute)? can you comment on min version",
        "createdAt" : "2020-11-17T01:42:42Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dd66c5e0-b491-4160-bda5-289285ca8a2f",
        "parentId" : "d9b5a4f8-3eef-4022-906a-f06a609a667b",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "yes there is no pyarrow.compute in our min supported version, 0.15.1.\r\n\r\nfor local testing/dev i've only setup environments with no pyarrow, 0.15.1, 1.0.0 and 2.0.0\r\n\r\nwe have added `_chk_pyarrow_available` here that checks `if pa is None or LooseVersion(pa.__version__) < \"1.0.0\":` and raises on construction. so that's why pa and pc are imported independently.\r\n\r\nI'm not sure what the min pyarrow version is that 'could' be supported is. @jorisvandenbossche? or whether it's actually relevant.",
        "createdAt" : "2020-11-17T10:47:10Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "0d564a4b-a456-4aa5-bb01-036c46726da7",
        "parentId" : "d9b5a4f8-3eef-4022-906a-f06a609a667b",
        "authorId" : "6bfa1922-c427-4971-9e7f-6e6257a1d5bb",
        "body" : "`pyarrow=1.0` should be sufficient for the basic usage. With 2.0+ you will get a lot more string algorithms. In `fletcher` I have started using `hasattr(pc, '<algorithm>')` for that in the `str` accessor overloads.",
        "createdAt" : "2020-11-17T12:12:37Z",
        "updatedAt" : "2020-11-17T12:12:37Z",
        "lastEditedBy" : "6bfa1922-c427-4971-9e7f-6e6257a1d5bb",
        "tags" : [
        ]
      },
      {
        "id" : "c3d5878e-16f0-4006-bfee-d3a0b173163d",
        "parentId" : "d9b5a4f8-3eef-4022-906a-f06a609a667b",
        "authorId" : "6bfa1922-c427-4971-9e7f-6e6257a1d5bb",
        "body" : "Functionality is the same, performance will be different.",
        "createdAt" : "2020-11-17T12:12:54Z",
        "updatedAt" : "2020-11-17T12:12:54Z",
        "lastEditedBy" : "6bfa1922-c427-4971-9e7f-6e6257a1d5bb",
        "tags" : [
        ]
      },
      {
        "id" : "ed8d0760-f958-4e3b-94d1-50d4351ac50c",
        "parentId" : "d9b5a4f8-3eef-4022-906a-f06a609a667b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, to be honest ok with requiring >=1.0 for this change its fine for now can revist.",
        "createdAt" : "2020-11-17T13:00:36Z",
        "updatedAt" : "2020-11-17T13:00:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fa3778a8-16c2-45c4-b042-7bf2132a7729",
        "parentId" : "d9b5a4f8-3eef-4022-906a-f06a609a667b",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Anaconda doesn't even yet provide pyarrow 1.0 (it's only on conda-forge), so let's leave for later / separate discussion. \r\n\r\n> I'm not sure what the min pyarrow version is that 'could' be supported is.\r\n\r\n1.0 is the minimum we need for decent support here in the PR (and once we add the string methods, we will also need to have conditionals on the actual pyarrow version (1.0, 2.0, 3.0), as the more recent have more string compute algos available. But so that is for a next PR.",
        "createdAt" : "2020-11-17T13:36:32Z",
        "updatedAt" : "2020-11-17T13:36:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ad77e66b-bb4c-49cd-a036-b64716840b92",
        "parentId" : "d9b5a4f8-3eef-4022-906a-f06a609a667b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "> Anaconda doesn't even yet provide pyarrow 1.0 (it's only on conda-forge), so let's leave for later / separate discussion.\r\n\r\ninteresting",
        "createdAt" : "2020-11-18T19:47:09Z",
        "updatedAt" : "2020-11-18T19:47:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +35,39 @@        import pyarrow.compute as pc\n    except ImportError:\n        pass\n    else:\n        ARROW_CMP_FUNCS = {"
  },
  {
    "id" : "78755623-3b42-4573-a3b4-e8e955e8ece8",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-531959867",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f7e1441-39a7-4747-9bce-f2bdce6ca73c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if you can type",
        "createdAt" : "2020-11-17T01:44:02Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 227,
    "diffHunk" : "@@ -1,1 +225,229 @@        return self.to_numpy(dtype=dtype)\n\n    def __arrow_array__(self, type=None):\n        \"\"\"Convert myself to a pyarrow Array or ChunkedArray.\"\"\"\n        return self._data"
  }
]