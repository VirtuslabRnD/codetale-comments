[
  {
    "id" : "8a545f4f-d30c-457b-b1f2-6299117d7eef",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-523503021",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74b3cb66-403a-40f4-91a3-0fc3faecee1b",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "We should probably also test the type of the (chunked) array, to ensure it is string data:\r\n\r\n```\r\nIn [19]: arr = pa.array([\"a\", \"b\"])\r\n\r\nIn [20]: arr\r\nOut[20]: \r\n<pyarrow.lib.StringArray object at 0x7f6af85e2768>\r\n[\r\n  \"a\",\r\n  \"b\"\r\n]\r\n\r\nIn [21]: pa.types.is_string(arr.type)\r\nOut[21]: True\r\n```",
        "createdAt" : "2020-10-28T09:01:39Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "740cda86-376d-47a7-b652-af3c1068ce9c",
        "parentId" : "74b3cb66-403a-40f4-91a3-0fc3faecee1b",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "not part of interface so have added a test.",
        "createdAt" : "2020-11-04T16:00:35Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 187,
    "diffHunk" : "@@ -1,1 +185,189 @@        if isinstance(values, pa.Array):\n            self._data = pa.chunked_array([values])\n        elif isinstance(values, pa.ChunkedArray):\n            self._data = values\n        else:"
  },
  {
    "id" : "eb74cc0c-1c56-44dc-9298-408c5aecf337",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-530582380",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7756408b-ed19-43bc-81b9-93ab0956e21b",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Instead of defining `_from_factorize` / `_values_for_factorize`, I think we should actually rather implement `factorize` itself, to avoid a conversion to python objects. See the comment about both ways in the base class:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/5a74e970f73cc199af18da7b1bcea37e708becc1/pandas/core/arrays/base.py#L852-L859\r\n\r\nSee for example fletcher's implementation of `factorize`: https://github.com/xhochy/fletcher/blob/b8e541f2bfb8973c4290698f0c576d62980a0ce4/fletcher/base.py#L1082-L1123\r\n\r\n(this could also be left for a follow-up PR, though)",
        "createdAt" : "2020-11-12T19:51:28Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "80c2aace-31dc-4cb6-b3f8-406cfdc8a55d",
        "parentId" : "7756408b-ed19-43bc-81b9-93ab0956e21b",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "agree. this was added as a baseline in https://github.com/pandas-dev/pandas/pull/35259/commits/ae49807ed406b622667a1896177dc9e560d074f2 to lockdown the passing tests dependent on a factorize method being present.\r\n\r\nI think a follow-on would be good. Once we have a PR merged with basic functionality, we can start to do the rest of the task in parallel.",
        "createdAt" : "2020-11-14T11:01:39Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "6d8fb0c9-c2ed-4375-8abd-8e9e585b83ce",
        "parentId" : "7756408b-ed19-43bc-81b9-93ab0956e21b",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> (factorize) I think a follow-on would be good.\r\n\r\nSounds good, I am starting to gather some follow-up items in https://github.com/pandas-dev/pandas/issues/35169 (feel free to edit and add more items)",
        "createdAt" : "2020-11-14T14:46:01Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 256,
    "diffHunk" : "@@ -1,1 +254,258 @@\n    @classmethod\n    def _from_factorized(cls, values, original):\n        return cls._from_sequence(values)\n"
  },
  {
    "id" : "dc76edc4-016c-4aed-bfb8-8c033297c9ae",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-531774919",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da0b8e3d-96bc-47e4-aa2a-6b33310c9909",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this where you list data? ",
        "createdAt" : "2020-11-13T13:31:28Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a943959f-c999-40bd-a1fc-5185248992ab",
        "parentId" : "da0b8e3d-96bc-47e4-aa2a-6b33310c9909",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "not sure on this one.\r\n\r\nthe pythonic way to get the pyarrow data would be through the arrow array protocol i.e. pa.array(\\<ArrowStringArray>)\r\n\r\nmaybe we should privatize data?",
        "createdAt" : "2020-11-16T13:22:25Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "d9e79e8e-d4ae-431e-9c63-98ed26d2dd37",
        "parentId" : "da0b8e3d-96bc-47e4-aa2a-6b33310c9909",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yeah, maybe using `_data` instead of `data` is good (that also matches what we do for the masked arrays). \r\n\r\nI suppose some power users will want to access this, but for now, indeed using `pa.array(..)` seems like a perfect way to do this (or be fine with `_data` being used, like it is for the masked arrays, cfr https://github.com/pandas-dev/pandas/issues/34873)\r\n\r\n(in any case, I wouldn't list `data` here in the docstring)",
        "createdAt" : "2020-11-16T20:59:12Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +153,157 @@    Attributes\n    ----------\n    None\n\n    Methods"
  },
  {
    "id" : "291c0f5f-cd06-415d-a378-357f8fd34df9",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-530072652",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "334add43-f4b3-48cc-a661-8f8003f9a2fd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this extraneous?",
        "createdAt" : "2020-11-13T13:31:35Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4ec13909-2e52-4eda-b5fc-3d3c754a02ca",
        "parentId" : "334add43-f4b3-48cc-a661-8f8003f9a2fd",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "No, this is needed to suppress sphinx/autodoc to create pages for all the attributes/methods (this is also used for other array and index classes, to avoid lots of duplicates html pages)",
        "createdAt" : "2020-11-13T13:46:22Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 158,
    "diffHunk" : "@@ -1,1 +156,160 @@\n    Methods\n    -------\n    None\n"
  },
  {
    "id" : "24883291-5ca9-4c9b-97b9-80375be91922",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-530314369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d89830b-fb31-4f9b-a2e3-47058b2826b2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "type",
        "createdAt" : "2020-11-13T13:32:23Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6e79656d-7f2c-4b15-af50-95024e6183fe",
        "parentId" : "7d89830b-fb31-4f9b-a2e3-47058b2826b2",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "#37817 as precursor",
        "createdAt" : "2020-11-13T18:37:39Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 260,
    "diffHunk" : "@@ -1,1 +258,262 @@\n    @classmethod\n    def _concat_same_type(cls, to_concat) -> ArrowStringArray:\n        \"\"\"\n        Concatenate multiple ArrowStringArray."
  },
  {
    "id" : "35d56710-9796-41eb-a4fe-e81f7888c5a0",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-531359276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2cec6dc-926b-4738-b21c-e2915e4b7376",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "isn't this a pretty well defined output type? e.g. Union[str, NA,] or array of these?",
        "createdAt" : "2020-11-13T13:33:08Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9d7c5f47-c08d-494a-b32b-039ee7c0646e",
        "parentId" : "b2cec6dc-926b-4738-b21c-e2915e4b7376",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "also related to https://github.com/pandas-dev/pandas/pull/35259#discussion_r517352902. If we don't consider subclasses and restrict dtype.na_value to be pd.NA, then this should be well defined.",
        "createdAt" : "2020-11-16T14:17:06Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 278,
    "diffHunk" : "@@ -1,1 +276,280 @@        )\n\n    def __getitem__(self, item: Any) -> Any:\n        \"\"\"Select a subset of self.\n"
  },
  {
    "id" : "549a97b3-abfb-40d3-8448-a9074608d88b",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-531959867",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86aa6183-a241-43d3-ab87-4ba96e4acf01",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "type output",
        "createdAt" : "2020-11-13T13:34:34Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "39a6ae5d-c6df-47a4-9d82-ca064335e1cf",
        "parentId" : "86aa6183-a241-43d3-ab87-4ba96e4acf01",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "see also https://github.com/pandas-dev/pandas/pull/35259#discussion_r517352902",
        "createdAt" : "2020-11-14T13:03:39Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "137b4aeb-0f26-4a05-84ac-ec8093a3bece",
        "parentId" : "86aa6183-a241-43d3-ab87-4ba96e4acf01",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "`_as_pandas_scalar` is an artefact of fletcher. It was a module level function and was moved to a class method to access self._dtype.na_value in https://github.com/pandas-dev/pandas/pull/35259/commits/1a200a2b00dc25e57dce1a7f59fa40ab6fb1ae27 see https://github.com/pandas-dev/pandas/pull/35259#discussion_r517351810\r\n\r\nas stated in https://github.com/pandas-dev/pandas/pull/35259/files#r522951940 the return type of \\_\\_getitem__ is either the same as the return type here or an array of that type.\r\n\r\n`_as_pandas_scalar` is only used in \\_\\_getitem__ . I'm not sure if we will want to re-use this. maybe in a base class for arrow backed EA. or we could subsume this method into \\_\\_getitem__",
        "createdAt" : "2020-11-16T14:34:08Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "1be77b17-855e-4043-8f04-c4c36d31be61",
        "parentId" : "86aa6183-a241-43d3-ab87-4ba96e4acf01",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think there will come more use-cases of `_as_pandas_scalar`. There are other functions that can return a scalar as well, apart from `__getitem__`, such as reductions (although for string data specifically, there are not many reductions supported of course)",
        "createdAt" : "2020-11-16T20:44:54Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "cdf44527-8a77-41be-9c60-310aa4b1c2aa",
        "parentId" : "86aa6183-a241-43d3-ab87-4ba96e4acf01",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "sure. am happy keeping it. will probably create an alias for the return type of `_as_pandas_scalar` and then use in the return type of \\_\\_getitem__.  have opened #37898 as a precursor for the discussion on typing of \\_\\_getitem__ in EA. \r\n\r\nsee https://github.com/pandas-dev/pandas/pull/37898#issue-521850554\r\n\r\n> could create a scalar type alias in each of the EA classes similar to DTScalarOrNaT in DatetimeLikeArrayMixin\r\n",
        "createdAt" : "2020-11-16T20:52:06Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "a68116d0-e6f3-428a-adb6-b9f217f61981",
        "parentId" : "86aa6183-a241-43d3-ab87-4ba96e4acf01",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah would do this more generally with support for scalars in the base class as a first class item",
        "createdAt" : "2020-11-17T01:45:12Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 325,
    "diffHunk" : "@@ -1,1 +323,327 @@            return self._as_pandas_scalar(value)\n\n    def _as_pandas_scalar(self, arrow_scalar: pa.Scalar):\n        scalar = arrow_scalar.as_py()\n        if scalar is None:"
  },
  {
    "id" : "caa37455-ae43-4d63-aaa4-d272f5062fb9",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-530170035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "340ba761-35ed-4460-bda5-088b565db3a3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "type the args & output",
        "createdAt" : "2020-11-13T13:34:42Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9db484f0-de12-4958-ad73-0ecd022879bf",
        "parentId" : "340ba761-35ed-4460-bda5-088b565db3a3",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "the base class is not yet typed. I think generally better to type base classes first. To keep the diff here focussed will to a precursor.",
        "createdAt" : "2020-11-13T15:42:55Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 332,
    "diffHunk" : "@@ -1,1 +330,334 @@            return scalar\n\n    def fillna(self, value=None, method=None, limit=None):\n        \"\"\"\n        Fill NA/NaN values using the specified method."
  },
  {
    "id" : "845b6fef-9c45-4995-930e-e06c3638d65f",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-531777878",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "482157d7-088a-44b1-9a3e-776b21694483",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is this needed to do the actual calculation? \r\nBecause if the pyarrow function raises, that basically means that the scalar it either NA or either not a string? In which cases the result is either all NA or all False/all True (depending on the op being eq or ne)? \r\n\r\n(but, since this need to be further worked on in general (eg support python-based StringArray, support other comparison ops, etc), it's certainly fine to put this comment on a follow-up TODO list)",
        "createdAt" : "2020-11-16T20:48:21Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "3ffaf060-c2ab-4f49-97bc-f3884a8ace35",
        "parentId" : "482157d7-088a-44b1-9a3e-776b21694483",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> In which cases the result is either all NA or all False/all True (depending on the op being eq or ne)?\r\n\r\nI started down this route, but it is not all False/all True if there are null values in the array and also needs to put in the true/false logic. It's not difficult, but this instead of writing 'new' logic, this is effectively a copy/paste of code in StringArray that we may be able to refactor out.",
        "createdAt" : "2020-11-16T20:59:04Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "146e54d3-5a76-4b8b-84a9-113d789a1d8d",
        "parentId" : "482157d7-088a-44b1-9a3e-776b21694483",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, let's do this in a targeted follow-up.",
        "createdAt" : "2020-11-16T21:03:34Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 431,
    "diffHunk" : "@@ -1,1 +429,433 @@                valid = ~mask\n                result = np.zeros(len(self), dtype=\"bool\")\n                result[valid] = op(np.array(self)[valid], other)\n                return BooleanArray(result, mask)\n        else:"
  },
  {
    "id" : "a006b3af-3087-42a8-be89-3d1ca86a3b9e",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-533817152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9b5a4f8-3eef-4022-906a-f06a609a667b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "when would this be true? (e.g. have pyarrow but now pyarrow.compute)? can you comment on min version",
        "createdAt" : "2020-11-17T01:42:42Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dd66c5e0-b491-4160-bda5-289285ca8a2f",
        "parentId" : "d9b5a4f8-3eef-4022-906a-f06a609a667b",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "yes there is no pyarrow.compute in our min supported version, 0.15.1.\r\n\r\nfor local testing/dev i've only setup environments with no pyarrow, 0.15.1, 1.0.0 and 2.0.0\r\n\r\nwe have added `_chk_pyarrow_available` here that checks `if pa is None or LooseVersion(pa.__version__) < \"1.0.0\":` and raises on construction. so that's why pa and pc are imported independently.\r\n\r\nI'm not sure what the min pyarrow version is that 'could' be supported is. @jorisvandenbossche? or whether it's actually relevant.",
        "createdAt" : "2020-11-17T10:47:10Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "0d564a4b-a456-4aa5-bb01-036c46726da7",
        "parentId" : "d9b5a4f8-3eef-4022-906a-f06a609a667b",
        "authorId" : "6bfa1922-c427-4971-9e7f-6e6257a1d5bb",
        "body" : "`pyarrow=1.0` should be sufficient for the basic usage. With 2.0+ you will get a lot more string algorithms. In `fletcher` I have started using `hasattr(pc, '<algorithm>')` for that in the `str` accessor overloads.",
        "createdAt" : "2020-11-17T12:12:37Z",
        "updatedAt" : "2020-11-17T12:12:37Z",
        "lastEditedBy" : "6bfa1922-c427-4971-9e7f-6e6257a1d5bb",
        "tags" : [
        ]
      },
      {
        "id" : "c3d5878e-16f0-4006-bfee-d3a0b173163d",
        "parentId" : "d9b5a4f8-3eef-4022-906a-f06a609a667b",
        "authorId" : "6bfa1922-c427-4971-9e7f-6e6257a1d5bb",
        "body" : "Functionality is the same, performance will be different.",
        "createdAt" : "2020-11-17T12:12:54Z",
        "updatedAt" : "2020-11-17T12:12:54Z",
        "lastEditedBy" : "6bfa1922-c427-4971-9e7f-6e6257a1d5bb",
        "tags" : [
        ]
      },
      {
        "id" : "ed8d0760-f958-4e3b-94d1-50d4351ac50c",
        "parentId" : "d9b5a4f8-3eef-4022-906a-f06a609a667b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, to be honest ok with requiring >=1.0 for this change its fine for now can revist.",
        "createdAt" : "2020-11-17T13:00:36Z",
        "updatedAt" : "2020-11-17T13:00:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fa3778a8-16c2-45c4-b042-7bf2132a7729",
        "parentId" : "d9b5a4f8-3eef-4022-906a-f06a609a667b",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Anaconda doesn't even yet provide pyarrow 1.0 (it's only on conda-forge), so let's leave for later / separate discussion. \r\n\r\n> I'm not sure what the min pyarrow version is that 'could' be supported is.\r\n\r\n1.0 is the minimum we need for decent support here in the PR (and once we add the string methods, we will also need to have conditionals on the actual pyarrow version (1.0, 2.0, 3.0), as the more recent have more string compute algos available. But so that is for a next PR.",
        "createdAt" : "2020-11-17T13:36:32Z",
        "updatedAt" : "2020-11-17T13:36:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ad77e66b-bb4c-49cd-a036-b64716840b92",
        "parentId" : "d9b5a4f8-3eef-4022-906a-f06a609a667b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "> Anaconda doesn't even yet provide pyarrow 1.0 (it's only on conda-forge), so let's leave for later / separate discussion.\r\n\r\ninteresting",
        "createdAt" : "2020-11-18T19:47:09Z",
        "updatedAt" : "2020-11-18T19:47:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +35,39 @@        import pyarrow.compute as pc\n    except ImportError:\n        pass\n    else:\n        ARROW_CMP_FUNCS = {"
  },
  {
    "id" : "78755623-3b42-4573-a3b4-e8e955e8ece8",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-531959867",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f7e1441-39a7-4747-9bce-f2bdce6ca73c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if you can type",
        "createdAt" : "2020-11-17T01:44:02Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 227,
    "diffHunk" : "@@ -1,1 +225,229 @@        return self.to_numpy(dtype=dtype)\n\n    def __arrow_array__(self, type=None):\n        \"\"\"Convert myself to a pyarrow Array or ChunkedArray.\"\"\"\n        return self._data"
  },
  {
    "id" : "2c41372d-a1a7-4a09-a95d-36d1d27e2d39",
    "prId" : 38007,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38007#pullrequestreview-593403341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0531143-326f-4529-a5d9-085f4bd366f9",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Wondering, is the `int64` needed here? (pyarrow will typically use int32 as default I think) \r\n\r\nI suppose that we always return `int64` from `factorize` for the indices. Short-term, casting to int64 might be best then (to ensure nothing else breaks because of not doing that), but long term we should maybe check if internally we require int64 or would be fine with int32 as well.",
        "createdAt" : "2021-02-18T15:30:12Z",
        "updatedAt" : "2021-03-02T13:48:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1a4f6506-e0d5-4c42-8b5f-dc9481efd068",
        "parentId" : "c0531143-326f-4529-a5d9-085f4bd366f9",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> Wondering, is the `int64` needed here? (pyarrow will typically use int32 as default I think)\r\n\r\nrefactor in https://github.com/pandas-dev/pandas/pull/38007/commits/0023f0843cb7fe316a5b30393fef8957b5213d21 partially to address comments\r\n\r\nbut yes, we seem to be getting an int32 from pyarrow\r\n\r\nalso we could maybe work with numpy arrays here directly for the indices instead of pandas Series?",
        "createdAt" : "2021-02-18T16:25:18Z",
        "updatedAt" : "2021-03-02T13:48:32Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "88ab4f460ac5b71cd6fea3d606b67f275c2d4f9d",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +284,288 @@        if indices.dtype.kind == \"f\":\n            indices[np.isnan(indices)] = na_sentinel\n        indices = indices.astype(np.int64, copy=False)\n\n        if encoded.num_chunks:"
  },
  {
    "id" : "702e16e3-a0e8-4b7b-a7eb-7d8211ba127a",
    "prId" : 39908,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39908#pullrequestreview-676785165",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc2d5559-996f-451f-96a7-fe517526bca8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we add some introspection functions\r\n\r\nis_string_python_dtype\r\nis_string_arrow_dtype\r\nis_string_dtype\r\n\r\nto encompass operations",
        "createdAt" : "2021-05-31T14:43:58Z",
        "updatedAt" : "2021-05-31T14:47:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "159d22cb-78ba-4054-b1ad-0a726c0b8c04",
        "parentId" : "fc2d5559-996f-451f-96a7-fe517526bca8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "followon ok if you can create an issue",
        "createdAt" : "2021-05-31T14:44:08Z",
        "updatedAt" : "2021-05-31T14:47:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a4db37a3-8bd9-479f-b226-d28ab0e7ddd9",
        "parentId" : "fc2d5559-996f-451f-96a7-fe517526bca8",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "can discuss this once we have merged what we got in case things change. This conditional is slightly different from what would be in the introspection functions since this allows \"string\" whatever the global storage whereas StringDtype(), without the storage given uses the global option.\r\n\r\nI'm probably overthinking or completely misunderstood @jorisvandenbossche suggestion that \"StringDtype()\" should defer the lookup.",
        "createdAt" : "2021-06-05T14:37:14Z",
        "updatedAt" : "2021-06-05T14:37:14Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef02a435ec481eeac62fe00ebc87d501489e13fc",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +154,158 @@        _chk_pyarrow_available()\n\n        if dtype and not (isinstance(dtype, str) and dtype == \"string\"):\n            dtype = pandas_dtype(dtype)\n            assert isinstance(dtype, StringDtype) and dtype.storage == \"pyarrow\""
  },
  {
    "id" : "a843e38b-08ae-460e-ad8f-019d566ecf8d",
    "prId" : 39908,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39908#pullrequestreview-672408982",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "563b0656-7740-4211-933d-ac593cae455f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why did this change?",
        "createdAt" : "2021-05-31T14:44:45Z",
        "updatedAt" : "2021-05-31T14:47:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "55bacbf6-f17d-4a73-8405-4e453f4e2d5c",
        "parentId" : "563b0656-7740-4211-933d-ac593cae455f",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "no ArrowStringDtype",
        "createdAt" : "2021-05-31T15:28:58Z",
        "updatedAt" : "2021-05-31T15:28:58Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef02a435ec481eeac62fe00ebc87d501489e13fc",
    "line" : 173,
    "diffHunk" : "@@ -1,1 +177,181 @@\n    @property\n    def dtype(self) -> StringDtype:\n        \"\"\"\n        An instance of 'string[pyarrow]'."
  },
  {
    "id" : "7bed2095-92e0-48d5-9046-62f9257ffecb",
    "prId" : 40708,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40708#pullrequestreview-636338205",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17384979-7319-411a-a9a2-7c442036d25c",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I _think_ the goal is to inherit from BaseStringArrayMethods. (I recall this being mentioned somewhere). For now use ObjectStringArrayMixin similar to fletcher https://github.com/xhochy/fletcher/pull/196",
        "createdAt" : "2021-03-31T17:54:32Z",
        "updatedAt" : "2021-04-15T07:55:50Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "053db1f5-99a3-460a-88f3-c033facdef7e",
        "parentId" : "17384979-7319-411a-a9a2-7c442036d25c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is because you want to have the object-dtype based methods as fallback for the ones that pyarrow doesn't yet support, I suppose? ",
        "createdAt" : "2021-04-01T13:48:22Z",
        "updatedAt" : "2021-04-15T07:55:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "25acddf6-7112-442f-8e27-af6f06e9931c",
        "parentId" : "17384979-7319-411a-a9a2-7c442036d25c",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "yep. This PR just gets the string methods working for the existing tests we have StringArray. So just converting to object and not using native pyarrow functions yet.",
        "createdAt" : "2021-04-01T14:22:43Z",
        "updatedAt" : "2021-04-15T07:55:50Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "9a400131-0fed-4944-b48f-055e01c3f10b",
        "parentId" : "17384979-7319-411a-a9a2-7c442036d25c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add a small comment about that (eg below where the class is created) about why `ObjectStringArrayMixin` is mixed in?",
        "createdAt" : "2021-04-15T07:09:26Z",
        "updatedAt" : "2021-04-15T07:55:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1c8a3e0fbe1fa71bee93eab1a001ff6a047f427",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +46,50 @@    validate_indices,\n)\nfrom pandas.core.strings.object_array import ObjectStringArrayMixin\n\ntry:"
  },
  {
    "id" : "a00a1cf1-72ec-4e74-b562-4c0ccab8d683",
    "prId" : 40708,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40708#pullrequestreview-626333007",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9ba4c5a-9b25-4a51-8ffd-3c7224ef556f",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "moreless cut and paste from StringArray.",
        "createdAt" : "2021-03-31T17:55:55Z",
        "updatedAt" : "2021-04-15T07:55:50Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "237affaa-de68-4124-a350-f20572fe8d38",
        "parentId" : "c9ba4c5a-9b25-4a51-8ffd-3c7224ef556f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This could be shared? (eg move it a common helper function or mixin?)",
        "createdAt" : "2021-04-01T13:51:13Z",
        "updatedAt" : "2021-04-15T07:55:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ea4e6b5f-0ba6-4fa6-b0f0-6e3781302fb0",
        "parentId" : "c9ba4c5a-9b25-4a51-8ffd-3c7224ef556f",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "indeed. I _think_ the de-duplication is better as an immediate follow-up to keep changes to existing code paths (i.e. StringArray) in a separate PR and keep this one scoped to just additions.",
        "createdAt" : "2021-04-01T14:20:52Z",
        "updatedAt" : "2021-04-15T07:55:50Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "f974bcdf-55e1-4749-ae45-ba9d5deae12b",
        "parentId" : "c9ba4c5a-9b25-4a51-8ffd-3c7224ef556f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "either is fine for me",
        "createdAt" : "2021-04-01T14:23:18Z",
        "updatedAt" : "2021-04-15T07:55:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ae382aed-dde4-4a05-975f-a483136fd233",
        "parentId" : "c9ba4c5a-9b25-4a51-8ffd-3c7224ef556f",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> eg move it a common helper function or mixin\r\n\r\nor have a common base class. https://github.com/pandas-dev/pandas/issues/35169#issuecomment-712372349\r\n\r\nso better as a follow-on to allow for more discussion",
        "createdAt" : "2021-04-01T14:32:17Z",
        "updatedAt" : "2021-04-15T07:55:50Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1c8a3e0fbe1fa71bee93eab1a001ff6a047f427",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +693,697 @@    _str_na_value = ArrowStringDtype.na_value\n\n    def _str_map(self, f, na_value=None, dtype: Dtype | None = None):\n        # TODO: de-duplicate with StringArray method. This method is moreless copy and\n        # paste."
  },
  {
    "id" : "a813e8ff-c110-4cb3-808e-d3c012f63500",
    "prId" : 41018,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/41018#pullrequestreview-638908591",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4c8d8c7-6097-4a39-adca-0d65e19d7e73",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "docstring? can you type",
        "createdAt" : "2021-04-19T13:46:22Z",
        "updatedAt" : "2021-04-19T13:46:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0df9c759-71a5-444b-bb80-408d18236fbe",
        "parentId" : "d4c8d8c7-6097-4a39-adca-0d65e19d7e73",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "i'll mark this as draft and do the other arrays as precursors to this to ensure consistency.",
        "createdAt" : "2021-04-19T14:03:43Z",
        "updatedAt" : "2021-04-19T14:03:43Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0f703595c75084fe44d160e9db45de288e7b258",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +746,750 @@        return Series(counts, index=index).astype(\"Int64\")\n\n    def astype(self, dtype, copy=True):\n        dtype = pandas_dtype(dtype)\n"
  },
  {
    "id" : "f7844811-c0a0-46a1-8494-6eaf767050d0",
    "prId" : 41018,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/41018#pullrequestreview-672413570",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bb48983-4703-490d-9502-a3bd759a0ab4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you type here (followups are ok)",
        "createdAt" : "2021-05-31T15:36:05Z",
        "updatedAt" : "2021-05-31T15:37:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0f703595c75084fe44d160e9db45de288e7b258",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +746,750 @@        return Series(counts, index=index).astype(\"Int64\")\n\n    def astype(self, dtype, copy=True):\n        dtype = pandas_dtype(dtype)\n"
  },
  {
    "id" : "3e14829a-0f09-4f9d-8e56-c5d913ebfc8c",
    "prId" : 41025,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/41025#pullrequestreview-639972390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bd6479c-a4c1-4017-929e-8a272fb0c15b",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This should have additionally a pyarrow version or `hasattr(pc, ..)` check?",
        "createdAt" : "2021-04-20T07:29:12Z",
        "updatedAt" : "2021-04-25T16:20:36Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f600eef7-1a39-4192-98d7-7b666fb1bcf0",
        "parentId" : "3bd6479c-a4c1-4017-929e-8a272fb0c15b",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "pretty sure match_substring is available in pyarrow 1.0.0 (our min for the creation of ArrowStringArray) otherwise tests would fail.",
        "createdAt" : "2021-04-20T13:47:25Z",
        "updatedAt" : "2021-04-25T16:20:36Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "66251de959ed9161b27409aefec9e95039d5a67d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +762,766 @@    def _str_contains(self, pat, case=True, flags=0, na=np.nan, regex=True):\n        if not regex and case:\n            result = pc.match_substring(self._data, pat)\n            result = BooleanDtype().__from_arrow__(result)\n            if not isna(na):"
  },
  {
    "id" : "a82c766e-aec7-407b-98c4-ffb0d1c948e3",
    "prId" : 41041,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/41041#pullrequestreview-642679019",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ad5f768-7d1e-4568-b922-cf15cdd38337",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "At some point (not necessarily this PR), it might be worth benchmarking to see if calling `pc.string_is_ascii` first to then potentially use `pc.ascii_is_alnum` instead of `pc.utf8_is_alnum` could be worth it (which would be assuming that testing whether it's all ascii takes much less time than the benefit from using the faster ascii algorithm vs the utf8 one)",
        "createdAt" : "2021-04-22T21:23:29Z",
        "updatedAt" : "2021-04-23T10:43:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fb72f50e19fd962f8cacc97458ca06fa7f454d8",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +762,766 @@    def _str_isalnum(self):\n        if hasattr(pc, \"utf8_is_alnum\"):\n            result = pc.utf8_is_alnum(self._data)\n            return BooleanDtype().__from_arrow__(result)\n        else:"
  },
  {
    "id" : "2bede804-8563-489b-8ab2-bf43e8d781ad",
    "prId" : 41166,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/41166#pullrequestreview-646995905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d8404db-7a7a-4283-b62a-b486d1d70bfa",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "This is an unrelated change to the scope (from the PR title) of this PR. The mypy error is a false positive, no need to change code. will be fixed in #41185\r\n\r\nbut I guess nbd (other than merge conflicts)",
        "createdAt" : "2021-04-28T12:27:07Z",
        "updatedAt" : "2021-04-28T16:06:13Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "354f32c8b4d88f7e31c0f1c2e8486c302ce8d850",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +422,426 @@                func = missing.get_fill_func(method)\n                new_values, _ = func(\n                    self.to_numpy(\"object\"),\n                    limit=limit,\n                    mask=mask,"
  },
  {
    "id" : "8ee35231-9bd4-405f-9fd8-ef7cc6117d98",
    "prId" : 41217,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/41217#pullrequestreview-649206725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "374dd51d-ff5a-4115-b782-a28c7ffee969",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Maybe it would be good to add a comment like \"added in pyarrow x.x\", so we can more easily clean up those `hasattr` checks if we later raise the minimum version",
        "createdAt" : "2021-04-30T12:48:05Z",
        "updatedAt" : "2021-04-30T13:35:36Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7ccf1fce-e51b-4f21-ba3d-dedcbdac74f1",
        "parentId" : "374dd51d-ff5a-4115-b782-a28c7ffee969",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "yes. I was thinking the same to address https://github.com/pandas-dev/pandas/pull/41219#discussion_r623435346",
        "createdAt" : "2021-04-30T13:18:58Z",
        "updatedAt" : "2021-04-30T13:35:36Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "32a2e7bb9aaca80222378c9741419088bf3be2cc",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +773,777 @@        if regex:\n            # match_substring_regex added in pyarrow 4.0.0\n            if hasattr(pc, \"match_substring_regex\") and case:\n                if re.compile(pat).groups:\n                    warnings.warn("
  },
  {
    "id" : "0a718163-7371-4d4f-9874-130df7dc1e1d",
    "prId" : 41217,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/41217#pullrequestreview-649209107",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cc6fe69-e1e6-49d2-b4ea-fc9349739a55",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "```suggestion\r\n            if hasattr(pc, \"match_substring_regex\") and case and not flags:\r\n```\r\n\r\n?\r\n\r\nNow it seems this keyword would get ignored? (in which case it also seems we don't have test coverage for this ..)",
        "createdAt" : "2021-04-30T12:50:40Z",
        "updatedAt" : "2021-04-30T13:35:36Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d5076996-8ec3-41af-bfee-2fc1f1197099",
        "parentId" : "5cc6fe69-e1e6-49d2-b4ea-fc9349739a55",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "the flags guard has been moved to the top of the function",
        "createdAt" : "2021-04-30T13:17:41Z",
        "updatedAt" : "2021-04-30T13:35:36Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "6da5b496-a233-46ed-9084-e43047ef8bc0",
        "parentId" : "5cc6fe69-e1e6-49d2-b4ea-fc9349739a55",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "test coverage from test_flags_kwarg in pandas/tests/strings/test_find_replace.py",
        "createdAt" : "2021-04-30T13:21:35Z",
        "updatedAt" : "2021-04-30T13:35:36Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "32a2e7bb9aaca80222378c9741419088bf3be2cc",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +773,777 @@        if regex:\n            # match_substring_regex added in pyarrow 4.0.0\n            if hasattr(pc, \"match_substring_regex\") and case:\n                if re.compile(pat).groups:\n                    warnings.warn("
  },
  {
    "id" : "3ce35027-70e3-457b-9230-f26fe3f17e30",
    "prId" : 41219,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/41219#pullrequestreview-648695526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78a348a4-2dd7-45b9-a0ff-b776ae4a8dfb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ought to create an issue to remove the hasattr when we bump the required min pyarrow version ",
        "createdAt" : "2021-04-29T22:10:03Z",
        "updatedAt" : "2021-04-29T22:10:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "eec46d308b012da8b7233aabfe0cf890fe0da80a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +833,837 @@        return type(self)(pc.utf8_upper(self._data))\n\n    def _str_strip(self, to_strip=None):\n        if to_strip is None:\n            if hasattr(pc, \"utf8_trim_whitespace\"):"
  },
  {
    "id" : "9831063c-7141-480c-ac19-73199ea8914b",
    "prId" : 41222,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/41222#pullrequestreview-649747850",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4673aa89-ece7-47c1-8886-6b31826b5c44",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I don't think this will always be correct. Because of using this function, `pat` will be interpreted as a regex, and thus all special characters for regex will behave differently. Eg `s.str.startswith(\".\")` will no longer do the correct thing.",
        "createdAt" : "2021-05-01T07:21:34Z",
        "updatedAt" : "2021-05-01T07:21:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "bc241898-e273-40e0-948b-38ff4bd8400f",
        "parentId" : "4673aa89-ece7-47c1-8886-6b31826b5c44",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "tests were added. can you show current output and expected.",
        "createdAt" : "2021-05-01T08:29:03Z",
        "updatedAt" : "2021-05-01T08:29:04Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "7c16ee2d-a30b-4561-aaaf-9dc92b57ab51",
        "parentId" : "4673aa89-ece7-47c1-8886-6b31826b5c44",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Do we already have CI with pyarrow 4.0 / nightly? \r\n\r\nDidn't try yet through latest pandas, but just checking the example data from the test with pyarrow:\r\n\r\n```\r\nIn [24]: arr = pa.array([\"om\", None, \"foo_nom\", \"nom\", \"bar_foo\", None, \"foo\", \"regex\", \"rege.\"])\r\n\r\nIn [25]: pc.match_substring_regex(arr, \"^rege.\")\r\nOut[25]: \r\n<pyarrow.lib.BooleanArray object at 0x7fae229d7340>\r\n[\r\n  false,\r\n  null,\r\n  false,\r\n  false,\r\n  false,\r\n  null,\r\n  false,\r\n  true,\r\n  true\r\n]\r\n```\r\n\r\nThe last two values are both True, while the expected test output has False, True.",
        "createdAt" : "2021-05-01T08:37:41Z",
        "updatedAt" : "2021-05-01T08:37:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7ed614ec-0f60-4e32-8a5b-557a32f067cc",
        "parentId" : "4673aa89-ece7-47c1-8886-6b31826b5c44",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Whoops, sorry, I completely missed the `re.escape(pat)`. That of course solves my concern ;)",
        "createdAt" : "2021-05-01T08:38:44Z",
        "updatedAt" : "2021-05-01T08:38:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "40bec0df90b5ab63799515e65fa353e0824f54f0",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +767,771 @@    def _str_startswith(self, pat, na=None):\n        if hasattr(pc, \"match_substring_regex\"):\n            result = pc.match_substring_regex(self._data, \"^\" + re.escape(pat))\n            result = BooleanDtype().__from_arrow__(result)\n            if not isna(na):"
  },
  {
    "id" : "eba3a0e7-a339-474a-8e28-eeb5d76ef854",
    "prId" : 41248,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/41248#pullrequestreview-651531751",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c75db18-000a-424c-8743-57f44246ea42",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we should do this as a more general check i think (e.g. maybe defined a pyarrow_gt_400 or similar to what we do elsewhere rather than rely on checks like this (e.g. create a pyarrow.compat or similar). but let's create an issue and do a followup.",
        "createdAt" : "2021-05-04T16:24:25Z",
        "updatedAt" : "2021-05-04T16:24:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2fa7bed7-e3ac-4fc2-87b5-43701cb709f6",
        "parentId" : "9c75db18-000a-424c-8743-57f44246ea42",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "sgtm",
        "createdAt" : "2021-05-04T18:15:49Z",
        "updatedAt" : "2021-05-04T18:15:50Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "a07c032b10f61f192f8abd3818c9b88d725ce094",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +861,865 @@\n    def _str_len(self):\n        # utf8_length added in pyarrow 4.0.0\n        if hasattr(pc, \"utf8_length\"):\n            result = pc.utf8_length(self._data)"
  },
  {
    "id" : "097be93f-8955-4cbb-aac2-52b575aefd05",
    "prId" : 41281,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/41281#pullrequestreview-651453512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc2b1dca-7344-42e6-add9-e25254b35cbc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see my suggestion elsewhere, let's create these accessors before doing this.",
        "createdAt" : "2021-05-04T16:25:32Z",
        "updatedAt" : "2021-05-04T16:25:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8d663856-5d39-495e-b431-23e1d279c698",
        "parentId" : "dc2b1dca-7344-42e6-add9-e25254b35cbc",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "We can add some variables to `pandas/compat/__init__.py`, similarly as we have for Python and numpy versions.",
        "createdAt" : "2021-05-04T16:47:07Z",
        "updatedAt" : "2021-05-04T16:47:08Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e7e942b6d461e73643d0318b4df8574c62c2f60",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +682,686 @@\n        kwargs = {}\n        if LooseVersion(pa.__version__) < \"3.0.0\":\n            # in pyarrow 2.0.0 skip_null is ignored but is a required keyword and raises\n            # with unexpected keyword argument in pyarrow 3.0.0+"
  },
  {
    "id" : "973c23dd-6099-4920-8fcc-650b741626ac",
    "prId" : 41332,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/41332#pullrequestreview-652470359",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06d7b3a3-574c-4f15-956a-407fcbe437c8",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "we probably don't need the check but maybe faster... will need to check.",
        "createdAt" : "2021-05-05T15:46:04Z",
        "updatedAt" : "2021-05-05T15:46:04Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ef9d2758d3b6c514eaa7dacedd99aa648af4cd6",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +850,854 @@\n        if not pat.endswith(\"$\") or pat.endswith(\"//$\"):\n            pat = pat + \"$\"\n        return self._str_match(pat, case, flags, na)\n"
  }
]