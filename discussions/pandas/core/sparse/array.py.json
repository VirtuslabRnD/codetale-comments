[
  {
    "id" : "a075a512-4041-4d7b-8601-c19b6ef9f279",
    "prId" : 17570,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17570#pullrequestreview-63329684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bce15f8c-bf7f-4d50-b14a-c64f68f8dd85",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "might as well add any as well.",
        "createdAt" : "2017-09-18T12:09:53Z",
        "updatedAt" : "2017-09-28T15:44:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "090f398c072f0d8ec201937cc01b3ac2b78b9a94",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +617,621 @@\n    def all(self, axis=0, *args, **kwargs):\n        \"\"\"\n        Tests whether all elements evaluate True\n"
  },
  {
    "id" : "fa9da0b9-b01e-4625-b0f3-82add5c4b6ad",
    "prId" : 17570,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17570#pullrequestreview-64289424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03bf966e-6202-4668-9b17-7e5bf5b65e16",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a See Also to point to np.all",
        "createdAt" : "2017-09-21T13:48:34Z",
        "updatedAt" : "2017-09-28T15:44:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "090f398c072f0d8ec201937cc01b3ac2b78b9a94",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +622,626 @@        Returns\n        -------\n        all : bool\n\n        See Also"
  },
  {
    "id" : "21076fbf-9c5d-473f-b87a-5d8d6676b26a",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-146138510",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fdcc5c6-37e8-4291-96fe-f5bdfd547828",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Would it make sense to actually only return the values of the index (the `.indices`) and not that actual object (eventually), to limit internal API exposure ?",
        "createdAt" : "2018-08-14T15:04:35Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "55bdf7ba-aaeb-4527-9c04-68b620a3e0ef",
        "parentId" : "3fdcc5c6-37e8-4291-96fe-f5bdfd547828",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I don't think so, as `BlockIndex` doesn't have `.indices` it has `blocks` and `block_lengths` instead.",
        "createdAt" : "2018-08-14T16:06:57Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 467,
    "diffHunk" : "@@ -1,1 +401,405 @@    @property\n    def sp_index(self):\n        return self._sparse_index\n\n    @property"
  },
  {
    "id" : "c1379fe9-327f-4684-9379-297c90b7846d",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-149061551",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51c1bc30-536a-4080-be07-aefa0f4d5b3f",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "`__array_ufunc__` is new in NumPy 1.13, which is older than our minimum supported version.\r\n\r\nIf anyone is interested in making this compatible with older numpy's I'd appreciate help here.\r\n",
        "createdAt" : "2018-08-14T19:05:30Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "4b418aa2-3b31-435f-aea8-bb6e008250c6",
        "parentId" : "51c1bc30-536a-4080-be07-aefa0f4d5b3f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "(I am totally fine with saying for now that this part of pandas needs np >= 1.13)",
        "createdAt" : "2018-08-22T20:59:36Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "5530e499-fcdd-46c4-8689-57a71b81bfbc",
        "parentId" : "51c1bc30-536a-4080-be07-aefa0f4d5b3f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "When would you recommend raising an error? When the sparsearray is created, or when a ufunc is called? Either is possible. I would say when created.",
        "createdAt" : "2018-08-23T18:25:45Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "9e6be3b2-361a-4848-82e3-4bf1b1e020b2",
        "parentId" : "51c1bc30-536a-4080-be07-aefa0f4d5b3f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Ahh, I suppose because of `get_dummies` it would have to be when you call a ufunc... That's unfortunate.",
        "createdAt" : "2018-08-23T18:47:38Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "ca42b11f-dc29-4ecf-ae41-9513605302a3",
        "parentId" : "51c1bc30-536a-4080-be07-aefa0f4d5b3f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Given the importance of Sparse, I've implemented `__array_wrap__`. This necessarily results in a dense ndarray. Should we issue a PerformanceWarning here?",
        "createdAt" : "2018-08-23T19:24:56Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 1452,
    "diffHunk" : "@@ -1,1 +1205,1209 @@    _HANDLED_TYPES = (np.ndarray, numbers.Number)\n\n    def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n        out = kwargs.get('out', ())\n"
  },
  {
    "id" : "38a95b3e-ab65-4a06-866c-6bcb49975866",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-149037249",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a771d2d1-c9ba-4815-81a7-5eefc61fe85d",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "this is a bit a strange repr (don't know whether this a copy-paste error here, or a bug in the repr), where the fill_value is not formatted as float",
        "createdAt" : "2018-08-22T20:58:48Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "bc7f13c5-3a60-4bec-876f-12b3a7eea57d",
        "parentId" : "a771d2d1-c9ba-4815-81a7-5eefc61fe85d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think it's correct (doctest passes). The fill value is not changed here, it's still the integer 0.",
        "createdAt" : "2018-08-23T18:20:19Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 1226,
    "diffHunk" : "@@ -1,1 +920,924 @@        >>> arr.astype(np.dtype('float64'))\n        ... # doctest: +NORMALIZE_WHITESPACE\n        [0, 0, 1.0, 2.0]\n        Fill: 0\n        IntIndex"
  },
  {
    "id" : "f7774e38-e3dd-4bcd-87fc-ac8de1143e4b",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-152042408",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6343a3f-5841-41ae-b9c2-9344d043a9c8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ideally full docstrings",
        "createdAt" : "2018-09-04T12:40:13Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +94,98 @@    SparseArray\n    \"\"\"\n    # type: (SparseArray, SparseArray, Callable, str) -> Any\n    if name.startswith('__'):\n        # For lookups in _libs.sparse we need non-dunder op name"
  },
  {
    "id" : "50eb1132-400e-4393-95d0-042dd5f08fed",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-152220842",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14430690-676c-48d6-a620-7e0610b16bb7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can remove this",
        "createdAt" : "2018-09-04T12:42:05Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dbe6b018-70dd-4862-a876-31e1609a268a",
        "parentId" : "14430690-676c-48d6-a620-7e0610b16bb7",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is still required for older numpy versions not supporting array_ufunc.",
        "createdAt" : "2018-09-04T19:35:23Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 241,
    "diffHunk" : "@@ -1,1 +239,243 @@    \"\"\"\n\n    __array_priority__ = 15\n    _pandas_ftype = 'sparse'\n    _subtyp = 'sparse_array'  # register ABCSparseArray"
  },
  {
    "id" : "67d5fdf5-7a57-463b-af84-9207821e0650",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-162454603",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e91da01c-9f46-481b-a447-c690117753ca",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is likely to be slow, but guess don't care",
        "createdAt" : "2018-10-05T11:26:07Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cf767c91-869b-4598-a77b-a59337558e18",
        "parentId" : "e91da01c-9f46-481b-a447-c690117753ca",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I don't see a great alternative unfortunately. We need a size-mutable container, so that we can stick the `fill_value` entry in the correct place.",
        "createdAt" : "2018-10-08T13:12:52Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 743,
    "diffHunk" : "@@ -1,1 +569,573 @@\n    def unique(self):\n        uniques = list(pd.unique(self.sp_values))\n        fill_loc = self._first_fill_value_loc()\n        if fill_loc >= 0:"
  },
  {
    "id" : "41d82933-8d3b-477c-b039-890206a38e79",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-163675275",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60de3324-40cd-4991-90fa-e6058155e641",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It is returning a 0-dim ndarray right? (I would add that to your type information, as it is quite crucial to understand what this function does)",
        "createdAt" : "2018-10-11T08:42:44Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +53,57 @@\ndef _get_fill(arr):\n    # type: (SparseArray) -> ndarray\n    \"\"\"\n    Create a 0-dim ndarray containing the fill value"
  },
  {
    "id" : "29112323-2470-4d7e-8f41-2a879a846b6c",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-163846204",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "576fed16-1980-4f71-990a-55f4d2bcd217",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Should there be a `copy=False` here for the case that the new dtype is equal to the original dtype?",
        "createdAt" : "2018-10-11T08:44:18Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4fb1037d-ed5f-4f5b-82c0-dac0a071e910",
        "parentId" : "576fed16-1980-4f71-990a-55f4d2bcd217",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Something funny with astype_nansafe and `copy=False`. https://github.com/pandas-dev/pandas/issues/23092 Added a todo.",
        "createdAt" : "2018-10-11T14:30:41Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +110,114 @@        # TODO(GH-23092): pass copy=False. Need to fix astype_nansafe\n        left = left.astype(ltype)\n        right = right.astype(rtype)\n        dtype = ltype.subtype\n    else:"
  },
  {
    "id" : "439fd932-c750-4e62-a1cd-1ad73fb883eb",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-163782039",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02d890fc-f8de-449b-8707-acd149183872",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "We should probably open an issue to deprecate this? \r\nFrom a quick search, this is only used in `sparse/frame.py` to ensure a scalar is broadcasted to the length of the index.",
        "createdAt" : "2018-10-11T08:51:27Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "dd5f2ab7-ccee-4661-b4be-54e646d19e2d",
        "parentId" : "02d890fc-f8de-449b-8707-acd149183872",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "https://github.com/pandas-dev/pandas/issues/23089",
        "createdAt" : "2018-10-11T12:10:21Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 197,
    "diffHunk" : "@@ -1,1 +195,199 @@        `fill_value`.\n    sparse_index : SparseIndex, optional\n    index : Index\n    fill_value : scalar, optional\n        Elements in `data` that are `fill_value` are not stored in the"
  },
  {
    "id" : "bd3ddbc2-9e31-4b9d-af00-e46fd26c4dd2",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-163886968",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5aa0e01-a3fa-4e20-8bd4-42d538d59f8c",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "If this is a sparse dtype, does it override a possibly passed `fill_value` ?",
        "createdAt" : "2018-10-11T08:56:52Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "015b3ce6-03ff-4da9-97ce-f12069ca7ecb",
        "parentId" : "c5aa0e01-a3fa-4e20-8bd4-42d538d59f8c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Apparently `fill_value` takes precedence:\r\n\r\n```\r\nIn [120]: pd.SparseArray([1, 0, 0, 1], fill_value=0, dtype=pd.core.sparse.dtype.SparseDtype('int', fill_value=1))\r\nOut[120]: \r\n[1, 0, 0, 1]\r\nFill: 0\r\nIntIndex\r\nIndices: array([0, 3], dtype=int32)\r\n```\r\n\r\nShould we raise on such a case that only one of both can be specified?",
        "createdAt" : "2018-10-11T08:58:51Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e55d6b42-c57e-4d1d-a226-a9107b10e4b4",
        "parentId" : "c5aa0e01-a3fa-4e20-8bd4-42d538d59f8c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "It's unfortunate that there are so many ways to specify the fill values, but I don't think there's any ambiguity here. A user-provided argument takes precedence over an inferred value. I will clarify this in the docstring.\r\n\r\nThe order is\r\n\r\n1. User-specified `fill_value`\r\n2. `dtype.fill_value` if `fill_value` is None\r\n3. `data.dtype.fill_value` if `data` is a SparseArray and dtype is not a SparseDtype",
        "createdAt" : "2018-10-11T12:15:27Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "5060e99c-2a62-4dad-b63d-b958f42e5057",
        "parentId" : "c5aa0e01-a3fa-4e20-8bd4-42d538d59f8c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But if you do `SparseDtype(int, 1)` the fill value is also user-provided and not inferred. So I would not find it strange to error in such a case, although just clearly documenting it is fine as well.",
        "createdAt" : "2018-10-11T15:47:46Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 236,
    "diffHunk" : "@@ -1,1 +234,238 @@        The dtype to use for the SparseArray. For numpy dtypes, this\n        determines the dtype of ``self.sp_values``. For SparseDtype,\n        this determines ``self.sp_values`` and ``self.fill_value``.\n    copy : bool, default False\n        Whether to explicitly copy the incoming `data` array."
  },
  {
    "id" : "c880983f-2e0d-4ff1-8402-08da798e451d",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-163675275",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a2e692d-8c90-4e6a-a91f-79073baa26d6",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add a docstring?",
        "createdAt" : "2018-10-11T09:19:50Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 694,
    "diffHunk" : "@@ -1,1 +527,531 @@        return self._simple_new(new_values, self._sparse_index, new_dtype)\n\n    def shift(self, periods=1):\n\n        if periods == 0:"
  },
  {
    "id" : "0b20e799-0cbc-4118-b52e-843c7d45db04",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-163887966",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34219e56-c1ad-48ff-8ff0-0a96a058d3f4",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "docstring here as well\r\n\r\n(we should maybe think about how to not duplicate too much. For this one you could in principle take the base class one, and replace ExtensionArray with SparseArray)",
        "createdAt" : "2018-10-11T09:21:45Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "10b6bbda-c74c-47fb-a39d-a5b11ddf9578",
        "parentId" : "34219e56-c1ad-48ff-8ff0-0a96a058d3f4",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I've ignored docstrings that are inherited, when the parent seems fine. For example, I wrote a new fillna docstring since the performance needed to be explained.\r\n\r\nOf the following, do you prefer\r\n\r\n1. Inheriting the docstring as is\r\n2. Inheriting the doctring and doing a string substation of ExtensionArray for `cls.__name__`\r\n3. Manually re-writing the docstring",
        "createdAt" : "2018-10-11T15:29:53Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "9a537a35-58cc-4b6c-91b8-33c9f07b787a",
        "parentId" : "34219e56-c1ad-48ff-8ff0-0a96a058d3f4",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I am fine with inheriting the docstring as is, for this PR, as that seems the simplest (to not further complicate this PR). \r\nWe can then later think how to do this (we will have the same problem for the other arrays)",
        "createdAt" : "2018-10-11T15:49:49Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 742,
    "diffHunk" : "@@ -1,1 +568,572 @@        return np.searchsorted(diff, 2) + 1\n\n    def unique(self):\n        uniques = list(pd.unique(self.sp_values))\n        fill_loc = self._first_fill_value_loc()"
  },
  {
    "id" : "86bb319e-421e-47b4-a24b-183dc9c98189",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-163883270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db64eb0c-6024-4f7d-9f23-1ff1326b158f",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "What is the reason that the take code here is that much expanded compared to before? \r\n(I didn't yet look into detail in this new implementation)",
        "createdAt" : "2018-10-11T09:38:05Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1bd9cdb5-3cf8-4122-92b6-b6be4fccb9e4",
        "parentId" : "db64eb0c-6024-4f7d-9f23-1ff1326b158f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think take was the first thing I wrote back in June or July, so my memory is fuzzy ;) If I had to guess, I would say additional edge-case handling, but I haven't looked closely either.",
        "createdAt" : "2018-10-11T15:40:00Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 924,
    "diffHunk" : "@@ -1,1 +704,708 @@                          **kwargs)\n\n    def _take_with_fill(self, indices, fill_value=None):\n        if fill_value is None:\n            fill_value = self.dtype.na_value"
  },
  {
    "id" : "fb00014b-c51d-440a-846d-9c46ea223082",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-163675275",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d658d851-a4eb-4bff-9aae-9e17762de898",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think the behaviour of this function is completely buggy, and what already buggy (because before it relied on the wrong dense values I suppose)\r\n\r\nEg the above should also still check if there are 0 values in the sparse values as well.\r\n\r\nBut given it was that buggy, should we rather just not change it / deprecate it / remove it?",
        "createdAt" : "2018-10-11T09:57:05Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0c1e638b-3dd9-4aba-b0f7-aa92fbe1ca45",
        "parentId" : "d658d851-a4eb-4bff-9aae-9e17762de898",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Eg \r\n\r\n```\r\nIn [59]: a = pd.SparseArray([1, 0, 2], fill_value=2)\r\n\r\nIn [60]: a.nonzero()\r\nOut[60]: (array([0]),)    # <---- wrong ..\r\n\r\nIn [61]: a.fill_value = 0\r\n\r\nIn [62]: a.nonzero()\r\nOut[62]: (array([0]),)    # <---- actually correct\r\n\r\nIn [63]: pd.__version__\r\nOut[63]: '0.23.4'\r\n```\r\n\r\n```\r\nIn [141]: a = pd.SparseArray([1, 0, 2], fill_value=2)\r\n\r\nIn [142]: a.nonzero()\r\nOut[142]: (array([0], dtype=int32),)    # <---- similarly wrong ..\r\n\r\nIn [143]: a.fill_value = 0\r\n\r\nIn [144]: a.nonzero()\r\nOut[144]: (array([0, 1], dtype=int32),)    # <---- actually more wrong\r\n\r\nIn [148]: pd.__version__\r\n```",
        "createdAt" : "2018-10-11T10:02:46Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 1375,
    "diffHunk" : "@@ -1,1 +1046,1050 @@    def nonzero(self):\n        if self.fill_value == 0:\n            return self.sp_index.to_int_index().indices,\n        else:\n            return self.sp_index.to_int_index().indices[self.sp_values != 0],"
  },
  {
    "id" : "5cf7ca0a-f099-46ce-a2eb-eac1d20513cf",
    "prId" : 22469,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22469#pullrequestreview-148602941",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0445a24-b5b6-4aad-a1a9-07e3bec3fa53",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'm pretty sure this will be unnecessary after #22325.",
        "createdAt" : "2018-08-22T18:04:49Z",
        "updatedAt" : "2018-08-22T18:04:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "10e620580242fe39beb823d5161ba75c52d36c32",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +450,454 @@            # so to avoid recursing we need to unwrap `self` so the\n            # ndarray.__getitem__ implementation is called.\n            return libindex.get_value_at(np.asarray(self), sp_loc)\n\n    @Appender(_index_shared_docs['take'] % _sparray_doc_kwargs)"
  }
]