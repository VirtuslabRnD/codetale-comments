[
  {
    "id" : "59fe113b-dffd-4e9c-b535-67a0dec98dd9",
    "prId" : 21477,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21477#pullrequestreview-141351263",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68f426ab-1837-489e-9eee-8773f49c2816",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string here",
        "createdAt" : "2018-07-29T15:23:13Z",
        "updatedAt" : "2018-08-09T02:14:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4729fc5e2f5bf0c8804318333c9b49f4cc3a1b97",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +2510,2514 @@\n    def _replace_single(self, to_replace, value, inplace=False, filter=None,\n                        regex=False, convert=True, mgr=None, mask=None):\n        \"\"\"\n        Replace elements by the given value."
  },
  {
    "id" : "c73b6a9f-bf57-4718-b917-f6841cc19f58",
    "prId" : 21477,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21477#pullrequestreview-141935956",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49f360e2-3abc-4f92-89b8-d929fa03e2bf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same as above (you *can* make a shared doc-string if you want here)",
        "createdAt" : "2018-07-31T12:50:03Z",
        "updatedAt" : "2018-08-09T02:14:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4729fc5e2f5bf0c8804318333c9b49f4cc3a1b97",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +2618,2622 @@\n        Parameters\n        ----------\n        to_replace : object or pattern\n            Scalar to replace or regular expression to match."
  },
  {
    "id" : "785e00c8-dc38-42cc-a01e-cd5ed083057a",
    "prId" : 21986,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21986#pullrequestreview-141317571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4737b4f7-334c-40bc-9448-32760a92d01b",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "This modification is deep within the internals (block's definition of `take_nd`), and I am not sure how to really add a test for this.",
        "createdAt" : "2018-07-26T00:30:55Z",
        "updatedAt" : "2018-07-28T18:53:13Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "846cc779-954f-4520-9ec7-d7a063aca04d",
        "parentId" : "4737b4f7-334c-40bc-9448-32760a92d01b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this actually isn't used since allow_fill=False",
        "createdAt" : "2018-07-28T13:46:24Z",
        "updatedAt" : "2018-07-28T18:53:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "05e4a36cd7d5c8449e362fc30fca03cf867144e0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1249,1253 @@            fill_value = self.fill_value\n            new_values = algos.take_nd(values, indexer, axis=axis,\n                                       allow_fill=False, fill_value=fill_value)\n        else:\n            fill_value = fill_tuple[0]"
  },
  {
    "id" : "e80b488f-c630-4615-a19b-ae96e1bc7b79",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-162453380",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff8b0c67-28cd-4c3d-b404-e01acce0cc06",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Didn't seem worth making this part of the ExtensionDtype interface.",
        "createdAt" : "2018-08-13T20:11:16Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "ee4c8e5f-0928-46ff-a3fe-d9d26882f242",
        "parentId" : "ff8b0c67-28cd-4c3d-b404-e01acce0cc06",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we have an issue to simply remove all of the ftype stuff. not averse to doing this (here or maybe follow up)",
        "createdAt" : "2018-08-31T10:39:27Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "76319707-08c6-49f4-9068-bc443572dc01",
        "parentId" : "ff8b0c67-28cd-4c3d-b404-e01acce0cc06",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't ``.subtype`` just return ``None`` for arrays such as Integer, Datetime (as opposed to Categorical / Interval) which do have meaningiful subtypes, then can just do this generally?",
        "createdAt" : "2018-10-05T11:16:48Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "25c7aa58-b1ee-4739-8b27-0b64a5b694c1",
        "parentId" : "ff8b0c67-28cd-4c3d-b404-e01acce0cc06",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "https://github.com/pandas-dev/pandas/issues/22224",
        "createdAt" : "2018-10-08T12:47:28Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +344,348 @@    @property\n    def ftype(self):\n        if getattr(self.values, '_pandas_ftype', False):\n            dtype = self.dtype.subtype\n        else:"
  },
  {
    "id" : "0ab9e920-9b4a-4823-a615-3937203ee268",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-145848270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "404812ac-97c5-428f-9b46-9c034944a556",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Previously `.astype` didn't dispatch to `ExtensionArray.astype`. We would call `.get_values` first. I can split these changes out to a separate PR.",
        "createdAt" : "2018-08-13T20:12:12Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "2afff3e3-b198-4de0-a5d2-f6f9ad18ac22",
        "parentId" : "404812ac-97c5-428f-9b46-9c034944a556",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Working on a SetArray based on EA - would need exactly this. ",
        "createdAt" : "2018-08-13T21:43:24Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +636,640 @@            if dtype == np.object_:\n                klass = ObjectBlock\n            elif is_extension_array_dtype(dtype):\n                klass = ExtensionBlock\n"
  },
  {
    "id" : "1971c201-8ab6-4899-9f27-24985c6d4f25",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-162854354",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff813d2e-13c4-47bb-b297-16899d1e8429",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe we should have ``is_extension_array_scalar_dtype(value)`` to make this more specific?",
        "createdAt" : "2018-08-31T10:40:22Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ff223350-059c-4e41-88a0-ba95f7b5c7e6",
        "parentId" : "ff813d2e-13c4-47bb-b297-16899d1e8429",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "What that would look like for 3rd party extension arrays? I suppose we could look through the `.type` of all the types registered with pandas, but registering is optional...",
        "createdAt" : "2018-10-08T18:47:54Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "5f419d74-0f38-4ec2-bedf-7837ef794a01",
        "parentId" : "ff813d2e-13c4-47bb-b297-16899d1e8429",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use registering is optional, but doesn't matter here, my point is we dont' have a way of detecting scalar extension types. (meaning a scalar defined as part of an extension type). we in theory should never see, but I would guess this leaks thru",
        "createdAt" : "2018-10-09T12:11:45Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +2317,2321 @@    def should_store(self, value):\n        return (issubclass(value.dtype.type, np.timedelta64) and\n                not is_extension_array_dtype(value))\n\n    def to_native_types(self, slicer=None, na_rep=None, quoting=None,"
  },
  {
    "id" : "080d822d-676c-4405-8bea-a0d3b049c5da",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-161988023",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83fb43ed-44f7-41a4-8476-4f6f0a6359e5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see coment above",
        "createdAt" : "2018-10-05T11:17:12Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +2094,2098 @@    @property\n    def _ftype(self):\n        return getattr(self.values, '_pandas_ftype', Block._ftype)\n\n"
  },
  {
    "id" : "ecb186c9-a911-46b1-91ca-8b66ba133bc3",
    "prId" : 22343,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22343#pullrequestreview-146447194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@TomAugspurger are you really really sure this is needed? \r\nall of this already works with IntegerArray so not t really sure what problem you are trying to solve\r\n",
        "createdAt" : "2018-08-15T11:55:02Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c212ce2d-3df7-4d1a-ac29-71513f01e323",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Needed for https://github.com/pandas-dev/pandas/pull/22325/.\r\n\r\nSparse has special semantics for `.astype`ing, `Series[sparse].astype(np.dtype)` is interpreted as astyping the underlying `.values.sp_values`, rather than densifying and asytping. I'd like to deprecate this, but that's another matter.\r\n\r\nIn general though, it seems like EAs should have a say in how they're astyped, rather than always going through `.get_values`.",
        "createdAt" : "2018-08-15T12:22:47Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "2465ee07-b60a-4efd-a72c-80702221e950",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we already do this is my point ",
        "createdAt" : "2018-08-15T12:27:42Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3e5ea92f-f28c-448e-9d33-b4bd64d104aa",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Not on master? That hit's https://github.com/pandas-dev/pandas/blob/master/pandas/core/internals/blocks.py#L652, which converts to an ndarray, before ever calling the extension array's astype.",
        "createdAt" : "2018-08-15T12:31:20Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c9c1e718-7fde-45ca-beb6-21a7dc8c72da",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "At least, my new tests fail on master without these changes. I'm not sure if / how IntegerArray is being handled differently.",
        "createdAt" : "2018-08-15T12:34:09Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "71252207-e738-404c-9ff6-7aaebf1598d8",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "We don't already \"do\" this (depending on what you mean with \"do\" .. :-))\r\n\r\nThe reason this already works correctly for integer dtypes, is because we are converting the values to an array, and then pass this array to the dtypes array constructor (in case of an EA dtype). \r\n\r\nBut as Tom tries to argue, always converting to an ndarray (which is what `get_values` does) is not necessarily a good idea. It might not work (in case of sparse), or can also less efficient (what is actually the case for the integers -> eg when going from Int64 -> Int32, we first convert the Int64 EA to object ndarray to then convert (and infer missing values) again to EA of Int32. This could be done much more efficient).",
        "createdAt" : "2018-08-15T12:51:58Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "25b49ef3-7301-4130-96cc-a7439db0af63",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> [about Int EA astyping] This could be done much more efficient\r\n\r\nAnd note that this (the efficient shortcut for going from one int EA to another) is actually implemented in `IntegerArray.astype`. We only never call this in case of `Series(EA).astype(..)` due to the current implementation.",
        "createdAt" : "2018-08-15T12:57:38Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "67595ac8-3310-408d-946d-48186030ebdf",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i am not arguing that we shouldn’t do this\r\nthe implementation is way too convoluted currently",
        "createdAt" : "2018-08-15T13:00:51Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2ce85650-7b1f-4cc5-b0ba-48a93405fd6a",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "do you mean the current code in master or this PR? \r\n",
        "createdAt" : "2018-08-15T13:04:16Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "84ab879e-fd9c-4338-ae7a-83987a16ae56",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this PR\r\n\r\nthere is a ton of code in astype to dispatch to extension types already\r\nthis adds yet another branch ",
        "createdAt" : "2018-08-15T13:06:34Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2533c08c-5482-44ed-b359-467b07a3c568",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you point to this \"ton of code\"? I don't see any other dispatch to EAs. \r\nWhat is done is the generic conversion to array and then the use of `astype_nansafe` (which has a dispatch to EAs, but for the target EA dtype, not for the calling EA dtype)",
        "createdAt" : "2018-08-15T13:11:51Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "21d34ac6-3084-428d-94a3-696000f1688e",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "It's a 2 line change, this extra if condition. Which of those two lines is the convoluted one?",
        "createdAt" : "2018-08-15T13:30:23Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "83130ecd-8c74-4d87-b854-f8fcdb113c4e",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, I could swear I add an ``.is_extension`` branch already, that's why this looks weird. In any event this has lots of if/then condition. Please make a note / issue to clean this up.",
        "createdAt" : "2018-08-15T13:39:41Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2606d02bb738fa914d48d5b460725b506d8e0a0a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +638,642 @@            if values is None:\n\n                if self.is_extension:\n                    values = self.values.astype(dtype)\n                else:"
  },
  {
    "id" : "7107158b-47ce-4c2f-9b38-70244c3475b2",
    "prId" : 22387,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22387#pullrequestreview-148459399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91dca338-4142-4fe3-bf71-cc852b7f74f2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "bonus points for the Parameters :> (future PR ok too)",
        "createdAt" : "2018-08-22T12:33:42Z",
        "updatedAt" : "2018-08-22T12:33:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5b556d77466ae317c4772628c1f5ef4392b1bad",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +2075,2079 @@        Dispatches to underlying ExtensionArray and re-boxes in an\n        ExtensionBlock.\n        \"\"\"\n        # type: (int, Optional[BlockPlacement]) -> List[ExtensionBlock]\n        return [self.make_block_same_class(self.values.shift(periods=periods),"
  },
  {
    "id" : "1c082896-e40d-4b02-bd9e-01a84a8d789e",
    "prId" : 22699,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22699#pullrequestreview-156349074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0d6264f-6f95-4ef0-811d-63d399ce0f29",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does the context manager restore all of the warnings filters after? (I guess that is the point?)",
        "createdAt" : "2018-09-18T11:41:14Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "96556d61-5491-4c14-829a-4a4a42282322",
        "parentId" : "b0d6264f-6f95-4ef0-811d-63d399ce0f29",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah, that's the idea. Ideally libraries shouldn't modify the global warnings registry without good cause.",
        "createdAt" : "2018-09-18T12:51:39Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4990fc2d984b536e5c7c97ad55d4f550ae661867",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3491,3495 @@        # we ignore ComplexWarning here\n        with warnings.catch_warnings(record=True):\n            warnings.simplefilter(\"ignore\", np.ComplexWarning)\n            nn_at = nn.astype(v.dtype)\n"
  },
  {
    "id" : "339d3878-bf49-4f27-b004-023da1d72dc2",
    "prId" : 22869,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22869#pullrequestreview-162784461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a08672dc-fe57-4c60-a74e-1d938bdb33c1",
        "parentId" : null,
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Changed the message not to raise `AttributeError`.",
        "createdAt" : "2018-10-09T09:08:01Z",
        "updatedAt" : "2018-10-10T01:38:53Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb849caab84551790cae6f66c18f341758c1ead4",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +676,680 @@                raise TypeError(\n                    \"cannot set astype for copy = [{copy}] for dtype \"\n                    \"({dtype} [{shape}]) to different shape \"\n                    \"({newb_dtype} [{newb_shape}])\".format(\n                        copy=copy, dtype=self.dtype.name,"
  },
  {
    "id" : "46bbab82-d7e2-4d11-94ea-dab8533519b3",
    "prId" : 23260,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23260#pullrequestreview-166763754",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6330ac2c-8bef-497d-9758-418cfe56a699",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is the only place where the passed `mgr` is ever used.  I think we can get `axes` out too, but am holding off on that.",
        "createdAt" : "2018-10-20T21:49:12Z",
        "updatedAt" : "2018-10-23T03:13:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "63dadd1a07d7a1d97ae5977cba05b6dbbb322f7a",
    "line" : 188,
    "diffHunk" : "@@ -1,1 +1552,1556 @@                ax = Float64Index([qs])\n            else:\n                ax = axes[0]\n\n            if is_empty:"
  },
  {
    "id" : "38b0879b-d89c-49bd-8149-cf29df69b38d",
    "prId" : 23284,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23284#pullrequestreview-168796756",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a58468c-9f30-4acf-b664-7cf9fe2c7c96",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see my comment in other PR (about stack)",
        "createdAt" : "2018-10-26T00:44:28Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6c463fc7-d277-4f7a-bd6e-40b2424f54a5",
        "parentId" : "5a58468c-9f30-4acf-b664-7cf9fe2c7c96",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Replying here, since I'm working on this first\r\n\r\n> so maybe should just move the is_extension_array_dtype up to first, and add a is_extension_dtype(self.values) test as well (should encompas your is_sparse check) and is more general\r\n\r\nDoing the extension type check first doesn't quite work. In the Sparse case, we have `self.values` being sparse, but dtype is `'object'`. For normal EAs, we want an ObjectBlock here, since `EA.astype(object)` will return an ndarray of objects.\r\n\r\nUnfortunately, sparse is different, since `SparseArray.astype(object)` will return a SparseArray.",
        "createdAt" : "2018-10-26T12:22:46Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "56e5f2fc31669e6708ffb15340da91d6e9e696e3",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +635,639 @@\n        if klass is None:\n            if is_sparse(self.values):\n                # special case sparse, Series[Sparse].astype(object) is sparse\n                klass = ExtensionBlock"
  },
  {
    "id" : "31b94c0f-4cc3-4aa0-942c-2d984b135d3e",
    "prId" : 23284,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23284#pullrequestreview-168799728",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a58bfe3-4f36-4a47-9ec2-04f8e16fb297",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string (or does it share)?",
        "createdAt" : "2018-10-26T00:45:43Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "793fbf79-069a-4edd-8762-ba0bebd36181",
        "parentId" : "6a58bfe3-4f36-4a47-9ec2-04f8e16fb297",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The inherited one OK. I'm going to leave a comment explaining why we override.",
        "createdAt" : "2018-10-26T12:31:28Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "56e5f2fc31669e6708ffb15340da91d6e9e696e3",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +2003,2007 @@        # Instead, we unstack an ndarray of integer positions, followed by\n        # a `take` on the actual values.\n        dummy_arr = np.arange(n_rows)\n        dummy_unstacker = functools.partial(unstacker_func, fill_value=-1)\n        unstacker = dummy_unstacker(dummy_arr)"
  },
  {
    "id" : "8e337e09-2232-43a7-a374-979c7517e301",
    "prId" : 23284,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23284#pullrequestreview-168801534",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d36c7b3-6650-483f-bfef-044fcc0b5677",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "would not this generically work for all unstacking/ (e.g. what if you make this the super method)?",
        "createdAt" : "2018-10-26T00:46:59Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ef625ef2-0d0c-4fb2-afa8-17f98d5b885d",
        "parentId" : "6d36c7b3-6650-483f-bfef-044fcc0b5677",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think this is slower in general. It's necessarily slower for NumPy types, since you have to do the reshaping / unstack on the ndarray of positions anyway.\r\n\r\nThe hope is that the cost of the additional `take` per column is offset by not converting to an ndarray[object] in the first place.\r\n\r\nWorking on benchmarks now.",
        "createdAt" : "2018-10-26T12:36:28Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "56e5f2fc31669e6708ffb15340da91d6e9e696e3",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +2008,2012 @@\n        new_placement, new_values, mask = self._get_unstack_items(\n            unstacker, new_columns\n        )\n"
  },
  {
    "id" : "d44647fd-f819-48c2-a89c-399dd642edca",
    "prId" : 23601,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23601#pullrequestreview-173713738",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "666cd383-ec82-4c8d-a226-95396c7681c0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is a pretty opaque place to put this, but i get it. Did you add to the deprecations list?",
        "createdAt" : "2018-11-11T14:57:14Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "50e7d1ad-d1f6-42d2-9649-6c0c80fcc575",
        "parentId" : "666cd383-ec82-4c8d-a226-95396c7681c0",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Fortunately, it's the only place we call it, so we can do this. It's added to the list.",
        "createdAt" : "2018-11-11T20:42:47Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad113b374641b6eb1f0cb7b28d7d38e24099902",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1916,1920 @@\n    def formatting_values(self):\n        # Deprecating the ability to override _formatting_values.\n        # Do the warning here, it's only user in pandas, since we\n        # have to check if the subclass overrode it."
  },
  {
    "id" : "1029f60d-2859-4c48-a93b-3cb7fad74cbf",
    "prId" : 24024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24024#pullrequestreview-185150062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8ba4ec2-0c01-4ed6-9267-c695f7287b40",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This needs to set the array's `freq` to `None` (and somehow for any other DTAs that share data with it)",
        "createdAt" : "2018-12-06T18:17:47Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "4c8ab88b-3204-42bd-aa38-9faebd1c06d1",
        "parentId" : "d8ba4ec2-0c01-4ed6-9267-c695f7287b40",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This calls `DatetimeArray.__setitem__`, which clears the freq.",
        "createdAt" : "2018-12-14T15:12:29Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "2436214219fc116239640889715c9bc6575f571b",
    "line" : 300,
    "diffHunk" : "@@ -1,1 +3150,3154 @@            )\n\n    def setitem(self, indexer, value):\n        # https://github.com/pandas-dev/pandas/issues/24020\n        # Need a dedicated setitem until #24020 (type promotion in setitem"
  },
  {
    "id" : "2fe3f04d-6110-41c8-8331-05fb90f9d312",
    "prId" : 24024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24024#pullrequestreview-186322088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69265b0a-22d4-4dcb-b85f-6b2fd833e99b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what?",
        "createdAt" : "2018-12-13T01:34:42Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "59327d70-c718-433c-83fd-202636a4e603",
        "parentId" : "69265b0a-22d4-4dcb-b85f-6b2fd833e99b",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This fixes the bug for `DataFrame.values` on a homogenous 1-column dataframe.",
        "createdAt" : "2018-12-13T04:11:37Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "3ef6e69c-351a-40c8-9f21-c4ae28106a2c",
        "parentId" : "69265b0a-22d4-4dcb-b85f-6b2fd833e99b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use _block_shape",
        "createdAt" : "2018-12-13T12:58:18Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "132bf709-6202-464a-a2a5-7d027a994d92",
        "parentId" : "69265b0a-22d4-4dcb-b85f-6b2fd833e99b",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Seems like that won't work. `_block_shape` skips EAs https://github.com/pandas-dev/pandas/issues/23023",
        "createdAt" : "2018-12-13T16:00:50Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "20cca5e0-457d-4b0d-9b32-8ddbd07cc034",
        "parentId" : "69265b0a-22d4-4dcb-b85f-6b2fd833e99b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add why you need to do this",
        "createdAt" : "2018-12-18T23:20:12Z",
        "updatedAt" : "2019-01-02T16:41:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2436214219fc116239640889715c9bc6575f571b",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +3010,3014 @@        values = np.asarray(values)\n\n        if self.ndim == 2:\n            # Ensure that our shape is correct for DataFrame.\n            # ExtensionArrays are always 1-D, even in a DataFrame when"
  },
  {
    "id" : "caa75089-c25a-4940-aae0-0a5920016991",
    "prId" : 24114,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24114#pullrequestreview-183198505",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f595e91-4627-4f3d-8eef-4cbc295f60f5",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Without this, we fail in the\r\n\r\n```python\r\n            result = self._holder._from_sequence(\r\n                 np.where(cond, self.values, other),\r\n                 dtype=dtype,\r\n```\r\n\r\nsince the `where` may change the dtype, if NaN is introduced.\r\n\r\n\r\nImplementing `SparseArray.__setitem__` would allow us to remove this block.",
        "createdAt" : "2018-12-07T17:22:19Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "43550cf9-4bc9-4298-bb7a-43896040c500",
        "parentId" : "8f595e91-4627-4f3d-8eef-4cbc295f60f5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this should be an overriding method in Sparse then, not here",
        "createdAt" : "2018-12-07T21:09:39Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8322bef7-8599-4eed-8a97-cbdd900604a6",
        "parentId" : "8f595e91-4627-4f3d-8eef-4cbc295f60f5",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We don't have a SparseBlock anymore. I can add one back if you want, but I figured it'd be easier not to since implementing `SparseArray.__setitem__` will remove the need for this, and we'd just have to remove SparseBlock again.",
        "createdAt" : "2018-12-07T22:01:12Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "6304ad31-1aff-4956-9ad8-1226e137dfee",
        "parentId" : "8f595e91-4627-4f3d-8eef-4cbc295f60f5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is pretty hacky. This was why we had originally a ``.get_values()`` methon on Sparse to do things like this. We need something to give back the underlying type of the object, which is useful for Categorical as well. Would rather create a generalized soln than hack it like this.",
        "createdAt" : "2018-12-09T14:15:02Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4aa90064-7643-4dfc-9fdb-fc6727f6a304",
        "parentId" : "8f595e91-4627-4f3d-8eef-4cbc295f60f5",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Actually, we don't need this. I think we can just re-infer the dtype from the output of `np.where`.",
        "createdAt" : "2018-12-09T20:38:48Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "fdcb623c-e35d-43b6-84e5-d7ceb0b4a623",
        "parentId" : "8f595e91-4627-4f3d-8eef-4cbc295f60f5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so is this changing?",
        "createdAt" : "2018-12-10T13:07:19Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "381fecd5-fe1e-4d72-8e52-8b4ec7a297bd",
        "parentId" : "8f595e91-4627-4f3d-8eef-4cbc295f60f5",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Changing from master? Yes, in the sense that it'll return a SparseArray. But it still densifies when `np.where` is called.\r\n\r\nIf you mean \"is this changing in the future\", yes it'll be removed when `SparseArray.__setitem__` is implemented.",
        "createdAt" : "2018-12-10T13:12:40Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f29d23b4-81bd-4382-83f7-8c0de3f8f67a",
        "parentId" : "8f595e91-4627-4f3d-8eef-4cbc295f60f5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh ok, can you add a TODO comment",
        "createdAt" : "2018-12-10T14:04:26Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "539d3cb5aec33eb5fc7534eb09b6f0715a809abc",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +1993,1997 @@            other = self.dtype.na_value\n\n        if is_sparse(self.values):\n            # TODO(SparseArray.__setitem__): remove this if condition\n            # We need to re-infer the type of the data after doing the"
  },
  {
    "id" : "f7fcfe30-82c4-4026-9a2f-4857b6a3cbcd",
    "prId" : 24114,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24114#pullrequestreview-182980103",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "077809e3-d0fd-456c-ad22-3668cd42331e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some comments here",
        "createdAt" : "2018-12-09T14:13:43Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "539d3cb5aec33eb5fc7534eb09b6f0715a809abc",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1974,1978 @@            other = other.array\n\n        elif isinstance(other, ABCDataFrame):\n            # ExtensionArrays are 1-D, so if we get here then\n            # `other` should be a DataFrame with a single column."
  },
  {
    "id" : "0442f831-cd61-4ba6-929b-84eb38ee6d95",
    "prId" : 24114,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24114#pullrequestreview-183198505",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abd4efda-360b-40a9-b2a0-265cd2abed16",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add TODO(EA) or someting here so we know to remove this",
        "createdAt" : "2018-12-10T14:04:09Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "539d3cb5aec33eb5fc7534eb09b6f0715a809abc",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +2713,2717 @@              try_cast=False, axis=0, transpose=False):\n        # TODO(CategoricalBlock.where):\n        # This can all be deleted in favor of ExtensionBlock.where once\n        # we enforce the deprecation.\n        object_msg = ("
  },
  {
    "id" : "e34732d0-b0d2-419b-bcc2-70b5651441ce",
    "prId" : 24149,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24149#pullrequestreview-182862671",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20f2894c-7b50-48cd-b742-e37d949cf9d9",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I have no idea if this is going to break things.\r\n\r\nOh and I notice that the comment is out of date now.",
        "createdAt" : "2018-12-07T20:32:58Z",
        "updatedAt" : "2018-12-07T20:34:07Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "3be6e0dd9e848c90306e82f7333947efb4aa472f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1888,1892 @@\n        # if we are a 1-dim object, then always place at 0\n        if self.ndim == 1 and new_mgr_locs is None:\n            new_mgr_locs = [0]\n        else:"
  },
  {
    "id" : "3645295a-da83-4c83-9e25-9a22be1a5755",
    "prId" : 24227,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24227#pullrequestreview-185385819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "043115d7-18e9-45c1-9d50-062baed2d7e5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is extract_numpy ever not True?",
        "createdAt" : "2018-12-15T22:03:48Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b67092f9-239d-48ff-b025-616bc6a60a34",
        "parentId" : "043115d7-18e9-45c1-9d50-062baed2d7e5",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yes, when we need the EA-like behavior, e.g. in reshape: https://github.com/pandas-dev/pandas/pull/24227/files#diff-fef81b7e498e469973b2da18d19ff6f3R437",
        "createdAt" : "2018-12-16T12:38:02Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f50a57a7468068e191f23683283d55857d9729",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1979,1983 @@            other = other.iloc[:, 0]\n\n        other = extract_array(other, extract_numpy=True)\n\n        if isinstance(cond, ABCDataFrame):"
  },
  {
    "id" : "1e1c3649-d7ef-427f-aca7-e64b6735b0ad",
    "prId" : 24596,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24596#pullrequestreview-189480685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d28942a0-93e1-48ce-8b31-5639ff829488",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is getting super messy",
        "createdAt" : "2019-01-04T17:48:35Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "da1761de-7412-46e5-9f82-d0dc05c59065",
        "parentId" : "d28942a0-93e1-48ce-8b31-5639ff829488",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Agreed. A proper fix is updating `_try_coerce_args` / `get_values`, which I think @jbrockmendel is working on. But this is necessary now to avoid the warning / conversion to object dtype.",
        "createdAt" : "2019-01-04T18:30:04Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "d7820461-c508-4592-9df2-fb37dff1cf53",
        "parentId" : "d28942a0-93e1-48ce-8b31-5639ff829488",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "None of the branches I have in progress would help here.\r\n\r\nAllowing for DatetimeArray to be reshaped to (1, nrows) would.",
        "createdAt" : "2019-01-04T18:37:56Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9026de86-0f97-4d51-96f3-6ff2e411d31e",
        "parentId" : "d28942a0-93e1-48ce-8b31-5639ff829488",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a TODO here",
        "createdAt" : "2019-01-04T18:40:25Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f4fbde4472700525959dbb7255185e36155f21",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1448,1452 @@        Block\n        \"\"\"\n        if self.is_datetimetz:\n            # TODO: cleanup this special case.\n            # We need to operate on i8 values for datetimetz"
  },
  {
    "id" : "8ce6e5e4-3371-4ce3-9ed0-3df44e54011d",
    "prId" : 24596,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24596#pullrequestreview-189481540",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94fa05af-a896-4d86-bf8c-57904e8aa848",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "There is a `# TODO(DatetimeBlock): remove` comment on DatetimeLikeBlockMixin.  Can this be merged into that method and the comment removed?",
        "createdAt" : "2019-01-04T18:39:14Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f95dc7cc-cf54-4fcb-b0a6-7728d248bf6b",
        "parentId" : "94fa05af-a896-4d86-bf8c-57904e8aa848",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "That should be doable, (here or elsewhere)\r\n\r\nIIUC, DatetimeBlock would fall back to Block.to_dense and use `.values.view()`, while DatetimeTZBlock would fall back to ExtensionBlock and use `np.asarray(self.values)`.",
        "createdAt" : "2019-01-04T18:42:15Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f4fbde4472700525959dbb7255185e36155f21",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +2339,2343 @@        return values\n\n    def to_dense(self):\n        # we request M8[ns] dtype here, even though it discards tzinfo,\n        # as lots of code (e.g. anything using values_from_object)"
  },
  {
    "id" : "59a6ad8c-fc88-452c-a73b-1b7718bcff83",
    "prId" : 24694,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24694#pullrequestreview-191305565",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca2a476c-8f0e-42e5-b875-07b7f8d2245e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is an api breaking change, not sure its easy nor desirable to actually do this",
        "createdAt" : "2019-01-10T12:10:51Z",
        "updatedAt" : "2019-01-10T16:45:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b4b75398-0ecc-4f2d-905e-5728995f8691",
        "parentId" : "ca2a476c-8f0e-42e5-b875-07b7f8d2245e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> not sure its easy nor desirable to actually do this\r\n\r\n\"easy\" seems clear, since this PR already does it with an 11-line diff.  Why wouldn't it be desirable?  It is hugely inconsistent with how we treat ints in td64 everywhere else.",
        "createdAt" : "2019-01-10T15:15:59Z",
        "updatedAt" : "2019-01-10T16:45:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bffc5fc4-6b55-4063-85d8-d8bb65bdef6c",
        "parentId" : "ca2a476c-8f0e-42e5-b875-07b7f8d2245e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "it’s a user facing api change",
        "createdAt" : "2019-01-10T15:30:43Z",
        "updatedAt" : "2019-01-10T16:45:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5d7b247b-acf4-405a-adf9-9e5fdf69c907",
        "parentId" : "ca2a476c-8f0e-42e5-b875-07b7f8d2245e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We can deprecate it pretty easily too right? Say that they should pass `.fillna(pd.Timestamp(val, unit='s'))` if they want to keep the old behavior?",
        "createdAt" : "2019-01-10T15:55:58Z",
        "updatedAt" : "2019-01-10T16:45:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "d9408329-b9ae-4555-9d50-90f2488d82d4",
        "parentId" : "ca2a476c-8f0e-42e5-b875-07b7f8d2245e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe we should eventually just raise on integers rather than just change the interpretation. I think thats a bit less flexibile but more type strict (so just re-word deprecation warning & note)",
        "createdAt" : "2019-01-10T16:38:31Z",
        "updatedAt" : "2019-01-10T16:45:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "24556081-5f8a-4773-800a-9afc40f9dfaa",
        "parentId" : "ca2a476c-8f0e-42e5-b875-07b7f8d2245e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "It would allow us to use TimedeltaArray.fillna more directly",
        "createdAt" : "2019-01-10T16:42:00Z",
        "updatedAt" : "2019-01-10T16:45:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d61a0932-6e84-44e3-9df4-e3371aa4eed3",
        "parentId" : "ca2a476c-8f0e-42e5-b875-07b7f8d2245e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "great",
        "createdAt" : "2019-01-10T16:47:07Z",
        "updatedAt" : "2019-01-10T16:47:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9cb0aba7be5b65366ad76a57783fa87b3e57f74",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2500,2504 @@\n        # allow filling with integers to be\n        # interpreted as nanoseconds\n        if is_integer(value) and not isinstance(value, np.timedelta64):\n            # Deprecation GH#24694, GH#19233"
  },
  {
    "id" : "db7d51ca-de05-4e50-9e81-36717bc2ebaa",
    "prId" : 24695,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24695#pullrequestreview-191268912",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9b3a049-312e-4ee9-8c8e-b938aa82724c",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "someone more familiar with this than me may want to double-check if these 7 lines are still needed.",
        "createdAt" : "2019-01-10T04:07:06Z",
        "updatedAt" : "2019-01-10T15:13:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ceb3f5b6-d1dd-422c-843f-e13a9ee77013",
        "parentId" : "f9b3a049-312e-4ee9-8c8e-b938aa82724c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes @TomAugspurger recently modified this for Sparse",
        "createdAt" : "2019-01-10T15:39:59Z",
        "updatedAt" : "2019-01-10T15:39:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a70990d28d07accbb50010d2f7c972c14432c2c7",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +607,611 @@            klass = ObjectBlock\n        elif is_extension_array_dtype(dtype):\n            klass = ExtensionBlock\n\n        try:"
  },
  {
    "id" : "91bf0d49-1a60-4977-995e-20ade7aa337e",
    "prId" : 24792,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24792#pullrequestreview-192941219",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f7969b6-bc9c-41d1-8cc9-aa69f6fb4cb7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why would u do this here and not in array_equivalent",
        "createdAt" : "2019-01-16T01:07:18Z",
        "updatedAt" : "2019-01-16T01:07:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "87048ddb-4ed0-4f4e-8c71-a28cc274f95e",
        "parentId" : "6f7969b6-bc9c-41d1-8cc9-aa69f6fb4cb7",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Because array_equivalent's docstring specifically says it assumes it is dealing with numpy arrays",
        "createdAt" : "2019-01-16T01:30:46Z",
        "updatedAt" : "2019-01-16T01:30:46Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0950695dde4674ed6d39aa72ef3239c3091d4ca",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2467,2471 @@\n    def equals(self, other):\n        # override for significant performance improvement\n        if self.dtype != other.dtype or self.shape != other.shape:\n            return False"
  },
  {
    "id" : "f875616e-f12e-4a44-8f80-0a14d5ba231c",
    "prId" : 25246,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25246#pullrequestreview-201882718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04acd0f7-763c-4b00-8b98-b6c8e4c172cc",
        "parentId" : null,
        "authorId" : "7e49d4d0-898e-47b4-910d-64f38d46a4b1",
        "body" : "I believe the check `if m is not None` on the following line (1121) and the subsequent raise on line 1132 are now unnecessary, and can be removed.  I'd appreciate any second opinions on that.",
        "createdAt" : "2019-02-09T18:53:09Z",
        "updatedAt" : "2019-02-11T12:36:21Z",
        "lastEditedBy" : "7e49d4d0-898e-47b4-910d-64f38d46a4b1",
        "tags" : [
        ]
      },
      {
        "id" : "98757c2e-ae62-4cf9-be5e-a366e96b9263",
        "parentId" : "04acd0f7-763c-4b00-8b98-b6c8e4c172cc",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I'm all for removing it, so long as we are sure that we can't get `None` ever returned for `m`.",
        "createdAt" : "2019-02-09T22:49:08Z",
        "updatedAt" : "2019-02-11T12:36:21Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "51dcc255-a901-4a6d-96d7-fdab60e5d800",
        "parentId" : "04acd0f7-763c-4b00-8b98-b6c8e4c172cc",
        "authorId" : "7e49d4d0-898e-47b4-910d-64f38d46a4b1",
        "body" : "Great.  `missing.clean_interp_method` will not return None; if its `method` argument is None, it will raise (line 105 of missing.py below):\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/5f73594d49ea06ada4c6779006c00aaf41935595/pandas/core/missing.py#L95-L108",
        "createdAt" : "2019-02-09T23:46:52Z",
        "updatedAt" : "2019-02-11T12:36:21Z",
        "lastEditedBy" : "7e49d4d0-898e-47b4-910d-64f38d46a4b1",
        "tags" : [
        ]
      }
    ],
    "commit" : "69dd362aff411f2824a7dc8ae5681177dde96bb9",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1118,1122 @@        # validate the interp method\n        m = missing.clean_interp_method(method, **kwargs)\n\n        r = check_int_bool(self, inplace)\n        if r is not None:"
  },
  {
    "id" : "8b5ef75c-bb55-4b7f-8f16-0e7d87188f4b",
    "prId" : 25644,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25644#pullrequestreview-212626997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a32adbf6-52d6-4c0b-9c3e-8bda819cecfa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are both of these locations hit by your tests?",
        "createdAt" : "2019-03-10T22:38:25Z",
        "updatedAt" : "2019-03-12T20:45:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "97732b72-63c5-4167-b665-63e0ca19e5f4",
        "parentId" : "a32adbf6-52d6-4c0b-9c3e-8bda819cecfa",
        "authorId" : "3cf21736-8210-430b-9ff1-610530ed90f8",
        "body" : "Yes they are",
        "createdAt" : "2019-03-10T22:55:21Z",
        "updatedAt" : "2019-03-12T20:45:13Z",
        "lastEditedBy" : "3cf21736-8210-430b-9ff1-610530ed90f8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f32163cce85cec7ae4fa71b46e6f940e385adaa8",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +3211,3215 @@                nv[m] = nn_at\n                return nv\n    except (ValueError, IndexError, TypeError, OverflowError):\n        pass\n"
  },
  {
    "id" : "b46e5352-02d6-471a-a182-8869d6a1bcfa",
    "prId" : 25844,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25844#pullrequestreview-218023562",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec13acaa-8e9a-4884-9ff2-1a57c73bed7b",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This was kind of annoying to fix some syntax issues and make this work with LINT so I just converted to new syntax to avoid hassle",
        "createdAt" : "2019-03-23T03:04:14Z",
        "updatedAt" : "2019-03-26T13:55:30Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "eeb266eb21e84cc8d3c11c342167d92f8a61fc39",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1828,1832 @@\n    def shift(self,\n              periods: int,\n              axis: libinternals.BlockPlacement = 0,\n              fill_value: Any = None) -> List['ExtensionBlock']:"
  },
  {
    "id" : "7ec8081b-db36-4ab6-829f-3fec9ab48b52",
    "prId" : 26372,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26372#pullrequestreview-236808725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff0697ee-2dae-4eec-a9a0-57c8394a1f7f",
        "parentId" : null,
        "authorId" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "body" : "This threw this error because in this class `_can_hold_na` was a fixed boolean variable and in the other mixin it's a property method:\r\n`pandas/core/internals/blocks.py:2200: error: Definition of \"_can_hold_na\" in base class \"ExtensionBlock\" is incompatible with definition in base class \"DatetimeBlock\"`\r\n\r\nI made this one a property method to match.",
        "createdAt" : "2019-05-13T15:32:24Z",
        "updatedAt" : "2019-05-16T13:06:14Z",
        "lastEditedBy" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "tags" : [
        ]
      },
      {
        "id" : "d1e1023c-6101-4633-8447-9aec01212beb",
        "parentId" : "ff0697ee-2dae-4eec-a9a0-57c8394a1f7f",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Makes sense to me",
        "createdAt" : "2019-05-13T17:17:41Z",
        "updatedAt" : "2019-05-16T13:06:14Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e42d72f6a70ea847cb9eab4b7432df8b08f6658",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +2060,2064 @@    def _can_hold_na(self):\n        return True\n\n    def _maybe_coerce_values(self, values):\n        \"\"\"Input validation for values passed to __init__. Ensure that"
  },
  {
    "id" : "02e3da72-7151-4cc1-8052-5b1b9d56a019",
    "prId" : 26409,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26409#pullrequestreview-256377161",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fed15c21-a394-4635-b728-38c0d7bcad66",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we really need this?",
        "createdAt" : "2019-06-28T19:42:23Z",
        "updatedAt" : "2019-07-01T15:20:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "def9a517-5731-41ee-a162-90fdf504180c",
        "parentId" : "fed15c21-a394-4635-b728-38c0d7bcad66",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this still needed?",
        "createdAt" : "2019-07-01T11:59:19Z",
        "updatedAt" : "2019-07-01T15:20:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ab50e14f-bf0f-428f-95c2-123f23499efe",
        "parentId" : "fed15c21-a394-4635-b728-38c0d7bcad66",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Well, the JSON C code *does* handle blocks (if I remove the `get_block_values` part in objToJSON.C that I introduced in this PR, a couple tests fail). \r\nI could name this here the same as for Series/INdex (i.e. `_internal_get_values`), but I prefer a distinct name to make it clear that the json code is handling blocks and not series/index (and that also makes it clear that all other places where `_internal_get_values` is used is *not* handling blocks). That will also make it easier to isolate and try to remove the block handling in the json C code.",
        "createdAt" : "2019-07-01T14:03:59Z",
        "updatedAt" : "2019-07-01T15:20:08Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4554e9fe-946e-45df-8697-226d2577a5b3",
        "parentId" : "fed15c21-a394-4635-b728-38c0d7bcad66",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Opened https://github.com/pandas-dev/pandas/issues/27164 for follow-up on this JSON issue",
        "createdAt" : "2019-07-01T14:34:57Z",
        "updatedAt" : "2019-07-01T15:20:08Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "064aeb4f3ddfee0fdd86ee895dc7591fb2806c0b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +178,182 @@        return self.values\n\n    def get_block_values(self, dtype=None):\n        \"\"\"\n        This is used in the JSON C code"
  },
  {
    "id" : "7c874259-f8fe-4e41-84b8-83b8e0790af5",
    "prId" : 26417,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26417#pullrequestreview-239217900",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cafcf72-b4fd-4159-ab1b-c50d29e2dddc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do you need the check at all? just np.atleast_2d",
        "createdAt" : "2019-05-18T14:34:11Z",
        "updatedAt" : "2019-05-19T03:42:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7673213b-7d50-4499-80a2-0d2a870ac3ce",
        "parentId" : "1cafcf72-b4fd-4159-ab1b-c50d29e2dddc",
        "authorId" : "22a123c1-4cda-4016-b3b1-8768233d6e4d",
        "body" : "I tried that, several other tests fail if this dimensionality check is not performed.",
        "createdAt" : "2019-05-19T01:25:08Z",
        "updatedAt" : "2019-05-19T03:42:58Z",
        "lastEditedBy" : "22a123c1-4cda-4016-b3b1-8768233d6e4d",
        "tags" : [
        ]
      }
    ],
    "commit" : "997c0a57d01356ea773569caa04196329ad03e87",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3036,3040 @@    if isinstance(values, ABCPandasArray):\n        values = values.to_numpy()\n        if ndim and ndim > 1:\n            values = np.atleast_2d(values)\n"
  },
  {
    "id" : "7da17915-5a5c-41f5-842c-8d9cfd50f59a",
    "prId" : 27026,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27026#pullrequestreview-259784008",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5c478cc-5eea-4402-a3b9-8c24d116657f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so rather than do this here, can you add a ``.replace()`` method on ``Categorical`` and just call it here (this by-definition is a 1-D block holder).",
        "createdAt" : "2019-06-27T03:00:53Z",
        "updatedAt" : "2019-11-13T02:43:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bf132f8e-b459-45d1-b036-e715e3b7ac1b",
        "parentId" : "a5c478cc-5eea-4402-a3b9-8c24d116657f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "hold off on this pending discussion about what belongs on EAs",
        "createdAt" : "2019-06-27T20:02:37Z",
        "updatedAt" : "2019-11-13T02:43:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "c67595d5-6222-4cc6-bf66-cafeb3b78ab2",
        "parentId" : "a5c478cc-5eea-4402-a3b9-8c24d116657f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I am -1 on this PR as is; this should be a method on a Categorical.",
        "createdAt" : "2019-07-09T22:05:02Z",
        "updatedAt" : "2019-11-13T02:43:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4d3f8489e467c072e4d96a4e515b76f7243e7d8",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2935,2939 @@    ):\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        result = self if inplace else self.copy()\n        if filter is None:  # replace was called on a series\n            result.values.replace(to_replace, value, inplace=True)"
  },
  {
    "id" : "00eedd48-26b6-4665-81de-2b4ebb4172cb",
    "prId" : 27026,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27026#pullrequestreview-285238510",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "060cfc79-a8cd-446e-ba38-17cd1c0652be",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "need\r\n\r\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\r\n",
        "createdAt" : "2019-09-08T20:01:43Z",
        "updatedAt" : "2019-11-13T02:43:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9f81fb20-4106-49f7-9ed4-8de972d8ddcc",
        "parentId" : "060cfc79-a8cd-446e-ba38-17cd1c0652be",
        "authorId" : "ac0af0a3-006f-4da7-a294-6b5567cb5c6a",
        "body" : "fixed",
        "createdAt" : "2019-09-08T22:34:43Z",
        "updatedAt" : "2019-11-13T02:43:08Z",
        "lastEditedBy" : "ac0af0a3-006f-4da7-a294-6b5567cb5c6a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4d3f8489e467c072e4d96a4e515b76f7243e7d8",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2935,2939 @@    ):\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        result = self if inplace else self.copy()\n        if filter is None:  # replace was called on a series\n            result.values.replace(to_replace, value, inplace=True)"
  },
  {
    "id" : "40475b03-75d6-4b80-97b4-6a5b8ffad32f",
    "prId" : 27026,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27026#pullrequestreview-315957432",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3585dd3d-5e4a-4b38-8f86-bcd005a7b7c1",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can any of the logic in this method generalize to ExtensionBlock?  (presumably we'd need to add `replace` to the EA interface?)",
        "createdAt" : "2019-11-12T21:55:21Z",
        "updatedAt" : "2019-11-13T02:43:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "80fe26f6-a0a7-4447-8d15-099512844a44",
        "parentId" : "3585dd3d-5e4a-4b38-8f86-bcd005a7b7c1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is a good point, but we can certainly do as a followup; can you open an issue for discussion.",
        "createdAt" : "2019-11-13T01:50:18Z",
        "updatedAt" : "2019-11-13T02:43:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4d3f8489e467c072e4d96a4e515b76f7243e7d8",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +2947,2951 @@            return super(CategoricalBlock, result).replace(\n                to_replace, value, inplace, filter, regex, convert\n            )\n\n"
  },
  {
    "id" : "c09fdeee-2911-45a3-99fa-a8d4307560fa",
    "prId" : 27151,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27151#pullrequestreview-256584790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4837b37b-508d-40e2-94c5-e7459c4eff54",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if possible can you add types (ok for future PR) and full doc-strings",
        "createdAt" : "2019-07-01T22:09:32Z",
        "updatedAt" : "2019-07-01T23:59:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ccd438197c5d46e35417bb08da5fd26d5bfc2916",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +660,664 @@        return maybe_downcast_to_dtype(result, dtype)\n\n    def _coerce_values(self, values):\n        \"\"\"\n        Coerce values (usually derived from self.values) for an operation."
  },
  {
    "id" : "b9642380-bd19-4eb8-a34b-802ddb639d44",
    "prId" : 27298,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27298#pullrequestreview-259823392",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f7548d7-a29d-41a1-812b-03244900cd9f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in followup, can you make these elif",
        "createdAt" : "2019-07-09T20:52:26Z",
        "updatedAt" : "2019-07-09T20:52:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "62bc4df9-18db-4559-88be-76955a00713d",
        "parentId" : "4f7548d7-a29d-41a1-812b-03244900cd9f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Sure",
        "createdAt" : "2019-07-10T00:41:15Z",
        "updatedAt" : "2019-07-10T00:41:15Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb6eaae68da7d4c9d8cf7cb6eb645d6648c9a22a",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +2272,2276 @@        if tipo is not None:\n            return tipo == _NS_DTYPE or tipo == np.int64\n        if isinstance(element, datetime):\n            return element.tzinfo is None\n        if is_integer(element):"
  },
  {
    "id" : "2c13c59a-bc6c-43f4-aea5-385f0a76644e",
    "prId" : 27298,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27298#pullrequestreview-259754758",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8c7960c-8f5b-4a9e-bbe5-5e053a4ef6bd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2019-07-09T20:52:32Z",
        "updatedAt" : "2019-07-09T20:52:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bab59edb-8ee9-4e66-a0bf-fa4081652c66",
        "parentId" : "b8c7960c-8f5b-4a9e-bbe5-5e053a4ef6bd",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "though maybe just add this one below on 2634",
        "createdAt" : "2019-07-09T20:55:36Z",
        "updatedAt" : "2019-07-09T20:55:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb6eaae68da7d4c9d8cf7cb6eb645d6648c9a22a",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +2630,2634 @@        if tipo is not None:\n            return issubclass(tipo.type, (np.timedelta64, np.int64))\n        if element is NaT:\n            return True\n        return is_integer(element) or isinstance("
  },
  {
    "id" : "2f5e8cb8-14d8-43a9-9591-95a242bc100d",
    "prId" : 27311,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27311#pullrequestreview-264515143",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5d95e5a-6d0b-43ec-b068-373b00b21f6a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do you *really* need to do this?\r\n\r\nif you actually do, then .reshape(1, -1) should just work (or use np.atleast_2d)",
        "createdAt" : "2019-07-20T20:53:09Z",
        "updatedAt" : "2019-07-22T14:31:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e6efb9a2-9f95-4cf4-9a42-46eb8c62b377",
        "parentId" : "c5d95e5a-6d0b-43ec-b068-373b00b21f6a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yes, this really is needed.\r\n\r\nreshape(1, -1) is what is already here",
        "createdAt" : "2019-07-20T23:43:16Z",
        "updatedAt" : "2019-07-22T14:31:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bd7a2120-c6de-4c7a-8c6f-70b1fa555ba0",
        "parentId" : "c5d95e5a-6d0b-43ec-b068-373b00b21f6a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you give an example that specific needs this 2d reshape?\r\n\r\nthis just is a completely different pattern than *anywhere* else. Why for example would the ObjectBlock construct not simply reshape (if needed); it already knows the dim & the values shape?",
        "createdAt" : "2019-07-20T23:52:23Z",
        "updatedAt" : "2019-07-22T14:31:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbc18368addb179d1c79301ba7fff3e852efe616",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2590,2594 @@            return super().setitem(indexer, value)\n        except (ValueError, TypeError):\n            obj_vals = self.values.astype(object)\n            newb = make_block(\n                obj_vals, placement=self.mgr_locs, klass=ObjectBlock, ndim=self.ndim"
  },
  {
    "id" : "3b7228a6-7b5e-46a2-aab3-cdc048bbd345",
    "prId" : 27376,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27376#pullrequestreview-261794148",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95f28c4f-6023-4560-ab35-c5b7a7817f2f",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "In the ExtensionBlock.take_nd method we have this same if/elif for fill_tuple/fill_value, but we don't set allow_fill there.  Seems fishy.  @jorisvandenbossche any idea if this is intentional?",
        "createdAt" : "2019-07-13T04:57:32Z",
        "updatedAt" : "2019-07-15T15:05:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "26adaf0e-5661-4cbc-99b9-bb2abe986e8e",
        "parentId" : "95f28c4f-6023-4560-ab35-c5b7a7817f2f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Do you know for what case the `allow_fill=False` branch gets hit?\r\n\r\nIn the end, I think this is only an optimization for when you know that there are no -1's in the indexer. Because in the internals, I think we never use the numpy-like indexing semantics of -1 meaning the last element.",
        "createdAt" : "2019-07-15T12:44:39Z",
        "updatedAt" : "2019-07-15T15:05:27Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "5327c646e378c8d98aaf8fafc27423176bdf350b",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1300,1304 @@        else:\n            fill_value = fill_tuple[0]\n            allow_fill = True\n\n        new_values = algos.take_nd("
  },
  {
    "id" : "c23329ae-5351-4061-b7fb-75a00c0fce64",
    "prId" : 27376,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27376#pullrequestreview-261782210",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93fa2e94-1039-42c1-81f4-44dff36201c0",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you raise a ValueError here instead of using assert? In the off chance someone uses -O flag assert won't help",
        "createdAt" : "2019-07-15T00:41:49Z",
        "updatedAt" : "2019-07-15T15:05:27Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "7f51164d-157b-4f1d-9cb9-ba2f38cf3252",
        "parentId" : "93fa2e94-1039-42c1-81f4-44dff36201c0",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "asserts are ok in the internals",
        "createdAt" : "2019-07-15T12:19:46Z",
        "updatedAt" : "2019-07-15T15:05:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5327c646e378c8d98aaf8fafc27423176bdf350b",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1308,1312 @@        # Called from three places in managers, all of which satisfy\n        #  this assertion\n        assert not (axis == 0 and new_mgr_locs is None)\n        if new_mgr_locs is None:\n            new_mgr_locs = self.mgr_locs"
  },
  {
    "id" : "03c62819-607b-426c-a16a-1593cf29ebe5",
    "prId" : 27408,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27408#pullrequestreview-264509662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3fc449f-6d4d-4c2c-bb58-cebfb3ca84d8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this makes this block *different* than all others, why?",
        "createdAt" : "2019-07-16T19:50:17Z",
        "updatedAt" : "2019-07-25T18:21:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "60ec0e7a-486f-4640-b91e-275637c22b72",
        "parentId" : "f3fc449f-6d4d-4c2c-bb58-cebfb3ca84d8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "in the status quo, `raise` re-raises the exception that is caught on 789.  But now we don't have that to re-raise, so we need to raise a new exception.  The `raise` on 793 is not reached (and should not be reachable)",
        "createdAt" : "2019-07-16T20:32:17Z",
        "updatedAt" : "2019-07-25T18:21:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "494adccf-30b9-4a7e-935a-a15fd671371f",
        "parentId" : "f3fc449f-6d4d-4c2c-bb58-cebfb3ca84d8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why don't we instead define an internal exception, say DtypeInvalidException (or better name) which inherits this then for flow control.",
        "createdAt" : "2019-07-20T20:09:22Z",
        "updatedAt" : "2019-07-25T18:21:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d28e300d1fd06c564fd60c266df724fe78f125e2",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +803,807 @@            # causes infinite loop. Cast and retry only if not objectblock.\n            if is_object_dtype(self):\n                raise AssertionError\n\n            # try again with a compatible block"
  },
  {
    "id" : "d4d4ee15-a6e7-4278-8e6a-193411f5a611",
    "prId" : 27408,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27408#pullrequestreview-266113424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "548d466a-cfe4-486a-9948-56170c6e1ad9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is looking messy, any better way here? ",
        "createdAt" : "2019-07-24T12:10:48Z",
        "updatedAt" : "2019-07-25T18:21:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4df1264b-cf12-4718-ba30-7bb713943149",
        "parentId" : "548d466a-cfe4-486a-9948-56170c6e1ad9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "agreed its messy, but nothing cleaner i could find here.  current thought is that a couple of steps from now we'll be done with getting rid of the try/excepts for coercion, at which point we'll have a better shot at cleaning these up",
        "createdAt" : "2019-07-24T15:43:23Z",
        "updatedAt" : "2019-07-25T18:21:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d28e300d1fd06c564fd60c266df724fe78f125e2",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +1417,1421 @@\n            if not (\n                (self.is_integer or self.is_bool)\n                and lib.is_scalar(other)\n                and np.isnan(other)"
  },
  {
    "id" : "d0ab764e-6cdd-4a72-9c8b-236a0de0a2b8",
    "prId" : 27444,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27444#pullrequestreview-264509327",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17ad3c91-a8ed-4549-a636-bcc7be222cfc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "side issue is that a lot of this can be cleaned up now that convert_objects is gone",
        "createdAt" : "2019-07-20T19:39:01Z",
        "updatedAt" : "2019-07-20T20:23:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9406fa8e-bd3b-4741-b27a-7aa5c2a1fdc1",
        "parentId" : "17ad3c91-a8ed-4549-a636-bcc7be222cfc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think that deprecation was before I got here, so it isn't clear to me what else can be cleaned up",
        "createdAt" : "2019-07-20T19:48:53Z",
        "updatedAt" : "2019-07-20T20:23:26Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3e5196e7-c399-449b-8f46-b249d1f7282e",
        "parentId" : "17ad3c91-a8ed-4549-a636-bcc7be222cfc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe just remove the comment, you have cleaned up reasonably. you can try looking in history  but if not ok.",
        "createdAt" : "2019-07-20T19:55:19Z",
        "updatedAt" : "2019-07-20T20:23:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b32f6521b8c9c802049c88d3868eb532954c60d0",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +2784,2788 @@        return lib.is_bool_array(self.values.ravel())\n\n    def convert(\n        self,\n        copy: bool = True,"
  },
  {
    "id" : "19112121-34a5-4ae8-b4cd-0c96089d1921",
    "prId" : 27444,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27444#pullrequestreview-264510196",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f14e575-810a-497f-afbf-ca1ae266ad5c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add typing to the returns would be good here (and maybe Paramters / Returns to the doc-string), but can be in the future. I think adding doc-strings on routines that we are *most likely* going to keep is worth the effort (so use your judgement on this).",
        "createdAt" : "2019-07-20T20:26:08Z",
        "updatedAt" : "2019-07-20T20:26:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b32f6521b8c9c802049c88d3868eb532954c60d0",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +2792,2796 @@        coerce: bool = False,\n    ):\n        \"\"\" attempt to coerce any object types to better types return a copy of\n        the block (if copy = True) by definition we ARE an ObjectBlock!!!!!\n"
  },
  {
    "id" : "e71e66a6-1887-47ad-a9b4-3285425a294c",
    "prId" : 27567,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27567#pullrequestreview-267383801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9499e57-8360-411f-9802-833f96d2c03c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment or 2 here",
        "createdAt" : "2019-07-26T12:01:23Z",
        "updatedAt" : "2019-07-26T16:56:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dfd7138a-4502-4c74-8830-b9b131bad3ad",
        "parentId" : "f9499e57-8360-411f-9802-833f96d2c03c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Done",
        "createdAt" : "2019-07-26T20:12:50Z",
        "updatedAt" : "2019-07-26T20:12:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "60d428c9639e7298aad1adfc8cd2e39bff06dfb9",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +2470,2474 @@        \"\"\" reverse of try_coerce_args \"\"\"\n        if isinstance(result, np.ndarray):\n            if result.ndim == 2:\n                # kludge for 2D blocks with 1D EAs\n                result = result[0, :]"
  },
  {
    "id" : "3300b85e-8379-41fe-bee0-074b26e40a39",
    "prId" : 27567,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27567#pullrequestreview-267145944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "918577e5-535d-42d7-868c-36544507eda2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we should probably remove .asi8 on Index as I agree its sligthly confusing (I don't think we need deprecation)",
        "createdAt" : "2019-07-26T12:02:07Z",
        "updatedAt" : "2019-07-26T16:56:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "60d428c9639e7298aad1adfc8cd2e39bff06dfb9",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +1532,1536 @@            # but `Block.get_values()` returns an ndarray of objects\n            # right now. We need an API for \"values to do numeric-like ops on\"\n            values = self.values.view(\"M8[ns]\")\n\n            # TODO: NonConsolidatableMixin shape"
  },
  {
    "id" : "3e81e528-f6af-4484-a516-f829df54ea76",
    "prId" : 27627,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27627#pullrequestreview-267511669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2ece1f8-8052-4e62-88db-013b74dc93c3",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "\"kludge\" - am I to assume that you're planning on cleaning this up or splitting more cleanly in the future?  One-liners like these don't seem \"super-kludgy\" IMO",
        "createdAt" : "2019-07-28T06:22:51Z",
        "updatedAt" : "2019-07-28T06:22:51Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "834c5674-94d9-4e00-b583-d3698b66f158",
        "parentId" : "f2ece1f8-8052-4e62-88db-013b74dc93c3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yes, once we allow 2D EAs this entire method will be unnecessary.",
        "createdAt" : "2019-07-28T15:33:05Z",
        "updatedAt" : "2019-07-28T15:33:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ec7e33c319d5cb70a78673c754aa6f8cfb72177",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +2544,2548 @@        naive = self.values.view(\"M8[ns]\")\n\n        # kludge for 2D block with 1D values\n        naive = naive.reshape(self.shape)\n"
  },
  {
    "id" : "df584356-7f80-46a2-9970-ac7b4bcd5d6f",
    "prId" : 27627,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27627#pullrequestreview-268968897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef8a0c3d-d5ef-468f-b286-11ad4580966c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "grr I really dis-like strongly get_values()",
        "createdAt" : "2019-07-31T12:17:22Z",
        "updatedAt" : "2019-07-31T12:17:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ec7e33c319d5cb70a78673c754aa6f8cfb72177",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1527,1531 @@        assert self.ndim == 2\n\n        values = self.get_values()\n\n        is_empty = values.shape[axis] == 0"
  },
  {
    "id" : "8fca8a30-9b85-4b0f-ba16-38be18d832a6",
    "prId" : 27768,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27768#pullrequestreview-271450252",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5baae940-60ef-4630-a569-4b1ebd38aa2c",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Tests?  Does this bubble up?",
        "createdAt" : "2019-08-06T07:12:04Z",
        "updatedAt" : "2019-08-06T07:12:04Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "fe9c7ecc-6bab-4ac5-8703-1d48e90a6262",
        "parentId" : "5baae940-60ef-4630-a569-4b1ebd38aa2c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is hit in tests.  The original hope was to replace the try/except a few lines above with a `if self._can_hold_element(value):` but as noted in comments a few lines up, the try works in some cases where _can_hold_element fails",
        "createdAt" : "2019-08-06T15:58:47Z",
        "updatedAt" : "2019-08-06T15:58:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8796187a4508686d93ed56d19d1158d034c84d51",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +822,826 @@\n            assert not self._can_hold_element(value), value\n\n            # try again with a compatible block\n            block = self.astype(object)"
  },
  {
    "id" : "35dc632f-bf41-4b8a-850a-2bdc3b39cf94",
    "prId" : 27786,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27786#pullrequestreview-271582186",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c1e071f-6c90-4961-af32-95b24fe3bc44",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Alternative option is to pass `self.ndim` to the `make_block_same_class` call in `Block.take_nd`, but this might be more general for other locations where `make_block_same_class` is called without specifying `ndim`. I don't directly can think of a case where you don't want to preserve the ndim unless it was specified.\r\n\r\nAnd eg `make_block` just above always uses `self.ndim`",
        "createdAt" : "2019-08-06T19:13:49Z",
        "updatedAt" : "2019-08-06T19:13:49Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "42eadb7f-2447-438a-81ed-c2d52f16874f",
        "parentId" : "1c1e071f-6c90-4961-af32-95b24fe3bc44",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This seems reasonable to me",
        "createdAt" : "2019-08-06T20:02:23Z",
        "updatedAt" : "2019-08-06T20:02:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb6dac9835ca15d09f2b64f45099494740da94b7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +275,279 @@            placement = self.mgr_locs\n        if ndim is None:\n            ndim = self.ndim\n        return make_block(\n            values, placement=placement, ndim=ndim, klass=self.__class__, dtype=dtype"
  },
  {
    "id" : "9d575221-00f4-4ed3-8248-b0ba7976f875",
    "prId" : 27941,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27941#pullrequestreview-276101690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aba33b9e-5441-47d6-b6ee-816824b538d5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "did this cause a change in tests? you can drop the first 2 conditions i think if you add this",
        "createdAt" : "2019-08-16T12:09:24Z",
        "updatedAt" : "2019-08-23T16:42:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9a0db207-ae82-4ea8-a0ad-798c8e242843",
        "parentId" : "aba33b9e-5441-47d6-b6ee-816824b538d5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "In another branch I found that the np.isnan check was raising a TypeError in some cases.  That doesn't really matter since ATM this is inside a try/except block, but this isnt the part of the code that we are expecting to raise, so being more explicit is better.\r\n\r\nWill remove the unnecessary part of the check.",
        "createdAt" : "2019-08-16T15:48:56Z",
        "updatedAt" : "2019-08-23T16:42:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "cd72ffbe-4570-4367-bf5b-98155c4c11b6",
        "parentId" : "aba33b9e-5441-47d6-b6ee-816824b538d5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "updated;  de facto green",
        "createdAt" : "2019-08-16T18:24:26Z",
        "updatedAt" : "2019-08-23T16:42:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad42b18591f4524b31be0fa1ef1428aa4312e1a8",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +1366,1370 @@            if not (\n                (self.is_integer or self.is_bool)\n                and lib.is_float(other)\n                and np.isnan(other)\n            ):"
  },
  {
    "id" : "0b995758-a19f-4164-b067-ab4a111dc7f5",
    "prId" : 28841,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28841#pullrequestreview-299529509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f648edb-3b6c-479a-866e-a1a2fcbf07ed",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can you catch something more specific?",
        "createdAt" : "2019-10-08T16:53:51Z",
        "updatedAt" : "2019-10-14T22:59:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8a5ab4d8-24db-4f71-91a7-3268c491d255",
        "parentId" : "8f648edb-3b6c-479a-866e-a1a2fcbf07ed",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I know that the Sparse setitem case raises a TypeError. But we don't really know what other EAs might return. Eg in could be possible that some raises an error on `astype(str)`",
        "createdAt" : "2019-10-09T07:44:03Z",
        "updatedAt" : "2019-10-14T22:59:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7adcd81a-cc3b-45db-8f28-e9b2f7812e4e",
        "parentId" : "8f648edb-3b6c-479a-866e-a1a2fcbf07ed",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "OK.  Should we consider requiring that EASubclass.astype accept str?  Easy to offer default implementation `np.asarray([str(x) for x in self], dtype=object)`",
        "createdAt" : "2019-10-09T16:09:33Z",
        "updatedAt" : "2019-10-14T22:59:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "10defebfa4f728ab3f81657d191b30740675a1c7",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1793,1797 @@            values = values.astype(str)\n            values[mask] = na_rep\n        except Exception:\n            # eg SparseArray does not support setitem, needs to be converted to ndarray\n            return super().to_native_types(slicer, na_rep, quoting, **kwargs)"
  },
  {
    "id" : "db0a73aa-1166-4212-84af-dc94035900e4",
    "prId" : 28841,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28841#pullrequestreview-300673948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6efcef5c-81eb-4052-9f39-a2637dfae9a4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why would this raise at all? don't we *already* do something like this in the repr of EAs? we should have a same / generic mechanism, rather than implementing logic here.",
        "createdAt" : "2019-10-11T12:43:02Z",
        "updatedAt" : "2019-10-14T22:59:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "edbe9885-43b8-4c8d-bb19-21fcdf2b8496",
        "parentId" : "6efcef5c-81eb-4052-9f39-a2637dfae9a4",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "As I explained in the issue (https://github.com/pandas-dev/pandas/issues/28840), it's numpy that can raise an error here. \r\nBut, the reason that this is in a try-except, is not no much for the astype necessarily, but for the setitem on the next line which is not implemented for SparseArray",
        "createdAt" : "2019-10-11T13:11:31Z",
        "updatedAt" : "2019-10-14T22:59:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "10defebfa4f728ab3f81657d191b30740675a1c7",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1791,1795 @@\n        try:\n            values = values.astype(str)\n            values[mask] = na_rep\n        except Exception:"
  },
  {
    "id" : "e6dd408f-2e21-4e8e-affb-a458a1499776",
    "prId" : 28841,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28841#pullrequestreview-300721049",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ba13343-b654-4b03-948e-f687f25dd646",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we move most/all of this code to a base class?",
        "createdAt" : "2019-10-11T14:10:24Z",
        "updatedAt" : "2019-10-14T22:59:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "13a3ac68-0227-4d13-8597-9f83204df535",
        "parentId" : "3ba13343-b654-4b03-948e-f687f25dd646",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In theory I can do all of this in the base class method, putting the above code behind a `if self.is_extension`. But it's kind of the point of subclasses to override those things, instead of keeping the different implementations of all subclasses in the parent class with if statements? \r\n\r\nBut I don't care much, happy to move it as well. Some other Blocks (like DatetimeBlock) also override this method, so overriding it here as well seems consistent with that.\r\n\r\n",
        "createdAt" : "2019-10-11T14:21:53Z",
        "updatedAt" : "2019-10-14T22:59:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0851247b-58c2-4458-8dab-f5c7990260fc",
        "parentId" : "3ba13343-b654-4b03-948e-f687f25dd646",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no biggie",
        "createdAt" : "2019-10-11T14:24:30Z",
        "updatedAt" : "2019-10-14T22:59:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "10defebfa4f728ab3f81657d191b30740675a1c7",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1797,1801 @@            return super().to_native_types(slicer, na_rep, quoting, **kwargs)\n\n        # we are expected to return a 2-d ndarray\n        return values.reshape(1, len(values))\n"
  },
  {
    "id" : "21e00c2e-401a-4b7f-ac7d-665d2312124b",
    "prId" : 28841,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28841#pullrequestreview-301015545",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b435694f-364e-42f1-9f4f-8152f8e5c67b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this actually hit in the EA branch? (we don't support 2D yet and .reshape does not exist)",
        "createdAt" : "2019-10-12T17:21:10Z",
        "updatedAt" : "2019-10-14T22:59:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "56776865-8b3c-4626-8ad8-6bef79ad62a4",
        "parentId" : "b435694f-364e-42f1-9f4f-8152f8e5c67b",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, this is the method implemented for EAs, so it is used by them. This function apparently expects a 2D array as output (see the base method)",
        "createdAt" : "2019-10-12T17:44:08Z",
        "updatedAt" : "2019-10-14T22:59:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "10defebfa4f728ab3f81657d191b30740675a1c7",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1798,1802 @@\n        # we are expected to return a 2-d ndarray\n        return values.reshape(1, len(values))\n\n    def take_nd(self, indexer, axis=0, new_mgr_locs=None, fill_tuple=None):"
  },
  {
    "id" : "2ff2e7b6-9664-42e5-b458-5556189871e8",
    "prId" : 29139,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29139#pullrequestreview-306522596",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "baf57f5b-b0b6-49b7-8a07-a885f3090355",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "followup: convert_scalar should be in pandas.core.dtypes.cast (you can just call the cython version), but import / expose from there.\r\n\r\nalso the cython version is in a very weird place (index.pyx).\r\n\r\n",
        "createdAt" : "2019-10-24T12:09:26Z",
        "updatedAt" : "2019-10-24T12:09:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc5c6b6ce190fe6b550885e21b8520b60b343553",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +9,13 @@\nfrom pandas._libs import NaT, lib, tslib, writers\nfrom pandas._libs.index import convert_scalar\nimport pandas._libs.internals as libinternals\nfrom pandas._libs.tslibs import Timedelta, conversion"
  },
  {
    "id" : "97bfa1c7-5f7c-4766-b87b-ba4c968640ad",
    "prId" : 29317,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29317#pullrequestreview-316178082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ceb9c06e-2577-44f6-b026-0347ff05f981",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we just move 2834 here?",
        "createdAt" : "2019-11-02T15:09:23Z",
        "updatedAt" : "2019-11-20T01:25:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "98de9258-a7d6-47cd-bc1d-f5139b02ee6d",
        "parentId" : "ceb9c06e-2577-44f6-b026-0347ff05f981",
        "authorId" : "4cd6c97a-353d-414a-949a-1e0cfc3a0c8a",
        "body" : "Not sure how to do that. Perhaps like that ?\r\n```python\r\n        if not mask.any() and not convert:\r\n            return self\r\n        if mask.any():\r\n            block = super()._replace_coerce(\r\n                to_replace=to_replace,\r\n                value=value,\r\n                inplace=inplace,\r\n                regex=regex,\r\n                convert=convert,\r\n                mask=mask,\r\n            )\r\n            if convert:\r\n                block = [b.convert(numeric=False, copy=True) for b in block]\r\n            return block\r\n        return [self.convert(numeric=False, copy=True)]\r\n```\r\nThere are 4 possible senarios\r\n1. mask.any() and convert:\r\nreturn [b.convert(numeric=False, copy=True) for b in block]\r\n2. mask.any() and not convert:\r\nreturn block\r\n3. not mask.any() and convert\r\nreturn [self.convert(numeric=False, copy=True)]\r\n4. not mask.any() and not convert\r\nreturn self\r\n\r\n@jreback ",
        "createdAt" : "2019-11-08T05:54:48Z",
        "updatedAt" : "2019-11-20T01:25:40Z",
        "lastEditedBy" : "4cd6c97a-353d-414a-949a-1e0cfc3a0c8a",
        "tags" : [
        ]
      },
      {
        "id" : "e29cbc65-2428-4578-8f23-42ae3b001a3b",
        "parentId" : "ceb9c06e-2577-44f6-b026-0347ff05f981",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i c. this actually looks more complicated than your current change",
        "createdAt" : "2019-11-13T11:33:28Z",
        "updatedAt" : "2019-11-20T01:25:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "eeeae4634d902e790c82126b37c99e3da71e81c6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2826,2830 @@                block = [b.convert(numeric=False, copy=True) for b in block]\n            return block\n        if convert:\n            return [self.convert(numeric=False, copy=True)]\n        return self"
  },
  {
    "id" : "369ab601-1215-42e6-aa27-c1c133aa8f84",
    "prId" : 29393,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29393#pullrequestreview-348354447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8231e1a9-4f27-458c-9558-1ac362e7e864",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so i think its possible to greatly simplify this entire routine, but creating a Categorical.set_item. It would do this kind of test and if so just sets (like you have here), otherwise it can dispatch to the Block.set_item (this routine) for regular handling.\r\n\r\nThe logic in this routine (Block.set_item) then becomes a lot simpler.\r\n\r\nnow it might be slightly non-trivial to change this because .set_item does a lot, e.g. it preps the values AND then does the setting; these likely need to be decoupled to avoid duplicating some code.\r\n\r\nlmk if this is doable and you want to work on it. ok with merging this if we can followup with the Categorical.set_item change (or just do that),.",
        "createdAt" : "2019-12-30T13:38:33Z",
        "updatedAt" : "2020-01-27T11:52:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6109f0d9-f9d5-46d7-9ef2-749b039e6087",
        "parentId" : "8231e1a9-4f27-458c-9558-1ac362e7e864",
        "authorId" : "c9fd12cb-e4de-4b15-aa6e-9af7d516fcb9",
        "body" : "Hi @jreback, sorry for the delay. I would prefer to merge this, and then follow up with the Categorical.set_item change. I'm happy on working on that as well.\r\n\r\nMerged master, and updated.",
        "createdAt" : "2020-01-13T14:17:31Z",
        "updatedAt" : "2020-01-27T11:52:31Z",
        "lastEditedBy" : "c9fd12cb-e4de-4b15-aa6e-9af7d516fcb9",
        "tags" : [
        ]
      },
      {
        "id" : "a2efbee0-05fe-4d90-8020-86c8a46ae43f",
        "parentId" : "8231e1a9-4f27-458c-9558-1ac362e7e864",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k let's do that",
        "createdAt" : "2020-01-26T01:44:08Z",
        "updatedAt" : "2020-01-27T11:52:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "41e6ce47132250ed95dcd7ae8ee5d50bcd809720",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +892,896 @@\n        elif (\n            exact_match\n            and is_categorical_dtype(arr_value.dtype)\n            and not is_categorical_dtype(values)"
  },
  {
    "id" : "a6d83a2f-bbee-4d52-af81-1c1f8dfd8efb",
    "prId" : 29853,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29853#pullrequestreview-336814360",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "638c9014-d9c0-4ce7-9c6a-bc1c99970baf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could be an elif here and re-assign to result, just to make the flow more natural. alt could make this into a method on BM. but for followon's",
        "createdAt" : "2019-12-27T16:25:07Z",
        "updatedAt" : "2019-12-27T16:35:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf94d1305e9e803dbea4bafe891b918b1b07844b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +379,383 @@                nbs.append(block)\n            return nbs\n\n        if not isinstance(result, Block):\n            # Exclude the 0-dim case so we can do reductions"
  },
  {
    "id" : "9d677f84-bb05-44cc-bdaf-8fa2c94ca8a1",
    "prId" : 30580,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30580#pullrequestreview-337477684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce9cd1ac-e0d3-470a-8d4e-4e338e91ca42",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i had to look up what np.place was.  is there a more common idiom we can use here?",
        "createdAt" : "2019-12-31T23:50:11Z",
        "updatedAt" : "2020-01-01T08:54:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "fffe9bd0-66d9-48d4-8daa-45116b13b999",
        "parentId" : "ce9cd1ac-e0d3-470a-8d4e-4e338e91ca42",
        "authorId" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "body" : "I can't find any close alternative from numpy. I think `np.place` in the right choice as it does exactly what we need here (it places all given values to the masked locations rather than assigning masked values to masked locations). Besides, it is designed to specifically work with book masks and that's what we are dealing with here.",
        "createdAt" : "2020-01-01T09:01:22Z",
        "updatedAt" : "2020-01-01T09:01:22Z",
        "lastEditedBy" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2aa9fbf6bd82916ab9d54b0e7f58832b92ce36d",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +952,956 @@                    # `np.place` on the other hand uses the ``new`` values at it is\n                    # to place in the masked locations of ``new_values``\n                    np.place(new_values, mask, new)\n                elif mask.shape[-1] == len(new) or len(new) == 1:\n                    np.putmask(new_values, mask, new)"
  },
  {
    "id" : "9831a838-2197-445a-a97f-7940fc310254",
    "prId" : 31025,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31025#pullrequestreview-345965971",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34afd0f9-b57f-43e7-b694-1a9238ce3850",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Note this is on ExtensionBlock now.  The deprecation for EAs not implementing `__sub__` required a similar block / axis handling, so I've moved it up here. The `_block_shape` is all the way up in Block.diff.",
        "createdAt" : "2020-01-21T15:33:46Z",
        "updatedAt" : "2020-01-23T14:53:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "d34ffe31e8368b46f8cee395c0f4ead3db461633",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1864,1868 @@        )\n\n    def diff(self, n: int, axis: int = 1) -> List[\"Block\"]:\n        if axis == 1:\n            # we are by definition 1D."
  },
  {
    "id" : "63da44bf-6e5b-4eb7-aa0b-56fdff656979",
    "prId" : 31037,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31037#pullrequestreview-343164411",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67f4af3d-8f38-47c5-88c7-591676bcd023",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "these can be generic no? as the EA class name is known by the block ",
        "createdAt" : "2020-01-15T11:41:03Z",
        "updatedAt" : "2020-01-23T15:17:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ac510312-f840-4a41-be10-9f029765c1fc",
        "parentId" : "67f4af3d-8f38-47c5-88c7-591676bcd023",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Only for everything that subclasses ExtensionBlock, I assume? \r\nYes, that would be possible, but 1) not all EAs have a `_simple_new` (which is essential here to have good performance) and 2) other blocks already have their `.values` as EA, and I would like to avoid the overhead going through the EA constructor unneeded.",
        "createdAt" : "2020-01-15T11:49:04Z",
        "updatedAt" : "2020-01-23T15:17:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "53fd7e5257eeca9d768ab8951d9211e38b053ec8",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +2252,2256 @@        return np.asarray(self.values.astype(\"datetime64[ns]\", copy=False))\n\n    def array_values(self) -> ExtensionArray:\n        return DatetimeArray._simple_new(self.values)\n"
  },
  {
    "id" : "4af6b124-9982-4ce0-80d4-bba10a3b9ce7",
    "prId" : 31037,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31037#pullrequestreview-345021894",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecbcd514-8cc7-4d0b-b86e-ead52a1e8d69",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we need external_values at all? this is getting very confusing with all of the *values*",
        "createdAt" : "2020-01-18T15:26:41Z",
        "updatedAt" : "2020-01-23T15:17:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "96c60a74-c256-4547-a383-4241abe9307e",
        "parentId" : "ecbcd514-8cc7-4d0b-b86e-ead52a1e8d69",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> do we need external_values at all? this is getting very confusing with all of the values\r\n\r\nI clarified the docstrings (in this PR, but split off and already merged in #31103) to make it clear what `external_values` (-> `.values`), `internal_values` (-> `_values`) and `array_values` (-> `.array`) are used for. As long as those all have different behaviour (something that can be gradually cleaned up, but not here), we need a mechanism to create those different results. \r\n",
        "createdAt" : "2020-01-19T19:49:40Z",
        "updatedAt" : "2020-01-23T15:17:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "53fd7e5257eeca9d768ab8951d9211e38b053ec8",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +217,221 @@        return self.values\n\n    def array_values(self) -> ExtensionArray:\n        \"\"\"\n        The array that Series.array returns. Always an ExtensionArray."
  },
  {
    "id" : "783517e6-c469-43e1-b514-feae0b7ce9da",
    "prId" : 31179,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31179#pullrequestreview-347023434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06310a6b-fe3c-496d-bef2-0425eb6393cc",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "do we need a run-time check? can result be typed as Union[Block, List[Union[Block, List[Block]]]? Might help to type blocks and return type while touching this.",
        "createdAt" : "2020-01-22T14:21:11Z",
        "updatedAt" : "2020-01-22T14:25:16Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "2eab7ab3-bf55-4696-bec0-b5f62533944c",
        "parentId" : "06310a6b-fe3c-496d-bef2-0425eb6393cc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "thats a pretty ugly nested union; ill see if i can get rid of the double-list in the next pass",
        "createdAt" : "2020-01-22T15:57:41Z",
        "updatedAt" : "2020-01-22T15:57:42Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b8b15b05-e6b6-4c99-9bec-7d4ba2c462f4",
        "parentId" : "06310a6b-fe3c-496d-bef2-0425eb6393cc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@simonjayhawkins is this a deal-breaker?  id like to clear the queue",
        "createdAt" : "2020-01-23T02:05:17Z",
        "updatedAt" : "2020-01-23T02:05:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bb71d6d7ac8851235c505f6cf73b1e0869d586f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +3005,3009 @@                blocks.append(r)\n    else:\n        assert isinstance(result, Block), type(result)\n        blocks.append(result)\n    return blocks"
  },
  {
    "id" : "6b1dca82-d6c0-4196-aaf7-c9b54027d92e",
    "prId" : 31513,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31513#pullrequestreview-351818365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f95e4b6-5cb4-4c4b-8815-8909e47e7d64",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Any performance implications to this? An alternate strategy I think would be to compare to the `itemsize` to the length of the `na_rep` and take the max, which I think would reduce the amount of `astype` calls needed, assuming they come at a noticeable cost",
        "createdAt" : "2020-01-31T20:47:40Z",
        "updatedAt" : "2020-01-31T20:47:40Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "4d7f542f-864d-434f-9644-32438bf60ef3",
        "parentId" : "5f95e4b6-5cb4-4c4b-8815-8909e47e7d64",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can you reword your suggestion? I don't quite follow. In particular, I think the variable `itemsize` here *is* the length of the stringified na_rep.\r\n\r\nMy idea here was: we don't know what the string lengths will be without scanning the values and doing the actually conversion. So just let NumPy do that, and only astype to a larger dtype if needed.\r\n\r\n",
        "createdAt" : "2020-01-31T21:25:35Z",
        "updatedAt" : "2020-01-31T21:25:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "411cda53-8b1f-4409-810e-666f494aa9ce",
        "parentId" : "5f95e4b6-5cb4-4c4b-8815-8909e47e7d64",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm sorry I was mistakenly thinking that the issue was only truncating when all values in the array had a str length that was less than that of na_rep, which isn't the case\r\n\r\nDo we even need the second astype? ",
        "createdAt" : "2020-01-31T22:39:58Z",
        "updatedAt" : "2020-01-31T22:39:59Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d22308d1a967ab5a97ae560fd0ef2971227dd0e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +686,690 @@        if not self.is_object and not quoting and itemsize:\n            values = values.astype(str)\n            if values.dtype.itemsize / np.dtype(\"U1\").itemsize < itemsize:\n                # enlarge for the na_rep\n                values = values.astype(f\"<U{itemsize}\")"
  },
  {
    "id" : "537bbefa-1a17-412b-a439-0ac8af9d466b",
    "prId" : 32479,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32479#pullrequestreview-388749894",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4958bdd6-5c18-481f-aef2-b9d8bf0e87aa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jbrockmendel this entire routine needs some refactoring to avoid these types of patterns (but later).",
        "createdAt" : "2020-04-05T20:12:11Z",
        "updatedAt" : "2020-05-20T21:10:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "092874ac-2c71-43d4-ab10-6f2b4f3aefde",
        "parentId" : "4958bdd6-5c18-481f-aef2-b9d8bf0e87aa",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yep, ive got a PR on deck for once this goes in",
        "createdAt" : "2020-04-07T02:51:13Z",
        "updatedAt" : "2020-05-20T21:10:15Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7e7cf547175e282d30f7fd425041adc857e2488",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +856,860 @@            return self.make_block(Categorical(self.values, dtype=arr_value.dtype))\n\n        elif exact_match and is_ea_value:\n            # GH#32395 if we're going to replace the values entirely, just\n            #  substitute in the new array"
  },
  {
    "id" : "591a3ced-9c0e-468f-a578-f21488b1552e",
    "prId" : 32519,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32519#pullrequestreview-372444895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3dd00a4d-6ad0-45dd-b3e1-476b65443177",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "woa, why is this here? shouldn't this be in a higher level block construction?",
        "createdAt" : "2020-03-08T16:17:40Z",
        "updatedAt" : "2020-03-14T03:47:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "35e3520b-a546-43b1-bad6-479b9481c3ac",
        "parentId" : "3dd00a4d-6ad0-45dd-b3e1-476b65443177",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "either goes here or in NonconsolidateableMixin (which should be merged into ExtensionBlock anyway)",
        "createdAt" : "2020-03-09T03:08:29Z",
        "updatedAt" : "2020-03-14T03:47:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b859772e-5c25-49ac-a378-58ccc06abead",
        "parentId" : "3dd00a4d-6ad0-45dd-b3e1-476b65443177",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no this is not what i mean. how can we possibly get here when passing a Categorical? and if you can't except by directly constructing a manager, then this should be an assertion error.",
        "createdAt" : "2020-03-11T02:38:27Z",
        "updatedAt" : "2020-03-14T03:47:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f5fdf8e8-eeae-4d04-9b2a-66dff1a2a616",
        "parentId" : "3dd00a4d-6ad0-45dd-b3e1-476b65443177",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> then this should be an assertion error.\r\n\r\nsure, will update",
        "createdAt" : "2020-03-11T02:46:50Z",
        "updatedAt" : "2020-03-14T03:47:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "54f7cd463aaf3392a73a25a0430b671b4c10d6fd",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1740,1744 @@        super().__init__(values, placement, ndim)\n\n        if self.ndim == 2 and len(self.mgr_locs) != 1:\n            # TODO(2DEA): check unnecessary with 2D EAs\n            raise AssertionError(\"block.size != values.size\")"
  },
  {
    "id" : "3e64c90e-a31e-432b-913b-b7f721eefb16",
    "prId" : 32521,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32521#pullrequestreview-372437915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f052db40-9b46-444a-b6b7-7aa6dae6dd48",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Putting such comments in several places won't make this happen ... (if you want this, you will need to lead a discussion about it)",
        "createdAt" : "2020-03-10T08:16:30Z",
        "updatedAt" : "2020-03-10T08:16:30Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "69226974-f253-48a4-b1dd-9132bdb36d2c",
        "parentId" : "f052db40-9b46-444a-b6b7-7aa6dae6dd48",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "experience shows that discussion turns on amounts of complexity; marking these will allow us to pseudo-quantify that",
        "createdAt" : "2020-03-10T15:04:35Z",
        "updatedAt" : "2020-03-10T15:04:35Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d9e660ed-ff31-4cdb-947d-ad7935c25c6c",
        "parentId" : "f052db40-9b46-444a-b6b7-7aa6dae6dd48",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "agree with both of you! these do have good placeholders, but am skeptical of 2D EA.",
        "createdAt" : "2020-03-11T02:22:04Z",
        "updatedAt" : "2020-03-11T02:22:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "08ab2712861c18c3e289275c445713a81260721a",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +236,240 @@        This is used in the JSON C code.\n        \"\"\"\n        # TODO(2DEA): reshape will be unnecessary with 2D EAs\n        return np.asarray(self.values).reshape(self.shape)\n"
  },
  {
    "id" : "503a8020-08a4-430d-8c2b-6e4fddf5e8ab",
    "prId" : 32769,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32769#pullrequestreview-376998704",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fb0595c-ec16-4937-979b-360b00b323ae",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "from the feedback so far in #32773, it seems the majority view is to maintain a single standard for docstrings...\r\n\r\n10 Errors found:\r\n        Summary does not start with a capital letter\r\n        Summary does not end with a period\r\n        Summary should fit in a single line\r\n        Parameter \"mask\" has no description\r\n        Parameter \"new\" has no description\r\n        Parameter \"axis\" has no description\r\n        Parameter \"transpose\" type should not finish with \".\"\r\n        Return value has no description\r\n        See Also section not found\r\n        No examples section found",
        "createdAt" : "2020-03-18T12:06:45Z",
        "updatedAt" : "2020-03-22T01:38:01Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "7906c3f1-52a8-4afd-9731-705b16a43218",
        "parentId" : "3fb0595c-ec16-4937-979b-360b00b323ae",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Having this as an example for the discussion in #32773 is really helpful.  I have opinions on this!  The capitalization and the punctuation I'm on board for changing, but I dont particularly want an Examples or See Also section",
        "createdAt" : "2020-03-18T15:23:25Z",
        "updatedAt" : "2020-03-22T01:38:01Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0740d4d9-aabf-4773-9aff-beb5fb4fb3c9",
        "parentId" : "3fb0595c-ec16-4937-979b-360b00b323ae",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> Having this as an example for the discussion in #32773 is really helpful.\r\n\r\ni'll try not to disrupt your workflow too much 😉 \r\n\r\n> but I dont particularly want an Examples or See Also section\r\n\r\nThis is the sort of thing that I was trying to convey with the term \"lightweight\", @jorisvandenbossche used the term \"relaxing\".\r\n\r\nIn numpydoc both these sections are optional. The pandas docstring guide doesn't indicate that these sections are optional, but doesn't explicitly state that they are required either.\r\n\r\nupdated does -> doesn't",
        "createdAt" : "2020-03-18T15:51:13Z",
        "updatedAt" : "2020-03-22T01:38:01Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "67ca8f566b31e16ff333392ae60c081b0f1c9f26",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +930,934 @@        Returns\n        -------\n        List[Block]\n        \"\"\"\n        new_values = self.values if inplace else self.values.copy()"
  },
  {
    "id" : "87ff5eeb-6cce-4e0c-b4f7-ac29330798c4",
    "prId" : 32769,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32769#pullrequestreview-376969478",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a725b5d3-6ffc-455c-87b6-925dd14d86a7",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "regarding \"Parameter \"mask\" has no description\", \"Numpydoc doesn't require types ... it's only our internal validation that requires this. We could perfectly well decide to relax this\" https://github.com/pandas-dev/pandas/issues/32773#issuecomment-600284371 \r\n```suggestion\r\n        mask\r\n            The condition to respect.\r\n```",
        "createdAt" : "2020-03-18T13:07:35Z",
        "updatedAt" : "2020-03-22T01:38:01Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "1e0c1988-a444-412d-b680-4f23ccd92afb",
        "parentId" : "a725b5d3-6ffc-455c-87b6-925dd14d86a7",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I left this one as-is because I have a separate branch coming up that allows us to type mask as ndarray[bool]",
        "createdAt" : "2020-03-18T15:21:08Z",
        "updatedAt" : "2020-03-22T01:38:01Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "67ca8f566b31e16ff333392ae60c081b0f1c9f26",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +920,924 @@        Parameters\n        ----------\n        mask : the condition to respect\n        new : a ndarray/object\n        inplace : bool, default False"
  },
  {
    "id" : "b59df1a3-7df1-4036-bc70-e18a80067092",
    "prId" : 32769,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32769#pullrequestreview-379044870",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a136cae-bb02-4900-af12-8d4c3a61833e",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "from numpdoc for Returns section... \r\n\r\n\"Explanation of the returned values and their types. Similar to the Parameters section, except the name of each return value is optional. The type of each return value is always required\"\r\n\r\nthe pandas docstring guide appears to say the same.\r\n\r\nThe guides do NOT say this section is optional.\r\n\r\nso to comply something like...\r\n```suggestion\r\n        list of Block\r\n            A list of new blocks, the result of the putmask.\r\n```\r\n\r\npersonally, i'd be happy following the google style here.\r\n\r\n\"Describe the type and semantics of the return value. If the function only returns None, this section is not required. It may also be omitted if the docstring starts with Returns or Yields (e.g. \"\"\"Returns row from Bigtable as a tuple of strings.\"\"\") and the opening sentence is sufficient to describe return value.\"\r\n\r\nand make the returns section optional for internal docstings in the validation.",
        "createdAt" : "2020-03-19T12:16:57Z",
        "updatedAt" : "2020-03-22T01:38:01Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "4a4cb082-deb3-448a-a7a9-926a5ae11c3b",
        "parentId" : "1a136cae-bb02-4900-af12-8d4c3a61833e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we don't use google style anywhere, this is quite descriptive.",
        "createdAt" : "2020-03-22T20:37:59Z",
        "updatedAt" : "2020-03-22T20:38:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "67ca8f566b31e16ff333392ae60c081b0f1c9f26",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +930,934 @@        Returns\n        -------\n        List[Block]\n        \"\"\"\n        new_values = self.values if inplace else self.values.copy()"
  },
  {
    "id" : "a6a29871-20b9-4105-85fe-61bb68bcf487",
    "prId" : 32940,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32940#pullrequestreview-380645987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "caa44775-c094-4457-aed5-9b1259214929",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we do copy=False internally in .astype?",
        "createdAt" : "2020-03-24T19:43:51Z",
        "updatedAt" : "2020-03-24T19:44:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e94058f3-1f81-4f5e-b498-d79a586c32ba",
        "parentId" : "caa44775-c094-4457-aed5-9b1259214929",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "That's the default kwarg for Block.astype, yes",
        "createdAt" : "2020-03-24T19:50:47Z",
        "updatedAt" : "2020-03-24T19:50:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "97d710314cd096ef6b70db564e141e4d18d96689",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +851,855 @@            # otherwise should have _can_hold_element\n\n            return self.astype(dtype).setitem(indexer, value)\n\n        # value must be storeable at this moment"
  },
  {
    "id" : "66ca939f-8f0d-42cf-b876-ef4d839b90c7",
    "prId" : 32959,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32959#pullrequestreview-384362335",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3639c10b-f81e-4b6a-8ccc-2413afcf11ba",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Could also put this check in `getitem_block` or `_slice_take_blocks_ax0` to ensure that `_slice` always gets the correct  tuple of slices?",
        "createdAt" : "2020-03-30T07:36:25Z",
        "updatedAt" : "2020-04-10T17:44:40Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "af622c28-7530-48b1-9962-7bcc4cb0dadb",
        "parentId" : "3639c10b-f81e-4b6a-8ccc-2413afcf11ba",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Or, directly check the value? As here you convert it to a len-2 tuple, and then in a next step, you convert the tuple back to a slice?",
        "createdAt" : "2020-03-30T07:37:27Z",
        "updatedAt" : "2020-04-10T17:44:40Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "47327a79-bc96-4116-965a-57ea66c6c329",
        "parentId" : "3639c10b-f81e-4b6a-8ccc-2413afcf11ba",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Hmm one way to avoid this PITA would be to have 2D EAs...",
        "createdAt" : "2020-03-31T02:32:06Z",
        "updatedAt" : "2020-04-10T17:44:40Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "02f0be8019368cfe2576a0a71fcb46cbee0be529",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1750,1754 @@        # return same dims as we currently have\n        if not isinstance(slicer, tuple) and self.ndim == 2:\n            # reached via getitem_block via _slice_take_blocks_ax0\n            # TODO(EA2D): wont be necessary with 2D EAs\n            slicer = (slicer, slice(None))"
  },
  {
    "id" : "9598d7c4-cef5-4157-be3f-c4301ba1ef5f",
    "prId" : 33028,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33028#pullrequestreview-382386363",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17109be1-da9e-4488-97ec-4fa8d8f8cedf",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add a comment here on why `_holder` can handle 2D?",
        "createdAt" : "2020-03-26T12:16:57Z",
        "updatedAt" : "2020-03-26T22:04:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b091eb88-c128-4aaf-adc9-362d01dc541e",
        "parentId" : "17109be1-da9e-4488-97ec-4fa8d8f8cedf",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Will do",
        "createdAt" : "2020-03-26T20:22:56Z",
        "updatedAt" : "2020-03-26T22:04:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "92e8616ce98295dc6c5dc35073fad1f4e38b61ac",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +2078,2082 @@        if is_object_dtype(dtype):\n            # DTA/TDA constructor and astype can handle 2D\n            return self._holder(self.values).astype(object)\n        return self.values\n"
  },
  {
    "id" : "53af410f-43d5-4979-aabd-1f57ff01a8fb",
    "prId" : 33308,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33308#pullrequestreview-391477411",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "402778a1-c7e5-4ae3-a206-e5f04b579faa",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I _think_ OK to use cast after using is_* to avoid the #type: ignore",
        "createdAt" : "2020-04-06T10:14:45Z",
        "updatedAt" : "2020-04-06T15:47:55Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "bcbe2aeb-1413-4183-9d77-8f8a128d4d69",
        "parentId" : "402778a1-c7e5-4ae3-a206-e5f04b579faa",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "are we now using `cast` instead of `type: ignore`?  i went with the latter bc its easier to grep for and out on a list of Things To Fix",
        "createdAt" : "2020-04-06T20:26:37Z",
        "updatedAt" : "2020-04-06T20:26:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "01bfc7ae-05d5-4e79-9437-c29b2fc83ea4",
        "parentId" : "402778a1-c7e5-4ae3-a206-e5f04b579faa",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "https://pandas.pydata.org/docs/development/contributing.html#style-guidelines specifically mentions the is_* case and suggests a refactor is the preferred route.\r\n\r\n> i went with the latter bc its easier to grep for and out on a list of Things To Fix\r\n\r\nfor me, this is OK. but I believe Jeff and Will oppose type:ignore as a reason to `revist later`. In the past, i've been in the minority and struggled to get PRs accepted. If you can see the benefits of a fix later strategy with type hints, now could be a good time to resurface this discussion.\r\n\r\npyre accepts this is a reasonable need for gradual typing, see https://pyre-check.org/docs/error-suppression.html#suppression-comment-types. it has `pyre-fixme` and `pyre-ignore`.\r\n\r\n",
        "createdAt" : "2020-04-07T11:16:00Z",
        "updatedAt" : "2020-04-07T11:16:01Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "b637e84b-8cf8-4a69-984b-ed7f0f4e1a0c",
        "parentId" : "402778a1-c7e5-4ae3-a206-e5f04b579faa",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "@jbrockmendel #32785 was opened for this discussion. see https://github.com/pandas-dev/pandas/pull/32730#discussion_r393485655 cc @jorisvandenbossche",
        "createdAt" : "2020-04-10T14:39:28Z",
        "updatedAt" : "2020-04-10T14:39:29Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "793554602a18b2535ad5eb2b98ddc7d84adbcbee",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +2863,2867 @@            # block.shape is incorrect for \"2D\" ExtensionArrays\n            # We can't, and don't need to, reshape.\n            values = values.reshape(tuple((1,) + shape))  # type: ignore\n    return values\n"
  },
  {
    "id" : "ea4c9dd3-24f8-4481-9f7f-990e2d0d1bd5",
    "prId" : 33308,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33308#pullrequestreview-388648769",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37454c4a-39e6-4294-9328-d9781c9c3c4e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this needed? (as you are calling the check in the block constructor).",
        "createdAt" : "2020-04-06T17:10:29Z",
        "updatedAt" : "2020-04-06T17:10:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1ced8689-5720-4125-b986-b8a564694831",
        "parentId" : "37454c4a-39e6-4294-9328-d9781c9c3c4e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yes, we get a bunch of test failures without this check",
        "createdAt" : "2020-04-06T17:20:21Z",
        "updatedAt" : "2020-04-06T17:20:21Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2c06aa13-c1db-433b-9940-077b3960e00c",
        "parentId" : "37454c4a-39e6-4294-9328-d9781c9c3c4e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, i think we DO want to remove this from inside block_shape though, no?",
        "createdAt" : "2020-04-06T21:16:45Z",
        "updatedAt" : "2020-04-06T21:16:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "095b8e48-b3b6-4ac7-877c-dae510d504f0",
        "parentId" : "37454c4a-39e6-4294-9328-d9781c9c3c4e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this is the whole point of block_shape, im not clear on what you're suggesting",
        "createdAt" : "2020-04-06T21:19:13Z",
        "updatedAt" : "2020-04-06T21:19:14Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "47ed478d-4093-4c6d-afc2-0623917af3b3",
        "parentId" : "37454c4a-39e6-4294-9328-d9781c9c3c4e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you have a check IN the Block constructor AND in the _block_shape function itself.",
        "createdAt" : "2020-04-06T21:55:26Z",
        "updatedAt" : "2020-04-06T21:55:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "42a27307-13c9-4132-b9f1-4ae7a8aab81b",
        "parentId" : "37454c4a-39e6-4294-9328-d9781c9c3c4e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you should have 1 or the other",
        "createdAt" : "2020-04-06T21:55:36Z",
        "updatedAt" : "2020-04-06T21:55:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d76559be-b102-459a-a419-f41038f37b31",
        "parentId" : "37454c4a-39e6-4294-9328-d9781c9c3c4e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "but we dont have a _reshape_ call in the constructor",
        "createdAt" : "2020-04-06T21:59:43Z",
        "updatedAt" : "2020-04-06T21:59:43Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d9228b36-1c1f-45ed-bdf7-a92c36c2c593",
        "parentId" : "37454c4a-39e6-4294-9328-d9781c9c3c4e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "obviously, i think we should have 2D EAs and not have to hassle with _any_ of this",
        "createdAt" : "2020-04-06T22:00:06Z",
        "updatedAt" : "2020-04-06T22:00:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "793554602a18b2535ad5eb2b98ddc7d84adbcbee",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +2859,2863 @@    if values.ndim < ndim:\n        shape = values.shape\n        if not is_extension_array_dtype(values.dtype):\n            # TODO(EA2D): https://github.com/pandas-dev/pandas/issues/23023\n            # block.shape is incorrect for \"2D\" ExtensionArrays"
  },
  {
    "id" : "c9a36ffd-0cfb-471d-bfc7-703d5f592d82",
    "prId" : 33308,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33308#pullrequestreview-388682407",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0532411-eb6c-4445-a37e-75b4b5c3454d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jbrockmendel is this not a conditional check?",
        "createdAt" : "2020-04-06T22:11:13Z",
        "updatedAt" : "2020-04-06T22:11:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a15bffbc-c4ca-4933-87e0-b8451dcdaf0f",
        "parentId" : "d0532411-eb6c-4445-a37e-75b4b5c3454d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this is a conditional check, but `self.is_extension` doesnt tell us anything about whether `values` is an EA.",
        "createdAt" : "2020-04-06T22:36:55Z",
        "updatedAt" : "2020-04-06T22:36:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d56c5ba0-1e95-4da2-b27a-35b32ba9c4fd",
        "parentId" : "d0532411-eb6c-4445-a37e-75b4b5c3454d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if we are calling .make_block from an EA block, don't we by definition *know* that we have extension block values?",
        "createdAt" : "2020-04-06T23:12:48Z",
        "updatedAt" : "2020-04-06T23:12:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f4ffa841-f4af-400e-be0d-2b9be034da36",
        "parentId" : "d0532411-eb6c-4445-a37e-75b4b5c3454d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "no.  e.g. if we call `pd.isna(frame)` that will end up with something like:\r\n\r\n```\r\nres_values = pd.isna(block.values)\r\nreturn block.make_block(res_values)\r\n```\r\n\r\nwhich will be `ndarray[bool]`",
        "createdAt" : "2020-04-06T23:15:54Z",
        "updatedAt" : "2020-04-06T23:15:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "793554602a18b2535ad5eb2b98ddc7d84adbcbee",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +246,250 @@            placement = self.mgr_locs\n        if self.is_extension:\n            values = _block_shape(values, ndim=self.ndim)\n\n        return make_block(values, placement=placement, ndim=self.ndim)"
  },
  {
    "id" : "2542733c-6764-475c-ae60-4a4bd13738b9",
    "prId" : 33308,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33308#pullrequestreview-388705743",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0d79cab-ea6f-459a-b8ea-0fac39e027fc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "my point is that is this necessary this (if), or are you saying that this is a perf issue? (e.g. we don't want to *always* call _block_shape",
        "createdAt" : "2020-04-07T00:17:54Z",
        "updatedAt" : "2020-04-07T00:17:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "438bfdbf-8af7-43a2-b54a-1df8c09194a4",
        "parentId" : "e0d79cab-ea6f-459a-b8ea-0fac39e027fc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "ATM we are calling _block_shape in a bunch of places before calling `ExtensionBlock.make_block`.  This is just moving all of those calls to one place",
        "createdAt" : "2020-04-07T00:20:29Z",
        "updatedAt" : "2020-04-07T00:20:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7d0d8756-1fd6-4306-bd77-b44f367e0f74",
        "parentId" : "e0d79cab-ea6f-459a-b8ea-0fac39e027fc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> we don't want to _always_ call `_block_shape`\r\n\r\nWith some corner-case-caveats, we only want to call it if self.is_extension, and we pretty much _always_ have to call it if self.is_extension (otherwise we could use make_block_same_class",
        "createdAt" : "2020-04-07T00:21:29Z",
        "updatedAt" : "2020-04-07T00:21:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "793554602a18b2535ad5eb2b98ddc7d84adbcbee",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +245,249 @@        if placement is None:\n            placement = self.mgr_locs\n        if self.is_extension:\n            values = _block_shape(values, ndim=self.ndim)\n"
  },
  {
    "id" : "dd20098f-0a34-4001-9944-e4f1d7eaebec",
    "prId" : 33474,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33474#pullrequestreview-543098646",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23f56986-9734-4f35-8dc3-14625ac0d2fc",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "@jbrockmendel I think it's just this line that caused the regression in #37115 and that we don't need to revert the complete PR.",
        "createdAt" : "2020-12-02T17:24:27Z",
        "updatedAt" : "2020-12-02T17:24:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "24d16089-a989-4a2c-aaca-9b639b95bc89",
        "parentId" : "23f56986-9734-4f35-8dc3-14625ac0d2fc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "what kind of block(s) do you end up with instead?",
        "createdAt" : "2020-12-02T17:37:57Z",
        "updatedAt" : "2020-12-02T17:37:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e31934e3-7149-4cde-a599-0bcd5885aedc",
        "parentId" : "23f56986-9734-4f35-8dc3-14625ac0d2fc",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "corrupted? an IntBlock with dtype float64\r\n\r\n```\r\n>>> pd.__version__\r\n'1.2.0.dev0+1432.g5fdf642368'\r\n>>>\r\n>>> df1 = pd.DataFrame(\r\n...     {\r\n...         \"a\": [\"A\", \"A\", \"B\"],\r\n...         \"b\": [\"ca\", \"cb\", \"cb\"],\r\n...         \"v\": [10] * 3,\r\n...     }\r\n... )\r\n>>> df1 = df1.set_index([\"a\", \"b\"])\r\n>>> df1[\"is_\"] = 1\r\n>>> df1\r\n       v  is_\r\na b\r\nA ca  10    1\r\n  cb  10    1\r\nB cb  10    1\r\n>>>\r\n>>> df1._data\r\nBlockManager\r\nItems: Index(['v', 'is_'], dtype='object')\r\nAxis 1: MultiIndex([('A', 'ca'),\r\n            ('A', 'cb'),\r\n            ('B', 'cb')],\r\n           names=['a', 'b'])\r\nIntBlock: slice(0, 1, 1), 1 x 3, dtype: int64\r\nIntBlock: slice(1, 2, 1), 1 x 3, dtype: int64\r\n>>>\r\n>>> df2 = df1.unstack(\"b\")\r\n>>> df2\r\n      v        is_\r\nb    ca    cb   ca   cb\r\na\r\nA  10.0  10.0  1.0  1.0\r\nB   NaN  10.0  NaN  1.0\r\n>>>\r\n>>> df2._data\r\nBlockManager\r\nItems: MultiIndex([(  'v', 'ca'),\r\n            (  'v', 'cb'),\r\n            ('is_', 'ca'),\r\n            ('is_', 'cb')],\r\n           names=[None, 'b'])\r\nAxis 1: Index(['A', 'B'], dtype='object', name='a')\r\nIntBlock: slice(0, 2, 1), 2 x 2, dtype: float64\r\nIntBlock: slice(2, 4, 1), 2 x 2, dtype: float64\r\n>>>\r\n```",
        "createdAt" : "2020-12-02T17:40:59Z",
        "updatedAt" : "2020-12-02T17:41:00Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "24281df7-16c6-4161-b491-64b65575f69f",
        "parentId" : "23f56986-9734-4f35-8dc3-14625ac0d2fc",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "run the test suite with just this change reverted and all tests pass. will put up a PR shortly.",
        "createdAt" : "2020-12-02T17:58:46Z",
        "updatedAt" : "2020-12-02T17:58:46Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f0e5d469c8eefeba2ccd10b586ce89fbb698c25",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +1412,1416 @@        new_placement = new_placement[mask]\n\n        blocks = [self.make_block_same_class(new_values, placement=new_placement)]\n        return blocks, mask\n"
  },
  {
    "id" : "bee22b98-74a2-4ebd-8587-5626ee72e0a0",
    "prId" : 34683,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34683#pullrequestreview-509947542",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca2f917d-0284-4bff-9f2a-14d8af62a5ce",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "group with Timestamp?",
        "createdAt" : "2020-10-16T00:59:18Z",
        "updatedAt" : "2020-12-17T18:17:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "afa2ed39-9c70-4606-a5d0-c55f0f1f829f",
        "parentId" : "ca2f917d-0284-4bff-9f2a-14d8af62a5ce",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "in principle third party EAs should go before this check (xref #34987)",
        "createdAt" : "2020-10-16T01:07:55Z",
        "updatedAt" : "2020-12-17T18:17:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "55637ad2e65decdb6a3f00a21c5fd136bf4c277f",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +2658,2662 @@        cls = ExtensionBlock\n\n    elif kind == \"M\":\n        cls = DatetimeBlock\n    elif kind == \"m\":"
  },
  {
    "id" : "91cb451f-b975-4b66-8911-f54551b7712c",
    "prId" : 34978,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34978#pullrequestreview-437082877",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e914b93-7a60-4fac-9e6d-ecd7826eae3a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you use this pattern and remove make_block_same_class entirely?",
        "createdAt" : "2020-06-24T23:26:06Z",
        "updatedAt" : "2020-06-24T23:26:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5b474f9b-bb4b-44fd-9f34-0bad59bad8aa",
        "parentId" : "9e914b93-7a60-4fac-9e6d-ecd7826eae3a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We can definitely change most usages.  There are a few that pass `ndim` that ill need to double-check.",
        "createdAt" : "2020-06-24T23:57:02Z",
        "updatedAt" : "2020-06-24T23:57:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5667e097a6ea6a17dd5dc11517e1e3314e8e9c97",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +313,317 @@\n        return type(self)._simple_new(new_values, new_mgr_locs, self.ndim)\n\n    @property\n    def shape(self):"
  },
  {
    "id" : "36671d54-4b27-4bb9-b69e-5ded0842d91a",
    "prId" : 35979,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35979#pullrequestreview-481492914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6939bccc-353e-424f-86fb-0aa741b98707",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "instead of this\nadd in this keyword to the EA astype\n\nit's a little more code (as likely you need to refactor into an _astype method\n\nbut better i think ",
        "createdAt" : "2020-08-29T21:54:31Z",
        "updatedAt" : "2020-09-06T00:58:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f877f556-cafb-41ef-a50b-cf3371cc503a",
        "parentId" : "6939bccc-353e-424f-86fb-0aa741b98707",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "I can add this, although it becomes _a lot_ more code. I was able to pull a tiny bit into a helper function, but mostly each method seems to have its own idiosyncrasies that makes it hard to abstract away details. This became quite messy so let me know if I should revert and maybe leave as a follow-up enhancement.",
        "createdAt" : "2020-08-30T01:30:23Z",
        "updatedAt" : "2020-09-06T00:58:09Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "06dae710-68f1-44d8-98f4-6b167cd13fec",
        "parentId" : "6939bccc-353e-424f-86fb-0aa741b98707",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "hmm, Changing the signature on the base extension array is an api change. I'm not so sure if this is a good idea since this only fixes pandas EAs and third party EAs that have overridden astype will need to update their code to support this.",
        "createdAt" : "2020-09-02T15:36:11Z",
        "updatedAt" : "2020-09-06T00:58:09Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "0125f026-c80b-4222-a895-b7974feacd7f",
        "parentId" : "6939bccc-353e-424f-86fb-0aa741b98707",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "It seems too large of a change for a bug fix, went ahead and reverted",
        "createdAt" : "2020-09-03T04:59:23Z",
        "updatedAt" : "2020-09-06T00:58:09Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "61b6eb8251f46fd504b3c266b7d06ab8c9e91112",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +583,587 @@        if self.is_extension:\n            try:\n                values = self.values.astype(dtype)\n            except (ValueError, TypeError):\n                if errors == \"ignore\":"
  },
  {
    "id" : "49cf6b31-8647-4636-870c-e3990461524e",
    "prId" : 36093,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36093#pullrequestreview-482056759",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e7999ea-0cc1-4614-9d8c-0dfc1852f418",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think need to update this comment now though - so is there no way to keep this in the same branch as the ExtensionArray check? Would be nice to stay as generic as possible",
        "createdAt" : "2020-09-03T16:24:41Z",
        "updatedAt" : "2020-09-04T16:55:30Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "2d432f54-5853-433d-93db-71c1c9fc96ba",
        "parentId" : "1e7999ea-0cc1-4614-9d8c-0dfc1852f418",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'll see if we can use to_numpy in the general case",
        "createdAt" : "2020-09-03T17:30:31Z",
        "updatedAt" : "2020-09-04T16:55:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "30be372ccdac418933d851e3f253412a06868418",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +2925,2929 @@    \"\"\"\n    if isinstance(mask, ExtensionArray):\n        # We could have BooleanArray, Sparse[bool], ...\n        #  Except for BooleanArray, this is equivalent to just\n        #  np.asarray(mask, dtype=bool)"
  },
  {
    "id" : "d6e2c918-6ca1-4670-a3cc-56cc32846809",
    "prId" : 36107,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36107#pullrequestreview-482932688",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ae07297-b1b4-4e7a-8975-6f33cdd62cc4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "btw, we i think you can remove this at this point (assuming all of the return values are List[Block])",
        "createdAt" : "2020-09-04T20:50:42Z",
        "updatedAt" : "2020-09-04T20:50:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "41548606025cac0c0bd4fa7fb4296e5da4afce92",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +2770,2774 @@\n\ndef extend_blocks(result, blocks=None):\n    \"\"\" return a new extended blocks, given the result \"\"\"\n    if blocks is None:"
  },
  {
    "id" : "8b113842-9053-45f5-b8f4-45c3775c10f9",
    "prId" : 36150,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36150#pullrequestreview-483166290",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "837f800b-30d1-44d7-9922-852abff0a0d0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : ".to_numpy() ?",
        "createdAt" : "2020-09-06T17:08:50Z",
        "updatedAt" : "2020-09-12T19:58:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "faa0c570-d0e5-424a-ab5e-741a46ef34a8",
        "parentId" : "837f800b-30d1-44d7-9922-852abff0a0d0",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "no, to_native_types returns a Block",
        "createdAt" : "2020-09-06T19:07:44Z",
        "updatedAt" : "2020-09-12T19:58:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "29c9ee3fad73d2c15d0b12498567aa1078d2f16a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +594,598 @@                # use native type formatting for datetime/tz/timedelta\n                if self.is_datelike:\n                    values = self.to_native_types().values\n\n                # astype formatting"
  },
  {
    "id" : "7ea7af1a-f4c3-4f4d-b596-69dcfc0f1c03",
    "prId" : 36150,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36150#pullrequestreview-483166400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42da4568-fd9f-4684-9da1-f76b75f4eee6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you now type all of these to return a Block?",
        "createdAt" : "2020-09-06T17:09:34Z",
        "updatedAt" : "2020-09-12T19:58:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "33072725-8d75-4c4e-8c13-c99d17ed1d54",
        "parentId" : "42da4568-fd9f-4684-9da1-f76b75f4eee6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sure",
        "createdAt" : "2020-09-06T19:07:50Z",
        "updatedAt" : "2020-09-12T19:58:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "badcd03d-3ab8-451b-9a49-88e01c2c618e",
        "parentId" : "42da4568-fd9f-4684-9da1-f76b75f4eee6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "actually adding this makes mypy complain about signature mismatch, rather not futz with it ATM",
        "createdAt" : "2020-09-06T19:09:58Z",
        "updatedAt" : "2020-09-12T19:58:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "29c9ee3fad73d2c15d0b12498567aa1078d2f16a",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +2407,2411 @@        return super().fillna(value, **kwargs)\n\n    def to_native_types(self, na_rep=\"NaT\", **kwargs):\n        \"\"\" convert to our native types format \"\"\"\n        tda = self.array_values()"
  },
  {
    "id" : "a4f39eb6-174e-44c2-af4d-406588faa931",
    "prId" : 36444,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36444#pullrequestreview-491466352",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e37ff3ea-a96d-475f-83e2-469cce901036",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this would only hit a non-inferred path, i don't think your added code does anything.",
        "createdAt" : "2020-09-18T13:07:00Z",
        "updatedAt" : "2020-09-25T11:06:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "551fb7e3-ff1d-403b-98e8-1e37669f20f9",
        "parentId" : "e37ff3ea-a96d-475f-83e2-469cce901036",
        "authorId" : "ac102de0-f4b4-428e-8026-bda31d96192d",
        "body" : "If the element is a simple python float, `maybe_infer_dtype_type` return `None` so we are in this case.",
        "createdAt" : "2020-09-18T13:31:00Z",
        "updatedAt" : "2020-09-25T11:06:50Z",
        "lastEditedBy" : "ac102de0-f4b4-428e-8026-bda31d96192d",
        "tags" : [
        ]
      }
    ],
    "commit" : "36a88fef6769b4c0a6cd4bccbaf07d58051e75ca",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +2071,2075 @@        # We have not inferred an integer from the dtype\n        # check if we have a builtin int or a float equal to an int\n        return is_integer(element) or (is_float(element) and element.is_integer())\n\n"
  },
  {
    "id" : "7473cd23-c4be-406b-beec-209108ad50f1",
    "prId" : 36444,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36444#pullrequestreview-493882423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c4db465-9fe4-43c9-ab76-f8fce3107409",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jbrockmendel are you sure you think the patch should be *here*; this is hit by a lot of paths where this doesn't make any sense. we almost always want to take some sort of action based on return value here if it fails. e.g. why is this not more specific to replace?\r\n",
        "createdAt" : "2020-09-22T01:49:39Z",
        "updatedAt" : "2020-09-25T11:06:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "42a35055-7d2f-4886-b80b-1e89a136d84e",
        "parentId" : "5c4db465-9fe4-43c9-ab76-f8fce3107409",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Also is this simply wrong:\r\n```python\r\n[ins] In [3]: is_integer(1.0)\r\nOut[3]: False\r\n```\r\nespecially since\r\n```python\r\n[ins] In [4]: 1.0.is_integer()\r\nOut[4]: True\r\n```",
        "createdAt" : "2020-09-22T01:56:51Z",
        "updatedAt" : "2020-09-25T11:06:50Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "d8c924eb-c209-4341-8eca-1b539b142319",
        "parentId" : "5c4db465-9fe4-43c9-ab76-f8fce3107409",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ahh its doing an equality check under the hood, we are not\r\n\r\n```\r\nn [60]: 1.0.is_integer()                                                                                                                                  \r\nOut[60]: True\r\n\r\nIn [61]: 1.1.is_integer()                                                                                                                                  \r\nOut[61]: False\r\n```",
        "createdAt" : "2020-09-22T02:09:51Z",
        "updatedAt" : "2020-09-25T11:06:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "346c09f4-049e-40a1-93a3-9a1fbe236528",
        "parentId" : "5c4db465-9fe4-43c9-ab76-f8fce3107409",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe could replace this entirely with `element.is_integer()` and call it a day",
        "createdAt" : "2020-09-22T02:10:40Z",
        "updatedAt" : "2020-09-25T11:06:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "978afb2e-be80-4fbc-aca6-966e3853d669",
        "parentId" : "5c4db465-9fe4-43c9-ab76-f8fce3107409",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "though my concern is *still* that the purpose of this check is *can* we hold an integer, not are we a float and *can* be treated as an integer. though practically it may not make a difference.",
        "createdAt" : "2020-09-22T02:11:20Z",
        "updatedAt" : "2020-09-25T11:06:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9b8671b2-ce79-4961-b27a-981ca430c54b",
        "parentId" : "5c4db465-9fe4-43c9-ab76-f8fce3107409",
        "authorId" : "ac102de0-f4b4-428e-8026-bda31d96192d",
        "body" : "So I don't realy understand ...\r\nNeed I replace `return is_integer(element)` into `return element.is_integer()`.\r\nIf I do that, need I try except the `AttributeError` and return `None` ?",
        "createdAt" : "2020-09-22T08:57:33Z",
        "updatedAt" : "2020-09-25T11:06:50Z",
        "lastEditedBy" : "ac102de0-f4b4-428e-8026-bda31d96192d",
        "tags" : [
        ]
      },
      {
        "id" : "1ead8cf4-887f-47bc-ac64-a3311f4e079e",
        "parentId" : "5c4db465-9fe4-43c9-ab76-f8fce3107409",
        "authorId" : "ac102de0-f4b4-428e-8026-bda31d96192d",
        "body" : "Or `False` ?",
        "createdAt" : "2020-09-22T08:57:58Z",
        "updatedAt" : "2020-09-25T11:06:50Z",
        "lastEditedBy" : "ac102de0-f4b4-428e-8026-bda31d96192d",
        "tags" : [
        ]
      },
      {
        "id" : "38f727f5-e860-4c40-9a6a-be51c930cf4b",
        "parentId" : "5c4db465-9fe4-43c9-ab76-f8fce3107409",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Longer-term we're going to have to look more carefully about can_hold_element and what we want it to mean.  In the short run, for this check to be consistent with the tipo check above it should exclude floats\r\n\r\n(so my previous suggestion may have been unhelpful, sorry)",
        "createdAt" : "2020-09-22T21:37:31Z",
        "updatedAt" : "2020-09-25T11:06:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9c0b04f8-03e2-4c8e-b143-315bf76e8202",
        "parentId" : "5c4db465-9fe4-43c9-ab76-f8fce3107409",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok this is fine @QuentinN42 if you can add a comment here would be good",
        "createdAt" : "2020-09-22T22:12:02Z",
        "updatedAt" : "2020-09-25T11:06:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "36a88fef6769b4c0a6cd4bccbaf07d58051e75ca",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +2071,2075 @@        # We have not inferred an integer from the dtype\n        # check if we have a builtin int or a float equal to an int\n        return is_integer(element) or (is_float(element) and element.is_integer())\n\n"
  },
  {
    "id" : "0eaed755-2054-4c08-b525-9ad3dc28560a",
    "prId" : 36534,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36534#pullrequestreview-494819130",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c49baabb-9785-4cea-a332-bca9705e524e",
        "parentId" : null,
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "What this parameter ``try_cast`` is for? Looks like it is not used in the function. It will be better for the code cleanup if you delete it from the function signature and everywhere it gets called.",
        "createdAt" : "2020-09-23T15:00:46Z",
        "updatedAt" : "2020-09-23T15:01:08Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      },
      {
        "id" : "35187cc3-60d1-475c-9207-b4842a0d4103",
        "parentId" : "c49baabb-9785-4cea-a332-bca9705e524e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Good catch",
        "createdAt" : "2020-09-23T15:44:32Z",
        "updatedAt" : "2020-09-23T15:44:32Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "844315fe-4863-46b9-a361-b6cfbcb62a86",
        "parentId" : "c49baabb-9785-4cea-a332-bca9705e524e",
        "authorId" : "9c7f8527-1607-495c-aa95-57a3d4a926a2",
        "body" : "Sure, I saw quite some of these arguments in other functions as well (ones which are not used), but when I remove them, some tests fail. So would it be safe to remove those in the tests or the tests themselves as well? ",
        "createdAt" : "2020-09-23T15:56:50Z",
        "updatedAt" : "2020-09-23T15:56:50Z",
        "lastEditedBy" : "9c7f8527-1607-495c-aa95-57a3d4a926a2",
        "tags" : [
        ]
      },
      {
        "id" : "79c1b32f-9803-4c79-bec0-22b9c38d9e6b",
        "parentId" : "c49baabb-9785-4cea-a332-bca9705e524e",
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "It is hard to say why tests fail in this case without looking at the traceback.\r\nNeed to check whether the test itself calls the method with all the arguments, or the method is called somewhere else. In the latter case one needs to change all calls of the method (that could probably be called in multiple places).",
        "createdAt" : "2020-09-23T16:03:35Z",
        "updatedAt" : "2020-09-23T16:03:35Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      },
      {
        "id" : "0436dd6e-7618-4e40-9041-9b56d3f26dd3",
        "parentId" : "c49baabb-9785-4cea-a332-bca9705e524e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "if its just that the tests pass the unused arg directly, then its fine to remove the arg from the test too.\r\n\r\nIf you've got some easy things (like this PR so far) and some less-obvious things, usually best to keep them as separate PRs.",
        "createdAt" : "2020-09-23T16:04:14Z",
        "updatedAt" : "2020-09-23T16:04:15Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a51a480692ade4aa3caa394891e46006db893286",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1365,1369 @@            - ``ignore`` : suppress exceptions. On error return original object\n        try_cast: bool, default False\n        axis : int, default 0\n\n        Returns"
  },
  {
    "id" : "96204f61-dfe9-4064-a9a5-91f15f1543ff",
    "prId" : 36624,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36624#pullrequestreview-496542082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b5d6200-53eb-4ea2-b46d-a2e42360eaaf",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you add a test for codecov?",
        "createdAt" : "2020-09-25T15:47:56Z",
        "updatedAt" : "2020-09-25T18:22:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "437be126ec0a73fb084335259e98d8cffae425f3",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1184,1188 @@            if fill_value is not None:\n                # similar to validate_fillna_kwargs\n                raise ValueError(\"Cannot pass both fill_value and method\")\n\n            return self._interpolate_with_fill("
  },
  {
    "id" : "d032adcc-f0b9-44b8-9f40-757d5aadaf4a",
    "prId" : 36867,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36867#pullrequestreview-501665354",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04026e43-6198-4755-88a9-e21ad8d30efc",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this looks good, but is there any way to do this within ObjectValuesExtensionBlock?  (big picture we're looking to get less special-casing of Block subclasses)\r\n\r\nso maybe in ObjectValuesExtensionBlock could write\r\n\r\n```\r\ndef _can_hold_element(self, element):\r\n        tipo = maybe_infer_dtype_type(element)\r\n        if tipo is not None:\r\n            return issubclass(tipo.type, self.dtype.type)\r\n        return isinstance(element, self.dtype.type)\r\n```\r\n\r\n?  Might need to check/test that this works for IntervalDtype too (wouldnt surprise me if we see the analogous bug there)",
        "createdAt" : "2020-10-04T22:34:48Z",
        "updatedAt" : "2020-11-16T03:22:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cc38c8b3bb880a48795875c2560234524ad870c",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2042,2046 @@        return self.values.astype(object)\n\n    def _can_hold_element(self, element: Any) -> bool:\n        if is_valid_nat_for_dtype(element, self.dtype):\n            return True"
  },
  {
    "id" : "bc78ce4f-7aab-4450-8667-d6a81dd78d51",
    "prId" : 36867,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36867#pullrequestreview-526815730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdd6cb41-a2ea-4175-90d8-c852b5e2dded",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "why this? i dont think we have this in other _can_hold_element methods",
        "createdAt" : "2020-11-04T19:15:53Z",
        "updatedAt" : "2020-11-16T03:22:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "baa818cf-910c-44e1-8f03-9a3a970a1fcd",
        "parentId" : "bdd6cb41-a2ea-4175-90d8-c852b5e2dded",
        "authorId" : "a269f8b9-b7fc-47e1-8763-e6e76427efc2",
        "body" : "Without it, `pandas/tests/extension/test_interval.py::TestSetitem::test_setitem_empty_indexer` will not pass. It is also used on L2223. If there's a better way to handle this please let me know, but I did borrow this from 2223",
        "createdAt" : "2020-11-10T02:56:13Z",
        "updatedAt" : "2020-11-16T03:22:51Z",
        "lastEditedBy" : "a269f8b9-b7fc-47e1-8763-e6e76427efc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cc38c8b3bb880a48795875c2560234524ad870c",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2046,2050 @@            return True\n        if isinstance(element, list) and len(element) == 0:\n            return True\n        tipo = maybe_infer_dtype_type(element)\n        if tipo is not None:"
  },
  {
    "id" : "5349c554-96ee-4773-93b3-cef78beff953",
    "prId" : 37018,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37018#pullrequestreview-506109752",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acfa6581-bfd1-475d-8160-938d4760cbf9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what hits this now?",
        "createdAt" : "2020-10-10T16:27:58Z",
        "updatedAt" : "2020-10-10T16:28:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8151502d-915b-4700-8d50-d70004705102",
        "parentId" : "acfa6581-bfd1-475d-8160-938d4760cbf9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "interpolate",
        "createdAt" : "2020-10-10T16:30:24Z",
        "updatedAt" : "2020-10-10T16:30:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bae5a1cb36dd27e491a45664e0355821b06d275b",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2381,2385 @@            if values.dtype.kind != \"m\":\n                # caller is responsible for ensuring timedelta64 dtype\n                raise TypeError(values.dtype)  # pragma: no cover\n\n            values = TimedeltaArray._from_sequence(values)._data"
  },
  {
    "id" : "ef4c91ab-5685-4802-9523-732e97082451",
    "prId" : 37799,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37799#pullrequestreview-529740473",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfeb8ea8-b6b3-4e66-a80d-3863826b242b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could be done as a list comprehension",
        "createdAt" : "2020-11-13T05:05:48Z",
        "updatedAt" : "2020-11-13T16:35:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "15b80945-8a0d-4f59-822b-87338730b937",
        "parentId" : "bfeb8ea8-b6b3-4e66-a80d-3863826b242b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "but nbd",
        "createdAt" : "2020-11-13T05:05:55Z",
        "updatedAt" : "2020-11-13T16:35:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "76a97eb8d408801d586f3f22c48c3baf51e32f78",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +458,462 @@\n        new_blocks = []\n        for i, ref_loc in enumerate(self.mgr_locs):\n            vals = self.values[slice(i, i + 1)]\n"
  },
  {
    "id" : "87009b03-9ce2-47c3-9f5d-3e4c85967fa0",
    "prId" : 37799,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37799#pullrequestreview-530545965",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "894b1cb1-3934-44d6-a35a-652148914ef3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "might be worth adding some unit tests for this (e.g. on a block that is empty, since column and multilple)\r\n",
        "createdAt" : "2020-11-13T13:21:54Z",
        "updatedAt" : "2020-11-13T16:35:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "00fff958-f9f0-4307-a3be-74c7ebad3e59",
        "parentId" : "894b1cb1-3934-44d6-a35a-652148914ef3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "good idea, was accidentally making a copy instead of a view!",
        "createdAt" : "2020-11-13T16:35:24Z",
        "updatedAt" : "2020-11-13T16:35:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2178cf00-a541-4129-95db-530d89d835ce",
        "parentId" : "894b1cb1-3934-44d6-a35a-652148914ef3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "wow, testing is good!",
        "createdAt" : "2020-11-14T02:23:53Z",
        "updatedAt" : "2020-11-14T02:24:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "76a97eb8d408801d586f3f22c48c3baf51e32f78",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +457,461 @@        assert self.ndim == 2\n\n        new_blocks = []\n        for i, ref_loc in enumerate(self.mgr_locs):\n            vals = self.values[slice(i, i + 1)]"
  }
]