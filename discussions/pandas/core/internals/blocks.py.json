[
  {
    "id" : "59fe113b-dffd-4e9c-b535-67a0dec98dd9",
    "prId" : 21477,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21477#pullrequestreview-141351263",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68f426ab-1837-489e-9eee-8773f49c2816",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string here",
        "createdAt" : "2018-07-29T15:23:13Z",
        "updatedAt" : "2018-08-09T02:14:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4729fc5e2f5bf0c8804318333c9b49f4cc3a1b97",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +2510,2514 @@\n    def _replace_single(self, to_replace, value, inplace=False, filter=None,\n                        regex=False, convert=True, mgr=None, mask=None):\n        \"\"\"\n        Replace elements by the given value."
  },
  {
    "id" : "c73b6a9f-bf57-4718-b917-f6841cc19f58",
    "prId" : 21477,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21477#pullrequestreview-141935956",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49f360e2-3abc-4f92-89b8-d929fa03e2bf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same as above (you *can* make a shared doc-string if you want here)",
        "createdAt" : "2018-07-31T12:50:03Z",
        "updatedAt" : "2018-08-09T02:14:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4729fc5e2f5bf0c8804318333c9b49f4cc3a1b97",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +2618,2622 @@\n        Parameters\n        ----------\n        to_replace : object or pattern\n            Scalar to replace or regular expression to match."
  },
  {
    "id" : "785e00c8-dc38-42cc-a01e-cd5ed083057a",
    "prId" : 21986,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21986#pullrequestreview-141317571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4737b4f7-334c-40bc-9448-32760a92d01b",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "This modification is deep within the internals (block's definition of `take_nd`), and I am not sure how to really add a test for this.",
        "createdAt" : "2018-07-26T00:30:55Z",
        "updatedAt" : "2018-07-28T18:53:13Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "846cc779-954f-4520-9ec7-d7a063aca04d",
        "parentId" : "4737b4f7-334c-40bc-9448-32760a92d01b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this actually isn't used since allow_fill=False",
        "createdAt" : "2018-07-28T13:46:24Z",
        "updatedAt" : "2018-07-28T18:53:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "05e4a36cd7d5c8449e362fc30fca03cf867144e0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1249,1253 @@            fill_value = self.fill_value\n            new_values = algos.take_nd(values, indexer, axis=axis,\n                                       allow_fill=False, fill_value=fill_value)\n        else:\n            fill_value = fill_tuple[0]"
  },
  {
    "id" : "e80b488f-c630-4615-a19b-ae96e1bc7b79",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-162453380",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff8b0c67-28cd-4c3d-b404-e01acce0cc06",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Didn't seem worth making this part of the ExtensionDtype interface.",
        "createdAt" : "2018-08-13T20:11:16Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "ee4c8e5f-0928-46ff-a3fe-d9d26882f242",
        "parentId" : "ff8b0c67-28cd-4c3d-b404-e01acce0cc06",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we have an issue to simply remove all of the ftype stuff. not averse to doing this (here or maybe follow up)",
        "createdAt" : "2018-08-31T10:39:27Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "76319707-08c6-49f4-9068-bc443572dc01",
        "parentId" : "ff8b0c67-28cd-4c3d-b404-e01acce0cc06",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't ``.subtype`` just return ``None`` for arrays such as Integer, Datetime (as opposed to Categorical / Interval) which do have meaningiful subtypes, then can just do this generally?",
        "createdAt" : "2018-10-05T11:16:48Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "25c7aa58-b1ee-4739-8b27-0b64a5b694c1",
        "parentId" : "ff8b0c67-28cd-4c3d-b404-e01acce0cc06",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "https://github.com/pandas-dev/pandas/issues/22224",
        "createdAt" : "2018-10-08T12:47:28Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +344,348 @@    @property\n    def ftype(self):\n        if getattr(self.values, '_pandas_ftype', False):\n            dtype = self.dtype.subtype\n        else:"
  },
  {
    "id" : "0ab9e920-9b4a-4823-a615-3937203ee268",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-145848270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "404812ac-97c5-428f-9b46-9c034944a556",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Previously `.astype` didn't dispatch to `ExtensionArray.astype`. We would call `.get_values` first. I can split these changes out to a separate PR.",
        "createdAt" : "2018-08-13T20:12:12Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "2afff3e3-b198-4de0-a5d2-f6f9ad18ac22",
        "parentId" : "404812ac-97c5-428f-9b46-9c034944a556",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Working on a SetArray based on EA - would need exactly this. ",
        "createdAt" : "2018-08-13T21:43:24Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +636,640 @@            if dtype == np.object_:\n                klass = ObjectBlock\n            elif is_extension_array_dtype(dtype):\n                klass = ExtensionBlock\n"
  },
  {
    "id" : "1971c201-8ab6-4899-9f27-24985c6d4f25",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-162854354",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff813d2e-13c4-47bb-b297-16899d1e8429",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe we should have ``is_extension_array_scalar_dtype(value)`` to make this more specific?",
        "createdAt" : "2018-08-31T10:40:22Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ff223350-059c-4e41-88a0-ba95f7b5c7e6",
        "parentId" : "ff813d2e-13c4-47bb-b297-16899d1e8429",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "What that would look like for 3rd party extension arrays? I suppose we could look through the `.type` of all the types registered with pandas, but registering is optional...",
        "createdAt" : "2018-10-08T18:47:54Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "5f419d74-0f38-4ec2-bedf-7837ef794a01",
        "parentId" : "ff813d2e-13c4-47bb-b297-16899d1e8429",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use registering is optional, but doesn't matter here, my point is we dont' have a way of detecting scalar extension types. (meaning a scalar defined as part of an extension type). we in theory should never see, but I would guess this leaks thru",
        "createdAt" : "2018-10-09T12:11:45Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +2317,2321 @@    def should_store(self, value):\n        return (issubclass(value.dtype.type, np.timedelta64) and\n                not is_extension_array_dtype(value))\n\n    def to_native_types(self, slicer=None, na_rep=None, quoting=None,"
  },
  {
    "id" : "080d822d-676c-4405-8bea-a0d3b049c5da",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-161988023",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83fb43ed-44f7-41a4-8476-4f6f0a6359e5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see coment above",
        "createdAt" : "2018-10-05T11:17:12Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +2094,2098 @@    @property\n    def _ftype(self):\n        return getattr(self.values, '_pandas_ftype', Block._ftype)\n\n"
  },
  {
    "id" : "ecb186c9-a911-46b1-91ca-8b66ba133bc3",
    "prId" : 22343,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22343#pullrequestreview-146447194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@TomAugspurger are you really really sure this is needed? \r\nall of this already works with IntegerArray so not t really sure what problem you are trying to solve\r\n",
        "createdAt" : "2018-08-15T11:55:02Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c212ce2d-3df7-4d1a-ac29-71513f01e323",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Needed for https://github.com/pandas-dev/pandas/pull/22325/.\r\n\r\nSparse has special semantics for `.astype`ing, `Series[sparse].astype(np.dtype)` is interpreted as astyping the underlying `.values.sp_values`, rather than densifying and asytping. I'd like to deprecate this, but that's another matter.\r\n\r\nIn general though, it seems like EAs should have a say in how they're astyped, rather than always going through `.get_values`.",
        "createdAt" : "2018-08-15T12:22:47Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "2465ee07-b60a-4efd-a72c-80702221e950",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we already do this is my point ",
        "createdAt" : "2018-08-15T12:27:42Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3e5ea92f-f28c-448e-9d33-b4bd64d104aa",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Not on master? That hit's https://github.com/pandas-dev/pandas/blob/master/pandas/core/internals/blocks.py#L652, which converts to an ndarray, before ever calling the extension array's astype.",
        "createdAt" : "2018-08-15T12:31:20Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c9c1e718-7fde-45ca-beb6-21a7dc8c72da",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "At least, my new tests fail on master without these changes. I'm not sure if / how IntegerArray is being handled differently.",
        "createdAt" : "2018-08-15T12:34:09Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "71252207-e738-404c-9ff6-7aaebf1598d8",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "We don't already \"do\" this (depending on what you mean with \"do\" .. :-))\r\n\r\nThe reason this already works correctly for integer dtypes, is because we are converting the values to an array, and then pass this array to the dtypes array constructor (in case of an EA dtype). \r\n\r\nBut as Tom tries to argue, always converting to an ndarray (which is what `get_values` does) is not necessarily a good idea. It might not work (in case of sparse), or can also less efficient (what is actually the case for the integers -> eg when going from Int64 -> Int32, we first convert the Int64 EA to object ndarray to then convert (and infer missing values) again to EA of Int32. This could be done much more efficient).",
        "createdAt" : "2018-08-15T12:51:58Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "25b49ef3-7301-4130-96cc-a7439db0af63",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> [about Int EA astyping] This could be done much more efficient\r\n\r\nAnd note that this (the efficient shortcut for going from one int EA to another) is actually implemented in `IntegerArray.astype`. We only never call this in case of `Series(EA).astype(..)` due to the current implementation.",
        "createdAt" : "2018-08-15T12:57:38Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "67595ac8-3310-408d-946d-48186030ebdf",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i am not arguing that we shouldn’t do this\r\nthe implementation is way too convoluted currently",
        "createdAt" : "2018-08-15T13:00:51Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2ce85650-7b1f-4cc5-b0ba-48a93405fd6a",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "do you mean the current code in master or this PR? \r\n",
        "createdAt" : "2018-08-15T13:04:16Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "84ab879e-fd9c-4338-ae7a-83987a16ae56",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this PR\r\n\r\nthere is a ton of code in astype to dispatch to extension types already\r\nthis adds yet another branch ",
        "createdAt" : "2018-08-15T13:06:34Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2533c08c-5482-44ed-b359-467b07a3c568",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you point to this \"ton of code\"? I don't see any other dispatch to EAs. \r\nWhat is done is the generic conversion to array and then the use of `astype_nansafe` (which has a dispatch to EAs, but for the target EA dtype, not for the calling EA dtype)",
        "createdAt" : "2018-08-15T13:11:51Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "21d34ac6-3084-428d-94a3-696000f1688e",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "It's a 2 line change, this extra if condition. Which of those two lines is the convoluted one?",
        "createdAt" : "2018-08-15T13:30:23Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "83130ecd-8c74-4d87-b854-f8fcdb113c4e",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, I could swear I add an ``.is_extension`` branch already, that's why this looks weird. In any event this has lots of if/then condition. Please make a note / issue to clean this up.",
        "createdAt" : "2018-08-15T13:39:41Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2606d02bb738fa914d48d5b460725b506d8e0a0a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +638,642 @@            if values is None:\n\n                if self.is_extension:\n                    values = self.values.astype(dtype)\n                else:"
  },
  {
    "id" : "7107158b-47ce-4c2f-9b38-70244c3475b2",
    "prId" : 22387,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22387#pullrequestreview-148459399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91dca338-4142-4fe3-bf71-cc852b7f74f2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "bonus points for the Parameters :> (future PR ok too)",
        "createdAt" : "2018-08-22T12:33:42Z",
        "updatedAt" : "2018-08-22T12:33:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5b556d77466ae317c4772628c1f5ef4392b1bad",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +2075,2079 @@        Dispatches to underlying ExtensionArray and re-boxes in an\n        ExtensionBlock.\n        \"\"\"\n        # type: (int, Optional[BlockPlacement]) -> List[ExtensionBlock]\n        return [self.make_block_same_class(self.values.shift(periods=periods),"
  },
  {
    "id" : "1c082896-e40d-4b02-bd9e-01a84a8d789e",
    "prId" : 22699,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22699#pullrequestreview-156349074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0d6264f-6f95-4ef0-811d-63d399ce0f29",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does the context manager restore all of the warnings filters after? (I guess that is the point?)",
        "createdAt" : "2018-09-18T11:41:14Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "96556d61-5491-4c14-829a-4a4a42282322",
        "parentId" : "b0d6264f-6f95-4ef0-811d-63d399ce0f29",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah, that's the idea. Ideally libraries shouldn't modify the global warnings registry without good cause.",
        "createdAt" : "2018-09-18T12:51:39Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4990fc2d984b536e5c7c97ad55d4f550ae661867",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3491,3495 @@        # we ignore ComplexWarning here\n        with warnings.catch_warnings(record=True):\n            warnings.simplefilter(\"ignore\", np.ComplexWarning)\n            nn_at = nn.astype(v.dtype)\n"
  },
  {
    "id" : "339d3878-bf49-4f27-b004-023da1d72dc2",
    "prId" : 22869,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22869#pullrequestreview-162784461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a08672dc-fe57-4c60-a74e-1d938bdb33c1",
        "parentId" : null,
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Changed the message not to raise `AttributeError`.",
        "createdAt" : "2018-10-09T09:08:01Z",
        "updatedAt" : "2018-10-10T01:38:53Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb849caab84551790cae6f66c18f341758c1ead4",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +676,680 @@                raise TypeError(\n                    \"cannot set astype for copy = [{copy}] for dtype \"\n                    \"({dtype} [{shape}]) to different shape \"\n                    \"({newb_dtype} [{newb_shape}])\".format(\n                        copy=copy, dtype=self.dtype.name,"
  },
  {
    "id" : "46bbab82-d7e2-4d11-94ea-dab8533519b3",
    "prId" : 23260,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23260#pullrequestreview-166763754",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6330ac2c-8bef-497d-9758-418cfe56a699",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is the only place where the passed `mgr` is ever used.  I think we can get `axes` out too, but am holding off on that.",
        "createdAt" : "2018-10-20T21:49:12Z",
        "updatedAt" : "2018-10-23T03:13:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "63dadd1a07d7a1d97ae5977cba05b6dbbb322f7a",
    "line" : 188,
    "diffHunk" : "@@ -1,1 +1552,1556 @@                ax = Float64Index([qs])\n            else:\n                ax = axes[0]\n\n            if is_empty:"
  },
  {
    "id" : "38b0879b-d89c-49bd-8149-cf29df69b38d",
    "prId" : 23284,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23284#pullrequestreview-168796756",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a58468c-9f30-4acf-b664-7cf9fe2c7c96",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see my comment in other PR (about stack)",
        "createdAt" : "2018-10-26T00:44:28Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6c463fc7-d277-4f7a-bd6e-40b2424f54a5",
        "parentId" : "5a58468c-9f30-4acf-b664-7cf9fe2c7c96",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Replying here, since I'm working on this first\r\n\r\n> so maybe should just move the is_extension_array_dtype up to first, and add a is_extension_dtype(self.values) test as well (should encompas your is_sparse check) and is more general\r\n\r\nDoing the extension type check first doesn't quite work. In the Sparse case, we have `self.values` being sparse, but dtype is `'object'`. For normal EAs, we want an ObjectBlock here, since `EA.astype(object)` will return an ndarray of objects.\r\n\r\nUnfortunately, sparse is different, since `SparseArray.astype(object)` will return a SparseArray.",
        "createdAt" : "2018-10-26T12:22:46Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "56e5f2fc31669e6708ffb15340da91d6e9e696e3",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +635,639 @@\n        if klass is None:\n            if is_sparse(self.values):\n                # special case sparse, Series[Sparse].astype(object) is sparse\n                klass = ExtensionBlock"
  },
  {
    "id" : "31b94c0f-4cc3-4aa0-942c-2d984b135d3e",
    "prId" : 23284,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23284#pullrequestreview-168799728",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a58bfe3-4f36-4a47-9ec2-04f8e16fb297",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string (or does it share)?",
        "createdAt" : "2018-10-26T00:45:43Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "793fbf79-069a-4edd-8762-ba0bebd36181",
        "parentId" : "6a58bfe3-4f36-4a47-9ec2-04f8e16fb297",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The inherited one OK. I'm going to leave a comment explaining why we override.",
        "createdAt" : "2018-10-26T12:31:28Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "56e5f2fc31669e6708ffb15340da91d6e9e696e3",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +2003,2007 @@        # Instead, we unstack an ndarray of integer positions, followed by\n        # a `take` on the actual values.\n        dummy_arr = np.arange(n_rows)\n        dummy_unstacker = functools.partial(unstacker_func, fill_value=-1)\n        unstacker = dummy_unstacker(dummy_arr)"
  },
  {
    "id" : "8e337e09-2232-43a7-a374-979c7517e301",
    "prId" : 23284,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23284#pullrequestreview-168801534",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d36c7b3-6650-483f-bfef-044fcc0b5677",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "would not this generically work for all unstacking/ (e.g. what if you make this the super method)?",
        "createdAt" : "2018-10-26T00:46:59Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ef625ef2-0d0c-4fb2-afa8-17f98d5b885d",
        "parentId" : "6d36c7b3-6650-483f-bfef-044fcc0b5677",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think this is slower in general. It's necessarily slower for NumPy types, since you have to do the reshaping / unstack on the ndarray of positions anyway.\r\n\r\nThe hope is that the cost of the additional `take` per column is offset by not converting to an ndarray[object] in the first place.\r\n\r\nWorking on benchmarks now.",
        "createdAt" : "2018-10-26T12:36:28Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "56e5f2fc31669e6708ffb15340da91d6e9e696e3",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +2008,2012 @@\n        new_placement, new_values, mask = self._get_unstack_items(\n            unstacker, new_columns\n        )\n"
  },
  {
    "id" : "d44647fd-f819-48c2-a89c-399dd642edca",
    "prId" : 23601,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23601#pullrequestreview-173713738",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "666cd383-ec82-4c8d-a226-95396c7681c0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is a pretty opaque place to put this, but i get it. Did you add to the deprecations list?",
        "createdAt" : "2018-11-11T14:57:14Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "50e7d1ad-d1f6-42d2-9649-6c0c80fcc575",
        "parentId" : "666cd383-ec82-4c8d-a226-95396c7681c0",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Fortunately, it's the only place we call it, so we can do this. It's added to the list.",
        "createdAt" : "2018-11-11T20:42:47Z",
        "updatedAt" : "2018-12-03T22:25:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad113b374641b6eb1f0cb7b28d7d38e24099902",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1916,1920 @@\n    def formatting_values(self):\n        # Deprecating the ability to override _formatting_values.\n        # Do the warning here, it's only user in pandas, since we\n        # have to check if the subclass overrode it."
  },
  {
    "id" : "1029f60d-2859-4c48-a93b-3cb7fad74cbf",
    "prId" : 24024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24024#pullrequestreview-185150062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8ba4ec2-0c01-4ed6-9267-c695f7287b40",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This needs to set the array's `freq` to `None` (and somehow for any other DTAs that share data with it)",
        "createdAt" : "2018-12-06T18:17:47Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "4c8ab88b-3204-42bd-aa38-9faebd1c06d1",
        "parentId" : "d8ba4ec2-0c01-4ed6-9267-c695f7287b40",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This calls `DatetimeArray.__setitem__`, which clears the freq.",
        "createdAt" : "2018-12-14T15:12:29Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "2436214219fc116239640889715c9bc6575f571b",
    "line" : 300,
    "diffHunk" : "@@ -1,1 +3150,3154 @@            )\n\n    def setitem(self, indexer, value):\n        # https://github.com/pandas-dev/pandas/issues/24020\n        # Need a dedicated setitem until #24020 (type promotion in setitem"
  },
  {
    "id" : "2fe3f04d-6110-41c8-8331-05fb90f9d312",
    "prId" : 24024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24024#pullrequestreview-186322088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69265b0a-22d4-4dcb-b85f-6b2fd833e99b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what?",
        "createdAt" : "2018-12-13T01:34:42Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "59327d70-c718-433c-83fd-202636a4e603",
        "parentId" : "69265b0a-22d4-4dcb-b85f-6b2fd833e99b",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This fixes the bug for `DataFrame.values` on a homogenous 1-column dataframe.",
        "createdAt" : "2018-12-13T04:11:37Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "3ef6e69c-351a-40c8-9f21-c4ae28106a2c",
        "parentId" : "69265b0a-22d4-4dcb-b85f-6b2fd833e99b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use _block_shape",
        "createdAt" : "2018-12-13T12:58:18Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "132bf709-6202-464a-a2a5-7d027a994d92",
        "parentId" : "69265b0a-22d4-4dcb-b85f-6b2fd833e99b",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Seems like that won't work. `_block_shape` skips EAs https://github.com/pandas-dev/pandas/issues/23023",
        "createdAt" : "2018-12-13T16:00:50Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "20cca5e0-457d-4b0d-9b32-8ddbd07cc034",
        "parentId" : "69265b0a-22d4-4dcb-b85f-6b2fd833e99b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add why you need to do this",
        "createdAt" : "2018-12-18T23:20:12Z",
        "updatedAt" : "2019-01-02T16:41:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2436214219fc116239640889715c9bc6575f571b",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +3010,3014 @@        values = np.asarray(values)\n\n        if self.ndim == 2:\n            # Ensure that our shape is correct for DataFrame.\n            # ExtensionArrays are always 1-D, even in a DataFrame when"
  },
  {
    "id" : "caa75089-c25a-4940-aae0-0a5920016991",
    "prId" : 24114,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24114#pullrequestreview-183198505",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f595e91-4627-4f3d-8eef-4cbc295f60f5",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Without this, we fail in the\r\n\r\n```python\r\n            result = self._holder._from_sequence(\r\n                 np.where(cond, self.values, other),\r\n                 dtype=dtype,\r\n```\r\n\r\nsince the `where` may change the dtype, if NaN is introduced.\r\n\r\n\r\nImplementing `SparseArray.__setitem__` would allow us to remove this block.",
        "createdAt" : "2018-12-07T17:22:19Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "43550cf9-4bc9-4298-bb7a-43896040c500",
        "parentId" : "8f595e91-4627-4f3d-8eef-4cbc295f60f5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this should be an overriding method in Sparse then, not here",
        "createdAt" : "2018-12-07T21:09:39Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8322bef7-8599-4eed-8a97-cbdd900604a6",
        "parentId" : "8f595e91-4627-4f3d-8eef-4cbc295f60f5",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We don't have a SparseBlock anymore. I can add one back if you want, but I figured it'd be easier not to since implementing `SparseArray.__setitem__` will remove the need for this, and we'd just have to remove SparseBlock again.",
        "createdAt" : "2018-12-07T22:01:12Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "6304ad31-1aff-4956-9ad8-1226e137dfee",
        "parentId" : "8f595e91-4627-4f3d-8eef-4cbc295f60f5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is pretty hacky. This was why we had originally a ``.get_values()`` methon on Sparse to do things like this. We need something to give back the underlying type of the object, which is useful for Categorical as well. Would rather create a generalized soln than hack it like this.",
        "createdAt" : "2018-12-09T14:15:02Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4aa90064-7643-4dfc-9fdb-fc6727f6a304",
        "parentId" : "8f595e91-4627-4f3d-8eef-4cbc295f60f5",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Actually, we don't need this. I think we can just re-infer the dtype from the output of `np.where`.",
        "createdAt" : "2018-12-09T20:38:48Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "fdcb623c-e35d-43b6-84e5-d7ceb0b4a623",
        "parentId" : "8f595e91-4627-4f3d-8eef-4cbc295f60f5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so is this changing?",
        "createdAt" : "2018-12-10T13:07:19Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "381fecd5-fe1e-4d72-8e52-8b4ec7a297bd",
        "parentId" : "8f595e91-4627-4f3d-8eef-4cbc295f60f5",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Changing from master? Yes, in the sense that it'll return a SparseArray. But it still densifies when `np.where` is called.\r\n\r\nIf you mean \"is this changing in the future\", yes it'll be removed when `SparseArray.__setitem__` is implemented.",
        "createdAt" : "2018-12-10T13:12:40Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f29d23b4-81bd-4382-83f7-8c0de3f8f67a",
        "parentId" : "8f595e91-4627-4f3d-8eef-4cbc295f60f5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh ok, can you add a TODO comment",
        "createdAt" : "2018-12-10T14:04:26Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "539d3cb5aec33eb5fc7534eb09b6f0715a809abc",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +1993,1997 @@            other = self.dtype.na_value\n\n        if is_sparse(self.values):\n            # TODO(SparseArray.__setitem__): remove this if condition\n            # We need to re-infer the type of the data after doing the"
  },
  {
    "id" : "f7fcfe30-82c4-4026-9a2f-4857b6a3cbcd",
    "prId" : 24114,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24114#pullrequestreview-182980103",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "077809e3-d0fd-456c-ad22-3668cd42331e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some comments here",
        "createdAt" : "2018-12-09T14:13:43Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "539d3cb5aec33eb5fc7534eb09b6f0715a809abc",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1974,1978 @@            other = other.array\n\n        elif isinstance(other, ABCDataFrame):\n            # ExtensionArrays are 1-D, so if we get here then\n            # `other` should be a DataFrame with a single column."
  },
  {
    "id" : "0442f831-cd61-4ba6-929b-84eb38ee6d95",
    "prId" : 24114,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24114#pullrequestreview-183198505",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abd4efda-360b-40a9-b2a0-265cd2abed16",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add TODO(EA) or someting here so we know to remove this",
        "createdAt" : "2018-12-10T14:04:09Z",
        "updatedAt" : "2018-12-10T14:10:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "539d3cb5aec33eb5fc7534eb09b6f0715a809abc",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +2713,2717 @@              try_cast=False, axis=0, transpose=False):\n        # TODO(CategoricalBlock.where):\n        # This can all be deleted in favor of ExtensionBlock.where once\n        # we enforce the deprecation.\n        object_msg = ("
  },
  {
    "id" : "e34732d0-b0d2-419b-bcc2-70b5651441ce",
    "prId" : 24149,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24149#pullrequestreview-182862671",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20f2894c-7b50-48cd-b742-e37d949cf9d9",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I have no idea if this is going to break things.\r\n\r\nOh and I notice that the comment is out of date now.",
        "createdAt" : "2018-12-07T20:32:58Z",
        "updatedAt" : "2018-12-07T20:34:07Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "3be6e0dd9e848c90306e82f7333947efb4aa472f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1888,1892 @@\n        # if we are a 1-dim object, then always place at 0\n        if self.ndim == 1 and new_mgr_locs is None:\n            new_mgr_locs = [0]\n        else:"
  },
  {
    "id" : "3645295a-da83-4c83-9e25-9a22be1a5755",
    "prId" : 24227,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24227#pullrequestreview-185385819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "043115d7-18e9-45c1-9d50-062baed2d7e5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is extract_numpy ever not True?",
        "createdAt" : "2018-12-15T22:03:48Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b67092f9-239d-48ff-b025-616bc6a60a34",
        "parentId" : "043115d7-18e9-45c1-9d50-062baed2d7e5",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yes, when we need the EA-like behavior, e.g. in reshape: https://github.com/pandas-dev/pandas/pull/24227/files#diff-fef81b7e498e469973b2da18d19ff6f3R437",
        "createdAt" : "2018-12-16T12:38:02Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f50a57a7468068e191f23683283d55857d9729",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1979,1983 @@            other = other.iloc[:, 0]\n\n        other = extract_array(other, extract_numpy=True)\n\n        if isinstance(cond, ABCDataFrame):"
  },
  {
    "id" : "1e1c3649-d7ef-427f-aca7-e64b6735b0ad",
    "prId" : 24596,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24596#pullrequestreview-189480685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d28942a0-93e1-48ce-8b31-5639ff829488",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is getting super messy",
        "createdAt" : "2019-01-04T17:48:35Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "da1761de-7412-46e5-9f82-d0dc05c59065",
        "parentId" : "d28942a0-93e1-48ce-8b31-5639ff829488",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Agreed. A proper fix is updating `_try_coerce_args` / `get_values`, which I think @jbrockmendel is working on. But this is necessary now to avoid the warning / conversion to object dtype.",
        "createdAt" : "2019-01-04T18:30:04Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "d7820461-c508-4592-9df2-fb37dff1cf53",
        "parentId" : "d28942a0-93e1-48ce-8b31-5639ff829488",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "None of the branches I have in progress would help here.\r\n\r\nAllowing for DatetimeArray to be reshaped to (1, nrows) would.",
        "createdAt" : "2019-01-04T18:37:56Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9026de86-0f97-4d51-96f3-6ff2e411d31e",
        "parentId" : "d28942a0-93e1-48ce-8b31-5639ff829488",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a TODO here",
        "createdAt" : "2019-01-04T18:40:25Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f4fbde4472700525959dbb7255185e36155f21",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1448,1452 @@        Block\n        \"\"\"\n        if self.is_datetimetz:\n            # TODO: cleanup this special case.\n            # We need to operate on i8 values for datetimetz"
  },
  {
    "id" : "8ce6e5e4-3371-4ce3-9ed0-3df44e54011d",
    "prId" : 24596,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24596#pullrequestreview-189481540",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94fa05af-a896-4d86-bf8c-57904e8aa848",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "There is a `# TODO(DatetimeBlock): remove` comment on DatetimeLikeBlockMixin.  Can this be merged into that method and the comment removed?",
        "createdAt" : "2019-01-04T18:39:14Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f95dc7cc-cf54-4fcb-b0a6-7728d248bf6b",
        "parentId" : "94fa05af-a896-4d86-bf8c-57904e8aa848",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "That should be doable, (here or elsewhere)\r\n\r\nIIUC, DatetimeBlock would fall back to Block.to_dense and use `.values.view()`, while DatetimeTZBlock would fall back to ExtensionBlock and use `np.asarray(self.values)`.",
        "createdAt" : "2019-01-04T18:42:15Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f4fbde4472700525959dbb7255185e36155f21",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +2339,2343 @@        return values\n\n    def to_dense(self):\n        # we request M8[ns] dtype here, even though it discards tzinfo,\n        # as lots of code (e.g. anything using values_from_object)"
  },
  {
    "id" : "59a6ad8c-fc88-452c-a73b-1b7718bcff83",
    "prId" : 24694,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24694#pullrequestreview-191305565",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca2a476c-8f0e-42e5-b875-07b7f8d2245e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is an api breaking change, not sure its easy nor desirable to actually do this",
        "createdAt" : "2019-01-10T12:10:51Z",
        "updatedAt" : "2019-01-10T16:45:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b4b75398-0ecc-4f2d-905e-5728995f8691",
        "parentId" : "ca2a476c-8f0e-42e5-b875-07b7f8d2245e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> not sure its easy nor desirable to actually do this\r\n\r\n\"easy\" seems clear, since this PR already does it with an 11-line diff.  Why wouldn't it be desirable?  It is hugely inconsistent with how we treat ints in td64 everywhere else.",
        "createdAt" : "2019-01-10T15:15:59Z",
        "updatedAt" : "2019-01-10T16:45:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bffc5fc4-6b55-4063-85d8-d8bb65bdef6c",
        "parentId" : "ca2a476c-8f0e-42e5-b875-07b7f8d2245e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "it’s a user facing api change",
        "createdAt" : "2019-01-10T15:30:43Z",
        "updatedAt" : "2019-01-10T16:45:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5d7b247b-acf4-405a-adf9-9e5fdf69c907",
        "parentId" : "ca2a476c-8f0e-42e5-b875-07b7f8d2245e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We can deprecate it pretty easily too right? Say that they should pass `.fillna(pd.Timestamp(val, unit='s'))` if they want to keep the old behavior?",
        "createdAt" : "2019-01-10T15:55:58Z",
        "updatedAt" : "2019-01-10T16:45:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "d9408329-b9ae-4555-9d50-90f2488d82d4",
        "parentId" : "ca2a476c-8f0e-42e5-b875-07b7f8d2245e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe we should eventually just raise on integers rather than just change the interpretation. I think thats a bit less flexibile but more type strict (so just re-word deprecation warning & note)",
        "createdAt" : "2019-01-10T16:38:31Z",
        "updatedAt" : "2019-01-10T16:45:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "24556081-5f8a-4773-800a-9afc40f9dfaa",
        "parentId" : "ca2a476c-8f0e-42e5-b875-07b7f8d2245e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "It would allow us to use TimedeltaArray.fillna more directly",
        "createdAt" : "2019-01-10T16:42:00Z",
        "updatedAt" : "2019-01-10T16:45:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d61a0932-6e84-44e3-9df4-e3371aa4eed3",
        "parentId" : "ca2a476c-8f0e-42e5-b875-07b7f8d2245e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "great",
        "createdAt" : "2019-01-10T16:47:07Z",
        "updatedAt" : "2019-01-10T16:47:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9cb0aba7be5b65366ad76a57783fa87b3e57f74",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2500,2504 @@\n        # allow filling with integers to be\n        # interpreted as nanoseconds\n        if is_integer(value) and not isinstance(value, np.timedelta64):\n            # Deprecation GH#24694, GH#19233"
  },
  {
    "id" : "db7d51ca-de05-4e50-9e81-36717bc2ebaa",
    "prId" : 24695,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24695#pullrequestreview-191268912",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9b3a049-312e-4ee9-8c8e-b938aa82724c",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "someone more familiar with this than me may want to double-check if these 7 lines are still needed.",
        "createdAt" : "2019-01-10T04:07:06Z",
        "updatedAt" : "2019-01-10T15:13:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ceb3f5b6-d1dd-422c-843f-e13a9ee77013",
        "parentId" : "f9b3a049-312e-4ee9-8c8e-b938aa82724c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes @TomAugspurger recently modified this for Sparse",
        "createdAt" : "2019-01-10T15:39:59Z",
        "updatedAt" : "2019-01-10T15:39:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a70990d28d07accbb50010d2f7c972c14432c2c7",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +607,611 @@            klass = ObjectBlock\n        elif is_extension_array_dtype(dtype):\n            klass = ExtensionBlock\n\n        try:"
  },
  {
    "id" : "91bf0d49-1a60-4977-995e-20ade7aa337e",
    "prId" : 24792,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24792#pullrequestreview-192941219",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f7969b6-bc9c-41d1-8cc9-aa69f6fb4cb7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why would u do this here and not in array_equivalent",
        "createdAt" : "2019-01-16T01:07:18Z",
        "updatedAt" : "2019-01-16T01:07:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "87048ddb-4ed0-4f4e-8c71-a28cc274f95e",
        "parentId" : "6f7969b6-bc9c-41d1-8cc9-aa69f6fb4cb7",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Because array_equivalent's docstring specifically says it assumes it is dealing with numpy arrays",
        "createdAt" : "2019-01-16T01:30:46Z",
        "updatedAt" : "2019-01-16T01:30:46Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0950695dde4674ed6d39aa72ef3239c3091d4ca",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2467,2471 @@\n    def equals(self, other):\n        # override for significant performance improvement\n        if self.dtype != other.dtype or self.shape != other.shape:\n            return False"
  },
  {
    "id" : "f875616e-f12e-4a44-8f80-0a14d5ba231c",
    "prId" : 25246,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25246#pullrequestreview-201882718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04acd0f7-763c-4b00-8b98-b6c8e4c172cc",
        "parentId" : null,
        "authorId" : "7e49d4d0-898e-47b4-910d-64f38d46a4b1",
        "body" : "I believe the check `if m is not None` on the following line (1121) and the subsequent raise on line 1132 are now unnecessary, and can be removed.  I'd appreciate any second opinions on that.",
        "createdAt" : "2019-02-09T18:53:09Z",
        "updatedAt" : "2019-02-11T12:36:21Z",
        "lastEditedBy" : "7e49d4d0-898e-47b4-910d-64f38d46a4b1",
        "tags" : [
        ]
      },
      {
        "id" : "98757c2e-ae62-4cf9-be5e-a366e96b9263",
        "parentId" : "04acd0f7-763c-4b00-8b98-b6c8e4c172cc",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I'm all for removing it, so long as we are sure that we can't get `None` ever returned for `m`.",
        "createdAt" : "2019-02-09T22:49:08Z",
        "updatedAt" : "2019-02-11T12:36:21Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "51dcc255-a901-4a6d-96d7-fdab60e5d800",
        "parentId" : "04acd0f7-763c-4b00-8b98-b6c8e4c172cc",
        "authorId" : "7e49d4d0-898e-47b4-910d-64f38d46a4b1",
        "body" : "Great.  `missing.clean_interp_method` will not return None; if its `method` argument is None, it will raise (line 105 of missing.py below):\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/5f73594d49ea06ada4c6779006c00aaf41935595/pandas/core/missing.py#L95-L108",
        "createdAt" : "2019-02-09T23:46:52Z",
        "updatedAt" : "2019-02-11T12:36:21Z",
        "lastEditedBy" : "7e49d4d0-898e-47b4-910d-64f38d46a4b1",
        "tags" : [
        ]
      }
    ],
    "commit" : "69dd362aff411f2824a7dc8ae5681177dde96bb9",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1118,1122 @@        # validate the interp method\n        m = missing.clean_interp_method(method, **kwargs)\n\n        r = check_int_bool(self, inplace)\n        if r is not None:"
  },
  {
    "id" : "8b5ef75c-bb55-4b7f-8f16-0e7d87188f4b",
    "prId" : 25644,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25644#pullrequestreview-212626997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a32adbf6-52d6-4c0b-9c3e-8bda819cecfa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are both of these locations hit by your tests?",
        "createdAt" : "2019-03-10T22:38:25Z",
        "updatedAt" : "2019-03-12T20:45:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "97732b72-63c5-4167-b665-63e0ca19e5f4",
        "parentId" : "a32adbf6-52d6-4c0b-9c3e-8bda819cecfa",
        "authorId" : "3cf21736-8210-430b-9ff1-610530ed90f8",
        "body" : "Yes they are",
        "createdAt" : "2019-03-10T22:55:21Z",
        "updatedAt" : "2019-03-12T20:45:13Z",
        "lastEditedBy" : "3cf21736-8210-430b-9ff1-610530ed90f8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f32163cce85cec7ae4fa71b46e6f940e385adaa8",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +3211,3215 @@                nv[m] = nn_at\n                return nv\n    except (ValueError, IndexError, TypeError, OverflowError):\n        pass\n"
  },
  {
    "id" : "b46e5352-02d6-471a-a182-8869d6a1bcfa",
    "prId" : 25844,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25844#pullrequestreview-218023562",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec13acaa-8e9a-4884-9ff2-1a57c73bed7b",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This was kind of annoying to fix some syntax issues and make this work with LINT so I just converted to new syntax to avoid hassle",
        "createdAt" : "2019-03-23T03:04:14Z",
        "updatedAt" : "2019-03-26T13:55:30Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "eeb266eb21e84cc8d3c11c342167d92f8a61fc39",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1828,1832 @@\n    def shift(self,\n              periods: int,\n              axis: libinternals.BlockPlacement = 0,\n              fill_value: Any = None) -> List['ExtensionBlock']:"
  },
  {
    "id" : "7ec8081b-db36-4ab6-829f-3fec9ab48b52",
    "prId" : 26372,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26372#pullrequestreview-236808725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff0697ee-2dae-4eec-a9a0-57c8394a1f7f",
        "parentId" : null,
        "authorId" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "body" : "This threw this error because in this class `_can_hold_na` was a fixed boolean variable and in the other mixin it's a property method:\r\n`pandas/core/internals/blocks.py:2200: error: Definition of \"_can_hold_na\" in base class \"ExtensionBlock\" is incompatible with definition in base class \"DatetimeBlock\"`\r\n\r\nI made this one a property method to match.",
        "createdAt" : "2019-05-13T15:32:24Z",
        "updatedAt" : "2019-05-16T13:06:14Z",
        "lastEditedBy" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "tags" : [
        ]
      },
      {
        "id" : "d1e1023c-6101-4633-8447-9aec01212beb",
        "parentId" : "ff0697ee-2dae-4eec-a9a0-57c8394a1f7f",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Makes sense to me",
        "createdAt" : "2019-05-13T17:17:41Z",
        "updatedAt" : "2019-05-16T13:06:14Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e42d72f6a70ea847cb9eab4b7432df8b08f6658",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +2060,2064 @@    def _can_hold_na(self):\n        return True\n\n    def _maybe_coerce_values(self, values):\n        \"\"\"Input validation for values passed to __init__. Ensure that"
  },
  {
    "id" : "02e3da72-7151-4cc1-8052-5b1b9d56a019",
    "prId" : 26409,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26409#pullrequestreview-256377161",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fed15c21-a394-4635-b728-38c0d7bcad66",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we really need this?",
        "createdAt" : "2019-06-28T19:42:23Z",
        "updatedAt" : "2019-07-01T15:20:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "def9a517-5731-41ee-a162-90fdf504180c",
        "parentId" : "fed15c21-a394-4635-b728-38c0d7bcad66",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this still needed?",
        "createdAt" : "2019-07-01T11:59:19Z",
        "updatedAt" : "2019-07-01T15:20:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ab50e14f-bf0f-428f-95c2-123f23499efe",
        "parentId" : "fed15c21-a394-4635-b728-38c0d7bcad66",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Well, the JSON C code *does* handle blocks (if I remove the `get_block_values` part in objToJSON.C that I introduced in this PR, a couple tests fail). \r\nI could name this here the same as for Series/INdex (i.e. `_internal_get_values`), but I prefer a distinct name to make it clear that the json code is handling blocks and not series/index (and that also makes it clear that all other places where `_internal_get_values` is used is *not* handling blocks). That will also make it easier to isolate and try to remove the block handling in the json C code.",
        "createdAt" : "2019-07-01T14:03:59Z",
        "updatedAt" : "2019-07-01T15:20:08Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4554e9fe-946e-45df-8697-226d2577a5b3",
        "parentId" : "fed15c21-a394-4635-b728-38c0d7bcad66",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Opened https://github.com/pandas-dev/pandas/issues/27164 for follow-up on this JSON issue",
        "createdAt" : "2019-07-01T14:34:57Z",
        "updatedAt" : "2019-07-01T15:20:08Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "064aeb4f3ddfee0fdd86ee895dc7591fb2806c0b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +178,182 @@        return self.values\n\n    def get_block_values(self, dtype=None):\n        \"\"\"\n        This is used in the JSON C code"
  },
  {
    "id" : "7c874259-f8fe-4e41-84b8-83b8e0790af5",
    "prId" : 26417,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26417#pullrequestreview-239217900",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cafcf72-b4fd-4159-ab1b-c50d29e2dddc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do you need the check at all? just np.atleast_2d",
        "createdAt" : "2019-05-18T14:34:11Z",
        "updatedAt" : "2019-05-19T03:42:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7673213b-7d50-4499-80a2-0d2a870ac3ce",
        "parentId" : "1cafcf72-b4fd-4159-ab1b-c50d29e2dddc",
        "authorId" : "22a123c1-4cda-4016-b3b1-8768233d6e4d",
        "body" : "I tried that, several other tests fail if this dimensionality check is not performed.",
        "createdAt" : "2019-05-19T01:25:08Z",
        "updatedAt" : "2019-05-19T03:42:58Z",
        "lastEditedBy" : "22a123c1-4cda-4016-b3b1-8768233d6e4d",
        "tags" : [
        ]
      }
    ],
    "commit" : "997c0a57d01356ea773569caa04196329ad03e87",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3036,3040 @@    if isinstance(values, ABCPandasArray):\n        values = values.to_numpy()\n        if ndim and ndim > 1:\n            values = np.atleast_2d(values)\n"
  }
]