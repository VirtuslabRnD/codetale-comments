[
  {
    "id" : "59fe113b-dffd-4e9c-b535-67a0dec98dd9",
    "prId" : 21477,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21477#pullrequestreview-141351263",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68f426ab-1837-489e-9eee-8773f49c2816",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string here",
        "createdAt" : "2018-07-29T15:23:13Z",
        "updatedAt" : "2018-08-09T02:14:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4729fc5e2f5bf0c8804318333c9b49f4cc3a1b97",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +2510,2514 @@\n    def _replace_single(self, to_replace, value, inplace=False, filter=None,\n                        regex=False, convert=True, mgr=None, mask=None):\n        \"\"\"\n        Replace elements by the given value."
  },
  {
    "id" : "c73b6a9f-bf57-4718-b917-f6841cc19f58",
    "prId" : 21477,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21477#pullrequestreview-141935956",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49f360e2-3abc-4f92-89b8-d929fa03e2bf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same as above (you *can* make a shared doc-string if you want here)",
        "createdAt" : "2018-07-31T12:50:03Z",
        "updatedAt" : "2018-08-09T02:14:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4729fc5e2f5bf0c8804318333c9b49f4cc3a1b97",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +2618,2622 @@\n        Parameters\n        ----------\n        to_replace : object or pattern\n            Scalar to replace or regular expression to match."
  },
  {
    "id" : "785e00c8-dc38-42cc-a01e-cd5ed083057a",
    "prId" : 21986,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21986#pullrequestreview-141317571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4737b4f7-334c-40bc-9448-32760a92d01b",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "This modification is deep within the internals (block's definition of `take_nd`), and I am not sure how to really add a test for this.",
        "createdAt" : "2018-07-26T00:30:55Z",
        "updatedAt" : "2018-07-28T18:53:13Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "846cc779-954f-4520-9ec7-d7a063aca04d",
        "parentId" : "4737b4f7-334c-40bc-9448-32760a92d01b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this actually isn't used since allow_fill=False",
        "createdAt" : "2018-07-28T13:46:24Z",
        "updatedAt" : "2018-07-28T18:53:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "05e4a36cd7d5c8449e362fc30fca03cf867144e0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1249,1253 @@            fill_value = self.fill_value\n            new_values = algos.take_nd(values, indexer, axis=axis,\n                                       allow_fill=False, fill_value=fill_value)\n        else:\n            fill_value = fill_tuple[0]"
  },
  {
    "id" : "e80b488f-c630-4615-a19b-ae96e1bc7b79",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-162453380",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff8b0c67-28cd-4c3d-b404-e01acce0cc06",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Didn't seem worth making this part of the ExtensionDtype interface.",
        "createdAt" : "2018-08-13T20:11:16Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "ee4c8e5f-0928-46ff-a3fe-d9d26882f242",
        "parentId" : "ff8b0c67-28cd-4c3d-b404-e01acce0cc06",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we have an issue to simply remove all of the ftype stuff. not averse to doing this (here or maybe follow up)",
        "createdAt" : "2018-08-31T10:39:27Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "76319707-08c6-49f4-9068-bc443572dc01",
        "parentId" : "ff8b0c67-28cd-4c3d-b404-e01acce0cc06",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't ``.subtype`` just return ``None`` for arrays such as Integer, Datetime (as opposed to Categorical / Interval) which do have meaningiful subtypes, then can just do this generally?",
        "createdAt" : "2018-10-05T11:16:48Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "25c7aa58-b1ee-4739-8b27-0b64a5b694c1",
        "parentId" : "ff8b0c67-28cd-4c3d-b404-e01acce0cc06",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "https://github.com/pandas-dev/pandas/issues/22224",
        "createdAt" : "2018-10-08T12:47:28Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +344,348 @@    @property\n    def ftype(self):\n        if getattr(self.values, '_pandas_ftype', False):\n            dtype = self.dtype.subtype\n        else:"
  },
  {
    "id" : "0ab9e920-9b4a-4823-a615-3937203ee268",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-145848270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "404812ac-97c5-428f-9b46-9c034944a556",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Previously `.astype` didn't dispatch to `ExtensionArray.astype`. We would call `.get_values` first. I can split these changes out to a separate PR.",
        "createdAt" : "2018-08-13T20:12:12Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "2afff3e3-b198-4de0-a5d2-f6f9ad18ac22",
        "parentId" : "404812ac-97c5-428f-9b46-9c034944a556",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Working on a SetArray based on EA - would need exactly this. ",
        "createdAt" : "2018-08-13T21:43:24Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +636,640 @@            if dtype == np.object_:\n                klass = ObjectBlock\n            elif is_extension_array_dtype(dtype):\n                klass = ExtensionBlock\n"
  },
  {
    "id" : "1971c201-8ab6-4899-9f27-24985c6d4f25",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-162854354",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff813d2e-13c4-47bb-b297-16899d1e8429",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe we should have ``is_extension_array_scalar_dtype(value)`` to make this more specific?",
        "createdAt" : "2018-08-31T10:40:22Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ff223350-059c-4e41-88a0-ba95f7b5c7e6",
        "parentId" : "ff813d2e-13c4-47bb-b297-16899d1e8429",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "What that would look like for 3rd party extension arrays? I suppose we could look through the `.type` of all the types registered with pandas, but registering is optional...",
        "createdAt" : "2018-10-08T18:47:54Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "5f419d74-0f38-4ec2-bedf-7837ef794a01",
        "parentId" : "ff813d2e-13c4-47bb-b297-16899d1e8429",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use registering is optional, but doesn't matter here, my point is we dont' have a way of detecting scalar extension types. (meaning a scalar defined as part of an extension type). we in theory should never see, but I would guess this leaks thru",
        "createdAt" : "2018-10-09T12:11:45Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +2317,2321 @@    def should_store(self, value):\n        return (issubclass(value.dtype.type, np.timedelta64) and\n                not is_extension_array_dtype(value))\n\n    def to_native_types(self, slicer=None, na_rep=None, quoting=None,"
  },
  {
    "id" : "080d822d-676c-4405-8bea-a0d3b049c5da",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-161988023",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83fb43ed-44f7-41a4-8476-4f6f0a6359e5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see coment above",
        "createdAt" : "2018-10-05T11:17:12Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +2094,2098 @@    @property\n    def _ftype(self):\n        return getattr(self.values, '_pandas_ftype', Block._ftype)\n\n"
  },
  {
    "id" : "ecb186c9-a911-46b1-91ca-8b66ba133bc3",
    "prId" : 22343,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22343#pullrequestreview-146447194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@TomAugspurger are you really really sure this is needed? \r\nall of this already works with IntegerArray so not t really sure what problem you are trying to solve\r\n",
        "createdAt" : "2018-08-15T11:55:02Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c212ce2d-3df7-4d1a-ac29-71513f01e323",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Needed for https://github.com/pandas-dev/pandas/pull/22325/.\r\n\r\nSparse has special semantics for `.astype`ing, `Series[sparse].astype(np.dtype)` is interpreted as astyping the underlying `.values.sp_values`, rather than densifying and asytping. I'd like to deprecate this, but that's another matter.\r\n\r\nIn general though, it seems like EAs should have a say in how they're astyped, rather than always going through `.get_values`.",
        "createdAt" : "2018-08-15T12:22:47Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "2465ee07-b60a-4efd-a72c-80702221e950",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we already do this is my point ",
        "createdAt" : "2018-08-15T12:27:42Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3e5ea92f-f28c-448e-9d33-b4bd64d104aa",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Not on master? That hit's https://github.com/pandas-dev/pandas/blob/master/pandas/core/internals/blocks.py#L652, which converts to an ndarray, before ever calling the extension array's astype.",
        "createdAt" : "2018-08-15T12:31:20Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c9c1e718-7fde-45ca-beb6-21a7dc8c72da",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "At least, my new tests fail on master without these changes. I'm not sure if / how IntegerArray is being handled differently.",
        "createdAt" : "2018-08-15T12:34:09Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "71252207-e738-404c-9ff6-7aaebf1598d8",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "We don't already \"do\" this (depending on what you mean with \"do\" .. :-))\r\n\r\nThe reason this already works correctly for integer dtypes, is because we are converting the values to an array, and then pass this array to the dtypes array constructor (in case of an EA dtype). \r\n\r\nBut as Tom tries to argue, always converting to an ndarray (which is what `get_values` does) is not necessarily a good idea. It might not work (in case of sparse), or can also less efficient (what is actually the case for the integers -> eg when going from Int64 -> Int32, we first convert the Int64 EA to object ndarray to then convert (and infer missing values) again to EA of Int32. This could be done much more efficient).",
        "createdAt" : "2018-08-15T12:51:58Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "25b49ef3-7301-4130-96cc-a7439db0af63",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> [about Int EA astyping] This could be done much more efficient\r\n\r\nAnd note that this (the efficient shortcut for going from one int EA to another) is actually implemented in `IntegerArray.astype`. We only never call this in case of `Series(EA).astype(..)` due to the current implementation.",
        "createdAt" : "2018-08-15T12:57:38Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "67595ac8-3310-408d-946d-48186030ebdf",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i am not arguing that we shouldn’t do this\r\nthe implementation is way too convoluted currently",
        "createdAt" : "2018-08-15T13:00:51Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2ce85650-7b1f-4cc5-b0ba-48a93405fd6a",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "do you mean the current code in master or this PR? \r\n",
        "createdAt" : "2018-08-15T13:04:16Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "84ab879e-fd9c-4338-ae7a-83987a16ae56",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this PR\r\n\r\nthere is a ton of code in astype to dispatch to extension types already\r\nthis adds yet another branch ",
        "createdAt" : "2018-08-15T13:06:34Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2533c08c-5482-44ed-b359-467b07a3c568",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you point to this \"ton of code\"? I don't see any other dispatch to EAs. \r\nWhat is done is the generic conversion to array and then the use of `astype_nansafe` (which has a dispatch to EAs, but for the target EA dtype, not for the calling EA dtype)",
        "createdAt" : "2018-08-15T13:11:51Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "21d34ac6-3084-428d-94a3-696000f1688e",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "It's a 2 line change, this extra if condition. Which of those two lines is the convoluted one?",
        "createdAt" : "2018-08-15T13:30:23Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "83130ecd-8c74-4d87-b854-f8fcdb113c4e",
        "parentId" : "399ea42a-d6d8-467e-91f1-ed15bfda2acf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, I could swear I add an ``.is_extension`` branch already, that's why this looks weird. In any event this has lots of if/then condition. Please make a note / issue to clean this up.",
        "createdAt" : "2018-08-15T13:39:41Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2606d02bb738fa914d48d5b460725b506d8e0a0a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +638,642 @@            if values is None:\n\n                if self.is_extension:\n                    values = self.values.astype(dtype)\n                else:"
  },
  {
    "id" : "7107158b-47ce-4c2f-9b38-70244c3475b2",
    "prId" : 22387,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22387#pullrequestreview-148459399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91dca338-4142-4fe3-bf71-cc852b7f74f2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "bonus points for the Parameters :> (future PR ok too)",
        "createdAt" : "2018-08-22T12:33:42Z",
        "updatedAt" : "2018-08-22T12:33:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5b556d77466ae317c4772628c1f5ef4392b1bad",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +2075,2079 @@        Dispatches to underlying ExtensionArray and re-boxes in an\n        ExtensionBlock.\n        \"\"\"\n        # type: (int, Optional[BlockPlacement]) -> List[ExtensionBlock]\n        return [self.make_block_same_class(self.values.shift(periods=periods),"
  },
  {
    "id" : "1c082896-e40d-4b02-bd9e-01a84a8d789e",
    "prId" : 22699,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22699#pullrequestreview-156349074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0d6264f-6f95-4ef0-811d-63d399ce0f29",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does the context manager restore all of the warnings filters after? (I guess that is the point?)",
        "createdAt" : "2018-09-18T11:41:14Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "96556d61-5491-4c14-829a-4a4a42282322",
        "parentId" : "b0d6264f-6f95-4ef0-811d-63d399ce0f29",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah, that's the idea. Ideally libraries shouldn't modify the global warnings registry without good cause.",
        "createdAt" : "2018-09-18T12:51:39Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4990fc2d984b536e5c7c97ad55d4f550ae661867",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3491,3495 @@        # we ignore ComplexWarning here\n        with warnings.catch_warnings(record=True):\n            warnings.simplefilter(\"ignore\", np.ComplexWarning)\n            nn_at = nn.astype(v.dtype)\n"
  },
  {
    "id" : "339d3878-bf49-4f27-b004-023da1d72dc2",
    "prId" : 22869,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22869#pullrequestreview-162784461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a08672dc-fe57-4c60-a74e-1d938bdb33c1",
        "parentId" : null,
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Changed the message not to raise `AttributeError`.",
        "createdAt" : "2018-10-09T09:08:01Z",
        "updatedAt" : "2018-10-10T01:38:53Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb849caab84551790cae6f66c18f341758c1ead4",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +676,680 @@                raise TypeError(\n                    \"cannot set astype for copy = [{copy}] for dtype \"\n                    \"({dtype} [{shape}]) to different shape \"\n                    \"({newb_dtype} [{newb_shape}])\".format(\n                        copy=copy, dtype=self.dtype.name,"
  }
]