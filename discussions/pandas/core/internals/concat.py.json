[
  {
    "id" : "e8ee5fe1-89fb-4543-b72a-b7c78d6e5b6b",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-164218288",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa201714-300f-44e4-92dc-92dbf8111763",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could / should we use pandas.core.dtypes.cast.find_common_type here instead? (or move this logic there)",
        "createdAt" : "2018-10-09T12:13:49Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e6540173-b104-4378-aad8-b66155ab886c",
        "parentId" : "aa201714-300f-44e4-92dc-92dbf8111763",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Possibly...\r\n\r\nAt a glance it looks like `pandas.core.dtypes.casts.find_common_type` is more careful with\r\n\r\n* datetime\r\n* timedelta\r\n* bool and other\r\n\r\nWill look into it.",
        "createdAt" : "2018-10-09T13:24:22Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "69cce2f7-c16d-4e20-a9f0-7ce423a7a0fd",
        "parentId" : "aa201714-300f-44e4-92dc-92dbf8111763",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok,, yeah would be nice to simplify this",
        "createdAt" : "2018-10-12T12:30:25Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +345,349 @@    else:  # pragma\n        try:\n            g = np.find_common_type(upcast_classes, [])\n        except TypeError:\n            # At least one is an ExtensionArray"
  },
  {
    "id" : "51344f7f-128c-4baf-add9-a9784a59f1c3",
    "prId" : 33522,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33522#pullrequestreview-434434573",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "821480c5-4a42-4634-90a8-eacc58edb035",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this should be in the if/elif below",
        "createdAt" : "2020-06-20T15:11:44Z",
        "updatedAt" : "2020-06-22T14:25:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "13c1fe7e52043ab0a2ef5afbba94ce50e8253e7a",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +416,420 @@    # TODO: de-duplicate with maybe_promote?\n    # create the result\n    if \"extension\" in upcast_classes:\n        if len(upcast_classes) == 1:\n            cls = upcast_classes[\"extension\"][0]"
  },
  {
    "id" : "ec54ed7f-740b-428d-bf80-eeb518238b0a",
    "prId" : 33522,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33522#pullrequestreview-440382965",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8083a09e-c675-4d1e-9f91-e2914752cf69",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sort of dumb, but no blank lines before/after",
        "createdAt" : "2020-06-30T21:02:02Z",
        "updatedAt" : "2020-06-30T21:02:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "13c1fe7e52043ab0a2ef5afbba94ce50e8253e7a",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +385,389 @@        elif is_datetime64tz_dtype(dtype):\n            upcast_cls = \"datetimetz\"\n\n        elif is_extension_array_dtype(dtype):\n            upcast_cls = \"extension\""
  },
  {
    "id" : "03b949bf-e3b3-49e6-9a10-092086bc9eec",
    "prId" : 34152,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34152#pullrequestreview-431190872",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1671e9a-9dc8-4728-a66b-b7c783fdf27d",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This change is actually not equivalent. We have both ExtensionBlock as other Block types that are subclasses from ExtensionBlock. ",
        "createdAt" : "2020-06-15T20:15:24Z",
        "updatedAt" : "2020-06-15T20:15:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f6ce8972-1c56-4dc4-b1bc-7905b9e7bda2",
        "parentId" : "c1671e9a-9dc8-4728-a66b-b7c783fdf27d",
        "authorId" : "2e48a7cf-3e1e-481a-8115-7be83c44d59a",
        "body" : "@jorisvandenbossche Thanks, in the first iteration of the PR, I actually retained the exact type check and opted for a `#  noqa`.  Should this be a new issue?  We could also require this behavior in a test.  ",
        "createdAt" : "2020-06-16T06:14:55Z",
        "updatedAt" : "2020-06-16T06:14:55Z",
        "lastEditedBy" : "2e48a7cf-3e1e-481a-8115-7be83c44d59a",
        "tags" : [
        ]
      },
      {
        "id" : "56125405-9a9d-461c-87ad-563d1e4336b2",
        "parentId" : "c1671e9a-9dc8-4728-a66b-b7c783fdf27d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I was actually just looking at this. In the meantime it also seems that the location where this `_is_uniform_join_units` is used isn't that strict anymore about the exact block types (due to https://github.com/pandas-dev/pandas/pull/33486), so it should be fine as is.",
        "createdAt" : "2020-06-16T06:21:13Z",
        "updatedAt" : "2020-06-16T06:21:14Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "49a038cd0dd79d268638c5510be722d80168ca7e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +444,448 @@    return (\n        # all blocks need to have the same type\n        all(isinstance(ju.block, type(join_units[0].block)) for ju in join_units)\n        and  # noqa\n        # no blocks that would get missing values (can lead to type upcasts)"
  },
  {
    "id" : "0042ba6e-3fc7-4217-b582-eb5b92f7b9a9",
    "prId" : 34339,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34339#pullrequestreview-417278081",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ec1b435-4613-4e4b-8945-b55302135061",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "this change is to ensure DatetimeBlock and DatetimeTZBlock don't incorrectly take this \"uniform join units\" code path",
        "createdAt" : "2020-05-23T13:14:55Z",
        "updatedAt" : "2020-06-18T13:26:52Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "94fe89d66c1c5e86dcb84100ad3ce07c4075ac7f",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +453,457 @@    return (\n        # all blocks need to have the same type\n        all(type(ju.block) is type(join_units[0].block) for ju in join_units)\n        and  # noqa\n        # no blocks that would get missing values (can lead to type upcasts)"
  },
  {
    "id" : "15ce24e1-12e4-4b35-8630-711f0fe3a321",
    "prId" : 34339,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34339#pullrequestreview-430640206",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65f03c0b-7e26-489a-a429-e505989ed341",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I find it odd that the logic is now split here and concat_compat. I would strongly encourage to put this logic there.",
        "createdAt" : "2020-06-08T01:42:00Z",
        "updatedAt" : "2020-06-18T13:26:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2d89a521-c856-42ec-baaa-e9f35822e8b9",
        "parentId" : "65f03c0b-7e26-489a-a429-e505989ed341",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Having this here actually ensures a clear separation of concerns between `dtypes/concat.py` and `internals/concat.py`. \r\n\r\nThe `concat_compat` from `dtypes/concat.py` only needs to worry about concatting 1D arrays (for the case of ExtensionArrays, to be clear), and the code here in internals deals with ensuring the result is the proper dimension depending on how it is put in the BlockManager.\r\n\r\nThis keeps this BlockManager-related logic inside the internals, and ensures that `concat_compat` / `dtypes/concat.py` doesn't need to care about internals-specific details.",
        "createdAt" : "2020-06-10T08:41:18Z",
        "updatedAt" : "2020-06-18T13:26:52Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "059fdb40-c0e8-4242-8a57-815b4da5a875",
        "parentId" : "65f03c0b-7e26-489a-a429-e505989ed341",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "my point is you should have a concat_ea which you *call* here (right near concat_compat), otherwise the logic is scatttered. the *dispatching) logic is fine, the problem is the operational logic does not belong here. (alternative is to pass anotherr arg to concat_compat to do what you are doing here).",
        "createdAt" : "2020-06-14T15:20:42Z",
        "updatedAt" : "2020-06-18T13:26:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c22e0c1e-08ec-4333-87cc-6e9de507870b",
        "parentId" : "65f03c0b-7e26-489a-a429-e505989ed341",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "If there is a different `concat_ea`, then at each location where `concat_compat` is called, we would need to do a `if any_ea: concat_ea(..); else: concat_compat(...)`\r\n\r\nWhat do you mean exactly with the \"operational logic does not belong here\". What part of the code below is the \"operational\" logic?",
        "createdAt" : "2020-06-14T15:39:02Z",
        "updatedAt" : "2020-06-18T13:26:52Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d7bcbb90-5283-4de9-8a83-3e64787b554b",
        "parentId" : "65f03c0b-7e26-489a-a429-e505989ed341",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "every bit you added is operational logic.\r\n\r\npls do something like this\r\n```\r\nelif any(isinstance(t, ExtensionArray) for t in to_concat):\r\n    values = concat_ea(...)\r\n```",
        "createdAt" : "2020-06-14T15:54:37Z",
        "updatedAt" : "2020-06-18T13:26:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b564e46f-805f-44e9-942c-31728c05877f",
        "parentId" : "65f03c0b-7e26-489a-a429-e505989ed341",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`concat_compat` is called in 13 places in the code base. Do you want to add such `elif` case in all those places?",
        "createdAt" : "2020-06-14T16:47:22Z",
        "updatedAt" : "2020-06-18T13:26:52Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ede4c75e-bf79-481a-b9e7-722db9d2fcd4",
        "parentId" : "65f03c0b-7e26-489a-a429-e505989ed341",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is moving L324-330. As I have said before you are mixing 2 types of logic here by adding this.",
        "createdAt" : "2020-06-14T16:49:12Z",
        "updatedAt" : "2020-06-18T13:26:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "144ccac4-d1c9-466f-bf9a-a8ca2be85020",
        "parentId" : "65f03c0b-7e26-489a-a429-e505989ed341",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "To make sure I understand you correctly. You want to see the following function be put in `dtypes/concat.py`:\r\n\r\n```python\r\ndef concat_ea_frame(to_concat):\r\n    to_concat = [t if isinstance(t, ExtensionArray) else t[0, :] for t in to_concat]\r\n    concat_values = concat_compat(to_concat, axis=concat_axis)\r\n    if not isinstance(concat_values, ExtensionArray):\r\n        # if the result of concat is not an EA but an ndarray, reshape to\r\n        # 2D to put it a non-EA Block\r\n        concat_values = np.atleast_2d(concat_values)\r\n    return concat_values\r\n```\r\n\r\nand called her. Is that correct?\r\n\r\nI can do that if it ends this discussion, but just to note: this would create a function in `dtypes/concat.py` with logic tied to the internals (reshaping to conform to block's dimenions is something only needs to be known to the internals code) and that would only be used in the internals (here, in `internals/concat.py`)",
        "createdAt" : "2020-06-14T19:44:13Z",
        "updatedAt" : "2020-06-18T13:26:52Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "bce4bbbb-4e03-40b2-8897-93cc71029cb0",
        "parentId" : "65f03c0b-7e26-489a-a429-e505989ed341",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes this is exactly inline with concat_dateime and concat_compat. I am surprised that you think this should be anywhere else.",
        "createdAt" : "2020-06-14T19:51:57Z",
        "updatedAt" : "2020-06-18T13:26:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "50bf264d-e101-40a5-afb0-a63297e6fd1e",
        "parentId" : "65f03c0b-7e26-489a-a429-e505989ed341",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> with logic tied to the internals (reshaping to conform to block's dimenions is something only needs to be known to the internals code) and that would only be used in the internals\r\n\r\ni agree with Joris; internals-specific logic belongs in internals",
        "createdAt" : "2020-06-14T20:48:10Z",
        "updatedAt" : "2020-06-18T13:26:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a0f12b55-9c23-47a2-a93b-08306ca754f7",
        "parentId" : "65f03c0b-7e26-489a-a429-e505989ed341",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i guess",
        "createdAt" : "2020-06-15T13:25:23Z",
        "updatedAt" : "2020-06-18T13:26:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "94fe89d66c1c5e86dcb84100ad3ce07c4075ac7f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +321,325 @@                concat_values = concat_values.copy()\n    elif any(isinstance(t, ExtensionArray) for t in to_concat):\n        # concatting with at least one EA means we are concatting a single column\n        # the non-EA values are 2D arrays with shape (1, n)\n        to_concat = [t if isinstance(t, ExtensionArray) else t[0, :] for t in to_concat]"
  },
  {
    "id" : "8e9fce0b-26fc-4214-bb6c-5e646dc5d62e",
    "prId" : 35038,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35038#pullrequestreview-439126281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1c9b738-ee16-42e1-a8f3-178cec62e1d2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we have any tests that hit this with concat_axis=1",
        "createdAt" : "2020-06-29T12:58:23Z",
        "updatedAt" : "2020-07-16T12:35:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c95e474a-d930-41be-b69f-bfceea2bd84f",
        "parentId" : "a1c9b738-ee16-42e1-a8f3-178cec62e1d2",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "test_concat_frame_axis0_extension_dtypes goes through this path with concat_axis==1 despite the test name",
        "createdAt" : "2020-06-29T13:10:51Z",
        "updatedAt" : "2020-07-16T12:35:59Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "a45517ec8b4a24f2880ea403fe0d6c855dd2da53",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +331,335 @@                concat_values = concat_values.copy()\n    elif any(isinstance(t, ExtensionArray) for t in to_concat):\n        # concatting with at least one EA means we are concatting a single column\n        # the non-EA values are 2D arrays with shape (1, n)\n        to_concat = [t if isinstance(t, ExtensionArray) else t[0, :] for t in to_concat]"
  },
  {
    "id" : "85c32248-1a88-48de-b05d-df72d13f89d6",
    "prId" : 36010,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36010#pullrequestreview-564902888",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8476ab79-c906-4df5-9ee2-d3095764d29d",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "are we assuming that they are either all-ArrayManager or all-BlockManager?",
        "createdAt" : "2021-01-09T00:08:18Z",
        "updatedAt" : "2021-01-12T11:52:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "005fde41-b3c7-4744-a29e-17483c61bbf0",
        "parentId" : "8476ab79-c906-4df5-9ee2-d3095764d29d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> are we assuming that they are either all-ArrayManager or all-BlockManager?\r\n\r\nYes, and this concat implementation right now is very limited in general (eg only the simple case without any reindexing needed, several tests are skipped because of this, I put several `TODO(ArrayManager) concat with reindexing` because of this). \r\nConcatenation is one of the big areas of work for follow-up on this initial PR.",
        "createdAt" : "2021-01-10T21:36:20Z",
        "updatedAt" : "2021-01-12T11:52:37Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "9dc5600d38f5cfb97052b7c612a161018610316c",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +53,57 @@    BlockManager\n    \"\"\"\n    if isinstance(mgrs_indexers[0][0], ArrayManager):\n\n        if concat_axis == 1:"
  },
  {
    "id" : "a1b9422c-e534-40de-a9a4-4dc2f7e447a2",
    "prId" : 36726,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36726#pullrequestreview-498760528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dc1a0af-1b03-4924-8dd6-f94fc73561d8",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "can you add docstrings, even if only one-liners.",
        "createdAt" : "2020-09-29T16:49:31Z",
        "updatedAt" : "2020-10-03T15:12:30Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "2d8a707b-936e-4fd3-8f9f-335ca6b6e5c8",
        "parentId" : "1dc1a0af-1b03-4924-8dd6-f94fc73561d8",
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "Added, to the best of my understanding.",
        "createdAt" : "2020-09-29T18:21:24Z",
        "updatedAt" : "2020-10-03T15:12:30Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9afdaf4ca9e3423aca37a5836f423191cf3af1a",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +428,432 @@    join_units: Sequence[JoinUnit],\n    dtypes: Sequence[DtypeObj],\n) -> Dict[str, List[DtypeObj]]:\n    \"\"\"Create mapping between upcast class names and lists of dtypes.\"\"\"\n    upcast_classes: Dict[str, List[DtypeObj]] = defaultdict(list)"
  },
  {
    "id" : "564a06c7-4b19-4820-a0d8-daaa9989fd20",
    "prId" : 38907,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38907#pullrequestreview-560711189",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5967f39-0ce9-4f8c-9e8a-2843b2d56300",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "consider having a method on block for this",
        "createdAt" : "2021-01-03T16:57:21Z",
        "updatedAt" : "2021-01-03T16:57:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ccd6cf805f6a37bffceea56d46920ca8b319cd86",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +320,324 @@\n    nonempties = [\n        x for x in join_units if x.block is None or x.block.shape[concat_axis] > 0\n    ]\n    if nonempties:"
  },
  {
    "id" : "f9c2a1b1-47b8-470a-916e-e8d8d1adece7",
    "prId" : 39454,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39454#pullrequestreview-580843390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "112a85bf-2511-4d3f-92e6-1ee5d2579c2c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we just drop the upcast_classes stuff and just do an if/elseif here on dtype_alt? (as you have done with extension / object)",
        "createdAt" : "2021-02-01T22:30:11Z",
        "updatedAt" : "2021-02-01T22:30:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "11578021-decd-4fc7-8931-d36739ea2b3b",
        "parentId" : "112a85bf-2511-4d3f-92e6-1ee5d2579c2c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "isnt't this heavily overlapping with: https://github.com/pandas-dev/pandas/pull/39453 e.g. i like https://github.com/pandas-dev/pandas/pull/39453 as it gets what we want ultimately rigth?",
        "createdAt" : "2021-02-01T22:32:01Z",
        "updatedAt" : "2021-02-01T22:32:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "45590952-e749-466a-8b55-606f3f4189ad",
        "parentId" : "112a85bf-2511-4d3f-92e6-1ee5d2579c2c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i think we're going to get there eventually, but there are a handful of tests that break if we do that right away.  i _think_ the behavior in those tests can be considered buggy (xref #39122), but want to address them in bite-size pieces",
        "createdAt" : "2021-02-01T22:32:30Z",
        "updatedAt" : "2021-02-01T22:32:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "6f2e8bb4-d7a9-43d1-9566-472101a3b169",
        "parentId" : "112a85bf-2511-4d3f-92e6-1ee5d2579c2c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok that's fine.",
        "createdAt" : "2021-02-01T22:55:57Z",
        "updatedAt" : "2021-02-01T22:55:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4abcf64ccb6f8bfcaa4eecb8f44f3a337346283",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +418,422 @@    upcast_classes = _get_upcast_classes(join_units, dtypes)\n\n    if is_extension_array_dtype(dtype_alt):\n        return dtype_alt, dtype_alt.na_value\n    elif dtype_alt == object:"
  },
  {
    "id" : "1c454a3d-5aec-456e-8d5e-9726cfbbcc7b",
    "prId" : 39574,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39574#pullrequestreview-589744195",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac5bb58f-1748-42b0-bd03-938a29abe035",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "```suggestion\r\n        Check that we are all-NA of a type/dtype that is compatible with this dtype.\r\n        Augments `self.is_na` with an additional check of the type of NA values.\r\n```\r\n\r\nThat's correct? \r\n\r\n(I was missing before that this basically is `self.is_na` but a bit stricter for a few cases)",
        "createdAt" : "2021-02-12T18:37:39Z",
        "updatedAt" : "2021-02-12T19:09:51Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "3adfde87-a09e-4c93-b5de-9bf0a114b612",
        "parentId" : "ac5bb58f-1748-42b0-bd03-938a29abe035",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yes",
        "createdAt" : "2021-02-12T18:40:41Z",
        "updatedAt" : "2021-02-12T19:09:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1c9872440f987314ca5b79fc468141a86a6d5fa",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +230,234 @@    def is_valid_na_for(self, dtype: DtypeObj) -> bool:\n        \"\"\"\n        Check that we are all-NA of a type/dtype that is compatible with this dtype.\n        Augments `self.is_na` with an additional check of the type of NA values.\n        \"\"\""
  },
  {
    "id" : "d3db07b2-41e1-4bd5-97ac-9fab1e982e01",
    "prId" : 39612,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39612#pullrequestreview-626101374",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8850b61-6cbc-413a-b6ae-8ef8e67e2a21",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "the annotation is List[Any].  can that be made more specific?",
        "createdAt" : "2021-03-22T23:25:04Z",
        "updatedAt" : "2021-04-12T06:48:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9e0cd273-3db0-40ec-bec5-ba21c1a3755b",
        "parentId" : "a8850b61-6cbc-413a-b6ae-8ef8e67e2a21",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In principle the more specific annotation would be `List[Union[np.ndarray, ExtensionArray, NullArrayProxy]]`. But, iwhen adding that, that gives a bunch of errors down the line because mypy cannot figure out that we are eg converting all input to EAs before passing to `_concat_same_type`. \r\nSo unless if you have specific suggestions how to solve this, I'd rather leave it less specified (for example `concat_compat` is also not typed).",
        "createdAt" : "2021-03-23T10:51:54Z",
        "updatedAt" : "2021-04-12T06:48:04Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "dbbfdf4b-0c6e-4ad6-8e9d-bcab9a324fe5",
        "parentId" : "a8850b61-6cbc-413a-b6ae-8ef8e67e2a21",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i think the practice in this case is to not annotate rather than use Any, cc @simonjayhawkins ",
        "createdAt" : "2021-03-24T16:24:03Z",
        "updatedAt" : "2021-04-12T06:48:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "dd948118-0555-4025-a57d-006cd5fbb0c0",
        "parentId" : "a8850b61-6cbc-413a-b6ae-8ef8e67e2a21",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But `List[Any]` at least indicates it needs to receive a list, which can be better than no typing at all?",
        "createdAt" : "2021-03-31T14:47:59Z",
        "updatedAt" : "2021-04-12T06:48:04Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "914fa42a-d957-4cb8-9df1-a204b32c4de6",
        "parentId" : "a8850b61-6cbc-413a-b6ae-8ef8e67e2a21",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "im hoping @simonjayhawkins will weigh in here, but my understanding of the rule of thumb is that `List[Any]` denotes \"this cannot be further narrowed down\" whereas `List` denotes \"its a list and the annotation is incomplete; contributions welcome\"",
        "createdAt" : "2021-03-31T16:32:10Z",
        "updatedAt" : "2021-04-12T06:48:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "742e70f9-e919-4d46-97c8-369e5c2ad982",
        "parentId" : "a8850b61-6cbc-413a-b6ae-8ef8e67e2a21",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, I thought you meant to have no annoation at all (like `concat_compat`). I can certainly make it `List` instead of `List[Any]`",
        "createdAt" : "2021-03-31T18:28:43Z",
        "updatedAt" : "2021-04-12T06:48:04Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "5a251bde-3543-46b4-b57b-aac4a2991791",
        "parentId" : "a8850b61-6cbc-413a-b6ae-8ef8e67e2a21",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I _think_ that's the general consensus at the moment until we add `disallow_any_generics` #30539 which will force us to add type parameters.",
        "createdAt" : "2021-04-01T10:04:40Z",
        "updatedAt" : "2021-04-12T06:48:04Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "81d09544fd499d69f8231dffb362d38d87850640",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +113,117 @@    Parameters\n    ----------\n    to_concat : list of arrays\n\n    Returns"
  },
  {
    "id" : "880396c4-cc1b-415c-b26e-c1bf0966162d",
    "prId" : 39612,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39612#pullrequestreview-619863376",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44d65ecf-8647-47f1-a4de-d7ba65d1c31b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you now remove concat_compat?",
        "createdAt" : "2021-03-24T15:17:13Z",
        "updatedAt" : "2021-04-12T06:48:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "84387b55-44ee-462a-9ecc-efbd072348cd",
        "parentId" : "44d65ecf-8647-47f1-a4de-d7ba65d1c31b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "and reading your comment below, why is this not in array manger if its only used there?",
        "createdAt" : "2021-03-24T15:18:04Z",
        "updatedAt" : "2021-04-12T06:48:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7cce0bc4-33ca-47f2-9b59-c558b23a87b6",
        "parentId" : "44d65ecf-8647-47f1-a4de-d7ba65d1c31b",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> can you now remove concat_compat?\r\n\r\n`concat_compat` is used in several other places as well\r\n\r\n> why is this not in array manger if its only used there?\r\n\r\nBecause this is the code for concatting managers, which for BlockManager also resides in internals/concat.py?\r\n\r\n",
        "createdAt" : "2021-03-24T15:22:00Z",
        "updatedAt" : "2021-04-12T06:48:04Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "81d09544fd499d69f8231dffb362d38d87850640",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +90,94 @@        # TODO(ArrayManager) doesn't yet preserve the correct dtype\n        arrays = [\n            concat_arrays([mgrs[i].arrays[j] for i in range(len(mgrs))])\n            for j in range(len(mgrs[0].arrays))\n        ]"
  },
  {
    "id" : "a4407db5-63cd-4355-a58d-b47f6a454d1e",
    "prId" : 39612,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39612#pullrequestreview-622761356",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f623137-f97b-42aa-a8f0-3c902076edf7",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is this decision a blocker for anything?",
        "createdAt" : "2021-03-27T00:23:16Z",
        "updatedAt" : "2021-04-12T06:48:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bdc561f3-c41e-48a7-b13e-306905d811a2",
        "parentId" : "2f623137-f97b-42aa-a8f0-3c902076edf7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "No, this is existing behaviour, unrelated to ArrayManager/BlockManager. I just noticed the inconsistency while implementing this, and opened the issue for it (and for now mimicked the current behaviour in the code below)",
        "createdAt" : "2021-03-27T15:55:12Z",
        "updatedAt" : "2021-04-12T06:48:04Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2bf9c06b-95d2-4dec-a048-8a662ec6accf",
        "parentId" : "2f623137-f97b-42aa-a8f0-3c902076edf7",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "thanks",
        "createdAt" : "2021-03-28T16:27:00Z",
        "updatedAt" : "2021-04-12T06:48:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "81d09544fd499d69f8231dffb362d38d87850640",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +152,156 @@    result = np.concatenate(to_concat)\n\n    # TODO decide on exact behaviour (we shouldn't do this only for empty result)\n    # see https://github.com/pandas-dev/pandas/issues/39817\n    if len(result) == 0:"
  },
  {
    "id" : "f2055ea5-e5c9-46b8-8438-4dba2808af2e",
    "prId" : 39841,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39841#pullrequestreview-592462134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6762ce33-5501-4cb6-a2e7-10bcb4a150fe",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "are we implicitly assuming all-ArrayManager here?",
        "createdAt" : "2021-02-16T22:04:58Z",
        "updatedAt" : "2021-02-23T08:55:21Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d5e9fef9-a357-4cd0-9bdf-f366b85a0d06",
        "parentId" : "6762ce33-5501-4cb6-a2e7-10bcb4a150fe",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, that's an open TODO, will add a comment",
        "createdAt" : "2021-02-17T09:53:50Z",
        "updatedAt" : "2021-02-23T08:55:21Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b20ef751-6e52-4770-9cb9-a97b423f930d",
        "parentId" : "6762ce33-5501-4cb6-a2e7-10bcb4a150fe",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "thanks",
        "createdAt" : "2021-02-17T17:45:09Z",
        "updatedAt" : "2021-02-23T08:55:21Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "54692cadd39d22f98c230c01da85181c9ffb7937",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +107,111 @@    \"\"\"\n    # TODO(ArrayManager) this assumes that all managers are of the same type\n    if isinstance(mgrs_indexers[0][0], ArrayManager):\n        return concatenate_array_managers(mgrs_indexers, axes, concat_axis, copy)\n"
  }
]