[
  {
    "id" : "5a81f5c3-ac13-4d44-9fe8-dac37cb71f6a",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-162454603",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "272215b4-98f4-4d39-af5a-410b275e7049",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "again, special casing sparse here, but should probably handle all EAs the same.",
        "createdAt" : "2018-08-13T20:15:46Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f02f4d35-bb4b-44c9-b97e-b01f8032808a",
        "parentId" : "272215b4-98f4-4d39-af5a-410b275e7049",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there a reason you cannot do this?",
        "createdAt" : "2018-09-04T12:36:32Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c6dbd085-922e-46e1-9e7a-cdacfb13442c",
        "parentId" : "272215b4-98f4-4d39-af5a-410b275e7049",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "any answer here?",
        "createdAt" : "2018-10-05T11:19:13Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0d256911-cdb9-4005-9f1e-7a9999afe549",
        "parentId" : "272215b4-98f4-4d39-af5a-410b275e7049",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "https://github.com/pandas-dev/pandas/issues/22791\r\n\r\nIn general, we don't know what the `dtype` should be. We'll need EAs to tell us their \"preferred\" numpy dtype, without having to convert head of time. So it's solvable, we just have to add it to the interface.",
        "createdAt" : "2018-10-08T12:53:27Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +791,795 @@        # TODO: https://github.com/pandas-dev/pandas/issues/22791\n        # Give EAs some input on what happens here. Sparse needs this.\n        if is_sparse(dtype):\n            dtype = dtype.subtype\n        elif is_extension_array_dtype(dtype):"
  },
  {
    "id" : "ee48689c-c421-4d15-809c-b05870ae2720",
    "prId" : 22785,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22785#pullrequestreview-158018410",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d324bc85-13f0-4b91-9cd7-1b9c95e57048",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Do people find this confusing? I can either\r\n\r\n1. duplicate the for loop, using `list.append` for EAs and inserting into `result` for other\r\n2. use lists everywhere\r\n3. use this\r\n\r\nI chose this implementation because I assume it's slightly for wide dataframes with a numpy type, compared to building a list an then `np.asarray(result)` at the end.",
        "createdAt" : "2018-09-20T16:28:50Z",
        "updatedAt" : "2018-09-26T11:39:43Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b1d70e6c-99ca-4a11-ac79-a65681ad7ba0",
        "parentId" : "d324bc85-13f0-4b91-9cd7-1b9c95e57048",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This implementation looks good to me",
        "createdAt" : "2018-09-24T09:00:51Z",
        "updatedAt" : "2018-09-26T11:39:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "78dd81e7c74345c1525b2ea7a623415a6c602f87",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +913,917 @@        if is_extension_array_dtype(dtype):\n            # we'll eventually construct an ExtensionArray.\n            result = np.empty(n, dtype=object)\n        else:\n            result = np.empty(n, dtype=dtype)"
  },
  {
    "id" : "982d70b3-b95d-41fb-8774-9300b1b070ee",
    "prId" : 22785,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22785#pullrequestreview-158018410",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef58735c-006b-4641-9d5b-d3219990d1be",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this gauaranteed to be 1d at this point?",
        "createdAt" : "2018-09-23T12:29:08Z",
        "updatedAt" : "2018-09-26T11:39:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "917888d4-a298-454d-8f43-2fe25347ae90",
        "parentId" : "ef58735c-006b-4641-9d5b-d3219990d1be",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`result`  is created a few lines above with `np.empty(n, dtype=object)`, so I assume yes",
        "createdAt" : "2018-09-24T09:01:31Z",
        "updatedAt" : "2018-09-26T11:39:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "78dd81e7c74345c1525b2ea7a623415a6c602f87",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +924,928 @@\n        if is_extension_array_dtype(dtype):\n            result = dtype.construct_array_type()._from_sequence(\n                result, dtype=dtype\n            )"
  },
  {
    "id" : "edb98231-8e00-47fd-ad3a-c2fe0009d7eb",
    "prId" : 23796,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23796#pullrequestreview-176507578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79c3d775-e822-4a6e-a8de-8b8491241d6b",
        "parentId" : null,
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "No code changed here, just the comment",
        "createdAt" : "2018-11-19T21:36:07Z",
        "updatedAt" : "2018-11-25T13:01:37Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce5bd94125310571c6ca9cfa3ab4aed31b49dcde",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +1156,1160 @@\n        if loc == self._blklocs.shape[0]:\n            # np.append is a lot faster, let's use it if we can.\n            self._blklocs = np.append(self._blklocs, 0)\n            self._blknos = np.append(self._blknos, len(self.blocks))"
  },
  {
    "id" : "fd9e510d-f16a-4b03-b8ab-36a8b4f70cc7",
    "prId" : 23796,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23796#pullrequestreview-177355873",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "119750f7-d35d-49d4-baae-81a34d5ae260",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is this used often?  worth keeping as a standalone function vs inlining?",
        "createdAt" : "2018-11-19T21:52:27Z",
        "updatedAt" : "2018-11-25T13:01:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "60e84b92-3da0-401b-b673-84c96e554c58",
        "parentId" : "119750f7-d35d-49d4-baae-81a34d5ae260",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Got no strong opinion on that.",
        "createdAt" : "2018-11-19T21:55:05Z",
        "updatedAt" : "2018-11-25T13:01:37Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "151c44a9-faf2-4821-9b3e-a0c7ce3c8a84",
        "parentId" : "119750f7-d35d-49d4-baae-81a34d5ae260",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "its called twice as an operand for a loop, so ok to keep",
        "createdAt" : "2018-11-21T17:30:02Z",
        "updatedAt" : "2018-11-25T13:01:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce5bd94125310571c6ca9cfa3ab4aed31b49dcde",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +1982,1986 @@    counts = np.bincount(arr.astype(np.int_))\n    nz = counts.nonzero()[0]\n    return np.c_[nz, counts[nz]]\n\n"
  },
  {
    "id" : "e441a761-68d3-4b2b-83b0-e928f1b864ec",
    "prId" : 24597,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24597#pullrequestreview-189198306",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51f4a614-5914-4ce3-96c0-68d2e52b1621",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i don't think this adds anything to make it a function",
        "createdAt" : "2019-01-03T21:54:11Z",
        "updatedAt" : "2019-01-03T22:03:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "11af1ddd1f204208cc6f0290a6329647cec92e92",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +429,433 @@            self._consolidate_inplace()\n\n        def get_axe(block, qs, axes):\n            from pandas import Float64Index\n            if is_list_like(qs):"
  },
  {
    "id" : "008de78b-53a5-425d-a8af-b7b121567277",
    "prId" : 24597,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24597#pullrequestreview-189202725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cf3bfcc-8aa6-4a49-9e59-d28f360639a1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "also doesn't need / take the bock arg",
        "createdAt" : "2019-01-03T21:54:26Z",
        "updatedAt" : "2019-01-03T22:03:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2648d096-1596-44cb-a8b1-8e632a898a0c",
        "parentId" : "6cf3bfcc-8aa6-4a49-9e59-d28f360639a1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "it uses the block arg",
        "createdAt" : "2019-01-03T22:02:06Z",
        "updatedAt" : "2019-01-03T22:03:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b798a1f8-7f58-4537-b9bd-66e9aeb33499",
        "parentId" : "6cf3bfcc-8aa6-4a49-9e59-d28f360639a1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no i mean get_axe doens't",
        "createdAt" : "2019-01-03T22:03:13Z",
        "updatedAt" : "2019-01-03T22:03:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8708ced5-d5a8-4684-ad2e-fb6bccfe179b",
        "parentId" : "6cf3bfcc-8aa6-4a49-9e59-d28f360639a1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "(which is why it is a function instead of just done once outside the loop).\r\n\r\nI'd rather keep it as a function than in-line it, but not a deal-breaker.  There is another PR after this that will be ripping out a bunch of code regardless.",
        "createdAt" : "2019-01-03T22:03:55Z",
        "updatedAt" : "2019-01-03T22:03:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f4ec8b34-ea9e-4868-a9db-741f536fb2a3",
        "parentId" : "6cf3bfcc-8aa6-4a49-9e59-d28f360639a1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> no i mean get_axe doens't\r\n\r\nline 435 inside `get_axe` reads `elif block.ndim == 1:`",
        "createdAt" : "2019-01-03T22:05:04Z",
        "updatedAt" : "2019-01-03T22:05:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "cfcddd61-d235-4e3d-bcea-7d81424f03a0",
        "parentId" : "6cf3bfcc-8aa6-4a49-9e59-d28f360639a1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "grr, ok, i c now",
        "createdAt" : "2019-01-03T22:07:53Z",
        "updatedAt" : "2019-01-03T22:07:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "11af1ddd1f204208cc6f0290a6329647cec92e92",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +443,447 @@            block = b.quantile(axis=axis, qs=qs, interpolation=interpolation)\n\n            axe = get_axe(b, qs, axes=self.axes)\n\n            axes.append(axe)"
  },
  {
    "id" : "16b35afb-aaaa-486e-beb8-3f712c8343a6",
    "prId" : 24819,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24819#pullrequestreview-199581889",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1700d87-9e86-4e63-bf33-c2858adcaf73",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you make a proper doc-string (Parameters / Returns)",
        "createdAt" : "2019-02-04T13:24:31Z",
        "updatedAt" : "2019-02-04T17:16:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "71729b242da04c01856f640194f56a76c77ebf12",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1973,1977 @@\n        def renamer(x, suffix):\n            \"\"\"Rename the left and right indices.\n\n            If there is overlap, and suffix is not None, add"
  },
  {
    "id" : "fd8817a1-0b5f-4719-b59e-6253edd27347",
    "prId" : 25266,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25266#pullrequestreview-208855244",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17061abf-eafe-4791-a326-3fdb120b6c31",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Since we moved from `match` to `search` here can you also updated the function name?",
        "createdAt" : "2019-02-28T00:46:46Z",
        "updatedAt" : "2019-02-28T03:16:38Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "8e23f590-c44e-4923-ae9f-83e4f9e6242b",
        "parentId" : "17061abf-eafe-4791-a326-3fdb120b6c31",
        "authorId" : "123cd713-6b09-4e7b-9f94-f6a5106c6c34",
        "body" : "OK.",
        "createdAt" : "2019-02-28T01:38:08Z",
        "updatedAt" : "2019-02-28T03:16:38Z",
        "lastEditedBy" : "123cd713-6b09-4e7b-9f94-f6a5106c6c34",
        "tags" : [
        ]
      }
    ],
    "commit" : "89e8ae5c332bf420f25ccd3dfd3089f818d67f57",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1900,1904 @@def _compare_or_regex_search(a, b, regex=False):\n    \"\"\"\n    Compare two array_like inputs of the same shape or two scalar values\n\n    Calls operator.eq or re.search, depending on regex argument. If regex is"
  },
  {
    "id" : "34894460-b186-4ec9-b557-1989b8e67a2c",
    "prId" : 26888,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26888#pullrequestreview-251702277",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8dcfa09f-dbb4-4267-b231-ef0b15bc97e3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "really? when is this an actual Index?",
        "createdAt" : "2019-06-17T11:37:30Z",
        "updatedAt" : "2019-06-17T11:38:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "eb43cda7-a884-4abf-8707-e4add43348c6",
        "parentId" : "8dcfa09f-dbb4-4267-b231-ef0b15bc97e3",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Yes, it can be either. For example, when printing a DataFrame, it is supplied either a index or a list of a single index in various stages of the printing operation.",
        "createdAt" : "2019-06-17T15:29:04Z",
        "updatedAt" : "2019-06-17T20:14:08Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "c5bc8a19-bc9a-4d4b-82ee-358449a4325b",
        "parentId" : "8dcfa09f-dbb4-4267-b231-ef0b15bc97e3",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "It would probably be more consistent that it'd pick one of the two options. I'd prefer ``axis: Index``, given that this is named ``axis`` (vs. ``axes`` for ``BlockManager.__init__``).",
        "createdAt" : "2019-06-17T20:15:56Z",
        "updatedAt" : "2019-06-17T20:15:56Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "8ad2f23f-e75d-47b6-b0d0-dc353f578dbe",
        "parentId" : "8dcfa09f-dbb4-4267-b231-ef0b15bc97e3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right, I think this was for consistency with a BlockManger where you have 2 axes; ok with changing this (followup PR); not sure how much this would take to make consistent.",
        "createdAt" : "2019-06-19T00:18:41Z",
        "updatedAt" : "2019-06-19T00:18:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ead49f98-6d87-4aa9-bec9-d9160c065c4e",
        "parentId" : "8dcfa09f-dbb4-4267-b231-ef0b15bc97e3",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "I think it was for consistency with Panel and 4dPandel etc, which isn`t relevant anymore. I`ll look into changing it.",
        "createdAt" : "2019-06-19T13:34:50Z",
        "updatedAt" : "2019-06-19T13:34:50Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "974b28db59db7c43c810bcd29114c60129b88744",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +1421,1425 @@    def __init__(self,\n                 block: Block,\n                 axis: Union[Index, List[Index]],\n                 do_integrity_check: bool = False,\n                 fastpath: bool = False):"
  },
  {
    "id" : "841a582b-ca91-4183-a472-35e49fde0b20",
    "prId" : 26888,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26888#pullrequestreview-250459957",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98bd3b4a-c6d6-45e1-9653-42911c3cf77b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we not use the assignment form of this? e.g.\r\n```self.blocks: Tuple[Block, ...] = .....```",
        "createdAt" : "2019-06-17T11:37:58Z",
        "updatedAt" : "2019-06-17T11:38:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ddd02508-fa8d-427b-96e4-4bee342b9a71",
        "parentId" : "98bd3b4a-c6d6-45e1-9653-42911c3cf77b",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Unfortunately not until Py36 (only valid in function signature in Py35)",
        "createdAt" : "2019-06-17T12:21:51Z",
        "updatedAt" : "2019-06-17T12:21:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "974b28db59db7c43c810bcd29114c60129b88744",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +101,105 @@                 do_integrity_check: bool = True):\n        self.axes = [ensure_index(ax) for ax in axes]\n        self.blocks = tuple(blocks)  # type: Tuple[Block, ...]\n\n        for block in blocks:"
  },
  {
    "id" : "0b98ec59-bf75-4451-8b48-d9c30d991311",
    "prId" : 29657,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29657#pullrequestreview-317989607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "080561ec-d961-4b6a-a046-d8f7854929ff",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you update the comment (switch the orderings)",
        "createdAt" : "2019-11-16T21:25:47Z",
        "updatedAt" : "2019-11-18T19:00:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7087b6d092f259a1748872a62050110f3379f65",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1400,1404 @@        # the iteration order\n        def canonicalize(block):\n            return (block.mgr_locs.as_array.tolist(), block.dtype.name)\n\n        self_blocks = sorted(self.blocks, key=canonicalize)"
  },
  {
    "id" : "c4a95b0c-f204-4ac6-88f7-35126172732b",
    "prId" : 29853,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29853#pullrequestreview-336814470",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38c63a98-0fab-42b3-9823-709d71448d9e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this strictly necessary? meaning happy to require only callables here (would require some changing)",
        "createdAt" : "2019-12-24T14:32:27Z",
        "updatedAt" : "2019-12-27T16:35:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "17d26019-e4e8-49cc-a723-989fc2b7ff22",
        "parentId" : "38c63a98-0fab-42b3-9823-709d71448d9e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "all of our existing usages pass strings here to get at Block methods.  i think @WillAyd had a suggestion about re-working Block.apply to do str vs callable handling there; that should be its own PR",
        "createdAt" : "2019-12-24T17:19:08Z",
        "updatedAt" : "2019-12-27T16:35:31Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "12e85dcb-7622-4493-bbcf-17f50c54fd97",
        "parentId" : "38c63a98-0fab-42b3-9823-709d71448d9e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k, yeah this whole section could use some TLC",
        "createdAt" : "2019-12-27T16:25:34Z",
        "updatedAt" : "2019-12-27T16:35:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf94d1305e9e803dbea4bafe891b918b1b07844b",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +412,416 @@                    kwargs[k] = obj.reindex(b_items, axis=axis, copy=align_copy)\n\n            if callable(f):\n                applied = b.apply(f, **kwargs)\n            else:"
  },
  {
    "id" : "0f092fdc-6338-4770-a16d-57217da9dcda",
    "prId" : 31361,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31361#pullrequestreview-349557445",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96363df1-24a5-4a5d-916b-14b2fff23663",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i think we dont want the trailing comma here",
        "createdAt" : "2020-01-28T15:47:56Z",
        "updatedAt" : "2020-01-28T15:47:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "07eb1dff-f48b-43c6-8f42-2ba45ec39743",
        "parentId" : "96363df1-24a5-4a5d-916b-14b2fff23663",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Worth rerunning CI over?",
        "createdAt" : "2020-01-28T17:12:13Z",
        "updatedAt" : "2020-01-28T17:12:14Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "91fafc99-6072-4709-9222-8207105b93eb",
        "parentId" : "96363df1-24a5-4a5d-916b-14b2fff23663",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i can change it in my next \"assorted cleanups\" PR",
        "createdAt" : "2020-01-28T17:18:39Z",
        "updatedAt" : "2020-01-28T17:18:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "476251343f66b783058e5e711636a1bfa72c6908",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1506,1510 @@            raise IndexError(\"Requested axis not found in manager\")\n\n        return type(self)(self._block._slice(slobj), self.index[slobj], fastpath=True,)\n\n    @property"
  },
  {
    "id" : "93af1d26-5b7e-4f26-97ff-3fa49e4fb5bd",
    "prId" : 32261,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32261#pullrequestreview-368822408",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aab8ae4c-af16-4a34-8698-ff67e2a3f7c3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "to make this more transparent, I would change the return signature of _rebuild_blknos_and_blklocs to return a tuple of (blknos, blklocs) and set them here. It is much more transparent.\r\n",
        "createdAt" : "2020-03-03T01:41:43Z",
        "updatedAt" : "2020-03-03T01:41:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f4a0ea09-cade-48a3-bca6-daa84bf6e379",
        "parentId" : "aab8ae4c-af16-4a34-8698-ff67e2a3f7c3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "that turns out to get messy because of the way we update these in-place in some other methods.  so id like to skip this for now, and revisit it in the upcoming even-lazier pass",
        "createdAt" : "2020-03-03T02:24:25Z",
        "updatedAt" : "2020-03-03T02:24:25Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "23035474-fecf-4001-a6bd-b20e53623ac0",
        "parentId" : "aab8ae4c-af16-4a34-8698-ff67e2a3f7c3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok. ",
        "createdAt" : "2020-03-04T14:28:40Z",
        "updatedAt" : "2020-03-04T14:28:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2fe595299787068612f4ad06e55665c6e1078383",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +159,163 @@        if self._blknos is None:\n            # Note: these can be altered by other BlockManager methods.\n            self._rebuild_blknos_and_blklocs()\n\n        return self._blknos"
  },
  {
    "id" : "668fcc55-e086-4b1e-a83d-0fb7a1bc7b7f",
    "prId" : 32297,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32297#pullrequestreview-365848737",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23292355-c665-41be-ad40-907f53e56a7e",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "self.ndim==1 and axis==1 are guarded against elsewhere?",
        "createdAt" : "2020-02-27T17:15:29Z",
        "updatedAt" : "2020-02-27T17:15:29Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "3b2fd641-d11d-4bb1-a0fb-6027823f990e",
        "parentId" : "23292355-c665-41be-ad40-907f53e56a7e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yes",
        "createdAt" : "2020-02-27T17:20:53Z",
        "updatedAt" : "2020-02-27T17:20:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "89b3f35e5e3d89e5bf9da593ed22be30fe887f73",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +721,725 @@            new_blocks = [blk.getitem_block(slicer) for blk in self.blocks]\n        else:\n            raise IndexError(\"Requested axis not found in manager\")\n\n        new_axes = list(self.axes)"
  },
  {
    "id" : "4f4a9608-9e16-415b-8c6b-96ede363a24b",
    "prId" : 32350,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32350#pullrequestreview-368078712",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2484fdcf-af20-474f-b372-bc0b92999d8b",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "rather than add the variable annotation, does new_blocks need to be initialized outside the if else? make_block has the correct return type and the extend wouldn't be needed. (but I guess this mypy fixup is orthogonal to this PR)",
        "createdAt" : "2020-03-02T19:12:04Z",
        "updatedAt" : "2020-03-03T01:49:50Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "803e548a-9a63-44e3-95a5-9cc5b4e27037",
        "parentId" : "2484fdcf-af20-474f-b372-bc0b92999d8b",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I'm not a fan of variable annotations when not required. but not a blocker.",
        "createdAt" : "2020-03-03T15:31:05Z",
        "updatedAt" : "2020-03-03T15:31:26Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "b042110aac023ec590b8eb7fdf4be44714d84dbb",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +1093,1097 @@            unfit_count = len(unfit_mgr_locs)\n\n            new_blocks: List[Block] = []\n            if value_is_extension_type:\n                # This code (ab-)uses the fact that sparse blocks contain only"
  },
  {
    "id" : "93efdfd4-01bb-4b70-a050-4d752ce863e4",
    "prId" : 32376,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32376#pullrequestreview-367343340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4bfa5de-8de4-40e7-88dd-b7afee040e71",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "if this isn't public, the comment isn't needed with type annotations ",
        "createdAt" : "2020-03-02T15:42:56Z",
        "updatedAt" : "2020-03-02T16:12:47Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "75f6233f-d3eb-47af-b531-3c2d6722a003",
        "parentId" : "a4bfa5de-8de4-40e7-88dd-b7afee040e71",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is mypy smart enough to enforce this?  I'm hoping to ween internals off of `ensure_index` completely, the comment is to keep track of where it has been done",
        "createdAt" : "2020-03-02T15:55:42Z",
        "updatedAt" : "2020-03-02T16:12:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "841d25d2-cb5c-40a7-81b7-4f336724c1fc",
        "parentId" : "a4bfa5de-8de4-40e7-88dd-b7afee040e71",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "my only concern is keeping comments in-sync with code changes over time.",
        "createdAt" : "2020-03-02T16:17:31Z",
        "updatedAt" : "2020-03-02T16:17:31Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "dd6f41c2-6090-490b-8094-e7530e1bee87",
        "parentId" : "a4bfa5de-8de4-40e7-88dd-b7afee040e71",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> is mypy smart enough to enforce this?\r\n\r\nas we add more type hints throughout the code. (the pace should be quicker but too much bikeshedding IMO) if mypy is green, job done! you can only get so far if the type hints are wrong.",
        "createdAt" : "2020-03-02T16:20:22Z",
        "updatedAt" : "2020-03-02T16:20:23Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "127005ad-944a-40c8-952c-2b044f2ac96c",
        "parentId" : "a4bfa5de-8de4-40e7-88dd-b7afee040e71",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> the pace should be quicker but too much bikeshedding IMO\r\n\r\nFair enough, im happy to defer to you on these",
        "createdAt" : "2020-03-02T16:25:28Z",
        "updatedAt" : "2020-03-02T16:25:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bdc7e35e-91ff-46f3-9516-c67e9bad7b4d",
        "parentId" : "a4bfa5de-8de4-40e7-88dd-b7afee040e71",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> > the pace should be quicker but too much bikeshedding IMO\r\n> \r\n> Fair enough, im happy to defer to you on these\r\n\r\nThe point is, mypy is the checker, so the reviewer's don't need to be. (there does need to be some consideration of style, readability, maintenance etc)",
        "createdAt" : "2020-03-02T16:29:04Z",
        "updatedAt" : "2020-03-02T16:29:05Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "66484209-9aa3-4912-bce8-aa7d03ecc91f",
        "parentId" : "a4bfa5de-8de4-40e7-88dd-b7afee040e71",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> (there does need to be some consideration of style, readability, maintenance etc)\r\n\r\nand we could start to address those concerns with tools like https://pypi.org/project/flake8-annotations-complexity/ ",
        "createdAt" : "2020-03-02T16:32:42Z",
        "updatedAt" : "2020-03-02T16:32:42Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "72d40822845885773387c857f4bf758bd3569c2e",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +173,177 @@\n    def set_axis(self, axis: int, new_labels: Index):\n        # Caller is responsible for ensuring we have an Index object.\n        old_len = len(self.axes[axis])\n        new_len = len(new_labels)"
  },
  {
    "id" : "10e4d12d-71eb-4f88-9693-799435a2e155",
    "prId" : 32376,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32376#pullrequestreview-367313135",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab085cfc-ecd2-4266-8add-5f9a079cce5c",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "as an aside, could this be a property? and remove/inline _consolidate_check",
        "createdAt" : "2020-03-02T15:46:53Z",
        "updatedAt" : "2020-03-02T16:12:47Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "724293bb-bc7e-488c-a790-d4761c07c42c",
        "parentId" : "ab085cfc-ecd2-4266-8add-5f9a079cce5c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "probably could, would need to do some profiling.  xref #32261.",
        "createdAt" : "2020-03-02T15:57:07Z",
        "updatedAt" : "2020-03-02T16:12:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "72d40822845885773387c857f4bf758bd3569c2e",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +626,630 @@        return bm\n\n    def is_consolidated(self) -> bool:\n        \"\"\"\n        Return True if more than one block with the same dtype"
  },
  {
    "id" : "73744c33-dea6-4ed3-8b13-56e127fd910a",
    "prId" : 32403,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32403#pullrequestreview-367645362",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3ce6b67-2a98-4322-a0d0-feecdcaa2ad4",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What error was this fixing?",
        "createdAt" : "2020-03-03T01:19:24Z",
        "updatedAt" : "2020-03-03T01:20:00Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f8e589ab-c657-47eb-823f-b31ec7650711",
        "parentId" : "e3ce6b67-2a98-4322-a0d0-feecdcaa2ad4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not an error, just unnecessarily complicated",
        "createdAt" : "2020-03-03T01:22:41Z",
        "updatedAt" : "2020-03-03T01:22:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c221c079212b503cc2c45c81ae4b118b9d78b412",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +149,153 @@        \"\"\" return an empty BlockManager with the items axis of len 0 \"\"\"\n        if axes is None:\n            axes = [Index([])] + self.axes[1:]\n\n        # preserve dtype if possible"
  },
  {
    "id" : "683c14e8-86fd-4d3a-8474-07ac71170d7c",
    "prId" : 32403,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32403#pullrequestreview-367975284",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "824ebd8f-35c9-4c03-a1e8-a710d96443e6",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "according to the docstring, is_sparse is to check arrays. so isinstance(dtype, SparseDtype) could be used here to avoid the ignore?",
        "createdAt" : "2020-03-03T13:28:04Z",
        "updatedAt" : "2020-03-03T13:32:12Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "c221c079212b503cc2c45c81ae4b118b9d78b412",
    "line" : 225,
    "diffHunk" : "@@ -1,1 +813,817 @@        # Give EAs some input on what happens here. Sparse needs this.\n        if is_sparse(dtype):\n            dtype = dtype.subtype  # type: ignore\n        elif is_extension_array_dtype(dtype):\n            dtype = \"object\""
  },
  {
    "id" : "8131c413-996d-4062-b302-d8164e86cdb2",
    "prId" : 32421,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32421#pullrequestreview-370842135",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a606aa7-365d-43e9-862b-6fa4fefca758",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this used in BlockManager?",
        "createdAt" : "2020-03-08T15:44:04Z",
        "updatedAt" : "2020-03-09T23:16:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2617d850-edc7-40a2-960f-35252c8f932a",
        "parentId" : "1a606aa7-365d-43e9-862b-6fa4fefca758",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "no",
        "createdAt" : "2020-03-08T16:25:53Z",
        "updatedAt" : "2020-03-09T23:16:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb4257b49c7eb6ad736f31ef67b1b1e2563c7476",
    "line" : 193,
    "diffHunk" : "@@ -1,1 +1541,1545 @@\n    @classmethod\n    def from_array(cls, array: ArrayLike, index: Index) -> \"SingleBlockManager\":\n        \"\"\"\n        Constructor for if we have an array that is not yet a Block."
  },
  {
    "id" : "38e5faa6-7bfd-4b31-977e-a89abd008849",
    "prId" : 32421,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32421#pullrequestreview-372789752",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d39542c5-4e49-4c69-b1d5-74af453ae4b8",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@simonjayhawkins is mypy reliable enough that we can remove this assertion?  these add up in things like groupby.apply when we create many many Series objects",
        "createdAt" : "2020-03-11T02:41:06Z",
        "updatedAt" : "2020-03-11T02:41:07Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9a371974-2697-4b93-a126-80c5459d2a7b",
        "parentId" : "d39542c5-4e49-4c69-b1d5-74af453ae4b8",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> is mypy reliable enough that we can remove this assertion?\r\n\r\nnot really as we don't have very strict type checking.\r\n\r\nwe could call the constructor with a variable that has type Any, or we could call the constructor from a function that is not currently type checked (still don't have check_untyped_defs for many modules) \r\n\r\nto prevent calling the constructor with a variable with type Any, we would need disallow dynamic typing completely, https://mypy.readthedocs.io/en/stable/config_file.html#disallow-dynamic-typing",
        "createdAt" : "2020-03-11T14:07:30Z",
        "updatedAt" : "2020-03-11T14:07:31Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb4257b49c7eb6ad736f31ef67b1b1e2563c7476",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +1512,1516 @@        fastpath: bool = False,\n    ):\n        assert isinstance(block, Block), type(block)\n\n        if isinstance(axis, list):"
  },
  {
    "id" : "cf7c94cb-31dd-4eb6-8eda-8404db508874",
    "prId" : 32769,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32769#pullrequestreview-376505560",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60ef9118-4551-4708-a7c0-7907d48249e8",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "How feasible is it to align the inplace arg with blocks?",
        "createdAt" : "2020-03-18T00:13:56Z",
        "updatedAt" : "2020-03-22T01:38:01Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e2d849da-30de-4dc7-844b-f847f94295ca",
        "parentId" : "60ef9118-4551-4708-a7c0-7907d48249e8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Block.putmask is called from other Block methods with inplace=False, so non-trivial",
        "createdAt" : "2020-03-18T01:19:49Z",
        "updatedAt" : "2020-03-22T01:38:01Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "67ca8f566b31e16ff333392ae60c081b0f1c9f26",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +574,578 @@            mask=mask,\n            new=new,\n            inplace=True,\n            axis=axis,\n            transpose=transpose,"
  },
  {
    "id" : "c809d4a1-085a-40cb-92ef-7672a6deba1f",
    "prId" : 32779,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32779#pullrequestreview-400431694",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa1011a7-2159-422d-ab18-0803a8f4503d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some comments here about the perf implications of these strategies",
        "createdAt" : "2020-04-25T21:09:52Z",
        "updatedAt" : "2020-05-17T21:35:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c4f951684183333070a9f9ae32b19c7c9c9853a",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +1364,1368 @@                    # GH#32779 to avoid the performance penalty of copying,\n                    #  we may try to only slice\n                    taker = blklocs[mgr_locs.indexer]\n                    max_len = max(len(mgr_locs), taker.max() + 1)\n                    if only_slice:"
  },
  {
    "id" : "f43f99ae-85d6-4203-bfe0-87761bd91736",
    "prId" : 32779,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32779#pullrequestreview-409326441",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec4e39b5-9bef-4f2f-b70f-913c67afea9d",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add a pointer about where this is used?",
        "createdAt" : "2020-05-11T12:42:28Z",
        "updatedAt" : "2020-05-17T21:35:04Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9a86f4fc-6c84-4109-9075-0eea25d28a3f",
        "parentId" : "ec4e39b5-9bef-4f2f-b70f-913c67afea9d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sure",
        "createdAt" : "2020-05-11T16:19:16Z",
        "updatedAt" : "2020-05-17T21:35:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c4f951684183333070a9f9ae32b19c7c9c9853a",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1283,1287 @@        fill_value : scalar, default lib.no_default\n        only_slice : bool, default False\n            If True, we always return views on existing arrays, never copies.\n            This is used when called from ops.blockwise.operate_blockwise.\n"
  },
  {
    "id" : "46ed4251-2cfc-471e-8a04-1b3159233399",
    "prId" : 32779,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32779#pullrequestreview-413200531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0bf7d2a-33ac-4ce1-afa3-d92aeebf33b4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you use a list comprehesnion",
        "createdAt" : "2020-05-17T21:13:47Z",
        "updatedAt" : "2020-05-17T21:35:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "46a4fd5a-527e-4c9c-9529-c54d4075dfbd",
        "parentId" : "b0bf7d2a-33ac-4ce1-afa3-d92aeebf33b4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "above on 1317 i can, here it is less clean",
        "createdAt" : "2020-05-17T21:31:43Z",
        "updatedAt" : "2020-05-17T21:35:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c4f951684183333070a9f9ae32b19c7c9c9853a",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +1375,1379 @@                        # GH#33597 slice instead of take, so we get\n                        #  views instead of copies\n                        for i, ml in zip(taker, mgr_locs):\n                            nb = blk.getitem_block([i], new_mgr_locs=ml)\n                            blocks.append(nb)"
  },
  {
    "id" : "94f5cfab-9475-4b7d-9eab-996d1a1b5655",
    "prId" : 32856,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32856#pullrequestreview-378562764",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a617323-66bc-46f0-950e-b388cf373684",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "could pass `slice(i, i+1)` and avoid editing the cython",
        "createdAt" : "2020-03-20T14:45:31Z",
        "updatedAt" : "2020-03-20T20:12:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b49d7c56-8085-4558-80e8-0d06adc81c7b",
        "parentId" : "9a617323-66bc-46f0-950e-b388cf373684",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "See Jeff's comment above, he asked the opposite (I originally passed the slice here in the first version of this PR, you can check the diff of the first commit)",
        "createdAt" : "2020-03-20T14:48:55Z",
        "updatedAt" : "2020-03-20T20:12:37Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0c932422-fd1a-4167-945e-15e4ffcc362f",
        "parentId" : "9a617323-66bc-46f0-950e-b388cf373684",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "hah, makes sense",
        "createdAt" : "2020-03-20T15:04:46Z",
        "updatedAt" : "2020-03-20T20:12:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7dfeb197496f9ca3956a6533e90382f88dfc43b6",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1789,1793 @@\n        external_blocks = [\n            make_block(array, klass=ExtensionBlock, placement=i)\n            for i, _, array in items_dict[\"ExtensionBlock\"]\n        ]"
  },
  {
    "id" : "2ac153ce-0f64-4252-921a-82932c04ca5e",
    "prId" : 32890,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32890#pullrequestreview-391086437",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e085d7dd-14c9-4390-aeb6-cdc35e0b9fe7",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This typing of \"ArrayLike\" is not necessarily correct. Although the name might indicate otherwise, ArrayLike is specifically ndarray+ExtensionArray, and not general array-like\r\n\r\n(to be clear, it might also be correct, I didn't check where this function is called)",
        "createdAt" : "2020-04-09T18:23:44Z",
        "updatedAt" : "2020-04-10T11:09:04Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "cb6a8f1d-68c6-4578-8ee6-f0b9f4311310",
        "parentId" : "e085d7dd-14c9-4390-aeb6-cdc35e0b9fe7",
        "authorId" : "1b4bb4ba-4fb8-442a-8561-a6ce10bcadbb",
        "body" : "I think in this case the ArrayLike is already covering the right use cases for the function.",
        "createdAt" : "2020-04-09T19:51:42Z",
        "updatedAt" : "2020-04-10T11:09:04Z",
        "lastEditedBy" : "1b4bb4ba-4fb8-442a-8561-a6ce10bcadbb",
        "tags" : [
        ]
      }
    ],
    "commit" : "606aeb83a15cb0a8f7d37447d7be20fea11a3207",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1907,1911 @@\ndef _compare_or_regex_search(\n    a: Union[ArrayLike, Scalar], b: Union[ArrayLike, Scalar], regex: bool = False\n) -> Union[ArrayLike, bool]:\n    \"\"\""
  },
  {
    "id" : "4fa6bdd7-1b69-4f01-86b8-3a4b29675c6b",
    "prId" : 33100,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33100#pullrequestreview-383938593",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d62d2ed5-42cd-4b6d-9d65-7b01546e7ddf",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "In theory mypy will flag violations here already for us, so superfluous to have these here",
        "createdAt" : "2020-03-30T03:54:34Z",
        "updatedAt" : "2020-03-31T01:49:44Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d50f1b96-4c0a-4b95-9128-8c57ada0fef4",
        "parentId" : "d62d2ed5-42cd-4b6d-9d65-7b01546e7ddf",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@simonjayhawkins is this correct?  in a previous pass I found there were annotation-defying types being passed in this function that mypy had not caught",
        "createdAt" : "2020-03-30T14:46:26Z",
        "updatedAt" : "2020-03-31T01:49:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "73291358-716a-4acf-b7bb-63244a4c3b27",
        "parentId" : "d62d2ed5-42cd-4b6d-9d65-7b01546e7ddf",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "yes, @WillAyd is correct, but in practice we probably need the run-time asserts to be sure. probably better to fail than potentially produce incorrect results.\r\n\r\n> in a previous pass I found there were annotation-defying types being passed in this function that mypy had not caught\r\n\r\nif a variable is Any or the callsite is not being checked, then we can pass the wrong type.",
        "createdAt" : "2020-03-30T14:54:42Z",
        "updatedAt" : "2020-03-31T01:49:44Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "0171beebc71b25f61f16abbfd3541acc1e8a3239",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +1677,1681 @@    arrays, names: Index, axes: List[Index]\n) -> BlockManager:\n    assert isinstance(names, Index)\n    assert isinstance(axes, list)\n    assert all(isinstance(x, Index) for x in axes)"
  },
  {
    "id" : "b8a3f478-1e17-4483-9243-7387b5f6dc1b",
    "prId" : 33100,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33100#pullrequestreview-383929068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "989797e0-d7e0-4a9c-8e20-acd1253af7c1",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Rather than do this I think would be better to just mark this function with `typing.NoReturn` as the return value",
        "createdAt" : "2020-03-30T03:55:43Z",
        "updatedAt" : "2020-03-31T01:49:44Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "0e16e75b-1378-4dc6-9a26-0e2f518034f1",
        "parentId" : "989797e0-d7e0-4a9c-8e20-acd1253af7c1",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "i recall that fails on our min version build.",
        "createdAt" : "2020-03-30T09:46:44Z",
        "updatedAt" : "2020-03-31T01:49:44Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "bc422924-02ec-46df-8cdf-a6f7e2ec4427",
        "parentId" : "989797e0-d7e0-4a9c-8e20-acd1253af7c1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "elsewhere (in particular in indexes.base) we've moved towards this pattern",
        "createdAt" : "2020-03-30T14:45:23Z",
        "updatedAt" : "2020-03-31T01:49:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0171beebc71b25f61f16abbfd3541acc1e8a3239",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +1705,1709 @@    #  can raise it in the caller; mypy plays better with that\n    if passed == implied and e is not None:\n        return e\n    if block_shape[0] == 0:\n        return ValueError(\"Empty data passed with indices specified.\")"
  },
  {
    "id" : "91d0e9bd-4c95-49d8-9077-a6e2c3d8a0b7",
    "prId" : 33100,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33100#pullrequestreview-383928641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5ea2d0a-3b6e-4ea5-a690-6232a51982cf",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Just as FYI but newer versions of mypy technically have better inferencing capabilities for empty sequence assignment like this. @simonjayhawkins ",
        "createdAt" : "2020-03-30T03:57:12Z",
        "updatedAt" : "2020-03-31T01:49:44Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "30fea40f-4eae-452b-8216-12a1eca03c2b",
        "parentId" : "d5ea2d0a-3b6e-4ea5-a690-6232a51982cf",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "id be happy to remove this; is that the suggested course of action?",
        "createdAt" : "2020-03-30T14:44:59Z",
        "updatedAt" : "2020-03-31T01:49:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0171beebc71b25f61f16abbfd3541acc1e8a3239",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +1738,1742 @@        items_dict[block_type.__name__].append((i, k, v))\n\n    blocks: List[Block] = []\n    if len(items_dict[\"FloatBlock\"]):\n        float_blocks = _multi_blockify(items_dict[\"FloatBlock\"])"
  },
  {
    "id" : "0d45494e-2c0e-44fd-a2d5-dcd5796c0a0f",
    "prId" : 33310,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33310#pullrequestreview-389039453",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c36e62c-99c5-455d-a437-a4d3cf10cf92",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "is allow_fill now redundant here?",
        "createdAt" : "2020-04-06T09:55:41Z",
        "updatedAt" : "2020-04-06T16:01:10Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "3a888cd2-9334-4208-9911-cf3ef9e23df3",
        "parentId" : "4c36e62c-99c5-455d-a437-a4d3cf10cf92",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "allow_fill is tricky to remove (but this is a start to it)",
        "createdAt" : "2020-04-06T14:52:06Z",
        "updatedAt" : "2020-04-06T16:01:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bdd77bb7-c2e9-4ccd-b0d9-23ca27eb0d8c",
        "parentId" : "4c36e62c-99c5-455d-a437-a4d3cf10cf92",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The `allow_fill` is from checking `fill_value is not lib.default`. So `fill_value is None` is still a different check I think. ",
        "createdAt" : "2020-04-06T15:04:33Z",
        "updatedAt" : "2020-04-06T16:01:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9af2dbd1-72be-4e77-ba95-dc059fdcc0a2",
        "parentId" : "4c36e62c-99c5-455d-a437-a4d3cf10cf92",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "what @jorisvandenbossche said",
        "createdAt" : "2020-04-06T15:59:43Z",
        "updatedAt" : "2020-04-06T16:01:10Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "6bf30e89-94c3-466d-86fa-1e69d4c97522",
        "parentId" : "4c36e62c-99c5-455d-a437-a4d3cf10cf92",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "if `fill_value is None`, isn't `allow_fill`, by definition, `True`. so `allow_fill` is redundant here and `if fill_value is None:` would be the same? nbd though, i must be missing something. will look again. We no longer need the guard, that was previously required with the `fill_tuple` \\_\\_getitem__ call.",
        "createdAt" : "2020-04-07T11:51:11Z",
        "updatedAt" : "2020-04-07T11:51:11Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c25d3108e6438b5e0dbda67cbb1d6651ab5c1b5",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +1340,1344 @@                return [blk.getitem_block(slobj, new_mgr_locs=slice(0, sllen))]\n            elif not allow_fill or self.ndim == 1:\n                if allow_fill and fill_value is None:\n                    _, fill_value = maybe_promote(blk.dtype)\n"
  },
  {
    "id" : "b7c82282-e089-4cbe-94b3-dd54128f09f4",
    "prId" : 33332,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33332#pullrequestreview-388627017",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a174d27-ceeb-436b-8191-9eda42dc4124",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Are you at a point where `indexer` can be typed?",
        "createdAt" : "2020-04-06T18:39:28Z",
        "updatedAt" : "2020-04-06T18:41:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "3583986e-e18e-4421-a177-c5863a3d423f",
        "parentId" : "5a174d27-ceeb-436b-8191-9eda42dc4124",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "pretty wide, anything you can pass to `np.delete`\r\n\r\ni was thinking it might be nice to put something in `pandas._typing` to represent valid positional indexers",
        "createdAt" : "2020-04-06T18:54:09Z",
        "updatedAt" : "2020-04-06T18:54:10Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "64beba6b-5fff-4912-b711-dbf34ffcca63",
        "parentId" : "5a174d27-ceeb-436b-8191-9eda42dc4124",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "That does sound generally useful, but is out of scope for this PR.",
        "createdAt" : "2020-04-06T18:57:19Z",
        "updatedAt" : "2020-04-06T18:57:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "e1293e9c-a076-45df-b8ef-b2e9c13a8fba",
        "parentId" : "5a174d27-ceeb-436b-8191-9eda42dc4124",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ahh i see, yes this is useful, but in a followon ",
        "createdAt" : "2020-04-06T21:22:13Z",
        "updatedAt" : "2020-04-06T21:22:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "43ab8a269e5647cf35b808711c2a6ab9270b0576",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1605,1609 @@        pass\n\n    def idelete(self, indexer):\n        \"\"\"\n        Delete single location from SingleBlockManager."
  },
  {
    "id" : "4b0aeffb-e345-4d4d-ae1f-8a9afa529035",
    "prId" : 33332,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33332#pullrequestreview-388626755",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "553a3a03-7a89-432b-8e29-a2ddb193f48d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this should just be typed as int i think (followon ok)",
        "createdAt" : "2020-04-06T21:21:48Z",
        "updatedAt" : "2020-04-06T21:21:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "43ab8a269e5647cf35b808711c2a6ab9270b0576",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1008,1012 @@        )\n\n    def idelete(self, indexer):\n        \"\"\"\n        Delete selected locations in-place (new block and array, same BlockManager)"
  },
  {
    "id" : "5e52c500-87ea-4a31-9c24-7423ba47572b",
    "prId" : 33616,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33616#pullrequestreview-396075483",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4f66741-ad2d-4621-b1a3-8fd84666cfd1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you don't like the\r\n```\r\nindexer = tupel([None] * obj.ndim)\r\nindexer[-1] = b.mgr_locs.indexer\r\nkwargs[k] = obj.iloc[indexer]._values\r\n```\r\n\r\n?",
        "createdAt" : "2020-04-19T22:26:08Z",
        "updatedAt" : "2020-04-19T22:26:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c29fa94b-26b5-4b1f-9b28-3b619020e2c2",
        "parentId" : "e4f66741-ad2d-4621-b1a3-8fd84666cfd1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "actually i have a note to myself to make iloc handle Ellipsis so this can become `obj.iloc[..., indexer]._values`\r\n\r\nxref #10956",
        "createdAt" : "2020-04-19T22:29:49Z",
        "updatedAt" : "2020-04-19T22:29:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "92ff1e5f-f8c0-4676-a98f-ba941030ffe9",
        "parentId" : "e4f66741-ad2d-4621-b1a3-8fd84666cfd1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok great",
        "createdAt" : "2020-04-19T23:30:01Z",
        "updatedAt" : "2020-04-19T23:30:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "feb1703fd17e7dfda50b01d337c4b0abd62e4ab8",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +385,389 @@                        #  obj.axes[-1].equals(self.items)\n                        if obj.ndim == 1:\n                            kwargs[k] = obj.iloc[b.mgr_locs.indexer]._values\n                        else:\n                            kwargs[k] = obj.iloc[:, b.mgr_locs.indexer]._values"
  },
  {
    "id" : "ff1aaca4-b7c0-4750-abb2-881e3dcc3764",
    "prId" : 33857,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33857#pullrequestreview-404621436",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2706177-056f-454a-abdd-eeaa27d38eb3",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Suggestion: pass through this `na_value` to `_interleave`, and then when looping over the blocks, you can check for ExtensionBlocks and then call `to_numpy` with the appropriate dtype and na_value. \r\n\r\nThe lines above will need to be kept for non-EAs, but I think for EAs, we want to use their `to_numpy` implemenation, as this can potentially be more efficient in depending on the dtype/na_value combination",
        "createdAt" : "2020-05-01T20:50:48Z",
        "updatedAt" : "2020-05-12T19:12:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7f4fe456-f22a-443a-ae69-fe22220dc05b",
        "parentId" : "d2706177-056f-454a-abdd-eeaa27d38eb3",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Pushed a change to make this update. In the single extension block case we're still doing a conversion to object (got several odd failures when I tried making the associated edit there) but I'm thinking this is already going to be a pretty inexpensive case anyways",
        "createdAt" : "2020-05-02T02:01:26Z",
        "updatedAt" : "2020-05-12T19:12:41Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "3c0f1ea2-badc-40d0-867e-4c635ea7d65c",
        "parentId" : "d2706177-056f-454a-abdd-eeaa27d38eb3",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> In the single extension block case we're still doing a conversion to object \r\n\r\nI think in the above `is self._is_single_block` checks, you can add an additional case for single ExtensionBlock (like there is already a check for single datetimetz block)",
        "createdAt" : "2020-05-02T15:18:34Z",
        "updatedAt" : "2020-05-12T19:12:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "6cd4a6f8-761e-412a-90da-f6e2c22e1634",
        "parentId" : "d2706177-056f-454a-abdd-eeaa27d38eb3",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Got mixed up by the \"blocks are transposed\" thing and was missing a reshape, should be working now 🤞 ",
        "createdAt" : "2020-05-03T13:57:26Z",
        "updatedAt" : "2020-05-12T19:12:41Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2228bf83bf63370fad463420c06649e80c07b13",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +837,841 @@\n        if na_value is not lib.no_default:\n            arr[isna(arr)] = na_value\n\n        return arr.transpose() if transpose else arr"
  },
  {
    "id" : "cb4b0ec0-24f9-47ba-9131-b60260dc202e",
    "prId" : 33857,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33857#pullrequestreview-405789578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99a6902a-6861-4686-a6b3-c5cfb8a883b2",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "When `interleave` is called, that will always be already a copy, so it would be nice to avoid a second copy there as well\r\n\r\nMaybe the above if/else can be reorganized slightly, like:\r\n\r\n```\r\nif self._is_single_block or not self.is_mixed_type:\r\n  if self.blocks[0].is_datetimetz:\r\n    ...\r\n  elif self.blocks[0].is_extension:\r\n    ...\r\n  else:\r\n    ....\r\n  if copy or na_value is not lib.no_default:\r\n    arr = arr.copy()\r\nelse:\r\n  arr = self._interleave(dtype=dtype, na_value=na_value)\r\n```\r\n\r\n\r\n\r\n",
        "createdAt" : "2020-05-05T06:42:09Z",
        "updatedAt" : "2020-05-12T19:12:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0d98c048-d5c7-4aa6-a4dd-23b24c7de761",
        "parentId" : "99a6902a-6861-4686-a6b3-c5cfb8a883b2",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Good idea. Not sure if it's \"bad style\" but is another option simply to create a \"should_copy\" variable and update it for the interleave case? Might be a bit more explicit what we're thinking and helps avoid nested conditionals.",
        "createdAt" : "2020-05-05T13:18:13Z",
        "updatedAt" : "2020-05-12T19:12:41Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "3f56f54d-49aa-4713-9cc9-9c43c0adba19",
        "parentId" : "99a6902a-6861-4686-a6b3-c5cfb8a883b2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Such a variable is also fine, whatever is easiest to implement / you prefer",
        "createdAt" : "2020-05-05T13:31:16Z",
        "updatedAt" : "2020-05-12T19:12:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2228bf83bf63370fad463420c06649e80c07b13",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +834,838 @@\n        if copy:\n            arr = arr.copy()\n\n        if na_value is not lib.no_default:"
  },
  {
    "id" : "17450b24-533b-4036-89ed-e8b5e2f3f941",
    "prId" : 33857,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33857#pullrequestreview-408679176",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f118d952-908b-402e-a644-642260967f92",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this tested / hit at all? (the dtype part)",
        "createdAt" : "2020-05-09T19:31:13Z",
        "updatedAt" : "2020-05-12T19:12:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8dd53864-9008-4af8-9d28-08fbbbc12ec2",
        "parentId" : "f118d952-908b-402e-a644-642260967f92",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The added `test_to_numpy_dataframe_single_block` should cover this line I think",
        "createdAt" : "2020-05-09T19:44:06Z",
        "updatedAt" : "2020-05-12T19:12:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2228bf83bf63370fad463420c06649e80c07b13",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +827,831 @@            arr = np.asarray(self.blocks[0].get_values())\n            if dtype:\n                arr = arr.astype(dtype, copy=False)\n        else:\n            arr = self._interleave(dtype=dtype, na_value=na_value)"
  }
]