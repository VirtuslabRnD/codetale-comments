[
  {
    "id" : "5a81f5c3-ac13-4d44-9fe8-dac37cb71f6a",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-162454603",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "272215b4-98f4-4d39-af5a-410b275e7049",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "again, special casing sparse here, but should probably handle all EAs the same.",
        "createdAt" : "2018-08-13T20:15:46Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f02f4d35-bb4b-44c9-b97e-b01f8032808a",
        "parentId" : "272215b4-98f4-4d39-af5a-410b275e7049",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there a reason you cannot do this?",
        "createdAt" : "2018-09-04T12:36:32Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c6dbd085-922e-46e1-9e7a-cdacfb13442c",
        "parentId" : "272215b4-98f4-4d39-af5a-410b275e7049",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "any answer here?",
        "createdAt" : "2018-10-05T11:19:13Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0d256911-cdb9-4005-9f1e-7a9999afe549",
        "parentId" : "272215b4-98f4-4d39-af5a-410b275e7049",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "https://github.com/pandas-dev/pandas/issues/22791\r\n\r\nIn general, we don't know what the `dtype` should be. We'll need EAs to tell us their \"preferred\" numpy dtype, without having to convert head of time. So it's solvable, we just have to add it to the interface.",
        "createdAt" : "2018-10-08T12:53:27Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +791,795 @@        # TODO: https://github.com/pandas-dev/pandas/issues/22791\n        # Give EAs some input on what happens here. Sparse needs this.\n        if is_sparse(dtype):\n            dtype = dtype.subtype\n        elif is_extension_array_dtype(dtype):"
  },
  {
    "id" : "ee48689c-c421-4d15-809c-b05870ae2720",
    "prId" : 22785,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22785#pullrequestreview-158018410",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d324bc85-13f0-4b91-9cd7-1b9c95e57048",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Do people find this confusing? I can either\r\n\r\n1. duplicate the for loop, using `list.append` for EAs and inserting into `result` for other\r\n2. use lists everywhere\r\n3. use this\r\n\r\nI chose this implementation because I assume it's slightly for wide dataframes with a numpy type, compared to building a list an then `np.asarray(result)` at the end.",
        "createdAt" : "2018-09-20T16:28:50Z",
        "updatedAt" : "2018-09-26T11:39:43Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b1d70e6c-99ca-4a11-ac79-a65681ad7ba0",
        "parentId" : "d324bc85-13f0-4b91-9cd7-1b9c95e57048",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This implementation looks good to me",
        "createdAt" : "2018-09-24T09:00:51Z",
        "updatedAt" : "2018-09-26T11:39:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "78dd81e7c74345c1525b2ea7a623415a6c602f87",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +913,917 @@        if is_extension_array_dtype(dtype):\n            # we'll eventually construct an ExtensionArray.\n            result = np.empty(n, dtype=object)\n        else:\n            result = np.empty(n, dtype=dtype)"
  },
  {
    "id" : "982d70b3-b95d-41fb-8774-9300b1b070ee",
    "prId" : 22785,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22785#pullrequestreview-158018410",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef58735c-006b-4641-9d5b-d3219990d1be",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this gauaranteed to be 1d at this point?",
        "createdAt" : "2018-09-23T12:29:08Z",
        "updatedAt" : "2018-09-26T11:39:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "917888d4-a298-454d-8f43-2fe25347ae90",
        "parentId" : "ef58735c-006b-4641-9d5b-d3219990d1be",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`result`  is created a few lines above with `np.empty(n, dtype=object)`, so I assume yes",
        "createdAt" : "2018-09-24T09:01:31Z",
        "updatedAt" : "2018-09-26T11:39:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "78dd81e7c74345c1525b2ea7a623415a6c602f87",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +924,928 @@\n        if is_extension_array_dtype(dtype):\n            result = dtype.construct_array_type()._from_sequence(\n                result, dtype=dtype\n            )"
  },
  {
    "id" : "edb98231-8e00-47fd-ad3a-c2fe0009d7eb",
    "prId" : 23796,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23796#pullrequestreview-176507578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79c3d775-e822-4a6e-a8de-8b8491241d6b",
        "parentId" : null,
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "No code changed here, just the comment",
        "createdAt" : "2018-11-19T21:36:07Z",
        "updatedAt" : "2018-11-25T13:01:37Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce5bd94125310571c6ca9cfa3ab4aed31b49dcde",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +1156,1160 @@\n        if loc == self._blklocs.shape[0]:\n            # np.append is a lot faster, let's use it if we can.\n            self._blklocs = np.append(self._blklocs, 0)\n            self._blknos = np.append(self._blknos, len(self.blocks))"
  },
  {
    "id" : "fd9e510d-f16a-4b03-b8ab-36a8b4f70cc7",
    "prId" : 23796,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23796#pullrequestreview-177355873",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "119750f7-d35d-49d4-baae-81a34d5ae260",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is this used often?  worth keeping as a standalone function vs inlining?",
        "createdAt" : "2018-11-19T21:52:27Z",
        "updatedAt" : "2018-11-25T13:01:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "60e84b92-3da0-401b-b673-84c96e554c58",
        "parentId" : "119750f7-d35d-49d4-baae-81a34d5ae260",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Got no strong opinion on that.",
        "createdAt" : "2018-11-19T21:55:05Z",
        "updatedAt" : "2018-11-25T13:01:37Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "151c44a9-faf2-4821-9b3e-a0c7ce3c8a84",
        "parentId" : "119750f7-d35d-49d4-baae-81a34d5ae260",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "its called twice as an operand for a loop, so ok to keep",
        "createdAt" : "2018-11-21T17:30:02Z",
        "updatedAt" : "2018-11-25T13:01:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce5bd94125310571c6ca9cfa3ab4aed31b49dcde",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +1982,1986 @@    counts = np.bincount(arr.astype(np.int_))\n    nz = counts.nonzero()[0]\n    return np.c_[nz, counts[nz]]\n\n"
  },
  {
    "id" : "e441a761-68d3-4b2b-83b0-e928f1b864ec",
    "prId" : 24597,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24597#pullrequestreview-189198306",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51f4a614-5914-4ce3-96c0-68d2e52b1621",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i don't think this adds anything to make it a function",
        "createdAt" : "2019-01-03T21:54:11Z",
        "updatedAt" : "2019-01-03T22:03:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "11af1ddd1f204208cc6f0290a6329647cec92e92",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +429,433 @@            self._consolidate_inplace()\n\n        def get_axe(block, qs, axes):\n            from pandas import Float64Index\n            if is_list_like(qs):"
  },
  {
    "id" : "008de78b-53a5-425d-a8af-b7b121567277",
    "prId" : 24597,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24597#pullrequestreview-189202725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cf3bfcc-8aa6-4a49-9e59-d28f360639a1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "also doesn't need / take the bock arg",
        "createdAt" : "2019-01-03T21:54:26Z",
        "updatedAt" : "2019-01-03T22:03:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2648d096-1596-44cb-a8b1-8e632a898a0c",
        "parentId" : "6cf3bfcc-8aa6-4a49-9e59-d28f360639a1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "it uses the block arg",
        "createdAt" : "2019-01-03T22:02:06Z",
        "updatedAt" : "2019-01-03T22:03:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b798a1f8-7f58-4537-b9bd-66e9aeb33499",
        "parentId" : "6cf3bfcc-8aa6-4a49-9e59-d28f360639a1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no i mean get_axe doens't",
        "createdAt" : "2019-01-03T22:03:13Z",
        "updatedAt" : "2019-01-03T22:03:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8708ced5-d5a8-4684-ad2e-fb6bccfe179b",
        "parentId" : "6cf3bfcc-8aa6-4a49-9e59-d28f360639a1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "(which is why it is a function instead of just done once outside the loop).\r\n\r\nI'd rather keep it as a function than in-line it, but not a deal-breaker.  There is another PR after this that will be ripping out a bunch of code regardless.",
        "createdAt" : "2019-01-03T22:03:55Z",
        "updatedAt" : "2019-01-03T22:03:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f4ec8b34-ea9e-4868-a9db-741f536fb2a3",
        "parentId" : "6cf3bfcc-8aa6-4a49-9e59-d28f360639a1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> no i mean get_axe doens't\r\n\r\nline 435 inside `get_axe` reads `elif block.ndim == 1:`",
        "createdAt" : "2019-01-03T22:05:04Z",
        "updatedAt" : "2019-01-03T22:05:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "cfcddd61-d235-4e3d-bcea-7d81424f03a0",
        "parentId" : "6cf3bfcc-8aa6-4a49-9e59-d28f360639a1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "grr, ok, i c now",
        "createdAt" : "2019-01-03T22:07:53Z",
        "updatedAt" : "2019-01-03T22:07:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "11af1ddd1f204208cc6f0290a6329647cec92e92",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +443,447 @@            block = b.quantile(axis=axis, qs=qs, interpolation=interpolation)\n\n            axe = get_axe(b, qs, axes=self.axes)\n\n            axes.append(axe)"
  },
  {
    "id" : "16b35afb-aaaa-486e-beb8-3f712c8343a6",
    "prId" : 24819,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24819#pullrequestreview-199581889",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1700d87-9e86-4e63-bf33-c2858adcaf73",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you make a proper doc-string (Parameters / Returns)",
        "createdAt" : "2019-02-04T13:24:31Z",
        "updatedAt" : "2019-02-04T17:16:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "71729b242da04c01856f640194f56a76c77ebf12",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1973,1977 @@\n        def renamer(x, suffix):\n            \"\"\"Rename the left and right indices.\n\n            If there is overlap, and suffix is not None, add"
  },
  {
    "id" : "fd8817a1-0b5f-4719-b59e-6253edd27347",
    "prId" : 25266,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25266#pullrequestreview-208855244",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17061abf-eafe-4791-a326-3fdb120b6c31",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Since we moved from `match` to `search` here can you also updated the function name?",
        "createdAt" : "2019-02-28T00:46:46Z",
        "updatedAt" : "2019-02-28T03:16:38Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "8e23f590-c44e-4923-ae9f-83e4f9e6242b",
        "parentId" : "17061abf-eafe-4791-a326-3fdb120b6c31",
        "authorId" : "123cd713-6b09-4e7b-9f94-f6a5106c6c34",
        "body" : "OK.",
        "createdAt" : "2019-02-28T01:38:08Z",
        "updatedAt" : "2019-02-28T03:16:38Z",
        "lastEditedBy" : "123cd713-6b09-4e7b-9f94-f6a5106c6c34",
        "tags" : [
        ]
      }
    ],
    "commit" : "89e8ae5c332bf420f25ccd3dfd3089f818d67f57",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1900,1904 @@def _compare_or_regex_search(a, b, regex=False):\n    \"\"\"\n    Compare two array_like inputs of the same shape or two scalar values\n\n    Calls operator.eq or re.search, depending on regex argument. If regex is"
  },
  {
    "id" : "34894460-b186-4ec9-b557-1989b8e67a2c",
    "prId" : 26888,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26888#pullrequestreview-251702277",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8dcfa09f-dbb4-4267-b231-ef0b15bc97e3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "really? when is this an actual Index?",
        "createdAt" : "2019-06-17T11:37:30Z",
        "updatedAt" : "2019-06-17T11:38:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "eb43cda7-a884-4abf-8707-e4add43348c6",
        "parentId" : "8dcfa09f-dbb4-4267-b231-ef0b15bc97e3",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Yes, it can be either. For example, when printing a DataFrame, it is supplied either a index or a list of a single index in various stages of the printing operation.",
        "createdAt" : "2019-06-17T15:29:04Z",
        "updatedAt" : "2019-06-17T20:14:08Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "c5bc8a19-bc9a-4d4b-82ee-358449a4325b",
        "parentId" : "8dcfa09f-dbb4-4267-b231-ef0b15bc97e3",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "It would probably be more consistent that it'd pick one of the two options. I'd prefer ``axis: Index``, given that this is named ``axis`` (vs. ``axes`` for ``BlockManager.__init__``).",
        "createdAt" : "2019-06-17T20:15:56Z",
        "updatedAt" : "2019-06-17T20:15:56Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "8ad2f23f-e75d-47b6-b0d0-dc353f578dbe",
        "parentId" : "8dcfa09f-dbb4-4267-b231-ef0b15bc97e3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right, I think this was for consistency with a BlockManger where you have 2 axes; ok with changing this (followup PR); not sure how much this would take to make consistent.",
        "createdAt" : "2019-06-19T00:18:41Z",
        "updatedAt" : "2019-06-19T00:18:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ead49f98-6d87-4aa9-bec9-d9160c065c4e",
        "parentId" : "8dcfa09f-dbb4-4267-b231-ef0b15bc97e3",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "I think it was for consistency with Panel and 4dPandel etc, which isn`t relevant anymore. I`ll look into changing it.",
        "createdAt" : "2019-06-19T13:34:50Z",
        "updatedAt" : "2019-06-19T13:34:50Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "974b28db59db7c43c810bcd29114c60129b88744",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +1421,1425 @@    def __init__(self,\n                 block: Block,\n                 axis: Union[Index, List[Index]],\n                 do_integrity_check: bool = False,\n                 fastpath: bool = False):"
  },
  {
    "id" : "841a582b-ca91-4183-a472-35e49fde0b20",
    "prId" : 26888,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26888#pullrequestreview-250459957",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98bd3b4a-c6d6-45e1-9653-42911c3cf77b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we not use the assignment form of this? e.g.\r\n```self.blocks: Tuple[Block, ...] = .....```",
        "createdAt" : "2019-06-17T11:37:58Z",
        "updatedAt" : "2019-06-17T11:38:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ddd02508-fa8d-427b-96e4-4bee342b9a71",
        "parentId" : "98bd3b4a-c6d6-45e1-9653-42911c3cf77b",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Unfortunately not until Py36 (only valid in function signature in Py35)",
        "createdAt" : "2019-06-17T12:21:51Z",
        "updatedAt" : "2019-06-17T12:21:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "974b28db59db7c43c810bcd29114c60129b88744",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +101,105 @@                 do_integrity_check: bool = True):\n        self.axes = [ensure_index(ax) for ax in axes]\n        self.blocks = tuple(blocks)  # type: Tuple[Block, ...]\n\n        for block in blocks:"
  },
  {
    "id" : "0b98ec59-bf75-4451-8b48-d9c30d991311",
    "prId" : 29657,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29657#pullrequestreview-317989607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "080561ec-d961-4b6a-a046-d8f7854929ff",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you update the comment (switch the orderings)",
        "createdAt" : "2019-11-16T21:25:47Z",
        "updatedAt" : "2019-11-18T19:00:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7087b6d092f259a1748872a62050110f3379f65",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1400,1404 @@        # the iteration order\n        def canonicalize(block):\n            return (block.mgr_locs.as_array.tolist(), block.dtype.name)\n\n        self_blocks = sorted(self.blocks, key=canonicalize)"
  },
  {
    "id" : "c4a95b0c-f204-4ac6-88f7-35126172732b",
    "prId" : 29853,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29853#pullrequestreview-336814470",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38c63a98-0fab-42b3-9823-709d71448d9e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this strictly necessary? meaning happy to require only callables here (would require some changing)",
        "createdAt" : "2019-12-24T14:32:27Z",
        "updatedAt" : "2019-12-27T16:35:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "17d26019-e4e8-49cc-a723-989fc2b7ff22",
        "parentId" : "38c63a98-0fab-42b3-9823-709d71448d9e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "all of our existing usages pass strings here to get at Block methods.  i think @WillAyd had a suggestion about re-working Block.apply to do str vs callable handling there; that should be its own PR",
        "createdAt" : "2019-12-24T17:19:08Z",
        "updatedAt" : "2019-12-27T16:35:31Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "12e85dcb-7622-4493-bbcf-17f50c54fd97",
        "parentId" : "38c63a98-0fab-42b3-9823-709d71448d9e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k, yeah this whole section could use some TLC",
        "createdAt" : "2019-12-27T16:25:34Z",
        "updatedAt" : "2019-12-27T16:35:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf94d1305e9e803dbea4bafe891b918b1b07844b",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +412,416 @@                    kwargs[k] = obj.reindex(b_items, axis=axis, copy=align_copy)\n\n            if callable(f):\n                applied = b.apply(f, **kwargs)\n            else:"
  }
]