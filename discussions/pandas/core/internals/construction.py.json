[
  {
    "id" : "c22203fc-f233-461b-9a16-e85523c579dd",
    "prId" : 24100,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24100#pullrequestreview-181738386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3502c8f-0927-42b1-af6c-51061b7f68a2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "space before BlockManager",
        "createdAt" : "2018-12-05T12:51:40Z",
        "updatedAt" : "2018-12-05T12:55:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f0e7f4265890f7a0f9251857760fef2d0e53806",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1,5 @@\"\"\"\nFunctions for preparing various inputs passed to the DataFrame or Series\nconstructors before passing them to aBlockManager.\n\"\"\"\nfrom collections import OrderedDict"
  },
  {
    "id" : "94a42d98-7611-4eaf-a866-6857ce7fc8db",
    "prId" : 24227,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24227#pullrequestreview-188127314",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e655ab9-090d-4280-843a-2e480b649e98",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see my comment above, this is peering into an internal api",
        "createdAt" : "2018-12-27T16:33:52Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f50a57a7468068e191f23683283d55857d9729",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +582,586 @@            # We don't want to let people put our PandasArray wrapper\n            # (the output of Series/Index.array), into a Series. So\n            # we explicitly unwrap it here.\n            subarr = data.to_numpy()\n        else:"
  },
  {
    "id" : "1a16fc91-b2a8-400d-b48b-cb408359ce41",
    "prId" : 24541,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24541#pullrequestreview-188828573",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "023b1f36-130a-4a00-bbf7-cccb15fd9b8d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I had to change this becuase ``is_integer_dtype`` picks up nullable-integer types, I think it was just buggy before.",
        "createdAt" : "2019-01-02T01:06:01Z",
        "updatedAt" : "2019-01-04T12:11:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e0b79875-74e0-406e-ba80-0759ce0d34d2",
        "parentId" : "023b1f36-130a-4a00-bbf7-cccb15fd9b8d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "does this need a IntNA test then?",
        "createdAt" : "2019-01-02T14:31:09Z",
        "updatedAt" : "2019-01-04T12:11:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "6e75bd54-17c2-4079-a3fa-469c40dedc82",
        "parentId" : "023b1f36-130a-4a00-bbf7-cccb15fd9b8d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think this is my only unresolved comment.",
        "createdAt" : "2019-01-02T21:05:46Z",
        "updatedAt" : "2019-01-04T12:11:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d4bd5e22051c8dedc42ec1ac6156f3449f09948",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +560,564 @@\n            # possibility of nan -> garbage\n            if is_float_dtype(data.dtype) and is_integer_dtype(dtype):\n                try:\n                    subarr = _try_cast(data, True, dtype, copy,"
  },
  {
    "id" : "c135e3f9-fb85-4a40-80ea-2df6d636c077",
    "prId" : 26825,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26825#pullrequestreview-249565472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08bc4052-1e00-415c-8ca4-def39694c706",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is much more messy, can we change something else to make this nicer?",
        "createdAt" : "2019-06-13T14:33:50Z",
        "updatedAt" : "2019-06-26T14:35:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fb21baf7-b96a-4b02-9bc1-fb0825438865",
        "parentId" : "08bc4052-1e00-415c-8ca4-def39694c706",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not really.  I'm looking into the other places where maybe_infer_to_datetimelike is used to see if some of this can go into that.  We could separate this whole block into a dedicated function.  But one way or another we need to bite the bullet.",
        "createdAt" : "2019-06-13T14:45:57Z",
        "updatedAt" : "2019-06-26T14:35:45Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "51779553-bc3a-4f61-9527-2b3e66dab362",
        "parentId" : "08bc4052-1e00-415c-8ca4-def39694c706",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so the inside of list loop should be in pandas.core.dtypes.cast, no? (obviously up until you make the blocks themselves)",
        "createdAt" : "2019-06-13T19:26:57Z",
        "updatedAt" : "2019-06-26T14:35:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fc8d767d-0a33-420f-b24f-b531446eb0c1",
        "parentId" : "08bc4052-1e00-415c-8ca4-def39694c706",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'd like to leave this for the next pass when I'm taking a more systematic look at maybe_infer_to_datetimelike",
        "createdAt" : "2019-06-13T19:42:36Z",
        "updatedAt" : "2019-06-26T14:35:45Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b2372eba29c0ffdf87ad8eec0992ccd0424e514",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +161,165 @@    if dtype is None and is_object_dtype(values):\n\n        if values.ndim == 2 and values.shape[0] != 1:\n            # transpose and separate blocks\n"
  },
  {
    "id" : "ee002176-93fc-467f-b269-0019a2593a10",
    "prId" : 26825,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26825#pullrequestreview-252610680",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b06df8b0-bede-4813-a6e3-cdb9607c4e92",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pls reuse the block creation routines below",
        "createdAt" : "2019-06-17T11:59:44Z",
        "updatedAt" : "2019-06-26T14:35:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cb77e04d-cfe4-4291-9cc8-c01c7dc468fd",
        "parentId" : "b06df8b0-bede-4813-a6e3-cdb9607c4e92",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "attempts so far have broken everything.  do you have a particular routine in mind?",
        "createdAt" : "2019-06-17T21:03:54Z",
        "updatedAt" : "2019-06-26T14:35:45Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "75ea6c35-f12b-4452-b8e0-8ddb8d7745a9",
        "parentId" : "b06df8b0-bede-4813-a6e3-cdb9607c4e92",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what I mean is you can remove the create_block_manager_from_blocks and let it fall thru to 184 with I think a very small change, e.g.\r\n\r\n```\r\n\r\nif .....\r\n     blocks = bvals\r\nelse:\r\n     dvals = .......\r\n      blocks = [dvals]\r\n```\r\n\r\nof course pls use a longer name than dvals",
        "createdAt" : "2019-06-21T01:55:46Z",
        "updatedAt" : "2019-06-26T14:35:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b2372eba29c0ffdf87ad8eec0992ccd0424e514",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +171,175 @@            from pandas.core.internals.blocks import make_block\n\n            # TODO: What about re-joining object columns?\n            block_values = [make_block(dvals_list[n], placement=[n])\n                            for n in range(len(dvals_list))]"
  },
  {
    "id" : "566078b4-77b5-433a-985d-0c5c6efb0658",
    "prId" : 26848,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26848#pullrequestreview-249846985",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6482756-c831-423b-9506-035c216a468c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we donâ€™t raise like this instead convert to object by not here this is way too specific ",
        "createdAt" : "2019-06-14T10:25:22Z",
        "updatedAt" : "2019-06-21T06:16:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a86ea3e2-d2a6-4161-80fb-6af47be53c90",
        "parentId" : "d6482756-c831-423b-9506-035c216a468c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Did you read the text in the PR body above? Please respond with a bit longer and less cryptic sentence. \r\n\r\nLet's first discuss desired semantics before code details.",
        "createdAt" : "2019-06-14T10:31:53Z",
        "updatedAt" : "2019-06-21T06:16:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "fead5292-073d-4494-9cee-88111ecf35dd",
        "parentId" : "d6482756-c831-423b-9506-035c216a468c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "series always work; thus they need to coerce to object\r\nIndex can raise but only when the type is out of founds for it and dtype is specified); meaning floats to an Index or OOB datetimes to a DTI\r\n\r\nnot sure how this is inconsistent\r\n\r\nfurther you put up code so it is fair game otherwise close this and discuss in an issue. your code is simply doing the wrong thing as i pointed.\r\n\r\n",
        "createdAt" : "2019-06-14T11:03:10Z",
        "updatedAt" : "2019-06-21T06:16:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "eac2fa78-5994-4ad7-a090-6a7dde9e9f6b",
        "parentId" : "d6482756-c831-423b-9506-035c216a468c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> further you put up code so it is fair game otherwise close this and discuss in an issue. your code is simply doing the wrong thing as i pointed.\r\n\r\nTo ask exactly this question: should we catch the error and raise, or not",
        "createdAt" : "2019-06-14T11:10:37Z",
        "updatedAt" : "2019-06-21T06:16:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "3c79c6bc-b192-4347-a52f-7bf6f9c10cb8",
        "parentId" : "d6482756-c831-423b-9506-035c216a468c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Jeff, to be clear, you have all rights to be comment on the code, since I put up a PR. I was just a bit annoyed by your first response at first because I found it hard to interpret (sometimes full sentences can make that easier .. :)) and ignoring my questions. ",
        "createdAt" : "2019-06-14T11:21:01Z",
        "updatedAt" : "2019-06-21T06:16:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "369eeadce0a8c8539aa937e19002901cc98091f7",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +701,705 @@            subarr = construct_1d_ndarray_preserving_na(subarr, dtype,\n                                                        copy=copy)\n    except OutOfBoundsDatetime:\n        # in case of out of bound datetime64 -> always raise\n        raise"
  },
  {
    "id" : "4c6812d2-e594-407c-b2c9-602f8a2c3d00",
    "prId" : 26875,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26875#pullrequestreview-250238227",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd0e19e7-de4c-4129-a27d-324c57280204",
        "parentId" : null,
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Just set ``sort=False`` instead? Also, I don`t get why OrderedDict is special: a regular dict is also ordered from python 3.6.",
        "createdAt" : "2019-06-16T08:29:47Z",
        "updatedAt" : "2019-07-07T20:36:43Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "ebb68992-9349-44c3-ad44-c5340595b98a",
        "parentId" : "fd0e19e7-de4c-4129-a27d-324c57280204",
        "authorId" : "d0ad0002-8117-42aa-bdbc-e6940159f986",
        "body" : "Thank you for reviewing. I agree with you (a dict is also ordered). \r\nI implemented this way according to [this comment](https://github.com/pandas-dev/pandas/issues/8425#issuecomment-57616916). But now I understand that we don't need to differentiate between a dict and an OrderedDict anymore. I'll fix my codes.",
        "createdAt" : "2019-06-16T14:03:25Z",
        "updatedAt" : "2019-07-07T20:36:43Z",
        "lastEditedBy" : "d0ad0002-8117-42aa-bdbc-e6940159f986",
        "tags" : [
        ]
      },
      {
        "id" : "2d77be72-7b1f-4654-aab5-60dfea4666e9",
        "parentId" : "fd0e19e7-de4c-4129-a27d-324c57280204",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah that comment is pretty old\r\nthe sort parameter was recently added",
        "createdAt" : "2019-06-16T14:15:22Z",
        "updatedAt" : "2019-07-07T20:36:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "28cc5f41-6ca7-4183-967e-16124921a65f",
        "parentId" : "fd0e19e7-de4c-4129-a27d-324c57280204",
        "authorId" : "d0ad0002-8117-42aa-bdbc-e6940159f986",
        "body" : "@jreback, thank you. ",
        "createdAt" : "2019-06-16T15:42:35Z",
        "updatedAt" : "2019-07-07T20:36:43Z",
        "lastEditedBy" : "d0ad0002-8117-42aa-bdbc-e6940159f986",
        "tags" : [
        ]
      }
    ],
    "commit" : "74966cb7552549064d0151dcfdd2024fc47e652a",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +349,353 @@                have_dicts = True\n                if isinstance(val, OrderedDict):\n                    have_ordered = True\n                indexes.append(list(val.keys()))\n            elif is_list_like(val) and getattr(val, \"ndim\", 1) == 1:"
  },
  {
    "id" : "b304908d-d9be-4eca-8e3e-8f5964bae4a1",
    "prId" : 26979,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26979#pullrequestreview-252794505",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c44caeb4-f95f-4311-8f5b-9447039615db",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "future cleanup is to remove this *and* condition (as I *think* _try_cast already handles this)",
        "createdAt" : "2019-06-21T12:25:33Z",
        "updatedAt" : "2019-06-27T22:35:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "634c8205bf6dbc2f4bf4eacf7ec28796f527b6b8",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +578,582 @@\n        if (dtype is not None\n                and is_float_dtype(data.dtype) and is_integer_dtype(dtype)):\n            # possibility of nan -> garbage\n            try:"
  },
  {
    "id" : "3db669fd-5043-45e6-bee5-0d97852f1c79",
    "prId" : 26979,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26979#pullrequestreview-254978884",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3bc7f94-7cc0-4c0c-9437-d6ba1c3b969b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add types here?",
        "createdAt" : "2019-06-21T15:26:49Z",
        "updatedAt" : "2019-06-27T22:35:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c285a3d5-e2df-440b-aa1e-a6d8afc5a7a1",
        "parentId" : "e3bc7f94-7cc0-4c0c-9437-d6ba1c3b969b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Nice removing the fast path arg!",
        "createdAt" : "2019-06-22T17:12:00Z",
        "updatedAt" : "2019-06-27T22:35:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8452c439-e0be-4ae1-adb1-fc3b263a994b",
        "parentId" : "e3bc7f94-7cc0-4c0c-9437-d6ba1c3b969b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jorisvandenbossche can you add types here?",
        "createdAt" : "2019-06-27T03:05:43Z",
        "updatedAt" : "2019-06-27T22:35:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "634c8205bf6dbc2f4bf4eacf7ec28796f527b6b8",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +680,684 @@\n\ndef _try_cast(arr, dtype, copy, raise_cast_failure):\n    \"\"\"\n    Convert input to numpy ndarray and optionally cast to a given dtype."
  },
  {
    "id" : "85f51efe-38a9-45cd-ae52-f70cfb49b1ad",
    "prId" : 26979,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26979#pullrequestreview-253101722",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a419d787-5f10-4663-8914-0b9c451dbd91",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Could we have EA here? If so, deep=True?",
        "createdAt" : "2019-06-22T17:10:45Z",
        "updatedAt" : "2019-06-27T22:35:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "634c8205bf6dbc2f4bf4eacf7ec28796f527b6b8",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +598,602 @@            subarr = subarr.astype(dtype, copy=copy)\n        elif copy:\n            subarr = subarr.copy()\n        return subarr\n"
  },
  {
    "id" : "56406f24-1ba6-451e-899a-f0b934fa927f",
    "prId" : 26979,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26979#pullrequestreview-253101786",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15115b48-844b-4a1a-baeb-95e5f28a0352",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Any restriction on ndim?  Some of these functions are only called via the dataframe constructor.",
        "createdAt" : "2019-06-22T17:12:51Z",
        "updatedAt" : "2019-06-27T22:35:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "634c8205bf6dbc2f4bf4eacf7ec28796f527b6b8",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +686,690 @@    Parameters\n    ----------\n    arr : array-like\n    dtype : np.dtype, ExtensionDtype or None\n    copy : bool"
  }
]