[
  {
    "id" : "c22203fc-f233-461b-9a16-e85523c579dd",
    "prId" : 24100,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24100#pullrequestreview-181738386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3502c8f-0927-42b1-af6c-51061b7f68a2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "space before BlockManager",
        "createdAt" : "2018-12-05T12:51:40Z",
        "updatedAt" : "2018-12-05T12:55:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f0e7f4265890f7a0f9251857760fef2d0e53806",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1,5 @@\"\"\"\nFunctions for preparing various inputs passed to the DataFrame or Series\nconstructors before passing them to aBlockManager.\n\"\"\"\nfrom collections import OrderedDict"
  },
  {
    "id" : "94a42d98-7611-4eaf-a866-6857ce7fc8db",
    "prId" : 24227,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24227#pullrequestreview-188127314",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e655ab9-090d-4280-843a-2e480b649e98",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see my comment above, this is peering into an internal api",
        "createdAt" : "2018-12-27T16:33:52Z",
        "updatedAt" : "2018-12-28T17:40:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f50a57a7468068e191f23683283d55857d9729",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +582,586 @@            # We don't want to let people put our PandasArray wrapper\n            # (the output of Series/Index.array), into a Series. So\n            # we explicitly unwrap it here.\n            subarr = data.to_numpy()\n        else:"
  },
  {
    "id" : "1a16fc91-b2a8-400d-b48b-cb408359ce41",
    "prId" : 24541,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24541#pullrequestreview-188828573",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "023b1f36-130a-4a00-bbf7-cccb15fd9b8d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I had to change this becuase ``is_integer_dtype`` picks up nullable-integer types, I think it was just buggy before.",
        "createdAt" : "2019-01-02T01:06:01Z",
        "updatedAt" : "2019-01-04T12:11:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e0b79875-74e0-406e-ba80-0759ce0d34d2",
        "parentId" : "023b1f36-130a-4a00-bbf7-cccb15fd9b8d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "does this need a IntNA test then?",
        "createdAt" : "2019-01-02T14:31:09Z",
        "updatedAt" : "2019-01-04T12:11:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "6e75bd54-17c2-4079-a3fa-469c40dedc82",
        "parentId" : "023b1f36-130a-4a00-bbf7-cccb15fd9b8d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think this is my only unresolved comment.",
        "createdAt" : "2019-01-02T21:05:46Z",
        "updatedAt" : "2019-01-04T12:11:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d4bd5e22051c8dedc42ec1ac6156f3449f09948",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +560,564 @@\n            # possibility of nan -> garbage\n            if is_float_dtype(data.dtype) and is_integer_dtype(dtype):\n                try:\n                    subarr = _try_cast(data, True, dtype, copy,"
  },
  {
    "id" : "c135e3f9-fb85-4a40-80ea-2df6d636c077",
    "prId" : 26825,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26825#pullrequestreview-249565472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08bc4052-1e00-415c-8ca4-def39694c706",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is much more messy, can we change something else to make this nicer?",
        "createdAt" : "2019-06-13T14:33:50Z",
        "updatedAt" : "2019-06-26T14:35:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fb21baf7-b96a-4b02-9bc1-fb0825438865",
        "parentId" : "08bc4052-1e00-415c-8ca4-def39694c706",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not really.  I'm looking into the other places where maybe_infer_to_datetimelike is used to see if some of this can go into that.  We could separate this whole block into a dedicated function.  But one way or another we need to bite the bullet.",
        "createdAt" : "2019-06-13T14:45:57Z",
        "updatedAt" : "2019-06-26T14:35:45Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "51779553-bc3a-4f61-9527-2b3e66dab362",
        "parentId" : "08bc4052-1e00-415c-8ca4-def39694c706",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so the inside of list loop should be in pandas.core.dtypes.cast, no? (obviously up until you make the blocks themselves)",
        "createdAt" : "2019-06-13T19:26:57Z",
        "updatedAt" : "2019-06-26T14:35:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fc8d767d-0a33-420f-b24f-b531446eb0c1",
        "parentId" : "08bc4052-1e00-415c-8ca4-def39694c706",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'd like to leave this for the next pass when I'm taking a more systematic look at maybe_infer_to_datetimelike",
        "createdAt" : "2019-06-13T19:42:36Z",
        "updatedAt" : "2019-06-26T14:35:45Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b2372eba29c0ffdf87ad8eec0992ccd0424e514",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +161,165 @@    if dtype is None and is_object_dtype(values):\n\n        if values.ndim == 2 and values.shape[0] != 1:\n            # transpose and separate blocks\n"
  },
  {
    "id" : "ee002176-93fc-467f-b269-0019a2593a10",
    "prId" : 26825,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26825#pullrequestreview-252610680",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b06df8b0-bede-4813-a6e3-cdb9607c4e92",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pls reuse the block creation routines below",
        "createdAt" : "2019-06-17T11:59:44Z",
        "updatedAt" : "2019-06-26T14:35:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cb77e04d-cfe4-4291-9cc8-c01c7dc468fd",
        "parentId" : "b06df8b0-bede-4813-a6e3-cdb9607c4e92",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "attempts so far have broken everything.  do you have a particular routine in mind?",
        "createdAt" : "2019-06-17T21:03:54Z",
        "updatedAt" : "2019-06-26T14:35:45Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "75ea6c35-f12b-4452-b8e0-8ddb8d7745a9",
        "parentId" : "b06df8b0-bede-4813-a6e3-cdb9607c4e92",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what I mean is you can remove the create_block_manager_from_blocks and let it fall thru to 184 with I think a very small change, e.g.\r\n\r\n```\r\n\r\nif .....\r\n     blocks = bvals\r\nelse:\r\n     dvals = .......\r\n      blocks = [dvals]\r\n```\r\n\r\nof course pls use a longer name than dvals",
        "createdAt" : "2019-06-21T01:55:46Z",
        "updatedAt" : "2019-06-26T14:35:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b2372eba29c0ffdf87ad8eec0992ccd0424e514",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +171,175 @@            from pandas.core.internals.blocks import make_block\n\n            # TODO: What about re-joining object columns?\n            block_values = [make_block(dvals_list[n], placement=[n])\n                            for n in range(len(dvals_list))]"
  },
  {
    "id" : "566078b4-77b5-433a-985d-0c5c6efb0658",
    "prId" : 26848,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26848#pullrequestreview-249846985",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6482756-c831-423b-9506-035c216a468c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we donâ€™t raise like this instead convert to object by not here this is way too specific ",
        "createdAt" : "2019-06-14T10:25:22Z",
        "updatedAt" : "2019-06-21T06:16:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a86ea3e2-d2a6-4161-80fb-6af47be53c90",
        "parentId" : "d6482756-c831-423b-9506-035c216a468c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Did you read the text in the PR body above? Please respond with a bit longer and less cryptic sentence. \r\n\r\nLet's first discuss desired semantics before code details.",
        "createdAt" : "2019-06-14T10:31:53Z",
        "updatedAt" : "2019-06-21T06:16:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "fead5292-073d-4494-9cee-88111ecf35dd",
        "parentId" : "d6482756-c831-423b-9506-035c216a468c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "series always work; thus they need to coerce to object\r\nIndex can raise but only when the type is out of founds for it and dtype is specified); meaning floats to an Index or OOB datetimes to a DTI\r\n\r\nnot sure how this is inconsistent\r\n\r\nfurther you put up code so it is fair game otherwise close this and discuss in an issue. your code is simply doing the wrong thing as i pointed.\r\n\r\n",
        "createdAt" : "2019-06-14T11:03:10Z",
        "updatedAt" : "2019-06-21T06:16:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "eac2fa78-5994-4ad7-a090-6a7dde9e9f6b",
        "parentId" : "d6482756-c831-423b-9506-035c216a468c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> further you put up code so it is fair game otherwise close this and discuss in an issue. your code is simply doing the wrong thing as i pointed.\r\n\r\nTo ask exactly this question: should we catch the error and raise, or not",
        "createdAt" : "2019-06-14T11:10:37Z",
        "updatedAt" : "2019-06-21T06:16:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "3c79c6bc-b192-4347-a52f-7bf6f9c10cb8",
        "parentId" : "d6482756-c831-423b-9506-035c216a468c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Jeff, to be clear, you have all rights to be comment on the code, since I put up a PR. I was just a bit annoyed by your first response at first because I found it hard to interpret (sometimes full sentences can make that easier .. :)) and ignoring my questions. ",
        "createdAt" : "2019-06-14T11:21:01Z",
        "updatedAt" : "2019-06-21T06:16:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "369eeadce0a8c8539aa937e19002901cc98091f7",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +701,705 @@            subarr = construct_1d_ndarray_preserving_na(subarr, dtype,\n                                                        copy=copy)\n    except OutOfBoundsDatetime:\n        # in case of out of bound datetime64 -> always raise\n        raise"
  },
  {
    "id" : "4c6812d2-e594-407c-b2c9-602f8a2c3d00",
    "prId" : 26875,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26875#pullrequestreview-250238227",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd0e19e7-de4c-4129-a27d-324c57280204",
        "parentId" : null,
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Just set ``sort=False`` instead? Also, I don`t get why OrderedDict is special: a regular dict is also ordered from python 3.6.",
        "createdAt" : "2019-06-16T08:29:47Z",
        "updatedAt" : "2019-07-07T20:36:43Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "ebb68992-9349-44c3-ad44-c5340595b98a",
        "parentId" : "fd0e19e7-de4c-4129-a27d-324c57280204",
        "authorId" : "d0ad0002-8117-42aa-bdbc-e6940159f986",
        "body" : "Thank you for reviewing. I agree with you (a dict is also ordered). \r\nI implemented this way according to [this comment](https://github.com/pandas-dev/pandas/issues/8425#issuecomment-57616916). But now I understand that we don't need to differentiate between a dict and an OrderedDict anymore. I'll fix my codes.",
        "createdAt" : "2019-06-16T14:03:25Z",
        "updatedAt" : "2019-07-07T20:36:43Z",
        "lastEditedBy" : "d0ad0002-8117-42aa-bdbc-e6940159f986",
        "tags" : [
        ]
      },
      {
        "id" : "2d77be72-7b1f-4654-aab5-60dfea4666e9",
        "parentId" : "fd0e19e7-de4c-4129-a27d-324c57280204",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah that comment is pretty old\r\nthe sort parameter was recently added",
        "createdAt" : "2019-06-16T14:15:22Z",
        "updatedAt" : "2019-07-07T20:36:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "28cc5f41-6ca7-4183-967e-16124921a65f",
        "parentId" : "fd0e19e7-de4c-4129-a27d-324c57280204",
        "authorId" : "d0ad0002-8117-42aa-bdbc-e6940159f986",
        "body" : "@jreback, thank you. ",
        "createdAt" : "2019-06-16T15:42:35Z",
        "updatedAt" : "2019-07-07T20:36:43Z",
        "lastEditedBy" : "d0ad0002-8117-42aa-bdbc-e6940159f986",
        "tags" : [
        ]
      }
    ],
    "commit" : "74966cb7552549064d0151dcfdd2024fc47e652a",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +349,353 @@                have_dicts = True\n                if isinstance(val, OrderedDict):\n                    have_ordered = True\n                indexes.append(list(val.keys()))\n            elif is_list_like(val) and getattr(val, \"ndim\", 1) == 1:"
  },
  {
    "id" : "b304908d-d9be-4eca-8e3e-8f5964bae4a1",
    "prId" : 26979,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26979#pullrequestreview-252794505",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c44caeb4-f95f-4311-8f5b-9447039615db",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "future cleanup is to remove this *and* condition (as I *think* _try_cast already handles this)",
        "createdAt" : "2019-06-21T12:25:33Z",
        "updatedAt" : "2019-06-27T22:35:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "634c8205bf6dbc2f4bf4eacf7ec28796f527b6b8",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +578,582 @@\n        if (dtype is not None\n                and is_float_dtype(data.dtype) and is_integer_dtype(dtype)):\n            # possibility of nan -> garbage\n            try:"
  },
  {
    "id" : "3db669fd-5043-45e6-bee5-0d97852f1c79",
    "prId" : 26979,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26979#pullrequestreview-254978884",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3bc7f94-7cc0-4c0c-9437-d6ba1c3b969b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add types here?",
        "createdAt" : "2019-06-21T15:26:49Z",
        "updatedAt" : "2019-06-27T22:35:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c285a3d5-e2df-440b-aa1e-a6d8afc5a7a1",
        "parentId" : "e3bc7f94-7cc0-4c0c-9437-d6ba1c3b969b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Nice removing the fast path arg!",
        "createdAt" : "2019-06-22T17:12:00Z",
        "updatedAt" : "2019-06-27T22:35:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8452c439-e0be-4ae1-adb1-fc3b263a994b",
        "parentId" : "e3bc7f94-7cc0-4c0c-9437-d6ba1c3b969b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jorisvandenbossche can you add types here?",
        "createdAt" : "2019-06-27T03:05:43Z",
        "updatedAt" : "2019-06-27T22:35:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "634c8205bf6dbc2f4bf4eacf7ec28796f527b6b8",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +680,684 @@\n\ndef _try_cast(arr, dtype, copy, raise_cast_failure):\n    \"\"\"\n    Convert input to numpy ndarray and optionally cast to a given dtype."
  },
  {
    "id" : "85f51efe-38a9-45cd-ae52-f70cfb49b1ad",
    "prId" : 26979,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26979#pullrequestreview-253101722",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a419d787-5f10-4663-8914-0b9c451dbd91",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Could we have EA here? If so, deep=True?",
        "createdAt" : "2019-06-22T17:10:45Z",
        "updatedAt" : "2019-06-27T22:35:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "634c8205bf6dbc2f4bf4eacf7ec28796f527b6b8",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +598,602 @@            subarr = subarr.astype(dtype, copy=copy)\n        elif copy:\n            subarr = subarr.copy()\n        return subarr\n"
  },
  {
    "id" : "56406f24-1ba6-451e-899a-f0b934fa927f",
    "prId" : 26979,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26979#pullrequestreview-253101786",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15115b48-844b-4a1a-baeb-95e5f28a0352",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Any restriction on ndim?  Some of these functions are only called via the dataframe constructor.",
        "createdAt" : "2019-06-22T17:12:51Z",
        "updatedAt" : "2019-06-27T22:35:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "634c8205bf6dbc2f4bf4eacf7ec28796f527b6b8",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +686,690 @@    Parameters\n    ----------\n    arr : array-like\n    dtype : np.dtype, ExtensionDtype or None\n    copy : bool"
  },
  {
    "id" : "83cf6ec5-2a7e-4c39-90fd-b6944fb61e6f",
    "prId" : 27309,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27309#pullrequestreview-261295004",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43cae581-ad41-492c-a48e-ce1dafd25f0c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a short description of what the guarantees are, here for future readers ",
        "createdAt" : "2019-07-12T14:36:56Z",
        "updatedAt" : "2019-07-16T00:14:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d194f1047984df534382b7a7b66885fe784ae3b",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +558,562 @@    \"\"\"\n    if columns is None:\n        gen = (list(x.keys()) for x in data)\n        types = (dict, OrderedDict) if PY36 else OrderedDict\n        sort = not any(isinstance(d, types) for d in data)"
  },
  {
    "id" : "112dbfce-37a5-4771-b5c5-8a2ce402e17c",
    "prId" : 27309,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27309#pullrequestreview-261792142",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49246290-43c6-4071-8c7b-41ff44d0b9b7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string for the Parameters & Returns, types would be great too",
        "createdAt" : "2019-07-15T12:44:20Z",
        "updatedAt" : "2019-07-16T00:14:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d194f1047984df534382b7a7b66885fe784ae3b",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +539,543 @@    \"\"\"Convert list of dicts to numpy arrays\n\n    if `columns` is not passed, column names are inferred from the records\n    - for OrderedDict and (on Python>=3.6) dicts, the column names match\n      the key insertion-order from the first record to the last."
  },
  {
    "id" : "022922a8-cbf9-4088-8344-e4faf000552a",
    "prId" : 30171,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30171#pullrequestreview-329526767",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e642f5f-8f37-4402-8a23-215e83bebb17",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "It seems like some care is needed here in respect to dtypes.  Specifically if the `range` contains values only supported by `uint64`, or values only supported by Python integers.\r\n\r\nFor example, the following works on `master`:\r\n```python\r\nIn [2]: pd.DataFrame(range(2**63, 2**63 + 4))\r\nOut[2]: \r\n                     0\r\n0  9223372036854775808\r\n1  9223372036854775809\r\n2  9223372036854775810\r\n3  9223372036854775811\r\n\r\nIn [3]: _.dtypes\r\nOut[3]: \r\n0    uint64\r\ndtype: object\r\n\r\nIn [4]: pd.DataFrame(range(2**73, 2**73 + 4))\r\nOut[4]: \r\n                        0\r\n0  9444732965739290427392\r\n1  9444732965739290427393\r\n2  9444732965739290427394\r\n3  9444732965739290427395\r\n\r\nIn [5]: _.dtypes\r\nOut[5]: \r\n0    object\r\ndtype: object\r\n```\r\nBut both fail with the changes in this PR:\r\n```python\r\nIn [2]: pd.DataFrame(range(2**63, 2**63 + 4))\r\n---------------------------------------------------------------------------\r\nOverflowError: Python int too large to convert to C long\r\n\r\nIn [3]: pd.DataFrame(range(2**73, 2**73 + 4))\r\n---------------------------------------------------------------------------\r\nOverflowError: Python int too large to convert to C long\r\n```\r\n\r\nAdmittedly, this is a bit of a corner case.  It also looks like the issue isn't limited to the PR, as the `Series` equivalent of the above fails on `master`.",
        "createdAt" : "2019-12-10T00:29:45Z",
        "updatedAt" : "2019-12-10T14:25:07Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "8c6d33b0-9799-490f-9d4f-66b046b58819",
        "parentId" : "2e642f5f-8f37-4402-8a23-215e83bebb17",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "xref #30173 for the failing `Series` example on `master`; I'd expect that both issues could be solved in a similar way.",
        "createdAt" : "2019-12-10T00:42:22Z",
        "updatedAt" : "2019-12-10T14:25:07Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0a3e94e9a2c97d7983941c399b191693779582b",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +252,256 @@            return np.empty((0, 0), dtype=object)\n        elif isinstance(values, range):\n            arr = np.arange(values.start, values.stop, values.step, dtype=\"int64\")\n            return arr[..., np.newaxis]\n"
  },
  {
    "id" : "96614069-42b1-4a47-a95b-240c359c2daa",
    "prId" : 30284,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30284#pullrequestreview-332860702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "445435ff-fd81-43fb-b171-b4dface9613f",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I'm not super well versed in this area but do you know what was actually throwing the error? Just wondering if there's a more generic fix to be made",
        "createdAt" : "2019-12-16T20:51:49Z",
        "updatedAt" : "2019-12-16T20:51:55Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "946c5bdb-87ad-4beb-9d12-ffd00cd9c1c9",
        "parentId" : "445435ff-fd81-43fb-b171-b4dface9613f",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "This fix is consistent with the handling of Categorical in the preceding condition. ",
        "createdAt" : "2019-12-16T20:57:35Z",
        "updatedAt" : "2019-12-16T20:57:35Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "88170707fd7dca54bd2b0af687f718dee51ae772",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +151,155 @@        index, columns = _get_axes(len(values), 1, index, columns)\n        return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n    elif is_extension_array_dtype(values) or is_extension_array_dtype(dtype):\n        # GH#19157\n        if columns is None:"
  },
  {
    "id" : "f3736f76-5097-4228-ba4d-96873542ebe5",
    "prId" : 30507,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30507#pullrequestreview-336826139",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb7bf625-8b98-4c2a-ad3b-75ae89e1f8db",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Do we only have to do this for the EA-case? Seems a little inefficient to have to do this here - not something that can handled a level deeper?",
        "createdAt" : "2019-12-27T13:44:33Z",
        "updatedAt" : "2020-01-01T03:22:48Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "a96d431b-fd22-455a-a8b2-8a3bef5fe4fb",
        "parentId" : "fb7bf625-8b98-4c2a-ad3b-75ae89e1f8db",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "only for EA since they cant be 2D, correct",
        "createdAt" : "2019-12-27T17:16:43Z",
        "updatedAt" : "2020-01-01T03:22:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e408206450a4289855c0515ee6be31f7836be40f",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +157,161 @@            # GH#12513 a EA dtype passed with a 2D array, split into\n            #  multiple EAs that view the values\n            values = [values[:, n] for n in range(values.shape[1])]\n        else:\n            values = [values]"
  },
  {
    "id" : "3d613ab0-f8f0-4aff-bd77-eb2ac1e6455c",
    "prId" : 30507,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30507#pullrequestreview-336825453",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17f66ce6-3f55-46ba-ab2c-c007d7c697fa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually this is likely duplicating the category checks above",
        "createdAt" : "2019-12-27T14:49:44Z",
        "updatedAt" : "2020-01-01T03:22:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f67f4340-0960-4ad8-afe4-a8b6c22e64e9",
        "parentId" : "17f66ce6-3f55-46ba-ab2c-c007d7c697fa",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "need to handle the copy arg",
        "createdAt" : "2019-12-27T14:49:55Z",
        "updatedAt" : "2020-01-01T03:22:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7cf9dc51-78a8-4885-a0a9-42c7f913446f",
        "parentId" : "17f66ce6-3f55-46ba-ab2c-c007d7c697fa",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> actually this is likely duplicating the category checks above\r\n\r\nYah we can probably do a grep for is_categorical_dtype and find a lot of things to clean up (adding this to my grep list...)\r\n\r\n> need to handle the copy arg\r\n\r\nhow so?  copy is passed to prep_ndarray below, and so far all we've done is take views\r\n",
        "createdAt" : "2019-12-27T17:13:33Z",
        "updatedAt" : "2020-01-01T03:22:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e408206450a4289855c0515ee6be31f7836be40f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +154,158 @@        # GH#19157\n\n        if isinstance(values, np.ndarray) and values.ndim > 1:\n            # GH#12513 a EA dtype passed with a 2D array, split into\n            #  multiple EAs that view the values"
  },
  {
    "id" : "9a17baf0-3552-486e-ab30-eb2dc13cad81",
    "prId" : 32202,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32202#pullrequestreview-369140742",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e27cfd3-7b14-4043-918f-400cf2b9336d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some comments on what this section is about (list-of-lists)",
        "createdAt" : "2020-03-03T03:39:43Z",
        "updatedAt" : "2020-04-06T19:38:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e6d68710-4ceb-4bd8-bcdd-e68099a026ed",
        "parentId" : "0e27cfd3-7b14-4043-918f-400cf2b9336d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would move this whole check to _validate_columns, and remove the columns argument from _convert_object_array (and do it as an independent check before).",
        "createdAt" : "2020-03-03T03:43:09Z",
        "updatedAt" : "2020-04-06T19:38:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a8cc997e-07cb-4d98-80bb-cb5d88d9d9af",
        "parentId" : "0e27cfd3-7b14-4043-918f-400cf2b9336d",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "Nice idea! @jreback \r\nmoving the check out of `_convert_object_array` makes the scope of `_convert_object_array` clearer, and dealing with `columns` and `content` separately seem nicer\r\n\r\nbut if only moving the whole check part out will not be able to remove `columns` argument from `_convert_object_array`, because it also creates column names using length of contetn if `columns` is `None`. So i made a method called `_validate_or_indexify_columns` method (name could be improved if made method clearer ^^), and will do two things: 1. if `columns` is `None`, then indexify it with `default_index`, 2. otherwise, go through the checks.\r\n\r\nWhat do you think of this change, does it make code clearer? @jreback any feedbacks are very welcome!",
        "createdAt" : "2020-03-04T21:36:19Z",
        "updatedAt" : "2020-04-06T19:38:46Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a036e45b6dd8daf524370a00235ca550a75c292",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +655,659 @@\n        # Add mask for data which is composed of list of lists\n        is_mi_list = isinstance(columns, list) and all(\n            isinstance(col, list) for col in columns\n        )"
  },
  {
    "id" : "641a883d-a04b-4f8d-b014-b14d7d925d3f",
    "prId" : 32202,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32202#pullrequestreview-374793908",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92eedee3-6de0-4712-93ca-4936ed793b6c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you type the return values of each of these functions",
        "createdAt" : "2020-03-14T20:26:08Z",
        "updatedAt" : "2020-04-06T19:38:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c0f6007b-1b03-4aea-b889-11a7cb924d8a",
        "parentId" : "92eedee3-6de0-4712-93ca-4936ed793b6c",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "added type for returns for each of these changed functions",
        "createdAt" : "2020-03-15T12:12:51Z",
        "updatedAt" : "2020-04-06T19:38:46Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a036e45b6dd8daf524370a00235ca550a75c292",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +541,545 @@    except AssertionError as e:\n        raise ValueError(e) from e\n    return result, columns\n\n"
  },
  {
    "id" : "4f8f4dcb-583d-4d1a-a815-35a91396e45a",
    "prId" : 33725,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33725#pullrequestreview-398338808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51589664-07af-46cf-87d7-80912153cf27",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "in the absence of type annotations for data, can you add a docstring (one-liner ok as a starter) to help future readers.",
        "createdAt" : "2020-04-22T16:24:36Z",
        "updatedAt" : "2020-04-23T15:55:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "76cbebb30ffba14c6bedc9157450308eeac794bc",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +355,359 @@\n\ndef extract_index(data) -> Index:\n    \"\"\"\n    Try to infer an Index from the passed data, raise ValueError on failure."
  },
  {
    "id" : "b60e6e14-cbc1-4e14-b1c7-d32a883f7655",
    "prId" : 33725,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33725#pullrequestreview-399236960",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e35d7351-3564-49a6-8910-453899ab0ffa",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "would it make sense to change L724 to an isinstance check if the allowed parameter types are restricted.",
        "createdAt" : "2020-04-23T10:59:11Z",
        "updatedAt" : "2020-04-23T15:55:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "e11442ec-f86f-4c58-acd7-049329c71794",
        "parentId" : "e35d7351-3564-49a6-8910-453899ab0ffa",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i dont think so.  we could change the comparison to `dtype != np.dtype(\"O\")`",
        "createdAt" : "2020-04-23T15:49:54Z",
        "updatedAt" : "2020-04-23T15:55:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "76cbebb30ffba14c6bedc9157450308eeac794bc",
    "line" : 197,
    "diffHunk" : "@@ -1,1 +705,709 @@\ndef _convert_object_array(\n    content: List[Scalar], coerce_float: bool = False, dtype: Optional[DtypeObj] = None\n) -> List[Scalar]:\n    \"\"\""
  },
  {
    "id" : "fdc26d0a-77a9-4ac3-b292-a8ddc05ba7c5",
    "prId" : 33725,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33725#pullrequestreview-399350501",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75509b6d-71e7-4351-a5f9-2b52a20f07ef",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "in this PR we have np.dtype(object), np.dtype(\"object\") and  np.dtype(np.object_). \r\nwe should have a preference and be consistent.\r\nmaybe np.dtype(\"O\") to be consistent with the repr.",
        "createdAt" : "2020-04-23T11:21:48Z",
        "updatedAt" : "2020-04-23T15:55:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "f055614f-7977-42ed-b9f8-da6817792077",
        "parentId" : "75509b6d-71e7-4351-a5f9-2b52a20f07ef",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "let's try to address this separately",
        "createdAt" : "2020-04-23T15:53:44Z",
        "updatedAt" : "2020-04-23T15:55:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "94d98ed1-f117-4511-aa8a-dd6f81147880",
        "parentId" : "75509b6d-71e7-4351-a5f9-2b52a20f07ef",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "sgtm",
        "createdAt" : "2020-04-23T18:06:20Z",
        "updatedAt" : "2020-04-23T18:06:21Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "76cbebb30ffba14c6bedc9157450308eeac794bc",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +260,264 @@            if dtype is None or np.issubdtype(dtype, np.flexible):\n                # GH#1783\n                nan_dtype = np.dtype(object)\n            else:\n                nan_dtype = dtype"
  },
  {
    "id" : "de826b42-754f-4351-b400-e45b56b13b0c",
    "prId" : 38400,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38400#pullrequestreview-550634621",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0d6ec62-3130-4cd6-a302-d7919e077a35",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can prob add a type for the returns here (internal & local to construction.py)",
        "createdAt" : "2020-12-11T23:07:59Z",
        "updatedAt" : "2020-12-11T23:08:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c63a8b48c75c21dcecb172a93f2f629c727a075f",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +556,560 @@    columns: Union[Index, List],\n) -> Tuple[List[Scalar], Union[Index, List[Axis]]]:\n    # Note: we already check len(data) > 0 before getting hre\n    if isinstance(data[0], tuple):\n        content = lib.to_object_array_tuples(data)"
  },
  {
    "id" : "f23ca2ec-ab01-4723-980b-8a7434172137",
    "prId" : 38757,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38757#pullrequestreview-559337660",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49e6bfb2-bf3c-484e-9377-f6ddc335d8b2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could type data as Sequence at a later point",
        "createdAt" : "2020-12-29T00:02:24Z",
        "updatedAt" : "2020-12-29T00:02:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "be32b6999117a594274b52a6214317f5d18c1f10",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +316,320 @@\n\ndef treat_as_nested(data) -> bool:\n    \"\"\"\n    Check if we should use nested_data_to_arrays."
  },
  {
    "id" : "4a4fb646-78eb-44e7-b7e2-8e99d99654d7",
    "prId" : 38939,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38939#pullrequestreview-611752633",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7517e4c8-2307-4b1d-b9ef-f3b8c61bee1a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is a change in behaviour, right? So that also EAs in dicts get copied (fixing the original report of https://github.com/pandas-dev/pandas/issues/32960) \r\n\r\nIf so, can you add a whatsnew note about this? ",
        "createdAt" : "2021-03-05T16:12:07Z",
        "updatedAt" : "2021-03-30T22:56:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b13eee64-7579-446e-aaa6-16e6427184d7",
        "parentId" : "7517e4c8-2307-4b1d-b9ef-f3b8c61bee1a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this isnt intended to be a behavior change, but to take the place of copies that currently happen elsewhere in the status quo (not sure where off the top of my head).  removing this breaks 230 tests.",
        "createdAt" : "2021-03-09T00:10:47Z",
        "updatedAt" : "2021-03-30T22:56:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5ed87ca5-38da-4567-9b19-b180ae8e6c6a",
        "parentId" : "7517e4c8-2307-4b1d-b9ef-f3b8c61bee1a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "all of them are test_dict_nocopy; the EA inputs dont get copied without this",
        "createdAt" : "2021-03-09T02:15:03Z",
        "updatedAt" : "2021-03-30T22:56:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ca2b456d-573a-47ee-8304-4b6828ed7df9",
        "parentId" : "7517e4c8-2307-4b1d-b9ef-f3b8c61bee1a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, but right now, constructing a DataFrame from a dict with EAs doesn't copy the EAs. Which is changed with this PR, I assume? (based on the above code, and on your comment \"the EA inputs dont get copied without this\").I think this is a good change (to ensure consistency now in how a dict gets handled), but it's still a change worth noting if the above is correct.\r\n\r\n",
        "createdAt" : "2021-03-12T15:22:34Z",
        "updatedAt" : "2021-03-30T22:56:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b443bbd8-48c4-446e-bafc-4049030ebe5a",
        "parentId" : "7517e4c8-2307-4b1d-b9ef-f3b8c61bee1a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "thanks for clarifying.  amended whatsnew",
        "createdAt" : "2021-03-14T23:36:49Z",
        "updatedAt" : "2021-03-30T22:56:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "98b6dff1f6a51f1a621b4d99e75dd4aaf32e6d1b",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +447,451 @@            for x in arrays\n        ]\n        # TODO: can we get rid of the dt64tz special case above?\n\n    return arrays_to_mgr("
  },
  {
    "id" : "803420d3-1b22-4fa2-baf0-f46bc2129edc",
    "prId" : 39991,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39991#pullrequestreview-598803077",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30cd4012-2da6-45fa-bb8d-60b71393a737",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "cc @jbrockmendel this is a PITA .. (similar as in https://github.com/pandas-dev/pandas/pull/39722#discussion_r573896611)\r\n",
        "createdAt" : "2021-02-23T15:05:53Z",
        "updatedAt" : "2021-03-02T21:12:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "74539408-bb5e-4995-8033-1f7db738a3fa",
        "parentId" : "30cd4012-2da6-45fa-bb8d-60b71393a737",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i very much agree.  id just get rid of the tests that patch PandasArray._typ altogether.\r\n\r\nin create_block_manager_from_arrays and make_block we specifically check for ABCPandasArray, could mirror the usage there for now",
        "createdAt" : "2021-02-23T17:20:57Z",
        "updatedAt" : "2021-03-02T21:12:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bd2da87b-00ef-4bb4-9e74-a7311d5ed3bf",
        "parentId" : "30cd4012-2da6-45fa-bb8d-60b71393a737",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : ">  id just get rid of the tests that patch PandasArray._typ altogether.\r\n\r\nWhich means getting rid of `extension/test_numpy.py` altogether? \r\n(the tests that only test the EA not inside a DataFrame or Series or so will pass, but I don't think it is worth maintaining a skips/xfails for this)",
        "createdAt" : "2021-02-23T20:36:47Z",
        "updatedAt" : "2021-03-02T21:12:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "99206c3c-f889-43ad-931d-4d6d6e90090c",
        "parentId" : "30cd4012-2da6-45fa-bb8d-60b71393a737",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> Which means getting rid of extension/test_numpy.py altogether?\r\n\r\ni expect some of it could be salvaged, but a lot of it would become pointless, yah",
        "createdAt" : "2021-02-23T21:17:18Z",
        "updatedAt" : "2021-03-02T21:12:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d232686d-4c80-4e82-95af-2569b7c8698e",
        "parentId" : "30cd4012-2da6-45fa-bb8d-60b71393a737",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK to leave this for a separate issue/PR? (will open an issue to discuss this problem)",
        "createdAt" : "2021-02-24T13:30:17Z",
        "updatedAt" : "2021-03-02T21:12:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a9296901-4961-4021-854f-5380e728257d",
        "parentId" : "30cd4012-2da6-45fa-bb8d-60b71393a737",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> `TODO extract_array should be preferred`\r\n\r\nim actually OK with `._values` when we know we have a Series, as it will be somewhat more performant.\r\n\r\n> will open an issue to discuss this problem\r\n\r\npls add the GH ref to the comment\r\n\r\n> OK to leave this for a separate issue/PR? \r\n\r\nfine by me",
        "createdAt" : "2021-02-24T15:29:02Z",
        "updatedAt" : "2021-03-02T21:12:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "4ded2088-a6ff-409f-999e-43750d25386b",
        "parentId" : "30cd4012-2da6-45fa-bb8d-60b71393a737",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Opened https://github.com/pandas-dev/pandas/issues/40021, will add a comment about it",
        "createdAt" : "2021-02-24T15:56:03Z",
        "updatedAt" : "2021-03-02T21:12:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "43d1daf1-61a3-4dd7-a211-d50a16043338",
        "parentId" : "30cd4012-2da6-45fa-bb8d-60b71393a737",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i think  can \"resolve conversation\"?",
        "createdAt" : "2021-02-25T17:09:53Z",
        "updatedAt" : "2021-03-02T21:12:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6166927542887f990bff92e00ebda35bbe07088b",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +454,458 @@            # to PandasArray), see https://github.com/pandas-dev/pandas/issues/40021\n            # val = extract_array(val, extract_numpy=True)\n            val = val._values\n        else:\n            if isinstance(val, dict):"
  }
]