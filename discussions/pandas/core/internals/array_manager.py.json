[
  {
    "id" : "608146d3-f583-4667-a6f0-891b13225753",
    "prId" : 36010,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36010#pullrequestreview-555220053",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15f985db-8b11-4dec-8981-52a9636fc1d2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "prob need a .to_manager(kind=) method for each of these to convert to the other",
        "createdAt" : "2020-12-18T01:32:59Z",
        "updatedAt" : "2021-01-12T11:52:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5ae3535f-9f6f-47f9-9597-2df141a92992",
        "parentId" : "15f985db-8b11-4dec-8981-52a9636fc1d2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, will add",
        "createdAt" : "2020-12-18T07:23:18Z",
        "updatedAt" : "2021-01-12T11:52:37Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "9dc5600d38f5cfb97052b7c612a161018610316c",
    "line" : 192,
    "diffHunk" : "@@ -1,1 +190,194 @@        Apply array_op blockwise with another (aligned) BlockManager.\n        \"\"\"\n        # TODO what if `other` is BlockManager ?\n        left_arrays = self.arrays\n        right_arrays = other.arrays"
  },
  {
    "id" : "89f5aa70-bad6-4aee-890e-cc1d17ee6dee",
    "prId" : 39612,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39612#pullrequestreview-589907350",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6adee53-46fb-47bd-a173-d7129f04f649",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "do we need ArrayLike to include NullArrayProxy?",
        "createdAt" : "2021-02-12T23:44:31Z",
        "updatedAt" : "2021-04-12T06:48:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "81d09544fd499d69f8231dffb362d38d87850640",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +1066,1070 @@        )\n\n    def _make_na_array(self, fill_value=None, use_na_proxy=False):\n        if use_na_proxy:\n            assert fill_value is None"
  },
  {
    "id" : "f0aee680-dbf9-42bc-824e-7064a5f82b6c",
    "prId" : 39612,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39612#pullrequestreview-590794744",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc43416e-7771-4e4f-9c66-c563c8bf13b3",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "if we have both use_na_proxy and a non-None fill_value does that indicate something went wrong?  i.e should we not silently ignore fill_value here?",
        "createdAt" : "2021-02-12T23:47:03Z",
        "updatedAt" : "2021-04-12T06:48:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "70465f0f-0b02-44bf-a828-8356ecb15d16",
        "parentId" : "dc43416e-7771-4e4f-9c66-c563c8bf13b3",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In practice it's never called with both (ArrayManager is private API, and this keyword is only used in `concatenate_array_managers`), but will add an `assert` to check for this. ",
        "createdAt" : "2021-02-15T09:37:36Z",
        "updatedAt" : "2021-04-12T06:48:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "94cb0b01-89b8-48e4-9ec4-681d97869696",
        "parentId" : "dc43416e-7771-4e4f-9c66-c563c8bf13b3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "thanks",
        "createdAt" : "2021-02-15T23:07:14Z",
        "updatedAt" : "2021-04-12T06:48:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "81d09544fd499d69f8231dffb362d38d87850640",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +1069,1073 @@        if use_na_proxy:\n            assert fill_value is None\n            return NullArrayProxy(self.shape_proper[0])\n\n        if fill_value is None:"
  },
  {
    "id" : "8f9395e8-c2f2-4e3e-ba71-4e134b54039e",
    "prId" : 39719,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39719#pullrequestreview-590706133",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20bea240-7d1d-4202-8143-e2d37318c93a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is an ugly special case ... But as far as I can see it is the consequence of storing Datetime/TimedeltaArray as the 1D array for those dtypes in ArrayManager instead of the numpy ndarray version.",
        "createdAt" : "2021-02-10T09:54:30Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7d2c816b-50c0-4962-b0e5-078e84bed6f3",
        "parentId" : "20bea240-7d1d-4202-8143-e2d37318c93a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "`res = arr.reshape(-1, 1)._reduce(op, axis=0, ...)`?",
        "createdAt" : "2021-02-11T19:04:22Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7c993ae1-133c-4337-b2ac-e7e40540128a",
        "parentId" : "20bea240-7d1d-4202-8143-e2d37318c93a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Hmm, yes. That would need the Manager to get the actual op name, and not the function object. \r\n\r\nNow, just passing the op name in addition is not difficult of course. \r\nBut I could also do a precursor to actually move creating the function from the op name (and defining `blk_func`) into the Manager as well. It's moving more things into the internals, but I think that's actually a cleaner separation of concern (you could say that the DataFrame shouldn't need to decide which function object the Manager needs to use, it just needs to specify the op name. This actually already happens for EAs, those just ignore the function object)",
        "createdAt" : "2021-02-11T20:47:53Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "35d6dd78-d1ac-44d8-a95e-b4b77a443a84",
        "parentId" : "20bea240-7d1d-4202-8143-e2d37318c93a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "`res is NaT and is_timedelta64_ns_dtype(arr.dtype)`\r\n\r\nI think this will be OK, but what about if `arr.dtype` is dt64 and the reduction is `std`, then we still want td64nat, right?",
        "createdAt" : "2021-02-15T18:36:40Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "911a040f-393b-4947-9dd0-05ff1185be1a",
        "parentId" : "20bea240-7d1d-4202-8143-e2d37318c93a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, I know, that case is not covered (see my comment \"what if datetime results in timedelta? (eg std)\"). I can make the todo more explicit.\r\n\r\n(note that this is a bug that already exists on master for ArrayManager as well, it's not caused by the changes in this PR; it's just not yet addressed by this PR)",
        "createdAt" : "2021-02-15T19:06:05Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dcef95beed64b76f4d933f9ae0148c044263bc5",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +241,245 @@                    result_arrays.append(np.array([\"NaT\"], dtype=\"timedelta64[ns]\"))\n                else:\n                    result_arrays.append(sanitize_array([res], None))\n                result_indices.append(i)\n"
  },
  {
    "id" : "99ecbc07-2df6-48e1-9e3b-66fef20538de",
    "prId" : 39719,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39719#pullrequestreview-590369530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66b0bb53-1e0a-4da4-a73b-aa708be5e8ef",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can't you simply use na_value_for_dtype and *always* do this?",
        "createdAt" : "2021-02-10T14:42:44Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e18234a5-0305-4e24-b6ee-c116e43bcfc3",
        "parentId" : "66b0bb53-1e0a-4da4-a73b-aa708be5e8ef",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Then we need to know the output dtype of the reduction (which is not necessarily the same as the input dtype, and something that is currently not known here). \r\n\r\nI suppose that in principle for the built-in (non-object) dtypes we can write up a \"(in_dtype, reduction) -> out_dtype\" table. \r\nWe already do something similar for groupby as well, actually (but specifically for the nullable dtypes):\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/83479e1efc3cdbe31d8042eebaed8a6a90bb3b1c/pandas/core/dtypes/cast.py#L367-L397\r\n\r\n\r\n",
        "createdAt" : "2021-02-10T14:50:08Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "659c708d-f4f7-486b-b312-5d0f076e7b84",
        "parentId" : "66b0bb53-1e0a-4da4-a73b-aa708be5e8ef",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right, yeah i think we had an issue to move this more generally array ops. its basically take this output and create the correct dtype, using the input if its warranted (e.g. with all-NaN). so prob worth moving / formalizing this.",
        "createdAt" : "2021-02-10T15:35:59Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c9a500bc-5319-4920-a385-32164b9161f9",
        "parentId" : "66b0bb53-1e0a-4da4-a73b-aa708be5e8ef",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback are you OK with deferring this to a follow-up issue / PR (this PR already implements `ignore_failures` and enables tests, so it useful on its own without solving *everything*)",
        "createdAt" : "2021-02-15T10:58:38Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dcef95beed64b76f4d933f9ae0148c044263bc5",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +237,241 @@                # TODO NaT doesn't preserve dtype, so we need to ensure to create\n                # a timedelta result array if original was timedelta\n                # what if datetime results in timedelta? (eg std)\n                if res is NaT and is_timedelta64_ns_dtype(arr.dtype):\n                    result_arrays.append(np.array([\"NaT\"], dtype=\"timedelta64[ns]\"))"
  },
  {
    "id" : "5b350898-a8d8-4ec7-b30b-ce5e2ff9481e",
    "prId" : 39719,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39719#pullrequestreview-590658589",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fe8eab9-13fd-4f33-9eec-066a40f70e88",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there a reason that you are not just adding a AM.reduce? I agree generally we don't want to do that, but in this case this makes this very messy.",
        "createdAt" : "2021-02-15T16:53:44Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7cac1f4f-4e78-4a8a-be52-58288d454330",
        "parentId" : "1fe8eab9-13fd-4f33-9eec-066a40f70e88",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "you are commenting on a method that *is* `AM.reduce` ?",
        "createdAt" : "2021-02-15T17:03:26Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "92d93fd8-845d-40f0-908e-95f7f99584b1",
        "parentId" : "1fe8eab9-13fd-4f33-9eec-066a40f70e88",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh sorry, thought for a minute this was general. let me look again.",
        "createdAt" : "2021-02-15T17:23:19Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dcef95beed64b76f4d933f9ae0148c044263bc5",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +244,248 @@                result_indices.append(i)\n\n        index = Index._simple_new(np.array([None], dtype=object))  # placeholder\n        if ignore_failures:\n            indexer = np.array(result_indices)"
  },
  {
    "id" : "4f945725-6af2-4380-9991-1628ef889419",
    "prId" : 39719,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39719#pullrequestreview-591353491",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c6684ff-161b-40da-b76e-d6629c8cd6d1",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Could share this whole method with BM with something like:\r\n\r\n```\r\nout = []\r\nindices = []\r\n\r\nfor arr, locs in enumerate(self):\r\n    if is_bool_dtype(arr.dtype) or (is_object_dtype(arr.dtype) and lib.is_bool_array(arr.ravel(\"K\"))):\r\n         [...]\r\n\r\ndef __iter__(self): # <-- AM\r\n    for i, arr in enumerate(self.arrays):\r\n        yield i, arr\r\n\r\ndef __iter__(self):  # <-- BM\r\n    for blk in self.blocks:\r\n        yield blk.values, blk.mgr_locs\r\n```",
        "createdAt" : "2021-02-15T18:44:04Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "18daaf8c-30cf-4ec0-b582-722179eeef35",
        "parentId" : "0c6684ff-161b-40da-b76e-d6629c8cd6d1",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The BlockManager uses different logic to determine if a Block is boolean or not, i.e. `Block.is_bool` (and for this case also splits up object blocks, which it doesn't do for get_numeric_data) \r\n(so with the current implementation, there is not much to share)",
        "createdAt" : "2021-02-15T19:01:41Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "698f51cd-9a32-446f-ad1e-dcd0652e943c",
        "parentId" : "0c6684ff-161b-40da-b76e-d6629c8cd6d1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "OK, thanks for taking a look",
        "createdAt" : "2021-02-16T15:42:15Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dcef95beed64b76f4d933f9ae0148c044263bc5",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +527,531 @@        return type(self)(arrays, new_axes, verify_integrity=False)\n\n    def get_bool_data(self, copy: bool = False) -> ArrayManager:\n        \"\"\"\n        Select columns that are bool-dtype and object-dtype columns that are all-bool."
  },
  {
    "id" : "c2ff0336-0874-43b1-be48-82c7c7b4a870",
    "prId" : 39719,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39719#pullrequestreview-592120273",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64632650-63c1-4fa3-a010-cd1e995ff1f7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are both of these cases covered in tests? (ignore_failures & not)",
        "createdAt" : "2021-02-17T00:15:12Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dc15be07-8759-4539-ac5f-c7cf436fbc6b",
        "parentId" : "64632650-63c1-4fa3-a010-cd1e995ff1f7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes (BlockManager has the same functionality, and there are several existing tests that cover this aspect)",
        "createdAt" : "2021-02-17T12:01:44Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dcef95beed64b76f4d933f9ae0148c044263bc5",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +246,250 @@        index = Index._simple_new(np.array([None], dtype=object))  # placeholder\n        if ignore_failures:\n            indexer = np.array(result_indices)\n            columns = self.items[result_indices]\n        else:"
  },
  {
    "id" : "00f9116c-2326-4eb3-b7ba-88650fb4ffaa",
    "prId" : 39885,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39885#pullrequestreview-598840321",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3381e7ff-8187-467d-a59a-4db534cd4edd",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "could combine this with previous check as\r\n\r\n```\r\nif arr.dtype.kind in [\"m\", \"M\"] and not isinstance(arr, np.ndarray):\r\n    arr = arr._data\r\n```\r\n",
        "createdAt" : "2021-02-25T02:14:47Z",
        "updatedAt" : "2021-02-25T07:28:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "c5169f37-f219-4d8c-bb1b-51cfcd40654c",
        "parentId" : "3381e7ff-8187-467d-a59a-4db534cd4edd",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "That would be nice, but the problem is that we still need to keep DatetimeArray intact for DatetimeTZBlock. So we would still need the `if hasattr(arr, \"tz\") and arr.tz is None` check as well, in which case it doesn't necessarily become more readable to combine both checks.\r\n\r\nEdit: the diff would be:\r\n\r\n```diff\r\n-            if hasattr(arr, \"tz\") and arr.tz is None:  # type: ignore[union-attr]\r\n-                # DatetimeArray needs to be converted to ndarray for DatetimeBlock\r\n-                arr = arr._data  # type: ignore[union-attr]\r\n-            elif arr.dtype.kind == \"m\" and not isinstance(arr, np.ndarray):\r\n-                # TimedeltaArray needs to be converted to ndarray for TimedeltaBlock\r\n+            if (\r\n+                arr.dtype.kind == \"m\"\r\n+                and not isinstance(arr, np.ndarray)\r\n+                and getattr(arr, \"tz\", None) is None\r\n+            ):\r\n+                # DatetimeArray/TimedeltaArray needs to be converted to ndarray\r\n+                # for DatetimeBlock/TimedeltaBlock (except DatetimeArray with tz,\r\n+                # which needs to be preserved for DatetimeTZBlock)\r\n                 arr = arr._data  # type: ignore[union-attr]\r\n```",
        "createdAt" : "2021-02-25T07:15:31Z",
        "updatedAt" : "2021-02-25T12:24:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ad0f3386-a29d-4526-8b77-15b46f38a8e7",
        "parentId" : "3381e7ff-8187-467d-a59a-4db534cd4edd",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "instead of `and getattr(arr, \"tz\", None) is None` how about `isinstance(arr.dtype, np.dtype)`.  either way works i guess",
        "createdAt" : "2021-02-25T17:09:09Z",
        "updatedAt" : "2021-02-25T17:09:10Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9d2feb95-40c5-4575-b9cd-b5060ae6b691",
        "parentId" : "3381e7ff-8187-467d-a59a-4db534cd4edd",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "That still gives the same length of the `if` check as in my diff example above, which I don't find an improvement in readability",
        "createdAt" : "2021-02-25T17:24:27Z",
        "updatedAt" : "2021-02-25T17:24:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "65f81144-8670-452a-af83-a4fc33f21d16",
        "parentId" : "3381e7ff-8187-467d-a59a-4db534cd4edd",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yah the only possible difference is for mypy",
        "createdAt" : "2021-02-25T17:49:00Z",
        "updatedAt" : "2021-02-25T17:49:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d63f72d726b966984074490c39556e8074b1c56",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +396,400 @@                # DatetimeArray needs to be converted to ndarray for DatetimeBlock\n                arr = arr._data  # type: ignore[union-attr]\n            elif arr.dtype.kind == \"m\" and not isinstance(arr, np.ndarray):\n                # TimedeltaArray needs to be converted to ndarray for TimedeltaBlock\n                arr = arr._data  # type: ignore[union-attr]"
  },
  {
    "id" : "5a863549-af3c-46e1-89ff-a8216f4257b1",
    "prId" : 39991,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39991#pullrequestreview-598301139",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "435df109-68b1-4a52-94fe-b868336be200",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "np.atleast_2d?",
        "createdAt" : "2021-02-25T00:50:30Z",
        "updatedAt" : "2021-03-02T21:12:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "da40ccca-f017-48ac-a039-ab6b43ee092c",
        "parentId" : "435df109-68b1-4a52-94fe-b868336be200",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It's actually converting a 2D array to 1D, so `atleast_2d` is not useful here (and eg `squeeze` also not, because that would also convert a len-1 array to a scalar, which we don't want there)",
        "createdAt" : "2021-02-25T08:24:54Z",
        "updatedAt" : "2021-03-02T21:12:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "6166927542887f990bff92e00ebda35bbe07088b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +841,845 @@        value = extract_array(value, extract_numpy=True)\n        if value.ndim == 2:\n            if value.shape[0] == 1:\n                value = value[0, :]\n            else:"
  },
  {
    "id" : "92bb2252-33c4-4906-b072-5d02a9bb2cb0",
    "prId" : 40030,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40030#pullrequestreview-597828278",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8929f34-2f88-42f0-911a-e869f37f4c7a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "worth doing the same in BM?",
        "createdAt" : "2021-02-24T18:53:04Z",
        "updatedAt" : "2021-02-24T18:53:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e6224c95-b052-4c00-af75-00f9f5bfc0c3",
        "parentId" : "f8929f34-2f88-42f0-911a-e869f37f4c7a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would say no, because there it's a bit more complicated (needs to split object blocks to check for bool-like columns)",
        "createdAt" : "2021-02-24T19:06:25Z",
        "updatedAt" : "2021-02-24T19:06:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "49b0ab0227a56d9332d0a589eb66db1748087be1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +481,485 @@        return False\n\n    def _get_data_subset(self, predicate: Callable) -> ArrayManager:\n        indices = [i for i, arr in enumerate(self.arrays) if predicate(arr)]\n        arrays = [self.arrays[i] for i in indices]"
  },
  {
    "id" : "fdd30ecc-eae2-4d76-aa54-de7641b5186f",
    "prId" : 40050,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40050#pullrequestreview-599304337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61d30bd0-36dd-4b39-ba86-a55e98d1558e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this looks a whole lot like reduce right?",
        "createdAt" : "2021-02-26T02:47:01Z",
        "updatedAt" : "2021-02-26T07:16:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6a03fe69-490f-4df7-98e8-f7965aff72fd",
        "parentId" : "61d30bd0-36dd-4b39-ba86-a55e98d1558e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, it's quite similar in logic (it are also both reduce operations, so not that unsurprising), but IMO they are different enough that trying to share anything will only make it more complex (return value is different, they need to process the result inside the loop differently, etc)\r\n\r\nIt might be possible to change the return value of `reduce` to make this easier, but that's a bigger change, so if we want that, it's for a separate PR",
        "createdAt" : "2021-02-26T07:13:23Z",
        "updatedAt" : "2021-02-26T07:16:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0333ece6639f2e305d1ce5ccdd08c409d6ea74a2",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +271,275 @@        ArrayManager\n        \"\"\"\n        result_arrays: List[np.ndarray] = []\n        result_indices: List[int] = []\n"
  },
  {
    "id" : "426841dd-7957-4a58-b001-6284b7f363d3",
    "prId" : 40075,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40075#pullrequestreview-604174854",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06965bce-837a-43ee-b54b-0ccb0ba94fd1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this needed now that you have a _normalize_axis?",
        "createdAt" : "2021-03-04T01:51:50Z",
        "updatedAt" : "2021-03-05T14:05:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e5190b14-2dfe-4a1e-9526-1e019ca65625",
        "parentId" : "06965bce-837a-43ee-b54b-0ccb0ba94fd1",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, it is still needed here because this is the function that does the \"use block method as fallback\" (and the block method is still using its inverted axis logic). \r\n\r\n(but I am actively removing the usage of `apply_with_block`, like https://github.com/pandas-dev/pandas/pull/40196)",
        "createdAt" : "2021-03-04T14:42:45Z",
        "updatedAt" : "2021-03-05T14:05:23Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "81c2205e86028d7865f919ce06d9114f99657b4c",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +427,431 @@\n    def apply_with_block(self: T, f, align_keys=None, swap_axis=True, **kwargs) -> T:\n        # switch axis to follow BlockManager logic\n        if swap_axis and \"axis\" in kwargs and self.ndim == 2:\n            kwargs[\"axis\"] = 1 if kwargs[\"axis\"] == 0 else 0"
  },
  {
    "id" : "66fd38d6-bfed-4491-ae2c-96ac2a71fff6",
    "prId" : 40079,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40079#pullrequestreview-599751774",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2aab2bc5-e380-4dfa-a2a1-3746c6480537",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "comment on why this is expected (presumably the caller checks?)",
        "createdAt" : "2021-02-26T16:21:50Z",
        "updatedAt" : "2021-02-26T16:46:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "51927598-f2a5-4bd8-a3d0-70035f6b17da",
        "parentId" : "2aab2bc5-e380-4dfa-a2a1-3746c6480537",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yeah, DataFrame diff already special cases that (and basically \"misuses\" Manager.diff with a wrong axis for `n=0`, in which case the axis doesn't matter). \r\nWill add a comment for that.",
        "createdAt" : "2021-02-26T16:43:29Z",
        "updatedAt" : "2021-02-26T16:46:04Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "5481a3468080cd85c2e149d764aafcaa829beadc",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +457,461 @@            # DataFrame only calls this for n=0, in which case performing it\n            # with axis=0 is equivalent\n            assert n == 0\n            axis = 0\n        return self.apply(algos.diff, n=n, axis=axis)"
  },
  {
    "id" : "3bba11c8-2ea9-4eca-a75b-58d89b85ee3c",
    "prId" : 40147,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40147#pullrequestreview-602227812",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddf062b8-4001-4719-8751-7d0cf4f7c723",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "we have a little-used is_ea_or_datetimelike_dtype, could use an analogous helper to get DatetimeArray/TimedeltaArray in these cases (not for this PR)",
        "createdAt" : "2021-03-02T20:19:19Z",
        "updatedAt" : "2021-03-02T20:19:19Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c432826ec20040bf3fcd437288b8ad6497d2f03",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +728,732 @@        elif is_datetime64_ns_dtype(dtype):\n            result = DatetimeArray._from_sequence(values, dtype=dtype)._data\n        elif is_timedelta64_ns_dtype(dtype):\n            result = TimedeltaArray._from_sequence(values, dtype=dtype)._data\n        else:"
  },
  {
    "id" : "869d10f0-98ab-4f61-86de-d8805412591a",
    "prId" : 40147,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40147#pullrequestreview-602266388",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57210cf1-c7f3-4c85-9c2b-f7c1bd9bb507",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "did you check if this is relevant for the BlockManager case?",
        "createdAt" : "2021-03-02T20:19:57Z",
        "updatedAt" : "2021-03-02T20:19:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d8613710-0a58-4c3a-9757-ea0d7b4ae290",
        "parentId" : "57210cf1-c7f3-4c85-9c2b-f7c1bd9bb507",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, see my (somewhat) answer at https://github.com/pandas-dev/pandas/pull/40147#discussion_r585314770. \r\nBut moreover, in the BlockManager method, it assigns slices from the Block values into the resulting array:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/b835ca2fc2f772c27c914ae532cd32f8db69724a/pandas/core/internals/managers.py#L978-L982\r\n\r\nSo that's quite different as the code here, and the idea of first keeping it in a list doesn't really apply.",
        "createdAt" : "2021-03-02T20:23:38Z",
        "updatedAt" : "2021-03-02T20:23:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "17d07542-1ab4-481b-a98b-fcaf706956a5",
        "parentId" : "57210cf1-c7f3-4c85-9c2b-f7c1bd9bb507",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "thanks",
        "createdAt" : "2021-03-02T20:59:04Z",
        "updatedAt" : "2021-03-02T20:59:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c432826ec20040bf3fcd437288b8ad6497d2f03",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +731,735 @@            result = TimedeltaArray._from_sequence(values, dtype=dtype)._data\n        else:\n            result = np.array(values, dtype=dtype)\n        return result\n"
  },
  {
    "id" : "6a71c639-a92e-4b74-a6b6-dbaccd0c83f7",
    "prId" : 40189,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40189#pullrequestreview-604410913",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b1995cc-7ac3-448e-b66f-23b886d33585",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can the reshaping be moved to `quantile_compat`? (as it also already does this for EAs)",
        "createdAt" : "2021-03-03T10:20:10Z",
        "updatedAt" : "2021-03-05T01:42:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0ef8fcc1-26d7-4838-a553-6082e339aa23",
        "parentId" : "5b1995cc-7ac3-448e-b66f-23b886d33585",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "this one (potentially)",
        "createdAt" : "2021-03-04T15:55:57Z",
        "updatedAt" : "2021-03-05T01:42:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4ecf7c7b-db00-4dce-86b1-715b5fc9e355",
        "parentId" : "5b1995cc-7ac3-448e-b66f-23b886d33585",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i think ArrayManager-specific logic should stay in ArrayManager wherever possible",
        "createdAt" : "2021-03-04T18:18:39Z",
        "updatedAt" : "2021-03-05T01:42:20Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d80803f3af783b93f7901eef9896839be7b616d",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +465,469 @@\n        arrs = [\n            x if not isinstance(x, np.ndarray) else np.atleast_2d(x)\n            for x in self.arrays\n        ]"
  },
  {
    "id" : "90def4f9-2db9-4dc3-9fe1-115f6ac4bcd5",
    "prId" : 40196,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40196#pullrequestreview-604722619",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8a7f8cb-89f2-4e08-b2a7-df182983d941",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not pretty but ok",
        "createdAt" : "2021-03-03T13:41:33Z",
        "updatedAt" : "2021-03-04T15:40:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5c9a5933-f84c-46db-8429-d433a6b6c44b",
        "parentId" : "d8a7f8cb-89f2-4e08-b2a7-df182983d941",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "What's not pretty about it? The inline function?",
        "createdAt" : "2021-03-03T13:45:49Z",
        "updatedAt" : "2021-03-04T15:40:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "51952396-0305-43bd-b956-238d7d809a55",
        "parentId" : "d8a7f8cb-89f2-4e08-b2a7-df182983d941",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "soft_convert_objects can just do this directly right? (or the copy keyword is not functioning)",
        "createdAt" : "2021-03-03T14:12:42Z",
        "updatedAt" : "2021-03-04T15:40:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9cfd5326-b00d-430a-b3b5-353c36c8f996",
        "parentId" : "d8a7f8cb-89f2-4e08-b2a7-df182983d941",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Currently `soft_convert_objects` assumes the input is object dtype, and doesn't do such checking. I assume the check could be moved into ``soft_convert_objects`` as well (although eg for Block, which has an ObjectBlock, it knows it is ndarray[object], and such an additional check would be unnecessary)",
        "createdAt" : "2021-03-03T14:49:01Z",
        "updatedAt" : "2021-03-04T15:40:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9d63388e-a92c-477f-9c4f-34d4c75c43cc",
        "parentId" : "d8a7f8cb-89f2-4e08-b2a7-df182983d941",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "BTW soft_convert_objects is only used for ObjectBlock.convert ATM, so no real harm in making it handle non-object with these extra two lines (though to get effective simplification in the BM code might need to tweak copy kwarg behavior)",
        "createdAt" : "2021-03-03T23:44:09Z",
        "updatedAt" : "2021-03-04T15:40:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a646d831-0d4f-454b-9461-f98be0c203ba",
        "parentId" : "d8a7f8cb-89f2-4e08-b2a7-df182983d941",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok if would revisit / consolidate logic at some point here.",
        "createdAt" : "2021-03-05T01:31:36Z",
        "updatedAt" : "2021-03-05T01:31:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "13ff5419a83425d75b6ca02953605d104d0f275f",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +517,521 @@        timedelta: bool = True,\n    ) -> ArrayManager:\n        def _convert(arr):\n            if is_object_dtype(arr.dtype):\n                return soft_convert_objects("
  },
  {
    "id" : "35901ef3-d60a-4d6a-9582-bb5aab5b31fb",
    "prId" : 40300,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40300#pullrequestreview-611156492",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a69e909f-9292-443d-9591-66129198a275",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why are you converting to int64? we use intp for indexing via take",
        "createdAt" : "2021-03-08T13:10:36Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "04fdf2bd-0c29-4d5e-ba3b-5c740611d22b",
        "parentId" : "a69e909f-9292-443d-9591-66129198a275",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "That's existing code (just cut and paste). And our cython take algos always use int64:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/d910a4435962505d3388d08a21e58bca6a9bf294/pandas/_libs/algos_take_helper.pxi.in#L69\r\n\r\n",
        "createdAt" : "2021-03-08T13:14:23Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ad0a9398-dcf9-42b1-a967-e40d5b4d04ac",
        "parentId" : "a69e909f-9292-443d-9591-66129198a275",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "should they though?  i expect they ought to be intp_t",
        "createdAt" : "2021-03-10T15:34:58Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "1e53a0f4-2f5e-43a4-b1a0-ce66c4c1f7eb",
        "parentId" : "a69e909f-9292-443d-9591-66129198a275",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "im increasingly confident that intp_t is the correct thing to do, but its out of scope for this PR, xref #40390",
        "createdAt" : "2021-03-12T21:14:23Z",
        "updatedAt" : "2021-03-12T21:14:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f933ff455f33717cf56b8c9cf830d9ab2348b6",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1007,1011 @@        else:\n            validate_indices(indexer, len(self._axes[0]))\n            indexer = ensure_int64(indexer)\n            if (indexer == -1).any():\n                allow_fill = True"
  },
  {
    "id" : "3588f61c-ca56-402f-a50f-4d269f42cffb",
    "prId" : 40300,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40300#pullrequestreview-608844907",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca5326b6-6b5e-432e-abf9-c8476601a15e",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@jorisvandenbossche in looking at the benchmarks you posted in #39146 it seems like some of them involve optimizations implemented for AM that _could_ be implemented for BM but weren't.  is there anything here that falls into that category?",
        "createdAt" : "2021-03-08T18:58:03Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "623ab52f-3f9c-4e37-92be-d0bfdaa1ad1f",
        "parentId" : "ca5326b6-6b5e-432e-abf9-c8476601a15e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> in looking at the benchmarks you posted in #39146 it seems like some of them involve optimizations implemented for AM that _could_ be implemented for BM but weren't\r\n\r\nAre you thinking of something specific?\r\n\r\nThe optimization I do here above _can_ probably be useful if you have lots of non-consolidated blocks, but for the benchmark cases with single blocks posted in #39146, that wouldn't make a difference. ",
        "createdAt" : "2021-03-08T19:18:00Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0d7b7a9c-44e6-4b2a-a61e-2ddac9de26f5",
        "parentId" : "ca5326b6-6b5e-432e-abf9-c8476601a15e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Series has an algos.take_nd call i think could be take_1d.  Also several of the EA.take implementations",
        "createdAt" : "2021-03-10T15:29:13Z",
        "updatedAt" : "2021-03-12T14:57:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f933ff455f33717cf56b8c9cf830d9ab2348b6",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1011,1015 @@                allow_fill = True\n            else:\n                allow_fill = False\n            new_arrays = [\n                take_1d("
  },
  {
    "id" : "c5797426-bced-42f4-9b6b-677bc2a00695",
    "prId" : 40300,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40300#pullrequestreview-611646736",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "617b883a-399d-4d3b-a605-4284ff5835f0",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can this chunk of code be made to match Block._unstack (or vice-versa) more closely?\r\n\r\ne.g. on L1094 you check unstacker.mask.all() which I think is related to the comment in Block._unstack `# TODO: in all tests we have mask.all(); can we rely on that?` but bc `mask` is defined there differently it is not obvious",
        "createdAt" : "2021-03-12T21:12:05Z",
        "updatedAt" : "2021-03-12T21:12:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d127c591-b2ec-40cc-8eb9-384a53593fc1",
        "parentId" : "617b883a-399d-4d3b-a605-4284ff5835f0",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Assuming you are referring to the EA-specific `Block.unstack` (as the other one has even less in common): that's for a single column while this is for multiple columns at once, and needs to deal with creating blocks, with placement, etc. So personally I don't see much possibilities to share code. \r\n\r\n> e.g. on L1094 you check unstacker.mask.all() which I think is related to the comment in Block._unstack\r\n\r\nAs far as I understand the Block version, I don't think that's related. For Block/BlockManager.unstack, that `mask` value somehow indicates which of the columns need to end up in the result (I don't really understand that code, though, as in the ArrayManager I am simply using the result of `unstacker.get_new_columns` without any filtering of that afterwards), while here I only check the `mask` to potentially use a faster `take` for performance-reasons, but that doesn't influence the end result.\r\n",
        "createdAt" : "2021-03-12T21:32:47Z",
        "updatedAt" : "2021-03-12T21:32:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c10b26e0-a5d1-4ff5-b1b6-e900a1f47087",
        "parentId" : "617b883a-399d-4d3b-a605-4284ff5835f0",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> I don't think that's related\r\n\r\nOK.\r\n\r\n>  (I don't really understand that code, though\r\n\r\nat some point we should make sure that one of us (active maintainers, not just the two of us) have a handle on this.",
        "createdAt" : "2021-03-13T23:48:28Z",
        "updatedAt" : "2021-03-13T23:48:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "35f933ff455f33717cf56b8c9cf830d9ab2348b6",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +1100,1104 @@            allow_fill = True\n        new_indexer2D = new_indexer.reshape(*unstacker.full_shape)\n        new_indexer2D = ensure_int64(new_indexer2D)\n\n        new_arrays = []"
  },
  {
    "id" : "d1bc5804-65b8-4858-9258-97c9d623e01d",
    "prId" : 40326,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40326#pullrequestreview-608623442",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17eb12ac-8d9b-4027-bdab-b87d7ea73cea",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can you share any of this with the parent classes' _verify_integrity?",
        "createdAt" : "2021-03-09T22:21:43Z",
        "updatedAt" : "2021-03-12T09:15:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e8e1f45b-6d80-43cc-9b82-e47f9f0099e8",
        "parentId" : "17eb12ac-8d9b-4027-bdab-b87d7ea73cea",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Not really, I think. The parent version assumes the object is 2D, so won't work for SingleArrayManager. \r\nI assume that the part of `_verify_integrity` that checks the individual array could be factored out into a shared helper function, but I would rather leave that for a follow-up.",
        "createdAt" : "2021-03-10T11:49:11Z",
        "updatedAt" : "2021-03-12T09:15:08Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "586c0442bfb0bc334b8c3d677f68c015ba6ff499",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1150,1154 @@                \"Passed array should be 1-dimensional, got array with \"\n                f\"{arr.ndim} dimensions instead.\"\n            )\n\n    @staticmethod"
  },
  {
    "id" : "6ea3f59e-13f0-4278-9977-d12ef6cfc48a",
    "prId" : 40348,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40348#pullrequestreview-612945612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad4c21c5-0aae-4276-9396-1ccb523e36a3",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "seems like is_numeric_dtype should catch this?",
        "createdAt" : "2021-03-15T19:28:04Z",
        "updatedAt" : "2021-03-17T10:18:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5234b341-4984-4d5c-b41e-e6161017fe76",
        "parentId" : "ad4c21c5-0aae-4276-9396-1ccb523e36a3",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It maybe should, but it doesn't at the moment. \r\n\r\nThe above is mimicking the logic of the BlockManager (ExtensionBlock.is_numeric checks this attribute of the dtype). But it's certainly inconsistent .. The consequence of the inconsistency is that eg decimal is considered numeric for groupby operations, but `is_numeric_dtype(decimal_dtype)` will return False (not sure where this would have a direct impact). ",
        "createdAt" : "2021-03-16T08:07:12Z",
        "updatedAt" : "2021-03-17T10:18:00Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0231b86ed64a09bb95dbd0e1f304799beff9735",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +687,691 @@        return self._get_data_subset(\n            lambda arr: is_numeric_dtype(arr.dtype)\n            or getattr(arr.dtype, \"_is_numeric\", False)\n        )\n"
  },
  {
    "id" : "8f4b941e-b975-4fe0-b1df-6651a0815c5b",
    "prId" : 40548,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40548#pullrequestreview-624239725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da301ad0-f196-4a99-8a0e-b20dbfc1fd5a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm we are not consistent this at all. e.g. iset, insert don't return self",
        "createdAt" : "2021-03-22T13:10:08Z",
        "updatedAt" : "2021-03-22T13:10:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "49bfc212-833b-4d03-ac2f-7e155ed0430c",
        "parentId" : "da301ad0-f196-4a99-8a0e-b20dbfc1fd5a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "we are not, no, but im working on it",
        "createdAt" : "2021-03-22T14:39:36Z",
        "updatedAt" : "2021-03-22T14:39:36Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e7978a36-4cc8-4ab9-abd8-4150f7fe657d",
        "parentId" : "da301ad0-f196-4a99-8a0e-b20dbfc1fd5a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "kk great, yeah would be nice to do this in followns",
        "createdAt" : "2021-03-30T13:12:57Z",
        "updatedAt" : "2021-03-30T13:12:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f081ec8aacb3ecc761ba7bda6ea1e4c3567de97",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1270,1274 @@        self.arrays = [self.arrays[0][to_keep]]\n        self._axes = [self._axes[0][to_keep]]\n        return self\n\n    def _get_data_subset(self, predicate: Callable) -> ArrayManager:"
  },
  {
    "id" : "09d230b4-f98f-487d-a052-7ef6d25de4e0",
    "prId" : 40863,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40863#pullrequestreview-633577826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca918ec8-b270-4233-aeaf-903dcc31d15f",
        "parentId" : null,
        "authorId" : "a921e8ee-d6d2-43b6-8bc3-eb6392d3015b",
        "body" : "Good afternoon. Why not give it a more expressive name?",
        "createdAt" : "2021-04-12T11:38:30Z",
        "updatedAt" : "2021-04-14T01:19:47Z",
        "lastEditedBy" : "a921e8ee-d6d2-43b6-8bc3-eb6392d3015b",
        "tags" : [
        ]
      },
      {
        "id" : "500d36db-c334-4f92-9c7e-834aa51f8907",
        "parentId" : "ca918ec8-b270-4233-aeaf-903dcc31d15f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "bc its really only for mypy",
        "createdAt" : "2021-04-12T14:04:39Z",
        "updatedAt" : "2021-04-14T01:19:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "28d97cc7fcd03eb068c73e10448d8da84f071194",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +94,98 @@\n\nT = TypeVar(\"T\", bound=\"BaseArrayManager\")\n\n"
  },
  {
    "id" : "5b24af5d-edd9-492c-9b33-c68ab3e71db6",
    "prId" : 42780,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/42780#pullrequestreview-722577277",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cab3f50e-ac96-4037-b9d0-1adc61c99021",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Slightly off topic (since we already do this elsewhere), but this check is only needed for when using the patched version in the tests? \r\nIf so, I am wondering if we should use some \"TEST_MODE\" env variable so we can check that here and do this step only when running the patched test, to avoid the overhead this is adding for real code.",
        "createdAt" : "2021-08-04T16:25:47Z",
        "updatedAt" : "2021-08-04T16:25:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b61cab53-b779-488f-9173-3c9522bd3821",
        "parentId" : "cab3f50e-ac96-4037-b9d0-1adc61c99021",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yah i increasingly think that test file is more trouble than its worth.  we should try to salvage the subset of tests that directly test PandasArray and disable the others",
        "createdAt" : "2021-08-04T17:56:51Z",
        "updatedAt" : "2021-08-04T17:56:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "912b044a6023e7f8e44f13e27562c35b94dda136",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +700,704 @@        if verify_integrity:\n            self._axes = [ensure_index(ax) for ax in axes]\n            arrays = [extract_pandas_array(x, None, 1)[0] for x in arrays]\n            self.arrays = [maybe_coerce_values(arr) for arr in arrays]\n            self._verify_integrity()"
  }
]