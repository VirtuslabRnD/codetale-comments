[
  {
    "id" : "608146d3-f583-4667-a6f0-891b13225753",
    "prId" : 36010,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36010#pullrequestreview-555220053",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15f985db-8b11-4dec-8981-52a9636fc1d2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "prob need a .to_manager(kind=) method for each of these to convert to the other",
        "createdAt" : "2020-12-18T01:32:59Z",
        "updatedAt" : "2021-01-12T11:52:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5ae3535f-9f6f-47f9-9597-2df141a92992",
        "parentId" : "15f985db-8b11-4dec-8981-52a9636fc1d2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, will add",
        "createdAt" : "2020-12-18T07:23:18Z",
        "updatedAt" : "2021-01-12T11:52:37Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "9dc5600d38f5cfb97052b7c612a161018610316c",
    "line" : 192,
    "diffHunk" : "@@ -1,1 +190,194 @@        Apply array_op blockwise with another (aligned) BlockManager.\n        \"\"\"\n        # TODO what if `other` is BlockManager ?\n        left_arrays = self.arrays\n        right_arrays = other.arrays"
  },
  {
    "id" : "89f5aa70-bad6-4aee-890e-cc1d17ee6dee",
    "prId" : 39612,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39612#pullrequestreview-589907350",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6adee53-46fb-47bd-a173-d7129f04f649",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "do we need ArrayLike to include NullArrayProxy?",
        "createdAt" : "2021-02-12T23:44:31Z",
        "updatedAt" : "2021-04-12T06:48:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "81d09544fd499d69f8231dffb362d38d87850640",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +1066,1070 @@        )\n\n    def _make_na_array(self, fill_value=None, use_na_proxy=False):\n        if use_na_proxy:\n            assert fill_value is None"
  },
  {
    "id" : "f0aee680-dbf9-42bc-824e-7064a5f82b6c",
    "prId" : 39612,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39612#pullrequestreview-590794744",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc43416e-7771-4e4f-9c66-c563c8bf13b3",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "if we have both use_na_proxy and a non-None fill_value does that indicate something went wrong?  i.e should we not silently ignore fill_value here?",
        "createdAt" : "2021-02-12T23:47:03Z",
        "updatedAt" : "2021-04-12T06:48:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "70465f0f-0b02-44bf-a828-8356ecb15d16",
        "parentId" : "dc43416e-7771-4e4f-9c66-c563c8bf13b3",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In practice it's never called with both (ArrayManager is private API, and this keyword is only used in `concatenate_array_managers`), but will add an `assert` to check for this. ",
        "createdAt" : "2021-02-15T09:37:36Z",
        "updatedAt" : "2021-04-12T06:48:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "94cb0b01-89b8-48e4-9ec4-681d97869696",
        "parentId" : "dc43416e-7771-4e4f-9c66-c563c8bf13b3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "thanks",
        "createdAt" : "2021-02-15T23:07:14Z",
        "updatedAt" : "2021-04-12T06:48:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "81d09544fd499d69f8231dffb362d38d87850640",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +1069,1073 @@        if use_na_proxy:\n            assert fill_value is None\n            return NullArrayProxy(self.shape_proper[0])\n\n        if fill_value is None:"
  },
  {
    "id" : "8f9395e8-c2f2-4e3e-ba71-4e134b54039e",
    "prId" : 39719,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39719#pullrequestreview-590706133",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20bea240-7d1d-4202-8143-e2d37318c93a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is an ugly special case ... But as far as I can see it is the consequence of storing Datetime/TimedeltaArray as the 1D array for those dtypes in ArrayManager instead of the numpy ndarray version.",
        "createdAt" : "2021-02-10T09:54:30Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7d2c816b-50c0-4962-b0e5-078e84bed6f3",
        "parentId" : "20bea240-7d1d-4202-8143-e2d37318c93a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "`res = arr.reshape(-1, 1)._reduce(op, axis=0, ...)`?",
        "createdAt" : "2021-02-11T19:04:22Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7c993ae1-133c-4337-b2ac-e7e40540128a",
        "parentId" : "20bea240-7d1d-4202-8143-e2d37318c93a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Hmm, yes. That would need the Manager to get the actual op name, and not the function object. \r\n\r\nNow, just passing the op name in addition is not difficult of course. \r\nBut I could also do a precursor to actually move creating the function from the op name (and defining `blk_func`) into the Manager as well. It's moving more things into the internals, but I think that's actually a cleaner separation of concern (you could say that the DataFrame shouldn't need to decide which function object the Manager needs to use, it just needs to specify the op name. This actually already happens for EAs, those just ignore the function object)",
        "createdAt" : "2021-02-11T20:47:53Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "35d6dd78-d1ac-44d8-a95e-b4b77a443a84",
        "parentId" : "20bea240-7d1d-4202-8143-e2d37318c93a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "`res is NaT and is_timedelta64_ns_dtype(arr.dtype)`\r\n\r\nI think this will be OK, but what about if `arr.dtype` is dt64 and the reduction is `std`, then we still want td64nat, right?",
        "createdAt" : "2021-02-15T18:36:40Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "911a040f-393b-4947-9dd0-05ff1185be1a",
        "parentId" : "20bea240-7d1d-4202-8143-e2d37318c93a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, I know, that case is not covered (see my comment \"what if datetime results in timedelta? (eg std)\"). I can make the todo more explicit.\r\n\r\n(note that this is a bug that already exists on master for ArrayManager as well, it's not caused by the changes in this PR; it's just not yet addressed by this PR)",
        "createdAt" : "2021-02-15T19:06:05Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dcef95beed64b76f4d933f9ae0148c044263bc5",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +241,245 @@                    result_arrays.append(np.array([\"NaT\"], dtype=\"timedelta64[ns]\"))\n                else:\n                    result_arrays.append(sanitize_array([res], None))\n                result_indices.append(i)\n"
  },
  {
    "id" : "99ecbc07-2df6-48e1-9e3b-66fef20538de",
    "prId" : 39719,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39719#pullrequestreview-590369530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66b0bb53-1e0a-4da4-a73b-aa708be5e8ef",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can't you simply use na_value_for_dtype and *always* do this?",
        "createdAt" : "2021-02-10T14:42:44Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e18234a5-0305-4e24-b6ee-c116e43bcfc3",
        "parentId" : "66b0bb53-1e0a-4da4-a73b-aa708be5e8ef",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Then we need to know the output dtype of the reduction (which is not necessarily the same as the input dtype, and something that is currently not known here). \r\n\r\nI suppose that in principle for the built-in (non-object) dtypes we can write up a \"(in_dtype, reduction) -> out_dtype\" table. \r\nWe already do something similar for groupby as well, actually (but specifically for the nullable dtypes):\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/83479e1efc3cdbe31d8042eebaed8a6a90bb3b1c/pandas/core/dtypes/cast.py#L367-L397\r\n\r\n\r\n",
        "createdAt" : "2021-02-10T14:50:08Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "659c708d-f4f7-486b-b312-5d0f076e7b84",
        "parentId" : "66b0bb53-1e0a-4da4-a73b-aa708be5e8ef",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right, yeah i think we had an issue to move this more generally array ops. its basically take this output and create the correct dtype, using the input if its warranted (e.g. with all-NaN). so prob worth moving / formalizing this.",
        "createdAt" : "2021-02-10T15:35:59Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c9a500bc-5319-4920-a385-32164b9161f9",
        "parentId" : "66b0bb53-1e0a-4da4-a73b-aa708be5e8ef",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback are you OK with deferring this to a follow-up issue / PR (this PR already implements `ignore_failures` and enables tests, so it useful on its own without solving *everything*)",
        "createdAt" : "2021-02-15T10:58:38Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dcef95beed64b76f4d933f9ae0148c044263bc5",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +237,241 @@                # TODO NaT doesn't preserve dtype, so we need to ensure to create\n                # a timedelta result array if original was timedelta\n                # what if datetime results in timedelta? (eg std)\n                if res is NaT and is_timedelta64_ns_dtype(arr.dtype):\n                    result_arrays.append(np.array([\"NaT\"], dtype=\"timedelta64[ns]\"))"
  },
  {
    "id" : "5b350898-a8d8-4ec7-b30b-ce5e2ff9481e",
    "prId" : 39719,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39719#pullrequestreview-590658589",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fe8eab9-13fd-4f33-9eec-066a40f70e88",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there a reason that you are not just adding a AM.reduce? I agree generally we don't want to do that, but in this case this makes this very messy.",
        "createdAt" : "2021-02-15T16:53:44Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7cac1f4f-4e78-4a8a-be52-58288d454330",
        "parentId" : "1fe8eab9-13fd-4f33-9eec-066a40f70e88",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "you are commenting on a method that *is* `AM.reduce` ?",
        "createdAt" : "2021-02-15T17:03:26Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "92d93fd8-845d-40f0-908e-95f7f99584b1",
        "parentId" : "1fe8eab9-13fd-4f33-9eec-066a40f70e88",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh sorry, thought for a minute this was general. let me look again.",
        "createdAt" : "2021-02-15T17:23:19Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dcef95beed64b76f4d933f9ae0148c044263bc5",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +244,248 @@                result_indices.append(i)\n\n        index = Index._simple_new(np.array([None], dtype=object))  # placeholder\n        if ignore_failures:\n            indexer = np.array(result_indices)"
  },
  {
    "id" : "4f945725-6af2-4380-9991-1628ef889419",
    "prId" : 39719,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39719#pullrequestreview-591353491",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c6684ff-161b-40da-b76e-d6629c8cd6d1",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Could share this whole method with BM with something like:\r\n\r\n```\r\nout = []\r\nindices = []\r\n\r\nfor arr, locs in enumerate(self):\r\n    if is_bool_dtype(arr.dtype) or (is_object_dtype(arr.dtype) and lib.is_bool_array(arr.ravel(\"K\"))):\r\n         [...]\r\n\r\ndef __iter__(self): # <-- AM\r\n    for i, arr in enumerate(self.arrays):\r\n        yield i, arr\r\n\r\ndef __iter__(self):  # <-- BM\r\n    for blk in self.blocks:\r\n        yield blk.values, blk.mgr_locs\r\n```",
        "createdAt" : "2021-02-15T18:44:04Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "18daaf8c-30cf-4ec0-b582-722179eeef35",
        "parentId" : "0c6684ff-161b-40da-b76e-d6629c8cd6d1",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The BlockManager uses different logic to determine if a Block is boolean or not, i.e. `Block.is_bool` (and for this case also splits up object blocks, which it doesn't do for get_numeric_data) \r\n(so with the current implementation, there is not much to share)",
        "createdAt" : "2021-02-15T19:01:41Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "698f51cd-9a32-446f-ad1e-dcd0652e943c",
        "parentId" : "0c6684ff-161b-40da-b76e-d6629c8cd6d1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "OK, thanks for taking a look",
        "createdAt" : "2021-02-16T15:42:15Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dcef95beed64b76f4d933f9ae0148c044263bc5",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +527,531 @@        return type(self)(arrays, new_axes, verify_integrity=False)\n\n    def get_bool_data(self, copy: bool = False) -> ArrayManager:\n        \"\"\"\n        Select columns that are bool-dtype and object-dtype columns that are all-bool."
  },
  {
    "id" : "c2ff0336-0874-43b1-be48-82c7c7b4a870",
    "prId" : 39719,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39719#pullrequestreview-592120273",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64632650-63c1-4fa3-a010-cd1e995ff1f7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are both of these cases covered in tests? (ignore_failures & not)",
        "createdAt" : "2021-02-17T00:15:12Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dc15be07-8759-4539-ac5f-c7cf436fbc6b",
        "parentId" : "64632650-63c1-4fa3-a010-cd1e995ff1f7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes (BlockManager has the same functionality, and there are several existing tests that cover this aspect)",
        "createdAt" : "2021-02-17T12:01:44Z",
        "updatedAt" : "2021-02-24T20:49:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dcef95beed64b76f4d933f9ae0148c044263bc5",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +246,250 @@        index = Index._simple_new(np.array([None], dtype=object))  # placeholder\n        if ignore_failures:\n            indexer = np.array(result_indices)\n            columns = self.items[result_indices]\n        else:"
  }
]