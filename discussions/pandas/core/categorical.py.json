[
  {
    "id" : "ca9d61ef-b501-418d-a1fc-862cbeea99da",
    "prId" : 7217,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3667ca01-c807-4be3-afa5-5882f8eb1c1c",
        "parentId" : null,
        "authorId" : "95fe324c-e973-4cca-9b8d-19248c6f5e92",
        "body" : "Is that intended that this call does _NOT_ include `skipna`? Quick fix would be to remove the keyword arg in the `_reduce(...)` definition.\n",
        "createdAt" : "2014-06-24T13:03:17Z",
        "updatedAt" : "2014-07-14T21:17:33Z",
        "lastEditedBy" : "95fe324c-e973-4cca-9b8d-19248c6f5e92",
        "tags" : [
        ]
      },
      {
        "id" : "60f4b49c-f092-461d-aa5b-11301486f626",
        "parentId" : "3667ca01-c807-4be3-afa5-5882f8eb1c1c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "that's a 'standard' call, so its passed as an option (e.g. you can do `s.sum(skipna=False)` if you wanted to (for a regular series). We _could_ pass it to the supported reducers (e.g. min/max). \n\nShould we?\n",
        "createdAt" : "2014-06-24T13:10:34Z",
        "updatedAt" : "2014-07-14T21:17:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a092ac13-a0d5-4c34-960b-817bfc34f910",
        "parentId" : "3667ca01-c807-4be3-afa5-5882f8eb1c1c",
        "authorId" : "95fe324c-e973-4cca-9b8d-19248c6f5e92",
        "body" : "I think this is the same as https://github.com/pydata/pandas/issues/4147\n-> If that gets fixed this part should also get fixed...\n\nIMO it should get fixed, as I expected not to get a `inf` from `min()/max` \n",
        "createdAt" : "2014-06-24T13:53:12Z",
        "updatedAt" : "2014-07-14T21:17:33Z",
        "lastEditedBy" : "95fe324c-e973-4cca-9b8d-19248c6f5e92",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea0a13c172761348d08285a19ebf731cdabb2db3",
    "line" : 842,
    "diffHunk" : "@@ -1,1 +803,807 @@        if func is None:\n            raise TypeError(\"Categorical cannot perform the operation {op}\".format(op=name))\n        return func(numeric_only=numeric_only, **kwds)\n\n    def min(self, numeric_only=None, **kwargs):"
  },
  {
    "id" : "039a3548-44b9-423f-b161-151056f98619",
    "prId" : 8153,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a84891c-746f-46ee-af06-be639cad0f25",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "don't you have to prefix with the class? @jorisvandenbossche ?\n",
        "createdAt" : "2014-09-23T15:03:35Z",
        "updatedAt" : "2014-09-25T17:45:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a708b5d0-4f37-46c8-a2df-1710c78e0dc0",
        "parentId" : "5a84891c-746f-46ee-af06-be639cad0f25",
        "authorId" : "95fe324c-e973-4cca-9b8d-19248c6f5e92",
        "body" : "The links are generated. Not sure what is the best way to link to the cat accessor vs to the categorical (`doc=func.__doc__.replace(...)`?)\n",
        "createdAt" : "2014-09-23T15:19:36Z",
        "updatedAt" : "2014-09-25T17:45:48Z",
        "lastEditedBy" : "95fe324c-e973-4cca-9b8d-19248c6f5e92",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f282da6aac82fabf0749933fe8259a8bd6f33a6",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +98,102 @@rename_categories\nreorder_categories\nadd_categories\nremove_categories\nremove_unused_categories"
  },
  {
    "id" : "556ce246-f833-43dd-b878-f0cd67c42d24",
    "prId" : 8153,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbae9a35-f42c-48a6-b5f7-505a96730d90",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pls create an issue for this deprecation (and i'll link to the deprecation page)\n",
        "createdAt" : "2014-09-23T15:04:27Z",
        "updatedAt" : "2014-09-25T17:45:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "64e4393f-f243-42a6-8e79-3aee95385df7",
        "parentId" : "dbae9a35-f42c-48a6-b5f7-505a96730d90",
        "authorId" : "95fe324c-e973-4cca-9b8d-19248c6f5e92",
        "body" : "done\n",
        "createdAt" : "2014-09-23T21:55:07Z",
        "updatedAt" : "2014-09-25T17:45:48Z",
        "lastEditedBy" : "95fe324c-e973-4cca-9b8d-19248c6f5e92",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f282da6aac82fabf0749933fe8259a8bd6f33a6",
    "line" : 208,
    "diffHunk" : "@@ -1,1 +204,208 @@            name = getattr(values, 'name', None)\n\n        # TODO: Remove after deprecation period in 2017/ after 0.18\n        if not levels is None:\n            warn(\"Creating a 'Categorical' with 'levels' is deprecated, use 'categories' instead\","
  },
  {
    "id" : "5eeac30b-d064-4bb4-91cf-11f33565a219",
    "prId" : 9331,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f40361c1-98a5-405a-b487-5e8ae0fa2500",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "still need the nan insertion otherwise the -1 code would have meaning \n",
        "createdAt" : "2015-01-23T07:04:35Z",
        "updatedAt" : "2015-02-12T03:33:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "88efca84-680d-439a-ac58-f44cec0d4038",
        "parentId" : "f40361c1-98a5-405a-b487-5e8ae0fa2500",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "@jreback This is fed into `take_1d` which fills -1 with `fill_value`... which is happily exactly what we want here to handle NaN. That behavior is unchanged from before (and still tested). So I think this is OK?\n",
        "createdAt" : "2015-01-23T07:09:38Z",
        "updatedAt" : "2015-02-12T03:33:11Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "1569696c-1543-4c80-ae60-12b8e27d1799",
        "parentId" : "f40361c1-98a5-405a-b487-5e8ae0fa2500",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ahh yes that's right\nok then \n",
        "createdAt" : "2015-01-23T07:11:40Z",
        "updatedAt" : "2015-02-12T03:33:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1ef12ff5-4435-44d5-b065-9973254d19dc",
        "parentId" : "f40361c1-98a5-405a-b487-5e8ae0fa2500",
        "authorId" : "95fe324c-e973-4cca-9b8d-19248c6f5e92",
        "body" : "Afaik unique sorts nan last...\n",
        "createdAt" : "2015-01-23T07:12:53Z",
        "updatedAt" : "2015-02-12T03:33:11Z",
        "lastEditedBy" : "95fe324c-e973-4cca-9b8d-19248c6f5e92",
        "tags" : [
        ]
      },
      {
        "id" : "26f9ce6f-b93a-4f84-870d-0562f9b52e85",
        "parentId" : "f40361c1-98a5-405a-b487-5e8ae0fa2500",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "@JanSchulz Nope, unique1d does not sort NaN last. I modified the test involving NaNs to make sure.\n",
        "createdAt" : "2015-01-23T08:10:03Z",
        "updatedAt" : "2015-02-12T03:33:11Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "f233412d-f005-4af1-8583-bf60d5061515",
        "parentId" : "f40361c1-98a5-405a-b487-5e8ae0fa2500",
        "authorId" : "95fe324c-e973-4cca-9b8d-19248c6f5e92",
        "body" : "ok, `s.unique()` also not. Seems that sorting an nan handling is only done in numpy...\n\n```\ns = pd.Series([1,2,3,4,5,np.nan,6,1,2,3,4])\ns.unique()\narray([  1.,   2.,   3.,   4.,   5.,  nan,   6.])\n```\n\nSorry for the noise...\n",
        "createdAt" : "2015-01-23T08:25:16Z",
        "updatedAt" : "2015-02-12T03:33:11Z",
        "lastEditedBy" : "95fe324c-e973-4cca-9b8d-19248c6f5e92",
        "tags" : [
        ]
      }
    ],
    "commit" : "b787bf87906d6bac5cd3f13151e583302f44f85d",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1394,1398 @@        unique values : array\n        \"\"\"\n        from pandas.core.nanops import unique1d\n        # unlike np.unique, unique1d does not sort\n        unique_codes = unique1d(self.codes)"
  }
]