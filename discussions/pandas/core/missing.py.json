[
  {
    "id" : "8ba9a152-e69d-4cb7-a92d-32c4df42feea",
    "prId" : 16429,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16429#pullrequestreview-41897937",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e3c685d-99f6-4065-ac4a-ac6179db6c43",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@TomAugspurger not sure if this is where the perf issue is (maybe because not this IS hit in all code).\r\n\r\nthese can be done via Index set ops\r\n\r\nIOW\r\n\r\n```\r\nstart_nans = Index(range(.....))\r\n\r\nviolate_limit = start_nans.union(Index(_interp_limit(invalid, limit, 0))).sort_values()\r\n```\r\nfor example",
        "createdAt" : "2017-06-02T22:38:05Z",
        "updatedAt" : "2017-06-02T22:38:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3d9cb38f0d9297a568d33f5a2759eeb9bb06850",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +189,193 @@    # each possible limit_direction\n    if limit_direction == 'forward':\n        violate_limit = sorted(start_nans |\n                               set(_interp_limit(invalid, limit, 0)))\n    elif limit_direction == 'backward':"
  },
  {
    "id" : "4fa5fdb5-9027-49dc-a854-f46ca99b55b7",
    "prId" : 24536,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24536#pullrequestreview-188567659",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d005b3ec-4f7c-4f7e-8197-94653036dcc9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is something failing? i agree this is probably the soln. but likely these are converted prior to calling this (to i8)",
        "createdAt" : "2019-01-01T20:12:14Z",
        "updatedAt" : "2019-01-01T21:08:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "39c073db-752d-414f-ad80-dc0ecb316046",
        "parentId" : "d005b3ec-4f7c-4f7e-8197-94653036dcc9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Presumably; I haven’t looked at the series code to see how it handles this.  Enough core.missing mysteries have popped up today I’ll be giving them a close look after the RC",
        "createdAt" : "2019-01-01T21:03:28Z",
        "updatedAt" : "2019-01-01T21:08:36Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "fdf0e77c-335c-422b-9b1d-bf43a8da03a5",
        "parentId" : "d005b3ec-4f7c-4f7e-8197-94653036dcc9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sure",
        "createdAt" : "2019-01-01T21:05:15Z",
        "updatedAt" : "2019-01-01T21:08:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "52e01ae3cfa3f92fa75bd66a7bc7d4fb85f280ff",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +483,487 @@        _method = algos.pad_inplace_object\n    elif is_timedelta64_dtype(values):\n        # NaTs are treated identically to datetime64, so we can dispatch\n        #  to that implementation\n        _method = _pad_1d_datetime"
  },
  {
    "id" : "bfdbecb7-2b1f-40f8-97ca-00eee2b2531c",
    "prId" : 24652,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24652#pullrequestreview-189636085",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b023aee-3d29-46f8-85e8-12bd304453db",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no idea why this would be. Would really try to be consistent. I think copy is more sematically correct for these types of routines, as we can't always guaranteee inplace behavior (meaning we *may* have to copy sometimes). So this may have some uncessary copying going on, but willing to trade that for better semantics.",
        "createdAt" : "2019-01-06T16:13:49Z",
        "updatedAt" : "2019-01-06T16:13:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2da3861e-089f-4a48-9be9-7438e3d8d897",
        "parentId" : "7b023aee-3d29-46f8-85e8-12bd304453db",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, this came up when testing fillna from #24024.  In at least a few of the places where this is used, we make a copy before calling, so we can trim some overhead by being a bit more careful.\r\n\r\nI'm going to try to handle this more systematically at the same time I take a look at #24537.  Would like to keep the comment there for the time being; I think this was just not noticed previously.",
        "createdAt" : "2019-01-06T16:27:14Z",
        "updatedAt" : "2019-01-06T16:27:14Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "66fd04fc-1342-4edb-b6a6-4233e47d38f2",
        "parentId" : "7b023aee-3d29-46f8-85e8-12bd304453db",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "absolutely. I am ok with inplace too. Its just then the guarantee to the caller will have to be stronger. We probably don't have enough tests in place to make a strong statement either way, but go for it. This looks like a nice re-factor, so could address the inplace/copy question later (as long as we are pretty sure its not actualy mutating things in the caller, unless its specifically allowed).",
        "createdAt" : "2019-01-06T16:32:21Z",
        "updatedAt" : "2019-01-06T16:32:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e42bc27ba9a43ef15cb50b64e81c48a1099739ae",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +457,461 @@    Cast values to a dtype that algos.pad and algos.backfill can handle.\n    \"\"\"\n    # TODO: for int-dtypes we make a copy, but for everything else this\n    #  alters the values in-place.  Is this intentional?\n"
  },
  {
    "id" : "3a945792-f4b5-4b58-9a26-ac453729951a",
    "prId" : 27628,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27628#pullrequestreview-269259482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "290008f7-c347-447a-af3f-ce408644e2a9",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can this fail if not all the values are filled (e.g. with `limit`)?",
        "createdAt" : "2019-07-29T18:09:35Z",
        "updatedAt" : "2019-07-29T18:10:54Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "979da3d1-c737-4957-8378-f4f72d24f51c",
        "parentId" : "290008f7-c347-447a-af3f-ce408644e2a9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I don't see why it would.  This is functionally the same as what we're doing now, just in a more-correct place.",
        "createdAt" : "2019-07-29T19:02:07Z",
        "updatedAt" : "2019-07-29T19:02:07Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "63491f51-ac54-4959-b7dd-ebc1c02189ad",
        "parentId" : "290008f7-c347-447a-af3f-ce408644e2a9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this likely should be for .kind in ['M', 'm']",
        "createdAt" : "2019-07-31T12:14:58Z",
        "updatedAt" : "2019-07-31T12:14:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bcafc328-9db6-4d83-8156-63e2e0cbc6a9",
        "parentId" : "290008f7-c347-447a-af3f-ce408644e2a9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "or even better this should be is_extension_dtype then cast back",
        "createdAt" : "2019-07-31T12:15:32Z",
        "updatedAt" : "2019-07-31T12:15:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b01520e3-a098-4626-bafa-a4a66cae23c6",
        "parentId" : "290008f7-c347-447a-af3f-ce408644e2a9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "its not tz case we're catching here, it's regular datetime64",
        "createdAt" : "2019-07-31T13:31:09Z",
        "updatedAt" : "2019-07-31T13:31:09Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "6d195cc2-c651-437c-beea-7318d5967f64",
        "parentId" : "290008f7-c347-447a-af3f-ce408644e2a9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k",
        "createdAt" : "2019-07-31T20:21:30Z",
        "updatedAt" : "2019-07-31T20:21:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "302d934ae9d57d717d15fe71eaa4eb7fc6bc9c83",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +494,498 @@    if orig_values.dtype.kind == \"M\":\n        # convert float back to datetime64\n        values = values.astype(orig_values.dtype)\n\n    return values"
  },
  {
    "id" : "1a66f338-579d-4e10-b95b-f5c6459cc5fb",
    "prId" : 29400,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29400#pullrequestreview-311386342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd859e5d-a46f-41e3-b13c-e3c051fc4722",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "I realize this is the existing behavior, but does it make sense to change this to a `ValueError` instead?  That seems more consistent with how we've been validating these types of parameters elsewhere.",
        "createdAt" : "2019-11-04T21:58:35Z",
        "updatedAt" : "2019-11-04T21:59:27Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b92f23e29d4122260770d5b1487a326a3001d9d",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +143,147 @@    int or None\n    \"\"\"\n    assert how in [\"first\", \"last\"]\n\n    if len(values) == 0:  # early stop"
  },
  {
    "id" : "66997e28-85b4-464d-9238-32f120a3e612",
    "prId" : 33670,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33670#pullrequestreview-396872898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3db99fde-0d22-43c0-b631-d2f45bbd84ed",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Could this just be directly assigned to `alt_methods`? Something similar to\r\n\r\n`alt_methods[\"cubicspline\"] = interpolate.CubicSpline(x, y, **kwargs)`",
        "createdAt" : "2020-04-20T21:20:20Z",
        "updatedAt" : "2020-04-23T14:42:03Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "b04a8da1-370f-4c1b-aa78-afcc5b3a62ad",
        "parentId" : "3db99fde-0d22-43c0-b631-d2f45bbd84ed",
        "authorId" : "7de5c47f-8231-483f-b0e2-8de1dddf2e23",
        "body" : "Thanks. Like for `interpolate.Akima1DInterpolator`, `scipy.interpolate.CubicHermiteSpline` returns a `scipy.interpolate.PPoly` instance so, if further derivatives are needed now or in the future (like in `_akima_interpolate` or `_from_derivatives` methods), the full method could be a better approach. If so, with adding support for extracting derivatives for compatibility with those methods, it would be:\r\n```\r\n    if der == 0:\r\n        return P(x)\r\n    elif interpolate._isscalar(der):\r\n        return P(x, der=der)\r\n    else:\r\n        return [P(x, nu) for nu in der]\r\n```\r\nas in `_akima_interpolate`, instead of just returning the evaluated polynomial `P(x)`. Any preference?",
        "createdAt" : "2020-04-20T22:40:21Z",
        "updatedAt" : "2020-04-23T14:42:03Z",
        "lastEditedBy" : "7de5c47f-8231-483f-b0e2-8de1dddf2e23",
        "tags" : [
        ]
      },
      {
        "id" : "5ce13e9e-185e-4685-8667-465059916dab",
        "parentId" : "3db99fde-0d22-43c0-b631-d2f45bbd84ed",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Ah I see. Okay, how you have it looks good for now if we want to extend to support derivatives in the future",
        "createdAt" : "2020-04-20T22:42:38Z",
        "updatedAt" : "2020-04-23T14:42:03Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "329474b8-393b-4731-91ba-f86f17b6c15a",
        "parentId" : "3db99fde-0d22-43c0-b631-d2f45bbd84ed",
        "authorId" : "7de5c47f-8231-483f-b0e2-8de1dddf2e23",
        "body" : "OK, thanks!",
        "createdAt" : "2020-04-20T23:07:06Z",
        "updatedAt" : "2020-04-23T14:42:03Z",
        "lastEditedBy" : "7de5c47f-8231-483f-b0e2-8de1dddf2e23",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fee8c081e5f3c7723ea401b1aafd2bdad935f6d",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +549,553 @@    from scipy import interpolate\n\n    P = interpolate.CubicSpline(\n        xi, yi, axis=axis, bc_type=bc_type, extrapolate=extrapolate\n    )"
  },
  {
    "id" : "79b7b045-06a6-4e75-a7e9-05711028bb8e",
    "prId" : 33670,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33670#pullrequestreview-396889028",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d923a1a-1365-4ce7-852b-cec6942225a9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i don’t think we put a doc string for others\nwe should either link them instead ",
        "createdAt" : "2020-04-20T22:50:54Z",
        "updatedAt" : "2020-04-23T14:42:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "820b9b4d-58e2-40d3-ad81-244a771ee67a",
        "parentId" : "5d923a1a-1365-4ce7-852b-cec6942225a9",
        "authorId" : "7de5c47f-8231-483f-b0e2-8de1dddf2e23",
        "body" : "Do you mean to remove the parameters of the docstring here that are already present in the SciPy method? I am following the previous logic of the methods `_from_derivatives` and `_akima_interpolate`. I agree that the doc for the `bc_type` parameter is quite verbose and it could be substituted by a link to the SciPy method doc. However, that same parameter (the control of boundary conditions) is what makes this function different from the simpler alternative using `scipy.interpolate.interp1d `with cubic splines and it could be worth having it explicitly in the docs. What do you think? Thanks.",
        "createdAt" : "2020-04-20T23:06:08Z",
        "updatedAt" : "2020-04-23T14:42:03Z",
        "lastEditedBy" : "7de5c47f-8231-483f-b0e2-8de1dddf2e23",
        "tags" : [
        ]
      },
      {
        "id" : "0687873a-f663-473b-be8b-f52aa5379573",
        "parentId" : "5d923a1a-1365-4ce7-852b-cec6942225a9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we have doc strings for other interpolate methods that are just direct scipy calls?\n\n",
        "createdAt" : "2020-04-20T23:18:18Z",
        "updatedAt" : "2020-04-23T14:42:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6c53f3b1-51b8-42aa-a3db-4fcb4333c407",
        "parentId" : "5d923a1a-1365-4ce7-852b-cec6942225a9",
        "authorId" : "7de5c47f-8231-483f-b0e2-8de1dddf2e23",
        "body" : "No, but as with `_from_derivatives` and `_akima_interpolate`, this is not just a direct SciPy call (see resolved conversation below with @mroeschke for details), that's why I added the doc string too.",
        "createdAt" : "2020-04-20T23:29:56Z",
        "updatedAt" : "2020-04-23T14:42:03Z",
        "lastEditedBy" : "7de5c47f-8231-483f-b0e2-8de1dddf2e23",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fee8c081e5f3c7723ea401b1aafd2bdad935f6d",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +477,481 @@\n\ndef _cubicspline_interpolate(xi, yi, x, axis=0, bc_type=\"not-a-knot\", extrapolate=None):\n    \"\"\"\n    Convenience function for cubic spline data interpolator."
  },
  {
    "id" : "a7586f42-b20d-4e6f-89e1-5cf2b55d9f39",
    "prId" : 36488,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36488#pullrequestreview-594889797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "219859c6-5050-406b-9f4c-314607cfc95e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in other places we just *pass* the mask directly, e.g. `mask: Optional[np.ndarray]= None` can we do that here? (i think integer EA ops passing to nanops)",
        "createdAt" : "2020-09-21T23:35:53Z",
        "updatedAt" : "2020-09-21T23:36:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f4071770-1034-46b2-bb28-9e6ca0e8d86f",
        "parentId" : "219859c6-5050-406b-9f4c-314607cfc95e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "no, because just before calling this function we check for mask=None and calculate it in that case (and that check has to come before calling this func)",
        "createdAt" : "2020-09-21T23:38:53Z",
        "updatedAt" : "2020-09-21T23:38:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "db04d550-448f-46df-880b-f9596b73fa8b",
        "parentId" : "219859c6-5050-406b-9f4c-314607cfc95e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right, so simply pass the mask in, right?",
        "createdAt" : "2020-09-21T23:42:37Z",
        "updatedAt" : "2020-09-21T23:42:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "04dfa989-a0eb-41e3-9e1a-cbb10fb5476e",
        "parentId" : "219859c6-5050-406b-9f4c-314607cfc95e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "No.  The issue is that `mask` and `isna(values)` can be different, in particular for the period-dtype case where i8 values get passed.\r\n\r\nI wouldn't worry about this too much.  I mentioned in a recent PR an upcoming implementation of actually-inplace fillna, and that is going to end up getting rid of this function entirely (since it turns out the ensure_float64 branch here is not needed/reached)",
        "createdAt" : "2020-09-21T23:46:52Z",
        "updatedAt" : "2020-09-21T23:46:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f543f18f-6f7b-483e-a1e5-b1629ba2a992",
        "parentId" : "219859c6-5050-406b-9f4c-314607cfc95e",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "what's the status on this?",
        "createdAt" : "2021-02-21T16:02:24Z",
        "updatedAt" : "2021-02-21T16:02:24Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "3e034978-dd3f-4f40-b763-6a4b231b13ca",
        "parentId" : "219859c6-5050-406b-9f4c-314607cfc95e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "my Sep 2020 attempts to implement actually-inplace fillna didnt work out (something in the cython i never managed to track down) but i still think it is viable",
        "createdAt" : "2021-02-21T22:42:04Z",
        "updatedAt" : "2021-02-21T22:42:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d716d18600e7073a981cdc32a5cb9171fcb33ef",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +588,592 @@\n\ndef _cast_values_for_fillna(values, dtype: DtypeObj, has_mask: bool):\n    \"\"\"\n    Cast values to a dtype that algos.pad and algos.backfill can handle."
  }
]