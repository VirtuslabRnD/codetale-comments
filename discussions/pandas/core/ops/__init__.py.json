[
  {
    "id" : "44983312-8bd6-4157-b027-10824b21f49b",
    "prId" : 27238,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27238#pullrequestreview-258505263",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "091d23e5-7330-466b-86ee-615a1a2da1f3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "would it be worth it to move this to ``ops.py`` and then import only public functions to ``__init__.py``?",
        "createdAt" : "2019-07-05T13:35:30Z",
        "updatedAt" : "2019-07-05T13:35:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0f11f85e-0e7e-4618-b329-94fce0fa203c",
        "parentId" : "091d23e5-7330-466b-86ee-615a1a2da1f3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think before long, yes.  ATM I've got several branches touching ops so I decided to keep this simple for rebasing purposes.",
        "createdAt" : "2019-07-05T14:26:15Z",
        "updatedAt" : "2019-07-05T14:26:15Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "952a71dd-fc9a-401a-a456-db9a1e6d1938",
        "parentId" : "091d23e5-7330-466b-86ee-615a1a2da1f3",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "When moving things, I much prefer moving things at once to a file you think to have it longer term. Moving files are annoying in git history ;)",
        "createdAt" : "2019-07-05T17:57:50Z",
        "updatedAt" : "2019-07-05T17:57:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f858d5e0ac848dc0deca7e36d3c3535a521a3e4",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +51,55 @@import pandas.core.common as com\nimport pandas.core.missing as missing\n\nfrom .roperator import (  # noqa:F401\n    radd,"
  },
  {
    "id" : "1e5ba7f4-914a-478f-ab08-1a3fcc8ab777",
    "prId" : 27735,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27735#pullrequestreview-270514855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58522803-0d8b-4855-99d0-e61e1288b92d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use absolute imports",
        "createdAt" : "2019-08-04T10:47:19Z",
        "updatedAt" : "2019-08-05T14:26:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1333ad10-026c-4591-906f-0ceac2cda69a",
        "parentId" : "58522803-0d8b-4855-99d0-e61e1288b92d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think we're holding off on these until the `import pandas as pd` is removed from this file",
        "createdAt" : "2019-08-04T15:34:01Z",
        "updatedAt" : "2019-08-05T14:26:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5f9046b4-cf39-4a4d-a092-5cd078e331ab",
        "parentId" : "58522803-0d8b-4855-99d0-e61e1288b92d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "that's orthogonal. these should not have been like this in the first place.",
        "createdAt" : "2019-08-04T21:08:47Z",
        "updatedAt" : "2019-08-05T14:26:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "08b81ba2-d5fc-4498-95ee-f0b5e8725880",
        "parentId" : "58522803-0d8b-4855-99d0-e61e1288b92d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "updated",
        "createdAt" : "2019-08-04T21:18:17Z",
        "updatedAt" : "2019-08-05T14:26:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8a4a7a7b-6a00-4ba6-b93c-be9960a42df6",
        "parentId" : "58522803-0d8b-4855-99d0-e61e1288b92d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "thxs, ping on green.",
        "createdAt" : "2019-08-04T21:21:03Z",
        "updatedAt" : "2019-08-05T14:26:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a72b4388a411e76a44b30de4a24309665377689a",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +56,60 @@    _make_flex_doc,\n    _op_descriptions,\n)\nfrom pandas.core.ops.invalid import invalid_comparison\nfrom pandas.core.ops.roperator import (  # noqa:F401"
  },
  {
    "id" : "3c4acf7e-d736-48f1-81da-083c771acdec",
    "prId" : 27739,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27739#pullrequestreview-270515493",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d34a215-1476-4053-b9cb-b6d5ad785560",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "rather than this can you make a safe method that deals with null frequency, this is a bit odd",
        "createdAt" : "2019-08-04T21:11:35Z",
        "updatedAt" : "2019-08-04T21:11:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9f916a67-efb3-4696-83f7-c2adffee630e",
        "parentId" : "9d34a215-1476-4053-b9cb-b6d5ad785560",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This basically is the safe method to deal with null frequency.  I think there will be room to simplify it after we merge dispatch_to_index_op into dispatch_to_extension_op\r\n\r\n(I agree that I'd prefer these methods not need to know about Series)",
        "createdAt" : "2019-08-04T21:38:39Z",
        "updatedAt" : "2019-08-04T21:38:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "189ba669-2d47-44e6-9c62-6d9f45e3f210",
        "parentId" : "9d34a215-1476-4053-b9cb-b6d5ad785560",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok fair enough, maybe make an issue about this? (or just add to your list) :->",
        "createdAt" : "2019-08-04T21:39:49Z",
        "updatedAt" : "2019-08-04T21:39:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "83e7da60e9b1f6db342acb3c049b83534b5f6e71",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +167,171 @@            # Note: we use Series instead of TimedeltaIndex to avoid having\n            #  to worry about catching NullFrequencyError.\n            return pd.Series(right)\n\n        # In particular non-nanosecond timedelta64 needs to be cast to"
  },
  {
    "id" : "f9083305-bc01-46a4-9a1a-d5d5ac071974",
    "prId" : 27769,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27769#pullrequestreview-275165273",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70a72861-8ebc-4b98-91df-b30ee9b11df4",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jbrockmendel maybe by accident due to several PRs that were related / rebase after each other, but this seemingly introduced again what you removed in https://github.com/pandas-dev/pandas/pull/27873 (although the other PR was merged later ..)\r\n\r\nNo matter how it happened ;), the check is still in master ..",
        "createdAt" : "2019-08-14T20:09:11Z",
        "updatedAt" : "2019-08-14T20:09:11Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "5b7aa42c-c1ff-46b5-8e7a-8d79e97f4dfd",
        "parentId" : "70a72861-8ebc-4b98-91df-b30ee9b11df4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yah this looks like a rebase screwup, will address",
        "createdAt" : "2019-08-14T21:37:58Z",
        "updatedAt" : "2019-08-14T21:37:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed00790d27aa27598bed77328f49706af62c7d83",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1044,1048 @@            is_list_like(other)\n            and len(other) != len(self)\n            and not isinstance(other, (set, frozenset))\n        ):\n            raise ValueError(\"Lengths must match\")"
  },
  {
    "id" : "09274a84-4d68-400b-8bbb-1f02ac11ee0a",
    "prId" : 27803,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27803#pullrequestreview-272824905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "baa51682-ca7a-4253-9ccf-c37fa062a48a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In what case can `res_values` have a name? (that seems the only reason that `result` can have a name)\r\n\r\nI think we should try to avoid doing this rename in general (it makes yet another copy of the data, which could of course also be avoided by using an inplace method, but I would rather avoid doing the rename in general)",
        "createdAt" : "2019-08-08T10:20:04Z",
        "updatedAt" : "2019-08-08T12:39:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9c4dcd05-b93a-4ddb-879a-6f9ebde74203",
        "parentId" : "baa51682-ca7a-4253-9ccf-c37fa062a48a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I also think that is the wrong comment (there were multiple similar in the original code, but they all differed slightly. Here it is not about result.name but self.name)",
        "createdAt" : "2019-08-08T12:51:34Z",
        "updatedAt" : "2019-08-08T12:51:35Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "227941f4-4e6f-44ba-8992-ee5cbf8d9e46",
        "parentId" : "baa51682-ca7a-4253-9ccf-c37fa062a48a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "could put logic for check-if-rename-is-necessary into something resembling _construct_result",
        "createdAt" : "2019-08-08T15:22:01Z",
        "updatedAt" : "2019-08-08T15:22:01Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8ed60738-4439-4199-bf2f-60262f42c362",
        "parentId" : "baa51682-ca7a-4253-9ccf-c37fa062a48a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`__finalize__` is used to propagate metadata of subclasses, so I suppose we should keep it. In this case, we somehow need a way to signal to finalize to not set the name again ..",
        "createdAt" : "2019-08-08T20:39:35Z",
        "updatedAt" : "2019-08-08T20:39:35Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "d095d608274aa0d01fa7498b49c2640bd3d58d5d",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +1104,1108 @@        # rename is needed in case res_name is None and result.name\n        #  is not.\n        return finalizer(result).rename(res_name)\n\n    wrapper.__name__ = op_name"
  },
  {
    "id" : "74e34cd2-63fd-4f83-b88e-9aaf59ab4159",
    "prId" : 27803,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27803#pullrequestreview-273216340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b65c8ed-2909-45d1-8c9d-cb7c80422fb8",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Where is this coming from (a test?) I don't see this check in the existing code, it feels a bad idea to introduce such a check if we don't know for which reason ",
        "createdAt" : "2019-08-08T12:37:26Z",
        "updatedAt" : "2019-08-08T12:39:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c78e6e11-aa97-4e9e-9ba2-2e529713f37a",
        "parentId" : "4b65c8ed-2909-45d1-8c9d-cb7c80422fb8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "a test, yes.  I dont know which off the top of my head, but this was needed to maintain existing behavior.  I'd like to change it to maintain/achieve consistency with do things elsewhere.",
        "createdAt" : "2019-08-08T15:20:59Z",
        "updatedAt" : "2019-08-08T15:21:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "87d79a96-c335-49ed-9e82-3abca73fa024",
        "parentId" : "4b65c8ed-2909-45d1-8c9d-cb7c80422fb8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Looks like the test that makes this necessary is in tests.series.test_operators.TestSeriesComparisons.test_comparison_tuples\r\n\r\n```\r\ns = Series([frozenset([1]), frozenset([1, 2])])\r\nresult = s == frozenset([1])\r\n```\r\n\r\nSupported listlikes in object-dtype is a hassle",
        "createdAt" : "2019-08-08T19:45:37Z",
        "updatedAt" : "2019-08-08T19:45:38Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "81b15da4-4b54-4fc1-bd0f-7e387c1e4bda",
        "parentId" : "4b65c8ed-2909-45d1-8c9d-cb7c80422fb8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK, so the frozenset was an example test case, but there might be others that previously worked like that. So I don't think the solution is to add an explicit frozenset check as done now. Do you know how it got through the checks in the previous version?",
        "createdAt" : "2019-08-08T20:40:41Z",
        "updatedAt" : "2019-08-08T20:40:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4b46da70-669a-4fa0-9f3d-9c09367879ff",
        "parentId" : "4b65c8ed-2909-45d1-8c9d-cb7c80422fb8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "previously the length check was only done on ndarray/Index/Series",
        "createdAt" : "2019-08-08T20:56:33Z",
        "updatedAt" : "2019-08-08T20:56:34Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "1d13be3e-9e65-455e-97d9-4364e961e839",
        "parentId" : "4b65c8ed-2909-45d1-8c9d-cb7c80422fb8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> previously the length check was only done on ndarray/Index/Series\r\n\r\nThe let's go back to that logic? (or eg at least when the dtype is object?) As this will now break comparison of object dtypes that hold list-like scalar objects\r\n",
        "createdAt" : "2019-08-09T08:27:58Z",
        "updatedAt" : "2019-08-09T08:27:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d2f4b754-b0e4-4154-bb49-ae79606f390f",
        "parentId" : "4b65c8ed-2909-45d1-8c9d-cb7c80422fb8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sure.  we should have a larger discussion on how we can handle this more consistently across the codebase",
        "createdAt" : "2019-08-09T15:39:54Z",
        "updatedAt" : "2019-08-09T15:39:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d095d608274aa0d01fa7498b49c2640bd3d58d5d",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1056,1060 @@            and not isinstance(other, frozenset)\n        ):\n            # TODO: why are we treating len-1 frozenset differently?\n            raise ValueError(\"Lengths must match to compare\")\n"
  },
  {
    "id" : "e0a996cc-a8e7-48c6-81c5-f449d1cc35a4",
    "prId" : 27803,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27803#pullrequestreview-272476541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4a14eec-fabf-4f83-ac82-e8bc6065e485",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is the `extract_numpy=True` needed?",
        "createdAt" : "2019-08-08T12:39:32Z",
        "updatedAt" : "2019-08-08T12:39:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "d095d608274aa0d01fa7498b49c2640bd3d58d5d",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +1091,1095 @@\n        else:\n            lvalues = extract_array(self, extract_numpy=True)\n            rvalues = extract_array(other, extract_numpy=True)\n"
  },
  {
    "id" : "f40698af-55d6-4415-8916-261e90453f2e",
    "prId" : 27803,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27803#pullrequestreview-272553260",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6e0db17-da72-4477-9b1a-65b519aec30a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is related to the renaming issue I commented about below. \r\nIIUC, the rename is needed because the finalize sets back the original Series name, which might not be desired. \r\nI think it would be good to make that clearer (eg in the comments)\r\n\r\n> shouldn't we be applying finalize whenever not isinstance(other, ABCSeries)?\r\n\r\nYes, that seems correct to me",
        "createdAt" : "2019-08-08T13:01:09Z",
        "updatedAt" : "2019-08-08T13:01:09Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "d095d608274aa0d01fa7498b49c2640bd3d58d5d",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1034,1038 @@        # TODO: shouldn't we be applying finalize whenever\n        #  not isinstance(other, ABCSeries)?\n        finalizer = (\n            lambda x: x.__finalize__(self)\n            if isinstance(other, (np.ndarray, ABCIndexClass))"
  },
  {
    "id" : "e4caabe8-6d53-4942-9016-13e7b6d40c9d",
    "prId" : 27959,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27959#pullrequestreview-277190875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b00c32a3-c28e-4780-839a-ca40922a1021",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is res_values always an array, or can it be a tuple of results, like from divmod?",
        "createdAt" : "2019-08-20T14:02:13Z",
        "updatedAt" : "2019-08-20T14:02:14Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "aaec1d6c-d63f-40e8-a080-ea8b5e63b3d3",
        "parentId" : "b00c32a3-c28e-4780-839a-ca40922a1021",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "in this context its always an array",
        "createdAt" : "2019-08-20T14:04:49Z",
        "updatedAt" : "2019-08-20T14:04:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "748058035c64487d57de9ba7124b3803364d6928",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +822,826 @@            # e.g. SparseArray\n            res_values = dispatch_to_extension_op(op, self, other)\n            return _construct_result(self, res_values, index=self.index, name=res_name)\n\n        elif isinstance(other, (ABCSeries, ABCIndexClass)):"
  },
  {
    "id" : "f72f0fbd-5d73-4944-8b77-9bd316cb8361",
    "prId" : 28049,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28049#pullrequestreview-279804523",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d388257-0582-4f7e-a3e0-67fd02307986",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'm probably missing context here, but why is this done for only timedelta? It seems like this should work for any NumPy dtype?",
        "createdAt" : "2019-08-26T16:18:44Z",
        "updatedAt" : "2019-09-20T14:13:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "8b85f7b3-000c-47cf-92b5-477a3cb19d00",
        "parentId" : "2d388257-0582-4f7e-a3e0-67fd02307986",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "if `b` is a td64 Series with NaT elements, then `b[i]` can `pd.NaT`, which gets treated incorrectly as datetime",
        "createdAt" : "2019-08-26T17:06:15Z",
        "updatedAt" : "2019-09-20T14:13:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "4b83caaa-dbb8-458d-a3c9-e0278f4c8185",
        "parentId" : "2d388257-0582-4f7e-a3e0-67fd02307986",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think that answers \"why do this for timedelta\", but not \"why not do this for other NumPy types\".",
        "createdAt" : "2019-08-26T19:48:16Z",
        "updatedAt" : "2019-09-20T14:13:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "4c98f929-f4b4-4443-9d29-299ce80df5c7",
        "parentId" : "2d388257-0582-4f7e-a3e0-67fd02307986",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Good catch.  In most cases that would be benign, but for some (EA) cases that could involve a cast/copy we dont want",
        "createdAt" : "2019-08-26T20:00:47Z",
        "updatedAt" : "2019-09-20T14:13:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa48c2746bda0909303357296cb77f68aa3a719c",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +499,503 @@        assert right.index.equals(left.columns)\n\n        if right.dtype == \"timedelta64[ns]\":\n            # ensure we treat NaT values as the correct dtype\n            # Note: we do not do this unconditionally as it may be lossy or"
  },
  {
    "id" : "15eedb48-7d80-4f83-b985-7dea05876f38",
    "prId" : 28049,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28049#pullrequestreview-283068583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "912d1047-3392-4430-91b8-fffc998f6575",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what if you *always* do ``right = np.asarray(right)``? (and just use a positional indexer in ``column_op``)",
        "createdAt" : "2019-09-02T21:14:13Z",
        "updatedAt" : "2019-09-20T14:13:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b221ef54-f110-45b5-901e-55197644e5b4",
        "parentId" : "912d1047-3392-4430-91b8-fffc998f6575",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "That will be incorrect for EA dtypes",
        "createdAt" : "2019-09-02T21:29:15Z",
        "updatedAt" : "2019-09-20T14:13:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "56b1ccfd-01a2-481c-9b7d-adbfdedc0397",
        "parentId" : "912d1047-3392-4430-91b8-fffc998f6575",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "(well, not incorrect, but potentially costly)",
        "createdAt" : "2019-09-02T21:29:24Z",
        "updatedAt" : "2019-09-20T14:13:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9333f8a0-2ef1-46a0-b0ae-4bdde3a8f5bd",
        "parentId" : "912d1047-3392-4430-91b8-fffc998f6575",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Given that Jeff and I had the same question, I think that a comment here would be helpful.",
        "createdAt" : "2019-09-03T15:07:01Z",
        "updatedAt" : "2019-09-20T14:13:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "19f7215a-c72f-4661-a07f-250b40c61087",
        "parentId" : "912d1047-3392-4430-91b8-fffc998f6575",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i like this heuristic, will do",
        "createdAt" : "2019-09-03T15:12:56Z",
        "updatedAt" : "2019-09-20T14:13:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa48c2746bda0909303357296cb77f68aa3a719c",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +503,507 @@            # Note: we do not do this unconditionally as it may be lossy or\n            #  expensive for EA dtypes.\n            right = np.asarray(right)\n\n            def column_op(a, b):"
  },
  {
    "id" : "f47d2b87-642f-4e12-b29d-a439ba668ead",
    "prId" : 28049,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28049#pullrequestreview-290058311",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72ad575b-c63a-4b1c-9111-6e516ac6a7ae",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Just to double check - is the second argument to `func` supposed to be accessed via `.iloc` here as well?\r\n\r\nSide note - an alternate approach for by column iteration is to call `df.columns`; not sure if there is a perf difference but have seen both in code base",
        "createdAt" : "2019-09-18T16:30:46Z",
        "updatedAt" : "2019-09-20T14:13:56Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "7b7ce913-40c5-46e7-a7d7-525cd816330b",
        "parentId" : "72ad575b-c63a-4b1c-9111-6e516ac6a7ae",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> is the second argument to func supposed to be accessed via .iloc here as well?\r\n\r\nNo, at this point `b` is an ndarray.\r\n\r\n> Side note - an alternate approach for by column iteration is to call df.columns; not sure if there is a perf difference but have seen both in code base\r\n\r\nThat runs in to difficulties if there are duplicate columns.",
        "createdAt" : "2019-09-18T16:46:07Z",
        "updatedAt" : "2019-09-20T14:13:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3fde756d-53f1-498d-a199-eba16d49ec70",
        "parentId" : "72ad575b-c63a-4b1c-9111-6e516ac6a7ae",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> not sure if there is a perf difference\r\n\r\nMight be worth looking at using `iat` instead of `iloc` for perf",
        "createdAt" : "2019-09-18T16:46:41Z",
        "updatedAt" : "2019-09-20T14:13:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa48c2746bda0909303357296cb77f68aa3a719c",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +506,510 @@\n            def column_op(a, b):\n                return {i: func(a.iloc[:, i], b[i]) for i in range(len(a.columns))}\n\n        else:"
  },
  {
    "id" : "aad76a3c-c1e8-4f6a-96e8-7dbfba205b3b",
    "prId" : 28066,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28066#pullrequestreview-279291201",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ada4fbfa-ecc8-46ef-b7bd-acc170bf8c6e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i don’t recall but do we copy by default?",
        "createdAt" : "2019-08-24T05:38:01Z",
        "updatedAt" : "2019-08-26T21:22:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "89f77592-de18-4d54-a828-b96835e9a8af",
        "parentId" : "ada4fbfa-ecc8-46ef-b7bd-acc170bf8c6e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "no we dont",
        "createdAt" : "2019-08-24T14:17:51Z",
        "updatedAt" : "2019-08-26T21:22:36Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c86bec543a7bd81b10c6d1f107bba9c4b990ac4",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +164,168 @@            obj = obj.astype(\"timedelta64[ns]\")\n            right = np.broadcast_to(obj, shape)\n            return TimedeltaArray(right)\n\n        # In particular non-nanosecond timedelta64 needs to be cast to"
  },
  {
    "id" : "f4d24449-6373-45c4-b6d2-b555548eedaa",
    "prId" : 28081,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28081#pullrequestreview-280516595",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21f13669-e1d7-41fd-861c-b0326b4b6396",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What are the code changes here required for? Separate from the actual test split?",
        "createdAt" : "2019-08-26T23:21:44Z",
        "updatedAt" : "2019-08-26T23:22:54Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e343f3dc-f492-4963-ae99-1ebe3ea3a3f0",
        "parentId" : "21f13669-e1d7-41fd-861c-b0326b4b6396",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The goal is to isolate Series-specific parts of the function from EA/ndarray parts (see also _arith_method_SERIES and _comp_method_SERIES in #28066).",
        "createdAt" : "2019-08-27T00:25:28Z",
        "updatedAt" : "2019-08-27T00:25:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "18145f68-6bd3-488f-aac8-5fc65fa4cc65",
        "parentId" : "21f13669-e1d7-41fd-861c-b0326b4b6396",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is there a way to move the tests without making code changes? I'm admittedly not very well versed with this code so I might be missing something simple, but I think test and code changes as separate PRs is a safer approach",
        "createdAt" : "2019-08-27T22:09:22Z",
        "updatedAt" : "2019-08-27T22:09:22Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "cee1b31a-a493-423c-9f1a-b2142981dde3",
        "parentId" : "21f13669-e1d7-41fd-861c-b0326b4b6396",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "That's basically the idea of this PR.  This is technically a code change, but it is about as benign as they come",
        "createdAt" : "2019-08-27T23:04:19Z",
        "updatedAt" : "2019-08-27T23:04:20Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b6f2e14962bdc42a92b4172824545c34d2d2491",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +794,798 @@        # TODO: shouldn't we be applying finalize whenever\n        #  not isinstance(other, ABCSeries)?\n        finalizer = (\n            lambda x: x.__finalize__(self)\n            if not isinstance(other, (ABCSeries, ABCIndexClass))"
  },
  {
    "id" : "0c9beae3-ea96-4330-a8a5-e58a2f922dd9",
    "prId" : 28362,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28362#pullrequestreview-286223971",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "751346d9-bfbf-4d6f-b89d-1367a14937ab",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can this ever be called with a ``datetime.datetime`` (or subclass eg Timestamp),?",
        "createdAt" : "2019-09-10T11:39:28Z",
        "updatedAt" : "2019-09-12T15:02:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "40a772fc-c8ca-404e-9d92-f60a5764d2cb",
        "parentId" : "751346d9-bfbf-4d6f-b89d-1367a14937ab",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "datetime and Timestamp both behave correctly already, also are included in the test",
        "createdAt" : "2019-09-10T15:03:47Z",
        "updatedAt" : "2019-09-12T15:02:26Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bded108d48054ba0041f849e30674d8e458815e",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +156,160 @@        # raises TypeError\n        return Timedelta(obj)\n    elif isinstance(obj, np.datetime64):\n        # GH#28080 numpy casts integer-dtype to datetime64 when doing\n        #  array[int] + datetime64, which we do not allow"
  },
  {
    "id" : "a523e62c-21ee-44d5-b15a-aaaa6b3b6c4f",
    "prId" : 28431,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28431#pullrequestreview-291751208",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1eeb0e0c-c752-4262-a4f3-7b3db1044eda",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this still needed? (also on comp_method_OBJECT_ARRAY)",
        "createdAt" : "2019-09-23T11:54:20Z",
        "updatedAt" : "2019-09-23T11:57:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bddb78ad-9362-4e9a-a8ca-a9318b20d45c",
        "parentId" : "1eeb0e0c-c752-4262-a4f3-7b3db1044eda",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yes.  They are imported elsewhere.  This will get cleaned up as we get more stuff out of `__init__`",
        "createdAt" : "2019-09-23T12:50:53Z",
        "updatedAt" : "2019-09-23T12:50:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc003e46c78cafb4ced814b9f3640f83ff0fe1d8",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +46,50 @@    _op_descriptions,\n)\nfrom pandas.core.ops.invalid import invalid_comparison  # noqa:F401\nfrom pandas.core.ops.methods import (  # noqa:F401\n    add_flex_arithmetic_methods,"
  },
  {
    "id" : "84111fa0-aabf-42ea-9f3d-e47b82ac5d68",
    "prId" : 29853,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29853#pullrequestreview-336217822",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc4eb29d-d990-4a78-930d-5823d4ac2673",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here on what is going on",
        "createdAt" : "2019-12-24T14:31:49Z",
        "updatedAt" : "2019-12-27T16:35:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf94d1305e9e803dbea4bafe891b918b1b07844b",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +375,379 @@\n        # Get the appropriate array-op to apply to each block's values.\n        array_op = get_array_op(func, str_rep=str_rep)\n        bm = left._data.apply(array_op, right=right)\n        return type(left)(bm)"
  },
  {
    "id" : "62697e25-e324-4ce2-9da8-041a4cadf6e6",
    "prId" : 29853,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29853#pullrequestreview-336814702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca36e67f-36da-46e5-815a-95a301fdbb42",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this could just be an if (as you are returning), e.g. change the following elif to an if, but NBD",
        "createdAt" : "2019-12-27T16:26:36Z",
        "updatedAt" : "2019-12-27T16:35:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf94d1305e9e803dbea4bafe891b918b1b07844b",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +378,382 @@        bm = left._data.apply(array_op, right=right)\n        return type(left)(bm)\n\n    elif isinstance(right, ABCDataFrame):\n        assert right._indexed_same(left)"
  },
  {
    "id" : "16e8e11b-a1c6-464c-99e8-71e93a41b8ce",
    "prId" : 30147,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30147#pullrequestreview-351888601",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94de24ac-5cf0-486e-be9b-a5e68deeecdf",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "do we have tests where this makes a difference?  maybe this lets us use numexpr and performance is affected?",
        "createdAt" : "2020-01-26T17:49:51Z",
        "updatedAt" : "2020-02-01T11:49:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9b2e8b1b-1c4d-40df-8938-c9812976daaf",
        "parentId" : "94de24ac-5cf0-486e-be9b-a5e68deeecdf",
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "Yeah, I wasn't sure about this one. Thought I give it a try and see if any of the CI hooks is failing. The 2 failing ones in `pandas-dev.pandas (Linux py37_locale)` look unrelated though. I'll rebase and try again.",
        "createdAt" : "2020-01-26T18:33:59Z",
        "updatedAt" : "2020-02-01T11:49:28Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      },
      {
        "id" : "c8d2a9bb-baf3-4a95-bf6c-8844eb7845b4",
        "parentId" : "94de24ac-5cf0-486e-be9b-a5e68deeecdf",
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "@jbrockmendel CI is green now, so all tests seem to be fine with this change.\r\n@jreback do you have any concerns about it?",
        "createdAt" : "2020-01-27T19:28:11Z",
        "updatedAt" : "2020-02-01T11:49:28Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      },
      {
        "id" : "3357ae05-23aa-4851-9f9f-4316e281e43b",
        "parentId" : "94de24ac-5cf0-486e-be9b-a5e68deeecdf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "looks ok, original issue is that this looks like a format string to python",
        "createdAt" : "2020-02-01T15:11:23Z",
        "updatedAt" : "2020-02-01T15:12:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "87247a5d64111b0dd8baf3a792470827758f5e61",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +266,270 @@        operator.floordiv: \"//\",\n        rfloordiv: \"//\",\n        operator.mod: \"%\",\n        rmod: \"%\",\n        operator.pow: \"**\","
  },
  {
    "id" : "38ea4b55-0a0d-41cd-8b46-9764bf870b7b",
    "prId" : 30231,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30231#pullrequestreview-331431280",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b858256-531a-416d-a7ff-c17136724e84",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "@jbrockmendel am I reinventing any wheels here? This seems like something useful enough that it would have been done before.",
        "createdAt" : "2019-12-12T15:16:19Z",
        "updatedAt" : "2019-12-16T14:16:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "cd35f18c-cbc3-49f0-8100-cb5a8387cbf5",
        "parentId" : "9b858256-531a-416d-a7ff-c17136724e84",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i dont think so, no",
        "createdAt" : "2019-12-12T18:22:47Z",
        "updatedAt" : "2019-12-16T14:16:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3b10ac62c5531843e45b5cec5dbace801f61455",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +62,66 @@# -----------------------------------------------------------------------------\n# constants\nARITHMETIC_BINOPS: Set[str] = {\n    \"add\",\n    \"sub\","
  },
  {
    "id" : "305f8fa9-cf9e-4b2e-82ba-6be2976e36d6",
    "prId" : 30231,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30231#pullrequestreview-331682580",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edb06a5f-647b-4a80-ad46-71c726f98849",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there a reason these are not fixtures?",
        "createdAt" : "2019-12-12T23:11:41Z",
        "updatedAt" : "2019-12-16T14:16:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0cbf6721-6fa2-407c-9776-890da45fbc44",
        "parentId" : "edb06a5f-647b-4a80-ad46-71c726f98849",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> is there a reason these are not fixtures?\r\n\r\nThis is used in *code*, not in tests",
        "createdAt" : "2019-12-13T06:20:32Z",
        "updatedAt" : "2019-12-16T14:16:29Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3b10ac62c5531843e45b5cec5dbace801f61455",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +76,80 @@    \"rpow\",\n    \"rmod\",\n    \"rfloordiv\",\n    \"rtruediv\",\n    \"rdivmod\","
  },
  {
    "id" : "1f9e1dcf-744f-4405-b820-ce5c4d61dc02",
    "prId" : 30231,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30231#pullrequestreview-332874075",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbab3bf9-8745-4583-8f06-25e0a4c41f84",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Just as FYI if you create a container with literal values mypy will infer that it is a `Set[str]` for you, so not required to specify. Have to specify if the container is empty on instantiation",
        "createdAt" : "2019-12-16T20:27:52Z",
        "updatedAt" : "2019-12-16T20:28:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "dd622838-e33a-46e6-b203-41453f608d4a",
        "parentId" : "dbab3bf9-8745-4583-8f06-25e0a4c41f84",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Good to know!",
        "createdAt" : "2019-12-16T21:21:17Z",
        "updatedAt" : "2019-12-16T21:21:17Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3b10ac62c5531843e45b5cec5dbace801f61455",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +62,66 @@# -----------------------------------------------------------------------------\n# constants\nARITHMETIC_BINOPS: Set[str] = {\n    \"add\",\n    \"sub\","
  },
  {
    "id" : "7d8a8ae6-b989-4329-91ce-bc93e8623cf7",
    "prId" : 31296,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31296#pullrequestreview-348334182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e66003b2-2e9f-476e-9f3e-50dbffa3370d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe move this to a `dispatch_to_ndarray` ?",
        "createdAt" : "2020-01-25T15:57:39Z",
        "updatedAt" : "2020-03-05T17:03:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dfff6546-7afb-4f27-8edd-183f1693abfe",
        "parentId" : "e66003b2-2e9f-476e-9f3e-50dbffa3370d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Before long this will be moved into dispatch_to_series, which will gradually become de-facto dispatch_to_blocks.  At that point it may make sense to move it to another file.",
        "createdAt" : "2020-01-25T16:44:55Z",
        "updatedAt" : "2020-03-05T17:03:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "31106288c28086d4722701eb20193a2255c584fd",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +606,610 @@    if axis == 0:\n        values = right._values\n        if isinstance(values, np.ndarray):\n            # We can operate block-wise\n            values = values.reshape(-1, 1)"
  },
  {
    "id" : "32b7cfe0-bd65-4d10-84b9-f4bcfaac2099",
    "prId" : 31296,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31296#pullrequestreview-348393202",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1a864ee-6aa6-4484-8150-818b62b3afe9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why are we passing the str_rep, can we not just get this directly from the func?",
        "createdAt" : "2020-01-25T15:58:13Z",
        "updatedAt" : "2020-03-05T17:03:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "411c5f79-245d-4c76-857a-0ba3737d249d",
        "parentId" : "a1a864ee-6aa6-4484-8150-818b62b3afe9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "or if they are important, then I would construct a NamedTuple that holds the func and the str_rep and pass that around (might require a refactor)",
        "createdAt" : "2020-01-25T15:58:39Z",
        "updatedAt" : "2020-03-05T17:03:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "210e226f-6dab-45a4-b1de-4e2f4239e220",
        "parentId" : "a1a864ee-6aa6-4484-8150-818b62b3afe9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "There's a few things here:\r\n\r\n1) the simplest way to do this code-wise would be to do get_str_rep within core.computations.expressions, is effectively a dict lookup right before we call numexpr.  The upside being that we dont have to pass str_rep around, the downside being that we have to do that dict lookup repeatedly.\r\n2) ATM passing str_rep _everywhere_ breaks several tests and I'm still trying to track that down.  Passing it more consistently in the places that are safe makes that process easier.\r\n3) I think some of the places we are calling numexpr we are doing it wrong (i.e. passing things that we will have to fall back to non-numexpr, would like to track those down.\r\n",
        "createdAt" : "2020-01-25T16:49:03Z",
        "updatedAt" : "2020-03-05T17:03:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0891b7d9-93d0-4de0-a1a3-30bb587260f9",
        "parentId" : "a1a864ee-6aa6-4484-8150-818b62b3afe9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why isn't 1 possible, we already have pandas.core.ops._get_opstr which does exactly the right thing.",
        "createdAt" : "2020-01-26T01:54:26Z",
        "updatedAt" : "2020-03-05T17:03:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "664f7509-b7a8-49eb-b6c2-a65b1e9101b0",
        "parentId" : "a1a864ee-6aa6-4484-8150-818b62b3afe9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "1 is totally possible and i intend to do it before long, just not the goal here",
        "createdAt" : "2020-01-26T02:47:06Z",
        "updatedAt" : "2020-03-05T17:03:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "193e245a-ec14-4fe7-af46-6d44f83e99f7",
        "parentId" : "a1a864ee-6aa6-4484-8150-818b62b3afe9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "started a branch to do this, it broke 5 numexpr tests, so ill need to troubleshoot that before we can move over to option 1",
        "createdAt" : "2020-01-26T17:14:14Z",
        "updatedAt" : "2020-03-05T17:03:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "31106288c28086d4722701eb20193a2255c584fd",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +803,807 @@\n            axis = self._get_axis_number(axis) if axis is not None else 1\n            return _combine_series_frame(\n                self, other, pass_op, axis=axis, str_rep=str_rep\n            )"
  },
  {
    "id" : "90816048-8ef7-4f59-8bf5-6617c79b896c",
    "prId" : 31297,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31297#pullrequestreview-348333540",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5a0f5c9-892f-4a3f-ba07-124adef03810",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see my comment on your other PR. I would rather not do this as another arg, better is to create a NamedTuple that holds both and pass that around",
        "createdAt" : "2020-01-25T16:00:58Z",
        "updatedAt" : "2020-02-22T15:50:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "66aeb652-7c6e-401a-b0d0-b16eeccd250a",
        "parentId" : "e5a0f5c9-892f-4a3f-ba07-124adef03810",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "another alternative would be to make the getting of str_rep a dict lookup in expressions",
        "createdAt" : "2020-01-25T16:30:24Z",
        "updatedAt" : "2020-02-22T15:50:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "87bb1c2fd3cf3b9e30cefac7e2dd4234d3b6afe1",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +836,840 @@            return _combine_series_frame(self, other, op, axis=axis)\n        else:\n            # in this case we always have `np.ndim(other) == 0`\n            new_data = dispatch_to_series(self, other, op, str_rep)\n            return self._construct_result(new_data)"
  }
]