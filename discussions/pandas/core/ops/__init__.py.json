[
  {
    "id" : "44983312-8bd6-4157-b027-10824b21f49b",
    "prId" : 27238,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27238#pullrequestreview-258505263",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "091d23e5-7330-466b-86ee-615a1a2da1f3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "would it be worth it to move this to ``ops.py`` and then import only public functions to ``__init__.py``?",
        "createdAt" : "2019-07-05T13:35:30Z",
        "updatedAt" : "2019-07-05T13:35:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0f11f85e-0e7e-4618-b329-94fce0fa203c",
        "parentId" : "091d23e5-7330-466b-86ee-615a1a2da1f3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think before long, yes.  ATM I've got several branches touching ops so I decided to keep this simple for rebasing purposes.",
        "createdAt" : "2019-07-05T14:26:15Z",
        "updatedAt" : "2019-07-05T14:26:15Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "952a71dd-fc9a-401a-a456-db9a1e6d1938",
        "parentId" : "091d23e5-7330-466b-86ee-615a1a2da1f3",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "When moving things, I much prefer moving things at once to a file you think to have it longer term. Moving files are annoying in git history ;)",
        "createdAt" : "2019-07-05T17:57:50Z",
        "updatedAt" : "2019-07-05T17:57:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f858d5e0ac848dc0deca7e36d3c3535a521a3e4",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +51,55 @@import pandas.core.common as com\nimport pandas.core.missing as missing\n\nfrom .roperator import (  # noqa:F401\n    radd,"
  },
  {
    "id" : "1e5ba7f4-914a-478f-ab08-1a3fcc8ab777",
    "prId" : 27735,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27735#pullrequestreview-270514855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58522803-0d8b-4855-99d0-e61e1288b92d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use absolute imports",
        "createdAt" : "2019-08-04T10:47:19Z",
        "updatedAt" : "2019-08-05T14:26:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1333ad10-026c-4591-906f-0ceac2cda69a",
        "parentId" : "58522803-0d8b-4855-99d0-e61e1288b92d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think we're holding off on these until the `import pandas as pd` is removed from this file",
        "createdAt" : "2019-08-04T15:34:01Z",
        "updatedAt" : "2019-08-05T14:26:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5f9046b4-cf39-4a4d-a092-5cd078e331ab",
        "parentId" : "58522803-0d8b-4855-99d0-e61e1288b92d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "that's orthogonal. these should not have been like this in the first place.",
        "createdAt" : "2019-08-04T21:08:47Z",
        "updatedAt" : "2019-08-05T14:26:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "08b81ba2-d5fc-4498-95ee-f0b5e8725880",
        "parentId" : "58522803-0d8b-4855-99d0-e61e1288b92d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "updated",
        "createdAt" : "2019-08-04T21:18:17Z",
        "updatedAt" : "2019-08-05T14:26:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8a4a7a7b-6a00-4ba6-b93c-be9960a42df6",
        "parentId" : "58522803-0d8b-4855-99d0-e61e1288b92d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "thxs, ping on green.",
        "createdAt" : "2019-08-04T21:21:03Z",
        "updatedAt" : "2019-08-05T14:26:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a72b4388a411e76a44b30de4a24309665377689a",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +56,60 @@    _make_flex_doc,\n    _op_descriptions,\n)\nfrom pandas.core.ops.invalid import invalid_comparison\nfrom pandas.core.ops.roperator import (  # noqa:F401"
  },
  {
    "id" : "3c4acf7e-d736-48f1-81da-083c771acdec",
    "prId" : 27739,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27739#pullrequestreview-270515493",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d34a215-1476-4053-b9cb-b6d5ad785560",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "rather than this can you make a safe method that deals with null frequency, this is a bit odd",
        "createdAt" : "2019-08-04T21:11:35Z",
        "updatedAt" : "2019-08-04T21:11:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9f916a67-efb3-4696-83f7-c2adffee630e",
        "parentId" : "9d34a215-1476-4053-b9cb-b6d5ad785560",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This basically is the safe method to deal with null frequency.  I think there will be room to simplify it after we merge dispatch_to_index_op into dispatch_to_extension_op\r\n\r\n(I agree that I'd prefer these methods not need to know about Series)",
        "createdAt" : "2019-08-04T21:38:39Z",
        "updatedAt" : "2019-08-04T21:38:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "189ba669-2d47-44e6-9c62-6d9f45e3f210",
        "parentId" : "9d34a215-1476-4053-b9cb-b6d5ad785560",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok fair enough, maybe make an issue about this? (or just add to your list) :->",
        "createdAt" : "2019-08-04T21:39:49Z",
        "updatedAt" : "2019-08-04T21:39:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "83e7da60e9b1f6db342acb3c049b83534b5f6e71",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +167,171 @@            # Note: we use Series instead of TimedeltaIndex to avoid having\n            #  to worry about catching NullFrequencyError.\n            return pd.Series(right)\n\n        # In particular non-nanosecond timedelta64 needs to be cast to"
  },
  {
    "id" : "f9083305-bc01-46a4-9a1a-d5d5ac071974",
    "prId" : 27769,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27769#pullrequestreview-275165273",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70a72861-8ebc-4b98-91df-b30ee9b11df4",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jbrockmendel maybe by accident due to several PRs that were related / rebase after each other, but this seemingly introduced again what you removed in https://github.com/pandas-dev/pandas/pull/27873 (although the other PR was merged later ..)\r\n\r\nNo matter how it happened ;), the check is still in master ..",
        "createdAt" : "2019-08-14T20:09:11Z",
        "updatedAt" : "2019-08-14T20:09:11Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "5b7aa42c-c1ff-46b5-8e7a-8d79e97f4dfd",
        "parentId" : "70a72861-8ebc-4b98-91df-b30ee9b11df4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yah this looks like a rebase screwup, will address",
        "createdAt" : "2019-08-14T21:37:58Z",
        "updatedAt" : "2019-08-14T21:37:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed00790d27aa27598bed77328f49706af62c7d83",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1044,1048 @@            is_list_like(other)\n            and len(other) != len(self)\n            and not isinstance(other, (set, frozenset))\n        ):\n            raise ValueError(\"Lengths must match\")"
  },
  {
    "id" : "09274a84-4d68-400b-8bbb-1f02ac11ee0a",
    "prId" : 27803,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27803#pullrequestreview-272824905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "baa51682-ca7a-4253-9ccf-c37fa062a48a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In what case can `res_values` have a name? (that seems the only reason that `result` can have a name)\r\n\r\nI think we should try to avoid doing this rename in general (it makes yet another copy of the data, which could of course also be avoided by using an inplace method, but I would rather avoid doing the rename in general)",
        "createdAt" : "2019-08-08T10:20:04Z",
        "updatedAt" : "2019-08-08T12:39:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9c4dcd05-b93a-4ddb-879a-6f9ebde74203",
        "parentId" : "baa51682-ca7a-4253-9ccf-c37fa062a48a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I also think that is the wrong comment (there were multiple similar in the original code, but they all differed slightly. Here it is not about result.name but self.name)",
        "createdAt" : "2019-08-08T12:51:34Z",
        "updatedAt" : "2019-08-08T12:51:35Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "227941f4-4e6f-44ba-8992-ee5cbf8d9e46",
        "parentId" : "baa51682-ca7a-4253-9ccf-c37fa062a48a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "could put logic for check-if-rename-is-necessary into something resembling _construct_result",
        "createdAt" : "2019-08-08T15:22:01Z",
        "updatedAt" : "2019-08-08T15:22:01Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8ed60738-4439-4199-bf2f-60262f42c362",
        "parentId" : "baa51682-ca7a-4253-9ccf-c37fa062a48a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`__finalize__` is used to propagate metadata of subclasses, so I suppose we should keep it. In this case, we somehow need a way to signal to finalize to not set the name again ..",
        "createdAt" : "2019-08-08T20:39:35Z",
        "updatedAt" : "2019-08-08T20:39:35Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "d095d608274aa0d01fa7498b49c2640bd3d58d5d",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +1104,1108 @@        # rename is needed in case res_name is None and result.name\n        #  is not.\n        return finalizer(result).rename(res_name)\n\n    wrapper.__name__ = op_name"
  },
  {
    "id" : "74e34cd2-63fd-4f83-b88e-9aaf59ab4159",
    "prId" : 27803,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27803#pullrequestreview-273216340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b65c8ed-2909-45d1-8c9d-cb7c80422fb8",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Where is this coming from (a test?) I don't see this check in the existing code, it feels a bad idea to introduce such a check if we don't know for which reason ",
        "createdAt" : "2019-08-08T12:37:26Z",
        "updatedAt" : "2019-08-08T12:39:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c78e6e11-aa97-4e9e-9ba2-2e529713f37a",
        "parentId" : "4b65c8ed-2909-45d1-8c9d-cb7c80422fb8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "a test, yes.  I dont know which off the top of my head, but this was needed to maintain existing behavior.  I'd like to change it to maintain/achieve consistency with do things elsewhere.",
        "createdAt" : "2019-08-08T15:20:59Z",
        "updatedAt" : "2019-08-08T15:21:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "87d79a96-c335-49ed-9e82-3abca73fa024",
        "parentId" : "4b65c8ed-2909-45d1-8c9d-cb7c80422fb8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Looks like the test that makes this necessary is in tests.series.test_operators.TestSeriesComparisons.test_comparison_tuples\r\n\r\n```\r\ns = Series([frozenset([1]), frozenset([1, 2])])\r\nresult = s == frozenset([1])\r\n```\r\n\r\nSupported listlikes in object-dtype is a hassle",
        "createdAt" : "2019-08-08T19:45:37Z",
        "updatedAt" : "2019-08-08T19:45:38Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "81b15da4-4b54-4fc1-bd0f-7e387c1e4bda",
        "parentId" : "4b65c8ed-2909-45d1-8c9d-cb7c80422fb8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK, so the frozenset was an example test case, but there might be others that previously worked like that. So I don't think the solution is to add an explicit frozenset check as done now. Do you know how it got through the checks in the previous version?",
        "createdAt" : "2019-08-08T20:40:41Z",
        "updatedAt" : "2019-08-08T20:40:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4b46da70-669a-4fa0-9f3d-9c09367879ff",
        "parentId" : "4b65c8ed-2909-45d1-8c9d-cb7c80422fb8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "previously the length check was only done on ndarray/Index/Series",
        "createdAt" : "2019-08-08T20:56:33Z",
        "updatedAt" : "2019-08-08T20:56:34Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "1d13be3e-9e65-455e-97d9-4364e961e839",
        "parentId" : "4b65c8ed-2909-45d1-8c9d-cb7c80422fb8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> previously the length check was only done on ndarray/Index/Series\r\n\r\nThe let's go back to that logic? (or eg at least when the dtype is object?) As this will now break comparison of object dtypes that hold list-like scalar objects\r\n",
        "createdAt" : "2019-08-09T08:27:58Z",
        "updatedAt" : "2019-08-09T08:27:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d2f4b754-b0e4-4154-bb49-ae79606f390f",
        "parentId" : "4b65c8ed-2909-45d1-8c9d-cb7c80422fb8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sure.  we should have a larger discussion on how we can handle this more consistently across the codebase",
        "createdAt" : "2019-08-09T15:39:54Z",
        "updatedAt" : "2019-08-09T15:39:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d095d608274aa0d01fa7498b49c2640bd3d58d5d",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1056,1060 @@            and not isinstance(other, frozenset)\n        ):\n            # TODO: why are we treating len-1 frozenset differently?\n            raise ValueError(\"Lengths must match to compare\")\n"
  },
  {
    "id" : "e0a996cc-a8e7-48c6-81c5-f449d1cc35a4",
    "prId" : 27803,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27803#pullrequestreview-272476541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4a14eec-fabf-4f83-ac82-e8bc6065e485",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is the `extract_numpy=True` needed?",
        "createdAt" : "2019-08-08T12:39:32Z",
        "updatedAt" : "2019-08-08T12:39:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "d095d608274aa0d01fa7498b49c2640bd3d58d5d",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +1091,1095 @@\n        else:\n            lvalues = extract_array(self, extract_numpy=True)\n            rvalues = extract_array(other, extract_numpy=True)\n"
  },
  {
    "id" : "f40698af-55d6-4415-8916-261e90453f2e",
    "prId" : 27803,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27803#pullrequestreview-272553260",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6e0db17-da72-4477-9b1a-65b519aec30a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is related to the renaming issue I commented about below. \r\nIIUC, the rename is needed because the finalize sets back the original Series name, which might not be desired. \r\nI think it would be good to make that clearer (eg in the comments)\r\n\r\n> shouldn't we be applying finalize whenever not isinstance(other, ABCSeries)?\r\n\r\nYes, that seems correct to me",
        "createdAt" : "2019-08-08T13:01:09Z",
        "updatedAt" : "2019-08-08T13:01:09Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "d095d608274aa0d01fa7498b49c2640bd3d58d5d",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1034,1038 @@        # TODO: shouldn't we be applying finalize whenever\n        #  not isinstance(other, ABCSeries)?\n        finalizer = (\n            lambda x: x.__finalize__(self)\n            if isinstance(other, (np.ndarray, ABCIndexClass))"
  },
  {
    "id" : "e4caabe8-6d53-4942-9016-13e7b6d40c9d",
    "prId" : 27959,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27959#pullrequestreview-277190875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b00c32a3-c28e-4780-839a-ca40922a1021",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is res_values always an array, or can it be a tuple of results, like from divmod?",
        "createdAt" : "2019-08-20T14:02:13Z",
        "updatedAt" : "2019-08-20T14:02:14Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "aaec1d6c-d63f-40e8-a080-ea8b5e63b3d3",
        "parentId" : "b00c32a3-c28e-4780-839a-ca40922a1021",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "in this context its always an array",
        "createdAt" : "2019-08-20T14:04:49Z",
        "updatedAt" : "2019-08-20T14:04:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "748058035c64487d57de9ba7124b3803364d6928",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +822,826 @@            # e.g. SparseArray\n            res_values = dispatch_to_extension_op(op, self, other)\n            return _construct_result(self, res_values, index=self.index, name=res_name)\n\n        elif isinstance(other, (ABCSeries, ABCIndexClass)):"
  }
]