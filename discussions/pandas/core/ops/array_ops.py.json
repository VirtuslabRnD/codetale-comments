[
  {
    "id" : "f295b363-adba-458e-8bef-1cff8e4e8b34",
    "prId" : 27962,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27962#pullrequestreview-276736183",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72c2b769-6b3c-45f1-bcd3-fe7576d6ea7a",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is this a behavior change from master? Or was this case not reached before?",
        "createdAt" : "2019-08-19T16:54:23Z",
        "updatedAt" : "2019-08-19T16:54:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f951f40e-45d2-499e-a209-76bf5492b3d5",
        "parentId" : "72c2b769-6b3c-45f1-bcd3-fe7576d6ea7a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "in tests.arithmetic.test_object we have a test\r\n\r\n```\r\nwith pytest.raises(TypeError):\r\n    index.tolist() - index\r\n```\r\n\r\nthat raises AssertionError without this edit because `y` is a list at this point.  So shouldn't be a real behavior change, just a better error",
        "createdAt" : "2019-08-19T18:27:24Z",
        "updatedAt" : "2019-08-19T18:27:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6440f9a3384b675c9ca47ceaae14b0a3161efcd",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +75,79 @@\n    else:\n        if not is_scalar(y):\n            raise TypeError(type(y))\n"
  },
  {
    "id" : "70d7128a-214b-4f72-83c2-a7a82c0dc93f",
    "prId" : 28431,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28431#pullrequestreview-288244699",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "372cdf87-cfd3-4912-bd7f-2b0884032663",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Add a comment on why the Timedelta/Datetime/Timestamp get deferred too?",
        "createdAt" : "2019-09-13T20:50:15Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc003e46c78cafb4ced814b9f3640f83ff0fe1d8",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +205,209 @@    rvalues = maybe_upcast_for_op(rvalues, lvalues.shape)\n\n    if should_extension_dispatch(left, rvalues) or isinstance(\n        rvalues, (ABCTimedeltaArray, ABCDatetimeArray, Timestamp)\n    ):"
  },
  {
    "id" : "b278e9dc-23ac-4e4c-b192-89675e9af3fb",
    "prId" : 28431,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28431#pullrequestreview-289621134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3857a638-773d-4b1d-91cf-768fd7999323",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "adding type annotations would help here? or do we allow scalar `left` and `right`, which makes this difficult?",
        "createdAt" : "2019-09-13T20:50:51Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "3c1aa017-9975-4522-9693-5e3208c5532f",
        "parentId" : "3857a638-773d-4b1d-91cf-768fd7999323",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I see in the commits you reverted the added types again (because mypy was not happy), but can you then leave them as comments? As for the human reader they can still be very valuable? \r\n(Or add the equivalent information as a docstring)",
        "createdAt" : "2019-09-17T12:11:47Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e274f646-d4d3-4cbf-b3c4-2ecea5fabf73",
        "parentId" : "3857a638-773d-4b1d-91cf-768fd7999323",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The particular mypy complaint has come up before (in indexes.base).  I'm hoping to get a PR up this morning that addresses it, so I can add non-comment types here in a follow-up",
        "createdAt" : "2019-09-17T14:40:52Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "37d61e69-a630-423c-8157-450f442ab259",
        "parentId" : "3857a638-773d-4b1d-91cf-768fd7999323",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Was the error you were referring to `pandas/core/ops/array_ops.py:333: error: Cannot call function of unknown type`? That's what I was seeing in the CI log\r\n\r\nIf so I think this is a relevant issue on mypy:\r\n\r\nhttps://github.com/python/mypy/issues/2248\r\n\r\nMaybe using an actual function for `fill_int` instead of a lambda resolves",
        "createdAt" : "2019-09-17T15:19:28Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "4b370d64-690e-467b-be04-e88487958acf",
        "parentId" : "3857a638-773d-4b1d-91cf-768fd7999323",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The complaint was about the line in `Index.__new__` calling `cls._scalar_data_error(data)`.  I think that can be fixed by changing it to `raise cls._scalar_data_error(data)`",
        "createdAt" : "2019-09-17T15:24:32Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "efdb8525-ffb2-4305-8365-0f5638c57707",
        "parentId" : "3857a638-773d-4b1d-91cf-768fd7999323",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is there a preferred way of typing e.g. \"one of these N objects\", in particular the `op` arg in these functions.  Could use an enum?",
        "createdAt" : "2019-09-17T22:44:19Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "4759d6fe-d2fa-49e7-8d06-5d658c170c02",
        "parentId" : "3857a638-773d-4b1d-91cf-768fd7999323",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "And I think I asked this already, but double checking: we dont have a good way of typing \"Any but not a DataFrame\"?",
        "createdAt" : "2019-09-17T22:45:15Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "86f06f13-7feb-4d77-b086-67bc8f37e5ff",
        "parentId" : "3857a638-773d-4b1d-91cf-768fd7999323",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "> is there a preferred way of typing e.g. \"one of these N objects\", in particular the `op` arg in these functions. Could use an enum?\r\n\r\nIs it a `Union` you are looking for?\r\n\r\n\r\n\r\n> And I think I asked this already, but double checking: we dont have a good way of typing \"Any but not a DataFrame\"?\r\n\r\nNot that I am aware of - not sure that would be possible to determine that statically",
        "createdAt" : "2019-09-18T00:05:10Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f0d75fed-de77-4a89-a3be-eba25a7c7e8d",
        "parentId" : "3857a638-773d-4b1d-91cf-768fd7999323",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> Is it a Union you are looking for?\r\n\r\nI'm thinking of the `op` arg which is going to be among `{operator.and_, operator.or_, operator.xor, roperator.rand_, roperator.ror_, roperator.rxor}`.",
        "createdAt" : "2019-09-18T00:33:06Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e7b3550a-5507-49e9-8af2-3df6e6d541e4",
        "parentId" : "3857a638-773d-4b1d-91cf-768fd7999323",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Ah ok. No Literal types are still an experimental thing - not available in stdlib so best for now is just Callable",
        "createdAt" : "2019-09-18T00:57:17Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc003e46c78cafb4ced814b9f3640f83ff0fe1d8",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +239,243 @@    from pandas.core.ops import should_extension_dispatch, dispatch_to_extension_op\n\n    # NB: We assume extract_array has already been called on left and right\n    lvalues = left\n    rvalues = right"
  },
  {
    "id" : "7f185ac4-722e-456e-8db5-af6453e06a82",
    "prId" : 28431,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28431#pullrequestreview-289950432",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62cc771d-17dd-48d3-90b4-398484a4bf46",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "but DatetimelikeArrays keep the `freq` ? So why is it not possible to extract up to the array level for those?\r\n\r\nAnd for a scalar Timestamp, does this freq actually matter? ",
        "createdAt" : "2019-09-17T12:03:58Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2d8052d2-57ee-4f38-b9b3-41181869ec46",
        "parentId" : "62cc771d-17dd-48d3-90b4-398484a4bf46",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> And for a scalar Timestamp, does this freq actually matter?\r\n\r\nThe behavior is deprecated, but `ts + 5` currently behaves like `ts + 5*ts.freq`, so yes, `freq` does matter. \r\n\r\n> but DatetimelikeArrays keep the freq ? So why is it not possible to extract up to the array level for those?\r\n\r\nSuppose we have `self = Series(range(5))`, so `lvalues = np.array(range(5))`.  Consider two cases for `other` that we are going to add to `self`:\r\n\r\n1) `other = DatetimeIndex([\"2016-01-01\"] * 5, tz=\"UTC\")`\r\n2) `other = Series(DatetimeIndex([\"2016-01-01\"] * 5, tz=\"UTC\"))`\r\n\r\nIn the first case, `other` has a `freq` attribute that is None, so the correct thing to do is raise NullFrequencyError (btw this behavior is deprecated as with Timestamp).  In the second, there is no freq attribute, so the correct thing to do is raise TypeError.  If we did the unwrapping before getting to `arithmetic_op`, we would incorrectly raise NullFrequencyError in case 2.",
        "createdAt" : "2019-09-17T14:39:13Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7b7ba6ab-9427-4883-bef1-c88cf5494622",
        "parentId" : "62cc771d-17dd-48d3-90b4-398484a4bf46",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you move *both* extract_array's in here? would make groking this simpler",
        "createdAt" : "2019-09-18T12:29:56Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1eea4ce7-2c3c-45c9-9c39-1ab23b17ded4",
        "parentId" : "62cc771d-17dd-48d3-90b4-398484a4bf46",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> can you move both extract_array's in here? would make groking this simpler\r\n\r\nI think the idea is to move both out longer term (once the freq business is fixed). If that is the case, I think it is fine for now to already have extract_array of left higher up.\r\n\r\n",
        "createdAt" : "2019-09-18T13:56:39Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b12a34d6-b085-4e6e-a995-d02360c8c964",
        "parentId" : "62cc771d-17dd-48d3-90b4-398484a4bf46",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> In the first case, other has a freq attribute that is None, so the correct thing to do is raise NullFrequencyError (btw this behavior is deprecated as with Timestamp). In the second, there is no freq attribute, so the correct thing to do is raise TypeError. If we did the unwrapping before getting to arithmetic_op, we would incorrectly raise NullFrequencyError in case 2.\r\n\r\nOK, I see. But once the deprecation is removed, this will always be a type error? And then this does not need a special case here? (just for understanding, not expecting it be done in this PR ;))\r\n",
        "createdAt" : "2019-09-18T13:58:14Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "228cd45b-27e6-40ff-8b8d-97c4fc135cb0",
        "parentId" : "62cc771d-17dd-48d3-90b4-398484a4bf46",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> But once the deprecation is removed, this will always be a type error? And then this does not need a special case here? (just for understanding, not expecting it be done in this PR ;))\r\n\r\nCorrect x 2.",
        "createdAt" : "2019-09-18T14:11:59Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc003e46c78cafb4ced814b9f3640f83ff0fe1d8",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +201,205 @@    #  to define `keep_null_freq` before calling extract_array on it.\n    lvalues = left\n    rvalues = extract_array(right, extract_numpy=True)\n\n    rvalues = maybe_upcast_for_op(rvalues, lvalues.shape)"
  },
  {
    "id" : "d142ab2b-88d6-4fec-96d3-20bfb4533538",
    "prId" : 28431,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28431#pullrequestreview-289306513",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36d2cb14-1471-47dc-b688-30e0cd5cd4e7",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This isn't done yet higher up? (arithmetic_op is not doing this?)",
        "createdAt" : "2019-09-17T12:12:44Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "6c93916d-efbc-4694-86c1-6cc594d64c26",
        "parentId" : "36d2cb14-1471-47dc-b688-30e0cd5cd4e7",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "arithmetic_op doesnt, but probably should.  Things like this are the motivation for #28037.",
        "createdAt" : "2019-09-17T14:28:45Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc003e46c78cafb4ced814b9f3640f83ff0fe1d8",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +243,247 @@    rvalues = right\n\n    rvalues = lib.item_from_zerodim(rvalues)\n    if isinstance(rvalues, list):\n        # TODO: same for tuples?"
  },
  {
    "id" : "e083bc5d-cdec-40b6-aac4-7bb426794a00",
    "prId" : 28431,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28431#pullrequestreview-289303057",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "404fe9a0-b00b-4789-80da-fefd767229aa",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This relates to https://github.com/pandas-dev/pandas/issues/27911 I suppose? (fine to keep that seprate, if the hard-coded check for list is the status quo)",
        "createdAt" : "2019-09-17T12:14:31Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ddaaa5b6-78de-45bd-9989-f3eb39ae03c6",
        "parentId" : "404fe9a0-b00b-4789-80da-fefd767229aa",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Corrrect.  Yes, this is the status quo (should be the case for everything in this PR)",
        "createdAt" : "2019-09-17T14:24:20Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc003e46c78cafb4ced814b9f3640f83ff0fe1d8",
    "line" : 142,
    "diffHunk" : "@@ -1,1 +246,250 @@    if isinstance(rvalues, list):\n        # TODO: same for tuples?\n        rvalues = np.asarray(rvalues)\n\n    if isinstance(rvalues, (np.ndarray, ABCExtensionArray, ABCIndexClass)):"
  },
  {
    "id" : "53c4c776-2379-42c8-b12f-ed1f78d59327",
    "prId" : 28431,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28431#pullrequestreview-289301795",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94dd40eb-c58d-45ee-bdbb-f98aeab2de47",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Why is the check for rvalues being ABCTimedeltaArray or ABCDatetimeArray not incluced in should_extension_dispatch?",
        "createdAt" : "2019-09-17T12:16:51Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4cec1104-0998-4388-86a8-95e2271f2c3d",
        "parentId" : "94dd40eb-c58d-45ee-bdbb-f98aeab2de47",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "historically should_extension_dispatch was more focused on dispatching to EA implementations, while the TDA/DTA/Timestamp check is specific to handling the `freq` attribute.  Combining them wouldn't be unreasonable.",
        "createdAt" : "2019-09-17T14:22:46Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc003e46c78cafb4ced814b9f3640f83ff0fe1d8",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +206,210 @@\n    if should_extension_dispatch(left, rvalues) or isinstance(\n        rvalues, (ABCTimedeltaArray, ABCDatetimeArray, Timestamp)\n    ):\n        # TimedeltaArray, DatetimeArray, and Timestamp are included here"
  },
  {
    "id" : "18e0f9a9-61df-4da1-9e8f-eef19fd51313",
    "prId" : 28431,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28431#pullrequestreview-289615802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b340e3b9-c856-4493-baa0-ea2bcf901321",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Haven't reviewed method body in detail but you *might* want to use `ArrayLike` from `pandas._typing` instead of the `Union` here. The former is a `TypeVar` which maintains type generically through the function\r\n\r\nFor example, if `left` is an ndarray using the `TypeVar` would mean that the function also returns an `ndarray`. By contrast a `Union` would allow `left` to be a `ndarray` but the function to return either an `ndarray` or a `ExtensionArray`\r\n\r\nNB: `ndarray` and `ABC*` classes both resolve to `Any` so this helps documentation, but doesn't actually type check",
        "createdAt" : "2019-09-18T00:11:30Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "942bd256-40fd-4bd1-a3ac-2cffe3c6399f",
        "parentId" : "b340e3b9-c856-4493-baa0-ea2bcf901321",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> For example, if left is an ndarray using the TypeVar would mean that the function also returns an ndarray\r\n\r\nWe do not have that guarantee for these functions.\r\n",
        "createdAt" : "2019-09-18T00:31:16Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc003e46c78cafb4ced814b9f3640f83ff0fe1d8",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +221,225 @@\ndef comparison_op(\n    left: Union[np.ndarray, ABCExtensionArray], right: Any, op\n) -> Union[np.ndarray, ABCExtensionArray]:\n    \"\"\""
  },
  {
    "id" : "53a58b0e-67a0-4913-bfc9-6ed05597f1c8",
    "prId" : 28431,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28431#pullrequestreview-289879800",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04ccf242-f368-4388-9b9c-4b9f796ebe5c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same comment as above about extract_array",
        "createdAt" : "2019-09-18T12:30:31Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc003e46c78cafb4ced814b9f3640f83ff0fe1d8",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +239,243 @@    from pandas.core.ops import should_extension_dispatch, dispatch_to_extension_op\n\n    # NB: We assume extract_array has already been called on left and right\n    lvalues = left\n    rvalues = right"
  },
  {
    "id" : "315d8e66-7888-45da-8d09-2b7a697d7ba8",
    "prId" : 28431,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28431#pullrequestreview-289952911",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "307723a5-91a1-4b35-9415-ab8aebe4ce19",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Would another option be to define keep_null_freq beforehand and pass that to arithmetic_op? \r\nThen both extract_arrays can be done beforehand?",
        "createdAt" : "2019-09-18T14:00:07Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ce06bdc2-d0af-4a6e-805b-be9d76409ebe",
        "parentId" : "307723a5-91a1-4b35-9415-ab8aebe4ce19",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I considered that, but that makes things more complicated once we start calling these from multiple places (mainly Block-wise ops, to a lesser extent PandasArray).",
        "createdAt" : "2019-09-18T14:15:21Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc003e46c78cafb4ced814b9f3640f83ff0fe1d8",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +199,203 @@    # NB: We assume that extract_array has already been called on `left`, but\n    #  cannot make the same assumption about `right`.  This is because we need\n    #  to define `keep_null_freq` before calling extract_array on it.\n    lvalues = left\n    rvalues = extract_array(right, extract_numpy=True)"
  },
  {
    "id" : "3617d5fd-5273-4417-b353-2c1a17230ce2",
    "prId" : 28431,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28431#pullrequestreview-290174757",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e7cf9df-894a-4763-8003-0eac9bfc664d",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is it possible to be more precise and say that it is a ndarray, ExtensionArray or scalar? \r\nOr are there still other types of objects that can be passed?",
        "createdAt" : "2019-09-18T14:01:40Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e4eaca01-7e65-4038-bd1f-3bd3de3e4573",
        "parentId" : "3e7cf9df-894a-4763-8003-0eac9bfc664d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "any wacky thing that you can pass to `Series.__add__` can end up here with the exception of those three classes.",
        "createdAt" : "2019-09-18T14:16:09Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "c1c17f9b-911d-428e-894f-1f2b6a12d687",
        "parentId" : "3e7cf9df-894a-4763-8003-0eac9bfc664d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "(maybe `__eq__` would be a better example)",
        "createdAt" : "2019-09-18T14:16:36Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "6e5e9cb4-404c-47bc-947b-cb49ce59ee91",
        "parentId" : "3e7cf9df-894a-4763-8003-0eac9bfc664d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But eg a list, is that already coerced to an array by the time it is here? \r\nDepending on what work has been done before this, the  \"any wacky thing you can pass\" can still be considered as \"a scalar\"",
        "createdAt" : "2019-09-18T14:21:08Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9a29946c-37db-4d7e-bae5-9f5be95fc431",
        "parentId" : "3e7cf9df-894a-4763-8003-0eac9bfc664d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Some coercion (including list) is done a few lines down on L245-248.\r\n\r\n",
        "createdAt" : "2019-09-18T14:25:56Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "221c87dc-c5ce-4873-9b14-62dd4927acdf",
        "parentId" : "3e7cf9df-894a-4763-8003-0eac9bfc664d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But the (long term, not here) idea is that those checks are also moved to helper functions/decorators, so that they can be applied consistently, and so you can know here in this function you have either a ndarray/EA or scalar?",
        "createdAt" : "2019-09-18T18:36:26Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2f311d0b-44e3-4108-86a0-ac427f30dbf0",
        "parentId" : "3e7cf9df-894a-4763-8003-0eac9bfc664d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yes to everything up through \"applied consistently\".  For the \"or scalar\" I'm reticent to make a definitive statement because we can brainstorm scalar-like things that wouldn't satisfy `lib.is_scalar` (possible also some special cases for tuple)",
        "createdAt" : "2019-09-18T18:54:38Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8aebea9a-6fe3-42d0-b7f7-56aa9c5501c0",
        "parentId" : "3e7cf9df-894a-4763-8003-0eac9bfc664d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> scalar-like things that wouldn't satisfy lib.is_scalar\r\n\r\nThat's only a problem for object / generic EAs (ones we don't know) right? I mean for all other types you could have that guarantee at this location in the code?",
        "createdAt" : "2019-09-18T19:20:22Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "6302570e-adf3-44b7-b435-b2a2d935b9d7",
        "parentId" : "3e7cf9df-894a-4763-8003-0eac9bfc664d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "No.  A user can pass something like `ser + type(ser)` or `ser + pd` and we an get here.",
        "createdAt" : "2019-09-18T19:27:02Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "55457295-29d6-403d-a33a-8c828f8b3040",
        "parentId" : "3e7cf9df-894a-4763-8003-0eac9bfc664d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But for all built-in types except object dtype, we know that such objects are invalid, so that could (consistently) be checked before getting here? (similarly like you want to move the length check out I thought)\r\n\r\n(again, about long term plan, not this PR)",
        "createdAt" : "2019-09-18T20:05:43Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "459e1f72-a50e-405f-b192-6dcba71bfcc6",
        "parentId" : "3e7cf9df-894a-4763-8003-0eac9bfc664d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I guess we could in principle.  I don't see it as a priority.",
        "createdAt" : "2019-09-18T20:15:57Z",
        "updatedAt" : "2019-09-21T16:37:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc003e46c78cafb4ced814b9f3640f83ff0fe1d8",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +230,234 @@    left : np.ndarray or ExtensionArray\n    right : object\n        Cannot be a DataFrame, Series, or Index.\n    op : {operator.eq, operator.ne, operator.gt, operator.ge, operator.lt, operator.le}\n"
  },
  {
    "id" : "166aef0f-b42d-4574-a169-2250824a594b",
    "prId" : 28431,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28431#pullrequestreview-291752579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac7284a6-1f11-4785-b8e2-b0d9b6d8024a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if you can type / doc-string at some point",
        "createdAt" : "2019-09-23T11:56:29Z",
        "updatedAt" : "2019-09-23T11:57:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "29204ad7-3162-49c0-aab1-9f8ceba9e76d",
        "parentId" : "ac7284a6-1f11-4785-b8e2-b0d9b6d8024a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Sure.  This function is headed for a pretty major re-write in follow-ups.",
        "createdAt" : "2019-09-23T12:52:53Z",
        "updatedAt" : "2019-09-23T12:52:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc003e46c78cafb4ced814b9f3640f83ff0fe1d8",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +285,289 @@\ndef na_logical_op(x, y, op):\n    try:\n        result = op(x, y)\n    except TypeError:"
  },
  {
    "id" : "808b3018-3412-4513-95cb-f49d7590cc9e",
    "prId" : 28431,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28431#pullrequestreview-291752180",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b3d8dbc-902f-44a4-95c4-37f79bde7394",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can be direct else/if",
        "createdAt" : "2019-09-23T11:57:12Z",
        "updatedAt" : "2019-09-23T11:57:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9a5d8738-6492-4b0b-8710-7c32ddc32eb3",
        "parentId" : "2b3d8dbc-902f-44a4-95c4-37f79bde7394",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not without duplicating L378-383 i think",
        "createdAt" : "2019-09-23T12:52:17Z",
        "updatedAt" : "2019-09-23T12:52:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc003e46c78cafb4ced814b9f3640f83ff0fe1d8",
    "line" : 263,
    "diffHunk" : "@@ -1,1 +367,371 @@        res_values = dispatch_to_extension_op(op, lvalues, rvalues)\n\n    else:\n        if isinstance(rvalues, np.ndarray):\n            is_other_int_dtype = is_integer_dtype(rvalues.dtype)"
  },
  {
    "id" : "b1d26f5a-b30b-4f4d-8a5a-92187cca618f",
    "prId" : 28879,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28879#pullrequestreview-299778921",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f77875a1-3afd-425b-8132-dcfe59265b1f",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Nice this makes sense. Would certainly love a follow up to comment that all the way through",
        "createdAt" : "2019-10-10T01:30:31Z",
        "updatedAt" : "2019-10-10T01:30:39Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aba9a7235478dd2e87d43921ddef2cfbd4b2dc9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +162,166 @@    op,\n    str_rep: str,\n    eval_kwargs: Dict[str, bool],\n):\n    \"\"\""
  },
  {
    "id" : "79791bb0-13aa-45a6-8da2-722b0c03a054",
    "prId" : 30631,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30631#pullrequestreview-338313092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4a305eb-449f-44d7-a13a-8180e2f1b597",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i agree with @TomAugspurger here - i would simply in-line this rather than creating a temporary\r\n\r\ntemporary only if it’s a really complicated expr or has quoting itself (eg a .join(..)",
        "createdAt" : "2020-01-03T23:17:46Z",
        "updatedAt" : "2020-01-03T23:17:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "81b0ab2cf6358db4e186e9d53b405544d7f81529",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +295,299 @@                typ = type(y).__name__\n                raise TypeError(\n                    f\"Cannot perform '{op.__name__}' with a dtyped [{x.dtype}] array \"\n                    f\"and scalar of type [{typ}]\"\n                )"
  },
  {
    "id" : "5eb23908-3ce6-4b1b-8866-02fdbb3d062b",
    "prId" : 31296,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31296#pullrequestreview-348334422",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f318e27-c245-4ec9-afb5-3bd218809d14",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Do these ever bubble up?",
        "createdAt" : "2020-01-25T04:41:46Z",
        "updatedAt" : "2020-03-05T17:03:58Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "51433095-1fb5-4f77-9c8f-312282eb6169",
        "parentId" : "7f318e27-c245-4ec9-afb5-3bd218809d14",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not if we do things right",
        "createdAt" : "2020-01-25T16:50:51Z",
        "updatedAt" : "2020-03-05T17:03:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "31106288c28086d4722701eb20193a2255c584fd",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +54,58 @@\n        if x.shape != y.shape:\n            raise ValueError(\"Shapes must match\", x.shape, y.shape)\n        result = libops.vec_compare(x.ravel(), y.ravel(), op)\n    else:"
  },
  {
    "id" : "6022d57e-0bdc-41d4-938b-84c91faeb351",
    "prId" : 31296,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31296#pullrequestreview-370840870",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acd8ca4a-a783-4884-be92-d78061d8e008",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this looks like the case on L81 in array_ops.py",
        "createdAt" : "2020-01-25T15:59:29Z",
        "updatedAt" : "2020-03-05T17:03:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b85411bd-e3ba-46d0-9329-be73bd246014",
        "parentId" : "acd8ca4a-a783-4884-be92-d78061d8e008",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you follow up with consolidate if this is the case",
        "createdAt" : "2020-03-08T16:06:23Z",
        "updatedAt" : "2020-03-08T16:06:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "31106288c28086d4722701eb20193a2255c584fd",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +238,242 @@    np.ndarray[bool]\n    \"\"\"\n    if isinstance(rvalues, np.ndarray):\n        rvalues = np.broadcast_to(rvalues, lvalues.shape)\n        result = comparison_op(lvalues, rvalues, op)"
  },
  {
    "id" : "a9fe7565-5be5-4789-b927-6b133b55f169",
    "prId" : 31296,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31296#pullrequestreview-357591257",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dbb862e-0877-42cd-b6a7-5f0aff7e5493",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i would add an assert / raise in vec_compare about equal shapes",
        "createdAt" : "2020-02-09T15:04:03Z",
        "updatedAt" : "2020-03-05T17:03:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fcc9c045-8427-459f-98b2-631520b10174",
        "parentId" : "1dbb862e-0877-42cd-b6a7-5f0aff7e5493",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "vec_compare already has this check",
        "createdAt" : "2020-02-12T16:19:13Z",
        "updatedAt" : "2020-03-05T17:03:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "31106288c28086d4722701eb20193a2255c584fd",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +55,59 @@        if x.shape != y.shape:\n            raise ValueError(\"Shapes must match\", x.shape, y.shape)\n        result = libops.vec_compare(x.ravel(), y.ravel(), op)\n    else:\n        result = libops.scalar_compare(x.ravel(), y, op)"
  },
  {
    "id" : "3a483654-6b57-4631-9bd9-99f3279201a0",
    "prId" : 31296,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31296#pullrequestreview-363036060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ecd30fd-f850-4560-b043-94abe5639479",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2020-02-22T15:59:02Z",
        "updatedAt" : "2020-03-05T17:03:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "31106288c28086d4722701eb20193a2255c584fd",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +261,265 @@    bool\n    \"\"\"\n    # We assume that lengths dont match\n    if lvalues.ndim == rvalues.ndim == 2:\n        # See if we can broadcast unambiguously"
  },
  {
    "id" : "c750205d-7ce6-4279-b79a-494ccf6a5dd0",
    "prId" : 32047,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32047#pullrequestreview-363035764",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11e2cf83-8351-4795-a7d4-ba52ed7a88b0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "on your list is to remove all of the str_rep passing around right? ",
        "createdAt" : "2020-02-22T15:51:05Z",
        "updatedAt" : "2020-02-25T03:14:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b7da130c-10d5-4472-9567-279790d5c606",
        "parentId" : "11e2cf83-8351-4795-a7d4-ba52ed7a88b0",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yes.  ive got a branch that does that, but it isnt passing yet",
        "createdAt" : "2020-02-22T15:53:41Z",
        "updatedAt" : "2020-02-25T03:14:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1d314de777a983ede8760393fc189fb33e79ee0",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +138,142 @@    right : np.ndarray or scalar\n    str_rep : str or None\n    is_cmp : bool, default False\n        If this a comparison operation.\n"
  },
  {
    "id" : "7a8e9c0c-2538-46b6-a037-2f119924fcbf",
    "prId" : 32047,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32047#pullrequestreview-363538608",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "484ef148-9f1c-4a5b-9a30-d3e71f433f34",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what hits this AND is a is_cmp? can you add a comment",
        "createdAt" : "2020-02-22T15:51:57Z",
        "updatedAt" : "2020-02-25T03:14:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "acba0b51-ccd9-41ef-b5ec-eef5dbf74512",
        "parentId" : "484ef148-9f1c-4a5b-9a30-d3e71f433f34",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "so we have 7 cases that get here.  4 of these are something like `ndarray[float] > datetime`, and would pass if we removed this is_cmp check.  Of the remaining three:\r\n\r\n- 2 involves passing a DatetimeArray to masked_arith_op, which expects ndarray.  this should probably be prevented.\r\n- one involves comparions of complex numbers, which numpy does differently than python (which is its own PITA).  falling through to the masked op would break test_bool_flex_frame_complex_dtype.",
        "createdAt" : "2020-02-24T16:47:01Z",
        "updatedAt" : "2020-02-25T03:14:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1d314de777a983ede8760393fc189fb33e79ee0",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +154,158 @@        result = expressions.evaluate(op, str_rep, left, right)\n    except TypeError:\n        if is_cmp:\n            # numexpr failed on comparison op, e.g. ndarray[float] > datetime\n            #  In this case we do not fall back to the masked op, as that"
  },
  {
    "id" : "7d0c3a86-18b4-4e0b-a755-49571ebe03d8",
    "prId" : 32047,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32047#pullrequestreview-363538840",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1bb160e-882d-4f36-a51b-977cc4bc176e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is thi not handled in na_arithmetic_op? seems odd to handle here",
        "createdAt" : "2020-02-22T15:52:27Z",
        "updatedAt" : "2020-02-25T03:14:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "61f00da5-c118-4a8a-9cf6-9e16c95fdd07",
        "parentId" : "b1bb160e-882d-4f36-a51b-977cc4bc176e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sure",
        "createdAt" : "2020-02-24T16:47:19Z",
        "updatedAt" : "2020-02-25T03:14:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1d314de777a983ede8760393fc189fb33e79ee0",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +260,264 @@    else:\n        with np.errstate(all=\"ignore\"):\n            res_values = na_arithmetic_op(lvalues, rvalues, op, str_rep, is_cmp=True)\n\n    return res_values"
  },
  {
    "id" : "b2bb6bad-14e5-4ab8-a3ee-2210c0bc45d1",
    "prId" : 32892,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32892#pullrequestreview-378952090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd535c77-150f-4252-99e6-f0a9a7607039",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "isinstance?",
        "createdAt" : "2020-03-21T20:56:57Z",
        "updatedAt" : "2020-03-21T20:57:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "aee6ca22-5d0b-4698-9cf4-72648d2f724d",
        "parentId" : "dd535c77-150f-4252-99e6-f0a9a7607039",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "we used type to exclude Timedelta; this func is moved unchanged from `__init__` since it is only used in this module",
        "createdAt" : "2020-03-21T21:09:20Z",
        "updatedAt" : "2020-03-21T21:09:20Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c98f22ffc077497c8fbd516c43edb070b072ec6d",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +491,495 @@    from pandas.core.arrays import DatetimeArray, TimedeltaArray\n\n    if type(obj) is timedelta:\n        # GH#22390  cast up to Timedelta to rely on Timedelta\n        # implementation; otherwise operation against numeric-dtype"
  }
]