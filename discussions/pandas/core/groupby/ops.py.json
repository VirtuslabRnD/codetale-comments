[
  {
    "id" : "20736d52-0e46-48d4-ad24-69d1a00934dd",
    "prId" : 24954,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24954#pullrequestreview-196814735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0969beff-8f9e-45fb-90b1-73e8e8d88088",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "So do we even need this object fallback loop?",
        "createdAt" : "2019-01-26T23:06:41Z",
        "updatedAt" : "2019-02-04T09:53:49Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "736a65a9-da89-43a2-88ba-adf6ae141f71",
        "parentId" : "0969beff-8f9e-45fb-90b1-73e8e8d88088",
        "authorId" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "body" : "not for group_add and everything worked fine until now.\r\nstill it seemed like a bug.",
        "createdAt" : "2019-01-27T07:15:47Z",
        "updatedAt" : "2019-02-04T09:53:49Z",
        "lastEditedBy" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "tags" : [
        ]
      }
    ],
    "commit" : "937e44cb2aca62ffb828bd8c05d976b4630fb1c8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +381,385 @@            for dt in [dtype_str, 'object']:\n                f = getattr(libgroupby, \"{fname}_{dtype_str}\".format(\n                    fname=fname, dtype_str=dt), None)\n                if f is not None:\n                    return f"
  },
  {
    "id" : "6d0cf852-e0f1-447a-b65e-ec66269ba92a",
    "prId" : 27683,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27683#pullrequestreview-270719648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52cf4aa0-621e-4d48-93a5-d923ead1cdf5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you move the is_datetimelike and is_numeric checks up here and de-duplicate as needed",
        "createdAt" : "2019-08-04T22:01:51Z",
        "updatedAt" : "2019-08-04T23:52:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "669d02b1-7ae2-49d5-8787-9c4895619c13",
        "parentId" : "52cf4aa0-621e-4d48-93a5-d923ead1cdf5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "done.  not much de-duplication available.  in another pass we can separate out some of the casting from the everything-else and see if there is de-duplication available in algos or something",
        "createdAt" : "2019-08-04T23:53:07Z",
        "updatedAt" : "2019-08-04T23:53:07Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "935d945d-85d0-43ad-93be-7dd4351e1b58",
        "parentId" : "52cf4aa0-621e-4d48-93a5-d923ead1cdf5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok fair, that routine likely needs some cleaning at some point",
        "createdAt" : "2019-08-05T11:57:01Z",
        "updatedAt" : "2019-08-05T11:57:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e05309718ec009d7b0cd79c6b75dac751e143924",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +483,487 @@            #  2D EA is allowed.\n            values = values.view(\"M8[ns]\")\n\n        is_datetimelike = needs_i8_conversion(values.dtype)\n        is_numeric = is_numeric_dtype(values.dtype)"
  },
  {
    "id" : "4eaff2a3-a3ce-467a-9038-16d162603a48",
    "prId" : 28198,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28198#pullrequestreview-282251785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "576847a2-51ab-4a8d-b8b6-892a9146baa6",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is the type(s) of exceptions that raise this not well defined?",
        "createdAt" : "2019-08-28T18:49:25Z",
        "updatedAt" : "2019-09-07T17:53:13Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "886418c0-0507-4da9-b215-9b53186e85a9",
        "parentId" : "576847a2-51ab-4a8d-b8b6-892a9146baa6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "cython raises this (with a message matching this pattern) if we pass a non-ndarray to something expected an ndarray.  im not aware of any other cases we actually want to let pass here",
        "createdAt" : "2019-08-28T19:37:10Z",
        "updatedAt" : "2019-09-07T17:53:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "78f87f1a-7508-45f1-99a4-7c29b1209352",
        "parentId" : "576847a2-51ab-4a8d-b8b6-892a9146baa6",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I assume you saw other non-Cython TypeErrors show up here then?",
        "createdAt" : "2019-08-28T22:23:55Z",
        "updatedAt" : "2019-09-07T17:53:13Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "4517484c-8776-434e-bbe2-dd48a39edf21",
        "parentId" : "576847a2-51ab-4a8d-b8b6-892a9146baa6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "if we dont catch TypeError at all, the only tests that fail are ones where apply_frame_axis0 is raising because it expects an ndarray",
        "createdAt" : "2019-08-28T23:09:22Z",
        "updatedAt" : "2019-09-07T17:53:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "00f9cf10-34d3-40a9-8546-fe221d817852",
        "parentId" : "576847a2-51ab-4a8d-b8b6-892a9146baa6",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I may have asked this wrong but I don't think we are on the same page. So I was thinking to keep catching `TypeError` but was questioning if we need the conditional block therein, as it diverges slightly from the pre-existing behavior.",
        "createdAt" : "2019-08-30T17:04:20Z",
        "updatedAt" : "2019-09-07T17:53:13Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "84daed36-e3f8-4ed1-9195-6a430a874216",
        "parentId" : "576847a2-51ab-4a8d-b8b6-892a9146baa6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> if we need the conditional block therein, as it diverges slightly from the pre-existing behavior.\r\n\r\nChanging the behavior is intentional.  ATM we are `pass`ing on everything, and I want to `pass` on a narrow set of `TypeError`s.  ",
        "createdAt" : "2019-08-30T21:23:47Z",
        "updatedAt" : "2019-09-07T17:53:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "77d6e5d2ad2cd06db12d89bbdd72d11304ecce58",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +214,218 @@                pass\n            except TypeError as err:\n                if \"Cannot convert\" in str(err):\n                    # via apply_frame_axis0 if we pass a non-ndarray\n                    pass"
  },
  {
    "id" : "55020299-3334-4cda-ba31-5605d713b98a",
    "prId" : 28198,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28198#pullrequestreview-282717022",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "735697fc-a929-48fc-bd68-8ac7519fb456",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "looks fine, does this change any perf? IOW this looks like this is now taking a path that previously we raised (and then likely did an .apply on)",
        "createdAt" : "2019-09-02T20:55:38Z",
        "updatedAt" : "2019-09-07T17:53:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e442d9eb-8e57-49ea-81bb-2208989de2c3",
        "parentId" : "735697fc-a929-48fc-bd68-8ac7519fb456",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not sure.  Between this, #27909, and a not-yet-pushed branch that fixes incorrect exception handling in cython_agg_block, I'm pretty sure we'll end up falling back to python-space less often, but it isn't obvious what the individual changes affect perf-wise.",
        "createdAt" : "2019-09-02T23:54:06Z",
        "updatedAt" : "2019-09-07T17:53:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "77d6e5d2ad2cd06db12d89bbdd72d11304ecce58",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +216,220 @@                if \"Cannot convert\" in str(err):\n                    # via apply_frame_axis0 if we pass a non-ndarray\n                    pass\n                else:\n                    raise"
  },
  {
    "id" : "65728d0f-18d4-4a76-8c70-45539e80c29a",
    "prId" : 28634,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28634#pullrequestreview-312150389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ca6c1b8-94fa-4360-b907-03d6167aa284",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some comments here on what is going on",
        "createdAt" : "2019-11-04T14:05:16Z",
        "updatedAt" : "2019-11-07T14:18:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cce3fdb5-cacf-4e40-a941-b232bb570d2c",
        "parentId" : "0ca6c1b8-94fa-4360-b907-03d6167aa284",
        "authorId" : "50a8f1f9-e426-4547-baa9-0c028b12e95f",
        "body" : "ok, I added it. it is inspired by here:\r\nhttps://github.com/pandas-dev/pandas/blob/6cc82344fb319032465d6ee4e3d1c02991ef42c3/pandas/core/groupby/generic.py#L644-L646\r\nthat means get boundaries of ids. In my case, it would be unique result indices which is equivalent to boundaries of result indices.\r\n\r\nI have numberlessly tested along with asv and timeit. as a result, I use bins[1:] != bins[:-1] instead of np.diff for the performance due to their dtype difference.\r\n\r\nIt was quite hard that measure the performance as it fluctuates every time in my environment. so I ran it again and again even though it takes 6~8 hours. several groups fluctuate from 0.5 ~ 1.8 but it looks like \"BENCHMARKS NOT SIGNIFICANTLY CHANGED.\" I'm quite sure that this change won't decrease performance.\r\n\r\n**EDIT: I think that they fluctuate as they are too trivial to compute therefore a few ns difference affects significantly.**",
        "createdAt" : "2019-11-06T01:37:35Z",
        "updatedAt" : "2019-11-07T14:18:52Z",
        "lastEditedBy" : "50a8f1f9-e426-4547-baa9-0c028b12e95f",
        "tags" : [
        ]
      }
    ],
    "commit" : "368311c9adbaf2bef9764fd001a8e3f3340701e1",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +771,775 @@    def recons_codes(self):\n        # get unique result indices, and prepend 0 as groupby starts from the first\n        return [np.r_[0, np.flatnonzero(self.bins[1:] != self.bins[:-1]) + 1]]\n\n    @cache_readonly"
  },
  {
    "id" : "dea92ac0-0836-47b8-b8d0-cce6b42998cb",
    "prId" : 29060,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29060#pullrequestreview-303577917",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37f0125d-f105-4680-875b-0c1b76e4136e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "future PR should push this to pandas/core/dtypes/cast.py and just call here (maybe make ensure_float64_or_complex)",
        "createdAt" : "2019-10-17T21:57:37Z",
        "updatedAt" : "2019-10-17T21:57:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "32ac0a82-da6f-4692-bc6c-715db201a54c",
        "parentId" : "37f0125d-f105-4680-875b-0c1b76e4136e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yah.  i think there was some discussion of a one-pass variant of lib.infer_dtype that would go well with that",
        "createdAt" : "2019-10-17T22:05:18Z",
        "updatedAt" : "2019-10-17T22:05:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "6d23acec-ba82-4b63-acfd-0dd18909ee1a",
        "parentId" : "37f0125d-f105-4680-875b-0c1b76e4136e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "great",
        "createdAt" : "2019-10-17T22:16:52Z",
        "updatedAt" : "2019-10-17T22:16:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "39ba0179ff67e0c6737d2048cefd206795d114ad",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +530,534 @@                    values = ensure_float64(values)\n                except TypeError:\n                    if lib.infer_dtype(values, skipna=False) == \"complex\":\n                        values = values.astype(complex)\n                    else:"
  },
  {
    "id" : "4ed52607-b049-42b8-ad2b-db733b7ebebb",
    "prId" : 29124,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29124#pullrequestreview-310789545",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3dd12903-b791-45a2-a9dc-bd2730e9f9c4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we should make a 1d and 2d version of this and just branch on the calling function to avoid a bunch of special case branches, prob post this PR",
        "createdAt" : "2019-11-02T20:35:13Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c1d82146-7704-4d14-b68b-d9f1015217dd",
        "parentId" : "3dd12903-b791-45a2-a9dc-bd2730e9f9c4",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea same comment on ohlc. When the dust settles and we get block management out of GroupBy I think I'll just rip that out of these methods so we can simplify further",
        "createdAt" : "2019-11-02T21:35:45Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "51b805050e7dfd1a582a7997aa7790482bde0a50",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +430,434 @@        Returns the values of a cython operation as a Tuple of [data, names].\n\n        Names is only useful when dealing with 2D results, like ohlc\n        (see self._name_functions).\n        \"\"\""
  },
  {
    "id" : "ff3f89f0-6f56-49c4-a7db-49f76e342150",
    "prId" : 29124,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29124#pullrequestreview-318030173",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4676c74e-70dd-47c3-98b0-317a3bfeb7a8",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "are you sure `Optional[List[str]]` is right?  I expected something like `List[Optional[Hashable]]`.",
        "createdAt" : "2019-11-17T16:33:41Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "59f55a86-0d31-41c1-9f76-92472420d078",
        "parentId" : "4676c74e-70dd-47c3-98b0-317a3bfeb7a8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "oh, its only for ohlc.  never mind",
        "createdAt" : "2019-11-17T16:34:00Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "51b805050e7dfd1a582a7997aa7790482bde0a50",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +426,430 @@    def _cython_operation(\n        self, kind: str, values, how: str, axis, min_count: int = -1, **kwargs\n    ) -> Tuple[np.ndarray, Optional[List[str]]]:\n        \"\"\"\n        Returns the values of a cython operation as a Tuple of [data, names]."
  },
  {
    "id" : "08a50028-c69a-4239-9f3f-3bab8d105372",
    "prId" : 29144,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29144#pullrequestreview-305498576",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "492f74d7-621a-4876-a2de-f7b44e11cbcb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jbrockmendel the whole block is now basically an `except (..): pass` (so I could make it much shorter), but you might have put in those specific checks as pointers to what to clean up later? ",
        "createdAt" : "2019-10-22T13:52:25Z",
        "updatedAt" : "2019-10-23T14:54:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "65493795-7826-49aa-ae65-ab1c240f0a08",
        "parentId" : "492f74d7-621a-4876-a2de-f7b44e11cbcb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "so something is being done with a DecimalArray that raises a TypeError?  and i guess by not-catching it here it is getting caught somewhere above that isn't doing re-casting appropriately?  can we track down where that is?",
        "createdAt" : "2019-10-22T15:32:34Z",
        "updatedAt" : "2019-10-23T14:54:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "561cfcee-7bec-47dd-873e-2e3e388723e9",
        "parentId" : "492f74d7-621a-4876-a2de-f7b44e11cbcb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "It looks like in _aggregate_series_fast there is a call to libreduction that tries to assign this DecimalArray to a name that libreduction has typed as an ndarray, which raises TypeError",
        "createdAt" : "2019-10-22T15:37:05Z",
        "updatedAt" : "2019-10-23T14:54:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3040c635-2541-4235-b2cb-37d4149b1170",
        "parentId" : "492f74d7-621a-4876-a2de-f7b44e11cbcb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But that is expected I think?",
        "createdAt" : "2019-10-22T16:45:12Z",
        "updatedAt" : "2019-10-23T14:54:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "3b1b6c0b-d83d-4712-a1f5-b6a63e8b47ff",
        "parentId" : "492f74d7-621a-4876-a2de-f7b44e11cbcb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "we get to decide what is \"expected\"; maybe i dont understand what you're getting at",
        "createdAt" : "2019-10-22T17:06:34Z",
        "updatedAt" : "2019-10-23T14:54:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "aee71c08-62a9-471f-9ad5-c50bf7903545",
        "parentId" : "492f74d7-621a-4876-a2de-f7b44e11cbcb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Well, we try the fast path, and if that fails, we go for the slow path. So here it fails, so we choose the slow path. That is how I understand that it is currently designed. ",
        "createdAt" : "2019-10-22T17:23:23Z",
        "updatedAt" : "2019-10-23T14:54:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "05967a3f-f3c1-42a7-afb6-bd0befbba850",
        "parentId" : "492f74d7-621a-4876-a2de-f7b44e11cbcb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "so if we fix the issue in libreduction, there's a chance that the fast path will work",
        "createdAt" : "2019-10-22T19:46:19Z",
        "updatedAt" : "2019-10-23T14:54:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7c502a7b-2ee6-4840-b2cd-b23262580b90",
        "parentId" : "492f74d7-621a-4876-a2de-f7b44e11cbcb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "libreduction is not meant to work for all cases, eg if the values is not an ndarray. Yes, we could handle that differently (eg check in advance if it should work), but that is not the approach that is currently taken. I would prefer to limit the scope of this PR to adding the test cases and restoring the old behaviour with a minimal change.",
        "createdAt" : "2019-10-22T19:49:25Z",
        "updatedAt" : "2019-10-23T14:54:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7fa535db-1071-4a3f-a7ae-0512ed927027",
        "parentId" : "492f74d7-621a-4876-a2de-f7b44e11cbcb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "OK, how about add the test and xfail it.  i'll get to it shortly",
        "createdAt" : "2019-10-22T19:53:12Z",
        "updatedAt" : "2019-10-23T14:54:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "eee01e7a-4b53-47c5-82f1-e06c07d0b062",
        "parentId" : "492f74d7-621a-4876-a2de-f7b44e11cbcb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "If you'll get to it shortly, how about merging this (with further edits based on feedback of course), and at least fixing the regression on master? ",
        "createdAt" : "2019-10-22T19:55:32Z",
        "updatedAt" : "2019-10-23T14:54:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "56b9a6f7-e7d6-4ccf-9ed5-f9f669f136f7",
        "parentId" : "492f74d7-621a-4876-a2de-f7b44e11cbcb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "To clarify: I would personally prefer to merge this without xfail to have the coverage on master. You're doing other PRs cleaning things up in groupby, and it would be good to ensure this keeps working",
        "createdAt" : "2019-10-22T19:58:51Z",
        "updatedAt" : "2019-10-23T14:54:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "27e86cba-c082-4fa2-93de-63679d472c8b",
        "parentId" : "492f74d7-621a-4876-a2de-f7b44e11cbcb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "fair enough",
        "createdAt" : "2019-10-22T20:04:40Z",
        "updatedAt" : "2019-10-23T14:54:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8ab3424a-2e68-4f3e-a363-2a3b786a90ca",
        "parentId" : "492f74d7-621a-4876-a2de-f7b44e11cbcb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "actually, can you do the same `str(err)` checking so that we only let through the relevant TypeErrors?  One of the other PRs afoot is specifically targeting other TypeErrors",
        "createdAt" : "2019-10-22T20:06:07Z",
        "updatedAt" : "2019-10-23T14:54:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7e1ec13c-56c4-45db-9014-f55d3473b198",
        "parentId" : "492f74d7-621a-4876-a2de-f7b44e11cbcb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "That's an error message coming from another library though (cython?). Do we have guarantee that that is stable? \r\n(the other two errors that are catched that way are raised by our own code in reduction.pyx)",
        "createdAt" : "2019-10-22T20:14:37Z",
        "updatedAt" : "2019-10-23T14:54:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "602ec7b1-75ee-4e4a-a72b-bca0fb7c9af2",
        "parentId" : "492f74d7-621a-4876-a2de-f7b44e11cbcb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> Do we have guarantee that that is stable?\r\n\r\nIf nothing else, you can check that both \"ndarray\" and \"DecimalArray\" are present.  I'm sure you can figure something out.\r\n",
        "createdAt" : "2019-10-22T20:37:17Z",
        "updatedAt" : "2019-10-23T14:54:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "234c4ea6-0450-4564-ae7e-54466fdf5be6",
        "parentId" : "492f74d7-621a-4876-a2de-f7b44e11cbcb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is not only for DecimalArray, but for any kind of internal/external EA. ",
        "createdAt" : "2019-10-22T20:47:44Z",
        "updatedAt" : "2019-10-23T14:54:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "8c98b9a1-1328-44ab-8905-aa728fef5f29",
        "parentId" : "492f74d7-621a-4876-a2de-f7b44e11cbcb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But can add the check for just ndarray. ",
        "createdAt" : "2019-10-22T20:48:51Z",
        "updatedAt" : "2019-10-23T14:54:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "83535c744532d1fd857f94cd143a2137aa4aebb0",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +676,680 @@            if \"ndarray\" in str(err):\n                # raised in libreduction if obj's values is no ndarray\n                pass\n            else:\n                raise"
  },
  {
    "id" : "82a34f6a-fc4c-4fa1-89ec-8a334cec510d",
    "prId" : 29186,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29186#pullrequestreview-307221754",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e963c76-c078-412e-a400-c0b16f805721",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is done in the code calling this (via `agg_series`):\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/82df98a04cea9ebb84df2a1271dc1a23f55212ba/pandas/core/groupby/groupby.py#L899-L905\r\n\r\n",
        "createdAt" : "2019-10-25T13:57:05Z",
        "updatedAt" : "2019-10-25T13:57:13Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "f48c9ff12116d70568e99c9334826a3f3ab9f7c7",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +727,731 @@\n        result = lib.maybe_convert_objects(result, try_float=0)\n        # TODO: try_cast back to EA?\n        return result, counts\n"
  },
  {
    "id" : "88163be6-b673-4573-8c94-a0edfaa7fc64",
    "prId" : 29186,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29186#pullrequestreview-307221754",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b87f5a79-b7a7-45e1-8bad-38eaa7d28516",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Do you know why it is working for datetimes?",
        "createdAt" : "2019-10-25T13:57:08Z",
        "updatedAt" : "2019-10-25T13:57:13Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "f48c9ff12116d70568e99c9334826a3f3ab9f7c7",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +664,668 @@            # _aggregate_series_fast would raise TypeError when\n            #  calling libreduction.Slider\n            # TODO: is the datetime64tz case supposed to go through here?\n            return self._aggregate_series_pure_python(obj, func)\n"
  },
  {
    "id" : "d087f031-5a03-4e57-b72d-5b5c73e18dc9",
    "prId" : 29195,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29195#pullrequestreview-307178095",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "614a5950-1d26-4b74-8a4f-276d6286de32",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Do you generally know of a reason why we have `_has_complex_internals` as a Index property? I think only changed for a MultiIndex and only applicable in groupby space.\r\n\r\nMight be easier and clearer to just do a isinstance(..., MultiIndex)",
        "createdAt" : "2019-10-23T21:35:03Z",
        "updatedAt" : "2019-10-23T21:35:03Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d59497e8-14eb-43cc-a5e3-daca1c18128b",
        "parentId" : "614a5950-1d26-4b74-8a4f-276d6286de32",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'm not aware of the history there no.",
        "createdAt" : "2019-10-23T22:11:27Z",
        "updatedAt" : "2019-10-23T22:11:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e6b5d344-db59-451d-bf93-38bf3f78874f",
        "parentId" : "614a5950-1d26-4b74-8a4f-276d6286de32",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Cool; just asking - probably a historical relic.\r\n\r\nHaven't gone too deep on this one yet but will file comments (most likely) tomorrow",
        "createdAt" : "2019-10-23T22:16:44Z",
        "updatedAt" : "2019-10-23T22:16:44Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d2c3bc9e-6a64-4778-bb69-f0580526b74a",
        "parentId" : "614a5950-1d26-4b74-8a4f-276d6286de32",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "_has_complex_internals predates me :->",
        "createdAt" : "2019-10-25T12:46:23Z",
        "updatedAt" : "2019-10-25T12:46:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "226937436becacbc0b466256bcab6fc99667d3cf",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +201,205 @@            # with MultiIndex, apply_frame_axis0 would raise InvalidApply\n            # TODO: can we make this check prettier?\n            and not splitter._get_sorted_data().index._has_complex_internals\n        ):\n            try:"
  },
  {
    "id" : "b923c988-b472-4bd2-a32f-7d28b92ba5d6",
    "prId" : 29261,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29261#pullrequestreview-308814259",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05c67f30-d7ba-4341-b923-16c558927bda",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would move this to the Splittler class something like\r\n\r\n```\r\n@cache_only\r\ndef has_extension_array(self):\r\n     return self.data.dtypes.apply(...)\r\n```\r\n\r\nand can handle this on Series & Frame splitter",
        "createdAt" : "2019-10-29T20:28:53Z",
        "updatedAt" : "2019-11-02T15:30:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9b2ad343-81b0-407e-8ad5-9d75433a33e7",
        "parentId" : "05c67f30-d7ba-4341-b923-16c558927bda",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yah, this function is definitely getting refactored in a later pass.  id like to get the exceptions sorted out before trying to decide about the refactor",
        "createdAt" : "2019-10-29T20:32:27Z",
        "updatedAt" : "2019-11-02T15:30:10Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "52d781e88f250de0cffa5482c52a4e37251c83c3",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +142,146 @@\n        sdata = splitter._get_sorted_data()\n        if sdata.ndim == 2 and np.any(sdata.dtypes.apply(is_extension_array_dtype)):\n            # calling splitter.fast_apply will raise TypeError via apply_frame_axis0\n            #  if we pass EA instead of ndarray"
  },
  {
    "id" : "23c63669-3d49-46ae-a647-9af03eea1fbe",
    "prId" : 29327,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29327#pullrequestreview-310705770",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d47fdf38-121b-4e46-a014-845e06ab9f95",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i think this edit is unrelated, snuck in on accident",
        "createdAt" : "2019-11-01T21:31:21Z",
        "updatedAt" : "2019-11-02T02:37:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "48decb634e58c4037e9daab0d0d17c3290494767",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +791,795 @@\n\ndef _is_indexed_like(obj, axes) -> bool:\n    if isinstance(obj, Series):\n        if len(axes) > 1:"
  },
  {
    "id" : "13aa82d9-9e0b-4ef7-b248-f4b8a47fa4ac",
    "prId" : 29456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29456#pullrequestreview-316199508",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17beec20-013f-4616-9a3b-1af2f6f6704a",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "why is this needed?\r\n\r\nshouldn't need to add a type annotation here. maybe the return type of `_get_sorted_data` needs to be added.",
        "createdAt" : "2019-11-10T17:55:23Z",
        "updatedAt" : "2019-11-12T19:59:49Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "d702b1fe-bd75-4eb9-bf35-f053e69e8d92",
        "parentId" : "17beec20-013f-4616-9a3b-1af2f6f6704a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "_get_sorted_data return type is annotated, but mypy complains without this",
        "createdAt" : "2019-11-10T17:59:37Z",
        "updatedAt" : "2019-11-12T19:59:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3947f443-3ee4-43e7-a188-6079efd61646",
        "parentId" : "17beec20-013f-4616-9a3b-1af2f6f6704a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can update to py3.6 syntax in a followon",
        "createdAt" : "2019-11-12T23:45:36Z",
        "updatedAt" : "2019-11-12T23:45:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b5289b6d-d151-4d98-9e6a-c9af01e08f55",
        "parentId" : "17beec20-013f-4616-9a3b-1af2f6f6704a",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "no longer needed after https://github.com/pandas-dev/pandas/pull/28339/commits/e6c5f5a31e5a5912bd572e08f03756cbc075752c",
        "createdAt" : "2019-11-13T12:12:09Z",
        "updatedAt" : "2019-11-13T12:12:10Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d3d4850150a0b39db41db3d10027c0cd0482d9f",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +154,158 @@        result_values = None\n\n        sdata = splitter._get_sorted_data()  # type: FrameOrSeries\n        if sdata.ndim == 2 and np.any(sdata.dtypes.apply(is_extension_array_dtype)):\n            # calling splitter.fast_apply will raise TypeError via apply_frame_axis0"
  },
  {
    "id" : "8064a74d-b481-4a59-bffa-9470519d5951",
    "prId" : 29456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29456#pullrequestreview-316198605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca4e3447-f5fd-4962-a830-823b9c269fa6",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "why is NDFrame used? is _chop not generic? should DataSplitter be a generic class?",
        "createdAt" : "2019-11-10T18:02:09Z",
        "updatedAt" : "2019-11-12T19:59:49Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "04ba87f6-2441-4a95-bb51-e9f837036ddf",
        "parentId" : "ca4e3447-f5fd-4962-a830-823b9c269fa6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I dont understand the question.  Is \"generic class\" meaningfully different from \"base class\"?  NDFrame is used because one subclass returns Series and the other returns DataFrame",
        "createdAt" : "2019-11-10T18:05:16Z",
        "updatedAt" : "2019-11-12T19:59:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0f5ca9f9-622c-44bc-a39d-73662894a249",
        "parentId" : "ca4e3447-f5fd-4962-a830-823b9c269fa6",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "`DataSplitter.__init__` accepts `FrameOrSeries`. do we need to persist this type thoughout the class. i.e. make DataSplitter a generic class. see https://mypy.readthedocs.io/en/latest/generics.html#defining-generic-classes",
        "createdAt" : "2019-11-10T18:11:14Z",
        "updatedAt" : "2019-11-12T19:59:49Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "f6d3d6fe-358b-4787-b598-5b36ce3cbc20",
        "parentId" : "ca4e3447-f5fd-4962-a830-823b9c269fa6",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "so looking at the definition of _chop in the derived classes, i'm guessing this abstractmethod should be typed as \r\n```\r\n def _chop(self, sdata: FrameOrSeries, slice_obj: slice) -> FrameOrSeries:\r\n```",
        "createdAt" : "2019-11-10T18:25:39Z",
        "updatedAt" : "2019-11-12T19:59:49Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "2a310e51-2170-43c1-abc1-d674c9f74975",
        "parentId" : "ca4e3447-f5fd-4962-a830-823b9c269fa6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Using FrameOrSeries here produces complaints:\r\n\r\n```\r\npandas/core/groupby/ops.py:879: error: Argument 1 of \"_chop\" is incompatible with supertype \"DataSplitter\"; supertype defines the argument type as \"FrameOrSeries\"\r\npandas/core/groupby/ops.py:879: error: Return type \"Series\" of \"_chop\" incompatible with return type \"FrameOrSeries\" in supertype \"DataSplitter\"\r\npandas/core/groupby/ops.py:891: error: Argument 1 of \"_chop\" is incompatible with supertype \"DataSplitter\"; supertype defines the argument type as \"FrameOrSeries\"\r\npandas/core/groupby/ops.py:891: error: Return type \"DataFrame\" of \"_chop\" incompatible with return type \"FrameOrSeries\" in supertype \"DataSplitter\"\r\n```\r\n\r\nI'm getting close to saying \"screw it\" when dealing with this type of error.",
        "createdAt" : "2019-11-10T19:48:56Z",
        "updatedAt" : "2019-11-12T19:59:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "cb8d1bfb-5378-4c46-8c61-e8ab7e931f94",
        "parentId" : "ca4e3447-f5fd-4962-a830-823b9c269fa6",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "fair enough. probably best to remove the type annotation here then for now. Having one method return FrameOrSeries and another NDFrame seems inconsistent.",
        "createdAt" : "2019-11-10T19:52:42Z",
        "updatedAt" : "2019-11-12T19:59:49Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "24c2ac0d-50d0-440d-a8a8-e459445e8ffd",
        "parentId" : "ca4e3447-f5fd-4962-a830-823b9c269fa6",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think `NDFrame` is correct here; this function isn't generic in the base class rather the subclasses override with the appropriate object",
        "createdAt" : "2019-11-10T19:53:06Z",
        "updatedAt" : "2019-11-12T19:59:49Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "5a7dd816-e99c-4bc8-80a0-cb2cd999c642",
        "parentId" : "ca4e3447-f5fd-4962-a830-823b9c269fa6",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "mypy won't be looking at the derived classes when it performs type checking. it'll be looking at the type hints on the base class when it checks other methods in the base class.\r\n\r\nthe abstractmethod should be generic since that is how the derived classes are typed Series -> Series and DataFrame -> DataFrame.\r\n",
        "createdAt" : "2019-11-10T19:58:01Z",
        "updatedAt" : "2019-11-12T19:59:49Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "e29c8ce9-5d4e-4bc6-8d13-66448e2575ab",
        "parentId" : "ca4e3447-f5fd-4962-a830-823b9c269fa6",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think we are mixing a few different paradigms here. The subclasses should probably be annotated with the type respective to the class, rather than using the TypeVar, i.e. you would never parametrize a `SeriesSplitter` with a DataFrame - it exclusively deals with Series objects",
        "createdAt" : "2019-11-10T20:02:46Z",
        "updatedAt" : "2019-11-12T19:59:49Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "bdd918c6-3ad8-4645-bde4-3fa35c3c89e4",
        "parentId" : "ca4e3447-f5fd-4962-a830-823b9c269fa6",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> you would never parametrize a `SeriesSplitter` with a DataFrame - it exclusively deals with Series objects\r\n\r\ncorrect. but if a method of the base class is not overridden then the Series type in the derived class will become an NDFrame type after calling that method in the base class.",
        "createdAt" : "2019-11-10T20:07:24Z",
        "updatedAt" : "2019-11-12T19:59:49Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "c08285ed-3662-407e-85c8-792fa310bea1",
        "parentId" : "ca4e3447-f5fd-4962-a830-823b9c269fa6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> I think we are mixing a few different paradigms here.\r\n\r\nThere are some annotations in this PR that make it easier to reason about this code while reading it.  The annotations in this sub-thread are not among them, so I do not particularly care about them.  Let's focus for now on a minimal change needed to get this merged, as there are more bugfix PRs waiting in the wings.",
        "createdAt" : "2019-11-10T20:14:25Z",
        "updatedAt" : "2019-11-12T19:59:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "20266dd1-e8a2-4c61-a076-7f80f0a6d8a4",
        "parentId" : "ca4e3447-f5fd-4962-a830-823b9c269fa6",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "https://github.com/pandas-dev/pandas/pull/28339/commits/e6c5f5a31e5a5912bd572e08f03756cbc075752c fixes this.",
        "createdAt" : "2019-11-13T12:10:26Z",
        "updatedAt" : "2019-11-13T12:10:26Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d3d4850150a0b39db41db3d10027c0cd0482d9f",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +896,900 @@        return self.data.take(self.sort_idx, axis=self.axis)\n\n    def _chop(self, sdata, slice_obj: slice) -> NDFrame:\n        raise AbstractMethodError(self)\n"
  },
  {
    "id" : "eb33d33b-05eb-4be1-8744-9e27f979da30",
    "prId" : 29456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29456#pullrequestreview-314632468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5bb615f4-8c22-4186-a030-149c9bc2e162",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "should this be Series?",
        "createdAt" : "2019-11-10T18:05:27Z",
        "updatedAt" : "2019-11-12T19:59:49Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "49eb8172-943c-4c43-bf7a-269e57da7038",
        "parentId" : "5bb615f4-8c22-4186-a030-149c9bc2e162",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "im pretty sure this is correct as-is",
        "createdAt" : "2019-11-10T18:12:17Z",
        "updatedAt" : "2019-11-12T19:59:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3db6bf78-a822-4f1f-a44a-c6a36220ad6e",
        "parentId" : "5bb615f4-8c22-4186-a030-149c9bc2e162",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "ahh ok, had the class FrameSplitter hidden and just saw the class SeriesSplitter above. I guess sdata doesn't mean series data then.",
        "createdAt" : "2019-11-10T18:19:38Z",
        "updatedAt" : "2019-11-12T19:59:49Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d3d4850150a0b39db41db3d10027c0cd0482d9f",
    "line" : 176,
    "diffHunk" : "@@ -1,1 +913,917 @@        return libreduction.apply_frame_axis0(sdata, f, names, starts, ends)\n\n    def _chop(self, sdata: DataFrame, slice_obj: slice) -> DataFrame:\n        if self.axis == 0:\n            return sdata.iloc[slice_obj]"
  },
  {
    "id" : "9c38824a-f3d2-4e34-8712-eaf47566c350",
    "prId" : 29500,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29500#pullrequestreview-314584209",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cf2f437-bc07-4701-a321-fce344c834de",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm should we not just fix `_aggregate_series_fast` to not raise in that case then? Hoping to avoid special casing like this in any groupby functions",
        "createdAt" : "2019-11-10T00:27:11Z",
        "updatedAt" : "2019-11-12T19:51:28Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "58effed0-9981-47f7-9bab-83068da50f95",
        "parentId" : "0cf2f437-bc07-4701-a321-fce344c834de",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> Hoping to avoid special casing like this in any groupby functions\r\n\r\nAgreed on the goal.  ATM this is the best way to make progress towards that goal.  In particular, making this explicit here is much clearer than catching the ValueError with the particular message on L600.\r\n\r\n> should we not just fix _aggregate_series_fast to not raise in that case then? \r\n\r\n#29499 does something along those lines.",
        "createdAt" : "2019-11-10T00:41:59Z",
        "updatedAt" : "2019-11-12T19:51:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "38067edeb69915b07c29d0016e3368a5477f39e3",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +606,610 @@\n        if len(obj) == 0:\n            # SeriesGrouper would raise if we were to call _aggregate_series_fast\n            return self._aggregate_series_pure_python(obj, func)\n"
  },
  {
    "id" : "bde6434c-0761-4e78-995a-8f6f3e155ebf",
    "prId" : 29641,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29641#pullrequestreview-318440495",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cfb63fd-3ebb-4f3e-b602-c8a90770e0a8",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Why is this actually needed? For any later iteration, the len-1 `res` is just assigned below with `result[label] = res`, so why does it need to be unpacked for the first group?",
        "createdAt" : "2019-11-18T07:43:40Z",
        "updatedAt" : "2019-11-18T07:44:26Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "83f547f9-f1a9-4b8d-b360-8bba149a10c3",
        "parentId" : "5cfb63fd-3ebb-4f3e-b602-c8a90770e0a8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We might be able to get rid of this, but at this stage the goal is just to make the behavior match libreduction._extract_result",
        "createdAt" : "2019-11-18T15:12:42Z",
        "updatedAt" : "2019-11-18T15:12:43Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "4f482ebd-f078-46f8-84fe-2fa2bed80bf4",
        "parentId" : "5cfb63fd-3ebb-4f3e-b602-c8a90770e0a8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But in the cython version that calls `_extract_result`, this is done for each group, not just the first (so in that sense it still doesn't match that)",
        "createdAt" : "2019-11-18T15:35:17Z",
        "updatedAt" : "2019-11-18T15:35:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "3c8a4093-a932-48dc-9f88-b781b874b453",
        "parentId" : "5cfb63fd-3ebb-4f3e-b602-c8a90770e0a8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : ">  But in the cython version that calls _extract_result, this is done for each group, not just the first (so in that sense it still doesn't match that)\r\n\r\nThis is correct.  The more closely matching behavior is that only the first group is checked for array-like (there's also a discrepancy in what types of arraylikes are checked)  (there's  also^2 a discrepancy in that Reducer.get_result does a `res = res.values` check that is similar to _extract_result but not quite the same)",
        "createdAt" : "2019-11-18T15:59:36Z",
        "updatedAt" : "2019-11-18T15:59:36Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d542515e3c1d77d1cf37c3008224c83406bb8edb",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +664,668 @@                        # TODO: use `.item()` if/when we un-deprecate it.\n                        # For non-Series we could just do `res[0]`\n                        res = next(iter(res))\n                    else:\n                        raise ValueError(\"Function does not reduce\")"
  },
  {
    "id" : "4afe6973-9688-46a1-badb-0093723c289b",
    "prId" : 31238,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31238#pullrequestreview-348406654",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e05fc8aa-6c54-4d52-9848-f9946debbfb4",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "This now excludes `PeriodIndex`, which previously worked fine since `.values` converted to a numpy array.  It looks more performant to exclude `PeriodIndex` though, since we avoid the conversion to numpy:\r\n```python\r\nIn [1]: import numpy as np \r\n   ...: import pandas as pd \r\n   ...: from string import ascii_letters \r\n   ...:  \r\n   ...: np.random.seed(123) \r\n   ...: group = np.random.choice(list(ascii_letters), 10**5) \r\n   ...: value = np.random.randint(12345, size=10**5) \r\n   ...: index = pd.period_range(\"2000\", freq=\"D\", periods=10**5) \r\n   ...: df = pd.DataFrame({\"group\": group, \"value\": value}, index=index)\r\n\r\nIn [2]: %timeit df.groupby(\"group\").agg({\"value\": pd.Series.nunique})\r\n17.8 ms ± 48.2 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)  # on this branch\r\n95.9 ms ± 183 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)  # on master\r\n```",
        "createdAt" : "2020-01-26T21:42:30Z",
        "updatedAt" : "2020-01-28T01:07:36Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc400cd6d9a61c5ba0e7c1251cce8aee0b10a1a4",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +617,621 @@            return self._aggregate_series_pure_python(obj, func)\n\n        elif obj.index._has_complex_internals:\n            # Pre-empt TypeError in _aggregate_series_fast\n            return self._aggregate_series_pure_python(obj, func)"
  },
  {
    "id" : "e4323ecf-2d5b-4acd-a84d-165fb2f41037",
    "prId" : 31359,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31359#pullrequestreview-350384648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25c06584-d5a2-49bb-bed8-a76d14d8e455",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Ugly! But this ensures that `Series[IntDtype].resample().sum()` has int dtype. Assuming we want the restriction \"only try casting back to EA when the scalars results are instances of the EA dtypes type, then I think this is the least worst option.\r\n\r\nI briefly tried avoiding the cast from Int64 -> float with NaN, but that wasn't feasible today. Our Cython reductions like `group_add` only handle floats IIUC.",
        "createdAt" : "2020-01-29T15:26:14Z",
        "updatedAt" : "2020-01-29T19:29:57Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "4a820c2d-b279-4729-9175-cd7ea2772de3",
        "parentId" : "25c06584-d5a2-49bb-bed8-a76d14d8e455",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "TODO comment suggesting this get cleaned up, pointing back to this thread?",
        "createdAt" : "2020-01-29T19:29:55Z",
        "updatedAt" : "2020-01-29T19:29:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e6223ee4-f2a0-4b10-a7b6-ab7353bb0b72",
        "parentId" : "25c06584-d5a2-49bb-bed8-a76d14d8e455",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Going to open an issue and will point here.",
        "createdAt" : "2020-01-29T19:57:32Z",
        "updatedAt" : "2020-01-29T19:57:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b826bb710f4fb6f480127042b3c4e26ebb00f7e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +544,548 @@                result = result.astype(\"float64\")\n                result[mask] = np.nan\n        elif (\n            how == \"add\"\n            and is_integer_dtype(orig_values.dtype)"
  },
  {
    "id" : "98b3092c-7288-4f35-89ec-2519b6c98e9e",
    "prId" : 31477,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31477#pullrequestreview-351887323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ce5baa0-8c5f-4b10-9b8a-bc4faddf9494",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm you maybe able to collapse this entire thing to\r\n\r\n```\r\nif is_datetimelike:\r\n    result = type(orig_values)(result.astype(np.int64), dtype=orig_values.dtype)\r\n```\r\n\r\n(and remove the next case)",
        "createdAt" : "2020-01-31T03:47:24Z",
        "updatedAt" : "2020-02-04T21:30:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2c8291f8-527f-4c1f-860b-5b4e702b585c",
        "parentId" : "4ce5baa0-8c5f-4b10-9b8a-bc4faddf9494",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "It looks like this ends up raising in that case: https://github.com/pandas-dev/pandas/blob/master/pandas/tests/groupby/test_groupby.py#L150",
        "createdAt" : "2020-01-31T14:29:22Z",
        "updatedAt" : "2020-02-04T21:30:16Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "56bdc279-38d1-4f2f-a947-2c32233ba0ef",
        "parentId" : "4ce5baa0-8c5f-4b10-9b8a-bc4faddf9494",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add an issue reference and a short comment on why we are doing this",
        "createdAt" : "2020-02-01T14:40:10Z",
        "updatedAt" : "2020-02-04T21:30:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "61b1016a3c4dd36c2bea469abccdc1b0b9f5f4e7",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +569,573 @@            result = result.swapaxes(0, axis)\n\n        if is_datetime64tz_dtype(orig_values.dtype) or is_period_dtype(\n            orig_values.dtype\n        ):"
  },
  {
    "id" : "9e813ce0-3002-4925-bd32-2e1f80287483",
    "prId" : 31814,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31814#pullrequestreview-355621869",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5677a877-e7c0-48df-8532-023aa0e422d2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "a more natural idiom (used in many places is)\r\n```\r\nindexer = [None] * 2\r\nindexer[axis] = slice(start, edge)\r\nslicer = data.iloc[indexer]\r\n```",
        "createdAt" : "2020-02-09T16:48:29Z",
        "updatedAt" : "2020-02-09T16:48:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "334b75b8-9b02-4143-af0c-6ee56fa2bd09",
        "parentId" : "5677a877-e7c0-48df-8532-023aa0e422d2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i guess, but thats not really conducive to being a lambda",
        "createdAt" : "2020-02-09T17:26:08Z",
        "updatedAt" : "2020-02-09T17:26:09Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "038ec5f6-6ca6-4eaa-9edd-abf12ddf0754",
        "parentId" : "5677a877-e7c0-48df-8532-023aa0e422d2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why does this need to be a lamba?",
        "createdAt" : "2020-02-09T17:31:09Z",
        "updatedAt" : "2020-02-09T17:31:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d7580991-d070-450d-9efc-88b6c62ae210",
        "parentId" : "5677a877-e7c0-48df-8532-023aa0e422d2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "doesnt have to be, thats just the pattern we have now.  i find `iloc[:, start:end]` clearer than the 3-line version",
        "createdAt" : "2020-02-09T17:37:01Z",
        "updatedAt" : "2020-02-09T17:37:01Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "cdd0e25f-7064-4bfe-a6d7-29d6b1a486b7",
        "parentId" : "5677a877-e7c0-48df-8532-023aa0e422d2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok",
        "createdAt" : "2020-02-09T17:43:11Z",
        "updatedAt" : "2020-02-09T17:43:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "77601ec2c8deeed637edfb98e03e9d5169a8dd75",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +781,785 @@        for each group\n        \"\"\"\n        if axis == 0:\n            slicer = lambda start, edge: data.iloc[start:edge]\n        else:"
  },
  {
    "id" : "0f8b2919-f584-4fb9-8394-8f6c3b9cd4e8",
    "prId" : 32914,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32914#pullrequestreview-391732650",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9c85857-5ea4-4633-ac75-9c0f7712acb1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if you move line 568 (the is_extension_array_dtype) before line 558, can we then completely remove lines 558-556? (these are *already* extension dtypes).",
        "createdAt" : "2020-04-10T17:08:17Z",
        "updatedAt" : "2020-05-07T10:43:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6cda57a2-f607-4a51-a589-83a4def9134f",
        "parentId" : "f9c85857-5ea4-4633-ac75-9c0f7712acb1",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "No, it looks like we still get a lot of failures. I could add back the integer check to avoid trying to cast things twice?",
        "createdAt" : "2020-04-11T03:43:55Z",
        "updatedAt" : "2020-05-07T10:43:14Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "0443d7374f7044e239226f636bf38555f01dbe63",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +573,577 @@            result = result.astype(orig_values.dtype)\n\n        if is_extension_array_dtype(orig_values.dtype):\n            result = maybe_cast_result(result=result, obj=orig_values, how=how)\n"
  },
  {
    "id" : "b676ce8e-3ce7-4567-8078-884b065941ca",
    "prId" : 32921,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32921#pullrequestreview-379642678",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d8aec62-838d-4e01-bd36-e29a351a8b1d",
        "parentId" : null,
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "@WillAyd Had to add this ellipsis here; any idea why mypy likes this but not just `Tuple[int]`?",
        "createdAt" : "2020-03-23T14:52:37Z",
        "updatedAt" : "2020-04-26T21:53:14Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "e28bbab9-537e-434f-ba32-60a5f0c02d82",
        "parentId" : "9d8aec62-838d-4e01-bd36-e29a351a8b1d",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "`Tuple[int]` means a tuple of size one containing an interger. `Tuple[int, ...]` means a tuple of an arbitrary size containing integers\r\n\r\nI think should be `Tuple[int, int]` no? i.e. a tuple with two integers",
        "createdAt" : "2020-03-23T15:08:51Z",
        "updatedAt" : "2020-04-26T21:53:14Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "38d6e797-c411-4199-98c1-5f0926766167",
        "parentId" : "9d8aec62-838d-4e01-bd36-e29a351a8b1d",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "My guess is that `self.groupings` has arbitrary length so the return type needs to also",
        "createdAt" : "2020-03-23T17:14:45Z",
        "updatedAt" : "2020-04-26T21:53:14Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "6419d1a94a11aad0c326a04dc26a40a3f30348f3",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +111,115 @@\n    @property\n    def shape(self) -> Tuple[int, ...]:\n        return tuple(ping.ngroups for ping in self.groupings)\n"
  },
  {
    "id" : "d0aeb4dc-834e-41df-857e-3a411e0d4ecc",
    "prId" : 32921,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32921#pullrequestreview-395100922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5755a142-6b4c-4ac5-ac0f-425fecc9fe42",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can we say anything about names?",
        "createdAt" : "2020-04-16T22:53:16Z",
        "updatedAt" : "2020-04-26T21:53:14Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "87d7a59c-9ced-4605-afb4-cd404d78dbf4",
        "parentId" : "5755a142-6b4c-4ac5-ac0f-425fecc9fe42",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Possibly List[Label] but I'm not sure",
        "createdAt" : "2020-04-17T01:17:23Z",
        "updatedAt" : "2020-04-26T21:53:14Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "6419d1a94a11aad0c326a04dc26a40a3f30348f3",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +971,975 @@\nclass FrameSplitter(DataSplitter):\n    def fast_apply(self, f: F, sdata: FrameOrSeries, names):\n        # must return keys::list, values::list, mutated::bool\n        starts, ends = lib.generate_slices(self.slabels, self.ngroups)"
  },
  {
    "id" : "1140b6f4-893b-49d7-a006-bac1661c51f7",
    "prId" : 33388,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33388#pullrequestreview-399631773",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2bd6ae4-5ffe-43f6-91bf-fca2970aa141",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you condense these to a single function call (with whatever return args you need later on)\r\nyou can certainly leave these functions individually in core.util.numba_, just when you are calling it would make th api simpler here. (also if you can do this simplification other places we call numba).\r\n\r\ncan do this in a followup.",
        "createdAt" : "2020-04-23T17:01:26Z",
        "updatedAt" : "2020-04-24T05:09:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ef5fd90c-71ce-4070-a4d5-b83a18002df6",
        "parentId" : "e2bd6ae4-5ffe-43f6-91bf-fca2970aa141",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Sure can follow up with this cleanup",
        "createdAt" : "2020-04-24T04:29:19Z",
        "updatedAt" : "2020-04-24T05:09:18Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "123e53a0fba00bb86cdbf8da4fc9b99e4e85bb8c",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +676,680 @@\n        if engine == \"numba\":\n            nopython, nogil, parallel = get_jit_arguments(engine_kwargs)\n            check_kwargs_and_nopython(kwargs, nopython)\n            validate_udf(func)"
  },
  {
    "id" : "2216e63f-53ad-4010-95ae-be54632a695c",
    "prId" : 34307,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34307#pullrequestreview-446823454",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15ce9920-93d0-4433-9292-df2be6e35c41",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, we really need to do this twice?",
        "createdAt" : "2020-06-20T15:17:22Z",
        "updatedAt" : "2020-09-30T08:18:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6e8ad0f9-8a56-406f-9c5b-c6cba7aded4a",
        "parentId" : "15ce9920-93d0-4433-9292-df2be6e35c41",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I did it this way because we need to have `ensure_float` to convert a EA FloatingArray into a numpy float array, and the cython `ensure_float64` is written to expect a numpy array, not an EA. \r\nIf you actually have already a float64 ndarray, the `ensure_float` is a no-op.",
        "createdAt" : "2020-06-22T08:17:35Z",
        "updatedAt" : "2020-09-30T08:18:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d16d2b98-c1b1-4f8c-a725-399e937a7dd0",
        "parentId" : "15ce9920-93d0-4433-9292-df2be6e35c41",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "how about you make the same mod in ensure_float64 then, much more clear",
        "createdAt" : "2020-07-10T22:54:06Z",
        "updatedAt" : "2020-09-30T08:18:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "489e6a39-b24a-4416-9fe6-b394f041461a",
        "parentId" : "15ce9920-93d0-4433-9292-df2be6e35c41",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`ensure_float64` is a cython function that is used in many places, so doing something like that might affect performance in many cases, so needs to be done carefully, so I would rather want to keep that for a different PR. I also think it might be clearn to leave those `ensure_<dtype>` to deal with only numpy arrays (in addition, `ensure_float64` is also implemented as a template-ized method for many different dtypes, so it's not that straightforward to add a custom check only for float).",
        "createdAt" : "2020-07-11T19:21:14Z",
        "updatedAt" : "2020-09-30T08:18:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "edf9618d49de3f04d8f18e099c60310ae40296f7",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +493,497 @@                values = ensure_int_or_float(values)\n        elif is_numeric and not is_complex_dtype(values):\n            values = ensure_float64(ensure_float(values))\n        else:\n            values = values.astype(object)"
  },
  {
    "id" : "24153dd9-fcf4-489e-b310-145ee4eb1217",
    "prId" : 36604,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36604#pullrequestreview-661569191",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81d2a05b-f6b7-4bc6-8ab4-2f31ff665876",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@arw2019 this attribute isnt used anywhere except for in the test added in this PR.  is it still needed?  is it part of a precursor to something on the horizon?",
        "createdAt" : "2021-05-18T02:07:46Z",
        "updatedAt" : "2021-05-18T02:07:46Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "61f0553b38b1df2f99fd7d14643e2bace6c69889",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +99,103 @@        self.mutated = mutated\n        self.indexer = indexer\n        self.dropna = dropna\n\n    @property"
  },
  {
    "id" : "7e4bbe68-0c65-43de-8efa-97e64d6454c3",
    "prId" : 38162,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38162#pullrequestreview-545071628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbf85c42-9182-443b-9ca4-5ba78d754e47",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This should probably also handle FloatingArray?",
        "createdAt" : "2020-12-04T15:34:47Z",
        "updatedAt" : "2020-12-04T15:34:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e26ab6cb-f4af-4ca4-ab28-888a0829d55d",
        "parentId" : "cbf85c42-9182-443b-9ca4-5ba78d754e47",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yes, ive got a branch doing that right now, hopefully will make a PR today.",
        "createdAt" : "2020-12-04T15:37:10Z",
        "updatedAt" : "2020-12-04T15:37:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "cb644350-fac5-40e6-88a6-812ca9e2eefa",
        "parentId" : "cbf85c42-9182-443b-9ca4-5ba78d754e47",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK, yes please try to do that shortly, as that should go into 1.2 ideally (before this PR, FloatArray was going through the cython groupby algos, but now not anymore)",
        "createdAt" : "2020-12-04T15:44:03Z",
        "updatedAt" : "2020-12-04T15:44:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d2ccbcbd60f7ad78e57e82573776160637fdd52",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +498,502 @@\n        elif is_integer_dtype(values.dtype) or is_bool_dtype(values.dtype):\n            # IntegerArray or BooleanArray\n            values = ensure_int_or_float(values)\n            res_values, names = self._cython_operation("
  },
  {
    "id" : "77325498-08b8-4f1e-bae0-d8c006d64725",
    "prId" : 38187,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38187#pullrequestreview-545647902",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fa1de0c-fc46-4481-8577-835913ba6f59",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, this is prob not the best location for this longer term (eg.. we should have mappings from ops -> whether they should coerce back or not).",
        "createdAt" : "2020-12-02T02:57:52Z",
        "updatedAt" : "2020-12-02T02:58:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "11ada32a-a46b-44a2-ab14-266c7129ebe6",
        "parentId" : "9fa1de0c-fc46-4481-8577-835913ba6f59",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yah, we have something like that in the calling class.  im in the process of moving all of this wrapping to the lowest level possible (which luckily coincides with it being in the fewest places possible), xref https://github.com/pandas-dev/pandas/issues/37494#issuecomment-736813064",
        "createdAt" : "2020-12-02T03:06:38Z",
        "updatedAt" : "2020-12-02T03:06:38Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9877296a-0eae-49ff-8926-b35840162436",
        "parentId" : "9fa1de0c-fc46-4481-8577-835913ba6f59",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Could this also be handled in `maybe_cast_result_dtype`? (which basically is somewhat implementing a mapping from ops -> expected dtype)",
        "createdAt" : "2020-12-05T16:57:58Z",
        "updatedAt" : "2020-12-05T16:57:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c65508b9-86a9-45b6-9996-b6c2aea05592",
        "parentId" : "9fa1de0c-fc46-4481-8577-835913ba6f59",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "potentially, yah.  this calls simple_new instead of from_sequence, which makes it a bit of an outlier.\r\n\r\nthere's also groupby.base.cython_cast_blocklist that i think is intended for something along these lines",
        "createdAt" : "2020-12-05T20:35:34Z",
        "updatedAt" : "2020-12-05T20:35:34Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "86c9ce8c690d9832407e9afec2a808303bdfa6ab",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +492,496 @@                kind, values, how, axis, min_count, **kwargs\n            )\n            if how in [\"rank\"]:\n                # preserve float64 dtype\n                return res_values, names"
  }
]