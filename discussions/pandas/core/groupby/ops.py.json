[
  {
    "id" : "20736d52-0e46-48d4-ad24-69d1a00934dd",
    "prId" : 24954,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24954#pullrequestreview-196814735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0969beff-8f9e-45fb-90b1-73e8e8d88088",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "So do we even need this object fallback loop?",
        "createdAt" : "2019-01-26T23:06:41Z",
        "updatedAt" : "2019-02-04T09:53:49Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "736a65a9-da89-43a2-88ba-adf6ae141f71",
        "parentId" : "0969beff-8f9e-45fb-90b1-73e8e8d88088",
        "authorId" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "body" : "not for group_add and everything worked fine until now.\r\nstill it seemed like a bug.",
        "createdAt" : "2019-01-27T07:15:47Z",
        "updatedAt" : "2019-02-04T09:53:49Z",
        "lastEditedBy" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "tags" : [
        ]
      }
    ],
    "commit" : "937e44cb2aca62ffb828bd8c05d976b4630fb1c8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +381,385 @@            for dt in [dtype_str, 'object']:\n                f = getattr(libgroupby, \"{fname}_{dtype_str}\".format(\n                    fname=fname, dtype_str=dt), None)\n                if f is not None:\n                    return f"
  },
  {
    "id" : "6d0cf852-e0f1-447a-b65e-ec66269ba92a",
    "prId" : 27683,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27683#pullrequestreview-270719648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52cf4aa0-621e-4d48-93a5-d923ead1cdf5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you move the is_datetimelike and is_numeric checks up here and de-duplicate as needed",
        "createdAt" : "2019-08-04T22:01:51Z",
        "updatedAt" : "2019-08-04T23:52:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "669d02b1-7ae2-49d5-8787-9c4895619c13",
        "parentId" : "52cf4aa0-621e-4d48-93a5-d923ead1cdf5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "done.  not much de-duplication available.  in another pass we can separate out some of the casting from the everything-else and see if there is de-duplication available in algos or something",
        "createdAt" : "2019-08-04T23:53:07Z",
        "updatedAt" : "2019-08-04T23:53:07Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "935d945d-85d0-43ad-93be-7dd4351e1b58",
        "parentId" : "52cf4aa0-621e-4d48-93a5-d923ead1cdf5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok fair, that routine likely needs some cleaning at some point",
        "createdAt" : "2019-08-05T11:57:01Z",
        "updatedAt" : "2019-08-05T11:57:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e05309718ec009d7b0cd79c6b75dac751e143924",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +483,487 @@            #  2D EA is allowed.\n            values = values.view(\"M8[ns]\")\n\n        is_datetimelike = needs_i8_conversion(values.dtype)\n        is_numeric = is_numeric_dtype(values.dtype)"
  },
  {
    "id" : "4eaff2a3-a3ce-467a-9038-16d162603a48",
    "prId" : 28198,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28198#pullrequestreview-282251785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "576847a2-51ab-4a8d-b8b6-892a9146baa6",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is the type(s) of exceptions that raise this not well defined?",
        "createdAt" : "2019-08-28T18:49:25Z",
        "updatedAt" : "2019-09-07T17:53:13Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "886418c0-0507-4da9-b215-9b53186e85a9",
        "parentId" : "576847a2-51ab-4a8d-b8b6-892a9146baa6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "cython raises this (with a message matching this pattern) if we pass a non-ndarray to something expected an ndarray.  im not aware of any other cases we actually want to let pass here",
        "createdAt" : "2019-08-28T19:37:10Z",
        "updatedAt" : "2019-09-07T17:53:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "78f87f1a-7508-45f1-99a4-7c29b1209352",
        "parentId" : "576847a2-51ab-4a8d-b8b6-892a9146baa6",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I assume you saw other non-Cython TypeErrors show up here then?",
        "createdAt" : "2019-08-28T22:23:55Z",
        "updatedAt" : "2019-09-07T17:53:13Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "4517484c-8776-434e-bbe2-dd48a39edf21",
        "parentId" : "576847a2-51ab-4a8d-b8b6-892a9146baa6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "if we dont catch TypeError at all, the only tests that fail are ones where apply_frame_axis0 is raising because it expects an ndarray",
        "createdAt" : "2019-08-28T23:09:22Z",
        "updatedAt" : "2019-09-07T17:53:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "00f9cf10-34d3-40a9-8546-fe221d817852",
        "parentId" : "576847a2-51ab-4a8d-b8b6-892a9146baa6",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I may have asked this wrong but I don't think we are on the same page. So I was thinking to keep catching `TypeError` but was questioning if we need the conditional block therein, as it diverges slightly from the pre-existing behavior.",
        "createdAt" : "2019-08-30T17:04:20Z",
        "updatedAt" : "2019-09-07T17:53:13Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "84daed36-e3f8-4ed1-9195-6a430a874216",
        "parentId" : "576847a2-51ab-4a8d-b8b6-892a9146baa6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> if we need the conditional block therein, as it diverges slightly from the pre-existing behavior.\r\n\r\nChanging the behavior is intentional.  ATM we are `pass`ing on everything, and I want to `pass` on a narrow set of `TypeError`s.  ",
        "createdAt" : "2019-08-30T21:23:47Z",
        "updatedAt" : "2019-09-07T17:53:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "77d6e5d2ad2cd06db12d89bbdd72d11304ecce58",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +214,218 @@                pass\n            except TypeError as err:\n                if \"Cannot convert\" in str(err):\n                    # via apply_frame_axis0 if we pass a non-ndarray\n                    pass"
  },
  {
    "id" : "55020299-3334-4cda-ba31-5605d713b98a",
    "prId" : 28198,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28198#pullrequestreview-282717022",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "735697fc-a929-48fc-bd68-8ac7519fb456",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "looks fine, does this change any perf? IOW this looks like this is now taking a path that previously we raised (and then likely did an .apply on)",
        "createdAt" : "2019-09-02T20:55:38Z",
        "updatedAt" : "2019-09-07T17:53:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e442d9eb-8e57-49ea-81bb-2208989de2c3",
        "parentId" : "735697fc-a929-48fc-bd68-8ac7519fb456",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not sure.  Between this, #27909, and a not-yet-pushed branch that fixes incorrect exception handling in cython_agg_block, I'm pretty sure we'll end up falling back to python-space less often, but it isn't obvious what the individual changes affect perf-wise.",
        "createdAt" : "2019-09-02T23:54:06Z",
        "updatedAt" : "2019-09-07T17:53:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "77d6e5d2ad2cd06db12d89bbdd72d11304ecce58",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +216,220 @@                if \"Cannot convert\" in str(err):\n                    # via apply_frame_axis0 if we pass a non-ndarray\n                    pass\n                else:\n                    raise"
  },
  {
    "id" : "65728d0f-18d4-4a76-8c70-45539e80c29a",
    "prId" : 28634,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28634#pullrequestreview-312150389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ca6c1b8-94fa-4360-b907-03d6167aa284",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some comments here on what is going on",
        "createdAt" : "2019-11-04T14:05:16Z",
        "updatedAt" : "2019-11-07T14:18:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cce3fdb5-cacf-4e40-a941-b232bb570d2c",
        "parentId" : "0ca6c1b8-94fa-4360-b907-03d6167aa284",
        "authorId" : "50a8f1f9-e426-4547-baa9-0c028b12e95f",
        "body" : "ok, I added it. it is inspired by here:\r\nhttps://github.com/pandas-dev/pandas/blob/6cc82344fb319032465d6ee4e3d1c02991ef42c3/pandas/core/groupby/generic.py#L644-L646\r\nthat means get boundaries of ids. In my case, it would be unique result indices which is equivalent to boundaries of result indices.\r\n\r\nI have numberlessly tested along with asv and timeit. as a result, I use bins[1:] != bins[:-1] instead of np.diff for the performance due to their dtype difference.\r\n\r\nIt was quite hard that measure the performance as it fluctuates every time in my environment. so I ran it again and again even though it takes 6~8 hours. several groups fluctuate from 0.5 ~ 1.8 but it looks like \"BENCHMARKS NOT SIGNIFICANTLY CHANGED.\" I'm quite sure that this change won't decrease performance.\r\n\r\n**EDIT: I think that they fluctuate as they are too trivial to compute therefore a few ns difference affects significantly.**",
        "createdAt" : "2019-11-06T01:37:35Z",
        "updatedAt" : "2019-11-07T14:18:52Z",
        "lastEditedBy" : "50a8f1f9-e426-4547-baa9-0c028b12e95f",
        "tags" : [
        ]
      }
    ],
    "commit" : "368311c9adbaf2bef9764fd001a8e3f3340701e1",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +771,775 @@    def recons_codes(self):\n        # get unique result indices, and prepend 0 as groupby starts from the first\n        return [np.r_[0, np.flatnonzero(self.bins[1:] != self.bins[:-1]) + 1]]\n\n    @cache_readonly"
  }
]