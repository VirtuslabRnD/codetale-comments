[
  {
    "id" : "b803c5f1-c0fb-4688-848e-ab8a15ca67a0",
    "prId" : 22318,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22318#pullrequestreview-148462777",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "218e2d79-0cd4-4c88-8086-fb7d459c1409",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "write this as \r\n```\r\nconcatenated = concat(....)\r\nconcatenated = concatenated.reindex(...)\r\n```\r\nuse copy=False",
        "createdAt" : "2018-08-22T12:47:08Z",
        "updatedAt" : "2019-07-03T02:21:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc9c79b03dc9897a436a1cff8cbc26e4d10f2f59",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +567,571 @@        concatenated = concatenated.reindex(concat_index, axis=other_axis,\n                                            copy=False)\n        return self._set_result_index_ordered(concatenated)\n\n    @Substitution(klass='DataFrame', selected='')"
  },
  {
    "id" : "bfc64e04-ce45-4956-abc8-4ae1ef37b80e",
    "prId" : 22699,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22699#pullrequestreview-156353721",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37b344ca-c855-4c61-ad9b-b9c53c7861da",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in theory we could add a lint rule to avoid using ``collection.Iterable``, and instead just use our compat",
        "createdAt" : "2018-09-18T11:40:34Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f15e3ef1-3bea-4fdc-830e-a68ebb1641b7",
        "parentId" : "37b344ca-c855-4c61-ad9b-b9c53c7861da",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think we're close enough to py3-only that we'll be OK. Writing that regex would be a bit fiddly since we'd need to enumerate all the ABCs.",
        "createdAt" : "2018-09-18T12:50:19Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "77a6f8d3-1dae-402c-9f73-816b3eab6e6c",
        "parentId" : "37b344ca-c855-4c61-ad9b-b9c53c7861da",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "true, certainly a follow up issue is ok",
        "createdAt" : "2018-09-18T13:03:00Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4990fc2d984b536e5c7c97ad55d4f550ae661867",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +759,763 @@            return getattr(self, func_or_funcs)(*args, **kwargs)\n\n        if isinstance(func_or_funcs, compat.Iterable):\n            # Catch instances of lists / tuples\n            # but not the class list / tuple itself."
  },
  {
    "id" : "15762892-c96e-492e-b2ea-e3f843f5ffaa",
    "prId" : 23463,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23463#pullrequestreview-171796738",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d202ce5-fea3-4d88-9285-247b9c74701e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you put after the comment, does if matter if we put this after the shape check?\r\n\r\nand wont' ``getattr(res, 'columns', None) != getattr(res_fast, 'columns', None)`` work?\r\n\r\n",
        "createdAt" : "2018-11-03T14:09:54Z",
        "updatedAt" : "2018-11-06T03:21:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "330b407f-8ac7-4740-8a45-cd4427caeb28",
        "parentId" : "6d202ce5-fea3-4d88-9285-247b9c74701e",
        "authorId" : "1a156258-02e0-49e7-aa04-545a33b266db",
        "body" : "I don't think it matters if it is after the shape change. I'll move it. Why do you want to use `getattr`? Why would columns not be set?",
        "createdAt" : "2018-11-05T15:05:51Z",
        "updatedAt" : "2018-11-06T03:21:25Z",
        "lastEditedBy" : "1a156258-02e0-49e7-aa04-545a33b266db",
        "tags" : [
        ]
      },
      {
        "id" : "5f5cc2cb-b90e-4f79-abd5-07a27febcda0",
        "parentId" : "6d202ce5-fea3-4d88-9285-247b9c74701e",
        "authorId" : "1a156258-02e0-49e7-aa04-545a33b266db",
        "body" : "Actually, it does. Checking columns is probably much faster than the contents of the shape check, so we should do it first to avoid paying that cost every time.",
        "createdAt" : "2018-11-05T15:11:40Z",
        "updatedAt" : "2018-11-06T03:21:25Z",
        "lastEditedBy" : "1a156258-02e0-49e7-aa04-545a33b266db",
        "tags" : [
        ]
      },
      {
        "id" : "50b3afd0-482d-4b70-bb18-690e50f26c5b",
        "parentId" : "6d202ce5-fea3-4d88-9285-247b9c74701e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is ``group`` *always* a DataFrame here?",
        "createdAt" : "2018-11-05T15:19:25Z",
        "updatedAt" : "2018-11-06T03:21:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bf737b3e-721e-4858-825e-b153c0b22fab",
        "parentId" : "6d202ce5-fea3-4d88-9285-247b9c74701e",
        "authorId" : "1a156258-02e0-49e7-aa04-545a33b266db",
        "body" : "Yes. I tested this hypothesis by asserting that it is a dataframe in all tests.",
        "createdAt" : "2018-11-05T18:36:43Z",
        "updatedAt" : "2018-11-06T03:21:25Z",
        "lastEditedBy" : "1a156258-02e0-49e7-aa04-545a33b266db",
        "tags" : [
        ]
      },
      {
        "id" : "277483f3-2bd0-4e2e-a90a-6bfb719161f0",
        "parentId" : "6d202ce5-fea3-4d88-9285-247b9c74701e",
        "authorId" : "1a156258-02e0-49e7-aa04-545a33b266db",
        "body" : "Also just confirmed that this code *does not* get called when the user writes `df.groupby('group').column_name.transform(func)`. So I am very confident that `group` is always a `pd.DataFrame` here.",
        "createdAt" : "2018-11-05T22:45:32Z",
        "updatedAt" : "2018-11-06T03:21:25Z",
        "lastEditedBy" : "1a156258-02e0-49e7-aa04-545a33b266db",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f76e407e58f58605ba7076b4372e7d6cbfac638",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +589,593 @@            # verify fast path does not change columns (and names), otherwise\n            # its results cannot be joined with those of the slow path\n            if res_fast.columns != group.columns:\n                return path, res\n            # verify numerical equality with the slow path"
  },
  {
    "id" : "69469bf2-a96b-460a-9513-a168a4fc02d0",
    "prId" : 23463,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23463#pullrequestreview-171796389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc1bedf9-c108-4a58-a2e2-eb50c8cde3d7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here on what this is checking",
        "createdAt" : "2018-11-05T19:14:15Z",
        "updatedAt" : "2018-11-06T03:21:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a5007eb3-50d4-432f-93c6-803a1f16e287",
        "parentId" : "cc1bedf9-c108-4a58-a2e2-eb50c8cde3d7",
        "authorId" : "1a156258-02e0-49e7-aa04-545a33b266db",
        "body" : "Done.",
        "createdAt" : "2018-11-05T22:44:23Z",
        "updatedAt" : "2018-11-06T03:21:25Z",
        "lastEditedBy" : "1a156258-02e0-49e7-aa04-545a33b266db",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f76e407e58f58605ba7076b4372e7d6cbfac638",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +592,596 @@                return path, res\n            # verify numerical equality with the slow path\n            if res.shape == res_fast.shape:\n                res_r = res.values.ravel()\n                res_fast_r = res_fast.values.ravel()"
  },
  {
    "id" : "202e8be7-a7ce-4b0f-b039-e93a593c780d",
    "prId" : 23465,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23465#pullrequestreview-171852169",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "281936c8-9199-493d-855e-1ef36463bf87",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "In case you didn't follow the issue, the original failure came from us passing generator expressions to `vstack`, and the new `__array_function__` stuff in NumPy dev exhausted those generators. So we just build a list instead (which NumPy was doing anyway)",
        "createdAt" : "2018-11-06T03:09:25Z",
        "updatedAt" : "2018-11-06T03:09:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "51c92a8a-dc7e-4a52-8ec0-70655bf20989",
        "parentId" : "281936c8-9199-493d-855e-1ef36463bf87",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yep saw that",
        "createdAt" : "2018-11-06T03:18:39Z",
        "updatedAt" : "2018-11-06T03:18:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f84fb0a2a8c008a43554315503375ded56b1391",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +411,415 @@                                key_index is None or\n                                isinstance(key_index, MultiIndex)):\n                            stacked_values = np.vstack([\n                                np.asarray(v) for v in values\n                            ])"
  },
  {
    "id" : "08025c1d-8dab-4322-a917-836fe726c11c",
    "prId" : 25206,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25206#pullrequestreview-201434243",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6a2c28d-9ddb-44bb-a950-1b56a8699cc6",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "-0.1 on changing in cases where the list is about to get materialized anyway ",
        "createdAt" : "2019-02-08T05:17:43Z",
        "updatedAt" : "2019-02-09T00:54:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f452fb412b595d8b697722c5b8675651c34d4782",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1464,1468 @@        # Select in-axis groupers\n        in_axis_grps = ((i, ping.name) for (i, ping)\n                        in enumerate(groupings) if ping.in_axis)\n        g_nums, g_names = zip(*in_axis_grps)\n"
  },
  {
    "id" : "b7f68a10-bee7-4aa4-879e-eb8ba8223913",
    "prId" : 25531,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25531#pullrequestreview-211631987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3251907-a297-4e08-a3c1-b62ca1b6ebf9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "instead of this, I think you can add to:\r\n\r\n``cython_cast_blacklist = frozenset(['rank', 'count', 'size'])``\r\n\r\nin pandas/core/groupby/base.py\r\n",
        "createdAt" : "2019-03-04T18:50:48Z",
        "updatedAt" : "2019-03-24T20:44:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "165b022e-1adb-404c-83d1-57922bf2b533",
        "parentId" : "c3251907-a297-4e08-a3c1-b62ca1b6ebf9",
        "authorId" : "b9a39e58-d563-4cb8-addb-435ed46a6e12",
        "body" : "I will need to investigate it more deeply. \r\nFirst attempt with your suggestion did not work as expected. Maybe it is because _aggregate_item_by_item is called in special case when other fails (https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L622)?",
        "createdAt" : "2019-03-04T22:07:31Z",
        "updatedAt" : "2019-03-24T20:44:09Z",
        "lastEditedBy" : "b9a39e58-d563-4cb8-addb-435ed46a6e12",
        "tags" : [
        ]
      },
      {
        "id" : "0ea86bbc-9e8b-4e8b-bf80-d1909dbb4b5e",
        "parentId" : "c3251907-a297-4e08-a3c1-b62ca1b6ebf9",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm the point of that variable is to prevent things from getting cast to match their original dtype, so agreed also seems like the logical place for this. What failures is that causing?",
        "createdAt" : "2019-03-05T16:54:23Z",
        "updatedAt" : "2019-03-24T20:44:09Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "3bb8986b-16ea-4484-b3af-909f6cf0e6ba",
        "parentId" : "c3251907-a297-4e08-a3c1-b62ca1b6ebf9",
        "authorId" : "b9a39e58-d563-4cb8-addb-435ed46a6e12",
        "body" : "I hope, I found the suggested solution - please check: https://github.com/pandas-dev/pandas/pull/25531/commits/f23e884db3d44b8a8e8fff99e8f6eea4f3b1a786",
        "createdAt" : "2019-03-06T21:38:54Z",
        "updatedAt" : "2019-03-24T20:44:09Z",
        "lastEditedBy" : "b9a39e58-d563-4cb8-addb-435ed46a6e12",
        "tags" : [
        ]
      },
      {
        "id" : "1005d85d-767d-498b-a775-ac30351fd952",
        "parentId" : "c3251907-a297-4e08-a3c1-b62ca1b6ebf9",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Thanks for checking on this. So I think while this works it's somewhat confusing that we are using `_transform_should_cast` in an aggregate method - would it be possible to just make a generic `_should_cast` function that can be shared across aggregations / transformations to prevent this from happening?",
        "createdAt" : "2019-03-06T22:11:38Z",
        "updatedAt" : "2019-03-24T20:44:09Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "917a7013-4f2b-44fa-9c05-72f4f26a8ab0",
        "parentId" : "c3251907-a297-4e08-a3c1-b62ca1b6ebf9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this should already be done in _try_cast",
        "createdAt" : "2019-03-06T22:45:23Z",
        "updatedAt" : "2019-03-24T20:44:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "eb853c64-ce89-480c-952a-b9b148d9acdb",
        "parentId" : "c3251907-a297-4e08-a3c1-b62ca1b6ebf9",
        "authorId" : "b9a39e58-d563-4cb8-addb-435ed46a6e12",
        "body" : "> this should already be done in _try_cast\r\n\r\nI am a newbie but similar approach is used on another place (use ```_transform_should_cast``` before ```_try_cast``` - e.g. https://github.com/pandas-dev/pandas/blob/169a56a33fb7f4fad447e70869599a99832eeee5/pandas/core/groupby/groupby.py#L829). So now, It seems that such check is not included in ```_try_cast```. Am I wrong?\r\n\r\nI found that ```_try_cast``` has parameter ```numeric_only```. I tried to use it - it works correctly with dates, but not with floats (as expected). So this is not the way.",
        "createdAt" : "2019-03-07T07:32:06Z",
        "updatedAt" : "2019-03-24T20:44:09Z",
        "lastEditedBy" : "b9a39e58-d563-4cb8-addb-435ed46a6e12",
        "tags" : [
        ]
      }
    ],
    "commit" : "28b5ab2fe70420867aed8d09bde27df53e5ef1fd",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +255,259 @@                colg = SeriesGroupBy(data, selection=item,\n                                     grouper=self.grouper)\n\n                cast = self._transform_should_cast(func)\n"
  },
  {
    "id" : "5d76aaaa-7ce3-40dc-a244-fc8576450e36",
    "prId" : 26228,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26228#pullrequestreview-233684490",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0347b54b-f0b9-41b9-aac5-25b5ff2560ed",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pls add a 1-line comment here on why you are doing this",
        "createdAt" : "2019-04-28T15:43:47Z",
        "updatedAt" : "2019-05-14T17:10:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "735e3582-d486-4691-9324-af3e7b934784",
        "parentId" : "0347b54b-f0b9-41b9-aac5-25b5ff2560ed",
        "authorId" : "d27eb28a-9688-42bc-9d0d-f59ad90e4b7f",
        "body" : "Done.",
        "createdAt" : "2019-05-03T21:45:12Z",
        "updatedAt" : "2019-05-14T17:10:14Z",
        "lastEditedBy" : "d27eb28a-9688-42bc-9d0d-f59ad90e4b7f",
        "tags" : [
        ]
      }
    ],
    "commit" : "807b7ccf664e7adfca07eed8db0fbac775d09f2b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +918,922 @@\n        # check for empty \"results\" to avoid concat ValueError\n        if results:\n            from pandas.core.reshape.concat import concat\n            result = concat(results).sort_index()"
  },
  {
    "id" : "dfaeee67-cef8-4394-abf1-80a019ebadfc",
    "prId" : 26399,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26399#pullrequestreview-239203701",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f67382a-f20d-4d42-b9a0-f5bf7ebf98de",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Did we have to get rid of the `if...else` to make this work? ",
        "createdAt" : "2019-05-19T02:02:06Z",
        "updatedAt" : "2019-05-29T13:32:50Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ecdf7c64-147e-4c27-bb3b-73ab79961320",
        "parentId" : "1f67382a-f20d-4d42-b9a0-f5bf7ebf98de",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is ok as it is what get_callable_name does",
        "createdAt" : "2019-05-19T18:16:56Z",
        "updatedAt" : "2019-05-29T13:32:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "25dca1ae55918302e6541f5650ced279a48af381",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +813,817 @@            columns = []\n            for f in arg:\n                columns.append(com.get_callable_name(f) or f)\n\n            arg = zip(columns, arg)"
  },
  {
    "id" : "51fb20fd-f600-4109-b71b-ea1d905676e2",
    "prId" : 26399,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26399#pullrequestreview-240215046",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05b8e363-4b25-48e0-b17e-6d1a3d1eae58",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Does this have to change as well? We've actually run into quite a few complaints during the typing process for classes with shared ancestors or mixins having different signatures for methods so this would generate more complaints I think",
        "createdAt" : "2019-05-19T02:04:03Z",
        "updatedAt" : "2019-05-29T13:32:50Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "24c587cf-8763-40dc-b1ff-3672146fc73e",
        "parentId" : "05b8e363-4b25-48e0-b17e-6d1a3d1eae58",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We do need this change to make `arg` optional, so that `.agg(foo=('A', 'sum'))` is handled correctly.",
        "createdAt" : "2019-05-21T18:10:32Z",
        "updatedAt" : "2019-05-29T13:32:50Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "25dca1ae55918302e6541f5650ced279a48af381",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +1343,1347 @@                  axis='')\n    @Appender(_shared_docs['aggregate'])\n    def aggregate(self, arg=None, *args, **kwargs):\n        return super().aggregate(arg, *args, **kwargs)\n"
  },
  {
    "id" : "1ce4fa2a-b9fd-4432-ad18-682bde66c2e4",
    "prId" : 26399,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26399#pullrequestreview-239700669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b43c1f7-21ef-46f0-88f3-80d022856194",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "looks like a leftover?",
        "createdAt" : "2019-05-19T18:17:54Z",
        "updatedAt" : "2019-05-29T13:32:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cb88235a-6a18-4048-bb01-37f8ea854796",
        "parentId" : "1b43c1f7-21ef-46f0-88f3-80d022856194",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Forgot to include the return (False when no kwargs are provided).",
        "createdAt" : "2019-05-20T20:13:14Z",
        "updatedAt" : "2019-05-29T13:32:50Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "25dca1ae55918302e6541f5650ced279a48af381",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +1637,1641 @@    ...                            a_min=('a', 'min'))\n    True\n    >>> _is_multi_agg_with_relabel()\n    False\n    \"\"\""
  },
  {
    "id" : "cfdcac49-07f7-4757-bdca-2c1a3fdd51f8",
    "prId" : 26399,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26399#pullrequestreview-241813212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c879240b-9b39-4cc4-8c79-507a02e87fd4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string here",
        "createdAt" : "2019-05-24T15:43:17Z",
        "updatedAt" : "2019-05-29T13:32:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "25dca1ae55918302e6541f5650ced279a48af381",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +1646,1650 @@\n\ndef _normalize_keyword_aggregation(kwargs):\n    \"\"\"\n    Normalize user-provided \"named aggregation\" kwargs."
  },
  {
    "id" : "364095a4-13e6-4198-8221-cdcceae68aa5",
    "prId" : 26399,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26399#pullrequestreview-242713641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1024150e-2af3-4ad5-b112-159faad35dfa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment on what this is (can we add a doc-string)?",
        "createdAt" : "2019-05-26T15:56:12Z",
        "updatedAt" : "2019-05-29T13:32:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a88cb944-1f82-4c68-9d3f-37d67fcc81cf",
        "parentId" : "1024150e-2af3-4ad5-b112-159faad35dfa",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We could using `typing.NamedTuple`.",
        "createdAt" : "2019-05-28T14:36:07Z",
        "updatedAt" : "2019-05-29T13:32:51Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "25dca1ae55918302e6541f5650ced279a48af381",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +45,49 @@from pandas.plotting._core import boxplot_frame_groupby\n\nNamedAgg = namedtuple(\"NamedAgg\", [\"column\", \"aggfunc\"])\n# TODO(typing) the return value on this callable should be any *scalar*.\nAggScalar = Union[str, Callable[..., Any]]"
  },
  {
    "id" : "26b4aaac-065a-45ca-bc95-c734b93bb926",
    "prId" : 26399,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26399#pullrequestreview-242045680",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "293ae42f-47a8-4ca4-a9d4-b1deefab3285",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "blank line here",
        "createdAt" : "2019-05-26T15:56:49Z",
        "updatedAt" : "2019-05-29T13:32:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "25dca1ae55918302e6541f5650ced279a48af381",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +1674,1678 @@        kwargs = OrderedDict(sorted(kwargs.items()))\n\n    # Normalize the aggregation functions as Dict[column, List[func]],\n    # process normally, then fixup the names.\n    # TODO(Py35): When we drop python 3.5, change this to"
  },
  {
    "id" : "18235019-0e42-4eac-87f6-d24302f009bb",
    "prId" : 26399,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26399#pullrequestreview-243358138",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcf26839-faec-4584-9efd-8c39b4d04b1c",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think this should be a TypeVar instead of a Union",
        "createdAt" : "2019-05-29T15:55:23Z",
        "updatedAt" : "2019-05-29T15:58:44Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "25dca1ae55918302e6541f5650ced279a48af381",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +47,51 @@NamedAgg = namedtuple(\"NamedAgg\", [\"column\", \"aggfunc\"])\n# TODO(typing) the return value on this callable should be any *scalar*.\nAggScalar = Union[str, Callable[..., Any]]\n\n"
  },
  {
    "id" : "0f019647-329b-4d48-91bd-4ca3f8b014d3",
    "prId" : 26463,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26463#pullrequestreview-239260146",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7f35258-f8ec-4ecc-8711-a320995a9990",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is there a test case that hits this? Transforms by definition broadcast to match the shape of the caller so didn't think anything should change within this function",
        "createdAt" : "2019-05-19T22:45:05Z",
        "updatedAt" : "2019-05-29T09:02:12Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e289785f-3d32-40a0-b92f-906cbcfe8298",
        "parentId" : "e7f35258-f8ec-4ecc-8711-a320995a9990",
        "authorId" : "5ec33cd8-8bdd-42d2-a9d1-54b49e8d1a7a",
        "body" : "The change is in `_wrap_applied_output`. I did not modify `_wrap_transformed_output`, only `_wrap_aggregated_output` and `_wrap_applied_output`. Tests that hit this are `test_groupby_observed` and `test_groupby_observed_apply_lambda_returns_dict`.",
        "createdAt" : "2019-05-19T23:24:25Z",
        "updatedAt" : "2019-05-29T09:02:12Z",
        "lastEditedBy" : "5ec33cd8-8bdd-42d2-a9d1-54b49e8d1a7a",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6bca5e3cd34ba25ffb2cd7d74c187dd68e9fce7",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +859,863 @@            # GH #823 #24880\n            index = _get_index()\n            result = self._reindex_output(DataFrame(values, index=index))\n            # if self.observed is False,\n            # keep all-NaN rows created while re-indexing"
  },
  {
    "id" : "3a672761-11f5-4908-8838-0a1500e5703a",
    "prId" : 26463,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26463#pullrequestreview-239598176",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c9488bb-130c-4534-a3af-064598757ed7",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What is the point of convert here?",
        "createdAt" : "2019-05-20T00:32:09Z",
        "updatedAt" : "2019-05-29T09:02:12Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e3c463f1-4fcb-4123-9db8-45358debd6ba",
        "parentId" : "8c9488bb-130c-4534-a3af-064598757ed7",
        "authorId" : "5ec33cd8-8bdd-42d2-a9d1-54b49e8d1a7a",
        "body" : "I believe it tries to convert object columns that look like dates to datetime. I saw that `DataFrameGroupBy` does this in `wrap_aggregated_output`, but not in `wrap_applied_output`, so I wanted to stay consistent and do it in the same way for `SeriesGroupBy`. On second thought, I am not sure whether to keep it or not. What do you think?",
        "createdAt" : "2019-05-20T09:20:31Z",
        "updatedAt" : "2019-05-29T09:02:12Z",
        "lastEditedBy" : "5ec33cd8-8bdd-42d2-a9d1-54b49e8d1a7a",
        "tags" : [
        ]
      },
      {
        "id" : "07a4eec6-f672-4443-a186-c57e1acdf614",
        "parentId" : "8c9488bb-130c-4534-a3af-064598757ed7",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm alright then. I guess let's keep for now. It does seem strange at first glance but can leave it to a follow up to clean that up",
        "createdAt" : "2019-05-20T16:16:25Z",
        "updatedAt" : "2019-05-29T09:02:12Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6bca5e3cd34ba25ffb2cd7d74c187dd68e9fce7",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +837,841 @@                                   index=self.grouper.result_index,\n                                   names=names)\n        return self._reindex_output(result)._convert(datetime=True)\n\n    def _wrap_transformed_output(self, output, names=None):"
  },
  {
    "id" : "746dc8f0-c61c-4dec-b7be-e9d8ec8f4875",
    "prId" : 26463,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26463#pullrequestreview-239595297",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4639267d-4979-4f6f-81d7-a77e471db0f6",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Why was dict removed here?",
        "createdAt" : "2019-05-20T00:34:02Z",
        "updatedAt" : "2019-05-29T09:02:12Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ccb08d40-5fda-48c1-89f1-007f1d3ee68b",
        "parentId" : "4639267d-4979-4f6f-81d7-a77e471db0f6",
        "authorId" : "5ec33cd8-8bdd-42d2-a9d1-54b49e8d1a7a",
        "body" : "There is a `if isinstance(values[0], dict):` just above that, so I think it will never reach the second condition if it's a dict. I think it's redundant in this case.",
        "createdAt" : "2019-05-20T08:54:47Z",
        "updatedAt" : "2019-05-29T09:02:12Z",
        "lastEditedBy" : "5ec33cd8-8bdd-42d2-a9d1-54b49e8d1a7a",
        "tags" : [
        ]
      },
      {
        "id" : "cc396e34-52f4-4f13-9f35-cd93b5bdc647",
        "parentId" : "4639267d-4979-4f6f-81d7-a77e471db0f6",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Gotcha - good find",
        "createdAt" : "2019-05-20T16:10:23Z",
        "updatedAt" : "2019-05-29T09:02:12Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6bca5e3cd34ba25ffb2cd7d74c187dd68e9fce7",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +866,870 @@            return result\n\n        if isinstance(values[0], Series):\n            return self._concat_objects(keys, values,\n                                        not_indexed_same=not_indexed_same)"
  },
  {
    "id" : "b91800e8-eebb-4540-b2dc-1043aeec146b",
    "prId" : 26463,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26463#pullrequestreview-242055149",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f4e6cc6-e934-48ef-bf69-370b4de738bd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if you want to try and clean this up would be great (just see how much closer we can get to a common _wrap_*) that is more common for DataFrame/Series\r\n\r\ne.g. first thing I would do is move _reindex_output(...)._convert(...) *into* _wrap_output\r\n\r\nbut see if you majorly break things, there are some special case paths which are not very friendly.\r\n\r\n*could* do this as a followup as well.",
        "createdAt" : "2019-05-26T16:16:16Z",
        "updatedAt" : "2019-05-29T09:02:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0d816a8f-e8d1-4cc6-a011-c74fc063d682",
        "parentId" : "6f4e6cc6-e934-48ef-bf69-370b4de738bd",
        "authorId" : "5ec33cd8-8bdd-42d2-a9d1-54b49e8d1a7a",
        "body" : "That was my first instinct as well, however:\r\n\r\n1. Isn't `transform` supposed to keep the shape intact? This might mean that `observed` kwarg (whose functionality is, depending on the passed value, supposed to change the shape of the data) and `transform` are incompatible in general.\r\n2. I was drawing inspiration from the existing implementation in `DataFrameGroupBy` which uses `_reindex_output` in `wrap_applied_output` and `wrap_aggregated_output`, but not `wrap_transformed_output`. `DataFrameGroupBy` also has disjoint implementations for `wrap_aggregated_output`, `wrap_applied_output` and `_wrap_transformed_output`, so it feels like `SeriesGroupBy`'s common wrap usage for `wrap_aggregated_output` and `_wrap_transformed_output` up until now has been just a nice coincidence.\r\n3. I tried this change right now and it does make some `transform` related tests fail. It doesn't look major, but I am still not sure we should be mixing `transform` and reindexing (or adding `nan` rows for unobserved groups).",
        "createdAt" : "2019-05-26T20:57:42Z",
        "updatedAt" : "2019-05-29T09:02:12Z",
        "lastEditedBy" : "5ec33cd8-8bdd-42d2-a9d1-54b49e8d1a7a",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6bca5e3cd34ba25ffb2cd7d74c187dd68e9fce7",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +837,841 @@                                   index=self.grouper.result_index,\n                                   names=names)\n        return self._reindex_output(result)._convert(datetime=True)\n\n    def _wrap_transformed_output(self, output, names=None):"
  },
  {
    "id" : "9b98adb2-5814-420d-90b0-45d6503bc9a9",
    "prId" : 26825,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26825#pullrequestreview-249394257",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72cf60ee-ea3b-4b07-a483-989738954760",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you factor this to a module level function (maybe start a groupby/conversion.py), was going to move the _try_cast things there as well",
        "createdAt" : "2019-06-13T14:33:02Z",
        "updatedAt" : "2019-06-26T14:35:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c30c8831-d064-44fa-8b56-7e9df34d201b",
        "parentId" : "72cf60ee-ea3b-4b07-a483-989738954760",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Sure.",
        "createdAt" : "2019-06-13T14:37:36Z",
        "updatedAt" : "2019-06-26T14:35:45Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b2372eba29c0ffdf87ad8eec0992ccd0424e514",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +481,485 @@                # as we are stacking can easily have object dtypes here\n                so = self._selected_obj\n                if so.ndim == 2 and so.dtypes.apply(is_datetimelike).any():\n                    result = _recast_datetimelike_result(result)\n                else:"
  },
  {
    "id" : "eebd6ca7-9f27-443d-946d-3224855a9cb0",
    "prId" : 26825,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26825#pullrequestreview-249560845",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cece93ff-669a-40c3-834c-462bc012e327",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this note doesn't seem relevant as you are passing in frame right?",
        "createdAt" : "2019-06-13T19:25:24Z",
        "updatedAt" : "2019-06-26T14:35:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d44ce92f-eb87-4031-9540-531c94cff16c",
        "parentId" : "cece93ff-669a-40c3-834c-462bc012e327",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "That wasn't obvious to me bc were talking about the dimensions of two separate objects.  Are they necessarily the same?",
        "createdAt" : "2019-06-13T19:32:22Z",
        "updatedAt" : "2019-06-26T14:35:45Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b2372eba29c0ffdf87ad8eec0992ccd0424e514",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +1721,1725 @@    Notes\n    -----\n    - Assumes Groupby._selected_obj has ndim==2 and at least one\n    datetimelike column\n    \"\"\""
  },
  {
    "id" : "2d77b319-0c05-4f4e-982c-2de5be2c83bb",
    "prId" : 26905,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26905#pullrequestreview-252606979",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "694c1d02-35fe-4d7e-96e5-7080e37c0427",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "doc-string and types",
        "createdAt" : "2019-06-21T01:33:10Z",
        "updatedAt" : "2019-06-27T21:44:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5aa538dda720e2ff4343698df846a5da1fab8618",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +1743,1747 @@        # don't mangle for .agg([lambda x: .])\n        return aggfuncs\n    i = 0\n    mangled_aggfuncs = []\n    for aggfunc in aggfuncs:"
  },
  {
    "id" : "c64420ba-49cd-45a9-ac33-dc9d058eef99",
    "prId" : 26905,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26905#pullrequestreview-254982397",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f946e1bb-4f38-49c7-993a-fd149df40b1f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can add types",
        "createdAt" : "2019-06-21T01:34:18Z",
        "updatedAt" : "2019-06-27T21:44:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bff2747e-2e77-4aba-8bbd-54d7038abedc",
        "parentId" : "f946e1bb-4f38-49c7-993a-fd149df40b1f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you add the type here (I know its trivial, but Any is instructive here)",
        "createdAt" : "2019-06-26T12:20:42Z",
        "updatedAt" : "2019-06-27T21:44:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8025fa78-feb6-4e8d-a3ac-087c58f68779",
        "parentId" : "f946e1bb-4f38-49c7-993a-fd149df40b1f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is it instructive? It's not exactly correct, so I think it's worse than not having one.",
        "createdAt" : "2019-06-26T13:51:31Z",
        "updatedAt" : "2019-06-27T21:44:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "68dd5486-455f-4338-80b5-0af8a5c0e539",
        "parentId" : "f946e1bb-4f38-49c7-993a-fd149df40b1f",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Any is never technically *incorrect*; behavior is practically the same as having no annotation. Indifferent on whether required here just wanted to clarify that @TomAugspurger ",
        "createdAt" : "2019-06-26T14:00:20Z",
        "updatedAt" : "2019-06-27T21:44:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "bec466a6-7622-4076-b821-7f88b44cd870",
        "parentId" : "f946e1bb-4f38-49c7-993a-fd149df40b1f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "the reason to put it, is that it IS indicative. Not have a type in general (when everything is typed) is not great.",
        "createdAt" : "2019-06-27T03:27:15Z",
        "updatedAt" : "2019-06-27T21:44:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5aa538dda720e2ff4343698df846a5da1fab8618",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +1756,1760 @@\ndef _maybe_mangle_lambdas(agg_spec: Any) -> Any:\n    \"\"\"\n    Make new lambdas with unique names.\n"
  },
  {
    "id" : "71a6ecb4-be8c-44a2-bc5d-3402f042b60d",
    "prId" : 26905,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26905#pullrequestreview-253941386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "133993cc-dbdb-4b10-acc6-8de52e3cd59a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we should try to type this (doesn't have to be here) to solidfiy what we actually accept to .agg; can you create an issue",
        "createdAt" : "2019-06-21T01:34:57Z",
        "updatedAt" : "2019-06-27T21:44:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7e9d21c1-7d40-44fb-a804-040452b63879",
        "parentId" : "133993cc-dbdb-4b10-acc6-8de52e3cd59a",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think we have that one meta-issue for typing, and groupby should be on it.",
        "createdAt" : "2019-06-24T15:59:30Z",
        "updatedAt" : "2019-06-27T21:44:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "36816622-6a8f-4ac1-a7e0-7d478f4f5799",
        "parentId" : "133993cc-dbdb-4b10-acc6-8de52e3cd59a",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Not sure of the issue mentioned but new additions to code base would ideally included types if not too much extra effort (most of the current issues are regarding existing code)",
        "createdAt" : "2019-06-25T01:08:16Z",
        "updatedAt" : "2019-06-27T21:44:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "67276c2b-d392-489b-9bdc-7a0ca3bbae69",
        "parentId" : "133993cc-dbdb-4b10-acc6-8de52e3cd59a",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This one seems hard to get right (though I may be wrong).",
        "createdAt" : "2019-06-25T11:32:49Z",
        "updatedAt" : "2019-06-27T21:44:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "5aa538dda720e2ff4343698df846a5da1fab8618",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +1763,1767 @@    agg_spec : Any\n        An argument to NDFrameGroupBy.agg.\n        Non-dict-like `agg_spec` are pass through as is.\n        For dict-like `agg_spec` a new spec is returned\n        with name-mangled lambdas."
  },
  {
    "id" : "5d588ac3-9b0d-44a4-bda1-ee5b5d383a7d",
    "prId" : 26905,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26905#pullrequestreview-253967699",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bade63ad-b32e-41c8-8765-4233840dc35d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pls add a Returns section",
        "createdAt" : "2019-06-25T12:30:15Z",
        "updatedAt" : "2019-06-27T21:44:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5aa538dda720e2ff4343698df846a5da1fab8618",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +1735,1739 @@        A new AggSpec sequence, where lambdas have been converted\n        to have unique names.\n\n    Notes\n    -----"
  },
  {
    "id" : "9872532c-9e2d-4808-aa16-cefd6bd418c7",
    "prId" : 26905,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26905#pullrequestreview-254572215",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fe9a136-fe9f-49b2-8699-9d5b4d7a7ea9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add Parameters & types ",
        "createdAt" : "2019-06-26T12:20:04Z",
        "updatedAt" : "2019-06-27T21:44:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5aa538dda720e2ff4343698df846a5da1fab8618",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +1723,1727 @@\ndef _managle_lambda_list(aggfuncs: Sequence[Any]) -> Sequence[Any]:\n    \"\"\"\n    Possibly mangle a list of aggfuncs.\n"
  },
  {
    "id" : "53229022-3532-43b1-b7ed-7356e572e6dc",
    "prId" : 26905,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26905#pullrequestreview-254982088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6b36d41-c5de-41e6-808d-276b9b892c50",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you make an issue for this and point to this code after we merge",
        "createdAt" : "2019-06-27T03:24:26Z",
        "updatedAt" : "2019-06-27T21:44:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5aa538dda720e2ff4343698df846a5da1fab8618",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +50,54 @@# TODO(typing) the return value on this callable should be any *scalar*.\nAggScalar = Union[str, Callable[..., Any]]\n# TODO: validate types on ScalarResult and move to _typing\n# Blocked from using by https://github.com/python/mypy/issues/1484\n# See note at _mangle_lambda_list"
  },
  {
    "id" : "cab08782-fc8c-4409-9c99-89c63387356d",
    "prId" : 26905,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26905#pullrequestreview-255252394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ea1489c-1b85-49d9-a605-201b98ed66f4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm I don't think you actually need to do this here, rather put it around https://github.com/pandas-dev/pandas/pull/26905/files#diff-bfee1ba9e7cb79839776fac1a57ed940L810 and pull out the change you have in https://github.com/pandas-dev/pandas/pull/26905/files#diff-bfee1ba9e7cb79839776fac1a57ed940L832 ",
        "createdAt" : "2019-06-27T03:26:18Z",
        "updatedAt" : "2019-06-27T21:44:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ca70b8e2-aa21-4eaa-af95-b4dcef04e345",
        "parentId" : "0ea1489c-1b85-49d9-a605-201b98ed66f4",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "IIUC, the one on L810 is SeriesGroupBy.aggregate. I think it's entirely separate from NDFramGroupBy.aggregate.",
        "createdAt" : "2019-06-27T14:08:30Z",
        "updatedAt" : "2019-06-27T21:44:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "5aa538dda720e2ff4343698df846a5da1fab8618",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +215,219 @@                            \"'(column, aggfunc).\")\n\n        func = _maybe_mangle_lambdas(func)\n\n        result, how = self._aggregate(func, _level=_level, *args, **kwargs)"
  },
  {
    "id" : "cd8ad247-5ae9-437b-b855-6b4753203410",
    "prId" : 27555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27555#pullrequestreview-265964846",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78b41cde-cd8d-4d98-8bfb-10251ff7f5a9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "future, can you de-privatize this",
        "createdAt" : "2019-07-24T11:47:14Z",
        "updatedAt" : "2019-07-24T13:27:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "925ce8103c34e26e828b9f309531d3245db268cd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +36,40 @@    is_scalar,\n)\nfrom pandas.core.dtypes.missing import _isna_ndarraylike, isna, notna\n\nfrom pandas._typing import FrameOrSeries"
  },
  {
    "id" : "3395333b-4c05-4fb1-895a-0aef2befef8d",
    "prId" : 27921,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27921#pullrequestreview-276608928",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53d2f779-8365-477a-8b3f-ed047ccd5043",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is this example correct? I thought the names were mangled like\r\n\r\n`<lambda_0>` rather than `<lambda>_0`.",
        "createdAt" : "2019-08-19T11:53:27Z",
        "updatedAt" : "2019-08-26T18:03:07Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "39916fa2-1c38-4d46-b04e-f0f56a114989",
        "parentId" : "53d2f779-8365-477a-8b3f-ed047ccd5043",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "yeah, this example is correct unfortunately 😅  i could also make it to `<lambda_0>`, since this is only for mangling and not used somewhere else, and i thought just adding it as suffix at the end of string `<lambda>` is the easiest way. Because the most important thing here is to make sure for each column, this `<lambda>` with number is correct regardless it's in the middle or tail. But if you have preference in changing it, I will change!",
        "createdAt" : "2019-08-19T12:48:12Z",
        "updatedAt" : "2019-08-26T18:03:07Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      },
      {
        "id" : "7102c577-5471-4f92-a08b-ac4314d619e1",
        "parentId" : "53d2f779-8365-477a-8b3f-ed047ccd5043",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "emm, i have a second thought on it, one reason to do `<lambda>_0` alike is I am not sure how to do it without `regex`, and if just adding `_0` or `_1` etc in the end, we could also do it to `min_1` or `max_1` alike stuff if users are willing to use `agg(newcol1=('col', 'min'), newcol2=('col', 'min'))` and then solve https://github.com/pandas-dev/pandas/blob/ba94f9baaa1a802eee4820a1188db6501a231ae6/pandas/tests/groupby/aggregate/test_aggregate.py#L443 issue in another PR, any thoughts? @TomAugspurger I would be happy to work on this follow-up PR",
        "createdAt" : "2019-08-19T14:35:39Z",
        "updatedAt" : "2019-08-26T18:03:07Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      },
      {
        "id" : "bbc33564-bda6-49ab-b34a-8f36174ac815",
        "parentId" : "53d2f779-8365-477a-8b3f-ed047ccd5043",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "If the behavior is correct for the end-user, then I'm in favor of whatever is simplest. I just assumed that this would have to match, but I haven't read the implementation closely yet. ",
        "createdAt" : "2019-08-19T14:38:01Z",
        "updatedAt" : "2019-08-26T18:03:07Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "4f20641a-c79f-4c8c-b9c9-a9a8c3245682",
        "parentId" : "53d2f779-8365-477a-8b3f-ed047ccd5043",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "yeah, behavior is correct for end-user for sure, this implementation is just to get correct order. Feel free to take a look if you have time, and thanks again for quick reply! @TomAugspurger ",
        "createdAt" : "2019-08-19T14:44:57Z",
        "updatedAt" : "2019-08-26T18:03:07Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ace9035e58c7b7470c039f5ef80051fe9a298a21",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +1787,1791 @@    --------\n    >>> _make_unique([('a', '<lambda>'), ('a', '<lambda>'), ('b', '<lambda>')])\n    [('a', '<lambda>_0'), ('a', '<lambda>_1'), ('b', '<lambda>')]\n    \"\"\"\n    return ["
  },
  {
    "id" : "0f2da068-ab98-4962-adab-4b37b09cc3fa",
    "prId" : 27951,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27951#pullrequestreview-284449578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91a52b4e-a3be-4ac3-bd46-30c982c2f515",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think the actual root of the issue is a bug in NumPy as described by @TomAugspurger where NaT values are not sorted as you'd expected\r\n\r\nhttps://github.com/numpy/numpy/issues/12629\r\n\r\nSo I think this works for now but maybe add a comment about NumPy bug 12629 for reference",
        "createdAt" : "2019-09-05T18:16:21Z",
        "updatedAt" : "2019-09-06T15:50:44Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "20ec544519c2a45d8b658c7bf089bcf745c91e0a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1150,1154 @@        # GH 27951\n        # temporary fix while we wait for NumPy bug 12629 to be fixed\n        val[isna(val)] = np.datetime64(\"NaT\")\n\n        try:"
  },
  {
    "id" : "af5691bf-e85d-4c0f-b6ac-ee5581da5f6a",
    "prId" : 28203,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28203#pullrequestreview-281107734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09cf7271-a60a-491b-b153-f1784fa5b30c",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Would this ever have been called like this before?",
        "createdAt" : "2019-08-28T20:45:53Z",
        "updatedAt" : "2019-08-28T21:17:12Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "69945a0f-1753-4468-b25a-e18028ffadd0",
        "parentId" : "09cf7271-a60a-491b-b153-f1784fa5b30c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this is the call from 263-264 moved up.  we know at this point there are no args or kwargs (see 240-241)",
        "createdAt" : "2019-08-28T21:15:15Z",
        "updatedAt" : "2019-08-28T21:17:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4accd726820549f33c99a31a01af759c19393a2c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +253,257 @@                    )\n                except Exception:\n                    result = self._aggregate_generic(func)\n                else:\n                    result.columns = Index("
  },
  {
    "id" : "7b918d4f-e15a-48e3-9bcf-6cbb8ccc5861",
    "prId" : 28205,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28205#pullrequestreview-282256462",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a19b0d9-46d6-4711-9a44-06be4c246d34",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you add this condition to the check above?",
        "createdAt" : "2019-08-30T16:58:20Z",
        "updatedAt" : "2019-08-30T16:59:02Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "550c5587-a66b-4d7a-908d-b2e8a26d8fa8",
        "parentId" : "4a19b0d9-46d6-4711-9a44-06be4c246d34",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "for coverage purposes Id rather leave them separate.  i.e. i want to be able to see that both cases are reached",
        "createdAt" : "2019-08-30T21:40:59Z",
        "updatedAt" : "2019-08-30T21:40:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "65a93a218eea07f224a2478fdf9a1972b7b15a91",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +656,660 @@            return path, res\n\n        if not res_fast.columns.equals(group.columns):\n            return path, res\n"
  },
  {
    "id" : "ea2210dd-49cf-4593-aa99-7cf4c7941109",
    "prId" : 28959,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28959#pullrequestreview-301395682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "737e12c8-284c-4df4-88c7-76bad8dcac6c",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm what's the point of the bare raise here? I get needed to differentiate now from the `except Exception`, but coupled with change above is there something actually throwing the `AssertionError`? Or do we mean to be catching `ValueError` here?",
        "createdAt" : "2019-10-14T15:46:18Z",
        "updatedAt" : "2019-10-16T15:28:53Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "c9d188d8-7c8e-41d2-bbe5-f87b12c673f7",
        "parentId" : "737e12c8-284c-4df4-88c7-76bad8dcac6c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> but coupled with change above is there something actually throwing the AssertionError\r\n\r\nNo, which means that during development we can now add assertions and not have them get swallowed.",
        "createdAt" : "2019-10-14T15:52:54Z",
        "updatedAt" : "2019-10-16T15:28:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2afeaebee28260269fab1faf28f3bca15307f11b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +262,266 @@            try:\n                return self._python_agg_general(func, *args, **kwargs)\n            except AssertionError:\n                raise\n            except Exception:"
  },
  {
    "id" : "66c165b3-1f27-4607-bad9-c37d3e58d30d",
    "prId" : 29077,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29077#pullrequestreview-304855692",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ac0ce71-b1ed-4e54-8fc1-28931bc11bab",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "What is the end goal of this change? \r\nI don't think we should have special cases in the code for our tests? ",
        "createdAt" : "2019-10-21T20:51:45Z",
        "updatedAt" : "2019-10-21T20:51:46Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "fb2e8046-eff1-4cd4-8458-a7269ab7ca98",
        "parentId" : "0ac0ce71-b1ed-4e54-8fc1-28931bc11bab",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The upcoming fix here is to have DecimalArray._reduce implement support `skipna=True`.\r\n\r\nA lot of spaghetti code here is driven by the numeric_only behavior that suppresses exceptions.",
        "createdAt" : "2019-10-21T21:15:17Z",
        "updatedAt" : "2019-10-21T21:15:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a662c5a09658922004ad4fc865071133d3e8217f",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +900,904 @@                        pass\n                    elif \"decimal does not support skipna=True\" in str(err):\n                        # FIXME: kludge for DecimalArray tests\n                        pass\n                    else:"
  },
  {
    "id" : "e17c4e3f-d2f7-4c51-82d9-9b12817dff1d",
    "prId" : 29124,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29124#pullrequestreview-305949639",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40810378-a2fb-4bcc-9290-b4f6707a9f83",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "IIRC `concat` was only needed here (as opposed to just DataFrame constructor) because `results` could include DataFrames.  So it may no longer be needed",
        "createdAt" : "2019-10-23T03:35:05Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a6e5517d-cffe-4903-adfe-f8eaf955f7a3",
        "parentId" : "40810378-a2fb-4bcc-9290-b4f6707a9f83",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Sounds good. FWIW I think the next follow up is to blow away the block management / wrapping altogether, so I don't really plan on looking at this unless that fails (assumedly due to performance)",
        "createdAt" : "2019-10-23T14:45:48Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "51b805050e7dfd1a582a7997aa7790482bde0a50",
    "line" : 225,
    "diffHunk" : "@@ -1,1 +1802,1806 @@\n            results = [groupby_series(content, label) for label, content in obj.items()]\n            results = concat(results, axis=1)\n            results.columns.names = obj.columns.names\n"
  },
  {
    "id" : "435ce46f-0a73-472a-8886-bde394be410f",
    "prId" : 29124,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29124#pullrequestreview-305949639",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5103e0d-24a5-406b-87d0-d33e9faf2b7a",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I've been seeing typing-based names creep into docstrings, but it isn't obvious that these are more user-friendly.  Is this more-correct or otherwise a clear improvement?",
        "createdAt" : "2019-10-23T03:36:29Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "236076c2-4ef0-4c31-b2ad-42e309b06533",
        "parentId" : "a5103e0d-24a5-406b-87d0-d33e9faf2b7a",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea we moved from `Dict` to `Mapping` as part of #29155 and as suggested by Python docs, so just updating this doc accordingly (and directly below)",
        "createdAt" : "2019-10-23T14:47:14Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "51b805050e7dfd1a582a7997aa7790482bde0a50",
    "line" : 233,
    "diffHunk" : "@@ -1,1 +1843,1847 @@    Normalize user-provided \"named aggregation\" kwargs.\n\n    Transforms from the new ``Mapping[str, NamedAgg]`` style kwargs\n    to the old OrderedDict[str, List[scalar]]].\n"
  },
  {
    "id" : "b878cab7-6e2e-4d70-ab4b-65e350e11ade",
    "prId" : 29124,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29124#pullrequestreview-308919183",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f94703f-e6b6-480a-ba56-021a34164eff",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "clause about under what conditions it is which?  presumably something like \"same type as self.obj\"",
        "createdAt" : "2019-10-29T03:31:27Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8862cffe-fac8-42ee-81df-511ecf565ffa",
        "parentId" : "8f94703f-e6b6-480a-ba56-021a34164eff",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm I think this is accounted for in the Notes directly following this; does that not cover what you are looking for?",
        "createdAt" : "2019-10-29T16:13:12Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "561eb9ef-32e2-4063-86d6-0dc249c7105f",
        "parentId" : "8f94703f-e6b6-480a-ba56-021a34164eff",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I suppose so",
        "createdAt" : "2019-10-30T01:14:33Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "51b805050e7dfd1a582a7997aa7790482bde0a50",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +335,339 @@        Returns\n        -------\n        Series or DataFrame\n\n        Notes"
  },
  {
    "id" : "b1c17e1f-0792-4b59-a214-a24fff4a9f7d",
    "prId" : 29124,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29124#pullrequestreview-318027384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e284b28e-48a7-485d-befc-63f29d00d51d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do you need to .sort_index(axis=1)? IOW i don't think the ordering is guaranteed",
        "createdAt" : "2019-11-02T20:31:29Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "db204c11-9b62-4adc-a132-2fb572596f50",
        "parentId" : "e284b28e-48a7-485d-befc-63f29d00d51d",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm I might not fully understand what you are asking but the order of output and columns should align internally with how these loops are constructed.\r\n\r\nFWIW I think that's a little tenuous long term and should be further cleaned up. We should probably change the keys of `output` to be a NamedTuple that contains those and get rid of storing the labels in a separate container, but leaving to a follow up so as not to change too much in one pass",
        "createdAt" : "2019-11-02T21:32:16Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "bdee334a-67e8-48d2-a4d6-722439a41dd7",
        "parentId" : "e284b28e-48a7-485d-befc-63f29d00d51d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok sure; the reason I thought sorting might be needed is that you are assigning the columns in order, the keys to the output dict are integers, which I suspect *happen* to be sorted now",
        "createdAt" : "2019-11-06T17:59:52Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6da83580-64b7-466d-abca-a7fffa05f71f",
        "parentId" : "e284b28e-48a7-485d-befc-63f29d00d51d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you didnt' answer this here",
        "createdAt" : "2019-11-17T14:00:35Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6ab631fa-922f-4007-9fad-11057a42fb44",
        "parentId" : "e284b28e-48a7-485d-befc-63f29d00d51d",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This is what the assert statements are doing - making sure the order of the columns in the output dict is maintained. ",
        "createdAt" : "2019-11-17T15:40:27Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "51b805050e7dfd1a582a7997aa7790482bde0a50",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +1641,1645 @@\n        result = DataFrame(indexed_output)\n        result.columns = columns\n\n        if not self.as_index:"
  },
  {
    "id" : "0ae4856a-b1ae-428d-8994-33770e2dbc08",
    "prId" : 29124,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29124#pullrequestreview-310787494",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97196d81-7061-49f4-ae5f-f03a464b0cba",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same comment as above, I think you need to sort the columns (index is ok )",
        "createdAt" : "2019-11-02T20:32:06Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "51b805050e7dfd1a582a7997aa7790482bde0a50",
    "line" : 206,
    "diffHunk" : "@@ -1,1 +1672,1676 @@        indexed_output = {key.position: val for key, val in output.items()}\n        columns = Index(key.label for key in output)\n\n        result = DataFrame(indexed_output)\n        result.columns = columns"
  },
  {
    "id" : "c6784eca-cb5e-49eb-86f6-e3f1a6f740ed",
    "prId" : 29164,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29164#pullrequestreview-305433790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62f1bb01-d087-4034-b8d0-7685024e1576",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "note there is a similar definition for SeriesGroupBy - not sure if that needs to change as well",
        "createdAt" : "2019-10-22T18:24:40Z",
        "updatedAt" : "2019-10-22T18:53:15Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "171b01b9-16b8-49c8-96eb-4f5164ce255a",
        "parentId" : "62f1bb01-d087-4034-b8d0-7685024e1576",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "maybe IndexLabel = Optional[Hashable] in _typing.py",
        "createdAt" : "2019-10-22T18:54:02Z",
        "updatedAt" : "2019-10-22T18:54:03Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "025a88d80c727722163b803bc5dae32c105aff67",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +928,932 @@    agg = aggregate\n\n    def _iterate_slices(self) -> Iterable[Tuple[Optional[Hashable], Series]]:\n        obj = self._selected_obj\n        if self.axis == 1:"
  },
  {
    "id" : "5f47c6fb-9f9a-40c9-9989-02084329d718",
    "prId" : 29195,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29195#pullrequestreview-307242079",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5b1d7e3-9ea9-4361-83a8-8d2dc58d2d9b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "a better way to do this would be to make this if/elif into a function, then just return on the if/elif; that way you can avoid suplicating 1279 and 1287",
        "createdAt" : "2019-10-24T11:50:20Z",
        "updatedAt" : "2019-10-24T11:50:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7439a4fb-c892-495d-b6e1-576221c91441",
        "parentId" : "c5b1d7e3-9ea9-4361-83a8-8d2dc58d2d9b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "generally agree, but I _think_ the version on 1287 doesnt need to be there at all (not reached in tests).  Just not removing it until im sure",
        "createdAt" : "2019-10-24T15:55:50Z",
        "updatedAt" : "2019-10-24T15:55:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e71bb80a-f855-4dd6-816c-f11ad3ed703e",
        "parentId" : "c5b1d7e3-9ea9-4361-83a8-8d2dc58d2d9b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, then merge this and followup?",
        "createdAt" : "2019-10-25T12:46:45Z",
        "updatedAt" : "2019-10-25T12:46:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4be87353-784b-43e3-b17e-1ef6ea56f07f",
        "parentId" : "c5b1d7e3-9ea9-4361-83a8-8d2dc58d2d9b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yes please.  got a couple of local branches about ready to go",
        "createdAt" : "2019-10-25T14:27:22Z",
        "updatedAt" : "2019-10-25T14:27:22Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "226937436becacbc0b466256bcab6fc99667d3cf",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1273,1277 @@                        )\n                    else:\n                        # GH#1738: values is list of arrays of unequal lengths\n                        #  fall through to the outer else clause\n                        # TODO: sure this is right?  we used to do this"
  },
  {
    "id" : "eef7fef1-5f0f-4e31-aee1-1c514ee31240",
    "prId" : 29419,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29419#pullrequestreview-312028786",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f75d401d-4255-48b1-a0d5-70669de9bb2b",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Interesting that we had essentially hardcoded this value all this time...",
        "createdAt" : "2019-11-05T20:42:54Z",
        "updatedAt" : "2019-11-05T20:43:53Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f6cdcf15e83e688289449e0b378376c1d54166",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +973,977 @@            try:\n                result, _ = self.grouper.aggregate(\n                    block.values, how, axis=1, min_count=min_count\n                )\n            except NotImplementedError:"
  },
  {
    "id" : "2c2e9f93-6c05-4480-a87e-f5b4f3f95dd9",
    "prId" : 29538,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29538#pullrequestreview-314689103",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0becaee1-aa8f-4d1b-bc05-ee9f2d99ce5a",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Is there a way to test for that?",
        "createdAt" : "2019-11-11T04:17:57Z",
        "updatedAt" : "2019-11-11T04:17:58Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "275b2550315627702ede73b49ef7efb956c5f5e6",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +1273,1277 @@                    #  fall through to the outer else clause\n                    # TODO: sure this is right?  we used to do this\n                    #  after raising AttributeError above\n                    return Series(values, index=key_index, name=self._selection_name)\n"
  },
  {
    "id" : "f6f6c50e-bf5a-410f-9281-3ba0a0a9d8e1",
    "prId" : 29672,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29672#pullrequestreview-319033767",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7984bf2-7625-45a4-92b5-a3d63921440f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "would it be possible to consolidate this logic into the base class to keep this DRY?",
        "createdAt" : "2019-11-17T22:40:39Z",
        "updatedAt" : "2019-11-17T22:40:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a11cb441-2293-4982-9b83-4f5829c43b74",
        "parentId" : "a7984bf2-7625-45a4-92b5-a3d63921440f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "im optimistic about this",
        "createdAt" : "2019-11-17T23:22:18Z",
        "updatedAt" : "2019-11-17T23:22:19Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ec09f466-4a1c-41be-9791-141f9102e828",
        "parentId" : "a7984bf2-7625-45a4-92b5-a3d63921440f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "do you have a strong preference for doing this in this PR?  im trying to keep the scope narrow to avoid conflicting with #29124.",
        "createdAt" : "2019-11-18T19:41:30Z",
        "updatedAt" : "2019-11-18T19:41:31Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "c093ca23-08a2-45b4-b830-dea3a357e41a",
        "parentId" : "a7984bf2-7625-45a4-92b5-a3d63921440f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no can do later",
        "createdAt" : "2019-11-19T13:30:06Z",
        "updatedAt" : "2019-11-19T13:30:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "058c3ba4fa993307bc41bf48a134c78c16ab8362",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +1345,1349 @@            return self._transform_general(func, *args, **kwargs)\n\n        elif func not in base.transform_kernel_whitelist:\n            msg = f\"'{func}' is not a valid function name for transform(name)\"\n            raise ValueError(msg)"
  },
  {
    "id" : "58a9f140-7907-4986-88f5-c07fc5c82560",
    "prId" : 30311,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30311#pullrequestreview-334343782",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3dbce9d8-5221-4199-bd43-f09ef658a245",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@WillAyd this is adding quite a bit of very hard and bespoke code\r\n\r\npls don’t merge non trivial things like this\r\n\r\nthis is also likely non performant\r\n\r\npls revert ",
        "createdAt" : "2019-12-19T00:17:17Z",
        "updatedAt" : "2019-12-19T00:17:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5af5d66fe07b5f62bcba332a9579f5c504d8b30",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1814,1818 @@            from pandas.core.reshape.concat import concat\n\n            axis_number = obj._get_axis_number(self.axis)\n            other_axis = int(not axis_number)\n            if axis_number == 0:"
  },
  {
    "id" : "909ba235-21c5-48eb-a218-b23872a0664f",
    "prId" : 30384,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30384#pullrequestreview-336029937",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f98ea59d-da46-499a-ba69-6f6c91853445",
        "parentId" : null,
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Just some minor cleanups above: pluralizing names + use list comprehension instead of map.",
        "createdAt" : "2019-12-23T10:09:49Z",
        "updatedAt" : "2019-12-23T22:44:18Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "0f934790-5e68-430a-8462-aa2dd6fe2bf2",
        "parentId" : "f98ea59d-da46-499a-ba69-6f6c91853445",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i tend to prefer these too",
        "createdAt" : "2019-12-23T16:08:36Z",
        "updatedAt" : "2019-12-23T22:44:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "09bbae7c-3248-49a1-838b-8d335ad65a34",
        "parentId" : "f98ea59d-da46-499a-ba69-6f6c91853445",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can this just be a generator expression or does that fail? I see this is equivalent to existing code but maybe adds unnecessary overhead",
        "createdAt" : "2019-12-23T18:46:54Z",
        "updatedAt" : "2019-12-23T22:44:18Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "a77b5df9-28f6-4007-aff6-b16445f0608e",
        "parentId" : "f98ea59d-da46-499a-ba69-6f6c91853445",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "It would work, but wouldn't make any difference because it's passed into the BlockManager where it's stored.",
        "createdAt" : "2019-12-23T22:38:18Z",
        "updatedAt" : "2019-12-23T22:44:18Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9e6b564cee5817292ea3c73a057813371e1e24f",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +1755,1759 @@            lib.count_level_2d(x, labels=ids, max_bin=ngroups, axis=1) for x in vals\n        )\n        blocks = [make_block(val, placement=loc) for val, loc in zip(counted, locs)]\n\n        return self._wrap_agged_blocks(blocks, items=data.items)"
  },
  {
    "id" : "cb1273c7-6d11-4b69-b344-ffc2fd4e391d",
    "prId" : 30468,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30468#pullrequestreview-336385941",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5dcb0a2a-2bbd-44e0-a675-37bb3aee9524",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "The change is more complex than this. The code below can be simplified if this is a defaultdict.\r\n\r\nAlso, is `OrderedDict` still being used after this, or can it be removed from the imports?",
        "createdAt" : "2019-12-25T20:51:06Z",
        "updatedAt" : "2019-12-25T21:37:49Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "6be89540-70a6-4fc5-b991-9cf0a70289ce",
        "parentId" : "5dcb0a2a-2bbd-44e0-a675-37bb3aee9524",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "Quite a few other uses of OrderedDict -> i'm aiming to eliminate most in this issue https://github.com/pandas-dev/pandas/issues/30469 ",
        "createdAt" : "2019-12-25T20:55:49Z",
        "updatedAt" : "2019-12-25T21:37:49Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      },
      {
        "id" : "4e9253ce-6723-4418-a028-16df9beb9e7d",
        "parentId" : "5dcb0a2a-2bbd-44e0-a675-37bb3aee9524",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "> Also, is `OrderedDict` still being used after this, or can it be removed from the imports?\r\n\r\nYes OrderedDIct is still being used.\r\n\r\nI am really new to developing (I just greped for the words 'droped' '35' 'support' etc..),  can you please explain what is the problem with ```OrderedDict``` ?",
        "createdAt" : "2019-12-25T20:58:00Z",
        "updatedAt" : "2019-12-25T21:37:49Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "911c416c-9039-4595-b664-25b61dc4cd2a",
        "parentId" : "5dcb0a2a-2bbd-44e0-a675-37bb3aee9524",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "With a regular dict:\r\n```python\r\ngroupping_values = {}\r\nfor value in [1, 3, 1, 1, 2, 3]:\r\n    if value not in groupping_values:\r\n        groupping_values[value] = [value]\r\n    else:\r\n        groupping_values[value].append(value)\r\n```\r\nThe if is needed, because when we create the key in the dictionary, we need to create the list with its value. The other times we can append to it. \r\n\r\nWith an example, if we have an empty dictionary `{}` and we want to add the Python programming language, we can do `stuff['languages'] = ['python']`. If now that we already have `languages` with a list, if we want to add javascript we use a different instruction `stuff['languages'].append('javascript')`. This is what the `if` in the example does.\r\n\r\nPython `defaultdict` exists to make things simpler:\r\n```python\r\nimport collections\r\ngroupping_values = collections.defaultdict(list)\r\nfor value in [1, 3, 1, 1, 2, 3]:\r\n    groupping_values[value].append(value)\r\n```\r\n\r\nA `defaultdict` is \"smart\", since in the creation we tell its elements will be list. So, when we call the append, it'll create an empty list automatically before. We don't need the `if` anymore, and the code is simpler.\r\n\r\nThis is what it's expected here.",
        "createdAt" : "2019-12-25T21:08:04Z",
        "updatedAt" : "2019-12-25T21:37:49Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "d8d111a5-e40a-4f3b-98b2-1b671a0d8071",
        "parentId" : "5dcb0a2a-2bbd-44e0-a675-37bb3aee9524",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "Thank you so much for the detailed explanation.",
        "createdAt" : "2019-12-25T21:13:43Z",
        "updatedAt" : "2019-12-25T21:37:49Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9d173c022727db588867e6cb75b03d070f41ab9",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1898,1902 @@    # May be hitting https://github.com/python/mypy/issues/5958\n    # saying it doesn't have an attribute __name__\n    aggspec = defaultdict(list)\n    order = []\n    columns, pairs = list(zip(*kwargs.items()))"
  },
  {
    "id" : "7c6b50b2-6613-419b-bb11-150c0f3a0a26",
    "prId" : 30497,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30497#pullrequestreview-337490262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a5aa8cd-a09b-483b-aa57-564cd261a6e2",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "How is the key here a `str`? I think just int to hold position no?",
        "createdAt" : "2019-12-31T20:01:24Z",
        "updatedAt" : "2019-12-31T20:01:24Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "2582cd42-1479-4768-bd2a-11d3f5da61eb",
        "parentId" : "0a5aa8cd-a09b-483b-aa57-564cd261a6e2",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "Seems like there are cases where it can also be a string. (`test_preserve_categories` in `test_categorical.py`)\r\n\r\n```\r\ncategories = list(\"abc\")\r\ndf = DataFrame({\"A\": Categorical(list(\"ba\"), categories=categories, ordered=True)})\r\ndf.groupby(\"A\", sort=True, observed=False)\r\n```\r\n",
        "createdAt" : "2020-01-01T14:11:30Z",
        "updatedAt" : "2020-01-01T14:11:30Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfdb654d7f67d0b534f6367fb5c1ca97910a37cc",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +1121,1125 @@        obj = self._obj_with_exclusions\n\n        result: Dict[Union[int, str], Union[NDFrame, np.ndarray]] = {}\n        if axis != obj._info_axis_number:\n            for name, data in self:"
  },
  {
    "id" : "11b7a700-7a89-4ccb-a482-aaa1d4b63851",
    "prId" : 30858,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30858#pullrequestreview-345574649",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0d94c04-cdae-47e3-a22d-54fd2a6edbd5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can type results when its created",
        "createdAt" : "2020-01-20T23:48:22Z",
        "updatedAt" : "2020-07-14T18:13:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb3ba5c79c629392990d9f581d9d6c1dfe550bed",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +318,322 @@                obj._reset_cache()\n                obj._selection = name\n            results[base.OutputKey(label=name, position=idx)] = obj.aggregate(func)\n\n        if any(isinstance(x, DataFrame) for x in results.values()):"
  },
  {
    "id" : "8673627e-0cba-4429-8896-f2be5378848b",
    "prId" : 30858,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30858#pullrequestreview-438687515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6839785-200d-49fd-b219-09bd76be7779",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Do we need this branch? Is there a test that hits this?",
        "createdAt" : "2020-01-31T19:55:01Z",
        "updatedAt" : "2020-07-14T18:13:29Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "994765e8-373f-4247-82b4-aafc8090179b",
        "parentId" : "c6839785-200d-49fd-b219-09bd76be7779",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "@WillAyd Here's a test that hits it:\r\n```\r\npytest pandas/tests/groupby/aggregate/test_aggregate.py::TestNamedAggregationSeries::test_no_args_raises\r\n```\r\n\r\nwhen we get here, for that test, we have:\r\n```\r\n-> result = Series(indexed_output[0], index=index, name=columns[0])\r\n(Pdb) indexed_output\r\n{}\r\n(Pdb) index\r\nInt64Index([0, 1], dtype='int64')\r\n(Pdb) columns\r\nIndex([], dtype='object')\r\n```\r\nand so\r\n```\r\nresult = Series(indexed_output[0], index=index, name=columns[0])\r\n```\r\nwon't work because `columns[0]` will be out of range.",
        "createdAt" : "2020-02-02T08:14:14Z",
        "updatedAt" : "2020-07-14T18:13:29Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      },
      {
        "id" : "3503e24b-6207-4630-b6a5-94ca1ae199cd",
        "parentId" : "c6839785-200d-49fd-b219-09bd76be7779",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I was referring to the `result = DataFrame()` line - seems very strange to return this from this function",
        "createdAt" : "2020-03-03T22:40:40Z",
        "updatedAt" : "2020-07-14T18:13:29Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "933ef41c-81e8-4ed6-976f-fb50d0153894",
        "parentId" : "c6839785-200d-49fd-b219-09bd76be7779",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "In the test\r\n```\r\npytest pandas/tests/groupby/aggregate/test_aggregate.py::TestNamedAggregationSeries::test_no_args_raises\r\n```\r\nwe reach this branch. Before, it would hit the \"else\" branch, and would raise an error because `columns[0]` would be out of range - hence, I added this extra branch.\r\n\r\nBut we can avoid ever getting here by doing a check on `results` in `_aggregate_multiple_funcs`, so I'll do that instead",
        "createdAt" : "2020-03-04T11:48:20Z",
        "updatedAt" : "2020-07-14T18:13:29Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      },
      {
        "id" : "0c3d0f2b-d159-4731-a0f3-d73d5125d1bf",
        "parentId" : "c6839785-200d-49fd-b219-09bd76be7779",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "@WillAyd how about returning `self.obj._constructor_expanddim()` - does that seem OK?\r\n\r\nEDIT\r\nI'm aware that would in practice be the same as returning an empty DataFrame, it just seems more consistent with the other return types to write it like this.\r\nUnfortunately it looks like I'd rebased and force-pushed at the time of this review so am not sure how the code looked back then",
        "createdAt" : "2020-06-27T10:07:53Z",
        "updatedAt" : "2020-07-14T18:13:29Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb3ba5c79c629392990d9f581d9d6c1dfe550bed",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +360,364 @@                indexed_output[0], index=index, name=columns[0]\n            )\n        else:\n            result = self.obj._constructor_expanddim()\n"
  },
  {
    "id" : "53dbf5d9-2d2b-4396-9e52-5849c09618b7",
    "prId" : 31616,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31616#pullrequestreview-352670690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68281c90-ba52-400c-8017-590b4952c3f6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what? this is pretty odd to do\r\n\r\nif there is an error this is not the way to fix it",
        "createdAt" : "2020-02-04T01:12:24Z",
        "updatedAt" : "2020-02-05T09:22:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7c96e109-b0d7-4eb0-b23b-048fa9ae204c",
        "parentId" : "68281c90-ba52-400c-8017-590b4952c3f6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i think it must be that we're going through Block._split_and_operate; can anyone think of another way this would happen?",
        "createdAt" : "2020-02-04T01:14:33Z",
        "updatedAt" : "2020-02-05T09:22:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4554be1da89653d910af56b16fe816ccb6fa658",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1066,1070 @@                    result = cast(DataFrame, result)\n                    # unwrap DataFrame to get array\n                    if len(result._data.blocks) != 1:\n                        # We've split an object block! Everything we've assumed\n                        # about a single block input returning a single block output"
  },
  {
    "id" : "2a4f3e5c-9863-4476-a6d6-29ae599a9a29",
    "prId" : 31616,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31616#pullrequestreview-353106688",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4903cafa-cae7-4e60-bcc7-e1ab676b2f8e",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The only change is to move this block out of the `finally`. There weren't any changes to the code.\r\n\r\nI believe this is what we want... It'll run regardless of whether a NotImplementedError is raised. The primary differences are that\r\n\r\n1. It is not run when we `continue` (deleted block or split block)\r\n2. It is not run when unhandled exceptions are raised in the big `except NotImplementedError` block. I *think* that's what we want anyway. I don't think we should be proceeding to the finally when there was an unhandled exception.\r\n",
        "createdAt" : "2020-02-04T16:14:04Z",
        "updatedAt" : "2020-02-05T09:22:57Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4554be1da89653d910af56b16fe816ccb6fa658",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +1080,1084 @@                        result = result.reshape(1, -1)\n\n            assert not isinstance(result, DataFrame)\n\n            if result is not no_result:"
  },
  {
    "id" : "6cffce5a-695a-4a51-ba05-382767fbd7f9",
    "prId" : 31616,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31616#pullrequestreview-353394839",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14345940-a526-429d-9b6e-f5e440cfdc0f",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "could we avoid some of this by changing the agg_blocks.append to agg_blocks.extend?  and construct these separate blocks up in 1069-1076?",
        "createdAt" : "2020-02-04T18:23:09Z",
        "updatedAt" : "2020-02-05T09:22:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "579a2496-9142-4732-96df-aa0ce450b52d",
        "parentId" : "14345940-a526-429d-9b6e-f5e440cfdc0f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I tried that but it didn't look promising so I abandoned it. Several things work against that\r\n\r\n1. The conversion to ndarray. We need to avoid that since we have mixed types\r\n2. The construction of the new block with `block.make_block` would need to be handle specially, since we have multiple blocks and the origin `block`'s locs aren't correct anymore, since it's been split. ",
        "createdAt" : "2020-02-04T19:29:17Z",
        "updatedAt" : "2020-02-05T09:22:57Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "743b67ce-59ca-4339-8b4b-a78baf710164",
        "parentId" : "14345940-a526-429d-9b6e-f5e440cfdc0f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Hmm this might be out of scope, but i think if we used block.apply it would handle both the make_block and potential splitting",
        "createdAt" : "2020-02-05T00:20:39Z",
        "updatedAt" : "2020-02-05T09:22:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4554be1da89653d910af56b16fe816ccb6fa658",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +1114,1118 @@                for i, loc in enumerate(locs):\n                    new_items.append(np.array([loc], dtype=locs.dtype))\n                    agg_blocks.append(result.iloc[:, [i]]._data.blocks[0])\n\n        # reset the locs in the blocks to correspond to our"
  }
]