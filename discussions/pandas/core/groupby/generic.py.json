[
  {
    "id" : "b803c5f1-c0fb-4688-848e-ab8a15ca67a0",
    "prId" : 22318,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22318#pullrequestreview-148462777",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "218e2d79-0cd4-4c88-8086-fb7d459c1409",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "write this as \r\n```\r\nconcatenated = concat(....)\r\nconcatenated = concatenated.reindex(...)\r\n```\r\nuse copy=False",
        "createdAt" : "2018-08-22T12:47:08Z",
        "updatedAt" : "2019-07-03T02:21:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc9c79b03dc9897a436a1cff8cbc26e4d10f2f59",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +567,571 @@        concatenated = concatenated.reindex(concat_index, axis=other_axis,\n                                            copy=False)\n        return self._set_result_index_ordered(concatenated)\n\n    @Substitution(klass='DataFrame', selected='')"
  },
  {
    "id" : "bfc64e04-ce45-4956-abc8-4ae1ef37b80e",
    "prId" : 22699,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22699#pullrequestreview-156353721",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37b344ca-c855-4c61-ad9b-b9c53c7861da",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in theory we could add a lint rule to avoid using ``collection.Iterable``, and instead just use our compat",
        "createdAt" : "2018-09-18T11:40:34Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f15e3ef1-3bea-4fdc-830e-a68ebb1641b7",
        "parentId" : "37b344ca-c855-4c61-ad9b-b9c53c7861da",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think we're close enough to py3-only that we'll be OK. Writing that regex would be a bit fiddly since we'd need to enumerate all the ABCs.",
        "createdAt" : "2018-09-18T12:50:19Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "77a6f8d3-1dae-402c-9f73-816b3eab6e6c",
        "parentId" : "37b344ca-c855-4c61-ad9b-b9c53c7861da",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "true, certainly a follow up issue is ok",
        "createdAt" : "2018-09-18T13:03:00Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4990fc2d984b536e5c7c97ad55d4f550ae661867",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +759,763 @@            return getattr(self, func_or_funcs)(*args, **kwargs)\n\n        if isinstance(func_or_funcs, compat.Iterable):\n            # Catch instances of lists / tuples\n            # but not the class list / tuple itself."
  },
  {
    "id" : "15762892-c96e-492e-b2ea-e3f843f5ffaa",
    "prId" : 23463,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23463#pullrequestreview-171796738",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d202ce5-fea3-4d88-9285-247b9c74701e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you put after the comment, does if matter if we put this after the shape check?\r\n\r\nand wont' ``getattr(res, 'columns', None) != getattr(res_fast, 'columns', None)`` work?\r\n\r\n",
        "createdAt" : "2018-11-03T14:09:54Z",
        "updatedAt" : "2018-11-06T03:21:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "330b407f-8ac7-4740-8a45-cd4427caeb28",
        "parentId" : "6d202ce5-fea3-4d88-9285-247b9c74701e",
        "authorId" : "1a156258-02e0-49e7-aa04-545a33b266db",
        "body" : "I don't think it matters if it is after the shape change. I'll move it. Why do you want to use `getattr`? Why would columns not be set?",
        "createdAt" : "2018-11-05T15:05:51Z",
        "updatedAt" : "2018-11-06T03:21:25Z",
        "lastEditedBy" : "1a156258-02e0-49e7-aa04-545a33b266db",
        "tags" : [
        ]
      },
      {
        "id" : "5f5cc2cb-b90e-4f79-abd5-07a27febcda0",
        "parentId" : "6d202ce5-fea3-4d88-9285-247b9c74701e",
        "authorId" : "1a156258-02e0-49e7-aa04-545a33b266db",
        "body" : "Actually, it does. Checking columns is probably much faster than the contents of the shape check, so we should do it first to avoid paying that cost every time.",
        "createdAt" : "2018-11-05T15:11:40Z",
        "updatedAt" : "2018-11-06T03:21:25Z",
        "lastEditedBy" : "1a156258-02e0-49e7-aa04-545a33b266db",
        "tags" : [
        ]
      },
      {
        "id" : "50b3afd0-482d-4b70-bb18-690e50f26c5b",
        "parentId" : "6d202ce5-fea3-4d88-9285-247b9c74701e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is ``group`` *always* a DataFrame here?",
        "createdAt" : "2018-11-05T15:19:25Z",
        "updatedAt" : "2018-11-06T03:21:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bf737b3e-721e-4858-825e-b153c0b22fab",
        "parentId" : "6d202ce5-fea3-4d88-9285-247b9c74701e",
        "authorId" : "1a156258-02e0-49e7-aa04-545a33b266db",
        "body" : "Yes. I tested this hypothesis by asserting that it is a dataframe in all tests.",
        "createdAt" : "2018-11-05T18:36:43Z",
        "updatedAt" : "2018-11-06T03:21:25Z",
        "lastEditedBy" : "1a156258-02e0-49e7-aa04-545a33b266db",
        "tags" : [
        ]
      },
      {
        "id" : "277483f3-2bd0-4e2e-a90a-6bfb719161f0",
        "parentId" : "6d202ce5-fea3-4d88-9285-247b9c74701e",
        "authorId" : "1a156258-02e0-49e7-aa04-545a33b266db",
        "body" : "Also just confirmed that this code *does not* get called when the user writes `df.groupby('group').column_name.transform(func)`. So I am very confident that `group` is always a `pd.DataFrame` here.",
        "createdAt" : "2018-11-05T22:45:32Z",
        "updatedAt" : "2018-11-06T03:21:25Z",
        "lastEditedBy" : "1a156258-02e0-49e7-aa04-545a33b266db",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f76e407e58f58605ba7076b4372e7d6cbfac638",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +589,593 @@            # verify fast path does not change columns (and names), otherwise\n            # its results cannot be joined with those of the slow path\n            if res_fast.columns != group.columns:\n                return path, res\n            # verify numerical equality with the slow path"
  },
  {
    "id" : "69469bf2-a96b-460a-9513-a168a4fc02d0",
    "prId" : 23463,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23463#pullrequestreview-171796389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc1bedf9-c108-4a58-a2e2-eb50c8cde3d7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here on what this is checking",
        "createdAt" : "2018-11-05T19:14:15Z",
        "updatedAt" : "2018-11-06T03:21:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a5007eb3-50d4-432f-93c6-803a1f16e287",
        "parentId" : "cc1bedf9-c108-4a58-a2e2-eb50c8cde3d7",
        "authorId" : "1a156258-02e0-49e7-aa04-545a33b266db",
        "body" : "Done.",
        "createdAt" : "2018-11-05T22:44:23Z",
        "updatedAt" : "2018-11-06T03:21:25Z",
        "lastEditedBy" : "1a156258-02e0-49e7-aa04-545a33b266db",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f76e407e58f58605ba7076b4372e7d6cbfac638",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +592,596 @@                return path, res\n            # verify numerical equality with the slow path\n            if res.shape == res_fast.shape:\n                res_r = res.values.ravel()\n                res_fast_r = res_fast.values.ravel()"
  },
  {
    "id" : "202e8be7-a7ce-4b0f-b039-e93a593c780d",
    "prId" : 23465,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23465#pullrequestreview-171852169",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "281936c8-9199-493d-855e-1ef36463bf87",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "In case you didn't follow the issue, the original failure came from us passing generator expressions to `vstack`, and the new `__array_function__` stuff in NumPy dev exhausted those generators. So we just build a list instead (which NumPy was doing anyway)",
        "createdAt" : "2018-11-06T03:09:25Z",
        "updatedAt" : "2018-11-06T03:09:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "51c92a8a-dc7e-4a52-8ec0-70655bf20989",
        "parentId" : "281936c8-9199-493d-855e-1ef36463bf87",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yep saw that",
        "createdAt" : "2018-11-06T03:18:39Z",
        "updatedAt" : "2018-11-06T03:18:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f84fb0a2a8c008a43554315503375ded56b1391",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +411,415 @@                                key_index is None or\n                                isinstance(key_index, MultiIndex)):\n                            stacked_values = np.vstack([\n                                np.asarray(v) for v in values\n                            ])"
  },
  {
    "id" : "08025c1d-8dab-4322-a917-836fe726c11c",
    "prId" : 25206,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25206#pullrequestreview-201434243",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6a2c28d-9ddb-44bb-a950-1b56a8699cc6",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "-0.1 on changing in cases where the list is about to get materialized anyway ",
        "createdAt" : "2019-02-08T05:17:43Z",
        "updatedAt" : "2019-02-09T00:54:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f452fb412b595d8b697722c5b8675651c34d4782",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1464,1468 @@        # Select in-axis groupers\n        in_axis_grps = ((i, ping.name) for (i, ping)\n                        in enumerate(groupings) if ping.in_axis)\n        g_nums, g_names = zip(*in_axis_grps)\n"
  }
]