[
  {
    "id" : "173e37d9-c899-44b3-bf9e-331fb853d2c0",
    "prId" : 20405,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20405#pullrequestreview-191753545",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65f27a92-18b0-4d50-beca-2c997aec2645",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe you want to show the signature as a comment of the Callable[object, dict]",
        "createdAt" : "2019-01-11T16:46:43Z",
        "updatedAt" : "2019-02-28T07:01:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fc15b010-f9ce-4ab4-9d96-8cb7e63f1a94",
        "parentId" : "65f27a92-18b0-4d50-beca-2c997aec2645",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Are you asking to do that in this docstring or as a type hint in the implementations themselves?",
        "createdAt" : "2019-01-11T16:55:21Z",
        "updatedAt" : "2019-02-28T07:01:18Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "1d8f0fef-c90d-400d-a018-4fec12068515",
        "parentId" : "65f27a92-18b0-4d50-beca-2c997aec2645",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "both",
        "createdAt" : "2019-01-11T16:58:04Z",
        "updatedAt" : "2019-02-28T07:01:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec013bf03c03a4c5124150bba7549f64d4f9ca90",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +2004,2008 @@            by the Cython operation. Raises if `needs_values` is False.\n        post_processing : function, default None\n            Function to be applied to result of Cython function. Should accept\n            an array of values as the first argument and type inferences as its\n            second argument, i.e. the signature should be"
  },
  {
    "id" : "322328fa-148b-4817-b021-5fbd13e7cefe",
    "prId" : 20405,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20405#pullrequestreview-191759334",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43f2e938-14ee-4b55-bf2b-27fb47b69907",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "FYI this will fail if we try to pass in `post_processing` with `pre_processing` as `inferences` will be undefined in that case. Since it's all internal I suppose not a big deal for now, but could also add an explicit check at the start of the function if it doesn't add too much bloat.",
        "createdAt" : "2019-01-11T17:12:33Z",
        "updatedAt" : "2019-02-28T07:01:18Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec013bf03c03a4c5124150bba7549f64d4f9ca90",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +2064,2068 @@\n            if post_processing:\n                result = post_processing(result, inferences)\n\n            output[name] = result"
  },
  {
    "id" : "ec67eb91-40e0-47b6-804b-b85d0866cf13",
    "prId" : 20405,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20405#pullrequestreview-191985812",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69df0bd4-3d87-43a0-ad1c-53c9f5427a6b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "just define ``inference = None`` at the top then you wont ever have a NameError",
        "createdAt" : "2019-01-13T18:52:31Z",
        "updatedAt" : "2019-02-28T07:01:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec013bf03c03a4c5124150bba7549f64d4f9ca90",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +2045,2049 @@            inferences = None\n\n            if needs_values:\n                vals = obj.values\n                if pre_processing:"
  },
  {
    "id" : "981a3320-fdfc-4120-878c-5889342a671e",
    "prId" : 20405,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20405#pullrequestreview-194797355",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7a1abb4-e5bc-4eba-9610-08c7ec0a41e1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not really what I meant, this is a (ndarray, dict)",
        "createdAt" : "2019-01-13T18:52:50Z",
        "updatedAt" : "2019-02-28T07:01:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5a768b38-c0cc-46d9-8b13-4c7fed9bbe50",
        "parentId" : "e7a1abb4-e5bc-4eba-9610-08c7ec0a41e1",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Well on a second pass the dict was unnecessary so I ended up just returning the type. I suppose it could either be an actual type object or a string so this is an approximation of that for simplicity, though could update to include a string as well",
        "createdAt" : "2019-01-22T00:25:29Z",
        "updatedAt" : "2019-02-28T07:01:18Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec013bf03c03a4c5124150bba7549f64d4f9ca90",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +2007,2011 @@            an array of values as the first argument and type inferences as its\n            second argument, i.e. the signature should be\n            (ndarray, typing.Type).\n        **kwargs : dict\n            Extra arguments to be passed back to Cython funcs"
  },
  {
    "id" : "fec41287-63b3-4d74-b3e8-5a3a1d4b9cdc",
    "prId" : 20583,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20583#pullrequestreview-116549858",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6be4bb3-dcc0-49ae-8485-f6be1045ba9f",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Why not have it as `False` default? (if we want to deprecate in the future, we can then just use `None` ?)",
        "createdAt" : "2018-05-01T12:13:11Z",
        "updatedAt" : "2018-05-01T12:26:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdf7525812ca670f9406ab8df333030d36d30947",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +2908,2912 @@\n    def __init__(self, index, grouper=None, obj=None, name=None, level=None,\n                 sort=True, observed=None, in_axis=False):\n\n        self.name = name"
  },
  {
    "id" : "b31397e8-1bc0-40c9-b33c-c548e54c32c3",
    "prId" : 20583,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20583#pullrequestreview-116549858",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0348e5f3-8ba4-445f-b9c4-001563cdd3b1",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "should this comment be removed for now?",
        "createdAt" : "2018-05-01T12:14:58Z",
        "updatedAt" : "2018-05-01T12:26:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdf7525812ca670f9406ab8df333030d36d30947",
    "line" : 222,
    "diffHunk" : "@@ -1,1 +4745,4749 @@        # TODO(jreback): remove completely\n        # when observed parameter is defaulted to True\n        # gh-20583\n\n        if self.observed:"
  },
  {
    "id" : "afc68891-62df-479e-ab0c-e633a65fe186",
    "prId" : 20613,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20613#pullrequestreview-116476509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fb6d5d9-f1b2-47ac-a8ad-5ca83f4bbe88",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same here, there are like 10 calls to concat. I think should be explicit about sort",
        "createdAt" : "2018-05-01T00:12:00Z",
        "updatedAt" : "2018-05-01T00:20:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e1b0241358c10893939d135e91ab16cfa48cadd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1099,1103 @@\n                result = concat(values, axis=self.axis, keys=group_keys,\n                                levels=group_levels, names=group_names,\n                                sort=False)\n            else:"
  },
  {
    "id" : "5343bcd4-98ec-490d-997e-1c88d530308b",
    "prId" : 21573,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21573#pullrequestreview-131227129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5b6711b-4e94-4503-98e8-cb901e979a0b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@reidy-p pushed a simplification. but maybe need some additional tests that do this when a column is selected\r\n\r\ne.g. ``df.groupby('id', as_index=False)['foo'].first()``",
        "createdAt" : "2018-06-22T10:32:16Z",
        "updatedAt" : "2018-06-22T17:15:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "aecf316d-554b-4c05-9c0d-c1b3bb033a53",
        "parentId" : "e5b6711b-4e94-4503-98e8-cb901e979a0b",
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "Nice simplification. I added some new tests.",
        "createdAt" : "2018-06-22T14:54:50Z",
        "updatedAt" : "2018-06-22T17:15:57Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef5d5b180a6c9eb2abbfc40b731ba84368266bcf",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4741,4745 @@    def _wrap_agged_blocks(self, items, blocks):\n        if not self.as_index:\n            index = np.arange(blocks[0].values.shape[-1])\n            mgr = BlockManager(blocks, [items, index])\n            result = DataFrame(mgr)"
  },
  {
    "id" : "2b24ba4f-c391-44c5-8026-7c751db4c133",
    "prId" : 22811,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22811#pullrequestreview-157935485",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df38b2be-c9b7-4147-a233-096837486bf9",
        "parentId" : null,
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "``Index.difference`` tries to sort its result by default and this means that sometimes the order of the columns was changed from the original DataFrame. I added a new ``sort`` parameter to ``Index.difference`` with a default of True to control this.",
        "createdAt" : "2018-09-23T10:55:45Z",
        "updatedAt" : "2018-11-18T22:59:13Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "13a23f7558ccde3710e8786320c28e4d271a7ca9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +496,500 @@            # GH12839 clear selected obj cache when group selection changes\n            self._group_selection = ax.difference(Index(groupers),\n                                                  sort=False).tolist()\n            self._reset_cache('_selected_obj')\n"
  },
  {
    "id" : "2544a794-2de4-4744-aca1-25dab966488e",
    "prId" : 23886,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23886#pullrequestreview-178065922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3516811-5bdd-4011-a6b9-b06141d2fd8e",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Do you mind adding a period here too?",
        "createdAt" : "2018-11-25T00:32:47Z",
        "updatedAt" : "2018-11-27T05:31:53Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b34280bd9e7fec3dd77b4d43041452cb914c5869",
    "line" : 187,
    "diffHunk" : "@@ -1,1 +1144,1148 @@        Compute median of groups, excluding missing values.\n\n        For multiple groupings, the result index will be a MultiIndex\n        \"\"\"\n        try:"
  },
  {
    "id" : "efbb2768-018b-495c-92d0-69ad94dfc22b",
    "prId" : 24128,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24128#pullrequestreview-187802952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfd0d24b-8ac6-4547-9f59-0db0429c2b84",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "blank line here",
        "createdAt" : "2018-12-25T17:31:24Z",
        "updatedAt" : "2018-12-26T00:16:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a03cbf5e4afe65c8b6fe8a1eb1eee517d0fc5913",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +2007,2011 @@        fill_value : optional\n\n            .. versionadded:: 0.24.0\n        \"\"\"\n"
  },
  {
    "id" : "bbd8bc04-6766-435d-8893-3323ebf56694",
    "prId" : 24828,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24828#pullrequestreview-194406492",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c13b1c87-ba72-48d6-957b-1248f6cc7844",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "be aware that I have changed an error message in the codebase ",
        "createdAt" : "2019-01-18T17:38:35Z",
        "updatedAt" : "2019-01-18T20:42:30Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "83fe85e2-e0a6-4f8c-a69d-8861e71a6fcf",
        "parentId" : "c13b1c87-ba72-48d6-957b-1248f6cc7844",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "And this is why we should be checking error messages if possible, to catch things like this 🙂 ",
        "createdAt" : "2019-01-20T19:53:27Z",
        "updatedAt" : "2019-01-20T19:53:32Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2fab1d4c589452c3b134b07ba1ae16c67f011bf",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +439,443 @@                except KeyError:\n                    # turns out it wasn't a tuple\n                    msg = (\"must supply a same-length tuple to get_group\"\n                           \" with multiple grouping keys\")\n                    raise ValueError(msg)"
  },
  {
    "id" : "ad009127-604d-4fac-be84-ab36f10b1579",
    "prId" : 25157,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25157#pullrequestreview-201368046",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e00ea2d-3f55-4f3c-ad79-123586ed487a",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm OK - I suppose this is correct to do but was this showing up as a PR04 error?",
        "createdAt" : "2019-02-07T00:16:42Z",
        "updatedAt" : "2019-02-11T01:05:49Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "372f0280-6b46-4395-adb3-c02267c9dd90",
        "parentId" : "6e00ea2d-3f55-4f3c-ad79-123586ed487a",
        "authorId" : "45a5e19e-14e0-41a9-8d85-ce5f3d1cd3fe",
        "body" : "No, but just for convention",
        "createdAt" : "2019-02-07T23:07:15Z",
        "updatedAt" : "2019-02-11T01:05:49Z",
        "lastEditedBy" : "45a5e19e-14e0-41a9-8d85-ce5f3d1cd3fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "bffd111ff6213170e0cbff4bff65b0a6f55461a5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1836,1840 @@\n        Returns\n        -------\n        DataFrame with ranking of values within each group\n        \"\"\""
  },
  {
    "id" : "e89844dc-6c9b-46cd-bc7d-b2de4bd8f185",
    "prId" : 25308,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25308#pullrequestreview-205507463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be7c066a-eef0-4b47-b1d7-170cc7896a0d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "when does this hit the type error? can you add a comment about what types of returns yield this (assume it is when the transform function is doing a non-time transform). is this hit in the tests?",
        "createdAt" : "2019-02-19T13:34:04Z",
        "updatedAt" : "2019-02-28T16:15:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "73bb2480-4c68-4430-9379-97e7866b574a",
        "parentId" : "be7c066a-eef0-4b47-b1d7-170cc7896a0d",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Added a comment when this was hit (`_try_cast` is called downstream where the result is already correctly localized). Tested here:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/b2c751985ebd09b72d917d08dc06193dc0922018/pandas/tests/groupby/test_transform.py#L840",
        "createdAt" : "2019-02-19T23:27:14Z",
        "updatedAt" : "2019-02-28T16:15:53Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cfe961fb3678644f4dd06bfed0406e40abd2331",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +778,782 @@                    )\n                    result = result.astype(dtype)\n                except TypeError:\n                    # _try_cast was called at a point where the result\n                    # was already tz-aware"
  },
  {
    "id" : "3b4ef8c1-1c2c-4884-ac30-b9d018182343",
    "prId" : 25308,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25308#pullrequestreview-207173826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "187c3aa2-f017-41ae-8119-f56f30f25549",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "passing a dtype to DTA._from_sequence is equivalent to localizing right? I think this is true for DTI \r\n\r\ncc @jbrockmendel @TomAugspurger ",
        "createdAt" : "2019-02-24T20:04:00Z",
        "updatedAt" : "2019-02-28T16:15:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1ec92df5-66d2-4490-840d-a2f6f8372ae0",
        "parentId" : "187c3aa2-f017-41ae-8119-f56f30f25549",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "It _should_, but I don't think DTA._from_sequence coerces `'UTC'` to a dtype downstream:\r\n\r\n```\r\n-> result = obj._values._from_sequence(result, dtype='UTC')\r\n(Pdb) n\r\nTypeError: data type 'UTC' not understood\r\n```",
        "createdAt" : "2019-02-24T21:29:31Z",
        "updatedAt" : "2019-02-28T16:15:53Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "d8c0476f-ff07-4be5-9c77-afebe4d2d6c8",
        "parentId" : "187c3aa2-f017-41ae-8119-f56f30f25549",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm this is a bug can u create an issue",
        "createdAt" : "2019-02-24T21:47:40Z",
        "updatedAt" : "2019-02-28T16:15:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cfe961fb3678644f4dd06bfed0406e40abd2331",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +778,782 @@                    )\n                    result = result.astype(dtype)\n                except TypeError:\n                    # _try_cast was called at a point where the result\n                    # was already tz-aware"
  },
  {
    "id" : "9cff59f2-5db5-42cd-80ba-ac6cecda62a0",
    "prId" : 26059,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26059#pullrequestreview-225957505",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b95590f6-5b16-487e-b8b3-d8e51fd8adfe",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "If done there are also `%name` occurences in the `_common_see_also` that need to be substituted, so they cannot be done in one go.",
        "createdAt" : "2019-04-12T08:33:57Z",
        "updatedAt" : "2019-04-12T09:47:26Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "35138d444bac2ded0622610ce5b833eaa9b41e58",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1099,1103 @@\n    @Substitution(name='groupby')\n    @Substitution(see_also=_common_see_also)\n    def mean(self, *args, **kwargs):\n        \"\"\""
  },
  {
    "id" : "42cb5b8d-0a8a-4e22-aa53-408565fa481d",
    "prId" : 26152,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26152#pullrequestreview-229260726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a24762c-e63a-48dc-972b-13ac8070dc21",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Note I had to change this because `nth_values` was inferred as `List[int]` upon initial assignment. This prevents reassignment from potentially obfuscating the type checker and code intent",
        "createdAt" : "2019-04-22T21:33:49Z",
        "updatedAt" : "2019-04-29T01:34:02Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2a0b8e999744554011ffa3ea9608d486b7f1557",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +1635,1639 @@            mask_left = np.in1d(self._cumcount_array(), nth_array)\n            mask_right = np.in1d(self._cumcount_array(ascending=False) + 1,\n                                 -nth_array)\n            mask = mask_left | mask_right\n"
  },
  {
    "id" : "af514330-31a6-4c83-978f-7f51835af89f",
    "prId" : 26419,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26419#pullrequestreview-238136137",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6021a363-10a8-4a84-9b76-92090423cab6",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Also note that this reindexing only works when the user does not provided a `dropna` argument to `nth`, but that seemed to cause an orthogonal issue I can open later",
        "createdAt" : "2019-05-16T00:55:00Z",
        "updatedAt" : "2019-08-19T17:22:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "308e5690c4d949c9125d9759c09482abc519360f",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1778,1782 @@\n            if not self.observed and isinstance(result_index, CategoricalIndex):\n                out = out.reindex(result_index)\n\n            return out.sort_index() if self.sort else out"
  },
  {
    "id" : "79303b3e-efea-4f02-bca6-51395206c65c",
    "prId" : 27071,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27071#pullrequestreview-254975633",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7943ec34-63e3-4d3e-98c6-b6d992556544",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is there a particular reason why we don't reuse the `groupby_function` factory (save perhaps current scoping) for these? Wondering why we would do `Series(x).mean(**kwargs)` here instead of `np.mean` as we do with the existing funcs",
        "createdAt" : "2019-06-27T02:34:09Z",
        "updatedAt" : "2019-06-27T23:13:13Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b116c634-852c-42f8-9c60-7d5880f50230",
        "parentId" : "7943ec34-63e3-4d3e-98c6-b6d992556544",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "``np.mean`` does not properly handle argument, for example ``min_count``",
        "createdAt" : "2019-06-27T02:44:23Z",
        "updatedAt" : "2019-06-27T23:13:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6fdcd5ec-1617-4ba4-8674-0e825971efc5",
        "parentId" : "7943ec34-63e3-4d3e-98c6-b6d992556544",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Gotcha. So we probably have an issue with `sum` as generated by that function then?\r\n\r\nDon't need to necessarily solve here just trying to get an understanding of how we can align all of these defs",
        "createdAt" : "2019-06-27T02:45:45Z",
        "updatedAt" : "2019-06-27T23:13:13Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "2a332441-ee6a-4618-9c97-5b322e0f87b0",
        "parentId" : "7943ec34-63e3-4d3e-98c6-b6d992556544",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "likely we should re-write ``grouping_function``, but its behavior is actually kind of tricky as it handles cases where the alt_function raises and must fallback; for another time.",
        "createdAt" : "2019-06-27T02:48:05Z",
        "updatedAt" : "2019-06-27T23:13:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a6a0c08dc5a65427f29fbf4c989b2b895b004aa",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1160,1164 @@        nv.validate_groupby_func('mean', args, kwargs, ['numeric_only'])\n        try:\n            return self._cython_agg_general(\n                'mean', alt=lambda x, axis: Series(x).mean(**kwargs), **kwargs)\n        except GroupByError:"
  },
  {
    "id" : "85fe954e-cdc2-46fa-aa02-b8097e4289ef",
    "prId" : 27992,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27992#pullrequestreview-285439779",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc482e20-d548-45df-9fab-a7f90104c9c8",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm I'm not sure relying on underlying block values is the best way to go about this. Is it possible to just work with the obj here instead?",
        "createdAt" : "2019-08-23T13:51:52Z",
        "updatedAt" : "2019-09-09T11:13:03Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "337d0eeb-738e-4265-8c2c-ffab99caa836",
        "parentId" : "dc482e20-d548-45df-9fab-a7f90104c9c8",
        "authorId" : "89f39c5c-b206-4f31-bb12-9512a7c2e14e",
        "body" : "Sorry for my lack of understanding about underlying block values.\r\nShould I leave the code using `obj.values` except for the last `result = algorithms.take_nd(obj.values, result)`?",
        "createdAt" : "2019-09-09T11:24:10Z",
        "updatedAt" : "2019-09-09T11:24:10Z",
        "lastEditedBy" : "89f39c5c-b206-4f31-bb12-9512a7c2e14e",
        "tags" : [
        ]
      }
    ],
    "commit" : "6eb0d287f5698c93ab759de928b254fb3cb86fe7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2264,2268 @@\n        for name, obj in self._iterate_slices():\n            values = obj._data._values\n\n            if aggregate:"
  },
  {
    "id" : "9da67969-e3a5-494b-8c4a-c652bcb1cce6",
    "prId" : 28771,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28771#pullrequestreview-298476822",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0289a251-0aeb-48db-86a5-57518b08fcfe",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Any reason we don't just use `functools.wraps`? Maybe a general question in our code base but unclear to me why we choose to assign to the dunders directly instead of using functools",
        "createdAt" : "2019-10-07T21:05:04Z",
        "updatedAt" : "2019-10-08T14:28:44Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b4abbfb1-c0ca-4a4e-9299-82984dc8ded2",
        "parentId" : "0289a251-0aeb-48db-86a5-57518b08fcfe",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "no idea",
        "createdAt" : "2019-10-08T00:12:50Z",
        "updatedAt" : "2019-10-08T14:28:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "46d7a2fa41684356978466d2a626269bb00feaf4",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +662,666 @@                raise ValueError\n\n        wrapper.__name__ = name\n        return wrapper\n"
  },
  {
    "id" : "0fbd9dbb-83a1-464b-b859-596a60b151d9",
    "prId" : 28835,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28835#pullrequestreview-298719585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aba676dd-696a-4955-937c-2e1d36fc6727",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This func was also not a direct copy paste because it existed in both classes. What was in NDFrameGroupBy was moved to GroupBy (can ref last commit)",
        "createdAt" : "2019-10-08T12:20:41Z",
        "updatedAt" : "2019-10-08T12:20:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "29ace87d34f8215c1c13ce2fa88a15edf1f8264f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +870,874 @@        return self._wrap_transformed_output(output, names)\n\n    def _wrap_aggregated_output(self, output, names=None):\n        raise AbstractMethodError(self)\n"
  },
  {
    "id" : "1a957c72-6088-4111-858b-4c0138e7c0ec",
    "prId" : 28883,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28883#pullrequestreview-299777776",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfff7b8e-6ce2-4ab6-b76d-fb60a36643fb",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "That would seem logical; follow ups to figure out what is actually needed here are certainly welcome",
        "createdAt" : "2019-10-10T01:24:53Z",
        "updatedAt" : "2019-10-10T01:24:53Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "52e7b0ebc32428953e41ee7a5b63841033d89389",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +724,728 @@\n            elif hasattr(nanops, \"nan\" + func):\n                # TODO: should we wrap this in to e.g. _is_builtin_func?\n                f = getattr(nanops, \"nan\" + func)\n"
  },
  {
    "id" : "f3b22a22-9e8e-4afb-9793-34d054f25cff",
    "prId" : 29124,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29124#pullrequestreview-305949639",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ecbdcba-c2bc-4176-b91c-8c5d36581d75",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "would this be appreciably simpler if we handled ohlc separately?",
        "createdAt" : "2019-10-23T03:38:33Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "22ae738c-725e-4d28-b04d-9213993f2189",
        "parentId" : "8ecbdcba-c2bc-4176-b91c-8c5d36581d75",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I though about this, and actually if you look back at the commits there were points in time where I did this.\r\n\r\nUltimately I figured for now to just keep this as generic as possible and not special case things. That does add:\r\n  \r\n  1. An inner loop in this method AND\r\n  2. Complexity for `_wrap_series_output` and `_wrap_aggregated_output`, as they now *might* need to build a DataFrame instead of a Series in (I assume) < 1% of cases\r\n\r\nThe upside of punting this for now is that there are other functions that aren't entirely generic. `ohlc` converts a Series into a DataFrame, but similarly `size`, `ngroup` and `cumcount` convert a DataFrame into a Series (see the test where these have to be skipped). It might make the most sense to prevent these from going through the `generic` module entirely, but not sure yet what the best approach is\r\n\r\n",
        "createdAt" : "2019-10-23T15:00:28Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "51b805050e7dfd1a582a7997aa7790482bde0a50",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +868,872 @@        # the index from enumeration as the key of output, but ohlc in particular\n        # returns a (n x 4) array. Output requires 1D ndarrays as values, so we\n        # need to slice that up into 1D arrays\n        idx = 0\n        for obj in self._iterate_slices():"
  },
  {
    "id" : "bd1a712f-6c20-44b5-ac5b-0b5984f5d094",
    "prId" : 29124,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29124#pullrequestreview-308643763",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51b668ac-fb8e-4839-9381-f095f3195ad7",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is this the ohlc case?  if so, comment to that effect?",
        "createdAt" : "2019-10-29T03:36:19Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "afd51a98-97ec-46fc-92ed-98909e9a98c8",
        "parentId" : "51b668ac-fb8e-4839-9381-f095f3195ad7",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Sure np. This is also noted in the doctoring for `grouper.aggregate`; worth reconsidering (as you've already mentioned) if its really worth changing the signatures of all of these functions just for ohlc",
        "createdAt" : "2019-10-29T16:15:49Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "51b805050e7dfd1a582a7997aa7790482bde0a50",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +882,886 @@            if agg_names:\n                # e.g. ohlc\n                assert len(agg_names) == result.shape[1]\n                for result_column, result_name in zip(result.T, agg_names):\n                    key = base.OutputKey(label=result_name, position=idx)"
  },
  {
    "id" : "4bda99c9-e541-4fd4-8760-c4753cd579e5",
    "prId" : 29124,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29124#pullrequestreview-310789545",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bef4cb62-ce44-4e2b-a9bd-32211379d123",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can use enumerate(...)",
        "createdAt" : "2019-11-02T20:33:58Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d81960e1-8478-4aa6-8cf4-1db4657105a2",
        "parentId" : "bef4cb62-ce44-4e2b-a9bd-32211379d123",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I started with that but unfortunately it doesn't work because ohlc returns 4 columns of data, so you have to account for each of those.\r\n\r\n`ohlc` probably just needs to be removed from the generic handling as it adds a lot of cruft. @jbrockmendel brought that up before as well",
        "createdAt" : "2019-11-02T21:34:55Z",
        "updatedAt" : "2019-11-19T22:18:55Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "51b805050e7dfd1a582a7997aa7790482bde0a50",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +891,895 @@                key = base.OutputKey(label=name, position=idx)\n                output[key] = self._try_cast(result, obj)\n                idx += 1\n\n        if len(output) == 0:"
  },
  {
    "id" : "76cc9367-a6ba-4ec1-abd6-1c127f5151ec",
    "prId" : 29228,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29228#pullrequestreview-307419511",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8198c4b-b9fb-44d6-9894-85b3b38d6d30",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can we just replace this function altogether with `_python_agg_general`? Conceptually it would seem like they do the same thing, though the former would actually be generic across `Series` and `DataFrame`",
        "createdAt" : "2019-10-25T19:22:56Z",
        "updatedAt" : "2019-10-25T21:29:03Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f2060fe7-10f8-46d4-a663-3ef47387490f",
        "parentId" : "c8198c4b-b9fb-44d6-9894-85b3b38d6d30",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I haven't checked specifically, but I'm hoping we can trim these before long",
        "createdAt" : "2019-10-25T19:52:31Z",
        "updatedAt" : "2019-10-25T21:29:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "961f75f8294034cf222793d71c6e6035547fa19f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +642,646 @@            # mark this column as an error\n            try:\n                result = self._aggregate_item_by_item(name, *args, **kwargs)\n                assert self.obj.ndim == 2\n                return result"
  },
  {
    "id" : "6ece047d-a3a5-45a5-9198-c1e98c720fe5",
    "prId" : 29406,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29406#pullrequestreview-313550572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc86d16e-c375-4a8b-b6c2-a9b734421e3c",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I _think_ `Type[GroupBy]` would have been sufficient.",
        "createdAt" : "2019-11-07T18:36:53Z",
        "updatedAt" : "2019-11-07T18:36:53Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4d4ef997ce3fb9e2369d20b02496c55917bc213",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +2476,2480 @@        klass = (\n            SeriesGroupBy\n        )  # type: Union[Type[\"SeriesGroupBy\"], Type[\"DataFrameGroupBy\"]]\n    elif isinstance(obj, DataFrame):\n        from pandas.core.groupby.generic import DataFrameGroupBy"
  },
  {
    "id" : "7059e049-f816-41c1-b2dc-58d63b4169fe",
    "prId" : 29425,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29425#pullrequestreview-312753160",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "459859e8-8b43-47da-8de3-1d73d1cb7b72",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, this makes us potentially run the function twice?",
        "createdAt" : "2019-11-06T21:07:24Z",
        "updatedAt" : "2019-11-06T21:07:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cdc9c9d8-c7ff-41b2-a475-35c7b718e61c",
        "parentId" : "459859e8-8b43-47da-8de3-1d73d1cb7b72",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "its the same pattern we use in libreduction to call the function on any empty Series",
        "createdAt" : "2019-11-06T21:21:05Z",
        "updatedAt" : "2019-11-06T21:21:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3801000c-4e4e-4b6d-b069-1b06836a726c",
        "parentId" : "459859e8-8b43-47da-8de3-1d73d1cb7b72",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k cool, yeah I think we have some tests for this, interesting they didn't break",
        "createdAt" : "2019-11-06T21:24:17Z",
        "updatedAt" : "2019-11-06T21:24:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe1eca27c7e0a888397e6c9ef7b891f2d59bb583",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +900,904 @@        for name, obj in self._iterate_slices():\n            try:\n                # if this function is invalid for this dtype, we will ignore it.\n                func(obj[:0])\n            except TypeError:"
  },
  {
    "id" : "611b3b00-cc32-44c3-a623-f5437afc7e66",
    "prId" : 29701,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29701#pullrequestreview-319068222",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02cec66f-fac6-4c99-ad28-94499e2b6105",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@datapythonista do we have a preferred usage for cases where this line needs the \"f\" and the preceeding does not?  I could imagine we might want to put the \"f\" on all of them anyway",
        "createdAt" : "2019-11-19T02:30:29Z",
        "updatedAt" : "2019-11-21T10:56:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "6ddfadb2-ef95-4b3c-8b7a-590fd7378bd5",
        "parentId" : "02cec66f-fac6-4c99-ad28-94499e2b6105",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think this is correct - should just keep it on lines where needed",
        "createdAt" : "2019-11-19T03:54:52Z",
        "updatedAt" : "2019-11-21T10:56:51Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "0be644f5-db44-4bb7-948d-f7e19c98d9f3",
        "parentId" : "02cec66f-fac6-4c99-ad28-94499e2b6105",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Agree with @WillAyd, my preference is to just have the `f` were it's needed. Even in strings splitted in different lines.",
        "createdAt" : "2019-11-19T11:56:56Z",
        "updatedAt" : "2019-11-21T10:56:51Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "dee396d5-8ca2-4637-a69d-c1cc24e7486f",
        "parentId" : "02cec66f-fac6-4c99-ad28-94499e2b6105",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "As described in [pep-498-concatenating-strings](https://www.python.org/dev/peps/pep-0498/#concatenating-strings), regular strings are concatenated at compile time, and f-strings are concatenated at run time.\r\n\r\nI think what we should not concatenate regular strings with f-strings because this could lead to unexpected results.",
        "createdAt" : "2019-11-19T14:18:39Z",
        "updatedAt" : "2019-11-21T10:56:51Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd51a3ab7a2454edd37516dab0c4144e70699ae2",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1750,1754 @@                \"For a DataFrame groupby, dropna must be \"\n                \"either None, 'any' or 'all', \"\n                f\"(was passed {dropna}).\"\n            )\n"
  },
  {
    "id" : "c386fae6-5d2c-4c42-990a-df7825c22767",
    "prId" : 29755,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29755#pullrequestreview-322650318",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc9dca1b-7d44-477f-ab69-57dcbf899ef5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is a monster. can you add some descriptions to it on each line (followon ok); *maybe* this should be in _typing?",
        "createdAt" : "2019-11-25T23:43:52Z",
        "updatedAt" : "2019-11-25T23:43:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea9011e5cba423c1400fb4286f37d8853110cb16",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +346,350 @@\n\n_KeysArgType = Union[\n    Hashable,\n    List[Hashable],"
  },
  {
    "id" : "e7130947-4f50-4cdc-b47c-4361c44d1fbf",
    "prId" : 30485,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30485#pullrequestreview-336539741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9df4e11-908d-4fa6-bdb1-a75b3e983843",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use list rather than ``np.array`` here",
        "createdAt" : "2019-12-26T13:24:08Z",
        "updatedAt" : "2019-12-27T00:50:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6b43c168-34be-4982-a2a7-8382b8d9c485",
        "parentId" : "c9df4e11-908d-4fa6-bdb1-a75b3e983843",
        "authorId" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "body" : "sure",
        "createdAt" : "2019-12-26T13:46:42Z",
        "updatedAt" : "2019-12-27T00:50:45Z",
        "lastEditedBy" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "tags" : [
        ]
      },
      {
        "id" : "bfdd5a87-59b0-467b-9ea4-adc11773e6b3",
        "parentId" : "c9df4e11-908d-4fa6-bdb1-a75b3e983843",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you do this",
        "createdAt" : "2019-12-26T14:50:21Z",
        "updatedAt" : "2019-12-27T00:50:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a6e298be881df944e78666b6bbadd16b1ef40ee",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1941,1945 @@\n            # temporarily saves the index names\n            index_names = np.array(result.index.names)\n\n            # set index names to positions to avoid confusion"
  },
  {
    "id" : "2aff24f7-eb36-487d-9099-8d6e8a2ecc9b",
    "prId" : 30485,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30485#pullrequestreview-336523583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43d91f56-c884-4ce6-8d70-12fab6d0b2ab",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is the .T necessary if you reverse the reshape?",
        "createdAt" : "2019-12-26T13:25:06Z",
        "updatedAt" : "2019-12-27T00:50:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4251547b-e3e5-49f1-a8e6-5087f304cf12",
        "parentId" : "43d91f56-c884-4ce6-8d70-12fab6d0b2ab",
        "authorId" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "body" : "Yes the .T is necessary here, without it no matter how I reshape it will get back to original order once flattened.",
        "createdAt" : "2019-12-26T13:40:24Z",
        "updatedAt" : "2019-12-27T00:50:45Z",
        "lastEditedBy" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a6e298be881df944e78666b6bbadd16b1ef40ee",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1953,1957 @@\n            # reorder rows to keep things sorted\n            indices = np.arange(len(result)).reshape([len(q), self.ngroups]).T.flatten()\n            return result.take(indices)\n"
  },
  {
    "id" : "e1625f37-92bb-42db-b747-16628cb2e30e",
    "prId" : 30584,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30584#pullrequestreview-391750436",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be99976e-2de1-4143-b506-349c3ba4ed82",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i think you added a line here?",
        "createdAt" : "2020-04-10T21:12:15Z",
        "updatedAt" : "2020-05-07T07:08:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "207eed44-41fa-4c6d-803e-c0e274798cdd",
        "parentId" : "be99976e-2de1-4143-b506-349c3ba4ed82",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "removed!",
        "createdAt" : "2020-04-11T09:13:44Z",
        "updatedAt" : "2020-05-07T07:08:32Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ea6aa019fdfe76f6ca3445d12aaf0cace9e0b35",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +498,502 @@        self.observed = observed\n        self.mutated = mutated\n        self.dropna = dropna\n\n        if grouper is None:"
  },
  {
    "id" : "52fea89f-685d-4052-a4d9-ffd76918f679",
    "prId" : 30679,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30679#pullrequestreview-338384338",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c0e5fed-5214-4862-abe8-10e533d65252",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we don't actually need to unique here, you can use index.get_index_non_unique which preserves ordering",
        "createdAt" : "2020-01-04T19:00:26Z",
        "updatedAt" : "2020-01-20T13:53:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "98aff389-93a3-4e7d-b542-3bae7a7b7a63",
        "parentId" : "7c0e5fed-5214-4862-abe8-10e533d65252",
        "authorId" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "body" : "I have changed `get_indexer_for` to `get_indexer_non_unique` which is slightly faster. However, they essentially do the same thing (`get_indexer_for` calls `get_indexer_non_unique`) so we still need to take the unique values, otherwise there would be repeated data.",
        "createdAt" : "2020-01-05T07:22:39Z",
        "updatedAt" : "2020-01-20T13:53:21Z",
        "lastEditedBy" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9e85078e44568253f56db72e56d310c088e9a93",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +975,979 @@            # so we resort to this\n            # GH 14776, 30667\n            if ax.has_duplicates:\n                indexer, _ = result.index.get_indexer_non_unique(ax.values)\n                indexer = algorithms.unique1d(indexer)"
  },
  {
    "id" : "9720953b-93bb-4cff-b14c-22a81e7544f7",
    "prId" : 30679,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30679#pullrequestreview-341219134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3aea752-9d34-47ef-9061-07fefe88f412",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i don't believe you actually need to do this which defeats the purpose of non-unique indexing",
        "createdAt" : "2020-01-06T13:37:37Z",
        "updatedAt" : "2020-01-20T13:53:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d2f8726d-4365-46ac-b488-9e7d5820c0ad",
        "parentId" : "c3aea752-9d34-47ef-9061-07fefe88f412",
        "authorId" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "body" : "I think maybe we are thinking of different things? \r\nHere because we have `mutated == False` (more on that later), we want to restore the original order by index.\r\nThe problem is, when index is duplicated, you can't do `reindex` but resort to `Index.get_indexer_non_unique`, which produces duplicated results, see below.\r\n```python\r\n>>> import pandas as pd\r\n>>> pd.__version__\r\n'0.26.0.dev0+1724.gc5b793a2d'\r\n\r\n>>> index = pd.Index([2, 1, 2])\r\n>>> ser = pd.Series([0, 1, 2], index=index)\r\n>>> ser\r\n2    0\r\n1    1\r\n2    2\r\ndtype: int64\r\n\r\n>>> indexer, _ = index.get_indexer_non_unique([1, 2, 2])\r\n>>> indexer\r\narray([1, 0, 2, 0, 2], dtype=int64)\r\n\r\n>>> ser.take(indexer)  # This doesn't give us the reordered result\r\n1    1\r\n2    0\r\n2    2\r\n2    0\r\n2    2\r\ndtype: int64\r\n\r\n>>> from pandas.core import algorithms\r\n>>> indexer = algorithms.unique1d(indexer)\r\n>>> ser.take(indexer)  # This does give us what we want\r\n1    1\r\n2    0\r\n2    2\r\ndtype: int64\r\n\r\n>>> ser.reindex([1, 2, 2])  # This results in ValueError\r\nTraceback (most recent call last):\r\n  ...\r\nValueError: cannot reindex from a duplicate axis\r\n```\r\n\r\nPerhaps are you thinking of the refactoring mentioned in #14927?\r\nIf we can actually deprecate the behavior of trying to guess if an object is mutated and just return a multi-indexed `DataFrame` like `groupby.transform` does, then it is true we don't need to deduplicate here. What I wrote here is more like a smaller scale fix/patch.\r\n\r\nAm I understanding this correctly? Let me know.",
        "createdAt" : "2020-01-10T15:03:44Z",
        "updatedAt" : "2020-01-20T13:53:21Z",
        "lastEditedBy" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9e85078e44568253f56db72e56d310c088e9a93",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +977,981 @@            if ax.has_duplicates:\n                indexer, _ = result.index.get_indexer_non_unique(ax.values)\n                indexer = algorithms.unique1d(indexer)\n                result = result.take(indexer, axis=self.axis)\n            else:"
  },
  {
    "id" : "9194a9e1-52a3-44a9-84da-8fcb9dea1633",
    "prId" : 31359,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31359#pullrequestreview-350191643",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b26ec653-78f5-4ca4-82ed-903273f0f94d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can u do this inside try_to_cast_ea?\r\n\r\ni am ok with this generally \r\n",
        "createdAt" : "2020-01-29T14:27:31Z",
        "updatedAt" : "2020-01-29T19:29:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3fd79d4d-4ce4-4497-a844-a6f51d824b9a",
        "parentId" : "b26ec653-78f5-4ca4-82ed-903273f0f94d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "In principle I agree. For now (1.0.0) I think I prefer keeping this change narrow.\r\n\r\nI'm definitely going to open a followup issue with some more discussion / potential fixes.",
        "createdAt" : "2020-01-29T15:23:44Z",
        "updatedAt" : "2020-01-29T19:29:57Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b826bb710f4fb6f480127042b3c4e26ebb00f7e",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +814,818 @@                #  so is excluded here.\n\n                if len(result) and isinstance(result[0], dtype.type):\n                    cls = dtype.construct_array_type()\n                    result = try_cast_to_ea(cls, result, dtype=dtype)"
  },
  {
    "id" : "52454630-df2e-4bda-980f-d91eb2cd502d",
    "prId" : 31359,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31359#pullrequestreview-382752546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a39dcf75-dc96-4d14-a97e-5d957f3a8687",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "@charlesdong1991 it looks like this change caused the regression in #32194",
        "createdAt" : "2020-03-27T10:49:45Z",
        "updatedAt" : "2020-03-27T10:49:46Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b826bb710f4fb6f480127042b3c4e26ebb00f7e",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +814,818 @@                #  so is excluded here.\n\n                if len(result) and isinstance(result[0], dtype.type):\n                    cls = dtype.construct_array_type()\n                    result = try_cast_to_ea(cls, result, dtype=dtype)"
  },
  {
    "id" : "530fac44-89a7-4eae-8074-af6a79acb237",
    "prId" : 32121,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32121#pullrequestreview-362089808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54db5821-fea3-46cf-a8f3-97826f40e143",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Any perf difference for numpy functions?",
        "createdAt" : "2020-02-20T03:59:54Z",
        "updatedAt" : "2020-02-20T03:59:58Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "97aa9198-1f67-4d8f-a76f-4d2daf83c709",
        "parentId" : "54db5821-fea3-46cf-a8f3-97826f40e143",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i think this just means we dont fail-fast",
        "createdAt" : "2020-02-20T17:23:13Z",
        "updatedAt" : "2020-02-20T17:23:14Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae3bc66c7efba9badfbf1298225331d7407a979b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +924,928 @@            try:\n                # if this function is invalid for this dtype, we will ignore it.\n                result, counts = self.grouper.agg_series(obj, f)\n            except TypeError:\n                continue"
  },
  {
    "id" : "01bbdc7e-dd48-457a-974c-6bd98324c8a1",
    "prId" : 33138,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33138#pullrequestreview-388707196",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd1f9993-1edd-44b9-88ee-c9932004ba64",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is fine for here, but I think we need a generic 'convert_this_to_something_we_can_use_in_cython)` method on EA. @jbrockmendel @jorisvandenbossche @TomAugspurger ",
        "createdAt" : "2020-04-06T23:59:50Z",
        "updatedAt" : "2020-04-07T13:24:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "499b11f0-91fa-4cb4-9ffc-1cb544b6f38e",
        "parentId" : "fd1f9993-1edd-44b9-88ee-c9932004ba64",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "As discussed [here](https://github.com/pandas-dev/pandas/issues/33276#issuecomment-608711488), i think the `EA.convert_this_to_something_we_can_use_in_cython` is going to look something like `_ordinal_values`, at least for methods like quantile that are ordering-based",
        "createdAt" : "2020-04-07T00:25:56Z",
        "updatedAt" : "2020-04-07T13:24:07Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ef2789585a3de2d699475c7cb4bdc893ffdac37",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1870,1874 @@\n            inference = None\n            if is_integer_dtype(vals.dtype):\n                if is_extension_array_dtype(vals.dtype):\n                    vals = vals.to_numpy(dtype=float, na_value=np.nan)"
  },
  {
    "id" : "cbe75523-e02d-42b5-a10e-625145445cfb",
    "prId" : 33230,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33230#pullrequestreview-389559348",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4fdadda-4412-48d4-b5ed-2e6adf132d54",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Does this still render as code when you build the docs?",
        "createdAt" : "2020-04-03T15:13:00Z",
        "updatedAt" : "2020-04-07T16:09:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "453ae15c-bdaf-4688-a12f-9d6c2d248b23",
        "parentId" : "f4fdadda-4412-48d4-b5ed-2e6adf132d54",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "Good catch! \r\n\r\n---\r\n\r\nFixed in 4f1b138f4e35fdbd0766e40d8c54bbe9a71f1e71",
        "createdAt" : "2020-04-03T16:15:51Z",
        "updatedAt" : "2020-04-07T16:09:16Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "aabfc17d-57ae-442d-ab29-7b490f75d1ba",
        "parentId" : "f4fdadda-4412-48d4-b5ed-2e6adf132d54",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is keeping this as it was not an option? I don’t think we add code-blocks to docstring normally since they are oriented more towards generated HTML / PDF output and aren’t super useful in say a shell ",
        "createdAt" : "2020-04-04T21:27:54Z",
        "updatedAt" : "2020-04-07T16:09:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "be053fdc-2682-4f41-bdb7-86b1da41ac1b",
        "parentId" : "f4fdadda-4412-48d4-b5ed-2e6adf132d54",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "The only solution that comes to my mind is to add ```# doctest: +SKIP``` to this.",
        "createdAt" : "2020-04-04T22:30:22Z",
        "updatedAt" : "2020-04-07T16:09:16Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "95d75ef8-8499-4f9f-8e8e-e1f883a06382",
        "parentId" : "f4fdadda-4412-48d4-b5ed-2e6adf132d54",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "@jreback do you know how we typically handle these? I don't think we use code-block in docstrings do we?",
        "createdAt" : "2020-04-07T23:07:08Z",
        "updatedAt" : "2020-04-07T23:07:08Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "c11263f5-2fb7-4fa2-b929-fc24cf6cde42",
        "parentId" : "f4fdadda-4412-48d4-b5ed-2e6adf132d54",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "@WillAyd We actually do: (although I'm not sure if this is wanted)\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/cabc31a536ee548c959e1710fa4d10ed6b2fae74/pandas/core/accessor.py#L223-L266",
        "createdAt" : "2020-04-07T23:24:51Z",
        "updatedAt" : "2020-04-07T23:29:26Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "6afd1221-6850-4558-810e-8e5a4571a65f",
        "parentId" : "f4fdadda-4412-48d4-b5ed-2e6adf132d54",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "May be using triple backticks? Otherwise, a skip seems reasonable. Or may be @jorisvandenbossche has a better idea.",
        "createdAt" : "2020-04-07T23:31:16Z",
        "updatedAt" : "2020-04-07T23:31:16Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "c10368628e717750c4ea56931fb4619a50d402d6",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +2014,2018 @@        .. code-block:: python\n\n            self.apply(lambda x: pd.Series(np.arange(len(x)), x.index))\n\n        Parameters"
  },
  {
    "id" : "88a8316e-e56c-466e-828a-bf6d0e462071",
    "prId" : 33630,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33630#pullrequestreview-416269674",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9863f34-a1f6-4939-a506-7eb6b49937c5",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think rather than doing this you should just be able to call `_python_agg_general`, which should generically handle applying a function",
        "createdAt" : "2020-04-18T18:06:00Z",
        "updatedAt" : "2020-05-16T13:41:03Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b8963c34-0dc1-4479-a920-7e99682159aa",
        "parentId" : "e9863f34-a1f6-4939-a506-7eb6b49937c5",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "That won't get the cython speedup in the case when ddof=1 (and perhaps others, if the rest of var is cythonized), is that right?",
        "createdAt" : "2020-04-18T19:30:48Z",
        "updatedAt" : "2020-05-16T13:41:03Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "2d5a65da-9e69-4f93-be46-1f47c54350ee",
        "parentId" : "e9863f34-a1f6-4939-a506-7eb6b49937c5",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm didn't realize we had a Cython implementation of var. I think can also use _cython_agg_general",
        "createdAt" : "2020-04-18T19:40:29Z",
        "updatedAt" : "2020-05-16T13:41:03Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "14ac490d-5d97-4641-bc7b-afe436f1c0df",
        "parentId" : "e9863f34-a1f6-4939-a506-7eb6b49937c5",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Can you elaborate? I'm guessing you're thinking of passing how=\"var\" to _cython_agg_general. But I don't see what that gets us, as it duplicates the code in var.",
        "createdAt" : "2020-04-18T21:45:47Z",
        "updatedAt" : "2020-05-16T13:41:03Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "818963cb-31d2-4b23-adfd-ea0ff1173c31",
        "parentId" : "e9863f34-a1f6-4939-a506-7eb6b49937c5",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This comment should really apply to line 1279 below; we already have generic machinery in place to perform that looping depending on if we are working with a Series / DataFrame, so the branching and looping here shouldn’t be necessary",
        "createdAt" : "2020-04-22T03:50:10Z",
        "updatedAt" : "2020-05-16T13:41:03Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "902ce039-eb2d-4ecc-87f9-31a13ec312ba",
        "parentId" : "e9863f34-a1f6-4939-a506-7eb6b49937c5",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Any chance you can comment back on this? I think this introduces code duplication as is",
        "createdAt" : "2020-05-19T02:54:59Z",
        "updatedAt" : "2020-05-19T02:54:59Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "6f2ac9fb-779b-4980-a5de-86d6a76aaed9",
        "parentId" : "e9863f34-a1f6-4939-a506-7eb6b49937c5",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "@WillAyd Apologies, and I'll follow up on this PR if there is indeed some code duplication, but I don't think there is. What we're doing here is applying a composition of two functions, g composed with h, where h is cythonized. As far as I can tell, there is no way to pass this composition in and keep it cythonized. Also, there is no place to apply a post-processing function to a cythonized aggregation. If this is wrong, then the duplication should definitely be removed.",
        "createdAt" : "2020-05-19T21:46:50Z",
        "updatedAt" : "2020-05-19T21:46:50Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "0e81f101-221a-4a40-9656-304d3fc40e5e",
        "parentId" : "e9863f34-a1f6-4939-a506-7eb6b49937c5",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea we also have a function called `_get_cythonized_result` which accepts a callable as an argument to `post_processing`",
        "createdAt" : "2020-05-20T03:19:26Z",
        "updatedAt" : "2020-05-20T03:19:26Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "96dd8509-ec0c-4cd6-9d31-64ea799a16c7",
        "parentId" : "e9863f34-a1f6-4939-a506-7eb6b49937c5",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Indeed I wasn't aware of this. Took a look into it, and what I'm finding is there are (at least) two different signatures for cython functions. The first is those used by _get_cythonized_result:\r\n\r\n    result, labels, [vals], [mask], [ngroups]\r\n\r\nand the second is that used in _aggregate (ignoring group_nth):\r\n\r\n    result, counts, values, comp_ids, min_count\r\n\r\nHere, comp_ids is the same as labels. Since var is used in _aggregate currently, the signature can't be changed to match what is expected in _get_cythonized_result. I hacked away at _get_cythonized_result and got it to work, but it seems to me that the two signature types should be sorted out first, otherwise the logic required for _get_cythonized_result is undesirable. This shouldn't be too much work because _get_cythonized_result is only used in a few places currently. If that sounds right, I'd like to raise an issue for this (I searched but couldn't find one).",
        "createdAt" : "2020-05-21T15:42:46Z",
        "updatedAt" : "2020-05-21T15:48:04Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "8ca43af4-9d64-454d-9058-9c902350a54b",
        "parentId" : "e9863f34-a1f6-4939-a506-7eb6b49937c5",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea I doubt there is an issue for it already as its really a matter of internal refactor. Things are a bit messy in the groupby code...so sure any clean up opportunities you see we would certainly welcome PRs for. Thanks for looking",
        "createdAt" : "2020-05-21T15:46:36Z",
        "updatedAt" : "2020-05-21T15:46:37Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4bf083f40013749ae82a603019078ad7f617879",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1369,1373 @@            Standard deviation of values within each group.\n        \"\"\"\n        result = self.var(ddof=ddof)\n        if result.ndim == 1:\n            result = np.sqrt(result)"
  },
  {
    "id" : "d0eb61c4-7bac-404a-8528-551886a47a68",
    "prId" : 33630,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33630#pullrequestreview-395937183",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "974ec1c9-6f94-4915-92b1-ab6edd65cc24",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Similar comment around _python_agg_general",
        "createdAt" : "2020-04-18T18:06:16Z",
        "updatedAt" : "2020-05-16T13:41:03Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4bf083f40013749ae82a603019078ad7f617879",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +1427,1431 @@            Standard error of the mean of values within each group.\n        \"\"\"\n        result = self.std(ddof=ddof)\n        if result.ndim == 1:\n            result /= np.sqrt(self.count())"
  },
  {
    "id" : "7b72183c-df39-4b04-92a5-223f28102529",
    "prId" : 33630,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33630#pullrequestreview-404542085",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71c92e7e-00fb-4282-9522-eababbd89b76",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there a reason you are using .values here?",
        "createdAt" : "2020-04-25T21:55:22Z",
        "updatedAt" : "2020-05-16T13:41:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bc778ad9-6c5f-4ba5-9526-d4a26432c40e",
        "parentId" : "71c92e7e-00fb-4282-9522-eababbd89b76",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Without values, iLocIndexer._setitem_with_indexer takes a broken path when the index labels are not unique. It goes from using positional indexes to labels because of the BlockManager, which causes errors when the labels are not unique. This causes tests in test_groupby to fail. By using values, we are able to get around it.",
        "createdAt" : "2020-04-26T12:26:15Z",
        "updatedAt" : "2020-05-16T13:41:03Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "34ac9b3c-9a2d-4921-a085-b222a90d26e4",
        "parentId" : "71c92e7e-00fb-4282-9522-eababbd89b76",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you reproduce this bug independently of this PR? please open a separate issue, this is a problem that needs fixing.",
        "createdAt" : "2020-05-02T16:38:45Z",
        "updatedAt" : "2020-05-16T13:41:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0077b53f-ecee-47a0-8582-0e5faccd47be",
        "parentId" : "71c92e7e-00fb-4282-9522-eababbd89b76",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : ".iloc should not be aligning at all",
        "createdAt" : "2020-05-02T16:39:10Z",
        "updatedAt" : "2020-05-16T13:41:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4bf083f40013749ae82a603019078ad7f617879",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1378,1382 @@            # TODO(GH-22046) - setting with iloc broken if labels are not unique\n            # .values to remove labels\n            result.iloc[:, cols] = np.sqrt(result.iloc[:, cols]).values\n\n        return result"
  },
  {
    "id" : "ad11c05e-033c-44cb-b589-871af7ace1d7",
    "prId" : 33630,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33630#pullrequestreview-400434766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ca8de14-04aa-411b-b4f0-f2b81030534a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same comment as above",
        "createdAt" : "2020-04-25T21:55:32Z",
        "updatedAt" : "2020-05-16T13:41:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4bf083f40013749ae82a603019078ad7f617879",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +1437,1441 @@            # .values to remove labels\n            result.iloc[:, cols] = (\n                result.iloc[:, cols].values / np.sqrt(self.count().iloc[:, cols]).values\n            )\n        return result"
  },
  {
    "id" : "c226483d-615b-4bee-87de-ab65d070f604",
    "prId" : 33630,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33630#pullrequestreview-400499677",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6e721da-13d8-4580-ac1a-8ab1e0ce4d5c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can use /= as well",
        "createdAt" : "2020-04-25T21:55:47Z",
        "updatedAt" : "2020-05-16T13:41:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a06f05e4-316e-4e6d-9510-82019c116739",
        "parentId" : "a6e721da-13d8-4580-ac1a-8ab1e0ce4d5c",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Unfortunately not. using /= follow the same path within iLocIndexer._setitem_with_indexer which is broken when there are duplicate labels. Only by using .values on the numerator and denominator are the labels stripped, and then it goes through okay.",
        "createdAt" : "2020-04-26T12:37:57Z",
        "updatedAt" : "2020-05-16T13:41:03Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4bf083f40013749ae82a603019078ad7f617879",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +1436,1440 @@            # TODO(GH-22046) - setting with iloc broken if labels are not unique\n            # .values to remove labels\n            result.iloc[:, cols] = (\n                result.iloc[:, cols].values / np.sqrt(self.count().iloc[:, cols]).values\n            )"
  },
  {
    "id" : "5467c243-d328-4d95-86fc-91d7b4bf879b",
    "prId" : 34069,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34069#pullrequestreview-408538571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9692422-7499-4fcc-a0b4-16cb25fb8096",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "How much of this docstring can we share with the base implementation?",
        "createdAt" : "2020-05-08T20:28:06Z",
        "updatedAt" : "2020-06-10T03:31:58Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "9ed2791f-9119-4f24-b301-114f29233a79",
        "parentId" : "c9692422-7499-4fcc-a0b4-16cb25fb8096",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Some of the arguments have almost identical descriptions (I made some nitty changes) while others are more specific to this implementation (e.g., weights since the normalization behavior is going to be different)",
        "createdAt" : "2020-05-08T20:57:44Z",
        "updatedAt" : "2020-06-10T03:31:58Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "958acfb4-7d68-4497-a3dc-5dfe2babe988",
        "parentId" : "c9692422-7499-4fcc-a0b4-16cb25fb8096",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Okay. We can create a follow up issue to potentially share the docstrings somehow",
        "createdAt" : "2020-05-08T21:28:30Z",
        "updatedAt" : "2020-06-10T03:31:58Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "27cb1ba8915fde81b37aff4cbffb6b0c8546c84e",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +2706,2710 @@    ):\n        \"\"\"\n        Return a random sample of items from each group.\n\n        You can use `random_state` for reproducibility."
  },
  {
    "id" : "698e6b85-9ed7-4970-a511-eafcb8ae9c37",
    "prId" : 34069,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34069#pullrequestreview-408506202",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a269324d-dbb4-40b7-b93b-4b8a4eacf797",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "One example in the docstring would be nice",
        "createdAt" : "2020-05-08T20:28:18Z",
        "updatedAt" : "2020-06-10T03:31:58Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "27cb1ba8915fde81b37aff4cbffb6b0c8546c84e",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +2744,2748 @@        DataFrame.sample: Generate random samples from a DataFrame object.\n        numpy.random.choice: Generate a random sample from a given 1-D numpy\n            array.\n\n        Examples"
  },
  {
    "id" : "52db0b6d-f6b0-456a-a19c-1f920462996a",
    "prId" : 34069,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34069#pullrequestreview-408764140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d97eac6-55ab-4f5f-bdae-232fd95380f3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the reverse See Also to DataFrame.sample",
        "createdAt" : "2020-05-10T17:17:47Z",
        "updatedAt" : "2020-06-10T03:31:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "27cb1ba8915fde81b37aff4cbffb6b0c8546c84e",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +2742,2746 @@        See Also\n        --------\n        DataFrame.sample: Generate random samples from a DataFrame object.\n        numpy.random.choice: Generate a random sample from a given 1-D numpy\n            array."
  },
  {
    "id" : "32385a45-d734-4bd3-b990-103a99d4a220",
    "prId" : 34069,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34069#pullrequestreview-409557425",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a77c2bd-c9bb-4470-9bcb-67fa1b248fed",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think it might be better to change DataFrame.sampe to call a routine algos.sample (IOW move the routine there, ex- the validation things, which are done in DataFrame.sample (and here)). you may need a helper routine as well for this. \r\n\r\nThe reason for this is to avoid constantly doing all of the validation things *per-group*",
        "createdAt" : "2020-05-10T17:20:24Z",
        "updatedAt" : "2020-06-10T03:31:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "12d689da-1087-4b69-88c2-d0999740b736",
        "parentId" : "6a77c2bd-c9bb-4470-9bcb-67fa1b248fed",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "That is a good point, I hadn't thought about repeating all the validation steps. Originally I was doing the input checks once and then just sampling the index by group, is this also a viable option? https://github.com/pandas-dev/pandas/pull/34069/commits/b91b767c39dabaf6114cac2b5df4ed887f0c6d60\r\n\r\nEdit: Sampling the underlying object index is wrong so that part would have to be changed.",
        "createdAt" : "2020-05-11T21:51:24Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "27cb1ba8915fde81b37aff4cbffb6b0c8546c84e",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +2802,2806 @@        samples = [\n            obj.sample(\n                n=n, frac=frac, replace=replace, weights=w, random_state=random_state\n            )\n            for (_, obj), w in zip(self, ws)"
  },
  {
    "id" : "dee4e122-35db-4efc-bd34-26babb682ba9",
    "prId" : 34069,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34069#pullrequestreview-409566312",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ebabe65-517e-4f51-928c-cd4ae85d1d1a",
        "parentId" : null,
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "It should be a Generator, not a BitGenerator. BitGenerator is the lower-level interface that only exposes the raw pseudo random numbers.  Also, are int or array-like seed values used with a RandomState or with a new BitGenerator?  Ideally one would limit the use of RandomState to end-user- provided RS and would use `np.random.default_rng([int, array_like])` if available. ",
        "createdAt" : "2020-05-11T15:11:56Z",
        "updatedAt" : "2020-06-10T03:31:58Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      },
      {
        "id" : "4bf8e11e-e67e-4a4b-ac79-54ed63dcb8fd",
        "parentId" : "0ebabe65-517e-4f51-928c-cd4ae85d1d1a",
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "Also, might be clearer to call the just `state` since `random_state` gives the impression that it is linked to a `RandomState`.",
        "createdAt" : "2020-05-11T15:13:03Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      },
      {
        "id" : "8890f1da-5206-4ca9-80b6-03b74d69f429",
        "parentId" : "0ebabe65-517e-4f51-928c-cd4ae85d1d1a",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "> It should be a Generator, not a BitGenerator.\r\n\r\nYou could be right, I was honestly lifting this docstring for the most part from the one for NDFrame.sample. If this is not correct we'd need to update it there as well as the random_state function in /core/common.py.\r\n\r\n> Also, might be clearer to call the just state since random_state gives the impression that it is linked to a RandomState.\r\n\r\nI feel we'd want to share the same naming convention used by NDFrame.sample and sklearn.",
        "createdAt" : "2020-05-11T16:53:49Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "3c8de120-8040-402d-81f5-c2da6d31410f",
        "parentId" : "0ebabe65-517e-4f51-928c-cd4ae85d1d1a",
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "Ahh, I misread it.  It does take a BitGenerator, which is sort of like a seed.  So it is correct. I understand the point of wanting compact.  I is unfortunate that `random_state` has become so ubiquitous since it makes moving to better practices or better rngs more difficult.",
        "createdAt" : "2020-05-11T22:08:56Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      }
    ],
    "commit" : "27cb1ba8915fde81b37aff4cbffb6b0c8546c84e",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +2729,2733 @@            Values must be non-negative with at least one positive element\n            within each group.\n        random_state : int, array-like, BitGenerator, np.random.RandomState, optional\n            If int, array-like, or BitGenerator (NumPy>=1.17), seed for\n            random number generator"
  },
  {
    "id" : "a8c49d3f-106f-4739-b8de-18e9e0c11552",
    "prId" : 34069,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34069#pullrequestreview-417896261",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e337a1f9-ee7c-49b5-b9cf-7217e9d44123",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "blank line before cases, comments if necessary",
        "createdAt" : "2020-05-14T12:47:36Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "01e1a491-3933-46be-b22b-b3b31c46e73a",
        "parentId" : "e337a1f9-ee7c-49b5-b9cf-7217e9d44123",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you do this",
        "createdAt" : "2020-05-25T21:49:37Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e3108a40-aa7c-4d5a-b2f0-0e40d3403b06",
        "parentId" : "e337a1f9-ee7c-49b5-b9cf-7217e9d44123",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Added spaces and a few comments",
        "createdAt" : "2020-05-25T23:05:21Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "27cb1ba8915fde81b37aff4cbffb6b0c8546c84e",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +2763,2767 @@        `random_state` argument can be used to guarantee reproducibility:\n\n        >>> df.groupby(\"a\").sample(n=1, random_state=1)\n               a  b\n        4  black  4"
  },
  {
    "id" : "5af854e5-f4ff-47a8-b146-70be8a73e580",
    "prId" : 34069,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34069#pullrequestreview-423118623",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebf67426-4c99-498d-aa8b-658570dda575",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i think you need to set the random_state if (if its not set) and pass it thru\r\n\r\nyou can set it how we do it in Series/DataFrame, for a consistent experience",
        "createdAt" : "2020-05-25T21:52:47Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7c0818cc-0ab0-4e60-9b69-1c3fab60d3d5",
        "parentId" : "ebf67426-4c99-498d-aa8b-658570dda575",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "It's being passed through to DataFrame/Series.sample in L2770, do you mean I should first call common.random_state here and then pass it?",
        "createdAt" : "2020-05-25T23:04:10Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "a7f6dae2-4936-422d-a263-7ed2551428e6",
        "parentId" : "ebf67426-4c99-498d-aa8b-658570dda575",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes i think that is right\nwe need the same random state for the entire selection",
        "createdAt" : "2020-06-01T01:51:39Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c83dfa89-d28a-48ca-a0fb-ce685b380839",
        "parentId" : "ebf67426-4c99-498d-aa8b-658570dda575",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "I think this is working as written, added some tests for random_state that are passing",
        "createdAt" : "2020-06-01T18:30:37Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "3aeda7b3-b527-4760-b276-6345bd7465f0",
        "parentId" : "ebf67426-4c99-498d-aa8b-658570dda575",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i don't think so. please set the random state here, this doesn't make much sense otherwise using a *new* random state for each group.",
        "createdAt" : "2020-06-02T13:22:54Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "834782e3-dc58-44ca-9063-e6ee9d9939f7",
        "parentId" : "ebf67426-4c99-498d-aa8b-658570dda575",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "You're right, updated",
        "createdAt" : "2020-06-02T23:16:00Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "27cb1ba8915fde81b37aff4cbffb6b0c8546c84e",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +2796,2800 @@        else:\n            ws = [None] * self.ngroups\n\n        if random_state is not None:\n            random_state = com.random_state(random_state)"
  },
  {
    "id" : "66f4024a-160c-4f67-a648-9d5466db9de4",
    "prId" : 34069,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34069#pullrequestreview-425583023",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7331f3e6-0bb5-47e0-8cbc-87a5643bb76b",
        "parentId" : null,
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "Do groups have to have the same number of elements?  I don't seem to be able to understand how this would work in general.\r\n",
        "createdAt" : "2020-06-05T15:15:21Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      },
      {
        "id" : "0352e4cd-d7cc-4e29-a4ba-c5bec0603d09",
        "parentId" : "7331f3e6-0bb5-47e0-8cbc-87a5643bb76b",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "It won't work in general, we'll get an error if n is larger than one of the group sizes and replace is False",
        "createdAt" : "2020-06-05T16:16:29Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "95d87208-fe19-44e2-9b2f-b2e4ca286e29",
        "parentId" : "7331f3e6-0bb5-47e0-8cbc-87a5643bb76b",
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "If I understand your example, weights has the same size as the index of the underlying DF or Series where the groupby has been applied? So in principle it could be a column from the same DF, like\r\n```\r\ndf.groupby(\"a\").sample(1, weights=df.weights)\r\n```",
        "createdAt" : "2020-06-05T16:33:30Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      },
      {
        "id" : "9e1a85b4-241a-4020-a25a-6b5e9a75fac3",
        "parentId" : "7331f3e6-0bb5-47e0-8cbc-87a5643bb76b",
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "Maybe you should state that it must have at least 1 non-zero entry per group.",
        "createdAt" : "2020-06-05T16:34:18Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      },
      {
        "id" : "583d17db-9eaa-4eab-a22f-8fe2dfd2550b",
        "parentId" : "7331f3e6-0bb5-47e0-8cbc-87a5643bb76b",
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "Passing a list appears to only work if the underlying DF or Series has a standard RangeIndex(0, nobs).  ",
        "createdAt" : "2020-06-05T16:37:48Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      },
      {
        "id" : "54010dd8-b22b-4150-b03b-d3145c618c0d",
        "parentId" : "7331f3e6-0bb5-47e0-8cbc-87a5643bb76b",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Thanks for pointing this out. Should be fixed and I updated the weights test to look at this type of case.",
        "createdAt" : "2020-06-05T19:48:13Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "27cb1ba8915fde81b37aff4cbffb6b0c8546c84e",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +2723,2727 @@            Allow or disallow sampling of the same row more than once.\n        weights : list-like, optional\n            Default None results in equal probability weighting.\n            If passed a list-like then values must have the same length as\n            the underlying DataFrame or Series object and will be used as"
  },
  {
    "id" : "f6c24583-c11a-4d24-b112-4eef37566cf7",
    "prId" : 34069,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34069#pullrequestreview-425441443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e58bd57-3650-4e83-84b9-778bf73a7bf3",
        "parentId" : null,
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "It it is a BitGenerator, do you use a Generator to produce the random samples or a RandomState.  Best practice is to use a Generator since RandomState is effectively frozen in time. If an int, it is used as a seed for `np.random.default_rng()` or `RandomState` if NumPy >= 1.17?",
        "createdAt" : "2020-06-05T15:18:20Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      },
      {
        "id" : "86a48eb3-91ab-457c-ba53-cca85eb6563b",
        "parentId" : "2e58bd57-3650-4e83-84b9-778bf73a7bf3",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "This is following a pattern similar to the one used in pandas.core.generic.sample of processing the random_state according to pandas.core.common.random_state:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/c71bfc36211b5e2d860a06d8fbef902b757bd6e4/pandas/core/common.py#L394",
        "createdAt" : "2020-06-05T16:16:48Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "27cb1ba8915fde81b37aff4cbffb6b0c8546c84e",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +2730,2734 @@            within each group.\n        random_state : int, array-like, BitGenerator, np.random.RandomState, optional\n            If int, array-like, or BitGenerator (NumPy>=1.17), seed for\n            random number generator\n            If np.random.RandomState, use as numpy RandomState object."
  },
  {
    "id" : "bd94ed60-d2a8-4213-8a33-07c316e22157",
    "prId" : 34069,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34069#pullrequestreview-425395068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ca6c17e-9ac7-476c-a303-283c0051fc1f",
        "parentId" : null,
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "More forward reference might be numpy.random.Generator.choice",
        "createdAt" : "2020-06-05T15:19:08Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      }
    ],
    "commit" : "27cb1ba8915fde81b37aff4cbffb6b0c8546c84e",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +2743,2747 @@        --------\n        DataFrame.sample: Generate random samples from a DataFrame object.\n        numpy.random.choice: Generate a random sample from a given 1-D numpy\n            array.\n"
  },
  {
    "id" : "d55ca62f-b9af-477b-8c50-f90da004c8cd",
    "prId" : 34069,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34069#pullrequestreview-425395379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6080871b-983f-4f77-9edb-6ea2e23dd760",
        "parentId" : null,
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "Maybe an example with weights?",
        "createdAt" : "2020-06-05T15:19:31Z",
        "updatedAt" : "2020-06-10T03:31:59Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      }
    ],
    "commit" : "27cb1ba8915fde81b37aff4cbffb6b0c8546c84e",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +2775,2779 @@        2    2\n        0    0\n        Name: b, dtype: int64\n\n        Control sample probabilities within groups by setting weights:"
  },
  {
    "id" : "3cb6051d-3a97-4b91-bec3-dde767108401",
    "prId" : 34372,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34372#pullrequestreview-425675244",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a1685f7-43a2-4d44-90e5-0ee45fcc6624",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What did this need to change for?",
        "createdAt" : "2020-06-05T22:38:24Z",
        "updatedAt" : "2020-06-18T20:11:11Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "0da2dc53-2692-4a94-9ae2-4286e513ea0d",
        "parentId" : "5a1685f7-43a2-4d44-90e5-0ee45fcc6624",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "I added numeric_only for other aggregation functions (e.g. var), and defaulted it to True, the same as _cython_agg_general. Setting this to False gives the previous behavior.",
        "createdAt" : "2020-06-05T23:14:27Z",
        "updatedAt" : "2020-06-18T20:11:11Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      }
    ],
    "commit" : "33bf96a4b11b364cbe987ef4fd10a6e7b215ab69",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +2548,2552 @@        return self._get_cythonized_result(\n            \"group_shift_indexer\",\n            numeric_only=False,\n            cython_dtype=np.dtype(np.int64),\n            needs_ngroups=True,"
  },
  {
    "id" : "7b654326-6d53-4f41-add7-1a4cb396cda3",
    "prId" : 34372,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34372#pullrequestreview-430225815",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5e4681b-b313-4b26-9bff-0b31e4bd2a5e",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Are these not 2d to begin with?",
        "createdAt" : "2020-06-05T22:40:03Z",
        "updatedAt" : "2020-06-18T20:11:11Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "2b72558d-424b-44d9-8880-59596546ae23",
        "parentId" : "e5e4681b-b313-4b26-9bff-0b31e4bd2a5e",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Prior to this line, vals is a 1d array, e.g. [1, 2, 3]. After, it is 2d, e.g. [[1], [2], [3]].",
        "createdAt" : "2020-06-05T23:16:51Z",
        "updatedAt" : "2020-06-18T20:11:11Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "a90e227c-604f-4c42-a5f7-4cd0d5d1e1a9",
        "parentId" : "e5e4681b-b313-4b26-9bff-0b31e4bd2a5e",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm is that a problem with this function though or in the caller? This is only for `std` right? I think the keyword itself isn't obvious at first glance",
        "createdAt" : "2020-06-07T16:30:10Z",
        "updatedAt" : "2020-06-18T20:11:11Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "54af30fa-8b3e-49ef-9c4c-203ba5ab3f3e",
        "parentId" : "e5e4681b-b313-4b26-9bff-0b31e4bd2a5e",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "I don't follow what you're asking in the first question. Currently this is only used for `std`. Happy to workshop the name - what about \"needs_2d_values\"?",
        "createdAt" : "2020-06-07T21:39:41Z",
        "updatedAt" : "2020-06-18T20:11:11Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "de20fa49-8fd9-4865-b2ec-1f7eb627876e",
        "parentId" : "e5e4681b-b313-4b26-9bff-0b31e4bd2a5e",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What other functions do you see using this is maybe a good question to ask then. I don't think the concept of `needs_2d` is immediately apparent to other developers so want to see if there's something more generic we can use ",
        "createdAt" : "2020-06-07T21:44:06Z",
        "updatedAt" : "2020-06-18T20:11:11Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "2eacf16c-fb90-452c-9c0a-73f18630e41a",
        "parentId" : "e5e4681b-b313-4b26-9bff-0b31e4bd2a5e",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Other than mad (which also uses var), I don't know of any other function that would benefit from switching to this. I don't see a way to be more generic.",
        "createdAt" : "2020-06-08T21:51:42Z",
        "updatedAt" : "2020-06-18T20:11:11Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "d836da1a-a248-41b6-bfd2-f071d0fb79b9",
        "parentId" : "e5e4681b-b313-4b26-9bff-0b31e4bd2a5e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you use atleast_2d",
        "createdAt" : "2020-06-14T14:49:29Z",
        "updatedAt" : "2020-06-18T20:11:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "33bf96a4b11b364cbe987ef4fd10a6e7b215ab69",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +2477,2481 @@                    vals, inferences = pre_processing(vals)\n                if needs_2d:\n                    vals = vals.reshape((-1, 1))\n                vals = vals.astype(cython_dtype, copy=False)\n                func = partial(func, vals)"
  },
  {
    "id" : "86918874-48e0-4ca1-ae4e-82497f2b367b",
    "prId" : 34372,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34372#pullrequestreview-433314435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1f1360c-c367-4ffb-b411-25d0e9c986fa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you use at_least2d or just reshape here?",
        "createdAt" : "2020-06-14T14:48:58Z",
        "updatedAt" : "2020-06-18T20:11:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "aaaa8030-6eb7-42b8-93d2-f01957e0fd81",
        "parentId" : "e1f1360c-c367-4ffb-b411-25d0e9c986fa",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you do this here",
        "createdAt" : "2020-06-17T22:26:00Z",
        "updatedAt" : "2020-06-18T20:11:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "368bfe07-8446-46a3-8834-b557fcc459b0",
        "parentId" : "e1f1360c-c367-4ffb-b411-25d0e9c986fa",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "I think you're asking to replace\r\n\r\n    if needs_2d:\r\n        result = np.zeros((result_sz, 1), dtype=cython_dtype)\r\n    else:\r\n        result = np.zeros(result_sz, dtype=cython_dtype)\r\n\r\nwith\r\n\r\n    result = np.zeros(result_sz, dtype=cython_dtype)\r\n    if needs_2d:\r\n        result = result.reshape((-1, 1))\r\n\r\nI think the reshape version is less performant when `needs_2d` is `True`, no?",
        "createdAt" : "2020-06-18T00:55:40Z",
        "updatedAt" : "2020-06-18T20:11:12Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "d0ecfa7c-b81a-4866-94d6-99f680cc3015",
        "parentId" : "e1f1360c-c367-4ffb-b411-25d0e9c986fa",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "I don't believe at_least2d is applicable, it will turn a 1d into a single row (1xn) whereas we need a column (nx1).",
        "createdAt" : "2020-06-18T00:58:15Z",
        "updatedAt" : "2020-06-18T20:11:12Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "788a91be-5688-41c1-84ad-3509916283b6",
        "parentId" : "e1f1360c-c367-4ffb-b411-25d0e9c986fa",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "```\r\nresult = np.zeros(result_sz, dtype=cython_dtype)\r\nif needs_2d:\r\n    result = result.reshape((-1, 1))\r\n```\r\n\r\nyes this would be an improvement",
        "createdAt" : "2020-06-18T14:01:42Z",
        "updatedAt" : "2020-06-18T20:11:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "33bf96a4b11b364cbe987ef4fd10a6e7b215ab69",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +2462,2466 @@\n            result = np.zeros(result_sz, dtype=cython_dtype)\n            if needs_2d:\n                result = result.reshape((-1, 1))\n            func = partial(base_func, result)"
  },
  {
    "id" : "5b95b211-1234-410e-b621-0021bf2a2488",
    "prId" : 34756,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34756#pullrequestreview-437103999",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f223747b-5ee8-4d26-9f59-bf4d1ec9bb11",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is this even needed? ",
        "createdAt" : "2020-06-24T22:27:42Z",
        "updatedAt" : "2020-07-16T16:06:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "81baa3bf-8205-4fa1-83e1-301247917ed8",
        "parentId" : "f223747b-5ee8-4d26-9f59-bf4d1ec9bb11",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "For `resample.test_base.test_resample_empty_dataframe`. This test explicitly expects the result to be an empty dataframe when the input it empty as well.",
        "createdAt" : "2020-06-25T01:06:23Z",
        "updatedAt" : "2020-07-16T16:06:46Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      }
    ],
    "commit" : "86030b8d3333db62db3ba59d29dbacf82398506f",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +2517,2521 @@            output[key] = result\n\n        # error_msg is \"\" on an frame/series with no rows or columns\n        if len(output) == 0 and error_msg != \"\":\n            raise TypeError(error_msg)"
  }
]