[
  {
    "id" : "173e37d9-c899-44b3-bf9e-331fb853d2c0",
    "prId" : 20405,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20405#pullrequestreview-191753545",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65f27a92-18b0-4d50-beca-2c997aec2645",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe you want to show the signature as a comment of the Callable[object, dict]",
        "createdAt" : "2019-01-11T16:46:43Z",
        "updatedAt" : "2019-02-28T07:01:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fc15b010-f9ce-4ab4-9d96-8cb7e63f1a94",
        "parentId" : "65f27a92-18b0-4d50-beca-2c997aec2645",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Are you asking to do that in this docstring or as a type hint in the implementations themselves?",
        "createdAt" : "2019-01-11T16:55:21Z",
        "updatedAt" : "2019-02-28T07:01:18Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "1d8f0fef-c90d-400d-a018-4fec12068515",
        "parentId" : "65f27a92-18b0-4d50-beca-2c997aec2645",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "both",
        "createdAt" : "2019-01-11T16:58:04Z",
        "updatedAt" : "2019-02-28T07:01:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec013bf03c03a4c5124150bba7549f64d4f9ca90",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +2004,2008 @@            by the Cython operation. Raises if `needs_values` is False.\n        post_processing : function, default None\n            Function to be applied to result of Cython function. Should accept\n            an array of values as the first argument and type inferences as its\n            second argument, i.e. the signature should be"
  },
  {
    "id" : "322328fa-148b-4817-b021-5fbd13e7cefe",
    "prId" : 20405,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20405#pullrequestreview-191759334",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43f2e938-14ee-4b55-bf2b-27fb47b69907",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "FYI this will fail if we try to pass in `post_processing` with `pre_processing` as `inferences` will be undefined in that case. Since it's all internal I suppose not a big deal for now, but could also add an explicit check at the start of the function if it doesn't add too much bloat.",
        "createdAt" : "2019-01-11T17:12:33Z",
        "updatedAt" : "2019-02-28T07:01:18Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec013bf03c03a4c5124150bba7549f64d4f9ca90",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +2064,2068 @@\n            if post_processing:\n                result = post_processing(result, inferences)\n\n            output[name] = result"
  },
  {
    "id" : "ec67eb91-40e0-47b6-804b-b85d0866cf13",
    "prId" : 20405,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20405#pullrequestreview-191985812",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69df0bd4-3d87-43a0-ad1c-53c9f5427a6b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "just define ``inference = None`` at the top then you wont ever have a NameError",
        "createdAt" : "2019-01-13T18:52:31Z",
        "updatedAt" : "2019-02-28T07:01:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec013bf03c03a4c5124150bba7549f64d4f9ca90",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +2045,2049 @@            inferences = None\n\n            if needs_values:\n                vals = obj.values\n                if pre_processing:"
  },
  {
    "id" : "981a3320-fdfc-4120-878c-5889342a671e",
    "prId" : 20405,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20405#pullrequestreview-194797355",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7a1abb4-e5bc-4eba-9610-08c7ec0a41e1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not really what I meant, this is a (ndarray, dict)",
        "createdAt" : "2019-01-13T18:52:50Z",
        "updatedAt" : "2019-02-28T07:01:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5a768b38-c0cc-46d9-8b13-4c7fed9bbe50",
        "parentId" : "e7a1abb4-e5bc-4eba-9610-08c7ec0a41e1",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Well on a second pass the dict was unnecessary so I ended up just returning the type. I suppose it could either be an actual type object or a string so this is an approximation of that for simplicity, though could update to include a string as well",
        "createdAt" : "2019-01-22T00:25:29Z",
        "updatedAt" : "2019-02-28T07:01:18Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec013bf03c03a4c5124150bba7549f64d4f9ca90",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +2007,2011 @@            an array of values as the first argument and type inferences as its\n            second argument, i.e. the signature should be\n            (ndarray, typing.Type).\n        **kwargs : dict\n            Extra arguments to be passed back to Cython funcs"
  },
  {
    "id" : "fec41287-63b3-4d74-b3e8-5a3a1d4b9cdc",
    "prId" : 20583,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20583#pullrequestreview-116549858",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6be4bb3-dcc0-49ae-8485-f6be1045ba9f",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Why not have it as `False` default? (if we want to deprecate in the future, we can then just use `None` ?)",
        "createdAt" : "2018-05-01T12:13:11Z",
        "updatedAt" : "2018-05-01T12:26:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdf7525812ca670f9406ab8df333030d36d30947",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +2908,2912 @@\n    def __init__(self, index, grouper=None, obj=None, name=None, level=None,\n                 sort=True, observed=None, in_axis=False):\n\n        self.name = name"
  },
  {
    "id" : "b31397e8-1bc0-40c9-b33c-c548e54c32c3",
    "prId" : 20583,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20583#pullrequestreview-116549858",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0348e5f3-8ba4-445f-b9c4-001563cdd3b1",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "should this comment be removed for now?",
        "createdAt" : "2018-05-01T12:14:58Z",
        "updatedAt" : "2018-05-01T12:26:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdf7525812ca670f9406ab8df333030d36d30947",
    "line" : 222,
    "diffHunk" : "@@ -1,1 +4745,4749 @@        # TODO(jreback): remove completely\n        # when observed parameter is defaulted to True\n        # gh-20583\n\n        if self.observed:"
  },
  {
    "id" : "afc68891-62df-479e-ab0c-e633a65fe186",
    "prId" : 20613,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20613#pullrequestreview-116476509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fb6d5d9-f1b2-47ac-a8ad-5ca83f4bbe88",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same here, there are like 10 calls to concat. I think should be explicit about sort",
        "createdAt" : "2018-05-01T00:12:00Z",
        "updatedAt" : "2018-05-01T00:20:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e1b0241358c10893939d135e91ab16cfa48cadd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1099,1103 @@\n                result = concat(values, axis=self.axis, keys=group_keys,\n                                levels=group_levels, names=group_names,\n                                sort=False)\n            else:"
  },
  {
    "id" : "5343bcd4-98ec-490d-997e-1c88d530308b",
    "prId" : 21573,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21573#pullrequestreview-131227129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5b6711b-4e94-4503-98e8-cb901e979a0b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@reidy-p pushed a simplification. but maybe need some additional tests that do this when a column is selected\r\n\r\ne.g. ``df.groupby('id', as_index=False)['foo'].first()``",
        "createdAt" : "2018-06-22T10:32:16Z",
        "updatedAt" : "2018-06-22T17:15:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "aecf316d-554b-4c05-9c0d-c1b3bb033a53",
        "parentId" : "e5b6711b-4e94-4503-98e8-cb901e979a0b",
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "Nice simplification. I added some new tests.",
        "createdAt" : "2018-06-22T14:54:50Z",
        "updatedAt" : "2018-06-22T17:15:57Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef5d5b180a6c9eb2abbfc40b731ba84368266bcf",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4741,4745 @@    def _wrap_agged_blocks(self, items, blocks):\n        if not self.as_index:\n            index = np.arange(blocks[0].values.shape[-1])\n            mgr = BlockManager(blocks, [items, index])\n            result = DataFrame(mgr)"
  },
  {
    "id" : "2b24ba4f-c391-44c5-8026-7c751db4c133",
    "prId" : 22811,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22811#pullrequestreview-157935485",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df38b2be-c9b7-4147-a233-096837486bf9",
        "parentId" : null,
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "``Index.difference`` tries to sort its result by default and this means that sometimes the order of the columns was changed from the original DataFrame. I added a new ``sort`` parameter to ``Index.difference`` with a default of True to control this.",
        "createdAt" : "2018-09-23T10:55:45Z",
        "updatedAt" : "2018-11-18T22:59:13Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "13a23f7558ccde3710e8786320c28e4d271a7ca9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +496,500 @@            # GH12839 clear selected obj cache when group selection changes\n            self._group_selection = ax.difference(Index(groupers),\n                                                  sort=False).tolist()\n            self._reset_cache('_selected_obj')\n"
  },
  {
    "id" : "2544a794-2de4-4744-aca1-25dab966488e",
    "prId" : 23886,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23886#pullrequestreview-178065922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3516811-5bdd-4011-a6b9-b06141d2fd8e",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Do you mind adding a period here too?",
        "createdAt" : "2018-11-25T00:32:47Z",
        "updatedAt" : "2018-11-27T05:31:53Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b34280bd9e7fec3dd77b4d43041452cb914c5869",
    "line" : 187,
    "diffHunk" : "@@ -1,1 +1144,1148 @@        Compute median of groups, excluding missing values.\n\n        For multiple groupings, the result index will be a MultiIndex\n        \"\"\"\n        try:"
  },
  {
    "id" : "efbb2768-018b-495c-92d0-69ad94dfc22b",
    "prId" : 24128,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24128#pullrequestreview-187802952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfd0d24b-8ac6-4547-9f59-0db0429c2b84",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "blank line here",
        "createdAt" : "2018-12-25T17:31:24Z",
        "updatedAt" : "2018-12-26T00:16:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a03cbf5e4afe65c8b6fe8a1eb1eee517d0fc5913",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +2007,2011 @@        fill_value : optional\n\n            .. versionadded:: 0.24.0\n        \"\"\"\n"
  },
  {
    "id" : "bbd8bc04-6766-435d-8893-3323ebf56694",
    "prId" : 24828,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24828#pullrequestreview-194406492",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c13b1c87-ba72-48d6-957b-1248f6cc7844",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "be aware that I have changed an error message in the codebase ",
        "createdAt" : "2019-01-18T17:38:35Z",
        "updatedAt" : "2019-01-18T20:42:30Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "83fe85e2-e0a6-4f8c-a69d-8861e71a6fcf",
        "parentId" : "c13b1c87-ba72-48d6-957b-1248f6cc7844",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "And this is why we should be checking error messages if possible, to catch things like this 🙂 ",
        "createdAt" : "2019-01-20T19:53:27Z",
        "updatedAt" : "2019-01-20T19:53:32Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2fab1d4c589452c3b134b07ba1ae16c67f011bf",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +439,443 @@                except KeyError:\n                    # turns out it wasn't a tuple\n                    msg = (\"must supply a same-length tuple to get_group\"\n                           \" with multiple grouping keys\")\n                    raise ValueError(msg)"
  },
  {
    "id" : "ad009127-604d-4fac-be84-ab36f10b1579",
    "prId" : 25157,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25157#pullrequestreview-201368046",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e00ea2d-3f55-4f3c-ad79-123586ed487a",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm OK - I suppose this is correct to do but was this showing up as a PR04 error?",
        "createdAt" : "2019-02-07T00:16:42Z",
        "updatedAt" : "2019-02-11T01:05:49Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "372f0280-6b46-4395-adb3-c02267c9dd90",
        "parentId" : "6e00ea2d-3f55-4f3c-ad79-123586ed487a",
        "authorId" : "45a5e19e-14e0-41a9-8d85-ce5f3d1cd3fe",
        "body" : "No, but just for convention",
        "createdAt" : "2019-02-07T23:07:15Z",
        "updatedAt" : "2019-02-11T01:05:49Z",
        "lastEditedBy" : "45a5e19e-14e0-41a9-8d85-ce5f3d1cd3fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "bffd111ff6213170e0cbff4bff65b0a6f55461a5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1836,1840 @@\n        Returns\n        -------\n        DataFrame with ranking of values within each group\n        \"\"\""
  },
  {
    "id" : "e89844dc-6c9b-46cd-bc7d-b2de4bd8f185",
    "prId" : 25308,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25308#pullrequestreview-205507463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be7c066a-eef0-4b47-b1d7-170cc7896a0d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "when does this hit the type error? can you add a comment about what types of returns yield this (assume it is when the transform function is doing a non-time transform). is this hit in the tests?",
        "createdAt" : "2019-02-19T13:34:04Z",
        "updatedAt" : "2019-02-28T16:15:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "73bb2480-4c68-4430-9379-97e7866b574a",
        "parentId" : "be7c066a-eef0-4b47-b1d7-170cc7896a0d",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Added a comment when this was hit (`_try_cast` is called downstream where the result is already correctly localized). Tested here:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/b2c751985ebd09b72d917d08dc06193dc0922018/pandas/tests/groupby/test_transform.py#L840",
        "createdAt" : "2019-02-19T23:27:14Z",
        "updatedAt" : "2019-02-28T16:15:53Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cfe961fb3678644f4dd06bfed0406e40abd2331",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +778,782 @@                    )\n                    result = result.astype(dtype)\n                except TypeError:\n                    # _try_cast was called at a point where the result\n                    # was already tz-aware"
  },
  {
    "id" : "3b4ef8c1-1c2c-4884-ac30-b9d018182343",
    "prId" : 25308,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25308#pullrequestreview-207173826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "187c3aa2-f017-41ae-8119-f56f30f25549",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "passing a dtype to DTA._from_sequence is equivalent to localizing right? I think this is true for DTI \r\n\r\ncc @jbrockmendel @TomAugspurger ",
        "createdAt" : "2019-02-24T20:04:00Z",
        "updatedAt" : "2019-02-28T16:15:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1ec92df5-66d2-4490-840d-a2f6f8372ae0",
        "parentId" : "187c3aa2-f017-41ae-8119-f56f30f25549",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "It _should_, but I don't think DTA._from_sequence coerces `'UTC'` to a dtype downstream:\r\n\r\n```\r\n-> result = obj._values._from_sequence(result, dtype='UTC')\r\n(Pdb) n\r\nTypeError: data type 'UTC' not understood\r\n```",
        "createdAt" : "2019-02-24T21:29:31Z",
        "updatedAt" : "2019-02-28T16:15:53Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "d8c0476f-ff07-4be5-9c77-afebe4d2d6c8",
        "parentId" : "187c3aa2-f017-41ae-8119-f56f30f25549",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm this is a bug can u create an issue",
        "createdAt" : "2019-02-24T21:47:40Z",
        "updatedAt" : "2019-02-28T16:15:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cfe961fb3678644f4dd06bfed0406e40abd2331",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +778,782 @@                    )\n                    result = result.astype(dtype)\n                except TypeError:\n                    # _try_cast was called at a point where the result\n                    # was already tz-aware"
  },
  {
    "id" : "9cff59f2-5db5-42cd-80ba-ac6cecda62a0",
    "prId" : 26059,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26059#pullrequestreview-225957505",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b95590f6-5b16-487e-b8b3-d8e51fd8adfe",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "If done there are also `%name` occurences in the `_common_see_also` that need to be substituted, so they cannot be done in one go.",
        "createdAt" : "2019-04-12T08:33:57Z",
        "updatedAt" : "2019-04-12T09:47:26Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "35138d444bac2ded0622610ce5b833eaa9b41e58",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1099,1103 @@\n    @Substitution(name='groupby')\n    @Substitution(see_also=_common_see_also)\n    def mean(self, *args, **kwargs):\n        \"\"\""
  },
  {
    "id" : "42cb5b8d-0a8a-4e22-aa53-408565fa481d",
    "prId" : 26152,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26152#pullrequestreview-229260726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a24762c-e63a-48dc-972b-13ac8070dc21",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Note I had to change this because `nth_values` was inferred as `List[int]` upon initial assignment. This prevents reassignment from potentially obfuscating the type checker and code intent",
        "createdAt" : "2019-04-22T21:33:49Z",
        "updatedAt" : "2019-04-29T01:34:02Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2a0b8e999744554011ffa3ea9608d486b7f1557",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +1635,1639 @@            mask_left = np.in1d(self._cumcount_array(), nth_array)\n            mask_right = np.in1d(self._cumcount_array(ascending=False) + 1,\n                                 -nth_array)\n            mask = mask_left | mask_right\n"
  },
  {
    "id" : "af514330-31a6-4c83-978f-7f51835af89f",
    "prId" : 26419,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26419#pullrequestreview-238136137",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6021a363-10a8-4a84-9b76-92090423cab6",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Also note that this reindexing only works when the user does not provided a `dropna` argument to `nth`, but that seemed to cause an orthogonal issue I can open later",
        "createdAt" : "2019-05-16T00:55:00Z",
        "updatedAt" : "2019-08-19T17:22:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "308e5690c4d949c9125d9759c09482abc519360f",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1778,1782 @@\n            if not self.observed and isinstance(result_index, CategoricalIndex):\n                out = out.reindex(result_index)\n\n            return out.sort_index() if self.sort else out"
  },
  {
    "id" : "79303b3e-efea-4f02-bca6-51395206c65c",
    "prId" : 27071,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27071#pullrequestreview-254975633",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7943ec34-63e3-4d3e-98c6-b6d992556544",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is there a particular reason why we don't reuse the `groupby_function` factory (save perhaps current scoping) for these? Wondering why we would do `Series(x).mean(**kwargs)` here instead of `np.mean` as we do with the existing funcs",
        "createdAt" : "2019-06-27T02:34:09Z",
        "updatedAt" : "2019-06-27T23:13:13Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b116c634-852c-42f8-9c60-7d5880f50230",
        "parentId" : "7943ec34-63e3-4d3e-98c6-b6d992556544",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "``np.mean`` does not properly handle argument, for example ``min_count``",
        "createdAt" : "2019-06-27T02:44:23Z",
        "updatedAt" : "2019-06-27T23:13:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6fdcd5ec-1617-4ba4-8674-0e825971efc5",
        "parentId" : "7943ec34-63e3-4d3e-98c6-b6d992556544",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Gotcha. So we probably have an issue with `sum` as generated by that function then?\r\n\r\nDon't need to necessarily solve here just trying to get an understanding of how we can align all of these defs",
        "createdAt" : "2019-06-27T02:45:45Z",
        "updatedAt" : "2019-06-27T23:13:13Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "2a332441-ee6a-4618-9c97-5b322e0f87b0",
        "parentId" : "7943ec34-63e3-4d3e-98c6-b6d992556544",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "likely we should re-write ``grouping_function``, but its behavior is actually kind of tricky as it handles cases where the alt_function raises and must fallback; for another time.",
        "createdAt" : "2019-06-27T02:48:05Z",
        "updatedAt" : "2019-06-27T23:13:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a6a0c08dc5a65427f29fbf4c989b2b895b004aa",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1160,1164 @@        nv.validate_groupby_func('mean', args, kwargs, ['numeric_only'])\n        try:\n            return self._cython_agg_general(\n                'mean', alt=lambda x, axis: Series(x).mean(**kwargs), **kwargs)\n        except GroupByError:"
  },
  {
    "id" : "85fe954e-cdc2-46fa-aa02-b8097e4289ef",
    "prId" : 27992,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27992#pullrequestreview-285439779",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc482e20-d548-45df-9fab-a7f90104c9c8",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm I'm not sure relying on underlying block values is the best way to go about this. Is it possible to just work with the obj here instead?",
        "createdAt" : "2019-08-23T13:51:52Z",
        "updatedAt" : "2019-09-09T11:13:03Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "337d0eeb-738e-4265-8c2c-ffab99caa836",
        "parentId" : "dc482e20-d548-45df-9fab-a7f90104c9c8",
        "authorId" : "89f39c5c-b206-4f31-bb12-9512a7c2e14e",
        "body" : "Sorry for my lack of understanding about underlying block values.\r\nShould I leave the code using `obj.values` except for the last `result = algorithms.take_nd(obj.values, result)`?",
        "createdAt" : "2019-09-09T11:24:10Z",
        "updatedAt" : "2019-09-09T11:24:10Z",
        "lastEditedBy" : "89f39c5c-b206-4f31-bb12-9512a7c2e14e",
        "tags" : [
        ]
      }
    ],
    "commit" : "6eb0d287f5698c93ab759de928b254fb3cb86fe7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2264,2268 @@\n        for name, obj in self._iterate_slices():\n            values = obj._data._values\n\n            if aggregate:"
  },
  {
    "id" : "9da67969-e3a5-494b-8c4a-c652bcb1cce6",
    "prId" : 28771,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28771#pullrequestreview-298476822",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0289a251-0aeb-48db-86a5-57518b08fcfe",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Any reason we don't just use `functools.wraps`? Maybe a general question in our code base but unclear to me why we choose to assign to the dunders directly instead of using functools",
        "createdAt" : "2019-10-07T21:05:04Z",
        "updatedAt" : "2019-10-08T14:28:44Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b4abbfb1-c0ca-4a4e-9299-82984dc8ded2",
        "parentId" : "0289a251-0aeb-48db-86a5-57518b08fcfe",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "no idea",
        "createdAt" : "2019-10-08T00:12:50Z",
        "updatedAt" : "2019-10-08T14:28:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "46d7a2fa41684356978466d2a626269bb00feaf4",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +662,666 @@                raise ValueError\n\n        wrapper.__name__ = name\n        return wrapper\n"
  },
  {
    "id" : "0fbd9dbb-83a1-464b-b859-596a60b151d9",
    "prId" : 28835,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28835#pullrequestreview-298719585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aba676dd-696a-4955-937c-2e1d36fc6727",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This func was also not a direct copy paste because it existed in both classes. What was in NDFrameGroupBy was moved to GroupBy (can ref last commit)",
        "createdAt" : "2019-10-08T12:20:41Z",
        "updatedAt" : "2019-10-08T12:20:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "29ace87d34f8215c1c13ce2fa88a15edf1f8264f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +870,874 @@        return self._wrap_transformed_output(output, names)\n\n    def _wrap_aggregated_output(self, output, names=None):\n        raise AbstractMethodError(self)\n"
  },
  {
    "id" : "1a957c72-6088-4111-858b-4c0138e7c0ec",
    "prId" : 28883,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28883#pullrequestreview-299777776",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfff7b8e-6ce2-4ab6-b76d-fb60a36643fb",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "That would seem logical; follow ups to figure out what is actually needed here are certainly welcome",
        "createdAt" : "2019-10-10T01:24:53Z",
        "updatedAt" : "2019-10-10T01:24:53Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "52e7b0ebc32428953e41ee7a5b63841033d89389",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +724,728 @@\n            elif hasattr(nanops, \"nan\" + func):\n                # TODO: should we wrap this in to e.g. _is_builtin_func?\n                f = getattr(nanops, \"nan\" + func)\n"
  }
]