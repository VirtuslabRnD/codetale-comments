[
  {
    "id" : "15e3940d-4e20-421f-a98e-74bc5d116859",
    "prId" : 25953,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25953#pullrequestreview-231480475",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9bcb978c-4253-4a3a-a13c-6f3d5e3576ae",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some comments here on what is being checked",
        "createdAt" : "2019-04-28T18:28:12Z",
        "updatedAt" : "2019-04-28T20:04:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "92858c1c497dc2b5dff8a889da7093674e7a6a8a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +524,528 @@\n    # is this an index replacement?\n    if (not any_callable and not any_arraylike and not any_groupers and\n            match_axis_length and level is None):\n        if isinstance(obj, DataFrame):"
  },
  {
    "id" : "83cdf5d7-433b-43de-b5d3-33637d95b81f",
    "prId" : 29456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29456#pullrequestreview-314631448",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3215153c-bb35-41ac-8d70-0fa5f7b23d7d",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "why is this needed?",
        "createdAt" : "2019-11-10T17:51:56Z",
        "updatedAt" : "2019-11-12T19:59:49Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "9ad486b3-7300-4322-8b43-0fa57b48f430",
        "parentId" : "3215153c-bb35-41ac-8d70-0fa5f7b23d7d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is for my own benefit in trying to reason about this code.",
        "createdAt" : "2019-11-10T17:57:20Z",
        "updatedAt" : "2019-11-12T19:59:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d3d4850150a0b39db41db3d10027c0cd0482d9f",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +155,159 @@            whether the resulting grouper should be sorted\n        \"\"\"\n        assert obj is not None\n\n        if self.key is not None and self.level is not None:"
  },
  {
    "id" : "d680e58a-f69e-4cfb-981e-5067b05e5877",
    "prId" : 29458,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29458#pullrequestreview-313598149",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cfd9300-1501-447c-ba9f-f8d9f738bc6f",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "So is there no impact changing this from a set to a list? If not, does it even need to be a container?",
        "createdAt" : "2019-11-07T16:01:40Z",
        "updatedAt" : "2019-11-07T22:09:41Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "fe99e59e-fc08-46f8-8f2d-ff1e7354539e",
        "parentId" : "2cfd9300-1501-447c-ba9f-f8d9f738bc6f",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "This just makes the types consistent for all returns. A set or a list is not important when there's only 1 item in the container.",
        "createdAt" : "2019-11-07T16:06:38Z",
        "updatedAt" : "2019-11-07T22:09:41Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "0f56213c-79d7-461a-851a-aed9d9aa01e6",
        "parentId" : "2cfd9300-1501-447c-ba9f-f8d9f738bc6f",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "BTW It sometimes has lists with several items, so needs to be a list/container.",
        "createdAt" : "2019-11-07T16:07:40Z",
        "updatedAt" : "2019-11-07T22:09:41Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "c60ff5f5-e40c-4e2f-9ea7-ac6868226435",
        "parentId" : "2cfd9300-1501-447c-ba9f-f8d9f738bc6f",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm not sure I follow. Maybe better to ask what the error was that mypy was giving? I assume this gets mutated outside of the function right?",
        "createdAt" : "2019-11-07T16:14:53Z",
        "updatedAt" : "2019-11-07T22:09:41Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "40ea4d3a-84bf-4e79-b5f6-aed045e4f498",
        "parentId" : "2cfd9300-1501-447c-ba9f-f8d9f738bc6f",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Oh, it wasn't a mypy error, I think the function should have a clear return type, so ``List`` rather than ``Contaioner``.\r\n\r\n(More general): I think function may have broad parameter types, but should strive to have clear return types, so there's less ambiguity over what you're looking at. Don't you agree?",
        "createdAt" : "2019-11-07T17:34:38Z",
        "updatedAt" : "2019-11-07T22:09:41Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "1a7b78b7-cb9b-4730-9ac8-252e15218abd",
        "parentId" : "2cfd9300-1501-447c-ba9f-f8d9f738bc6f",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "OK. Yea I'm not necessarily saying the old container type was correct and this is wrong, I guess was just questioning why this even needs to be held in a container if it's simply one value being returned.\r\n\r\nCan be refactored or reviewed in a follow up if that's a big effort; not a blocker as is",
        "createdAt" : "2019-11-07T17:39:10Z",
        "updatedAt" : "2019-11-07T22:09:41Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "5dc7b589-ca1d-4472-ab68-626fecf570e9",
        "parentId" : "2cfd9300-1501-447c-ba9f-f8d9f738bc6f",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Yeah, I'm haven't checked if a single value could be returned, instead of the list.\r\n\r\nMy motivation for doing this is mostly wanting to pin down what I'm looking at in ``groupBy``, ``Grouper`` etc. I think \"real\" clean-ups must come later. It's quite complex to me now, and I'm hoping these typeups will ease understanding.",
        "createdAt" : "2019-11-07T17:55:24Z",
        "updatedAt" : "2019-11-07T22:09:41Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "57690ca1-03e3-414d-a08a-9b01a7d144a5",
        "parentId" : "2cfd9300-1501-447c-ba9f-f8d9f738bc6f",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Sounds good. Yea this part of code is tricky and could use some refactor, so this is all moving in the right direction",
        "createdAt" : "2019-11-07T19:56:32Z",
        "updatedAt" : "2019-11-07T22:09:41Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "015a22370a7b090cbe134ee088a7d0b1b42ba4c3",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +517,521 @@            return grouper, [], obj\n        else:\n            return grouper, [key.key], obj\n\n    # already have a BaseGrouper, just return it"
  },
  {
    "id" : "688f0757-1ff8-4098-adfa-ee51b9178bad",
    "prId" : 29458,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29458#pullrequestreview-313517707",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d846d624-b867-444c-a460-08d2b4c54cb1",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "there are some places in these modules where `name` attrs are annotated as `str` or `Optional[str]` where Hashable would be more accurate I think",
        "createdAt" : "2019-11-07T17:41:32Z",
        "updatedAt" : "2019-11-07T22:09:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "015a22370a7b090cbe134ee088a7d0b1b42ba4c3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4,8 @@\"\"\"\n\nfrom typing import Hashable, List, Optional, Tuple\nimport warnings\n"
  },
  {
    "id" : "3fdd5bd4-c206-4c14-8e57-848e0636f13d",
    "prId" : 29675,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29675#pullrequestreview-318124264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abc09e7b-ef5b-4631-9682-43b4fed0b245",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "any reason to add quotes? don't we lose the black formatting checking by doing this?",
        "createdAt" : "2019-11-17T21:47:56Z",
        "updatedAt" : "2019-11-17T21:47:56Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "a0eeb58f-888f-4a5f-afec-36863bec4ad1",
        "parentId" : "abc09e7b-ef5b-4631-9682-43b4fed0b245",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Without the quotes we get a circular import error, so needs to be quoted.",
        "createdAt" : "2019-11-18T06:48:39Z",
        "updatedAt" : "2019-11-18T06:48:39Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "30bdcab6453f7ea13c8dc6a05c23ccdccc7a7d7b",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +443,447 @@    mutated: bool = False,\n    validate: bool = True,\n) -> \"Tuple[ops.BaseGrouper, List[Hashable], FrameOrSeries]\":\n    \"\"\"\n    Create and return a BaseGrouper, which is an internal"
  },
  {
    "id" : "1f0cf310-8919-4103-8cc5-51f84b4053cd",
    "prId" : 29701,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29701#pullrequestreview-320865570",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd101592-4e30-4c0b-ba9a-05c250f99dfa",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can you do this in two steps so as to not have the getattr inside the fstring",
        "createdAt" : "2019-11-19T02:31:21Z",
        "updatedAt" : "2019-11-21T10:56:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "1384b043-79d4-4899-a1af-d21dfe9a23e0",
        "parentId" : "bd101592-4e30-4c0b-ba9a-05c250f99dfa",
        "authorId" : "639e1068-364a-496d-9556-58ff12c8b29f",
        "body" : "@jbrockmendel Not really sure how to do this in two steps since attr_name is generated from a list comprehension. Do I just drop list comprehension usage in that case?",
        "createdAt" : "2019-11-19T08:19:37Z",
        "updatedAt" : "2019-11-21T10:56:51Z",
        "lastEditedBy" : "639e1068-364a-496d-9556-58ff12c8b29f",
        "tags" : [
        ]
      },
      {
        "id" : "54af0596-ba0e-49d7-8177-10ce1c64fffa",
        "parentId" : "bd101592-4e30-4c0b-ba9a-05c250f99dfa",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "```\r\nattr_tups = ((name, getatttr(self, name)) for name in self._attributes)\r\nattr_tups = (x for x in attr_tups if x[1] is not None)\r\nattrs_list = (f\"{attr_name}={attr_val!r}\" of attr_name, attr_val in attr_tups)\r\n```",
        "createdAt" : "2019-11-19T15:32:58Z",
        "updatedAt" : "2019-11-21T10:56:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8d298989-6677-4379-9745-35eabd056bd4",
        "parentId" : "bd101592-4e30-4c0b-ba9a-05c250f99dfa",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this usage seems ok to me",
        "createdAt" : "2019-11-21T13:03:33Z",
        "updatedAt" : "2019-11-21T13:03:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd51a3ab7a2454edd37516dab0c4144e70699ae2",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +209,213 @@    def __repr__(self) -> str:\n        attrs_list = (\n            f\"{attr_name}={getattr(self, attr_name)!r}\"\n            for attr_name in self._attributes\n            if getattr(self, attr_name) is not None"
  }
]