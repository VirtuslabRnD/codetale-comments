[
  {
    "id" : "d5cb4a85-177b-481a-b8f7-5b1fc4f15e5b",
    "prId" : 6812,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdbe9940-cfcc-4ffb-8e7c-e025bb20b3ca",
        "parentId" : null,
        "authorId" : "bc9616de-0e6b-4530-8cce-7613914e06e5",
        "body" : "Looks like _-inf_ is being written for positive infinite values and vice versa.\n",
        "createdAt" : "2014-08-05T22:10:16Z",
        "updatedAt" : "2014-08-05T22:10:16Z",
        "lastEditedBy" : "bc9616de-0e6b-4530-8cce-7613914e06e5",
        "tags" : [
        ]
      },
      {
        "id" : "cde090d8-3cd3-4e14-9087-26b3aedfa606",
        "parentId" : "cdbe9940-cfcc-4ffb-8e7c-e025bb20b3ca",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "that seems wrong\n",
        "createdAt" : "2014-08-05T22:20:25Z",
        "updatedAt" : "2014-08-05T22:20:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d3a60fc71bdd562617069ca687d1580b122c45e",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1395,1399 @@            val = self.na_rep\n        elif com.is_float(val):\n            if np.isposinf(val):\n                val = '-%s' % self.inf_rep\n            elif np.isneginf(val):"
  },
  {
    "id" : "0a58193d-0985-42fc-9016-fdf639931199",
    "prId" : 8219,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e555b52d-3e03-401d-940d-5c0ddd9e9058",
        "parentId" : null,
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "this is \"a bit\" hacky...\n",
        "createdAt" : "2014-09-09T05:11:40Z",
        "updatedAt" : "2014-09-09T05:11:40Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      }
    ],
    "commit" : "b576b350e81ba150fd65cc29fd3d42f14efb04aa",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +523,527 @@                width = len(lev2[0])\n                lev3 = [' ' * width] * clevels + lev2\n                strcols.insert(i, lev3)\n\n        if column_format is None:"
  },
  {
    "id" : "43e10904-88c3-4749-9e45-bd6c184a19b7",
    "prId" : 8282,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cda80cb1-ac43-4374-9b9e-fcd7a6c4e943",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jorisvandenbossche this seems kind of hacky, but not sure what else to do here...thoughts?\n",
        "createdAt" : "2014-09-16T15:25:22Z",
        "updatedAt" : "2014-09-16T21:32:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bf6fca26-c868-4bfb-95de-ba9950567295",
        "parentId" : "cda80cb1-ac43-4374-9b9e-fcd7a6c4e943",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I have to say I do not really understand this. What was the issue this solved? \nBecause I don't see how this solves the incorrect repetitions of 'red' in the first level.\n",
        "createdAt" : "2014-09-17T19:53:03Z",
        "updatedAt" : "2014-09-17T19:53:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ca308eab-103b-4e90-a3bf-ff59d7a6d504",
        "parentId" : "cda80cb1-ac43-4374-9b9e-fcd7a6c4e943",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "it DID solve it. Beacuse the subsequent routines basically stringify numbers (e.g. column headings by putting a space before it). But not entirely sure why/how that is.\n",
        "createdAt" : "2014-09-17T19:56:58Z",
        "updatedAt" : "2014-09-17T19:56:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a1bb42a8-28e7-4123-a658-41b89665d30a",
        "parentId" : "cda80cb1-ac43-4374-9b9e-fcd7a6c4e943",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "but what has it to do with the level being float or not? The issue also occured with eg integer indices?\n",
        "createdAt" : "2014-09-17T19:58:19Z",
        "updatedAt" : "2014-09-17T19:58:19Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c1a255f8-10dd-441a-9280-309aac360f38",
        "parentId" : "cda80cb1-ac43-4374-9b9e-fcd7a6c4e943",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "Integers were ok (I don't really understand why a space was added in the first place),\n",
        "createdAt" : "2014-09-17T20:00:43Z",
        "updatedAt" : "2014-09-17T20:00:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c97290ae-c972-48b6-84eb-2f1cd51deb43",
        "parentId" : "cda80cb1-ac43-4374-9b9e-fcd7a6c4e943",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "ah, it did solve something else as the wrong repetition of the first level? like https://github.com/pydata/pandas/issues/8017#issuecomment-55868651\n",
        "createdAt" : "2014-09-17T20:02:26Z",
        "updatedAt" : "2014-09-17T20:02:26Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "763bb0183cec030f49da1df9a85f1749245240f4",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +628,632 @@\n            # if we have a Float level, they don't use leading space at all\n            restrict_formatting = any([ l.is_floating for l in columns.levels ])\n            need_leadsp = dict(zip(fmt_columns, map(is_numeric_dtype, dtypes)))\n"
  },
  {
    "id" : "2b1be3ff-b3c0-4945-8023-a0cd7b7088be",
    "prId" : 9182,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45444c9b-72ac-4fd2-bb27-57b5ce3cbc9d",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "is there a good reason for changing the number of dots? If so, please add a test that covers this case.\n",
        "createdAt" : "2015-03-13T08:26:06Z",
        "updatedAt" : "2015-03-16T08:05:57Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "257d2505-fef6-4562-a6ff-fc45aeb42cd1",
        "parentId" : "45444c9b-72ac-4fd2-bb27-57b5ce3cbc9d",
        "authorId" : "48aa17b3-3af5-4b25-aa27-1e245ffb6d43",
        "body" : "We use this on dfs also. If you have many columns with only one or two length strings then it wastes space to add a '...' everywhere. Going down to only one dot I thought could be misleading so that's where the two dots come from. \n",
        "createdAt" : "2015-03-15T22:17:46Z",
        "updatedAt" : "2015-03-16T08:05:57Z",
        "lastEditedBy" : "48aa17b3-3af5-4b25-aa27-1e245ffb6d43",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d715fab4048c44d8d2182ea8d7e8235f6dda194",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +239,243 @@                dot_str = '...'\n            else:\n                dot_str = '..'\n            dot_str = dot_str.center(width)\n            fmt_values.insert(row_num + n_header_rows, dot_str)"
  }
]