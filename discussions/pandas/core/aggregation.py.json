[
  {
    "id" : "044a5e46-c496-4dbd-bf6f-7f261dc8d014",
    "prId" : 29116,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29116#pullrequestreview-348346939",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3db4773-cc7b-4555-acbb-66bdafbc4cb0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah pls format the doc-string, giving examples if possible.",
        "createdAt" : "2020-01-25T15:47:36Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "056d623e-3b95-4d33-ab15-c55dd2bd64b7",
        "parentId" : "f3db4773-cc7b-4555-acbb-66bdafbc4cb0",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "added docstring and examples",
        "createdAt" : "2020-01-25T21:42:30Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "05921afef8d10eabd0917ba0fbeeefc18ae7d511",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +42,46 @@]:\n    \"\"\"\n    This is the internal function to reconstruct func given if there is relabeling\n    or not and also normalize the keyword to get new order of columns.\n"
  },
  {
    "id" : "4c9f1bb7-1265-4beb-bdbe-019fb26ed567",
    "prId" : 29116,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29116#pullrequestreview-357261148",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af2cf43c-5c4b-443e-858e-0ae9830c50a4",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "IIUC you can just remove this line - no need for the assignment to None",
        "createdAt" : "2020-02-12T01:20:25Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "38e01d16-5fe2-4722-800d-34545445ff7b",
        "parentId" : "af2cf43c-5c4b-443e-858e-0ae9830c50a4",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "emm, no, this still needs to be assigned to `None`, because, if not relabeling, we would like to return `None` for `columns` and `order`",
        "createdAt" : "2020-02-12T08:27:35Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "05921afef8d10eabd0917ba0fbeeefc18ae7d511",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +78,82 @@    \"\"\"\n    relabeling = func is None and is_multi_agg_with_relabel(**kwargs)\n    columns: Optional[List[str]] = None\n    order: Optional[List[int]] = None\n"
  },
  {
    "id" : "f6053fdd-a84f-46c7-afa3-bdb33ebdce23",
    "prId" : 29116,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29116#pullrequestreview-357132409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47169cd6-ba8d-4ccc-97d6-8a4d2312a52b",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Same comment",
        "createdAt" : "2020-02-12T01:20:31Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "05921afef8d10eabd0917ba0fbeeefc18ae7d511",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +79,83 @@    relabeling = func is None and is_multi_agg_with_relabel(**kwargs)\n    columns: Optional[List[str]] = None\n    order: Optional[List[int]] = None\n\n    if not relabeling:"
  },
  {
    "id" : "3e72195f-0a8c-4e7f-a581-3ed7fa85eee4",
    "prId" : 29116,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29116#pullrequestreview-384203450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "847144c9-3638-436d-bec4-6949dd384e80",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you are mutating the input argument, which IIUC is a ``DataFrame(index=columns)``; why don't you just create it in this function and return it?\r\n\r\nThis is a very hard to follow api the way you are doing it.",
        "createdAt" : "2020-03-16T02:59:09Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cb43c402-e5c9-4378-8146-39d318eeed08",
        "parentId" : "847144c9-3638-436d-bec4-6949dd384e80",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "sorry for late reply @jreback \r\n\r\nyeah, agree, this doesn't look optimal, and input is indeed `DataFrame(index=columns)`, the reason not to create it in this function is `DataFrame` is defined in `frame.py`, if we want to use it, then need to import from `frame.py`, and this function is also gonna be used in `frame.py`, which will result in the conflict imports.\r\n\r\nAny suggestions on how to work around it? ",
        "createdAt" : "2020-03-30T18:38:39Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      },
      {
        "id" : "30c3fbe1-087e-4d16-b920-0d1e1fecdb4a",
        "parentId" : "847144c9-3638-436d-bec4-6949dd384e80",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "i remove the input arugment of `reordered_result` and return a dictionary in this method, and form into Dataframe in `frame.py` instead, is it a bit clearer? ",
        "createdAt" : "2020-03-30T20:26:29Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "05921afef8d10eabd0917ba0fbeeefc18ae7d511",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +321,325 @@\n    reorder_mask = not isinstance(result, Series) and len(result.columns) > 1\n    for col, fun in func.items():\n        s = result[col].dropna()\n"
  },
  {
    "id" : "7eac044a-4986-48f8-8af5-540d0c6fa548",
    "prId" : 29116,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29116#pullrequestreview-432125317",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73f3091b-69f1-47ec-b435-c4757f548608",
        "parentId" : null,
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "Hi, @WillAyd @jreback \r\n\r\nI think this part has brought in quite conversations for a while, and i looked back at it again and feel there is still something could improve, so i re-designed the implementation a bit, and added quite detailed comment to explain.\r\n\r\nThe issue of `result` is, after the `self._aggregate` and `mangle_lamdbas`, if result is a `DataFrame`, the index of results will be obtained from callable name (e.g. `sum` -> `'sum'`, or `np.max` -> `'amax'`), or kept as is for string case (e.g. `'sum'` -> `'sum'`), or a parsed lambda func (e.g. `lambda x: min(x)` -> `'<lambda>'`), and index will be sorted.\r\n\r\nso, if the call to function is `df.agg(aa=(C2, sum), ab=(C1, max), ac=(C1, np.max), ad=(C2, lambda x: min(x)), ae=(C1, sum))`, the order of functions is `C1: [max, np.max, sum]` and `C2: [sum, lambda]`, but it will look like something below in `results`:\r\n```\r\n             C2   C1\r\n<lambda>      1  NaN\r\namax        NaN  4.0\r\nmax         NaN  4.0\r\nsum        18.0  6.0\r\n```\r\nSo for C2, it now has `[lambda, sum]` in result, and C1 has `[amax, max, sum]`, you can see order has changed, previously i used `[::-1]` to reorder, but this has sceanrios which cannot solve. Therefore, I decide to find the func name in index, and its position, and do a reordering for `s`, which you see in `reorder_mask` clause. And afterwards, we still need to replace those names with the names users provided in the call, e.g. `aa, ab, ae` etc, and those are unchanged in the latest commit.\r\n\r\nThe reason to have the mask is, if the result is a DataFrame and there is only one column being used for aggregation, e.g. `df.agg(aa=(C1, sum), ab=(C1, mean))`, there will be no re-sort in index, and the order is the same as called in function.\r\n\r\nI know this might bring in a lot of confusions, but i have tried many scenarios for corner cases, seems this solution works quite good, and overall this is to achieve 3 things: \r\n1. the index name of aggregated dataframe has the same order of appearance as in the call, \r\n2. the column names of aggregated dataframes has the same order of appearance of column names as in the call, \r\n3. the aggregated result mapping is correct. \r\n\r\nMany thanks for your precious time reviewing this PR and would love to hear your feedbacks! thanks in advance! @WillAyd @jreback ",
        "createdAt" : "2020-06-17T07:19:32Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      },
      {
        "id" : "40c2da0b-54bf-4a15-bb04-3c9d6c52ea73",
        "parentId" : "73f3091b-69f1-47ec-b435-c4757f548608",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "emm, i _think_ CI failure is irrelevant",
        "createdAt" : "2020-06-17T07:23:24Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "05921afef8d10eabd0917ba0fbeeefc18ae7d511",
    "line" : 175,
    "diffHunk" : "@@ -1,1 +356,360 @@        reordered_result_in_dict[col] = s.reindex(columns, copy=False)\n        idx = idx + len(fun)\n    return reordered_result_in_dict\n\n"
  },
  {
    "id" : "8179f09a-b168-4362-8d01-ad3f90fab3ad",
    "prId" : 29116,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29116#pullrequestreview-446654104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c29909af-71f2-4c0c-8404-f02dcb27c358",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "great, we *may* want to think about putting these in _typing, but separate issue / PR (you can just try it if you want), but in a follown.",
        "createdAt" : "2020-07-10T19:16:03Z",
        "updatedAt" : "2020-07-10T19:16:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a55827f5-ed27-4bc2-9b10-569757e3b199",
        "parentId" : "c29909af-71f2-4c0c-8404-f02dcb27c358",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "ahh, okay! i deliberately moved it from _typing to here in commit 05921af since i thought this might be only used in this file.\r\n\r\nI will do a PR for moving it to _typing.",
        "createdAt" : "2020-07-10T19:32:44Z",
        "updatedAt" : "2020-07-10T19:32:45Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "05921afef8d10eabd0917ba0fbeeefc18ae7d511",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +27,31 @@from pandas.core.series import FrameOrSeriesUnion, Series\n\n# types of `func` kwarg for DataFrame.aggregate and Series.aggregate\nAggFuncTypeBase = Union[Callable, str]\nAggFuncType = Union["
  },
  {
    "id" : "86951781-58ee-4c79-b61c-12df007e6983",
    "prId" : 30856,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30856#pullrequestreview-340773861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f87e367-17a1-41ad-adb1-be8da0324efa",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is this annotation the only thing that differs from the original code?",
        "createdAt" : "2020-01-09T19:36:21Z",
        "updatedAt" : "2020-01-20T22:05:51Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "df9ddad2-aae7-4242-859b-ad92c55eb9d9",
        "parentId" : "8f87e367-17a1-41ad-adb1-be8da0324efa",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "ahh, yeah, basically! @WillAyd \r\nalso de-private several methods that are used in `generic`, and also de-private methods in docstring as well.",
        "createdAt" : "2020-01-09T19:50:10Z",
        "updatedAt" : "2020-01-20T22:05:51Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "64a999181424cf6b9f354505db5b8d509075f89b",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +70,74 @@    # May be hitting https://github.com/python/mypy/issues/5958\n    # saying it doesn't have an attribute __name__\n    aggspec: DefaultDict = defaultdict(list)\n    order = []\n    columns, pairs = list(zip(*kwargs.items()))"
  },
  {
    "id" : "200d7f96-1f84-4d3b-b683-f25ded035b7f",
    "prId" : 30856,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30856#pullrequestreview-340798341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0143b3e-94a8-4efc-9199-0787ef04f14b",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Would be nice to clean up types in a follow up (these are all Callable right?)",
        "createdAt" : "2020-01-09T20:24:34Z",
        "updatedAt" : "2020-01-20T22:05:51Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "98cd798a-0b82-43fc-a899-fae4aec156bd",
        "parentId" : "e0143b3e-94a8-4efc-9199-0787ef04f14b",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "sure! would come up with follow-up PR for types for all methods in this file, they seem all could be improved a bit",
        "createdAt" : "2020-01-09T20:36:37Z",
        "updatedAt" : "2020-01-20T22:05:51Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "64a999181424cf6b9f354505db5b8d509075f89b",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +122,126 @@\n\ndef _managle_lambda_list(aggfuncs: Sequence[Any]) -> Sequence[Any]:\n    \"\"\"\n    Possibly mangle a list of aggfuncs."
  },
  {
    "id" : "b78665cb-6243-4380-9431-dfddcbf3ae9a",
    "prId" : 30856,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30856#pullrequestreview-345525209",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5db2479c-d40f-4381-b5de-8c3099aa12b5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "blank line before each section, type kwargs if you can (and add a return annotation)",
        "createdAt" : "2020-01-20T19:58:44Z",
        "updatedAt" : "2020-01-20T22:05:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "568eca7e-4192-484c-8abc-918b4fca183a",
        "parentId" : "5db2479c-d40f-4381-b5de-8c3099aa12b5",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "thanks! added blank line before each section for all functions here and add types for kwargs and add return annotation",
        "createdAt" : "2020-01-20T20:44:06Z",
        "updatedAt" : "2020-01-20T22:05:51Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "64a999181424cf6b9f354505db5b8d509075f89b",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +47,51 @@    to the old Dict[str, List[scalar]]].\n\n    Parameters\n    ----------\n    kwargs : dict"
  },
  {
    "id" : "6acb80ea-0224-418b-ae2b-617cb7fc9caa",
    "prId" : 30856,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30856#pullrequestreview-345525342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f18b8cd9-41ab-43ff-a0a4-00526d5ce807",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string to the module, describing the purpose of it \r\n\r\ne.g. functions to handle multiple named and lambda kwarg aggregations in groupby and dataframe/series.agg",
        "createdAt" : "2020-01-20T20:00:46Z",
        "updatedAt" : "2020-01-20T22:05:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8cc726b8-ce84-457a-8d14-33b4e952e521",
        "parentId" : "f18b8cd9-41ab-43ff-a0a4-00526d5ce807",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "ahh, nice idea, added!",
        "createdAt" : "2020-01-20T20:44:30Z",
        "updatedAt" : "2020-01-20T22:05:51Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "64a999181424cf6b9f354505db5b8d509075f89b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@import pandas.core.common as com\nfrom pandas.core.indexes.api import Index\n\n\ndef is_multi_agg_with_relabel(**kwargs) -> bool:"
  },
  {
    "id" : "55f21284-913d-4ec7-b792-d9a943c4cb9f",
    "prId" : 33263,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33263#pullrequestreview-387445884",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "832fac0b-2c2f-4250-a59b-bb3a84e61ac2",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "hmm, this output doesn't match the returns section/return type hint.",
        "createdAt" : "2020-04-03T16:37:07Z",
        "updatedAt" : "2020-04-07T16:30:43Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "5799cd4f-5131-47af-a6ba-c68c49c01dc3",
        "parentId" : "832fac0b-2c2f-4250-a59b-bb3a84e61ac2",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "@simonjayhawkins Fixed it in eceb678",
        "createdAt" : "2020-04-03T17:26:06Z",
        "updatedAt" : "2020-04-07T16:30:43Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      }
    ],
    "commit" : "f66c3e955b107eb20b4493bf8f27f37d5b5024cf",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +62,66 @@    --------\n    >>> normalize_keyword_aggregation({\"output\": (\"input\", \"sum\")})\n    (defaultdict(<class 'list'>, {'input': ['sum']}), ('output',), array([0]))\n    \"\"\"\n    # Normalize the aggregation functions as Mapping[column, List[func]],"
  },
  {
    "id" : "d7614c53-8e0d-421a-8f70-63cebca956ea",
    "prId" : 35964,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35964#pullrequestreview-485494784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "501eb516-1b39-4f88-9c36-2d349a6481de",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is not user visible right?",
        "createdAt" : "2020-09-05T15:41:52Z",
        "updatedAt" : "2020-09-12T15:32:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "68507d82-3dab-4b71-9846-2a581bacd46b",
        "parentId" : "501eb516-1b39-4f88-9c36-2d349a6481de",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Correct - when obj is a Series and axis is 1 or 'columns', `obj._get_axis_number(axis)` will raise with the ValueError \"No axis named columns for object type Series\" (or 1).",
        "createdAt" : "2020-09-10T00:52:43Z",
        "updatedAt" : "2020-09-12T15:32:19Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f66a80624812165ffaf53585f7d98c527026d4e2",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +422,426 @@\n    if obj._get_axis_number(axis) == 1:\n        assert not is_series\n        return transform(obj.T, func, 0, *args, **kwargs).T\n"
  },
  {
    "id" : "620cb63c-50a3-4fc0-805a-b1a8b52ada4d",
    "prId" : 35964,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35964#pullrequestreview-487241478",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5de1e635-5303-4e32-bfe7-e9b8466bf0be",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "suspect some of these operations can be shared (e.g. in pandas/core/base and this file), but can be refactored in a followon (though woudln't object to making these functions now); this function is *very* long.",
        "createdAt" : "2020-09-05T15:43:18Z",
        "updatedAt" : "2020-09-12T15:32:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "23f72fe1-af8d-4792-be49-95370062f527",
        "parentId" : "5de1e635-5303-4e32-bfe7-e9b8466bf0be",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Will followup on this, I think there is opportunity to share more between aggregate/transform within implementations, but don't want to drag aggregate into here.",
        "createdAt" : "2020-09-12T16:48:38Z",
        "updatedAt" : "2020-09-12T16:48:39Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f66a80624812165ffaf53585f7d98c527026d4e2",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +456,460 @@\n    # func is either str or callable\n    try:\n        if isinstance(func, str):\n            result = obj._try_aggregate_string_function(func, *args, **kwargs)"
  },
  {
    "id" : "f5ea1a78-1697-45bd-9e95-b1b1aa7d50bf",
    "prId" : 35964,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35964#pullrequestreview-487257853",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfffa2a3-26aa-4d48-85c4-97e6c6f9f979",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we should probably use is_list_like here",
        "createdAt" : "2020-09-12T21:34:02Z",
        "updatedAt" : "2020-09-12T21:36:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f66a80624812165ffaf53585f7d98c527026d4e2",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +425,429 @@        return transform(obj.T, func, 0, *args, **kwargs).T\n\n    if isinstance(func, list):\n        if is_series:\n            func = {com.get_callable_name(v) or v: v for v in func}"
  },
  {
    "id" : "625137cd-b6d4-4a4b-b4c4-bdf346d69e34",
    "prId" : 35964,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35964#pullrequestreview-487257853",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d8260eb-531a-4498-bb95-fd93491ca54c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should probably use is_dict_like here",
        "createdAt" : "2020-09-12T21:34:12Z",
        "updatedAt" : "2020-09-12T21:36:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f66a80624812165ffaf53585f7d98c527026d4e2",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +431,435 @@            func = {col: func for col in obj}\n\n    if isinstance(func, dict):\n        if not is_series:\n            cols = sorted(set(func.keys()) - set(obj.columns))"
  },
  {
    "id" : "71130c01-2e2f-4cc7-a96f-fe8ad8152b79",
    "prId" : 35964,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35964#pullrequestreview-487257853",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab2ed543-b7d0-40fb-975e-73af7fdb53ec",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you type results",
        "createdAt" : "2020-09-12T21:34:26Z",
        "updatedAt" : "2020-09-12T21:36:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f66a80624812165ffaf53585f7d98c527026d4e2",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +441,445 @@            raise SpecificationError(\"nested renamer is not supported\")\n\n        results = {}\n        for name, how in func.items():\n            colg = obj._gotitem(name, ndim=1)"
  },
  {
    "id" : "a3ee11a4-2481-4162-bb61-6269193baea8",
    "prId" : 36478,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36478#pullrequestreview-492192511",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "642c47b0-a5a8-4dcb-b1c5-ab43160faf64",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't this be an elif? otherwise these are going to be converted *again(?",
        "createdAt" : "2020-09-19T20:00:24Z",
        "updatedAt" : "2020-10-06T03:19:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7c22f855-d759-4a69-84eb-27ba0c443d46",
        "parentId" : "642c47b0-a5a8-4dcb-b1c5-ab43160faf64",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "In the case func is a list, we replace it with the equivalent dict, so we want to hit both the `if is_list_like` and `if is_dict_like` blocks.",
        "createdAt" : "2020-09-20T12:37:10Z",
        "updatedAt" : "2020-10-06T03:19:59Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7066f80ee1acfc430700d1c8d1815ee7f4b460ba",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +441,445 @@            func = {col: func for col in obj}\n\n    if is_dict_like(func):\n        func = cast(Dict[Label, Union[AggFuncTypeBase, List[AggFuncTypeBase]]], func)\n        return transform_dict_like(obj, func, *args, **kwargs)"
  },
  {
    "id" : "5c0959e9-7555-4a53-8a5d-c9e40fea2880",
    "prId" : 36478,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36478#pullrequestreview-495044601",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb0bed4d-16c7-46e3-86e3-3f5eda755fcb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this tested? is this new?",
        "createdAt" : "2020-09-19T20:01:18Z",
        "updatedAt" : "2020-10-06T03:19:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f05b20df-322a-4e27-bd28-6243e06ffba9",
        "parentId" : "eb0bed4d-16c7-46e3-86e3-3f5eda755fcb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i think you should just let concat work and bubble up if needed",
        "createdAt" : "2020-09-19T20:01:35Z",
        "updatedAt" : "2020-10-06T03:19:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d917c67d-48d0-4324-8e66-4f72fd6528dd",
        "parentId" : "eb0bed4d-16c7-46e3-86e3-3f5eda755fcb",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Not new, this is hit in `tests.frame.apply.test_frame_transform.test_transform_bad_dtype`. Removing these two lines results in the ValueError \"No objects to concatenate\" rather than \"Transform function failed\". I'm okay with either, slight preference for the current behavior (which is the same as this PR). Let me know if you prefer \"No objects to concatenate\" and can change.",
        "createdAt" : "2020-09-20T12:01:55Z",
        "updatedAt" : "2020-10-06T03:19:59Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "ac671889-aebb-4acf-a6e9-96dfbaa36432",
        "parentId" : "eb0bed4d-16c7-46e3-86e3-3f5eda755fcb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm yeah I think we should change this, maybe to something a bit more userfriendly like\r\n`the input transform did not contain any transform functions`",
        "createdAt" : "2020-09-21T23:45:31Z",
        "updatedAt" : "2020-10-06T03:19:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7a8a9f87-6ab2-49aa-9144-ba8c148ddb69",
        "parentId" : "eb0bed4d-16c7-46e3-86e3-3f5eda755fcb",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Are you thinking of the case where an aggregator is used? If we detect the function not transforming, we'll raise here:\r\n\r\n```\r\ntry:\r\n    results[name] = transform(colg, how, 0, *args, **kwargs)\r\nexcept Exception as e:\r\n    if str(e) == \"Function did not transform\":\r\n        raise e\r\n```\r\n\r\nbefore we get to this point. The raising of the code highlighted above should only occur if all the key/value pairs of the dictionary entirely failed - e.g. trying to take a product of strings or `lambda x: raise ValueError`.",
        "createdAt" : "2020-09-22T21:09:53Z",
        "updatedAt" : "2020-10-06T03:19:59Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "5cf857b7-c4cb-49c5-be2f-d290e635cf41",
        "parentId" : "eb0bed4d-16c7-46e3-86e3-3f5eda755fcb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, no this is the case of an empty list or dict right? (of functions that are supplied for aggregation), IOW its user visible",
        "createdAt" : "2020-09-22T23:16:31Z",
        "updatedAt" : "2020-10-06T03:19:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bc42b4fc-ef81-4671-8c99-ef5da4b37c35",
        "parentId" : "eb0bed4d-16c7-46e3-86e3-3f5eda755fcb",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Ah, I see! I did not realize this line would be the one that raised for an empty list or dict. I've added that check before getting to this section of the code with the message \"no results\" (this is the message from 1.1 - but can change), along with tests for this.",
        "createdAt" : "2020-09-23T21:00:31Z",
        "updatedAt" : "2020-10-06T03:19:59Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7066f80ee1acfc430700d1c8d1815ee7f4b460ba",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +503,507 @@    # combine results\n    if len(results) == 0:\n        raise ValueError(\"Transform function failed\")\n    return concat(results, axis=1)\n"
  },
  {
    "id" : "9c61d307-d5ab-408b-b554-b6a4039fb0aa",
    "prId" : 36478,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36478#pullrequestreview-492152907",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2befdcbc-87ab-4978-a666-15e2d1607233",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you enhance the tests to hit is_list_like, e.g. a np.array\r\n\r\na Series is dict_like \r\n",
        "createdAt" : "2020-09-19T20:02:48Z",
        "updatedAt" : "2020-10-06T03:19:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7066f80ee1acfc430700d1c8d1815ee7f4b460ba",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +433,437 @@        return transform(obj.T, func, 0, *args, **kwargs).T\n\n    if is_list_like(func) and not is_dict_like(func):\n        func = cast(List[AggFuncTypeBase], func)\n        # Convert func equivalent dict"
  },
  {
    "id" : "b616690d-1f0b-4cd3-b6bf-8a9ea936198d",
    "prId" : 36478,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36478#pullrequestreview-495886800",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdc050e7-ce24-41ff-886c-3b51b4a4e48c",
        "parentId" : null,
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "Maybe extract method ``_is_series(obj)``. I noticed that this dimensions check is run in another function, but there is a local variable ``is_series``.",
        "createdAt" : "2020-09-24T19:42:44Z",
        "updatedAt" : "2020-10-06T03:19:59Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "7066f80ee1acfc430700d1c8d1815ee7f4b460ba",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +478,482 @@        raise ValueError(\"No transform functions were provided\")\n\n    if obj.ndim != 1:\n        # Check for missing columns on a frame\n        cols = sorted(set(func.keys()) - set(obj.columns))"
  }
]