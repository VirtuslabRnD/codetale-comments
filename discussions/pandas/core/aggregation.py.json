[
  {
    "id" : "044a5e46-c496-4dbd-bf6f-7f261dc8d014",
    "prId" : 29116,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29116#pullrequestreview-348346939",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3db4773-cc7b-4555-acbb-66bdafbc4cb0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah pls format the doc-string, giving examples if possible.",
        "createdAt" : "2020-01-25T15:47:36Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "056d623e-3b95-4d33-ab15-c55dd2bd64b7",
        "parentId" : "f3db4773-cc7b-4555-acbb-66bdafbc4cb0",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "added docstring and examples",
        "createdAt" : "2020-01-25T21:42:30Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "05921afef8d10eabd0917ba0fbeeefc18ae7d511",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +42,46 @@]:\n    \"\"\"\n    This is the internal function to reconstruct func given if there is relabeling\n    or not and also normalize the keyword to get new order of columns.\n"
  },
  {
    "id" : "4c9f1bb7-1265-4beb-bdbe-019fb26ed567",
    "prId" : 29116,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29116#pullrequestreview-357261148",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af2cf43c-5c4b-443e-858e-0ae9830c50a4",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "IIUC you can just remove this line - no need for the assignment to None",
        "createdAt" : "2020-02-12T01:20:25Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "38e01d16-5fe2-4722-800d-34545445ff7b",
        "parentId" : "af2cf43c-5c4b-443e-858e-0ae9830c50a4",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "emm, no, this still needs to be assigned to `None`, because, if not relabeling, we would like to return `None` for `columns` and `order`",
        "createdAt" : "2020-02-12T08:27:35Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "05921afef8d10eabd0917ba0fbeeefc18ae7d511",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +78,82 @@    \"\"\"\n    relabeling = func is None and is_multi_agg_with_relabel(**kwargs)\n    columns: Optional[List[str]] = None\n    order: Optional[List[int]] = None\n"
  },
  {
    "id" : "f6053fdd-a84f-46c7-afa3-bdb33ebdce23",
    "prId" : 29116,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29116#pullrequestreview-357132409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47169cd6-ba8d-4ccc-97d6-8a4d2312a52b",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Same comment",
        "createdAt" : "2020-02-12T01:20:31Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "05921afef8d10eabd0917ba0fbeeefc18ae7d511",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +79,83 @@    relabeling = func is None and is_multi_agg_with_relabel(**kwargs)\n    columns: Optional[List[str]] = None\n    order: Optional[List[int]] = None\n\n    if not relabeling:"
  },
  {
    "id" : "3e72195f-0a8c-4e7f-a581-3ed7fa85eee4",
    "prId" : 29116,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29116#pullrequestreview-384203450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "847144c9-3638-436d-bec4-6949dd384e80",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you are mutating the input argument, which IIUC is a ``DataFrame(index=columns)``; why don't you just create it in this function and return it?\r\n\r\nThis is a very hard to follow api the way you are doing it.",
        "createdAt" : "2020-03-16T02:59:09Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cb43c402-e5c9-4378-8146-39d318eeed08",
        "parentId" : "847144c9-3638-436d-bec4-6949dd384e80",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "sorry for late reply @jreback \r\n\r\nyeah, agree, this doesn't look optimal, and input is indeed `DataFrame(index=columns)`, the reason not to create it in this function is `DataFrame` is defined in `frame.py`, if we want to use it, then need to import from `frame.py`, and this function is also gonna be used in `frame.py`, which will result in the conflict imports.\r\n\r\nAny suggestions on how to work around it? ",
        "createdAt" : "2020-03-30T18:38:39Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      },
      {
        "id" : "30c3fbe1-087e-4d16-b920-0d1e1fecdb4a",
        "parentId" : "847144c9-3638-436d-bec4-6949dd384e80",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "i remove the input arugment of `reordered_result` and return a dictionary in this method, and form into Dataframe in `frame.py` instead, is it a bit clearer? ",
        "createdAt" : "2020-03-30T20:26:29Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "05921afef8d10eabd0917ba0fbeeefc18ae7d511",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +321,325 @@\n    reorder_mask = not isinstance(result, Series) and len(result.columns) > 1\n    for col, fun in func.items():\n        s = result[col].dropna()\n"
  },
  {
    "id" : "7eac044a-4986-48f8-8af5-540d0c6fa548",
    "prId" : 29116,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29116#pullrequestreview-432125317",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73f3091b-69f1-47ec-b435-c4757f548608",
        "parentId" : null,
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "Hi, @WillAyd @jreback \r\n\r\nI think this part has brought in quite conversations for a while, and i looked back at it again and feel there is still something could improve, so i re-designed the implementation a bit, and added quite detailed comment to explain.\r\n\r\nThe issue of `result` is, after the `self._aggregate` and `mangle_lamdbas`, if result is a `DataFrame`, the index of results will be obtained from callable name (e.g. `sum` -> `'sum'`, or `np.max` -> `'amax'`), or kept as is for string case (e.g. `'sum'` -> `'sum'`), or a parsed lambda func (e.g. `lambda x: min(x)` -> `'<lambda>'`), and index will be sorted.\r\n\r\nso, if the call to function is `df.agg(aa=(C2, sum), ab=(C1, max), ac=(C1, np.max), ad=(C2, lambda x: min(x)), ae=(C1, sum))`, the order of functions is `C1: [max, np.max, sum]` and `C2: [sum, lambda]`, but it will look like something below in `results`:\r\n```\r\n             C2   C1\r\n<lambda>      1  NaN\r\namax        NaN  4.0\r\nmax         NaN  4.0\r\nsum        18.0  6.0\r\n```\r\nSo for C2, it now has `[lambda, sum]` in result, and C1 has `[amax, max, sum]`, you can see order has changed, previously i used `[::-1]` to reorder, but this has sceanrios which cannot solve. Therefore, I decide to find the func name in index, and its position, and do a reordering for `s`, which you see in `reorder_mask` clause. And afterwards, we still need to replace those names with the names users provided in the call, e.g. `aa, ab, ae` etc, and those are unchanged in the latest commit.\r\n\r\nThe reason to have the mask is, if the result is a DataFrame and there is only one column being used for aggregation, e.g. `df.agg(aa=(C1, sum), ab=(C1, mean))`, there will be no re-sort in index, and the order is the same as called in function.\r\n\r\nI know this might bring in a lot of confusions, but i have tried many scenarios for corner cases, seems this solution works quite good, and overall this is to achieve 3 things: \r\n1. the index name of aggregated dataframe has the same order of appearance as in the call, \r\n2. the column names of aggregated dataframes has the same order of appearance of column names as in the call, \r\n3. the aggregated result mapping is correct. \r\n\r\nMany thanks for your precious time reviewing this PR and would love to hear your feedbacks! thanks in advance! @WillAyd @jreback ",
        "createdAt" : "2020-06-17T07:19:32Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      },
      {
        "id" : "40c2da0b-54bf-4a15-bb04-3c9d6c52ea73",
        "parentId" : "73f3091b-69f1-47ec-b435-c4757f548608",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "emm, i _think_ CI failure is irrelevant",
        "createdAt" : "2020-06-17T07:23:24Z",
        "updatedAt" : "2020-07-10T16:53:42Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "05921afef8d10eabd0917ba0fbeeefc18ae7d511",
    "line" : 175,
    "diffHunk" : "@@ -1,1 +356,360 @@        reordered_result_in_dict[col] = s.reindex(columns, copy=False)\n        idx = idx + len(fun)\n    return reordered_result_in_dict\n\n"
  },
  {
    "id" : "8179f09a-b168-4362-8d01-ad3f90fab3ad",
    "prId" : 29116,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29116#pullrequestreview-446654104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c29909af-71f2-4c0c-8404-f02dcb27c358",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "great, we *may* want to think about putting these in _typing, but separate issue / PR (you can just try it if you want), but in a follown.",
        "createdAt" : "2020-07-10T19:16:03Z",
        "updatedAt" : "2020-07-10T19:16:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a55827f5-ed27-4bc2-9b10-569757e3b199",
        "parentId" : "c29909af-71f2-4c0c-8404-f02dcb27c358",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "ahh, okay! i deliberately moved it from _typing to here in commit 05921af since i thought this might be only used in this file.\r\n\r\nI will do a PR for moving it to _typing.",
        "createdAt" : "2020-07-10T19:32:44Z",
        "updatedAt" : "2020-07-10T19:32:45Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "05921afef8d10eabd0917ba0fbeeefc18ae7d511",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +27,31 @@from pandas.core.series import FrameOrSeriesUnion, Series\n\n# types of `func` kwarg for DataFrame.aggregate and Series.aggregate\nAggFuncTypeBase = Union[Callable, str]\nAggFuncType = Union["
  }
]