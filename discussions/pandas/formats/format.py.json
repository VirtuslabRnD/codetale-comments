[
  {
    "id" : "0173af3a-14b0-40d0-84fd-abe31c874734",
    "prId" : 13551,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae9ba5d2-7f16-4a92-8410-b808e2ad70aa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this doesn't need the `allow_fill` argument.\n",
        "createdAt" : "2016-07-05T10:55:32Z",
        "updatedAt" : "2016-07-24T20:59:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ae58363d-0394-4132-87ca-793526359ee1",
        "parentId" : "ae9ba5d2-7f16-4a92-8410-b808e2ad70aa",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback that value is by default True, and once you pass a `fill_value`, you get an error for integer levels. So it is either passing `allow_fill` like above, or eiter passing `fill_value` conditionally like it was initially in this PR\n",
        "createdAt" : "2016-07-05T12:22:32Z",
        "updatedAt" : "2016-07-24T20:59:15Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1ea1500c-2d5a-4280-8414-024946d573e8",
        "parentId" : "ae9ba5d2-7f16-4a92-8410-b808e2ad70aa",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "it doesn't change the test result with my change\nthis their is not enough testing here to catch things\n",
        "createdAt" : "2016-07-05T12:27:00Z",
        "updatedAt" : "2016-07-24T20:59:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3f135c1f-ac76-4634-9a57-2b512415773c",
        "parentId" : "ae9ba5d2-7f16-4a92-8410-b808e2ad70aa",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "If I leave out the `allow_fill=levels._can_hold_na`, I get:\n\n```\nIn [1]: df = DataFrame({'x': np.random.uniform(0, 1, 3), 'y': np.random.uniform(0, 1, 3)})\n\nIn [2]: df['A'] = [1,1,3]\n\nIn [3]: df['B'] = ['a', np.nan, 'b']\n\nIn [4]: df = df.set_index(['A', 'B'])\n\nIn [5]: df\nOut[5]:\n              x         y\nA B\n1 a    0.335609  0.521433\n  NaN  0.531680  0.265201\n3 b    0.910320  0.520158\n\nIn [6]: df.to_excel('test.xlsx')\n---------------------------------------------------------------------------\nValueError: Unable to fill values because Int64Index cannot contain NA\n```\n\nBut the problem is that the test frame only contains floats. @mpuels can you update the test to also include an integer index case?\n",
        "createdAt" : "2016-07-05T12:49:06Z",
        "updatedAt" : "2016-07-24T20:59:15Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ac6ebd0b-9eb8-420f-bfce-9351fc618218",
        "parentId" : "ae9ba5d2-7f16-4a92-8410-b808e2ad70aa",
        "authorId" : "9903e6ac-9346-4981-aeb0-564e4e35ca50",
        "body" : "@jorisvandenbossche I'm sorry, but I can't follow you. I guess when you say\n\n> But the problem is that the test frame only contains floats.  @mpuels can you update the test to also include an integer index case?\n\nthen you mean the MultiIndex of the DataFrame in my test case only contains floats and that I shall construct a test case where each level of the MultiIndex is of type integer?\n",
        "createdAt" : "2016-07-11T20:00:47Z",
        "updatedAt" : "2016-07-24T20:59:15Z",
        "lastEditedBy" : "9903e6ac-9346-4981-aeb0-564e4e35ca50",
        "tags" : [
        ]
      },
      {
        "id" : "32eeca03-e38f-4e47-9044-4b868924da28",
        "parentId" : "ae9ba5d2-7f16-4a92-8410-b808e2ad70aa",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "yes indeed, that is what I meant!\n",
        "createdAt" : "2016-07-11T21:10:48Z",
        "updatedAt" : "2016-07-24T20:59:15Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "8bbed2cd-8b37-489b-a874-6cd56cf080a9",
        "parentId" : "ae9ba5d2-7f16-4a92-8410-b808e2ad70aa",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "(because the reason you have to specify `allow_fill` is otherwise not tested)\n",
        "createdAt" : "2016-07-11T21:11:36Z",
        "updatedAt" : "2016-07-24T20:59:15Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d62ba368-66d0-43dc-b8c4-dffab85ef485",
        "parentId" : "ae9ba5d2-7f16-4a92-8410-b808e2ad70aa",
        "authorId" : "9903e6ac-9346-4981-aeb0-564e4e35ca50",
        "body" : "@jorisvandenbossche So you claim that if I substitute\n\n```\nvalues = levels.take(labels,\n                     allow_fill=levels._can_hold_na,\n                     fill_value=True)\n```\n\nwith\n\n```\nvalues = levels.take(labels,\n                     fill_value=True)\n```\n\nthat no test will detect the change, i.e. that all tests pass? I ran the tests by entering\n\n```\n$ nosetests pandas/io/tests/test_excel.py:Openpyxl20Tests\n```\n\nagainst the PR which contains `allow_fill=levels._can_hold_na` and then applied the aforementioned substitution and ran the tests again. In the first case the output is\n\n```\n......SS...........................\n----------------------------------------------------------------------\nRan 35 tests in 2.322s\n\nOK (SKIP=2)\n```\n\nand in the second case it is\n\n```\n......SS...............EEE.........\n======================================================================\nERROR: test_to_excel_multiindex (pandas.io.tests.test_excel.Openpyxl20Tests)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/io/tests/test_excel.py\", line 1776, in wrapped\n    orig_method(self, *args, **kwargs)\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/io/tests/test_excel.py\", line 1321, in test_to_excel_multiindex\n    frame.to_excel(path, 'test1', header=False)\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/core/frame.py\", line 1431, in to_excel\n    startrow=startrow, startcol=startcol)\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/io/excel.py\", line 875, in write_cells\n    for cell in cells:\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/formats/format.py\", line 1986, in get_formatted_cells\n    self._format_body()):\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/formats/format.py\", line 1957, in _format_hierarchical_rows\n    fill_value=True)\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/indexes/base.py\", line 1438, in take\n    raise ValueError(msg.format(self.__class__.__name__))\nValueError: Unable to fill values because Int64Index cannot contain NA\n\n======================================================================\nERROR: test_to_excel_multiindex_cols (pandas.io.tests.test_excel.Openpyxl20Tests)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/io/tests/test_excel.py\", line 1776, in wrapped\n    orig_method(self, *args, **kwargs)\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/io/tests/test_excel.py\", line 1366, in test_to_excel_multiindex_cols\n    frame.to_excel(path, 'test1', merge_cells=self.merge_cells)\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/core/frame.py\", line 1431, in to_excel\n    startrow=startrow, startcol=startcol)\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/io/excel.py\", line 875, in write_cells\n    for cell in cells:\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/formats/format.py\", line 1986, in get_formatted_cells\n    self._format_body()):\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/formats/format.py\", line 1957, in _format_hierarchical_rows\n    fill_value=True)\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/indexes/base.py\", line 1438, in take\n    raise ValueError(msg.format(self.__class__.__name__))\nValueError: Unable to fill values because Int64Index cannot contain NA\n\n======================================================================\nERROR: test_to_excel_multiindex_dates (pandas.io.tests.test_excel.Openpyxl20Tests)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/io/tests/test_excel.py\", line 1776, in wrapped\n    orig_method(self, *args, **kwargs)\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/io/tests/test_excel.py\", line 1387, in test_to_excel_multiindex_dates\n    tsframe.to_excel(path, 'test1', merge_cells=self.merge_cells)\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/core/frame.py\", line 1431, in to_excel\n    startrow=startrow, startcol=startcol)\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/io/excel.py\", line 875, in write_cells\n    for cell in cells:\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/formats/format.py\", line 1986, in get_formatted_cells\n    self._format_body()):\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/formats/format.py\", line 1957, in _format_hierarchical_rows\n    fill_value=True)\n  File \"/home/mpuels/progs/pandas-mpuels/pandas/indexes/base.py\", line 1438, in take\n    raise ValueError(msg.format(self.__class__.__name__))\nValueError: Unable to fill values because Int64Index cannot contain NA\n\n----------------------------------------------------------------------\nRan 35 tests in 2.163s\n\nFAILED (SKIP=2, errors=3)\n```\n\nSo the test which I constructed for this PR did not fail, but three other tests which already exist. Shall I nonetheless construct another test case where the Index contains integers? Or did I miss anything? Thanks for your patience!\n",
        "createdAt" : "2016-07-12T16:59:40Z",
        "updatedAt" : "2016-07-24T20:59:15Z",
        "lastEditedBy" : "9903e6ac-9346-4981-aeb0-564e4e35ca50",
        "tags" : [
        ]
      },
      {
        "id" : "e4f4e244-7559-46d7-ae96-effaf5426bb5",
        "parentId" : "ae9ba5d2-7f16-4a92-8410-b808e2ad70aa",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I didn't claim that very strongly :-) \n\nI only ran the specific test here in this PR, and there it is not catched, but as you show it is certainly catched in the other tests, so OK then!\n",
        "createdAt" : "2016-07-12T17:08:31Z",
        "updatedAt" : "2016-07-24T20:59:15Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "2335ceefa7b8647fcc191cb065a4ed87b3cba88f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1842,1846 @@\n                    values = levels.take(labels,\n                                         allow_fill=levels._can_hold_na,\n                                         fill_value=True)\n"
  }
]