[
  {
    "id" : "7fcae2e1-7d8a-4c09-82a6-e06e0be670ba",
    "prId" : 10199,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01b3e659-5725-4297-9b8b-50793d7bdf34",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "do these also need `cython.wraparound(False)`?\n",
        "createdAt" : "2015-06-26T20:08:39Z",
        "updatedAt" : "2015-06-26T23:23:25Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "6cb7eb16-3a6c-4096-a913-f1bb463a7b5a",
        "parentId" : "01b3e659-5725-4297-9b8b-50793d7bdf34",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes when you release the gil it gives a warning if you don't do this (as you are de-facto turning it off in c-land anyhow, I think it wants to make it explict)\n",
        "createdAt" : "2015-06-26T22:35:25Z",
        "updatedAt" : "2015-06-26T23:23:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bc2904abc73cd11f50f1837c97446c09e2971bf",
    "line" : 363,
    "diffHunk" : "@@ -1,1 +328,332 @@            raise KeyError(key)\n\n    @cython.boundscheck(False)\n    def map(self, int64_t[:] keys, int64_t[:] values):\n        cdef:"
  },
  {
    "id" : "3e12624f-5ce0-491a-9559-2eb21d7e7aad",
    "prId" : 10199,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bfc795e-0b61-4af2-a396-0e44b31fd791",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "Was this change necessary or just for consistency with the rest of the HashTable implementations?\n",
        "createdAt" : "2015-06-26T20:10:44Z",
        "updatedAt" : "2015-06-26T23:23:25Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "aa07172a-83bd-48ba-97e9-e2d32e116196",
        "parentId" : "1bfc795e-0b61-4af2-a396-0e44b31fd791",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "just consistency\n",
        "createdAt" : "2015-06-26T22:36:03Z",
        "updatedAt" : "2015-06-26T23:23:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bc2904abc73cd11f50f1837c97446c09e2971bf",
    "line" : 773,
    "diffHunk" : "@@ -1,1 +723,727 @@            object val\n            khiter_t k\n            int64_t[:] locs = np.empty(n, dtype=np.int64)\n\n        for i in range(n):"
  },
  {
    "id" : "b25d7155-64c5-4a0c-ad3f-2bb2c0eb4e42",
    "prId" : 10199,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6a4d10e-b02c-4fb0-a45d-1369f576609a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@cpcloud I got this to work after puzzling on what cython does with multiple fused types. It creates the cross-product, but you generally need only certain specilizations; it does this beaut as a compile-time prune, so no perf hit.\n",
        "createdAt" : "2015-06-26T23:03:53Z",
        "updatedAt" : "2015-06-26T23:23:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bc2904abc73cd11f50f1837c97446c09e2971bf",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +91,95 @@    # as the cross-product is generated, but we cannot assign float->int\n    # the types that don't pass are pruned\n    if (vector_data is Int64VectorData and sixty_four_bit_scalar is int64_t) or (\n        vector_data is Float64VectorData and sixty_four_bit_scalar is float64_t):\n"
  }
]