[
  {
    "id" : "c46b2e64-d68d-4627-ad72-5b0912359e26",
    "prId" : 30562,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30562#pullrequestreview-345454913",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "662d6849-395b-4248-b63f-b51864e83c9d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can just use None here, no?",
        "createdAt" : "2020-01-20T16:17:33Z",
        "updatedAt" : "2020-06-21T09:44:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "95232596-6ff3-404f-a8c9-177d252b2925",
        "parentId" : "662d6849-395b-4248-b63f-b51864e83c9d",
        "authorId" : "6e82078b-0a97-4940-a41d-3b2a01e49b5d",
        "body" : "Sure. I was just following your suggestion:\r\n\r\n> you can just set the default for check_less_precise = lib.no_default (grep for it)\r\n\r\nWhich seemed a better fit when deprecating a parameter. Should I change it to `None` or keep with the `no_default`? :smile: ",
        "createdAt" : "2020-01-20T17:30:02Z",
        "updatedAt" : "2020-06-21T09:44:18Z",
        "lastEditedBy" : "6e82078b-0a97-4940-a41d-3b2a01e49b5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d83880ccb7ebcb8796ee6a765e383362a6d1454a",
    "line" : 394,
    "diffHunk" : "@@ -1,1 +1420,1424 @@    check_column_type=\"equiv\",\n    check_frame_type=True,\n    check_less_precise=no_default,\n    check_names=True,\n    by_blocks=False,"
  },
  {
    "id" : "bd932574-0b22-4b39-9675-9ea35d6cd189",
    "prId" : 30562,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30562#pullrequestreview-361494399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c98283b5-44d7-4023-916d-c43b3b9a62b3",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@datapythonista is this how we do comments in doctests?",
        "createdAt" : "2020-02-07T00:10:23Z",
        "updatedAt" : "2020-06-21T09:44:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2ae82878-290e-41e4-a7f3-d16c38a0465c",
        "parentId" : "c98283b5-44d7-4023-916d-c43b3b9a62b3",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "No, we should remove `>>> # ` and just leave the sentence. ",
        "createdAt" : "2020-02-07T00:54:57Z",
        "updatedAt" : "2020-06-21T09:44:18Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "63ff987d-0ec9-4910-b321-cc453df59f85",
        "parentId" : "c98283b5-44d7-4023-916d-c43b3b9a62b3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "pls update",
        "createdAt" : "2020-02-19T22:44:14Z",
        "updatedAt" : "2020-06-21T09:44:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d83880ccb7ebcb8796ee6a765e383362a6d1454a",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +322,326 @@    Examples\n    --------\n    >>> # Using check_less_precise as a bool:\n    >>> _get_tol_from_less_precise(False)\n    0.5e-5"
  },
  {
    "id" : "5112e54d-cf77-463b-ac5d-5e5497c6765a",
    "prId" : 30562,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30562#pullrequestreview-361494255",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ce5da59-0bcf-400c-9c5f-1e2a19a341bc",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "use `is_bool` (the difference is is_bool will recognize np.bool_)",
        "createdAt" : "2020-02-07T00:10:49Z",
        "updatedAt" : "2020-06-21T09:44:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "031ffd8d-5a2a-4cec-8cd4-629609ffd07e",
        "parentId" : "6ce5da59-0bcf-400c-9c5f-1e2a19a341bc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "pls do this",
        "createdAt" : "2020-02-19T22:43:56Z",
        "updatedAt" : "2020-06-21T09:44:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d83880ccb7ebcb8796ee6a765e383362a6d1454a",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +335,339 @@\n    \"\"\"\n    if isinstance(check_less_precise, bool):\n        if check_less_precise:\n            # 3-digit tolerance"
  },
  {
    "id" : "cb621635-e76e-40ba-b4f6-3cd173b46d04",
    "prId" : 30562,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30562#pullrequestreview-381637123",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "152f9991-6761-4fe5-9b84-6fe927b44099",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same comment about the versionadded tags",
        "createdAt" : "2020-03-26T00:59:12Z",
        "updatedAt" : "2020-06-21T09:44:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d83880ccb7ebcb8796ee6a765e383362a6d1454a",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +387,391 @@        Relative tolerance.\n\n        .. versionadded:: 1.1.0\n    atol : float, default 1e-8\n        Absolute tolerance."
  },
  {
    "id" : "3d6dd0fe-a189-4729-88bc-e78d22cc7f9b",
    "prId" : 30562,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30562#pullrequestreview-434956745",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55bf0e05-0022-4223-927e-7a303abbdf08",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is user-facing documentation, so these descriptions could be improved.\r\n\r\nCould you copy the description from `numpy.isclose`, or link to it with a See Also?",
        "createdAt" : "2020-06-22T14:05:56Z",
        "updatedAt" : "2020-06-22T14:07:09Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "d83880ccb7ebcb8796ee6a765e383362a6d1454a",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +385,389 @@           tolerance, respectively. Similar to :func:`math.isclose`.\n    rtol : float, default 1e-5\n        Relative tolerance.\n\n        .. versionadded:: 1.1.0"
  },
  {
    "id" : "bd4803a9-b40d-4a84-b971-135ed0728ad9",
    "prId" : 30915,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30915#pullrequestreview-341545684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f2d6939-9738-476e-b3c6-20cfa3c45ef3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why donâ€™t list encoding , mode here explicitly ",
        "createdAt" : "2020-01-11T11:04:37Z",
        "updatedAt" : "2020-01-11T11:04:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "746a61e1-6172-4dc6-8a82-30bb4b28a35a",
        "parentId" : "7f2d6939-9738-476e-b3c6-20cfa3c45ef3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "and in the signature ",
        "createdAt" : "2020-01-11T11:04:53Z",
        "updatedAt" : "2020-01-11T11:04:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "87128c3e-279e-4f57-bcf5-13df7b8e46eb",
        "parentId" : "7f2d6939-9738-476e-b3c6-20cfa3c45ef3",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile\r\nhttps://docs.python.org/3/library/tempfile.html#tempfile.mkstemp\r\n\r\n`encoding` and `mode` are not accepted in `mkstemp`.\r\n\r\nThe only shared parameters are `prefix`, `suffix` (corresponds to `filename` in our signature), and `dir`.  Not sure that the remaining two need exposure.",
        "createdAt" : "2020-01-11T11:10:50Z",
        "updatedAt" : "2020-01-11T11:11:42Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "8a8d3024-2e3c-44ab-8112-57611f7652c5",
        "parentId" : "7f2d6939-9738-476e-b3c6-20cfa3c45ef3",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Looking back on comment in OP is the main thing needed for now just encoding? If so I think better to just list explicitly and not pass to mkstemp",
        "createdAt" : "2020-01-11T23:15:40Z",
        "updatedAt" : "2020-01-11T23:15:40Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "2aa2ea11-677b-4980-a37a-bc6739b1fb11",
        "parentId" : "7f2d6939-9738-476e-b3c6-20cfa3c45ef3",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> If so I think better to just list explicitly and not pass to mkstemp\r\n\r\nThe whole point is to use the `**kwargs` in `ensure_clean` as a pass through to `mkstemp` or `TemporaryFile`, depending on whether `return_filelike` is true or false.\r\n\r\nExplicitly listing arguments that apply to one but not the other is going to be confusing.  What is being done is a lot more extensible in the long-run.",
        "createdAt" : "2020-01-11T23:24:42Z",
        "updatedAt" : "2020-01-11T23:25:12Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c9f4ae223913cfcdf5774b3398b8ea1a85a7aa6",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +485,489 @@    return_filelike : bool (default False)\n        if True, returns a file-like which is *always* cleaned. Necessary for\n        savefig and other functions which want to append extensions.\n    **kwargs\n        Additional keywords passed in for creating a temporary file."
  },
  {
    "id" : "49e66821-f6a6-4405-a5ac-1fbc12359bcf",
    "prId" : 31734,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31734#pullrequestreview-355632111",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "574e2e5b-ad46-4edb-9d04-a7df3cd74eb9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we simply enforce ordering when check_categorical is True? alteratively, could add 'exact' as a possiblity in check_categorical (just see what is easier here, not averse to adding another arg)",
        "createdAt" : "2020-02-09T17:28:12Z",
        "updatedAt" : "2020-02-17T00:22:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fad6f2c3-a59d-4900-bfdc-7c18e7129638",
        "parentId" : "574e2e5b-ad46-4edb-9d04-a7df3cd74eb9",
        "authorId" : "ac0af0a3-006f-4da7-a294-6b5567cb5c6a",
        "body" : "I think adding the extra arg is easiest. `pytest.mark.parametrize` doesn't work with optional arguments so there's no way to use optional arguments to cut down on args needed. Adding a string possibility to a boolean argument isn't very intuitive (and changing `check_categorical` to a string argument would result in a lot of changes in other files)",
        "createdAt" : "2020-02-09T20:42:27Z",
        "updatedAt" : "2020-02-17T00:22:48Z",
        "lastEditedBy" : "ac0af0a3-006f-4da7-a294-6b5567cb5c6a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a2e12d1eee0b7a5309b40f2a67ba783e85523a5",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1106,1110 @@    check_categorical : bool, default True\n        Whether to compare internal Categorical exactly.\n    check_category_order : bool, default True\n        Whether to compare category order of internal Categoricals\n"
  },
  {
    "id" : "63912255-97e2-4a04-b77d-2f9337d5ebb9",
    "prId" : 31734,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31734#pullrequestreview-359408333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "140ce5d3-a387-463c-81c3-b37563aa575b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a versionadded tag here (1.0.2)",
        "createdAt" : "2020-02-16T14:47:22Z",
        "updatedAt" : "2020-02-17T00:22:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a2e12d1eee0b7a5309b40f2a67ba783e85523a5",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1106,1110 @@    check_categorical : bool, default True\n        Whether to compare internal Categorical exactly.\n    check_category_order : bool, default True\n        Whether to compare category order of internal Categoricals\n"
  },
  {
    "id" : "b2e716bc-317c-44ec-8306-f878e44278a2",
    "prId" : 32570,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32570#pullrequestreview-372808200",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e3a6ecf-31a9-4cca-9dc8-9055be7e59c3",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "How can `asi8` ever return a MaskedArray?",
        "createdAt" : "2020-03-10T07:44:53Z",
        "updatedAt" : "2020-03-10T07:46:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4a642939-ac4b-48c4-ae0b-f251eaea2b1b",
        "parentId" : "4e3a6ecf-31a9-4cca-9dc8-9055be7e59c3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "we have one test where we pass a MaskedArray to the constructor (I think DTI)",
        "createdAt" : "2020-03-10T15:31:46Z",
        "updatedAt" : "2020-03-10T15:31:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "76a1ba0f-22ad-4d61-a088-9d1a22aa3d76",
        "parentId" : "4e3a6ecf-31a9-4cca-9dc8-9055be7e59c3",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> we have one test where we pass a MaskedArray to the constructor (I think DTI)\r\n\r\nBut shouldn't that be converted to a normal array upon construction? \r\n\r\n",
        "createdAt" : "2020-03-11T12:48:05Z",
        "updatedAt" : "2020-03-11T12:48:05Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "af409f99-6fbc-44ce-98e4-0a546090a111",
        "parentId" : "4e3a6ecf-31a9-4cca-9dc8-9055be7e59c3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "id have no problem with enforcing this, but AFAIK we dont at the moment",
        "createdAt" : "2020-03-11T14:26:45Z",
        "updatedAt" : "2020-03-11T14:26:45Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebfe80b001df348f83b134667a76f2fba65d5831",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1040,1044 @@        # Avoid slow object-dtype comparisons\n        # np.asarray for case where we have a np.MaskedArray\n        assert_numpy_array_equal(np.asarray(left.asi8), np.asarray(right.asi8))\n        return\n"
  },
  {
    "id" : "c8a33269-a827-4b51-b1d2-c3f83818c9e3",
    "prId" : 32570,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32570#pullrequestreview-372065583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b64cc8d2-2c46-4b76-b586-c88655cd1b76",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "assert_extension_array_equal doesn't work for categorical?",
        "createdAt" : "2020-03-10T07:46:32Z",
        "updatedAt" : "2020-03-10T07:46:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4ba01d3e-c373-4620-a59c-2777d3011867",
        "parentId" : "b64cc8d2-2c46-4b76-b586-c88655cd1b76",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We have kwargs `check_categorical` and `check_category_ordered` and a categorical-specific check at the end of `assert_series_equal`.  xref #32571 trying to cut down on these\r\n",
        "createdAt" : "2020-03-10T15:31:18Z",
        "updatedAt" : "2020-03-10T15:31:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebfe80b001df348f83b134667a76f2fba65d5831",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1187,1191 @@        )\n    elif is_extension_array_dtype(left.dtype) or is_extension_array_dtype(right.dtype):\n        assert_extension_array_equal(left._values, right._values)\n    elif needs_i8_conversion(left.dtype) or needs_i8_conversion(right.dtype):\n        # DatetimeArray or TimedeltaArray"
  },
  {
    "id" : "9ec3278c-8fbc-4f9f-af39-1cd41f74e9bf",
    "prId" : 32570,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32570#pullrequestreview-374485191",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3993bd70-bcd6-4140-9915-525d604c8644",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Before this was \"and\", and now it is \"or\". That seems to cause issues in geopandas in case you specify `check_dtype=False` (in which case you can eg have an EA dtype and object dtype with equal values)",
        "createdAt" : "2020-03-13T17:28:10Z",
        "updatedAt" : "2020-03-13T17:28:11Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebfe80b001df348f83b134667a76f2fba65d5831",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1186,1190 @@            obj=str(obj),\n        )\n    elif is_extension_array_dtype(left.dtype) or is_extension_array_dtype(right.dtype):\n        assert_extension_array_equal(left._values, right._values)\n    elif needs_i8_conversion(left.dtype) or needs_i8_conversion(right.dtype):"
  },
  {
    "id" : "028ba680-315c-4d06-9cf8-953e10b616dd",
    "prId" : 33575,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33575#pullrequestreview-399425627",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f195fa41-7464-4659-a923-bf1727799e2c",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Do you have to use asarray here or could you just pass back the DatetimeArray? Would make for nicer output if the date time values were shown",
        "createdAt" : "2020-04-22T04:05:14Z",
        "updatedAt" : "2020-04-22T04:05:29Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "5ec1517b-56c9-4790-a629-94f62bab62fa",
        "parentId" : "f195fa41-7464-4659-a923-bf1727799e2c",
        "authorId" : "0dced5cc-c3d4-4915-94b7-1d9166505fcd",
        "body" : "That is a good point which I hadn't thought of.  However, it isn't quite as simple as that because we only know that the data is an extension array at this point - the index may not be.  Also, my understanding of extension array is very poor, but I thought it could be used for things other than datetimes?\r\n\r\nThe main reason though, is that the data is currently dislayed as numeric timestamps, so it seems reasonable to fix the index display at the same time as the data.  And that sounds like a seperate PR to me.  I am looking at doing it (when I get time), but as mentioned above, I need to figure out extension arrays first.",
        "createdAt" : "2020-04-23T19:48:34Z",
        "updatedAt" : "2020-04-23T19:48:35Z",
        "lastEditedBy" : "0dced5cc-c3d4-4915-94b7-1d9166505fcd",
        "tags" : [
        ]
      },
      {
        "id" : "aa1feae4-ecd2-4cf6-8920-1712f0beb210",
        "parentId" : "f195fa41-7464-4659-a923-bf1727799e2c",
        "authorId" : "0dced5cc-c3d4-4915-94b7-1d9166505fcd",
        "body" : "And thanks for looking at the PR.  Still not sure if I'm supposed to click 'Resolve conversation' now.",
        "createdAt" : "2020-04-23T19:50:54Z",
        "updatedAt" : "2020-04-23T19:50:54Z",
        "lastEditedBy" : "0dced5cc-c3d4-4915-94b7-1d9166505fcd",
        "tags" : [
        ]
      }
    ],
    "commit" : "135ea8778d7197ea399825afecf45f7775ccd995",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +1200,1204 @@    elif is_extension_array_dtype(left.dtype) and is_extension_array_dtype(right.dtype):\n        assert_extension_array_equal(\n            left._values, right._values, index_values=np.asarray(left.index)\n        )\n    elif needs_i8_conversion(left.dtype) or needs_i8_conversion(right.dtype):"
  },
  {
    "id" : "73e40c53-099c-4eaa-820f-75ad454d6ee4",
    "prId" : 34050,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34050#pullrequestreview-408168836",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b014a5d-d9b4-4600-bd01-7cffeca19764",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "move to below versionadded:: 1.0.2 for check_category_order and add versionadded:: 1.1.0",
        "createdAt" : "2020-05-08T11:15:50Z",
        "updatedAt" : "2020-05-09T14:10:59Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "4faca17ee87b8fc9e66ad700744aed6fe4418604",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1144,1148 @@\n        .. versionadded:: 1.0.2\n    check_freq : bool, default True\n        Whether to check the `freq` attribute on a DatetimeIndex or TimedeltaIndex.\n"
  },
  {
    "id" : "cc603c09-e2cc-4155-8172-b28ed1a2b044",
    "prId" : 34050,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34050#pullrequestreview-408168836",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae77b83c-03df-44d2-8499-2b841ab1a1b3",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "add versionadded:: 1.1.0",
        "createdAt" : "2020-05-08T11:16:07Z",
        "updatedAt" : "2020-05-09T14:10:59Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "4faca17ee87b8fc9e66ad700744aed6fe4418604",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +1335,1339 @@        (same as in columns) - same labels must be with the same data.\n    check_freq : bool, default True\n        Whether to check the `freq` attribute on a DatetimeIndex or TimedeltaIndex.\n\n        .. versionadded:: 1.1.0"
  },
  {
    "id" : "89de7828-bfaf-4199-9a6c-a3852d0ce100",
    "prId" : 34307,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34307#pullrequestreview-491977434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ab752f3-9e05-453b-b6d5-e91545c075bf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i think we also have a fixture in conftest and we have an aggregate of all ea types (can be added later but reallly good for testing now)",
        "createdAt" : "2020-06-20T15:14:27Z",
        "updatedAt" : "2020-09-30T08:18:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c170e96b-4a84-4951-84fd-2a7a5d9c27da",
        "parentId" : "0ab752f3-9e05-453b-b6d5-e91545c075bf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "There is indeed a `any_nullable_int_dtype` fixture in conftest.py. I could add an equivalent floating one, but right now it wouldn't be used yet. So can also add once we need it somewhere.",
        "createdAt" : "2020-09-18T15:50:08Z",
        "updatedAt" : "2020-09-30T08:18:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "3633b4d4-6282-41b1-adbe-a0c685bde056",
        "parentId" : "0ab752f3-9e05-453b-b6d5-e91545c075bf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "kk but yes we should add one in this pr",
        "createdAt" : "2020-09-19T01:35:07Z",
        "updatedAt" : "2020-09-30T08:18:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "90565e9b-c45b-4a29-bb5a-7ff6aa0abb93",
        "parentId" : "0ab752f3-9e05-453b-b6d5-e91545c075bf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK, added the fixture",
        "createdAt" : "2020-09-19T07:05:49Z",
        "updatedAt" : "2020-09-30T08:18:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "edf9618d49de3f04d8f18e099c60310ae40296f7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +85,89 @@\nFLOAT_DTYPES: List[Dtype] = [float, \"float32\", \"float64\"]\nFLOAT_EA_DTYPES: List[Dtype] = [\"Float32\", \"Float64\"]\nCOMPLEX_DTYPES: List[Dtype] = [complex, \"complex64\", \"complex128\"]\nSTRING_DTYPES: List[Dtype] = [str, \"str\", \"U\"]"
  },
  {
    "id" : "95974faf-5fc5-4c93-a9aa-d47fd08a8d75",
    "prId" : 34623,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34623#pullrequestreview-430228006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80c125e2-46d5-412b-b512-6edbe73dc956",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "IIRC we have something similiar in internals, maybe we should consolidate (just a thought) and certainly. in a followon",
        "createdAt" : "2020-06-14T15:16:51Z",
        "updatedAt" : "2020-06-14T15:17:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e88544d3a8a06788b5d975758a580110c9d1240",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2762,2766 @@\n\ndef get_op_from_name(op_name: str) -> Callable:\n    \"\"\"\n    The operator function for a given op name."
  },
  {
    "id" : "b073458c-651a-4faa-a5d6-fb963126117b",
    "prId" : 35750,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35750#pullrequestreview-468073734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13105f1e-daa0-4e2f-9436-9ee474521dd4",
        "parentId" : null,
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Included this also as it seems it can't be wrong to pass check_dtype here, but not certain of how best to test (if at all)",
        "createdAt" : "2020-08-16T15:34:26Z",
        "updatedAt" : "2020-08-17T17:22:39Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d0f53f3c3a729c7e76cdb26da15c23cc10d37ea",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1388,1392 @@            left._values,\n            right._values,\n            check_dtype=check_dtype,\n            index_values=np.asarray(left.index),\n        )"
  },
  {
    "id" : "9e94a7a4-0dfc-417e-b0ff-834f8eb15d30",
    "prId" : 36310,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36310#pullrequestreview-491842710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26d1144b-6e68-4298-8802-0269f8c3d556",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is an api change (ok, just document)",
        "createdAt" : "2020-09-19T00:48:15Z",
        "updatedAt" : "2020-10-01T16:39:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "865b3fcc540e96e269509c9ffdc9d7a9fe7e7cce",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +996,1000 @@\n\ndef assert_datetime_array_equal(left, right, obj=\"DatetimeArray\", check_freq=True):\n    __tracebackhide__ = True\n    _check_isinstance(left, right, DatetimeArray)"
  },
  {
    "id" : "fc0ca18c-cf0b-46d6-8b76-9746ddbffb88",
    "prId" : 37479,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37479#pullrequestreview-519455140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3925c95-4e6f-466c-8556-bf8922c2a322",
        "parentId" : null,
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "Probably it is necessary to have the new parameter added to the very end of this function signature in order not to break any user's code, which for some reason use positional arguments.",
        "createdAt" : "2020-10-29T06:32:36Z",
        "updatedAt" : "2020-11-02T12:53:57Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      },
      {
        "id" : "eac9220a-2b25-4680-b76a-76c8809f605e",
        "parentId" : "f3925c95-4e6f-466c-8556-bf8922c2a322",
        "authorId" : "0dced5cc-c3d4-4915-94b7-1d9166505fcd",
        "body" : "Thanks for the feedback.\r\n\r\nI debated that and it looked like the ```rtol``` and ```atol``` params had been added before the (older) ```obj``` param, so I decided to put ```check_order``` with the other check params.  That said, ```obj``` is not something that most user code would pass so perhaps the comparrison doesn't hold.\r\n\r\nHappy to move the parameter.\r\n\r\nI also just noticed that I forgot to add a ```versionadded``` tag (will do).",
        "createdAt" : "2020-10-29T09:03:11Z",
        "updatedAt" : "2020-11-02T12:53:57Z",
        "lastEditedBy" : "0dced5cc-c3d4-4915-94b7-1d9166505fcd",
        "tags" : [
        ]
      }
    ],
    "commit" : "25066f63b8ef614de63520e4120864872c174380",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +669,673 @@    check_categorical: bool = True,\n    check_order: bool = True,\n    rtol: float = 1.0e-5,\n    atol: float = 1.0e-8,\n    obj: str = \"Index\","
  },
  {
    "id" : "b9182b19-38fd-4448-ae39-b87fc5a03c3e",
    "prId" : 37479,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37479#pullrequestreview-521601954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abccd811-aa36-4b8f-938d-908526a22c69",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a versionadded tag 1.2 here",
        "createdAt" : "2020-11-02T01:06:24Z",
        "updatedAt" : "2020-11-02T12:53:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "faf98d39-e527-4d04-a129-7ba88e071360",
        "parentId" : "abccd811-aa36-4b8f-938d-908526a22c69",
        "authorId" : "0dced5cc-c3d4-4915-94b7-1d9166505fcd",
        "body" : "Oh, that's annoying, sorry.\r\nI removed the versionadded tag when I moved the parameters :-(\r\nI have put it back and rebased again.",
        "createdAt" : "2020-11-02T12:55:52Z",
        "updatedAt" : "2020-11-02T12:55:52Z",
        "lastEditedBy" : "0dced5cc-c3d4-4915-94b7-1d9166505fcd",
        "tags" : [
        ]
      }
    ],
    "commit" : "25066f63b8ef614de63520e4120864872c174380",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +701,705 @@        Whether to compare the order of index entries as well as their values.\n        If True, both indexes must contain the same elements, in the same order.\n        If False, both indexes must contain the same elements, but in any order.\n\n        .. versionadded:: 1.2.0"
  },
  {
    "id" : "0c891ee2-7580-44cf-a027-d919db9325a8",
    "prId" : 37844,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37844#pullrequestreview-530599048",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0af6bb3c-6583-4789-b20f-5eb512644dc1",
        "parentId" : null,
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "can you add a new line before `Examples`?",
        "createdAt" : "2020-11-14T19:23:29Z",
        "updatedAt" : "2020-11-15T17:13:05Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      }
    ],
    "commit" : "833eb16b1a4763cd14cb2d93f19600cf7a819358",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +741,745 @@        assertion message.\n\n    Examples\n    --------\n    >>> from pandas.testing import assert_index_equal"
  },
  {
    "id" : "730e48da-6ed1-4d8f-9cef-69da9f922349",
    "prId" : 38157,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38157#pullrequestreview-542456926",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "851d8a8e-a57a-4848-9370-2354e9c79ead",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i would *just* check a single dtype and do the or condition in on L1459",
        "createdAt" : "2020-12-02T02:45:40Z",
        "updatedAt" : "2020-12-02T21:01:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "827efe9c21a1954c1a4888614c2106b7ebbd2712",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1878,1882 @@def is_extension_array_dtype_and_needs_i8_conversion(left_dtype, right_dtype) -> bool:\n    \"\"\"\n    Checks that we have the combination of an ExtensionArraydtype and\n    a dtype that should be converted to int64\n"
  },
  {
    "id" : "be5f4964-d197-4c9f-a074-9ce219cbaa95",
    "prId" : 38202,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38202#pullrequestreview-542427709",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "763b78d5-322b-46d4-9ac8-8deb2d3f336e",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "we have a lot of kwargs already.  would it be viable to call assert_(ea|numpy)_array_equal on lcol._values and rcol._values?",
        "createdAt" : "2020-12-01T17:22:34Z",
        "updatedAt" : "2020-12-24T10:04:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "85d5bc45-947e-4dad-aeeb-6a1dccbab10e",
        "parentId" : "763b78d5-322b-46d4-9ac8-8deb2d3f336e",
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "Probably.\r\nBut I looked inside ``assert_series_equal`` and noticed that there are a lot of cases covered, different dtypes, etc.\r\nSo, I thought that it would be safer to parametrize.\r\nI will try to find another way, as you suggest.",
        "createdAt" : "2020-12-01T17:29:30Z",
        "updatedAt" : "2020-12-24T10:04:17Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      },
      {
        "id" : "dc2dcc42-7971-453e-b96e-d9ca4e51b12e",
        "parentId" : "763b78d5-322b-46d4-9ac8-8deb2d3f336e",
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "@jbrockmendel, I am afraid I can only suggest the following approach for now.\r\n\r\nSplit ``assert_series_equal`` into ``assert_index_equal`` and ``_assert_series_values_equal``.\r\nThe latter one is the same as the original ``assert_series_equal``, but with the ``assert_index_equal`` removed from there.\r\n\r\nThen we can use ``_assert_series_values_equal`` in the loop inside ``assert_frame_equal``.",
        "createdAt" : "2020-12-01T17:48:45Z",
        "updatedAt" : "2020-12-24T10:04:17Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      },
      {
        "id" : "26302f93-30e6-43f5-9e12-6a220f789348",
        "parentId" : "763b78d5-322b-46d4-9ac8-8deb2d3f336e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "works for me",
        "createdAt" : "2020-12-02T00:14:49Z",
        "updatedAt" : "2020-12-24T10:04:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "26ccc831-c8aa-457d-9be1-d5edff104dc6",
        "parentId" : "763b78d5-322b-46d4-9ac8-8deb2d3f336e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm i actually liked your prior implementation (`check_index`) but i guess this is fine.",
        "createdAt" : "2020-12-02T01:21:40Z",
        "updatedAt" : "2020-12-24T10:04:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "62058bf0284db00df8bad7b4e36bb8a5bb1a946e",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +1731,1735 @@                atol=atol,\n                check_index=False,\n            )\n\n"
  },
  {
    "id" : "a79d6a5d-31b0-4449-af28-daac1183549e",
    "prId" : 38202,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38202#pullrequestreview-542401084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2de86e4f-cce7-414f-aa59-b944423290df",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "marginally faster to do `right._ixs(i, axis=1)`",
        "createdAt" : "2020-12-02T00:13:41Z",
        "updatedAt" : "2020-12-24T10:04:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "62058bf0284db00df8bad7b4e36bb8a5bb1a946e",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +1712,1716 @@            assert col in right\n            lcol = left.iloc[:, i]\n            rcol = right.iloc[:, i]\n            # GH #38183\n            # use check_index=False, because we do not want to run"
  },
  {
    "id" : "01e9828d-35ae-4259-be15-bff136245664",
    "prId" : 38626,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38626#pullrequestreview-556646442",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99b95966-e2d7-49b6-ae96-c21dcd591c21",
        "parentId" : null,
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "isn't this code functionally the same as existing?",
        "createdAt" : "2020-12-21T20:23:04Z",
        "updatedAt" : "2020-12-22T03:47:14Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      },
      {
        "id" : "63bafc03-40ff-4cb8-8527-8337000adbcd",
        "parentId" : "99b95966-e2d7-49b6-ae96-c21dcd591c21",
        "authorId" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "body" : "I thought if `expected_warning` is `False` or `None`, then `extra_warnings` does not get appended to because of the `continue`. So the check at the end for raising on extra warnings doesn't get triggered.",
        "createdAt" : "2020-12-21T20:30:11Z",
        "updatedAt" : "2020-12-22T03:47:14Z",
        "lastEditedBy" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "tags" : [
        ]
      },
      {
        "id" : "c7adfec4-49a8-4f41-9c17-45b6e0fc95a0",
        "parentId" : "99b95966-e2d7-49b6-ae96-c21dcd591c21",
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "Current implementation will ignore the else clause below, which consolidates extra warnings. I see that I messed that up in one of my previous PRs. This PR reverts that error.\r\nProbably, if some functions are extracted, that would improve the readability of the logic (maybe in a separate PR).",
        "createdAt" : "2020-12-21T20:30:39Z",
        "updatedAt" : "2020-12-22T03:47:14Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      },
      {
        "id" : "1f819886-9afb-4c9a-a265-0bb9a8346292",
        "parentId" : "99b95966-e2d7-49b6-ae96-c21dcd591c21",
        "authorId" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "body" : "The added tests do raise on master as well, so behavior for them has changed",
        "createdAt" : "2020-12-21T20:31:59Z",
        "updatedAt" : "2020-12-22T03:47:14Z",
        "lastEditedBy" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8193ea1bbd1474de434e791dd33ceb05b1f3bd03",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +2724,2728 @@        extra_warnings = []\n\n        for actual_warning in w:\n            expected_warning = cast(Type[Warning], expected_warning)\n            if expected_warning and issubclass("
  },
  {
    "id" : "f503245d-098b-4d78-8f9b-c75e8eb5bc8c",
    "prId" : 38626,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38626#pullrequestreview-556643035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a095656e-7e16-4668-b804-ddcd4d7455c1",
        "parentId" : null,
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "Yes, this is a good catch.",
        "createdAt" : "2020-12-21T20:25:13Z",
        "updatedAt" : "2020-12-22T03:47:14Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "8193ea1bbd1474de434e791dd33ceb05b1f3bd03",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +2728,2732 @@            if expected_warning and issubclass(\n                actual_warning.category, expected_warning\n            ):\n                saw_warning = True\n"
  }
]