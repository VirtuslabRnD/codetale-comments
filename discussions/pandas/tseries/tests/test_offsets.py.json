[
  {
    "id" : "ce64af89-48a7-4faf-8043-0206c4fd0331",
    "prId" : 4614,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38b90891-dd77-4333-be66-5eba9d7695b2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do these fail before the change?\n",
        "createdAt" : "2013-08-20T13:21:39Z",
        "updatedAt" : "2013-08-22T22:55:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2d2818ac-fa96-48bc-904f-e523ae01ba4d",
        "parentId" : "38b90891-dd77-4333-be66-5eba9d7695b2",
        "authorId" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "body" : "One test fails and one passes.\nOn Aug 20, 2013 9:22 AM, \"jreback\" notifications@github.com wrote:\n\n> In pandas/tseries/tests/test_offsets.py:\n> \n> > @@ -1790,6 +1791,13 @@ def test_freq_offsets():\n> >      off = BDay(1, offset=timedelta(0, -1800))\n> >      assert(off.freqstr == 'B-30Min')\n> > \n> > +class TestCaching(unittest.TestCase):\n> \n> do these fail before the change?\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/pydata/pandas/pull/4614/files#r5867897\n> .\n",
        "createdAt" : "2013-08-20T13:24:53Z",
        "updatedAt" : "2013-08-22T22:55:07Z",
        "lastEditedBy" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "tags" : [
        ]
      },
      {
        "id" : "a50a674d-260b-497d-97f0-efa0a1dbbb1a",
        "parentId" : "38b90891-dd77-4333-be66-5eba9d7695b2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what did this _affect_ meaning, was there a user visible something that wasn't working ?\n",
        "createdAt" : "2013-08-20T13:33:17Z",
        "updatedAt" : "2013-08-22T22:55:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9af81089-e801-41ce-94cf-f05264cce5bb",
        "parentId" : "38b90891-dd77-4333-be66-5eba9d7695b2",
        "authorId" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "body" : "The check as to whether a range is cacheable would have failed, so likely the visible results would be the same but certain ranges would not be cached even when they could be. See the logic I factored out here: https://github.com/cancan101/pandas/commit/f0fa116df21b3ce675a8c3a63f077c5899928e1e for where CacheableOffset is used.\n",
        "createdAt" : "2013-08-20T14:02:17Z",
        "updatedAt" : "2013-08-22T22:55:07Z",
        "lastEditedBy" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "tags" : [
        ]
      },
      {
        "id" : "6cfeb4c1-da5d-4b46-aba6-c5cf84b1806d",
        "parentId" : "38b90891-dd77-4333-be66-5eba9d7695b2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a test for that, e.g. create a range that is cachable and test whether it actually is? (which should fail in the prior version)\n",
        "createdAt" : "2013-08-20T14:23:25Z",
        "updatedAt" : "2013-08-22T22:55:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7135bff1-f308-43a0-827b-5bb332f09392",
        "parentId" : "38b90891-dd77-4333-be66-5eba9d7695b2",
        "authorId" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "body" : "Do you think unit test of `_use_cached_range` would be sufficient?\n",
        "createdAt" : "2013-08-20T14:36:59Z",
        "updatedAt" : "2013-08-22T22:55:07Z",
        "lastEditedBy" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "tags" : [
        ]
      },
      {
        "id" : "63c6b7e8-b9b8-455d-be79-436695d43af5",
        "parentId" : "38b90891-dd77-4333-be66-5eba9d7695b2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "just create a range and test it, should be simple no?\n",
        "createdAt" : "2013-08-20T14:40:50Z",
        "updatedAt" : "2013-08-22T22:55:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b4d9cdcf-f79e-4e2b-8376-056d76204828",
        "parentId" : "38b90891-dd77-4333-be66-5eba9d7695b2",
        "authorId" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "body" : "What exactly do you mean here? I tried the following:\n\n```\n        range1 = DatetimeIndex(start=datetime(2013,1,31), end=datetime(2013,3,29), freq=BusinessMonthEnd(), normalize=True)\n        range2 = DatetimeIndex(start=datetime(2013,1,31), end=datetime(2013,3,29), freq=BusinessMonthEnd(), normalize=True)\n        self.assertIs(range1, range2)\n```\n\nbut apparently even when caching works, it not ensure referential equality.\n\nI can test the new function I created, `_use_cached_range(offset, _normalized, start, end)` but I am not sure how interesting of a test that would be.\n\nAnother option is to inspect the `_daterange_cache` and see that an entry has been added, which when the `CacheableOffset` is used incorrectly does not get added, but after fixing, does.\n",
        "createdAt" : "2013-08-21T12:27:39Z",
        "updatedAt" : "2013-08-22T22:55:07Z",
        "lastEditedBy" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "tags" : [
        ]
      },
      {
        "id" : "9dfe0d65-4a51-43c0-abf5-767023f1b086",
        "parentId" : "38b90891-dd77-4333-be66-5eba9d7695b2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe 2nd soln is way to go....I have found that we spent lots of time making caches (which is good), but then don't subsequently test them so that some change down the line causes the caching not to happen! Just want a test to ensure future changes will be able to catch this\n",
        "createdAt" : "2013-08-21T13:10:07Z",
        "updatedAt" : "2013-08-22T22:55:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ba26217c-1f16-41a8-ac93-019406b176db",
        "parentId" : "38b90891-dd77-4333-be66-5eba9d7695b2",
        "authorId" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "body" : "@jreback: I did have one more idea for testing (I haven't looked to see if this works yet): check the referential equality of the items in `DatetimeIndex` rather than the index itself.\n",
        "createdAt" : "2013-08-21T13:18:26Z",
        "updatedAt" : "2013-08-22T22:55:07Z",
        "lastEditedBy" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "tags" : [
        ]
      },
      {
        "id" : "9c608312-a7d7-4e98-8270-1007a2fb1cf2",
        "parentId" : "38b90891-dd77-4333-be66-5eba9d7695b2",
        "authorId" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "body" : "Okay. So that other idea does not work. TBH, I am not sure I even understand what this instance of caching is trying to save/ accomplish. The following does not even hold:\n\n```\nf = pd.DatetimeIndex(start=\"2013-01\", end=\"2013-03\", freq=\"M\")\nassert f[0] is f[0]\n```\n\nso when i tried this, it also failed:\n\n```\n        range1 = DatetimeIndex(start=datetime(2013,1,31), end=datetime(2013,3,29), freq=BusinessMonthEnd(), normalize=True)\n        range2 = DatetimeIndex(start=datetime(2013,1,31), end=datetime(2013,3,29), freq=BusinessMonthEnd(), normalize=True)\n        self.assertIs(range1[0], range2[0])\n```\n\nAt this point, I think I will just assert that the cache is not empty.\n",
        "createdAt" : "2013-08-22T00:32:58Z",
        "updatedAt" : "2013-08-22T22:55:07Z",
        "lastEditedBy" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "tags" : [
        ]
      },
      {
        "id" : "1b57c5ed-cd14-48ee-9d5e-c520c7e46178",
        "parentId" : "38b90891-dd77-4333-be66-5eba9d7695b2",
        "authorId" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "body" : "Is this supposed be true:\n\n```\nf = pd.DatetimeIndex(start=\"2013-01\", end=\"2013-03\", freq=\"M\")\nassert f[0] is f[0]\n```\n\n? Otherwise I am not sure what the caching is trying to avoid.\n",
        "createdAt" : "2013-08-22T15:24:44Z",
        "updatedAt" : "2013-08-22T22:55:07Z",
        "lastEditedBy" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "tags" : [
        ]
      }
    ],
    "commit" : "25cfcaf3c81b59e44225a752cd347e06a5c63993",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1800,1804 @@    return ret\n\nclass TestCaching(unittest.TestCase):    \n    def test_should_cache_month_end(self):\n        self.assertTrue(MonthEnd()._should_cache())"
  },
  {
    "id" : "0cebf64b-3ceb-4ec5-9022-780428e5dd5f",
    "prId" : 5189,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a864ec3-f2d9-49c7-8759-f26812fb715b",
        "parentId" : null,
        "authorId" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "body" : "Maybe put this in a setUp method?\n",
        "createdAt" : "2013-10-12T19:33:06Z",
        "updatedAt" : "2013-10-14T04:24:20Z",
        "lastEditedBy" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "tags" : [
        ]
      },
      {
        "id" : "141a8925-676a-4837-8d08-2a9dd8c95954",
        "parentId" : "3a864ec3-f2d9-49c7-8759-f26812fb715b",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "If you mean for `_offset_map`, I thought about it, but only matters for certain methods to actually clear the offset map - we can revisit as necessary. The rest we only need to test once - if more testing needed, can refactor then.\n",
        "createdAt" : "2013-10-12T19:51:29Z",
        "updatedAt" : "2013-10-14T04:24:20Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "431e28ca-4ae7-49e5-9b69-fc3ff4250aeb",
        "parentId" : "3a864ec3-f2d9-49c7-8759-f26812fb715b",
        "authorId" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "body" : "Yea, I meant the call: `_offset_map.clear()`. Fair enough\n",
        "createdAt" : "2013-10-12T19:52:48Z",
        "updatedAt" : "2013-10-14T04:24:20Z",
        "lastEditedBy" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c1bae402d4c302a033da7159096d9df288506b0",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +1940,1944 @@        #singletons\n        names += ['S', 'T', 'U', 'BM', 'BMS', 'BQ', 'QS'] # No 'Q'\n        _offset_map.clear()\n        for name in names:\n            offset = get_offset(name)"
  },
  {
    "id" : "17d4dfb9-bdb0-4734-8833-ae59c33aac93",
    "prId" : 5189,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "513c713e-0a5e-4941-9dda-d9d9f2136dc6",
        "parentId" : null,
        "authorId" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "body" : "Does it make sense to assert on the rulecode as well as the str and repr?\n",
        "createdAt" : "2013-10-12T19:34:09Z",
        "updatedAt" : "2013-10-14T04:24:20Z",
        "lastEditedBy" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "tags" : [
        ]
      },
      {
        "id" : "4dfb88a4-8a53-4875-92d5-1233fa1e4204",
        "parentId" : "513c713e-0a5e-4941-9dda-d9d9f2136dc6",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "No (and that wouldn't actually be true for all of them). Goal is to just to maintain backward compatibility of repr here.\n",
        "createdAt" : "2013-10-13T20:04:13Z",
        "updatedAt" : "2013-10-14T04:24:20Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c1bae402d4c302a033da7159096d9df288506b0",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +1944,1948 @@            offset = get_offset(name)\n            self.assertEqual(repr(offset), name)\n            self.assertEqual(str(offset), name)\n\n"
  },
  {
    "id" : "033f2930-c350-47a9-a726-50a5e9b93b66",
    "prId" : 5292,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b89ee61-b461-4f41-9d6d-b396ef901cd9",
        "parentId" : null,
        "authorId" : "736552dc-d916-4dba-807f-243fd3b79abd",
        "body" : "@jreback - want to have a look at these test cases? Went with a limited set of all of the possible `DateOffset`s\n",
        "createdAt" : "2014-05-06T23:07:49Z",
        "updatedAt" : "2014-08-19T20:54:15Z",
        "lastEditedBy" : "736552dc-d916-4dba-807f-243fd3b79abd",
        "tags" : [
        ]
      },
      {
        "id" : "ee8cf852-76fe-404e-8eee-d53bd084844d",
        "parentId" : "1b89ee61-b461-4f41-9d6d-b396ef901cd9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "This should be a sub-class of `object`, then use it to inherit in offsets that should test this\n\ne.g.\n\n`class TestBusinessDay(TestDST, Base)`\n",
        "createdAt" : "2014-05-08T13:28:13Z",
        "updatedAt" : "2014-08-19T20:54:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a423345654a00371513859a1584835f8ea98216",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +3111,3115 @@\n\nclass TestDST(tm.TestCase):\n    \"\"\"\n    test DateOffset additions over Daylight Savings Time"
  },
  {
    "id" : "b5b5afab-6f5b-41e2-8481-9a532b01b844",
    "prId" : 7375,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42fdb351-ee52-4a12-9826-584e708546e8",
        "parentId" : null,
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "Is this an API change?\n",
        "createdAt" : "2014-06-07T06:34:30Z",
        "updatedAt" : "2014-06-11T11:52:55Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      },
      {
        "id" : "34d39a16-63c0-4aa1-b349-383125cf38f9",
        "parentId" : "42fdb351-ee52-4a12-9826-584e708546e8",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Depends on definition. Whether to regard `BMonthEnd` and `MonthEnd` inconsistencies are spec or bug. From users point of view, I think it looks a bug as most of other offsets behave differently.\n",
        "createdAt" : "2014-06-07T21:57:34Z",
        "updatedAt" : "2014-06-11T11:52:55Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "728b0a7451f9d3a93559280724a9bf348cbfd21d",
    "line" : 258,
    "diffHunk" : "@@ -1,1 +1396,1400 @@        dt = datetime(2007, 1, 1, 3)\n\n        result = dt + BMonthEnd(normalize=True)\n        expected = dt.replace(hour=0) + BMonthEnd()\n        self.assertEqual(result, expected)"
  }
]