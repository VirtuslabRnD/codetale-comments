[
  {
    "id" : "7258bde7-61c9-4d5d-9b55-bda1e7867f65",
    "prId" : 5701,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4942f818-d4f5-4c71-ab77-4ec48f51c5fb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you move to module level imports? (or does it cause a problem)\n",
        "createdAt" : "2014-01-14T13:23:28Z",
        "updatedAt" : "2014-01-15T02:56:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "66035b13-e273-49a0-8ec7-fd81f1f3fec1",
        "parentId" : "4942f818-d4f5-4c71-ab77-4ec48f51c5fb",
        "authorId" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "body" : "There are circular import problems from that I recall.\n",
        "createdAt" : "2014-01-14T13:26:16Z",
        "updatedAt" : "2014-01-15T02:56:43Z",
        "lastEditedBy" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "tags" : [
        ]
      },
      {
        "id" : "95e87d3b-e371-4ac1-ac42-6d6b691c07b1",
        "parentId" : "4942f818-d4f5-4c71-ab77-4ec48f51c5fb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "np them\n",
        "createdAt" : "2014-01-14T13:26:53Z",
        "updatedAt" : "2014-01-15T02:56:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "cfb9c98ec2a039ec74d6c9f44bd132ad18f21bf7",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +642,646 @@                             date_format=None, **kwargs):\n        data = self._get_object_index()\n        from pandas.core.format import Datetime64Formatter\n        return Datetime64Formatter(values=data,\n                                   nat_rep=na_rep,"
  },
  {
    "id" : "8d12c7ed-8fa6-4df4-b18a-1de6b8caf274",
    "prId" : 6813,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ce73012-511d-4b16-a2d3-21d9bac94d66",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "this is slightly confusing to me - we deprecated `offset` as a parameter but not the actual `offset` property on the object?\n",
        "createdAt" : "2014-04-06T01:04:13Z",
        "updatedAt" : "2014-04-06T01:25:21Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "3054004d-6f07-401c-b99c-8cf5377f06a7",
        "parentId" : "2ce73012-511d-4b16-a2d3-21d9bac94d66",
        "authorId" : "648f950c-44a2-471a-94a8-95e7971cdf30",
        "body" : "Correct; there is no notation I can find that says the offset property of the pandas Timestamp object is deperated.  However, freq is an alias of offset:\n\nhttps://github.com/pydata/pandas/blob/master/pandas/tslib.pyx#L258\n",
        "createdAt" : "2014-04-06T01:17:50Z",
        "updatedAt" : "2014-04-06T01:25:21Z",
        "lastEditedBy" : "648f950c-44a2-471a-94a8-95e7971cdf30",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0bf1d7081e1a9d51ca525bad094e75890ada1f1",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +204,208 @@            else:\n                data = tools.to_datetime(data, errors='raise')\n                data.offset = freq\n                if isinstance(data, DatetimeIndex):\n                    if name is not None:"
  },
  {
    "id" : "e6cebb27-a8c0-4ab3-9c75-29b8c8cb4ae1",
    "prId" : 8753,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cd9c684-e560-4a82-991a-520a20b7f247",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a test for this (in the appropriate section where the partial string resos are tested)\n",
        "createdAt" : "2014-11-11T14:26:17Z",
        "updatedAt" : "2014-11-19T11:08:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b735ffc75e4cea35b14866ada4c58a42551fb9dc",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +1144,1148 @@                    Timestamp(Timestamp(st + offsets.Second(),\n                                        tz=self.tz).value - 1))\n        elif reso == 'microsecond':\n            st = datetime(parsed.year, parsed.month, parsed.day,\n                          parsed.hour, parsed.minute, parsed.second,"
  },
  {
    "id" : "a2597ca0-3de9-4f1b-b660-2e75f84cc89c",
    "prId" : 10744,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6d9f3bc-dcf4-4cdb-96d7-35e0069ce5da",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add this to the API.rst, also add a versionadded \n",
        "createdAt" : "2015-08-13T10:35:57Z",
        "updatedAt" : "2015-08-13T12:16:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac975417636ae37eaa14dc3d5c23db80ceaf0a97",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +849,853 @@            return result\n\n    def to_perioddelta(self, freq):\n        \"\"\"\n        Calcuates TimedeltaIndex of difference between index"
  },
  {
    "id" : "f93b6ab9-2a8a-4a23-8bd9-2a9dd874a2a3",
    "prId" : 11148,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e95d245-a486-4159-b93c-ef8e0b7c69e6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "`infer` is not a valid kw\n",
        "createdAt" : "2015-10-05T11:16:42Z",
        "updatedAt" : "2015-10-14T20:07:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1a629e89-b74c-4305-ad0c-cdd42d630000",
        "parentId" : "2e95d245-a486-4159-b93c-ef8e0b7c69e6",
        "authorId" : "214b00be-e9f2-4883-878c-26eab43cc650",
        "body" : "@jreback I think you added it when we were working on the `PeriodIndex` issues? https://github.com/pydata/pandas/blob/master/pandas/core/index.py#L372\n",
        "createdAt" : "2015-10-09T23:00:17Z",
        "updatedAt" : "2015-10-14T20:07:30Z",
        "lastEditedBy" : "214b00be-e9f2-4883-878c-26eab43cc650",
        "tags" : [
        ]
      },
      {
        "id" : "0c8f1190-fef5-4c33-b375-95830a11f13b",
        "parentId" : "2e95d245-a486-4159-b93c-ef8e0b7c69e6",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ahh right.. forgot about that @maximilianr \n",
        "createdAt" : "2015-10-11T15:24:27Z",
        "updatedAt" : "2015-10-14T20:07:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2f102f4b1a0cfdddd1afe50aabbbe3f28914124",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +758,762 @@            return self.tz_convert('UTC').tz_localize(None)\n        elif dtype == str:\n            return self._shallow_copy(values=self.format(), infer=True)\n        else:  # pragma: no cover\n            raise ValueError('Cannot cast DatetimeIndex to dtype %s' % dtype)"
  },
  {
    "id" : "5280fbb1-ec25-4cd8-bb3c-6d7b6f0e3370",
    "prId" : 14164,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "552b3781-9208-45ec-9756-3fd990729433",
        "parentId" : null,
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "can this condition move to `base`?\n",
        "createdAt" : "2016-09-07T01:58:46Z",
        "updatedAt" : "2016-09-07T10:26:23Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "fd6aee86-672b-43ad-827b-6bca70f755d7",
        "parentId" : "552b3781-9208-45ec-9756-3fd990729433",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I moved the condition to base, but left it here as well (to follow the same pattern as for the other ops: one method in base (eg `_add_delta`) which in the subclass handles both scalars as index). OK?\n",
        "createdAt" : "2016-09-07T08:45:03Z",
        "updatedAt" : "2016-09-07T10:26:23Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "21c6cec62ae2ad1b3aa8356962365fdf0383c5d2",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +732,736 @@        # subtract a datetime from myself, yielding a TimedeltaIndex\n        from pandas import TimedeltaIndex\n        if isinstance(other, DatetimeIndex):\n            # require tz compat\n            if not self._has_same_tz(other):"
  },
  {
    "id" : "d5240ba4-759f-4eb7-a3b0-1207ca480268",
    "prId" : 14164,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8fc9b4b-8658-4ce5-a6b7-603249bb39f1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is fine. but just want to check that our naming convention is for these types of routines is consistent.\n",
        "createdAt" : "2016-09-07T10:53:12Z",
        "updatedAt" : "2016-09-07T10:53:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "26a46905-6c9b-49d0-b7b6-6f7ed02f0c1c",
        "parentId" : "e8fc9b4b-8658-4ce5-a6b7-603249bb39f1",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "for adding a Timedelta-like vs TimedeltaIndex, there are the method `_add_delta_td` and `_add_delta_tdi` which are called from `_add_delta`, so copied that naming convention\n",
        "createdAt" : "2016-09-07T10:56:41Z",
        "updatedAt" : "2016-09-07T10:56:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "21c6cec62ae2ad1b3aa8356962365fdf0383c5d2",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +756,760 @@        return TimedeltaIndex(result, name=self.name, copy=False)\n\n    def _sub_datelike_dti(self, other):\n        \"\"\"subtraction of two DatetimeIndexes\"\"\"\n        if not len(self) == len(other):"
  }
]