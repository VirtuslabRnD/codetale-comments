[
  {
    "id" : "b5dee3dd-427c-4981-bce9-936b32751a7e",
    "prId" : 4379,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76d4d076-e7b7-4f92-bf5b-3b0b3af35d24",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "this is the key change\n",
        "createdAt" : "2013-07-27T18:08:36Z",
        "updatedAt" : "2013-07-30T05:22:39Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "e546e5335a13afdb45b954f1072115f9f0aea8b6",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +1028,1032 @@\n    def _apply_meta(self, rawarr):\n        if not isinstance(rawarr, PeriodIndex):\n            rawarr = rawarr.view(PeriodIndex)\n        rawarr.freq = self.freq"
  },
  {
    "id" : "f36ad1da-1f4b-46c0-9c4b-0018f193be7f",
    "prId" : 7485,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36bb1ab5-0ccf-4489-8fdb-13ea1b6772ae",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this tested somewhere?\n",
        "createdAt" : "2014-06-19T11:20:45Z",
        "updatedAt" : "2014-06-19T14:54:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "66020073f7c1d9fdfc9e0617326fe84c67a8732c",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +163,167 @@            return Period(ordinal=ordinal, freq=self.freq)\n        else:  # pragma: no cover\n            return NotImplemented\n\n    def __sub__(self, other):"
  },
  {
    "id" : "ef68661b-bcdc-4158-bcb8-f1b6713185fd",
    "prId" : 7891,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cc57a77-887b-4424-bd11-7c57632778e2",
        "parentId" : null,
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "I'd like to take the opportunity and strongly advise against `except:` constructs I've seen a lot in the sources: among other things it catches `KeyboardInterrupt` and `SystemExit`, and _usually_ it's not nice to have them pass silently.  It's better to use `except Exception:` instead.\n",
        "createdAt" : "2014-08-06T09:43:18Z",
        "updatedAt" : "2014-08-06T18:45:59Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      },
      {
        "id" : "1f13903d-278b-4de6-a01b-c8938d5081a9",
        "parentId" : "2cc57a77-887b-4424-bd11-7c57632778e2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm. not sure why this shows up. was alreeady there. You have a point for the most part I don't think it matters.\n",
        "createdAt" : "2014-08-06T12:16:37Z",
        "updatedAt" : "2014-08-06T18:45:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5021ddb1-d35e-473c-bfd7-e5f91e74e4c2",
        "parentId" : "2cc57a77-887b-4424-bd11-7c57632778e2",
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "In absence of punctuation I have a hard time making sense of your last sentence.  But nevertheless, it does matter (would matter to me, at least) when you're interrupting some long operation (say, unpickling an object on a remote filesystem over a slow connection) and instead of stopping completely it goes on simply choosing another code path.\n",
        "createdAt" : "2014-08-06T14:03:25Z",
        "updatedAt" : "2014-08-06T18:45:59Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      },
      {
        "id" : "0a823008-a383-4339-932a-c902d3ef5122",
        "parentId" : "2cc57a77-887b-4424-bd11-7c57632778e2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sorry wasn't clear. I am not sure why that section showed up in the diff as I didn't add it.\n\nregardless, I agree with your general point about being explicit about only catching `Exception` rather than all (though on a single operation I think it hardly matters from a practical point of view). Pls create an issue to record this (I think prob good as a first pr). I think it was just 'done' that way, so continued on....\n",
        "createdAt" : "2014-08-06T14:07:13Z",
        "updatedAt" : "2014-08-06T18:45:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d3cb3f36e2f7b415531e3b910f490c01657ecca",
    "line" : 143,
    "diffHunk" : "@@ -1,1 +831,835 @@            try:\n                other = PeriodIndex(other)\n            except:\n                return False\n"
  },
  {
    "id" : "d663e8fa-87ab-402f-a0ef-ac66d353ca88",
    "prId" : 7966,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a11ea321-6630-4aa2-ba60-46604eda33a4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, does it make sense to push _add_delta (and DatetimeIndex._add_delta) to base  into order to combine them (its currently marked as non-implemented in `DatetimeIndexOpsMixin`)?\n",
        "createdAt" : "2014-08-08T17:02:01Z",
        "updatedAt" : "2014-08-09T06:55:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e8937f82-dfc1-4f98-8b1e-bb8d71d20dfa",
        "parentId" : "a11ea321-6630-4aa2-ba60-46604eda33a4",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "I feel this gets more complicated, because each `_add_delta` handles its internal representation (UTC time in `DatetimeIndex` and ordinal in `PeriodIndex`).\nhttps://github.com/pydata/pandas/blob/master/pandas/tseries/index.py#L615\n",
        "createdAt" : "2014-08-08T21:10:59Z",
        "updatedAt" : "2014-08-09T06:55:32Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "61d28cf7-8217-466e-b786-2f0f4a480e14",
        "parentId" : "a11ea321-6630-4aa2-ba60-46604eda33a4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, not a big deal (always like to have centralized stuff like this), but sometimes makes too complicated. if in the future you think can integrate then ok.\n",
        "createdAt" : "2014-08-08T21:12:09Z",
        "updatedAt" : "2014-08-09T06:55:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f6ac5bcf301be2efaf32736b2a6258b4253e708",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +898,902 @@\n    def _add_delta(self, other):\n        if isinstance(other, (timedelta, np.timedelta64, offsets.Tick)):\n            offset = frequencies.to_offset(self.freq)\n            if isinstance(offset, offsets.Tick):"
  },
  {
    "id" : "a5f93d8b-2702-4512-951f-1739100eb06a",
    "prId" : 10051,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "222d204d-a7dc-4b18-bb3a-30ced1b93437",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add here a bit more explanation about what the end/start means?\n",
        "createdAt" : "2015-05-02T20:52:18Z",
        "updatedAt" : "2015-05-09T18:51:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "05eb9678d8c4fd2cf6ba90d6d9f765401c1a495a",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +365,369 @@            a frequency\n        how : str {'E', 'S'}\n            'E', 'END', or 'FINISH' for end,\n            'S', 'START', or 'BEGIN' for start.\n            Whether the elements should be aligned to the end"
  },
  {
    "id" : "c381dfd6-2f47-4703-8ed2-80879c36a42b",
    "prId" : 10051,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b60ce755-2590-4d4f-ad4a-4fdb1e452972",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "maybe also show how `pidx` looks like? then it is easier to compare it with the output of ´asfreq´\n",
        "createdAt" : "2015-05-02T20:52:57Z",
        "updatedAt" : "2015-05-09T18:51:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "05eb9678d8c4fd2cf6ba90d6d9f765401c1a495a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +378,382 @@        Examples\n        --------\n        >>> pidx = pd.period_range('2010-01-01', '2015-01-01', freq='A')\n        >>> pidx\n        <class 'pandas.tseries.period.PeriodIndex'>"
  },
  {
    "id" : "af7f1c80-712d-41cd-b961-d26dcc54b3f0",
    "prId" : 10638,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73079f10-8a4a-45e0-9545-a316bb3929c9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "doesn't this need to go in `tseries/base`, e.g. ufuncs are not valid for any datetimelike?\n",
        "createdAt" : "2015-07-23T17:05:37Z",
        "updatedAt" : "2015-09-06T03:27:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "08334b36-0f86-49fd-8fa0-2662a403ce7b",
        "parentId" : "73079f10-8a4a-45e0-9545-a316bb3929c9",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "`timedelta64` and `datetime64` are real numpy dtypes, so ufuncs will already choke on them:\n\n```\nIn [1]: import pandas as pd\n\nIn [2]: i = pd.date_range('2000-01-01', periods=5)\n\nIn [3]: import numpy as np\n\nIn [4]: np.square(i)\nTypeError: ufunc 'square' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\n\nIn [5]: np.square(i.to_period())\nOut[5]:\nPeriodIndex(['330671-10-02', '330731-10-03', '330791-10-05', '330851-10-09',\n             '330911-10-16'],\n            dtype='int64', freq='D')\n```\n",
        "createdAt" : "2015-07-23T17:57:00Z",
        "updatedAt" : "2015-09-06T03:27:51Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "2d6eb0c0-29c6-4a3e-bb3a-9dcaf2d33f71",
        "parentId" : "73079f10-8a4a-45e0-9545-a316bb3929c9",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "I agree that tests for these other index types would be a good idea, though.\n\nAlso, I think we should probably prohibit all ufuncs on PeriodIndex, not just those that return float. For example, it's not valid to square periods, even though that returns integers.\n",
        "createdAt" : "2015-07-23T17:58:56Z",
        "updatedAt" : "2015-09-06T03:27:51Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "f99ba12f-18fc-4f76-940f-79d9296618d7",
        "parentId" : "73079f10-8a4a-45e0-9545-a316bb3929c9",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Raising `TypeError` in `__array_wrap__` affects to arithmetic using `np.array`. Currently, it works:\n\n```\npd.PeriodIndex(['2011', '2012'], freq='A') + np.array([1, 2])\n# PeriodIndex(['2012', '2014'], dtype='int64', freq='A-DEC')\n```\n\nSo it can't be prohibited?\n",
        "createdAt" : "2015-08-17T22:35:01Z",
        "updatedAt" : "2015-09-06T03:27:51Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "65d31568-c239-4315-ab14-7a6785b31ede",
        "parentId" : "73079f10-8a4a-45e0-9545-a316bb3929c9",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "PeriodIndex + integer ndarray should not be expected to work -- the array\ndoes not have the right type!\n\nOn Mon, Aug 17, 2015 at 3:35 PM, Sinhrks notifications@github.com wrote:\n\n> In pandas/tseries/period.py\n> https://github.com/pydata/pandas/pull/10638#discussion_r37245206:\n> \n> > @@ -281,6 +281,16 @@ def **contains**(self, key):\n> >              return False\n> >          return key.ordinal in self._engine\n> > -    def **array_wrap**(self, result, context=None):\n> \n> Raising TypeError in **array_wrap** affects to arithmetic using np.array.\n> Currently, it works:\n> \n> pd.PeriodIndex(['2011', '2012'], freq='A') + np.array([1, 2])\n> \n> # PeriodIndex(['2012', '2014'], dtype='int64', freq='A-DEC')\n> \n> So it can't be prohibited?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/pydata/pandas/pull/10638/files#r37245206.\n",
        "createdAt" : "2015-08-17T22:46:40Z",
        "updatedAt" : "2015-09-06T03:27:51Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "08767c5e-5c1d-4610-b3f8-6fff01a80a47",
        "parentId" : "73079f10-8a4a-45e0-9545-a316bb3929c9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually I disagree\nadd integers to period works and makes sense as its a freq op\n",
        "createdAt" : "2015-08-17T22:58:41Z",
        "updatedAt" : "2015-09-06T03:27:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "71557e28-e5a1-48c5-81e8-8506b14d041f",
        "parentId" : "73079f10-8a4a-45e0-9545-a316bb3929c9",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Yes, because this is a valid freq shift, `np.array` should work as the same. \n\n```\npd.PeriodIndex(['2011', '2012'], freq='A') + 1\n# PeriodIndex(['2012', '2013'], dtype='int64', freq='A-DEC')\n```\n\nAnd #10744 has been done expecting arithmetic using `np.array` works.\n",
        "createdAt" : "2015-08-17T23:02:30Z",
        "updatedAt" : "2015-09-06T03:27:51Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "ef291d25-7632-499f-b6cc-686ed8b5a008",
        "parentId" : "73079f10-8a4a-45e0-9545-a316bb3929c9",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Reconsidered this, and defining `_add_ndarray` for `PeriodIndex` may be an alternative. I think options are:\n1. Always raise `TypeError` in `__array_wraps__`. Support `ndarray` ops in another methods (`PeriodIndex` must be lhs).\n2. Raise `TypeError` if `__array_wraps__` gets non-integers. Some `ufunc` which return `int` outputs meaningless results (like `square`)\n\nNOTE: Maybe not intentional, `PeriodIndex.shift` works for `ndarray`. Thus we can use `shift` for ndarray ops.\n",
        "createdAt" : "2015-08-18T11:38:10Z",
        "updatedAt" : "2015-09-06T03:27:51Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "e15fa339-1ee8-4f81-98e5-3e04325f09d4",
        "parentId" : "73079f10-8a4a-45e0-9545-a316bb3929c9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@sinhrks remember that ATM `PeriodIndex` is an odd duck. Its a real `int64` dtyped array, that happens to have boxing. So it allows any integer-like ops (as opposed to `DatetimeIndex` which prohibits a lot more because its `M8[ns]`). \n\nSo its needs handling to error on prohibited ops. So on on raising in `__array_wraps__` for prohibited ops, but this might require some dispatching mechanism to the sub-class to determine what is allowed. E.g. we do it similarly like this in the `_add_numeric_ops` and like routines.\n",
        "createdAt" : "2015-08-18T12:09:28Z",
        "updatedAt" : "2015-09-06T03:27:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e244bdd0547846d9a53997bc723df9d900c37393",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +309,313 @@        return key.ordinal in self._engine\n\n    def __array_wrap__(self, result, context=None):\n        \"\"\"\n        Gets called after a ufunc. Needs additional handling as"
  },
  {
    "id" : "b58e7a70-fa2d-4de7-8f3f-42c4d9c1ddce",
    "prId" : 10718,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4950030d-fe71-4449-adf7-2f85868fd648",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "when we add a real period dtype then can fix this\ncan u add a xref to that issue (point to this PR)\n",
        "createdAt" : "2015-08-08T13:36:08Z",
        "updatedAt" : "2015-08-08T14:15:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec2064aecfe943215dd812898d8737f6391996f5",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +536,540 @@    def dtype_str(self):\n        \"\"\" return the dtype str of the underlying data \"\"\"\n        return self.inferred_type\n\n    @property"
  },
  {
    "id" : "802dc23c-903c-496e-a23d-1bf4400dcf53",
    "prId" : 13983,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3ee99b4-57df-4c9e-9bcc-4c21f8d44e4a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't this be handled in the super?\n",
        "createdAt" : "2016-08-27T13:55:15Z",
        "updatedAt" : "2016-08-31T21:44:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "02241f75-c9e1-4c29-b367-c8776288a19a",
        "parentId" : "f3ee99b4-57df-4c9e-9bcc-4c21f8d44e4a",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "This is needed to handle `NaT`. #13979 and #13984 makes `_get_unique_index` itself unnecessary.\n",
        "createdAt" : "2016-08-29T01:44:34Z",
        "updatedAt" : "2016-08-31T21:44:15Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "543524700440ff9ed7e17c6d93fc5937499db6e5",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +782,786 @@        wrap Index._get_unique_index to handle NaT\n        \"\"\"\n        res = super(PeriodIndex, self)._get_unique_index(dropna=dropna)\n        if dropna:\n            res = res.dropna()"
  },
  {
    "id" : "dd1b9c82-de92-4568-ba33-55c7f62e3dea",
    "prId" : 14931,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14931#pullrequestreview-13855592",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ab40768-9008-481c-8271-4d92633db0ae",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would leave this here, maybe causing the ndim test sto fail",
        "createdAt" : "2016-12-20T21:17:21Z",
        "updatedAt" : "2016-12-20T22:30:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e754bf1c-87a9-497b-8bfc-4240dc540100",
        "parentId" : "6ab40768-9008-481c-8271-4d92633db0ae",
        "authorId" : "214b00be-e9f2-4883-878c-26eab43cc650",
        "body" : "It's not what's causing the test failure (it could only be different if `cls != PeriodIndex`",
        "createdAt" : "2016-12-20T21:33:53Z",
        "updatedAt" : "2016-12-20T22:30:01Z",
        "lastEditedBy" : "214b00be-e9f2-4883-878c-26eab43cc650",
        "tags" : [
        ]
      }
    ],
    "commit" : "72b14aab87dafb949d9348feaf9cb6d1bde95eff",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +307,311 @@                raise TypeError(\"PeriodIndex can't take floats\")\n            else:\n                return cls(values, name=name, freq=freq, **kwargs)\n\n        values = np.array(values, dtype='int64', copy=False)"
  }
]