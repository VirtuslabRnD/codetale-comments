[
  {
    "id" : "cde2cdd2-fabc-4081-94e2-6dfdd39c0b5d",
    "prId" : 5004,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96142241-5261-45fd-bc1a-9ea1c61bafe2",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "just define a no argument function (add add `global` declarations where necessary) and call it. then you don't need to have all these underscored variables (obviously keep the ones that were there before)\n",
        "createdAt" : "2013-10-04T20:59:22Z",
        "updatedAt" : "2013-10-22T11:54:13Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "c659fc8a-db75-40ff-995b-47379a3ce0ce",
        "parentId" : "96142241-5261-45fd-bc1a-9ea1c61bafe2",
        "authorId" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "body" : "@cpcloud What do you think about moving this logic to a classmethod on the respective offsets?\nAlso I am not quite sure what you mean by the function.\n",
        "createdAt" : "2013-10-05T00:43:17Z",
        "updatedAt" : "2013-10-22T11:54:13Z",
        "lastEditedBy" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "tags" : [
        ]
      },
      {
        "id" : "4b31fbfd-2e31-4cbf-a08c-13b82a4451f4",
        "parentId" : "96142241-5261-45fd-bc1a-9ea1c61bafe2",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "classmethod probably ok....\n\nby function i just meant something like\n\n``` python\ndef initializer():\n    # your init code here\ninitializer()\n```\n",
        "createdAt" : "2013-10-05T00:46:11Z",
        "updatedAt" : "2013-10-22T11:54:13Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "a36a172b-f0b6-4ede-b763-d28f0806f3ae",
        "parentId" : "96142241-5261-45fd-bc1a-9ea1c61bafe2",
        "authorId" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "body" : "The idea with classmethods is to put the logic for generating all instances of a given offset with the offset itself rather than having the code in separate files\n",
        "createdAt" : "2013-10-05T00:50:07Z",
        "updatedAt" : "2013-10-22T11:54:13Z",
        "lastEditedBy" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "tags" : [
        ]
      },
      {
        "id" : "cf31c333-7226-4679-93cd-505d40514182",
        "parentId" : "96142241-5261-45fd-bc1a-9ea1c61bafe2",
        "authorId" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "body" : "initializer for now\n",
        "createdAt" : "2013-10-05T01:10:13Z",
        "updatedAt" : "2013-10-22T11:54:13Z",
        "lastEditedBy" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "tags" : [
        ]
      }
    ],
    "commit" : "de0563616bb48443a5f6286e1b7726ff780ec694",
    "line" : null,
    "diffHunk" : "@@ -1,1 +231,235 @@\n#TODO: Can this be killed?\nfor _i, _weekday in enumerate(['MON', 'TUE', 'WED', 'THU', 'FRI']):\n    for _iweek in range(4):\n        _name = 'WOM-%d%s' % (_iweek + 1, _weekday)"
  },
  {
    "id" : "d6683931-8974-433e-8e09-a3561bbaec88",
    "prId" : 5004,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cc80117-7024-4e05-86b7-b3573894246a",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "can you catch the `KeyError` here as well and provide a more informative error message? it's slightly annoying when you pass a frequency that isn't defined and you get a `KeyError`. there _is_ a test for this, so it's acknowledged that it does raise but it's not very user-friendly\n",
        "createdAt" : "2013-10-04T21:01:12Z",
        "updatedAt" : "2013-10-22T11:54:13Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "e45d3ea7-c348-46c8-a6c4-bd421e6b4a3e",
        "parentId" : "9cc80117-7024-4e05-86b7-b3573894246a",
        "authorId" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "body" : "Fixed.\n",
        "createdAt" : "2013-10-05T00:17:06Z",
        "updatedAt" : "2013-10-22T11:54:13Z",
        "lastEditedBy" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "tags" : [
        ]
      }
    ],
    "commit" : "de0563616bb48443a5f6286e1b7726ff780ec694",
    "line" : null,
    "diffHunk" : "@@ -1,1 +627,631 @@            raise ValueError(\"Unknown freqstr: %s\" % freqstr)\n        \n        return _period_code_map[alias]\n\n"
  },
  {
    "id" : "174f14ae-033b-4086-bfa9-595c26afdf9d",
    "prId" : 5004,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9d16ca5-0361-43e4-9f99-3c7ce2784376",
        "parentId" : null,
        "authorId" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "body" : "@cpcloud is it acceptable to change the exception from `KeyError` to `ValueError`? I will have to change the unit test for this.\n",
        "createdAt" : "2013-10-06T19:08:13Z",
        "updatedAt" : "2013-10-22T11:54:13Z",
        "lastEditedBy" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "tags" : [
        ]
      },
      {
        "id" : "9fda04dc-5941-4823-b669-54eb45849c0b",
        "parentId" : "d9d16ca5-0361-43e4-9f99-3c7ce2784376",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "sure ... that makes a lot more sense. a user doesn't care whether the period aliases are stored in a `dict`, all they care about is that they passed an invalid freqstr value, so `ValueError` is much more appropritae\n",
        "createdAt" : "2013-10-06T19:09:44Z",
        "updatedAt" : "2013-10-22T11:54:13Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "de0563616bb48443a5f6286e1b7726ff780ec694",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +625,629 @@            alias = _period_alias_dict[freqstr]\n        except KeyError:\n            raise ValueError(\"Unknown freqstr: %s\" % freqstr)\n        \n        return _period_code_map[alias]"
  },
  {
    "id" : "70659351-9a81-41e0-bb77-df329fe53543",
    "prId" : 5004,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d89a9be-16a3-4852-b167-94d84db2255b",
        "parentId" : null,
        "authorId" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "body" : "@cpcloud I am thinking that this should also be changed to raise ValueError rather than KeyError\n",
        "createdAt" : "2013-10-06T19:16:36Z",
        "updatedAt" : "2013-10-22T11:54:13Z",
        "lastEditedBy" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "tags" : [
        ]
      },
      {
        "id" : "15bef289-e4cc-426b-9ac3-4b06e3e2deca",
        "parentId" : "4d89a9be-16a3-4852-b167-94d84db2255b",
        "authorId" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "body" : "NM. That is already handled in _period_str_to_code\n",
        "createdAt" : "2013-10-06T19:38:20Z",
        "updatedAt" : "2013-10-22T11:54:13Z",
        "lastEditedBy" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "tags" : [
        ]
      }
    ],
    "commit" : "de0563616bb48443a5f6286e1b7726ff780ec694",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +95,99 @@                code = _period_str_to_code(freqstr[0])\n                stride = freqstr[1]\n            except:\n                if com.is_integer(freqstr[1]):\n                    raise"
  }
]