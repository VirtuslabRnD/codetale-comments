[
  {
    "id" : "a620d8f7-bab3-4e35-b8f2-3ba59d2ef928",
    "prId" : 8044,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c04740f5-b030-41fe-b62d-1ecab09d7a6b",
        "parentId" : null,
        "authorId" : "ce5b80c5-1710-45f2-84ad-d219a8c2573e",
        "body" : "For Python versions >= 2.7 or >= 3.1, can I suggest using `PyFloat_FromString` instead of using the platform's `strtod`?  The former is platform-independent, and is guaranteed to ensure that round-tripping works correctly.\n",
        "createdAt" : "2014-09-22T08:21:19Z",
        "updatedAt" : "2014-09-22T08:21:19Z",
        "lastEditedBy" : "ce5b80c5-1710-45f2-84ad-d219a8c2573e",
        "tags" : [
        ]
      },
      {
        "id" : "835e4688-df44-40bf-9446-96a26a378a15",
        "parentId" : "c04740f5-b030-41fe-b62d-1ecab09d7a6b",
        "authorId" : "ce5b80c5-1710-45f2-84ad-d219a8c2573e",
        "body" : "(Or perhaps just `_Py_dg_strtod` from `Python/dtoa.c`, bypassing the creation of a Python float.)\n",
        "createdAt" : "2014-09-22T08:22:28Z",
        "updatedAt" : "2014-09-22T08:22:28Z",
        "lastEditedBy" : "ce5b80c5-1710-45f2-84ad-d219a8c2573e",
        "tags" : [
        ]
      },
      {
        "id" : "a9a62067-0e6b-4d4d-8ccc-396ac4961f37",
        "parentId" : "c04740f5-b030-41fe-b62d-1ecab09d7a6b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@amras1 ?\n\nlooks like `PyFloat_FromString` is deprecated: https://docs.python.org/2/c-api/float.html\n\ncan you show an example of why using `strtod` is an issue? \n",
        "createdAt" : "2014-09-22T13:04:03Z",
        "updatedAt" : "2014-09-22T13:04:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9b67fedc-7591-4c02-b18e-cd5cb0ebe322",
        "parentId" : "c04740f5-b030-41fe-b62d-1ecab09d7a6b",
        "authorId" : "ce5b80c5-1710-45f2-84ad-d219a8c2573e",
        "body" : "`PyFloat_FromString` isn't deprecated!  It's very much current code.\n\nThe roundtripping of Python floats (i.e., the fact that `float(repr(x)) == x` for all finite floats `x`) depends on `strtod` giving correctly-rounded results.  Unfortunately, that's not a guarantee that most operating systems make for their `strtod` implementations, which is why we (i.e., the Python core devs) had to use our own implementation of `strtod` when introducing the short float repr in Python 2.7.  (All the gory details are in http://bugs.python.org/issue1580.)  There are a wide variety of interesting and exciting corner-case `strtod` bugs, varying by platform.\n\nIn practice, the platform `strtod` is probably \"good enough\" most of the time; I wouldn't expect to run into those corner cases very often.  So if the occasional (platform-dependent) failure to roundtrip in corner cases is acceptable then `strtod` should be fine.  If you want guaranteed roundtrip behaviour, it's better to use the same code that Python uses for converting strings to floats.\n\nThe decision of what's acceptable is of course your choice!\n",
        "createdAt" : "2014-09-22T13:19:45Z",
        "updatedAt" : "2014-09-22T13:20:40Z",
        "lastEditedBy" : "ce5b80c5-1710-45f2-84ad-d219a8c2573e",
        "tags" : [
        ]
      },
      {
        "id" : "a6223676-6471-4099-9103-5f397c5075ec",
        "parentId" : "c04740f5-b030-41fe-b62d-1ecab09d7a6b",
        "authorId" : "69d853e2-e32e-484d-a3a9-2f1e7ce7b628",
        "body" : "~~Huh, I didn't know `strtod` was platform-dependent...isn't `strtod` always guaranteed to round-trip since it must be within 0.5 ULP of the correct number?~~\nInteresting, I'll change it here then.\n",
        "createdAt" : "2014-09-22T13:23:59Z",
        "updatedAt" : "2014-09-22T13:24:55Z",
        "lastEditedBy" : "69d853e2-e32e-484d-a3a9-2f1e7ce7b628",
        "tags" : [
        ]
      },
      {
        "id" : "8895b484-5c77-4a89-a6ce-230ede698cc4",
        "parentId" : "c04740f5-b030-41fe-b62d-1ecab09d7a6b",
        "authorId" : "ce5b80c5-1710-45f2-84ad-d219a8c2573e",
        "body" : "One other comment: unfortunately, `PyFloat_FromString` isn't ideal, because it's building a Python float rather than just  returning a C double, which is wasteful.  You might want [`PyOS_string_to_double`](https://docs.python.org/2/c-api/conversion.html?highlight=pyos_string_to_double#c.PyOS_string_to_double) instead.\n",
        "createdAt" : "2014-09-22T13:34:13Z",
        "updatedAt" : "2014-09-22T13:35:22Z",
        "lastEditedBy" : "ce5b80c5-1710-45f2-84ad-d219a8c2573e",
        "tags" : [
        ]
      },
      {
        "id" : "e1c3d04e-4671-4346-b167-8f5a0793e37e",
        "parentId" : "c04740f5-b030-41fe-b62d-1ecab09d7a6b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@mdickinson I think would be ideal if we could do exactly what Python does here (only in 'round_trip' mode though), assuming is speed-wise equivalent. I think originally @wesm put in the xstrtod code to alleviate the speed issue (at the cost of some marginal accuracy). \n\nThis PR (in master now), but @amras1 add these different modes, so I think ok to have use the Python method (that returns a c-double though). \n\n@amras1 pls check it out and see if this works. \n\n@mdickinson can you point to some examples that this would work differntly? (e.g. or is it 32/64/os that might be implemented diffently?)\n",
        "createdAt" : "2014-09-22T13:37:50Z",
        "updatedAt" : "2014-09-22T13:38:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "08afb106-2117-4ca1-95e3-ff8a8b027514",
        "parentId" : "c04740f5-b030-41fe-b62d-1ecab09d7a6b",
        "authorId" : "69d853e2-e32e-484d-a3a9-2f1e7ce7b628",
        "body" : "Just tested it out and got an error: `AssertionError: 2.0 != 1.002004008016032` with `PyOS_string_to_double`. Maybe I'm misusing it--any idea what that could be? (this is 1.002... being interpreted as 2.0, 1.00000 was correctly interpreted as 1.0)\n",
        "createdAt" : "2014-09-22T13:49:19Z",
        "updatedAt" : "2014-09-22T13:49:19Z",
        "lastEditedBy" : "69d853e2-e32e-484d-a3a9-2f1e7ce7b628",
        "tags" : [
        ]
      },
      {
        "id" : "3c93248d-3b16-4a20-97a5-1c13128c7001",
        "parentId" : "c04740f5-b030-41fe-b62d-1ecab09d7a6b",
        "authorId" : "ce5b80c5-1710-45f2-84ad-d219a8c2573e",
        "body" : "> @mdickinson can you point to some examples that this would work differntly?\n\nHmm; it's been a while, and I don't have examples readily to hand.  There are a couple in the [Python issue1580](http://bugs.python.org/issue1580) discussion, though.  In [msg58966](http://bugs.python.org/issue1580#msg58966), there's an example where MSVC gives the wrong value for something that should round to `1024.0`.  In [msg69552](http://bugs.python.org/issue1580#msg69552), there are some values near the minimum subnormal that rounded incorrectly on OS X.  There have been various bugs discovered in the underlying `dtoa.c` code from David Gay that many platforms use; mostly since fixed, but not all platforms have updated.  See http://bugs.python.org/issue7632 for some of these that were found while incorporating `dtoa.c` into Python.\n\nMost of these really _are_ corner-case bugs that are unlikely to be encountered in practice; it would be perfectly defensible to decide to carry on using the platform `strtod` for reasons of convenience and speed.\n",
        "createdAt" : "2014-09-22T13:52:23Z",
        "updatedAt" : "2014-09-22T13:52:57Z",
        "lastEditedBy" : "ce5b80c5-1710-45f2-84ad-d219a8c2573e",
        "tags" : [
        ]
      },
      {
        "id" : "2a185b00-619c-4514-853a-e817bb7eaf4e",
        "parentId" : "c04740f5-b030-41fe-b62d-1ecab09d7a6b",
        "authorId" : "ce5b80c5-1710-45f2-84ad-d219a8c2573e",
        "body" : "> Just tested it out and got an error\n\nHmm.  I'm not sure without seeing the details.  It's _fairly_ unlikely to be a bug (_me crosses fingers_) in `PyOS_string_to_double` itself, since that function is what Python uses for all its string -> float conversions (parsing numeric literals, `float` constructor, etc.).\n",
        "createdAt" : "2014-09-22T13:58:45Z",
        "updatedAt" : "2014-09-22T13:58:45Z",
        "lastEditedBy" : "ce5b80c5-1710-45f2-84ad-d219a8c2573e",
        "tags" : [
        ]
      },
      {
        "id" : "f00712ee-b3b6-4b8f-af01-650c2763e1f3",
        "parentId" : "c04740f5-b030-41fe-b62d-1ecab09d7a6b",
        "authorId" : "69d853e2-e32e-484d-a3a9-2f1e7ce7b628",
        "body" : "Now it works when I include the header file Python.h. Not sure how this compiled (and ran!) if that was the issue...anyway, I'll open a PR to change this.\n",
        "createdAt" : "2014-09-22T16:07:39Z",
        "updatedAt" : "2014-09-22T16:07:39Z",
        "lastEditedBy" : "69d853e2-e32e-484d-a3a9-2f1e7ce7b628",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6e2c7561aba584c694fe3e132e733f6ee3fa605",
    "line" : 219,
    "diffHunk" : "@@ -1,1 +2181,2185 @@                  char tsep, int skip_trailing)\n{\n    return strtod(p, q);\n}\n"
  },
  {
    "id" : "02862a33-fe91-469d-90fa-b88cd0da26ba",
    "prId" : 15020,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15020#pullrequestreview-14869052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d8e7755-d3df-447e-88b9-6c4d3a1a9b74",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe generate *some* code here too (for another PR)",
        "createdAt" : "2017-01-02T19:49:22Z",
        "updatedAt" : "2017-01-02T19:49:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a63b34f8-a900-4ad3-a782-6a8ee54c1710",
        "parentId" : "6d8e7755-d3df-447e-88b9-6c4d3a1a9b74",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Again, _possible_ but not as nice because the implementations are definitely customized to the `dtype` (e.g. compare the difference in handling for \"negative numbers\" for `int64` and `uint64`).",
        "createdAt" : "2017-01-02T19:53:01Z",
        "updatedAt" : "2017-01-02T19:53:01Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "d018e386034e1c6bc04227cf5c5857e871ffde42",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1887,1891 @@    return number;\n}\n\nuint64_t str_to_uint64(uint_state *state, const char *p_item, int64_t int_max,\n                       uint64_t uint_max, int *error, char tsep) {"
  }
]