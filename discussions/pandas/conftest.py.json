[
  {
    "id" : "c1c00d59-5d6f-4468-b324-13dd3428d74f",
    "prId" : 21224,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21224#pullrequestreview-140321785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b84589dd-7b5b-4d98-9eee-aabb6be0d587",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe also add axis_frame just for consistency? (its exactly equal to axis)",
        "createdAt" : "2018-07-25T12:52:01Z",
        "updatedAt" : "2018-07-26T21:03:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "92f54d03-2358-4951-ac22-06cf3b11f13e",
        "parentId" : "b84589dd-7b5b-4d98-9eee-aabb6be0d587",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "sure, ok",
        "createdAt" : "2018-07-25T13:52:54Z",
        "updatedAt" : "2018-07-26T21:03:35Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "39ced290b257435e97c74dc95aff2391fdf7fd02",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +63,67 @@@pytest.fixture(params=[0, 1, 'index', 'columns'],\n                ids=lambda x: \"axis {!r}\".format(x))\ndef axis(request):\n    \"\"\"\n     Fixture for returning the axis numbers of a DataFrame."
  },
  {
    "id" : "eb091aaf-45c0-47a1-ae9d-0e2d590bc699",
    "prId" : 21899,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21899#pullrequestreview-137248153",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4df57e3e-e362-4418-bbf1-f32f414ec53e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@gfyoung this is ok? it follows our existing pattern?",
        "createdAt" : "2018-07-14T20:34:35Z",
        "updatedAt" : "2018-07-14T20:46:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c0421c73-28ef-46f6-b64b-6d8d15362c30",
        "parentId" : "4df57e3e-e362-4418-bbf1-f32f414ec53e",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "@jreback @gfyoung I only added `COMPLEX_DTYPES`, `STRING_DTYPES` (which was just giving names to existing collections) and `ALL_NUMPY_DTYPES` - the rest was just reordering.",
        "createdAt" : "2018-07-14T20:43:33Z",
        "updatedAt" : "2018-07-14T20:46:44Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "e64004039d9c358684f455479ab7c7d75e904a11",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +250,254 @@\nUNSIGNED_INT_DTYPES = [\"uint8\", \"uint16\", \"uint32\", \"uint64\"]\nSIGNED_INT_DTYPES = [int, \"int8\", \"int16\", \"int32\", \"int64\"]\nALL_INT_DTYPES = UNSIGNED_INT_DTYPES + SIGNED_INT_DTYPES\n"
  },
  {
    "id" : "7bb3c25c-2adb-4581-b540-7a5b128ea5e4",
    "prId" : 22280,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22280#pullrequestreview-147879646",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d61adef2-47f5-465a-a4e9-992863cfb199",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This will put a hard dependency on hypothesis for testing. Are we OK with that? After some thought, I think it's fine. It's a well-maintained project, and working around it in the test suite seems silly.\r\n\r\n*If* we're ok with that, then @Zac-HD could you update\r\n\r\n- pandas/util/_tester.py to have a nice message if either pytest or hypothesis is missing?\r\n- pandas/ci/check_imports.py to ensure hypothesis is not imported with the main `import pandas`?\r\n- doc/source/whatsnew/0.24.0.txt with a small subsection saying hypothesis is required for running the tests (with a link to the hypothesis docs :)",
        "createdAt" : "2018-08-18T13:55:21Z",
        "updatedAt" : "2018-08-24T20:35:37Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "3a11a85a-d66d-42c6-a3be-5d0fa10bfad5",
        "parentId" : "d61adef2-47f5-465a-a4e9-992863cfb199",
        "authorId" : "5ca0e966-b0a3-4384-b202-a62f29c82e87",
        "body" : "My read of the reviews so far is that @jreback was in favor of a mandatory dependency (also my recommendation), and you're now in favor too.\r\n\r\nI've therefore made the relevant changes and it's all ready to go :tada: \r\n\r\n(though one build on Travis has errored out, the tests passed until the timeout)",
        "createdAt" : "2018-08-19T12:58:11Z",
        "updatedAt" : "2018-08-24T20:35:37Z",
        "lastEditedBy" : "5ca0e966-b0a3-4384-b202-a62f29c82e87",
        "tags" : [
        ]
      },
      {
        "id" : "8456e42d-54a1-4146-9288-1ae940e99b1c",
        "parentId" : "d61adef2-47f5-465a-a4e9-992863cfb199",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so, I still think we need to a) remove hypothesis from 1 build (the same one we have removed ``moto`` from is good). and use ``pyimportor.skip('hypthoesis')``. The reason is not for our CI really, rather so when a user does ``pd.test()`` is doesn't fail, rather it will just skip those tests.",
        "createdAt" : "2018-08-20T22:44:45Z",
        "updatedAt" : "2018-08-24T20:35:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "25bc6f5e-ef5a-4077-b0cb-f3d4d2f8889c",
        "parentId" : "d61adef2-47f5-465a-a4e9-992863cfb199",
        "authorId" : "5ca0e966-b0a3-4384-b202-a62f29c82e87",
        "body" : "@jreback there are two problems with making Hypothesis optional for `pd.test()`:\r\n\r\n1. It makes adding further Hypothesis tests - eg for serialisation round-trips, timedeltas, or reshaping logic - much harder.  They'd have to be in separate files, guard any global setup and configuration, handle import-or-skips, etc.\r\n2. It forces us to choose to either duplicate tests, or skip them at runtime.\r\n\r\nThat doesn't make it completely unreasonable, I'd prefer to just have the dependency - and I've been using Pandas for much longer than Hypothesis!\r\n\r\nTLDR - what's wrong with putting Hypothesis in the same category as pytest?",
        "createdAt" : "2018-08-21T01:38:28Z",
        "updatedAt" : "2018-08-24T20:35:37Z",
        "lastEditedBy" : "5ca0e966-b0a3-4384-b202-a62f29c82e87",
        "tags" : [
        ]
      },
      {
        "id" : "56572473-628c-408a-806a-2a8ae2a96799",
        "parentId" : "d61adef2-47f5-465a-a4e9-992863cfb199",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think moto is a bit different, since it's relatively unimportant to mainline pandas, and so is easy to work around.\r\n\r\nIMO, hypothesis should be treated the same as pytest.",
        "createdAt" : "2018-08-21T01:42:36Z",
        "updatedAt" : "2018-08-24T20:35:37Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "779b49ab95268a1383ea6160f05ba5bb6bbb3c57",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +456,460 @@# Global setup for tests using Hypothesis\n\nfrom hypothesis import strategies as st\n\n# Registering these strategies makes them globally available via st.from_type,"
  },
  {
    "id" : "eccba0a9-8590-4217-a8ac-6bacf38ed9e9",
    "prId" : 22296,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22296#pullrequestreview-153321408",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b60e953-d626-498e-b2e9-0f396e3eec17",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can't you use the existing nulls_fixture? (ahh or that has the float NaN which *are* the same as np.nan)?",
        "createdAt" : "2018-09-07T12:10:25Z",
        "updatedAt" : "2018-09-17T19:01:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bd452e73-47ba-423e-b6df-dd6fcf9d59dd",
        "parentId" : "7b60e953-d626-498e-b2e9-0f396e3eec17",
        "authorId" : "6eb079e0-c034-4a01-ba36-2456ab252d59",
        "body" : "@jreback I could have used `nulls_fixture`, but then as you already have pointed out, I would have to filter out `[np.nan, float('nan')]` & Co. (which are not list of unique elements)  at several places in tests, so I assumed adding `unique_nulls_fixture` would be cleaner.",
        "createdAt" : "2018-09-07T12:20:57Z",
        "updatedAt" : "2018-09-17T19:01:23Z",
        "lastEditedBy" : "6eb079e0-c034-4a01-ba36-2456ab252d59",
        "tags" : [
        ]
      },
      {
        "id" : "dade5047-91d9-4339-b061-2d14fb83584b",
        "parentId" : "7b60e953-d626-498e-b2e9-0f396e3eec17",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes this is ok (i see how you are using it below).",
        "createdAt" : "2018-09-07T12:30:56Z",
        "updatedAt" : "2018-09-17T19:01:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "356b8aab754c32e469508e23c447d8c650938843",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +289,293 @@@pytest.fixture(params=[None, np.nan, pd.NaT])\ndef unique_nulls_fixture(request):\n    \"\"\"\n    Fixture for each null type in pandas, each null type exactly once\n    \"\"\""
  },
  {
    "id" : "ba73753a-9f82-42df-8e6b-26544297f361",
    "prId" : 22597,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22597#pullrequestreview-153302732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22d238fe-e306-4283-8d83-e87aa612eec3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you just import hypthesis and reference ``hypothesis.settings`` to avoid polluting the namespace.",
        "createdAt" : "2018-09-07T11:24:26Z",
        "updatedAt" : "2018-09-07T23:17:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5376039cc068b5b1a404e9b33028029a35cebfe7",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +9,13 @@from pandas.compat import PY3\nimport pandas.util._test_decorators as td\n\nimport hypothesis\nhypothesis.settings.suppress_health_check = (hypothesis.HealthCheck.too_slow,)"
  },
  {
    "id" : "c8c82420-284b-41e6-a5b7-ed430fc52614",
    "prId" : 23807,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23807#pullrequestreview-177402664",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6307503-2b2b-45f3-8200-29ca892b1609",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Brainstorm:\r\n\r\n- non-round numbers for `FixedOffset`\r\n- we have a small number of tests with tzinfos from `psycopg2.tz` and `matplotlib` (not sure where in the matplotlib namespace)\r\n- random subset of `pytz.all_timezones` (592 of them)\r\n- equivalent from `dateutil.tz` (not sure off the top of my head how to access that, but if we figure it out I'll make a PR there)",
        "createdAt" : "2018-11-20T15:02:57Z",
        "updatedAt" : "2018-11-22T02:48:40Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ded9d658-6a59-446a-b6e2-4e0bbed858c9",
        "parentId" : "c6307503-2b2b-45f3-8200-29ca892b1609",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "how much additional time do the tests take with these added fixtures? how many more tests",
        "createdAt" : "2018-11-20T15:46:12Z",
        "updatedAt" : "2018-11-22T02:48:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0eae06c7-4e6d-4bc3-b54e-0a813d800064",
        "parentId" : "c6307503-2b2b-45f3-8200-29ca892b1609",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "- Sure we can add one non-round FixedOffset\r\n- matplotlib UTC is just `datetime.timezones.utc`: https://github.com/matplotlib/matplotlib/blob/9e8be5b0dc0a03f569d7a248f67ef136520adbbb/lib/matplotlib/dates.py#L172\r\n- IIRC we just convert `psycopg2.tz` timezones (from sql functions) directly to UTC, and we don't directly advertise accepting them in other functions. But I guess we do have code that supposedly handles this: https://github.com/pandas-dev/pandas/blob/3702de2545f24e1999cf574bc8dd115460e2db90/pandas/_libs/tslibs/timezones.pyx#L218\r\n- As for more pytz and dateutil timezones, I'd be most interested in testing non-conventional timezones, e.g. odd time shifting, but I feel its not necessary to test all of them (baring testing all of them doesn't take that much additional time)",
        "createdAt" : "2018-11-21T18:50:42Z",
        "updatedAt" : "2018-11-22T02:48:40Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "89793b74-066a-433e-82de-477eacfbbab4",
        "parentId" : "c6307503-2b2b-45f3-8200-29ca892b1609",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "We can add these in a follow up and further discuss.",
        "createdAt" : "2018-11-21T19:38:12Z",
        "updatedAt" : "2018-11-22T02:48:40Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "15ba5fb8bb462672d2153e2b4e0db4146a2a58d9",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +356,360 @@TIMEZONES = [None, 'UTC', 'US/Eastern', 'Asia/Tokyo', 'dateutil/US/Pacific',\n             'dateutil/Asia/Singapore', tzutc(), tzlocal(), FixedOffset(300),\n             FixedOffset(0), FixedOffset(-300)]\n\n"
  }
]