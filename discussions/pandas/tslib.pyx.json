[
  {
    "id" : "c0b1386d-467b-47e8-a3fa-793e72b69c59",
    "prId" : 4562,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "456314cd-7230-4590-929c-aab531a10131",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "FYI I think you can just declare this function: `cdef accessor get_accessor_func(int code) except -1:` and then an exception occuring int the cdef'd function will propogate up the stack\n",
        "createdAt" : "2013-08-14T13:07:54Z",
        "updatedAt" : "2013-08-15T17:08:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ee4d9322c2e598bce4b5455e2f8f0a8a43b11c5",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2420,2424 @@def get_period_field(int code, int64_t value, int freq):\n    cdef accessor f = _get_accessor_func(code)\n    if f is NULL:\n        raise ValueError('Unrecognized period code: %d' % code)\n    return f(value, freq)"
  },
  {
    "id" : "aa596667-2679-40ad-b84e-e731b236d067",
    "prId" : 4706,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2e76005-c1c1-4a96-85eb-03adcaaacc42",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "can you write a vbench for localization? there are quite a lot of API calls here. Some of these functions are exposed in numpy's C API, which might be worth investigating down the line for potential speed ups.\n",
        "createdAt" : "2013-09-26T01:31:48Z",
        "updatedAt" : "2013-10-02T00:54:47Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5ea6c86dccd19714902e5de8b883d50c0705b45",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1704,1708 @@            \n           \n    if infer_dst:\n        dst_hours = np.empty(n, dtype=np.int64)\n        dst_hours.fill(NPY_NAT)"
  },
  {
    "id" : "6494ddb0-b9e5-41a6-9c67-8c2eefeb527a",
    "prId" : 5342,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aeea68f9-5ef6-4b55-918b-d6723064bbb6",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "neat, didn't know you could use decorators in Cython at all...\n",
        "createdAt" : "2013-10-26T21:53:23Z",
        "updatedAt" : "2013-10-26T21:53:23Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "c1459682-2e2d-487e-a00e-24be6b019bac",
        "parentId" : "aeea68f9-5ef6-4b55-918b-d6723064bbb6",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "yep u can use them to tell cython not to check array bounds too, for example.\n",
        "createdAt" : "2013-10-27T22:01:20Z",
        "updatedAt" : "2013-10-27T22:01:20Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "3185fb00-0fd9-4a75-9981-69a40e73fd28",
        "parentId" : "aeea68f9-5ef6-4b55-918b-d6723064bbb6",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "ah, right the 'fake' cython decorators.\n",
        "createdAt" : "2013-10-27T22:03:29Z",
        "updatedAt" : "2013-10-27T22:03:29Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "0372cb4f-84d6-4072-91fc-8328183f9aa0",
        "parentId" : "aeea68f9-5ef6-4b55-918b-d6723064bbb6",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "they are real. like u said, cython implements decorators. i think cython is a superset of python so all of python is implemented, with the exception of assignment in the body of a class.\n",
        "createdAt" : "2013-10-27T22:04:50Z",
        "updatedAt" : "2013-10-27T22:04:50Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "82bfbe89387470e96f238cde232966a22fd0a63b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +141,145 @@        return cls(datetime.fromordinal(ordinal),offset=offset,tz=tz)\n\n    @classmethod\n    def now(cls, tz=None):\n        \"\"\" compat now with datetime \"\"\""
  },
  {
    "id" : "432862d9-b39f-4833-b93e-bd3181a0f807",
    "prId" : 5342,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2969c00c-7d3e-4784-ba30-093913d17b6b",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "@cpcloud so is this the right option here? Or should it just be \"`cls('now')`\"?\n",
        "createdAt" : "2013-10-27T22:04:11Z",
        "updatedAt" : "2013-10-27T22:04:11Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "99b6fefd-2b57-4336-a5c3-8820c08200e5",
        "parentId" : "2969c00c-7d3e-4784-ba30-093913d17b6b",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "it's fine the way it is and that would depend on `dateutil` parsing i think. i'd prefer to just depend on stdlib here ... but not super strong about it.\n",
        "createdAt" : "2013-10-27T22:09:26Z",
        "updatedAt" : "2013-10-27T22:09:26Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "10b18195-e00d-4f77-bfd8-ce012db2085e",
        "parentId" : "2969c00c-7d3e-4784-ba30-093913d17b6b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is what `datetime` does\n",
        "createdAt" : "2013-10-27T22:15:34Z",
        "updatedAt" : "2013-10-27T22:15:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "633a51fb-42e4-4f3f-b374-7b4b61395aef",
        "parentId" : "2969c00c-7d3e-4784-ba30-093913d17b6b",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "yep ... looks good to me\n",
        "createdAt" : "2013-10-27T22:16:04Z",
        "updatedAt" : "2013-10-27T22:16:04Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "82bfbe89387470e96f238cde232966a22fd0a63b",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +146,150 @@        if isinstance(tz, basestring):\n            tz = pytz.timezone(tz)\n        return cls(datetime.now(tz))\n\n    @classmethod"
  },
  {
    "id" : "4bd95592-7317-4a27-8d89-966eea72dcca",
    "prId" : 6657,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9aa757d-a8b3-424c-a5b2-03eca7986499",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "instead of isinstance use is_timedelta_object\nwhat has a delta attribute?\n",
        "createdAt" : "2014-03-18T02:02:29Z",
        "updatedAt" : "2014-03-18T02:02:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "046ac4fe-8c6e-41ba-b06f-c1eda019da4c",
        "parentId" : "c9aa757d-a8b3-424c-a5b2-03eca7986499",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually the isinstance is ok\n",
        "createdAt" : "2014-03-18T02:05:41Z",
        "updatedAt" : "2014-03-18T02:05:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b7ac6331-53e2-42ff-9429-69d53a0091c9",
        "parentId" : "c9aa757d-a8b3-424c-a5b2-03eca7986499",
        "authorId" : "b6cc4d89-e704-4563-adc7-310dfc136adf",
        "body" : "Yeah, I am just trying to copy the instance checks already in the `__add__` code.\n",
        "createdAt" : "2014-03-18T02:07:52Z",
        "updatedAt" : "2014-03-18T02:08:06Z",
        "lastEditedBy" : "b6cc4d89-e704-4563-adc7-310dfc136adf",
        "tags" : [
        ]
      },
      {
        "id" : "eb9cf2e1-0ecc-4d96-be75-3614e961e087",
        "parentId" : "c9aa757d-a8b3-424c-a5b2-03eca7986499",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh ok that's fine then\n",
        "createdAt" : "2014-03-18T02:09:02Z",
        "updatedAt" : "2014-03-18T02:09:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bba5e79de851f40c629ad888487e921fd4b3fa0",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +710,714 @@        if is_timedelta64_object(other) or is_integer_object(other) \\\n                or isinstance(other, timedelta) or hasattr(other, 'delta'):\n            neg_other = -other\n            return self + neg_other\n"
  },
  {
    "id" : "489f57cf-1dfd-4dab-99b6-ae22e10b52e8",
    "prId" : 6968,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc793424-4475-47f8-8ac3-0fc41b7384e3",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "I think you can use cdef here unless this is cAlled from Python \n",
        "createdAt" : "2014-05-30T17:57:41Z",
        "updatedAt" : "2014-06-03T14:25:23Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "b89fd68a-14f5-456c-a4b5-f1659d9fed87",
        "parentId" : "cc793424-4475-47f8-8ac3-0fc41b7384e3",
        "authorId" : "5a947098-5ab4-4c2e-9a62-26cc13b35333",
        "body" : "It's called from tools.py so needs a cpdef. (in tools._maybe_get_tz)\n",
        "createdAt" : "2014-05-30T19:13:00Z",
        "updatedAt" : "2014-06-03T14:25:23Z",
        "lastEditedBy" : "5a947098-5ab4-4c2e-9a62-26cc13b35333",
        "tags" : [
        ]
      }
    ],
    "commit" : "e420855f1aa27bf8c9a751ef26a29652c7b0e513",
    "line" : 187,
    "diffHunk" : "@@ -1,1 +1042,1046 @@\n\ncpdef inline object maybe_get_tz(object tz):\n    '''\n    (Maybe) Construct a timezone object from a string. If tz is a string, use it to construct a timezone object."
  },
  {
    "id" : "53c3acc7-498e-4530-b29d-6f78af09e68b",
    "prId" : 7599,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aaea5585-ae61-429b-8122-7392f7022cd8",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "What is the difference between `offset` and `freq`? (isn't freq used more in other functions?)\n",
        "createdAt" : "2014-08-16T14:52:07Z",
        "updatedAt" : "2015-07-11T21:31:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1a8f48fd-63cc-4ce3-ad6b-b2e035e9c39d",
        "parentId" : "aaea5585-ae61-429b-8122-7392f7022cd8",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "I feel `freq` is better, but this is better to do in separate PR if required (irrelevant for this implementation, and should affects to backward compat).\n",
        "createdAt" : "2014-08-16T15:29:47Z",
        "updatedAt" : "2015-07-11T21:31:02Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "53099acf-3b1c-4d9b-a1b8-adcdfbe4b71a",
        "parentId" : "aaea5585-ae61-429b-8122-7392f7022cd8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "agreed\n",
        "createdAt" : "2014-08-16T15:48:19Z",
        "updatedAt" : "2015-07-11T21:31:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2ea0d4d1f7333dfb5f35d0795267d8894a37d83",
    "line" : null,
    "diffHunk" : "@@ -1,1 +231,235 @@        Value to be converted to Timestamp\n    offset : str, DateOffset\n        Offset which Timestamp will have\n    tz : string, pytz.timezone, dateutil.tz.tzfile or None\n        Time zone for time which Timestamp will have."
  },
  {
    "id" : "d889aa0e-b9ac-432a-8990-9a1794a890ac",
    "prId" : 7599,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e55a1ca2-bb0a-4df2-a48f-cd421dd9775e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`unit` is still missing in the docstring I think\n",
        "createdAt" : "2014-08-16T14:53:47Z",
        "updatedAt" : "2015-07-11T21:31:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2ea0d4d1f7333dfb5f35d0795267d8894a37d83",
    "line" : null,
    "diffHunk" : "@@ -1,1 +236,240 @@    unit : string\n        numpy unit used for conversion, if ts_input is int or float\n    \"\"\"\n\n    # Do not add ``dayfirst`` and ``yearfist`` to Timestamp based on the discussion"
  },
  {
    "id" : "c9189a41-cfb2-4347-b49a-cbcbcd0df965",
    "prId" : 7607,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab14a4ed-d4eb-4e80-95af-fc2518e6f1ee",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I  not sure this is tested but in theory an older pickle will break as these codes have changed\ncan u preserve the original codes (and just add the new one)?\n",
        "createdAt" : "2014-06-29T11:14:56Z",
        "updatedAt" : "2014-07-05T11:17:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4c18cdec-f707-4174-ad87-cd363f20553c",
        "parentId" : "ab14a4ed-d4eb-4e80-95af-fc2518e6f1ee",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Ah, I thought this is not stored as property. Modified.\n",
        "createdAt" : "2014-06-29T12:45:14Z",
        "updatedAt" : "2014-07-05T11:17:27Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "071c37e92c79dc1369ff46117e035328b670e8cc",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +3376,3380 @@S_RESO = 2\nT_RESO = 3\nH_RESO = 4\nD_RESO = 5\n"
  },
  {
    "id" : "811a6fef-ed16-4dc4-a040-0c8ff5ceeffc",
    "prId" : 7610,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fe6207a-d4f0-4ee4-baf6-1ada42e0b37e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think this might be a repr issue (and not a calc issue). as these tests all pass (for `.value`), but only `Timestamp(t)` doesn't have the correcvt repr (but the right value)\n",
        "createdAt" : "2014-06-30T12:39:52Z",
        "updatedAt" : "2014-06-30T12:54:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "335379f1-7434-42a9-bbd8-e07e69264950",
        "parentId" : "6fe6207a-d4f0-4ee4-baf6-1ada42e0b37e",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "`__repr__` refers to `nanosecond`, not value.\nhttps://github.com/pydata/pandas/blob/master/pandas/tslib.pyx#L252\nAnd `nanosecond` set from `dst.ps`, not `value`. Thus `dst.ps` must be set properly before setting `nanosecond`.\nhttps://github.com/pydata/pandas/blob/master/pandas/tslib.pyx#L213\n\n```\nt = pd.Timestamp('2011-01-01') + pd.offsets.Nano(5)\nt = pd.Timestamp(t)\nt.nanosecond\n# 0 (NG)\n```\n",
        "createdAt" : "2014-06-30T12:51:08Z",
        "updatedAt" : "2014-06-30T12:54:30Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09a1097fb38baadd22f80f81858821d2cc55b88f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +957,961 @@        if is_timestamp(ts):\n            obj.value += ts.nanosecond\n            obj.dts.ps = ts.nanosecond * 1000\n        _check_dts_bounds(&obj.dts)\n        return obj"
  },
  {
    "id" : "d6be54a4-dd7c-4b5d-b353-1a5e647174ff",
    "prId" : 7720,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2515fef6-bebe-4fed-baf0-e32848d8196d",
        "parentId" : null,
        "authorId" : "6a901242-9be6-435d-a469-0a0f7eff7f33",
        "body" : "a lot dup codes under this if/else clause. combine them?\n",
        "createdAt" : "2014-07-11T05:42:37Z",
        "updatedAt" : "2014-07-15T17:59:16Z",
        "lastEditedBy" : "6a901242-9be6-435d-a469-0a0f7eff7f33",
        "tags" : [
        ]
      },
      {
        "id" : "032ddbe9-660a-4c9c-a2cf-58e91823924a",
        "parentId" : "2515fef6-bebe-4fed-baf0-e32848d8196d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "these are not completely dupes\nthis is how cython goes though\nu could right an inline function to do it\nwhy don't u give a try!\n",
        "createdAt" : "2014-07-11T10:19:40Z",
        "updatedAt" : "2014-07-15T17:59:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "71243b3b-42de-4a5f-8d50-10f2658f3c56",
        "parentId" : "2515fef6-bebe-4fed-baf0-e32848d8196d",
        "authorId" : "6a901242-9be6-435d-a469-0a0f7eff7f33",
        "body" : "you make such a good case. ok then!\nthough i don't know how this work. how can i pull this change and continue to work on it?\n",
        "createdAt" : "2014-07-11T10:47:08Z",
        "updatedAt" : "2014-07-15T17:59:16Z",
        "lastEditedBy" : "6a901242-9be6-435d-a469-0a0f7eff7f33",
        "tags" : [
        ]
      },
      {
        "id" : "b51f6e3a-e50a-4961-8f3f-d8b1f60f865c",
        "parentId" : "2515fef6-bebe-4fed-baf0-e32848d8196d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "like this:\n\n```\ngit checkout -b jreback-iter origin/master\ngit pull https://github.com/jreback/pandas.git iter\n```\n\nThen you will have a local branch `jreback-iter` where you can make changes and such\nthen you can push up this branch; it will be local to you. just ping and i'll pick-up your commits.\n",
        "createdAt" : "2014-07-11T12:01:27Z",
        "updatedAt" : "2014-07-15T17:59:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3fb9f4a7-fc5a-484d-972c-25fe67b02327",
        "parentId" : "2515fef6-bebe-4fed-baf0-e32848d8196d",
        "authorId" : "6a901242-9be6-435d-a469-0a0f7eff7f33",
        "body" : "used a func pointer.\nhttps://github.com/yrlihuan/pandas/commits/jreback-iter\n",
        "createdAt" : "2014-07-15T16:02:46Z",
        "updatedAt" : "2014-07-15T17:59:16Z",
        "lastEditedBy" : "6a901242-9be6-435d-a469-0a0f7eff7f33",
        "tags" : [
        ]
      }
    ],
    "commit" : "320f9d4c44d60cc4ae5e08ab4a26dc49d3fd71c1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +111,115 @@      func_create = create_datetime_from_ts\n\n    if tz is not None:\n        if _is_utc(tz):\n            for i in range(n):"
  }
]