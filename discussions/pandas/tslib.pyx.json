[
  {
    "id" : "c0b1386d-467b-47e8-a3fa-793e72b69c59",
    "prId" : 4562,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "456314cd-7230-4590-929c-aab531a10131",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "FYI I think you can just declare this function: `cdef accessor get_accessor_func(int code) except -1:` and then an exception occuring int the cdef'd function will propogate up the stack\n",
        "createdAt" : "2013-08-14T13:07:54Z",
        "updatedAt" : "2013-08-15T17:08:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ee4d9322c2e598bce4b5455e2f8f0a8a43b11c5",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2420,2424 @@def get_period_field(int code, int64_t value, int freq):\n    cdef accessor f = _get_accessor_func(code)\n    if f is NULL:\n        raise ValueError('Unrecognized period code: %d' % code)\n    return f(value, freq)"
  },
  {
    "id" : "aa596667-2679-40ad-b84e-e731b236d067",
    "prId" : 4706,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2e76005-c1c1-4a96-85eb-03adcaaacc42",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "can you write a vbench for localization? there are quite a lot of API calls here. Some of these functions are exposed in numpy's C API, which might be worth investigating down the line for potential speed ups.\n",
        "createdAt" : "2013-09-26T01:31:48Z",
        "updatedAt" : "2013-10-02T00:54:47Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5ea6c86dccd19714902e5de8b883d50c0705b45",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1704,1708 @@            \n           \n    if infer_dst:\n        dst_hours = np.empty(n, dtype=np.int64)\n        dst_hours.fill(NPY_NAT)"
  },
  {
    "id" : "6494ddb0-b9e5-41a6-9c67-8c2eefeb527a",
    "prId" : 5342,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aeea68f9-5ef6-4b55-918b-d6723064bbb6",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "neat, didn't know you could use decorators in Cython at all...\n",
        "createdAt" : "2013-10-26T21:53:23Z",
        "updatedAt" : "2013-10-26T21:53:23Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "c1459682-2e2d-487e-a00e-24be6b019bac",
        "parentId" : "aeea68f9-5ef6-4b55-918b-d6723064bbb6",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "yep u can use them to tell cython not to check array bounds too, for example.\n",
        "createdAt" : "2013-10-27T22:01:20Z",
        "updatedAt" : "2013-10-27T22:01:20Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "3185fb00-0fd9-4a75-9981-69a40e73fd28",
        "parentId" : "aeea68f9-5ef6-4b55-918b-d6723064bbb6",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "ah, right the 'fake' cython decorators.\n",
        "createdAt" : "2013-10-27T22:03:29Z",
        "updatedAt" : "2013-10-27T22:03:29Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "0372cb4f-84d6-4072-91fc-8328183f9aa0",
        "parentId" : "aeea68f9-5ef6-4b55-918b-d6723064bbb6",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "they are real. like u said, cython implements decorators. i think cython is a superset of python so all of python is implemented, with the exception of assignment in the body of a class.\n",
        "createdAt" : "2013-10-27T22:04:50Z",
        "updatedAt" : "2013-10-27T22:04:50Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "82bfbe89387470e96f238cde232966a22fd0a63b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +141,145 @@        return cls(datetime.fromordinal(ordinal),offset=offset,tz=tz)\n\n    @classmethod\n    def now(cls, tz=None):\n        \"\"\" compat now with datetime \"\"\""
  },
  {
    "id" : "432862d9-b39f-4833-b93e-bd3181a0f807",
    "prId" : 5342,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2969c00c-7d3e-4784-ba30-093913d17b6b",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "@cpcloud so is this the right option here? Or should it just be \"`cls('now')`\"?\n",
        "createdAt" : "2013-10-27T22:04:11Z",
        "updatedAt" : "2013-10-27T22:04:11Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "99b6fefd-2b57-4336-a5c3-8820c08200e5",
        "parentId" : "2969c00c-7d3e-4784-ba30-093913d17b6b",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "it's fine the way it is and that would depend on `dateutil` parsing i think. i'd prefer to just depend on stdlib here ... but not super strong about it.\n",
        "createdAt" : "2013-10-27T22:09:26Z",
        "updatedAt" : "2013-10-27T22:09:26Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "10b18195-e00d-4f77-bfd8-ce012db2085e",
        "parentId" : "2969c00c-7d3e-4784-ba30-093913d17b6b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is what `datetime` does\n",
        "createdAt" : "2013-10-27T22:15:34Z",
        "updatedAt" : "2013-10-27T22:15:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "633a51fb-42e4-4f3f-b374-7b4b61395aef",
        "parentId" : "2969c00c-7d3e-4784-ba30-093913d17b6b",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "yep ... looks good to me\n",
        "createdAt" : "2013-10-27T22:16:04Z",
        "updatedAt" : "2013-10-27T22:16:04Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "82bfbe89387470e96f238cde232966a22fd0a63b",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +146,150 @@        if isinstance(tz, basestring):\n            tz = pytz.timezone(tz)\n        return cls(datetime.now(tz))\n\n    @classmethod"
  },
  {
    "id" : "4bd95592-7317-4a27-8d89-966eea72dcca",
    "prId" : 6657,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9aa757d-a8b3-424c-a5b2-03eca7986499",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "instead of isinstance use is_timedelta_object\nwhat has a delta attribute?\n",
        "createdAt" : "2014-03-18T02:02:29Z",
        "updatedAt" : "2014-03-18T02:02:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "046ac4fe-8c6e-41ba-b06f-c1eda019da4c",
        "parentId" : "c9aa757d-a8b3-424c-a5b2-03eca7986499",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually the isinstance is ok\n",
        "createdAt" : "2014-03-18T02:05:41Z",
        "updatedAt" : "2014-03-18T02:05:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b7ac6331-53e2-42ff-9429-69d53a0091c9",
        "parentId" : "c9aa757d-a8b3-424c-a5b2-03eca7986499",
        "authorId" : "b6cc4d89-e704-4563-adc7-310dfc136adf",
        "body" : "Yeah, I am just trying to copy the instance checks already in the `__add__` code.\n",
        "createdAt" : "2014-03-18T02:07:52Z",
        "updatedAt" : "2014-03-18T02:08:06Z",
        "lastEditedBy" : "b6cc4d89-e704-4563-adc7-310dfc136adf",
        "tags" : [
        ]
      },
      {
        "id" : "eb9cf2e1-0ecc-4d96-be75-3614e961e087",
        "parentId" : "c9aa757d-a8b3-424c-a5b2-03eca7986499",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh ok that's fine then\n",
        "createdAt" : "2014-03-18T02:09:02Z",
        "updatedAt" : "2014-03-18T02:09:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bba5e79de851f40c629ad888487e921fd4b3fa0",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +710,714 @@        if is_timedelta64_object(other) or is_integer_object(other) \\\n                or isinstance(other, timedelta) or hasattr(other, 'delta'):\n            neg_other = -other\n            return self + neg_other\n"
  },
  {
    "id" : "489f57cf-1dfd-4dab-99b6-ae22e10b52e8",
    "prId" : 6968,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc793424-4475-47f8-8ac3-0fc41b7384e3",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "I think you can use cdef here unless this is cAlled from Python \n",
        "createdAt" : "2014-05-30T17:57:41Z",
        "updatedAt" : "2014-06-03T14:25:23Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "b89fd68a-14f5-456c-a4b5-f1659d9fed87",
        "parentId" : "cc793424-4475-47f8-8ac3-0fc41b7384e3",
        "authorId" : "5a947098-5ab4-4c2e-9a62-26cc13b35333",
        "body" : "It's called from tools.py so needs a cpdef. (in tools._maybe_get_tz)\n",
        "createdAt" : "2014-05-30T19:13:00Z",
        "updatedAt" : "2014-06-03T14:25:23Z",
        "lastEditedBy" : "5a947098-5ab4-4c2e-9a62-26cc13b35333",
        "tags" : [
        ]
      }
    ],
    "commit" : "e420855f1aa27bf8c9a751ef26a29652c7b0e513",
    "line" : 187,
    "diffHunk" : "@@ -1,1 +1042,1046 @@\n\ncpdef inline object maybe_get_tz(object tz):\n    '''\n    (Maybe) Construct a timezone object from a string. If tz is a string, use it to construct a timezone object."
  },
  {
    "id" : "53c3acc7-498e-4530-b29d-6f78af09e68b",
    "prId" : 7599,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aaea5585-ae61-429b-8122-7392f7022cd8",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "What is the difference between `offset` and `freq`? (isn't freq used more in other functions?)\n",
        "createdAt" : "2014-08-16T14:52:07Z",
        "updatedAt" : "2015-07-11T21:31:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1a8f48fd-63cc-4ce3-ad6b-b2e035e9c39d",
        "parentId" : "aaea5585-ae61-429b-8122-7392f7022cd8",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "I feel `freq` is better, but this is better to do in separate PR if required (irrelevant for this implementation, and should affects to backward compat).\n",
        "createdAt" : "2014-08-16T15:29:47Z",
        "updatedAt" : "2015-07-11T21:31:02Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "53099acf-3b1c-4d9b-a1b8-adcdfbe4b71a",
        "parentId" : "aaea5585-ae61-429b-8122-7392f7022cd8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "agreed\n",
        "createdAt" : "2014-08-16T15:48:19Z",
        "updatedAt" : "2015-07-11T21:31:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2ea0d4d1f7333dfb5f35d0795267d8894a37d83",
    "line" : null,
    "diffHunk" : "@@ -1,1 +231,235 @@        Value to be converted to Timestamp\n    offset : str, DateOffset\n        Offset which Timestamp will have\n    tz : string, pytz.timezone, dateutil.tz.tzfile or None\n        Time zone for time which Timestamp will have."
  },
  {
    "id" : "d889aa0e-b9ac-432a-8990-9a1794a890ac",
    "prId" : 7599,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e55a1ca2-bb0a-4df2-a48f-cd421dd9775e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`unit` is still missing in the docstring I think\n",
        "createdAt" : "2014-08-16T14:53:47Z",
        "updatedAt" : "2015-07-11T21:31:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2ea0d4d1f7333dfb5f35d0795267d8894a37d83",
    "line" : null,
    "diffHunk" : "@@ -1,1 +236,240 @@    unit : string\n        numpy unit used for conversion, if ts_input is int or float\n    \"\"\"\n\n    # Do not add ``dayfirst`` and ``yearfist`` to Timestamp based on the discussion"
  },
  {
    "id" : "c9189a41-cfb2-4347-b49a-cbcbcd0df965",
    "prId" : 7607,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab14a4ed-d4eb-4e80-95af-fc2518e6f1ee",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I  not sure this is tested but in theory an older pickle will break as these codes have changed\ncan u preserve the original codes (and just add the new one)?\n",
        "createdAt" : "2014-06-29T11:14:56Z",
        "updatedAt" : "2014-07-05T11:17:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4c18cdec-f707-4174-ad87-cd363f20553c",
        "parentId" : "ab14a4ed-d4eb-4e80-95af-fc2518e6f1ee",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Ah, I thought this is not stored as property. Modified.\n",
        "createdAt" : "2014-06-29T12:45:14Z",
        "updatedAt" : "2014-07-05T11:17:27Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "071c37e92c79dc1369ff46117e035328b670e8cc",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +3376,3380 @@S_RESO = 2\nT_RESO = 3\nH_RESO = 4\nD_RESO = 5\n"
  },
  {
    "id" : "811a6fef-ed16-4dc4-a040-0c8ff5ceeffc",
    "prId" : 7610,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fe6207a-d4f0-4ee4-baf6-1ada42e0b37e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think this might be a repr issue (and not a calc issue). as these tests all pass (for `.value`), but only `Timestamp(t)` doesn't have the correcvt repr (but the right value)\n",
        "createdAt" : "2014-06-30T12:39:52Z",
        "updatedAt" : "2014-06-30T12:54:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "335379f1-7434-42a9-bbd8-e07e69264950",
        "parentId" : "6fe6207a-d4f0-4ee4-baf6-1ada42e0b37e",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "`__repr__` refers to `nanosecond`, not value.\nhttps://github.com/pydata/pandas/blob/master/pandas/tslib.pyx#L252\nAnd `nanosecond` set from `dst.ps`, not `value`. Thus `dst.ps` must be set properly before setting `nanosecond`.\nhttps://github.com/pydata/pandas/blob/master/pandas/tslib.pyx#L213\n\n```\nt = pd.Timestamp('2011-01-01') + pd.offsets.Nano(5)\nt = pd.Timestamp(t)\nt.nanosecond\n# 0 (NG)\n```\n",
        "createdAt" : "2014-06-30T12:51:08Z",
        "updatedAt" : "2014-06-30T12:54:30Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09a1097fb38baadd22f80f81858821d2cc55b88f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +957,961 @@        if is_timestamp(ts):\n            obj.value += ts.nanosecond\n            obj.dts.ps = ts.nanosecond * 1000\n        _check_dts_bounds(&obj.dts)\n        return obj"
  },
  {
    "id" : "d6be54a4-dd7c-4b5d-b353-1a5e647174ff",
    "prId" : 7720,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2515fef6-bebe-4fed-baf0-e32848d8196d",
        "parentId" : null,
        "authorId" : "6a901242-9be6-435d-a469-0a0f7eff7f33",
        "body" : "a lot dup codes under this if/else clause. combine them?\n",
        "createdAt" : "2014-07-11T05:42:37Z",
        "updatedAt" : "2014-07-15T17:59:16Z",
        "lastEditedBy" : "6a901242-9be6-435d-a469-0a0f7eff7f33",
        "tags" : [
        ]
      },
      {
        "id" : "032ddbe9-660a-4c9c-a2cf-58e91823924a",
        "parentId" : "2515fef6-bebe-4fed-baf0-e32848d8196d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "these are not completely dupes\nthis is how cython goes though\nu could right an inline function to do it\nwhy don't u give a try!\n",
        "createdAt" : "2014-07-11T10:19:40Z",
        "updatedAt" : "2014-07-15T17:59:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "71243b3b-42de-4a5f-8d50-10f2658f3c56",
        "parentId" : "2515fef6-bebe-4fed-baf0-e32848d8196d",
        "authorId" : "6a901242-9be6-435d-a469-0a0f7eff7f33",
        "body" : "you make such a good case. ok then!\nthough i don't know how this work. how can i pull this change and continue to work on it?\n",
        "createdAt" : "2014-07-11T10:47:08Z",
        "updatedAt" : "2014-07-15T17:59:16Z",
        "lastEditedBy" : "6a901242-9be6-435d-a469-0a0f7eff7f33",
        "tags" : [
        ]
      },
      {
        "id" : "b51f6e3a-e50a-4961-8f3f-d8b1f60f865c",
        "parentId" : "2515fef6-bebe-4fed-baf0-e32848d8196d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "like this:\n\n```\ngit checkout -b jreback-iter origin/master\ngit pull https://github.com/jreback/pandas.git iter\n```\n\nThen you will have a local branch `jreback-iter` where you can make changes and such\nthen you can push up this branch; it will be local to you. just ping and i'll pick-up your commits.\n",
        "createdAt" : "2014-07-11T12:01:27Z",
        "updatedAt" : "2014-07-15T17:59:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3fb9f4a7-fc5a-484d-972c-25fe67b02327",
        "parentId" : "2515fef6-bebe-4fed-baf0-e32848d8196d",
        "authorId" : "6a901242-9be6-435d-a469-0a0f7eff7f33",
        "body" : "used a func pointer.\nhttps://github.com/yrlihuan/pandas/commits/jreback-iter\n",
        "createdAt" : "2014-07-15T16:02:46Z",
        "updatedAt" : "2014-07-15T17:59:16Z",
        "lastEditedBy" : "6a901242-9be6-435d-a469-0a0f7eff7f33",
        "tags" : [
        ]
      }
    ],
    "commit" : "320f9d4c44d60cc4ae5e08ab4a26dc49d3fd71c1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +111,115 @@      func_create = create_datetime_from_ts\n\n    if tz is not None:\n        if _is_utc(tz):\n            for i in range(n):"
  },
  {
    "id" : "14465f70-8b0e-46e5-8248-f7fe2c9caf73",
    "prId" : 8981,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae1affdf-2c6b-4c34-a439-a97e385f10ae",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "I'm pretty sure timezone comparison is a ValueError... it would be good to be consistent (IMO TypeError is the right choice)\n",
        "createdAt" : "2014-12-03T22:56:55Z",
        "updatedAt" : "2014-12-04T01:07:40Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "05d32120-8d56-4f21-aa42-975ab4ca476c",
        "parentId" : "ae1affdf-2c6b-4c34-a439-a97e385f10ae",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "```\n(Pdb) p dt_tz\ndatetime.datetime(2013, 1, 1, 0, 0, tzinfo=<DstTzInfo 'US/Eastern' EST-1 day, 19:00:00 STD>)\n(Pdb) p dt\ndatetime.datetime(2013, 1, 1, 0, 0)\n(Pdb) p dt_tz - dt\n*** TypeError: TypeError(\"can't subtract offset-naive and offset-aware datetimes\",)\n```\n\n`datetime-datetime` has this as a `TypeError` (that's why I changed it, originally I had it as a ValueError as well)\n",
        "createdAt" : "2014-12-04T00:03:39Z",
        "updatedAt" : "2014-12-04T01:07:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "044ed4c2-0b15-491b-9a7d-175acd6ce600",
        "parentId" : "ae1affdf-2c6b-4c34-a439-a97e385f10ae",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "OK, so maybe you should also change this for comparisons on line 813 above?\n",
        "createdAt" : "2014-12-04T00:09:01Z",
        "updatedAt" : "2014-12-04T01:07:40Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "7f07c3b1-3950-4d53-9585-5738c7088aec",
        "parentId" : "ae1affdf-2c6b-4c34-a439-a97e385f10ae",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "fixing this\n",
        "createdAt" : "2014-12-04T00:17:13Z",
        "updatedAt" : "2014-12-04T01:07:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c7d217ee-eb0b-4799-a1a6-6e863481f6c9",
        "parentId" : "ae1affdf-2c6b-4c34-a439-a97e385f10ae",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I guess its bad when I change from ValueError to TypeError and no tests break :)\n\nIt was almost all TypeError, so this is the right move.\n",
        "createdAt" : "2014-12-04T00:18:19Z",
        "updatedAt" : "2014-12-04T01:07:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dd532838-2f98-4597-ab45-cf38dc3b820b",
        "parentId" : "ae1affdf-2c6b-4c34-a439-a97e385f10ae",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually was a failed test so that is good :)\n",
        "createdAt" : "2014-12-04T01:13:05Z",
        "updatedAt" : "2014-12-04T01:13:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6fda694a3f9150d518a83577890e9f798a83b6c",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +867,871 @@            # we may be passed reverse ops\n            if get_timezone(getattr(self,'tzinfo',None)) != get_timezone(other.tz):\n                    raise TypeError(\"Timestamp subtraction must have the same timezones or no timezones\")\n\n            return -other.__sub__(self)"
  },
  {
    "id" : "c460febb-79dd-4e9a-b23a-d150511ff0e1",
    "prId" : 9022,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78a8b55a-97b3-448f-aec0-a1ee91084d2b",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "This docstring needs an update now (and should probably be the same as the one for `today`).\n",
        "createdAt" : "2014-12-07T07:16:50Z",
        "updatedAt" : "2014-12-07T12:56:58Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d0fce5b01d1e9179a944c3b3cf5fc3cca27a2c1",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +233,237 @@    def today(cls, tz=None):\n        \"\"\"\n        Return the current time in the local timezone.  This differs\n        from datetime.today() in that it can be localized to a\n        passed timezone."
  },
  {
    "id" : "5f266e59-1ed6-4840-9d4e-513cc394a188",
    "prId" : 9258,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e8bdb10-6bfd-4f34-8842-357c3173ecf7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is this here?\n",
        "createdAt" : "2015-02-11T14:45:14Z",
        "updatedAt" : "2015-02-18T03:00:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c265a44d-4973-4261-8a38-2b024ab3ccd0",
        "parentId" : "2e8bdb10-6bfd-4f34-8842-357c3173ecf7",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "It's a long story. Ultimately the issue is that `SparseSeries.__getitem__` relies on the questionable assumption that non-scalar input like `slice(2)` will raise a `TypeError` when used with `Index.get_loc`. My refactor to `DatetimeIndex.get_loc` meant that these started raising `KeyError`, because I needed to swallow earlier `TypeError` that arise in `get_loc` with `method='nearest'` (e.g., when attempting to use the original label when it's a string, not a Timestamp).\n\nI'll add a test to `DatetimeIndex.get_loc` to verify that it raises TypeError for invalid input. `SparseSeries.__getitem__` could also use a refactor to rely less on exceptions for data flow but I'd rather not touch it if possible.\n",
        "createdAt" : "2015-02-11T18:47:39Z",
        "updatedAt" : "2015-02-18T03:00:42Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "0b96f99d-8fe1-4cb0-af97-bad3afeb2a61",
        "parentId" : "2e8bdb10-6bfd-4f34-8842-357c3173ecf7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok why don't u create an issue (and point to some code) so that this can be fixed later (sparse certainly needs work)\n",
        "createdAt" : "2015-02-11T18:59:37Z",
        "updatedAt" : "2015-02-18T03:00:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f4b1c2d0-03a0-4589-97a3-c1c2a81041e5",
        "parentId" : "2e8bdb10-6bfd-4f34-8842-357c3173ecf7",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "done: #9467.\n",
        "createdAt" : "2015-02-11T19:12:41Z",
        "updatedAt" : "2015-02-18T03:00:42Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1164210248e6be262cfbf08bf899f1d1781c0fc",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1157,1161 @@    elif getattr(ts, '_typ', None) == 'period':\n        raise ValueError(\"Cannot convert Period to Timestamp unambiguously. Use to_timestamp\")\n    else:\n        raise TypeError('Cannot convert input to Timestamp')\n"
  },
  {
    "id" : "f5aa40d6-d0af-4fe1-8a0a-e5093231a213",
    "prId" : 10265,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d712edb-d25a-4451-a4a4-f8c69229a213",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, what exactly is testing this?\n\nas this is not allowed (and `Timedelta` doesn't have a coerce option itself)\n\n```\nIn [1]: pd.Timedelta('1.')\nValueError: no units specified\n```\n",
        "createdAt" : "2015-07-07T01:10:42Z",
        "updatedAt" : "2015-07-13T13:24:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8297e7f0-12d4-42a3-8f36-1512d0fb324c",
        "parentId" : "1d712edb-d25a-4451-a4a4-f8c69229a213",
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "`coerce` should `coerce` - this was raising when trying to convert `3.1415` when `coerce=True` and was incorrectly raising a ValueError.\n\nThe recent commit to tslib broke tests in this PR.\n",
        "createdAt" : "2015-07-07T01:38:25Z",
        "updatedAt" : "2015-07-13T13:24:59Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      },
      {
        "id" : "5820db70-85e2-4ea0-bc80-f4c880df0dcf",
        "parentId" : "1d712edb-d25a-4451-a4a4-f8c69229a213",
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "See https://github.com/pydata/pandas/pull/10265/files#diff-933180870dd152b775952fc54a99dba7R5928\n\nfor the test that was failing.\n\nThe higher level function called is `to_timedelta(...,coerce=True)`\n",
        "createdAt" : "2015-07-07T01:39:14Z",
        "updatedAt" : "2015-07-13T13:24:59Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      },
      {
        "id" : "f4acd3d9-f2d4-48c3-853b-ec9a3bfc5602",
        "parentId" : "1d712edb-d25a-4451-a4a4-f8c69229a213",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ahh ok\n",
        "createdAt" : "2015-07-07T01:42:11Z",
        "updatedAt" : "2015-07-13T13:24:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9d6678ac98c56ac057baa1a7be2e32a8aed5896",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2418,2422 @@        if (len(number) or len(frac)) and not len(unit) and current_unit is None:\n            if coerce:\n                return iNaT\n            raise ValueError(\"no units specified\")\n"
  },
  {
    "id" : "e6a9e9fe-b8bc-422e-ba82-47aad2bb33b4",
    "prId" : 11205,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "803404b8-d381-4290-b4b0-0f0d285f2e12",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this routine could actually be used in the Dateoffset for adding months (possibly dealing with month end/start as well)\n\ncould do in another PR though\n",
        "createdAt" : "2015-09-30T02:00:31Z",
        "updatedAt" : "2015-10-01T12:13:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e58f18c2e117bc7b14d7be1a2c13b43de50118f8",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +4421,4425 @@            out[i] = NPY_NAT\n        else:\n            pandas_datetime_to_datetimestruct(dtindex[i], PANDAS_FR_ns, &dts)\n\n            if day is None:"
  },
  {
    "id" : "423e0ed4-d52a-4ef3-b9ba-455136494a13",
    "prId" : 11205,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fc174d8-67c3-4ad9-9f0d-ef0f0d07de98",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string to these\n",
        "createdAt" : "2015-10-01T10:57:09Z",
        "updatedAt" : "2015-10-01T12:13:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e58f18c2e117bc7b14d7be1a2c13b43de50118f8",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +4389,4393 @@\ncdef inline int _year_add_months(pandas_datetimestruct dts,\n                                 int months):\n    '''new year number after shifting pandas_datetimestruct number of months'''\n    return dts.year + (dts.month + months - 1) / 12"
  },
  {
    "id" : "bf7909eb-5c1d-4cea-9b4e-de6c3b15e100",
    "prId" : 11263,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d20af1c-faac-4b5f-9c2e-b5c58008dff9",
        "parentId" : null,
        "authorId" : "e2c9166e-93f5-4095-86da-e3b563dcaa2b",
        "body" : "If you declared `field` as `char[:]` instead would you be able to `nogil` the whole thing until `raise`?\n",
        "createdAt" : "2015-10-15T21:20:10Z",
        "updatedAt" : "2015-10-16T23:54:17Z",
        "lastEditedBy" : "e2c9166e-93f5-4095-86da-e3b563dcaa2b",
        "tags" : [
        ]
      },
      {
        "id" : "8d0e55fa-7d4d-4d40-b3a8-c6e3d705fe36",
        "parentId" : "0d20af1c-faac-4b5f-9c2e-b5c58008dff9",
        "authorId" : "aa76ca2b-2c97-45f3-bb6a-3e0ee670395b",
        "body" : "hmm, tried that out, but cython doesn't seem to take a view of strings like that?  http://stackoverflow.com/questions/28203670/how-to-use-cython-typed-memoryviews-to-accept-strings-from-python\n",
        "createdAt" : "2015-10-16T02:04:26Z",
        "updatedAt" : "2015-10-16T23:54:17Z",
        "lastEditedBy" : "aa76ca2b-2c97-45f3-bb6a-3e0ee670395b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ecc1e7dfbf18b9216b6ff4ff52c21b5b185046f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3851,3855 @@@cython.wraparound(False)\n@cython.boundscheck(False)\ndef get_date_field(ndarray[int64_t] dtindex, object field):\n    '''\n    Given a int64-based datetime index, extract the year, month, etc.,"
  },
  {
    "id" : "cec5f8f8-7e63-4cb6-852e-0d8f4651dfc4",
    "prId" : 11690,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/11690#pullrequestreview-421458171",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "168cfc4b-dcff-4b10-b899-d318f479e40f",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@jreback where do these 1-letter abbreviations come from?  im trying to sort out all the many aliases we have floating around",
        "createdAt" : "2020-05-31T03:23:24Z",
        "updatedAt" : "2020-05-31T03:23:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dfe3a6893c6a7a8fe6296a84f47c106ff1c3888",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +2328,2332 @@           return \"U\"\n        elif self._ms:\n           return \"L\"\n        elif self._s:\n           return \"S\""
  }
]