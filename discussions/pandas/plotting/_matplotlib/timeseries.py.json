[
  {
    "id" : "c88b0911-685c-412d-a41b-17942594137a",
    "prId" : 31207,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31207#pullrequestreview-348320440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf63dc04-aa86-4785-a87b-ddeeb7607236",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "To preserve the existing behaviour, this might need to be `tz_convert` instead of `tz_localize` ? (the first will give the underlying UTC data, the other converts to naive local time)",
        "createdAt" : "2020-01-24T10:31:44Z",
        "updatedAt" : "2020-02-02T17:27:35Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "04b743c1-f77e-4ef9-8654-28fe3826abf0",
        "parentId" : "bf63dc04-aa86-4785-a87b-ddeeb7607236",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would maybe check with a small actual example and see what plotting it gives (on 0.25.3 and on this PR).\r\n\r\nBecause intuitively, converting to local time zone sounds more useful, though. But not fully sure what the current behaviour is",
        "createdAt" : "2020-01-24T10:33:18Z",
        "updatedAt" : "2020-02-02T17:27:35Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ed9ad0d9-84ad-41ea-ba22-99287eac35d3",
        "parentId" : "bf63dc04-aa86-4785-a87b-ddeeb7607236",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "Here's the output of\r\n```\r\ndf = pd.DataFrame(np.random.randn(100, 3), index=pd.date_range(\"2012\", freq='H', periods=100, tz='UTC'), columns=['a', 'b', 'c']) \r\ndf.head().plot() \r\n```\r\non 0.25.3:\r\n![image](https://user-images.githubusercontent.com/33491632/73071117-e922f980-3ea9-11ea-8201-dd8e012c9915.png)\r\n\r\nOn this branch:\r\n![image](https://user-images.githubusercontent.com/33491632/73071170-0eb00300-3eaa-11ea-8d6d-d6a333e0f4c5.png)\r\n",
        "createdAt" : "2020-01-24T13:04:33Z",
        "updatedAt" : "2020-02-02T17:27:35Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      },
      {
        "id" : "9b0b12db-9285-42b1-b47c-fdc7f9a1ec26",
        "parentId" : "bf63dc04-aa86-4785-a87b-ddeeb7607236",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@MarcoGorelli can you try with something else as UTC? (as UTC is the one timezone where UTC and local is the same :-))",
        "createdAt" : "2020-01-24T16:25:08Z",
        "updatedAt" : "2020-02-02T17:27:35Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2eaf0c32-d9d0-4b17-91bd-5fc3ec147e9c",
        "parentId" : "bf63dc04-aa86-4785-a87b-ddeeb7607236",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "@jorisvandenbossche sure :)\r\n\r\n```\r\ndf = pd.DataFrame(\r\n    np.random.randn(100, 3),\r\n    index=pd.date_range(\r\n        \"2012\", freq=\"H\", periods=100, tz=pytz.timezone(\"Africa/Gaborone\")\r\n    ),\r\n    columns=[\"a\", \"b\", \"c\"],\r\n)\r\ndf.head().plot()\r\n```\r\n\r\n0.25.3\r\n![image](https://user-images.githubusercontent.com/33491632/73119824-3e6d1280-3f5f-11ea-849a-5f1aec1a4a5b.png)\r\n\r\n\r\nThis branch:\r\n![image](https://user-images.githubusercontent.com/33491632/73119807-17164580-3f5f-11ea-9a9a-8816467a37e3.png)\r\n",
        "createdAt" : "2020-01-25T10:42:25Z",
        "updatedAt" : "2020-02-02T17:27:35Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e2d3aeb6179d40abfb68fdcc5b064a1d6b0bc59",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +252,256 @@\n        if isinstance(data.index, ABCDatetimeIndex):\n            data = data.tz_localize(None).to_period(freq=freq)\n        elif isinstance(data.index, ABCPeriodIndex):\n            data.index = data.index.asfreq(freq=freq)"
  },
  {
    "id" : "8cc3e90f-b248-4094-b647-5ecb23feb3e5",
    "prId" : 34243,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34243#pullrequestreview-414088591",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c4f6a15-b9cd-41ce-9967-e83b8bbe660d",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@datapythonista suggestions for a docstring here?  i dont know off the top of my head what this alias is used for.",
        "createdAt" : "2020-05-19T04:11:32Z",
        "updatedAt" : "2020-05-19T22:17:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e6f263c6d66336dd684fc8163d95ae23c6f0ec2",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +167,171 @@\n\ndef get_period_alias(freq) -> Optional[str]:\n    if isinstance(freq, DateOffset):\n        freq = freq.rule_code"
  },
  {
    "id" : "b2017d9e-dfa1-4859-be1b-e0cd889a1176",
    "prId" : 38043,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38043#pullrequestreview-540385870",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e9b06fa-d840-4034-ab9d-26fa92d8eb60",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "we might need an additional cast and a comment that freq is never None for PeriodIndex\r\n\r\nThe mypy errors are \r\n```\r\npandas\\plotting\\_matplotlib\\timeseries.py:247: error: Item \"DatetimeIndex\" of \"Union[DatetimeIndex, PeriodIndex]\" has no attribute \"inferred_freq\"  [union-attr]\r\npandas\\plotting\\_matplotlib\\timeseries.py:247: error: Item \"PeriodIndex\" of \"Union[DatetimeIndex, PeriodIndex]\" has no attribute \"inferred_freq\"  [union-attr]\r\n```\r\n\r\nso once the issue with the dynamically added `inferred_freq` in `DatetimeIndex` is sorted, this will still error.",
        "createdAt" : "2020-11-28T14:30:46Z",
        "updatedAt" : "2020-11-28T16:40:16Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "a1cb4513-9196-491f-aabd-0427ff0f6e83",
        "parentId" : "2e9b06fa-d840-4034-ab9d-26fa92d8eb60",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Thanks to your suggestion below, neither are needed. mypy correctly infers that `data.index` is a DatetimeIndex when freq is None.\r\n\r\nEdit: spoke too soon, I must have not run mypy again. Looks like we still need a cast.",
        "createdAt" : "2020-11-28T16:00:39Z",
        "updatedAt" : "2020-11-28T16:40:16Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "e98bc02c-b4ac-428a-b521-9dbfe64ca6cc",
        "parentId" : "2e9b06fa-d840-4034-ab9d-26fa92d8eb60",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Minor update: mypy would be able to do the inference above, except that PeriodIndex.freq (a BaseOffset) is typed as Any since BaseOffset is a cdef.",
        "createdAt" : "2020-11-28T16:30:19Z",
        "updatedAt" : "2020-11-28T16:40:16Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd64c314398e7704c14b54ac98114cbe52ddd197",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +243,247 @@\n        if freq is None:\n            # We only get here for DatetimeIndex\n            data.index = cast(\"DatetimeIndex\", data.index)\n            freq = data.index.inferred_freq"
  }
]