[
  {
    "id" : "56ec18c3-8d59-4388-901c-062ea6f6e4af",
    "prId" : 17966,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17966#pullrequestreview-71701137",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9396ef3-3bde-4a55-963d-abd48748cd3a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "cool that u can do this",
        "createdAt" : "2017-10-24T23:09:42Z",
        "updatedAt" : "2017-10-27T01:29:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "edcbb9ac526ae2ec7c56915d02ba6a083d830a81",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +142,146 @@            sig = inspect.Signature(params)\n\n            func.__signature__ = sig\n        return wrapper\n    return decorate"
  },
  {
    "id" : "eb9ddbd5-38d0-4849-8cc5-bc314c668f6b",
    "prId" : 19751,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19751#pullrequestreview-97833228",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fcab7e3-79b9-4552-93d3-9080b9995e92",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can you have this many blank lines in a docstring without flake8 complaining?",
        "createdAt" : "2018-02-20T11:48:25Z",
        "updatedAt" : "2018-02-21T11:37:12Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "ce0707e5-9813-4045-993f-5b7961075afd",
        "parentId" : "0fcab7e3-79b9-4552-93d3-9080b9995e92",
        "authorId" : "da19b543-f846-4415-b573-9ab03a8005fd",
        "body" : "Yes that is correct.  I didn't get any warnings here. ",
        "createdAt" : "2018-02-20T14:02:31Z",
        "updatedAt" : "2018-02-21T11:37:12Z",
        "lastEditedBy" : "da19b543-f846-4415-b573-9ab03a8005fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7ed3c41b6d0e63a08aa5b847a8c1c0565d13e6b",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +102,106 @@    yes!\n\n\n    To raise a warning that a keyword will be removed entirely in the future\n"
  },
  {
    "id" : "ae2570be-0f2d-4824-bd7a-7214229b2630",
    "prId" : 21093,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21093#pullrequestreview-123642366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ddbe085-4087-4c30-870e-6e7f4b8270e9",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I am not sure why, but it seems this does not give the correct docstring. \r\nCan you check that `pd.Series.argmin?` still gives the deprecation warning at the top? (I checked out this branch and didn't see it, while on master it is there)",
        "createdAt" : "2018-05-28T07:15:20Z",
        "updatedAt" : "2018-05-29T20:56:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "75dbaad4cf7b33b8b6ba709e3bd527e4d970cb5d",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +52,56 @@           %(msg)s\n\n        \"\"\"\n        warnings.warn(warning_msg, klass, stacklevel=stacklevel)\n        return alternative(*args, **kwargs)"
  },
  {
    "id" : "798585e9-2fa4-4def-8939-5813a7f94553",
    "prId" : 23768,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23768#pullrequestreview-176132126",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cc7f3fe-7a71-43bb-8f3e-8965b733e995",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm what are you changing this for?",
        "createdAt" : "2018-11-19T03:08:50Z",
        "updatedAt" : "2018-11-21T16:13:19Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "2da72d43-0e35-43e5-9f24-2e9a5b651ecc",
        "parentId" : "5cc7f3fe-7a71-43bb-8f3e-8965b733e995",
        "authorId" : "3a94b300-7c63-44d9-9222-d7a67a6cac21",
        "body" : "There is no need to use enumerate.",
        "createdAt" : "2018-11-19T03:11:35Z",
        "updatedAt" : "2018-11-21T16:13:19Z",
        "lastEditedBy" : "3a94b300-7c63-44d9-9222-d7a67a6cac21",
        "tags" : [
        ]
      },
      {
        "id" : "2fc5ff4a-843d-4508-b8a2-4d368ee8e8d2",
        "parentId" : "5cc7f3fe-7a71-43bb-8f3e-8965b733e995",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm OK thanks. Surprised that isn't picked up by the linter",
        "createdAt" : "2018-11-19T03:15:06Z",
        "updatedAt" : "2018-11-21T16:13:19Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb8640fe1105d8b52f88ea990e6d7dc7a5cfb711",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +334,338 @@        defaults = ('',) * n_wo_defaults + tuple(spec.defaults)\n    args = []\n    for var, default in zip(spec.args, defaults):\n        args.append(var if default == '' else var + '=' + repr(default))\n    if spec.varargs:"
  },
  {
    "id" : "802bce8b-3377-435c-b490-f8c83a1fccd7",
    "prId" : 27573,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27573#pullrequestreview-351451329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ada76f22-7cce-4d37-b4a0-f0eb11509882",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Instead of cramming allowed_args into one variable can we have separate parameters for positional and keyword argument allowance? I think a more natural fit that way",
        "createdAt" : "2019-08-24T07:46:15Z",
        "updatedAt" : "2020-03-31T18:09:04Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "0900997e-f304-439d-85b3-ae5ab8beb58a",
        "parentId" : "ada76f22-7cce-4d37-b4a0-f0eb11509882",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you do this?",
        "createdAt" : "2020-01-26T01:29:07Z",
        "updatedAt" : "2020-03-31T18:09:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "11acc879-4fd8-4433-b533-a20718940bb0",
        "parentId" : "ada76f22-7cce-4d37-b4a0-f0eb11509882",
        "authorId" : "dcd6dd33-5ee2-413d-9d8b-1f688ef3ee41",
        "body" : "I am not sure I understand you right (not a native English speaker).\r\n\r\nDoes it mean, for example,\r\n```\r\n_format_argument_list(3, [x, y])\r\n```\r\n\r\nshould return \"except for the arguments x, y and the first 3 positional arguments\"? Such warnings should never be produced by `deprecate_nonkeyword_arguments`, but may make this function useful to format some other warning messages. Is it right?",
        "createdAt" : "2020-01-31T11:40:45Z",
        "updatedAt" : "2020-03-31T18:09:04Z",
        "lastEditedBy" : "dcd6dd33-5ee2-413d-9d8b-1f688ef3ee41",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed63145c1cadc6c5fa2c119920faa5a1e8594c06",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +217,221 @@\n\ndef _format_argument_list(allow_args: Union[List[str], int]):\n    \"\"\"\n    Convert the allow_args argument (either string or integer) of"
  },
  {
    "id" : "0f977b20-41ce-44db-ab53-83680dc566a2",
    "prId" : 27573,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27573#pullrequestreview-284485272",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d6ec368-a3fc-40f3-87ca-dead5707bafa",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm why is stack level part of the signature here?",
        "createdAt" : "2019-09-05T17:25:12Z",
        "updatedAt" : "2020-03-31T18:09:04Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "02115c28-c643-4020-a155-6251205cad88",
        "parentId" : "9d6ec368-a3fc-40f3-87ca-dead5707bafa",
        "authorId" : "dcd6dd33-5ee2-413d-9d8b-1f688ef3ee41",
        "body" : "I just done it like it was in the `deprecate_kwarg` decorator serving a close purpose.\r\n\r\nNote that the stack level argument of `deprecate_kwarg` function currently seems to be never used, but if there is a reason to have it, it may be valueable here too.",
        "createdAt" : "2019-09-05T19:21:14Z",
        "updatedAt" : "2020-03-31T18:09:04Z",
        "lastEditedBy" : "dcd6dd33-5ee2-413d-9d8b-1f688ef3ee41",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed63145c1cadc6c5fa2c119920faa5a1e8594c06",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +265,269 @@    version: str,\n    allowed_args: Optional[Union[List[str], int]] = None,\n    stacklevel: int = 2,\n) -> Callable:\n    \"\"\""
  },
  {
    "id" : "2a5fb460-78e7-4f2a-9191-29e2bee9a2b0",
    "prId" : 27573,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27573#pullrequestreview-347277620",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22fd514a-3c34-4869-b72f-7dfe88057d27",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would maybe rephrase the message a little bit. Eg include something like \"Passing positional arguments is deprecated\" (and then continue with saying that all arguments except .. will be keyword only)\r\n\r\nAlso, should \"after pandas version xx\" be \"starting with pandas version xx\" ?",
        "createdAt" : "2020-01-23T12:28:10Z",
        "updatedAt" : "2020-03-31T18:09:04Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f10c99b4-c299-4892-9f1d-ca95599cb452",
        "parentId" : "22fd514a-3c34-4869-b72f-7dfe88057d27",
        "authorId" : "dcd6dd33-5ee2-413d-9d8b-1f688ef3ee41",
        "body" : "OK.",
        "createdAt" : "2020-01-23T12:53:55Z",
        "updatedAt" : "2020-03-31T18:09:04Z",
        "lastEditedBy" : "dcd6dd33-5ee2-413d-9d8b-1f688ef3ee41",
        "tags" : [
        ]
      },
      {
        "id" : "05469cb5-e513-4d53-9d27-4e760fbf79a3",
        "parentId" : "22fd514a-3c34-4869-b72f-7dfe88057d27",
        "authorId" : "dcd6dd33-5ee2-413d-9d8b-1f688ef3ee41",
        "body" : "OK",
        "createdAt" : "2020-01-23T13:01:48Z",
        "updatedAt" : "2020-03-31T18:09:04Z",
        "lastEditedBy" : "dcd6dd33-5ee2-413d-9d8b-1f688ef3ee41",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed63145c1cadc6c5fa2c119920faa5a1e8594c06",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +306,310 @@                msg = (\n                    \"Starting with Pandas version {version} all arguments of {funcname}\"\n                    \"{except_args} will be keyword-only\"\n                ).format(version=version, funcname=func.__name__, except_args=arguments)\n                warnings.warn(msg, FutureWarning, stacklevel=stacklevel)"
  },
  {
    "id" : "a8693b85-3f41-4512-9f23-457c9a060bda",
    "prId" : 28128,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28128#pullrequestreview-279693484",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49c65998-230a-40fb-a054-7af162b2b3d1",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is the bound required here? I thought only had to do with class inheritance so not sure if there's actually something for the Callable or if this is an undocumented feature",
        "createdAt" : "2019-08-25T16:08:44Z",
        "updatedAt" : "2019-08-25T16:11:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f65e74e7-cea1-4d8d-83d7-70d24d371b0a",
        "parentId" : "49c65998-230a-40fb-a054-7af162b2b3d1",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "this is to declare a decorator that preserves the signature of the function it decorates, regardless of that signature. https://mypy.readthedocs.io/en/latest/generics.html#declaring-decorators",
        "createdAt" : "2019-08-25T16:20:23Z",
        "updatedAt" : "2019-08-25T16:20:23Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "4c5cf038-c115-4db4-8204-891c471594b3",
        "parentId" : "49c65998-230a-40fb-a054-7af162b2b3d1",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Cool good find",
        "createdAt" : "2019-08-26T16:27:43Z",
        "updatedAt" : "2019-08-26T16:27:43Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fc30bf4b14f80ab49d38d4fa7885fd72bc80d31",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +19,23 @@\nFuncType = Callable[..., Any]\nF = TypeVar(\"F\", bound=FuncType)\n\n"
  },
  {
    "id" : "802a2720-8100-46e7-a19a-02302e7bc8cf",
    "prId" : 28128,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28128#pullrequestreview-279343446",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91ae1c2f-9045-4b0b-be42-27b73832e021",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think OK just to do `Dict` instead of `Dict[Any, Any]`; same thing but more readable",
        "createdAt" : "2019-08-25T16:09:12Z",
        "updatedAt" : "2019-08-25T16:11:47Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "24d3e390-2e03-4000-939b-89d1b6e0e037",
        "parentId" : "91ae1c2f-9045-4b0b-be42-27b73832e021",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "it is the same thing but would fail --disallow-any-generics check.\r\n\r\nalthough readability is important, i don't think the benefits of precise type checking can be understated.",
        "createdAt" : "2019-08-25T16:18:09Z",
        "updatedAt" : "2019-08-25T16:18:10Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fc30bf4b14f80ab49d38d4fa7885fd72bc80d31",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +105,109 @@    old_arg_name: str,\n    new_arg_name: Optional[str],\n    mapping: Optional[Union[Dict[Any, Any], Callable[[Any], Any]]] = None,\n    stacklevel: int = 2,\n) -> Callable[..., Any]:"
  },
  {
    "id" : "e4127477-a776-40bb-8607-adfe616e69e8",
    "prId" : 31060,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31060#pullrequestreview-354886674",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5076e88b-ae74-4e42-8402-1f03d7377dd9",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What are all of the type: ignore comments for?",
        "createdAt" : "2020-01-16T19:45:38Z",
        "updatedAt" : "2020-02-08T04:23:51Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "dd72940a-3fd3-4e8b-826f-3e555f0da056",
        "parentId" : "5076e88b-ae74-4e42-8402-1f03d7377dd9",
        "authorId" : "a4f1b7e8-eff6-4cf3-a1b5-7627eaa0f198",
        "body" : "It seems mypy didn't let us declare and use attributes of function objects. They have a [issue](https://github.com/python/mypy/issues/2087) for this, but seems there are no official solutions. \r\n\r\nWe might be able to use some trick to handle this, but I am not sure if it worth. It will introducing more \"unrelated\" code. Also, this call of `_docstr_template` has been checked by `hasattr`, so I think it is safe here.\r\n\r\nJust to be clear, I am open to make the adjustment to avoid this ignore comment. ",
        "createdAt" : "2020-01-17T03:41:22Z",
        "updatedAt" : "2020-02-08T04:23:51Z",
        "lastEditedBy" : "a4f1b7e8-eff6-4cf3-a1b5-7627eaa0f198",
        "tags" : [
        ]
      },
      {
        "id" : "6789281a-489c-4ae1-8aea-794b844f6669",
        "parentId" : "5076e88b-ae74-4e42-8402-1f03d7377dd9",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I think just adding `https://github.com/python/mypy/issues/2087` as a comment on a line preceding the ignores would be fine.",
        "createdAt" : "2020-02-07T01:40:37Z",
        "updatedAt" : "2020-02-08T04:23:51Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a7b36c621832d95919d95ea082b82079f823340",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +276,280 @@                templates.append(arg)\n            elif hasattr(arg, \"_docstr_template\"):\n                templates.append(arg._docstr_template)  # type: ignore\n            elif arg.__doc__:\n                templates.append(arg.__doc__)"
  },
  {
    "id" : "517902f0-5058-4f98-a3cf-db47178e0d1c",
    "prId" : 31060,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31060#pullrequestreview-346814210",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a49e1830-efca-47e3-be49-4a522c5b7688",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you explain / add a comment why the `_docstr_template` is needed?",
        "createdAt" : "2020-01-20T13:53:47Z",
        "updatedAt" : "2020-02-08T04:23:51Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ac576b67-66f5-494d-9c59-b46ded757fe9",
        "parentId" : "a49e1830-efca-47e3-be49-4a522c5b7688",
        "authorId" : "a4f1b7e8-eff6-4cf3-a1b5-7627eaa0f198",
        "body" : "> Can you explain / add a comment why the `_docstr_template` is needed?\r\n\r\nThe `doc` decorator will format docstring template and use the formatted string to replace `__doc__`. Using the decorator will cause us to lose the original template. \r\n\r\nTake this fake code as an example:\r\n```python\r\n@doc(method='cummax', operation='maximum')\r\ndef cummax(whatever):\r\n    \"\"\"\r\n    This is the {method} method.\r\n\r\n    It computes the cumulative {operation}.\r\n    \"\"\"\r\n\r\n@doc(cummax, method='cummin', operation='minimum')\r\ndef cummin(whatever):\r\n    pass\r\n```\r\n\r\nIn `cummin`, we would like to re-use the docstring template from `cummax`. However, when calling `@doc()` for `cummax`, the `__doc__` will no longer be the template. So, we might want to save the original template somewhere and use it later.\r\n\r\nI think it is a good idea to commenting this code because, at least for me, this is not intuitive. ",
        "createdAt" : "2020-01-20T18:42:56Z",
        "updatedAt" : "2020-02-08T04:23:51Z",
        "lastEditedBy" : "a4f1b7e8-eff6-4cf3-a1b5-7627eaa0f198",
        "tags" : [
        ]
      },
      {
        "id" : "8b79b50e-275d-4ed7-b1ad-431f0e0bd035",
        "parentId" : "a49e1830-efca-47e3-be49-4a522c5b7688",
        "authorId" : "a4f1b7e8-eff6-4cf3-a1b5-7627eaa0f198",
        "body" : "> Can you explain / add a comment why the `_docstr_template` is needed?\r\n\r\n@jorisvandenbossche I have [add more detail doc](https://github.com/pandas-dev/pandas/pull/31060/commits/88c6bf2830647ea65cbcfd13943e65afb5f86dee) under the decorator. May I have more feedback please?",
        "createdAt" : "2020-01-22T18:40:41Z",
        "updatedAt" : "2020-02-08T04:23:51Z",
        "lastEditedBy" : "a4f1b7e8-eff6-4cf3-a1b5-7627eaa0f198",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a7b36c621832d95919d95ea082b82079f823340",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +280,284 @@                templates.append(arg.__doc__)\n\n        wrapper._docstr_template = \"\".join(dedent(t) for t in templates)  # type: ignore\n        wrapper.__doc__ = wrapper._docstr_template.format(**kwargs)  # type: ignore\n"
  },
  {
    "id" : "ad4226eb-99e0-4edd-9026-13239229df2c",
    "prId" : 31060,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31060#pullrequestreview-345518114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3948a324-7e8a-403a-97f4-3e474077f660",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Only do this if there actually are kwargs? (otherwise you need to use double { also when you are not doing any formatting)",
        "createdAt" : "2020-01-20T13:58:21Z",
        "updatedAt" : "2020-02-08T04:23:51Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "946c8d69-10b9-423d-8a81-68429773fc69",
        "parentId" : "3948a324-7e8a-403a-97f4-3e474077f660",
        "authorId" : "a4f1b7e8-eff6-4cf3-a1b5-7627eaa0f198",
        "body" : "Yes, for current approach, we have to use `{{` and `}}` for `{` and `}`. I have a slight preference to keep it that way because I believe it can help keep behavior consistent and make it easier to use.\r\n\r\nThere are two kinds of docstring, in my opinion. We might name one \"doc decorator friendly\" and the other \"doc decorator indeterminate\":\r\n1. The \"doc decorator friendly\" means the docstring has been modified to use `format`, such as using `{{` and `}}` for `{` and `}`.  We can safely put the function into a doc decorator without checking formatting details. \r\n2. For \"doc decorator indeterminate\", it may have `{` or `}` there. If we want to use it in doc decorator, we might need to convert it to \"doc decorator friendly\" first.\r\n\r\nFor the current approach, all template was guaranteed to be formatted before putting it in `__doc__`. Therefore, if there's a doc decorator, we can easily tell the function is \"doc decorator friendly\". In addition, the user won't have to worry about using `{{` and `}}` or `{` and `}` in the docstring, because of the consistent behavior.",
        "createdAt" : "2020-01-20T20:22:36Z",
        "updatedAt" : "2020-02-08T04:23:51Z",
        "lastEditedBy" : "a4f1b7e8-eff6-4cf3-a1b5-7627eaa0f198",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a7b36c621832d95919d95ea082b82079f823340",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +281,285 @@\n        wrapper._docstr_template = \"\".join(dedent(t) for t in templates)  # type: ignore\n        wrapper.__doc__ = wrapper._docstr_template.format(**kwargs)  # type: ignore\n\n        return cast(F, wrapper)"
  },
  {
    "id" : "6bd7e303-f7e3-45e3-8f00-4b9a57ddf335",
    "prId" : 31970,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31970#pullrequestreview-372742241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "325bf1ee-4cd0-4f3a-ab81-695567c3e958",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Not sure if this could be a better fix for this one:\r\n```suggestion\r\n            if hasattr(arg, \"_docstring_components\") and isinstance(arg._docstring_components, list):\r\n                docstring_components.extend(arg._docstring_components)\r\n```",
        "createdAt" : "2020-03-10T01:23:26Z",
        "updatedAt" : "2020-03-11T23:21:23Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "22c2dee4-bae6-406d-b429-0eb703b9ec52",
        "parentId" : "325bf1ee-4cd0-4f3a-ab81-695567c3e958",
        "authorId" : "a4f1b7e8-eff6-4cf3-a1b5-7627eaa0f198",
        "body" : "Hi @datapythonista. I would consider this as two parts. One is to add type check for `_docstring_components` and one for remove `# type: ignore`.\r\n\r\n#### For remove `# type: ignore` \r\nAfter I made the change, I still get the errors below and not sure if we can remove that.\r\n```bash\r\npandas/util/_decorators.py:280: error: Item \"str\" of \"Union[str, Callable[..., Any]]\" has no attribute \"_docstring_components\"\r\npandas/util/_decorators.py:280: error: Item \"function\" of \"Union[str, Callable[..., Any]]\" has no attribute \"_docstring_components\"\r\n```\r\n\r\n*I guess my settings are not the same as checks here. I even the last passed build, I still get mypy errors on local. So, the change might fix it and just I don't know.*\r\n\r\n#### For checking if `_docstring_components` is `list`\r\nI think this is a very good point, we do as defensive programming. But I am a little bit curious about how far we should go to protect it. Also, since this function is internal use for pandas only, would it be better to let it failed? Then the developer would get notified there is a conflict immediately?\r\n\r\nJust to be clarified, I would be happy to make this change if you (or anyone) feels needed. Because I see both pros and cons for this, I am not sure which one will be better.",
        "createdAt" : "2020-03-11T00:22:13Z",
        "updatedAt" : "2020-03-11T23:21:23Z",
        "lastEditedBy" : "a4f1b7e8-eff6-4cf3-a1b5-7627eaa0f198",
        "tags" : [
        ]
      },
      {
        "id" : "5c869444-a38f-46ec-8883-6f2b9c3044f4",
        "parentId" : "325bf1ee-4cd0-4f3a-ab81-695567c3e958",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I'm happy to merge this as is, was wondering if the suggested change would fix the problem.\r\n\r\nWe can surely go back to it in the future if needed, but let's merge this first, since this already adds a lot of value, and we can start replacing `Appender` by `doc` at a larger scale after this.",
        "createdAt" : "2020-03-11T13:12:02Z",
        "updatedAt" : "2020-03-11T23:21:23Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "95a86eec06b2c2d115b607de4d22a492088d3902",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +278,282 @@        for arg in args:\n            if hasattr(arg, \"_docstring_components\"):\n                docstring_components.extend(arg._docstring_components)  # type: ignore\n            elif isinstance(arg, str) or arg.__doc__:\n                docstring_components.append(arg)"
  },
  {
    "id" : "61ca15a7-53ff-4a24-8f6c-79189d64c6fc",
    "prId" : 33456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33456#pullrequestreview-391550475",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6561f1c5-dfd5-47ed-9afe-042a41f57f98",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "side issue i think we should isort so _typing imports right after typing",
        "createdAt" : "2020-04-10T17:02:04Z",
        "updatedAt" : "2020-04-10T17:02:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ecaf9f0a382f151ca84f080e2d2e72e1720e097",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +6,10 @@\nfrom pandas._libs.properties import cache_readonly  # noqa\nfrom pandas._typing import F\n\n"
  },
  {
    "id" : "7b0f8c67-7711-4d39-9e4e-98ce4d425cd5",
    "prId" : 39407,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39407#pullrequestreview-576674043",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "506e46eb-95eb-4211-bde2-d52c1ad5828b",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "add the error message as a comment to help future readers and contributors looking to help with #37715\r\n```suggestion\r\n    # error: Incompatible return value type (got \"Callable[[VarArg(Any),\r\n    # KwArg(Any)], Callable[...,Any]]\", expected \"Callable[[F], F]\")\r\n    return wrapper  # type: ignore[return-value]\r\n```",
        "createdAt" : "2021-01-26T10:54:49Z",
        "updatedAt" : "2021-01-26T19:14:24Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "b7e3d270-b5a7-46d0-9c4b-c9146a97da97",
        "parentId" : "506e46eb-95eb-4211-bde2-d52c1ad5828b",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "Done",
        "createdAt" : "2021-01-26T19:10:13Z",
        "updatedAt" : "2021-01-26T19:14:24Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      }
    ],
    "commit" : "beb14e7e15700f558511c26288f13b52a171160d",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +81,85 @@    # error: Incompatible return value type (got \"Callable[[VarArg(Any),\n    # KwArg(Any)], Callable[...,Any]]\", expected \"Callable[[F], F]\")\n    return wrapper  # type: ignore[return-value]\n\n"
  }
]