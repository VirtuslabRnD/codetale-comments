[
  {
    "id" : "40fa184f-9f81-4e0f-a767-da2ded368706",
    "prId" : 3914,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fe2f369-361f-4348-bb72-261e39dbef77",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "small typo...\n",
        "createdAt" : "2013-06-20T20:57:12Z",
        "updatedAt" : "2013-06-21T00:31:47Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ddb5860e75ccdf896a24ab1c0b6377ced4cb1d0",
    "line" : 196,
    "diffHunk" : "@@ -1,1 +830,834 @@        IOError: Failure Message\n\n    I you set check_before_test, it will check the url first and not run the test on failure::\n        >>> @with_connectivity_check(\"failing://url.blaher\", check_before_test=True)\n        ... def test_something():"
  },
  {
    "id" : "33799f26-8630-442d-8d51-49763f6eddf5",
    "prId" : 4381,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "caa8bd37-13e4-4f27-9de8-e5cbb93b0e05",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "whoops...thanks for catching this!\n",
        "createdAt" : "2013-07-27T20:31:23Z",
        "updatedAt" : "2013-07-27T20:31:23Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "a20526c3-829c-4c58-9ce7-fc98eb5027ee",
        "parentId" : "caa8bd37-13e4-4f27-9de8-e5cbb93b0e05",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "no problem. just setting up an ubuntu server at home (so i can run vbench while doing other things) and a read_html test failed\n",
        "createdAt" : "2013-07-27T20:32:49Z",
        "updatedAt" : "2013-07-27T20:32:49Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bb024e26046701b61d3e9fd696beb2782214ca1",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +782,786 @@                       raise\n\n                runs += 1\n\n    return network_wrapper"
  },
  {
    "id" : "e3098161-ff90-44b7-acd2-10be903870f8",
    "prId" : 4430,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0435c556-1b37-4f56-9b95-8b0dd8e21079",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "I don't think this is as useful as what we had previously. It needs to raise when one of the components does not have an attribute (e.g., it's the wrong type altogether or something weird has happened). Further, if you do `hasattr` or `getattr`, it's not exactly equivalent to trying to get the attribute and defaulting to None otherwise. (and also I think `getattr` ignores any exception that occurs when trying to get it).  So, I think it's better to add an assert_equal that takes an argument which explains. e.g.\n\n``` python\nassert_equal(left.column.dtype, right.column.dtype, \"column dtypes did not match')\n```\n\nWhere `assert_equal` is:\n\n``` python\ndef assert_equal(actual, expected, msg=\"\"):\n     assert expected == actual, \"%s: %r != %r\" % (msg, actual, expected)\n```\n\nPlus, this means that the Exception that will bubbles up if something goes wrong will not be on `assert_attr_equal` but will instead be on the line `assert_equal(left.column.dtype, right.column.dtype, msg)` and you'll get the nice error message about not having an attribute and you'll see it's on the column...much easier to debug.\n\nTo illustrate the difference, check out this small example:\n\n``` python\nclass SomeClass(object):\n    @property\n    def failing_property(self):\n        return \"wefawef\".unreal_method([\"a\"])\n\nobj = SomeClass()\nprint getattr(obj, \"failing_property\", None) # no error\nprint obj.failing_property # fails appropriately\n```\n\nAnd if you just change the `getattr(left, attr, None)` to `getattr(left, attr)`, you still lose the nicer error output because the actual error line will read `getattr(left, attr)` rather than `left.column.dtype`\n",
        "createdAt" : "2013-08-01T15:15:35Z",
        "updatedAt" : "2013-08-01T15:16:54Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a256effe60976c36aea698c883958155ef549d2d",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +137,141 @@\n\ndef assert_attr_equal(attr, left, right):\n    left_attr = getattr(left, attr, None)\n    right_attr = getattr(right, attr, None)"
  },
  {
    "id" : "dc28c608-1269-4b3b-8715-12260e81cf8f",
    "prId" : 5425,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19644b5a-7ab7-4659-bbf0-c5c64f3b4f51",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "good call putting this within the try/finally.\n",
        "createdAt" : "2013-11-04T01:09:28Z",
        "updatedAt" : "2013-11-04T01:09:28Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9058d50f0c20b624c4079433f7cdcfd1ec92f65c",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +335,339 @@\n        try:\n            filename = tempfile.mkstemp(suffix=filename)[1]\n            yield filename\n        finally:"
  },
  {
    "id" : "e48d7010-6057-4d9d-899f-5dc64606170f",
    "prId" : 6174,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3785f411-3e5b-4a2b-b549-9b64d2dcf15f",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "nice way to hack around this :)\n",
        "createdAt" : "2014-01-29T23:37:17Z",
        "updatedAt" : "2014-01-29T23:37:17Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "a5f74b52-a696-4d91-bb9d-d6afd78a2e9b",
        "parentId" : "3785f411-3e5b-4a2b-b549-9b64d2dcf15f",
        "authorId" : null,
        "body" : "desperate you mean. I can't believe how screwed up this corner of python is,\nyou literraly have to do all this to catch these network errors. Timeouts can bubble\nup in at least 5 different ways, diff exceptions, with errno or with out. nightmare.\n\nThe code for @network, and the kwarg lists were really nice to see after\nwallowing in the muck of indexing.py. kudos.\n",
        "createdAt" : "2014-01-29T23:50:28Z",
        "updatedAt" : "2014-01-29T23:50:28Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "a490ad4f80a4e17f42b138e77cff93c109f32f93",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +970,974 @@# skip tests on exceptions with this message\n_network_error_messages = (\n    'urlopen error timed out',\n    'timeout: timed out'\n    )"
  },
  {
    "id" : "20560b71-c895-435d-8e0c-812f44114703",
    "prId" : 6591,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b51bf31-55c5-4e9d-b166-f2156b292bbb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback Is there a reason that `assert_numpy_array_equal` is only avaiable in the TestCase class and not in the rest of the testing module? (so I cannot use that function here)\n",
        "createdAt" : "2014-03-11T09:11:51Z",
        "updatedAt" : "2014-03-11T12:04:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1127d70342b3ff68a1709db1a8ea6463ab946777",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +509,513 @@        if not np.array_equal(left.values, right.values):\n            raise AssertionError('{0} is not equal to {1}.'.format(left.values,\n                                                                   right.values))\n    else:\n        assert_almost_equal(left.values, right.values, check_less_precise)"
  },
  {
    "id" : "8a1bd965-98a9-409e-8b10-be2d193e5121",
    "prId" : 7451,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0565955-8b43-4cc2-bea1-aefb0ce774e6",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I don't think it ever happens one of the two is available and the other not? (all scipy version we support have both submodules?) So maybe just checking for scipy? (because now you will get `scipy.stats not installed` for tests that need scipy.interpolate\n",
        "createdAt" : "2014-06-14T10:50:27Z",
        "updatedAt" : "2014-06-21T14:50:31Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "cea04490-bcc5-484f-bbaf-dc9e3b014ed5",
        "parentId" : "b0565955-8b43-4cc2-bea1-aefb0ce774e6",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not true \nscipy 0.10 or 0.11 breaks on scipy.stats (I have it on windows)\n",
        "createdAt" : "2014-06-14T11:25:21Z",
        "updatedAt" : "2014-06-21T14:50:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7766076d-3390-4a07-a0bd-45781241eeaf",
        "parentId" : "b0565955-8b43-4cc2-bea1-aefb0ce774e6",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "ah, didn't know (never had that problem on windows). But still, shouldn't it be in two seperate functions then? The tests that use `interpolate` should not be skipped due to `stats`?\n",
        "createdAt" : "2014-06-14T12:11:06Z",
        "updatedAt" : "2014-06-21T14:50:31Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f2d73ee9-eabb-4ba5-86a2-e8ac65f734a7",
        "parentId" : "b0565955-8b43-4cc2-bea1-aefb0ce774e6",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Or leave it local func because `scipy.interpolate` requirement is only checked in `test_generic.py`.\n",
        "createdAt" : "2014-06-14T12:34:00Z",
        "updatedAt" : "2014-06-21T14:50:31Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7c04aecaaaf8fc110a9e0f2274d449b42346a3d",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +220,224 @@    except ImportError:\n        import nose\n        raise nose.SkipTest('scipy.interpolate missing')\n\n"
  },
  {
    "id" : "6c2a73f1-8f18-4ede-bf11-8586102383b0",
    "prId" : 8519,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a52118ec-fa0e-457b-8262-d7d4d39de165",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ahh, this is defined in `tests/test_categorical.py`, pls remove from there and change the usages to use this one (or I can do after), lmk\n",
        "createdAt" : "2014-10-10T11:18:36Z",
        "updatedAt" : "2014-10-10T12:15:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "eb46444f-3211-44ff-9a61-98025597a834",
        "parentId" : "a52118ec-fa0e-457b-8262-d7d4d39de165",
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "I've moved it from [there](https://github.com/pydata/pandas/pull/8519/files#diff-ed4f442894a2f521dfac3193a3a8d8a0L24) to here.\n",
        "createdAt" : "2014-10-10T11:26:08Z",
        "updatedAt" : "2014-10-10T12:15:25Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      },
      {
        "id" : "eb757490-d5f1-47b4-9663-002e60b8931a",
        "parentId" : "a52118ec-fa0e-457b-8262-d7d4d39de165",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, except the tests in categorical use `self.assert_categorical_equal` (easiest to maybe define this in `utils/testing/TestCase` to call this is ok too\n",
        "createdAt" : "2014-10-10T11:29:49Z",
        "updatedAt" : "2014-10-10T12:15:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3c185082-104f-47e2-b4bc-f8c8eb7ae45d",
        "parentId" : "a52118ec-fa0e-457b-8262-d7d4d39de165",
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "> easiest to maybe define this in utils/testing/TestCase\n\nwhich is what this patch does, no? :)\n",
        "createdAt" : "2014-10-10T11:35:50Z",
        "updatedAt" : "2014-10-10T12:15:25Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      },
      {
        "id" : "1dfbf99c-5303-4832-9340-edc6f7ca5a2b",
        "parentId" : "a52118ec-fa0e-457b-8262-d7d4d39de165",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "duh! wasn't really looking at it! (side issue - we have BOTH module level and TestCase level functions for some of the comparators...I think their is an issue out there somewhere)\n\ne.g. you can do `tm.assert_series_equal` but not `self.assert_series_equal`...but ok with the cat test changes\n",
        "createdAt" : "2014-10-10T11:37:38Z",
        "updatedAt" : "2014-10-10T12:15:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b68017eb59ea46e6e6716ac2490c9530eb3510d9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +122,126 @@        raise AssertionError('{0} is not equivalent to {1}.'.format(np_array, assert_equal))\n\n    def assert_categorical_equal(self, res, exp):\n        if not array_equivalent(res.categories, exp.categories):\n            raise AssertionError('categories not equivalent: {0} vs {1}.'.format(res.categories,"
  },
  {
    "id" : "507ea99b-3667-4431-a1de-46cf95f250e0",
    "prId" : 10250,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcbb9596-71f6-4633-a4fc-620b2e5f7e36",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm thought we had something like this\n",
        "createdAt" : "2015-11-07T17:40:40Z",
        "updatedAt" : "2015-11-15T20:26:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d919be95-dcdc-4a5e-a980-53672f77ed2d",
        "parentId" : "bcbb9596-71f6-4633-a4fc-620b2e5f7e36",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I thought so too. There was `skip_if_no_package`, which is pretty much the body of the `wrapper`, but I couldn't use it as a decorator.\n",
        "createdAt" : "2015-11-07T18:09:05Z",
        "updatedAt" : "2015-11-15T20:26:30Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "702d63ee9b72999d6d16cfa2bc9b2c5fa09cfa5c",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1585,1589 @@        @wraps(func)\n        def wrapper(*args, **kwargs):\n            package_check(pkg_name, version=version, app=app,\n                        exc_failed_import=SkipTest, exc_failed_check=SkipTest)\n            return func(*args, **kwargs)"
  },
  {
    "id" : "cd622c3d-4951-445b-ad4d-c0e19ec4d164",
    "prId" : 10507,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2560e0d-501f-41a4-8782-8b18fc6199a5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "whoosh, actual doc-strings for the test functions, hoo-ah!\n",
        "createdAt" : "2015-07-30T18:46:55Z",
        "updatedAt" : "2015-08-10T09:56:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ed857e1616d407d5223180d0130b6d982b4ef85",
    "line" : 261,
    "diffHunk" : "@@ -1,1 +831,835 @@        Whether to check the Series and Index names attribute.\n    check_dateteimelike_compat : bool, default False\n        Compare datetime-like which is comparable ignoring dtype.\n    obj : str, default 'Series'\n        Specify object name being compared, internally used to show appropriate"
  },
  {
    "id" : "7d6caa6d-1833-4154-81bd-997f6d2d6d45",
    "prId" : 10507,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24ed4d52-b7b6-49aa-98f7-00fd8bef1f6a",
        "parentId" : null,
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Added deatailed error messages and tests to be compat with`assert_almost_equal`.\n",
        "createdAt" : "2015-07-31T14:50:20Z",
        "updatedAt" : "2015-08-10T09:56:17Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ed857e1616d407d5223180d0130b6d982b4ef85",
    "line" : 220,
    "diffHunk" : "@@ -1,1 +791,795 @@            msg = '{0} values are different ({1} %)'.format(obj, np.round(diff, 5))\n            raise_assert_detail(obj, msg, left, right)\n        elif is_list_like(left):\n            msg = \"First object is iterable, second isn't\"\n            raise_assert_detail(obj, msg, left, right)"
  },
  {
    "id" : "139e9706-a636-4dfa-8430-54c17c334428",
    "prId" : 10507,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29c7586c-381a-4490-b7ac-05f80c34f888",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is it needed to add two keyword arguments for this? Seems that this should also be possible with only one?\n",
        "createdAt" : "2015-08-10T09:09:03Z",
        "updatedAt" : "2015-08-10T09:56:17Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "28713c67-7a92-42c0-9494-ef360c3fa544",
        "parentId" : "29c7586c-381a-4490-b7ac-05f80c34f888",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "I'm willing to change if there is better wording / options. Do you have any idea? There are 3 levels:\n- 1: Use assert_equal\n- 2: Use assert_almost_equal, comparing 5 digits after decimal points (default)\n- 3: Use assert_almost_equal, comparing 3 digits after decimal points\n",
        "createdAt" : "2015-08-10T10:03:51Z",
        "updatedAt" : "2015-08-10T10:03:51Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "06694a9e-59e2-4bb7-bae7-c6340b087114",
        "parentId" : "29c7586c-381a-4490-b7ac-05f80c34f888",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "After I put this comment, I saw that this is the way it is done for assert_frame/series_equal as well, so at least it is consistent. \nBut apart from that, I find it not really a nice interface. But as the same is true for assert_frame/series_equal, this can be deferred to a separate issue.\n\nIn short, this way of specifying the precision is not very flexible. I think we should try to rely on something like `np.testing.assert_allclose` with relative and absolute tolerance.\n",
        "createdAt" : "2015-08-10T11:12:46Z",
        "updatedAt" : "2015-08-10T11:12:46Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "fed4a5dc-c00b-4471-96c4-2c5a501fa72a",
        "parentId" : "29c7586c-381a-4490-b7ac-05f80c34f888",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Thanks. Let's split the discussion to #10788. Merging this.\n",
        "createdAt" : "2015-08-10T16:27:05Z",
        "updatedAt" : "2015-08-10T16:27:05Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ed857e1616d407d5223180d0130b6d982b4ef85",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +554,558 @@        5 digits (False) or 3 digits (True) after decimal points are compared.\n    check_exact : bool, default True\n        Whether to compare number exactly.\n    obj : str, default 'Index'\n        Specify object name being compared, internally used to show appropriate"
  },
  {
    "id" : "2c9a359e-a626-483e-98c2-7b66c18efc41",
    "prId" : 14904,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14904#pullrequestreview-24747973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5997821e-f713-436d-b649-5bd4d7208198",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "these have nose.SkipTest -> pytest.skip",
        "createdAt" : "2017-03-02T14:50:44Z",
        "updatedAt" : "2017-03-04T11:46:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fac34ce6c646407111c09a942cbd195b6cbf590",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +431,435 @@    except ImportError:\n        try:\n            from unittest import mock  # noqa\n        except ImportError:\n            import nose"
  },
  {
    "id" : "3cadf005-0e3b-452c-ace7-95bfd696d3b9",
    "prId" : 17236,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17236#pullrequestreview-58629708",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d473260-0bb1-432f-aff5-feb0c534c4c0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here",
        "createdAt" : "2017-08-25T11:35:31Z",
        "updatedAt" : "2017-08-30T16:34:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c8205c0681b486ed73bdcb816b3728bee1a5f78",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +1908,1912 @@    tuples = lzip(*tuples)\n\n    # convert tuples to index\n    if nentries == 1:\n        # we have a single level of tuples, i.e. a regular Index"
  },
  {
    "id" : "c3991005-88f6-457b-8d26-f464540e365b",
    "prId" : 20545,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20545#pullrequestreview-108439508",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bea25ba5-833e-4d04-854e-bf275572b465",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Since 3.0 - 3.4 are no longer supported, seems fine to use `PY3`.  Could use `PY35` if being explicit would be preferred here (or maybe just leave as-is).",
        "createdAt" : "2018-03-30T03:12:18Z",
        "updatedAt" : "2018-03-30T22:16:28Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "95d3cfaf-29eb-4d3b-9543-fa50d87a2583",
        "parentId" : "bea25ba5-833e-4d04-854e-bf275572b465",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I'm fine with this change.  We should be encouraging code that relies solely on the supported versions of Python and not do the C-esque thing of making it super-backwards-compatible 😄 ",
        "createdAt" : "2018-03-30T21:13:58Z",
        "updatedAt" : "2018-03-30T22:16:28Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cf2e98741ee24b1381cda09b25fbfb87083aeae",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2089,2093 @@_network_error_classes = (IOError, httplib.HTTPException)\n\nif PY3:\n    _network_error_classes += (TimeoutError,)  # noqa\n"
  },
  {
    "id" : "d54a41ed-522e-4a53-862f-b051ca5e4cf1",
    "prId" : 20593,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20593#pullrequestreview-110547673",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "405860e9-5722-4e9f-a07b-28a828d34c6b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you import PY2 and string_types up top",
        "createdAt" : "2018-04-09T16:47:56Z",
        "updatedAt" : "2018-04-09T17:34:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "10bb1609-e586-4d10-96d1-ce674b59b3ff",
        "parentId" : "405860e9-5722-4e9f-a07b-28a828d34c6b",
        "authorId" : "1118e4ce-b983-4d58-96de-d75f89cf404f",
        "body" : "👍575b2e8",
        "createdAt" : "2018-04-09T17:34:42Z",
        "updatedAt" : "2018-04-09T17:34:42Z",
        "lastEditedBy" : "1118e4ce-b983-4d58-96de-d75f89cf404f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f7e231fd329330f4a9dbfe33aeafa10968d0ee7",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +993,997 @@    elif is_categorical_dtype(left):\n        left = repr(left)\n\n    if PY2 and isinstance(left, string_types):\n        # left needs to be printable in native text type in python2"
  },
  {
    "id" : "db83cf49-98c6-42ed-8f80-adb95c4ce6e9",
    "prId" : 21092,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21092#pullrequestreview-121040608",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65fa3c70-2b77-4c9f-afe6-808086aed55d",
        "parentId" : null,
        "authorId" : "ef996a8c-eb13-4094-b685-da5271bcb04e",
        "body" : "modified order of params to match other `assert_*` helper methods",
        "createdAt" : "2018-05-17T13:31:53Z",
        "updatedAt" : "2018-05-17T13:31:53Z",
        "lastEditedBy" : "ef996a8c-eb13-4094-b685-da5271bcb04e",
        "tags" : [
        ]
      }
    ],
    "commit" : "86999e387545cbe879b519db88b86cd8ebe0a5bc",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +1026,1030 @@def assert_numpy_array_equal(left, right, strict_nan=False,\n                             check_dtype=True, err_msg=None,\n                             check_same=None, obj='numpy array'):\n    \"\"\" Checks that 'np.ndarray' is equivalent\n"
  },
  {
    "id" : "0ea73b7f-639e-40b2-b57e-aec420db1962",
    "prId" : 21261,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21261#pullrequestreview-131361507",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1ee8d90-b2c9-4f48-ba72-ac17b7c87484",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think we should only do this if `check_dtype=True` ?",
        "createdAt" : "2018-06-22T14:48:34Z",
        "updatedAt" : "2018-06-29T00:18:42Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "57aa0868-598c-469b-8d6c-78f49c121821",
        "parentId" : "e1ee8d90-b2c9-4f48-ba72-ac17b7c87484",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "I'm not sure I follow your logic for this.  Before, we had no code that really compared two EA's for testing. However, that code doesn't work correctly if they are categorical dtypes.  The `check_dtype` is a separate check, so if `check_dtype` was False, you'd still do this test the same way.",
        "createdAt" : "2018-06-22T22:14:08Z",
        "updatedAt" : "2018-06-29T00:18:42Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fc93e49a28eccc4c66294e7238ba63f0e7bda29",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1247,1251 @@    elif (is_extension_array_dtype(left) and not is_categorical_dtype(left) and\n          is_extension_array_dtype(right) and not is_categorical_dtype(right)):\n        return assert_extension_array_equal(left.values, right.values)\n\n    else:"
  },
  {
    "id" : "7310bd61-41c7-4558-b889-3bdb0ff495ae",
    "prId" : 21406,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21406#pullrequestreview-149503220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf70d81c-457c-45a9-bf86-584ed31f1842",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can you add a unit test for this in `pandas/tests/util/test_testing.py`?",
        "createdAt" : "2018-07-24T16:26:52Z",
        "updatedAt" : "2018-10-19T05:43:15Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "ab20cf16-3cc2-4107-b1e0-3f1d6dbdace4",
        "parentId" : "bf70d81c-457c-45a9-bf86-584ed31f1842",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Feedback was addressed in a715d9c.",
        "createdAt" : "2018-08-25T07:27:06Z",
        "updatedAt" : "2018-10-19T05:43:15Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "23ce5c6cf5fd649a19692a9bda0fbc844534127e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2986,2990 @@\n\ndef convert_rows_list_to_csv_str(rows_list):\n    \"\"\"\n    Convert list of CSV rows to single CSV-formatted string for current OS."
  },
  {
    "id" : "2f8b8d34-add6-4bf2-a24c-0a6edda2a60b",
    "prId" : 22543,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22543#pullrequestreview-151094544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a850634-a603-4d53-af52-e1be2f72f5e3",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Looks like `wraps` wasn't preserving the signature in Py27 which would cause this to choke when combined with a parametrized function. Simply switched to the function from compat for now - providing as reference in case anyone runs into a similar issue in the future",
        "createdAt" : "2018-08-30T17:10:31Z",
        "updatedAt" : "2018-09-03T16:44:44Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf3b9292043ec8ee9982c224a832ac35cb6c59fb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +674,678 @@    \"\"\"\n\n    @compat.wraps(f)\n    def wrapper(*args, **kwargs):\n        try:"
  },
  {
    "id" : "55fe8c3b-dcbc-4e72-bb02-434349358dea",
    "prId" : 22776,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22776#pullrequestreview-157062554",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a49d69a7-0866-4194-9e15-acd9c4b75b78",
        "parentId" : null,
        "authorId" : "50b69844-f7de-4554-9a4d-e8e8c4ea6836",
        "body" : "I think this and everything below it in this diff is from a botched rebase. Trying to fix it...",
        "createdAt" : "2018-09-19T23:38:34Z",
        "updatedAt" : "2018-09-20T14:30:21Z",
        "lastEditedBy" : "50b69844-f7de-4554-9a4d-e8e8c4ea6836",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fed465312a548bcb3e53cb6dce6de0b5054be1e",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +1327,1331 @@    check_dtype : bool, default True\n        Whether to check the DataFrame dtype is identical.\n    check_index_type : bool / string {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype and inferred_type\n        are identical."
  }
]