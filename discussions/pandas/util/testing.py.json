[
  {
    "id" : "40fa184f-9f81-4e0f-a767-da2ded368706",
    "prId" : 3914,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fe2f369-361f-4348-bb72-261e39dbef77",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "small typo...\n",
        "createdAt" : "2013-06-20T20:57:12Z",
        "updatedAt" : "2013-06-21T00:31:47Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ddb5860e75ccdf896a24ab1c0b6377ced4cb1d0",
    "line" : 196,
    "diffHunk" : "@@ -1,1 +830,834 @@        IOError: Failure Message\n\n    I you set check_before_test, it will check the url first and not run the test on failure::\n        >>> @with_connectivity_check(\"failing://url.blaher\", check_before_test=True)\n        ... def test_something():"
  },
  {
    "id" : "33799f26-8630-442d-8d51-49763f6eddf5",
    "prId" : 4381,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "caa8bd37-13e4-4f27-9de8-e5cbb93b0e05",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "whoops...thanks for catching this!\n",
        "createdAt" : "2013-07-27T20:31:23Z",
        "updatedAt" : "2013-07-27T20:31:23Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "a20526c3-829c-4c58-9ce7-fc98eb5027ee",
        "parentId" : "caa8bd37-13e4-4f27-9de8-e5cbb93b0e05",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "no problem. just setting up an ubuntu server at home (so i can run vbench while doing other things) and a read_html test failed\n",
        "createdAt" : "2013-07-27T20:32:49Z",
        "updatedAt" : "2013-07-27T20:32:49Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bb024e26046701b61d3e9fd696beb2782214ca1",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +782,786 @@                       raise\n\n                runs += 1\n\n    return network_wrapper"
  },
  {
    "id" : "e3098161-ff90-44b7-acd2-10be903870f8",
    "prId" : 4430,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0435c556-1b37-4f56-9b95-8b0dd8e21079",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "I don't think this is as useful as what we had previously. It needs to raise when one of the components does not have an attribute (e.g., it's the wrong type altogether or something weird has happened). Further, if you do `hasattr` or `getattr`, it's not exactly equivalent to trying to get the attribute and defaulting to None otherwise. (and also I think `getattr` ignores any exception that occurs when trying to get it).  So, I think it's better to add an assert_equal that takes an argument which explains. e.g.\n\n``` python\nassert_equal(left.column.dtype, right.column.dtype, \"column dtypes did not match')\n```\n\nWhere `assert_equal` is:\n\n``` python\ndef assert_equal(actual, expected, msg=\"\"):\n     assert expected == actual, \"%s: %r != %r\" % (msg, actual, expected)\n```\n\nPlus, this means that the Exception that will bubbles up if something goes wrong will not be on `assert_attr_equal` but will instead be on the line `assert_equal(left.column.dtype, right.column.dtype, msg)` and you'll get the nice error message about not having an attribute and you'll see it's on the column...much easier to debug.\n\nTo illustrate the difference, check out this small example:\n\n``` python\nclass SomeClass(object):\n    @property\n    def failing_property(self):\n        return \"wefawef\".unreal_method([\"a\"])\n\nobj = SomeClass()\nprint getattr(obj, \"failing_property\", None) # no error\nprint obj.failing_property # fails appropriately\n```\n\nAnd if you just change the `getattr(left, attr, None)` to `getattr(left, attr)`, you still lose the nicer error output because the actual error line will read `getattr(left, attr)` rather than `left.column.dtype`\n",
        "createdAt" : "2013-08-01T15:15:35Z",
        "updatedAt" : "2013-08-01T15:16:54Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a256effe60976c36aea698c883958155ef549d2d",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +137,141 @@\n\ndef assert_attr_equal(attr, left, right):\n    left_attr = getattr(left, attr, None)\n    right_attr = getattr(right, attr, None)"
  },
  {
    "id" : "dc28c608-1269-4b3b-8715-12260e81cf8f",
    "prId" : 5425,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19644b5a-7ab7-4659-bbf0-c5c64f3b4f51",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "good call putting this within the try/finally.\n",
        "createdAt" : "2013-11-04T01:09:28Z",
        "updatedAt" : "2013-11-04T01:09:28Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9058d50f0c20b624c4079433f7cdcfd1ec92f65c",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +335,339 @@\n        try:\n            filename = tempfile.mkstemp(suffix=filename)[1]\n            yield filename\n        finally:"
  },
  {
    "id" : "e48d7010-6057-4d9d-899f-5dc64606170f",
    "prId" : 6174,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3785f411-3e5b-4a2b-b549-9b64d2dcf15f",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "nice way to hack around this :)\n",
        "createdAt" : "2014-01-29T23:37:17Z",
        "updatedAt" : "2014-01-29T23:37:17Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "a5f74b52-a696-4d91-bb9d-d6afd78a2e9b",
        "parentId" : "3785f411-3e5b-4a2b-b549-9b64d2dcf15f",
        "authorId" : null,
        "body" : "desperate you mean. I can't believe how screwed up this corner of python is,\nyou literraly have to do all this to catch these network errors. Timeouts can bubble\nup in at least 5 different ways, diff exceptions, with errno or with out. nightmare.\n\nThe code for @network, and the kwarg lists were really nice to see after\nwallowing in the muck of indexing.py. kudos.\n",
        "createdAt" : "2014-01-29T23:50:28Z",
        "updatedAt" : "2014-01-29T23:50:28Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "a490ad4f80a4e17f42b138e77cff93c109f32f93",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +970,974 @@# skip tests on exceptions with this message\n_network_error_messages = (\n    'urlopen error timed out',\n    'timeout: timed out'\n    )"
  }
]