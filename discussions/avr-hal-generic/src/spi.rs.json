[
  {
    "id" : "9a513178-4b39-4303-ac78-943a493271cc",
    "prId" : 103,
    "prUrl" : "https://github.com/Rahix/avr-hal/pull/103#pullrequestreview-532558668",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb826b79-067b-4e56-ae3e-ae5f19ad5639",
        "parentId" : null,
        "authorId" : "126ee8df-948d-452e-a666-5239b5e88a2c",
        "body" : "Should also implement `StatefulOutputPin` and `ToggleableOutputPin` from _embedded-hal_ as well.",
        "createdAt" : "2020-11-17T09:31:58Z",
        "updatedAt" : "2020-11-17T22:10:38Z",
        "lastEditedBy" : "126ee8df-948d-452e-a666-5239b5e88a2c",
        "tags" : [
        ]
      },
      {
        "id" : "bccbcd89-6a1f-46f9-8003-27bafbafb3e2",
        "parentId" : "eb826b79-067b-4e56-ae3e-ae5f19ad5639",
        "authorId" : "7fc8b44b-7138-4fb8-b850-d56e02cc1c19",
        "body" : "All right.  I wasn't sure if those were important, but I'll add it in.",
        "createdAt" : "2020-11-17T16:21:34Z",
        "updatedAt" : "2020-11-17T22:10:38Z",
        "lastEditedBy" : "7fc8b44b-7138-4fb8-b850-d56e02cc1c19",
        "tags" : [
        ]
      },
      {
        "id" : "2ccb7d5c-166e-4b7c-9697-d90da7f54bdc",
        "parentId" : "eb826b79-067b-4e56-ae3e-ae5f19ad5639",
        "authorId" : "126ee8df-948d-452e-a666-5239b5e88a2c",
        "body" : "Basic rule in Rust is IMO: Eagerly implement all traits you can.  That's because of the orphan rule which prevents downstream code from adding trait implementations which you missed.",
        "createdAt" : "2020-11-17T16:33:30Z",
        "updatedAt" : "2020-11-17T22:10:38Z",
        "lastEditedBy" : "126ee8df-948d-452e-a666-5239b5e88a2c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6f8478a3458e6055d07916361ed7300e0d1741f",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +88,92 @@        /// output pin, because it implements all the same traits from embedded-hal.\n        pub struct ChipSelectPin($csmod::$CS<$crate::port::mode::Output>);\n        impl $crate::hal::digital::v2::OutputPin for ChipSelectPin {\n            type Error = $crate::void::Void;\n            fn set_low(&mut self) -> Result<(), Self::Error> {"
  },
  {
    "id" : "ddea6b19-78d9-49df-95f6-2b86d2338e20",
    "prId" : 103,
    "prUrl" : "https://github.com/Rahix/avr-hal/pull/103#pullrequestreview-532547683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a22349c4-a072-4f12-a0bb-f9f2bd9165f9",
        "parentId" : null,
        "authorId" : "126ee8df-948d-452e-a666-5239b5e88a2c",
        "body" : "This means we'll also need to update all SPI examples to look like\r\n\r\n```rust\r\nlet (mut spi, _) = Spi::new();\r\n```\r\n\r\nand I'll have to document this change as a breakage for downstream users.",
        "createdAt" : "2020-11-17T09:37:30Z",
        "updatedAt" : "2020-11-17T22:10:38Z",
        "lastEditedBy" : "126ee8df-948d-452e-a666-5239b5e88a2c",
        "tags" : [
        ]
      },
      {
        "id" : "8074c2a7-dba3-461f-a6a1-e253e80d65cb",
        "parentId" : "a22349c4-a072-4f12-a0bb-f9f2bd9165f9",
        "authorId" : "7fc8b44b-7138-4fb8-b850-d56e02cc1c19",
        "body" : "Yeah, I'll make sure the examples get updated too.  I'll include a description of the breaking change in the changelog",
        "createdAt" : "2020-11-17T16:23:04Z",
        "updatedAt" : "2020-11-17T22:10:38Z",
        "lastEditedBy" : "7fc8b44b-7138-4fb8-b850-d56e02cc1c19",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6f8478a3458e6055d07916361ed7300e0d1741f",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +142,146 @@                cs: $csmod::$CS<$crate::port::mode::Output>,\n                settings: Settings\n            ) -> (Self, ChipSelectPin) {\n                let spi = $Spi {\n                    peripheral,"
  },
  {
    "id" : "662bb1a1-3f1f-44a4-8a53-e4f89ee30cd7",
    "prId" : 13,
    "prUrl" : "https://github.com/Rahix/avr-hal/pull/13#pullrequestreview-394173244",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3dd8faa7-b25c-4170-a443-af39631ae1f4",
        "parentId" : null,
        "authorId" : "126ee8df-948d-452e-a666-5239b5e88a2c",
        "body" : "Nice catch adding the `flush()` here!  I guess you already [read the docs](https://docs.rs/embedded-hal/0.2.3/embedded_hal/spi/trait.FullDuplex.html) but just for reference (for me and potential others):  This works because every read has to happen after a send by the traits design.\r\n\r\nI'm wondering whether we should add an assertion that this is upheld by the caller ... (which would only be enabled in debug builds)",
        "createdAt" : "2020-04-15T18:41:36Z",
        "updatedAt" : "2020-04-15T18:41:36Z",
        "lastEditedBy" : "126ee8df-948d-452e-a666-5239b5e88a2c",
        "tags" : [
        ]
      },
      {
        "id" : "8f1ad4c3-79d4-4f75-b9c8-f6c8938071ed",
        "parentId" : "3dd8faa7-b25c-4170-a443-af39631ae1f4",
        "authorId" : "7fc8b44b-7138-4fb8-b850-d56e02cc1c19",
        "body" : "Maybe, I'm inclined to leave it though.  It will work if they read first, they'll just read `0b00000000`.  Plus we'd either have to use the is_write_in_progress flag in the assertion which has the disadvantage of only allowing one read after a write, OR add another boolean flag, which has a run-time impact.  Not sure if the compiler can remove an entire field or not.",
        "createdAt" : "2020-04-15T22:15:48Z",
        "updatedAt" : "2020-04-15T22:15:49Z",
        "lastEditedBy" : "7fc8b44b-7138-4fb8-b850-d56e02cc1c19",
        "tags" : [
        ]
      }
    ],
    "commit" : "be3bffbc81bc301cdf68c3f2c465d06ac4b69f5e",
    "line" : 200,
    "diffHunk" : "@@ -1,1 +198,202 @@                self.flush()?;\n                Ok(self.peripheral.spdr.read().bits())\n            }\n        }\n    };"
  }
]