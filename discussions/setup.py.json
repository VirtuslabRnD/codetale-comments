[
  {
    "id" : "133f7402-4f7e-4d52-b7ca-e54c13ba1e4b",
    "prId" : 2707,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93865835-3045-4052-aa98-cb79f2ea8be6",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This needs to be changed to 7 for the backport, right?\n",
        "createdAt" : "2012-11-09T07:53:10Z",
        "updatedAt" : "2012-11-09T07:53:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "cdb8c36d-939f-4263-b58a-dc07d6671a61",
        "parentId" : "93865835-3045-4052-aa98-cb79f2ea8be6",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Indeed. I can fix that and backport this myself; Ondrej is busy IIRC.\n",
        "createdAt" : "2012-11-09T16:36:30Z",
        "updatedAt" : "2012-11-09T16:36:30Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "79af5a1e-cf2b-4d96-aa3a-684c033c2a9a",
        "parentId" : "93865835-3045-4052-aa98-cb79f2ea8be6",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "You might as well commit it then. I checked the URL and it looks good to me. I assume PyPi can figure out the versions from there?\n",
        "createdAt" : "2012-11-09T16:51:35Z",
        "updatedAt" : "2012-11-09T16:51:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e033a9bd-e53e-4121-a654-7cac1ddf562d",
        "parentId" : "93865835-3045-4052-aa98-cb79f2ea8be6",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Guess so, but I'll check when I upload a fix for 1.6.2 to PyPi.\n",
        "createdAt" : "2012-11-09T16:53:43Z",
        "updatedAt" : "2012-11-09T16:53:43Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "637bea38-26a8-4a63-8f0e-ca242c4a4b58",
        "parentId" : "93865835-3045-4052-aa98-cb79f2ea8be6",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Eh, sorry, replied too fast. Your question doesn't parse. PyPi doesn't figure out versions. Do you mean pip?\n",
        "createdAt" : "2012-11-09T16:56:13Z",
        "updatedAt" : "2012-11-09T16:56:13Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "cd4259ce-a87a-430b-8986-ece377c1c070",
        "parentId" : "93865835-3045-4052-aa98-cb79f2ea8be6",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "On Fri, Nov 9, 2012 at 9:56 AM, Ralf Gommers notifications@github.comwrote:\n\n> In setup.py:\n> \n> >  LICENSE             = 'BSD'\n> >  CLASSIFIERS         = filter(None, CLASSIFIERS.split('\\n'))\n> >  AUTHOR              = \"Travis E. Oliphant, et.al.\"\n> >  AUTHOR_EMAIL        = \"oliphant@enthought.com\"\n> >  PLATFORMS           = [\"Windows\", \"Linux\", \"Solaris\", \"Mac OS-X\", \"Unix\"]\n> > -MAJOR               = 1\n> > -MINOR               = 8\n> > +MAJOR               = 1\n> > +MINOR               = 8\n> \n> Eh, sorry, replied too fast. Your question doesn't parse. PyPi doesn't\n> figure out versions. Do you mean pip?\n\nActually, I don't know what I'm talking about ;) I just used your PR\ncomment.\n",
        "createdAt" : "2012-11-09T17:01:26Z",
        "updatedAt" : "2012-11-09T17:01:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "58c1bf7f6171e774197784787e98125ae2f6f349",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +56,60 @@PLATFORMS           = [\"Windows\", \"Linux\", \"Solaris\", \"Mac OS-X\", \"Unix\"]\nMAJOR               = 1\nMINOR               = 8\nMICRO               = 0\nISRELEASED          = False"
  },
  {
    "id" : "293693c6-59bf-40a0-bd1c-4df9f22aa46f",
    "prId" : 4110,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71d9548f-a55b-480e-a18c-ed0022948cd2",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So what happens will depend on whether the user has setuptools installed or not? Might be worth printing/logging a message here. It's a bit unnerving that the behaviour is indeterminate.\n",
        "createdAt" : "2013-12-07T03:55:07Z",
        "updatedAt" : "2013-12-07T12:11:15Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "383b9493-e268-4bc9-89a6-2caf55b00c4f",
        "parentId" : "71d9548f-a55b-480e-a18c-ed0022948cd2",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "It's not indeterminate, it's fixed by this code. Setuptools is only used for some utility commands that distutils doesn't have, and for `bdist_wheel`. The latter could be added as a new `numpy.distutils` command, but I don't see the point in doing that.\n",
        "createdAt" : "2013-12-07T10:02:53Z",
        "updatedAt" : "2013-12-07T12:11:15Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "17716d7571618b1a55dd5bfda4da2de53b808e54",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +182,186 @@                            'clean')):\n        # Use setuptools for these commands (they don't work well or at all\n        # with distutils).  For normal builds use distutils.\n        try:\n            from setuptools import setup"
  },
  {
    "id" : "feb65e16-e2b9-4696-81d7-ebe7ba882429",
    "prId" : 4110,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5970f85a-66f6-4b84-a3b1-0edd2c59a259",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Does `clean` clear out the previous install?\n",
        "createdAt" : "2013-12-07T03:57:37Z",
        "updatedAt" : "2013-12-07T12:11:15Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "3e0710cb-e06e-4c93-99bc-3ad8a954ddb1",
        "parentId" : "5970f85a-66f6-4b84-a3b1-0edd2c59a259",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Yes, see https://pythonhosted.org/setuptools/setuptools.html?highlight=clean\n",
        "createdAt" : "2013-12-07T10:04:57Z",
        "updatedAt" : "2013-12-07T12:11:15Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "17716d7571618b1a55dd5bfda4da2de53b808e54",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +180,184 @@    if len(sys.argv) >= 2 and ('--help' in sys.argv[1:] or\n            sys.argv[1] in ('--help-commands', 'egg_info', '--version',\n                            'clean')):\n        # Use setuptools for these commands (they don't work well or at all\n        # with distutils).  For normal builds use distutils."
  },
  {
    "id" : "218f201c-f4af-45d3-8281-36220a95781d",
    "prId" : 6164,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5dbef235-c66d-4db4-9597-61873aa6edcb",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "We do not actually support 3.2 I think? Not sure about the rest ;).\n",
        "createdAt" : "2015-08-05T12:18:14Z",
        "updatedAt" : "2015-08-05T12:18:14Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "a16576b6-019a-46b1-b5bb-9a9ab2e834df",
        "parentId" : "5dbef235-c66d-4db4-9597-61873aa6edcb",
        "authorId" : "0cf390af-1520-4bda-890a-e5bc4f13f0e7",
        "body" : "According to [1.11.0-notes.rst](https://github.com/numpy/numpy/blob/9cd868a00cc488478ac4f07ee0b5452a38cb3cc0/doc/release/1.11.0-notes.rst), [1.10.0-notes.rst](https://github.com/numpy/numpy/blob/9cd868a00cc488478ac4f07ee0b5452a38cb3cc0/doc/release/1.10.0-notes.rst), and [setup.py](https://github.com/numpy/numpy/blob/9cd868a00cc488478ac4f07ee0b5452a38cb3cc0/setup.py#L25) Python 3.2 is supported. It's also tested by [travis.yml](https://github.com/numpy/numpy/blob/9cd868a00cc488478ac4f07ee0b5452a38cb3cc0/.travis.yml).\n",
        "createdAt" : "2015-08-05T12:46:22Z",
        "updatedAt" : "2015-08-05T12:47:25Z",
        "lastEditedBy" : "0cf390af-1520-4bda-890a-e5bc4f13f0e7",
        "tags" : [
        ]
      },
      {
        "id" : "7400d9d8-8c75-4bd8-be6d-7df3631fae63",
        "parentId" : "5dbef235-c66d-4db4-9597-61873aa6edcb",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Ops, you are right, we do test 3.2 on travis, something in the back of my head thought we stopped.\n",
        "createdAt" : "2015-08-05T13:29:45Z",
        "updatedAt" : "2015-08-05T13:29:45Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "193668a1d331ec912c093c68aac11b007d053670",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +44,48 @@Programming Language :: Python :: 3\nProgramming Language :: Python :: 3.2\nProgramming Language :: Python :: 3.3\nProgramming Language :: Python :: 3.4\nProgramming Language :: Python :: 3.5"
  },
  {
    "id" : "8de97b89-6911-48f4-9506-45edad7b5dca",
    "prId" : 6439,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f56960a5-3f23-44f2-b910-3676597aaed0",
        "parentId" : null,
        "authorId" : "ddc821e4-cfa5-46f2-9e84-c47d803eabba",
        "body" : "Why not test for `'DISTUTILS_USE_SDK' in os.environ`? Windows SDKs can be used on Python 3 too and setuptools will not be always required on Python 2.x on Windows.\n",
        "createdAt" : "2015-10-10T01:23:38Z",
        "updatedAt" : "2015-10-10T01:23:38Z",
        "lastEditedBy" : "ddc821e4-cfa5-46f2-9e84-c47d803eabba",
        "tags" : [
        ]
      },
      {
        "id" : "0fe93d44-c280-465f-99f9-a1517d76fa8c",
        "parentId" : "f56960a5-3f23-44f2-b910-3676597aaed0",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "because that forces the sdk use, it just sets a bunch of variables and assumes its there, it doesn't check the registry etc.\nI'm guessing setuptools is smarter about it but I didn't check\nfor python3 I don't know I actually have vs2010 and so far I know there is no 2010 python sdk.\ndidn't try python3.5\n",
        "createdAt" : "2015-10-10T11:30:37Z",
        "updatedAt" : "2015-10-10T11:30:37Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "0b9dfab0-20f8-4df6-b1d0-a3617824e354",
        "parentId" : "f56960a5-3f23-44f2-b910-3676597aaed0",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "just checked, setuptools does just adds a proper registry check for the sdk while falling back to the regular one if that fails, that is better than what distutils does with the env variable imo\n",
        "createdAt" : "2015-10-10T11:32:43Z",
        "updatedAt" : "2015-10-10T11:32:43Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "cd92e06e-706f-4a8b-86e6-ff3235fc3f90",
        "parentId" : "f56960a5-3f23-44f2-b910-3676597aaed0",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "it does it by monkeypatching distutils, so if we don't want to require setuptools we can do that in numpy.distutils too\nbut is there a reason we do not want to require setuptools?\n",
        "createdAt" : "2015-10-10T11:34:07Z",
        "updatedAt" : "2015-10-10T11:34:07Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "f9e046f3-40e0-42f9-8f32-c2766c76d9a1",
        "parentId" : "f56960a5-3f23-44f2-b910-3676597aaed0",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Just happened to look at that yesterday. At least we need to drop in lots of empty `__init__.py` files in test dirs. There will be other annoyances and issues. See https://github.com/numpy/numpy/issues/6257#issuecomment-147015057\n",
        "createdAt" : "2015-10-10T11:57:45Z",
        "updatedAt" : "2015-10-10T11:57:45Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "81df025a-c86b-4c91-9ca2-0a5924148b69",
        "parentId" : "f56960a5-3f23-44f2-b910-3676597aaed0",
        "authorId" : "ddc821e4-cfa5-46f2-9e84-c47d803eabba",
        "body" : "Maybe a misunderstanding. Are we talking about the Windows SDKs [7.0](http://www.microsoft.com/en-us/download/details.aspx?id=3138) (for Python 2.6, 2.7, and 3.2) and [7.1](http://www.microsoft.com/en-us/download/details.aspx?id=8279) (for Python 3.3 and 3.4) or the [Visual C++ Compiler for Python 2.7](http://www.microsoft.com/en-us/download/details.aspx?id=44266)? AFAIK the former require `DISTUTILS_USE_SDK` but not setuptools (https://docs.python.org/2/distutils/apiref.html#module-distutils.msvccompiler), the latter requires setuptools >= 6 but no environment variables (https://pypi.python.org/pypi/setuptools/6.1#id4). \n",
        "createdAt" : "2015-10-10T17:36:50Z",
        "updatedAt" : "2015-10-10T17:36:50Z",
        "lastEditedBy" : "ddc821e4-cfa5-46f2-9e84-c47d803eabba",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3df126f1e9f39e91d684e5eaad26a844566ea12",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +240,244 @@    else:\n        if (len(sys.argv) >= 2 and sys.argv[1] == 'bdist_wheel' or\n                sys.version_info[0] < 3 and sys.platform == \"win32\"):\n            # bdist_wheel and the MS python2.7 VS sdk needs setuptools\n            # the latter can also be triggered by (see python issue23246)"
  },
  {
    "id" : "d73aa729-c902-444a-9dbf-99c10700780e",
    "prId" : 6526,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "686974f3-ae5e-4a3c-937c-37b6099b277d",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The value of `(__doc__ or '')` depends on non-obvious properties of `or`, e.g., that it returns the first true value rather than a boolean. How about `DOCLINES = __doc__ .split(\"\\n\") if __doc__ else ''` Which might also be a bit obscure in that the first expression is not evaluated unless `__doc__` is true, but at least acts like c.\n",
        "createdAt" : "2015-10-20T22:17:40Z",
        "updatedAt" : "2015-10-20T22:18:01Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "7a7d9ec6-7852-407b-b77b-03d136eea8de",
        "parentId" : "686974f3-ae5e-4a3c-937c-37b6099b277d",
        "authorId" : "7efb24ed-e863-40e0-ad40-e7d94b2022fd",
        "body" : "I'd argue it's fairly idiomatic Python, as you can find examples of the same idiom in the [Python standard library](https://github.com/python/cpython/blob/master/Lib/multiprocessing/util.py#L160) and [Django](https://github.com/django/django/blob/master/django/contrib/admin/sites.py#L505), and probably several other large Python projects. It's short and concise.\n\nIf that doesn't sway you, what about moving the conditional operator inside of parens like `DOCLINES = (__doc__ if __doc__ else '').split(\"\\n\")`. That at least removes the ambiguity of what evaluates when.\n",
        "createdAt" : "2015-10-21T20:02:30Z",
        "updatedAt" : "2015-10-21T20:02:30Z",
        "lastEditedBy" : "7efb24ed-e863-40e0-ad40-e7d94b2022fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "922442fe0251df29b3494a2aa93a0d3f18155481",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +16,20 @@from __future__ import division, print_function\n\nDOCLINES = (__doc__ or '').split(\"\\n\")\n\nimport os"
  },
  {
    "id" : "bcf24c42-c5a8-4ea1-8a1b-9858d91d5a4d",
    "prId" : 10463,
    "prUrl" : "https://github.com/numpy/numpy/pull/10463#pullrequestreview-92416612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5a331d1-7fe0-4fb4-b571-0344af0f2cf0",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "`conv-template` or `conv_template`?",
        "createdAt" : "2018-01-30T00:25:23Z",
        "updatedAt" : "2018-01-30T02:09:06Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2115d0f0-84f4-461a-bcf3-02563462fe9b",
        "parentId" : "c5a331d1-7fe0-4fb4-b571-0344af0f2cf0",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "There are other scripts, should they be added also?",
        "createdAt" : "2018-01-30T00:27:29Z",
        "updatedAt" : "2018-01-30T02:09:06Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "d7143795-0092-4fe0-bf87-b57d5cec9faf",
        "parentId" : "c5a331d1-7fe0-4fb4-b571-0344af0f2cf0",
        "authorId" : null,
        "body" : "1. Command names usually contain dashes.\r\n2. Which other scripts are there?",
        "createdAt" : "2018-01-30T00:37:47Z",
        "updatedAt" : "2018-01-30T02:09:06Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "8b0789a2-be0c-4c00-beb0-8fa3449fded0",
        "parentId" : "c5a331d1-7fe0-4fb4-b571-0344af0f2cf0",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "There is `from_template.py`, used by f2py and `cythonize.py`. I'm not clear just what needs an entry point or why. Note that `process_file` is the part of `conv_template` that is actually imported and used in the build, `conv_template` is used as a module rather than a script.",
        "createdAt" : "2018-01-30T01:24:53Z",
        "updatedAt" : "2018-01-30T02:09:06Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6862493156f182ade2bd76869150aded807bcf1c",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +364,368 @@            'console_scripts': [\n                'f2py = numpy.f2py.__main__:main',\n                'conv-template = numpy.distutils.conv_template:main',\n                'from-template = numpy.distutils.conv_template:main',\n            ]"
  },
  {
    "id" : "342b4b7d-aec7-411c-8f3e-480f74366824",
    "prId" : 12506,
    "prUrl" : "https://github.com/numpy/numpy/pull/12506#pullrequestreview-182932523",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7ec36f3-6e8f-4743-9abc-17b684cbe9b1",
        "parentId" : null,
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "We probably also want to add `python_requires`:\r\nhttps://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires",
        "createdAt" : "2018-12-08T02:01:47Z",
        "updatedAt" : "2018-12-08T15:02:40Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "d12bec11-caa9-4fea-bac4-e59a9e117feb",
        "parentId" : "c7ec36f3-6e8f-4743-9abc-17b684cbe9b1",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "indeed, would be good to add `python_requires='>=3.5'`.",
        "createdAt" : "2018-12-08T03:30:17Z",
        "updatedAt" : "2018-12-08T15:02:40Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "89fd7af4-1de0-4142-b804-e78c65fd67ec",
        "parentId" : "c7ec36f3-6e8f-4743-9abc-17b684cbe9b1",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Done.",
        "createdAt" : "2018-12-08T04:56:31Z",
        "updatedAt" : "2018-12-08T15:02:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "badf2901ea040aa89dbb3c19e53c6b1b692cb489",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +29,33 @@\nif sys.version_info[:2] < (3, 5):\n    raise RuntimeError(\"Python version >= 3.5 required.\")\n\nimport builtins"
  },
  {
    "id" : "50f7711e-c62f-45cb-81d0-f22e46655c65",
    "prId" : 13310,
    "prUrl" : "https://github.com/numpy/numpy/pull/13310#pullrequestreview-225940569",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67a64b56-76dc-438e-9a04-5e047f8ed696",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@rgommers Is this the best place to view the docs?",
        "createdAt" : "2019-04-12T01:33:16Z",
        "updatedAt" : "2019-04-12T01:33:16Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "9113d57f-ea9c-4da1-9728-5f8204782ff5",
        "parentId" : "67a64b56-76dc-438e-9a04-5e047f8ed696",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "yes that is the best one, that's the full manual of the latest release always. ",
        "createdAt" : "2019-04-12T07:53:49Z",
        "updatedAt" : "2019-04-12T07:53:49Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "0486b6d7692798dabd3bcafa20aa87ce28ae0b90",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +367,371 @@        project_urls={\n            \"Bug Tracker\": \"https://github.com/numpy/numpy/issues\",\n            \"Documentation\": \"https://docs.scipy.org/doc/numpy/\",\n            \"Source Code\": \"https://github.com/numpy/numpy\",\n        },"
  },
  {
    "id" : "4fc9cafb-2014-45e6-89bf-163f02e9055a",
    "prId" : 14372,
    "prUrl" : "https://github.com/numpy/numpy/pull/14372#pullrequestreview-280097701",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e2d1fdd-e7fb-42ef-9dcf-907b5d490a99",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Do we need both this line and line 43? Can you point to the \"HOWTO\" documentation for these specifiers?",
        "createdAt" : "2019-08-27T08:12:55Z",
        "updatedAt" : "2019-08-27T08:12:55Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "84e02552-9958-463c-96d3-3687d2ee2976",
        "parentId" : "7e2d1fdd-e7fb-42ef-9dcf-907b5d490a99",
        "authorId" : "592f00d8-fdc8-439a-bf53-27f6ff58cd1a",
        "body" : "These lines are simply metadata to be consumed by humans and scripts to help determine compatibility and other criteria when integrating third party packages from pip. No project strictly _needs_ any classifiers, but they are useful information to those looking for the information (and for scripts). Some documentation for using classifiers exists here:\r\n\r\n- https://pypi.org/classifiers/\r\n\r\nPersonally, I find them both useful and suggest keeping both. It doesn't require any additional maintenance and provides more information to people and scripts. Other projects, such as Django, provide both: https://pypi.org/project/Django/",
        "createdAt" : "2019-08-27T10:23:46Z",
        "updatedAt" : "2019-08-27T10:23:46Z",
        "lastEditedBy" : "592f00d8-fdc8-439a-bf53-27f6ff58cd1a",
        "tags" : [
        ]
      }
    ],
    "commit" : "334201dc9bc6e73d6d8a012e1982d62f1ed70621",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +45,49 @@Programming Language :: Python :: 3.6\nProgramming Language :: Python :: 3.7\nProgramming Language :: Python :: 3 :: Only\nProgramming Language :: Python :: Implementation :: CPython\nTopic :: Software Development"
  },
  {
    "id" : "4fe24df6-7a62-4355-a9e8-d5093652631a",
    "prId" : 15238,
    "prUrl" : "https://github.com/numpy/numpy/pull/15238#pullrequestreview-338405346",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22ef8f8b-d1ad-487a-be13-91ef7aae62a8",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Shouldn't we be looking at `obj.compiler` to learn this, rather than global state that may not be equivalent?",
        "createdAt" : "2020-01-05T13:07:20Z",
        "updatedAt" : "2020-01-05T15:00:42Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c43c8895-aea9-4b70-9ed3-a9e66a8974d4",
        "parentId" : "22ef8f8b-d1ad-487a-be13-91ef7aae62a8",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Distutils itself does it like this (grep for is_gcc). But I'm not sure if there is some reason why, as indeed the compiler object already knows its command line.",
        "createdAt" : "2020-01-05T13:34:58Z",
        "updatedAt" : "2020-01-05T15:00:42Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "d20716cd-5787-4290-9192-57c1eb0fcd30",
        "parentId" : "22ef8f8b-d1ad-487a-be13-91ef7aae62a8",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "once burned twice shy: I prefer to mimic distutils as far as possible",
        "createdAt" : "2020-01-05T14:59:44Z",
        "updatedAt" : "2020-01-05T15:00:42Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2f930017ab05b32a503e622cee671add7abb78e",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +237,241 @@        is_gcc = False\n        if obj.compiler.compiler_type == 'unix':\n            cc = sysconfig.get_config_var(\"CC\")\n            if not cc:\n                cc = \"\""
  },
  {
    "id" : "cadb83ee-f19b-43cd-8b82-326faee7294d",
    "prId" : 16619,
    "prUrl" : "https://github.com/numpy/numpy/pull/16619#pullrequestreview-477008331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b99e8462-8242-4455-bf21-831dc242ac12",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I think multiple flags are OK, but doesn't hurt.",
        "createdAt" : "2020-08-27T19:13:55Z",
        "updatedAt" : "2020-08-27T19:13:56Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "10dcfb0da453b103192a3adeca3197ac161f29a0",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +264,268 @@            if _needs_gcc_c99_flag(self):\n                if '-std=c99' not in ext.extra_compile_args:\n                    ext.extra_compile_args.append('-std=c99')\n            build_ext.build_extension(self, ext)\n    return new_build_clib, new_build_ext"
  }
]