[
  {
    "id" : "0d0ca417-acec-431b-afc6-58788b6aeaf0",
    "prId" : 1323,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1323#pullrequestreview-97265333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1798ef73-f3e8-45a0-a342-be5d5d2064d0",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "As a general note, I avoid using `List` in my test examples because it's special cased by the compiler. `List` resolves to `scala.collection.immutable.List` instead of `scala.List` even if `immutable.List` is not in the root import scope.",
        "createdAt" : "2018-02-16T09:48:05Z",
        "updatedAt" : "2018-02-16T18:06:43Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "1ff75388-031d-4de8-b1a4-1bec83c5669b",
        "parentId" : "1798ef73-f3e8-45a0-a342-be5d5d2064d0",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Noted. If you don't mind, I'd like to keep `List` as is in these tests, since changing it would be a big diff. In the future, I'll stay away from it.",
        "createdAt" : "2018-02-16T18:00:33Z",
        "updatedAt" : "2018-02-16T18:06:43Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "808c93b6dbfc05c054223b4278b4fb325e60c102",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +4,8 @@\nclass Methods[T] {\n  class List[T]\n  type AList[T] = List[T]\n  def m1 = ???"
  },
  {
    "id" : "575dc282-7b16-4f6b-bc6c-9502f07c3a47",
    "prId" : 1323,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1323#pullrequestreview-97257921",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e76a01c0-6106-4ce6-bd79-5f46b70f43ec",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "We need a corresponding test for computing the symbol when referencing `m6`.\r\n\r\n```scala\r\nval m = new Methods[Int]\r\nm.m6(Nil) // +1\r\nm.m6(new m.List[String]) // +2\r\n```",
        "createdAt" : "2018-02-16T09:50:09Z",
        "updatedAt" : "2018-02-16T18:06:43Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "7323223d-75dc-4a5d-ae00-6c9ff4cdef22",
        "parentId" : "e76a01c0-6106-4ce6-bd79-5f46b70f43ec",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Done.",
        "createdAt" : "2018-02-16T17:34:46Z",
        "updatedAt" : "2018-02-16T18:06:43Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "808c93b6dbfc05c054223b4278b4fb325e60c102",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +14,18 @@  def m6(x: Int) = ???\n  def m6(x: List[T]) = ???\n  def m6(x: scala.List[T]) = ???\n  def m7a[U: Ordering](c: Methods[T], l: List[U]) = ???\n  def m7b[U <% T](l: List[U]) = ???"
  }
]