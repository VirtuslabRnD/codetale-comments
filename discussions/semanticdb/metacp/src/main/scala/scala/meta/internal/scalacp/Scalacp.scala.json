[
  {
    "id" : "ac5dde95-fa33-4e8b-b98d-f8aa21013a54",
    "prId" : 1575,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1575#pullrequestreview-124991489",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc200dd9-f36b-4abc-b357-602cd8ecfb27",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "why not `syms.map(ssymbol)`?",
        "createdAt" : "2018-05-31T21:25:06Z",
        "updatedAt" : "2018-05-31T21:28:43Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "b163a157-9858-4bc0-a32e-4fee4d7de9aa",
        "parentId" : "dc200dd9-f36b-4abc-b357-602cd8ecfb27",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "This implementation gets an upgrade in a subsequent commit. It looks dumb when introduced, but that allows for an easier to read diff later on.",
        "createdAt" : "2018-05-31T21:59:21Z",
        "updatedAt" : "2018-05-31T21:59:21Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "af63cb8745825d9c2b9aa7109289aed5169a1f7a",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +505,509 @@  case class SemanticdbDecls(syms: List[Symbol]) {\n    lazy val ssyms: List[String] = {\n      val sbuf = List.newBuilder[String]\n      syms.foreach { sym =>\n        val ssym = ssymbol(sym)"
  },
  {
    "id" : "4d6cb166-7998-4e2a-9102-a1034fcdadb1",
    "prId" : 1570,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1570#pullrequestreview-124065359",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d47f1532-6bc4-422e-810a-8ae7688e8f6d",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "I'm a bit on the fence about scalapb lenses, I like the idea of using the generated classes as vanilla classes (no case) + `.withFieldName(FieldType)` builders. I guess we can refactor this code if we end up using another code generator",
        "createdAt" : "2018-05-29T11:18:33Z",
        "updatedAt" : "2018-05-29T16:05:31Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "4323e106-d5c2-45c1-8cb1-3f03094c9b93",
        "parentId" : "d47f1532-6bc4-422e-810a-8ae7688e8f6d",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "I suppose once #1262 is fixed, we will have much less (if any) need in lenses.",
        "createdAt" : "2018-05-29T16:11:55Z",
        "updatedAt" : "2018-05-29T16:11:55Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "79de6a1047866355c6ac1b46427e91840afcfc22",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +316,320 @@      } else if (sym.isConstructor) {\n        val tpe = loop(sym.infoType)\n        tpe.map(_.update(_.methodType.optionalReturnType := None))\n      } else if (sym.isScalacField) {\n        val stag = t.METHOD_TYPE"
  },
  {
    "id" : "307d536a-2402-4f40-b5f6-30f57956fcb5",
    "prId" : 1570,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1570#pullrequestreview-123941459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd1ea20e-b005-4d2f-81be-27216beb2f75",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "`skind(sym).isPackageObject` (but I don't feel strongly about it)",
        "createdAt" : "2018-05-29T12:03:25Z",
        "updatedAt" : "2018-05-29T16:05:31Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "79de6a1047866355c6ac1b46427e91840afcfc22",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +163,167 @@  private def sname(sym: Symbol): String = {\n    val ssym = ssymbol(sym)\n    if (skind(sym) == k.PACKAGE_OBJECT) ssym.owner.desc.name\n    else ssym.desc.name\n  }"
  },
  {
    "id" : "2b1a7eb2-aed2-44e6-ac8b-f660c2cba919",
    "prId" : 1570,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1570#pullrequestreview-123941459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3cf159d5-eb2f-4345-9517-4b36919ecda5",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "‚ö†Ô∏è Warning: handwavy perf comment\r\n\r\nThis seems like a heavy hammer for a small problem. I see you moved `loop` to another place, I'm not sure exactly what the consequences for this refactoring are but it seems to be doing much more work now for the same functionality with a special case only for package object ü§î ",
        "createdAt" : "2018-05-29T12:09:14Z",
        "updatedAt" : "2018-05-29T16:05:31Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "79de6a1047866355c6ac1b46427e91840afcfc22",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +162,166 @@\n  private def sname(sym: Symbol): String = {\n    val ssym = ssymbol(sym)\n    if (skind(sym) == k.PACKAGE_OBJECT) ssym.owner.desc.name\n    else ssym.desc.name"
  },
  {
    "id" : "e71e2347-af12-4714-9d1d-723d565f2705",
    "prId" : 1570,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1570#pullrequestreview-123941459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05e0a55c-97c1-4623-b21f-26785f38e7fc",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "‚ö†Ô∏è handwavy\r\n\r\nThis seems like a heavy hammer for a small task, and on a hot path",
        "createdAt" : "2018-05-29T12:13:11Z",
        "updatedAt" : "2018-05-29T16:05:31Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "79de6a1047866355c6ac1b46427e91840afcfc22",
    "line" : 227,
    "diffHunk" : "@@ -1,1 +441,445 @@    }\n    def isUselessField: Boolean = {\n      val peers = sym.parent.map(_.children.toList).getOrElse(Nil)\n      val getter = peers.find(m => m.isAccessor && m.name == sym.name.stripSuffix(\" \"))\n      sym.isScalacField && getter.nonEmpty"
  },
  {
    "id" : "f2e532ec-aa1b-4b34-9628-e1da1a32f252",
    "prId" : 1458,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1458#pullrequestreview-107981778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb9c1a5f-dc93-4d0a-8f34-d4bd821a1088",
        "parentId" : null,
        "authorId" : "ee435ce0-4e9b-4dad-b7cc-9ac4ab481429",
        "body" : "should we also take care of `hasNonTrivialPrefix`? For the same corner case it currently returns `true` instead of `false`, because the `isObject` test fails.",
        "createdAt" : "2018-03-27T08:48:07Z",
        "updatedAt" : "2018-03-28T17:43:54Z",
        "lastEditedBy" : "ee435ce0-4e9b-4dad-b7cc-9ac4ab481429",
        "tags" : [
        ]
      },
      {
        "id" : "9e02e76c-b496-48e8-8a2c-2f2a02e4ea15",
        "parentId" : "fb9c1a5f-dc93-4d0a-8f34-d4bd821a1088",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Do you have a test case in mind? Either is now looking good:\r\n\r\n```\r\n  symbols {\r\n    symbol: \"_empty_.C#Either().\"\r\n    kind: METHOD\r\n    properties: 0\r\n    name: \"Either\"\r\n    tpe {\r\n      tag: METHOD_TYPE\r\n      methodType {\r\n        return_type {\r\n          tag: SINGLETON_TYPE\r\n          singletonType {\r\n            tag: SYMBOL\r\n            symbol: \"scala.util.Either.\"\r\n            primitive: 0\r\n            string: \"\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n```",
        "createdAt" : "2018-03-28T17:51:55Z",
        "updatedAt" : "2018-03-28T17:51:55Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "348e44a3-ae48-4dcc-9f10-63baad10a9a1",
        "parentId" : "fb9c1a5f-dc93-4d0a-8f34-d4bd821a1088",
        "authorId" : "ee435ce0-4e9b-4dad-b7cc-9ac4ab481429",
        "body" : "ah, strange. Given the change, I would expect the prefix to be still there. üëç then",
        "createdAt" : "2018-03-29T09:33:15Z",
        "updatedAt" : "2018-03-29T09:33:15Z",
        "lastEditedBy" : "ee435ce0-4e9b-4dad-b7cc-9ac4ab481429",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4a155a9bbde2cac46f5359e30762e34787b3c39",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +194,198 @@          val stpe = {\n            val stag = st.SYMBOL\n            val spre = if (tpe.hasNontrivialPrefix) loop(pre) else None\n            val ssym = {\n              // NOTE: Due to some unclear reason, Scalac sometimes saves"
  },
  {
    "id" : "e88953f0-8ecb-4b54-9466-b573e9541ee0",
    "prId" : 1458,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1458#pullrequestreview-107198236",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e71271f-741b-46d4-abb0-28bb9e2ff85d",
        "parentId" : null,
        "authorId" : "ee435ce0-4e9b-4dad-b7cc-9ac4ab481429",
        "body" : "I would link to #1392 in the comment for extra context",
        "createdAt" : "2018-03-27T08:49:04Z",
        "updatedAt" : "2018-03-28T17:43:54Z",
        "lastEditedBy" : "ee435ce0-4e9b-4dad-b7cc-9ac4ab481429",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4a155a9bbde2cac46f5359e30762e34787b3c39",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +196,200 @@            val spre = if (tpe.hasNontrivialPrefix) loop(pre) else None\n            val ssym = {\n              // NOTE: Due to some unclear reason, Scalac sometimes saves\n              // (or Scalap sometimes loads) single types that point to\n              // companion classes, not module classes (see #1392)."
  },
  {
    "id" : "52fbc24f-4a31-4add-bada-1b298f028cff",
    "prId" : 1373,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1373#pullrequestreview-99846819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c6615e0-8d9d-4730-8743-b9c9f5b0a822",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Nitpick. I find it a bit weird to make as much as possible private in the internal package. These methods are not protected by any bincompat guarantees. ",
        "createdAt" : "2018-02-27T10:05:27Z",
        "updatedAt" : "2018-02-27T11:18:13Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "bf421626-586b-4f70-b2a4-b5331d3359f9",
        "parentId" : "2c6615e0-8d9d-4730-8743-b9c9f5b0a822",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "This emphasizes that the methods aren't part of the interface between metacp, javacp and scalacp. However if you'd like, I can make them public again.",
        "createdAt" : "2018-02-27T20:33:36Z",
        "updatedAt" : "2018-02-27T20:33:36Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "72ce6afe-13fe-471f-a2aa-c852c484ad8e",
        "parentId" : "2c6615e0-8d9d-4730-8743-b9c9f5b0a822",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "I hit on myself the other day that I wanted to access a private method in Metap from external repo. In this particular case it's probably better to come up with a better public API for metap than un-private methods. Nothing to act upon now.",
        "createdAt" : "2018-02-27T20:42:19Z",
        "updatedAt" : "2018-02-27T20:42:19Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "384068564d24a8d1d4b4b578ae673d40f3d2ab0d",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +35,39 @@  }\n\n  private def spackages(sym: SymbolInfoSymbol): List[s.SymbolInformation] = {\n    val directPackagePath = {\n      val topLevelPath = sym.symbolInfo.owner.path.replace(\"<empty>\", \"_empty_\")"
  },
  {
    "id" : "497b7943-a0de-4311-9f4d-0bdbde90b169",
    "prId" : 1373,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1373#pullrequestreview-99842673",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70b05fda-0cfe-4fad-9d01-7c69d260abad",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "I think we should consider making `language`  an enum and add a `version: String` field. I find it awkward to hardcode `\"Scala\"` and `\"Java\"` all over the place and it opens up a can of worms related to equality (case-sensitivity etc.)",
        "createdAt" : "2018-02-27T10:30:44Z",
        "updatedAt" : "2018-02-27T11:18:13Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "3a5a8e06-b5c2-49c7-b47a-8ceee7458305",
        "parentId" : "70b05fda-0cfe-4fad-9d01-7c69d260abad",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Yep, I was thinking about that yesterday. I've opened a ticket: https://github.com/scalameta/scalameta/issues/1374.",
        "createdAt" : "2018-02-27T20:28:31Z",
        "updatedAt" : "2018-02-27T20:28:31Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "384068564d24a8d1d4b4b578ae673d40f3d2ab0d",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +60,64 @@      s.SymbolInformation(\n        symbol = transitivePackagePath + \".\",\n        language = Some(s.Language(\"Scala\")),\n        kind = k.PACKAGE,\n        name = name,"
  }
]