[
  {
    "id" : "eb0f3611-3d5c-42ca-aab8-7cdd8902bf74",
    "prId" : 1456,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1456#pullrequestreview-106676422",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89942cdd-44e8-402a-a6cf-ded6bbb5f23b",
        "parentId" : null,
        "authorId" : "ee435ce0-4e9b-4dad-b7cc-9ac4ab481429",
        "body" : "for some reason, removing this annotation causes this error\r\n\r\n\r\n```\r\n[error] /Users/gabro/buildo/scalameta/semanticdb/metacp/src/main/scala/scala/meta/internal/javacp/Javacp.scala:231: recursive value parameterSymbols needs type\r\n[error]               parameters = s.MethodType.ParameterList(parameterSymbols) :: Nil,\r\n```\r\n\r\nno clue...",
        "createdAt" : "2018-03-23T23:37:39Z",
        "updatedAt" : "2018-03-24T10:56:28Z",
        "lastEditedBy" : "ee435ce0-4e9b-4dad-b7cc-9ac4ab481429",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4adf459d78111f915ad14e9531ae860a5e84b1b",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +200,204 @@          }\n\n        val parameterSymbols: List[String] = params.zipWithIndex.map {\n          case (param: JavaTypeSignature, i) =>\n            val paramName = {"
  },
  {
    "id" : "ef7e64f9-71d8-47ff-a846-bd6d85d47381",
    "prId" : 1456,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1456#pullrequestreview-106682452",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43bec6d4-155c-4037-b3b2-8a6c2b556849",
        "parentId" : null,
        "authorId" : "ee435ce0-4e9b-4dad-b7cc-9ac4ab481429",
        "body" : "This was hard to find, but the `ACC_VARARGS` flag applies to the whole method.\r\n\r\nA parameter is then a vararg if it's the last of a method with `ACC_VARARGS`.",
        "createdAt" : "2018-03-23T23:40:15Z",
        "updatedAt" : "2018-03-24T10:56:28Z",
        "lastEditedBy" : "ee435ce0-4e9b-4dad-b7cc-9ac4ab481429",
        "tags" : [
        ]
      },
      {
        "id" : "52c026ed-945f-4fa4-af17-5dbf111a28c6",
        "parentId" : "43bec6d4-155c-4037-b3b2-8a6c2b556849",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Nice find! SemanticDB exists so that tool authors don't have to bother themselves with stuff like that.",
        "createdAt" : "2018-03-23T23:44:10Z",
        "updatedAt" : "2018-03-24T10:56:28Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "1e132cfd-2321-4d40-9241-1c71c4552490",
        "parentId" : "43bec6d4-155c-4037-b3b2-8a6c2b556849",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Making vararg a property of the method makes sense to me semantically. One awkward artifact of s.ByNameType is that it's possible to encode invalid states\r\n```scala\r\ndef foo(a: *A, b: *B)\r\n```\r\nOn the other hand, by-name types makes sense for syntax trees where Defn.Def has no attributes/modifiers to encode varargs ü§î ",
        "createdAt" : "2018-03-24T00:42:03Z",
        "updatedAt" : "2018-03-24T10:56:28Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4adf459d78111f915ad14e9531ae860a5e84b1b",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +207,211 @@            }\n            val paramSymbol = Symbols.Global(methodSymbol, d.Parameter(paramName))\n            val isRepeatedType = method.node.access.hasFlag(o.ACC_VARARGS) && i == params.length - 1\n            val paramTpe =\n              if (isRepeatedType) {"
  },
  {
    "id" : "97aa2cce-402d-4046-a654-0ecc0a97d1cd",
    "prId" : 1456,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1456#pullrequestreview-106679323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e297af71-153e-49dc-bd9e-91a99f82ab89",
        "parentId" : null,
        "authorId" : "ee435ce0-4e9b-4dad-b7cc-9ac4ab481429",
        "body" : "I've introduced this specific `require` since this should always be an `Array`.",
        "createdAt" : "2018-03-24T00:03:36Z",
        "updatedAt" : "2018-03-24T10:56:28Z",
        "lastEditedBy" : "ee435ce0-4e9b-4dad-b7cc-9ac4ab481429",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4adf459d78111f915ad14e9531ae860a5e84b1b",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +214,218 @@                  tpe.typeRef.isDefined && tpe.typeRef.get.symbol == \"scala.Array#\",\n                  s\"expected $paramName to be a scala.Array#, found $tpe\"\n                )\n                s.Type(\n                  tag = t.REPEATED_TYPE,"
  },
  {
    "id" : "a908644a-30b1-4d35-bae9-af4347204bea",
    "prId" : 1456,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1456#pullrequestreview-106695697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db9bdc14-8345-4d3c-b553-cdb4476f3f5c",
        "parentId" : null,
        "authorId" : "ee435ce0-4e9b-4dad-b7cc-9ac4ab481429",
        "body" : "had to make this recursive in order to print the `javaTypeSignature` of the Array type parameter.",
        "createdAt" : "2018-03-24T10:57:44Z",
        "updatedAt" : "2018-03-24T10:57:44Z",
        "lastEditedBy" : "ee435ce0-4e9b-4dad-b7cc-9ac4ab481429",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4adf459d78111f915ad14e9531ae860a5e84b1b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +147,151 @@      val typeDescriptor = {\n        val hasVarArg = method.access.hasFlag(o.ACC_VARARGS)\n        def toTypeDescriptor(t: JavaTypeSignature, i: Int): String = t match {\n          case t: BaseType => sname(t.name)\n          case t: ClassTypeSignature => sname(t.simpleClassTypeSignature.identifier)"
  },
  {
    "id" : "b3c291bd-270d-41e8-a725-bf37eb0b48ac",
    "prId" : 1422,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1422#pullrequestreview-102848561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e253ddb1-93ad-46e9-adaf-2a165509a1b6",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "üëç ",
        "createdAt" : "2018-03-10T11:46:34Z",
        "updatedAt" : "2018-03-10T16:00:18Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2a4d472bf076e929228ea5770ca1e49a796cbf7",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +151,155 @@\n    methodSignatures.foreach {\n      case method: MethodInfo if method.node.name == \"<clinit>\" =>\n        ()\n      case method: MethodInfo =>"
  },
  {
    "id" : "041b4463-7157-465e-9cd4-e935ad44e3ae",
    "prId" : 1414,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1414#pullrequestreview-102609930",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bea19e98-4062-465d-832c-bf4dbe5504fc",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Why wasn't this autoformatted before?",
        "createdAt" : "2018-03-09T00:10:05Z",
        "updatedAt" : "2018-03-09T00:24:15Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "520f8885-bac4-4c4f-8bee-06faf01febec",
        "parentId" : "bea19e98-4062-465d-832c-bf4dbe5504fc",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "the `.java` part of `project.excludeFilters` ignored everything in the `javacp` directory. Fixed in https://github.com/scalameta/scalameta/pull/1417\r\n\r\nNote to self, I should make this configuration easier in scalafmt. Or alternatively, we should let scalafmt loose on the scalameta repo! üòÑ ",
        "createdAt" : "2018-03-09T11:11:37Z",
        "updatedAt" : "2018-03-09T11:21:04Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb302a4761255026e7932da0feff1aa9ca82ec85",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +415,419 @@      symbol: String,\n      args: List[s.Type] = Nil,\n      prefix: Option[s.Type] = None): s.Type = {\n    s.Type(\n      tag = s.Type.Tag.TYPE_REF,"
  },
  {
    "id" : "24db1a2c-2c62-424c-969f-52a42e5fb2f5",
    "prId" : 1414,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1414#pullrequestreview-102690506",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b917512-4572-4313-aa09-3f6434d84fc7",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "I think this is an overkill, but I don't think this is a blocker.",
        "createdAt" : "2018-03-09T00:22:29Z",
        "updatedAt" : "2018-03-09T00:24:16Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "9380b37a-17c8-43e6-a696-d844abba1ee0",
        "parentId" : "7b917512-4572-4313-aa09-3f6434d84fc7",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "It was auto-suggested by intellij, I ran the fix just to avoid the annoying yellow warning\r\n\r\n![screen shot 2018-03-09 at 11 56 25](https://user-images.githubusercontent.com/1408093/37204383-f4e8f07a-2390-11e8-84aa-e1c842ed7cf6.png)\r\n\r\nWould like to implement this as a scalafix rule at some point.",
        "createdAt" : "2018-03-09T10:57:09Z",
        "updatedAt" : "2018-03-09T11:21:04Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "42ec29e6-d971-45df-b1fb-ae891ec9b02c",
        "parentId" : "7b917512-4572-4313-aa09-3f6434d84fc7",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "I wouldn't say this is idiomatic, regardless of what Intellij thinks about it. `lengthCompare` is likely to be faster than `length` on big lists, but I don't think that performance gains are worth the readability hit here.",
        "createdAt" : "2018-03-09T15:08:07Z",
        "updatedAt" : "2018-03-09T15:08:07Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "57c1dab2-86ef-4783-a3f5-d5d1e93fcde9",
        "parentId" : "7b917512-4572-4313-aa09-3f6434d84fc7",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "I like using a method designed exactly for this usecase. The readability hit is miniscule it doesn't bother me much.",
        "createdAt" : "2018-03-09T15:46:25Z",
        "updatedAt" : "2018-03-09T15:46:25Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb302a4761255026e7932da0feff1aa9ca82ec85",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +158,162 @@        }\n        val suffix =\n          if (synonyms.lengthCompare(1) == 0) \"\"\n          else \"+\" + (1 + synonyms.indexWhere(_.signature eq method.signature))\n        val isConstructor = method.node.name == \"<init>\""
  },
  {
    "id" : "25a8f8e7-0bd7-4240-b4d8-c0524ff1c161",
    "prId" : 1373,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1373#pullrequestreview-99843663",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e612097-8256-4243-952c-d9ee62e0807d",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "I intentionally renamed this from access to outerClassAccess in hope to make it clearer. No objections from me if you prefer it this way.",
        "createdAt" : "2018-02-27T10:38:58Z",
        "updatedAt" : "2018-02-27T11:18:13Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "8bfbe235-3535-4f20-a5f4-9a4b1f265def",
        "parentId" : "5e612097-8256-4243-952c-d9ee62e0807d",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "I think that `outerClassAccess` is somewhat misleading. It's not `access` of an outer class, but `access` of an `InnerClass` entry in outer class. I don't have better ideas though, so let's use `access` for the time being if you don't mind.",
        "createdAt" : "2018-02-27T20:31:09Z",
        "updatedAt" : "2018-02-27T20:31:09Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "a7e0a07e-5d9b-41e7-bbe9-fb45e395855c",
        "parentId" : "5e612097-8256-4243-952c-d9ee62e0807d",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "I agree.",
        "createdAt" : "2018-02-27T20:31:47Z",
        "updatedAt" : "2018-02-27T20:31:47Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "384068564d24a8d1d4b4b578ae673d40f3d2ab0d",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +30,34 @@      toplevel: ToplevelClassfile,\n      node: ClassNode,\n      access: Int,\n      scope: Scope): Seq[s.SymbolInformation] = {\n"
  },
  {
    "id" : "19537517-b5c6-4d76-ac75-d72ec560f2dc",
    "prId" : 1373,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1373#pullrequestreview-99842864",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d296346-698e-434c-8dff-10c10d65cdc8",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "NB. I'm not sure if \"Some(PUBLIC)\" is the right accessibility for packages. Maybe it should be None instead. Doesn't matter for me.",
        "createdAt" : "2018-02-27T10:39:43Z",
        "updatedAt" : "2018-02-27T11:18:13Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "1ae1d39c-6fa9-4411-b8a1-f0d032ab882d",
        "parentId" : "5d296346-698e-434c-8dff-10c10d65cdc8",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "We already have a related ticket: https://github.com/scalameta/scalameta/issues/1325. Let's follow up there.",
        "createdAt" : "2018-02-27T20:29:07Z",
        "updatedAt" : "2018-02-27T20:29:07Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "384068564d24a8d1d4b4b578ae673d40f3d2ab0d",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +73,77 @@            pkgName,\n            None,\n            o.ACC_PUBLIC,\n            owner\n          )"
  }
]