[
  {
    "id" : "6b935382-2108-4ced-a87e-0940eaa8a251",
    "prId" : 1674,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1674#pullrequestreview-134598925",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "456d8e20-5796-4c09-8a99-4b9a6ba6821d",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "> If the compute function returns true (indicating successful completion), the temporary file ...\r\n> If the compute function returns false (indicating failed completions), nothing happens.",
        "createdAt" : "2018-07-05T10:49:49Z",
        "updatedAt" : "2018-07-05T12:19:58Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3c012530b36d03419f3e882d24d6eeb3b34eb75",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +29,33 @@    * @param computeFunction The expensive compute function that writes its results into the\n    *                        callback argument path, which points to a non-existing temporary file.\n    *                        Once the compute function has completed successfully, the temporary file\n    *                        is moved to the target cache location.\n    */"
  },
  {
    "id" : "5a7e0bd5-463b-446e-a43d-08312a26189c",
    "prId" : 1674,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1674#pullrequestreview-134598925",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a05a71d8-0a86-48e9-a1ff-deae6c190b7b",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Good guard! ",
        "createdAt" : "2018-07-05T11:01:09Z",
        "updatedAt" : "2018-07-05T12:19:58Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3c012530b36d03419f3e882d24d6eeb3b34eb75",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +39,43 @@      if (!Files.exists(cacheTarget)) {\n        val tmp = Files.createTempDirectory(\"metacp\").resolve(cacheTarget.getFileName)\n        if (computeFunction(tmp)) {\n          tryAtomicMove(tmp, cacheTarget)\n        }"
  }
]