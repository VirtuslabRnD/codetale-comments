[
  {
    "id" : "190cbb1a-0473-4ba0-bae2-c67240785530",
    "prId" : 1616,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1616#pullrequestreview-130649323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9c0fd01-ceef-402e-90b8-8baa64f51335",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "This is one of the beautiful things about the Type/Signature split. We not only refine the type of `SymbolInformation.signature` (previously, `SymbolInformation.tpe`), but also gain precision in a lot of other places, e.g. here. Concretely, we observe that `toSemanticTpe` doesn't need linkMode, which is non-obvious and neat.",
        "createdAt" : "2018-06-21T02:32:44Z",
        "updatedAt" : "2018-06-21T05:47:31Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "1096f995543652d3f0a898123732076e7695edfe",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +8,12 @@trait TypeOps { self: Scalacp =>\n  implicit class XtensionTypeSType(tpe: Type) {\n    def toSemanticTpe: s.Type = {\n      def loop(tpe: Type): s.Type = {\n        tpe match {"
  },
  {
    "id" : "bc71463b-d7b8-413d-905a-10e6025fa106",
    "prId" : 1616,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1616#pullrequestreview-130679569",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e26877e-56b4-4ddc-b4e7-ec2ad1a2744a",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "😍 Thanks for the idea to split constant types even further!",
        "createdAt" : "2018-06-21T02:33:12Z",
        "updatedAt" : "2018-06-21T05:47:31Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "27407b8c-8d37-44f0-9811-5b0494ae402b",
        "parentId" : "5e26877e-56b4-4ddc-b4e7-ec2ad1a2744a",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "I'm glad it came out nicely 👍 ",
        "createdAt" : "2018-06-21T08:12:32Z",
        "updatedAt" : "2018-06-21T08:22:13Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "1096f995543652d3f0a898123732076e7695edfe",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +55,59 @@          case ConstantType(const) =>\n            val sconst = s.Constant(const)\n            s.ConstantType(sconst)\n          case RefinedType(sym, parents) =>\n            val sparents = parents.map(loop)"
  },
  {
    "id" : "c7279313-b6a9-4234-bfe0-231d8ad416bf",
    "prId" : 1606,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1606#pullrequestreview-129369834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0185a6e-60f8-436f-be80-76a253504a11",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Can't wait till I have time to work on https://github.com/scalameta/scalameta/issues/1605.",
        "createdAt" : "2018-06-16T18:40:24Z",
        "updatedAt" : "2018-06-16T19:34:51Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4c3e380cc2f67e0f333fe575330554340a09a56",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +24,28 @@            s.TypeRef(spre, ssym, sargs)\n          case SingleType(pre, sym) =>\n            val stag = st.SYMBOL\n            val spre = if (tpe.hasNontrivialPrefix) loop(pre) else s.NoType\n            val ssym = {"
  },
  {
    "id" : "8a3dc4fc-33f8-4fdc-9b63-d8acaab6e0c3",
    "prId" : 1606,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1606#pullrequestreview-129369834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2484d8b-7b21-4631-94a7-e2f948b4a512",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Ditto.",
        "createdAt" : "2018-06-16T18:40:56Z",
        "updatedAt" : "2018-06-16T19:34:51Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4c3e380cc2f67e0f333fe575330554340a09a56",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +85,89 @@                s.SingletonType(st.NULL, s.NoType, Symbols.None, 0, \"\")\n              case other =>\n                sys.error(s\"unsupported const $other\")\n            }\n          case RefinedType(sym, parents) =>"
  }
]