[
  {
    "id" : "7d0ccc65-00d5-4f53-a879-d2c871bb741c",
    "prId" : 1726,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1726#pullrequestreview-143314325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7932c72f-1d92-495d-9a89-8dbdf48d89ec",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Why expand the args before calling `Settings.parse`? For me, this logic is the responsibility of `Settings.parse`. I don't have a strong opinion however as long as it's consistent.",
        "createdAt" : "2018-07-31T17:28:12Z",
        "updatedAt" : "2018-07-31T17:35:05Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "6cf7e81a-4854-47b6-8e53-4cc1da68b415",
        "parentId" : "7932c72f-1d92-495d-9a89-8dbdf48d89ec",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "What I had in mind here is that the `@args` expansion is only relevant to CLI invocations, since it's only the CLI invocations that are limited by the max size of a shell command. As you said, this is consistent - both within Scalameta and within Rsc.",
        "createdAt" : "2018-08-03T19:54:12Z",
        "updatedAt" : "2018-08-03T19:54:12Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "222bcbfd13d6416abb5f7ce96289c4b734cb550c",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +22,26 @@\n  private def process(args: Array[String], reporter: Reporter): Int = {\n    val expandedArgs = Args.expand(args)\n    Settings.parse(expandedArgs, reporter) match {\n      case Some(settings) =>"
  },
  {
    "id" : "66b9026c-3ac6-46cb-917d-6106da4b76df",
    "prId" : 1238,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1238#pullrequestreview-93322266",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "256aeee7-e869-4088-9e90-442a13f664e8",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Does this work for coursier bootstrap scripts? In scalafix you implemented something custom https://github.com/scalacenter/scalafix/blob/325ad576a7c4c5e8a5286195a1a83d091c77ac2d/scalafix-reflect/src/main/scala/scalafix/internal/reflect/ScalafixToolbox.scala#L74 Any chance we can reuse?",
        "createdAt" : "2018-02-01T12:12:20Z",
        "updatedAt" : "2018-02-01T16:00:22Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "55f106ca-9e22-4029-a794-1632ae3db6d8",
        "parentId" : "256aeee7-e869-4088-9e90-442a13f664e8",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Let's look into this separately. I added an entry to my issue tracker.",
        "createdAt" : "2018-02-01T15:30:57Z",
        "updatedAt" : "2018-02-01T16:00:22Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0295ec5950b1f4dad650d2b602c7cbe9e15b136f",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +22,26 @@    val pluginClasspath = classOf[SemanticdbPlugin].getClassLoader match {\n      case null => manifestDir.toString\n      case cl: URLClassLoader => cl.getURLs.map(_.getFile).mkString(File.pathSeparator)\n      case cl => sys.error(s\"unsupported classloader: $cl\")\n    }"
  }
]