[
  {
    "id" : "43945531-53cb-4b44-b3ac-5f5ad1d51439",
    "prId" : 1641,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1641#pullrequestreview-133479702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91a1ada0-e1f3-4575-a14f-ddaa3d278df0",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "What about `object foo; def foo(x: Int) = ???`? Will code like this be handled correctly?",
        "createdAt" : "2018-06-28T22:14:07Z",
        "updatedAt" : "2018-07-02T09:26:35Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "89ea0ebf-96f2-4e36-a2e5-a40b240fe204",
        "parentId" : "91a1ada0-e1f3-4575-a14f-ddaa3d278df0",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Good question. Turns out this change was breaking the spec!\r\n\r\nI decided to change the spec to exclude overloaded objects from the computation of disambiguators because I think that preserves the nice property for method overloads that there is always one symbol with the disambiguator `()`. Previously, you would have the symbols `foo.` and `foo(+1)` from `object foo; def foo(a: Int)`\r\n\r\nMetacp and metac have been updated to the new scheme and I have added targeted + expect tests to assert the new behavior.\r\n",
        "createdAt" : "2018-06-29T08:55:46Z",
        "updatedAt" : "2018-07-02T09:26:35Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "ec00f145-11d3-4540-be7f-07b893d21805",
        "parentId" : "91a1ada0-e1f3-4575-a14f-ddaa3d278df0",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Sounds good.",
        "createdAt" : "2018-07-02T02:31:34Z",
        "updatedAt" : "2018-07-02T09:26:35Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4a27c360098279cf8cb20062b3532047568c613",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +79,83 @@        peer.isMethod &&\n        peer.name == sym.name\n      }\n      val suffix = {\n        if (overloads.lengthCompare(1) == 0) \"\""
  },
  {
    "id" : "52cfc334-a625-4806-93cc-642d962ef20c",
    "prId" : 1575,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1575#pullrequestreview-124982041",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8061f2c8-9a38-4b46-90cf-f20e06c857d3",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "ditto",
        "createdAt" : "2018-05-31T21:25:50Z",
        "updatedAt" : "2018-05-31T21:28:43Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "af63cb8745825d9c2b9aa7109289aed5169a1f7a",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +116,120 @@  case class SemanticdbDecls(gsyms: List[g.Symbol]) {\n    lazy val ssyms: List[String] = {\n      val sbuf = List.newBuilder[String]\n      gsyms.foreach { gsym =>\n        val ssym = gsym.toSemantic.syntax"
  },
  {
    "id" : "cea97782-be90-4bae-9a94-27977bf0eb56",
    "prId" : 1238,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1238#pullrequestreview-93313593",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad4482b4-da9c-4871-a609-ba483e48395d",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "I wouldn't be surprised if this change has a positive impact on file size ^^",
        "createdAt" : "2018-02-01T12:19:04Z",
        "updatedAt" : "2018-02-01T16:00:22Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "4528ea95-d83f-42d7-9435-b0080ac0432c",
        "parentId" : "ad4482b4-da9c-4871-a609-ba483e48395d",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Later on, we could make these names even shorter, e.g. `%0`, `%1` etc like in LLVM.",
        "createdAt" : "2018-02-01T15:09:01Z",
        "updatedAt" : "2018-02-01T16:00:22Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0295ec5950b1f4dad650d2b602c7cbe9e15b136f",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +36,40 @@              val id = idCache.get(mpos.input.syntax)\n              idCache.put(mpos.input.syntax, id + 1)\n              m.Symbol.Local(\"local\" + id.toString)\n            }\n          }"
  },
  {
    "id" : "59f34ff4-fd2b-4b76-be0c-a05e5e3b4c07",
    "prId" : 1238,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1238#pullrequestreview-93313214",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb255439-d7a0-41af-977c-991d07fc2ac4",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "General note, I've found it incredibly awkward to use `mpos.input.syntax` as a unique key. `Input` needs more work IMO ",
        "createdAt" : "2018-02-01T12:20:21Z",
        "updatedAt" : "2018-02-01T16:00:22Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "1e75845a-6f4b-433f-b710-65a473655b59",
        "parentId" : "eb255439-d7a0-41af-977c-991d07fc2ac4",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Agreed. Opened https://github.com/scalameta/scalameta/issues/1240.",
        "createdAt" : "2018-02-01T15:08:06Z",
        "updatedAt" : "2018-02-01T16:00:22Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0295ec5950b1f4dad650d2b602c7cbe9e15b136f",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +34,38 @@            if (mpos == m.Position.None) m.Symbol.None\n            else {\n              val id = idCache.get(mpos.input.syntax)\n              idCache.put(mpos.input.syntax, id + 1)\n              m.Symbol.Local(\"local\" + id.toString)"
  }
]