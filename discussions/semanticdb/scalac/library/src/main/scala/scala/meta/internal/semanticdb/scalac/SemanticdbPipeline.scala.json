[
  {
    "id" : "d0420bdd-0a3a-4172-b5ce-757c9817110f",
    "prId" : 1738,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1738#pullrequestreview-144329395",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "142a70eb-1c11-4646-a4ab-c812eed8ec39",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Your raised a good question about why metac defaults to warnings instead of errors. I think it would be good to change the default to error with v4. You in favor of that change?",
        "createdAt" : "2018-08-07T16:02:03Z",
        "updatedAt" : "2018-08-07T16:03:36Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "ef90bcdd-c22a-43d6-9993-bf2754a1fcbe",
        "parentId" : "142a70eb-1c11-4646-a4ab-c812eed8ec39",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Yes. I won't have time to get this through myself this week, but if you do, that'd be great.",
        "createdAt" : "2018-08-07T17:34:02Z",
        "updatedAt" : "2018-08-07T17:34:02Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "2222dbb2-16ce-4c8e-a3bc-ce17eb634791",
        "parentId" : "142a70eb-1c11-4646-a4ab-c812eed8ec39",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "I may take a stab at it, opened https://github.com/scalameta/scalameta/issues/1742",
        "createdAt" : "2018-08-08T09:09:12Z",
        "updatedAt" : "2018-08-08T09:37:46Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc08bebdb55343bea8b986c70d25db6741cecedf",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +30,34 @@\n  def handleCrash(unit: Option[g.CompilationUnit]): PartialFunction[Throwable, Unit] = {\n    case NonFatal(ex) =>\n      val writer = new StringWriter()\n      val culprit = unit.map(unit => \" for \" + unit.source.file.path).getOrElse(\"\")"
  },
  {
    "id" : "dac51198-5967-444b-aa7c-770d1538d17a",
    "prId" : 1395,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1395#pullrequestreview-102255594",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c6cb0ff-765e-476e-99eb-a29dabe5d98a",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Unrelated to this PR, but this logic has always bugged me. I think we should try to use idiomatic java.nio wherever possible. Here's how it's possible to delete a directory upwards\r\n\r\n```scala\r\n  Files.walkFileTree(\r\n    Paths.get(\"\"),\r\n    new SimpleFileVisitor[Path] {\r\n      override def visitFile(file: Path, attrs: BasicFileAttributes): FileVisitResult = {\r\n        if (someLogic() { Files.delete(file) }\r\n        FileVisitResult.CONTINUE\r\n      }\r\n      override def postVisitDirectory(dir: Path, exc: IOException): FileVisitResult = {\r\n        val ds = Files.newDirectoryStream(dir)\r\n        val isEmpty = !ds.iterator().hasNext\r\n        ds.close()\r\n        if (isEmpty) {\r\n          Files.delete(dir)\r\n        }\r\n        FileVisitResult.CONTINUE\r\n      }\r\n    }\r\n  )\r\n```\r\nSure it's verbose, but by using conventional APIs for IO the code is more approachable for anyone dropping into the codebase.",
        "createdAt" : "2018-03-07T22:18:05Z",
        "updatedAt" : "2018-03-08T00:57:40Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "b76b2aae-e79c-417f-93c1-44879301015f",
        "parentId" : "2c6cb0ff-765e-476e-99eb-a29dabe5d98a",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "At the time when this logic was introduced, we were still on JDK 1.6. I agree that your proposed code snippet will be an improvement. Let's open a ticket for this.",
        "createdAt" : "2018-03-08T00:25:27Z",
        "updatedAt" : "2018-03-08T00:57:40Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "6737cbb4-07a4-40e7-a267-9ecd98e438d3",
        "parentId" : "2c6cb0ff-765e-476e-99eb-a29dabe5d98a",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Done #1402 ",
        "createdAt" : "2018-03-08T10:41:05Z",
        "updatedAt" : "2018-03-08T11:50:13Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "44f66ad367eba5d3307e2dfe61035d34647e8019",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +70,74 @@        })\n        orphanedVentries.map(ve => {\n          def cleanupUpwards(file: File): Unit = {\n            if (file != null) {\n              if (file.isFile) {"
  }
]