[
  {
    "id" : "f74af4e5-036d-42fd-b2d5-bc7418931895",
    "prId" : 1422,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1422#pullrequestreview-102848561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d74813e-f6e7-45e1-8608-6d020bc0dc80",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "👍 ",
        "createdAt" : "2018-03-10T11:45:56Z",
        "updatedAt" : "2018-03-10T16:00:18Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2a4d472bf076e929228ea5770ca1e49a796cbf7",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +142,146 @@\n    private def newInfo: (Option[s.Type], List[g.Symbol]) = {\n      if (gsym.hasPackageFlag) (None, Nil)\n      else {\n        val ginfo = {"
  },
  {
    "id" : "17da5da5-6404-4e55-9dc3-534ef9187739",
    "prId" : 1416,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1416#pullrequestreview-102687310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "643480cb-1fe3-4f80-93b7-cf21a21bba3b",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Why is `TRAIT` necessary? Would it be possible to model them as `INTERFACE`?",
        "createdAt" : "2018-03-09T09:40:53Z",
        "updatedAt" : "2018-03-09T15:12:28Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "abb8ef1e-eed8-474d-967e-0615efe91cfc",
        "parentId" : "643480cb-1fe3-4f80-93b7-cf21a21bba3b",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "I would say that traits and interfaces are sufficiently different to warrant different kinds, just like macros and methods. This is clearly subjective, though. What do you think?",
        "createdAt" : "2018-03-09T15:12:22Z",
        "updatedAt" : "2018-03-09T15:12:28Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "f0ce0f3d-2c69-4a1b-8180-037245cf030b",
        "parentId" : "643480cb-1fe3-4f80-93b7-cf21a21bba3b",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "I see. I'm a fan of modeling things for what they are so the k.INTERFACE and k.TRAIT is fine.",
        "createdAt" : "2018-03-09T15:37:26Z",
        "updatedAt" : "2018-03-09T15:43:41Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ff10c15502b6b6400abe286a263819084a11d18",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +47,51 @@        case gsym: ClassSymbol =>\n          if (gsym.isTrait && gsym.hasFlag(gf.JAVA)) mf.INTERFACE\n          else if (gsym.isTrait) mf.TRAIT\n          else mf.CLASS\n        case gsym: TypeSymbol =>"
  },
  {
    "id" : "a0144a8d-b414-4b17-8532-6c10b6079b82",
    "prId" : 1416,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1416#pullrequestreview-102582915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccdc0f76-acfc-451b-9a37-7eb12c6b9747",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "👍 Didn't know about this one, handy",
        "createdAt" : "2018-03-09T09:43:01Z",
        "updatedAt" : "2018-03-09T15:12:28Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ff10c15502b6b6400abe286a263819084a11d18",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +14,18 @@  implicit class XtensionGSymbolMDenotation(gsym0: g.Symbol) {\n    private val gsym: g.Symbol = {\n      if (gsym0.isJavaClass) gsym0.companionClass\n      else if (gsym0.isModuleClass) gsym0.asClass.module\n      else if (gsym0.isTypeSkolem) gsym0.deSkolemize"
  },
  {
    "id" : "5f64fade-69ae-48ed-a5ac-e714fee80870",
    "prId" : 1414,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1414#pullrequestreview-102609930",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67a9381e-3df3-42ae-8275-12c0791afd2c",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Looks like the three `isJavaClass` checks above can be replaced by a single condition in `val gsym` above. I'll experiment with this myself after merging this PR.",
        "createdAt" : "2018-03-09T00:12:27Z",
        "updatedAt" : "2018-03-09T00:24:15Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "56fe6a25-3e25-4129-a281-7b76ad5bd147",
        "parentId" : "67a9381e-3df3-42ae-8275-12c0791afd2c",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Nice job cleaning this up in #1416 ",
        "createdAt" : "2018-03-09T11:12:05Z",
        "updatedAt" : "2018-03-09T11:21:04Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb302a4761255026e7932da0feff1aa9ca82ec85",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +123,127 @@        if (gsym.isJavaClass) {\n          gsym.companionClass.info\n        } else if (gsym.isGetter && gsym.isLazy && !gsym.isClass) {\n          gsym.info.finalResultType\n        } else if (gsym.isAliasType) {"
  },
  {
    "id" : "b9b46dc9-a556-4852-9a83-229972ea5b25",
    "prId" : 1259,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1259#pullrequestreview-94104786",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d882562-035a-47e6-8f26-bf1f0c047417",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Will there ever be a use-case for this mode?",
        "createdAt" : "2018-02-05T17:42:07Z",
        "updatedAt" : "2018-02-05T21:04:24Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "72dfb91c-ba68-4d47-bdbd-a74d1ee7e601",
        "parentId" : "1d882562-035a-47e6-8f26-bf1f0c047417",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Transition period when tools like Metals still don't have support for s.Type prettyprinting.",
        "createdAt" : "2018-02-05T18:15:58Z",
        "updatedAt" : "2018-02-05T21:04:24Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "c46fa13a-2f11-4ce3-bfad-41d56de3bc24",
        "parentId" : "1d882562-035a-47e6-8f26-bf1f0c047417",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "I feel like the transition will more likely be atomic, we throw out the pretty printing and add in s.Type.",
        "createdAt" : "2018-02-05T18:57:40Z",
        "updatedAt" : "2018-02-05T21:04:24Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "ef74cc63-353f-40cc-bddd-24a004267829",
        "parentId" : "1d882562-035a-47e6-8f26-bf1f0c047417",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Let's keep this for now. It's not like supporting this mode costs us anything apart from single-digit amount of lines of code.",
        "createdAt" : "2018-02-05T19:04:16Z",
        "updatedAt" : "2018-02-05T21:04:24Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfafd4238974683ed888ce24c52bd0fa4de7aa33",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +135,139 @@          val denot = m.Denotation(flags, name, \"\", Nil, Nil, over, tpe)\n          DenotationResult(denot, todoOverrides, todoTpe)\n        case SignatureMode.All =>\n          val (signature, names) = oldInfo\n          val (tpe, todoTpe) = newInfo"
  },
  {
    "id" : "5dea669d-40a9-40cb-94a0-d84143e32395",
    "prId" : 1257,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1257#pullrequestreview-93858659",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39d52f7c-6bb7-43d8-8315-93ab6893c89c",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Without this, all packages get the `JAVADEFINED` flag which I found pretty excessive.",
        "createdAt" : "2018-02-04T21:24:04Z",
        "updatedAt" : "2018-02-04T21:24:04Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6369a4be8d03c1055fe5099c90692f4e30d17e8f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +41,45 @@      if (maybeValOrVar && !(gsym.hasFlag(gf.LOCAL) && gsym.hasFlag(gf.PARAMACCESSOR)))\n        flags |= mf.VAL\n      if (gsym.hasFlag(gf.JAVA) && !gsym.hasFlag(gf.PACKAGE))\n        flags |= mf.JAVADEFINED\n      flags"
  }
]