[
  {
    "id" : "4c7d164f-7ed8-4228-94f1-34cd9aae5e2e",
    "prId" : 1308,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/1308#pullrequestreview-574962230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e74f925c-1742-48cf-9d0a-6eedd1668f20",
        "parentId" : null,
        "authorId" : "56229517-a69b-4ed6-937e-ba16e997923d",
        "body" : "onBackpressureDrop && delayElements is needed in case of consumer is not keeping up with producer",
        "createdAt" : "2021-01-24T19:40:39Z",
        "updatedAt" : "2021-01-24T19:40:39Z",
        "lastEditedBy" : "56229517-a69b-4ed6-937e-ba16e997923d",
        "tags" : [
        ]
      }
    ],
    "commit" : "06114fb0142e35a2c660cdb74b1bbf2ca33a699a",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +90,94 @@        Function<CircuitBreakerEvent, String> circuitBreakerEventDataFn = getCircuitBreakerEventStringFunction();\n        return Flux.merge(eventStreams)\n            .onBackpressureDrop()\n            .delayElements(Duration.ofMillis(100))\n            .map(cbEvent ->"
  },
  {
    "id" : "7c537cad-4c06-421c-b16a-7d4ae39dd464",
    "prId" : 1308,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/1308#pullrequestreview-574962334",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6189d4ad-7f70-4585-8702-cb37d4ecf9aa",
        "parentId" : null,
        "authorId" : "56229517-a69b-4ed6-937e-ba16e997923d",
        "body" : "refactored to have a common method `publishEvents`",
        "createdAt" : "2021-01-24T19:41:57Z",
        "updatedAt" : "2021-01-24T19:41:57Z",
        "lastEditedBy" : "56229517-a69b-4ed6-937e-ba16e997923d",
        "tags" : [
        ]
      }
    ],
    "commit" : "06114fb0142e35a2c660cdb74b1bbf2ca33a699a",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +65,69 @@                circuitBreaker -> toFlux(circuitBreaker.getEventPublisher())\n            );\n        return Flux.merge(publishEvents(Array.ofAll(eventStreams)),getHeartbeatStream());\n    }\n"
  },
  {
    "id" : "475fc5ed-91f4-416b-8e66-622f0c0f132f",
    "prId" : 1308,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/1308#pullrequestreview-574962460",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed860c34-049d-49fd-b4c4-16327313ff7b",
        "parentId" : null,
        "authorId" : "56229517-a69b-4ed6-937e-ba16e997923d",
        "body" : "`getHeartbeatStream` to keep connection alive [here](https://stackoverflow.com/questions/48806452/spring-boot-webflux-netty-detect-closed-connection) ",
        "createdAt" : "2021-01-24T19:43:19Z",
        "updatedAt" : "2021-01-24T19:43:19Z",
        "lastEditedBy" : "56229517-a69b-4ed6-937e-ba16e997923d",
        "tags" : [
        ]
      }
    ],
    "commit" : "06114fb0142e35a2c660cdb74b1bbf2ca33a699a",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +119,123 @@\n    private Flux<ServerSentEvent<String>> getHeartbeatStream() {\n        return Flux.interval(Duration.ofSeconds(1))\n            .map(i -> ServerSentEvent.<String>builder().event(\"ping\").build());\n    }"
  }
]