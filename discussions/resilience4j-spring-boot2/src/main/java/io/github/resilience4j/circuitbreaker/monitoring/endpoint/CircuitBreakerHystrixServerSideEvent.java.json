[
  {
    "id" : "de105f21-6988-4e4e-953c-4c4be8bce041",
    "prId" : 1308,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/1308#pullrequestreview-574962091",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "190a7958-08df-4a9e-b970-9cb948ec4e30",
        "parentId" : null,
        "authorId" : "56229517-a69b-4ed6-937e-ba16e997923d",
        "body" : "refactored to have a common method `publishEvents`",
        "createdAt" : "2021-01-24T19:39:13Z",
        "updatedAt" : "2021-01-24T19:39:13Z",
        "lastEditedBy" : "56229517-a69b-4ed6-937e-ba16e997923d",
        "tags" : [
        ]
      }
    ],
    "commit" : "06114fb0142e35a2c660cdb74b1bbf2ca33a699a",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +72,76 @@            );\n        BiFunction<CircuitBreakerEvent, CircuitBreaker, String> data = getCircuitBreakerEventStringFunction();\n        return Flux.merge(publishEvents(Array.ofAll(eventStreams)), getHeartbeatStream());\n    }\n"
  },
  {
    "id" : "805141a2-9836-4c98-88e8-fd9324163722",
    "prId" : 1308,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/1308#pullrequestreview-574962179",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e9eccfe-e102-40ff-9eca-ac38b183417c",
        "parentId" : null,
        "authorId" : "56229517-a69b-4ed6-937e-ba16e997923d",
        "body" : "`onBackpressureDrop`  && `delayElements ` is needed in case of consumer is not keeping up with producer",
        "createdAt" : "2021-01-24T19:40:02Z",
        "updatedAt" : "2021-01-24T19:40:18Z",
        "lastEditedBy" : "56229517-a69b-4ed6-937e-ba16e997923d",
        "tags" : [
        ]
      }
    ],
    "commit" : "06114fb0142e35a2c660cdb74b1bbf2ca33a699a",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +127,131 @@        BiFunction<CircuitBreakerEvent, CircuitBreaker, String> circuitBreakerEventDataFn = getCircuitBreakerEventStringFunction();\n        return Flux.merge(eventStreams)\n            .onBackpressureDrop()\n            .delayElements(Duration.ofMillis(100))\n            .map(cbEvent ->"
  },
  {
    "id" : "273a5859-675e-46c6-9caf-f888b9a1dba6",
    "prId" : 1308,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/1308#pullrequestreview-574962274",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdd6d6bf-e0a7-4505-9342-4632adefbd3f",
        "parentId" : null,
        "authorId" : "56229517-a69b-4ed6-937e-ba16e997923d",
        "body" : "refactored to have a common method `publishEvents`",
        "createdAt" : "2021-01-24T19:41:08Z",
        "updatedAt" : "2021-01-24T19:41:18Z",
        "lastEditedBy" : "56229517-a69b-4ed6-937e-ba16e997923d",
        "tags" : [
        ]
      }
    ],
    "commit" : "06114fb0142e35a2c660cdb74b1bbf2ca33a699a",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +81,85 @@        CircuitBreaker circuitBreaker = getCircuitBreaker(name);\n        Flux<CircuitBreakerEvent> eventStream = toFlux(circuitBreaker.getEventPublisher());\n        return Flux.merge(publishEvents(Array.of(eventStream)), getHeartbeatStream());\n\n    }"
  },
  {
    "id" : "244cc0b4-b83f-4a75-858f-5fa1a66be2c7",
    "prId" : 1308,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/1308#pullrequestreview-574962405",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52e8853e-4573-4b8c-8871-8791e4f380cd",
        "parentId" : null,
        "authorId" : "56229517-a69b-4ed6-937e-ba16e997923d",
        "body" : "`getHeartbeatStream` to keep connection alive [here](https://stackoverflow.com/questions/48806452/spring-boot-webflux-netty-detect-closed-connection) ",
        "createdAt" : "2021-01-24T19:42:43Z",
        "updatedAt" : "2021-01-24T19:42:43Z",
        "lastEditedBy" : "56229517-a69b-4ed6-937e-ba16e997923d",
        "tags" : [
        ]
      }
    ],
    "commit" : "06114fb0142e35a2c660cdb74b1bbf2ca33a699a",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +119,123 @@    }\n\n    private Flux<ServerSentEvent<String>> getHeartbeatStream() {\n        return Flux.interval(Duration.ofSeconds(1))\n            .map(i -> ServerSentEvent.<String>builder().event(\"ping\").build());"
  }
]