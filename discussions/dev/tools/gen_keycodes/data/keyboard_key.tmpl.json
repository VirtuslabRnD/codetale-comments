[
  {
    "id" : "6e56733c-7c7d-4cc9-a406-56cc21203e66",
    "prId" : 27620,
    "prUrl" : "https://github.com/flutter/flutter/pull/27620#pullrequestreview-200857715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d15aa39b-6a36-43ba-b963-d26613c3796f",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "`final LogicalKeyboardKey typedOther = other;`\r\nOtherwise other.keyId is a dcall",
        "createdAt" : "2019-02-06T23:18:51Z",
        "updatedAt" : "2019-02-06T23:46:58Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "73caa89d-8404-4a82-990a-6883f301c463",
        "parentId" : "d15aa39b-6a36-43ba-b963-d26613c3796f",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done.",
        "createdAt" : "2019-02-06T23:25:33Z",
        "updatedAt" : "2019-02-06T23:46:58Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5acbf0281cd1338e33c8059b5320072b0925f45",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +75,79 @@    if (other.runtimeType != runtimeType) {\n      return false;\n    }\n    final LogicalKeyboardKey typedOther = other;\n    return keyId == typedOther.keyId;"
  },
  {
    "id" : "622d0d9e-b1aa-4fc2-b66d-b309c83c5270",
    "prId" : 27620,
    "prUrl" : "https://github.com/flutter/flutter/pull/27620#pullrequestreview-200857715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5bba4801-442e-4542-9312-c8e45a9dd756",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Same here",
        "createdAt" : "2019-02-06T23:19:54Z",
        "updatedAt" : "2019-02-06T23:46:58Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "dd257ff7-70ce-418d-b4a2-297f2a11b3b0",
        "parentId" : "5bba4801-442e-4542-9312-c8e45a9dd756",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done.",
        "createdAt" : "2019-02-06T23:27:12Z",
        "updatedAt" : "2019-02-06T23:46:58Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5acbf0281cd1338e33c8059b5320072b0925f45",
    "line" : 218,
    "diffHunk" : "@@ -1,1 +216,220 @@    if (other.runtimeType != runtimeType) {\n      return false;\n    }\n    final PhysicalKeyboardKey typedOther = other;\n    return usbHidUsage == typedOther.usbHidUsage;"
  },
  {
    "id" : "69b3bd14-69ec-434a-8081-b984f4d40716",
    "prId" : 27627,
    "prUrl" : "https://github.com/flutter/flutter/pull/27627#pullrequestreview-201363552",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fceaab6-a987-43df-9b5f-4b502559ff27",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "As I understand it, a physical key's location corresponds to where the physical key would appear if its keyboard was lined up with a QWERTY keyboard. If true, that seems like a useful point to make in the class doc.",
        "createdAt" : "2019-02-07T22:30:50Z",
        "updatedAt" : "2019-02-08T19:05:23Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "754a00bd-f4e6-4a82-b1ff-9e20e1efd82f",
        "parentId" : "8fceaab6-a987-43df-9b5f-4b502559ff27",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done.",
        "createdAt" : "2019-02-07T22:59:33Z",
        "updatedAt" : "2019-02-08T19:05:23Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bb807835bcf38ea3f36dffa963550adadc455b8",
    "line" : 280,
    "diffHunk" : "@@ -1,1 +342,346 @@///  * [RawKeyboardListener], a widget used to listen to and supply handlers for\n///    keyboard events.\nclass PhysicalKeyboardKey extends Diagnosticable {\n  /// Creates a PhysicalKeyboardKey object with an optional debug name.\n  ///"
  }
]