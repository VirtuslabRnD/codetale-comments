[
  {
    "id" : "fb2a38c1-2782-4878-9667-f8d9cc45b8dc",
    "prId" : 85121,
    "prUrl" : "https://github.com/flutter/flutter/pull/85121#pullrequestreview-705601777",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41cd2238-19a8-4e92-aca6-0d03be871cb9",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "What if it is not possible? I'd just remove that part, or explain what happens on systems where it can't be done.\r\n\r\nI suppose this scheme means that on some keyboards, some common keys just don't exist. For instance, on the French keyboard, none of the digit keys exist as standalone logical keys, since they all require a shift to press. So if I define my shortcuts with a key constant for `digit1`, it will never fire on a French keyboard, even if I define it as `SingleActivator(LogicalKeyboardKey.digit1, shift:true)`, since the key code for \"1\" can't be produced without a modifier. I have to define a character-based activator if I want numbers.\r\n\r\nI think I'm OK with that, as confusing as it is, I'm just thinking it through. This is going to take some serious documentation, and I wish we had a less confusing way to define key bindings that work on all systems. Basically, we need to be able to describe the developer's intent better.\r\n\r\nIn general, regardless of the ID scheme, there are issues with choosing bindings: for instance, if you wanted a period to be bound to an action, on a French layout it's either `SingleActivator(LogicalKeyboardKey.colon, shift:true)`, or it's `CharacterActivator('.')`, but to make that same binding work on a US keyboard, it depends on if the intention is \"user pressing :, but also holding shift\", or \"the key that produces a period\", since those aren't the same keys on both systems. It would be nice if developers could describe this intention more clearly. Maybe some more specific ShortcutActivator subclasses can help. I also think some use cases will really need access to the keyboard layout to fully describe what they intend.\r\n\r\nWill this cause existing code that binds to `LogicalKeySet(LogicalKeyboardKey.keyA)` to suddenly start firing on upper or lowercase A instead of just lowercase A? (If so, that's probably a feature, just want to clarify)",
        "createdAt" : "2021-07-01T21:26:31Z",
        "updatedAt" : "2021-07-01T22:05:20Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "b43df7c5-8af4-4eb9-a7aa-e90d2d372d02",
        "parentId" : "41cd2238-19a8-4e92-aca6-0d03be871cb9",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "First, this means the exact opposite: **all special characters have their own key**. The \"+\", the \".\", the \"@\". Also, EASCII letters have their own key as lower case too: the \"ü\" key. \r\n\r\nThe problems is how we list these keys. \r\n\r\nFirst, **symbol keys actually _have to_ be listed separatly from their non-shift keys**. On Web, Shift-2 on a US keyboard will only provide `key: \"@\"` and you'll never know it comes from a \"2\" key unless from `code` (physical). This apparently applies to macOS too, since they have `characters` and `charactersWithoutModifiers`; I think it applies to GTK too, since they explicitly defined letter keys for both cases, as well as all symbols.\r\n\r\n(However, this is not universal either. Win32 gives you `key: 0x32` (the 2 key) in both \"2\" and \"Shift-2\" on a US keyboard. It also gives the same `key` in both cases on a French keyboard. Although, they can be told apart by the character, so we probably should derive the logical key using the character field.)\r\n\r\nSo the problem becomes: **should we combine upper letters with lower letters for logical keys?** I agree that combining them makes the logical key definition more confusing, since they're basically the only keys that \"hide Shift\". However, separating them also makes shortcuts confusing and harder: if you want to change the code that defines \"Ctrl-A\" to \"Ctrl-Shift-A\", you'll have to remember changing the `loweA` to `upperA` or it will never trigger. Or they might be triggered when CapsLock is on - but that behavior depends on platform too.\r\n\r\nAnother disadvantage for separating the letter keys is that `logicalKey` probably becomes identical to `character`. We can, however, in turn makes it a `characterWithoutModifiers`, which is likely only available on Windows, macOS and iOS.\r\n\r\nThe third disadvantage for separating the letter keys is a slight breakage: currently we only have `keyA`. If we separate letter keys, they'll probably have to be renamed to `lowerA` and `upperA` (although we can keep both until later).",
        "createdAt" : "2021-07-02T13:09:27Z",
        "updatedAt" : "2021-07-02T13:54:08Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "19ae7fb1-ea7b-454b-9aa3-6dd24650ab22",
        "parentId" : "41cd2238-19a8-4e92-aca6-0d03be871cb9",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Through local discussion we've decided to move forward with this change. It'll be implemented in a separate PR.",
        "createdAt" : "2021-07-13T20:11:07Z",
        "updatedAt" : "2021-07-13T20:11:07Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "e021747729e5c91bf50229467176227a3a49f486",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +70,74 @@  characters when pressed (this includes dead keys, but not e.g. function keys\n  or shift keys). The value is defined as the Unicode code point corresponding\n  to the character, lower case and without modifier keys if possible.\n  Examples are Key A (0x61), Digit 1 (0x31), Colon (0x3A), and Key Ù (0xD9).\n  (The \"Colon\" key represents a keyboard key that prints the \":\""
  },
  {
    "id" : "137c5488-d4a4-4e5e-bdb1-ce70af66afc0",
    "prId" : 85121,
    "prUrl" : "https://github.com/flutter/flutter/pull/85121#pullrequestreview-705601204",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e99d484-7e48-4390-bd8b-730afcde4a80",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Can you explain where `None` is used?",
        "createdAt" : "2021-07-01T21:32:50Z",
        "updatedAt" : "2021-07-01T22:05:20Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "90dace25-8a4c-4cfc-a45b-aeac2c593244",
        "parentId" : "1e99d484-7e48-4390-bd8b-730afcde4a80",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Honestly, I don't know. I kept it for 2 reasons:\r\n- It was there (because `dom_code_data` contained it as a scancode).\r\n- It is a special value, 0 (which is also why I kept it in the 0x000 plane.)\r\n\r\nDo you think I should remove it?\r\n\r\nIf we are to remove this, we might also want to remove the physical `None` key, since it should not be used anywhere either.",
        "createdAt" : "2021-07-01T23:06:13Z",
        "updatedAt" : "2021-07-01T23:07:12Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "a05f85c4-f843-41d4-bb55-c4f61e200a3b",
        "parentId" : "1e99d484-7e48-4390-bd8b-730afcde4a80",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Removed `None` from both logical and physical.",
        "createdAt" : "2021-07-13T20:10:23Z",
        "updatedAt" : "2021-07-13T20:10:23Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "e021747729e5c91bf50229467176227a3a49f486",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +75,79 @@  character without modifiers, which can be found on the French layout.  On the\n  US layout, the key that prints \":\" is the Semicolon key.)\n  This plane also contains key None (0x0).\n\n- **Plane 0x01**: The unprintable plane. This plane contains keys that are defined"
  },
  {
    "id" : "29aeb2e8-bb10-49a9-9623-5e05d7a34c63",
    "prId" : 85121,
    "prUrl" : "https://github.com/flutter/flutter/pull/85121#pullrequestreview-697714101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e617d3f9-09b7-4dbf-ac66-87d2d29da367",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "(nit: I'm channelling Ian here: he hates extra spaces after periods. :-))\r\n```suggestion\r\n0x1 FFFF FFFF. Each plane manages how the values within the range are assigned.\r\n```",
        "createdAt" : "2021-07-01T21:36:15Z",
        "updatedAt" : "2021-07-01T22:05:20Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "e0ea4a57-0dd9-4a84-83f1-945ed459dc11",
        "parentId" : "e617d3f9-09b7-4dbf-ac66-87d2d29da367",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Makes sense. I'm screwed by my VSCode plugin.",
        "createdAt" : "2021-07-01T23:08:00Z",
        "updatedAt" : "2021-07-01T23:11:11Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "e021747729e5c91bf50229467176227a3a49f486",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +63,67 @@ID represent the plane ID, while the lower 32 bits represent values in the\nplane.  For example, plane 0x1 refers to the range 0x1 0000 0000 -\n0x1 FFFF FFFF.  Each plane manages how the values within the range are assigned.\n\nThe planes are planned as follows:"
  }
]