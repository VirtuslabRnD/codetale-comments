[
  {
    "id" : "8d0ccccd-dece-439a-b62c-45e2c589a27d",
    "prId" : 49460,
    "prUrl" : "https://github.com/flutter/flutter/pull/49460#pullrequestreview-350526242",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f896717-2abc-40b7-b8a3-10ad60163638",
        "parentId" : null,
        "authorId" : "33d4efee-c6a1-4637-abbd-c961729e041d",
        "body" : "suggestion: this file also seems very long. may be we can keep the recorder and carry Profile and FrameMetrics to another common or util class",
        "createdAt" : "2020-01-29T23:13:24Z",
        "updatedAt" : "2020-01-30T17:33:46Z",
        "lastEditedBy" : "33d4efee-c6a1-4637-abbd-c961729e041d",
        "tags" : [
        ]
      },
      {
        "id" : "db996a1a-a9f3-47e7-b44f-35af698bb17a",
        "parentId" : "2f896717-2abc-40b7-b8a3-10ad60163638",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "This repository, unlike flutter/engine, does not use part files, and so one Dart file is also one library. I wouldn't break it up because these classes are closely related to the other classes in this library and are exported by one library. Otherwise, we'd need to re-export them, or have call sites import multiple libraries. Hopefully this file won't grow that much because most of the code will be in the many many benchmarks that we'll write, each of which will be quite small.\r\n\r\nI also grepped the code in this repo and found 724 files that are longer than this file, so the current line count is not at all excessive by Flutter standards.",
        "createdAt" : "2020-01-30T00:58:35Z",
        "updatedAt" : "2020-01-30T17:33:46Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6dd3f220d0fddf32f23675468d89af11a054852f",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@// Copyright 2014 The Flutter Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file."
  },
  {
    "id" : "372a4535-83a1-4a20-99ca-0ab6ab3d1411",
    "prId" : 51490,
    "prUrl" : "https://github.com/flutter/flutter/pull/51490#pullrequestreview-365283815",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c5de0f8-d64f-433c-ace7-9de83232a653",
        "parentId" : null,
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "Instead of checking for `_hasErrored` in multiple places, what if we check for it in `_shouldContinue()` and rely on existing logic to stop pumping frames?",
        "createdAt" : "2020-02-26T19:45:44Z",
        "updatedAt" : "2020-02-26T19:47:00Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "c8f67ecf-b400-403c-9c84-8babcb9c9874",
        "parentId" : "6c5de0f8-d64f-433c-ace7-9de83232a653",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "I can't think of a clean way to use it. Currently `_shouldContinue` depends on everything being healthy. For example, it extracts the profile from rendered frames. It only communicates two signals: \"continue running\" and \"benchmark finished successfully\". We'd have to add a third value communicating \"benchmark errored and must halt\". When an error happens the system could be in a corrupted state, in which case our job is to halt immediately and report the error before it's obscured by something else. IOW I think they have sufficiently different roles to warrant separate codepaths and separate signals.",
        "createdAt" : "2020-02-26T22:14:44Z",
        "updatedAt" : "2020-02-26T22:14:44Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "21a0ce373facb306ebe7c222ff1a64dc204520c7",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +591,595 @@    if (_hasErrored) {\n      return;\n    }\n    _benchmarkStopped = !_listener._shouldContinue();\n    super.handleBeginFrame(rawTimeStamp);"
  },
  {
    "id" : "ab4c0d68-89e0-4f37-a3d6-116b81cb2133",
    "prId" : 51493,
    "prUrl" : "https://github.com/flutter/flutter/pull/51493#pullrequestreview-366697744",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f19db96-7d87-40a6-86e5-3ea92ddebf2d",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "For consistency with the devicelab nomenclature let's call this \"benchmarkScoreKeys\"",
        "createdAt" : "2020-02-28T21:04:04Z",
        "updatedAt" : "2020-02-28T21:05:09Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "78e991d0-98a3-43ec-9a9e-899ef00b20c1",
        "parentId" : "8f19db96-7d87-40a6-86e5-3ea92ddebf2d",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "I have another, larger PR sitting on top of this PR (I'll send it your way soon). Would you mind if I make this change in the other PR? It's easier that way.",
        "createdAt" : "2020-02-28T21:21:59Z",
        "updatedAt" : "2020-02-28T21:21:59Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "44e8dfa7-00e6-47cc-8c30-cf2e75fec206",
        "parentId" : "8f19db96-7d87-40a6-86e5-3ea92ddebf2d",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "SGTM",
        "createdAt" : "2020-02-28T21:31:36Z",
        "updatedAt" : "2020-02-28T21:31:37Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a3061764acc71fa78790b22133f31a5b5e86781",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +421,425 @@    return <String, dynamic>{\n      'name': name,\n      'scoreKeys': <String>['averageDrawFrameDuration'],\n      'averageDrawFrameDuration': averageDrawFrameDuration.inMicroseconds,\n      'drawFrameDurationNoise': drawFrameDurationNoise,"
  },
  {
    "id" : "ecb5e7fc-d0c3-4a36-ac00-b9956c7442bd",
    "prId" : 51663,
    "prUrl" : "https://github.com/flutter/flutter/pull/51663#pullrequestreview-371513047",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3b18dbd-c2ab-4975-b8bf-6f5554bec8ab",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Since the profile is now a field on the recorder itself, can we make it a `Future<void>` and only use it as a signal? Otherwise we have multiple sources of the same object.",
        "createdAt" : "2020-03-09T20:00:33Z",
        "updatedAt" : "2020-03-10T20:01:26Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "9f2e7dcc-262a-4302-96df-dbbc69008a8f",
        "parentId" : "d3b18dbd-c2ab-4975-b8bf-6f5554bec8ab",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "What do you mean by \"use it as a signal\"?\r\n\r\nI thought about that too, but decided not to do it because:\r\n1. `profile` isn't a field in all recorders (see `RawRecorder`). It happens to be a field here because it is needed in various lifecycle method.\r\n2. My understanding from the current design is that it's fair game to call `run` multiple times on the same recorder instance, in which case, it makes more sense to return `Future<Profile>` from `run()`.",
        "createdAt" : "2020-03-09T20:40:30Z",
        "updatedAt" : "2020-03-10T20:01:26Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "9caab89265673d5596c8f24ef7cb67a3c71e6b59",
    "line" : 205,
    "diffHunk" : "@@ -1,1 +299,303 @@    _profileCompleter.future.whenComplete(() {\n      profile = null;\n    });\n    return _profileCompleter.future;\n  }"
  },
  {
    "id" : "53375076-ec34-493e-87e7-40b4f88db0ea",
    "prId" : 51663,
    "prUrl" : "https://github.com/flutter/flutter/pull/51663#pullrequestreview-371480515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20edd46a-917f-476e-91da-5d6928dc3203",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "ditto: just the field and not `Future<Profile>`",
        "createdAt" : "2020-03-09T20:01:28Z",
        "updatedAt" : "2020-03-10T20:01:26Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "9caab89265673d5596c8f24ef7cb67a3c71e6b59",
    "line" : 254,
    "diffHunk" : "@@ -1,1 +372,376 @@  @override\n  Future<Profile> run() {\n    profile = Profile(name: name);\n    final _RecordingWidgetsBinding binding =\n        _RecordingWidgetsBinding.ensureInitialized();"
  },
  {
    "id" : "3d759388-7d7f-4729-b986-b099e487ecc7",
    "prId" : 51663,
    "prUrl" : "https://github.com/flutter/flutter/pull/51663#pullrequestreview-371480515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df6400cc-c0b1-42a8-9189-e860072ab79b",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Technically we could build specialized displays for this data. It just won't appear in the standard score cards on the performance dashboard.",
        "createdAt" : "2020-03-09T20:09:09Z",
        "updatedAt" : "2020-03-10T20:01:26Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "9caab89265673d5596c8f24ef7cb67a3c71e6b59",
    "line" : 408,
    "diffHunk" : "@@ -1,1 +460,464 @@  final Map<String, Timeseries> scoreData = <String, Timeseries>{};\n\n  /// This data isn't displayed anywhere. It's stored for completeness purposes.\n  final Map<String, dynamic> extraData = <String, dynamic>{};\n"
  },
  {
    "id" : "881b8e49-8162-4ab5-9c4c-e5253bfea1cf",
    "prId" : 51663,
    "prUrl" : "https://github.com/flutter/flutter/pull/51663#pullrequestreview-371480515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1b181b3-c638-486f-881a-bb1c79340212",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "It would be misleading to print this message here because we may not be stopping yet. Other timeseries may still report `true`, in which case we'll print this but continue running the benchmark. Perhaps we should accumulate this info in a buffer and only print it after we determined that the benchmark should stop?",
        "createdAt" : "2020-03-09T20:18:06Z",
        "updatedAt" : "2020-03-10T20:01:26Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "9caab89265673d5596c8f24ef7cb67a3c71e6b59",
    "line" : 493,
    "diffHunk" : "@@ -1,1 +511,515 @@            'maximum number of samples $_kMaxSampleCount. Noise level is '\n            '${_ratioToPercent(timeseries.noise)}.',\n          );\n          return false;\n        } else {"
  },
  {
    "id" : "d4958950-95d5-4232-a178-d70e579efe02",
    "prId" : 51663,
    "prUrl" : "https://github.com/flutter/flutter/pull/51663#pullrequestreview-371480515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e28e403-9f2d-4b31-952b-358a357048aa",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "ditto",
        "createdAt" : "2020-03-09T20:19:44Z",
        "updatedAt" : "2020-03-10T20:01:26Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "9caab89265673d5596c8f24ef7cb67a3c71e6b59",
    "line" : 503,
    "diffHunk" : "@@ -1,1 +521,525 @@        'SUCCESS: Benchmark converged below ${_ratioToPercent(_kNoiseThreshold)}. '\n        'Noise level is ${_ratioToPercent(timeseries.noise)}.',\n      );\n      return false;\n    });"
  },
  {
    "id" : "b175ca57-8a87-4176-8934-79537b8cdf93",
    "prId" : 53295,
    "prUrl" : "https://github.com/flutter/flutter/pull/53295#pullrequestreview-382207673",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7751bc5c-1a42-4814-bdf3-70f49a72d8b3",
        "parentId" : null,
        "authorId" : "6f375fe5-c051-4de5-a3bf-80579a781e7f",
        "body" : "not needed if you don't use.",
        "createdAt" : "2020-03-25T20:49:51Z",
        "updatedAt" : "2020-03-27T17:26:51Z",
        "lastEditedBy" : "6f375fe5-c051-4de5-a3bf-80579a781e7f",
        "tags" : [
        ]
      },
      {
        "id" : "53b006a4-2e6e-4edc-8668-690a85e91521",
        "parentId" : "7751bc5c-1a42-4814-bdf3-70f49a72d8b3",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "it is being overriden in `bench_text_layout.dart`.",
        "createdAt" : "2020-03-26T16:51:32Z",
        "updatedAt" : "2020-03-27T17:26:51Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "431edbcfb719002e1af85e0015147887685a529c",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +328,332 @@  /// This is useful for doing one-time setup work that's needed for the\n  /// benchmark.\n  void setUpAll() {}\n\n  /// Called once after all runs of this benchmark recorder."
  },
  {
    "id" : "54dc33e1-3caf-4179-aa41-f577a9beb020",
    "prId" : 53879,
    "prUrl" : "https://github.com/flutter/flutter/pull/53879#pullrequestreview-387577895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "242425b7-12ba-4e70-8518-eb29c08bfd7c",
        "parentId" : null,
        "authorId" : "6f375fe5-c051-4de5-a3bf-80579a781e7f",
        "body" : "Pls add comment about average",
        "createdAt" : "2020-04-02T23:42:45Z",
        "updatedAt" : "2020-04-03T20:59:58Z",
        "lastEditedBy" : "6f375fe5-c051-4de5-a3bf-80579a781e7f",
        "tags" : [
        ]
      },
      {
        "id" : "191646af-d84a-4f0b-81e5-2c5ad327114a",
        "parentId" : "242425b7-12ba-4e70-8518-eb29c08bfd7c",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Changed this entirely based on offline conversation. I am now enforcing positive metric numbers. Values that are too small or negative likely indicate that the benchmark has a bug or not doing enough work.",
        "createdAt" : "2020-04-03T16:38:09Z",
        "updatedAt" : "2020-04-03T21:00:01Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "826339d7-cc2c-43cb-828c-264b2cf08c64",
        "parentId" : "242425b7-12ba-4e70-8518-eb29c08bfd7c",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Follow-up: only enforcing non-negative numbers. We have actual use-case for zero values (e.g. `Window.render`, which in the HTML backend performs almost no work at all).",
        "createdAt" : "2020-04-03T21:01:25Z",
        "updatedAt" : "2020-04-03T21:01:25Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f93d35b389bec98a7c33499a22ce6f824c6ec6a3",
    "line" : 270,
    "diffHunk" : "@@ -1,1 +515,519 @@  ///\n  /// If [average] is zero, treats the result as perfect score, returns zero.\n  double get noise => average > 0.0 ? standardDeviation / average : 0.0;\n\n  /// Adds a value to this timeseries."
  },
  {
    "id" : "ddd60c8a-ff39-4bce-9ca1-725fd047ef8a",
    "prId" : 54883,
    "prUrl" : "https://github.com/flutter/flutter/pull/54883#pullrequestreview-394876454",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf1918a4-05b1-4eef-9718-915219f75b6e",
        "parentId" : null,
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "Do we not care about the other side of outliers? That is outliers that are way below average (i.e. below `dirtyAverage - dirtyStandardDeviation`).",
        "createdAt" : "2020-04-16T16:35:26Z",
        "updatedAt" : "2020-04-16T18:12:51Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "b6d6e184-4bc5-4607-9b6c-767fc788ba28",
        "parentId" : "bf1918a4-05b1-4eef-9718-915219f75b6e",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "One fundamental property of our benchmarks is that the metrics are always \"lower is better\". The assumption is that unless there's a severe bug in the benchmark, even the lowest value will contain all the work we're interested in measuring.\r\n\r\nConversely, outliers tend to happen due to inefficiencies that happen at unpredictable points in time, such as GC pauses, canvas reallocations, etc. This is still work we should measure as it is a strong indicator of app performance. A lot of these things cannot be fixed as they are part of the trade-offs we decided to make. One example is where we try to reuse the same canvas, but eventually that canvas won't be sufficient and we'll reallocate, paying a lot of one-time cost, then try to amortize that cost over the next N frames. This change is not removing the data contributed by the outliers, but only puts it in a separate category.",
        "createdAt" : "2020-04-16T18:00:57Z",
        "updatedAt" : "2020-04-16T18:12:51Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "fb8207a9-256c-4f3f-afae-66e01e7ca674",
        "parentId" : "bf1918a4-05b1-4eef-9718-915219f75b6e",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Having said that, you just reminded me that I didn't include the outlier average in the score keys. Fixed.",
        "createdAt" : "2020-04-16T18:03:48Z",
        "updatedAt" : "2020-04-16T18:12:51Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ed0989e5a2fa67e479eb6396c829855a4c23053",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +520,524 @@\n    // Any value that's higher than this is considered an outlier.\n    final double outlierCutOff = dirtyAverage + dirtyStandardDeviation;\n\n    // Candidates with outliers removed."
  },
  {
    "id" : "8b780800-2832-4b60-b41b-ea7c836a1e2d",
    "prId" : 54883,
    "prUrl" : "https://github.com/flutter/flutter/pull/54883#pullrequestreview-394882828",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4c1be79-2eac-4b45-8968-6068e20ba16d",
        "parentId" : null,
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "Just wanted to remind you that this won't be visible in the dashboard because you didn't add `$key.outlierAverage` to the `scoreKeys` list. Is that intended?",
        "createdAt" : "2020-04-16T18:07:53Z",
        "updatedAt" : "2020-04-16T18:12:51Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "3f3624ad-f1da-454d-8c18-88e9b8cea047",
        "parentId" : "c4c1be79-2eac-4b45-8968-6068e20ba16d",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Oops! Done.",
        "createdAt" : "2020-04-16T18:12:43Z",
        "updatedAt" : "2020-04-16T18:12:51Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ed0989e5a2fa67e479eb6396c829855a4c23053",
    "line" : 340,
    "diffHunk" : "@@ -1,1 +730,734 @@      final TimeseriesStats stats = timeseries.computeStats();\n      json['$key.average'] = stats.average;\n      json['$key.outlierAverage'] = stats.outlierAverage;\n      json['$key.noise'] = stats.noise;\n    }"
  },
  {
    "id" : "9c9de1e1-477d-49f1-9b8b-24e85665b1c8",
    "prId" : 55126,
    "prUrl" : "https://github.com/flutter/flutter/pull/55126#pullrequestreview-396875691",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b875e99-1a66-4451-9ad5-943d9e193a1f",
        "parentId" : null,
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "I'm not sure how the outlier average will be interpreted in the dashboard. Generally, in the dashboard, the lower the better. So I think the perfect case should be set to zero. Open to talk about it.",
        "createdAt" : "2020-04-20T17:14:28Z",
        "updatedAt" : "2020-04-20T23:12:51Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "1e46e137-356c-49a4-a8e7-4aa6239da33d",
        "parentId" : "7b875e99-1a66-4451-9ad5-943d9e193a1f",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "We might be talking about two different perfections. One is \"a perfect Web engine is so fast that it spends zero amount of time to compute everything\". The other is \"a perfect benchmark has no outliers\" (even if the engine is not perfect and does require time compute stuff). This one's about the latter, not the former. When there are no outliers, it means the benchmark is not noisy, and therefore there's no difference between the two averages.",
        "createdAt" : "2020-04-20T18:54:19Z",
        "updatedAt" : "2020-04-20T23:12:51Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "30db8235-a04e-450a-b209-66641e239c6e",
        "parentId" : "7b875e99-1a66-4451-9ad5-943d9e193a1f",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "Agreed that the two perfections are different.\r\n\r\nSo how am I supposed to look at the outliers card in the benchmarks dashboard? It doesn't mean anything when it's alone. It has to be seen alongside the clean average card. This makes me think, maybe reporting the outlier average wasn't the right choice. What if we report the difference between outlier average and clean average? That way I can look at the outlier card alone and make sense of it (the higher it is, the further the outliers are from the clean samples) and I don't have to compare it with anything else.",
        "createdAt" : "2020-04-20T18:59:05Z",
        "updatedAt" : "2020-04-20T23:12:51Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "c7c88277-a2d0-48bf-93f8-c2c2b664d002",
        "parentId" : "7b875e99-1a66-4451-9ad5-943d9e193a1f",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "Discussed offline and decided a good metric would be the ratio `outlierAverage:cleanAverage`. But that can be done as a separate PR, so this comment is non-blocking.",
        "createdAt" : "2020-04-20T22:22:53Z",
        "updatedAt" : "2020-04-20T23:12:51Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "5e59b0b9-4fdb-4a59-82c3-745183311b05",
        "parentId" : "7b875e99-1a66-4451-9ad5-943d9e193a1f",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Done: https://github.com/flutter/flutter/pull/55126/commits/19c691bc3171a2d12f271836de104cf2ef204466",
        "createdAt" : "2020-04-20T23:14:32Z",
        "updatedAt" : "2020-04-20T23:14:32Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "19c691bc3171a2d12f271836de104cf2ef204466",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +537,541 @@    // with no noise the difference between average and outlier average is zero,\n    // which the best possible outcome. Noise produces a positive difference\n    // between the two.\n    final double outlierAverage = outliers.isNotEmpty ? _computeAverage(name, outliers) : cleanAverage;\n"
  },
  {
    "id" : "832e3550-72a1-40bd-9556-f4a7d08f8f65",
    "prId" : 55126,
    "prUrl" : "https://github.com/flutter/flutter/pull/55126#pullrequestreview-397563223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de0e8250-1616-4eb6-ab99-02801a7cd510",
        "parentId" : null,
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "@yjbanov lol you forgot to add this key to `scoreKeys`.",
        "createdAt" : "2020-04-21T18:23:21Z",
        "updatedAt" : "2020-04-21T18:23:21Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "19c691bc3171a2d12f271836de104cf2ef204466",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +747,751 @@      json['$key.average'] = stats.average;\n      json['$key.outlierAverage'] = stats.outlierAverage;\n      json['$key.outlierRatio'] = stats.outlierRatio;\n      json['$key.noise'] = stats.noise;\n    }"
  }
]