[
  {
    "id" : "c44ffc3b-a071-4fac-a536-3a2adc6805dd",
    "prId" : 82762,
    "prUrl" : "https://github.com/flutter/flutter/pull/82762#pullrequestreview-661570903",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7140ed6f-e8ee-4f04-b4f8-84290bf467dc",
        "parentId" : null,
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "Why was this not caught by the unawaited Futures lint?",
        "createdAt" : "2021-05-17T23:29:21Z",
        "updatedAt" : "2021-05-17T23:29:25Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      },
      {
        "id" : "69d56df5-3b1a-43c0-9507-947222d05741",
        "parentId" : "7140ed6f-e8ee-4f04-b4f8-84290bf467dc",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "good question, haven't looked into that yet but I suspect that we're either accidentally ignoring part of the repo for lints or we're ticking a lint bug somehow",
        "createdAt" : "2021-05-17T23:31:11Z",
        "updatedAt" : "2021-05-17T23:31:12Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "ea25ec42-ed6c-4e45-8c22-596d62936607",
        "parentId" : "7140ed6f-e8ee-4f04-b4f8-84290bf467dc",
        "authorId" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "body" : "Looks like this is the cause: https://github.com/flutter/flutter/blob/94f9a2808cbefd24d7340534e0248f9187ad6ece/analysis_options.yaml#L198",
        "createdAt" : "2021-05-17T23:38:47Z",
        "updatedAt" : "2021-05-17T23:38:47Z",
        "lastEditedBy" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "tags" : [
        ]
      },
      {
        "id" : "1fb6316b-724d-4c98-a206-c870ccf9e76b",
        "parentId" : "7140ed6f-e8ee-4f04-b4f8-84290bf467dc",
        "authorId" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "body" : "Pinging @dnfield since that was his PR that disabled that warning.  In this case it would have been helpful since I was using a method I didn't author.  It was easy to assume the call was synchronous.  Is the linter warning not smart enough to catch `.then` usage?  It seems like we'd want to for someone to `await` or have a `.then()`\r\n\r\nAnother way to have avoided this is to have a linter error if you implicitly discard a return value.  I always liked languages that disallowed that.",
        "createdAt" : "2021-05-17T23:44:38Z",
        "updatedAt" : "2021-05-17T23:44:38Z",
        "lastEditedBy" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "tags" : [
        ]
      },
      {
        "id" : "a38b0134-d576-45bf-9edd-1295b122c89c",
        "parentId" : "7140ed6f-e8ee-4f04-b4f8-84290bf467dc",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "I'm in the blame but it was for cleanup/bulk moving/revert. It was determined to be WONTFIX here: https://github.com/flutter/flutter/issues/5793",
        "createdAt" : "2021-05-18T00:08:22Z",
        "updatedAt" : "2021-05-18T00:08:22Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "a3f2e5a0-dade-46f5-8472-d106f48ff9ec",
        "parentId" : "7140ed6f-e8ee-4f04-b4f8-84290bf467dc",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "We may want to have `dev` enable the lint even if we don't enable it for `packages`.",
        "createdAt" : "2021-05-18T00:10:08Z",
        "updatedAt" : "2021-05-18T00:10:08Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "55debfcd-443e-43dc-b1b6-6bc7099e3a43",
        "parentId" : "7140ed6f-e8ee-4f04-b4f8-84290bf467dc",
        "authorId" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "body" : "I was hoping that if we turned this on we could just migrate everything to `foobar().then(null)` to explicitly ignore the asynchronous operation.  `then` itself returns a future which means it doesn't eliminate the linter warning.  The linter flag forces you to `await` which isn't always the right case.  This would require people to have to manually ignore like so which isn't bad:\r\n```dart\r\n// ignore: unawaited_futures\r\nutils.eval(flutterExe, createArgs);\r\n```\r\n\r\nI think we usually frown upon people having to ignore linter errors to get acceptable behavior although it's fine with me personally.  I'll put in a feature request to the dart language to have a way to explicitly discard an asynchronous operation.",
        "createdAt" : "2021-05-18T01:49:29Z",
        "updatedAt" : "2021-05-18T01:49:29Z",
        "lastEditedBy" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "tags" : [
        ]
      },
      {
        "id" : "5a28fcfd-0158-4e99-a383-4ffcedad6a2a",
        "parentId" : "7140ed6f-e8ee-4f04-b4f8-84290bf467dc",
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "@gaaclarke See `unawaited` in the flutter_tools here https://github.com/flutter/flutter/blob/master/packages/flutter_tools/lib/src/base/common.dart#L36",
        "createdAt" : "2021-05-18T01:53:08Z",
        "updatedAt" : "2021-05-18T01:53:08Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      },
      {
        "id" : "86ed6fa5-eaab-4ce8-9473-4ef49bf74cbe",
        "parentId" : "7140ed6f-e8ee-4f04-b4f8-84290bf467dc",
        "authorId" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "body" : "We could turn it on but add an extension method to futures called `discard()` so that `foobar()` turns into `foobar().discard()`.  It probably wouldn't be much help without the auto fixer knowing about it.",
        "createdAt" : "2021-05-18T01:55:21Z",
        "updatedAt" : "2021-05-18T01:55:21Z",
        "lastEditedBy" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "tags" : [
        ]
      },
      {
        "id" : "9baa63d9-b21b-4ccb-b4d4-3c8f6c521dfd",
        "parentId" : "7140ed6f-e8ee-4f04-b4f8-84290bf467dc",
        "authorId" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "body" : "https://github.com/dart-lang/sdk/issues/46047",
        "createdAt" : "2021-05-18T02:04:04Z",
        "updatedAt" : "2021-05-18T02:04:04Z",
        "lastEditedBy" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "tags" : [
        ]
      },
      {
        "id" : "e28a6815-335d-4071-b236-991222445538",
        "parentId" : "7140ed6f-e8ee-4f04-b4f8-84290bf467dc",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "The lint doesn't make much sense in Flutter code (a lot of Flutter APIs hand back Futures that are informative but never throw and whose completion does not generally signal a change in API availability and so don't need to be awaited), which is why it's disabled. Enabling it for non-Flutter code (like we have it enabled for the tool) makes sense to me.",
        "createdAt" : "2021-05-18T02:11:06Z",
        "updatedAt" : "2021-05-18T02:11:06Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "790dbd9b-2650-4d24-91bd-150eb0b151d2",
        "parentId" : "7140ed6f-e8ee-4f04-b4f8-84290bf467dc",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "FWIW in flutter_test we have runtime verification that `await` is being called on appropriate APIs, we could do something similar if this is a specific API that's bug-prone in this way. (Look for the async guard API in flutter_test.)",
        "createdAt" : "2021-05-18T02:12:37Z",
        "updatedAt" : "2021-05-18T02:12:37Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b489743325d2f5da7688c257d63528a4057b92a7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +32,36 @@      ];\n      print('\\nExecuting: $flutterExe $createArgs $appDir');\n      await utils.eval(flutterExe, createArgs);\n\n      final List<String> options = <String>["
  }
]