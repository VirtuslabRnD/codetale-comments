[
  {
    "id" : "f8b2549f-ab7f-4cf7-b8aa-31e09022517c",
    "prId" : 12923,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/12923#pullrequestreview-11716674",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccd82b7a-7682-4911-84ad-14681ed77e61",
        "parentId" : null,
        "authorId" : "505ff022-363e-4bcc-93dc-ed992b68f8ed",
        "body" : "I don't think this overload will work -- there's nothing in the parameter signature that will allow TypeScript to choose it. Unfortunately, I think you'll have to add an `| undefined` at the end of the first signature.",
        "createdAt" : "2016-12-05T20:43:35Z",
        "updatedAt" : "2016-12-06T17:23:38Z",
        "lastEditedBy" : "505ff022-363e-4bcc-93dc-ed992b68f8ed",
        "tags" : [
        ]
      },
      {
        "id" : "90d5b9db-f18b-4004-bb76-b4e06ec9d6c6",
        "parentId" : "ccd82b7a-7682-4911-84ad-14681ed77e61",
        "authorId" : "b97ad7b9-a71a-418e-8d81-d15777ab9de6",
        "body" : "You found the little slide of hands :wink:. Again, as with the above comment this is a more general pattern I adopted for those generators, which can render to `canvas` or create an `svg` path string.\r\n\r\nI played around with it before settling on this approach as follows:\r\n* You are right that technically, the signature for the `canvas` context which returns `void` is not reached by the compiler. At least in VS Code, it still shows up as an existing overload. Also, using the generator in the way that is idiomatic for `canvas` does not create a compile time error, even though the compiler assumes the first signature implicitly, i.e. the assumed return value of `string | null` goes wasted, as it is not assigned to anything.\r\n* The first signature works with the common use case of passing the generator into a path element attribute setter, e.g. continuing the `arc` example from above:\r\n```ts\r\npArc.attr('d', svgArc); // works!\r\n````\r\n* When I started the `strictNullChecks` validation, the generators were indeed returning `string | undefined` from when I initially wrote them as one-liner signatures. The problem with `undefined` becomes that `attr(...)` does not currently allow `undefined` as a type feeding its second setter argument. I did not want to add it, so the idiomatic usage above, would not work anymore. The issue is compounded by the fact that the post-fix operator `!` does _not_ work, i.e.:\r\n```ts\r\npArc.attr('d', svgArc!); // does not compile!\r\n````\r\nThat's due to the generators dual role as both object and function.\r\n\r\nAs an FYI the reason why I used `string | null` rather that just `string` is that, the d3 code for all the affected generators actually allows for a failure to generate the svg path string using its internal rendering buffer, in which case it return `null`.",
        "createdAt" : "2016-12-06T20:12:45Z",
        "updatedAt" : "2016-12-06T20:12:45Z",
        "lastEditedBy" : "b97ad7b9-a71a-418e-8d81-d15777ab9de6",
        "tags" : [
        ]
      },
      {
        "id" : "81f8a1a5-22f8-4893-8b2d-29f088f93af8",
        "parentId" : "ccd82b7a-7682-4911-84ad-14681ed77e61",
        "authorId" : "505ff022-363e-4bcc-93dc-ed992b68f8ed",
        "body" : "To clarify: the fully-unified signature would be `string | null | undefined`, which is a mouthful.\r\n\r\nYour last example would have to be something like\r\n\r\n```typescript\r\npArc.attr('d', (...args) => svgArc.call(this, ...args)!)\r\n```\r\n\r\nIn order to filter out the `undefined` (but I think it also cuts out the `null` arm, too...).\r\n\r\nIt's a fair point. I don't know that there's really a better option, since the alternative is probably to split the types up: one interface for canvas, and the other for SVG and other selections.",
        "createdAt" : "2016-12-07T00:13:08Z",
        "updatedAt" : "2016-12-07T00:13:08Z",
        "lastEditedBy" : "505ff022-363e-4bcc-93dc-ed992b68f8ed",
        "tags" : [
        ]
      },
      {
        "id" : "9fa93405-7a74-4c3b-a77e-ec02684e15a0",
        "parentId" : "ccd82b7a-7682-4911-84ad-14681ed77e61",
        "authorId" : "b97ad7b9-a71a-418e-8d81-d15777ab9de6",
        "body" : "Yeah, the fully return type would be `string | null | undefined`. To be perfectly honest, the `null` scenario is an edge case that exists based on the code base (actual `return` statements), but I would have to dig much deeper to see, when the `buffer` for the svg path string is `undefined` so the `null` alternative actually gets returned instead.\r\n\r\nAs for your code snippet above, it would even have to be a `function` not just an arrow function, which would bind the lexically-scoped `this` and if one needed to split hairs between `null` and `undefined`, it would require handling before returning the function result. So all in all, quite a mouthful.\r\n\r\nNo matter what, it's by no means perfect. Quite some \"buyer beware\" when it comes to ensuring the path generators are not used for incorrectly set up rendering contexts. We can't make it all foolproof ðŸ˜ž ",
        "createdAt" : "2016-12-07T00:53:25Z",
        "updatedAt" : "2016-12-07T00:53:25Z",
        "lastEditedBy" : "b97ad7b9-a71a-418e-8d81-d15777ab9de6",
        "tags" : [
        ]
      }
    ],
    "commit" : "2477e238a5951578050adee562a539c91ab5e8e7",
    "line" : 659,
    "diffHunk" : "@@ -1,1 +641,645 @@     * @param data Array of data elements.\n     */\n    (data: Datum[]): void;\n\n    /**"
  },
  {
    "id" : "593bea8d-de00-4d9f-afc8-876f7dc93b82",
    "prId" : 12923,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/12923#pullrequestreview-11467254",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a8bf293-8c7e-444a-8456-5c22a5781ba5",
        "parentId" : null,
        "authorId" : "505ff022-363e-4bcc-93dc-ed992b68f8ed",
        "body" : "Same comment as above -- this overload will never be selected by the compiler.",
        "createdAt" : "2016-12-05T20:58:22Z",
        "updatedAt" : "2016-12-06T17:23:38Z",
        "lastEditedBy" : "505ff022-363e-4bcc-93dc-ed992b68f8ed",
        "tags" : [
        ]
      }
    ],
    "commit" : "2477e238a5951578050adee562a539c91ab5e8e7",
    "line" : 1032,
    "diffHunk" : "@@ -1,1 +998,1002 @@     * @param data Array of data elements.\n     */\n    (data: Datum[]): void;\n\n    /**"
  }
]