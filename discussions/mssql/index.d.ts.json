[
  {
    "id" : "004d78d4-e2f9-4404-a053-7abbdb04b087",
    "prId" : 14620,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/14620#pullrequestreview-24632484",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a51f5ca1-234e-4192-8766-ba77b7dc7fbf",
        "parentId" : null,
        "authorId" : "a560992d-0bf6-4fda-9b6d-8efcb6f39f3b",
        "body" : "Why is this interface useful?",
        "createdAt" : "2017-03-01T22:11:46Z",
        "updatedAt" : "2017-03-01T22:11:46Z",
        "lastEditedBy" : "a560992d-0bf6-4fda-9b6d-8efcb6f39f3b",
        "tags" : [
        ]
      },
      {
        "id" : "ed8621c3-b4ec-4f47-8c55-85b845d85e35",
        "parentId" : "a51f5ca1-234e-4192-8766-ba77b7dc7fbf",
        "authorId" : "ddf7da27-8f1d-4024-8706-38cff68dc8cf",
        "body" : "Good point. It is only useful for clarifying the concept: `ISqlTypeWith*` extends `ISqlType`. Similarly, `ISqlTypeFactoryWith*` extends `ISqlTypeFactory`.\r\n\r\n`ISqlType` and `ISqlTypeFactory` are conceptually \"abstract interfaces\".\r\n\r\nThe alternatives were either to make `ISqlType` a union type of all the `ISqlType*` (which I find ugly), or redefine them all as classes, making SqlType and SqlTypeFactory abstract classes.\r\n\r\nMy main focus with this change was to get the correct return types for the various methods.\r\nIf desired, I would happily do a general cleanup later, making (abstract) classes, test, etc.\r\n",
        "createdAt" : "2017-03-02T01:09:03Z",
        "updatedAt" : "2017-03-02T01:09:03Z",
        "lastEditedBy" : "ddf7da27-8f1d-4024-8706-38cff68dc8cf",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6f1f7a04d386999b72b3e4e80267846d1eae79a",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +17,21 @@export interface ISqlTypeWithTvpType extends ISqlType { type: ISqlTypeFactoryWithTvpType; tvpType: any }\n\nexport interface ISqlTypeFactory {\n}\nexport interface ISqlTypeFactoryWithNoParams extends ISqlTypeFactory { (): ISqlTypeWithNoParams; }"
  }
]