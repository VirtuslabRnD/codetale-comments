[
  {
    "id" : "c796971d-6b27-4729-be88-4a017404674d",
    "prId" : 2483,
    "prUrl" : "https://github.com/root-project/root/pull/2483#pullrequestreview-148623691",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba4328b7-d4e5-4b6e-add5-0660ed32b1eb",
        "parentId" : null,
        "authorId" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "body" : "Shouldn't this be Error? Hash will just collide when it's release",
        "createdAt" : "2018-08-21T08:42:26Z",
        "updatedAt" : "2018-08-24T20:34:10Z",
        "lastEditedBy" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "tags" : [
        ]
      },
      {
        "id" : "02104e3b-7195-43b8-b29e-97c6d42ae768",
        "parentId" : "ba4328b7-d4e5-4b6e-add5-0660ed32b1eb",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "See the if-stmt on the next line.",
        "createdAt" : "2018-08-21T12:19:08Z",
        "updatedAt" : "2018-08-24T20:34:10Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "beddb951-1958-4d75-8443-42289fd4d2b4",
        "parentId" : "ba4328b7-d4e5-4b6e-add5-0660ed32b1eb",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Consider adding the following comment here or a few lines above.\r\n```\r\nDiscussion on this code implicit handling of unloading.\r\n\r\nThe relationship is as follows: FileID is a source manager concept wrapping a FileEntry and ContentCache.\r\nThe unloading records the list of FileIDs it needs to unload. Then it access their ContentCache and sets it to 0 (still have not figured out how to check that).\r\nThe FileID is valid and if the hash lookup finds it, it will rejected because the comparison of its contents (which is now just 0) with the 'code' will indicate a difference.\r\n\r\nAt the moment we have not yet produced an example that triggers the 2 asserts (on ```Invalid``` and on ```CacheIsValid```), for example the following:\r\n\r\n```\r\ncat T.C \r\nstruct S {};\r\n\r\nroot -l -b\r\nroot [0] #undef TRY\r\nroot [1] .I /home/vagrant/workspace/root/src/interpreter/cling/include/\r\nroot [2] .I /home/vagrant/workspace/root/src/interpreter/llvm/src/include/\r\nroot [3] .I /home/vagrant/workspace/root/src/interpreter/llvm/src/tools/clang/include\r\nroot [4] .I /usr/lib/llvm-5.0/include\r\nroot [5] #include \"cling/Interpreter/Interpreter.h\"\r\nroot [6] #include \"cling/Interpreter/LookupHelper.h\"\r\nroot [7] cling::runtime::gCling->getLookupHelper().findType(\"S\", cling::LookupHelper::NoDiagnostics).isNull()\r\n(bool) true\r\nroot [8] #include \"T.C\"\r\nroot [9] cling::runtime::gCling->getLookupHelper().findType(\"S\", cling::LookupHelper::NoDiagnostics).isNull()\r\n(bool) false\r\nroot [10] .undo 2\r\nroot [11] cling::runtime::gCling->getLookupHelper().findType(\"S\", cling::LookupHelper::NoDiagnostics).isNull()\r\n(bool) true\r\nroot [12] .q\r\n```\r\ndid not trigger the asserts.\r\n\r\nAs a side, for the case of real files, loading, unloading and reloading the same (modified) will result in 2 distinct FID. \r\n```\r\n",
        "createdAt" : "2018-08-22T18:55:32Z",
        "updatedAt" : "2018-08-24T20:34:10Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "b51de9c9f1d09d036cf15884a94b19f29a4f1d18",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +117,121 @@      // making it easier to debug.\n      CacheIsValid = FIDContents.equals(llvm::StringRef(code.str() + \"\\n\"));\n      assert(CacheIsValid && \"Hash collision!\");\n      if (CacheIsValid) {\n        // We have already included this file once. Reuse the include loc."
  }
]