[
  {
    "id" : "f6735c60-1d16-46c1-b66b-345d3bed8bba",
    "prId" : 1265,
    "prUrl" : "https://github.com/root-project/root/pull/1265#pullrequestreview-73605336",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a554440-6362-4713-884e-4fb8f44ba759",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Can that be an else to the `if (cxxmodules)` case?",
        "createdAt" : "2017-11-01T19:31:42Z",
        "updatedAt" : "2017-11-01T21:13:07Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "9908deda-238f-44a0-abb7-464b2dcbc4f6",
        "parentId" : "4a554440-6362-4713-884e-4fb8f44ba759",
        "authorId" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "body" : "Well, the whole point is (as described in the comment) to have it before/after the `Initialize` call which overwrites the PCH in the non-module case.",
        "createdAt" : "2017-11-01T20:11:14Z",
        "updatedAt" : "2017-11-01T21:13:07Z",
        "lastEditedBy" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "tags" : [
        ]
      },
      {
        "id" : "ff98e618-ea0d-4c62-bc9a-115c9f3dc39e",
        "parentId" : "4a554440-6362-4713-884e-4fb8f44ba759",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Ah, that's right. Let's see if the bots are green and I will merge it in.",
        "createdAt" : "2017-11-01T20:19:56Z",
        "updatedAt" : "2017-11-01T21:13:07Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "83da0e542b563c967c8f80b80dd128608afd12f6",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +272,276 @@    // our callbacks without fearing that they get ovewritten by clang code.\n    // The modules setup is handled above.\n    if (!usingCxxModules) {\n      setupCallbacks(*this, parentInterp);\n    }"
  },
  {
    "id" : "a26b751d-fbe7-4766-babb-1ec6a15b78fe",
    "prId" : 6606,
    "prUrl" : "https://github.com/root-project/root/pull/6606#pullrequestreview-574032635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b75851cf-5d05-4161-b91d-ead34d754164",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "...forward to `const_cast<const Interpreter*>(this)->getDynamicLibraryManager()` here. I.e. better to add than remove const.",
        "createdAt" : "2020-10-28T09:08:46Z",
        "updatedAt" : "2021-04-10T06:33:24Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "9ff89832-0969-40c8-9361-7c112abaf2b2",
        "parentId" : "b75851cf-5d05-4161-b91d-ead34d754164",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Looks like the pattern in the llvm is the inverse. I'd keep this as is.",
        "createdAt" : "2021-01-05T10:14:57Z",
        "updatedAt" : "2021-04-10T06:33:24Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "6f927f62-e67e-44a5-bcf9-68c75400c488",
        "parentId" : "b75851cf-5d05-4161-b91d-ead34d754164",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Rationale of my suggestion: it's safer to add than to remove `const`. And I see plenty of examples adding `const` in llvm, see e.g. `DenseMap.h` so I wouldn't call it a pattern in llvm?\r\n```\r\n  BucketT *getInlineBuckets() {\r\n    return const_cast<BucketT *>(\r\n      const_cast<const SmallDenseMap *>(this)->getInlineBuckets());\r\n  }\r\n```",
        "createdAt" : "2021-01-22T07:49:14Z",
        "updatedAt" : "2021-04-10T06:33:24Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "f767d68d-6fae-48d1-b4a6-2ffe715b1cb1",
        "parentId" : "b75851cf-5d05-4161-b91d-ead34d754164",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Fair enough.",
        "createdAt" : "2021-01-22T08:15:07Z",
        "updatedAt" : "2021-04-10T06:33:24Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5fefd835f2384fcc32678712f41742e214718aa",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +1643,1647 @@  const DynamicLibraryManager* Interpreter::getDynamicLibraryManager() const {\n    assert(m_Executor.get() && \"We must have an executor\");\n    return &m_Executor->getDynamicLibraryManager();\n  }\n  DynamicLibraryManager* Interpreter::getDynamicLibraryManager() {"
  },
  {
    "id" : "37924302-031a-4da4-946a-4aeca9eee8ac",
    "prId" : 6606,
    "prUrl" : "https://github.com/root-project/root/pull/6606#pullrequestreview-518407797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4022038-8032-4e43-ad2c-c468f7205d39",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "`}` indent seems off by one?",
        "createdAt" : "2020-10-28T09:15:17Z",
        "updatedAt" : "2021-04-10T06:33:24Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5fefd835f2384fcc32678712f41742e214718aa",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +285,289 @@        llvm::errs() << \"Error: libcudart.so not found!\\n\" <<\n          \"Please add the cuda lib path to LD_LIBRARY_PATH or set it via -L argument.\\n\";\n       }\n    }\n"
  },
  {
    "id" : "aa62a91b-dcc7-4019-acb1-16e8b5b59a14",
    "prId" : 6606,
    "prUrl" : "https://github.com/root-project/root/pull/6606#pullrequestreview-632935644",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbd20d0a-fdc2-466b-bbc3-00276149b2e7",
        "parentId" : null,
        "authorId" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "body" : "`libcudart.so`: is this code supposed to work also on Windows? (just wondering)",
        "createdAt" : "2021-04-07T07:18:53Z",
        "updatedAt" : "2021-04-10T06:33:24Z",
        "lastEditedBy" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "tags" : [
        ]
      },
      {
        "id" : "79ee9317-d532-40de-adac-d4ef7860333c",
        "parentId" : "cbd20d0a-fdc2-466b-bbc3-00276149b2e7",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Googling does not give me conclusive information... @SimeonEhrig or @ioanaif might know what to do there. ",
        "createdAt" : "2021-04-10T06:40:39Z",
        "updatedAt" : "2021-04-10T06:40:40Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "dda4dc3b-1cb5-461c-ab0f-bc2aa6482a66",
        "parentId" : "cbd20d0a-fdc2-466b-bbc3-00276149b2e7",
        "authorId" : "284066c8-7400-4d13-9dd5-d405b84b6ddb",
        "body" : "No, the code should not work under Windows. I think it have to search for the `cudart.lib` on Windows. But I don't believe, that the CUDA mode is running on windows at the moment. But I never tested it.",
        "createdAt" : "2021-04-10T16:46:26Z",
        "updatedAt" : "2021-04-10T16:46:26Z",
        "lastEditedBy" : "284066c8-7400-4d13-9dd5-d405b84b6ddb",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5fefd835f2384fcc32678712f41742e214718aa",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +281,285 @@\n    if(m_Opts.CompilerOpts.CUDAHost){\n      if (getDynamicLibraryManager()->loadLibrary(\"libcudart.so\", true) ==\n          cling::DynamicLibraryManager::LoadLibResult::kLoadLibNotFound){\n        llvm::errs() << \"Error: libcudart.so not found!\\n\" <<"
  }
]