[
  {
    "id" : "d5c67f3a-e9f4-42b6-ab78-74c5e9507df9",
    "prId" : 714,
    "prUrl" : "https://github.com/root-project/root/pull/714#pullrequestreview-47317796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4303e45-8938-4574-bcda-49f8ed14ff47",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "This should take a `unique_ptr<ASTConsumer`, as should all callers, because `CI->SetASTConsumer()` \"converts\" `customConsumer` to a `unique_ptr`.",
        "createdAt" : "2017-06-30T06:53:34Z",
        "updatedAt" : "2017-06-30T08:14:31Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "8a822ae4-7e76-49b2-88ce-dc121a20e837",
        "parentId" : "b4303e45-8938-4574-bcda-49f8ed14ff47",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "`customConsumer` should probably be called `consumer`; there's nothing custom about it?",
        "createdAt" : "2017-06-30T06:53:58Z",
        "updatedAt" : "2017-06-30T08:14:31Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "276ccb77e48e3d88aeca548875c60a248047a0cd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +698,702 @@  createCIImpl(std::unique_ptr<llvm::MemoryBuffer> Buffer,\n               const CompilerOptions& COpts, const char* LLVMDir,\n               clang::ASTConsumer* customConsumer, bool OnlyLex,\n               bool HasInput = false) {\n    // Follow clang -v convention of printing version on first line"
  },
  {
    "id" : "8556a7c8-6dda-419f-8aa6-7e9682cdc812",
    "prId" : 930,
    "prUrl" : "https://github.com/root-project/root/pull/930#pullrequestreview-60405976",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba873332-f0ca-4c60-bf46-c859d45b2929",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Shouldn't we mark these ROOT-specific PCMs by giving them a more distinctive name?",
        "createdAt" : "2017-09-04T13:06:29Z",
        "updatedAt" : "2017-09-14T08:49:08Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "f89d5f16c1f994262bcfae1a4bee02fda2f65f17",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +1071,1075 @@      llvm::SmallVector<char, 256> Output;\n      llvm::sys::path::append(Output, COpts.CachePath,\n                              COpts.ModuleName + \".pcm\");\n      StringRef ModuleOutputFile = StringRef(Output.data(), Output.size());\n"
  },
  {
    "id" : "983df1ab-14b3-4f4e-b23a-04b64cbb90e6",
    "prId" : 930,
    "prUrl" : "https://github.com/root-project/root/pull/930#pullrequestreview-61438669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "440b4868-7658-462c-aa16-86cf8011d0b3",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Would the use of `WriteAST()` simplify things?",
        "createdAt" : "2017-09-04T13:07:22Z",
        "updatedAt" : "2017-09-14T08:49:08Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "d71599b2-5f03-47dd-92d7-d0daebeca846",
        "parentId" : "440b4868-7658-462c-aa16-86cf8011d0b3",
        "authorId" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "body" : "I think you were on vacation when the discussion about this happened, but to sum it up: Modules can't just be written via WriteAST(). They need a listener that we attach here that keeps track on things like what other module we load and in what order. This code wraps the WriteAST, the creation/attaching of the listener, etc. in the way with the least amount of copy pasted code from clang.\r\n\r\nIn the future we can either drop this code once I get rootcling into a form where we can reuse the whole GenerateModuleAction from clang or we make it public that we can easily reuse it. But first I want to see how far the rootcling refactor idea allows us to go :)",
        "createdAt" : "2017-09-08T08:15:43Z",
        "updatedAt" : "2017-09-14T08:49:08Z",
        "lastEditedBy" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f89d5f16c1f994262bcfae1a4bee02fda2f65f17",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +1068,1072 @@    // generation of the PCM file itself.\n    if (COpts.CxxModules) {\n      // Code below from the (private) code in the GenerateModuleAction class.\n      llvm::SmallVector<char, 256> Output;\n      llvm::sys::path::append(Output, COpts.CachePath,"
  },
  {
    "id" : "6dae1d0a-7ebb-4011-bd4f-3a6057a0ef9e",
    "prId" : 930,
    "prUrl" : "https://github.com/root-project/root/pull/930#pullrequestreview-61743103",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "affd2a65-4066-4921-ac06-30bfcacf2bcc",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "That leading `+` is ... weird.",
        "createdAt" : "2017-09-04T13:08:08Z",
        "updatedAt" : "2017-09-14T08:49:08Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "fa0761ab-e786-4290-ac6a-994f4f0034a6",
        "parentId" : "affd2a65-4066-4921-ac06-30bfcacf2bcc",
        "authorId" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "body" : "Yeah, that's the way it's in the original source code, I'll drop it and also remove it upstream.",
        "createdAt" : "2017-09-08T07:20:55Z",
        "updatedAt" : "2017-09-14T08:49:08Z",
        "lastEditedBy" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "tags" : [
        ]
      },
      {
        "id" : "e483c17a-db86-4316-9777-3e872ef53449",
        "parentId" : "affd2a65-4066-4921-ac06-30bfcacf2bcc",
        "authorId" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "body" : "Actually, this seems to had a purpose. Back to this way.",
        "createdAt" : "2017-09-08T07:29:28Z",
        "updatedAt" : "2017-09-14T08:49:08Z",
        "lastEditedBy" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "tags" : [
        ]
      },
      {
        "id" : "312fad47-a883-4ceb-9f13-1aa731682d2c",
        "parentId" : "affd2a65-4066-4921-ac06-30bfcacf2bcc",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "I wanted to ask Richard about the semantics of this but forgot...",
        "createdAt" : "2017-09-11T08:13:36Z",
        "updatedAt" : "2017-09-14T08:49:08Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "f89d5f16c1f994262bcfae1a4bee02fda2f65f17",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +1090,1094 @@          /*AllowASTWithErrors=*/false,\n          /*IncludeTimestamps=*/\n          +CI->getFrontendOpts().BuildingImplicitModule));\n      Consumers.push_back(\n          CI->getPCHContainerWriter().CreatePCHContainerGenerator("
  }
]