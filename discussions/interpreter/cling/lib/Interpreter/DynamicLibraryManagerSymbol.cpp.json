[
  {
    "id" : "9d86ec88-ab7f-4349-b5fc-b6abdce03aa9",
    "prId" : 4717,
    "prUrl" : "https://github.com/root-project/root/pull/4717#pullrequestreview-405759737",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8853eea7-68a7-48f3-b897-bc5fab2eb147",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "I suppose this should be in an unnamed namespace, even if ClingDyld does not end up in an unnamed namespace. ",
        "createdAt" : "2020-05-05T14:14:12Z",
        "updatedAt" : "2020-05-06T14:48:33Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee856ff4d24ae868a567ec148be33800b1f0efe0",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +64,68 @@}\n\nstruct BloomFilter {\n\n  // https://hur.st/bloomfilter"
  },
  {
    "id" : "927865e2-25f9-47d5-b3ee-f5c8e8425535",
    "prId" : 4717,
    "prUrl" : "https://github.com/root-project/root/pull/4717#pullrequestreview-405759737",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca8c7407-6298-4989-9e72-8c051ec3a96e",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "`RegisterLib` allows for re-registration (a no-op): subsequent re-registrations have no effect. I would expect de-registration to behave symmetrically: the library should only be removed once it has been as many times unregistered as it has been registered.\r\n\r\nConsider adding a registration count per library or asserting that the library wasn't registered before, i.e. libraries must only be registered once. The latter contradicts `dlopen` behavior that support `dlopen`ing the same library multiple times, so I'd prefer the registration counts.",
        "createdAt" : "2020-05-05T14:54:17Z",
        "updatedAt" : "2020-05-06T14:48:33Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee856ff4d24ae868a567ec148be33800b1f0efe0",
    "line" : 215,
    "diffHunk" : "@@ -1,1 +213,217 @@      return;\n\n    m_Libs.erase(std::find(m_Libs.begin(), m_Libs.end(), &*found));\n    m_LibsH.erase(found);\n  }"
  },
  {
    "id" : "9ff86b10-a788-4e8d-b5e1-ceea9dcb37d2",
    "prId" : 5637,
    "prUrl" : "https://github.com/root-project/root/pull/5637#pullrequestreview-417057755",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c2aaac1-7678-4abc-ba8d-1b13b3cfc079",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Who's calling this now? Doesn't this happen in `DynamicLibraryManager()`? Can this happen as part of `DynamicLibraryManager()` - regular member initialization etc?",
        "createdAt" : "2020-05-22T16:32:45Z",
        "updatedAt" : "2020-05-22T16:35:50Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "0d9287ad-09c2-45ac-aab9-039bdd59841f",
        "parentId" : "3c2aaac1-7678-4abc-ba8d-1b13b3cfc079",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "The whole point is that to be initialized on demand. Currently, itâ€™s only user is ROOT. ",
        "createdAt" : "2020-05-22T16:57:12Z",
        "updatedAt" : "2020-05-22T16:57:12Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bea47ef7f6fc7936b9d582ed14dc3d63d5c8159",
    "line" : 1198,
    "diffHunk" : "@@ -1,1 +855,859 @@  }\n\n  void DynamicLibraryManager::initializeDyld(\n                 std::function<bool(llvm::StringRef)> shouldPermanentlyIgnore) {\n    assert(!m_Dyld && \"Already initialized!\");"
  },
  {
    "id" : "f4997edb-0e72-4762-ae15-05ccd882715a",
    "prId" : 5637,
    "prUrl" : "https://github.com/root-project/root/pull/5637#pullrequestreview-417337297",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "558b4436-6a0f-4f1f-8c8f-a83b01d9b60a",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Can this not be guaranteed by the constructor of `DynamicLibraryManager`?",
        "createdAt" : "2020-05-22T16:33:47Z",
        "updatedAt" : "2020-05-22T16:35:50Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "8d367c5d-9244-4751-adb4-9249a846fe9a",
        "parentId" : "558b4436-6a0f-4f1f-8c8f-a83b01d9b60a",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "No, we want this to be initialized on demand by users which actually need such a facility. ",
        "createdAt" : "2020-05-22T16:53:24Z",
        "updatedAt" : "2020-05-22T16:53:24Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "ab650170-3de0-4040-ba99-27087af5acd2",
        "parentId" : "558b4436-6a0f-4f1f-8c8f-a83b01d9b60a",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Can one currently instantiate a DynamicLibraryManager without instantiating a Dyld? In which cases does that happen, even for cling?",
        "createdAt" : "2020-05-23T09:53:59Z",
        "updatedAt" : "2020-05-23T09:54:00Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "27a7e8b6-0925-46b5-80df-7f4efc237e67",
        "parentId" : "558b4436-6a0f-4f1f-8c8f-a83b01d9b60a",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "That's the point yes, cling standalone currently creates an object of type DynamicLibraryManager without any Dyld complications.\r\n\r\nPS: I imagine that the Jupyter folks do not want their cling kernel to scan the underlying system, too...",
        "createdAt" : "2020-05-24T08:21:27Z",
        "updatedAt" : "2020-05-24T08:23:38Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bea47ef7f6fc7936b9d582ed14dc3d63d5c8159",
    "line" : 1221,
    "diffHunk" : "@@ -1,1 +870,874 @@  DynamicLibraryManager::searchLibrariesForSymbol(const std::string& mangledName,\n                                           bool searchSystem/* = true*/) const {\n    assert(m_Dyld && \"Must call initialize dyld before!\");\n    return m_Dyld->searchLibrariesForSymbol(mangledName, searchSystem);\n  }"
  },
  {
    "id" : "d9208d13-4a24-4110-bc72-862b38f0b7f3",
    "prId" : 6945,
    "prUrl" : "https://github.com/root-project/root/pull/6945#pullrequestreview-551090740",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9dedcab2-18e8-43e0-8b0e-662cca3199fc",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "The next line is ill-formed without definition of `m_Dyld`'s type. What does this `static_assert`add?",
        "createdAt" : "2020-12-13T20:28:53Z",
        "updatedAt" : "2020-12-13T20:29:04Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "583df7f1-40cc-4124-8edf-ae4aa844b7fb",
        "parentId" : "9dedcab2-18e8-43e0-8b0e-662cca3199fc",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "The static asserts causes a compile time error if the compiler does not know the size. Even if the next line was ill-formed, it compiled with incomplete type without even a warning. That caused the destructor for Dyld to not be called, leading to significant memory leaks. This check ensures a future refactoring to not hit this subtle issue. ",
        "createdAt" : "2020-12-13T22:44:18Z",
        "updatedAt" : "2020-12-13T22:45:24Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "3de3d212-847e-4942-bc34-b412973d18d0",
        "parentId" : "9dedcab2-18e8-43e0-8b0e-662cca3199fc",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Ill-formed means it doesn't compile. And I'm wrong: https://www.godbolt.org/z/1ovE34",
        "createdAt" : "2020-12-14T07:09:20Z",
        "updatedAt" : "2020-12-14T07:09:20Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "b8d50c8382031cacc6c37b1a27dac8f5239360ff",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +867,871 @@\n  DynamicLibraryManager::~DynamicLibraryManager() {\n    static_assert(sizeof(Dyld) > 0, \"Incomplete type\");\n    delete m_Dyld;\n  }"
  },
  {
    "id" : "6175dbe3-0f62-4b20-8545-0a23d38ddf71",
    "prId" : 6969,
    "prUrl" : "https://github.com/root-project/root/pull/6969#pullrequestreview-631325128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0d5d53a-bc22-4922-a66a-b1d427191e98",
        "parentId" : null,
        "authorId" : "b73772e3-d2b0-4973-98e0-56c892ef3e26",
        "body" : "```suggestion\n#include \"llvm/BinaryFormat/MachO.h\"\n```",
        "createdAt" : "2021-04-08T12:22:20Z",
        "updatedAt" : "2021-04-09T20:16:43Z",
        "lastEditedBy" : "b73772e3-d2b0-4973-98e0-56c892ef3e26",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca11bbe5c9b3c482ebe8f445dae0fdd772d53896",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +18,22 @@#include \"llvm/ADT/StringRef.h\"\n#include \"llvm/ADT/StringMap.h\"\n#include \"llvm/BinaryFormat/MachO.h\"\n#include \"llvm/Object/COFF.h\"\n#include \"llvm/Object/ELF.h\""
  },
  {
    "id" : "1e948281-f0b0-4d96-b620-fc7085306a06",
    "prId" : 6969,
    "prUrl" : "https://github.com/root-project/root/pull/6969#pullrequestreview-631325128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ca50dfb-0960-4e05-b63a-3961b53d8f88",
        "parentId" : null,
        "authorId" : "b73772e3-d2b0-4973-98e0-56c892ef3e26",
        "body" : "```suggestion\n#include \"llvm/Object/ELF.h\"\n```",
        "createdAt" : "2021-04-08T12:22:20Z",
        "updatedAt" : "2021-04-09T20:16:43Z",
        "lastEditedBy" : "b73772e3-d2b0-4973-98e0-56c892ef3e26",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca11bbe5c9b3c482ebe8f445dae0fdd772d53896",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +20,24 @@#include \"llvm/BinaryFormat/MachO.h\"\n#include \"llvm/Object/COFF.h\"\n#include \"llvm/Object/ELF.h\"\n#include \"llvm/Object/ELFObjectFile.h\"\n#include \"llvm/Object/MachO.h\""
  },
  {
    "id" : "2a27f3ef-7336-4087-b92e-80cf821c0e37",
    "prId" : 6969,
    "prUrl" : "https://github.com/root-project/root/pull/6969#pullrequestreview-631325128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e68e1242-5656-42b5-9841-ecb9df783d97",
        "parentId" : null,
        "authorId" : "b73772e3-d2b0-4973-98e0-56c892ef3e26",
        "body" : "```suggestion\n#include \"llvm/Object/MachO.h\"\n```",
        "createdAt" : "2021-04-08T12:22:20Z",
        "updatedAt" : "2021-04-09T20:16:43Z",
        "lastEditedBy" : "b73772e3-d2b0-4973-98e0-56c892ef3e26",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca11bbe5c9b3c482ebe8f445dae0fdd772d53896",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +22,26 @@#include \"llvm/Object/ELF.h\"\n#include \"llvm/Object/ELFObjectFile.h\"\n#include \"llvm/Object/MachO.h\"\n#include \"llvm/Object/ObjectFile.h\"\n#include \"llvm/Support/DynamicLibrary.h\""
  },
  {
    "id" : "e5a414d9-7802-4cd1-9620-052ee16ac07b",
    "prId" : 6969,
    "prUrl" : "https://github.com/root-project/root/pull/6969#pullrequestreview-631325128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5235a686-7b93-4556-9752-db39aa7801e6",
        "parentId" : null,
        "authorId" : "b73772e3-d2b0-4973-98e0-56c892ef3e26",
        "body" : "```suggestion\n#include \"llvm/Support/Error.h\"\n```",
        "createdAt" : "2021-04-08T12:22:20Z",
        "updatedAt" : "2021-04-09T20:16:43Z",
        "lastEditedBy" : "b73772e3-d2b0-4973-98e0-56c892ef3e26",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca11bbe5c9b3c482ebe8f445dae0fdd772d53896",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +25,29 @@#include \"llvm/Object/ObjectFile.h\"\n#include \"llvm/Support/DynamicLibrary.h\"\n#include \"llvm/Support/Error.h\"\n#include \"llvm/Support/Path.h\"\n#include \"llvm/Support/Program.h\""
  },
  {
    "id" : "e7265c7f-ca9b-468d-ab9c-fea56609d522",
    "prId" : 6969,
    "prUrl" : "https://github.com/root-project/root/pull/6969#pullrequestreview-631325128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc2523d3-ec60-423e-904b-7c3c74a0f9a6",
        "parentId" : null,
        "authorId" : "b73772e3-d2b0-4973-98e0-56c892ef3e26",
        "body" : "```suggestion\n#include \"llvm/Support/Path.h\"\n#include \"llvm/Support/Program.h\"\n#include \"llvm/Support/WithColor.h\"\n```",
        "createdAt" : "2021-04-08T12:22:20Z",
        "updatedAt" : "2021-04-09T20:16:43Z",
        "lastEditedBy" : "b73772e3-d2b0-4973-98e0-56c892ef3e26",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca11bbe5c9b3c482ebe8f445dae0fdd772d53896",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +29,33 @@#include \"llvm/Support/Program.h\"\n#include \"llvm/Support/Format.h\"\n#include \"llvm/Support/WithColor.h\"\n\n#include <algorithm>"
  },
  {
    "id" : "824fa795-edd0-4e0b-9450-c6cd27881b28",
    "prId" : 6969,
    "prUrl" : "https://github.com/root-project/root/pull/6969#pullrequestreview-631325128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b6f7608-1b2c-464a-b7e3-07bc7925d0d5",
        "parentId" : null,
        "authorId" : "b73772e3-d2b0-4973-98e0-56c892ef3e26",
        "body" : "```suggestion\n                                    uint32_t hash) {\n```",
        "createdAt" : "2021-04-08T12:22:21Z",
        "updatedAt" : "2021-04-09T20:16:43Z",
        "lastEditedBy" : "b73772e3-d2b0-4973-98e0-56c892ef3e26",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca11bbe5c9b3c482ebe8f445dae0fdd772d53896",
    "line" : 286,
    "diffHunk" : "@@ -1,1 +439,443 @@///\\returns true if the symbol may be in the library.\nstatic bool MayExistInElfObjectFile(llvm::object::ObjectFile *soFile,\n                                    uint32_t hash) {\n  assert(soFile->isELF() && \"Not ELF\");\n"
  },
  {
    "id" : "55867d27-af22-4fa0-9f24-619a8441b302",
    "prId" : 6969,
    "prUrl" : "https://github.com/root-project/root/pull/6969#pullrequestreview-631325128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef6cef34-17a3-4e67-911f-2f71de1f759b",
        "parentId" : null,
        "authorId" : "b73772e3-d2b0-4973-98e0-56c892ef3e26",
        "body" : "```suggestion\n  void Dyld::ScanForLibraries(bool searchSystemLibraries /* = false*/) {\n```",
        "createdAt" : "2021-04-08T12:22:22Z",
        "updatedAt" : "2021-04-09T20:16:43Z",
        "lastEditedBy" : "b73772e3-d2b0-4973-98e0-56c892ef3e26",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca11bbe5c9b3c482ebe8f445dae0fdd772d53896",
    "line" : 391,
    "diffHunk" : "@@ -1,1 +620,624 @@  }\n\n  void Dyld::ScanForLibraries(bool searchSystemLibraries/* = false*/) {\n\n    const auto &searchPaths = m_DynamicLibraryManager.getSearchPaths();"
  },
  {
    "id" : "03a40889-3970-4c99-a35c-7a156495937b",
    "prId" : 6969,
    "prUrl" : "https://github.com/root-project/root/pull/6969#pullrequestreview-652192700",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27b150ae-ddd9-48e9-b254-1c6c40e23182",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "We shouldn't be looking at non-process ABI: if this process is 64bit, only look at 64bit ELF; if it's 32 only look at 32bit ELF. Same for endianness. Or what am I missing?",
        "createdAt" : "2021-04-22T13:49:39Z",
        "updatedAt" : "2021-04-22T13:52:03Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "f47b3f63-9eca-4e31-b090-4b4a9f594625",
        "parentId" : "27b150ae-ddd9-48e9-b254-1c6c40e23182",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "We already seem to have that filtered by https://github.com/vgvassilev/cling/blob/f3768a4c43b0f3b23eccc6075fa178861a002a10/lib/Interpreter/DynamicLibraryManagerSymbol.cpp#L730-L731",
        "createdAt" : "2021-05-05T11:25:56Z",
        "updatedAt" : "2021-05-05T11:25:56Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca11bbe5c9b3c482ebe8f445dae0fdd772d53896",
    "line" : 532,
    "diffHunk" : "@@ -1,1 +739,743 @@              HandleDynTab(ELF->getELFFile(), FileName, RPath, RunPath, Deps);\n            else if (const auto* ELF = dyn_cast<ELF64BEObjectFile>(BinObjF))\n              HandleDynTab(ELF->getELFFile(), FileName, RPath, RunPath, Deps);\n\n          } else if (BinObjF->isMachO()) {"
  },
  {
    "id" : "d7022f85-c64b-47e0-b9c0-37fa81374f2a",
    "prId" : 6969,
    "prUrl" : "https://github.com/root-project/root/pull/6969#pullrequestreview-704784193",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4625860-9651-4457-a8a8-276dc4e57b5d",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "What about COFF? `DLL`s also have that info.",
        "createdAt" : "2021-05-05T15:00:56Z",
        "updatedAt" : "2021-05-05T15:00:56Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "f46db60f-cf4d-48ae-b119-18b3dfcd3649",
        "parentId" : "f4625860-9651-4457-a8a8-276dc4e57b5d",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Can you point us to where you found that information? We do not seem to have access to `rpath` & co in the `COFFObjectFile`.",
        "createdAt" : "2021-05-20T07:56:44Z",
        "updatedAt" : "2021-05-20T07:56:45Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "b0af60a8-0fd6-42d9-9298-4cf14d908b6d",
        "parentId" : "f4625860-9651-4457-a8a8-276dc4e57b5d",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "With \"that info\" I meant the library dependencies which you collect for ELF as `DT_NEEDED`. IIUC an example for COFF is [here](https://github.com/llvm/llvm-project/blob/1128311a19179ceca799ff0fbc4dd206ab56e560/llvm/tools/llvm-objdump/COFFDump.cpp#L350)",
        "createdAt" : "2021-05-20T10:20:22Z",
        "updatedAt" : "2021-05-20T10:20:22Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "9ab8d98c-33dd-4f51-8316-b7878e438204",
        "parentId" : "f4625860-9651-4457-a8a8-276dc4e57b5d",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "This pull request fixes a particular issue which in essence is a deployment technique on the unix platforms. I am hesitant adding such logic for COFF as I am not sure if that is relevant to that problem but also I am not sure what is the behavior of their dynamic linker. I'd pursue the approach from the past -- we will add the windows support if we need it in future.",
        "createdAt" : "2021-05-21T06:31:05Z",
        "updatedAt" : "2021-05-21T06:31:05Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "fe595b60-712b-4a29-a4c1-0287c2b4cd2b",
        "parentId" : "f4625860-9651-4457-a8a8-276dc4e57b5d",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "We *will* need the `DT_NEEDED` replacement for COFF to make ACLiC work when loading ACLiC libraries, without searching for libraries that can resolve unresolved symbols. I'm okay if this is addressed in a subsequent PR, but without that we cannot progress with https://github.com/root-project/root/issues/7774\r\n\r\nhttps://github.com/root-project/root/pull/8017 is intentionally excluding this case knowing that `DT_NEEDED` support would come.",
        "createdAt" : "2021-05-21T12:58:55Z",
        "updatedAt" : "2021-05-21T12:59:53Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "07e91550-b9e4-4bc0-bf81-3a2bf4bdaf3d",
        "parentId" : "f4625860-9651-4457-a8a8-276dc4e57b5d",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Let's do that, as we agreed, in another PR if required.",
        "createdAt" : "2021-07-13T06:19:08Z",
        "updatedAt" : "2021-07-13T06:19:09Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca11bbe5c9b3c482ebe8f445dae0fdd772d53896",
    "line" : 551,
    "diffHunk" : "@@ -1,1 +758,762 @@                SplitPaths(Command.Ptr + rpathCmd.path, RPath, utils::kAllowNonExistant, platform::kEnvDelim, false);\n              }\n            }\n          } else if (BinObjF->isCOFF()) {\n            // TODO: COFF support"
  }
]