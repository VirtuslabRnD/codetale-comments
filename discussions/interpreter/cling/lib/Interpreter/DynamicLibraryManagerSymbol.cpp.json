[
  {
    "id" : "9d86ec88-ab7f-4349-b5fc-b6abdce03aa9",
    "prId" : 4717,
    "prUrl" : "https://github.com/root-project/root/pull/4717#pullrequestreview-405759737",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8853eea7-68a7-48f3-b897-bc5fab2eb147",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "I suppose this should be in an unnamed namespace, even if ClingDyld does not end up in an unnamed namespace. ",
        "createdAt" : "2020-05-05T14:14:12Z",
        "updatedAt" : "2020-05-06T14:48:33Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee856ff4d24ae868a567ec148be33800b1f0efe0",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +64,68 @@}\n\nstruct BloomFilter {\n\n  // https://hur.st/bloomfilter"
  },
  {
    "id" : "927865e2-25f9-47d5-b3ee-f5c8e8425535",
    "prId" : 4717,
    "prUrl" : "https://github.com/root-project/root/pull/4717#pullrequestreview-405759737",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca8c7407-6298-4989-9e72-8c051ec3a96e",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "`RegisterLib` allows for re-registration (a no-op): subsequent re-registrations have no effect. I would expect de-registration to behave symmetrically: the library should only be removed once it has been as many times unregistered as it has been registered.\r\n\r\nConsider adding a registration count per library or asserting that the library wasn't registered before, i.e. libraries must only be registered once. The latter contradicts `dlopen` behavior that support `dlopen`ing the same library multiple times, so I'd prefer the registration counts.",
        "createdAt" : "2020-05-05T14:54:17Z",
        "updatedAt" : "2020-05-06T14:48:33Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee856ff4d24ae868a567ec148be33800b1f0efe0",
    "line" : 215,
    "diffHunk" : "@@ -1,1 +213,217 @@      return;\n\n    m_Libs.erase(std::find(m_Libs.begin(), m_Libs.end(), &*found));\n    m_LibsH.erase(found);\n  }"
  },
  {
    "id" : "9ff86b10-a788-4e8d-b5e1-ceea9dcb37d2",
    "prId" : 5637,
    "prUrl" : "https://github.com/root-project/root/pull/5637#pullrequestreview-417057755",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c2aaac1-7678-4abc-ba8d-1b13b3cfc079",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Who's calling this now? Doesn't this happen in `DynamicLibraryManager()`? Can this happen as part of `DynamicLibraryManager()` - regular member initialization etc?",
        "createdAt" : "2020-05-22T16:32:45Z",
        "updatedAt" : "2020-05-22T16:35:50Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "0d9287ad-09c2-45ac-aab9-039bdd59841f",
        "parentId" : "3c2aaac1-7678-4abc-ba8d-1b13b3cfc079",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "The whole point is that to be initialized on demand. Currently, itâ€™s only user is ROOT. ",
        "createdAt" : "2020-05-22T16:57:12Z",
        "updatedAt" : "2020-05-22T16:57:12Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bea47ef7f6fc7936b9d582ed14dc3d63d5c8159",
    "line" : 1198,
    "diffHunk" : "@@ -1,1 +855,859 @@  }\n\n  void DynamicLibraryManager::initializeDyld(\n                 std::function<bool(llvm::StringRef)> shouldPermanentlyIgnore) {\n    assert(!m_Dyld && \"Already initialized!\");"
  },
  {
    "id" : "f4997edb-0e72-4762-ae15-05ccd882715a",
    "prId" : 5637,
    "prUrl" : "https://github.com/root-project/root/pull/5637#pullrequestreview-417337297",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "558b4436-6a0f-4f1f-8c8f-a83b01d9b60a",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Can this not be guaranteed by the constructor of `DynamicLibraryManager`?",
        "createdAt" : "2020-05-22T16:33:47Z",
        "updatedAt" : "2020-05-22T16:35:50Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "8d367c5d-9244-4751-adb4-9249a846fe9a",
        "parentId" : "558b4436-6a0f-4f1f-8c8f-a83b01d9b60a",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "No, we want this to be initialized on demand by users which actually need such a facility. ",
        "createdAt" : "2020-05-22T16:53:24Z",
        "updatedAt" : "2020-05-22T16:53:24Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "ab650170-3de0-4040-ba99-27087af5acd2",
        "parentId" : "558b4436-6a0f-4f1f-8c8f-a83b01d9b60a",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Can one currently instantiate a DynamicLibraryManager without instantiating a Dyld? In which cases does that happen, even for cling?",
        "createdAt" : "2020-05-23T09:53:59Z",
        "updatedAt" : "2020-05-23T09:54:00Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "27a7e8b6-0925-46b5-80df-7f4efc237e67",
        "parentId" : "558b4436-6a0f-4f1f-8c8f-a83b01d9b60a",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "That's the point yes, cling standalone currently creates an object of type DynamicLibraryManager without any Dyld complications.\r\n\r\nPS: I imagine that the Jupyter folks do not want their cling kernel to scan the underlying system, too...",
        "createdAt" : "2020-05-24T08:21:27Z",
        "updatedAt" : "2020-05-24T08:23:38Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bea47ef7f6fc7936b9d582ed14dc3d63d5c8159",
    "line" : 1221,
    "diffHunk" : "@@ -1,1 +870,874 @@  DynamicLibraryManager::searchLibrariesForSymbol(const std::string& mangledName,\n                                           bool searchSystem/* = true*/) const {\n    assert(m_Dyld && \"Must call initialize dyld before!\");\n    return m_Dyld->searchLibrariesForSymbol(mangledName, searchSystem);\n  }"
  }
]