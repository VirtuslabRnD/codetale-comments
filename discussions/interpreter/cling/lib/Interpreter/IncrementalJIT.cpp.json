[
  {
    "id" : "aca7614f-a5fa-40b8-9d14-e9e5153e35e3",
    "prId" : 7100,
    "prUrl" : "https://github.com/root-project/root/pull/7100#pullrequestreview-577166242",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "190c9668-5e84-43de-9289-6e267710ba6d",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Looks like the orcv1 (which cling is currently based on) is frozen. Even for bugs of that kind. The [orcv2 EH support](https://github.com/llvm/llvm-project/blob/main/llvm/lib/ExecutionEngine/JITLink/EHFrameSupport.cpp) seems superior and it does not seem trivial to extend the [RuntimeDyldMachOCRTPBase<Impl>::processFDE](https://github.com/llvm/llvm-project/blob/810572cc96e99b5d6fb695f1f047c2ae6507831b/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldMachO.cpp#L275) ourselves.\r\n\r\nIf that workaround is here to stay, please add a cling-standalone test with that commit. This will help us remove it when switching to orcv2 (requires upgrading to llvm12).",
        "createdAt" : "2021-01-26T21:12:45Z",
        "updatedAt" : "2021-01-27T09:59:43Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "3b954a2c-e763-49ff-ac34-8f6ddfd5ef17",
        "parentId" : "190c9668-5e84-43de-9289-6e267710ba6d",
        "authorId" : "35f000f7-62f3-4cb3-8afc-e49e8974b5b5",
        "body" : "> Looks like the orcv1 (which cling is currently based on) is frozen. Even for bugs of that kind.\r\n\r\nOrcV1 is entirely removed in `master`: https://github.com/llvm/llvm-project/commit/6154c4115cd4b78d0171892aac21e340e72e32bd\r\n\r\n> The orcv2 EH support seems superior and it does not seem trivial to extend the RuntimeDyldMachOCRTPBase::processFDE ourselves. [...] This will help us remove it when switching to orcv2 (requires upgrading to llvm12).\r\n\r\nFWIW I don't think that using OrcV2 helps in any way: It's still relying on `RuntimeDyld` including the MachO relocation logic. And I don't see the issue with multiple text sections fixed in `master`.\r\n\r\n> If that workaround is here to stay, please add a cling-standalone test with that commit.\r\n\r\nWill do. I had already started with this yesterday, but running the tests from a build of ROOT seems very hard...",
        "createdAt" : "2021-01-27T08:02:40Z",
        "updatedAt" : "2021-01-27T09:59:43Z",
        "lastEditedBy" : "35f000f7-62f3-4cb3-8afc-e49e8974b5b5",
        "tags" : [
        ]
      },
      {
        "id" : "af2db947-2699-4604-8357-4647bfce5f14",
        "parentId" : "190c9668-5e84-43de-9289-6e267710ba6d",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "> running the tests from a build of ROOT seems very hard...\r\n\r\nI can help with that! `-Dclingtest=On` - and this patch:\r\n```diff\r\ndiff --git a/interpreter/cling/test/lit.cfg b/interpreter/cling/test/lit.cfg\r\nindex c9441bb30f..df72976a72 100644\r\n--- a/interpreter/cling/test/lit.cfg\r\n+++ b/interpreter/cling/test/lit.cfg\r\n@@ -317,23 +317,6 @@ if platform.system() not in ['Windows'] or lit_config.getBashPath() != '':\r\n if platform.system() not in ['Windows']:\r\n     config.available_features.add('not_system-windows')\r\n \r\n-# Do we have cling and clang sources under llvm? Some tests\r\n-# require it.\r\n-if not os.path.exists(os.path.join(config.test_exec_root, \"..\", \"..\", \"clang\", \"test\")):\r\n-  config.test_exec_root = os.path.join(config.test_exec_root, \"..\", \"..\")\r\n-  llvm_revision = urlopen(\r\n-      \"https://raw.githubusercontent.com/root-project/cling/master/LastKnownGoodLLVMSVNRevision.txt\"\r\n-      ).readline().strip().decode('utf-8')\r\n-  subprocess.Popen(['sudo svn export http://llvm.org/svn/llvm-project/llvm/branches/{0}/utils/lit utils/lit'.format(llvm_revision)],\r\n-                                    cwd=config.llvm_src_root,\r\n-                                    shell=True,\r\n-                                    stdin=subprocess.PIPE,\r\n-                                    stdout=None,\r\n-                                    stderr=subprocess.STDOUT).communicate('yes'.encode('utf-8'))\r\n-config.substitutions.append(('%testexecdir', config.test_exec_root))\r\n-config.substitutions.append(('%llvmsrcdir', config.llvm_src_root))\r\n-config.available_features.add('vanilla-cling')\r\n-\r\n if lit.util.which('libcudart.so', config.environment.get('LD_LIBRARY_PATH','')) is not None:\r\n   config.available_features.add('cuda-runtime')\r\n \r\n```",
        "createdAt" : "2021-01-27T08:37:34Z",
        "updatedAt" : "2021-01-27T09:59:43Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "dbea9cf2-037e-4057-b308-e029ba844b97",
        "parentId" : "190c9668-5e84-43de-9289-6e267710ba6d",
        "authorId" : "35f000f7-62f3-4cb3-8afc-e49e8974b5b5",
        "body" : "> I can help with that! `-Dclingtest=On` - and this patch:\r\n\r\nThanks for that option, probably saved me a lot - I only passed `-DCLING_INCLUDE_TESTS=ON` (why are there two?!)",
        "createdAt" : "2021-01-27T08:42:03Z",
        "updatedAt" : "2021-01-27T09:59:43Z",
        "lastEditedBy" : "35f000f7-62f3-4cb3-8afc-e49e8974b5b5",
        "tags" : [
        ]
      },
      {
        "id" : "4415cf22-74fb-4cd0-bd14-ed137ea83241",
        "parentId" : "190c9668-5e84-43de-9289-6e267710ba6d",
        "authorId" : "35f000f7-62f3-4cb3-8afc-e49e8974b5b5",
        "body" : "Done. I tested that the added checks would have failed before the fix.",
        "createdAt" : "2021-01-27T10:00:38Z",
        "updatedAt" : "2021-01-27T10:00:38Z",
        "lastEditedBy" : "35f000f7-62f3-4cb3-8afc-e49e8974b5b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "33b6363d46ed2942d96349f880954c3a76d462bf",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +395,399 @@  // loading the MachO binary, which breaks if the call sites of constructors\n  // end up in a separate init section.\n  // (see clang::TargetInfo::getStaticInitSectionSpecifier())\n  for (auto &Fn : module->functions()) {\n    if (Fn.hasSection()) {"
  }
]