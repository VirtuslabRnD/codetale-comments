[
  {
    "id" : "15a56f1f-e1af-48d1-b81e-dd57a4e7ce81",
    "prId" : 4005,
    "prUrl" : "https://github.com/root-project/root/pull/4005#pullrequestreview-262202221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4dc3b7d8-01e6-48f2-8881-0caa55178a63",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "System libs can be found through `LD_LIBRARY_PATH`, too... Maybe rename `bool FromLDLibPath`?",
        "createdAt" : "2019-07-15T22:50:45Z",
        "updatedAt" : "2019-07-18T07:29:46Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "5a429e1a-3389-4477-a191-e06b34b7fa60",
        "parentId" : "4dc3b7d8-01e6-48f2-8881-0caa55178a63",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "The presumption is that the user specified the LD_LIBRARY_PATH which may turn a system library in a user library. ",
        "createdAt" : "2019-07-16T06:06:25Z",
        "updatedAt" : "2019-07-18T07:29:46Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea2ea4216140f75aa079d4730e9954834866b5d4",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +43,47 @@      /// True if the Path is on the LD_LIBRARY_PATH.\n      ///\n      bool IsUser;\n    };\n  private:"
  },
  {
    "id" : "ddd0cdb5-195e-4188-bcbe-b2be9f3f767e",
    "prId" : 4717,
    "prUrl" : "https://github.com/root-project/root/pull/4717#pullrequestreview-406022910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11238b9d-83d0-44a2-94be-399d09c41937",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "`func` could also be the address of a static variable, not a function; maybe call it `addr`?",
        "createdAt" : "2020-05-05T13:59:22Z",
        "updatedAt" : "2020-05-06T14:48:33Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "5969e5bc-2dfb-41c6-bd5c-99aa7813ec8f",
        "parentId" : "11238b9d-83d0-44a2-94be-399d09c41937",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "I wanted to allow functions to be resolved. This function ports in a more generic way `static std::string FindLibraryName(void (*func)())`.",
        "createdAt" : "2020-05-05T18:01:45Z",
        "updatedAt" : "2020-05-06T14:48:33Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee856ff4d24ae868a567ec148be33800b1f0efe0",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +182,186 @@    ///\n    template <class T>\n    static std::string getSymbolLocation(T func) {\n      static_assert(std::is_pointer<T>::value, \"Must be a function pointer!\");\n      return getSymbolLocation(reinterpret_cast<void*>(func));"
  },
  {
    "id" : "035fe077-5130-4a12-9647-702071a09c34",
    "prId" : 4717,
    "prUrl" : "https://github.com/root-project/root/pull/4717#pullrequestreview-412375554",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d8985bc-136a-4e98-8830-f3c6d4d04b91",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "```suggestion\r\n      static_assert(std::is_pointer<T>::value, \"Must be a the address of a symbol!\");\r\n```",
        "createdAt" : "2020-05-05T13:59:39Z",
        "updatedAt" : "2020-05-06T14:48:33Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "d7eabad8-7cb3-49dd-9255-54c145bbbd4e",
        "parentId" : "5d8985bc-136a-4e98-8830-f3c6d4d04b91",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "That's still pending (subsequent PR?)",
        "createdAt" : "2020-05-06T19:50:27Z",
        "updatedAt" : "2020-05-06T19:50:27Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "186e443a-90f7-437c-abfb-7d3fea61685c",
        "parentId" : "5d8985bc-136a-4e98-8830-f3c6d4d04b91",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "@Axel-Naumann I am confused, you marked the previous comments as resolved -- should we make this generic to cover other symbols or it should work for function pointers only as it is now?",
        "createdAt" : "2020-05-15T06:20:57Z",
        "updatedAt" : "2020-05-15T06:20:58Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee856ff4d24ae868a567ec148be33800b1f0efe0",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +183,187 @@    template <class T>\n    static std::string getSymbolLocation(T func) {\n      static_assert(std::is_pointer<T>::value, \"Must be a function pointer!\");\n      return getSymbolLocation(reinterpret_cast<void*>(func));\n    }"
  },
  {
    "id" : "6e857e1a-6848-4c1c-89e4-fcd57e50fa56",
    "prId" : 4717,
    "prUrl" : "https://github.com/root-project/root/pull/4717#pullrequestreview-406022910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "420f21fb-ba21-438d-ac50-bf1afd591a81",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Why not simply take a `void *addr` as function parameter?",
        "createdAt" : "2020-05-05T14:00:25Z",
        "updatedAt" : "2020-05-06T14:48:33Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "5e068a2a-0efc-4ff1-9efd-ab0db15610b8",
        "parentId" : "420f21fb-ba21-438d-ac50-bf1afd591a81",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "See above.",
        "createdAt" : "2020-05-05T18:04:57Z",
        "updatedAt" : "2020-05-06T14:48:33Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee856ff4d24ae868a567ec148be33800b1f0efe0",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +183,187 @@    template <class T>\n    static std::string getSymbolLocation(T func) {\n      static_assert(std::is_pointer<T>::value, \"Must be a function pointer!\");\n      return getSymbolLocation(reinterpret_cast<void*>(func));\n    }"
  },
  {
    "id" : "13ab766a-e80d-4b15-997c-23a5dd4d3812",
    "prId" : 4717,
    "prUrl" : "https://github.com/root-project/root/pull/4717#pullrequestreview-406022910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "685af3e8-a2b7-48ab-b481-288bd2a7b243",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Why is there this and then also https://github.com/root-project/root/pull/4717/files#diff-ee3144b0602b994bccb21b8f72bce294R93 `getSymbolLocation(void*)`?",
        "createdAt" : "2020-05-05T14:03:45Z",
        "updatedAt" : "2020-05-06T14:48:33Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "21082455-91b9-4015-b4ef-03f86da1912c",
        "parentId" : "685af3e8-a2b7-48ab-b481-288bd2a7b243",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "I looked at the boost implementation and they use those pattern to pass function pointers and dispatch to the worker function. Take a look at https://github.com/boostorg/dll/blob/develop/include/boost/dll/runtime_symbol_info.hpp",
        "createdAt" : "2020-05-05T18:03:45Z",
        "updatedAt" : "2020-05-06T14:48:33Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee856ff4d24ae868a567ec148be33800b1f0efe0",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +182,186 @@    ///\n    template <class T>\n    static std::string getSymbolLocation(T func) {\n      static_assert(std::is_pointer<T>::value, \"Must be a function pointer!\");\n      return getSymbolLocation(reinterpret_cast<void*>(func));"
  },
  {
    "id" : "85d1a1e1-facb-4982-83df-2b8485f9d13b",
    "prId" : 5637,
    "prUrl" : "https://github.com/root-project/root/pull/5637#pullrequestreview-417337227",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c1917d8-e5cd-45db-97e6-3c7f53fd75d2",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Please use a `unique_ptr<my_Dyld>`.",
        "createdAt" : "2020-05-22T16:29:25Z",
        "updatedAt" : "2020-05-22T16:35:50Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "1e58b954-01cc-4849-94f8-00dec1186106",
        "parentId" : "8c1917d8-e5cd-45db-97e6-3c7f53fd75d2",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "That does not quite work. Doing so requires the ctor and the dtor to be in the same object file which is not the case and we cannot move one or the other. We want the symbol resolution facility to be in its own object file because we inspect the assembly code as it is performance critical. ",
        "createdAt" : "2020-05-22T16:55:54Z",
        "updatedAt" : "2020-05-22T16:55:54Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "ac1dd92f-cc1f-4062-91c0-6c426674b52a",
        "parentId" : "8c1917d8-e5cd-45db-97e6-3c7f53fd75d2",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "> Doing so requires the ctor and the dtor to be in the same object file\r\n\r\nO I see - but I think you meant \"the implementation of DynamicLibraryManager's ctor and dtor must see Dyld's declaration\" and you don't know how to do that without moving Dyld's class declaration into a header? Then maybe do that - it's probably nicer anyway and prevents having to have a mixture of Dyld and DynamicLibraryManager member functions in the same .o?\r\n\r\n> in its own object file because we inspect the assembly code\r\n\r\nI don't understand that. Are you saying when coding this you wanted to have an easier time inspecting the code's assembly? OK but that does not preempt moving the class declaration out.",
        "createdAt" : "2020-05-23T09:58:18Z",
        "updatedAt" : "2020-05-23T09:58:18Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "7f8a78cd-c77d-44b4-97e6-e68f8f646b50",
        "parentId" : "8c1917d8-e5cd-45db-97e6-3c7f53fd75d2",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "> > Doing so requires the ctor and the dtor to be in the same object file\r\n> \r\n> O I see - but I think you meant \"the implementation of DynamicLibraryManager's ctor and dtor must see Dyld's declaration\" and you don't know how to do that without moving Dyld's class declaration into a header? \r\n\r\nYes the definition of Dyld needs to be available in the same object file where the ctor and dtor are.\r\n\r\n>Then maybe do that - it's probably nicer anyway and prevents having to have a mixture of Dyld and DynamicLibraryManager member functions in the same .o?\r\n>\r\n\r\nAgreed, let's keep it as is.\r\n \r\n> > in its own object file because we inspect the assembly code\r\n> \r\n> I don't understand that. Are you saying when coding this you wanted to have an easier time inspecting the code's assembly?\r\n\r\nYes.\r\n\r\n> OK but that does not preempt moving the class declaration out.\r\n\r\nI would not move the class definition in the header file. On design level, nobody needs to actually know about Dyld and its internal structure -- it only has one user-facing function the rest is performance scaffolding. On performance level, I would not move the class definition in the header file. This would make it harder for the optimizer to do pointer escape analysis. The feedback from the previous review slowed down the code by 30% on average and we have still been unable to track the exact reason. I would be reluctant to repeat the same exercise just to be able to type `std::unique_ptr<Dyld>` for a private data member :) ",
        "createdAt" : "2020-05-24T08:20:38Z",
        "updatedAt" : "2020-05-24T08:20:39Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bea47ef7f6fc7936b9d582ed14dc3d63d5c8159",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +70,74 @@    InterpreterCallbacks* m_Callbacks = nullptr;\n\n    Dyld* m_Dyld = nullptr;\n\n    ///\\brief Concatenates current include paths and the system include paths"
  }
]