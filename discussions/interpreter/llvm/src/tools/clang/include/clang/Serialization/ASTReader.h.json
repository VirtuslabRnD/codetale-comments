[
  {
    "id" : "a31d153c-276d-4060-96a8-50cc1c8895e4",
    "prId" : 1287,
    "prUrl" : "https://github.com/root-project/root/pull/1287#pullrequestreview-74891072",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88637779-64f2-41b6-b8b7-11316cc7725a",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "In which cases we have no `ContextObj`? I'd prefer to assert here if possible (and rename the routine).",
        "createdAt" : "2017-11-07T12:33:13Z",
        "updatedAt" : "2017-11-07T12:47:55Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "d1082542-b3bc-4f9b-88cd-4613dc7bf1a9",
        "parentId" : "88637779-64f2-41b6-b8b7-11316cc7725a",
        "authorId" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "body" : "The ASTReader only has only an optional ASTContext, it also supposed to work without. You can also just read preprocessor information (e.g. ASTUnit is using this) and then you don't need to supply one. Other people might use it in other contexts where have no ASTContext.\r\n\r\nThe current clang code only allows increasing the generation counter with an ASTContext (as it only increases the generation counter of the top-most ASTContext source), so we anyway don't keep an generation counter without an ASTContext right now.",
        "createdAt" : "2017-11-07T13:03:50Z",
        "updatedAt" : "2017-11-07T13:03:50Z",
        "lastEditedBy" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "tags" : [
        ]
      },
      {
        "id" : "e53173e0-6311-444d-b6f3-c8773d366ca5",
        "parentId" : "88637779-64f2-41b6-b8b7-11316cc7725a",
        "authorId" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "body" : "We could rename it to getGeneration(), the `OrNull` is probably rather confusing.",
        "createdAt" : "2017-11-07T13:07:02Z",
        "updatedAt" : "2017-11-07T13:07:03Z",
        "lastEditedBy" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "tags" : [
        ]
      },
      {
        "id" : "78f1fb53-edf7-4b28-9b3b-9fb1a23ef392",
        "parentId" : "88637779-64f2-41b6-b8b7-11316cc7725a",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Can you try asserting and run the test suite. I am concerned about the case where we `return 0` but still add an entry to the table of `II`.",
        "createdAt" : "2017-11-07T13:11:03Z",
        "updatedAt" : "2017-11-07T13:11:03Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "80960944-046f-418d-b9d5-99f2329fb6d7",
        "parentId" : "88637779-64f2-41b6-b8b7-11316cc7725a",
        "authorId" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "body" : "I started a build with the added assert here: https://teemperor.de/ccir/git:RefactorGenerationCounterAssert\r\n\r\nIt will probably fail in the ASTUnit tests, but there we just have a 0 generation everywhere. That's what the code is doing.",
        "createdAt" : "2017-11-07T13:20:13Z",
        "updatedAt" : "2017-11-07T13:20:13Z",
        "lastEditedBy" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "tags" : [
        ]
      },
      {
        "id" : "9cecdb27-931d-4b48-a5d7-0b16c28ef0f2",
        "parentId" : "88637779-64f2-41b6-b8b7-11316cc7725a",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "I see, it fails only for the cases where we are preprocessing modules. Maybe it'd be worth tweaking that assert. I'd be much more comfortable to control the number generation.",
        "createdAt" : "2017-11-07T20:09:31Z",
        "updatedAt" : "2017-11-07T20:09:31Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f90425befafca0dec356a867ce4c8b7f39c6987",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1212,1216 @@\n  uint32_t getGenerationOrNull() const {\n    if (ContextObj)\n      return getGeneration(*ContextObj);\n    return 0u;"
  },
  {
    "id" : "e1c8fa7b-6e23-4004-9cbf-2a3c0650446e",
    "prId" : 1814,
    "prUrl" : "https://github.com/root-project/root/pull/1814#pullrequestreview-121047186",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09789808-5418-4c45-acc1-d2f0dea89ac6",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Extra blank line here.",
        "createdAt" : "2018-05-17T13:46:44Z",
        "updatedAt" : "2018-05-17T21:53:25Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "d793877d01e922183eb92dc9bd1757da9a479f27",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1559,1563 @@    return DeserializationListener;\n  };\n\n  /// \\brief Determine whether this AST reader has a global index.\n  bool hasGlobalIndex() const { return (bool)GlobalIndex; }"
  }
]