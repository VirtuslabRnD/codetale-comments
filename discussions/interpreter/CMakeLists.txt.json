[
  {
    "id" : "37146c05-0cd3-484d-9ce4-363a6b4f63e4",
    "prId" : 1563,
    "prUrl" : "https://github.com/root-project/root/pull/1563#pullrequestreview-92285706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2c5e35c-e727-4b6b-91e3-eeb560b28eba",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "`<prefix>/etc` is the wrong place for plugins. Only small text configuration files should go into `<prefix>/etc`.\r\nBetter choices would be `<prefix>/lib/cling` or `<prefix>/share/cling/plugins`. ROOT would make my `/etc` about 10 times bigger, for instance:\r\n```\r\nepsft-53 ~ # du -shc /etc\r\n15M\t/etc\r\n15M\ttotal\r\nepsft-53 ~ # du -shc /opt/root/6.12/etc\r\n116M\t/opt/root/6.12/etc\r\n116M\ttotal\r\n```",
        "createdAt" : "2018-01-29T12:29:59Z",
        "updatedAt" : "2018-02-15T11:22:49Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "081db6f4-b159-4a7f-9db6-b17e5ad70fee",
        "parentId" : "d2c5e35c-e727-4b6b-91e3-eeb560b28eba",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "IIUC, our ROOT-based plugins live there, too.",
        "createdAt" : "2018-01-29T12:58:17Z",
        "updatedAt" : "2018-02-15T11:22:49Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "987a0be4-0c86-4a77-8c7e-ef309e55e7e0",
        "parentId" : "d2c5e35c-e727-4b6b-91e3-eeb560b28eba",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "True, but they will also need to be moved to a more appropriate place. The situation above is not acceptable. We need to start minimally following the FHS from now on, to be able to reach the point in which we will become a regular package in most Linux distributions. This is another point for “let's not make it worse if we can avoid it”.",
        "createdAt" : "2018-01-29T14:19:59Z",
        "updatedAt" : "2018-02-15T11:22:49Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "d112093f-aafc-46ec-9baf-e2863c44012c",
        "parentId" : "d2c5e35c-e727-4b6b-91e3-eeb560b28eba",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Ok, I'd pick `<prefix>/share/cling/plugins`.\r\n",
        "createdAt" : "2018-01-29T14:22:31Z",
        "updatedAt" : "2018-02-15T11:22:49Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "fc30333a-21e2-48df-be9d-dd845bb51268",
        "parentId" : "d2c5e35c-e727-4b6b-91e3-eeb560b28eba",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Hi Vassil, thanks for understanding. How many such plugins exist now, and are users expected to install more plugins separately? Actually, I have at least these on my machine:\r\n```\r\n/usr/lib64/krb5/plugins\r\n/usr/lib64/qt4/plugins\r\n/usr/lib64/nsbrowser/plugins\r\n/usr/lib64/libv4l/plugins\r\n/usr/lib64/qt5/plugins\r\n/usr/lib64/bluetooth/plugins\r\n/usr/lib64/peas-demo/plugins\r\n/usr/lib64/eog/plugins\r\n/usr/lib64/traceevent/plugins\r\n```\r\nLooking at [FHS](http://refspecs.linuxfoundation.org/FHS_3.0/fhs/index.html) to check, `<prefix>/share` is meant for architecture-independent data files, so I'm inclined to use `<prefix>/lib/root/plugins` for ROOT, and suggest that we use `<prefix>/lib/cling/plugins` for cling for consistency, what do you think? The rationale is that these are executables, so probably `<prefix>/lib` makes more sense.",
        "createdAt" : "2018-01-29T14:37:47Z",
        "updatedAt" : "2018-02-15T11:22:49Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "47714273-a147-4138-954e-dd6b93c3d966",
        "parentId" : "d2c5e35c-e727-4b6b-91e3-eeb560b28eba",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Hi Guilherme,\r\n\r\nI understand and agree with the principle of 'not making things harder for an upcoming change'.  In this case, however, doesn't putting Clad's file in a 'different' (but better) place than the others more confusing than helpful.  (i.e. it will help the developer later but will confused the users now).   What do you think and/or what am I missing?\r\n\r\nCheers,\r\nPhilippe.",
        "createdAt" : "2018-01-29T15:55:05Z",
        "updatedAt" : "2018-02-15T11:22:49Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "5183f481-e658-4bd2-b4fb-461a2399cd82",
        "parentId" : "d2c5e35c-e727-4b6b-91e3-eeb560b28eba",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Hi Philippe, I disagree that installing files where FHS indicates is confusing. There is a problem that /etc is hard-coded in a few places for the other files now, so if this goes to the right place since the beginning it will be easier to fix the rest later, and it will avoid the appearance of more hard-coded paths where it only works with the default value. For example, changing SYSCONFDIR breaks ROOT right now, that's why I couldn't change it yet.",
        "createdAt" : "2018-01-29T17:13:46Z",
        "updatedAt" : "2018-02-15T11:22:49Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "bf92cd97-488a-4549-966a-aee9ea77b4e5",
        "parentId" : "d2c5e35c-e727-4b6b-91e3-eeb560b28eba",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "> I disagree that installing files where FHS indicates is confusing. \r\n\r\nYou might be misunderstanding my point.  I agree with you that \"where FHS indicates\" is the better place to install the files and what we should strive for.  My concern is the in-between situation where/when we have some files installed \"where FHS indicates\" and some in other places.  (i.e semantically similar things installed in two different places) ... if we **already** have the case that some files are installed \"where FHS indicates\" then my point is  moot (because the confusing situation I fear is already there).",
        "createdAt" : "2018-01-29T17:25:50Z",
        "updatedAt" : "2018-02-15T11:22:49Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc8c366320d4d8b9854308ac7764a774d270dfff",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +23,27 @@  set(etcdir ${prefix}/${CMAKE_INSTALL_SYSCONFDIR})\nendif()\nset(CLING_PLUGIN_INSTALL_PREFIX \"${etcdir}/cling/plugins/\" CACHE STRING \"\" FORCE)\nset(LLVM_DIR \"${CMAKE_BINARY_DIR}/interpreter/llvm/src\")\nset(CLING_BUILD_PLUGINS ON)"
  },
  {
    "id" : "62498c9b-ea46-4972-9cde-ded7222968fa",
    "prId" : 1632,
    "prUrl" : "https://github.com/root-project/root/pull/1632#pullrequestreview-96783970",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7db6cad9-4fb6-43eb-8bfa-257ff61636ce",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Just curiosity, but why is this needed? Could you use `$<TARGET_FILE:cling>` or similar in `check-cling` target to avoid this?",
        "createdAt" : "2018-02-15T09:06:55Z",
        "updatedAt" : "2018-02-15T14:05:14Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "51caba53-8b48-447e-a8c6-a6786a6b8248",
        "parentId" : "7db6cad9-4fb6-43eb-8bfa-257ff61636ce",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "We did not need this before, because we knew where to find cling, relative to the `llvm_tools_dir`. Having builtin_llvm=Off sets that variable to something else and we cannot find back the cling binary.\r\n\r\nOf course we can probably find a hackish solution but I did not find anything that I liked. Currently the `check-cling` target is only available when configuring with `-Dclingtest=On` and if we have `-Dbuiltin_llvm=Off` we will need to provide the path to the cling binary if we want to dial the target outside of roottest.",
        "createdAt" : "2018-02-15T09:44:36Z",
        "updatedAt" : "2018-02-15T14:05:14Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "98985f05bf86c185a80f0f303be4dda2ee958218",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +107,111 @@  endif()\n  ROOT_ADD_TEST(clingtest-check-cling COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target check-cling\n                                       ENVIRONMENT ${CLINGTEST_EXECUTABLE})\nelse()\n  #---Build LLVM/Clang with symbol visibility=hidden--------------------------------------------------"
  },
  {
    "id" : "8a8d4eae-64c3-4deb-9e32-ae7af1ef2ce8",
    "prId" : 1632,
    "prUrl" : "https://github.com/root-project/root/pull/1632#pullrequestreview-96798869",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c02f80e0-0eb1-47c6-a647-56c54cb48358",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "This is strange, the flags should come with the targets already, no? If you use `target_link_libraries()`, any flags needed will be automatically appended (i.e. include directories and compile flags). This seems a bit hacky.",
        "createdAt" : "2018-02-15T09:14:20Z",
        "updatedAt" : "2018-02-15T14:05:14Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "babcb66e-037e-496b-bd35-dffbe816d891",
        "parentId" : "c02f80e0-0eb1-47c6-a647-56c54cb48358",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "That's legacy code, I moved it and indented it, that's why it shows up here. I do not know how to solve this at the moment.",
        "createdAt" : "2018-02-15T10:15:41Z",
        "updatedAt" : "2018-02-15T14:05:14Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "580e97bd-1f42-4083-9657-4f9bba01f66f",
        "parentId" : "c02f80e0-0eb1-47c6-a647-56c54cb48358",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Ok, let's leave it for later than.",
        "createdAt" : "2018-02-15T10:32:11Z",
        "updatedAt" : "2018-02-15T14:05:14Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "98985f05bf86c185a80f0f303be4dda2ee958218",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +174,178 @@  # LLVM doesn't really give us a API to get this with an in-source build\n  # so we just use the normal way of doing this and read the llvm directory\n  # compilation properties.\n  get_directory_property(LLVM_DEFS DIRECTORY llvm/src COMPILE_DEFINITIONS)\n  # Turns DEFINE1;DEFINE2 to -DDEFINE1 -DDEFINE2"
  },
  {
    "id" : "46e9053b-f303-4293-9d4b-21e0855cea71",
    "prId" : 1632,
    "prUrl" : "https://github.com/root-project/root/pull/1632#pullrequestreview-96799126",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "472f29ec-8e9d-42b4-8a1e-6d71c49c1b8a",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Why not use LLVM's CMake modules? Macs don't have `llvm-config` from XCode, for example, although I understand that this is probably Linux-only since the version of LLVM has to almost match what's in ROOT.\r\nOn my machine, the file `LLVMConfig.cmake` has the flags returned by `llvm-config --cxxflags`, for example, as well as paths to various directories.",
        "createdAt" : "2018-02-15T09:16:48Z",
        "updatedAt" : "2018-02-15T14:05:14Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "6687eee3-0109-4a4e-9707-62b17f5dcbd9",
        "parentId" : "472f29ec-8e9d-42b4-8a1e-6d71c49c1b8a",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "This did not work well for llvm. One of the reasons is that clang would also include AddLLVM, which will include `LLVMConfig.cmake`.\r\n\r\nMy initial implementation was this but for some reason I had missing dependencies and dependency cycles. Then I decided to copy what clang's main CMakeLists.txt file is doing...",
        "createdAt" : "2018-02-15T09:46:46Z",
        "updatedAt" : "2018-02-15T14:05:14Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "d96d95d2-a9eb-4dda-b761-24da0acb5d6a",
        "parentId" : "472f29ec-8e9d-42b4-8a1e-6d71c49c1b8a",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "What if we just add the clang subdirectory and let it handle how to find and configure LLVM for its needs? Would that work, maybe?",
        "createdAt" : "2018-02-15T09:51:23Z",
        "updatedAt" : "2018-02-15T14:05:14Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "55dabcbb-d807-4cb0-bc2a-0aea6089fdf8",
        "parentId" : "472f29ec-8e9d-42b4-8a1e-6d71c49c1b8a",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "It'd misplace the binaries. The copy-pasted code is not 1:1, it has a few things modified. Namely, it'd install 'private' cling/clang libs and binaries in `$ROOTSYS/bin/`. That would make things inconsistent if people build with `-Dbuiltin_llvm=On|Off`.",
        "createdAt" : "2018-02-15T10:18:00Z",
        "updatedAt" : "2018-02-15T14:05:14Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "b1dc4ed8-97c7-420a-bfd0-20f345f6e144",
        "parentId" : "472f29ec-8e9d-42b4-8a1e-6d71c49c1b8a",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "I see. Ok, then.",
        "createdAt" : "2018-02-15T10:32:54Z",
        "updatedAt" : "2018-02-15T14:05:14Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "98985f05bf86c185a80f0f303be4dda2ee958218",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +186,190 @@  # Rely on llvm-config.\n  set(CONFIG_OUTPUT)\n  find_program(LLVM_CONFIG NAMES \"llvm-config-5.0\" \"llvm-config\")\n  if(LLVM_CONFIG)\n    message(STATUS \"Found LLVM_CONFIG as ${LLVM_CONFIG}\")"
  },
  {
    "id" : "ad2a8ab4-cc81-43af-a28f-ee03e54fdf34",
    "prId" : 1632,
    "prUrl" : "https://github.com/root-project/root/pull/1632#pullrequestreview-96784678",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2addb4b-0f54-434f-8af0-5f4480e353ef",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "I think you would get all these paths with a simple `find_package(LLVM)`, no? These are all in the `LLVMConfig.cmake` installed by LLVM on my machine.",
        "createdAt" : "2018-02-15T09:28:54Z",
        "updatedAt" : "2018-02-15T14:05:14Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "fed8b1c0-8b26-4098-b5e3-fd8203b3d2b0",
        "parentId" : "c2addb4b-0f54-434f-8af0-5f4480e353ef",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "See above. Did not work.",
        "createdAt" : "2018-02-15T09:47:04Z",
        "updatedAt" : "2018-02-15T14:05:14Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "98985f05bf86c185a80f0f303be4dda2ee958218",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +234,238 @@  set(LLVM_MAIN_INCLUDE_DIR ${INCLUDE_DIR} CACHE PATH \"Path to llvm/include\")\n  set(LLVM_BINARY_DIR ${LLVM_OBJ_ROOT} CACHE PATH \"Path to LLVM build tree\")\n  set(LLVM_MAIN_SRC_DIR ${MAIN_SRC_DIR} CACHE PATH \"Path to LLVM source tree\")\n\n  # Normalize LLVM_CMAKE_PATH. --cmakedir might contain backslashes."
  },
  {
    "id" : "6e97f273-37aa-4378-85da-94e7b85cf607",
    "prId" : 1632,
    "prUrl" : "https://github.com/root-project/root/pull/1632#pullrequestreview-97785739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26a71219-895e-4ad9-8820-2609a9a0e4a3",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Maybe you should consider addressing this and other `FIXME` comments before merging this.",
        "createdAt" : "2018-02-20T10:20:39Z",
        "updatedAt" : "2018-02-20T10:20:39Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "72cbda99-2fbf-474c-8d92-a991406c64d8",
        "parentId" : "26a71219-895e-4ad9-8820-2609a9a0e4a3",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "That's a reminder that we are being suboptimal here. I am unaware of how to fix it at that point in time, even if I had the spare cycles.",
        "createdAt" : "2018-02-20T10:33:51Z",
        "updatedAt" : "2018-02-20T10:33:52Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "d7ba46c8-a68b-4608-b26e-bd3e344070a1",
        "parentId" : "26a71219-895e-4ad9-8820-2609a9a0e4a3",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Fine, but then please let me take a look at this (since I am already working on improving our current system for externals/builtins) to try to find a better solution instead of merging something suboptimal.",
        "createdAt" : "2018-02-20T10:59:35Z",
        "updatedAt" : "2018-02-20T10:59:35Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "e5c24c79-3706-41d1-b85b-e1135c0903be",
        "parentId" : "26a71219-895e-4ad9-8820-2609a9a0e4a3",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "I'd prefer to merge this because it is blocking a few things. Then once you find a better solution feel free to change this code there. ",
        "createdAt" : "2018-02-20T11:11:37Z",
        "updatedAt" : "2018-02-20T11:11:37Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "98985f05bf86c185a80f0f303be4dda2ee958218",
    "line" : 299,
    "diffHunk" : "@@ -1,1 +395,399 @@  # We cannot include LLVMConfig.cmake here. We reply on builtin clang to discover the available\n  # llvm version and set it in clang version.\n  # FIXME: This is a very ugly workaround. Is there a better way to do this?\n  set(LLVM_VERSION ${CLANG_VERSION} PARENT_SCOPE)\nendif()"
  }
]