[
  {
    "id" : "4053fe09-3ba6-4e52-a4a9-4f2d6fffd29b",
    "prId" : 4891,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4891",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57d52133-260d-48c1-8b65-44a4e9745944",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I think there are two usecases for a `daml_build` rule:\r\n\r\n1. Documentation for upgrading, packaging, …. In this case the `daml.yaml` is something displayed in the documentation and we want to test against that exact `daml.yaml` (see my comment above on the change to the `daml.yaml`). I think in that case we might be able to get away with something simpler: We can not shuffle sources around and instead just go to the directory of the `daml.yaml` and call `daml build`. If the files are arranged in the right locations I believe this should work out. The one thing that won’t work is finding the `dar` files. I don’t really have a great solution for that. idea. I don’t expect this usecase to ever become particularly common. ATM the upgrading docs are the only thing that would make use of this and I wonder if we might just be better off keeping the `sh_test` there to make sure we reproduce exactly what our documentation says. Curious what @aherrmann-da thinks about this.\r\n\r\n2. The other usecase is basically every single call to `daml_compile` in our codebase atm and things like the genrule for triggers or DAML script which cannot use `daml_compile`. I think in this case, we don’t want to specify a `daml.yaml` at all. Instead if probably makes sense for the Bazel rule to accept a list of DAR files as dependencies, a list of source files, a name, and maybe a `strip_prefix` field and then the rule will generate the `daml.yaml` automagically.\r\n\r\nI think the current rule is in a bit of an awkward middle ground where it doesn’t quite work for documentation since it requires modifying the `daml.yaml` but it’s also rather awkward to use outside of documentation since there it would be much more convenient to specify the `daml.yaml` directly in the rule. Given that 2 is much more common, I think it would make more sense to at least initially focus the rule on that and leave documentation like it is for now.",
        "createdAt" : "2020-03-09T12:15:58Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "9eac298b-e636-47c3-908d-39cd5861dc9e",
        "parentId" : "57d52133-260d-48c1-8b65-44a4e9745944",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I think part of what is missing is a principled way of locating one DAML project from another within a `daml.yaml` file.",
        "createdAt" : "2020-03-09T12:34:15Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "bc7619de-fc48-4d76-9d76-1668f9b9db36",
        "parentId" : "57d52133-260d-48c1-8b65-44a4e9745944",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I'm not going to suggest this rule is perfect, but I think it's a definite step forward from the use of `sh_test`.",
        "createdAt" : "2020-03-09T12:36:14Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "28718a6e-b924-4c1e-b925-c59e65aadf50",
        "parentId" : "57d52133-260d-48c1-8b65-44a4e9745944",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "> I think part of what is missing is a principled way of locating one DAML project from another within a `daml.yaml` file.\r\n\r\nThe problem with that is that in general you might only have the DAR and nothing else. Pointing to the sources doesn’t really make sense. It is crucial that you use the DAR as the input and don’t recompile the sources for `data-dependencies`.\r\n\r\n> I'm not going to suggest this rule is perfect, but I think it's a definite step forward from the use of `sh_test`.\r\n\r\nThe `sh_test` tests exactly what we want users to run. With the change to the `daml.yaml` this won’t run as all unless you explicitly copy the DAR around which isn’t explained in the documentation and I don’t think we want to explain it since it’s just another step with no benefit. So while I do agree that it’s nicer in terms of the code in the `BUILD.bazel` file, it’s worse in terms of the UX for someone reading the docs which is the important part here. That’s why I think focusing on 2 where we can completely ignore those concerns might be more sensible.",
        "createdAt" : "2020-03-09T12:42:49Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "12f688ab-8c97-4ad3-a687-297566e92430",
        "parentId" : "57d52133-260d-48c1-8b65-44a4e9745944",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "> 1. The one thing that won’t work is finding the `dar` files. I don’t really have a great solution for that.\r\n\r\nCould this be done with `--package-db` flags? `daml_compile` (or a dedicated `daml_package`) could generate one, and we could pass `--package-db` flags to `damlc` for dependencies.",
        "createdAt" : "2020-03-09T13:12:41Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "dcfcad19-4195-4d54-9a36-9bb23c19cccb",
        "parentId" : "57d52133-260d-48c1-8b65-44a4e9745944",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "> I think there are two usecases for a `daml_build` rule\r\n> [...]\r\n> 2\\. The other usecase is basically every single call to `daml_compile` in our codebase atm and things like the genrule for triggers or DAML script which cannot use `daml_compile`. I think in this case, we don’t want to specify a `daml.yaml` at all. Instead if probably makes sense for the Bazel rule to accept a list of DAR files as dependencies, a list of source files, a name, and maybe a `strip_prefix` field and then the rule will generate the `daml.yaml` automagically.\r\n\r\nI've been wondering about that. What's unfortunate about this approach is that we'd have to keep the available metadata fields in `daml.yaml` in sync with the corresponding Bazel rule's available attributes. If we could figure out how to make `daml.yaml` work within Bazel, that would seem preferable.\r\n\r\nIf it's only the DAR paths, maybe we could have a search paths flag to `damlc`? Something akin to `-I`/`-L`.",
        "createdAt" : "2020-03-09T13:17:53Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "36d9f276-1d60-471d-ab94-7c8ca1dd9051",
        "parentId" : "57d52133-260d-48c1-8b65-44a4e9745944",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "> I've been wondering about that. What's unfortunate about this approach is that we'd have to keep the available metadata fields in `daml.yaml` in sync with the corresponding Bazel rule's available attributes.\r\n\r\nI would just remove the `daml.yaml` file completely for those cases so there’s nothing to keep in sync.",
        "createdAt" : "2020-03-09T13:42:59Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "ef762f5f-d932-445e-8674-96290871fc82",
        "parentId" : "57d52133-260d-48c1-8b65-44a4e9745944",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "> The problem with that is that in general you might only have the DAR and nothing else. Pointing to the sources doesn’t really make sense. It is crucial that you use the DAR as the input and don’t recompile the sources for data-dependencies.\r\n\r\nThis of course is true for real uses of old, mustn't-be-changed dar files.\r\n\r\nBut the rule under discussion is intended to check the DAML of our documentation example is correct. So we do want to have a proper dependency on v1 form v2. So if someone edits the DAML in v1 to break v2, the test will discover this.\r\n",
        "createdAt" : "2020-03-09T13:54:40Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "5dd8738c-2fe7-4f53-81d0-d74855f21076",
        "parentId" : "57d52133-260d-48c1-8b65-44a4e9745944",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "> > I've been wondering about that. What's unfortunate about this approach is that we'd have to keep the available metadata fields in `daml.yaml` in sync with the corresponding Bazel rule's available attributes.\r\n> \r\n> I would just remove the `daml.yaml` file completely for those cases so there’s nothing to keep in sync.\r\n\r\nI don't mean the values, I mean the fields themselves. E.g. the `daml_compile` rule may need a `exposed-modules` attribute, or a `build-options` attribute. It's not too bad, but it's repetition. For the cases we have so far, it's probably fine.",
        "createdAt" : "2020-03-09T14:35:15Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "bb417547-4fcb-4d15-9777-1f17cdfd6bb4",
        "parentId" : "57d52133-260d-48c1-8b65-44a4e9745944",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Ah I see. Yeah that’s slightly annoying. Anyway that’s a discussion for a separate PR.",
        "createdAt" : "2020-03-10T11:39:54Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "02bcb56d82f4f1d774e4aa52e2458cacc2dc704b",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +26,30 @@        outputs = [output_dar],\n        progress_message = \"Building DAML project %s\" % name,\n        command = \"\"\"\n            set -eou pipefail\n            tmpdir=$(mktemp -d)"
  },
  {
    "id" : "a2fb4a2c-e8bc-4e42-ae66-ecf161500a5d",
    "prId" : 4891,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4891",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4aec64ef-a8b1-491e-ae87-433c84a55246",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "```suggestion\r\n            trap \"rm -rf $tmpdir\" EXIT\r\n            mkdir -p $tmpdir/daml\r\n```\r\nLeaving stale directories around is a bit uggly and might result in issues in the long term (although somewhat unlikely at least on CI given that we recycle nodes but it’s easy enough to clean it up).",
        "createdAt" : "2020-03-10T12:59:01Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "02bcb56d82f4f1d774e4aa52e2458cacc2dc704b",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +30,34 @@            tmpdir=$(mktemp -d)\n            trap \"rm -rf $tmpdir\" EXIT\n            mkdir -p $tmpdir/daml\n            cp -f {config} $tmpdir\n            {cp_damls}"
  }
]