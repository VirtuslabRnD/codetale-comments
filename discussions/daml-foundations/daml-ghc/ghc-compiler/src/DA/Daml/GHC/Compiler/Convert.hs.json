[
  {
    "id" : "788c99f6-b300-4051-a97a-ea170e3f91d1",
    "prId" : 1550,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb45a73b-39b1-4c52-add5-984d04d432a9",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "```suggestion\r\ninternalTypes = [\"Scenario\",\"Update\",\"ContractId\",\"Time\",\"Date\",\"Party\",\"Pair\",\"TextMap\"]\r\n```",
        "createdAt" : "2019-06-06T19:26:42Z",
        "updatedAt" : "2019-06-07T21:36:40Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e40aeb40fbf82a851c87a99859d87ecf2a54b5f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +637,641 @@-- deliberately remove 'GHC.Types.Opaque' as well.\ninternalTypes :: [String]\ninternalTypes = [\"Scenario\",\"Update\",\"ContractId\",\"Time\",\"Date\",\"Party\",\"Pair\", \"TextMap\"]\n\ninternalFunctions :: LF.Version -> MS.Map GHC.ModuleName [String]"
  },
  {
    "id" : "c5708f5e-4bb7-4c3b-b10b-46be4131fa54",
    "prId" : 1550,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a448ad20-00a1-4c68-919d-69338ab233be",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Should this optional not be one further up? Isn't it in DA.Internal.LF? Should it be?",
        "createdAt" : "2019-06-06T19:33:33Z",
        "updatedAt" : "2019-06-07T21:36:40Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      },
      {
        "id" : "aa4b4db4-18c4-4b4b-a685-2b3e503a8c2b",
        "parentId" : "a448ad20-00a1-4c68-919d-69338ab233be",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Given that we (should) erase during conversion to DAML-LF as well, it would make sense to have it in `DA.Internal.LF`. I'll move it in a separate PR.",
        "createdAt" : "2019-06-06T21:12:48Z",
        "updatedAt" : "2019-06-07T21:36:40Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e40aeb40fbf82a851c87a99859d87ecf2a54b5f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1248,1252 @@            \"TextMap\" -> pure (TBuiltin BTMap)\n            _ -> defaultTyCon\n    | isBuiltinName \"Optional\" t = pure (TBuiltin BTOptional)\n    | otherwise = defaultTyCon\n    where"
  },
  {
    "id" : "41cbee14-3e65-483b-8571-e92aa0f7b028",
    "prId" : 1439,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1439",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "501cfd9f-b08b-4618-9f61-453c6dc4e3b2",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Adding more and more cases where we donâ€™t at least match on the module name makes me sad. We should really fix this soon or at least do it properly for new code.",
        "createdAt" : "2019-05-29T06:39:10Z",
        "updatedAt" : "2019-05-29T06:45:58Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "bd008e18-2914-487e-95f0-bd5d425f010f",
        "parentId" : "501cfd9f-b08b-4618-9f61-453c6dc4e3b2",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I agree in general but I think this place is not particularly scary since the parser will generate these instances and hence it's under our control. At some point I will just kill the `Is` pattern synonym and force every pattern match to be proper.",
        "createdAt" : "2019-05-29T08:04:54Z",
        "updatedAt" : "2019-05-29T08:04:54Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "61cb487540d5ac1ba0bd5213722cdfb44b658e08",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +357,361 @@                let chcName = ChoiceName $ T.intercalate \".\" $ unTypeConName $ qualObject argTCon\n                consumptionType <- case varType consumption of\n                    TypeCon (Is \"NonConsuming\") _ -> pure NonConsuming\n                    TypeCon (Is \"PreConsuming\") _ -> pure PreConsuming\n                    TypeCon (Is \"PostConsuming\") _ -> pure PostConsuming"
  },
  {
    "id" : "2ff3b3f3-6679-46a8-aabb-1a271669641a",
    "prId" : 1396,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "478c85dc-f5e3-477d-bb8f-f19586625476",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "This diff is mostly due to an additional level of indentation. \"Hide whitespace changes\" is your friend here.",
        "createdAt" : "2019-05-27T08:56:19Z",
        "updatedAt" : "2019-05-27T08:56:19Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "61719f027973d0fec992d13efc4d824a5973abf8",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +1105,1109 @@convertCoercion env co = evalStateT (go env co) 0\n  where\n    go :: Env -> Coercion -> StateT Int ConvertM (LF.Expr -> LF.Expr, LF.Expr -> LF.Expr)\n    go env co@(coercionKind -> Pair s t)\n        | isReflCo co = pure (id, id)"
  },
  {
    "id" : "bf190fd2-bc1a-4e13-bc98-afc1b2e8c8dc",
    "prId" : 1383,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2f1b0b7-2739-4494-a8ac-ce17211e9d42",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Is it worth pushing an Int inside ConvertM? Having a way to find unique values seems like it could crop up in other places, and having those be unique inside a ConvertM seems like it could make things simpler. (That said, state is a fair bit slower than Reader, but I'm not sure how much we go through the monad)",
        "createdAt" : "2019-05-25T08:08:04Z",
        "updatedAt" : "2019-05-25T08:12:56Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      },
      {
        "id" : "5ac4e18e-2462-4011-a052-6f10b90436ea",
        "parentId" : "f2f1b0b7-2739-4494-a8ac-ce17211e9d42",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We definitely should use it elsewhere. There are quite a few places where we use hard coded names instead of fresh names which scare me. I'll do that one day...",
        "createdAt" : "2019-05-25T08:34:09Z",
        "updatedAt" : "2019-05-25T08:34:09Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "1244a82574f2beea41d9a43de52cb3bccc7982e0",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +1023,1027 @@-- types or forall quantifications. We handle those cases by recursion into\n-- all sub-coercions.\nconvertCoercion :: Env -> Coercion -> StateT Int ConvertM (LF.Expr -> LF.Expr, LF.Expr -> LF.Expr)\nconvertCoercion env co@(coercionKind -> Pair s t)\n    | isReflCo co = pure (id, id)"
  },
  {
    "id" : "c527bf06-0e67-458a-84f9-6c8665314837",
    "prId" : 1383,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18ebbca1-108c-4fca-8a1f-3a5851a6515d",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Do you really need fresh variables here? I would have thought capture rules meant that even if they were named identically they wouldn't conflict? That means we can get rid of the StateT, which would simplify things.",
        "createdAt" : "2019-05-25T08:12:44Z",
        "updatedAt" : "2019-05-25T08:12:56Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      },
      {
        "id" : "45fe1556-0e74-45f5-82fc-a5279df55070",
        "parentId" : "18ebbca1-108c-4fca-8a1f-3a5851a6515d",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "You're right, we don't necessarily need fresh names here. I'll remove them for now and consider reintroducing them when we have fresh name generation in `ConvertM`.",
        "createdAt" : "2019-05-25T08:34:42Z",
        "updatedAt" : "2019-05-25T08:34:42Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "1244a82574f2beea41d9a43de52cb3bccc7982e0",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +1033,1037 @@        a' <- lift $ convertType env a'\n        x <- mkLamBinder\n        let to expr = ETmLam (x, a') $ bTo $ ETmApp expr $ aFrom $ EVar x\n        let from expr = ETmLam (x, a) $ bFrom $ ETmApp expr $ aTo $ EVar x\n        pure (to, from)"
  },
  {
    "id" : "0b326bff-0706-497d-b45e-94ad47ecdbb8",
    "prId" : 1219,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1219",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76c28f02-043f-4a77-ad83-fe80b37dae69",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Is this still right for non-complex keys? How can you change the semantics for the old one? Or do you believe this has identical semantics and is just a refactoring?",
        "createdAt" : "2019-05-17T15:43:32Z",
        "updatedAt" : "2019-05-17T19:10:12Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      },
      {
        "id" : "dd6b779f-199b-4284-8947-c57e1f8585d9",
        "parentId" : "76c28f02-043f-4a77-ad83-fe80b37dae69",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "This function still does the right thing for contract keys obeying the syntactic restriction in DAML-LF 1.3. There's a check in the type checker making sure the restriction is obeyed for DAML-LF 1.3.",
        "createdAt" : "2019-05-17T15:51:10Z",
        "updatedAt" : "2019-05-17T19:10:12Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "917097a0-0dd4-4dc4-b650-efb397afe74d",
        "parentId" : "76c28f02-043f-4a77-ad83-fe80b37dae69",
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "version14 = versionDev for now, then we have a single place to roll. I like that.",
        "createdAt" : "2019-05-17T15:58:47Z",
        "updatedAt" : "2019-05-17T19:10:12Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      },
      {
        "id" : "b5f0ec2b-5bb3-4d7f-9003-732c066d3719",
        "parentId" : "76c28f02-043f-4a77-ad83-fe80b37dae69",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Done.",
        "createdAt" : "2019-05-17T16:04:27Z",
        "updatedAt" : "2019-05-17T19:10:12Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "f61bf61289aec3ad8e0feaddd529f5d9ba7b2dd2",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1330,1334 @@--\n-- > maintainer = $key._2 ++ $key._1\nrewriteMaintainer :: Env -> LF.Expr -> LF.Expr -> ConvertM LF.Expr\nrewriteMaintainer env key maintainer = do\n    let keyMap = buildKeyMap (removeLocations key)"
  }
]