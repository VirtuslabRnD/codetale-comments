[
  {
    "id" : "c531eb6a-586a-4cdb-93d9-822713398e91",
    "prId" : 1163,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1163",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5037742-9c01-4951-ba0a-e019fb15adad",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Since `*` has to be commutative, we could scrap the second equation. I'm not sure this is a great idea though. @neil-da?",
        "createdAt" : "2019-05-16T07:33:23Z",
        "updatedAt" : "2019-05-16T19:53:41Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b3ec6a8380b5ae386b7bea24b1b03865607c95a",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +78,82 @@--\n-- * `(*)` is distributive with respect to `(+)`, ie:\n--     `a * (b + c)` = `(a * b) + (a * c)` and `(b + c) * a` = `(b * a) + (c * a)`\nclass (Additive a, Multiplicative a) => Number a where\n  -- no methods"
  },
  {
    "id" : "165a75f3-cfed-4097-bef1-5019efe4f0c0",
    "prId" : 1163,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1163",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23788e22-c179-4b46-9963-43f08591f2b0",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "@neil-da Should we add a super class constraint `Number a` to this? What else does have a sign?",
        "createdAt" : "2019-05-16T07:34:09Z",
        "updatedAt" : "2019-05-16T19:53:41Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b3ec6a8380b5ae386b7bea24b1b03865607c95a",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +83,87 @@\n-- | The `Signed` is for the sign of a number.\nclass Signed a where\n    -- | Sign of a number.\n    -- For real numbers, the 'signum' is either `-1` (negative), `0` (zero)"
  },
  {
    "id" : "4db51837-d098-4cfd-aa16-b3728856d01c",
    "prId" : 419,
    "prUrl" : "https://github.com/digital-asset/daml/pull/419",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86449fe7-bf0c-4a79-817a-74274be84de4",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "I'd be tempted not to give a default definition. It seems odd to have a default that is partial, but all useful implementations are total.",
        "createdAt" : "2019-04-16T09:25:47Z",
        "updatedAt" : "2019-04-17T20:37:59Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      },
      {
        "id" : "b5da7d0e-9674-48e5-ac6b-8bd1629e9655",
        "parentId" : "86449fe7-bf0c-4a79-817a-74274be84de4",
        "authorId" : "c2a5fc86-d15f-4be2-b872-e38684970a45",
        "body" : "The LF-native `Int` definition is partial. Indeed, for `Multiplicative`, there is only a partial definition, but one that i consider useful. If we want to have a default complete definition, I can move it to `Fractional`, but then the `Int` definition falls out of line as it errors on negative exponents rather than giving the expected result `0`.",
        "createdAt" : "2019-04-16T09:41:24Z",
        "updatedAt" : "2019-04-17T20:37:59Z",
        "lastEditedBy" : "c2a5fc86-d15f-4be2-b872-e38684970a45",
        "tags" : [
        ]
      },
      {
        "id" : "863052b8-f0cf-41d0-9a24-bac7c3b8a173",
        "parentId" : "86449fe7-bf0c-4a79-817a-74274be84de4",
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "My point is why have a default definition at all? There's clearly variance over what it should do, which is fine, and nothing actually uses the default definition, so let's omit it.",
        "createdAt" : "2019-04-16T10:10:00Z",
        "updatedAt" : "2019-04-17T20:37:59Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9f282e69c10af63c77c3809c010f499a8be3f90",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +72,76 @@    munit : a\n    -- | `x ^ n` raises `x` to the power of `n`.\n    (^): a -> Int -> a\n\n-- | Basic numeric class."
  },
  {
    "id" : "a9cea473-a36b-48e2-ae93-3f015539eabb",
    "prId" : 419,
    "prUrl" : "https://github.com/digital-asset/daml/pull/419",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7a3dfea-2ae9-40bb-af22-98e18094f490",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm not convinced we want that. We should instead fail when the exponent is negative. This would also allow for moving the `Fractional` type class to where it came from. Any opinions @neil-da?",
        "createdAt" : "2019-04-17T13:47:58Z",
        "updatedAt" : "2019-04-17T20:37:59Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9f282e69c10af63c77c3809c010f499a8be3f90",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +122,126 @@        | n == 0 = 1.0\n        | n == 2 = x * x\n        | n < 0 = 1.0 / x ^ (negate n)\n        | n % 2 == 0 = (x ^ (n / 2)) ^ 2\n        | otherwise = x * x ^ (n - 1)"
  }
]