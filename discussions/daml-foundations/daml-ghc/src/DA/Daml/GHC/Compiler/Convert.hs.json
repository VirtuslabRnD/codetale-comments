[
  {
    "id" : "f5c14335-022a-4855-8404-4cadeca2b030",
    "prId" : 647,
    "prUrl" : "https://github.com/digital-asset/daml/pull/647",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9281fd21-6b61-4045-b9fc-9dd8c3719d3c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I kind of liked having the logic for this in a separate function. Maybe add something like `mkTupleType :: [(FieldName, LF.Type)] -> ConvertM LF.Type` that only contains the type logic of `mkRepackStruct`.",
        "createdAt" : "2019-04-24T08:51:09Z",
        "updatedAt" : "2019-04-24T09:44:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d301cd16-c3c6-4073-9c06-efc0b0d8eb07",
        "parentId" : "9281fd21-6b61-4045-b9fc-9dd8c3719d3c",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "In reality it looks less nice than I imagined. I'll leave it as is.",
        "createdAt" : "2019-04-24T08:58:28Z",
        "updatedAt" : "2019-04-24T09:44:14Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "91783220ed54e5468c1a92cdb1450daab699b8f6",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +609,613 @@            t2 <- convertType env t2\n            let fields = [(mkField f1, t1), (mkField f2, t2)]\n            tupleTyCon <- qGHC_Tuple env (mkTypeCon [\"Tuple\" ++ show (length fields)])\n            let tupleType = TypeConApp tupleTyCon (map snd fields)\n            pure $ ETmLam (varV1, TTuple fields) $ ERecCon tupleType $ zipWithFrom mkFieldProj (1 :: Int) fields"
  },
  {
    "id" : "9152cf29-a4e7-4d3b-8c0d-79bfd589a42e",
    "prId" : 574,
    "prUrl" : "https://github.com/digital-asset/daml/pull/574",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc561801-5686-434a-8bac-6ad4c9786f3a",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "If the EUpdate's aligned beneath each other i would find it more readadble",
        "createdAt" : "2019-04-17T15:27:25Z",
        "updatedAt" : "2019-04-17T18:21:58Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      },
      {
        "id" : "a35868d4-4683-4dc7-92b8-3a2690defcb6",
        "parentId" : "cc561801-5686-434a-8bac-6ad4c9786f3a",
        "authorId" : null,
        "body" : "✔️ ",
        "createdAt" : "2019-04-17T15:33:27Z",
        "updatedAt" : "2019-04-17T18:21:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "825b9042188d04bf812ad2955222e5d8e39d33dc",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +381,385 @@            --     return res\n            let archive = EUpdate $ UExercise tmplTyCon' (mkChoiceName \"Archive\") selfVar signatories mkEUnit\n            in EUpdate $ UBind (Binding (mkVar \"res\", chcReturnType) expr) $\n               EUpdate $ UBind (Binding (mkVar \"_\", TUnit) archive) $\n               EUpdate $ UPure chcReturnType (EVar $ mkVar \"res\")"
  },
  {
    "id" : "ed23c292-352d-4176-94f3-5f60c6c952cc",
    "prId" : 508,
    "prUrl" : "https://github.com/digital-asset/daml/pull/508",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "236fe21d-64ee-4c77-a60d-5f28ff3e30b9",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "It looks like this should check the module name similar to the check for `Pair` below.",
        "createdAt" : "2019-04-16T06:22:14Z",
        "updatedAt" : "2019-04-16T06:30:47Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b50c2581-85c2-460b-a1ba-c7547529b031",
        "parentId" : "236fe21d-64ee-4c77-a60d-5f28ff3e30b9",
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Half our stuff should do that... In general any use of VarIs is wrong.",
        "createdAt" : "2019-04-16T09:17:24Z",
        "updatedAt" : "2019-04-16T09:18:47Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "eaf92b94a01cfef9127618cacb514fc95e11ff03",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +569,573 @@            , retrieveByKeyKey = EVar varV1\n            }\n    go env (VarIs \"unpackPair\") (LType (StrLitTy f1) : LType (StrLitTy f2) : LType t1 : LType t2 : args)\n        = fmap (, args) $ do\n            t1 <- convertType env t1"
  },
  {
    "id" : "6bba46a2-28e1-4cff-a3ed-6887abc39c92",
    "prId" : 508,
    "prUrl" : "https://github.com/digital-asset/daml/pull/508",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07b230f9-36ab-4a5d-a556-b5f1f6c9b259",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I wonder if we should throw an error if `Pair` is not applied to `StrLitTy` instead of falling into the `otherwise` clause. I don’t think it should matter since users cannot produce use `Pair` anyway but it might make the intention of the code a bit clearer.",
        "createdAt" : "2019-04-16T06:24:43Z",
        "updatedAt" : "2019-04-16T06:30:47Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "c4d996b2-f01d-4d47-b1f1-bc01484f0024",
        "parentId" : "07b230f9-36ab-4a5d-a556-b5f1f6c9b259",
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "We could, but it's more code and makes it harder to read.",
        "createdAt" : "2019-04-16T09:17:53Z",
        "updatedAt" : "2019-04-16T09:18:47Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "eaf92b94a01cfef9127618cacb514fc95e11ff03",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +1084,1088 @@    , GHC.moduleName m == mkModuleName \"DA.Internal.LF\"\n    , getOccString t == \"Pair\"\n    , [StrLitTy f1, StrLitTy f2, t1, t2] <- ts = do\n        t1 <- convertType env t1\n        t2 <- convertType env t2"
  },
  {
    "id" : "d4b55f0a-bd11-4649-abeb-7b7365a42c19",
    "prId" : 418,
    "prUrl" : "https://github.com/digital-asset/daml/pull/418",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3153277-faad-4b9d-bdaf-6187d8aad781",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Would have been nice to get a little more details about the input structural record invariants in the comment. I assume it's `{_1 : a, _2: b, ...}`?",
        "createdAt" : "2019-04-12T09:06:34Z",
        "updatedAt" : "2019-04-12T09:06:38Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      },
      {
        "id" : "115d9cfb-9a50-44a6-9c1e-01af682e7945",
        "parentId" : "e3153277-faad-4b9d-bdaf-6187d8aad781",
        "authorId" : "d71bfc93-528f-4cb6-aac8-7df4306500ad",
        "body" : "I thought that would be obvious from the `[(FieldName, LF.Type)]` part of the type signature. I'll improve it in a followup PR.",
        "createdAt" : "2019-04-12T12:45:37Z",
        "updatedAt" : "2019-04-12T12:45:47Z",
        "lastEditedBy" : "d71bfc93-528f-4cb6-aac8-7df4306500ad",
        "tags" : [
        ]
      },
      {
        "id" : "4d9a90c9-fb82-4413-8e75-c08bb42ed47f",
        "parentId" : "e3153277-faad-4b9d-bdaf-6187d8aad781",
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Maybe it is now I look closer... but I guess i still don't know what the invariants on the field names are.",
        "createdAt" : "2019-04-12T12:47:09Z",
        "updatedAt" : "2019-04-12T12:47:13Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      },
      {
        "id" : "821b3fe7-76cd-41b0-909b-315615a5c5f6",
        "parentId" : "e3153277-faad-4b9d-bdaf-6187d8aad781",
        "authorId" : "d71bfc93-528f-4cb6-aac8-7df4306500ad",
        "body" : "The fields of the input structural record are put into the tuple in the order they appear in the list. The tuple's fields are name `_1`, `_2`, ... as usual. I'll given an example in the code.",
        "createdAt" : "2019-04-12T13:10:52Z",
        "updatedAt" : "2019-04-12T13:10:52Z",
        "lastEditedBy" : "d71bfc93-528f-4cb6-aac8-7df4306500ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "c02fd6e5fcdc3aee7f1a1821c95b2024deca90ac",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1268,1272 @@          `ETmApp` x\n\n-- | Turn the structural record referenced by `x` into a tuple from `GHC.Tuple`.\nmkRepackStruct :: Env -> [(FieldName, LF.Type)] -> ExprVarName -> ConvertM (LF.Expr, LF.Type)\nmkRepackStruct env fields x = do"
  },
  {
    "id" : "d3bd0b86-0294-4c78-8de4-2eab13cc484e",
    "prId" : 340,
    "prUrl" : "https://github.com/digital-asset/daml/pull/340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55cfaa0b-f170-416d-9432-6fc1c55be57a",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Didn't we have a helper function to test if something was a single constructor?",
        "createdAt" : "2019-04-09T17:46:47Z",
        "updatedAt" : "2019-04-09T17:46:55Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      },
      {
        "id" : "060f286f-7317-41ec-8451-c061596d4844",
        "parentId" : "55cfaa0b-f170-416d-9432-6fc1c55be57a",
        "authorId" : "d71bfc93-528f-4cb6-aac8-7df4306500ad",
        "body" : "The helper function works on the data constructor level, not the type constructor level.",
        "createdAt" : "2019-04-09T17:54:25Z",
        "updatedAt" : "2019-04-09T17:54:25Z",
        "lastEditedBy" : "d71bfc93-528f-4cb6-aac8-7df4306500ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "380229ce20d9441f07e534534ac25314da8235fa",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +571,575 @@    -- the type class for `getField`.\n    go env (VarIs \"getField\") (Type (isStrLitTy -> Just name) : Type recordType@(TypeCon recordTyCon _) : Type _fieldType : _dict : record : args)\n        | Just [_] <- tyConDataCons_maybe recordTyCon = fmap (, args) $ do\n            recordType <- convertType env recordType\n            record <- convertExpr env record"
  }
]