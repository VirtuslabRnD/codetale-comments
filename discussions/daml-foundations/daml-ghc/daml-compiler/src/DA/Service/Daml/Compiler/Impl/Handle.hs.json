[
  {
    "id" : "d82422a8-ab07-4d6e-8ee9-62beb7afe52b",
    "prId" : 1934,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3453457b-2537-490a-a065-9cfb319d278d",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "I'm starting to wonder if `runAction` should always convert `BadDependency` into a `Nothing` on its own? Or have `runActionMaybe` to encapsulate that behaviour?",
        "createdAt" : "2019-06-28T09:25:05Z",
        "updatedAt" : "2019-06-28T09:25:55Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      },
      {
        "id" : "0dc2af5f-4ffc-4dd8-b96e-b22f6ead007d",
        "parentId" : "3453457b-2537-490a-a065-9cfb319d278d",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Sounds reasonable but I also don’t really mind the `MaybeT` stuff now that I’ve gotten used to it.",
        "createdAt" : "2019-06-28T10:51:17Z",
        "updatedAt" : "2019-06-28T10:51:17Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "fe8b824e-4ab6-4a94-b3ff-03bdd2f24e9c",
        "parentId" : "3453457b-2537-490a-a065-9cfb319d278d",
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "It's irking me more every day... I guess the tables have turned. If it irks me enough I'll do the needful.",
        "createdAt" : "2019-06-28T12:15:29Z",
        "updatedAt" : "2019-06-28T12:15:29Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d72f670fc1a875254b25abf93ca03739b3dac26",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +158,162 @@        pkgName\n        sdkVersion\n    else runAction service $ runMaybeT $ do\n      pkg <- useE GeneratePackage file\n      let pkgModuleNames = S.fromList $ map T.unpack $ LF.packageModuleNames pkg"
  },
  {
    "id" : "8147eb25-3000-41e0-b95f-3ccdbb7047c9",
    "prId" : 1793,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fff23980-3049-412b-9d73-2c3893ef9337",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Why do we fail without any useful message here?",
        "createdAt" : "2019-06-21T12:52:56Z",
        "updatedAt" : "2019-06-21T12:53:13Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "a2f6402b-41a7-4ec0-bdd5-bcf052abbb17",
        "parentId" : "fff23980-3049-412b-9d73-2c3893ef9337",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We already emit the log message. There isn’t really any point in outputting it via diagnostics as well. And we are in MaybeT so the string here doesn’t matter either way.",
        "createdAt" : "2019-06-21T12:56:18Z",
        "updatedAt" : "2019-06-21T12:56:19Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "66a3140e-20bc-41f1-9955-ff475a139d82",
        "parentId" : "fff23980-3049-412b-9d73-2c3893ef9337",
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "I'd have liked it if there was a function `nothing :: MaybeT m a` to make the intent clear. `fail` with no error is just odd, and in most other contexts, would be terrible.",
        "createdAt" : "2019-06-21T13:05:24Z",
        "updatedAt" : "2019-06-21T13:05:24Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      },
      {
        "id" : "86b69181-bb15-46cf-8500-28bdee051927",
        "parentId" : "fff23980-3049-412b-9d73-2c3893ef9337",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I considered `MaybeT (pure Nothing)` but that looks awkward. `empty` is nice but also somewhat unclear so `fail \"\"` seemed like the best option.",
        "createdAt" : "2019-06-21T13:07:12Z",
        "updatedAt" : "2019-06-21T13:07:13Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "fd9eac54-73f0-4112-acc0-150301cc0628",
        "parentId" : "fff23980-3049-412b-9d73-2c3893ef9337",
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "I was about to add a github issue for adding something to `transformers`, or even a PR, but then I saw that it's on hub.darcs.net, which is a sign the project is so unmaintained i might as well not bother.",
        "createdAt" : "2019-06-21T13:11:25Z",
        "updatedAt" : "2019-06-21T13:11:25Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "381e762a5bfe0ddf68af4408be96f3b558d472dd",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +196,200 @@              \"The following modules are declared in exposed-modules but are not part of the DALF: \" <>\n              T.pack (show $ S.toList missingExposed)\n          fail \"\"\n      let dalf = encodeArchiveLazy pkg\n      -- get all dalf dependencies."
  },
  {
    "id" : "28f47f6d-9460-49ec-9745-56691c70067a",
    "prId" : 1707,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1707",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b3ad316-71fd-43cd-9595-be25bb1fd84f",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Why go via the Ide here? Seems almost overkill for parsing a module",
        "createdAt" : "2019-06-17T11:54:03Z",
        "updatedAt" : "2019-06-17T14:05:04Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      },
      {
        "id" : "ec9b73af-d10b-4273-9c02-56989f5f9aa8",
        "parentId" : "6b3ad316-71fd-43cd-9595-be25bb1fd84f",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "Seemed like the most straight forward option. Can I call `parseFile` directly without repeating a lot of work to setup state for GHC?",
        "createdAt" : "2019-06-17T12:25:24Z",
        "updatedAt" : "2019-06-17T14:05:04Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "6bfd8875-f81e-4b1c-8cfc-0c72c3ef62a7",
        "parentId" : "6b3ad316-71fd-43cd-9595-be25bb1fd84f",
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Perhaps. Perhaps not... I'm not that sure, but if it seems hard, stick with what you have.",
        "createdAt" : "2019-06-17T12:26:23Z",
        "updatedAt" : "2019-06-17T14:05:04Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c4e7e69876be18b89db41c246ef31aad2dcd83d",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +176,180 @@    -> NormalizedFilePath\n    -> ExceptT [FileDiagnostic] IO ParsedModule\nparseFile service fp = do\n    liftIO $ CompilerService.setFilesOfInterest service (S.singleton fp)\n    liftIO $ CompilerService.logDebug service $ \"Parsing: \" <> T.pack (fromNormalizedFilePath fp)"
  },
  {
    "id" : "b7fcb0da-c41c-4da8-b2e2-0a77780ae1af",
    "prId" : 1489,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1489",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cef3a23-dd50-4999-a77f-251d75d11b89",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Agreed!",
        "createdAt" : "2019-06-03T13:15:23Z",
        "updatedAt" : "2019-06-03T13:44:22Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a46b2d8b9b426b7e201afee1fde0bfd4ba9efef",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +156,160 @@            -- we can only fully initialize the IdeState once we get the\n            -- LspFuncs in the initialize callback.\n            -- We should move away from Managed (we only use it for the scenario service)\n            -- and then refactor this.\n            -> Managed (VFSHandle -> IO IdeState)"
  },
  {
    "id" : "52b98bd0-cdf2-4af7-8bb0-dad0d4b47aec",
    "prId" : 1489,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1489",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c1b5c7d-3b1e-4fae-b8ed-3dfadcbcf7de",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Would be nice to kill this Int.",
        "createdAt" : "2019-06-03T13:15:51Z",
        "updatedAt" : "2019-06-03T13:44:22Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a46b2d8b9b426b7e201afee1fde0bfd4ba9efef",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +282,286 @@    -> Maybe T.Text\n    -> IO ()\nonFileModified service fp mbContents = do\n    CompilerService.logDebug service $ \"File modified \" <> T.pack (show fp)\n    CompilerService.setBufferModified service fp mbContents"
  },
  {
    "id" : "06efacda-d07a-4864-936e-acc45014ebd4",
    "prId" : 1375,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1375",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ab50fb5-4b4c-4355-8eda-4854ecc34bca",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "It looks like the scenario service only uses the event handler to log exceptions and those are also written to the logger. So we can probably change this fairly easily to have `optScenarioService` fully control whether we start the scenario service instead of this somewhat weird behavior where it can only be used to disable but not enable the scenario service. Totally fine to do that in a separate PR.",
        "createdAt" : "2019-05-24T11:24:59Z",
        "updatedAt" : "2019-05-24T11:54:56Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "84bc3bbb-1337-4aa3-b6f7-e68080999190",
        "parentId" : "7ab50fb5-4b4c-4355-8eda-4854ecc34bca",
        "authorId" : null,
        "body" : ":+1:\r\n",
        "createdAt" : "2019-05-24T11:41:47Z",
        "updatedAt" : "2019-05-24T11:54:56Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "edffa058c14cf689cad5014010b84571f5906461",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +155,159 @@newIdeState compilerOpts mbEventHandler loggerH = do\n    mbScenarioService <-\n        for (guard (optScenarioService compilerOpts) >> mbEventHandler) $ \\eventHandler ->\n            Scenario.startScenarioService eventHandler loggerH\n"
  }
]