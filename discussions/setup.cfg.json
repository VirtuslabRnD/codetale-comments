[
  {
    "id" : "dd6c129c-825b-4588-ab05-ca4634cc9d1f",
    "prId" : 23096,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23096#pullrequestreview-165309378",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e34b7c8-f3a5-4367-a448-d5de331a9489",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think isort automatically reorganizes the code. Not sure if that's your plan for later, but I think we want to run that instead of skipping everything.",
        "createdAt" : "2018-10-12T20:19:47Z",
        "updatedAt" : "2018-10-17T13:57:30Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "64c83b9a-181e-4a67-8d7e-8234ea405f75",
        "parentId" : "3e34b7c8-f3a5-4367-a448-d5de331a9489",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "Thanks - Yes it does i could run `isort -rc pandas` to sort the entire codebase but I will go for a more incremental approach suggested by @TomAugspurger [here](https://github.com/pandas-dev/pandas/issues/23048)",
        "createdAt" : "2018-10-16T18:39:05Z",
        "updatedAt" : "2018-10-17T13:57:30Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b5f5244757c8c1efd6b82f6d10ef53124562092",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +86,90 @@skip=\n    pandas/lib.py,\n    pandas/tslib.py,\n    pandas/testing.py,\n    pandas/conftest.py,"
  },
  {
    "id" : "82b2c641-e0e7-443a-9a67-ddd83f2b955b",
    "prId" : 23764,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23764#pullrequestreview-177471365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdcd1a53-aabf-4960-b1bb-8dad5cfb98df",
        "parentId" : null,
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "Sorting frame.py seems to cause a few problems will address this in separate PR",
        "createdAt" : "2018-11-22T00:36:54Z",
        "updatedAt" : "2018-11-22T00:36:54Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fd715097302d7dec9e561111f36374c8d9a9342",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +113,117 @@skip=\n    pandas/core/api.py,\n    pandas/core/frame.py,\n    pandas/tests/test_errors.py,\n    pandas/tests/test_base.py,"
  },
  {
    "id" : "bcdefa26-ab4a-4864-bc8e-50877a7706ea",
    "prId" : 23847,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23847#pullrequestreview-180489016",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96c5aaab-b699-4592-9745-ce8b8d0c8067",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "aren't we adding the semicolon at the end then?",
        "createdAt" : "2018-11-25T22:35:58Z",
        "updatedAt" : "2018-12-02T15:31:44Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "fd322fb9-a788-4be4-8e17-862848e37cd9",
        "parentId" : "96c5aaab-b699-4592-9745-ce8b8d0c8067",
        "authorId" : "74e431be-b3bc-40dc-90fb-12bc297c2e6f",
        "body" : "ignoring `W503` allows for \r\n```\r\nx = (a.....\r\n       - b....)\r\n``` \r\nSo there may be a `\\n` before a `-`, `+` ...\r\n\r\nignoring `W504`? would enforce\r\n ```\r\nx = (a..... - \r\n       b....)\r\n``` \r\nWith a `\\n` after the `-`, `+`, ...",
        "createdAt" : "2018-11-30T15:00:40Z",
        "updatedAt" : "2018-12-02T15:31:44Z",
        "lastEditedBy" : "74e431be-b3bc-40dc-90fb-12bc297c2e6f",
        "tags" : [
        ]
      },
      {
        "id" : "ec3c1328-438d-439c-ae3e-b65a587820d7",
        "parentId" : "96c5aaab-b699-4592-9745-ce8b8d0c8067",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "the question was if you wanted to ignore the errors for the semicolon in `df.plot();` in this PR.",
        "createdAt" : "2018-11-30T23:13:28Z",
        "updatedAt" : "2018-12-02T15:31:44Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "005a4854-c61f-4b1c-bed7-dfef36e41587",
        "parentId" : "96c5aaab-b699-4592-9745-ce8b8d0c8067",
        "authorId" : "74e431be-b3bc-40dc-90fb-12bc297c2e6f",
        "body" : "No, I'd rather have it on a per file based setting. It's only useful if there are many plots in one file that create cryptic outputs. If not it's better to have it checked.",
        "createdAt" : "2018-11-30T23:32:32Z",
        "updatedAt" : "2018-12-02T15:31:44Z",
        "lastEditedBy" : "74e431be-b3bc-40dc-90fb-12bc297c2e6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3d878d97e96068e51b7e9fc996016bc311785f9",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +33,37 @@[flake8-rst]\nignore = E402,  # module level import not at top of file\n         W503,  # line break before binary operator\nexclude =\n    doc/source/whatsnew/v0.7.0.rst"
  },
  {
    "id" : "ea14c90f-ecd5-422d-aa95-f5bf57a41a21",
    "prId" : 23847,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23847#pullrequestreview-180310354",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bc770e3-86c3-461e-872b-6ec481f28ab3",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "we can do it later, but I think there are many of these that can now be removed, right?",
        "createdAt" : "2018-11-25T22:36:43Z",
        "updatedAt" : "2018-12-02T15:31:44Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "20ba9615-92d4-4662-ac56-735882b86a5d",
        "parentId" : "3bc770e3-86c3-461e-872b-6ec481f28ab3",
        "authorId" : "74e431be-b3bc-40dc-90fb-12bc297c2e6f",
        "body" : "I'd do it later after giving it a final check.\r\nSome of the files still have issues regarding PEP-8 but they have to be ignored by the newly introduced `:flake8-group:` role.\r\n\r\nI found out that if somewhere in the checked code-block is an `E999` issue (even ignored) all issues relying on AST checks like `F821` no longer are checked. It's not a problem with flake8 on python code as syntax errors are eventually fixed, but in context of documentation those issues sometimes make sense like in \r\n\r\n```python\r\n.. ipython::\r\n\r\n   @verbatim\r\n   In [1]: df2.<TAB>                   \r\n   df2.A                  df2.bool\r\n   df2.abs                df2.boxplot\r\n   df2.add                df2.C\r\n   df2.add_prefix         df2.clip\r\n```\r\n\r\nThese blocks have to be manually ignored and therefore I'm including the checks after this is merged.",
        "createdAt" : "2018-11-25T22:48:23Z",
        "updatedAt" : "2018-12-02T15:31:44Z",
        "lastEditedBy" : "74e431be-b3bc-40dc-90fb-12bc297c2e6f",
        "tags" : [
        ]
      },
      {
        "id" : "13bd3ecd-170b-4f04-9884-45b2bfabcbb5",
        "parentId" : "3bc770e3-86c3-461e-872b-6ec481f28ab3",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I'm not sure I'm following, but I wouldn't overcomplicate things. I think that could be in its own block with nothing else, and have a `noqa` for the syntax error, and I guess nothing else would be needed.\r\n\r\nOr I think the directive also has a `skip` or something like that, right?",
        "createdAt" : "2018-11-25T22:58:00Z",
        "updatedAt" : "2018-12-02T15:31:44Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "05bd6d76-9649-49c8-901e-46a23c5f4e21",
        "parentId" : "3bc770e3-86c3-461e-872b-6ec481f28ab3",
        "authorId" : "74e431be-b3bc-40dc-90fb-12bc297c2e6f",
        "body" : "Yes, however when running `flake8-rst` on the file, it looks for all the code-blocks (.. code-block::, .. ipython::), removes everything thats not code like (`>>>`, outputs, ...), and then merges everything into one big block which gets passed over to `flake8`. \r\n\r\nIf somewhere in that block is a syntax error, `flake8` stops checking for AST-related issues. putting `# noqa: E999` only prevents output, but AST checks are still broken.\r\n\r\nHowever the new `flake8` version will support to define which blocks are merged together, that way `E999` issues can be seperated from the rest of the blocks, basically creating two different checks. One with broken AST, the other with working AST. That way `F821` issues remain to be found in the rest of the file. Otherwise `flake8-rst` wouldn't output anything even when there are issues.\r\n\r\nIt's surely more complicated than just ignoring `E999`, but at least it's checking everything.\r\n\r\nflake8-rst works on the bare *.rst files, therefore `.. ipython` related skips have no effect.",
        "createdAt" : "2018-11-25T23:52:27Z",
        "updatedAt" : "2018-12-02T15:31:44Z",
        "lastEditedBy" : "74e431be-b3bc-40dc-90fb-12bc297c2e6f",
        "tags" : [
        ]
      },
      {
        "id" : "fdfdfb87-d6e3-4230-8ed4-ec6917a0fc60",
        "parentId" : "3bc770e3-86c3-461e-872b-6ec481f28ab3",
        "authorId" : "74e431be-b3bc-40dc-90fb-12bc297c2e6f",
        "body" : "Sorry didn't read it correctly:\r\n> I think that could be in its own block\r\n\r\nExactly, we could put one of these\r\n - `:flake8-group: TABOutput` + `:flake8-add-ignore: E999, E225` and later only reuse `:flake8-group: TABOutput`\r\n - `:flake8-group: None` + `# noqa: E999, E225` or  `:flake8-add-ignore: E999, E225`\r\n - `:flake8-group: Ignore` [disables checking for block]\r\n\r\n`'flake8_rst.sphinxext.custom_roles',` got added to allow these roles.\r\n\r\nI'd prefer to use a way without `# noqa` as it would get rendered in the documentation and might lead to slight confusion for readers who just use pandas and don't use `flake8` or similar.",
        "createdAt" : "2018-11-30T15:18:01Z",
        "updatedAt" : "2018-12-02T15:31:44Z",
        "lastEditedBy" : "74e431be-b3bc-40dc-90fb-12bc297c2e6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3d878d97e96068e51b7e9fc996016bc311785f9",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +89,93 @@    doc/source/timedeltas.rst\n    doc/source/timeseries.rst\n    doc/source/visualization.rst\n\n"
  },
  {
    "id" : "c29bb341-99e8-4e68-9031-5153336b7745",
    "prId" : 24182,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24182#pullrequestreview-182992832",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0116f14-b1ff-4a20-8289-f6a7bc588928",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@datapythonista why are you adding these? we *want* to error these, yes?",
        "createdAt" : "2018-12-09T19:56:41Z",
        "updatedAt" : "2018-12-09T19:56:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7e871adf-2a06-40f0-bef3-edccc3d0f095",
        "parentId" : "d0116f14-b1ff-4a20-8289-f6a7bc588928",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Not in the documentation. `flake8-rst` merges all the blocks in a single file to validate it. Meaning that if I have a block of code that shows a class definition, if we validate for those errors, we will get an error, as the class definition will be immediately after the last statement of the previous block. ",
        "createdAt" : "2018-12-09T20:06:05Z",
        "updatedAt" : "2018-12-09T20:06:05Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "cd695dc7-acef-4807-b0fa-902c3e72e4e7",
        "parentId" : "d0116f14-b1ff-4a20-8289-f6a7bc588928",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok thanks. maybe add what you just wrote in a future PR as a reader would have no idea how this works.",
        "createdAt" : "2018-12-09T20:09:59Z",
        "updatedAt" : "2018-12-09T20:09:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5b6e5b58-ad20-42cc-971f-7622087748ec",
        "parentId" : "d0116f14-b1ff-4a20-8289-f6a7bc588928",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I tried to explain in the comment before skipping the errors, but obviously not clear enough. Will add more context/info in a future PR.",
        "createdAt" : "2018-12-09T20:13:46Z",
        "updatedAt" : "2018-12-09T20:13:46Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "bde68f0174096a7d858875ca79231afbf22f6c14",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +39,43 @@ignore = E402,  # module level import not at top of file\n         W503,  # line break before binary operator\n         # Classes/functions in different blocks can generate those errors\n         E302,  # expected 2 blank lines, found 0\n         E305,  # expected 2 blank lines after class or function definition, found 0"
  },
  {
    "id" : "ec6608a2-309c-439a-930f-ff68964c7e91",
    "prId" : 25455,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25455#pullrequestreview-209130432",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89a3d674-5e5c-4f17-a129-1736cc79b283",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what i mean is, can you just run isort on these?",
        "createdAt" : "2019-02-27T19:20:25Z",
        "updatedAt" : "2019-02-27T19:20:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "332a1584-77a2-4287-8579-2fdbf6f81e83",
        "parentId" : "89a3d674-5e5c-4f17-a129-1736cc79b283",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "o i guess could be a followup",
        "createdAt" : "2019-02-27T19:20:38Z",
        "updatedAt" : "2019-02-27T19:20:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5eb04f50-b989-472a-91b6-485630c9c550",
        "parentId" : "89a3d674-5e5c-4f17-a129-1736cc79b283",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "running isort on all the `__init__.py` files gives..\r\n\r\n```\r\nImportError while loading conftest 'C:\\Users\\simon\\OneDrive\\code\\pandas-simonjayhawkins\\pandas\\conftest.py'.\r\npandas\\__init__.py:29: in <module>\r\n    import pandas.arrays\r\npandas\\arrays\\__init__.py:6: in <module>\r\n    from pandas.core.arrays import (\r\npandas\\core\\arrays\\__init__.py:4: in <module>\r\n    from .categorical import Categorical  # noqa\r\npandas\\core\\arrays\\categorical.py:33: in <module>\r\n    from pandas.core.base import NoNewAttributesMixin, PandasObject, _shared_docs\r\npandas\\core\\base.py:27: in <module>\r\n    import pandas.core.nanops as nanops\r\npandas\\core\\nanops.py:54: in <module>\r\n    set_use_bottleneck(get_option('compute.use_bottleneck'))\r\npandas\\core\\config.py:227: in __call__\r\n    return self.__func__(*args, **kwds)\r\npandas\\core\\config.py:97: in _get_option\r\n    key = _get_single_key(pat, silent)\r\npandas\\core\\config.py:83: in _get_single_key\r\n    raise OptionError('No such keys(s): {pat!r}'.format(pat=pat))\r\nE   pandas.core.config.OptionError: \"No such keys(s): 'compute.use_bottleneck'\"\r\n```\r\n\r\nso some work required to do this.",
        "createdAt" : "2019-02-27T19:22:40Z",
        "updatedAt" : "2019-02-27T19:23:38Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "3d2c5d69-0dd2-4152-9aac-525ebe5a63f5",
        "parentId" : "89a3d674-5e5c-4f17-a129-1736cc79b283",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "gotcha ok then",
        "createdAt" : "2019-02-27T19:25:41Z",
        "updatedAt" : "2019-02-27T19:25:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "60d07b7c-dc94-418a-a2fc-9c728b555bf6",
        "parentId" : "89a3d674-5e5c-4f17-a129-1736cc79b283",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "also i'm on Windows and not able to run isort 4.3.8 because of https://github.com/timothycrosley/isort/issues/835, so struggling to make progress on this.",
        "createdAt" : "2019-02-27T19:30:13Z",
        "updatedAt" : "2019-02-27T19:30:13Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "8b612d7d-8696-4107-aed6-43cbed6dc24d",
        "parentId" : "89a3d674-5e5c-4f17-a129-1736cc79b283",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, can you post an issue about this",
        "createdAt" : "2019-02-27T20:38:49Z",
        "updatedAt" : "2019-02-27T20:38:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "235e9f00-50e4-4c3e-82ec-3c1ab2a249d9",
        "parentId" : "89a3d674-5e5c-4f17-a129-1736cc79b283",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "do we need a separate issue? #23334 is still open. add to that?",
        "createdAt" : "2019-02-28T09:23:18Z",
        "updatedAt" : "2019-02-28T09:23:19Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "33fd755d-b8b0-4e81-9128-843b3a6815e1",
        "parentId" : "89a3d674-5e5c-4f17-a129-1736cc79b283",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "let's add to that one.",
        "createdAt" : "2019-02-28T15:18:15Z",
        "updatedAt" : "2019-02-28T15:18:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "674d42d91757dc9c9fd2dc57738c2285f4c319e3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +153,157 @@    asv_bench/benchmarks/strings.py\n    asv_bench/benchmarks/period.py\n    pandas/__init__.py\n    pandas/plotting/__init__.py\n    pandas/tests/extension/decimal/__init__.py"
  },
  {
    "id" : "c396fde7-d461-4e45-805d-1990f18a694b",
    "prId" : 27278,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27278#pullrequestreview-258633799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6acfc70d-5163-4c70-9c5e-74359f561e67",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "misc category, xref #26877",
        "createdAt" : "2019-07-07T16:20:24Z",
        "updatedAt" : "2019-07-08T01:15:43Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0d8e710a6949e6e0e14fee217ea99077a674e9b",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +87,91 @@omit =\n    pandas/_version.py\n# Regexes for lines to exclude from consideration\nexclude_lines =\n    # Have to re-enable the standard pragma"
  }
]