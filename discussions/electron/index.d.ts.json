[
  {
    "id" : "60bbb222-8c3b-420c-8947-383b1862bfe7",
    "prId" : 12602,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/12602#pullrequestreview-8631857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f120f40-15aa-41c3-b671-ec676430b3eb",
        "parentId" : null,
        "authorId" : "b4c2248c-2213-407e-91fb-2fd622a5fe35",
        "body" : "Is it correct that `Net` instance extends `EventEmitter`? I couldn't find that in document.\n",
        "createdAt" : "2016-11-15T03:16:42Z",
        "updatedAt" : "2016-11-15T09:01:53Z",
        "lastEditedBy" : "b4c2248c-2213-407e-91fb-2fd622a5fe35",
        "tags" : [
        ]
      },
      {
        "id" : "c685ef07-7427-4df0-a642-45c8ee42c3de",
        "parentId" : "9f120f40-15aa-41c3-b671-ec676430b3eb",
        "authorId" : "5e3c594a-b7f3-41ec-8e4d-664b73a746b0",
        "body" : "Current implementation of Net do extend NodeJS.EventEmitter, however that aspect is not documented as no-significant events are currently emitted by the net module itself. Future net module versions may eventually change that behavior.\n",
        "createdAt" : "2016-11-15T08:55:42Z",
        "updatedAt" : "2016-11-15T09:01:53Z",
        "lastEditedBy" : "5e3c594a-b7f3-41ec-8e4d-664b73a746b0",
        "tags" : [
        ]
      },
      {
        "id" : "6fce8fa4-1236-4b52-adb4-d54bec144886",
        "parentId" : "9f120f40-15aa-41c3-b671-ec676430b3eb",
        "authorId" : "b4c2248c-2213-407e-91fb-2fd622a5fe35",
        "body" : "I got it. I'm not against referring to implementation. Thanks.\n",
        "createdAt" : "2016-11-15T15:55:27Z",
        "updatedAt" : "2016-11-15T15:55:27Z",
        "lastEditedBy" : "b4c2248c-2213-407e-91fb-2fd622a5fe35",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5bef6a3c4f7f34c5208fba1a1d83efe4d71726d",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +2712,2716 @@\t * Trying to use the module before the ready event will throw an error.\n\t */\n\tinterface Net extends NodeJS.EventEmitter {\n\t\t/**\n\t\t * @param options The ClientRequest constructor options."
  },
  {
    "id" : "a54facd1-e070-4273-95e3-291619d2e903",
    "prId" : 13595,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/13595#pullrequestreview-15222229",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e08df30e-7fc1-45fa-b2f7-2ad4f83e13b7",
        "parentId" : null,
        "authorId" : "b4c2248c-2213-407e-91fb-2fd622a5fe35",
        "body" : "From the test code, should it be below? It looks that only `bookmark` is missing in current type definitions.\r\n\r\n```typescript\r\nwrite(data: {\r\n\ttext?: string;\r\n\trtf?: string;\r\n\thtml?: string;\r\n\timage?: NativeImage;\r\n\tbookmark?: string;\r\n}, type?: ClipboardType): void;\r\n```",
        "createdAt" : "2016-12-29T15:22:10Z",
        "updatedAt" : "2016-12-29T15:23:38Z",
        "lastEditedBy" : "b4c2248c-2213-407e-91fb-2fd622a5fe35",
        "tags" : [
        ]
      },
      {
        "id" : "485beedf-084a-4024-92e7-ed264b79250f",
        "parentId" : "e08df30e-7fc1-45fa-b2f7-2ad4f83e13b7",
        "authorId" : "72f12f8f-e3b7-4d85-b22d-9ff6b8d686e7",
        "body" : "The type with all optional properties is equivalent to a mere `any`, and allows to write `clipboard.write(\"test_string\")`. See the details I wrote in the first post of this PR.",
        "createdAt" : "2016-12-29T19:01:50Z",
        "updatedAt" : "2016-12-29T19:01:50Z",
        "lastEditedBy" : "72f12f8f-e3b7-4d85-b22d-9ff6b8d686e7",
        "tags" : [
        ]
      },
      {
        "id" : "494f2c30-92a4-42a7-b247-1a5014671d28",
        "parentId" : "e08df30e-7fc1-45fa-b2f7-2ad4f83e13b7",
        "authorId" : "b4c2248c-2213-407e-91fb-2fd622a5fe35",
        "body" : "I don't know why previous `write` definition allows to compile `clipboard.write(\"test_string\")` fine... It should occur an error because first argument is an object.",
        "createdAt" : "2016-12-31T01:52:30Z",
        "updatedAt" : "2016-12-31T01:52:30Z",
        "lastEditedBy" : "b4c2248c-2213-407e-91fb-2fd622a5fe35",
        "tags" : [
        ]
      },
      {
        "id" : "4760233e-9e61-416e-9f1c-3a62f31e033d",
        "parentId" : "e08df30e-7fc1-45fa-b2f7-2ad4f83e13b7",
        "authorId" : "72f12f8f-e3b7-4d85-b22d-9ff6b8d686e7",
        "body" : "Well, it appears everything in JavaScript is an object. Funny enough, you can even pass the function itself as an argument and that will still compile: `clipboard.write(clipboard.write)`.",
        "createdAt" : "2016-12-31T11:27:51Z",
        "updatedAt" : "2016-12-31T11:27:51Z",
        "lastEditedBy" : "72f12f8f-e3b7-4d85-b22d-9ff6b8d686e7",
        "tags" : [
        ]
      },
      {
        "id" : "8f180c16-e983-47e0-b541-b8e68e7a083f",
        "parentId" : "e08df30e-7fc1-45fa-b2f7-2ad4f83e13b7",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "Microsoft/TypeScript#7485",
        "createdAt" : "2017-01-04T21:16:34Z",
        "updatedAt" : "2017-01-04T21:16:34Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "d41164d9-fbde-4d53-9d41-62e0c36de815",
        "parentId" : "e08df30e-7fc1-45fa-b2f7-2ad4f83e13b7",
        "authorId" : "b4c2248c-2213-407e-91fb-2fd622a5fe35",
        "body" : "@andy-ms @M0ns1gn0r \r\n\r\nOh, I see. It's interface...",
        "createdAt" : "2017-01-04T23:36:25Z",
        "updatedAt" : "2017-01-04T23:36:25Z",
        "lastEditedBy" : "b4c2248c-2213-407e-91fb-2fd622a5fe35",
        "tags" : [
        ]
      }
    ],
    "commit" : "d996038302ef2c4ea25fe25b8ba56e524821026a",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1865,1869 @@\t\t * Writes data to the clipboard.\n\t\t */\n\t\twrite(data: { text: string; bookmark?: string; } | { rtf: string; } | { html: string; } | { image: NativeImage; }, type?: ClipboardType): void;\n\t\t/**\n\t\t * @returns An Object containing title and url keys representing the bookmark in the clipboard."
  }
]