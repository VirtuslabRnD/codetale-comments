[
  {
    "id" : "db486f49-e591-4d34-a19c-a06b4a257d39",
    "prId" : 1118,
    "prUrl" : "https://github.com/akka/alpakka/pull/1118#pullrequestreview-139147009",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52958b6f-db67-4127-99b8-044b61409b09",
        "parentId" : null,
        "authorId" : "8173970f-6a3f-4891-8394-179e8251af2d",
        "body" : "Ahh. Nice catch. :)",
        "createdAt" : "2018-07-20T12:04:23Z",
        "updatedAt" : "2018-07-20T17:30:16Z",
        "lastEditedBy" : "8173970f-6a3f-4891-8394-179e8251af2d",
        "tags" : [
        ]
      },
      {
        "id" : "48229666-6ca7-41ff-aabf-f96256940c1a",
        "parentId" : "52958b6f-db67-4127-99b8-044b61409b09",
        "authorId" : "6237e580-5c08-4259-99d5-c6d42fb50e2a",
        "body" : "I should have written also Java test from the beginning...",
        "createdAt" : "2018-07-20T17:34:29Z",
        "updatedAt" : "2018-07-20T17:34:29Z",
        "lastEditedBy" : "6237e580-5c08-4259-99d5-c6d42fb50e2a",
        "tags" : [
        ]
      }
    ],
    "commit" : "99865b9ceb4ce2f2876839721e8b3d01520b5451",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +58,62 @@  // Java-api - without passThrough\n  def create[T](id: String, source: T): IncomingMessage[T, NotUsed] =\n    IncomingUpsertMessage(id, source)\n}\n"
  },
  {
    "id" : "ba44260d-f8fb-4f3f-a827-3417584f05f5",
    "prId" : 615,
    "prUrl" : "https://github.com/akka/alpakka/pull/615#pullrequestreview-81098345",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5a2ce34-3cd8-46ae-9fca-2eb591c54c12",
        "parentId" : null,
        "authorId" : "6237e580-5c08-4259-99d5-c6d42fb50e2a",
        "body" : "Classifying successed messages and failed messages at once using `groupBy` might be better?",
        "createdAt" : "2017-12-05T02:35:43Z",
        "updatedAt" : "2017-12-14T00:14:51Z",
        "lastEditedBy" : "6237e580-5c08-4259-99d5-c6d42fb50e2a",
        "tags" : [
        ]
      },
      {
        "id" : "df4a65b0-8c4d-4609-8a97-5e7ea2c09fd6",
        "parentId" : "f5a2ce34-3cd8-46ae-9fca-2eb591c54c12",
        "authorId" : "232a7f80-e3af-46cc-8e3c-81b29e0685a1",
        "body" : "I'm not sure how to improve this one using groupBy",
        "createdAt" : "2017-12-05T08:16:51Z",
        "updatedAt" : "2017-12-14T00:14:51Z",
        "lastEditedBy" : "232a7f80-e3af-46cc-8e3c-81b29e0685a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb5570b590d3ded800cefd5a31983952ccf00293",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +124,128 @@\n        val successMsgs = messageResults.filter(_._2).map(_._1)\n        val failedMsgs = messageResults.filter(!_._2).map(_._1)\n\n        if (failedMsgs.nonEmpty && settings.retryPartialFailure && retryCount < settings.maxRetry) {"
  },
  {
    "id" : "193e306d-d23f-4022-b71d-5cfd9fd96bd9",
    "prId" : 615,
    "prUrl" : "https://github.com/akka/alpakka/pull/615#pullrequestreview-81098437",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e220cfe-0d30-48b4-8d6b-972e24a4dcb2",
        "parentId" : null,
        "authorId" : "6237e580-5c08-4259-99d5-c6d42fb50e2a",
        "body" : "It might be useful if it also has factory methods to create an instance without id for Java.\r\n```scala\r\ndef create[T](source: T): IncomingMessage[T, NotUsed] = IncomingMessage(None, source)\r\ndef create[T, C](source: T, cargo: C): IncomingMessage[T, C] =IncomingMessage(None, source, cargo)\r\n```\r\n",
        "createdAt" : "2017-12-05T02:50:33Z",
        "updatedAt" : "2017-12-14T00:14:51Z",
        "lastEditedBy" : "6237e580-5c08-4259-99d5-c6d42fb50e2a",
        "tags" : [
        ]
      },
      {
        "id" : "1192f896-9dbc-4b50-b641-6c0070a935de",
        "parentId" : "7e220cfe-0d30-48b4-8d6b-972e24a4dcb2",
        "authorId" : "232a7f80-e3af-46cc-8e3c-81b29e0685a1",
        "body" : "done",
        "createdAt" : "2017-12-05T08:17:13Z",
        "updatedAt" : "2017-12-14T00:14:51Z",
        "lastEditedBy" : "232a7f80-e3af-46cc-8e3c-81b29e0685a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb5570b590d3ded800cefd5a31983952ccf00293",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +24,28 @@import org.apache.http.util.EntityUtils\n\nobject IncomingMessage {\n  // Apply method to use when not using passThrough\n  def apply[T](id: Option[String], source: T): IncomingMessage[T, NotUsed] ="
  },
  {
    "id" : "ade1da8e-f293-4a00-be0d-056d136c52fa",
    "prId" : 221,
    "prUrl" : "https://github.com/akka/alpakka/pull/221#pullrequestreview-63586852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3130f1b0-eacf-4930-9f37-798885903c28",
        "parentId" : null,
        "authorId" : "f671ad62-946e-4691-83e4-79ee05b8b109",
        "body" : "I guess you could have used a single handler with type `getAsyncCallback[(Seq[IncomingMessage[T]], Try[Response])]` instead, but that's fine for now as well.",
        "createdAt" : "2017-09-19T08:40:53Z",
        "updatedAt" : "2017-09-19T08:46:28Z",
        "lastEditedBy" : "f671ad62-946e-4691-83e4-79ee05b8b109",
        "tags" : [
        ]
      }
    ],
    "commit" : "4116c6e9d752153448088106004ccd2c5471ac09",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +45,49 @@      private var state: State = Idle\n      private val queue = new mutable.Queue[IncomingMessage[T]]()\n      private val failureHandler = getAsyncCallback[(Seq[IncomingMessage[T]], Throwable)](handleFailure)\n      private val responseHandler = getAsyncCallback[(Seq[IncomingMessage[T]], Response)](handleResponse)\n      private var failedMessages: Seq[IncomingMessage[T]] = Nil"
  }
]