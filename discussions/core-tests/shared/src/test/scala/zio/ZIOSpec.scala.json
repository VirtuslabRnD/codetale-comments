[
  {
    "id" : "9308d61d-ea35-4ae6-a016-01f7930b0a3d",
    "prId" : 4710,
    "prUrl" : "https://github.com/zio/zio/pull/4710#pullrequestreview-599724795",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6381ea59-dfea-47da-acfb-951e06faa0d3",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "```suggestion\r\n    suite(\"cachedInvalidate\")(\r\n```",
        "createdAt" : "2021-02-26T16:13:03Z",
        "updatedAt" : "2021-02-26T16:13:04Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "2231a348c4dd0ab489cf0380a4224f33e182a9bc",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +160,164 @@      }\n    ),\n    suite(\"cachedWith\")(\n      testM(\"returns new instances after duration\") {\n        def incrementAndGet(ref: Ref[Int]): UIO[Int] = ref.updateAndGet(_ + 1)"
  },
  {
    "id" : "2921fe24-ad60-4485-bc7c-3bbb35184b45",
    "prId" : 4115,
    "prUrl" : "https://github.com/zio/zio/pull/4115#pullrequestreview-471866895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c22cfb0-eaf2-429f-aa85-79f1bff87129",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Not sure why this test isn't working on Scala.js. It completes normally if I run the tests in parallel but fails with out of memory if I run them sequentially. Maybe something about starting with a fresh fiber?",
        "createdAt" : "2020-08-19T21:13:26Z",
        "updatedAt" : "2020-08-25T16:58:50Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "1e538918-2228-49f4-9a9b-e5aca80d2554",
        "parentId" : "2c22cfb0-eaf2-429f-aa85-79f1bff87129",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Could test hypothesis with `@@ forked` to further narrow down. Good job locating the problem to this test though.",
        "createdAt" : "2020-08-20T02:27:03Z",
        "updatedAt" : "2020-08-25T16:58:51Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "cfef9b49-c128-4fcd-b68b-2b131254b552",
        "parentId" : "2c22cfb0-eaf2-429f-aa85-79f1bff87129",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Still seeing the same issue with forking both that test and all tests in the suite so still not sure what is going on here.",
        "createdAt" : "2020-08-20T18:14:25Z",
        "updatedAt" : "2020-08-25T16:58:51Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3fac45cf9f8ec359dadc1637487ba5e1d05608b",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +2282,2286 @@        } yield assert(r)(equalTo(42))\n      },\n      testM(\"deep fork/join identity\") {\n        val n = 20\n        assertM(concurrentFib(n))(equalTo(fib(n)))"
  },
  {
    "id" : "e3e6ba57-f779-42c1-9c14-f51e7087148e",
    "prId" : 4037,
    "prUrl" : "https://github.com/zio/zio/pull/4037#pullrequestreview-459646087",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f86e07bc-221a-4543-900d-dca78e0cbe29",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This is the price we pay, eh?",
        "createdAt" : "2020-08-02T12:26:56Z",
        "updatedAt" : "2020-08-02T15:20:09Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "2a8f4dbf-ed94-4b59-9074-e7cf6fe9f818",
        "parentId" : "f86e07bc-221a-4543-900d-dca78e0cbe29",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "It works fine on Scala 2.12. We don't have to pay it if https://github.com/scala/bug/issues/12104 is resolved.",
        "createdAt" : "2020-08-02T12:39:03Z",
        "updatedAt" : "2020-08-02T15:20:09Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f227401f0ee9a606e7a100c3aface01e47081487",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +828,832 @@      },\n      testM(\"empty input\") {\n        assertM(ZIO.forkAll(List.empty[ZIO[Any, Nothing, Unit]]).flatMap(_.join))(equalTo(List.empty))\n      },\n      testM(\"propagate failures\") {"
  },
  {
    "id" : "4cbc945c-62ac-4549-9e1f-69207b20caa9",
    "prId" : 3076,
    "prUrl" : "https://github.com/zio/zio/pull/3076#pullrequestreview-371452927",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc8c2f04-3fa6-4e82-b6fc-3c9bae137ab2",
        "parentId" : null,
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "Hmm, for the purpose of SemigroupK it's enough to be associative on typed error (.either)",
        "createdAt" : "2020-03-09T19:06:15Z",
        "updatedAt" : "2020-03-09T19:06:15Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      }
    ],
    "commit" : "37f9d549bcf66893647f3a6493f6421b624e5613",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +1178,1182 @@          val right = zio1 orElse (zio2 orElse zio3)\n          for {\n            left  <- left.run\n            right <- right.run\n          } yield assert(left)(equalTo(right))"
  },
  {
    "id" : "ed64ffdd-956c-45d8-9b0b-9ea91bc88c1d",
    "prId" : 2909,
    "prUrl" : "https://github.com/zio/zio/pull/2909#pullrequestreview-359349444",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "358c562f-bbd8-4d83-98e9-4f84daa331c0",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This is really nice.",
        "createdAt" : "2020-02-15T15:00:56Z",
        "updatedAt" : "2020-02-15T15:00:57Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd4cb3734c4bba97e76600c9da3e2c72a6246636",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1215,1219 @@        val loggingLayer: ZLayer[Any, Nothing, Logging] = Logging.live\n        val zio: ZIO[ZEnv with Logging, Nothing, Unit]  = ZIO.unit\n        val zio2: ZIO[ZEnv, Nothing, Unit]              = zio.provideCustomLayer(loggingLayer)\n        assertM(zio2)(anything)\n      }"
  },
  {
    "id" : "e6bf6689-6991-4e66-9d93-2abc373a3486",
    "prId" : 2884,
    "prUrl" : "https://github.com/zio/zio/pull/2884#pullrequestreview-358235397",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fe2fdd4-e556-46f0-9c4c-26b24443de75",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "❤️ 😅 ",
        "createdAt" : "2020-02-13T13:58:39Z",
        "updatedAt" : "2020-02-13T13:58:39Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "738c6a7f61c0b11400f58cfb516011fe0a715eef",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1608,1612 @@      testM(\"timeout a long computation\") {\n        val io = (clock.sleep(5.seconds) *> IO.succeedNow(true)).timeout(10.millis)\n        assertM(io.provideLayer(Clock.live))(isNone)\n      },\n      testM(\"catchAllCause\") {"
  },
  {
    "id" : "2ddc6460-a68c-421f-8183-cf242d5ce8ab",
    "prId" : 2647,
    "prUrl" : "https://github.com/zio/zio/pull/2647#pullrequestreview-348405499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13884e84-a279-48e7-9025-ee8d5dd6b810",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Why do we need to change the test here?",
        "createdAt" : "2020-01-23T00:51:11Z",
        "updatedAt" : "2020-01-26T21:28:34Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "22b9b1c0-cc57-4d2c-a4ae-00b32251f02c",
        "parentId" : "13884e84-a279-48e7-9025-ee8d5dd6b810",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Ah, I see, you are making sure that the effects aren't pre-interrupted. Makes sense.",
        "createdAt" : "2020-01-23T03:51:31Z",
        "updatedAt" : "2020-01-26T21:28:34Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "1f84fa93-6e3b-44e9-95a8-42e397a8be3b",
        "parentId" : "13884e84-a279-48e7-9025-ee8d5dd6b810",
        "authorId" : "2303f9be-956c-47b2-b012-9f9dffa4f637",
        "body" : "Yes, sadly the simple version of the test is still flaky as the fibers can be interrupted before they enter the uninterruptible region.",
        "createdAt" : "2020-01-26T21:18:11Z",
        "updatedAt" : "2020-01-26T21:28:34Z",
        "lastEditedBy" : "2303f9be-956c-47b2-b012-9f9dffa4f637",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcc8a67a782fb0fd88bda7bd3926e8eba376013d",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +554,558 @@    suite(\"foreachPar_\")(\n      testM(\"accumulates errors\") {\n        def task(started: Ref[Int], trigger: Promise[Nothing, Unit])(i: Int): IO[Int, Unit] =\n          started.update(_ + 1) >>= { count =>\n            IO.when(count == 3)(trigger.succeed(())) *> trigger.await *> IO.fail(i)"
  },
  {
    "id" : "f5180a63-eb09-45d6-bc99-2fda014251f0",
    "prId" : 2614,
    "prUrl" : "https://github.com/zio/zio/pull/2614#pullrequestreview-341646162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b04fd25-df3b-4f4f-9e0e-a446196b7ca7",
        "parentId" : null,
        "authorId" : "c9b92c27-ac07-4362-92e2-eae234a7ecf4",
        "body" : "This test will succeed when #2611 will be merged.",
        "createdAt" : "2020-01-13T05:46:09Z",
        "updatedAt" : "2020-01-13T07:18:38Z",
        "lastEditedBy" : "c9b92c27-ac07-4362-92e2-eae234a7ecf4",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac0a24324a9a987190fef6844a157d3d0d10ef67",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +731,735 @@        val nonZero     = 43\n        UIO.mergeAllPar(Nil)(zeroElement)((_, _) => nonZero).map {\n          assert(_)(equalTo(zeroElement))\n        }\n      },"
  },
  {
    "id" : "474225bd-1379-4279-b956-bd4a91816a6d",
    "prId" : 2487,
    "prUrl" : "https://github.com/zio/zio/pull/2487#pullrequestreview-334741251",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07b0cdd0-04f8-4ac7-a507-593cd2a701cb",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "I noticed at some point we did a global import of `zio.CanFail.canFail` at the top of this file. Can we please remove that and do imports for specific tests when necessary? Using that import essentially removes the functionality of `CanFail`, so we need to use it sometimes for specific tests but generally we want to keep that functionality so the compiler helps flag for us things that aren't making sense.",
        "createdAt" : "2019-12-19T16:12:11Z",
        "updatedAt" : "2019-12-19T16:35:21Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f71d9408969aeb8621d95d1f7eaeda48e66e371c",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +790,794 @@        val in = List.range(0, 10)\n        for {\n          res <- ZIO.partitionM(in)(a => ZIO.succeed(a))\n        } yield assert(res._1, isEmpty) && assert(res._2, equalTo(in))\n      },"
  },
  {
    "id" : "9472d481-e172-4216-a13f-d6268e549e36",
    "prId" : 2453,
    "prUrl" : "https://github.com/zio/zio/pull/2453#pullrequestreview-332287313",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98221b29-c886-4c4c-8164-e82d4556f4dd",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Can we add a couple more tests here for the ordering of the fold? Right now these tests would pass even if we were folding in the wrong order.",
        "createdAt" : "2019-12-15T21:07:36Z",
        "updatedAt" : "2019-12-16T15:28:28Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd7ca24aa8de3db4a219e2d3bb48b39507328c05",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +328,332 @@      }\n    ),\n    suite(\"foldRight\")(\n      testM(\"with a successful step function sums the list properly\") {\n        checkM(Gen.listOf(Gen.anyInt)) { l =>"
  },
  {
    "id" : "a8795571-fa54-487b-abbb-368d9bc8fe98",
    "prId" : 2229,
    "prUrl" : "https://github.com/zio/zio/pull/2229#pullrequestreview-318564001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "caf5e454-fd9c-46a6-aeac-b14f0996b0ce",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Does this need a ticket?",
        "createdAt" : "2019-11-18T19:09:18Z",
        "updatedAt" : "2019-11-18T19:09:19Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "2255fbb2-4402-491a-af84-65fc46216c49",
        "parentId" : "caf5e454-fd9c-46a6-aeac-b14f0996b0ce",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Opened a ticket for it here: https://github.com/zio/zio/issues/2244.",
        "createdAt" : "2019-11-18T19:11:46Z",
        "updatedAt" : "2019-11-18T19:12:31Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "81158f7f982b9b7b540f0ac3a4c9f8c1c6705374",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +767,771 @@          assert(result, isNone) // timeout happens\n        }\n      } @@ flaky,\n      testM(\"sleep 0 must return\") {\n        assertM(clock.sleep(1.nanos).provide(Clock.Live), isUnit)"
  }
]