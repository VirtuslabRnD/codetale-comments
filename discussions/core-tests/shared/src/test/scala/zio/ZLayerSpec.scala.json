[
  {
    "id" : "ea614df0-4a2a-4270-9ea5-9007050ad30d",
    "prId" : 2864,
    "prUrl" : "https://github.com/zio/zio/pull/2864#pullrequestreview-357195695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e6849ed-d955-4d31-aeed-f0ae5011771b",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Good catch. Maybe there's something we can do to make new combinators more \"obviously correct\" with respect to sharing??",
        "createdAt" : "2020-02-11T12:51:32Z",
        "updatedAt" : "2020-02-11T12:51:32Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "7a5ca121-6b70-43cc-85f7-328e551cd022",
        "parentId" : "5e6849ed-d955-4d31-aeed-f0ae5011771b",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Yes I was thinking about that too. I think like the implementation of `ZManaged` in terms of `Reservation` the underlying implementation in terms of the `MemoMap` has some unavoidable complexity so we want to get to a point where you can do almost anything in terms of a few basic combinators that make sure the right thing happens. Then the message is \"use the combinators unless you really know what you are doing\".\r\n\r\nYou can see that working in terms of methods like `map`, `update` and `set` that are all implemented directly or indirectly in terms of `>>>`. The problem for implementing `mapError` is that we can't change the error type with `>>>` or `++`.\r\n\r\nI think we might want to think about getting two two basic combinators, a more powerful version of `>>>` that lets you sequentially combine two layers getting access to either the error or success of the first layer, kind of like `foldM`, and then a parallel combinator like `++` or `+!+` that lets you combine two layers in parallel with a function. I think then you could implement everything else in terms of those and have it be \"right\".\r\n\r\nWhat do you think?",
        "createdAt" : "2020-02-11T13:32:57Z",
        "updatedAt" : "2020-02-11T13:32:57Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "ac53733a-c21b-4eb4-9c42-ba81ecd5ff3d",
        "parentId" : "5e6849ed-d955-4d31-aeed-f0ae5011771b",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I like that idea. I also think we should hide the constructor so people can _only_ use the provided methods. I'd rather users come to us and say, \"Please add a new operator\" then take the chance they get the memo map & finalizers right.",
        "createdAt" : "2020-02-11T23:37:44Z",
        "updatedAt" : "2020-02-11T23:37:44Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "d05a63b1-217d-4b89-8eef-8afb07cfbfed",
        "parentId" : "5e6849ed-d955-4d31-aeed-f0ae5011771b",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "I made the constructor private when I implemented the new encoding so it is only us who can get it wrong.",
        "createdAt" : "2020-02-12T05:24:25Z",
        "updatedAt" : "2020-02-12T05:24:25Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb7567845a1e8da1c3b894327f7c34e271dab211",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +183,187 @@      } yield assert(actual)(equalTo(expected))\n    },\n    testM(\"map does not interfere with sharing\") {\n      val expected = Vector(\n        \"Acquiring Module 1\","
  }
]