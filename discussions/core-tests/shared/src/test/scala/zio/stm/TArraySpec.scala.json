[
  {
    "id" : "48a5a51e-a8ae-4553-8c86-245d8ce1d95f",
    "prId" : 4037,
    "prUrl" : "https://github.com/zio/zio/pull/4037#pullrequestreview-459646162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0a9131c-f27e-4cf8-8f41-f117e52b7ce0",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "The old `0 until N` no longer works?",
        "createdAt" : "2020-08-02T12:27:41Z",
        "updatedAt" : "2020-08-02T15:20:09Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "4de83db5-b53f-484e-974e-78ae2b4422b3",
        "parentId" : "c0a9131c-f27e-4cf8-8f41-f117e52b7ce0",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Ranges work if it is an inclusive range but not an exclusive range. The same issue applies to `Future.traverse`. This seems like a bug. Opened an issue for it at https://github.com/scala/bug/issues/12105.",
        "createdAt" : "2020-08-02T12:40:08Z",
        "updatedAt" : "2020-08-02T15:20:09Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f227401f0ee9a606e7a100c3aface01e47081487",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +293,297 @@          tArray    <- makeStair(N).commit\n          findFiber <- tArray.findLast(_ % largePrime == 0).commit.fork\n          _         <- STM.foreach(List.range(0, N))(i => tArray.update(i, _ => 1)).commit\n          result    <- findFiber.join\n        } yield assert(result)(isSome(equalTo(largePrime * 4)) || isNone)"
  },
  {
    "id" : "d4c6e446-7788-4082-8fae-c751b1d6bd18",
    "prId" : 1688,
    "prUrl" : "https://github.com/zio/zio/pull/1688#pullrequestreview-288886073",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9195555f-6474-40e9-adeb-8d959ef2f17a",
        "parentId" : null,
        "authorId" : "ffaa477c-de5c-40a3-9935-36d821b35596",
        "body" : "This is not great too. Not sure how to improve that. The original was just\r\n```\r\n(first, result) === (0, Left(boom))\r\n```",
        "createdAt" : "2019-09-16T15:47:16Z",
        "updatedAt" : "2019-09-17T18:15:57Z",
        "lastEditedBy" : "ffaa477c-de5c-40a3-9935-36d821b35596",
        "tags" : [
        ]
      },
      {
        "id" : "6c979c3d-b072-4b51-a115-112ca76dd0ec",
        "parentId" : "9195555f-6474-40e9-adeb-8d959ef2f17a",
        "authorId" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "body" : "Looks good for me!\r\nAlternatively you could manually annotate type `assert((first, result), equalTo((0, Right(()): Either[Exception, Unit])))` but I don't find it superior in any way.\r\nMaybe there is some way of improving type inference for `equalTo`, but perhaps out of scope here.",
        "createdAt" : "2019-09-16T20:37:52Z",
        "updatedAt" : "2019-09-17T18:15:57Z",
        "lastEditedBy" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0cfe43ac0ea61e5abb2487993a17d0cd3e8b07e",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +155,159 @@              result <- tArray.transformM(a => if (a == 0) STM.succeed(42) else STM.fail(boom)).commit.either\n              first  <- tArray.array(0).get.commit\n            } yield assert(result.left.map(r => (first, r)), isLeft(equalTo((0, boom))))\n          }\n        ),"
  },
  {
    "id" : "b103cc87-518f-461f-9068-7f52f313f713",
    "prId" : 1688,
    "prUrl" : "https://github.com/zio/zio/pull/1688#pullrequestreview-289429108",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ceaf256a-7810-4ce2-9c24-323b45524642",
        "parentId" : null,
        "authorId" : "ffaa477c-de5c-40a3-9935-36d821b35596",
        "body" : "I couldn't make the new assertion `hasSize` work I get the following error:\r\n```\r\n[error] /Users/dgarcia/personal/zio/core-tests/shared/src/test/scala/zio/stm/TArraySpec.scala:48:65: type mismatch;\r\n[error]  found   : zio.test.Assertion[Iterable[Nothing]]\r\n[error]  required: zio.test.Assertion[Array[zio.stm.TRef[String]]]\r\n[error]             } yield assert(collected.array, hasSize(equalTo(0)) || hasSize(equalTo(N)))\r\n[error]                                                                 ^\r\n```",
        "createdAt" : "2019-09-17T17:32:32Z",
        "updatedAt" : "2019-09-17T18:15:57Z",
        "lastEditedBy" : "ffaa477c-de5c-40a3-9935-36d821b35596",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0cfe43ac0ea61e5abb2487993a17d0cd3e8b07e",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +46,50 @@                            case a if a.length == 11 => a\n                          }.commit\n            } yield assert(collected.array.length, equalTo(0) || equalTo(N))\n          },\n          testM(\"is safe for empty array\") {"
  },
  {
    "id" : "c9980c97-c434-4085-9b14-afdd73158feb",
    "prId" : 1688,
    "prUrl" : "https://github.com/zio/zio/pull/1688#pullrequestreview-289429404",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e61a67b6-b6f8-42eb-9ba2-492b8086b683",
        "parentId" : null,
        "authorId" : "ffaa477c-de5c-40a3-9935-36d821b35596",
        "body" : "Same here with `isEmpty` assertion.",
        "createdAt" : "2019-09-17T17:33:06Z",
        "updatedAt" : "2019-09-17T18:15:57Z",
        "lastEditedBy" : "ffaa477c-de5c-40a3-9935-36d821b35596",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0cfe43ac0ea61e5abb2487993a17d0cd3e8b07e",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +54,58 @@                            case _ => ()\n                          }.commit\n            } yield assert(collected.array.isEmpty, isTrue)\n          }\n        ),"
  }
]