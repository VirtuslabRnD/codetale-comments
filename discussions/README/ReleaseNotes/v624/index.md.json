[
  {
    "id" : "172b13a4-7182-4b47-aa67-9b47d2e342d1",
    "prId" : 6340,
    "prUrl" : "https://github.com/root-project/root/pull/6340#pullrequestreview-487724035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4f02361-0047-4fd4-92b8-5f1f6ece336b",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Suggest to mention both methods, because I think the first one might be more helpful than global control in certain situations.\r\n\r\n`tbb::task_scheduler_init`. Instead, parallelism can be controlled in two ways:\r\n- Set ROOT's parallelism level:\r\n```cpp\r\n  // Method 1:\r\n  ROOT::EnableImplicitMT(2);\r\n  ROOT::TThreadExecutor p1; // ROOT's parallelism level is initialised to 2\r\n  \r\n  // Method 2:\r\n  ROOT::TThreadExecutor p2(8); // ROOT's parallelism level is initialised to 8.\r\n```\r\n  The advantage of this method is that other TBB tasks can run concurrently with ROOT's tasks.\r\n- Set TBB's global parallelism level using `tbb::global_control`:\r\n```cpp\r\n  //tbb::task_scheduler_init init(2); // does not affect the number of threads ROOT will use anymore\r\n\r\n  tbb::global_control c(tbb::global_control::max_allowed_parallelism, 2);\r\n  ROOT::TThreadExecutor p1;  // will use 2 threads\r\n  ROOT::TThreadExecutor p2(/*nThreads=*/8); // will still use 2 threads\r\n```",
        "createdAt" : "2020-09-11T17:19:15Z",
        "updatedAt" : "2020-09-15T17:19:13Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "e863ec61-f255-4274-aa88-bdde58827826",
        "parentId" : "b4f02361-0047-4fd4-92b8-5f1f6ece336b",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "I wanted to make a suggestion, but github doesn't understand nesting of ``` for both code and the suggestion ...",
        "createdAt" : "2020-09-11T17:20:35Z",
        "updatedAt" : "2020-09-15T17:19:13Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "51c973c5-ca12-4522-bf11-b09c3d7d5b5d",
        "parentId" : "b4f02361-0047-4fd4-92b8-5f1f6ece336b",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "isn't that more for documentation than for release notes? people look at release notes to see what changed, and the behavior of `ROOT::EnableImplicitMT` didn't change.\r\n\r\nI could add a paragraph in the docs somewhere (where?) about ROOT and parallelism and point to that from the release notes.",
        "createdAt" : "2020-09-14T10:47:35Z",
        "updatedAt" : "2020-09-15T17:19:13Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "9ef0770a-12ad-4326-a790-738a478b9a9d",
        "parentId" : "b4f02361-0047-4fd4-92b8-5f1f6ece336b",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Good idea. Maybe we ask during the team meeting?",
        "createdAt" : "2020-09-14T12:56:08Z",
        "updatedAt" : "2020-09-15T17:19:13Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      }
    ],
    "commit" : "663a4655074f1dd7dbf1d1b9dd35d41317e23d72",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +55,59 @@  ROOT::TThreadExecutor p1;  // will use 2 threads\n  ROOT::TThreadExecutor p2(/*nThreads=*/8); // will still use 2 threads\n```\n\nNote that the preferred way to steer ROOT's concurrency level is still through `[ROOT::EnableImplicitMT](https://root.cern/doc/master/namespaceROOT.html#a06f2b8b216b615e5abbc872c9feff40f)` or by passing the appropriate parameter to executors' constructors, as in `[TThreadExecutor::TThreadExecutor](https://root.cern/doc/master/classROOT_1_1TThreadExecutor.html#ac7783d52c56cc7875d3954cf212247bb)`."
  },
  {
    "id" : "edeb903e-dc03-4a32-b283-059bd79ff268",
    "prId" : 6340,
    "prUrl" : "https://github.com/root-project/root/pull/6340#pullrequestreview-488866835",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e439f08b-b4f8-4a98-8375-d445520f3875",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "```suggestion\r\nNote that it is generally preferred to control ROOT's parallelism using [ROOT::EnableImplicitMT()](https://root.cern/doc/master/namespaceROOT.html#a06f2b8b216b615e5abbc872c9feff40f).\r\n```",
        "createdAt" : "2020-09-15T16:36:33Z",
        "updatedAt" : "2020-09-15T17:19:13Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      }
    ],
    "commit" : "663a4655074f1dd7dbf1d1b9dd35d41317e23d72",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +56,60 @@  ROOT::TThreadExecutor p2(/*nThreads=*/8); // will still use 2 threads\n```\n\nNote that the preferred way to steer ROOT's concurrency level is still through `[ROOT::EnableImplicitMT](https://root.cern/doc/master/namespaceROOT.html#a06f2b8b216b615e5abbc872c9feff40f)` or by passing the appropriate parameter to executors' constructors, as in `[TThreadExecutor::TThreadExecutor](https://root.cern/doc/master/classROOT_1_1TThreadExecutor.html#ac7783d52c56cc7875d3954cf212247bb)`.\n"
  },
  {
    "id" : "9871111f-bc17-4322-af6a-aecb2f681412",
    "prId" : 7263,
    "prUrl" : "https://github.com/root-project/root/pull/7263#pullrequestreview-598316802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48717f70-e61f-4c73-86d1-cbab6654e6d1",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Why do these lines need to be removed?",
        "createdAt" : "2021-02-24T22:04:55Z",
        "updatedAt" : "2021-03-15T11:26:49Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "194fda07-b126-406c-bebd-8a399b5366f2",
        "parentId" : "48717f70-e61f-4c73-86d1-cbab6654e6d1",
        "authorId" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "body" : "They're actually not removed. It's an unfortunate clash between this document using \"-\" as the list element and the github diff layout.",
        "createdAt" : "2021-02-25T08:43:31Z",
        "updatedAt" : "2021-03-15T11:26:49Z",
        "lastEditedBy" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "58246d7fcee1c977dc343682a096d3760264e2a6",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +80,84 @@- CSV files can now be opened and processed from HTTP(S) locations\n- Certain RDF-related types in the ROOT::Detail and ROOT::Internal namespaces have been renamed, most notably `RCustomColumn` is now `RDefine`. This does not impact code that only makes use of entities in the public ROOT namespace, and should not impact downstream code unless it was patching or reusing internal RDataFrame types.\n- Just-in-time compilation of string expressions passed to `Filter` and `Define` now generates functions that take fundamental types by const value (rather than by non-const reference as before). This will break code that was assigning to column values in string expressions: this is an intended side effect as we want to prevent non-expert users from performing assignments (=) rather than comparisons (==). Expert users can resort to compiled callables if they absolutely have to assign to column values (not recommended). See [ROOT-11009](https://sft.its.cern.ch/jira/browse/ROOT-11009) for further discussion.\n- RDataFrame action results are now automatically mergeable thanks to the new interface provided by `ROOT::Detail::RDF::RMergeableValue` and derived, introduced in [#5552](https://github.com/root-project/root/pull/5552). A feature originally requested with [ROOT-9869](https://sft.its.cern.ch/jira/browse/ROOT-9869), it helps streamline RDataFrame workflow in a distributed environment. Currently only a subset of RDataFrame actions have their corresponding mergeable class, but in the future it will be possible to extend it to any action through the creation of a new `RMergeableValue` derived class.\n"
  },
  {
    "id" : "b445e124-5248-4dc6-bec1-1bbb47d41bcc",
    "prId" : 7263,
    "prUrl" : "https://github.com/root-project/root/pull/7263#pullrequestreview-598324502",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d68e2c87-46a2-4fed-904d-b03aed3e8b59",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Why not \n\n```suggestion\nimport ROOT.RDF.Experimental.Distributed.Spark.RDataFrame as RDF\n```\n?",
        "createdAt" : "2021-02-24T22:13:09Z",
        "updatedAt" : "2021-03-15T11:26:49Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "ceb92c57-d9fb-46e5-93a1-61e810fad6f9",
        "parentId" : "d68e2c87-46a2-4fed-904d-b03aed3e8b59",
        "authorId" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "body" : "Long story. Short answer, we can't do it right now. Slightly longer answer, it's a bit of a mix between python packaging shenanigans and the way we expose the `ROOT` python module and the fact that it's \"submodules\" are actually cppyy namespaces.\r\n\r\nIt is possible (and I will propose a PR) to implement what you suggest, but would take some rework into PyROOT so it is left out of this first implementation for now",
        "createdAt" : "2021-02-25T08:49:50Z",
        "updatedAt" : "2021-03-15T11:26:49Z",
        "lastEditedBy" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "tags" : [
        ]
      },
      {
        "id" : "e416d017-8e55-44b6-aab1-f3646d22ae93",
        "parentId" : "d68e2c87-46a2-4fed-904d-b03aed3e8b59",
        "authorId" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "body" : "As a first hint at the problem, see this:\r\n```python\r\nvpadulan@fedorathinkpad-T550 [~]: python\r\nPython 3.8.7 (default, Jan 20 2021, 00:00:00) \r\n[GCC 10.2.1 20201125 (Red Hat 10.2.1-9)] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import ROOT.RDF\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nModuleNotFoundError: No module named 'ROOT.RDF'; 'ROOT' is not a package\r\n>>> import ROOT\r\n>>> import ROOT.RDF\r\n>>> \r\n```",
        "createdAt" : "2021-02-25T08:52:12Z",
        "updatedAt" : "2021-03-15T11:26:49Z",
        "lastEditedBy" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "58246d7fcee1c977dc343682a096d3760264e2a6",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +90,94 @@\n# Point RDataFrame calls to the Spark specific RDataFrame\nRDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame\n\n# It still accepts the same constructor arguments as traditional RDataFrame"
  },
  {
    "id" : "25d644a9-65d9-44b4-8e58-a5c40f1bd2d2",
    "prId" : 7263,
    "prUrl" : "https://github.com/root-project/root/pull/7263#pullrequestreview-612055938",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19a4604c-b8c6-4564-9e72-0e833dc1ae1b",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "extra whitespaces",
        "createdAt" : "2021-03-15T10:52:02Z",
        "updatedAt" : "2021-03-15T11:26:49Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "58246d7fcee1c977dc343682a096d3760264e2a6",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +118,122 @@- [pyspark](https://spark.apache.org/docs/latest/api/python/index.html), that in turn has its own set of dependencies:\n  - [Java](https://www.java.com/en/)\n  - [py4j](https://www.py4j.org/)\n\nTests for the Spark backend can be turned ON/OFF with the new build option `test_distrdf_pyspark` (OFF by default)."
  }
]