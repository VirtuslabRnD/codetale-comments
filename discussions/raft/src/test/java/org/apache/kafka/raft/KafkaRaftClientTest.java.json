[
  {
    "id" : "667abdf3-c3af-4f1f-9da1-d20c12390252",
    "prId" : 9476,
    "prUrl" : "https://github.com/apache/kafka/pull/9476#pullrequestreview-514955145",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "959961ef-2f17-461f-bfc0-d80e716abeb5",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "nit: it is a tad vexing to see all the `context` prefixes. I guess another option might be to define `RaftClientTestContext` as an abstract class so that the test method can define the test behavior within the scope of a subclass.\r\n\r\nFor example:\r\n```java\r\nnew RaftClientTestContext(builder) {\r\n  void run() {\r\n    assertTrue(client.isShuttingDown());\r\n    ...\r\n  }\r\n}\r\n```\r\nNot required, just an alternative to consider.",
        "createdAt" : "2020-10-21T22:43:17Z",
        "updatedAt" : "2020-10-22T22:41:50Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "41b60ce5-f7d3-49e5-b7ba-5d3b3b7d9419",
        "parentId" : "959961ef-2f17-461f-bfc0-d80e716abeb5",
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "Yeah. Let me play around with this.",
        "createdAt" : "2020-10-21T23:12:03Z",
        "updatedAt" : "2020-10-22T22:41:50Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      },
      {
        "id" : "ed227546-fe92-4dba-9d94-49857c978f59",
        "parentId" : "959961ef-2f17-461f-bfc0-d80e716abeb5",
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "I thought about this last night and hack some solutions. I wasn't very pleased with the result. Let's explore this improvement in a future PR.",
        "createdAt" : "2020-10-22T17:20:51Z",
        "updatedAt" : "2020-10-22T22:41:50Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "47c94de723519691fa9749cc21d9ef1dc65fe85f",
    "line" : 2191,
    "diffHunk" : "@@ -1,1 +1465,1469 @@\n        // We should still be running until we have had a chance to send EndQuorumEpoch\n        assertTrue(context.client.isShuttingDown());\n        assertTrue(context.client.isRunning());\n        assertFalse(shutdownFuture.isDone());"
  },
  {
    "id" : "26f7dd96-148a-4655-b17a-cba716482a22",
    "prId" : 9476,
    "prUrl" : "https://github.com/apache/kafka/pull/9476#pullrequestreview-515169384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22f2d590-5d7f-48af-88ff-cd7fa1f8d232",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "The pattern I had in mind was a little different. I was thinking something like this:\r\n\r\n```java\r\n        int localId = 0;\r\n        int otherNodeId = 1;\r\n        int epoch = 2;\r\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\r\n\r\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\r\n          .withVotedCandidate(epoch, otherNodeId)\r\n          .build()\r\n```\r\n\r\nThen we don't have the awkwardness of the partial reliance on the static `LOCAL_ID`. I like this better because the ids have to be explicitly declared in each test case, which makes it easier to follow.",
        "createdAt" : "2020-10-22T22:15:42Z",
        "updatedAt" : "2020-10-22T22:41:50Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "b6abd05a-6d01-4568-9631-3e6ff9f9ce6e",
        "parentId" : "22f2d590-5d7f-48af-88ff-cd7fa1f8d232",
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "Makes sense. I implemented this suggestion.",
        "createdAt" : "2020-10-22T22:42:09Z",
        "updatedAt" : "2020-10-22T22:42:09Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "47c94de723519691fa9749cc21d9ef1dc65fe85f",
    "line" : 427,
    "diffHunk" : "@@ -1,1 +272,276 @@\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withVotedCandidate(epoch, otherNodeId)\n            .build();\n"
  },
  {
    "id" : "d19e4201-d52a-4a34-a442-e3d7cf82b952",
    "prId" : 9871,
    "prUrl" : "https://github.com/apache/kafka/pull/9871#pullrequestreview-568660151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc85cf1c-22e7-4ca2-b087-6d8047a701fb",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Wondering whether we could copy this comment to the raft client localId field.",
        "createdAt" : "2021-01-14T21:52:29Z",
        "updatedAt" : "2021-01-15T17:31:02Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "c1de23b3-462e-430b-93a3-e64ccf2484eb",
        "parentId" : "dc85cf1c-22e7-4ca2-b087-6d8047a701fb",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Makes sense. I will move it.",
        "createdAt" : "2021-01-14T21:58:55Z",
        "updatedAt" : "2021-01-15T17:31:02Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "81313c4a8c74e76cd15c9e6ad62f109d32d25ce6",
    "line" : 448,
    "diffHunk" : "@@ -1,1 +2185,2189 @@    @Test\n    public void testObserverFetchWithNoLocalId() throws Exception {\n        // When no `localId` is defined, the client will behave as an observer.\n        // This is designed for tooling/debugging use cases.\n"
  },
  {
    "id" : "37cb2507-4258-46ed-84e0-6f1935b1b694",
    "prId" : 10510,
    "prUrl" : "https://github.com/apache/kafka/pull/10510#pullrequestreview-632842353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ee21ba4-6c00-4ef4-a7a8-b0e7b7021b0b",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "A couple other potentially interesting test cases:\r\n\r\n1. After starting in a resigned state, verify that the node will become a candidate after the election timer expires.\r\n2. Verify that we can vote for new candidates when in the resigned state after beginning shutdown.\r\n",
        "createdAt" : "2021-04-09T18:40:07Z",
        "updatedAt" : "2021-04-09T23:02:50Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "0fd75f9c-cc46-473b-9f91-48d14cbab78b",
        "parentId" : "0ee21ba4-6c00-4ef4-a7a8-b0e7b7021b0b",
        "authorId" : "12f98c82-b9ef-4668-aa6f-5a62bf3439bb",
        "body" : "Thank you for your reminder, done. PTAL again.",
        "createdAt" : "2021-04-09T23:11:07Z",
        "updatedAt" : "2021-04-09T23:11:07Z",
        "lastEditedBy" : "12f98c82-b9ef-4668-aa6f-5a62bf3439bb",
        "tags" : [
        ]
      }
    ],
    "commit" : "28d558972c38e29fe87e5ffb84987165ac06050f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +139,143 @@\n    @Test\n    public void testGrantVotesFromHigherEpochAfterResigningLeadership() throws Exception {\n        int localId = 0;\n        int remoteId = 1;"
  },
  {
    "id" : "c2a3742d-a782-4cdf-83a4-c6b12e8cbb54",
    "prId" : 10913,
    "prUrl" : "https://github.com/apache/kafka/pull/10913#pullrequestreview-690000838",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd9fef85-3ccb-4062-919f-dd3dfec40995",
        "parentId" : null,
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "Hmm. The state would never change because `poll` was never called. Maybe we should sleep for more than election timeout and poll to make sure that the resign was ignore?",
        "createdAt" : "2021-06-22T16:48:19Z",
        "updatedAt" : "2021-06-22T17:02:34Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      },
      {
        "id" : "0183dfac-05f0-47bf-a47f-aa23fc553028",
        "parentId" : "bd9fef85-3ccb-4062-919f-dd3dfec40995",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Good point.",
        "createdAt" : "2021-06-22T21:12:39Z",
        "updatedAt" : "2021-06-22T21:12:40Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "88f3e5347adb6eef8ce259b9204f90d4b891909f",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +379,383 @@        context.time.sleep(context.electionTimeoutMs() * 2);\n        context.client.poll();\n        context.assertElectedLeader(currentEpoch, localId);\n    }\n"
  },
  {
    "id" : "e8737f3a-ec41-4482-b709-2585f56c6e61",
    "prId" : 10913,
    "prUrl" : "https://github.com/apache/kafka/pull/10913#pullrequestreview-690012176",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38698c08-0952-432a-b177-9522ea70a69b",
        "parentId" : null,
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "This comment applies to a few other places.\r\n\r\nIt looks like this checks `quorumStateStore` directly. Should we check that `Listener.handleLeaderChange` is called or do we want to rely on other tests verifying that this function is called when the epoch changes?",
        "createdAt" : "2021-06-22T17:00:57Z",
        "updatedAt" : "2021-06-22T17:02:34Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      },
      {
        "id" : "ac0a06cf-4936-4d41-9a44-0af4034c3412",
        "parentId" : "38698c08-0952-432a-b177-9522ea70a69b",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "I'm inclined to do it in other tests to keep the test from getting too bloated. It looks like we do not have many tests for `handleLeaderChange` at the moment, so let me try to address the gap.",
        "createdAt" : "2021-06-22T21:20:34Z",
        "updatedAt" : "2021-06-22T21:20:35Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "258ceb48-653d-4bee-8143-deb3d2459c59",
        "parentId" : "38698c08-0952-432a-b177-9522ea70a69b",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Nevermind, it looks like we register the listener by default, so maybe I'll add some assertions here.",
        "createdAt" : "2021-06-22T21:28:18Z",
        "updatedAt" : "2021-06-22T21:28:18Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "88f3e5347adb6eef8ce259b9204f90d4b891909f",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +402,406 @@        context.pollUntilResponse();\n        context.assertSentBeginQuorumEpochResponse(Errors.NONE);\n        context.assertElectedLeader(resignedEpoch + 1, remoteId1);\n        assertEquals(new LeaderAndEpoch(OptionalInt.of(remoteId1), resignedEpoch + 1),\n            context.listener.currentLeaderAndEpoch());"
  }
]