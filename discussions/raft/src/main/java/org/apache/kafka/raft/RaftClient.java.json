[
  {
    "id" : "4d265be4-84ec-4219-aede-bbd166942a64",
    "prId" : 9418,
    "prUrl" : "https://github.com/apache/kafka/pull/9418#pullrequestreview-510688223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "908f3a74-aaa7-4393-b544-4ca0032d7462",
        "parentId" : null,
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "How about either \r\n```\r\nOptionalLong scheduleAppend(int epoch, List<T> records);\r\n```\r\nor\r\n```\r\nvoid scheduleAppend(int epoch, List<T> records) throws BusyException;\r\n```\r\n\r\nI am okay with either solution but I am wondering why did you decide to return a `null` for this case instead of throwing some exception?",
        "createdAt" : "2020-10-14T22:45:22Z",
        "updatedAt" : "2020-10-27T03:04:10Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      },
      {
        "id" : "37fa46c1-c201-44bf-b56d-0247470e723a",
        "parentId" : "908f3a74-aaa7-4393-b544-4ca0032d7462",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Yeah, this was more of a workaround until we thought of something better. The current idea we are thinking about is letting the Raft layer return a backoff time, so the type would semantically be `Either[Offset, BackoffMs]`.",
        "createdAt" : "2020-10-16T17:55:29Z",
        "updatedAt" : "2020-10-27T03:04:10Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "fac5c0a9507f9f40f99dac017242d12500a97d5d",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +70,74 @@     *         being reached).\n     */\n    Long scheduleAppend(int epoch, List<T> records);\n\n    /**"
  },
  {
    "id" : "607f4f22-2306-486d-a791-6848c008f7b8",
    "prId" : 9482,
    "prUrl" : "https://github.com/apache/kafka/pull/9482#pullrequestreview-515087361",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a63befd4-0fe5-45b1-b599-d8480e4e8777",
        "parentId" : null,
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "I think it is okay as the fix may be non-trivial but technically `scheduleAppend` will accept records even if no `Listener` has received a `handleClaim`.",
        "createdAt" : "2020-10-22T19:43:01Z",
        "updatedAt" : "2020-11-02T18:54:18Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      },
      {
        "id" : "082ad473-f811-418b-b518-fc8a6f673d77",
        "parentId" : "a63befd4-0fe5-45b1-b599-d8480e4e8777",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Yeah, I don't see a strong need to be too strict about this for now.",
        "createdAt" : "2020-10-22T20:19:13Z",
        "updatedAt" : "2020-11-02T18:54:18Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "65494771be58190214d67d2d27bdd3f853fdaa6c",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +91,95 @@     *         being reached).\n     */\n    Long scheduleAppend(int epoch, List<T> records);\n\n    /**"
  },
  {
    "id" : "3fe68779-235d-4fc9-851d-3dbeb3677769",
    "prId" : 9482,
    "prUrl" : "https://github.com/apache/kafka/pull/9482#pullrequestreview-520110313",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bb64fea-cbe4-46fc-93cc-889499d8b487",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "What about just name as `handleBecomeLeader`?",
        "createdAt" : "2020-10-29T18:06:18Z",
        "updatedAt" : "2020-11-02T18:54:18Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "1d6a8eed-86cf-4b32-8701-8dd218ac772d",
        "parentId" : "0bb64fea-cbe4-46fc-93cc-889499d8b487",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Yeah, I considered using `handleBecomeLeader` and `handleResignLeader`. In the end, I decided to use the more concise `handleClaim` and `handleResign` names which are used in the kip-500 branch. ",
        "createdAt" : "2020-10-29T21:43:05Z",
        "updatedAt" : "2020-11-02T18:54:18Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "65494771be58190214d67d2d27bdd3f853fdaa6c",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +50,54 @@         * @param epoch the claimed leader epoch\n         */\n        default void handleClaim(int epoch) {}\n\n        /**"
  },
  {
    "id" : "7fef6805-6dcd-44cc-866b-6c4eaefb65c0",
    "prId" : 9512,
    "prUrl" : "https://github.com/apache/kafka/pull/9512#pullrequestreview-543366333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e65b899-a294-4422-8e17-3859f37e18ef",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Do we assume the offset is below the high watermark?",
        "createdAt" : "2020-12-01T21:22:35Z",
        "updatedAt" : "2020-12-07T19:26:44Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "1e9ba169-3e33-4794-84c0-af389416ad33",
        "parentId" : "0e65b899-a294-4422-8e17-3859f37e18ef",
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "Is there a specific reason why you are asking this? We don't currently check for this. I will add a check for this and we can relax this later if we need to.",
        "createdAt" : "2020-12-02T01:10:12Z",
        "updatedAt" : "2020-12-07T19:26:44Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      },
      {
        "id" : "e10ce20f-f7dd-4798-b55c-78afaf7a3aa4",
        "parentId" : "0e65b899-a294-4422-8e17-3859f37e18ef",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Just curious. Thought it might be worth mentioning the expectation in the javadoc.",
        "createdAt" : "2020-12-02T21:13:40Z",
        "updatedAt" : "2020-12-07T19:26:44Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "3594bc73-a86c-4e4f-b7b9-6b18a3c835de",
        "parentId" : "0e65b899-a294-4422-8e17-3859f37e18ef",
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "Yeah. I'll create a Jira to validate the snapshot id. We should perform at least the following validations:\r\n1. it is less than the high-watermark.\r\n2. it is a valid epoch and end offset based on the log. I think we can use the leader epoch cache to check this.",
        "createdAt" : "2020-12-02T21:22:30Z",
        "updatedAt" : "2020-12-07T19:26:44Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      },
      {
        "id" : "f632ff22-7b85-4c0b-b0ab-e81babb5c36a",
        "parentId" : "0e65b899-a294-4422-8e17-3859f37e18ef",
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "Create https://issues.apache.org/jira/browse/KAFKA-10800",
        "createdAt" : "2020-12-03T01:14:34Z",
        "updatedAt" : "2020-12-07T19:26:44Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "f853c50e61e179daf239a46fd8b77bbae6eeefca",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +110,114 @@     * details on how to use this object.\n     *\n     * @param snapshotId the end offset and epoch that identifies the snapshot\n     * @return a writable snapshot\n     */"
  },
  {
    "id" : "2a071bf0-205f-4a67-a0ec-9bdc689bc29d",
    "prId" : 9881,
    "prUrl" : "https://github.com/apache/kafka/pull/9881#pullrequestreview-567803026",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32a66cc6-49ec-4dca-b6bf-a6809e74b07f",
        "parentId" : null,
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "Add a `@param` to the documentation.",
        "createdAt" : "2021-01-14T02:18:11Z",
        "updatedAt" : "2021-01-14T19:06:15Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "1735ae340894d16b87eae1c99305bc054ce8a672",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +64,68 @@    /**\n     * Initialize the client with the given Raft configuration.\n     * This should only be called once on startup.\n     *\n     * @param raftConfig the Raft quorum configuration"
  },
  {
    "id" : "0b5e0d45-4056-41f5-a0d0-e2e104d7c1b5",
    "prId" : 10113,
    "prUrl" : "https://github.com/apache/kafka/pull/10113#pullrequestreview-592709332",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8054fa9-5652-4a48-b09d-40933f73e3db",
        "parentId" : null,
        "authorId" : "e0554c25-f6f3-4e49-a325-bcc5d4dc5fb2",
        "body" : "@cmccabe Should this be a `long epoch`?  That's what `MetaLogListener.handleRenounce(long epoch)` accepts.",
        "createdAt" : "2021-02-11T22:59:17Z",
        "updatedAt" : "2021-02-18T03:32:54Z",
        "lastEditedBy" : "e0554c25-f6f3-4e49-a325-bcc5d4dc5fb2",
        "tags" : [
        ]
      },
      {
        "id" : "ea4ae705-0ddb-484a-8f10-232bbf1dfe92",
        "parentId" : "f8054fa9-5652-4a48-b09d-40933f73e3db",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "We would like to make it a long eventually.  In the Raft layer it's currently an int, so this is correct.",
        "createdAt" : "2021-02-17T23:13:41Z",
        "updatedAt" : "2021-02-18T03:32:54Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "0755d439ecef512cb5d689d52d661fd55848e424",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +61,65 @@         * @param epoch the epoch that the leader is resigning from\n         */\n        default void handleResign(int epoch) {}\n    }\n"
  },
  {
    "id" : "344af820-1584-412f-8ac6-0e75132adfcf",
    "prId" : 10705,
    "prUrl" : "https://github.com/apache/kafka/pull/10705#pullrequestreview-664719693",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4110f68-1d56-44a8-874a-f5408c6c803f",
        "parentId" : null,
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "It's fine to combine these APIs, but we need to document what happens if the current leader resigns, but we don't know who the new leader is yet. Do we get passed a LeaderAndEpoch with the current epoch + 1 and a node ID of -1? If so, do we then expect to see another LeaderAndEpoch with the current epoch + 1 and a valid node -1?\r\n\r\nIn other words, let's say node 0 is the leader and then resigns, and then node 1 becomes the leader. Does it look like this:\r\n```\r\nhandleLeaderChange(LeaderAndEpoch(nodeId=0, epoch=0))\r\nhandleLeaderChange(LeaderAndEpoch(nodeId=-1, epoch=1))\r\nhandleLeaderChange(LeaderAndEpoch(nodeId=1, epoch=1))\r\n```\r\n\r\nOr would you rather have something like this?\r\n```\r\nhandleLeaderChange(LeaderAndEpoch(nodeId=0, epoch=0))\r\nhandleLeaderChange(LeaderAndEpoch(nodeId=-1, epoch=0))\r\nhandleLeaderChange(LeaderAndEpoch(nodeId=1, epoch=1))\r\n```\r\n\r\nIt seems like the second one will break a lot of invariants, so probably should be avoided. The first one might break some invariants too, though. We'd have to look.\r\n\r\nOr you could choose to burn an epoch like this:\r\n```\r\nhandleLeaderChange(LeaderAndEpoch(nodeId=0, epoch=0))\r\nhandleLeaderChange(LeaderAndEpoch(nodeId=-1, epoch=1))\r\nhandleLeaderChange(LeaderAndEpoch(nodeId=1, epoch=2))\r\n```\r\nGiven that we only have a 31-bit epoch in the first place, that seems unwise, though.",
        "createdAt" : "2021-05-17T22:53:30Z",
        "updatedAt" : "2021-05-17T22:53:31Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "f8bbcc08-4063-4575-9665-84ec0f3d3537",
        "parentId" : "b4110f68-1d56-44a8-874a-f5408c6c803f",
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "I'll update the documentation but in Raft epochs are not guarantee to have a leader. If there is a leader for an epoch then there is one and only one leader. So that means that the client could see.\r\n```\r\nhandleLeaderChange(LeaderAndEpoch(nodeId=0, epoch=0))\r\nhandleLeaderChange(LeaderAndEpoch(nodeId=-1, epoch=1))\r\nhandleLeaderChange(LeaderAndEpoch(nodeId=1, epoch=1))\r\n```\r\nOr this for that matter\r\n```\r\nhandleLeaderChange(LeaderAndEpoch(nodeId=0, epoch=0))\r\nhandleLeaderChange(LeaderAndEpoch(nodeId=-1, epoch=1))\r\nhandleLeaderChange(LeaderAndEpoch(nodeId=-1, epoch=2))\r\nhandleLeaderChange(LeaderAndEpoch(nodeId=1, epoch=2))\r\n```",
        "createdAt" : "2021-05-17T23:31:30Z",
        "updatedAt" : "2021-05-17T23:31:30Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      },
      {
        "id" : "72b312c1-f9cb-4195-a867-2206a332d468",
        "parentId" : "b4110f68-1d56-44a8-874a-f5408c6c803f",
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "> Or you could choose to burn an epoch like this...\r\n\r\nThis is not how leader election works in Raft. When a leader fails or steps down an epoch starts without a leader, only candidate(s). If leader election succeeds for a given epoch only one leader is guaranteed to be elected for that epoch and will remain leader for the duration of that epoch.",
        "createdAt" : "2021-05-17T23:46:54Z",
        "updatedAt" : "2021-05-17T23:47:27Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      },
      {
        "id" : "001c9472-c91c-4bfe-bf7a-f23cf1ee23f0",
        "parentId" : "b4110f68-1d56-44a8-874a-f5408c6c803f",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "It sounds like the invariant here is that while `handleLeaderChange` may be called multiple times for the same epoch, only the last call will have a valid (non-negative) node id associated with it. Can you add a JavaDoc comment like this to the API?",
        "createdAt" : "2021-05-19T22:05:09Z",
        "updatedAt" : "2021-05-19T22:05:09Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "4fadde51-a7d9-4848-9c05-45561629c63f",
        "parentId" : "b4110f68-1d56-44a8-874a-f5408c6c803f",
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "Yes. I added a few more sentences to make this clear.",
        "createdAt" : "2021-05-20T18:18:02Z",
        "updatedAt" : "2021-05-20T18:18:02Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dc57d09cb99c67a452902f07cdcec3b615a88b7",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +57,61 @@        void handleSnapshot(SnapshotReader<T> reader);\n\n        /**\n         * Called on any change to leadership. This includes both when a leader is elected and\n         * when a leader steps down or fails."
  },
  {
    "id" : "cff9440f-c896-41a4-9ee3-d2da1a9c6784",
    "prId" : 10909,
    "prUrl" : "https://github.com/apache/kafka/pull/10909#pullrequestreview-718957398",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b64b98fb-29b9-4060-98cb-00cb54daadf7",
        "parentId" : null,
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "This comment also applies to the `scheduleAtomicAppend` documentation.\r\n\r\nThis is for the @return tag but we need to update the documentation about returning null.",
        "createdAt" : "2021-07-29T16:59:52Z",
        "updatedAt" : "2021-07-29T17:08:49Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      },
      {
        "id" : "dfb8bb6c-8d8f-45cb-8440-f727db376f8c",
        "parentId" : "b64b98fb-29b9-4060-98cb-00cb54daadf7",
        "authorId" : "12f98c82-b9ef-4668-aa6f-5a62bf3439bb",
        "body" : "I reworded some docs, please help to recheck again.",
        "createdAt" : "2021-07-30T10:51:39Z",
        "updatedAt" : "2021-07-30T10:51:40Z",
        "lastEditedBy" : "12f98c82-b9ef-4668-aa6f-5a62bf3439bb",
        "tags" : [
        ]
      }
    ],
    "commit" : "7426fc014915feaeaabaaf5099cceae9dd6756f7",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +146,150 @@     * @param records the list of records to append\n     * @return the expected offset of the last record if append succeed\n     * @throws org.apache.kafka.common.errors.RecordBatchTooLargeException if the size of the records is greater than the maximum\n     *         batch size; if this exception is throw none of the elements in records were\n     *         committed"
  },
  {
    "id" : "3cb80202-417b-4fd5-880d-7463981d4a30",
    "prId" : 10913,
    "prUrl" : "https://github.com/apache/kafka/pull/10913#pullrequestreview-688929259",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb934aa4-45f9-4924-9fd4-6afed9049931",
        "parentId" : null,
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "Let's add a comment that the listener can learn about the \"success\" of this operation through `handleLeaderChange`",
        "createdAt" : "2021-06-22T16:45:36Z",
        "updatedAt" : "2021-06-22T17:02:34Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "88f3e5347adb6eef8ce259b9204f90d4b891909f",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +174,178 @@     * Resign the leadership. The leader will give up its leadership in the passed epoch\n     * (if it matches the current epoch), and a new election will be held. Note that nothing\n     * prevents this node from being reelected as the leader.\n     *\n     * Notification of successful resignation can be observed through"
  }
]