[
  {
    "id" : "90305f89-2782-4d63-ab74-33cc6f402e17",
    "prId" : 10276,
    "prUrl" : "https://github.com/apache/kafka/pull/10276#pullrequestreview-615763718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f682caa-b0ec-4e4f-a2ce-08db74109eee",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "It's always been a little odd to me that `ValidOffsetAndEpoch` had different types (or kinds), including \"VALID.\" If this were scala, we would probably use case classes to represent this. The nice thing about that is that we can use different field names for each case instead of having to call it `offsetAndEpoch` in all cases. Even though we don't have anything as convenient in Java, I do wonder if it might be clearer to approximate that pattern with an interface and separate implementations for each case. For example:\r\n\r\n```java\r\ninterface ValidationResult\r\n\r\nclass OutOfRange implements ValidationResult {\r\n  OffsetAndEpoch latestSnapshotId;\r\n}\r\n\r\nclass DivergingEpoch implements ValidationResult {\r\n  OffsetAndEpoch divergingEpoch;\r\n}\r\n\r\nclass ValidOffsetAndEpoch implements ValidationResult {\r\n}\r\n```\r\n\r\nThe benefit is that we make the expectation about the `OffsetAndEpoch` in the result explicit. The downside is that we have to use `instanceof` checks for each case and we don't get any guarantees from the type system that we have handled them all. Kind of painful either way.\r\n",
        "createdAt" : "2021-03-18T00:57:53Z",
        "updatedAt" : "2021-03-18T23:27:46Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "ab5563f6-0e56-494d-bba9-acade12342ac",
        "parentId" : "9f682caa-b0ec-4e4f-a2ce-08db74109eee",
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "Yeah. What makes the suggested design pattern nice in Scala is that the companion objects for `case class` have an `unapply` method for pattern matching.\r\n\r\nFor what it is worth. I thought about this design when implementing `ValidOffsetAndEpoch` but found the current design more user friendly in Java.\r\n\r\nI am all for changing the name of `ValidOffsetAndEpoch`. I was never happy with the name.",
        "createdAt" : "2021-03-18T15:44:29Z",
        "updatedAt" : "2021-03-18T23:27:46Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      },
      {
        "id" : "564755c3-63ca-4c14-93dc-3af1885b6c33",
        "parentId" : "9f682caa-b0ec-4e4f-a2ce-08db74109eee",
        "authorId" : "2a225e30-9f0d-45bc-ab55-5afe285d3716",
        "body" : "Agree with existing design and limitations of interface compared to case classes. Java 15 has sealed classes which will be good alternative: https://openjdk.java.net/jeps/360 to interfaces as we will be limiting the extension. ",
        "createdAt" : "2021-03-18T18:58:25Z",
        "updatedAt" : "2021-03-18T23:27:46Z",
        "lastEditedBy" : "2a225e30-9f0d-45bc-ab55-5afe285d3716",
        "tags" : [
        ]
      }
    ],
    "commit" : "14718f039a46dde01a83353ec0248878eb996d36",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +20,24 @@\npublic final class ValidOffsetAndEpoch {\n    final private Kind kind;\n    final private OffsetAndEpoch offsetAndEpoch;\n"
  }
]