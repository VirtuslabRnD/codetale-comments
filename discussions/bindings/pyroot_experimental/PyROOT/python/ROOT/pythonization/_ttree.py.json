[
  {
    "id" : "da27674a-f6bb-447e-86de-bfa673144583",
    "prId" : 2476,
    "prUrl" : "https://github.com/root-project/root/pull/2476#pullrequestreview-153333668",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a8ee68f-767a-45c1-be79-5e42bb76c6b0",
        "parentId" : null,
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "More pythonic (minor detail): `if not res: ...`",
        "createdAt" : "2018-08-16T08:13:24Z",
        "updatedAt" : "2018-09-20T09:38:58Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "1eea3e38-f37e-44a7-b258-d64fecb3d4b1",
        "parentId" : "3a8ee68f-767a-45c1-be79-5e42bb76c6b0",
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "As discussed in person, it seems that it is actually recommended the way it is now:\r\nhttps://www.python.org/dev/peps/pep-0008/\r\n\r\n`if not res` would call the `__bool__` operator on `res`, so it might be actually clearer to just compare to `None`.",
        "createdAt" : "2018-09-07T13:09:21Z",
        "updatedAt" : "2018-09-20T09:38:58Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      }
    ],
    "commit" : "2eb4a65b83d2537ec46c648e12a0e1d84a6960b1",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +20,24 @@    res = SetBranchAddressPyz(self, *args)\n\n    if res is None:\n        # Fall back to the original implementation for the rest of overloads\n        res = self._OriginalSetBranchAddress(*args)"
  },
  {
    "id" : "69486ac4-ad51-4ab1-9334-175a383c8f7f",
    "prId" : 2476,
    "prUrl" : "https://github.com/root-project/root/pull/2476#pullrequestreview-153336143",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df18bee9-9418-4e35-b380-4b03370e0566",
        "parentId" : null,
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "Would it be possible by the pythonization to check that the user has provided an array of the correct type? A common pitfall is registering a `array('f', [0])` to a branch with doubles, which fails silently by writing \"wrong\" values to the registered container.",
        "createdAt" : "2018-08-16T08:21:06Z",
        "updatedAt" : "2018-09-20T09:38:58Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "2ead6eab-7ee6-4b03-89c9-4d35594fb07e",
        "parentId" : "df18bee9-9418-4e35-b380-4b03370e0566",
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "That would be nice, yes. I will check if I can easily do this from Python.",
        "createdAt" : "2018-09-07T13:16:11Z",
        "updatedAt" : "2018-09-20T09:38:58Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      }
    ],
    "commit" : "2eb4a65b83d2537ec46c648e12a0e1d84a6960b1",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +16,20 @@        raise RuntimeError(\"TTree I/O error\")\n\ndef _SetBranchAddress(self, *args):\n    # Modify the behaviour if args is (const char*, void*)\n    res = SetBranchAddressPyz(self, *args)"
  }
]