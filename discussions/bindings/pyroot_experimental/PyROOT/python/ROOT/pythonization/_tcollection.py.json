[
  {
    "id" : "9b9578f2-7258-4ad1-aaf9-aa4b8a6f467d",
    "prId" : 3298,
    "prUrl" : "https://github.com/root-project/root/pull/3298#pullrequestreview-195379994",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee6911ea-3421-4bb0-b381-d157d1620a11",
        "parentId" : null,
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "good bot!",
        "createdAt" : "2019-01-23T07:45:37Z",
        "updatedAt" : "2019-01-23T08:47:22Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcd25e301385b37e24a8f671800266998bbb5f42",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +32,36 @@    lenc = c.GetEntries()\n    it = TIter(c)\n    for i in range(lenc):\n    \tself.Add(it.Next())\n"
  },
  {
    "id" : "7e646f7a-d1de-4ac2-b0e6-cf10a97af1ee",
    "prId" : 3298,
    "prUrl" : "https://github.com/root-project/root/pull/3298#pullrequestreview-195495567",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "940cca7d-b8a9-45ed-b469-f1de70e433fe",
        "parentId" : null,
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "alignment?",
        "createdAt" : "2019-01-23T07:45:52Z",
        "updatedAt" : "2019-01-23T08:47:22Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "e3258093-9fe8-4b59-b993-6f19e411dc64",
        "parentId" : "940cca7d-b8a9-45ed-b469-f1de70e433fe",
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "Done!",
        "createdAt" : "2019-01-23T12:33:02Z",
        "updatedAt" : "2019-01-23T12:33:03Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcd25e301385b37e24a8f671800266998bbb5f42",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +18,22 @@\ndef _remove_pyz(self, o):\n\t# Parameters:\n    # - self: collection\n    # - o: object to remove from the collection"
  },
  {
    "id" : "7075170f-b41e-462c-b65e-5d79eeb3f23f",
    "prId" : 3298,
    "prUrl" : "https://github.com/root-project/root/pull/3298#pullrequestreview-195492912",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0d936d5-74c9-455e-a486-cc71286bb6fd",
        "parentId" : null,
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Maybe using range iteration (root collections have a begin and an end) is simpler?",
        "createdAt" : "2019-01-23T07:47:38Z",
        "updatedAt" : "2019-01-23T08:47:22Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "a821bb2c-5fdd-416c-becb-a9dee24083d9",
        "parentId" : "d0d936d5-74c9-455e-a486-cc71286bb6fd",
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "I am not sure what you are suggesting, how are `begin` and `end` useful from Python?",
        "createdAt" : "2019-01-23T12:25:21Z",
        "updatedAt" : "2019-01-23T12:25:21Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcd25e301385b37e24a8f671800266998bbb5f42",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +43,47 @@\tn = 0\n\n\tit = TIter(self)\n\tobj = it.Next()\n\twhile obj:"
  },
  {
    "id" : "d3803887-ff29-4109-9d80-a33205ce404f",
    "prId" : 3298,
    "prUrl" : "https://github.com/root-project/root/pull/3298#pullrequestreview-195492320",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61b08934-9789-49d8-8e73-d9f6805fb55b",
        "parentId" : null,
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Just as a curiosity: if you use just begin() and return the stl iterator, it works?",
        "createdAt" : "2019-01-23T07:51:27Z",
        "updatedAt" : "2019-01-23T08:47:22Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "3f98bcc0-7a99-4e90-95d1-418b6bc61bf2",
        "parentId" : "61b08934-9789-49d8-8e73-d9f6805fb55b",
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "You mean returning `self.begin()` here?",
        "createdAt" : "2019-01-23T12:23:52Z",
        "updatedAt" : "2019-01-23T12:23:52Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcd25e301385b37e24a8f671800266998bbb5f42",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +93,97 @@    # Returns:\n    # - TIter iterator on collection\n\treturn TIter(self)\n\n"
  },
  {
    "id" : "cd40e79a-6ee0-43aa-b88f-5d6ca54c5d8d",
    "prId" : 3298,
    "prUrl" : "https://github.com/root-project/root/pull/3298#pullrequestreview-195497377",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "852c5638-a0a1-432a-b33b-647a1c48a1f0",
        "parentId" : null,
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "```suggestion\r\n    for _ in range(lenc):\r\n```",
        "createdAt" : "2019-01-23T08:34:52Z",
        "updatedAt" : "2019-01-23T08:47:22Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "cbfce7c1-2703-439d-b508-7e8e3d6cf8ed",
        "parentId" : "852c5638-a0a1-432a-b33b-647a1c48a1f0",
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "Done!",
        "createdAt" : "2019-01-23T12:38:18Z",
        "updatedAt" : "2019-01-23T12:38:18Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcd25e301385b37e24a8f671800266998bbb5f42",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +32,36 @@    lenc = c.GetEntries()\n    it = TIter(c)\n    for i in range(lenc):\n    \tself.Add(it.Next())\n"
  },
  {
    "id" : "3c34ede7-1998-4615-86f1-d1789f1cc673",
    "prId" : 3387,
    "prUrl" : "https://github.com/root-project/root/pull/3387#pullrequestreview-202082922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9e2cd7b-4c52-42bb-9512-308eb15fdfec",
        "parentId" : null,
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "This works. Nevertheless, Python loops are known to be slow. Can we maybe express those in a way in which the C layer is directly kicking in?\r\nPerhaps this is not crucial now and here, but since we are re-writing everything...",
        "createdAt" : "2019-02-11T08:33:59Z",
        "updatedAt" : "2019-02-11T14:42:46Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "5fd56c27-7bc1-420d-a626-79358a371e4e",
        "parentId" : "c9e2cd7b-4c52-42bb-9512-308eb15fdfec",
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "I tried with a list comprehension syntax and the times are comparable (it must be doing a bytecode loop anyway). Also the `reduce` method takes more or less the same (probably because of the function calls). Any other ideas?",
        "createdAt" : "2019-02-11T12:37:49Z",
        "updatedAt" : "2019-02-11T14:42:46Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a180c0b8749a9b1ae127a9f79c96a02989979522",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +42,46 @@    n = 0\n\n    for elem in self:\n        if elem == o:\n            n += 1"
  }
]