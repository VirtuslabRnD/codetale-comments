[
  {
    "id" : "38ee6920-ae68-4f2d-b318-817dceb66aeb",
    "prId" : 2161,
    "prUrl" : "https://github.com/root-project/root/pull/2161#pullrequestreview-131198760",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "730b649e-4a1f-42ec-ab39-c5323a0bcaa8",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Could we instead of these globals have a function for each, with a function-local static, that initializes the static upon first invocation? That avoids init issues (use before init, threading issues, init dependency issues)",
        "createdAt" : "2018-06-13T08:05:30Z",
        "updatedAt" : "2018-06-22T12:37:36Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "4db13cd6-5112-4e73-b557-b1e7e5c13c45",
        "parentId" : "730b649e-4a1f-42ec-ab39-c5323a0bcaa8",
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "Yes we could do that, just want to point out that it would modify the behaviour of the extension module in a couple of ways:\r\n- Now these Python strings are created during the initialization of the extension module. If the creation of one of them fails, the module fails to initialize and we get an early error. Making their creation lazy would delay that error until some code uses them.\r\n- The Python strings are now properly cleaned (`DECREF`ed) on Python interpreter shutdown. We would not have this `DECREF` with function-local statics, but we would be closing down the interpreter anyway...",
        "createdAt" : "2018-06-20T13:50:00Z",
        "updatedAt" : "2018-06-22T12:37:36Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      },
      {
        "id" : "c7fcf834-21ed-450d-9043-7fc374f5789e",
        "parentId" : "730b649e-4a1f-42ec-ab39-c5323a0bcaa8",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "OK then these `nullptr`s are actually useful, to detect a missing module initialization / use of the module before its initialization. Good, please ignore my comment. ",
        "createdAt" : "2018-06-22T13:43:44Z",
        "updatedAt" : "2018-06-22T13:43:44Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "14429d84400bafaeb50ff48ee6ccc0e21d2de701",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@namespace PyStrings {\n\nR__EXTERN PyObject *gBranch;\nR__EXTERN PyObject *gFitFCN;\nR__EXTERN PyObject *gROOTns;"
  }
]