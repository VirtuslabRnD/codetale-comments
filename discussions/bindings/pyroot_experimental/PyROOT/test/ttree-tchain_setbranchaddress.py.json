[
  {
    "id" : "28f5eea0-bc30-4162-a7ab-4f6263712389",
    "prId" : 2656,
    "prUrl" : "https://github.com/root-project/root/pull/2656#pullrequestreview-158005380",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "858bdd29-e986-4825-8747-50cfaf5de261",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Does `ROOT` import `libcppyy`? Could this be available as `ROOT.SetOwnership` as well if the answer is yes?",
        "createdAt" : "2018-09-23T17:46:40Z",
        "updatedAt" : "2018-09-24T09:28:44Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "2f40e8ae-8ade-476f-8686-e49945f6f311",
        "parentId" : "858bdd29-e986-4825-8747-50cfaf5de261",
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "No, `ROOT` does not import `libcppyy` (from Python). The functionality in `libcppyy` is used in the experimental PyROOT from the pythonizations implemented in C++.\r\nThe `SetOwnership` method is used now in the tests to prevent ROOT and Python from doing a double delete of objects. We basically do not want cppyy proxies to try to delete their corresponding C++ objects because ROOT's TFile will do it as well. It is a temporary workaround so that we can test the pythonizations. But the ownership of objects and interferences between ROOT C++ and Python is definitely a topic we need to tackle at some point.",
        "createdAt" : "2018-09-24T07:30:19Z",
        "updatedAt" : "2018-09-24T09:28:44Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      },
      {
        "id" : "b2d4ef77-060f-4f88-b31a-5b053aa69e94",
        "parentId" : "858bdd29-e986-4825-8747-50cfaf5de261",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Ah, I see. This releases ownership from cppyy, not Python or ROOT. I thought this was disabling ROOT ownership of the objects.",
        "createdAt" : "2018-09-24T08:18:38Z",
        "updatedAt" : "2018-09-24T09:28:44Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bd71896bca2622fa479f50cc6558a8ccbe24f87",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3,7 @@\nimport ROOT\nfrom libcppyy import SetOwnership\nimport numpy as np\n"
  },
  {
    "id" : "8136683f-0171-408b-b206-5d081bb20801",
    "prId" : 2656,
    "prUrl" : "https://github.com/root-project/root/pull/2656#pullrequestreview-158006344",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2709208a-de38-409f-b1ef-afb956b4c22a",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Are docstrings in Markdown? Or will this appear as \\`stuff\\` in the documentation?",
        "createdAt" : "2018-09-23T17:49:57Z",
        "updatedAt" : "2018-09-24T09:28:44Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "e333d3a1-e069-47dc-93ff-db13477db483",
        "parentId" : "2709208a-de38-409f-b1ef-afb956b4c22a",
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "No, they are not. Here I just followed a convention of NumPy style docstrings that encloses variable/module names in backticks to do the same with this piece of code.",
        "createdAt" : "2018-09-24T07:43:23Z",
        "updatedAt" : "2018-09-24T09:28:44Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      },
      {
        "id" : "d0c48af1-12e8-4379-bc73-809dec5649ec",
        "parentId" : "2709208a-de38-409f-b1ef-afb956b4c22a",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Ok, thanks for the explanation.",
        "createdAt" : "2018-09-24T08:22:12Z",
        "updatedAt" : "2018-09-24T09:28:44Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bd71896bca2622fa479f50cc6558a8ccbe24f87",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@    references as arguments from the Python side. Example:\n    `v = ROOT.std.vector('int')()`\n    `t.SetBranchAddress(\"my_vector_branch\", v)`\n    \"\"\"\n"
  }
]