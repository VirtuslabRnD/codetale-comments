[
  {
    "id" : "cb1b5b4c-2f17-4049-b73f-6c0e3d5891f1",
    "prId" : 5325,
    "prUrl" : "https://github.com/root-project/root/pull/5325#pullrequestreview-396474729",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a4bb4c1-778b-4f80-beff-a834e7b16a6e",
        "parentId" : null,
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "This `if` relies on the fact (or implementation detail?) that Python evaluates the `if` cases from left to right. Otherwise, the `not '-n' in sys.argv` will fail with an `AttributeError`. Just to point out ;) I'm not 100% sure whether this can be regarded as safe.",
        "createdAt" : "2020-04-14T10:16:51Z",
        "updatedAt" : "2020-04-24T12:53:11Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "6c9a037e-9995-4653-8825-1abca8384824",
        "parentId" : "0a4bb4c1-778b-4f80-beff-a834e7b16a6e",
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "As per the Python documentation:\r\nhttps://docs.python.org/3/reference/expressions.html#boolean-operations\r\n\r\n```\r\nThe expression x and y first evaluates x; if x is false, its value is returned;\r\notherwise, y is evaluated and the resulting value is returned.\r\n```",
        "createdAt" : "2020-04-20T13:48:12Z",
        "updatedAt" : "2020-04-24T12:53:11Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      },
      {
        "id" : "8f968235-cef9-4886-838b-d174161c475a",
        "parentId" : "0a4bb4c1-778b-4f80-beff-a834e7b16a6e",
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "Nice! Didn't know about that!",
        "createdAt" : "2020-04-20T13:53:59Z",
        "updatedAt" : "2020-04-24T12:53:11Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      }
    ],
    "commit" : "08a89bd23d4d59b33e356f783ae9bb18881fa653",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +185,189 @@        hasargv = hasattr(sys, 'argv')\n        # -n disables the reading of the logon file, just like with root\n        if hasargv and not '-n' in sys.argv and not self.PyConfig.DisableRootLogon:\n            file_path = os.path.expanduser('~/.rootlogon.py')\n            if os.path.exists(file_path):"
  },
  {
    "id" : "0f5f485e-aae7-4be9-8bef-2a59892d1941",
    "prId" : 5373,
    "prUrl" : "https://github.com/root-project/root/pull/5373#pullrequestreview-395561674",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "828e648b-12d6-4aaa-943f-7030708ef945",
        "parentId" : null,
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "Just a small detail, what is the endianess here? I suppose there is a sensible default, though I woudl check.",
        "createdAt" : "2020-04-17T12:27:00Z",
        "updatedAt" : "2020-04-17T12:27:00Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "3cee4d5c-cf3e-43ff-9dcc-72751b60855e",
        "parentId" : "828e648b-12d6-4aaa-943f-7030708ef945",
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "https://docs.python.org/3/library/struct.html",
        "createdAt" : "2020-04-17T12:27:04Z",
        "updatedAt" : "2020-04-17T12:27:04Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "beec67e7-b9a4-44c1-9f7c-e1c60e62eea9",
        "parentId" : "828e648b-12d6-4aaa-943f-7030708ef945",
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "Thanks for the heads up, the documentation says:\r\n```\r\nBy default, C types are represented in the machineâ€™s native format\r\nand byte order, and properly aligned by skipping pad bytes if necessary\r\n(according to the rules used by the C compiler).\r\n```\r\nSo when storing the long long with the address it will just pick the machine's default :smile: ",
        "createdAt" : "2020-04-17T15:37:48Z",
        "updatedAt" : "2020-04-17T15:38:06Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      }
    ],
    "commit" : "05bc8c29c6f6cf34e0b7420b83e3d80f81b4b31f",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +88,92 @@        import struct\n        ad = self.addressof(*args)\n        return bytearray(struct.pack('q', ad))\n\n    def _set_import_hook(self):"
  },
  {
    "id" : "9aab970a-6157-4572-8b1a-594bc14bc0f1",
    "prId" : 5429,
    "prUrl" : "https://github.com/root-project/root/pull/5429#pullrequestreview-399776967",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "166c2896-efdc-42cf-bd5a-01637bc5b245",
        "parentId" : null,
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "Nice! :)",
        "createdAt" : "2020-04-24T09:15:38Z",
        "updatedAt" : "2020-04-24T12:26:19Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      }
    ],
    "commit" : "186057abb33245c2bfb249816436f975a347bf97",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +92,96 @@\n        # Create a buffer (LowLevelView) from address\n        return CreateBufferFromAddress(addr)\n\n    def _set_import_hook(self):"
  }
]