[
  {
    "id" : "bcc575f5-6e45-435f-8f54-0a0e635e46a6",
    "prId" : 6496,
    "prUrl" : "https://github.com/root-project/root/pull/6496#pullrequestreview-499252354",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c7cf4d6-8eec-4a60-992c-08bebe8ddc38",
        "parentId" : null,
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "Looks good @stwunsch ! So only `asarray` adopts now and `array` copies?",
        "createdAt" : "2020-09-30T09:02:21Z",
        "updatedAt" : "2020-09-30T09:02:21Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      },
      {
        "id" : "263faa31-a82a-4051-8e01-1ca0760dadc8",
        "parentId" : "5c7cf4d6-8eec-4a60-992c-08bebe8ddc38",
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "I've checked the adoption when we put this into legacy pyroot, but we haven't had a test for it. For some reason it seems that the `numpy.array` constructor does not adopt anymore. I'm pretty sure it did before! However, `np.asarray` does and we check this now.",
        "createdAt" : "2020-09-30T09:35:38Z",
        "updatedAt" : "2020-09-30T09:35:38Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      }
    ],
    "commit" : "746e1700eeab09d8213b75fcb5d48f058bf8d35b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +77,81 @@        cpp_reference = result_ptrs[column].GetValue()\n        if hasattr(cpp_reference, \"__array_interface__\"):\n            tmp = numpy.asarray(cpp_reference) # This adopts the memory of the C++ object.\n            py_arrays[column] = ndarray(tmp, result_ptrs[column])\n        else:"
  },
  {
    "id" : "9859e8fc-621f-4139-9bab-3972016ca758",
    "prId" : 6521,
    "prUrl" : "https://github.com/root-project/root/pull/6521#pullrequestreview-500882451",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66a0629b-8c48-4a24-b458-81dfb94c9f49",
        "parentId" : null,
        "authorId" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "body" : "```suggestion\r\n    if not isinstance(columns, list):\r\n```\r\nIf we want to check that the user passes a list I'd say this is better.",
        "createdAt" : "2020-10-01T09:15:44Z",
        "updatedAt" : "2020-10-01T09:15:45Z",
        "lastEditedBy" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "tags" : [
        ]
      },
      {
        "id" : "a218a89c-ac42-4354-a230-b546bda0387b",
        "parentId" : "66a0629b-8c48-4a24-b458-81dfb94c9f49",
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "I thought about this but in python a lot of objects can be iterable. Also, a list is not a tuple, just for example see here:\r\n\r\n```python\r\n>>> isinstance([], list)\r\nTrue\r\n>>> isinstance((), list)\r\nFalse\r\n```",
        "createdAt" : "2020-10-02T06:23:48Z",
        "updatedAt" : "2020-10-02T06:23:48Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1590e1d29937ce6b69ca8343f973f4ec082183a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +51,55 @@    \"\"\"\n    # Sanitize input arguments\n    if isinstance(columns, str):\n        raise TypeError(\"The columns argument requires a list of strings\")\n    if isinstance(exclude, str):"
  }
]