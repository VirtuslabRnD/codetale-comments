[
  {
    "id" : "83a55315-84bf-4132-b855-1ab64b21ff4d",
    "prId" : 6054,
    "prUrl" : "https://github.com/root-project/root/pull/6054#pullrequestreview-453137437",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "144788fd-4fe2-4491-88b7-ded9b52acc56",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "This assumes `-Dsoversion=OFF` and will miss links to the actual library (i.e. `.so.6.xx.yy` extension). It will likely not work with `-Dsoversion=ON` which should be used when distributing ROOT binaries to avoid mixing up versions at runtime.",
        "createdAt" : "2020-07-21T08:39:07Z",
        "updatedAt" : "2020-08-17T11:10:23Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "8deb9777-458f-4872-94aa-67ff3b55d90a",
        "parentId" : "144788fd-4fe2-4491-88b7-ded9b52acc56",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Also, as I've mentioned before, it would be much better to fix the backend library loader from cppyy to look into ROOT's libdir as well instead of creating symlinks. This only hides the root cause, which is that the loader fails to find the library. There is [code for it already in cppyy](https://github.com/root-project/root/blob/7987937edab455b6e9119e887e09de522bbfab63/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py#L21-L47), it just needs some adjustments to find the libraries.",
        "createdAt" : "2020-07-21T08:44:50Z",
        "updatedAt" : "2020-08-17T11:10:23Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "8273d5fd-4720-4e0c-b3fd-bac33a9756ff",
        "parentId" : "144788fd-4fe2-4491-88b7-ded9b52acc56",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "@etejedor I cannot make a decision on this, up to you",
        "createdAt" : "2020-07-21T09:22:04Z",
        "updatedAt" : "2020-08-17T11:10:23Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "f77d1b2f-bf46-4812-8f21-490cc09bfe49",
        "parentId" : "144788fd-4fe2-4491-88b7-ded9b52acc56",
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "I would try to avoid patching cppyy, if possible. That brings us further away from building on top of upstream cppyy. Is there any strong reason against using the symlinks?",
        "createdAt" : "2020-07-21T09:28:22Z",
        "updatedAt" : "2020-08-17T11:10:23Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      },
      {
        "id" : "381e31fa-8cb7-476f-81da-f3636c9dd93a",
        "parentId" : "144788fd-4fe2-4491-88b7-ded9b52acc56",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Well, the versioned links are a good reason. Also, cppyy is already patched in any case, and this is a patch that should be easy to upstream, as it's needed by cppyy itself. All that's needed is to check in `root-config --libdir` when loading libraries, should be an easy patch.",
        "createdAt" : "2020-07-21T11:15:27Z",
        "updatedAt" : "2020-08-17T11:10:23Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "5492f4be-3680-453a-92ba-7a1e4c3ce833",
        "parentId" : "144788fd-4fe2-4491-88b7-ded9b52acc56",
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "IIUC the patch you are proposing would make cppyy look into the ROOT lib dir for its libraries. I don't see why such a patch would be needed by cppyy and it is very unlikely that it is accepted upstream.\r\n\r\nCould you elaborate more on the versioned links reason?\r\n",
        "createdAt" : "2020-07-21T12:43:37Z",
        "updatedAt" : "2020-08-17T11:10:23Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      },
      {
        "id" : "ef64de23-7347-4454-8520-a2eb57958f6c",
        "parentId" : "144788fd-4fe2-4491-88b7-ded9b52acc56",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "When you use `-Dsoversion=ON` the real library file is e.g., `libXXX.so.6.23.01` so just linking the `.so` may cause failures.",
        "createdAt" : "2020-07-21T14:50:47Z",
        "updatedAt" : "2020-08-17T11:10:23Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "48d0d742-6db4-4318-a20d-0976ac124d45",
        "parentId" : "144788fd-4fe2-4491-88b7-ded9b52acc56",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "> I don't see why such a patch would be needed by cppyy\r\n\r\nCppyy needs to load its \"mini ROOT\", including libCore (see my link from above). So it does need to look into ROOT library directory, especially if that's where `libcppyy_backend` is going to be installed. Enrico also mentioned that cppyy cannot find headers if installed in `/usr/include/ROOT`, which is another thing that may be worth investigating and fixing.\r\n\r\nAnyway, since my comments don't seem to have any effect in changing your minds from symlinking, I will just get out of the way and let you guys decide what you prefer to do.",
        "createdAt" : "2020-07-21T14:58:04Z",
        "updatedAt" : "2020-08-17T11:10:23Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "170d2dae-515e-4b74-b9ff-60d5ed8cd72d",
        "parentId" : "144788fd-4fe2-4491-88b7-ded9b52acc56",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "(I tried to use `$<TARGET_FILE_NAME:${libname}>` instead of hard-coding `lib${libname}.so` but cmake is very picky about where generator expressions can appear and I could not make it work. so another way to fix the problem with `-Dsoversion=ON` might be to use the actual target file name, which cmake knows, if someone knows how)",
        "createdAt" : "2020-07-21T14:58:30Z",
        "updatedAt" : "2020-08-17T11:10:23Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "f8f20948-779c-43d4-9a06-9b277b384411",
        "parentId" : "144788fd-4fe2-4491-88b7-ded9b52acc56",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "Patching cppyy vs symlinking: I don't have a strong opinion.\r\n\r\nMaking sure things work with `-Dsoversion=ON`: I think it's a must before this gets merged.\r\nSo I checked. With `-Dsoversion=ON`, the situation on Debian is the following:\r\n\r\n```\r\nrroot@b3180b9a8bd1:~# ls -l /usr/lib/x86_64-linux-gnu/libcppyy*\r\nlrwxrwxrwx 1 root root      19 Jul 19 16:42 /usr/lib/x86_64-linux-gnu/libcppyy3_7.so -> libcppyy3_7.so.6.23\r\nlrwxrwxrwx 1 root root      22 Jul 19 16:42 /usr/lib/x86_64-linux-gnu/libcppyy3_7.so.6.23 -> libcppyy3_7.so.6.23.01\r\n-rw-r--r-- 1 root root 1088256 Jul 20 09:39 /usr/lib/x86_64-linux-gnu/libcppyy3_7.so.6.23.01\r\nlrwxrwxrwx 1 root root      27 Jul 19 16:42 /usr/lib/x86_64-linux-gnu/libcppyy_backend3_7.so -> libcppyy_backend3_7.so.6.23\r\nlrwxrwxrwx 1 root root      30 Jul 19 16:42 /usr/lib/x86_64-linux-gnu/libcppyy_backend3_7.so.6.23 -> libcppyy_backend3_7.so.6.23.01\r\n-rw-r--r-- 1 root root  192920 Jul 20 09:39 /usr/lib/x86_64-linux-gnu/libcppyy_backend3_7.so.6.23.01\r\n\r\n```\r\n\r\nso `libcppyy3_7.so` is _also_ there.",
        "createdAt" : "2020-07-21T15:08:02Z",
        "updatedAt" : "2020-08-17T11:10:23Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "dcc840b1-c27b-4c82-8bc3-6286693f3c2e",
        "parentId" : "144788fd-4fe2-4491-88b7-ded9b52acc56",
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "> Cppyy needs to load its \"mini ROOT\", including libCore (see my link from above). So it does need to look into ROOT library directory, especially if that's where libcppyy_backend is going to be installed.\r\n\r\nWhen installed alone, Cppyy puts its mini ROOT libraries (libCore.so, etc.) in `site-packages/cppyy_backend/lib`, and that's where cppyy looks. Our case is different, since those libraries are ours and they are installed elsewhere (not in the Python directories). But that case is not relevant for cppyy, that is why I said the patch would not make it upstream.\r\n\r\n> Enrico also mentioned that cppyy cannot find headers if installed in /usr/include/ROOT, which is another thing that may be worth investigating and fixing.\r\n\r\nThere is no reason why vanilla cppyy would need to find its headers in `/usr/include/ROOT`, since that is not a standard directory. The headers it needs (and that it installs) are not ROOT's, and it looks for them in `/usr/include/CPyCppyy`. A solution would be to install them there.\r\n\r\nIt is not at all that we don't want to change our mind about the symlinks, but this is a solution that can potentially work and we are discussing its pros/cons. I appreciate your feedback as always.\r\n",
        "createdAt" : "2020-07-21T15:13:06Z",
        "updatedAt" : "2020-08-17T11:10:23Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      },
      {
        "id" : "7778f0b1-abb6-44ad-bf1f-7c7422090136",
        "parentId" : "144788fd-4fe2-4491-88b7-ded9b52acc56",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "`-Dsoversion=ON` is not broken as far as I can tell (tested on debian stable), and from what I gather from the conversation patching cppyy to find things in ROOT directories is not desired. marking this as resolved.",
        "createdAt" : "2020-07-22T09:13:05Z",
        "updatedAt" : "2020-08-17T11:10:23Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "53bd6a560ee66a5558f7df82f777915c827aa550",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +51,55 @@            ${CMAKE_INSTALL_FULL_LIBDIR}/lib${libname}.so\\\n            ${CMAKE_INSTALL_FULL_PYTHONDIR}/lib${libname}.so)\")\n  endif()\n\n  # Compile .py files"
  }
]