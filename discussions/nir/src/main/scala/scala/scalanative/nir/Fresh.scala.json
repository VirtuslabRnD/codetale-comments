[
  {
    "id" : "74f59505-bf0d-4050-8a18-44b762e4f057",
    "prId" : 941,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/941#pullrequestreview-56919478",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0073ddd3-0ae4-4309-b4f7-0c4e658df115",
        "parentId" : null,
        "authorId" : "8ea77260-a6ff-49da-9900-245920bdc998",
        "body" : "Just to be sure, the policy is that we don't really care about binary / source compatibility of the classes that we define? We just want to not break NIR files, right?",
        "createdAt" : "2017-08-17T12:23:13Z",
        "updatedAt" : "2017-08-17T14:04:46Z",
        "lastEditedBy" : "8ea77260-a6ff-49da-9900-245920bdc998",
        "tags" : [
        ]
      },
      {
        "id" : "69b5c7fe-c457-472b-8522-c9c43f306339",
        "parentId" : "0073ddd3-0ae4-4309-b4f7-0c4e658df115",
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "At the moment we don't guarantee binary compatibility of the tools, only of the libraries in NIR. ",
        "createdAt" : "2017-08-17T13:12:12Z",
        "updatedAt" : "2017-08-17T14:04:46Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      }
    ],
    "commit" : "a709724cf4de8b8970c8beed3039e4efe70c6929",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +8,12 @@    start += 1\n    val value = start\n    Local(value)\n  }\n}"
  },
  {
    "id" : "5079ed1e-f05f-4723-a1b2-4112b9364a83",
    "prId" : 941,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/941#pullrequestreview-56925909",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e436a7e6-d367-4e47-83f7-4e47423413e0",
        "parentId" : null,
        "authorId" : "8ea77260-a6ff-49da-9900-245920bdc998",
        "body" : "My understanding is that:\r\n - We do this to be able to deterministically generate an instance of `Fresh` for a given  `Define`.\r\n - Because things are run in a non-deterministic order, we can't easily give a unique, deterministic number to each instance of `Fresh`.\r\n - This introduces a full pass over all the instructions of all `Define`s at the beginning of every pass.\r\n\r\nIf I've understood that correctly, couldn't we derive a unique, deterministic prefix from the `Define`? Or is the cost of this traversal negligible?",
        "createdAt" : "2017-08-17T13:04:33Z",
        "updatedAt" : "2017-08-17T14:04:46Z",
        "lastEditedBy" : "8ea77260-a6ff-49da-9900-245920bdc998",
        "tags" : [
        ]
      },
      {
        "id" : "a94fc4ce-31d2-4a24-a0cc-b4d337ce6d5a",
        "parentId" : "e436a7e6-d367-4e47-83f7-4e47423413e0",
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "It seems like performance overhead is negligible: \r\n\r\noptimizeNIR on unit-tests, 5 runs of the optimizer since jvm start, before:\r\n\r\n```\r\n\r\n[info] Optimizing (2814 ms)\r\n[info] Optimizing (2056 ms)\r\n[info] Optimizing (1648 ms)\r\n[info] Optimizing (1729 ms)\r\n[info] Optimizing (2055 ms)\r\n```\r\n\r\nafter:\r\n```\r\n[info] Optimizing (2801 ms)\r\n[info] Optimizing (2059 ms)\r\n[info] Optimizing (1763 ms)\r\n[info] Optimizing (1686 ms)\r\n[info] Optimizing (1682 ms)\r\n```",
        "createdAt" : "2017-08-17T13:32:15Z",
        "updatedAt" : "2017-08-17T14:04:46Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      },
      {
        "id" : "69f73847-b67a-4efa-8de8-33389cb4db56",
        "parentId" : "e436a7e6-d367-4e47-83f7-4e47423413e0",
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "Prefixes seems to be an overdesign, we don't need more than an integer to identify a local within a method.",
        "createdAt" : "2017-08-17T13:33:34Z",
        "updatedAt" : "2017-08-17T14:04:46Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      }
    ],
    "commit" : "a709724cf4de8b8970c8beed3039e4efe70c6929",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +30,34 @@    }\n    new Fresh(max)\n  }\n}"
  }
]