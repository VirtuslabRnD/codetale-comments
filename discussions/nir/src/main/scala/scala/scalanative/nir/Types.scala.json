[
  {
    "id" : "173432de-9490-46b0-a4a4-a6df5001fa75",
    "prId" : 422,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/422#pullrequestreview-11292492",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33bd81b3-201e-4ec9-adb3-7b91b0b75267",
        "parentId" : null,
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "This one should go straight to `object Type`, no need for extra top-level definition just to hold this map. ",
        "createdAt" : "2016-12-04T10:58:16Z",
        "updatedAt" : "2016-12-04T14:09:51Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a2ed7b4c3e4b42d35c150b63ec06e0c55e52ec",
    "line" : null,
    "diffHunk" : "@@ -1,1 +51,55 @@  final case class Module(name: Global) extends RefKind with Named\n\n  val unbox = Map[Type, Type](\n    Type.Class(Global.Top(\"java.lang.Boolean\"))               -> Type.Bool,\n    Type.Class(Global.Top(\"java.lang.Character\"))             -> Type.I16,"
  },
  {
    "id" : "0d137aea-a421-48ce-a94a-8ddeb19f90a2",
    "prId" : 299,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/299#pullrequestreview-2921051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0986d82b-98f8-45c5-8961-279fc98e5651",
        "parentId" : null,
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "Another thing that would be good to add here is `isExtern` boolean flag to the function type. This will make easy to fix #122 afterwards. \n",
        "createdAt" : "2016-10-05T13:53:12Z",
        "updatedAt" : "2016-10-07T15:13:44Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      },
      {
        "id" : "ddf9b730-a771-426a-957a-e9d7c544a8f9",
        "parentId" : "0986d82b-98f8-45c5-8961-279fc98e5651",
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "Thinking about it some more: More generally `isExtern` is probably a special case of calling convention (with variants c and fast calling conventions), similarly to how `sret` and `byval` are variants of passing conventions. Having a simple sealed hiearchy for each (`CallConv` and `PassConv`)  seems to be a good idea. \n",
        "createdAt" : "2016-10-05T14:02:33Z",
        "updatedAt" : "2016-10-07T15:13:44Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      },
      {
        "id" : "f75091a2-8a25-442b-83c4-a1f7bb2189f7",
        "parentId" : "0986d82b-98f8-45c5-8961-279fc98e5651",
        "authorId" : "6a0630b2-961c-4e36-9286-4fd4ecb5bc7a",
        "body" : "Do you think calling convention should be added as part of this pull request, or should it be added later on?\n",
        "createdAt" : "2016-10-05T14:09:10Z",
        "updatedAt" : "2016-10-07T15:13:44Z",
        "lastEditedBy" : "6a0630b2-961c-4e36-9286-4fd4ecb5bc7a",
        "tags" : [
        ]
      },
      {
        "id" : "139a3253-48fe-4fbf-95c0-4d38543ba326",
        "parentId" : "0986d82b-98f8-45c5-8961-279fc98e5651",
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "Might be added later on. It's fine both ways.\n",
        "createdAt" : "2016-10-05T14:14:07Z",
        "updatedAt" : "2016-10-07T15:13:44Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e51aaa66d4adda5a01656b8098d0a84be3b2ccb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +39,43 @@\n  final case class Array(ty: Type, n: Int)              extends Type\n  final case class Function(args: Seq[Arg], ret: Type)  extends Type\n  final case class Struct(name: Global, tys: Seq[Type]) extends Type with Named\n"
  }
]