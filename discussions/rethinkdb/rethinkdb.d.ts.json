[
  {
    "id" : "a32e3104-646d-4bb0-b933-4323db09e186",
    "prId" : 11529,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/11529#pullrequestreview-2009633",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de6fb59d-78a4-4ddc-853d-a5d4495d9620",
        "parentId" : null,
        "authorId" : "78366e07-0d30-4781-a100-141b8fa21c2e",
        "body" : "@alexgorbatchev  this `T` cannot be inferred from anything unless user has provided it via type annotation on parameter which means that user has to either write type argument explicitly `each<Foo>((err, v) => ...)` or specify type annotation on the parameter: `each((err, v: Foo) => ...)`. Just curious is this the intended behavior? \n",
        "createdAt" : "2016-09-28T05:32:34Z",
        "updatedAt" : "2016-09-28T05:33:28Z",
        "lastEditedBy" : "78366e07-0d30-4781-a100-141b8fa21c2e",
        "tags" : [
        ]
      },
      {
        "id" : "53296baf-91f8-4c1a-9a24-fa63f38acd7a",
        "parentId" : "de6fb59d-78a4-4ddc-853d-a5d4495d9620",
        "authorId" : "d8204532-0bd4-43c0-ab43-71166275aec4",
        "body" : "@vladima Thank you very much for taking time to review this PR! I'm not completely clear about your question :(\n\nMy intent is to allow support for typed `each` method in addition to untyped, eg:\n\n```\ncursor.each<IMyRowType>((err: Error, row: IMyRowType) => ...);\n```\n\nIs this a wrong way to approach this?\n",
        "createdAt" : "2016-09-28T16:15:57Z",
        "updatedAt" : "2016-09-28T16:16:26Z",
        "lastEditedBy" : "d8204532-0bd4-43c0-ab43-71166275aec4",
        "tags" : [
        ]
      },
      {
        "id" : "350e31c1-11b4-440a-8195-b70a650414bc",
        "parentId" : "de6fb59d-78a4-4ddc-853d-a5d4495d9620",
        "authorId" : "78366e07-0d30-4781-a100-141b8fa21c2e",
        "body" : "no, it is fine, just want to be sure that this is the intention\n",
        "createdAt" : "2016-09-28T19:16:43Z",
        "updatedAt" : "2016-09-28T19:16:43Z",
        "lastEditedBy" : "78366e07-0d30-4781-a100-141b8fa21c2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "317be6bc69da5f69b9517f1ff4c7908745dd5592",
    "line" : null,
    "diffHunk" : "@@ -1,1 +37,41 @@        hasNext(): boolean;\n        each(cb: (err: Error, row: any) => void, done?: () => void): void;\n        each<T>(cb: (err: Error, row: T) => void, done?: () => void): void;\n        each(cb: (err: Error, row: any) => boolean, done?: () => void): void; // returning false stops iteration\n        each<T>(cb: (err: Error, row: T) => boolean, done?: () => void): void; // returning false stops iteration"
  }
]