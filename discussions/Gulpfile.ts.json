[
  {
    "id" : "898d9f3b-1dc0-451f-a266-278b44cb5b5a",
    "prId" : 18772,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18772#pullrequestreview-65360417",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71a3a6ac-28ee-4568-bf1d-f6cd162d21d6",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "should be `\"test\"` not `\"tests\"`",
        "createdAt" : "2017-09-26T20:28:33Z",
        "updatedAt" : "2017-09-26T21:45:23Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "fcf59d46-89a5-4529-bad4-4fad9b6b72d7",
        "parentId" : "71a3a6ac-28ee-4568-bf1d-f6cd162d21d6",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "or ... maybe gulp allows all prefixes?",
        "createdAt" : "2017-09-26T20:29:15Z",
        "updatedAt" : "2017-09-26T21:45:23Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "023a3743-4703-453d-9d46-8acad065dc39",
        "parentId" : "71a3a6ac-28ee-4568-bf1d-f6cd162d21d6",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "In `gulp`, `\"tests\"`, `\"test\"`, and `\"t\"` are all aliased to `\"tests\"` using the opt parsing library we use.",
        "createdAt" : "2017-09-26T21:00:39Z",
        "updatedAt" : "2017-09-26T21:45:23Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "09bf31969672b83af7780083a1de15235e6055eb",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +980,984 @@\ngulp.task(\"tsc-instrumented\", \"Builds an instrumented tsc.js - run with --test=[testname]\", [\"local\", loggedIOJsPath, instrumenterJsPath, servicesFile], (done) => {\n    const test = cmdLineOptions[\"tests\"] || \"iocapture\";\n    exec(host, [instrumenterJsPath, \"record\", test, builtLocalCompiler], done, done);\n});"
  },
  {
    "id" : "886ef91d-5dd5-4312-9edc-6350bd08f63f",
    "prId" : 18702,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18702#pullrequestreview-64719330",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab6b6743-ad67-4379-bf80-91ed646dfc9b",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Rather than building the script in the gulpfile, can we just `import` the typescript directly, and call a function it exports (instead of shelling out)? We could do this with our other scripts in the `Gulpfile` to cut away some cruft, too. ",
        "createdAt" : "2017-09-22T22:57:18Z",
        "updatedAt" : "2017-10-02T23:29:23Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "8bd8243b-899b-4e60-9738-ab1f786a698d",
        "parentId" : "ab6b6743-ad67-4379-bf80-91ed646dfc9b",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "are we doing this anywhere else in gulpFile? i tried to stay close to the Jake file really. i am not a gulp user :)",
        "createdAt" : "2017-09-22T23:09:49Z",
        "updatedAt" : "2017-10-02T23:29:23Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "16ecec4b-3c2e-45ca-8abf-5cf1311f823e",
        "parentId" : "ab6b6743-ad67-4379-bf80-91ed646dfc9b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "We were doing it for the old parallel runner, though I've removed it since it's in the harness now. It's no big deal; could just be a little cleaner-feeling, since then there'd be no (visible) compilation step for the script. Doesn't matter much, since we need to keep the compilation step in the `Jakefile` anyway.",
        "createdAt" : "2017-09-22T23:17:17Z",
        "updatedAt" : "2017-10-02T23:29:23Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "10f5accfbde4a7b641ba88bbc2f16f84b7ad5b00",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +373,377 @@const generateLocalizedDiagnosticMessagesTs = path.join(scriptsDirectory, \"generateLocalizedDiagnosticMessages.ts\");\n\ngulp.task(generateLocalizedDiagnosticMessagesJs, /*help*/ false, [], () => {\n    const settings: tsc.Settings = getCompilerSettings({\n        target: \"es5\","
  },
  {
    "id" : "e68d5bfe-db05-44d1-9a47-39f851ebda55",
    "prId" : 12346,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12346#pullrequestreview-17309863",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c5a89e5-3b2c-4932-bd9c-d6f894669d5d",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "why not use an arrow function here? #Closed",
        "createdAt" : "2017-01-17T23:44:05Z",
        "updatedAt" : "2017-02-17T01:31:33Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "9b4c2efb-3bc7-4106-8e9d-089e763a4f3f",
        "parentId" : "9c5a89e5-3b2c-4932-bd9c-d6f894669d5d",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Consistency with the surrounding code.",
        "createdAt" : "2017-01-18T19:49:20Z",
        "updatedAt" : "2017-02-17T01:31:33Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "11f58ea2f0c193780a660602bb040514c46f5fba",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +143,147 @@];\n\nconst esnextLibrarySourceMap = esnextLibrarySource.map(function (source) {\n    return { target: \"lib.\" + source, sources: [\"header.d.ts\", source] };\n});"
  },
  {
    "id" : "e64ce1bf-d0f8-4345-8a94-a39db34bfc85",
    "prId" : 11290,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11290#pullrequestreview-2746548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6ec7dab-a5d3-4ead-a4f1-9cebccccf4c7",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "This line should be `testProject()`. I'll make another PR for that.\n",
        "createdAt" : "2016-10-04T16:04:54Z",
        "updatedAt" : "2016-10-04T16:04:55Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "872809722f3192bdf8680b63d7cb2d2bc0e53a25",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +730,734 @@        .pipe(newer(\"built/local/bundle.js\"))\n        .pipe(sourcemaps.init())\n        .pipe(testProject)\n        .pipe(through2.obj((file, enc, next) => {\n            const originalMap = file.sourceMap;"
  },
  {
    "id" : "5caccf0c-0e99-4839-b3c2-4d5dcc365c99",
    "prId" : 10459,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df0367c0-4ad4-4819-bcc1-c3c3d73a5059",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Is this related?\n",
        "createdAt" : "2016-08-21T16:47:11Z",
        "updatedAt" : "2016-08-22T14:27:56Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "fec72a45-6cf1-4962-b2ff-8809b55aed91",
        "parentId" : "df0367c0-4ad4-4819-bcc1-c3c3d73a5059",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "opps I am using mac and the machine time out. I can roll back though would love to keep it so I can run on my mac :smile_cat: \n",
        "createdAt" : "2016-08-22T14:19:18Z",
        "updatedAt" : "2016-08-22T14:27:56Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "197f34f6dcd083892ca9ede276e6322bb910540a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +552,556 @@}\n\nlet testTimeout = 40000;\nfunction runConsoleTests(defaultReporter: string, runInParallel: boolean, done: (e?: any) => void) {\n    const lintFlag = cmdLineOptions[\"lint\"];"
  },
  {
    "id" : "cf3b1d94-b371-48a9-8154-8342b30c5bd5",
    "prId" : 9068,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c728237f-b262-4add-885c-294b81ccc907",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "seems like this could be refactored with some comparison function _cmp_ into 4 cases: \n\n```\n  | cmp(src,dst) \n  | every(cmp(src), dst) \n  | every(flip(cmp)(dst), src) \n  | every(uncurry(cmp), zip(src, dst))\nwhere cmp src dst = ...\n```\n",
        "createdAt" : "2016-06-10T16:10:22Z",
        "updatedAt" : "2016-06-23T17:12:25Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "84825038-643b-43d7-ad31-4af09b45b4b1",
        "parentId" : "c728237f-b262-4add-885c-294b81ccc907",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Originally I didn't want to write the functional utility functions... But now that its not super late at night I realize that I can literally just include them from somewhere, since this is just our build, or write them in another file, or even include them from compiler utils. So yeah, I agree.\n",
        "createdAt" : "2016-06-10T16:35:46Z",
        "updatedAt" : "2016-06-23T17:12:25Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "e2eccab9-f95b-4ead-9bc7-9865f46eb8c5",
        "parentId" : "c728237f-b262-4add-885c-294b81ccc907",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "You don't necessarily need `flip`, `zip`, or `uncurry`. `needsUpdate` would be better even with adapter lambdas that do the same thing.\n\nWell, you might need `zip` or `zipWith`.\n",
        "createdAt" : "2016-06-10T16:47:11Z",
        "updatedAt" : "2016-06-23T17:12:25Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2fdc7e7ca1f76132c7260278946a28f274ea582",
    "line" : null,
    "diffHunk" : "@@ -1,1 +238,242 @@\nfunction needsUpdate(source: string | string[], dest: string | string[]): boolean {\n    if (typeof source === \"string\" && typeof dest === \"string\") {\n        if (fs.existsSync(dest)) {\n            const {mtime: outTime} = fs.statSync(dest);"
  },
  {
    "id" : "5009efe4-d732-4525-b16a-57eb5b49cae2",
    "prId" : 9068,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a066506e-7246-41ba-b82a-8fcc34ef80e6",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I don't see a call site that uses this case, but if there was do you expect it to compare files on a one to one basis?\n",
        "createdAt" : "2016-06-17T22:27:30Z",
        "updatedAt" : "2016-06-23T17:12:25Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "04fcb4c4-7f6b-4b6d-81a3-d35608736878",
        "parentId" : "a066506e-7246-41ba-b82a-8fcc34ef80e6",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Yes. This case no longer came up once I started using streams for building TS.\n",
        "createdAt" : "2016-06-20T19:59:09Z",
        "updatedAt" : "2016-06-23T17:12:25Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2fdc7e7ca1f76132c7260278946a28f274ea582",
    "line" : 281,
    "diffHunk" : "@@ -1,1 +279,283 @@        }\n    }\n    else if (typeof source !== \"string\" && typeof dest !== \"string\") {\n        for (let i = 0; i < source.length; i++) {\n            if (!dest[i]) {"
  },
  {
    "id" : "bb71ab89-7ed0-415c-92bf-26b1b45323b0",
    "prId" : 9068,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "766fb50b-845e-4eea-9453-c3a6dea8e18e",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Have you considered leveraging vinyl streams to handle this? `vinyl-fs` already stats the files as they are matched.\n",
        "createdAt" : "2016-06-17T22:33:05Z",
        "updatedAt" : "2016-06-23T17:12:25Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "3e70ebee-8e23-466a-bfaa-0782dce85de4",
        "parentId" : "766fb50b-845e-4eea-9453-c3a6dea8e18e",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Consider this: https://github.com/gulpjs/gulp/blob/master/docs/recipes/only-pass-through-changed-files.md\n",
        "createdAt" : "2016-06-17T22:52:48Z",
        "updatedAt" : "2016-06-23T17:12:25Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "6448cc53-dc40-49e0-a2a3-bf592ce06bcb",
        "parentId" : "766fb50b-845e-4eea-9453-c3a6dea8e18e",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "The only place it's in use where streams actually get used is for concatenating the lib (everywhere else it's used before shelling out). However, I could probably change the lib creation tasks to use `gulp-newer` or `gulp-changed`.\n",
        "createdAt" : "2016-06-20T20:02:17Z",
        "updatedAt" : "2016-06-23T17:12:25Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2fdc7e7ca1f76132c7260278946a28f274ea582",
    "line" : 239,
    "diffHunk" : "@@ -1,1 +237,241 @@const programTs = path.join(compilerDirectory, \"program.ts\");\n\nfunction needsUpdate(source: string | string[], dest: string | string[]): boolean {\n    if (typeof source === \"string\" && typeof dest === \"string\") {\n        if (fs.existsSync(dest)) {"
  },
  {
    "id" : "16b5b300-518f-4d28-9846-7fa5b14f6c9e",
    "prId" : 9068,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "293e1e6e-a470-4543-a78e-a1a31447861b",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "nit: whitespace\n",
        "createdAt" : "2016-06-23T01:41:48Z",
        "updatedAt" : "2016-06-23T17:12:25Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "7ba6861e-4de0-438a-9c60-2858e39817bd",
        "parentId" : "293e1e6e-a470-4543-a78e-a1a31447861b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I'm not sure what whitespace you're complaining about, but whatever it is I guess it should be codified because our lint rules don't catch it.\n",
        "createdAt" : "2016-06-23T17:13:11Z",
        "updatedAt" : "2016-06-23T17:13:11Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "552d063e-1755-4dfa-86f2-4c4fc4b32827",
        "parentId" : "293e1e6e-a470-4543-a78e-a1a31447861b",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "probably `{ module: \"commonjs\" }` -- spaces after `{` and before`}`\n",
        "createdAt" : "2016-06-23T17:14:45Z",
        "updatedAt" : "2016-06-23T17:14:45Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "6b2bcc08-9ad9-49fd-8498-e7149e3dfe98",
        "parentId" : "293e1e6e-a470-4543-a78e-a1a31447861b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Yeah - this style is inconsistently enforced, I have instances both with and without spaces in the compiler. We need a lint rule for this, one way or the other, if people are going to display a preference.\n",
        "createdAt" : "2016-06-23T17:17:57Z",
        "updatedAt" : "2016-06-23T17:17:57Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "949b5902-4a84-4d75-bca7-117ec1df5975",
        "parentId" : "293e1e6e-a470-4543-a78e-a1a31447861b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Additionally, is this supposed to be consistent with binding patterns and/or template strings? I'm internally consistent in the Gulpefile (no leading/trailing whitespace for any), but again, we're inconsistent within the compiler.\n",
        "createdAt" : "2016-06-23T17:20:23Z",
        "updatedAt" : "2016-06-23T17:20:23Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "80952550-dc61-4bbe-857c-f297c931ef86",
        "parentId" : "293e1e6e-a470-4543-a78e-a1a31447861b",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I'm not sure off the top of my head. I \"read somewhere\" that the Javascript standard syntax was with extra spaces, but I don't remember how _actually_ authoritative the source was. I'll try to track down the source.\n",
        "createdAt" : "2016-06-23T17:22:49Z",
        "updatedAt" : "2016-06-23T17:22:49Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "e58b79a3-f87e-4da6-a5c9-41a3b91e740b",
        "parentId" : "293e1e6e-a470-4543-a78e-a1a31447861b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "TBH, the lack of leading/trailing whitespace is, for me, one of the things which makes an object literal or binding pattern distinct from a function or lambda body.\n",
        "createdAt" : "2016-06-23T17:24:40Z",
        "updatedAt" : "2016-06-23T17:24:40Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "cc86ea3b-effa-4842-8e76-0d99598c7b65",
        "parentId" : "293e1e6e-a470-4543-a78e-a1a31447861b",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I can't find it, so probably we should just have a discussion and vote on which linter rule we want to turn on. (Does TSLint have it? ESLint does -- [object curly spacing](http://eslint.org/docs/rules/object-curly-spacing))\n",
        "createdAt" : "2016-06-23T17:29:28Z",
        "updatedAt" : "2016-06-23T17:29:28Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "6901dd3a-d511-4f97-a975-99a5db1090de",
        "parentId" : "293e1e6e-a470-4543-a78e-a1a31447861b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I don't see any tslint rules white would cover whitespace before/after curlys.\n",
        "createdAt" : "2016-06-23T17:31:21Z",
        "updatedAt" : "2016-06-23T17:31:21Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "90ea20a6-4776-48a3-b803-6019155a0c4e",
        "parentId" : "293e1e6e-a470-4543-a78e-a1a31447861b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I've written a rule to check which is the dominant style - by and large with whitespace is more prevalent in our codebase, so I assume the default should be with whitespace.\n",
        "createdAt" : "2016-06-23T17:45:54Z",
        "updatedAt" : "2016-06-23T17:45:54Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "7dfdf9f6-715f-466d-9314-3768ed7ee1c0",
        "parentId" : "293e1e6e-a470-4543-a78e-a1a31447861b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I'm going to merge this without fixing these nits and the fix them when I merge the lint rule catching them, is that okay?\n",
        "createdAt" : "2016-06-23T17:46:46Z",
        "updatedAt" : "2016-06-23T17:46:46Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "7c560c51-1b88-4bbc-b5e0-c0a6ddc02755",
        "parentId" : "293e1e6e-a470-4543-a78e-a1a31447861b",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Works for me. @rbuckton ?\n",
        "createdAt" : "2016-06-23T17:48:41Z",
        "updatedAt" : "2016-06-23T17:48:41Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2fdc7e7ca1f76132c7260278946a28f274ea582",
    "line" : null,
    "diffHunk" : "@@ -1,1 +744,748 @@const nodeServerInFile = \"tests/webTestServer.ts\";\ngulp.task(nodeServerOutFile, false, [servicesFile], () => {\n    const settings: tsc.Settings = getCompilerSettings({module: \"commonjs\"}, /*useBuiltCompiler*/ true);\n    return gulp.src(nodeServerInFile)\n        .pipe(newer(nodeServerOutFile))"
  },
  {
    "id" : "fe78d7af-d385-4ac9-9373-e77d7353bbc2",
    "prId" : 9068,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0451757-c4ec-4ccb-a9f6-e00925be010c",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "nit: whitespace\n\nDo we need to start linting our gulpfile? 😄 \n",
        "createdAt" : "2016-06-23T01:42:23Z",
        "updatedAt" : "2016-06-23T17:12:25Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2fdc7e7ca1f76132c7260278946a28f274ea582",
    "line" : null,
    "diffHunk" : "@@ -1,1 +966,970 @@    const pathname = path.join(builtLocalDirectory, \"tslint\", p + \".js\");\n    gulp.task(pathname, false, [], () => {\n        const settings: tsc.Settings = getCompilerSettings({module: \"commonjs\"}, /*useBuiltCompiler*/ false);\n        return gulp.src(tslintRulesFiles[i])\n            .pipe(newer(pathname))"
  }
]