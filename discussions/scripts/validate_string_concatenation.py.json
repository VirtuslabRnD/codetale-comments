[
  {
    "id" : "2f3ef0f2-2699-4941-a354-0f5cd22f99c8",
    "prId" : 30755,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30755#pullrequestreview-339311004",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8143228-937a-4a68-a3ca-9e38c37c4a33",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Can you give some context here? Like why this script exists (why this stuff is not in `ci/code_checks.sh` directly like the rest.",
        "createdAt" : "2020-01-07T15:33:33Z",
        "updatedAt" : "2020-03-23T09:47:04Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2897f5df77e2e3fa0f81c68b774e6e5fb79bdcf",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1,5 @@#!/usr/bin/env python3\n\"\"\"\nUnwanted patterns test cases.\n\nThe reason this file exist despite the fact we already have"
  },
  {
    "id" : "e6d321dd-a2a5-4597-a34f-9e18a03414b3",
    "prId" : 30755,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30755#pullrequestreview-340671993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc8360dd-ee78-444d-a9f3-eaf5892324dd",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think it's probably better to have the list of functions explicit. So, it's clearer, and we have control on what can be called.",
        "createdAt" : "2020-01-09T17:11:08Z",
        "updatedAt" : "2020-03-23T09:47:04Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2897f5df77e2e3fa0f81c68b774e6e5fb79bdcf",
    "line" : 411,
    "diffHunk" : "@@ -1,1 +346,350 @@        \"strings_to_concatenate\",\n        \"strings_with_wrong_placed_whitespace\",\n    ]\n\n    parser = argparse.ArgumentParser(description=\"Unwanted patterns checker.\")"
  },
  {
    "id" : "7d808bb9-5920-47c2-8a3b-9179a89b4def",
    "prId" : 30755,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30755#pullrequestreview-342946690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "230c2147-0bb8-446a-8cdd-14c0c9f0d86e",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Are there tests for these functions?",
        "createdAt" : "2020-01-14T23:22:23Z",
        "updatedAt" : "2020-03-23T09:47:04Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "45027761-8aeb-431b-a59a-2f63d37ff754",
        "parentId" : "230c2147-0bb8-446a-8cdd-14c0c9f0d86e",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "No there are no tests for these functions.\r\n\r\nAnd the main problem is that I have no clue how to tests these, If you can give me a minimal starting point (how to test one of these functions, or an abstract idea on how to test them) I believe I will be good to go and test every other function and expand the testing even further, I just really don't know where to start.",
        "createdAt" : "2020-01-15T00:06:52Z",
        "updatedAt" : "2020-03-23T09:47:04Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "1aa4e63f-4247-4a65-873b-32b6c4c87294",
        "parentId" : "230c2147-0bb8-446a-8cdd-14c0c9f0d86e",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "You can add a new file in `scripts/tests/`, check the docstrings one for reference.\r\n\r\nThen you can start with a simple test for each function. A function with an assert, something like this for your functions:\r\n```python\r\ndef test_sum_works():\r\n    assert sum(1, 2) == 3\r\n```\r\n\r\nThen we can review or add comments, or if you feel confident, you can directly test several uses cases, similar to the examples you wrote for the wrong placed whitespaces.",
        "createdAt" : "2020-01-15T00:19:32Z",
        "updatedAt" : "2020-03-23T09:47:04Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "45de2088-f4c7-49be-aace-43f96bf023ce",
        "parentId" : "230c2147-0bb8-446a-8cdd-14c0c9f0d86e",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "@datapythonista ty for the quick reply :)\r\n\r\nDo you mind if I will create in addition to the test file, another file (possibly 3, one for each function) that will contain some data for the tests? because the functions only take one parameter which is a path.",
        "createdAt" : "2020-01-15T01:19:19Z",
        "updatedAt" : "2020-03-23T09:47:04Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "cf7137c2-73c1-4efa-a447-a86da620ca2e",
        "parentId" : "230c2147-0bb8-446a-8cdd-14c0c9f0d86e",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "That should be ok, but probably better to use `io.StringIO`. Making the functions accept a file descriptor instead of a file path is not a bad idea either. I think it's common, and it can be useful not only for the tests, but for validating content that is not in the file system, but in a url, or somewhere else.\r\n\r\nIn any case, feel free to implement whatever you think it makes more sense. But I think it's better to write unit tests, testing minimalistic and specific cases, than have files on disk.",
        "createdAt" : "2020-01-15T01:37:11Z",
        "updatedAt" : "2020-03-23T09:47:04Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "18faaba0-da2d-44a4-99dc-eb6c2f2776b9",
        "parentId" : "230c2147-0bb8-446a-8cdd-14c0c9f0d86e",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I don't think should need to create additional files. Should be able to use https://github.com/pandas-dev/pandas/blob/6b87716e1416061b4bf0109a89caf962acdf8c12/scripts/tests/test_validate_docstrings.py#L16 as an example but create another class that has methods exhibiting the behavior you are trying to correct here instead of docstrings",
        "createdAt" : "2020-01-15T01:42:47Z",
        "updatedAt" : "2020-03-23T09:47:04Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2897f5df77e2e3fa0f81c68b774e6e5fb79bdcf",
    "line" : 173,
    "diffHunk" : "@@ -1,1 +152,156 @@\n\ndef strings_with_wrong_placed_whitespace(\n    file_obj: IO[str],\n) -> Iterable[Tuple[int, str]]:"
  },
  {
    "id" : "4dc25560-cbd0-454a-911c-2150f11ea78f",
    "prId" : 30755,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30755#pullrequestreview-358830347",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f9048f9-88a5-4e55-a588-459cb434a7c6",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm what's the point of this function? Does it only ever return 0 or 1? ",
        "createdAt" : "2020-02-10T16:17:43Z",
        "updatedAt" : "2020-03-23T09:47:04Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "827828c0-da67-4007-b682-32d5252157ed",
        "parentId" : "9f9048f9-88a5-4e55-a588-459cb434a7c6",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "#### Short version:\r\nThe point of this function is to get the prefix length from string literals, so I can know where the actual string starts.\r\n\r\n---\r\n\r\n#### Long version:\r\n\r\nThe received named tuple from generating the tokens, contains the \"line\" attribute, which returns the whole line of code as if it was a string for example for \r\n\r\n```python\r\nvalue = 42\r\n```\r\n\r\nThe received \"line\" value is: ```'value = 42'``` (note the wrapping single quotes).\r\n\r\nThe problem is that I don't know if the string will be wrapped with single or double quotes, so I might get this (as the value of \"line\"):\r\n\r\n```python\r\n\"f'My age is {age}'\"\r\n```\r\n\r\nor this:\r\n\r\n```python\r\n'f\"My age is {age}\"'\r\n```\r\n\r\nThe function may return:\r\n\r\n* 0 - if there is no string prefix\r\n\r\n* 1 - if the string prefix is just one character (e.g ```f```, ```r```)\r\n\r\n* 2 - if the string prefix is two letters (e.g ```fr```)\r\n\r\n---\r\n\r\nThe function is used to determine where to start cutting the received string, in order to check only the \"raw\" string.",
        "createdAt" : "2020-02-14T10:02:42Z",
        "updatedAt" : "2020-03-23T09:47:04Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2897f5df77e2e3fa0f81c68b774e6e5fb79bdcf",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +21,25 @@\n\ndef _get_literal_string_prefix_len(token_string: str) -> int:\n    \"\"\"\n    Getting the length of the literal string prefix."
  }
]