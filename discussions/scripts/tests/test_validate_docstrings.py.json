[
  {
    "id" : "a25217ae-9839-49f9-93cc-9fbffbe077b0",
    "prId" : 22408,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22408#pullrequestreview-162325783",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1dbd7e6-a574-4796-9f91-c871abf8efca",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Minor nit but what does this add? Can't we just do the normal inclusion check against the list instead of joining into a string?",
        "createdAt" : "2018-10-08T03:28:50Z",
        "updatedAt" : "2018-10-08T04:00:47Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e7d5e5bb-066a-41a6-bf64-778e325bf461",
        "parentId" : "c1dbd7e6-a574-4796-9f91-c871abf8efca",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "`msg in result['errors']` is different than this, for example `'a' in 'foo bar'` is `True`, but `a in ['foo', 'bar']` is `False`.\r\n\r\nI think the `.join()` is simpler than another loop, is it what you would do, or you were thinking on the previous case? ",
        "createdAt" : "2018-10-08T03:52:56Z",
        "updatedAt" : "2018-10-08T04:00:47Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "7b0f2f03-8319-4124-8a5f-0f22c0e76306",
        "parentId" : "c1dbd7e6-a574-4796-9f91-c871abf8efca",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "No but I thought `msg` would explicitly match one of the `errors`; will take a look more deeply on next review if that assumption is incorrect",
        "createdAt" : "2018-10-08T03:54:20Z",
        "updatedAt" : "2018-10-08T04:00:47Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "291971ee-789a-4ef8-8058-48b7c3b17114",
        "parentId" : "c1dbd7e6-a574-4796-9f91-c871abf8efca",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Debugging this locally still don't think the string concatenation is necessary?\r\n\r\n<img width=\"791\" alt=\"image\" src=\"https://user-images.githubusercontent.com/609873/46592333-88826a00-ca76-11e8-8289-adb8f6fac249.png\">\r\n",
        "createdAt" : "2018-10-08T04:18:33Z",
        "updatedAt" : "2018-10-08T04:25:03Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "db782fded5b52c5a23b3b3449c39ca8fbf58716a",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +606,610 @@        result = validate_one(self._import_path(klass=klass, func=func))  # noqa:F821\n        for msg in msgs:\n            assert msg in ' '.join(result['errors'])\n\n"
  },
  {
    "id" : "00558570-d6b7-42da-a5a2-a7928e9ad5b1",
    "prId" : 23165,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23165#pullrequestreview-164775166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3b537bc-34a6-4ca5-9615-3f2603c30188",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Can you add one test or two for something like `list of boolean`, `integer, float or string`... I think it makes sense to make sure that we capture them, and that the error in this case makes sense.",
        "createdAt" : "2018-10-15T15:54:25Z",
        "updatedAt" : "2018-10-16T19:03:23Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "26bf7bee449e6e320f706a8566d30ad725dddbfd",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +486,490 @@        kind : boolean\n            Foo bar baz.\n        \"\"\"\n        pass\n"
  },
  {
    "id" : "37b5afa3-7666-4d08-b59d-367609a0f81c",
    "prId" : 23432,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23432#pullrequestreview-172379218",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd564915-d9ca-4448-8314-2f4f6fc1af99",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "We can test this now. I guess we can't know whether we're missing the type or the description. We should return a message that considers both, so the user always know what to do. And test this case.",
        "createdAt" : "2018-11-04T10:56:51Z",
        "updatedAt" : "2018-12-30T20:59:53Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "ddc90bf3-a646-49d1-b124-83dd0edcb654",
        "parentId" : "dd564915-d9ca-4448-8314-2f4f6fc1af99",
        "authorId" : "37311a41-ff60-411d-8d60-30c6631990da",
        "body" : "indeed, with the current modifications, in this case the error message is _Return value has no description_\r\nshould I replace it by something like  _Return value has no type or description_ ?\r\n(well, in the case where a tuple is returned, that would mean that both type and name are missing)",
        "createdAt" : "2018-11-07T08:26:31Z",
        "updatedAt" : "2018-12-30T20:59:53Z",
        "lastEditedBy" : "37311a41-ff60-411d-8d60-30c6631990da",
        "tags" : [
        ]
      },
      {
        "id" : "dafe67d7-09af-4b0f-82fd-7453b17be440",
        "parentId" : "dd564915-d9ca-4448-8314-2f4f6fc1af99",
        "authorId" : "37311a41-ff60-411d-8d60-30c6631990da",
        "body" : "while writing that, I realize that I do not check, in the case of multiple return values, if all of them have both a name and a type",
        "createdAt" : "2018-11-07T08:28:21Z",
        "updatedAt" : "2018-12-30T20:59:53Z",
        "lastEditedBy" : "37311a41-ff60-411d-8d60-30c6631990da",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ea78816de0d1fd4c2e2757474ccaa347e4c983c",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +866,870 @@        ('BadReturns', 'yield_not_documented', ('No Yields section found',)),\n        pytest.param('BadReturns', 'no_type', ('foo',),\n                     marks=pytest.mark.xfail),\n        ('BadReturns', 'no_description',\n         ('Return value has no description',)),"
  },
  {
    "id" : "70c92085-d0f7-45e8-a876-6f1a58d1a445",
    "prId" : 23607,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23607#pullrequestreview-173957326",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cc0dd57-a3f3-4411-b1e9-0c09a833cc63",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "To make sure I understand the error message, we say \"See Also should be located before Notes\" because it's the section immediately preceding notes. But the \"users\" docstring in this case doesn't have a \"Notes\" section, so that's slightly confusing.\r\n\r\nI was hoping we could instead say \"See Also should be located before Examples\", but that's not quite right either, because if you have three out of order sections, you would want to skip back two sections, if that makes sense...\r\n\r\nSo I guess my only comment is, \"this error message is potentially confusing. But I don't know how to improve it\". If you see an easy way to improve it, push it here. Otherwise +1 from me.",
        "createdAt" : "2018-11-12T15:20:23Z",
        "updatedAt" : "2018-11-12T15:20:25Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "ddd17ac1-8893-447a-95a1-196738135897",
        "parentId" : "5cc0dd57-a3f3-4411-b1e9-0c09a833cc63",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Good point, I 100% agree. I couldn't find a better way to report it, without dong something too complex and possibly even more misleading.\r\n\r\nBut I think it should be all right, as in the error message I show the order of all sections (is not shown in the test, but will be displayed to the users).\r\n\r\nMay be after this starts to be used someone comes with a better idea. But I think it should be good enough.",
        "createdAt" : "2018-11-12T15:28:13Z",
        "updatedAt" : "2018-11-12T15:28:13Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "ccc75815-a133-4aba-8a70-f679cd7e20d3",
        "parentId" : "5cc0dd57-a3f3-4411-b1e9-0c09a833cc63",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> But I think it should be all right, as in the error message I show the order of all sections (is not shown in the test, but will be displayed to the users).\r\n\r\nAh great. That sounds fine.",
        "createdAt" : "2018-11-12T15:33:38Z",
        "updatedAt" : "2018-11-12T15:33:38Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "df5c1bcf9481e6e9fa642b12941f5e6af70a94be",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +740,744 @@        ('BadGenericDocStrings', 'sections_in_wrong_order',\n         ('Wrong order of sections. \"See Also\" should be located before '\n          '\"Notes\"',)),\n        ('BadSeeAlso', 'desc_no_period',\n         ('Missing period at end of description for See Also \"Series.iloc\"',)),"
  }
]