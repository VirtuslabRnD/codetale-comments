[
  {
    "id" : "26ed8319-dbd5-41a9-ae6c-9129cd880374",
    "prId" : 19898,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19898#pullrequestreview-100647368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f5dc289-aba8-4852-9464-fd4559e47253",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is there a reason you do this? As the code below works fine for a class as well, eg pandas.DataFrame (while now the script will say the keywords and signature did not match, while in fact they do)",
        "createdAt" : "2018-03-01T17:23:12Z",
        "updatedAt" : "2018-03-02T09:36:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "78c0b1cf-9b67-4781-acbe-b4bbd394e65a",
        "parentId" : "3f5dc289-aba8-4852-9464-fd4559e47253",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I didn't research much, but if I introspect parameters from a non-function I get this error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"./validate_docstrings.py\", line 353, in <module>\r\n    sys.exit(main(args.function))\r\n  File \"./validate_docstrings.py\", line 337, in main\r\n    return validate_all()\r\n  File \"./validate_docstrings.py\", line 259, in validate_all\r\n    int(doc.correct_parameters),\r\n  File \"./validate_docstrings.py\", line 159, in correct_parameters\r\n    return not bool(self.parameter_mismatches)\r\n  File \"./validate_docstrings.py\", line 138, in parameter_mismatches\r\n    signature_params = self.signature_parameters\r\n  File \"./validate_docstrings.py\", line 130, in signature_parameters\r\n    params = tuple(inspect.signature(self.method_obj).parameters.keys())\r\n  File \"/home/mgarcia/.anaconda3/envs/pandas_dev/lib/python3.6/inspect.py\", line 3036, in signature\r\n    return Signature.from_callable(obj, follow_wrapped=follow_wrapped)\r\n  File \"/home/mgarcia/.anaconda3/envs/pandas_dev/lib/python3.6/inspect.py\", line 2786, in from_callable\r\n    follow_wrapper_chains=follow_wrapped)\r\n  File \"/home/mgarcia/.anaconda3/envs/pandas_dev/lib/python3.6/inspect.py\", line 2341, in _signature_from_callable\r\n    'no signature found for builtin type {!r}'.format(obj))\r\nValueError: no signature found for builtin type <class 'pandas.core.indexing._AtIndexer'>\r\n```",
        "createdAt" : "2018-03-02T00:49:42Z",
        "updatedAt" : "2018-03-02T09:36:38Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "da24d08fa21f8b848e26a4aaf20e1344e787fcd7",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +129,133 @@    def signature_parameters(self):\n        if not inspect.isfunction(self.method_obj):\n            return tuple()\n        params = tuple(inspect.signature(self.method_obj).parameters.keys())\n        if params and params[0] in ('self', 'cls'):"
  },
  {
    "id" : "e33020cf-d2e6-4600-acb4-bf3a6097f7c1",
    "prId" : 19960,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19960#pullrequestreview-100758717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49fc2f66-f7a2-4bdd-823e-840be185025e",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Is it difficult to find the accessors that have been registered, instead of hardcoding them here? So we don't need to remember to change this when a new accessor is created.",
        "createdAt" : "2018-03-02T10:42:16Z",
        "updatedAt" : "2018-03-02T11:02:39Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "57cfc811-dca3-40c9-916c-3051b582e426",
        "parentId" : "49fc2f66-f7a2-4bdd-823e-840be185025e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yeah, I was looking into the class (eg that I could check they inherit from a base Accessor class, but that's not consistent between them). \r\nSo not really sure there is a better way, but totally agree it is not ideal.",
        "createdAt" : "2018-03-02T10:56:02Z",
        "updatedAt" : "2018-03-02T11:02:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "8ea84b05-1ba7-46dd-83ea-b79b5227fecb",
        "parentId" : "49fc2f66-f7a2-4bdd-823e-840be185025e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Actually, there is a `_accessors` attribute. But not fully sure to what extent we can rely on that.",
        "createdAt" : "2018-03-02T11:01:52Z",
        "updatedAt" : "2018-03-02T11:02:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "61173f61-d433-4300-adc6-1c1714ad39ac",
        "parentId" : "49fc2f66-f7a2-4bdd-823e-840be185025e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The problem is then that I need to get the class (eg Series in case of pandas.Series.dt), which is also difficult to introspect. So maybe the easiest is to leave it as is.",
        "createdAt" : "2018-03-02T11:03:27Z",
        "updatedAt" : "2018-03-02T11:03:27Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "87386a40-4598-4bb2-9174-abcb72212c4b",
        "parentId" : "49fc2f66-f7a2-4bdd-823e-840be185025e",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Sure, it's quite useful as it is, we can improve it in the future if we find a way.",
        "createdAt" : "2018-03-02T11:06:41Z",
        "updatedAt" : "2018-03-02T11:06:41Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "c44d208f-4f5d-4eff-a88a-2faf3631e756",
        "parentId" : "49fc2f66-f7a2-4bdd-823e-840be185025e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "FYI: https://github.com/pandas-dev/pandas/issues/19963\r\n\r\nI think `isinstance(object.__getattribute__(self, method_obj.__name__), CachedAccessor)` might have done it, But having an official registry is better :)",
        "createdAt" : "2018-03-02T12:26:54Z",
        "updatedAt" : "2018-03-02T12:26:54Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e436e5b7364ee495f7b4f468cc405232b314a02",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +134,138 @@            return tuple()\n        if (inspect.isclass(self.method_obj)\n                and self.method_name.split('.')[-1] in {'dt', 'str', 'cat'}):\n            # accessor classes have a signature, but don't want to show this\n            return tuple()"
  },
  {
    "id" : "ee77da24-55d4-4251-9b6e-520dca9908bd",
    "prId" : 20025,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20025#pullrequestreview-102098459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "565c4cd8-a933-45c6-b75a-53489dafbdc6",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "There are actually some cases where I see people deliberately leaving a blank line at the end of the docstring (see eg examples in http://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html. Also numpydoc does it in the example: http://numpydoc.readthedocs.io/en/latest/format.html, although not sure if it is on purpose). \r\n\r\nSo not sure we should be that strict here.",
        "createdAt" : "2018-03-07T11:10:01Z",
        "updatedAt" : "2018-03-07T21:04:46Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "5a96e0de-ab6d-413a-82d8-19a4a6926b62",
        "parentId" : "565c4cd8-a933-45c6-b75a-53489dafbdc6",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "It's your call, but personally I think that if there is no specific reason to leave one line sometimes, and to not leave it other times, I'd define a standard way to do it.",
        "createdAt" : "2018-03-07T21:07:22Z",
        "updatedAt" : "2018-03-07T21:07:22Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "bd87463e-b8d2-45aa-b3d3-abd676be1a14",
        "parentId" : "565c4cd8-a933-45c6-b75a-53489dafbdc6",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Somehow I have a personal preference to leave a blank line at the end .. :-) \r\nBut since the way you check it now is most occurring way in pandas, let's pick that.",
        "createdAt" : "2018-03-07T21:10:43Z",
        "updatedAt" : "2018-03-07T21:10:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c5b338837914ce07707bb479ecc0d21f9c00e28",
    "line" : 340,
    "diffHunk" : "@@ -1,1 +391,395 @@                    'the last text in the docstring (do not close the '\n                    'quotes in the same line as the text, or leave a '\n                    'blank line between the last text and the quotes)')\n    if doc.double_blank_lines:\n        errs.append('Use only one blank line to separate sections or '"
  },
  {
    "id" : "03175e27-7b69-4382-a20d-6f3003925a83",
    "prId" : 20025,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20025#pullrequestreview-102096785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d31e66a-97e4-4971-b112-578895631cbe",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "tuple -> list ?",
        "createdAt" : "2018-03-07T21:03:10Z",
        "updatedAt" : "2018-03-07T21:04:46Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4857f872-78a8-44c7-b6a2-84975832ac14",
        "parentId" : "1d31e66a-97e4-4971-b112-578895631cbe",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Did the opposite, but yes, fixed. :)",
        "createdAt" : "2018-03-07T21:05:26Z",
        "updatedAt" : "2018-03-07T21:05:26Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c5b338837914ce07707bb479ecc0d21f9c00e28",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +192,196 @@            # of the signature\n            return tuple()\n        params = tuple(signature.parameters.keys())\n        if params and params[0] in ('self', 'cls'):\n            return params[1:]"
  },
  {
    "id" : "714adb08-023d-4515-9c03-5c3105a55939",
    "prId" : 20061,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20061#pullrequestreview-147302321",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eab6815e-8dfe-4719-a720-33f8ed286933",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This does not seem to work for me. Eg checking `pandas.Series.dt` with the script complains about parameter 'data' not being documented.\r\n\r\n(but anyhow, it is better as on master, there it raises an attribute error somewhere in the script)",
        "createdAt" : "2018-08-17T15:55:19Z",
        "updatedAt" : "2018-08-17T15:58:04Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2de816bc-1398-4bc2-a679-8910be6ec4d4",
        "parentId" : "eab6815e-8dfe-4719-a720-33f8ed286933",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Good to know. I’d be happy to open that up as a follow up issue here - worth adding dedicated tests for accessors",
        "createdAt" : "2018-08-17T16:51:08Z",
        "updatedAt" : "2018-08-17T16:51:08Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fb5405a8d4fb1d5acfd215e5046bb091048b872",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +189,193 @@                    self.method_name.split('.')[-1] in\n                    self.method_obj._accessors):\n                # accessor classes have a signature but don't want to show this\n                return tuple()\n        try:"
  },
  {
    "id" : "ca36a51e-51ab-4db3-ba46-f87382b17e4e",
    "prId" : 20112,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20112#pullrequestreview-103900438",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6059593f-c861-463c-8f30-3217e599956c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "'\\t' in line is good enough, yes? we don't all *any* tabs",
        "createdAt" : "2018-03-10T14:44:12Z",
        "updatedAt" : "2018-03-10T14:44:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c751e150-5796-4f68-a6f5-2debb1660c84",
        "parentId" : "6059593f-c861-463c-8f30-3217e599956c",
        "authorId" : "b2b16778-e746-4425-affa-436169462dbb",
        "body" : "If you see the comments above @TomAugspurger requested \"Starts with tab\" as there might be tabs to format a table or the like I think",
        "createdAt" : "2018-03-10T14:46:11Z",
        "updatedAt" : "2018-03-10T14:46:12Z",
        "lastEditedBy" : "b2b16778-e746-4425-affa-436169462dbb",
        "tags" : [
        ]
      },
      {
        "id" : "cc2ce3c9-59a2-40d2-b024-201257e9d8a4",
        "parentId" : "6059593f-c861-463c-8f30-3217e599956c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, not sure this is actually strict enough. as I said we don't allow *any* tabs",
        "createdAt" : "2018-03-10T14:51:35Z",
        "updatedAt" : "2018-03-10T14:51:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e8eabf9e-6ae5-49ef-bd10-2b17950b7a5e",
        "parentId" : "6059593f-c861-463c-8f30-3217e599956c",
        "authorId" : "b2b16778-e746-4425-affa-436169462dbb",
        "body" : "I'm happy to change it back to allow no tabs at all. Let me know what you think @TomAugspurger ",
        "createdAt" : "2018-03-10T14:54:29Z",
        "updatedAt" : "2018-03-10T14:54:29Z",
        "lastEditedBy" : "b2b16778-e746-4425-affa-436169462dbb",
        "tags" : [
        ]
      },
      {
        "id" : "7f23a27d-942e-419c-b061-ea486ecc98b9",
        "parentId" : "6059593f-c861-463c-8f30-3217e599956c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback There are cases where a `\\t` is included in the text as literal character (for the explanation).\r\nSo I think only checking the start of a line is good.",
        "createdAt" : "2018-03-14T14:39:41Z",
        "updatedAt" : "2018-03-14T14:39:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f80fcdbc-e2b7-4dc7-8012-5646b153bbba",
        "parentId" : "6059593f-c861-463c-8f30-3217e599956c",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Unrelated to where `\\t` is included, we could use `re.search(r'^ *\\t', self.raw_doc, flags=re.MULTILINE)` and avoid the loop",
        "createdAt" : "2018-03-14T16:37:41Z",
        "updatedAt" : "2018-03-14T16:37:41Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "b3aa2b58-82d1-4c01-b44d-74fd618fe3da",
        "parentId" : "6059593f-c861-463c-8f30-3217e599956c",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "ups, sorry, I see now that you want to report the lines with the tabs...",
        "createdAt" : "2018-03-14T16:39:37Z",
        "updatedAt" : "2018-03-14T16:39:37Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb8b59b5b71a3d7ba2bc4d94cd6f8d4919007ef6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +458,462 @@\n    for line in doc.raw_doc.splitlines():\n        if re.match(\"^ *\\t\", line):\n            errs.append('Tabs found at the start of line \"{}\", '\n                        'please use whitespace only'.format(line.lstrip()))"
  },
  {
    "id" : "e98ababd-c17b-4ded-a184-521bb8b29e93",
    "prId" : 22408,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22408#pullrequestreview-162327210",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "483429d4-8ff1-4cfa-ba2b-29662a40b6b6",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What does this do?",
        "createdAt" : "2018-08-19T19:57:57Z",
        "updatedAt" : "2018-10-08T04:00:47Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "285c4a3b-4d0d-46c0-b34b-2f52cfb3c30f",
        "parentId" : "483429d4-8ff1-4cfa-ba2b-29662a40b6b6",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "what exactly? the `inspect.getsourcefile()` returns the source file where a Python object is implemented. The `except TypeError` is explain in the comment below.",
        "createdAt" : "2018-10-08T14:07:30Z",
        "updatedAt" : "2018-10-08T14:20:16Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "db782fded5b52c5a23b3b3449c39ca8fbf58716a",
    "line" : 227,
    "diffHunk" : "@@ -1,1 +207,211 @@        try:\n            fname = inspect.getsourcefile(self.code_obj)\n        except TypeError:\n            # In some cases the object is something complex like a cython\n            # object that can't be easily introspected. An it's better to"
  },
  {
    "id" : "44159e6f-4078-4d49-8288-fce3b68f2ef9",
    "prId" : 22408,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22408#pullrequestreview-147743088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "765b6088-3ef2-4601-bcf5-2ba25a97603e",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is the reason why we write different output for one vs all simply console readability? Wondering if we shouldn't align the output regardless of how this is invoked (maybe a separate PR depending on complexity)",
        "createdAt" : "2018-08-19T20:01:55Z",
        "updatedAt" : "2018-10-08T04:00:47Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ff65bca1-c37e-4df6-9c0b-ad1f30077233",
        "parentId" : "765b6088-3ef2-4601-bcf5-2ba25a97603e",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I see your point, but I think the lack of consistency is necessary in this case.\r\n\r\nIf the script is called for one object (a user validating the docstring they are changing), the \"pretty\" output in the console is what makes sense to return.\r\n\r\nIf the script is called for all objects (we as maintainers analyzing the status), a JSON with the information to be analyzed with pandas makes more sense than any console formatting.\r\n\r\nDoes it make sense?",
        "createdAt" : "2018-08-20T12:38:20Z",
        "updatedAt" : "2018-10-08T04:00:47Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "0ce5368c-72fc-49c8-824e-09b8276afccb",
        "parentId" : "765b6088-3ef2-4601-bcf5-2ba25a97603e",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea I'm on the fence about it myself. Not something that needs to be addressed here per se but food for thought",
        "createdAt" : "2018-08-20T17:25:00Z",
        "updatedAt" : "2018-10-08T04:00:47Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "db782fded5b52c5a23b3b3449c39ca8fbf58716a",
    "line" : 553,
    "diffHunk" : "@@ -1,1 +586,590 @@        fd.write(json.dumps(json_doc))\n    else:\n        doc_info = validate_one(func_name)\n\n        fd.write(header('Docstring ({})'.format(func_name)))"
  },
  {
    "id" : "a345508a-d0dc-4c5d-bfc0-7968fb15125f",
    "prId" : 22408,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22408#pullrequestreview-162993598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a16cf4e1-b9a1-41b2-afda-1e66d599cef4",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Should we make the first sentence one line?",
        "createdAt" : "2018-10-08T03:33:56Z",
        "updatedAt" : "2018-10-08T04:00:47Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f313a8ef-dd37-4b95-8740-b3c4dcb73a28",
        "parentId" : "a16cf4e1-b9a1-41b2-afda-1e66d599cef4",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you change this? Maybe missed on prior review",
        "createdAt" : "2018-10-08T04:18:57Z",
        "updatedAt" : "2018-10-08T04:25:03Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "543cb112-3ffb-41da-897a-6058da68b355",
        "parentId" : "a16cf4e1-b9a1-41b2-afda-1e66d599cef4",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "You've got the one liner summary above.",
        "createdAt" : "2018-10-08T04:37:51Z",
        "updatedAt" : "2018-10-08T14:20:15Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "f90ac49f-ba53-473b-86a1-e7beee75c61f",
        "parentId" : "a16cf4e1-b9a1-41b2-afda-1e66d599cef4",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "My mistake - thanks for clarifying",
        "createdAt" : "2018-10-09T16:54:35Z",
        "updatedAt" : "2018-10-09T16:54:36Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "db782fded5b52c5a23b3b3449c39ca8fbf58716a",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +50,54 @@    Yield information about all public API items.\n\n    Parse api.rst file from the documentation, and extract all the functions,\n    methods, classes, attributes... This should include all pandas public API.\n"
  },
  {
    "id" : "bf1e19f5-611e-4887-8486-05f0bc4e4f33",
    "prId" : 22408,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22408#pullrequestreview-162327210",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9835fef1-ecc7-4f08-8936-dbefabd32de5",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Assuming this to be the main function of the change I was thinking the test cases would cover this but don't see that - oversight on my end or something we can test?",
        "createdAt" : "2018-10-08T03:46:28Z",
        "updatedAt" : "2018-10-08T04:00:47Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "0cfcae7f-debf-403e-b95c-9ed8f4e99ec4",
        "parentId" : "9835fef1-ecc7-4f08-8936-dbefabd32de5",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "This function is just boilerplate code, I don't think it adds any value to test that, as we would be mocking everything.",
        "createdAt" : "2018-10-08T04:02:12Z",
        "updatedAt" : "2018-10-08T04:02:12Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "148e1e48-bc89-4751-8539-d9ce4880163f",
        "parentId" : "9835fef1-ecc7-4f08-8936-dbefabd32de5",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm if we mocked the return of `get_api_items` to just return say one docstring could we assert that this function behaves the same (or similar - minor differences perhaps expected) to `validate_one`?",
        "createdAt" : "2018-10-08T04:24:47Z",
        "updatedAt" : "2018-10-08T04:25:03Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "a19123c1-7fc9-410b-8ad2-1849c5ba0f10",
        "parentId" : "9835fef1-ecc7-4f08-8936-dbefabd32de5",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Not really sure if that would be useful, in my experience those kind of test just break when the function being mocked changes, and don't add that much value.\r\n\r\nBut anyway, I'd surely prefer to spend the scarce time I have to make pandas better in something else than finding ways to test a function that loops over the elements of a function that is tested, and calls another function that is tested for every item, in a script that validates docstrings. :)\r\n\r\nLet's move forward if you don't mind, there are plenty of validations that I want to add to the docstrings, that will save a lot of time of the reviewing of doc PRs, and this is a blocker to implement those.",
        "createdAt" : "2018-10-08T07:05:42Z",
        "updatedAt" : "2018-10-08T14:20:15Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "db782fded5b52c5a23b3b3449c39ca8fbf58716a",
    "line" : 487,
    "diffHunk" : "@@ -1,1 +525,529 @@\n\ndef validate_all():\n    \"\"\"\n    Execute the validation of all docstrings, and return a dict with the"
  },
  {
    "id" : "fa5845c0-ff48-45a9-8d9d-4609956497b3",
    "prId" : 22408,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22408#pullrequestreview-163062096",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a171315b-b59c-4bc2-9242-34b5f56a66ba",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Out of curiosity what's with the addition of the `staticmethod` here?",
        "createdAt" : "2018-10-08T04:20:57Z",
        "updatedAt" : "2018-10-08T04:25:03Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "99b5f306-1480-458c-8e1e-6569dc9dbc9a",
        "parentId" : "a171315b-b59c-4bc2-9242-34b5f56a66ba",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "`staticmethod` makes it explicit that this is a function inside of a class, and not a normal method that accesses the class attributes",
        "createdAt" : "2018-10-08T06:59:19Z",
        "updatedAt" : "2018-10-08T14:20:15Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "33e6f940-b95f-4ef3-bc49-0f8191e66447",
        "parentId" : "a171315b-b59c-4bc2-9242-34b5f56a66ba",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "All of the calls within the code base are using an instance of the class (save the example in the docstring). With that being the case would prefer to remove the decorator unless there's actually a use case for it; otherwise just adds fluff",
        "createdAt" : "2018-10-09T16:58:33Z",
        "updatedAt" : "2018-10-09T16:58:53Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "0a74b332-1a92-4e93-9522-6c0619cc3b64",
        "parentId" : "a171315b-b59c-4bc2-9242-34b5f56a66ba",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Not a problem at all to make it a regular method, I leave often static methods as regular methods, as it makes almost no difference.\r\n\r\nBut I don't understand your comment about using an instance of the class. Do you mean that it's not something that we usually use?\r\n\r\nThe way I see it is that methods of classes in general access the attributes and other methods of the class. As they are encapsulate a set of data and code that somehow works together. Functions in the other hand are somehow independent. In few cases, there are functions that while they do not access anything else from the class, they make more sense inside the class than outside. This is the case here, as `_load_obj` is only used by other methods of the class, and living outside at the same level of the class `Docstring`, IMO makes it look more important in the code than what really is, as conceptually it makes more sense at the same level of the other methods.\r\n\r\nAssuming that as a method of the class is a better decision, having it as an staticmethod makes very quick to understand that it's a function inside of a class, and not a method that can access other methods or attributes. I personally find this information very valuable when reading code. Normal methods can access anything in the class, adding an extra complexity in the way that you can't see them as pure input->output units, but that can instead use somehow global variables. A static method doesn't have this complexity, and I know I can expect it to use only whatever parameter it receives, return a result, and not modify anything else. So, it gives a lot of information without having to read its code. The cost is just having the text `@staticmethod` instead of `self`. I think the few characters of difference is a very good price for the amount of information it provides. And I don't think that not using them often in the pandas code itself is a good reason for not using it here. May be we should start using them more there.",
        "createdAt" : "2018-10-09T17:32:19Z",
        "updatedAt" : "2018-10-09T17:32:20Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "aed56c85-30f8-4f78-946e-e279f1443f9a",
        "parentId" : "a171315b-b59c-4bc2-9242-34b5f56a66ba",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "\\+1 on explicitly using staticmethod, if it is actually one",
        "createdAt" : "2018-10-09T17:42:43Z",
        "updatedAt" : "2018-10-09T17:42:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "46227ca1-f65e-4dd0-bcb3-3c84a61779cb",
        "parentId" : "a171315b-b59c-4bc2-9242-34b5f56a66ba",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "My point is that I don't see the benefit of just adding things like this without any accompanying test regardless of how trivial the change may seem",
        "createdAt" : "2018-10-09T17:54:33Z",
        "updatedAt" : "2018-10-09T17:54:33Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b936ddf8-8422-44ad-9a5f-8688f107a52b",
        "parentId" : "a171315b-b59c-4bc2-9242-34b5f56a66ba",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I'm a bit lost on what's the connection between the staticmethod and the testing here.\r\n\r\nThe benefit of this PR is that makes the code more organized and better. And it implements a way to extract detailed information of the errors in the docstrings. So I can quickly generate the list of functions that fail a specific validation, fix the problem in all them, and start checking in the CI those validations. So the errors don't happen again, and I don't need to waste time on manually reviewing them in all the docstrings PRs.\r\n\r\nA huge benefit for me. :)  So would be great to have this merged. Is there any blocker, or can I merge on green?",
        "createdAt" : "2018-10-09T18:35:30Z",
        "updatedAt" : "2018-10-09T18:35:30Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "d089176c-c373-446b-a6d6-89facae99bbb",
        "parentId" : "a171315b-b59c-4bc2-9242-34b5f56a66ba",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I've blocked long enough so if others are fine with it majority rules :-) \r\n\r\nJust generally trying to minimize PRs and keep them directed towards one clear goal at a time, hence the pushback on this one",
        "createdAt" : "2018-10-09T19:33:18Z",
        "updatedAt" : "2018-10-09T19:33:19Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "a20ae010-6675-4d3c-b2ae-95e73a58aa92",
        "parentId" : "a171315b-b59c-4bc2-9242-34b5f56a66ba",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "hehe, I'm trying to maximize PRs, so hopefully we'll end up in a good equilibrium. ;) After this is merged I'll start creating issues for the points in #20298, so we have better validation of the docstrings.\r\n\r\n@jorisvandenbossche happy to merge this?",
        "createdAt" : "2018-10-09T19:39:32Z",
        "updatedAt" : "2018-10-09T19:39:32Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "db782fded5b52c5a23b3b3449c39ca8fbf58716a",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +126,130 @@        return len(self.raw_doc)\n\n    @staticmethod\n    def _load_obj(name):\n        \"\"\""
  },
  {
    "id" : "276a1455-6fd2-438f-afbf-62f6d39cb0e3",
    "prId" : 22408,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22408#pullrequestreview-162325783",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "556d5688-bd40-454c-a990-3dedaa55f5a0",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Same question for `staticmethod`",
        "createdAt" : "2018-10-08T04:21:08Z",
        "updatedAt" : "2018-10-08T04:25:03Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "db782fded5b52c5a23b3b3449c39ca8fbf58716a",
    "line" : 180,
    "diffHunk" : "@@ -1,1 +166,170 @@        return obj\n\n    @staticmethod\n    def _to_original_callable(obj):\n        \"\"\""
  },
  {
    "id" : "cd88acd9-aeec-439d-a4d7-e8694d9f3cb3",
    "prId" : 22408,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22408#pullrequestreview-162327210",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "008850b6-1827-4bbf-80e0-267772d8bd0e",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Does this need to be a property? Only see one usage in the code base which makes me thing the benefit of adding to the class is minimal",
        "createdAt" : "2018-10-08T04:22:54Z",
        "updatedAt" : "2018-10-08T04:25:03Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "9d2b9d96-8313-4482-874f-272b55ff2556",
        "parentId" : "008850b6-1827-4bbf-80e0-267772d8bd0e",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think conceptually this is more an attribute that is being calculated, than a method that performs an action, and that's what I use properties for. I think it helps read the code being explicit on that.  ",
        "createdAt" : "2018-10-08T07:01:28Z",
        "updatedAt" : "2018-10-08T14:20:15Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "db782fded5b52c5a23b3b3449c39ca8fbf58716a",
    "line" : 205,
    "diffHunk" : "@@ -1,1 +191,195 @@\n    @property\n    def type(self):\n        return type(self.obj).__name__\n"
  },
  {
    "id" : "781a0961-6334-411f-a701-e78fc610d89f",
    "prId" : 22617,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22617#pullrequestreview-153166176",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "277fe748-f27b-4d1e-ae8f-900ebda1c5ba",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Overall approach is much cleaner here, though I'm maybe -0.5 on the property as I don't see this really being used outside of the one check you have, in which case you can probably just do `len(self.doc['Summary'])` directly\r\n\r\nI'll defer to the @datapythonista on this one though",
        "createdAt" : "2018-09-07T00:13:52Z",
        "updatedAt" : "2018-09-07T00:13:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e08dd6ca9cdff3afa3f5c07531e3f25933bf4ae",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +167,171 @@\n    @property\n    def num_summary_lines(self):\n        return len(self.doc['Summary'])\n"
  },
  {
    "id" : "d36555e0-d8c1-4c0b-b4b1-87152063afb8",
    "prId" : 23399,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23399#pullrequestreview-171375618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92031cb5-a92c-4e12-a600-dd7431f67096",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "may be we can add a comment before this line explaining why the `F401` is required.",
        "createdAt" : "2018-11-04T16:35:38Z",
        "updatedAt" : "2018-11-04T16:36:48Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "72d40736-9a65-4b8c-ac13-36447678eb9a",
        "parentId" : "92031cb5-a92c-4e12-a600-dd7431f67096",
        "authorId" : "74e431be-b3bc-40dc-90fb-12bc297c2e6f",
        "body" : "Well the content basically never shows as it's only existing within tmp files. And if someone thinks it's unnecessary the tests would fail. \r\nSo I don't think commenting is needed there.",
        "createdAt" : "2018-11-04T19:19:34Z",
        "updatedAt" : "2018-11-04T19:19:34Z",
        "lastEditedBy" : "74e431be-b3bc-40dc-90fb-12bc297c2e6f",
        "tags" : [
        ]
      },
      {
        "id" : "dd6d7a80-3c0d-4288-8000-0959cfd8280c",
        "parentId" : "92031cb5-a92c-4e12-a600-dd7431f67096",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "The comment was not for the temp file, but our code, and I think it's useful to know what the `F401` is about when reading this part of code (without having to remove it and see that fails). Anyway, this is merged now. :)",
        "createdAt" : "2018-11-04T19:29:49Z",
        "updatedAt" : "2018-11-04T19:29:50Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "1178caef75e8e0386703ce819ca9bc854be126c9",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +416,420 @@            return\n\n        content = ''.join(('import numpy as np  # noqa: F401\\n',\n                           'import pandas as pd  # noqa: F401\\n',\n                           *self.examples_source_code))"
  },
  {
    "id" : "aab4661c-bf21-4212-8f95-29e994d24901",
    "prId" : 23514,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23514#pullrequestreview-171757191",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fde8cc8-260f-4ac2-87f9-35739f26a7b0",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The default of None is causing issues for me locally.\r\n\r\n```\r\n$ python scripts/validate_docstrings.py pandas.DataFrame.head\r\nTraceback (most recent call last):\r\n  File \"scripts/validate_docstrings.py\", line 782, in <module>\r\n    sys.exit(main(args.function, args.prefix, args.errors.split(','),\r\nAttributeError: 'NoneType' object has no attribute 'split'\r\n```",
        "createdAt" : "2018-11-05T20:42:07Z",
        "updatedAt" : "2018-11-06T10:23:51Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "d321f29e-cb60-46cb-808c-77f9a492c121",
        "parentId" : "6fde8cc8-260f-4ac2-87f9-35739f26a7b0",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "For single docstrings, is it ignored by choice or for simplicity?",
        "createdAt" : "2018-11-05T20:43:44Z",
        "updatedAt" : "2018-11-06T10:23:51Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "aeb14659-575e-4a69-9db4-f34d508da1da",
        "parentId" : "6fde8cc8-260f-4ac2-87f9-35739f26a7b0",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Oh, that's a bug I introduced at the last minute, my fault.\r\n\r\nIt's more by choice, I don't see a use case where you're validating a single docstring, and you just care about a subset of errors. It's easy to implement, but I would prefer that nobody does that (unless there is a use case I'm not considering).",
        "createdAt" : "2018-11-05T20:59:54Z",
        "updatedAt" : "2018-11-06T10:23:51Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "d3458c81-8e1b-4cde-8ec8-bdd3d05e4ac8",
        "parentId" : "6fde8cc8-260f-4ac2-87f9-35739f26a7b0",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Works for me.",
        "createdAt" : "2018-11-05T21:00:58Z",
        "updatedAt" : "2018-11-06T10:23:51Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0ab4c3d2e4558a09fca22a7a7b257df5869dfe5",
    "line" : 488,
    "diffHunk" : "@@ -1,1 +823,827 @@                           'of methods starting by this pattern. It is '\n                           'ignored if parameter function is provided')\n    argparser.add_argument('--errors', default=None, help='comma separated '\n                           'list of error codes to validate. By default it '\n                           'validates all errors (ignored when validating '"
  },
  {
    "id" : "826a5cd5-977f-48d4-aef0-a62f28bcc37f",
    "prId" : 23673,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23673#pullrequestreview-176234825",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28b4a88a-1f82-4e7a-9020-4894dbce805a",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Leave just one blank between sections. The CI will fail soon because of this",
        "createdAt" : "2018-11-19T10:42:06Z",
        "updatedAt" : "2018-12-02T19:00:58Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e75dd0b33e88da1750991a7ad1d225793f19a30e",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +555,559 @@    doc : Docstring\n        A Docstring object with the given function name.\n\n    Returns\n    -------"
  },
  {
    "id" : "37301bcd-515c-4a07-8aa3-3ac32ae16333",
    "prId" : 23673,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23673#pullrequestreview-176868259",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15cf134d-7a7f-4916-b211-97522271031c",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think the names of the functions could be better. Not sure what would be the clearest, but if we leave this as `validate_one`, it would make things simpler to call the other `perform_validation`, `validation_conditions` or something like that. Or may be that one should be `validate_one`, and this should be `get_validation_data`, or something similar.\r\n\r\nNot sure what's best, but the current names don't tell much about what each one does.",
        "createdAt" : "2018-11-19T10:52:09Z",
        "updatedAt" : "2018-12-02T19:00:58Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "fda25542-cace-4b27-83fa-8b751a509ef2",
        "parentId" : "15cf134d-7a7f-4916-b211-97522271031c",
        "authorId" : "a77604aa-76a9-4cd2-a16a-13c6e622f6c9",
        "body" : "I like `get_validation_data` it seems to be the most descriptive.",
        "createdAt" : "2018-11-20T16:49:15Z",
        "updatedAt" : "2018-12-02T19:00:58Z",
        "lastEditedBy" : "a77604aa-76a9-4cd2-a16a-13c6e622f6c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e75dd0b33e88da1750991a7ad1d225793f19a30e",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +718,722 @@\n\ndef validate_one(func_name):\n    \"\"\"\n    Validate the docstring for the given func_name"
  },
  {
    "id" : "bf80d9f3-bdd1-45f9-824b-28dd80789925",
    "prId" : 24188,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24188#pullrequestreview-185197128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f23eefd-4fd2-45aa-a2a6-690dfceb3145",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Where does this actually exist? Seems like we could be more explicit rather than concatting summary and extended_summary",
        "createdAt" : "2018-12-12T06:23:55Z",
        "updatedAt" : "2018-12-14T16:36:45Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "a238b98d-b93b-4542-8612-45607297041d",
        "parentId" : "9f23eefd-4fd2-45aa-a2a6-690dfceb3145",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "if `.. deprecated::` exists in the parameters section, we don't want to consider the docstring as deprecated, that's why it's checking if it exists in the summaries. Is this what you are asking?",
        "createdAt" : "2018-12-14T16:31:02Z",
        "updatedAt" : "2018-12-14T16:36:45Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "b64253ef-11fc-4635-883c-16221adcd928",
        "parentId" : "9f23eefd-4fd2-45aa-a2a6-690dfceb3145",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "No my point is that if we expected a very strict placement of the directive after the short but before the extended summary then we wouldn't need to concat the two to get this. Wouldn't it just exist in the summary at that point?",
        "createdAt" : "2018-12-14T16:45:44Z",
        "updatedAt" : "2018-12-14T16:45:44Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "729abded-8281-4c66-91bc-c250d4989bfc",
        "parentId" : "9f23eefd-4fd2-45aa-a2a6-690dfceb3145",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "That's a good point, and I had to review the code again to remember the reasoning.\r\n\r\nFor things like ignoring errors in deprecated docstrings, we need to know which functions/methods are deprecated, and this is what `deprecate` returns. But to validate that the `.. deprecated::` directive is placed in the right position, we don't care about all the `Panel` methods, which the script considers deprecated, but only the ones that are deprecated because they have the directive. And this is what `deprecated_with_directive` returns.\r\n\r\n@aqurilla it may be worth explaining this briefly in the docstrings of `deprecated` and `deprecated_with_directive`, so it's clear for anyone reading the code.",
        "createdAt" : "2018-12-14T16:57:12Z",
        "updatedAt" : "2018-12-14T16:57:13Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5599343fc2108fc2973717a4f656fa55aeeea5fe",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +496,500 @@    @property\n    def deprecated_with_directive(self):\n        return '.. deprecated:: ' in (self.summary + self.extended_summary)\n\n    @property"
  },
  {
    "id" : "8d54d25f-dec3-416d-a827-426eb96937d2",
    "prId" : 24188,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24188#pullrequestreview-185230109",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88b04a7e-0eac-451f-a35e-a12d8a9af9f3",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Not sure I like the name of this property since deprecations can happen elsewhere in the docstring besides just the summary, though this property only looks at the summary. Do you foresee this covering other aspects of the docstring in the future? If not better to be explicit about what it is searching for the directive in",
        "createdAt" : "2018-12-12T06:26:54Z",
        "updatedAt" : "2018-12-14T16:36:45Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "86e23d21-c6a6-4df1-a82f-013f9513eae2",
        "parentId" : "88b04a7e-0eac-451f-a35e-a12d8a9af9f3",
        "authorId" : "55aa4de8-eba9-4277-a5c7-aac678f5d8f4",
        "body" : "Hi @datapythonista , what would be the best way to resolve this?",
        "createdAt" : "2018-12-14T16:11:25Z",
        "updatedAt" : "2018-12-14T16:36:45Z",
        "lastEditedBy" : "55aa4de8-eba9-4277-a5c7-aac678f5d8f4",
        "tags" : [
        ]
      },
      {
        "id" : "9248fa30-5a7c-49a3-b591-865775c48ace",
        "parentId" : "88b04a7e-0eac-451f-a35e-a12d8a9af9f3",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "@WillAyd, this is a property of the `Docstring` class. To me it's explicit enough that `Docstring.deprecated` and `Docstring.deprecated_with_directive` return whether the docstring refers to a deprecated function/method. If it refers to a parameter that has been deprecated I'd expect a property `Docstring.param_deprecated`.\r\n\r\nWould you prefer something like `Docstrings.docstring_deprecated`? Or what do you propose?",
        "createdAt" : "2018-12-14T16:29:39Z",
        "updatedAt" : "2018-12-14T16:36:45Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "b7d35d25-a117-4646-a824-6e40c889c0b3",
        "parentId" : "88b04a7e-0eac-451f-a35e-a12d8a9af9f3",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm understanding the reasoning more. Why do we have both properties though? Wouldn't just `deprecated` suffice?",
        "createdAt" : "2018-12-14T16:44:26Z",
        "updatedAt" : "2018-12-14T16:44:27Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "970b7a41-aac8-4afe-a21f-8eddf358f3be",
        "parentId" : "88b04a7e-0eac-451f-a35e-a12d8a9af9f3",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "You're right, but as this is to validate that, we want to know if it's in the short summary, meaning that is the first thing in the docstring, to be able to report it as an error.",
        "createdAt" : "2018-12-14T16:52:50Z",
        "updatedAt" : "2018-12-14T16:52:50Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "359e4a7b-0f85-4f64-b3ae-3b236d4a2cf8",
        "parentId" : "88b04a7e-0eac-451f-a35e-a12d8a9af9f3",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "So can't we just merge with `deprecated` anyway? As of now they are the same thing save the latter explicitly handling `Panel`. ",
        "createdAt" : "2018-12-14T16:59:33Z",
        "updatedAt" : "2018-12-14T16:59:33Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "bb879e88-88f6-4bc6-b279-a11b5ea05bb7",
        "parentId" : "88b04a7e-0eac-451f-a35e-a12d8a9af9f3",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I don't see your point. We need both, `deprecated` for knowing if it's deprecated (when we generate the json, or when we use ``--ignore-deprecated`) and `deprecated_with_directive` to validate that the directive is in the correct position.\r\n\r\nWe could just leave `deprecated_with_directive` and check in two places also whether it's a method of `Panel` (and in the future may be `SparseDataFrame`...). But that seems a much worse approach, duplicating code and keeping things clear.\r\n\r\nAm I not understanding you?",
        "createdAt" : "2018-12-14T17:05:17Z",
        "updatedAt" : "2018-12-14T17:05:17Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "1680a83f-da82-49de-9732-5a5ca71b1864",
        "parentId" : "88b04a7e-0eac-451f-a35e-a12d8a9af9f3",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think we are conceptually there but there are parts of the implementation that I think are going to make this confusing. Specifically assuming that the special casing for Panel is temporary, then `deprecated` and `deprecated_with_directive` are the same thing. So if the point is to do it in two passes to:\r\n\r\n1. First figure out what docstrings are deprecated AND then\r\n2. Ensure that the directive is placed appropriately therein\r\n\r\nThe current implementation doesn't really do that, because again ignoring the special casing for Panel `directive` and `deprecated_with_directive` are the same exact thing.\r\n\r\nAre you expecting the implementation of `directive` to change in a separate PR?",
        "createdAt" : "2018-12-14T17:11:06Z",
        "updatedAt" : "2018-12-14T17:11:06Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e429adb5-bd3a-418b-8bad-9e07a8026484",
        "parentId" : "88b04a7e-0eac-451f-a35e-a12d8a9af9f3",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I don't understand well, but I don't want to spend more time in a minor thing like this. If you can tell @aqurilla what you propose, so it can be implemented, that would be great.",
        "createdAt" : "2018-12-14T17:16:19Z",
        "updatedAt" : "2018-12-14T17:16:19Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "2c5eddcb-1f41-4881-907d-8f5154a757d0",
        "parentId" : "88b04a7e-0eac-451f-a35e-a12d8a9af9f3",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea @aqurilla if you can combine the two methods into just `deprecated` and use that; I don't think there's a need for two separate properties",
        "createdAt" : "2018-12-14T17:18:40Z",
        "updatedAt" : "2018-12-14T17:18:40Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "90640a71-9cf9-4a20-b677-16cb3119b306",
        "parentId" : "88b04a7e-0eac-451f-a35e-a12d8a9af9f3",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "That's what was first implemented, and the validation will return every method of `Panel` as a false positive for not having the `.. deprecate::` directive in the right position. That's what I tried to explain before.",
        "createdAt" : "2018-12-14T17:22:05Z",
        "updatedAt" : "2018-12-14T17:22:05Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "a56f6ac9-1f4a-4f7a-a1ff-644ea6d01974",
        "parentId" : "88b04a7e-0eac-451f-a35e-a12d8a9af9f3",
        "authorId" : "55aa4de8-eba9-4277-a5c7-aac678f5d8f4",
        "body" : "Should I revert the implementation to the earlier one in this case?",
        "createdAt" : "2018-12-14T17:32:55Z",
        "updatedAt" : "2018-12-14T17:32:55Z",
        "lastEditedBy" : "55aa4de8-eba9-4277-a5c7-aac678f5d8f4",
        "tags" : [
        ]
      },
      {
        "id" : "7b1b66b2-5986-471b-acf5-523341a48fe9",
        "parentId" : "88b04a7e-0eac-451f-a35e-a12d8a9af9f3",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Make sure that whatever you change keep validating the position of the `.. deprecated::` directive correctly.\r\n\r\nI'd suggest to first merge master and add the docstrings in a commit, so in case merging `desprecate` and `deprecate_with_directive` doesn't work well, we can revert those changes easily.",
        "createdAt" : "2018-12-14T18:28:04Z",
        "updatedAt" : "2018-12-14T18:28:04Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5599343fc2108fc2973717a4f656fa55aeeea5fe",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +495,499 @@\n    @property\n    def deprecated_with_directive(self):\n        return '.. deprecated:: ' in (self.summary + self.extended_summary)\n"
  },
  {
    "id" : "8790b60a-9454-496b-bf07-31a33c361131",
    "prId" : 25008,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25008#pullrequestreview-201206264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "756ac9e9-d14d-40aa-973f-8ef9a630956c",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Does isort like this location?",
        "createdAt" : "2019-02-06T03:55:50Z",
        "updatedAt" : "2019-02-19T06:04:36Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "24e8a52b-f2d5-4923-b168-b86803f16b68",
        "parentId" : "756ac9e9-d14d-40aa-973f-8ef9a630956c",
        "authorId" : "dd48c2d2-db3a-4d22-966c-f423242cd053",
        "body" : "I didn't know about this.\r\n\r\nWell, the already existing imports aren't properly sorted either. I could apply isort and commit the file, but I don't know if reordering all those imports can have any impact somewhere on the code. Thus, I'll refrain from doing that unless instructed.",
        "createdAt" : "2019-02-07T16:56:09Z",
        "updatedAt" : "2019-02-19T06:04:36Z",
        "lastEditedBy" : "dd48c2d2-db3a-4d22-966c-f423242cd053",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d6ec7e00b0ee596aa2dbd40c5ea63d4b4119983",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +27,31 @@import doctest\nimport tempfile\nimport ast\nimport textwrap\n"
  },
  {
    "id" : "69d3808a-3bb7-48e0-bfec-944816dddef2",
    "prId" : 25008,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25008#pullrequestreview-203329621",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "faad8cc1-7a4c-48da-b081-4e40ed85641d",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Just keep inside the try block what it can fail, not all the code.",
        "createdAt" : "2019-02-13T16:58:37Z",
        "updatedAt" : "2019-02-19T06:04:36Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d6ec7e00b0ee596aa2dbd40c5ea63d4b4119983",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +493,497 @@    def method_source(self):\n        try:\n            source = inspect.getsource(self.obj)\n        except TypeError:\n            return ''"
  },
  {
    "id" : "b0c368cd-a3ab-41a8-b0f3-00ee43a996ab",
    "prId" : 25008,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25008#pullrequestreview-203712320",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80d9062b-4696-43ca-87e2-43bf12b8eb6a",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "So noted your previous comment about walk not providing context, but is there still no other option in ast? Does creating a NodeVisitor subclass not preserve context?\r\n\r\nWhile this wouldn't ever go too deep I'm always a little hesitant I think it's typically good to avoid recursive calls which modify objects as they are generally tougher to reason about that non-recursive / mutable code",
        "createdAt" : "2019-02-14T07:01:17Z",
        "updatedAt" : "2019-02-19T06:04:36Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "7a0f51f3-eaea-4563-8559-8b4ed27949ac",
        "parentId" : "80d9062b-4696-43ca-87e2-43bf12b8eb6a",
        "authorId" : "dd48c2d2-db3a-4d22-966c-f423242cd053",
        "body" : "I read the ast doc in search for an alternative and didn't find anything that could help. \r\n\r\nRegarding NodeVisitor, it allows the redefinition of the `.visitor(node)` method, then walks the tree and calls `.visitor(node)` for each node separately. As I understand, it provides no way to influence the walking of the tree itself, so we could prune the nested functions subtrees.\r\n\r\nEven so, wouldn't having to create a subclass bring even more complexity to the code?",
        "createdAt" : "2019-02-14T12:13:27Z",
        "updatedAt" : "2019-02-19T06:04:36Z",
        "lastEditedBy" : "dd48c2d2-db3a-4d22-966c-f423242cd053",
        "tags" : [
        ]
      },
      {
        "id" : "ad6522ca-7ea1-4a9b-bb05-9e23873dd93f",
        "parentId" : "80d9062b-4696-43ca-87e2-43bf12b8eb6a",
        "authorId" : "dd48c2d2-db3a-4d22-966c-f423242cd053",
        "body" : "Furthermore, the `get_returns_not_on_nested_functions(node)` doesn't modify the ast structure.",
        "createdAt" : "2019-02-14T12:16:48Z",
        "updatedAt" : "2019-02-19T06:04:36Z",
        "lastEditedBy" : "dd48c2d2-db3a-4d22-966c-f423242cd053",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d6ec7e00b0ee596aa2dbd40c5ea63d4b4119983",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +512,516 @@        '''\n\n        def get_returns_not_on_nested_functions(node):\n            returns = [node] if isinstance(node, ast.Return) else []\n            for child in ast.iter_child_nodes(node):"
  },
  {
    "id" : "581d2a17-d6c6-489b-aa22-aed9683a682e",
    "prId" : 26188,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26188#pullrequestreview-229321806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d6ec58d-9846-4fb8-a746-0ea541df67a9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could write this as a list comprehension but not a big deal",
        "createdAt" : "2019-04-23T02:07:03Z",
        "updatedAt" : "2019-04-23T02:22:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a7e4e494eb55fa93e719ff48cc770f38ceabdfd",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +474,478 @@    def see_also(self):\n        result = collections.OrderedDict()\n        for funcs, desc in self.doc['See Also']:\n            for func, _ in funcs:\n                result[func] = ''.join(desc)"
  },
  {
    "id" : "8ae64754-4379-4fad-a9dd-3a146b2ad55e",
    "prId" : 28811,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28811#pullrequestreview-300265879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35b62456-12a3-4750-9e5e-24e85729da5c",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you just do a `re.findall` here instead? I don't think whitespace is important",
        "createdAt" : "2019-10-10T02:01:29Z",
        "updatedAt" : "2019-10-10T18:20:51Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e51319fe-b0b2-4670-ae80-84b72385a62e",
        "parentId" : "35b62456-12a3-4750-9e5e-24e85729da5c",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I'd prefer that we're consistent with the spacing after the comma. I think it's a bit distracting having a mix of `foo, bar`, `foo,bar`, `foo ,bar`...\r\n\r\nIn a follow up could be nice to have more specific error messages when the problem is the spacing, but this looks good to me for this PR.",
        "createdAt" : "2019-10-10T05:08:48Z",
        "updatedAt" : "2019-10-10T18:20:51Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "2b0eef50-1613-4037-80a1-c4dd87deb37c",
        "parentId" : "35b62456-12a3-4750-9e5e-24e85729da5c",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "OK sounds good. Would be nice to document that somewhere if it isn't already then (follow up PR is fine)",
        "createdAt" : "2019-10-10T18:24:14Z",
        "updatedAt" : "2019-10-10T18:24:25Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "83541482-a3da-4831-8ded-826a4891bfd1",
        "parentId" : "35b62456-12a3-4750-9e5e-24e85729da5c",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Also not sure if that needs its own error code",
        "createdAt" : "2019-10-10T18:25:08Z",
        "updatedAt" : "2019-10-10T18:25:08Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8931a2d130a1392c5b4635c02fd7b365d66a0a6",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +425,429 @@        parameters = collections.OrderedDict()\n        for names, type_, desc in self.doc[\"Parameters\"]:\n            for name in names.split(\", \"):\n                parameters[name] = (type_, \"\".join(desc))\n        return parameters"
  }
]