[
  {
    "id" : "26ed8319-dbd5-41a9-ae6c-9129cd880374",
    "prId" : 19898,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19898#pullrequestreview-100647368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f5dc289-aba8-4852-9464-fd4559e47253",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is there a reason you do this? As the code below works fine for a class as well, eg pandas.DataFrame (while now the script will say the keywords and signature did not match, while in fact they do)",
        "createdAt" : "2018-03-01T17:23:12Z",
        "updatedAt" : "2018-03-02T09:36:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "78c0b1cf-9b67-4781-acbe-b4bbd394e65a",
        "parentId" : "3f5dc289-aba8-4852-9464-fd4559e47253",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I didn't research much, but if I introspect parameters from a non-function I get this error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"./validate_docstrings.py\", line 353, in <module>\r\n    sys.exit(main(args.function))\r\n  File \"./validate_docstrings.py\", line 337, in main\r\n    return validate_all()\r\n  File \"./validate_docstrings.py\", line 259, in validate_all\r\n    int(doc.correct_parameters),\r\n  File \"./validate_docstrings.py\", line 159, in correct_parameters\r\n    return not bool(self.parameter_mismatches)\r\n  File \"./validate_docstrings.py\", line 138, in parameter_mismatches\r\n    signature_params = self.signature_parameters\r\n  File \"./validate_docstrings.py\", line 130, in signature_parameters\r\n    params = tuple(inspect.signature(self.method_obj).parameters.keys())\r\n  File \"/home/mgarcia/.anaconda3/envs/pandas_dev/lib/python3.6/inspect.py\", line 3036, in signature\r\n    return Signature.from_callable(obj, follow_wrapped=follow_wrapped)\r\n  File \"/home/mgarcia/.anaconda3/envs/pandas_dev/lib/python3.6/inspect.py\", line 2786, in from_callable\r\n    follow_wrapper_chains=follow_wrapped)\r\n  File \"/home/mgarcia/.anaconda3/envs/pandas_dev/lib/python3.6/inspect.py\", line 2341, in _signature_from_callable\r\n    'no signature found for builtin type {!r}'.format(obj))\r\nValueError: no signature found for builtin type <class 'pandas.core.indexing._AtIndexer'>\r\n```",
        "createdAt" : "2018-03-02T00:49:42Z",
        "updatedAt" : "2018-03-02T09:36:38Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "da24d08fa21f8b848e26a4aaf20e1344e787fcd7",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +129,133 @@    def signature_parameters(self):\n        if not inspect.isfunction(self.method_obj):\n            return tuple()\n        params = tuple(inspect.signature(self.method_obj).parameters.keys())\n        if params and params[0] in ('self', 'cls'):"
  },
  {
    "id" : "e33020cf-d2e6-4600-acb4-bf3a6097f7c1",
    "prId" : 19960,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19960#pullrequestreview-100758717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49fc2f66-f7a2-4bdd-823e-840be185025e",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Is it difficult to find the accessors that have been registered, instead of hardcoding them here? So we don't need to remember to change this when a new accessor is created.",
        "createdAt" : "2018-03-02T10:42:16Z",
        "updatedAt" : "2018-03-02T11:02:39Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "57cfc811-dca3-40c9-916c-3051b582e426",
        "parentId" : "49fc2f66-f7a2-4bdd-823e-840be185025e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yeah, I was looking into the class (eg that I could check they inherit from a base Accessor class, but that's not consistent between them). \r\nSo not really sure there is a better way, but totally agree it is not ideal.",
        "createdAt" : "2018-03-02T10:56:02Z",
        "updatedAt" : "2018-03-02T11:02:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "8ea84b05-1ba7-46dd-83ea-b79b5227fecb",
        "parentId" : "49fc2f66-f7a2-4bdd-823e-840be185025e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Actually, there is a `_accessors` attribute. But not fully sure to what extent we can rely on that.",
        "createdAt" : "2018-03-02T11:01:52Z",
        "updatedAt" : "2018-03-02T11:02:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "61173f61-d433-4300-adc6-1c1714ad39ac",
        "parentId" : "49fc2f66-f7a2-4bdd-823e-840be185025e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The problem is then that I need to get the class (eg Series in case of pandas.Series.dt), which is also difficult to introspect. So maybe the easiest is to leave it as is.",
        "createdAt" : "2018-03-02T11:03:27Z",
        "updatedAt" : "2018-03-02T11:03:27Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "87386a40-4598-4bb2-9174-abcb72212c4b",
        "parentId" : "49fc2f66-f7a2-4bdd-823e-840be185025e",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Sure, it's quite useful as it is, we can improve it in the future if we find a way.",
        "createdAt" : "2018-03-02T11:06:41Z",
        "updatedAt" : "2018-03-02T11:06:41Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "c44d208f-4f5d-4eff-a88a-2faf3631e756",
        "parentId" : "49fc2f66-f7a2-4bdd-823e-840be185025e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "FYI: https://github.com/pandas-dev/pandas/issues/19963\r\n\r\nI think `isinstance(object.__getattribute__(self, method_obj.__name__), CachedAccessor)` might have done it, But having an official registry is better :)",
        "createdAt" : "2018-03-02T12:26:54Z",
        "updatedAt" : "2018-03-02T12:26:54Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e436e5b7364ee495f7b4f468cc405232b314a02",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +134,138 @@            return tuple()\n        if (inspect.isclass(self.method_obj)\n                and self.method_name.split('.')[-1] in {'dt', 'str', 'cat'}):\n            # accessor classes have a signature, but don't want to show this\n            return tuple()"
  },
  {
    "id" : "ee77da24-55d4-4251-9b6e-520dca9908bd",
    "prId" : 20025,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20025#pullrequestreview-102098459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "565c4cd8-a933-45c6-b75a-53489dafbdc6",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "There are actually some cases where I see people deliberately leaving a blank line at the end of the docstring (see eg examples in http://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html. Also numpydoc does it in the example: http://numpydoc.readthedocs.io/en/latest/format.html, although not sure if it is on purpose). \r\n\r\nSo not sure we should be that strict here.",
        "createdAt" : "2018-03-07T11:10:01Z",
        "updatedAt" : "2018-03-07T21:04:46Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "5a96e0de-ab6d-413a-82d8-19a4a6926b62",
        "parentId" : "565c4cd8-a933-45c6-b75a-53489dafbdc6",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "It's your call, but personally I think that if there is no specific reason to leave one line sometimes, and to not leave it other times, I'd define a standard way to do it.",
        "createdAt" : "2018-03-07T21:07:22Z",
        "updatedAt" : "2018-03-07T21:07:22Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "bd87463e-b8d2-45aa-b3d3-abd676be1a14",
        "parentId" : "565c4cd8-a933-45c6-b75a-53489dafbdc6",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Somehow I have a personal preference to leave a blank line at the end .. :-) \r\nBut since the way you check it now is most occurring way in pandas, let's pick that.",
        "createdAt" : "2018-03-07T21:10:43Z",
        "updatedAt" : "2018-03-07T21:10:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c5b338837914ce07707bb479ecc0d21f9c00e28",
    "line" : 340,
    "diffHunk" : "@@ -1,1 +391,395 @@                    'the last text in the docstring (do not close the '\n                    'quotes in the same line as the text, or leave a '\n                    'blank line between the last text and the quotes)')\n    if doc.double_blank_lines:\n        errs.append('Use only one blank line to separate sections or '"
  },
  {
    "id" : "03175e27-7b69-4382-a20d-6f3003925a83",
    "prId" : 20025,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20025#pullrequestreview-102096785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d31e66a-97e4-4971-b112-578895631cbe",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "tuple -> list ?",
        "createdAt" : "2018-03-07T21:03:10Z",
        "updatedAt" : "2018-03-07T21:04:46Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4857f872-78a8-44c7-b6a2-84975832ac14",
        "parentId" : "1d31e66a-97e4-4971-b112-578895631cbe",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Did the opposite, but yes, fixed. :)",
        "createdAt" : "2018-03-07T21:05:26Z",
        "updatedAt" : "2018-03-07T21:05:26Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c5b338837914ce07707bb479ecc0d21f9c00e28",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +192,196 @@            # of the signature\n            return tuple()\n        params = tuple(signature.parameters.keys())\n        if params and params[0] in ('self', 'cls'):\n            return params[1:]"
  },
  {
    "id" : "714adb08-023d-4515-9c03-5c3105a55939",
    "prId" : 20061,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20061#pullrequestreview-147302321",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eab6815e-8dfe-4719-a720-33f8ed286933",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This does not seem to work for me. Eg checking `pandas.Series.dt` with the script complains about parameter 'data' not being documented.\r\n\r\n(but anyhow, it is better as on master, there it raises an attribute error somewhere in the script)",
        "createdAt" : "2018-08-17T15:55:19Z",
        "updatedAt" : "2018-08-17T15:58:04Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2de816bc-1398-4bc2-a679-8910be6ec4d4",
        "parentId" : "eab6815e-8dfe-4719-a720-33f8ed286933",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Good to know. I’d be happy to open that up as a follow up issue here - worth adding dedicated tests for accessors",
        "createdAt" : "2018-08-17T16:51:08Z",
        "updatedAt" : "2018-08-17T16:51:08Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fb5405a8d4fb1d5acfd215e5046bb091048b872",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +189,193 @@                    self.method_name.split('.')[-1] in\n                    self.method_obj._accessors):\n                # accessor classes have a signature but don't want to show this\n                return tuple()\n        try:"
  },
  {
    "id" : "ca36a51e-51ab-4db3-ba46-f87382b17e4e",
    "prId" : 20112,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20112#pullrequestreview-103900438",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6059593f-c861-463c-8f30-3217e599956c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "'\\t' in line is good enough, yes? we don't all *any* tabs",
        "createdAt" : "2018-03-10T14:44:12Z",
        "updatedAt" : "2018-03-10T14:44:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c751e150-5796-4f68-a6f5-2debb1660c84",
        "parentId" : "6059593f-c861-463c-8f30-3217e599956c",
        "authorId" : "b2b16778-e746-4425-affa-436169462dbb",
        "body" : "If you see the comments above @TomAugspurger requested \"Starts with tab\" as there might be tabs to format a table or the like I think",
        "createdAt" : "2018-03-10T14:46:11Z",
        "updatedAt" : "2018-03-10T14:46:12Z",
        "lastEditedBy" : "b2b16778-e746-4425-affa-436169462dbb",
        "tags" : [
        ]
      },
      {
        "id" : "cc2ce3c9-59a2-40d2-b024-201257e9d8a4",
        "parentId" : "6059593f-c861-463c-8f30-3217e599956c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, not sure this is actually strict enough. as I said we don't allow *any* tabs",
        "createdAt" : "2018-03-10T14:51:35Z",
        "updatedAt" : "2018-03-10T14:51:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e8eabf9e-6ae5-49ef-bd10-2b17950b7a5e",
        "parentId" : "6059593f-c861-463c-8f30-3217e599956c",
        "authorId" : "b2b16778-e746-4425-affa-436169462dbb",
        "body" : "I'm happy to change it back to allow no tabs at all. Let me know what you think @TomAugspurger ",
        "createdAt" : "2018-03-10T14:54:29Z",
        "updatedAt" : "2018-03-10T14:54:29Z",
        "lastEditedBy" : "b2b16778-e746-4425-affa-436169462dbb",
        "tags" : [
        ]
      },
      {
        "id" : "7f23a27d-942e-419c-b061-ea486ecc98b9",
        "parentId" : "6059593f-c861-463c-8f30-3217e599956c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback There are cases where a `\\t` is included in the text as literal character (for the explanation).\r\nSo I think only checking the start of a line is good.",
        "createdAt" : "2018-03-14T14:39:41Z",
        "updatedAt" : "2018-03-14T14:39:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f80fcdbc-e2b7-4dc7-8012-5646b153bbba",
        "parentId" : "6059593f-c861-463c-8f30-3217e599956c",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Unrelated to where `\\t` is included, we could use `re.search(r'^ *\\t', self.raw_doc, flags=re.MULTILINE)` and avoid the loop",
        "createdAt" : "2018-03-14T16:37:41Z",
        "updatedAt" : "2018-03-14T16:37:41Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "b3aa2b58-82d1-4c01-b44d-74fd618fe3da",
        "parentId" : "6059593f-c861-463c-8f30-3217e599956c",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "ups, sorry, I see now that you want to report the lines with the tabs...",
        "createdAt" : "2018-03-14T16:39:37Z",
        "updatedAt" : "2018-03-14T16:39:37Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb8b59b5b71a3d7ba2bc4d94cd6f8d4919007ef6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +458,462 @@\n    for line in doc.raw_doc.splitlines():\n        if re.match(\"^ *\\t\", line):\n            errs.append('Tabs found at the start of line \"{}\", '\n                        'please use whitespace only'.format(line.lstrip()))"
  }
]