[
  {
    "id" : "58d06f51-846c-44e0-8bf0-5f7fea74c21d",
    "prId" : 11157,
    "prUrl" : "https://github.com/apache/airflow/pull/11157#pullrequestreview-497080815",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5386b2c6-57d7-48ba-938c-149b53d067de",
        "parentId" : null,
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "It would be great to print information about the stop_airlfow.sh command. I find it super useful but it's hard to discover. I think the best way is to print it in the terminal that you are dropped at :) \r\n\r\n\"You can use 'stop_tmux_airflow.sh' to kill the whole session\"",
        "createdAt" : "2020-09-26T19:51:23Z",
        "updatedAt" : "2020-09-27T13:14:18Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "8ca08cf3-a2b5-4da2-b930-f344569fa7ad",
        "parentId" : "5386b2c6-57d7-48ba-938c-149b53d067de",
        "authorId" : "b1b73d09-116c-4f45-91c6-5ac1317341ac",
        "body" : "added this too. I had to create a new script file, but at the end it worked.",
        "createdAt" : "2020-09-27T13:16:59Z",
        "updatedAt" : "2020-09-27T13:17:00Z",
        "lastEditedBy" : "b1b73d09-116c-4f45-91c6-5ac1317341ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "410a3e7dd206072b77bfe70ea68def531e8a38a4",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +18,22 @@if [[ ${START_AIRFLOW:=\"false\"} == \"true\" ]]; then\n\n    ln -s \"${IN_CONTAINER_DIR}/stop_tmux_airflow.sh\" stop_airflow.sh\n\n    export AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS=${LOAD_DEFAULT_CONNECTIONS}"
  },
  {
    "id" : "2b235434-1c1e-4ffe-8c23-202bb7415148",
    "prId" : 11791,
    "prUrl" : "https://github.com/apache/airflow/pull/11791#pullrequestreview-515940625",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28ca4e52-955c-48ce-a196-1380ee21e12e",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Added comment too @potiuk ",
        "createdAt" : "2020-10-23T18:42:01Z",
        "updatedAt" : "2020-10-23T18:42:02Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "764ce983-27a9-4416-ae2f-fc3834fcc3a3",
        "parentId" : "28ca4e52-955c-48ce-a196-1380ee21e12e",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "I also think the right executor should be set if you just enter breeze with --backend postgres or --backend mysql with shell rather than use 'start-airflow' (new feature)",
        "createdAt" : "2020-10-23T18:43:38Z",
        "updatedAt" : "2020-10-23T18:44:01Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "d2b6c6d4-2e57-4ad2-872f-59458294fdff",
        "parentId" : "28ca4e52-955c-48ce-a196-1380ee21e12e",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "but won't that interfere when running tests using `pytest tests/some_file` inside `./breeze`",
        "createdAt" : "2020-10-23T18:46:23Z",
        "updatedAt" : "2020-10-23T18:46:23Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "e0cddbf9-1df4-4c36-83df-f2312358b13e",
        "parentId" : "28ca4e52-955c-48ce-a196-1380ee21e12e",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "i.e I feel there are 2 kind of uses currently I can think of\r\n\r\n1) People who run `./breeze --backend postgres` to run tests so that they can replicate their CI failures for examples\r\n2) People who want to run DAGs and try out new features/ test RCs or alphas etc for whom `./breeze start-airflow --backend postgres` would be easier because it supports using an ENV file too and I feel it is very powerful because of that and coz it also supports init file, WDYT ?",
        "createdAt" : "2020-10-23T18:48:45Z",
        "updatedAt" : "2020-10-23T18:48:46Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "a7ef2e94-b51b-4c49-b85f-9fea77004c09",
        "parentId" : "28ca4e52-955c-48ce-a196-1380ee21e12e",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "So far it never interfered. The default executor for Postgres/Mysql was Local (no variable set), for Sqlite it was Sequential (set by the variable in backend-sqlite.yml) . That's how it worked so far. somehow it looks like with the recent changes Sequential became the default ?",
        "createdAt" : "2020-10-23T18:50:30Z",
        "updatedAt" : "2020-10-23T18:50:52Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "54e339ec-6fc8-4bd8-ba0e-663b45923e49",
        "parentId" : "28ca4e52-955c-48ce-a196-1380ee21e12e",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Are you sure about that, I can remember that is was always SequentialExecutor for me inside of breeze but maybe not.",
        "createdAt" : "2020-10-23T18:57:06Z",
        "updatedAt" : "2020-10-23T18:57:06Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "28c3fef9-c796-41d4-8c39-53560fa2f70f",
        "parentId" : "28ca4e52-955c-48ce-a196-1380ee21e12e",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "> i.e I feel there are 2 kind of uses currently I can think of\r\n\r\nNot really. People were running breeze and then started airflow inside. 'start-airflow' is very recent addition and only there to automate tmux terminals and starting scheduler/webserver.\r\n\r\nMost people simply start breeze and manually running webseerver/scheduler and get it working there.\r\n\r\nI believe making airflow not work by default in breeze is a very bad idea.\r\n",
        "createdAt" : "2020-10-23T18:58:36Z",
        "updatedAt" : "2020-10-23T18:58:37Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "8618ab3f-b826-460f-93f3-bed49ad09486",
        "parentId" : "28ca4e52-955c-48ce-a196-1380ee21e12e",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : ">I believe making airflow not work by default in breeze is a very bad idea.\r\n\r\nWhat do you mean? How will it make airflow not work",
        "createdAt" : "2020-10-23T18:59:23Z",
        "updatedAt" : "2020-10-23T18:59:24Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "40926b15-82b2-490f-bea4-bec98c3484ad",
        "parentId" : "28ca4e52-955c-48ce-a196-1380ee21e12e",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "the instructions to run RCs and test alphas are more recent and were added after `start-airflow` command is my point. Our CI and breeze update more frequently (multiple times a week), so if it makes sense we should promote and tell users to use new stuff even if it is recent.\r\n\r\n",
        "createdAt" : "2020-10-23T19:00:58Z",
        "updatedAt" : "2020-10-23T19:02:03Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "94d75520-57be-448b-8d48-3081456f3f89",
        "parentId" : "28ca4e52-955c-48ce-a196-1380ee21e12e",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "so far when you run:\r\n\r\n```\r\n./breeze \r\n```\r\n\r\nand then \r\n\r\n```\r\ntmux\r\n```\r\n\r\nand then \r\n\r\n\r\nin one terminal - `airlfow webserver`\r\n\r\nin another ``airlfow scheduler``\r\n\r\nit just worked (because LocalExccutor was default for postgres/mysql).\r\n\r\nseems that now default is the Sequential one - no matter what backend is used. Seems that if you do not set executor and the DB is postgres/mysql then the sequential one is used ?\r\n",
        "createdAt" : "2020-10-23T19:04:37Z",
        "updatedAt" : "2020-10-23T19:04:37Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "06298d6b-c4af-4fb6-8623-23fa296245cd",
        "parentId" : "28ca4e52-955c-48ce-a196-1380ee21e12e",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "I am not sure if I am right about it - but it seems this is how it works now - we get sequential executor by default where we used to have local for Pg/Msql. Not sure where it came from, but it's just wrong default.",
        "createdAt" : "2020-10-23T19:06:47Z",
        "updatedAt" : "2020-10-23T19:06:47Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "17a3369c-49a1-44b2-8261-682e0cee1342",
        "parentId" : "28ca4e52-955c-48ce-a196-1380ee21e12e",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Or maybe sequential executor worked well with PG/MG and stopped working well with it... either way it's something we need to fix (at the least by failing hard if sequential is wrong for PG/MYSQL but best - changing the default) ",
        "createdAt" : "2020-10-23T19:08:49Z",
        "updatedAt" : "2020-10-23T19:08:50Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "fa9ddd5e-dfc9-423d-8a33-dc9751a1c386",
        "parentId" : "28ca4e52-955c-48ce-a196-1380ee21e12e",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "that is correct, can you remember when it used to use `LocalExecutor` please before? I am honestly happy to do that and have approved your PR as long as you are sure it worked fine previously -- because I am not sure about that",
        "createdAt" : "2020-10-23T19:08:50Z",
        "updatedAt" : "2020-10-23T19:08:51Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "509c2cdf-40a7-45a3-9610-7e58abd19dba",
        "parentId" : "28ca4e52-955c-48ce-a196-1380ee21e12e",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "SequentialExecutor works with all the backends and have always worked with all backends, with SequentialExecutor tasks are just executed sequentially -- nothing more. Why do you think it would fail (except for the current bug)\r\n\r\nThat is the current behavior with Airflow too (and has always been like that since its inception), the default executor is `SequentialExecutor` even if you used Postgres or MySQL until you change the executor separately too",
        "createdAt" : "2020-10-23T19:11:26Z",
        "updatedAt" : "2020-10-23T19:11:45Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "b671da46-1cce-4765-884e-b0cae845c537",
        "parentId" : "28ca4e52-955c-48ce-a196-1380ee21e12e",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "I really think we should simply detect when the combination of DB/executor is not going to work and fail hard. I think this is the root cause of the problem.",
        "createdAt" : "2020-10-23T19:12:17Z",
        "updatedAt" : "2020-10-23T19:12:31Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "da511a60-2a9a-4d11-89c8-516af506f5ba",
        "parentId" : "28ca4e52-955c-48ce-a196-1380ee21e12e",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "apart from the current bug why do you think SequentialExecutor does not work with MySQL or Postgres",
        "createdAt" : "2020-10-23T19:14:27Z",
        "updatedAt" : "2020-10-23T19:14:28Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      }
    ],
    "commit" : "e99762fea3154b1aca76de276e569d05f3f2c938",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +23,27 @@    export AIRFLOW__CORE__LOAD_EXAMPLES=${LOAD_EXAMPLES}\n\n    # Use LocalExecutor if not set and if backend is not sqlite as it gives\n    # better performance\n    if [[ ${BACKEND} != \"sqlite\"  ]]; then"
  }
]