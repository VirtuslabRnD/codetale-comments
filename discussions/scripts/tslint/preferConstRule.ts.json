[
  {
    "id" : "8eb39989-c6de-4b06-8e86-dac72f876e77",
    "prId" : 5709,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7930b1e-ee25-4c8d-940c-d9674f6b485e",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "The only thing that we can parse as property of `ObjectLiteralExpression` except `PropertyAssignment` and `ShorthandPropertyAssignment` is `MethodDeclaration` and it is already a grammar error to have it in destructuring assignment. So I think it is safe to ignore other syntax kinds\n",
        "createdAt" : "2015-11-18T16:56:39Z",
        "updatedAt" : "2015-11-18T16:56:39Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbb61654fbe95c0d77e7a0ac6c3ba3080ee705c4",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +116,120 @@                }\n                else {\n                    // Should we throw an exception?\n                }\n            }"
  },
  {
    "id" : "9e533868-13bb-49c1-8733-5349df592a54",
    "prId" : 5531,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac4e8cca-4737-443c-b19b-b58ac559d14c",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`const`\n",
        "createdAt" : "2015-11-04T22:56:14Z",
        "updatedAt" : "2015-11-05T01:39:10Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "ca3fb2ad-7aff-4824-9c77-0ff81da5135f",
        "parentId" : "ac4e8cca-4737-443c-b19b-b58ac559d14c",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "That would be an error, good sir. `flags` is mutable and appears on the left hand side of the `|=` operator below.\n",
        "createdAt" : "2015-11-04T22:57:47Z",
        "updatedAt" : "2015-11-05T01:39:10Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "fa577bbd-4093-4154-8868-0034621e272a",
        "parentId" : "ac4e8cca-4737-443c-b19b-b58ac559d14c",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "My bad :smile: \n",
        "createdAt" : "2015-11-04T22:59:02Z",
        "updatedAt" : "2015-11-05T01:39:10Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "84551d7cbd5402e8f1be09d11010a2736c25236c",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +26,30 @@    node = walkUpBindingElementsAndPatterns(node);\n\n    let flags = node.flags;\n    if (node.kind === ts.SyntaxKind.VariableDeclaration) {\n        node = node.parent;"
  },
  {
    "id" : "48e6a92d-7be8-4822-85b1-dc18beadcca2",
    "prId" : 5531,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b02b5022-dd55-4b8f-91e5-2e17a543b6b2",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "curious why you call the `super.visitBinaryExpression` after ? or it doesn't matter?\n",
        "createdAt" : "2015-11-05T00:03:54Z",
        "updatedAt" : "2015-11-05T01:39:10Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "638c5cbb-fc62-4fda-889d-f9af6deb8b38",
        "parentId" : "b02b5022-dd55-4b8f-91e5-2e17a543b6b2",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I want my logic to occur before we decend into the expression.\n",
        "createdAt" : "2015-11-05T00:07:16Z",
        "updatedAt" : "2015-11-05T01:39:10Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "84551d7cbd5402e8f1be09d11010a2736c25236c",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +88,92 @@            this.visitLHSExpressions(node.left);\n        }\n        super.visitBinaryExpression(node);\n    }\n"
  }
]