[
  {
    "id" : "4cdaa8fb-4e45-4779-b7be-4704f25ce8a9",
    "prId" : 1885,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1885#pullrequestreview-510711718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f962e4a-d6f8-4453-a13f-e43bcdd02658",
        "parentId" : null,
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "I think this is a concrete case which captures some architectural disquiet I have been \r\ntrying to put into sensible words.\r\n\r\nFrom build.sbt it appears that the intent is that javalib & clib be independent and rely upon nativelib.  From the description of this PR, it appears that the intent is that nativelib be minimal/skinny/lightweight.  So far so good.\r\n\r\nNow we come upon stdio.  It is defined in both posix and c.  To the best of my searching in a clone of the PR branch, there is a stdio.scala in clib (corresponding, I believe, to this C file) but _none_ in posix lib, where a posix developer would expect to find it.\r\n\r\nThere are at least four possibilities, none good, and I think it takes an architectural\r\ndecision in a README in each of posixlib and clib:\r\n\r\n0) Let posixlib have holes as an explicit decision.\r\n\r\n1) code duplication.  posixlib & clib maintain their own bugs and quirks. (Is my\r\n    disregard for this solution showing? Oops!)\r\n\r\n2) Posixlib calls into clib.  This violates one of the inferred goals of this PR.\r\n\r\n3) Posixlib and clib call into a common lower layer. This gets up back to nativelib\r\n    or such, which violates another intent.\r\n\r\n ",
        "createdAt" : "2020-10-14T15:11:05Z",
        "updatedAt" : "2020-10-14T23:56:32Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      },
      {
        "id" : "3601200b-fd12-435e-bb3b-5d6852237b24",
        "parentId" : "4f962e4a-d6f8-4453-a13f-e43bcdd02658",
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "I think what you have above should definitely be captured in an issue and when determined in the developer docs. This is a tricky issue. I have thought about it some but don't know the answer or even the balance of the options.",
        "createdAt" : "2020-10-14T18:22:14Z",
        "updatedAt" : "2020-10-14T23:56:32Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      },
      {
        "id" : "0f17f79e-973e-46a9-a450-4efdc3395cbf",
        "parentId" : "4f962e4a-d6f8-4453-a13f-e43bcdd02658",
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "Even under its own admission POSIX extends the C standard - click on the [CX] to get some more info.\r\nhttps://pubs.opengroup.org/onlinepubs/9699919799/basedefs/stdio.h.html",
        "createdAt" : "2020-10-16T18:31:54Z",
        "updatedAt" : "2020-10-16T18:31:54Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      }
    ],
    "commit" : "7be6f0fd841c594db05ecc8aca0a0132367c0202",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@#include <stdio.h>\n\n// This file contains functions that wrap libc"
  }
]