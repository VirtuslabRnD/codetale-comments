[
  {
    "id" : "2fd83ac3-314c-4f89-98c6-59bcad9d70ac",
    "prId" : 1151,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bda497d8-dc73-46f9-b603-1c038ff50732",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "This does not conform to the schema (should be caught by a test).\r\n\r\nIn `schema.graphql`, you have `agreementText: String!`, here you use `OptionType(StringType)`.\r\n`String!` means a non-optional string in GraphQL, `OptionType` means the backend may produce missing values for the `agreementText` property.\r\n\r\nUse `agreementText: String` in the schema to specify that the property is optional.",
        "createdAt" : "2019-05-15T12:32:08Z",
        "updatedAt" : "2019-05-17T06:35:00Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "da08cc30-6998-4c27-a2e1-a4a0612bb8dc",
        "parentId" : "bda497d8-dc73-46f9-b603-1c038ff50732",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Done. Thanks.",
        "createdAt" : "2019-05-15T12:39:57Z",
        "updatedAt" : "2019-05-17T06:35:00Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "fd5498c3-c614-42b6-b12f-4558bdeb9378",
        "parentId" : "bda497d8-dc73-46f9-b603-1c038ff50732",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Speaking of which: is this the equivalent of the graphql schema in the world of queries? https://github.com/digital-asset/daml/blob/d6236a9f1ddc6fc9e8851ffd95830dabdba7d6eb/navigator/frontend/src/api/Queries.ts#L38\r\n\r\nAlso, the spray.json renderer for `Option[_]` uses `JsNull` for the `None` case. Is this properly supported by GraphQl (and the respective libraries we're using)?",
        "createdAt" : "2019-05-15T12:53:24Z",
        "updatedAt" : "2019-05-17T06:35:00Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "0cfb5196-26d3-41a2-b5b1-f3d454ec26a3",
        "parentId" : "bda497d8-dc73-46f9-b603-1c038ff50732",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "The `Queries.ts` file is indeed the TypeScript definition for the shape of our GraphQL API responses.\r\n\r\nIt is autogenerated from `schema.graphql`. Or rather, it should be - if you edited it by hand, please run `make update-graphql-types` in `navigator/frontend` instead. The reason why this is not done as part of the Bazel build is that I was too lazy to configure the frontend project to look for source files outside of the source tree (where Bazel generated files are stored).",
        "createdAt" : "2019-05-15T13:23:11Z",
        "updatedAt" : "2019-05-17T06:35:00Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "115a950c-5451-4e9f-ae5b-803d9c5cb246",
        "parentId" : "bda497d8-dc73-46f9-b603-1c038ff50732",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "oh, that yeah, I definitely edited it by hand. I'll run the make command.",
        "createdAt" : "2019-05-15T13:28:48Z",
        "updatedAt" : "2019-05-17T06:35:00Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "a2407340-a169-4821-9dc0-8ce3e3f92097",
        "parentId" : "bda497d8-dc73-46f9-b603-1c038ff50732",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "https://github.com/digital-asset/daml/issues/1160",
        "createdAt" : "2019-05-15T13:36:10Z",
        "updatedAt" : "2019-05-17T06:35:00Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa40588773325065a44dc4d703aec04bc19f0c20",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +319,323 @@            context => context.ctx.ledger.exercisedEventsOf(context.value, context.ctx.templates)),\n        Field(\"argument\", JsonType.ApiRecordType, resolve = _.value.argument),\n        Field(\"agreementText\", OptionType(StringType), resolve = _.value.agreementText)\n    )\n  )"
  }
]