[
  {
    "id" : "69dc7b74-d61b-419b-996c-e292026851b0",
    "prId" : 204,
    "prUrl" : "https://github.com/digital-asset/daml/pull/204",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc0ca4cb-430c-47ca-be8e-6eabdaa5186d",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Can the value ever be `null`? `null` is only used in the serialization of `Optional`, and `value` is typed as `DamlLfValueMapEntry[]`, which is unrelated to `null`. I'm actually surprised the compiler does not complain here.",
        "createdAt" : "2019-04-09T09:54:04Z",
        "updatedAt" : "2019-04-10T15:57:15Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5dfaaa695898670824b20acf017518eda840e671",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +147,151 @@      } else {\n        const key = path[index];\n        if (value.value === null) {\n          return notFound\n        } else {"
  },
  {
    "id" : "ed31e1c1-7ed7-4b78-85be-9dc3b93a41d7",
    "prId" : 204,
    "prUrl" : "https://github.com/digital-asset/daml/pull/204",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b96464f7-3079-4092-81d8-7f937d20a486",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Similar to other places, I would make this an object with many keys, instead of an array of key-value pairs. This function is mainly used in `frontend-config.js` (scripting of the UI), and `toJSON(argument).foo.bar` is easier to write than `toJSON(argument).foo.find(f => f.key === 'bar')`",
        "createdAt" : "2019-04-09T09:57:07Z",
        "updatedAt" : "2019-04-10T15:57:15Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5dfaaa695898670824b20acf017518eda840e671",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +214,218 @@      return {[value.constructor]: toJSON(value.value)};\n    case 'map':\n      return value.value.map((e) => ({key: e.key, value: toJSON(e.value)}));\n    case 'undefined': return '???';\n    default: throw new NonExhaustiveMatch(value);"
  }
]