[
  {
    "id" : "d8ba8247-e533-4247-99c8-31ab1e0d5ba1",
    "prId" : 6399,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3918ec61-7917-4465-b699-63b2ca692921",
        "parentId" : null,
        "authorId" : "0253aa79-135e-4950-855d-70d9aac93aa6",
        "body" : "From https://github.com/cujojs/when/blob/master/docs/api.md#whenunfold\n\n> `predicate` - function that receives the current seed, and should return truthy when the unfold should stop\n\nNot sure if this is allowed to be `Promise<boolean>` or not, the docs don't explicitly allow it.\n",
        "createdAt" : "2015-10-26T20:37:11Z",
        "updatedAt" : "2015-10-26T20:37:11Z",
        "lastEditedBy" : "0253aa79-135e-4950-855d-70d9aac93aa6",
        "tags" : [
        ]
      }
    ],
    "commit" : "2af0f2eaf40528c90899aa770ac7f1003699c049",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +155,159 @@     */\n    function unfold<T, U>(unspool: (seed: U) => [T | Promise<T>, U | Promise<U>] | Promise<[T | Promise<T>, U | Promise<U>]>,\n                          predicate: (value: U) => boolean | Promise<boolean>,\n                          handler: (value: T) => Promise<any> | void,\n                          seed: U | Promise<U>): Promise<void>;"
  }
]