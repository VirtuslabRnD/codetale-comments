[
  {
    "id" : "e1705f50-5ec0-4790-8023-eb2bce539ac4",
    "prId" : 1422,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1422#pullrequestreview-102855944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7041d127-f5da-4840-bd28-7af62b91e50d",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "What do you think about  parsing `_root_.a.` into the same structure as `a.`? It could be implemented as simply as `.stripPrefix(\"_root_\")`.\r\n\r\nThis would come at the price that to parse a top-level package named `_root_` you would need to write `_root_._root_.a`. However, any person who creates a top-level package named `_root_` is welcome to suffer the consequences. The backward compatibility with all previously hand-written symbols is worth it IMO",
        "createdAt" : "2018-03-10T12:20:55Z",
        "updatedAt" : "2018-03-10T16:00:18Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "aca65cae-4c39-4b6c-9e48-3fb81ad5e1fa",
        "parentId" : "7041d127-f5da-4840-bd28-7af62b91e50d",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Good idea. I'll update the spec and the implementation.",
        "createdAt" : "2018-03-10T15:48:33Z",
        "updatedAt" : "2018-03-10T16:00:18Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "bd50c38e-21cc-4b00-9476-bf0c764c9c99",
        "parentId" : "7041d127-f5da-4840-bd28-7af62b91e50d",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "https://github.com/scalameta/scalameta/issues/1424",
        "createdAt" : "2018-03-10T16:46:07Z",
        "updatedAt" : "2018-03-10T16:46:07Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2a4d472bf076e929228ea5770ca1e49a796cbf7",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +88,92 @@      def parseSingle(owner: Symbol): Symbol = {\n        def global(signature: Signature): Symbol.Global = {\n          if (owner == Symbol.None && signature != Signature.Term(\"_root_\")) {\n            val root = Symbol.Global(Symbol.None, Signature.Term(\"_root_\"))\n            Symbol.Global(root, signature)"
  },
  {
    "id" : "fe37924c-2d30-4a98-9b2f-9a64f79516d5",
    "prId" : 1238,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1238#pullrequestreview-93206891",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1aac6f52-d995-4878-82d3-e387ba755bdb",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "üëç ",
        "createdAt" : "2018-02-01T11:48:34Z",
        "updatedAt" : "2018-02-01T16:00:22Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "0295ec5950b1f4dad650d2b602c7cbe9e15b136f",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +124,128 @@      def parseLocal(): Symbol = {\n        val name = parseName()\n        if (name.startsWith(\"local\")) Symbol.Local(name)\n        else fail()\n      }"
  }
]