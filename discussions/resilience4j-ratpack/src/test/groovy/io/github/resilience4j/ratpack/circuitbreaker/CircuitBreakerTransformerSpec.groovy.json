[
  {
    "id" : "40a69868-161e-4c15-8e91-f3b6bdb5fd32",
    "prId" : 542,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/542#pullrequestreview-260953115",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "225ed53a-8342-46e0-8aa1-ce9b71789c71",
        "parentId" : null,
        "authorId" : "0f61341f-e58a-4526-a739-6cba0c8f872e",
        "body" : "Here's what it looks like to swallow the exception. If you dig into the Ratpack code if we handle an error and then produce a promised value, then all the downstreams will have a `complete` call propagated down effectively canceling them.",
        "createdAt" : "2019-07-11T21:03:05Z",
        "updatedAt" : "2019-07-11T21:03:05Z",
        "lastEditedBy" : "0f61341f-e58a-4526-a739-6cba0c8f872e",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d1b6c8fb8cff9180a01f69ed150f5b56b2fda29",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +141,145 @@        when: \"error on half open, retry swallows exception thrown\"\n        r = ExecHarness.yieldSingle {\n            Blocking.<String> get { throw e }.onError { exception -> Promise.value(\"not foo\") }\n                    .transform(circuitTransformer)\n        }"
  }
]