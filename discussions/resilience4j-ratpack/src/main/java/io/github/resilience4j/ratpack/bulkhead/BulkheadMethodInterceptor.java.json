[
  {
    "id" : "970c7cec-a903-4611-b646-0cafd1bdfeeb",
    "prId" : 169,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/169#pullrequestreview-71407289",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4b42157-ef05-492f-b6f3-6196c9eebfa7",
        "parentId" : null,
        "authorId" : "fa4c37db-2cfa-4971-a871-52021f5b5067",
        "body" : "It seems to me that race condition is possible here. ",
        "createdAt" : "2017-10-20T08:53:00Z",
        "updatedAt" : "2017-11-02T19:00:24Z",
        "lastEditedBy" : "fa4c37db-2cfa-4971-a871-52021f5b5067",
        "tags" : [
        ]
      },
      {
        "id" : "956acde9-9612-4049-8ac3-50833832971b",
        "parentId" : "d4b42157-ef05-492f-b6f3-6196c9eebfa7",
        "authorId" : "fa4c37db-2cfa-4971-a871-52021f5b5067",
        "body" : "Is there any real case where `registry` won't be injected before first `invoke` execution.",
        "createdAt" : "2017-10-20T09:02:15Z",
        "updatedAt" : "2017-11-02T19:00:24Z",
        "lastEditedBy" : "fa4c37db-2cfa-4971-a871-52021f5b5067",
        "tags" : [
        ]
      },
      {
        "id" : "c000e63a-79df-407e-91eb-5aa46bfb3e35",
        "parentId" : "d4b42157-ef05-492f-b6f3-6196c9eebfa7",
        "authorId" : "64e98278-0084-4891-9a06-ef0862a43119",
        "body" : "I kept the implementation same as other interceptors. But I don't think there are many cases, when this would occur. I think most use cases for these annotations are in with methods that make external calls(and requests are already being handled), which means that registry(context) is already created. The creation of context happens when Ratpack initializes Netty internals and adds handler adapter(contains all Ratpack handlers and registry) as last channel inbound handler. https://github.com/ratpack/ratpack/blob/master/ratpack-core/src/main/java/ratpack/server/internal/DefaultRatpackServer.java#L263",
        "createdAt" : "2017-10-23T19:49:44Z",
        "updatedAt" : "2017-11-02T19:00:24Z",
        "lastEditedBy" : "64e98278-0084-4891-9a06-ef0862a43119",
        "tags" : [
        ]
      },
      {
        "id" : "b2b49dd0-ffc0-43cb-9b5c-a8fe8a7c0a27",
        "parentId" : "d4b42157-ef05-492f-b6f3-6196c9eebfa7",
        "authorId" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "body" : "I think it's fine if the implementation is similar to the other interceptors.",
        "createdAt" : "2017-10-24T06:30:57Z",
        "updatedAt" : "2017-11-02T19:00:24Z",
        "lastEditedBy" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "tags" : [
        ]
      }
    ],
    "commit" : "655a266adfb1f8f1140624115181240548da3f25",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +47,51 @@        Bulkhead annotation = invocation.getMethod().getAnnotation(Bulkhead.class);\n        RecoveryFunction<?> recoveryFunction = annotation.recovery().newInstance();\n        if (registry == null) {\n            registry = BulkheadRegistry.ofDefaults();\n        }"
  },
  {
    "id" : "931c9338-73e7-4572-8367-a39655928419",
    "prId" : 169,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/169#pullrequestreview-73638554",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05122095-8b09-4b91-8988-1ed310894a09",
        "parentId" : null,
        "authorId" : "fa4c37db-2cfa-4971-a871-52021f5b5067",
        "body" : "I'm not particularly familiar with Ratpack ways to deal with AOP.\r\nSo maybe this comments is not relevant, but:\r\nUsing reflection on each invocation to determine annotations and recovery function is not very performant way.\r\nThere is two ways you can handle this:\r\n1. Create Interceptor object for each intercepted method and specify `recoveryFunction` during interceptor creation.\r\n2. Use `ConcurrentHashMap<Method, RecoveryFunction>` as cache for this heavy reflection operations.\r\n",
        "createdAt" : "2017-10-20T09:01:03Z",
        "updatedAt" : "2017-11-02T19:00:24Z",
        "lastEditedBy" : "fa4c37db-2cfa-4971-a871-52021f5b5067",
        "tags" : [
        ]
      },
      {
        "id" : "60b121ed-4b6c-45c0-89d8-bb7802def0f2",
        "parentId" : "05122095-8b09-4b91-8988-1ed310894a09",
        "authorId" : "64e98278-0084-4891-9a06-ef0862a43119",
        "body" : "I will look into how Guice does AOP(see `Resilience4jModule` and usage of `bindInterceptor`). Probably some external library could be introduce to do \"dirty work\" with reflection, would that be okay? But generally I think the implementation should be consistent across all interceptors(bulkhead, retry, cb, ...)",
        "createdAt" : "2017-10-23T20:00:58Z",
        "updatedAt" : "2017-11-02T19:00:24Z",
        "lastEditedBy" : "64e98278-0084-4891-9a06-ef0862a43119",
        "tags" : [
        ]
      },
      {
        "id" : "6ed7f760-3db3-472d-86a4-9ff074a53af2",
        "parentId" : "05122095-8b09-4b91-8988-1ed310894a09",
        "authorId" : "64e98278-0084-4891-9a06-ef0862a43119",
        "body" : "@RobWin @storozhukBM is there a way to discuss stuff more directly? You mentioned Slack channel before.",
        "createdAt" : "2017-10-23T20:02:09Z",
        "updatedAt" : "2017-11-02T19:00:24Z",
        "lastEditedBy" : "64e98278-0084-4891-9a06-ef0862a43119",
        "tags" : [
        ]
      },
      {
        "id" : "e9e36019-44c5-4e6e-b22b-a8d899b0b3dd",
        "parentId" : "05122095-8b09-4b91-8988-1ed310894a09",
        "authorId" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "body" : "I need your E-Mail address to invite you.",
        "createdAt" : "2017-10-24T06:28:11Z",
        "updatedAt" : "2017-11-02T19:00:24Z",
        "lastEditedBy" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "tags" : [
        ]
      },
      {
        "id" : "e52b12b4-1929-48a6-abdf-84daa72457e2",
        "parentId" : "05122095-8b09-4b91-8988-1ed310894a09",
        "authorId" : "64e98278-0084-4891-9a06-ef0862a43119",
        "body" : "jansyk13 at gmail, thanks",
        "createdAt" : "2017-11-01T22:24:40Z",
        "updatedAt" : "2017-11-02T19:00:24Z",
        "lastEditedBy" : "64e98278-0084-4891-9a06-ef0862a43119",
        "tags" : [
        ]
      }
    ],
    "commit" : "655a266adfb1f8f1140624115181240548da3f25",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +45,49 @@    @Override\n    public Object invoke(MethodInvocation invocation) throws Throwable {\n        Bulkhead annotation = invocation.getMethod().getAnnotation(Bulkhead.class);\n        RecoveryFunction<?> recoveryFunction = annotation.recovery().newInstance();\n        if (registry == null) {"
  },
  {
    "id" : "484e37eb-a176-4eb3-bfe6-a981edae6456",
    "prId" : 169,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/169#pullrequestreview-70777697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "285b8ab5-e7ff-4961-ab8f-dc06de8bc58b",
        "parentId" : null,
        "authorId" : "fa4c37db-2cfa-4971-a871-52021f5b5067",
        "body" : "one more reflection issue, please look at my comments above",
        "createdAt" : "2017-10-20T09:04:08Z",
        "updatedAt" : "2017-11-02T19:00:24Z",
        "lastEditedBy" : "fa4c37db-2cfa-4971-a871-52021f5b5067",
        "tags" : [
        ]
      }
    ],
    "commit" : "655a266adfb1f8f1140624115181240548da3f25",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +50,54 @@            registry = BulkheadRegistry.ofDefaults();\n        }\n        io.github.resilience4j.bulkhead.Bulkhead bulkhead = registry.bulkhead(annotation.name());\n        if (bulkhead == null) {\n            return invocation.proceed();"
  },
  {
    "id" : "6605b4b0-bf96-4c26-bbfc-fe489d94df0a",
    "prId" : 169,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/169#pullrequestreview-71318655",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a597741d-5dc3-453c-a7be-c4380a1f28a8",
        "parentId" : null,
        "authorId" : "fa4c37db-2cfa-4971-a871-52021f5b5067",
        "body" : "ideally this decisions should be made during interceptor creation",
        "createdAt" : "2017-10-20T09:06:41Z",
        "updatedAt" : "2017-11-02T19:00:24Z",
        "lastEditedBy" : "fa4c37db-2cfa-4971-a871-52021f5b5067",
        "tags" : [
        ]
      },
      {
        "id" : "6f9e2c20-cd13-43e3-b695-9c42ec75f864",
        "parentId" : "a597741d-5dc3-453c-a7be-c4380a1f28a8",
        "authorId" : "64e98278-0084-4891-9a06-ef0862a43119",
        "body" : "Probably this could be used https://github.com/google/guice/blob/master/core/src/com/google/inject/matcher/Matchers.java#L380 and create method interceptor for each case. ",
        "createdAt" : "2017-10-23T20:28:27Z",
        "updatedAt" : "2017-11-02T19:00:24Z",
        "lastEditedBy" : "64e98278-0084-4891-9a06-ef0862a43119",
        "tags" : [
        ]
      }
    ],
    "commit" : "655a266adfb1f8f1140624115181240548da3f25",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +55,59 @@        }\n        Class<?> returnType = invocation.getMethod().getReturnType();\n        if (Promise.class.isAssignableFrom(returnType)) {\n            Promise<?> result = (Promise<?>) invocation.proceed();\n            if (result != null) {"
  },
  {
    "id" : "43c1a1a9-52fe-4caf-bc91-5690f4f8eacb",
    "prId" : 169,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/169#pullrequestreview-71407373",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccee7764-7f84-4f45-8f5e-a5dd556ca661",
        "parentId" : null,
        "authorId" : "fa4c37db-2cfa-4971-a871-52021f5b5067",
        "body" : "I know that currently all interceptor in ratpack module are implemented this way, but maybe we can find better solution.",
        "createdAt" : "2017-10-20T09:21:25Z",
        "updatedAt" : "2017-11-02T19:00:24Z",
        "lastEditedBy" : "fa4c37db-2cfa-4971-a871-52021f5b5067",
        "tags" : [
        ]
      },
      {
        "id" : "303053c5-a92f-4d00-adef-84f63663b075",
        "parentId" : "ccee7764-7f84-4f45-8f5e-a5dd556ca661",
        "authorId" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "body" : "Let's make this refactoring independent from this PR.",
        "createdAt" : "2017-10-24T06:31:32Z",
        "updatedAt" : "2017-11-02T19:00:24Z",
        "lastEditedBy" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "tags" : [
        ]
      }
    ],
    "commit" : "655a266adfb1f8f1140624115181240548da3f25",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +45,49 @@    @Override\n    public Object invoke(MethodInvocation invocation) throws Throwable {\n        Bulkhead annotation = invocation.getMethod().getAnnotation(Bulkhead.class);\n        RecoveryFunction<?> recoveryFunction = annotation.recovery().newInstance();\n        if (registry == null) {"
  }
]