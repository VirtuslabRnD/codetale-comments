[
  {
    "id" : "12a30275-11af-4577-b9a3-e8754a791405",
    "prId" : 10494,
    "prUrl" : "https://github.com/apache/kafka/pull/10494#pullrequestreview-660167442",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99429499-afc5-4aaf-a1f3-812bbbb08d06",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "Hmm, we should have shuffled the broker list here. Why is the assignment pattern repeating here?",
        "createdAt" : "2021-05-13T17:26:57Z",
        "updatedAt" : "2021-05-13T17:53:51Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "f79e160f-aa06-4050-884e-a1c0c38855be",
        "parentId" : "99429499-afc5-4aaf-a1f3-812bbbb08d06",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "Because broker 1 is fenced, we don't place a replica there until we need to (there are no more replicas remaining).  So it will always be the last / least preferred replica if we have 3 brokers and need a partition with replication factor 3",
        "createdAt" : "2021-05-14T20:08:34Z",
        "updatedAt" : "2021-05-14T20:08:34Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9a2e7c4186e22fb9c672e18f4da749e3e60ffaa",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +100,104 @@        assertEquals(Arrays.asList(3, 2, 1), rackList.place(3));\n        assertEquals(Arrays.asList(2, 3, 1), rackList.place(3));\n        assertEquals(Arrays.asList(3, 2, 1), rackList.place(3));\n        assertEquals(Arrays.asList(2, 3, 1), rackList.place(3));\n    }"
  },
  {
    "id" : "daee5a6c-08ee-4d03-b0d3-98b7dfe8f443",
    "prId" : 10494,
    "prUrl" : "https://github.com/apache/kafka/pull/10494#pullrequestreview-660168929",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c429043-7313-4999-bef3-8516a11bd903",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "Why didn't the leader start from rack 1, which is the fist in the rack list? Also, why didn't rack 2 start with 20, which sorts first during initialization?",
        "createdAt" : "2021-05-13T17:37:02Z",
        "updatedAt" : "2021-05-13T17:53:51Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "cacb5456-c61f-4c29-9801-caba3bd70973",
        "parentId" : "9c429043-7313-4999-bef3-8516a11bd903",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "> Why didn't the leader start from rack 1, which is the fist in the rack list?\r\n\r\nThe starting rack is randomized.  If the first partition always put its leader on a specific rack, that would create skew, since a lot of topics are created with only one or two partitions.\r\n\r\n>  Also, why didn't rack 2 start with 20, which sorts first during initialization?\r\n\r\n`BrokerList#offset` is also randomized, for the same reason (to avoid favoring replicas with a lower id)",
        "createdAt" : "2021-05-14T20:11:02Z",
        "updatedAt" : "2021-05-14T20:11:02Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9a2e7c4186e22fb9c672e18f4da749e3e60ffaa",
    "line" : 142,
    "diffHunk" : "@@ -1,1 +140,144 @@            Optional.of(\"3\"),\n            Optional.of(\"4\")), rackList.rackNames());\n        assertEquals(Arrays.asList(41, 11, 21, 30), rackList.place(4));\n        assertEquals(Arrays.asList(10, 20, 31, 41), rackList.place(4));\n        assertEquals(Arrays.asList(41, 21, 30, 11), rackList.place(4));"
  },
  {
    "id" : "1995eae0-85da-48cd-9f99-eab83ce2e203",
    "prId" : 10494,
    "prUrl" : "https://github.com/apache/kafka/pull/10494#pullrequestreview-660217536",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70424842-9aff-46df-a629-47cce1ba1ba6",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "Could we add a test that verifies that not only the first replica is distributed evenly, but for partitions with the same first replica, their second replicas are also distributed evenly?",
        "createdAt" : "2021-05-13T17:45:22Z",
        "updatedAt" : "2021-05-13T17:53:51Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "6ea8ba7d-85cc-4f4a-adda-b0565754e81e",
        "parentId" : "70424842-9aff-46df-a629-47cce1ba1ba6",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "I will add a distribution test",
        "createdAt" : "2021-05-14T21:06:01Z",
        "updatedAt" : "2021-05-14T21:06:02Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9a2e7c4186e22fb9c672e18f4da749e3e60ffaa",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +169,173 @@\n    @Test\n    public void testSuccessfulPlacement() {\n        MockRandom random = new MockRandom();\n        StripedReplicaPlacer placer = new StripedReplicaPlacer(random);"
  },
  {
    "id" : "dd0d04af-e4ed-4e44-bfe5-52a06937c969",
    "prId" : 10494,
    "prUrl" : "https://github.com/apache/kafka/pull/10494#pullrequestreview-661510346",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f7f51eb-3bff-4a71-9ef8-712669a3ff1a",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "For even distribution, it would be useful to verify 2 things. (1) The leaders are distributed evenly when all brokers are unfenced. (2) If any broker is fenced, the new leaders are still distributed evenly.",
        "createdAt" : "2021-05-15T00:56:05Z",
        "updatedAt" : "2021-05-15T00:56:05Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "4a171328-bbee-4578-8163-edd71177ca48",
        "parentId" : "8f7f51eb-3bff-4a71-9ef8-712669a3ff1a",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "Hmm. Currently, we don't place partitions on fenced brokers unless there are no other options. We also never make the leader a fenced broker. So condition #2 does not hold in general.\r\n\r\nThe thinking is that when a broker is fenced, it may stay offline for a long time, potentially. So we don't really want to place anything there unless there is absolutely no other choice.",
        "createdAt" : "2021-05-17T23:28:29Z",
        "updatedAt" : "2021-05-17T23:28:29Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9a2e7c4186e22fb9c672e18f4da749e3e60ffaa",
    "line" : 199,
    "diffHunk" : "@@ -1,1 +197,201 @@            counts.put(partitionReplicas, counts.getOrDefault(partitionReplicas, 0) + 1);\n        }\n        assertEquals(14, counts.get(Arrays.asList(0, 1)));\n        assertEquals(22, counts.get(Arrays.asList(0, 2)));\n        assertEquals(14, counts.get(Arrays.asList(0, 3)));"
  }
]