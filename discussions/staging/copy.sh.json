[
  {
    "id" : "683a0147-94d6-401c-a4ce-3558141d4d1f",
    "prId" : 41074,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41074#pullrequestreview-20712479",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c9d3583-5af4-45f8-96e1-c507f43a5bee",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "👍 ",
        "createdAt" : "2017-02-08T09:22:34Z",
        "updatedAt" : "2017-02-08T09:22:34Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d6bcf860c957003f368e2c8e618ac27e4505826",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +198,202 @@# the ${CLIENT_REPO_TEMP}/staging dir. These copies will not be recognized by\n# the Go compiler, so we just remove them. Note that the publishing robot will\n# correctly resolve these dependencies later.\nrm -rf \"${CLIENT_REPO_TEMP}/staging\"\n"
  },
  {
    "id" : "7059643a-fdba-45d2-8cf2-66fbea255ad8",
    "prId" : 40729,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40729#pullrequestreview-19507191",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2943cce-49af-440e-8317-dcd586e8a0ba",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Could you explain why we need teh DRY_RUN option? When copy.sh is run by verification, it returns after the diff command and never reaches here.",
        "createdAt" : "2017-02-01T08:33:55Z",
        "updatedAt" : "2017-02-02T19:28:58Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "942484af-89ab-4882-bf8b-0e7fc739ea7e",
        "parentId" : "b2943cce-49af-440e-8317-dcd586e8a0ba",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "DRY_RUN only tests whether copy.sh works fine. This is for testing copy.sh itself. FAIL_ON_CHANGES checks whether copy.sh would do any changes.",
        "createdAt" : "2017-02-01T09:20:46Z",
        "updatedAt" : "2017-02-02T19:28:58Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "946af578fca73792fb24bbfa77dd935f9e1f7c1f",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +204,208 @@# clean the ${CLIENT_REPO}\necho \"move to the client repo\"\nif [ \"${DRY_RUN}\" = false ]; then\n    ls \"${CLIENT_REPO}\" | { grep -v '_tmp' || true; } | xargs rm -rf\n    mv \"${CLIENT_REPO_TEMP}\"/* \"${CLIENT_REPO}\""
  },
  {
    "id" : "b47ad8cc-11d0-4a53-8c26-61347c4b2e19",
    "prId" : 40106,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40106#pullrequestreview-17398261",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a9ddafa-c2f6-4055-a52b-9bb7d01d2bb1",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "which means the old folder will stay. I guess that's intentional.",
        "createdAt" : "2017-01-19T07:49:25Z",
        "updatedAt" : "2017-01-19T12:55:16Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "c47717134be05d5cdd08aff8774acd079abdead6",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +169,173 @@    mkdir -p \"${CLIENT_REPO_TEMP}/${dst}\"\n    # move\n    mv \"${CLIENT_REPO_TEMP}/${src}\"/* \"${CLIENT_REPO_TEMP}/${dst}\"\n    # rewrite package\n    local src_package=\"${src##*/}\""
  },
  {
    "id" : "8f210522-9761-44fd-ad0e-9e4856a7ffaa",
    "prId" : 40038,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40038#pullrequestreview-17097641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39d1b5fb-fc9f-46a9-bdd4-e664ae6c99bb",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I see. So you want to track some files in /staging as canonical, while some are still programmatically generated from elsewhere? This is going to be super confusing. Can you add an explanatory comment near the top of this file, that there are two classes of things in the staging directory?",
        "createdAt" : "2017-01-17T21:20:41Z",
        "updatedAt" : "2017-01-18T12:57:59Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "593024d0-df17-47f1-a13f-dbacddd59315",
        "parentId" : "39d1b5fb-fc9f-46a9-bdd4-e664ae6c99bb",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I see. So you want to track some files in /staging as canonical, while some are still programmatically generated from elsewhere? This is going to be super confusing. Can you add an explanatory comment near the top of this file, that there are two classes of things in the staging directory?\r\n\r\nOk.  I do see this as mostly intermediate. Eventually the staging copy is just API types and we simply regenerate the clients.",
        "createdAt" : "2017-01-17T21:24:45Z",
        "updatedAt" : "2017-01-18T12:57:59Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f915039e4ae5b5f32b54c048ef679639a442a55",
    "line" : null,
    "diffHunk" : "@@ -1,1 +64,68 @@# save copies code from client-go into the temp folder to make sure we don't lose it by accident\n# TODO this is temporary until everything in certain directories is authoritative\nfunction save() {\n    cp -r \"${CLIENT_REPO}/$1\" \"${CLIENT_REPO_TEMP}\"\n}"
  },
  {
    "id" : "f34600ff-98b5-4000-a5fb-148cc1758999",
    "prId" : 40038,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40038#pullrequestreview-17097858",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf9eece5-3dce-438d-b0fc-8bb21b950b8f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "this is a little scary.",
        "createdAt" : "2017-01-17T21:23:01Z",
        "updatedAt" : "2017-01-18T12:57:59Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "77fa23fb-b187-46cc-85f9-cd84f508a7f4",
        "parentId" : "bf9eece5-3dce-438d-b0fc-8bb21b950b8f",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> this is a little scary.\r\n\r\nYeah, but there's an entire separate go program devoted to managing the file, so I'm not the guy who discover weird godep behavior.  In all honesty, this whole, \"copy, mutate, revendor, tweak vendor\" which pre-exists my pull is pretty wild.",
        "createdAt" : "2017-01-17T21:25:50Z",
        "updatedAt" : "2017-01-18T12:57:59Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f915039e4ae5b5f32b54c048ef679639a442a55",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +219,223 @@    \\) -delete\n\necho \"remove cyclical godep\"\nrm -rf \"${CLIENT_REPO_TEMP}/_vendor/k8s.io/client-go\"\n"
  },
  {
    "id" : "df141565-ae59-42bd-90d1-3cade9f5ab9d",
    "prId" : 39916,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39916#pullrequestreview-16844029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7016c30d-faaa-439e-bfd2-9b2e624087d9",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "is it used anywhere?\r\n\r\nLooks like `sed -i=\"\"` works for both gnu and OSX.",
        "createdAt" : "2017-01-16T09:21:44Z",
        "updatedAt" : "2017-01-16T21:13:25Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "04ac98b3-5410-4b8b-8eaf-4c46a3e29a13",
        "parentId" : "7016c30d-faaa-439e-bfd2-9b2e624087d9",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Ok",
        "createdAt" : "2017-01-16T16:39:06Z",
        "updatedAt" : "2017-01-16T21:13:25Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "e365195a54445ae330c51a5ac712f59acf741a06",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +43,47 @@\nDIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nsedi=\"-i\"\n\ncleanup() {"
  }
]