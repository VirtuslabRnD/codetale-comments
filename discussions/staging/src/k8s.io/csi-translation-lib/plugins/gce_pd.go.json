[
  {
    "id" : "3aeda4e9-54f0-4651-9e88-8c59a399b548",
    "prId" : 99169,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99169#pullrequestreview-597985041",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4211053-afab-479c-97db-ac65e6680bbb",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "do we have a unit test for this?",
        "createdAt" : "2021-02-19T01:53:23Z",
        "updatedAt" : "2021-03-08T20:55:13Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "b1ec46bd-ba23-4e52-8a64-5dc969ce1e65",
        "parentId" : "f4211053-afab-479c-97db-ac65e6680bbb",
        "authorId" : "c007acb8-f473-4c91-8523-72d43918f082",
        "body" : "The only test we have that covers PV translation is https://github.com/kubernetes/kubernetes/blob/e16c6cc3483989899961c623518a1150e9078495/staging/src/k8s.io/csi-translation-lib/translate_test.go#L47. Since translation from CSI to in-tree doesn't rely on the volume handle, this bug doesn't affect the test. We could add a PD specific test to cover TranslateInTreePVToCSI().",
        "createdAt" : "2021-02-19T02:13:23Z",
        "updatedAt" : "2021-03-08T20:55:13Z",
        "lastEditedBy" : "c007acb8-f473-4c91-8523-72d43918f082",
        "tags" : [
        ]
      },
      {
        "id" : "2a06fc33-533a-4a68-b4c8-54738632c3fc",
        "parentId" : "f4211053-afab-479c-97db-ac65e6680bbb",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Yeah I think a unit test to cover this case would be good",
        "createdAt" : "2021-02-24T21:14:13Z",
        "updatedAt" : "2021-03-08T20:55:13Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "70df23f4-98d6-4652-9841-d945492258ea",
        "parentId" : "f4211053-afab-479c-97db-ac65e6680bbb",
        "authorId" : "c007acb8-f473-4c91-8523-72d43918f082",
        "body" : "Ack - will add a test case.",
        "createdAt" : "2021-02-24T22:15:52Z",
        "updatedAt" : "2021-03-08T20:55:13Z",
        "lastEditedBy" : "c007acb8-f473-4c91-8523-72d43918f082",
        "tags" : [
        ]
      }
    ],
    "commit" : "068bdcfcefe34ebaae4b85dc44a48c397eb14bbc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +232,236 @@\t\t\treturn nil, fmt.Errorf(\"failed to get region from zones: %v\", err)\n\t\t}\n\t\tvolID = fmt.Sprintf(volIDRegionalFmt, UnspecifiedValue, region, pv.Spec.GCEPersistentDisk.PDName)\n\t} else {\n\t\t// Unspecified"
  },
  {
    "id" : "05a31f7d-f5a9-48ff-a12c-d06f7f96991e",
    "prId" : 97823,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97823#pullrequestreview-565714311",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c1b4564-1b77-4e55-b1d7-2e13f5d2f8db",
        "parentId" : null,
        "authorId" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "body" : "> I think the other clouds need to have this logic too\r\n\r\nIt appears that gce_pd is the only one has this logic... It has something to do with how we generate our volID",
        "createdAt" : "2021-01-08T00:54:50Z",
        "updatedAt" : "2021-01-20T18:53:04Z",
        "lastEditedBy" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "tags" : [
        ]
      },
      {
        "id" : "f82b33c5-f6fb-4aa1-ae56-8c995bf9f86d",
        "parentId" : "3c1b4564-1b77-4e55-b1d7-2e13f5d2f8db",
        "authorId" : "241ab19e-f85a-4d22-92e2-88f2b6287d14",
        "body" : "is it possible for user to manually set the GA label even if provisioner doesn't? if so, this logic could be useful for all.\r\n\r\nI'm double checking if ebs provisioned PV would need it, seems like ebs and pd in-tree provisioner set beta label.\r\n\r\ngce: https://github.com/kubernetes/kubernetes/blob/819ff9b0870506b889e156adc5e66e314f8d148e/staging/src/k8s.io/legacy-cloud-providers/gce/gce_disks.go#L850 \r\n\r\naws: https://github.com/kubernetes/kubernetes/blob/48a0ef6a396f84ec93a8e68d9843c6fe27c4e848/staging/src/k8s.io/legacy-cloud-providers/aws/aws.go#L2726\r\n\r\n\r\n(if ebs needs it too, i can handle in own pr)",
        "createdAt" : "2021-01-11T20:06:43Z",
        "updatedAt" : "2021-01-20T18:53:04Z",
        "lastEditedBy" : "241ab19e-f85a-4d22-92e2-88f2b6287d14",
        "tags" : [
        ]
      },
      {
        "id" : "c0e15515-93de-446c-ab27-3b6343fea35a",
        "parentId" : "3c1b4564-1b77-4e55-b1d7-2e13f5d2f8db",
        "authorId" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "body" : "This logic that we are commenting here is a special logic for gce-pd to generate vol-id. \r\nFor general label and topology handling, we have logic in the `translateTopologyFromInTreeToCSI` which will handle the label translation. \r\n\r\nFor gce-pd specific topology label migration I will open a new PR once this is merged. And I will fix the gce-pd label in that PR to migrate to GA. I believe ebs will also have a separate PR to do the same.",
        "createdAt" : "2021-01-11T20:12:21Z",
        "updatedAt" : "2021-01-20T18:53:04Z",
        "lastEditedBy" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "tags" : [
        ]
      },
      {
        "id" : "254a7daf-7386-468b-acf9-d7eec2f6f092",
        "parentId" : "3c1b4564-1b77-4e55-b1d7-2e13f5d2f8db",
        "authorId" : "241ab19e-f85a-4d22-92e2-88f2b6287d14",
        "body" : "got it, just af ew lines below i see the generate code for volid. and ebs won't have this since zone in volId URI is optional...thanks for explaining",
        "createdAt" : "2021-01-11T20:32:12Z",
        "updatedAt" : "2021-01-20T18:53:04Z",
        "lastEditedBy" : "241ab19e-f85a-4d22-92e2-88f2b6287d14",
        "tags" : [
        ]
      }
    ],
    "commit" : "f83df5d1621e967a140e4e3aafbd602de1848638",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +216,220 @@\t}\n\n\t// depend on which version it migrates from, the label could be failuredomain beta or topology GA version\n\tzonesLabel := pv.Labels[v1.LabelFailureDomainBetaZone]\n\tif zonesLabel == \"\" {"
  },
  {
    "id" : "218b55a4-3a52-44e0-ba80-fcdaae61319f",
    "prId" : 97823,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97823#pullrequestreview-563937693",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37a15523-de2e-4120-b16d-be8267bfa71d",
        "parentId" : null,
        "authorId" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "body" : "> We may want to hold off on this to limit the change to gce for now.\r\n\r\nDone. I currently only add this logic to gcepd. It is not hard to add it to other cloud-provider tho. But yeah, we can let them to decide when to add it. Before that, the only small issue is a little inconsistence on migrated PV with pd and other plugin. But I guess it is okay.",
        "createdAt" : "2021-01-08T00:59:33Z",
        "updatedAt" : "2021-01-20T18:53:04Z",
        "lastEditedBy" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "tags" : [
        ]
      },
      {
        "id" : "203b96d9-6e9a-4c10-8381-ae28f6d7d42c",
        "parentId" : "37a15523-de2e-4120-b16d-be8267bfa71d",
        "authorId" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "body" : "@wongma7 FYI.",
        "createdAt" : "2021-01-08T01:06:16Z",
        "updatedAt" : "2021-01-20T18:53:04Z",
        "lastEditedBy" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "tags" : [
        ]
      }
    ],
    "commit" : "f83df5d1621e967a140e4e3aafbd602de1848638",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +296,300 @@\t\treturn nil, fmt.Errorf(\"failed to translate topology. PV:%+v. Error:%v\", *pv, err)\n\t}\n\n\tpv.Spec.CSI = nil\n\tpv.Spec.GCEPersistentDisk = gceSource"
  },
  {
    "id" : "06b46edc-f561-4f6d-bdf3-3e43b9ad5eb4",
    "prId" : 97823,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97823#pullrequestreview-563946277",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b06fb003-84e6-4122-986f-2b0c7897d1c1",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I think we also have to enhance the storageclass translation to handle AllowedTopologies having beta/ga labels",
        "createdAt" : "2021-01-08T01:24:00Z",
        "updatedAt" : "2021-01-20T18:53:04Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "86168854-8a44-4230-b152-0d4a51ba3e2a",
        "parentId" : "b06fb003-84e6-4122-986f-2b0c7897d1c1",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "nm i saw this was done in the common library",
        "createdAt" : "2021-01-08T01:33:07Z",
        "updatedAt" : "2021-01-20T18:53:04Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f83df5d1621e967a140e4e3aafbd602de1848638",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +298,302 @@\n\tpv.Spec.CSI = nil\n\tpv.Spec.GCEPersistentDisk = gceSource\n\n\treturn pv, nil"
  },
  {
    "id" : "8ca783df-d4f3-484a-a789-6dba312afce8",
    "prId" : 97823,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97823#pullrequestreview-569795279",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f91fd3e-663d-4dab-80d6-f4bf2c6fac3c",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Since this is only called in the csi->intree path, which is only used for CreateVolume, we should never encounter a scenario where there is a region label on it, let alone a kubernetes region label.",
        "createdAt" : "2021-01-15T23:50:40Z",
        "updatedAt" : "2021-01-20T18:53:04Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "13ec348e-4569-492a-a947-691057982cfb",
        "parentId" : "5f91fd3e-663d-4dab-80d6-f4bf2c6fac3c",
        "authorId" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "body" : "Yeah, that's true. This just keeps the potential if we ever want to do something with the kubernetes topology in csi-provisioner? It does not hurt to check just to make sure we dont append a label that already exist.",
        "createdAt" : "2021-01-16T01:20:47Z",
        "updatedAt" : "2021-01-20T18:53:04Z",
        "lastEditedBy" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "tags" : [
        ]
      }
    ],
    "commit" : "f83df5d1621e967a140e4e3aafbd602de1848638",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +393,397 @@\t// process each term\n\tfor index, nodeSelectorTerm := range pv.Spec.NodeAffinity.Required.NodeSelectorTerms {\n\t\t// In the first loop, see if regionLabel already exist\n\t\tregionExist := false\n\t\tvar zoneVals []string"
  },
  {
    "id" : "d6af2c64-448b-4ba2-b337-1ede07977fbd",
    "prId" : 97823,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97823#pullrequestreview-571812761",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "914b1afc-ebeb-445a-bf78-f02bbd6a98cd",
        "parentId" : null,
        "authorId" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "body" : "I actually think a lot of other cloud-provider like aws/azure an reuse this function if we allow getRegionFromZones function to be a parameter. The other logic should be the same for other cloud-providers. But I guess it is fine we keep it this way. We can let them to decide if they want to use this or not.",
        "createdAt" : "2021-01-16T05:08:37Z",
        "updatedAt" : "2021-01-20T18:53:04Z",
        "lastEditedBy" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "tags" : [
        ]
      },
      {
        "id" : "bc57225b-6915-4f59-b0ac-4cdbc6c9cbe1",
        "parentId" : "914b1afc-ebeb-445a-bf78-f02bbd6a98cd",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "That sounds like a good idea.",
        "createdAt" : "2021-01-20T02:04:25Z",
        "updatedAt" : "2021-01-20T18:53:04Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f83df5d1621e967a140e4e3aafbd602de1848638",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +409,413 @@\t\t}\n\t\t// If no regionLabel found, generate region label from the zoneLabel we collect from this term\n\t\tregionVal, err := getRegionFromZones(zoneVals)\n\t\tif err != nil {\n\t\t\treturn err"
  },
  {
    "id" : "025721bf-57a3-479b-b069-d0ae2ce2a156",
    "prId" : 84809,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84809#pullrequestreview-312124990",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9671b9e1-1378-44fb-96df-396c3c89a457",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "today when an inline volume specifies readOnly, does that cause the attach to be readonly?",
        "createdAt" : "2019-11-05T23:32:52Z",
        "updatedAt" : "2019-11-05T23:32:53Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "41cfe4b7-a09e-4d62-ac42-027aeebc02b9",
        "parentId" : "9671b9e1-1378-44fb-96df-396c3c89a457",
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "yeah, specifying `readOnly: true` inline causes the volume to be attached in `mode: READ_ONLY`",
        "createdAt" : "2019-11-06T00:07:56Z",
        "updatedAt" : "2019-11-06T00:07:57Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "631e218c360f39f1058c39b159fce5b91b2056b7",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +205,209 @@\tvar am v1.PersistentVolumeAccessMode\n\tif pdSource.ReadOnly {\n\t\tam = v1.ReadOnlyMany\n\t} else {\n\t\tam = v1.ReadWriteOnce"
  },
  {
    "id" : "7635320c-4a39-4fbc-b875-715b73e5bc76",
    "prId" : 83593,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83593#pullrequestreview-298469712",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6106c613-37aa-4b02-a06c-17a555f2f00b",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Is this right? Can a project be unspecified?",
        "createdAt" : "2019-10-07T22:51:31Z",
        "updatedAt" : "2019-10-08T23:46:06Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "c0718810-fbbf-40cf-82f0-935d57369a4a",
        "parentId" : "6106c613-37aa-4b02-a06c-17a555f2f00b",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Also if the project is unspecified, does that guarantee the zone/region is specified?",
        "createdAt" : "2019-10-07T22:51:53Z",
        "updatedAt" : "2019-10-08T23:46:06Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "e676f121-ad3e-47da-8cf3-2873a75ca13c",
        "parentId" : "6106c613-37aa-4b02-a06c-17a555f2f00b",
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "in migration project is always unspecified (that information isn't encoded in in-tree API objects at all). Zone/region is unspecified based on whether the zone label is applied to the PV or not (I think we are not always guaranteed that is the case especially in pre-provisioned or inline volumes).\r\n\r\nSo this will always fix the project - and sometimes fix the zone/region. Logic is kind of complicated so I have the unit test",
        "createdAt" : "2019-10-07T23:44:10Z",
        "updatedAt" : "2019-10-08T23:46:06Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "93f7cec5b3f1e891fabbab3637d7637c959ebb18",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +343,347 @@\t\treturn \"\", fmt.Errorf(\"volume handle has wrong number of elements; got %v, wanted %v or more\", len(tok), volIDTotalElements)\n\t}\n\tif tok[volIDProjectValue] != UnspecifiedValue {\n\t\treturn volumeHandle, nil\n\t}"
  },
  {
    "id" : "bf41ae1f-b765-40c6-970a-fd8d9b7ba538",
    "prId" : 83593,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83593#pullrequestreview-298480436",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87e4d9f0-67c4-43f0-8130-c6d8c7fed1f2",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Can you add a comment to this function describing the high-level idea? ie if it's unspecified, we infer zone/region from the node",
        "createdAt" : "2019-10-08T00:28:51Z",
        "updatedAt" : "2019-10-08T23:46:06Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "93f7cec5b3f1e891fabbab3637d7637c959ebb18",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +337,341 @@// project, zone/region from the node ID if the volume handle has UNSPECIFIED\n// sections\nfunc (g *gcePersistentDiskCSITranslator) RepairVolumeHandle(volumeHandle, nodeID string) (string, error) {\n\tvar err error\n\ttok := strings.Split(volumeHandle, \"/\")"
  },
  {
    "id" : "bc855a47-8cce-49d0-8253-512043e640e9",
    "prId" : 83098,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83098#pullrequestreview-306222134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfd7548f-d854-4520-90b2-6bd09f1edcf6",
        "parentId" : null,
        "authorId" : "98986d5f-c846-4478-8363-8a016e3d6b89",
        "body" : "This is potentially unnecessary given [this workaround](https://github.com/kubernetes/kubernetes/commit/c9fc26d85ef755f7b9c15f039e469857d75f5aec#diff-94e527d26427ceb4f990f05f76952656). Without the workaround, inline volumes used to fail after translation to CSI in the call to GetVolumeMode. Either [1] simply remove this and re-test or [2] see if the setting of PersistentVolumeFilesystem for CSI translation can be made more generic across all plugins - not just GCE PD.",
        "createdAt" : "2019-10-23T18:54:48Z",
        "updatedAt" : "2019-11-15T01:28:24Z",
        "lastEditedBy" : "98986d5f-c846-4478-8363-8a016e3d6b89",
        "tags" : [
        ]
      },
      {
        "id" : "cfbdc11b-3493-4d61-9c2e-df42f380a58f",
        "parentId" : "bfd7548f-d854-4520-90b2-6bd09f1edcf6",
        "authorId" : "98986d5f-c846-4478-8363-8a016e3d6b89",
        "body" : "Implemented [2] above in https://github.com/kubernetes/kubernetes/pull/83098/files#diff-3b2a81c2c4c59f6e82eded08cd00af5cR70-R83",
        "createdAt" : "2019-10-23T22:11:49Z",
        "updatedAt" : "2019-11-15T01:28:24Z",
        "lastEditedBy" : "98986d5f-c846-4478-8363-8a016e3d6b89",
        "tags" : [
        ]
      }
    ],
    "commit" : "129f15328bfc159e759260408fedbb9ea1ab2b61",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +229,233 @@\t\t\t},\n\t\t\tAccessModes: []v1.PersistentVolumeAccessMode{am},\n\t\t\tVolumeMode:  &fsMode,\n\t\t},\n\t}, nil"
  },
  {
    "id" : "3a56f630-5be0-4bb1-99a8-bc707567c34f",
    "prId" : 72770,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72770#pullrequestreview-191903894",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cc71966-3416-490d-9ca2-1aa210718562",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Add compile time checks to ensure `AWSEBS`, `GCEPD`, etc. structs implement the `InTreePlugin interface`:\r\n\r\n```GO\r\nvar _ InTreePlugin = GCEPD{}\r\n```",
        "createdAt" : "2019-01-15T01:30:46Z",
        "updatedAt" : "2019-01-15T01:35:59Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "913bd97b0c1d8fff7d39901a71fe164c994d700e",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +49,53 @@\n// GCEPD handles translation of PV spec from In-tree GCE PD to CSI GCE PD and vice versa\ntype GCEPD struct{}\n\n// TranslateInTreePVToCSI takes a PV with GCEPersistentDisk set from in-tree"
  },
  {
    "id" : "fc885daa-d3ee-4556-980c-66cc9b6da835",
    "prId" : 72770,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72770#pullrequestreview-191903894",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07684b14-9293-4c1b-a67d-dce5d1809a2c",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Make `AWSEBS`, `GCEPD`, etc. structs private (instead of public) and add a constructor methods that return the `InTreePlugin interface` so that consumers depend only on the interface:\r\n\r\n```GO\r\nfunc NewGCEPD(...) InTreePlugin {\r\n  return &gcePD{...}\r\n}\r\n\r\ntype gcePD struct{}\r\n```",
        "createdAt" : "2019-01-15T01:34:28Z",
        "updatedAt" : "2019-01-15T01:35:59Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "913bd97b0c1d8fff7d39901a71fe164c994d700e",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +49,53 @@\n// GCEPD handles translation of PV spec from In-tree GCE PD to CSI GCE PD and vice versa\ntype GCEPD struct{}\n\n// TranslateInTreePVToCSI takes a PV with GCEPersistentDisk set from in-tree"
  },
  {
    "id" : "a450127b-f4e9-4fb7-80c3-36c18ccb53d5",
    "prId" : 72770,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72770#pullrequestreview-191903894",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31d7f6c2-c287-4d67-860f-8f8f99272e40",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Can we come up with more descriptive names then `AWSEBS`, `GCEPD`, `etc.`? Maybe `gcePDCSIConverter` or something?",
        "createdAt" : "2019-01-15T01:35:24Z",
        "updatedAt" : "2019-01-15T01:35:59Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "913bd97b0c1d8fff7d39901a71fe164c994d700e",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +50,54 @@// GCEPD handles translation of PV spec from In-tree GCE PD to CSI GCE PD and vice versa\ntype GCEPD struct{}\n\n// TranslateInTreePVToCSI takes a PV with GCEPersistentDisk set from in-tree\n// and converts the GCEPersistentDisk source to a CSIPersistentVolumeSource"
  }
]