[
  {
    "id" : "6658f594-e9f6-47e3-aee7-105ad83322f5",
    "prId" : 80730,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80730#pullrequestreview-269188630",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad384117-2ccd-448e-8101-253d9300f553",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Does this combo loose the unset / null distinction? I think it might? Will our get/put path treat an explicit null as an attempt to delete the field?",
        "createdAt" : "2019-07-31T18:03:19Z",
        "updatedAt" : "2019-07-31T23:07:31Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c339ef65-fb98-4ab5-90aa-1180642eb4f8",
        "parentId" : "ad384117-2ccd-448e-8101-253d9300f553",
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "That's a good question. I copied this code from the rawExtension marshaller. I'm not sure if our get/put path needs to worry about this field being unset or null though, since it is already nested within managedFields",
        "createdAt" : "2019-07-31T18:06:14Z",
        "updatedAt" : "2019-07-31T23:07:31Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      }
    ],
    "commit" : "87f8ba5c81192bf8e383dff42b4f8ddc0be2ff63",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +272,276 @@\t}\n\tif !bytes.Equal(b, []byte(\"null\")) {\n\t\tf.Raw = append(f.Raw[0:0], b...)\n\t}\n\treturn nil"
  },
  {
    "id" : "776db107-6696-45c8-b3a6-ac866c65a0db",
    "prId" : 80730,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80730#pullrequestreview-272723514",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e96f280-9c4f-4b44-985e-b2b026083994",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "does this allow storing non-map values (`1`, `true`, `[\"\"]`, `\"\"`, etc)? what about map values that aren't schema-compatible with the old `map[string]Field` structure? what ensures the raw JSON persisted in this field doesn't break old clients?",
        "createdAt" : "2019-08-02T17:49:19Z",
        "updatedAt" : "2019-08-02T17:55:07Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "28855fa0-efdc-4e17-ace2-4d591251c514",
        "parentId" : "2e96f280-9c4f-4b44-985e-b2b026083994",
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "old clients as in, clients written while it was an alpha api?",
        "createdAt" : "2019-08-05T18:05:41Z",
        "updatedAt" : "2019-08-05T18:05:41Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      },
      {
        "id" : "247f0291-a582-4a31-bfd0-8ae8ee3c59ce",
        "parentId" : "2e96f280-9c4f-4b44-985e-b2b026083994",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "yeah, we can't ever send data that one of those clients would fail to deserialize",
        "createdAt" : "2019-08-07T13:06:49Z",
        "updatedAt" : "2019-08-07T13:06:49Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "279e7588-f71b-40b3-a270-3c710ac26897",
        "parentId" : "2e96f280-9c4f-4b44-985e-b2b026083994",
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "we could validate that it is just a map of maps, but would this require us to deserialize it on every update?",
        "createdAt" : "2019-08-07T20:22:02Z",
        "updatedAt" : "2019-08-07T20:22:03Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      },
      {
        "id" : "53ed4bb1-3046-4978-a121-b5040832adf3",
        "parentId" : "2e96f280-9c4f-4b44-985e-b2b026083994",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "possibly, but I expected format validation on update anyway...",
        "createdAt" : "2019-08-07T20:30:23Z",
        "updatedAt" : "2019-08-07T20:30:24Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "94600547-4222-4ab6-b4ba-ae00649a1149",
        "parentId" : "2e96f280-9c4f-4b44-985e-b2b026083994",
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "Actually this is already validated when we make sure it will convert into an smd fieldset",
        "createdAt" : "2019-08-08T17:06:12Z",
        "updatedAt" : "2019-08-08T17:06:12Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      },
      {
        "id" : "200eff7a-19af-427b-b5ae-f5022639fe96",
        "parentId" : "2e96f280-9c4f-4b44-985e-b2b026083994",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "and that happens on every write (create/update/all patch types/subresources/etc)?",
        "createdAt" : "2019-08-08T17:26:08Z",
        "updatedAt" : "2019-08-08T17:26:09Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e2606b55-7002-4fbd-b00d-9cc2cce31985",
        "parentId" : "2e96f280-9c4f-4b44-985e-b2b026083994",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "do we have negative tests ensuring malformed data submitted by clients is rejected?",
        "createdAt" : "2019-08-08T17:26:37Z",
        "updatedAt" : "2019-08-08T17:26:37Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "87f8ba5c81192bf8e383dff42b4f8ddc0be2ff63",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +272,276 @@\t}\n\tif !bytes.Equal(b, []byte(\"null\")) {\n\t\tf.Raw = append(f.Raw[0:0], b...)\n\t}\n\treturn nil"
  }
]