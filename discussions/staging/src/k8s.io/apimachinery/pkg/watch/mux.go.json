[
  {
    "id" : "7df887ed-dfd7-4bef-82b0-0d663009c3eb",
    "prId" : 95664,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95664#pullrequestreview-528665831",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "859b9b2b-3ae8-4520-8d80-104d92b40e90",
        "parentId" : null,
        "authorId" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "body" : "so effectively, the incoming queue length is increased from 25 to 1000, any idea why it was only 25 in the first place? the comment below indicated it should rarely happen, did you see the events dropped due to incoming queue length?\r\n\r\n// Buffer the incoming queue a little bit even though it should rarely ever accumulate\r\n// anything, just in case a few events are received in such a short window that\r\n// Broadcaster can't move them onto the watchers' queues fast enough.",
        "createdAt" : "2020-11-12T00:22:09Z",
        "updatedAt" : "2021-01-15T22:59:23Z",
        "lastEditedBy" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "tags" : [
        ]
      },
      {
        "id" : "e52fd573-5de5-46a6-9729-edc0da4159be",
        "parentId" : "859b9b2b-3ae8-4520-8d80-104d92b40e90",
        "authorId" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "body" : "since we're no longer blocking, I figured I'd extend it to match the outgoing queue, which currently already has a \"drop on full behavior\".  As much as possible, I wanted to avoid \"breaking\" something in k/k itself, so I figured matching the outgoing queues was a safe bet.",
        "createdAt" : "2020-11-12T01:14:46Z",
        "updatedAt" : "2021-01-15T22:59:23Z",
        "lastEditedBy" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "tags" : [
        ]
      }
    ],
    "commit" : "e90e67bd002e70a525d3ee9045b213a5d826074d",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +81,85 @@\tm := &Broadcaster{\n\t\twatchers:            map[int64]*broadcasterWatcher{},\n\t\tincoming:            make(chan Event, queueLength),\n\t\tstopped:             make(chan struct{}),\n\t\twatchQueueLength:    queueLength,"
  },
  {
    "id" : "0812790a-7939-4432-9c74-6882ebcd21b4",
    "prId" : 91602,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91602#pullrequestreview-434676094",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0f9d63a-191a-44ca-9531-8c8dfc62aea3",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "this change takes the serial close and then wait and makes the the close async, not guaranteed before the wait.",
        "createdAt" : "2020-06-16T13:34:42Z",
        "updatedAt" : "2020-07-13T03:08:01Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "53854d77-8d21-46cd-82d2-05be79273f14",
        "parentId" : "f0f9d63a-191a-44ca-9531-8c8dfc62aea3",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> this change takes the serial close and then wait and makes the the close async, not guaranteed before the wait.\r\n\r\nReading through, I think the change still works.",
        "createdAt" : "2020-06-16T13:36:28Z",
        "updatedAt" : "2020-07-13T03:08:01Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "383931a4-217b-41c2-9566-cea2d3816d37",
        "parentId" : "f0f9d63a-191a-44ca-9531-8c8dfc62aea3",
        "authorId" : "2e6c8b74-158f-4514-b4cb-092df4e81a05",
        "body" : "ðŸ˜„",
        "createdAt" : "2020-06-22T07:44:07Z",
        "updatedAt" : "2020-07-13T03:08:01Z",
        "lastEditedBy" : "2e6c8b74-158f-4514-b4cb-092df4e81a05",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6e1769f61a411dc35ab689b0b8afd5db98d8c67",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +206,210 @@// channel. It will block until the broadcaster stop request is actually executed\nfunc (m *Broadcaster) Shutdown() {\n\tm.blockQueue(func() {\n\t\tclose(m.stopped)\n\t\tclose(m.incoming)"
  },
  {
    "id" : "1c7db2b7-cb62-48c7-a88b-82b70cf8887a",
    "prId" : 91602,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91602#pullrequestreview-434717773",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9186b225-577f-4322-9b62-b07b614c83dc",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "previously, sending after shutdown would result in a write to a closed channel, right?  Can you make a unit test to prove that it used to panic?",
        "createdAt" : "2020-06-16T13:40:27Z",
        "updatedAt" : "2020-07-13T03:08:01Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "94299932-0cde-444d-a19c-3df5e855fdd0",
        "parentId" : "9186b225-577f-4322-9b62-b07b614c83dc",
        "authorId" : "2e6c8b74-158f-4514-b4cb-092df4e81a05",
        "body" : "blockQueue is called by Watch, WatchWithPrefix, stopWatching, Shutdown. The Action method sends data directly to incoming chan instead of calling blockQueue. There is a subtle bug here. If the Broadcaster has been closed, calling Watch will get a watch.Interface with a value of nil instead of Panic as before. If I call panic here, calling Watcher's Stop method after closing the Broadcaster will cause Panic. In order to maintain the consistency of the interface, in the Watch && WatchWithPrefix method, determine whether broadcasterWatcher is nil to decide whether to call panic.",
        "createdAt" : "2020-06-22T08:40:57Z",
        "updatedAt" : "2020-07-13T03:08:01Z",
        "lastEditedBy" : "2e6c8b74-158f-4514-b4cb-092df4e81a05",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6e1769f61a411dc35ab689b0b8afd5db98d8c67",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +97,101 @@func (m *Broadcaster) blockQueue(f func()) {\n\tselect {\n\tcase <-m.stopped:\n\t\treturn\n\tdefault:"
  },
  {
    "id" : "3fcf01a9-e264-4607-8f09-5377fe3ac708",
    "prId" : 91602,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91602#pullrequestreview-434717883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2f251cf-6f18-46ab-9cde-e793c800b4a6",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "update the comment on the `Watch` and `WatchforPrefix`, to indicate that it blocks until the watch is accepted.",
        "createdAt" : "2020-06-16T13:42:09Z",
        "updatedAt" : "2020-07-13T03:08:01Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "366744da-10ab-440b-a429-b463c7012f04",
        "parentId" : "e2f251cf-6f18-46ab-9cde-e793c800b4a6",
        "authorId" : "2e6c8b74-158f-4514-b4cb-092df4e81a05",
        "body" : "done.",
        "createdAt" : "2020-06-22T08:41:06Z",
        "updatedAt" : "2020-07-13T03:08:01Z",
        "lastEditedBy" : "2e6c8b74-158f-4514-b4cb-092df4e81a05",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6e1769f61a411dc35ab689b0b8afd5db98d8c67",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +94,98 @@// The purpose of this terrible hack is so that watchers added after an event\n// won't ever see that event, and will always see any event after they are\n// added.\nfunc (m *Broadcaster) blockQueue(f func()) {\n\tselect {"
  },
  {
    "id" : "47a32c4e-a3ea-446f-9c2f-cd557602f01c",
    "prId" : 91602,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91602#pullrequestreview-435389604",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ffda734-5a0e-47cc-ac91-214b64adb66c",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Add a comment saying this matches previous behavior, but that we're open to reassessing in the future.",
        "createdAt" : "2020-06-22T13:25:43Z",
        "updatedAt" : "2020-07-13T03:08:01Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "1febde9c-c1e2-4dda-8f17-b4c194547e65",
        "parentId" : "3ffda734-5a0e-47cc-ac91-214b64adb66c",
        "authorId" : "2e6c8b74-158f-4514-b4cb-092df4e81a05",
        "body" : "done",
        "createdAt" : "2020-06-23T02:04:34Z",
        "updatedAt" : "2020-07-13T03:08:01Z",
        "lastEditedBy" : "2e6c8b74-158f-4514-b4cb-092df4e81a05",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6e1769f61a411dc35ab689b0b8afd5db98d8c67",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +130,134 @@\t\tm.watchers[id] = w\n\t})\n\tif w == nil {\n\t\t// The panic here is to be consistent with the previous interface behavior\n\t\t// we are willing to re-evaluate in the future."
  },
  {
    "id" : "e92fcfc8-9e66-43f6-b5c0-262d94cbac34",
    "prId" : 91602,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91602#pullrequestreview-435389648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af4c15c5-0ade-4bfd-9f55-a314634d3cf9",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Add a comment saying this matches previous behavior, but that we're open to reassessing in the future.",
        "createdAt" : "2020-06-22T13:25:47Z",
        "updatedAt" : "2020-07-13T03:08:01Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "aebb0fa1-b709-47ef-9c54-61afde9908ba",
        "parentId" : "af4c15c5-0ade-4bfd-9f55-a314634d3cf9",
        "authorId" : "2e6c8b74-158f-4514-b4cb-092df4e81a05",
        "body" : "done",
        "createdAt" : "2020-06-23T02:04:42Z",
        "updatedAt" : "2020-07-13T03:08:01Z",
        "lastEditedBy" : "2e6c8b74-158f-4514-b4cb-092df4e81a05",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6e1769f61a411dc35ab689b0b8afd5db98d8c67",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +166,170 @@\t\t// The panic here is to be consistent with the previous interface behavior\n\t\t// we are willing to re-evaluate in the future.\n\t\tpanic(\"broadcaster already stopped\")\n\t}\n\treturn w"
  }
]