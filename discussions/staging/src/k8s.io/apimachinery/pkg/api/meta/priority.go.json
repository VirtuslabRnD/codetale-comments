[
  {
    "id" : "f1b0b991-6f68-4ebb-99a5-58857b254aa6",
    "prId" : 55218,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55218#pullrequestreview-86398750",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bfc1d4c-42e2-4532-899e-c02353492247",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "@deads2k does passing these through look correct to you? is the underlying delegate intended to know about the user versions, or does PriorityRESTMapper take responsibility for making use of those versions?",
        "createdAt" : "2018-01-03T03:46:17Z",
        "updatedAt" : "2018-01-05T02:10:26Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "010241cf-fc39-421f-bf17-06cbce18faac",
        "parentId" : "4bfc1d4c-42e2-4532-899e-c02353492247",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> @deads2k does passing these through look correct to you? is the underlying delegate intended to know about the user versions, or does PriorityRESTMapper take responsibility for making use of those versions?\r\n\r\nThey should be passed through.  With our current chain, I think the end result came out the same, but each constituent should get its shot at the information.",
        "createdAt" : "2018-01-03T14:05:15Z",
        "updatedAt" : "2018-01-05T02:10:26Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "2e70bc4f-7f71-4095-a80a-b7c6f5e33a34",
        "parentId" : "4bfc1d4c-42e2-4532-899e-c02353492247",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "On closer inspection, this will also fix a bug with kubectl trying to submit a version of a kind the server doesn't have to a version the server does have\r\n\r\nfor example, this is what currently happens:\r\n```\r\n$ more role.yaml \r\napiVersion: rbac.authorization.k8s.io/v2\r\nkind: ClusterRole\r\n...\r\n\r\nkubectl create -f role.yaml --v=6\r\n...\r\nPOST https://localhost:6443/apis/rbac.authorization.k8s.io/v1/clusterroles\r\n...\r\nError from server (BadRequest): error when creating \"role.yaml\": ClusterRole in version \"v2\" cannot be handled as a ClusterRole: no kind \"ClusterRole\" is registered for version \"rbac.authorization.k8s.io/v2\"\r\n```\r\n\r\nthe client should not have attempted to send the v2 object to the v1 endpoint... it should have failed when looking up the rest mapping\r\n  ",
        "createdAt" : "2018-01-03T15:22:26Z",
        "updatedAt" : "2018-01-05T02:10:26Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "42bd794654b303258621f3230e651ae64cf0b3a9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +154,158 @@\nfunc (m PriorityRESTMapper) RESTMapping(gk schema.GroupKind, versions ...string) (mapping *RESTMapping, err error) {\n\tmappings, err := m.Delegate.RESTMappings(gk, versions...)\n\tif err != nil {\n\t\treturn nil, err"
  }
]