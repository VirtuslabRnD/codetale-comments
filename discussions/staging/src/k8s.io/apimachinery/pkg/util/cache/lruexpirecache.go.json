[
  {
    "id" : "f3e8e370-409a-4a65-af4c-1c699094f707",
    "prId" : 95472,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95472#pullrequestreview-506617930",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc46bfa9-ab5d-4a86-905c-ca8c803087b1",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "does this handle Add being called multiple times for the same item like c.cache.Add did?",
        "createdAt" : "2020-10-12T13:26:06Z",
        "updatedAt" : "2021-02-13T04:52:07Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "7f852824-5b14-4e0e-87b1-4a6e9129899e",
        "parentId" : "bc46bfa9-ab5d-4a86-905c-ca8c803087b1",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "it doesn't look like it... need a unit test to verify this",
        "createdAt" : "2020-10-12T13:26:58Z",
        "updatedAt" : "2021-02-13T04:52:07Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecc53182475a00a4a1dc8ca1e056b0deb6bd430c",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +97,101 @@\t\texpireTime: c.clock.Now().Add(ttl),\n\t}\n\telement := c.evictionList.PushFront(entry)\n\tc.entries[key] = element\n}"
  },
  {
    "id" : "5d839c7b-2671-4965-ae90-f416bf8a78f5",
    "prId" : 95472,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95472#pullrequestreview-515989172",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ed801b2-e0b8-4ea7-951a-dbc184ee4ea8",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "a maxSize < 0 would run this block when c.evictionList was empty, toEvict would be nil, and `toEvict.Value.(*cacheEntry).key` would hit a NPE.\r\n\r\nkeeping the panic in NewLRUExpireCacheWithClock if maxSize is < 0 would surface that coding problem sooner",
        "createdAt" : "2020-10-21T02:39:29Z",
        "updatedAt" : "2021-02-13T04:52:07Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "4564d432-e5d6-406d-b47d-44fcd5ab0646",
        "parentId" : "3ed801b2-e0b8-4ea7-951a-dbc184ee4ea8",
        "authorId" : "32ef239d-37ed-4527-bd03-e7d59734944e",
        "body" : "Done, though I panic on maxSize <= 0, since I think 0 is also a problematic value here.",
        "createdAt" : "2020-10-23T20:25:26Z",
        "updatedAt" : "2021-02-13T04:52:07Z",
        "lastEditedBy" : "32ef239d-37ed-4527-bd03-e7d59734944e",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecc53182475a00a4a1dc8ca1e056b0deb6bd430c",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +88,92 @@\t\ttoEvict := c.evictionList.Back()\n\t\tc.evictionList.Remove(toEvict)\n\t\tdelete(c.entries, toEvict.Value.(*cacheEntry).key)\n\t}\n"
  },
  {
    "id" : "10a4cf32-fae8-41de-b291-8201191a38db",
    "prId" : 95472,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95472#pullrequestreview-692158019",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f97a8570-855c-436c-8f45-1b74186668b1",
        "parentId" : null,
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "reading the [golang-lru](https://github.com/hashicorp/golang-lru/blob/eb529947af531eb529020ba979a7a887338904d1/simplelru/lru.go#L134) implementation, it looks like instead of specifying a capacity with zero length, you can directly specify the length of the slice, and by doing so you can avoid using `append` (not sure how much difference it makes)",
        "createdAt" : "2020-12-04T00:18:54Z",
        "updatedAt" : "2021-02-13T04:52:07Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      },
      {
        "id" : "ee7be4a5-95a1-45b2-a0c5-e29be84de1c9",
        "parentId" : "f97a8570-855c-436c-8f45-1b74186668b1",
        "authorId" : "32ef239d-37ed-4527-bd03-e7d59734944e",
        "body" : "I opted not to do this since I changed `Keys()` to skip expired elements.",
        "createdAt" : "2020-12-09T22:33:23Z",
        "updatedAt" : "2021-02-13T04:52:07Z",
        "lastEditedBy" : "32ef239d-37ed-4527-bd03-e7d59734944e",
        "tags" : [
        ]
      },
      {
        "id" : "760fd762-f82f-40d3-b640-61d59f5055af",
        "parentId" : "f97a8570-855c-436c-8f45-1b74186668b1",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> I changed `Keys()` to skip expired elements.\r\n\r\nwere all callers ok with that change?",
        "createdAt" : "2021-06-24T19:07:30Z",
        "updatedAt" : "2021-06-24T19:07:30Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "f51c5c8e-efb8-413e-8f93-d04f2e8c0a22",
        "parentId" : "f97a8570-855c-436c-8f45-1b74186668b1",
        "authorId" : "32ef239d-37ed-4527-bd03-e7d59734944e",
        "body" : "No tests failed the last time I ran it :)\r\n\r\nThis is strictly a tightening of the API contract...  before it *might* return expired elements.  Now it won't.\r\n\r\nI'll try to audit the callers.",
        "createdAt" : "2021-06-24T19:33:05Z",
        "updatedAt" : "2021-06-24T19:33:05Z",
        "lastEditedBy" : "32ef239d-37ed-4527-bd03-e7d59734944e",
        "tags" : [
        ]
      },
      {
        "id" : "cbc2e5c5-5af2-4c5c-8b2e-75c7feeefba8",
        "parentId" : "f97a8570-855c-436c-8f45-1b74186668b1",
        "authorId" : "32ef239d-37ed-4527-bd03-e7d59734944e",
        "body" : "It looks like only staging/src/k8s.io/client-go/tools/cache/mutation_cache.go actually calls Keys(), and it only processes live keys.",
        "createdAt" : "2021-06-24T19:36:19Z",
        "updatedAt" : "2021-06-24T19:36:19Z",
        "lastEditedBy" : "32ef239d-37ed-4527-bd03-e7d59734944e",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecc53182475a00a4a1dc8ca1e056b0deb6bd430c",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +149,153 @@\tnow := c.clock.Now()\n\n\tval := make([]interface{}, 0, c.evictionList.Len())\n\tfor element := c.evictionList.Back(); element != nil; element = element.Prev() {\n\t\t// Only return unexpired keys"
  },
  {
    "id" : "783d7e51-2a01-4b9e-88d4-c6c65061e30d",
    "prId" : 95472,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95472#pullrequestreview-692268726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "584db1f4-846f-4078-9d99-305ece0059ea",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "list.New() returns `*List`... should this be a pointer?",
        "createdAt" : "2021-06-24T19:05:34Z",
        "updatedAt" : "2021-06-24T19:05:34Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "0276ba90-835b-4380-b00f-5ccfdd6caeb6",
        "parentId" : "584db1f4-846f-4078-9d99-305ece0059ea",
        "authorId" : "32ef239d-37ed-4527-bd03-e7d59734944e",
        "body" : "According to the docs, the zero value of List is an empty list that's ready to use.  It looks like it gets lazily initialized as elements are added.",
        "createdAt" : "2021-06-24T19:31:28Z",
        "updatedAt" : "2021-06-24T19:31:28Z",
        "lastEditedBy" : "32ef239d-37ed-4527-bd03-e7d59734944e",
        "tags" : [
        ]
      },
      {
        "id" : "494b41d3-23bd-48f2-9007-3ffa6aefd6ff",
        "parentId" : "584db1f4-846f-4078-9d99-305ece0059ea",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I saw that, but was confused how a non-pointer receiver would self-modify",
        "createdAt" : "2021-06-24T19:33:07Z",
        "updatedAt" : "2021-06-24T19:33:07Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "b73e5796-5cca-4d51-99eb-b75e894c5a2c",
        "parentId" : "584db1f4-846f-4078-9d99-305ece0059ea",
        "authorId" : "32ef239d-37ed-4527-bd03-e7d59734944e",
        "body" : "List's functions all take pointer receivers. Won't they just get the address of evictionList?  I admit, I'm a bit fuzzy on the actual behavior here.",
        "createdAt" : "2021-06-24T19:40:16Z",
        "updatedAt" : "2021-06-24T19:40:16Z",
        "lastEditedBy" : "32ef239d-37ed-4527-bd03-e7d59734944e",
        "tags" : [
        ]
      },
      {
        "id" : "19a2a670-be60-42d0-aee6-b0275334e406",
        "parentId" : "584db1f4-846f-4078-9d99-305ece0059ea",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "yeah, go converts the non-pointer receiver to a pointer automatically",
        "createdAt" : "2021-06-24T22:12:11Z",
        "updatedAt" : "2021-06-24T22:12:11Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecc53182475a00a4a1dc8ca1e056b0deb6bd430c",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +42,46 @@\n\tmaxSize      int\n\tevictionList list.List\n\tentries      map[interface{}]*list.Element\n}"
  }
]