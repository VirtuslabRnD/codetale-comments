[
  {
    "id" : "87e1a634-f463-450b-9de0-293ae20f8ae0",
    "prId" : 61905,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61905#pullrequestreview-109424935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0b787df-7213-43e4-b03a-e3dad9f85285",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "Looks great.",
        "createdAt" : "2018-04-04T17:27:36Z",
        "updatedAt" : "2018-04-04T17:27:45Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "48b6786632f82cd1f15b1234afd6c5324217dfd8",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +887,891 @@// merging these patches. Applying the resulting merged merge patch to a JSONMap\n// yields the same as merging each strategic merge patch to the JSONMap in\n// succession.\nfunc MergeStrategicMergeMapPatchUsingLookupPatchMeta(schema LookupPatchMeta, patches ...JSONMap) (JSONMap, error) {\n\tmergeOptions := MergeOptions{"
  },
  {
    "id" : "43916e8b-f187-4751-99f1-0a45492c3b57",
    "prId" : 52897,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52897#pullrequestreview-65063420",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9df4399-b7b8-41d9-8d9c-b76b1f11858b",
        "parentId" : null,
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "ditto",
        "createdAt" : "2017-09-25T21:33:36Z",
        "updatedAt" : "2017-10-12T15:30:44Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      },
      {
        "id" : "f8f0a37e-0f2d-484d-aa89-013a0a42e312",
        "parentId" : "e9df4399-b7b8-41d9-8d9c-b76b1f11858b",
        "authorId" : "b2fdc1be-5c05-43b0-ba55-1a5df85126ef",
        "body" : "I think this will not be used to generate user documentation.  For developer, design proposals is also  appropriate.",
        "createdAt" : "2017-09-25T23:13:56Z",
        "updatedAt" : "2017-10-12T15:30:44Z",
        "lastEditedBy" : "b2fdc1be-5c05-43b0-ba55-1a5df85126ef",
        "tags" : [
        ]
      }
    ],
    "commit" : "77dbe5995f9e88042fd80b9c28115921b12cab96",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1055,1059 @@// The precedence is $setElementOrder > order in patch list > order in live list.\n// This function will delete the item after merging it to prevent process it again in the future.\n// Ref: https://git.k8s.io/community/contributors/design-proposals/cli/preserve-order-in-strategic-merge-patch.md\nfunc mergePatchIntoOriginal(original, patch map[string]interface{}, t reflect.Type, mergeOptions MergeOptions) error {\n\tfor key, patchV := range patch {"
  },
  {
    "id" : "c6077201-32aa-4978-9363-74e58cfb514d",
    "prId" : 51321,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51321#pullrequestreview-76670097",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8136c2a-85ed-4fab-a584-5ab039bba670",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this applies to all non-slice values, not just map child fields, right?",
        "createdAt" : "2017-11-15T03:29:34Z",
        "updatedAt" : "2017-11-21T18:25:08Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6d662cef-5607-4007-97d3-5e8b04a6ca99",
        "parentId" : "e8136c2a-85ed-4fab-a584-5ab039bba670",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "No. This applies only to non-primitive maps.\r\n\r\nFor primitive maps, we do nothing. E.g. we should not lookup patch metadata from the struct of `map[string]int`.\r\nSo nil or empty subschema, patchStrategy, mergeKey will be pass to `mergingMapFieldsHaveConflicts()`.",
        "createdAt" : "2017-11-15T03:59:34Z",
        "updatedAt" : "2017-11-21T18:25:08Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      }
    ],
    "commit" : "be20a6753748bbece8c07fd9dfc9e31e22c06dfc",
    "line" : 648,
    "diffHunk" : "@@ -1,1 +1879,1883 @@\t\t\t\t\t\treturn true, err\n\t\t\t\t\t}\n\t\t\t\tcase map[string]interface{}:\n\t\t\t\t\tsubschema, patchMeta, err = schema.LookupPatchMetadataForStruct(key)\n\t\t\t\t\tif err != nil {"
  },
  {
    "id" : "9b68c27f-f11b-4cd3-bb4f-04f716a7f4f2",
    "prId" : 46057,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46057#pullrequestreview-39526060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5354aa2-08d3-445a-b4f2-28ad92ed95a1",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "Are you sure this is a bad type?",
        "createdAt" : "2017-05-22T16:03:48Z",
        "updatedAt" : "2017-05-22T16:03:48Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "df962540-8b9c-4b48-8bee-80ee5906b375",
        "parentId" : "f5354aa2-08d3-445a-b4f2-28ad92ed95a1",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "I think so.\r\nIf `listOfMaps[index]` is `map[int]interface{}`, but not `map[string]interface{}`, this is bad type, even though their kinds are both `Map`.",
        "createdAt" : "2017-05-22T16:29:40Z",
        "updatedAt" : "2017-05-22T16:29:40Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "56e26fd2-f1d0-4013-ba64-72bb0e60c86d",
        "parentId" : "f5354aa2-08d3-445a-b4f2-28ad92ed95a1",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "Good point, thanks",
        "createdAt" : "2017-05-22T16:31:18Z",
        "updatedAt" : "2017-05-22T16:31:18Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd80b915e0315fad2abd751f90d96cf7449a8512",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +506,510 @@\tm, ok := listOfMaps[index].(map[string]interface{})\n\tif !ok {\n\t\treturn nil, nil, mergepatch.ErrBadArgType(m, listOfMaps[index])\n\t}\n"
  },
  {
    "id" : "b8582fe6-6642-4cdb-916e-e6bef8e7fc4b",
    "prId" : 45980,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45980#pullrequestreview-39820824",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc737a8b-0abd-4552-b0ec-69247a48b7da",
        "parentId" : null,
        "authorId" : "b1ad4056-936e-4ce6-ab7b-55870c4e6024",
        "body" : "What does \"with best effort\" mean here?",
        "createdAt" : "2017-05-23T15:47:53Z",
        "updatedAt" : "2017-05-31T22:08:41Z",
        "lastEditedBy" : "b1ad4056-936e-4ce6-ab7b-55870c4e6024",
        "tags" : [
        ]
      },
      {
        "id" : "240d4c8f-d5ee-4cec-9941-e833eb6f8d88",
        "parentId" : "fc737a8b-0abd-4552-b0ec-69247a48b7da",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "> The relative order of two items are determined by the following order:\r\n>- relative order in the $setElementOrder if both items are present\r\n>- else relative order in the patch if both items are present\r\n>- else relative order in the server-side list if both items are present\r\n>- else append to the end\r\n\r\nWe are tying to sort the list according to this [proposal](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/preserve-order-in-strategic-merge-patch.md#proposed-change).\r\nBut there may be ordering conflict. e.g.\r\nlive list: `[\"a\", \"x\", \"b\", \"y\", \"c\", \"z\"]`\r\npatch list: `[\"c\", \"b\", \"a\"]`\r\nThere is no way to make a list satisfy:\r\n- `a` comes before `x`\r\n- `x` comes before `b`\r\n- `b` comes before `a`\r\n\r\nIn this PR's implementation, we can guarantee the relative order in the patch list and the relative order between server-only items.\r\nWe have 2 sorted list: sorted patch list and sorted server-only items list.\r\nWe are trying to merge these 2 lists.\r\nPlease check [sortSliceByMultipleOrders](https://github.com/kubernetes/kubernetes/pull/45980/files#diff-101008d96c4444a5813f7cb6b54aaff6R344).",
        "createdAt" : "2017-05-23T17:58:34Z",
        "updatedAt" : "2017-05-31T22:08:41Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3481b07d2e23782250a4bce67b86f23e0d8c3ff",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +404,408 @@}\n\n// mergeSortedSlice merges the 2 sorted lists by serverOrder with best effort.\n// It will insert each item in `left` list to `right` list. In most cases, the 2 lists will be interleaved.\n// The relative order of left and right are guaranteed to be kept."
  },
  {
    "id" : "68ddbcae-955a-4ee5-82bb-6d43d245cb68",
    "prId" : 44597,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/44597#pullrequestreview-40584683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f26f498-2a47-4a01-820d-c15aab1009f9",
        "parentId" : null,
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "We should add comments about when this is set / not set in the 3-way and 2-way and why",
        "createdAt" : "2017-05-26T18:04:08Z",
        "updatedAt" : "2017-05-26T22:06:06Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      }
    ],
    "commit" : "16e07c7d557ea32e47b9565a02331ff7939bb08d",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +71,75 @@\ntype MergeOptions struct {\n\t// MergeParallelList indicates if we are merging the parallel list.\n\t// We don't merge parallel list when calling mergeMap() in CreateThreeWayMergePatch()\n\t// which is called client-side."
  },
  {
    "id" : "a31e9d30-0a5b-4ceb-8759-079feac0ed67",
    "prId" : 44597,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/44597#pullrequestreview-40619251",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0467144-9a77-45ed-b678-8ca694854c88",
        "parentId" : null,
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "GetKeySet(map[string]inteface{}) return set.String {\r\n  \r\n}\r\n\r\nmissingKeys = s1.Difference(s2)\r\n\r\nif len(missingKeys) {\r\n...\r\n}",
        "createdAt" : "2017-05-26T18:20:12Z",
        "updatedAt" : "2017-05-26T22:06:06Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      },
      {
        "id" : "85f48aa1-163f-491b-b93d-8cca4c5720bb",
        "parentId" : "d0467144-9a77-45ed-b678-8ca694854c88",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "As we discussed offline, I will cleanup this in a followup PR.",
        "createdAt" : "2017-05-26T21:03:06Z",
        "updatedAt" : "2017-05-26T22:06:06Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      }
    ],
    "commit" : "16e07c7d557ea32e47b9565a02331ff7939bb08d",
    "line" : 424,
    "diffHunk" : "@@ -1,1 +1592,1596 @@\n// hasAdditionalNewField returns if original map has additional key with non-nil value than modified.\nfunc hasAdditionalNewField(original, modified map[string]interface{}) bool {\n\tfor k, v := range original {\n\t\tif v == nil {"
  },
  {
    "id" : "15803240-4a50-4103-af09-470edde38c5d",
    "prId" : 44597,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/44597#pullrequestreview-40590525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f6baa5c-cea8-4958-95d3-e6059535cb5a",
        "parentId" : null,
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "// Get the underlying type for pointers",
        "createdAt" : "2017-05-26T18:30:43Z",
        "updatedAt" : "2017-05-26T22:06:06Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      }
    ],
    "commit" : "16e07c7d557ea32e47b9565a02331ff7939bb08d",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +150,154 @@\tpatch := map[string]interface{}{}\n\t// Get the underlying type for pointers\n\tif t.Kind() == reflect.Ptr {\n\t\tt = t.Elem()\n\t}"
  },
  {
    "id" : "351fa4db-83e9-4223-8c3e-adc6f6d15726",
    "prId" : 41043,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41043#pullrequestreview-20880053",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b9c2d37-ef52-4ba3-af15-d6d84809c0f0",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "trying to reason through what ignoreChangesAndAdditions and ignoreDeletions would mean to this",
        "createdAt" : "2017-02-08T21:36:19Z",
        "updatedAt" : "2017-02-08T22:17:35Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "f412e72a-09b0-46a2-b743-38f75feae78a",
        "parentId" : "0b9c2d37-ef52-4ba3-af15-d6d84809c0f0",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Hmmm... not sure. ",
        "createdAt" : "2017-02-08T21:40:12Z",
        "updatedAt" : "2017-02-08T22:17:35Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "16878815-d052-410c-9ffe-5b06b41e153f",
        "parentId" : "0b9c2d37-ef52-4ba3-af15-d6d84809c0f0",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "After short investigation it looks like we should be good with the current approach of always replacing. The `ignoreChangesAndAdditions` and `ignoreDeletions` flags are used only internal in 3-way merge, which with our replace approach should be a safe call. ",
        "createdAt" : "2017-02-08T21:58:48Z",
        "updatedAt" : "2017-02-08T22:17:35Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "5902597439c0b13c5ce0eb9515b1efbda4d72a9a",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +164,168 @@\t\t\t}\n\n\t\t\tif fieldPatchStrategy == replaceDirective {\n\t\t\t\tif !ignoreChangesAndAdditions {\n\t\t\t\t\tpatch[key] = modifiedValue"
  }
]