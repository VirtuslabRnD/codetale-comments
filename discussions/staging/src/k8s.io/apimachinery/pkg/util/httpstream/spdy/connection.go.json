[
  {
    "id" : "c66e5bba-d499-4713-b204-fe2a4d71cf90",
    "prId" : 102489,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102489#pullrequestreview-677253716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51e87e6e-938f-4bf6-8513-e60d8ca9506a",
        "parentId" : null,
        "authorId" : "32b8d25c-f21a-4ff1-a275-7dbf7672c31a",
        "body" : "I feel that adding a judgment on the caller is also a good choice\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/eee6e54ecf364ee0529788eb5ad72d4ffaccf1b4/pkg/kubelet/cri/streaming/portforward/httpstream.go#L168",
        "createdAt" : "2021-06-02T03:14:42Z",
        "updatedAt" : "2021-06-02T03:14:48Z",
        "lastEditedBy" : "32b8d25c-f21a-4ff1-a275-7dbf7672c31a",
        "tags" : [
        ]
      },
      {
        "id" : "56865c36-afac-4e61-a290-3924f6dad30a",
        "parentId" : "51e87e6e-938f-4bf6-8513-e60d8ca9506a",
        "authorId" : "36b049e7-5c64-46e2-809a-9067732f0056",
        "body" : "Hey @wzshiming, thank you for the review! Do you mean that we should move the nil check over to the `RemoveStreams()` invocation in favor of checking here?",
        "createdAt" : "2021-06-02T07:07:13Z",
        "updatedAt" : "2021-06-02T07:07:13Z",
        "lastEditedBy" : "36b049e7-5c64-46e2-809a-9067732f0056",
        "tags" : [
        ]
      },
      {
        "id" : "923edce3-fa22-43aa-b237-1c16e2bde19c",
        "parentId" : "51e87e6e-938f-4bf6-8513-e60d8ca9506a",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "it's fine to check in both places, but I want this check to stay here, since it prevents all mistakes.",
        "createdAt" : "2021-06-03T23:03:27Z",
        "updatedAt" : "2021-06-03T23:03:27Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "4767adfb-c85f-4abe-a7e9-136a17bfbe9d",
        "parentId" : "51e87e6e-938f-4bf6-8513-e60d8ca9506a",
        "authorId" : "f19cd122-8961-4e58-8449-891d97276098",
        "body" : "Question: will the timed out stream not remain hanging around in the c.streams map, since the identity is no longer known when calling RemoveStreams?\r\n\r\nI guess it gets cleaned up during Close, but since the unit test below does an explicit len(c.streams) check, just wondering if something else might use a similiar check to determine whether the connection can be closed?",
        "createdAt" : "2021-06-04T09:28:18Z",
        "updatedAt" : "2021-06-04T09:28:18Z",
        "lastEditedBy" : "f19cd122-8961-4e58-8449-891d97276098",
        "tags" : [
        ]
      },
      {
        "id" : "e924fdfa-6266-460d-9bf2-57a860b6d659",
        "parentId" : "51e87e6e-938f-4bf6-8513-e60d8ca9506a",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah that's an excellent question, good reason to do reverts rather than another round of cherry-picks.",
        "createdAt" : "2021-06-04T16:06:39Z",
        "updatedAt" : "2021-06-04T16:06:40Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "28bea180-800c-4f8c-bec2-9f12b96181c3",
        "parentId" : "51e87e6e-938f-4bf6-8513-e60d8ca9506a",
        "authorId" : "36b049e7-5c64-46e2-809a-9067732f0056",
        "body" : "Tested it locally with a modified version of CRI-O (using this vendored code) and it looks like that the connections are getting cleaned up if the timeout got reached.",
        "createdAt" : "2021-06-07T10:40:38Z",
        "updatedAt" : "2021-06-07T10:40:38Z",
        "lastEditedBy" : "36b049e7-5c64-46e2-809a-9067732f0056",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2ca9c1794617dfdf0db7cf845e84625a6e95b1f",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +127,131 @@\t\tif stream != nil {\n\t\t\tdelete(c.streams, stream.Identifier())\n\t\t}\n\t}\n\tc.streamLock.Unlock()"
  },
  {
    "id" : "9c2d9f11-3c80-4749-b523-2182067d8906",
    "prId" : 94170,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94170#pullrequestreview-482055189",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb366021-2247-420f-a7f2-93b4a668a6db",
        "parentId" : null,
        "authorId" : "9e6ce3ed-e2f7-40ea-b6d7-b1b04fc48f70",
        "body" : "nit: given that this is a private function, and it looks like `pingFn` is always `spdyConn.Ping`. Would it be better to omit the `pingFn` argument and invoke `c.conn.Ping` directly in `c.sendPings`?",
        "createdAt" : "2020-09-03T17:26:02Z",
        "updatedAt" : "2020-09-03T17:26:02Z",
        "lastEditedBy" : "9e6ce3ed-e2f7-40ea-b6d7-b1b04fc48f70",
        "tags" : [
        ]
      },
      {
        "id" : "ed1aa793-0543-4710-b6ce-6ece664be61f",
        "parentId" : "cb366021-2247-420f-a7f2-93b4a668a6db",
        "authorId" : "9e6ce3ed-e2f7-40ea-b6d7-b1b04fc48f70",
        "body" : "Oh I overlook the test..",
        "createdAt" : "2020-09-03T17:28:17Z",
        "updatedAt" : "2020-09-03T17:28:18Z",
        "lastEditedBy" : "9e6ce3ed-e2f7-40ea-b6d7-b1b04fc48f70",
        "tags" : [
        ]
      }
    ],
    "commit" : "9269da53f3bf544595376f8ee4c06cc8d5455bf8",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +85,89 @@// will be invoked when the server receives a newly created stream from the\n// client.\nfunc newConnection(conn *spdystream.Connection, newStreamHandler httpstream.NewStreamHandler, pingPeriod time.Duration, pingFn func() (time.Duration, error)) httpstream.Connection {\n\tc := &connection{conn: conn, newStreamHandler: newStreamHandler, ping: pingFn}\n\tgo conn.Serve(c.newSpdyStream)"
  }
]