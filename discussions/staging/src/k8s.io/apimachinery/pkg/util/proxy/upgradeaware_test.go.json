[
  {
    "id" : "c9f96b84-935f-443a-85cf-28c76dcc1125",
    "prId" : 71768,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71768#pullrequestreview-189224214",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "515f5da6-1174-4e10-b046-78c475c9aba4",
        "parentId" : null,
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "Can we add an invalid response code (eg 0, -1) to test that we handle more serious errors as well? I know they should not occur but I believe we have seen bugs where those response codes occur at least in our integration tests.",
        "createdAt" : "2019-01-02T23:14:15Z",
        "updatedAt" : "2019-01-02T23:14:15Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "23aeee1a-1a57-407e-a2a6-043300bd883f",
        "parentId" : "515f5da6-1174-4e10-b046-78c475c9aba4",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I can if you think it adds value, but all codes other than 101 are treated uniformly",
        "createdAt" : "2019-01-02T23:23:25Z",
        "updatedAt" : "2019-01-02T23:23:25Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "8fadba3f-7e28-4012-8089-1d57018ddd19",
        "parentId" : "515f5da6-1174-4e10-b046-78c475c9aba4",
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "I think it allows the test to protect us from an invalid (future) assumption about only having to handle \"valid\" response codes. ",
        "createdAt" : "2019-01-02T23:32:24Z",
        "updatedAt" : "2019-01-02T23:32:24Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "dc17bb41-3b58-43c8-96fb-e52d43cc9aca",
        "parentId" : "515f5da6-1174-4e10-b046-78c475c9aba4",
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "Tempted to suggest adding a test for something like an error being thrown in the handle case.",
        "createdAt" : "2019-01-02T23:33:17Z",
        "updatedAt" : "2019-01-02T23:33:17Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "a7d4c419-9ec4-4eec-ac17-d27fd5cfcfc0",
        "parentId" : "515f5da6-1174-4e10-b046-78c475c9aba4",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "explicitly writing 0 or -1 isn't even possible using standard response writers. this test case is specifically around how the proxy handles well-formed responses from the backend that are not upgrade responses. error responses like the ones you describe short-circuit earlier. if we want to try to trigger testing those with direct connection bit writing, we can, but I'd like to do that in a different test",
        "createdAt" : "2019-01-03T21:46:24Z",
        "updatedAt" : "2019-01-03T21:46:44Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2f1c1526-d883-464a-8f73-6f897c46d17c",
        "parentId" : "515f5da6-1174-4e10-b046-78c475c9aba4",
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "Fair enough. Happy to lgtm as this only makes things better. However we know from our current run of flaky tests that we sometimes return a HTTP response code of 0.",
        "createdAt" : "2019-01-03T23:31:11Z",
        "updatedAt" : "2019-01-03T23:31:11Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a79e25727a90a6e91d8a26dc446ebee66358b3c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +542,546 @@func TestProxyUpgradeErrorResponseTerminates(t *testing.T) {\n\tfor _, intercept := range []bool{true, false} {\n\t\tfor _, code := range []int{200, 400, 500} {\n\t\t\tt.Run(fmt.Sprintf(\"intercept=%v,code=%v\", intercept, code), func(t *testing.T) {\n\t\t\t\t// Set up a backend server"
  },
  {
    "id" : "c6167984-1511-4289-8542-545fd92a7831",
    "prId" : 60012,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60012#pullrequestreview-100033639",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7eccb5e-7f11-4ddd-b3c0-860ae8877d4b",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "don't we have a Transport copier somewhere? I believe we do.",
        "createdAt" : "2018-02-27T13:22:57Z",
        "updatedAt" : "2018-05-18T22:15:00Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "88cfba2c-be75-40d7-bdc1-e5f06b41fc40",
        "parentId" : "c7eccb5e-7f11-4ddd-b3c0-860ae8877d4b",
        "authorId" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "body" : "The closest thing I found is `utilnet.SetOldTransportDefaults()` which is used above. It does not matter, it is just a test. Here I just copied the definition of the default http transport. Transport contains a mutex so it is not safe to copy the whole struct.",
        "createdAt" : "2018-02-28T11:39:42Z",
        "updatedAt" : "2018-05-18T22:15:00Z",
        "lastEditedBy" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "tags" : [
        ]
      },
      {
        "id" : "111f37ee-11f9-4935-84e7-247185b6884c",
        "parentId" : "c7eccb5e-7f11-4ddd-b3c0-860ae8877d4b",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "true, for the test it does not matter",
        "createdAt" : "2018-02-28T11:51:09Z",
        "updatedAt" : "2018-05-18T22:15:00Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e8e570dbda6ed89af9bc2e0a05e3d94bfdfcb61",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +499,503 @@\t)\n\tproxy := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\ttransport := &http.Transport{\n\t\t\tProxy: http.ProxyFromEnvironment,\n\t\t\tDialContext: func(ctx context.Context, network, addr string) (net.Conn, error) {"
  }
]