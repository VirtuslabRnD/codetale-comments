[
  {
    "id" : "fb651ff3-f596-4bbd-942f-3cd81f8e5cf3",
    "prId" : 88465,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88465#pullrequestreview-363461045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba26f1ec-c139-4ce9-868b-30caaf4cbdc5",
        "parentId" : null,
        "authorId" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "body" : "The std lib code uses reflection to confirm that the `==` comparison is safe to perform and attempts to `Unwrap` the `error` as well:\r\n\r\n```go\r\n// Is reports whether any error in err's chain matches target.\r\n//\r\n// The chain consists of err itself followed by the sequence of errors obtained by\r\n// repeatedly calling Unwrap.\r\n//\r\n// An error is considered to match a target if it is equal to that target or if\r\n// it implements a method Is(error) bool such that Is(target) returns true.\r\nfunc Is(err, target error) bool {\r\n\tif target == nil {\r\n\t\treturn err == target\r\n\t}\r\n\r\n\tisComparable := reflectlite.TypeOf(target).Comparable()\r\n\tfor {\r\n\t\tif isComparable && err == target {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\tif x, ok := err.(interface{ Is(error) bool }); ok && x.Is(target) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\t// TODO: consider supporing target.Is(err). This would allow\r\n\t\t// user-definable predicates, but also may allow for coping with sloppy\r\n\t\t// APIs, thereby making it easier to get away with them.\r\n\t\tif err = Unwrap(err); err == nil {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n}\r\n```",
        "createdAt" : "2020-02-24T14:55:28Z",
        "updatedAt" : "2020-03-04T13:13:15Z",
        "lastEditedBy" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "tags" : [
        ]
      },
      {
        "id" : "69fde507-82f4-490e-969c-d257c73deffe",
        "parentId" : "ba26f1ec-c139-4ce9-868b-30caaf4cbdc5",
        "authorId" : "29b82984-f003-46e0-b583-e6a4392093af",
        "body" : "I think this is implicitly fixed now by following your other suggestion of re-using `errors.Is` rather than re-implementing it",
        "createdAt" : "2020-02-24T15:11:30Z",
        "updatedAt" : "2020-03-04T13:13:15Z",
        "lastEditedBy" : "29b82984-f003-46e0-b583-e6a4392093af",
        "tags" : [
        ]
      }
    ],
    "commit" : "212190e25e18600bbca2eb5c77aa3fe5bcc55af1",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +95,99 @@}\n\nfunc (agg aggregate) Is(target error) bool {\n\treturn agg.visit(func(err error) bool {\n\t\treturn errors.Is(err, target)"
  },
  {
    "id" : "e25cdc24-f7b4-4421-aedc-f18d7315004c",
    "prId" : 47003,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47003#pullrequestreview-42757187",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afebf1da-1391-4444-adff-a4a0559fc0e1",
        "parentId" : null,
        "authorId" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "body" : "s/MessagesgCountMap/MessageCountMap",
        "createdAt" : "2017-06-07T23:02:52Z",
        "updatedAt" : "2017-06-07T23:14:40Z",
        "lastEditedBy" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "tags" : [
        ]
      }
    ],
    "commit" : "667ed4ef51d6ad07cb2db115faafc20768039500",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +22,26 @@)\n\n// MessagesgCountMap contains occurance for each error message.\ntype MessageCountMap map[string]int\n"
  }
]