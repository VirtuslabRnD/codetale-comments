[
  {
    "id" : "b4aee32c-58b0-4019-9bbf-4b31e9c43e58",
    "prId" : 84727,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84727#pullrequestreview-311985595",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92567e63-d447-4033-97f3-d9c07331bc49",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> it returns the default IP of the same address family as bindAddress.\r\n\r\ndoes this match the stdlib bind behavior? if I bind to `0.0.0.0`, do I only get bound to all ipv4 interfaces?\r\n\r\nalso, don't we use \"0.0.0.0\" as a stand-in for \"all\" in some of our default options? what would this change do to defaults on an ipv6-only machine?",
        "createdAt" : "2019-11-04T19:35:12Z",
        "updatedAt" : "2019-11-06T16:32:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "74260ee2-09d2-4130-83c6-f6de3079f197",
        "parentId" : "92567e63-d447-4033-97f3-d9c07331bc49",
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "> does this match the stdlib bind behavior? if I bind to 0.0.0.0, do I only get bound to all ipv4 interfaces?\r\n\r\nThe PR doesn't change what address the apiserver actually binds to. The function name is misleading. (The apiserver always binds to the address you passed in as `--bind-address`. `ChooseBindAddress()` is used to figure out the default value for `--advertise-address`.) Probably we should rename the function...\r\n\r\n> also, don't we use \"0.0.0.0\" as a stand-in for \"all\" in some of our default options? what would this change do to defaults on an ipv6-only machine?\r\n\r\nAh, yes, that would break with this PR. I guess for compatibility it should *prefer* the passed-in address family, but not require it.",
        "createdAt" : "2019-11-04T22:35:51Z",
        "updatedAt" : "2019-11-06T16:32:14Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "b0d09a99-f473-4abb-b40b-2aa2265b722a",
        "parentId" : "92567e63-d447-4033-97f3-d9c07331bc49",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "> I guess for compatibility it should prefer the passed-in address family, but not require it.\r\n\r\nisn't this already handled by the logic on line 420-421?\r\n\r\nEDIT: NVM, i saw this comment is marked as resolved.",
        "createdAt" : "2019-11-05T19:28:48Z",
        "updatedAt" : "2019-11-06T16:32:14Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "afa0b808f873b515c9d58a9ead788972ea7d2533",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +421,425 @@// If bindAddress is unset, it returns the host's default IP, as with ChooseHostInterface().\n// If bindAddress is unspecified or loopback, it returns the default IP of the same\n// address family as bindAddress.\n// Otherwise, it just returns bindAddress.\nfunc ResolveBindAddress(bindAddress net.IP) (net.IP, error) {"
  },
  {
    "id" : "adbf61fd-f78f-4da8-b7e8-7907611298c0",
    "prId" : 46874,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46874#pullrequestreview-50676311",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04fd1080-f008-41ab-beab-07c77cb4832f",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "Handle bad family case...\r\n\r\n```\r\nswitch family {\r\n...\r\ndefault:\r\n  return fmt.Errorf(...)\r\n}\r\n```",
        "createdAt" : "2017-06-24T18:47:50Z",
        "updatedAt" : "2017-07-18T21:07:53Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      },
      {
        "id" : "18e9406a-6eb2-4819-9fcb-653e929d0eb0",
        "parentId" : "04fd1080-f008-41ab-beab-07c77cb4832f",
        "authorId" : "59098d78-f4f5-4a00-90c5-b35bc66e6750",
        "body" : "I disagree about checking the family. We are calling parseIP() with either a **hardcoded** familyIPv4 or familyIPv6 to allow this code to be reused for IPv4 and IPv6, to reduce duplication. It is just a selector - could have been a boolean forIPv4, but I thought it was clearing calling:\r\n```    ip, err := parseIP(x, familyIPv6)```\r\n\r\nis clearer than:\r\n```    ip, err := parseIP(x, false)```\r\n",
        "createdAt" : "2017-06-26T19:40:30Z",
        "updatedAt" : "2017-07-18T21:07:53Z",
        "lastEditedBy" : "59098d78-f4f5-4a00-90c5-b35bc66e6750",
        "tags" : [
        ]
      },
      {
        "id" : "0060a429-65f6-416c-b7c0-cf92ac2c9bfe",
        "parentId" : "04fd1080-f008-41ab-beab-07c77cb4832f",
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "ok",
        "createdAt" : "2017-07-18T14:17:14Z",
        "updatedAt" : "2017-07-18T21:07:53Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      },
      {
        "id" : "f2e48153-0042-4583-9f0f-ffaa3f741c05",
        "parentId" : "04fd1080-f008-41ab-beab-07c77cb4832f",
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "ok",
        "createdAt" : "2017-07-18T16:59:16Z",
        "updatedAt" : "2017-07-18T21:07:53Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d8f96f881eeaa814d2b10a99c619d08ff60e7df",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +154,158 @@\t\treturn nil, err\n\t}\n\tif family == familyIPv4 {\n\t\tif len(bytes) != net.IPv4len {\n\t\t\treturn nil, fmt.Errorf(\"invalid IPv4 address in route\")"
  },
  {
    "id" : "346bd776-c9f7-4165-9365-ef2ce48637dc",
    "prId" : 46874,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46874#pullrequestreview-46355093",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc422254-8587-4c56-bf60-92dff255677f",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "What happens if we can't get the IPv4 default routes, but can get IPv6 routes? Is that an error? Should it be an error?\r\n\r\nI'm making this comment from reading just the docstring",
        "createdAt" : "2017-06-24T18:52:35Z",
        "updatedAt" : "2017-07-18T21:07:53Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      },
      {
        "id" : "99d2c67a-a458-419e-8c20-a93580f4b7de",
        "parentId" : "bc422254-8587-4c56-bf60-92dff255677f",
        "authorId" : "59098d78-f4f5-4a00-90c5-b35bc66e6750",
        "body" : "The IPv4 route file is a mandatory file, whereas the IPv6 route file is optional, and may not exist on the system. If we cannot read the former, it's an error. If we cannot read the latter, we ignore that error. Hopefully that is expressed clearly in the 2nd and 3rd sentences.  Don't confuse reading of the file, with the existence of routes in the files, which is addressed by the 4th sentence.\r\n\r\nHow about this...\r\n\r\n```\r\n// getAllDefaultRoutes obtains IPv4 and IPv6 default routes on the node. If unable\r\n// to read the IPv4 routing info file, we return an error. If unable to read the IPv6\r\n// routing info file (which is optional), we'll just use the IPv4 route information.\r\n// Using all the routing info, if no default routes are found, an error is returned.\r\n```",
        "createdAt" : "2017-06-26T19:59:14Z",
        "updatedAt" : "2017-07-18T21:07:53Z",
        "lastEditedBy" : "59098d78-f4f5-4a00-90c5-b35bc66e6750",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d8f96f881eeaa814d2b10a99c619d08ff60e7df",
    "line" : 225,
    "diffHunk" : "@@ -1,1 +336,340 @@}\n\n// getAllDefaultRoutes obtains IPv4 and IPv6 default routes on the node. If unable\n// to read the IPv4 routing info file, we return an error. If unable to read the IPv6\n// routing info file (which is optional), we'll just use the IPv4 route information."
  },
  {
    "id" : "24728841-c18a-403d-abbe-f3a9897479b1",
    "prId" : 46874,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46874#pullrequestreview-50711929",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb192445-c328-486a-b028-5c00ddb2f46e",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "Can you put a comment line some description of the fields on the given line?",
        "createdAt" : "2017-07-18T16:59:05Z",
        "updatedAt" : "2017-07-18T21:07:53Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      },
      {
        "id" : "1fef8979-cbb7-410f-b6d1-cfaf3ad4b58e",
        "parentId" : "cb192445-c328-486a-b028-5c00ddb2f46e",
        "authorId" : "59098d78-f4f5-4a00-90c5-b35bc66e6750",
        "body" : "OK, but it is kind-of obvious from L75-77 and variable names, what these fields are. This file has a header line, but much of the line is irrelevant to our needs. Not sure of how much value this adds.",
        "createdAt" : "2017-07-18T19:15:18Z",
        "updatedAt" : "2017-07-18T21:07:53Z",
        "lastEditedBy" : "59098d78-f4f5-4a00-90c5-b35bc66e6750",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d8f96f881eeaa814d2b10a99c619d08ff60e7df",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +81,85 @@\t\t\tcontinue\n\t\t}\n\t\tfields := strings.Fields(line)\n\t\t// Interested in fields:\n\t\t//  0 - interface name"
  },
  {
    "id" : "2896d7f6-4c3f-4de0-b3bf-69b68fa1685d",
    "prId" : 46874,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46874#pullrequestreview-50711929",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a07ab9ab-60bb-4ce2-9ec5-85d2c791b2c3",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "Is endian reversed only for IPv4?",
        "createdAt" : "2017-07-18T17:00:15Z",
        "updatedAt" : "2017-07-18T21:07:53Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      },
      {
        "id" : "af74d9f0-b489-4515-bc83-0c18192744ca",
        "parentId" : "a07ab9ab-60bb-4ce2-9ec5-85d2c791b2c3",
        "authorId" : "59098d78-f4f5-4a00-90c5-b35bc66e6750",
        "body" : "correct. It is stored differently in the IPv4 route file vs the IPv6 route file.",
        "createdAt" : "2017-07-18T19:05:39Z",
        "updatedAt" : "2017-07-18T21:07:53Z",
        "lastEditedBy" : "59098d78-f4f5-4a00-90c5-b35bc66e6750",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d8f96f881eeaa814d2b10a99c619d08ff60e7df",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +164,168 @@\t\treturn nil, fmt.Errorf(\"invalid IPv6 address in route\")\n\t}\n\treturn net.IP(bytes), nil\n}\n"
  },
  {
    "id" : "77be14c0-8690-4ec4-8b87-7f56db2379be",
    "prId" : 46138,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46138#pullrequestreview-46257454",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f155b676-cd8a-4036-bb7f-de6a558cc36c",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "rename to getIpv4Routes?",
        "createdAt" : "2017-06-24T18:29:57Z",
        "updatedAt" : "2017-07-07T12:53:17Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      },
      {
        "id" : "d9cc0052-4e0e-4ec8-9291-14feb3edc6dc",
        "parentId" : "f155b676-cd8a-4036-bb7f-de6a558cc36c",
        "authorId" : "59098d78-f4f5-4a00-90c5-b35bc66e6750",
        "body" : "Part 3 (46874) of the change set renames this method (at this point, there is only IPv4, so kept the original name - just added a docstring).",
        "createdAt" : "2017-06-26T13:16:43Z",
        "updatedAt" : "2017-07-07T12:53:17Z",
        "lastEditedBy" : "59098d78-f4f5-4a00-90c5-b35bc66e6750",
        "tags" : [
        ]
      }
    ],
    "commit" : "78ae9a57df17b45c7caf9afce39be6e48bfb7648",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +44,48 @@}\n\n// getRoutes obtains the IPv4 routes, and filters out non-default routes.\nfunc getRoutes(input io.Reader) ([]Route, error) {\n\troutes := []Route{}"
  },
  {
    "id" : "6036778f-f2cc-4ff9-99a4-34b54985dd9f",
    "prId" : 46138,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46138#pullrequestreview-48591546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d416b6f-db71-4d74-b766-8c0ece63ef93",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "doesn't this return the IP? (not just check)",
        "createdAt" : "2017-07-06T21:00:40Z",
        "updatedAt" : "2017-07-07T12:53:17Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      },
      {
        "id" : "8969697d-2dae-49d3-a178-274152ea19f9",
        "parentId" : "8d416b6f-db71-4d74-b766-8c0ece63ef93",
        "authorId" : "59098d78-f4f5-4a00-90c5-b35bc66e6750",
        "body" : "Will clarify comment.",
        "createdAt" : "2017-07-07T12:29:05Z",
        "updatedAt" : "2017-07-07T12:53:17Z",
        "lastEditedBy" : "59098d78-f4f5-4a00-90c5-b35bc66e6750",
        "tags" : [
        ]
      }
    ],
    "commit" : "78ae9a57df17b45c7caf9afce39be6e48bfb7648",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +121,125 @@}\n\n// getMatchingGlobalIP method checks all the IP addresses of a Interface looking\n// for a valid non-loopback/link-local address of the requested family and returns\n// it, if found."
  },
  {
    "id" : "4e535422-0323-4685-94a1-abaf86a25501",
    "prId" : 46044,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46044#pullrequestreview-46227309",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cec216c8-4053-4d9c-b423-9b0738e58ff6",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "can we avoid the local to make the logic more explicit?\r\n```\r\nif ip.To4() != nil {\r\n  return family == familyIPv4\r\n}\r\nif ip.To16() != nil {\r\n  return family == familyIPv6\r\n}\r\nreturn false\r\n```",
        "createdAt" : "2017-06-24T18:13:12Z",
        "updatedAt" : "2017-06-26T13:13:47Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      },
      {
        "id" : "433d372d-0ad8-4fc0-9023-58965b948613",
        "parentId" : "cec216c8-4053-4d9c-b423-9b0738e58ff6",
        "authorId" : "59098d78-f4f5-4a00-90c5-b35bc66e6750",
        "body" : "Sure, I can simplify. The family can only be IPv4 or IPv6, so this could be:\r\n\r\n```\r\nif ip.To4() != nil {\r\n    return family == familyIPv4\r\n} else {\r\n    return family == familyIPv6\r\n}\r\n\r\n```",
        "createdAt" : "2017-06-26T10:49:19Z",
        "updatedAt" : "2017-06-26T13:13:47Z",
        "lastEditedBy" : "59098d78-f4f5-4a00-90c5-b35bc66e6750",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2a99c786ac01fa7ec32e829c777c6d335c24528",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +162,166 @@\n// memberOF tells if the IP is of the desired family. Used for checking interface addresses.\nfunc memberOf(ip net.IP, family AddressFamily) bool {\n\tif ip.To4() != nil {\n\t\treturn family == familyIPv4"
  },
  {
    "id" : "20768e47-4249-40c3-a3da-23dd119c4783",
    "prId" : 46044,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46044#pullrequestreview-46227309",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c8549e1-03c9-4a77-811b-895a31c39712",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "Can you put a ref to https://tools.ietf.org/html/rfc3587 in the comment (or better RFC, I'm not a subject area expert) for the definition of the term \"global\"?",
        "createdAt" : "2017-06-24T18:16:03Z",
        "updatedAt" : "2017-06-26T13:13:47Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      },
      {
        "id" : "d8e3ed86-3a09-425d-ad3c-ebe4b609e829",
        "parentId" : "2c8549e1-03c9-4a77-811b-895a31c39712",
        "authorId" : "59098d78-f4f5-4a00-90c5-b35bc66e6750",
        "body" : "There's not one RFC that defines this. See https://golang.org/src/net/ip.go for the definition of the IsGlobalUnicast() function from the net package, which is used.  Seems to be, that referring someone to four RFCs, and then having them weed through them to understand the definition, is not going to be useful. Alternatively, I could indicate that it is a non-LB, non-link local, non-P2P address.  Will try rewording.",
        "createdAt" : "2017-06-26T11:07:21Z",
        "updatedAt" : "2017-06-26T13:13:47Z",
        "lastEditedBy" : "59098d78-f4f5-4a00-90c5-b35bc66e6750",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2a99c786ac01fa7ec32e829c777c6d335c24528",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +170,174 @@}\n\n// chooseIPFromHostInterfaces looks at all system interfaces, trying to find one that is up that\n// has a global unicast address (non-loopback, non-link local, non-point2point), and returns the IP.\n// Searches for IPv4 addresses, and then IPv6 addresses."
  }
]