[
  {
    "id" : "1b39d720-6890-4161-9562-422d4379d41c",
    "prId" : 99371,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99371#pullrequestreview-665319251",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "037232db-961d-4b50-b255-088c8ba87e0f",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "why not before the loop? errc is only written before ch is closed.",
        "createdAt" : "2021-05-18T09:09:40Z",
        "updatedAt" : "2021-05-18T09:09:40Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "8a075dd1-4572-4ac2-8c7a-8a4034fcd141",
        "parentId" : "037232db-961d-4b50-b255-088c8ba87e0f",
        "authorId" : "dcd6316b-eaeb-4e4d-81d7-11df68716a43",
        "body" : "Thanks for your feedback @sttts! Think it's not sufficient to check before the loop. Although `errc` is only written before `ch` is closed, that only happens after `done` has been written in [L454](https://github.com/tiloso/kubernetes/blob/627218a8e2e8dddc70312c04b0fd5a90bccb8022/staging/src/k8s.io/apimachinery/pkg/util/wait/wait_test.go#L454). Since `PollInfinite` calls the `ConditionFunc` repeatedly, it might return an error until then.",
        "createdAt" : "2021-05-18T20:22:50Z",
        "updatedAt" : "2021-05-18T20:26:31Z",
        "lastEditedBy" : "dcd6316b-eaeb-4e4d-81d7-11df68716a43",
        "tags" : [
        ]
      },
      {
        "id" : "1d5177fc-12d7-4c04-9a76-62b6b63f45da",
        "parentId" : "037232db-961d-4b50-b255-088c8ba87e0f",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I missed line 418",
        "createdAt" : "2021-05-21T10:28:18Z",
        "updatedAt" : "2021-05-21T10:28:18Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "627218a8e2e8dddc70312c04b0fd5a90bccb8022",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +442,446 @@\t\t\tif !open {\n\t\t\t\tif len(errc) != 0 {\n\t\t\t\t\tt.Fatalf(\"did not expect channel to be closed, %v\", <-errc)\n\t\t\t\t}\n\t\t\t\tt.Fatal(\"did not expect channel to be closed\")"
  },
  {
    "id" : "8ac1bbce-ac20-4f57-b899-146088784818",
    "prId" : 99371,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99371#pullrequestreview-662543786",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8b487bb-da6c-4d92-aacd-2924bf0c4d0f",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "with https://github.com/kubernetes/kubernetes/pull/99371/files#r634192402 we don't need thiis",
        "createdAt" : "2021-05-18T09:10:12Z",
        "updatedAt" : "2021-05-18T09:10:13Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "cce5617f-dfa8-4633-96f1-089204ccd973",
        "parentId" : "c8b487bb-da6c-4d92-aacd-2924bf0c4d0f",
        "authorId" : "dcd6316b-eaeb-4e4d-81d7-11df68716a43",
        "body" : "Think we need it as well. After `done` has been written in [L454](https://github.com/tiloso/kubernetes/blob/627218a8e2e8dddc70312c04b0fd5a90bccb8022/staging/src/k8s.io/apimachinery/pkg/util/wait/wait_test.go#L454) the `ConditionFunc` is being called one last time and `PollInfinite` might return an error. ",
        "createdAt" : "2021-05-18T20:30:54Z",
        "updatedAt" : "2021-05-18T20:31:36Z",
        "lastEditedBy" : "dcd6316b-eaeb-4e4d-81d7-11df68716a43",
        "tags" : [
        ]
      }
    ],
    "commit" : "627218a8e2e8dddc70312c04b0fd5a90bccb8022",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +466,470 @@\tif len(errc) != 0 {\n\t\tt.Fatal(<-errc)\n\t}\n}\n"
  },
  {
    "id" : "070e4545-aed1-458c-91e4-c0d88b094bee",
    "prId" : 72928,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72928#pullrequestreview-196835675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21781190-6186-4aaa-889b-0bc6a7011eb6",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I know you copied this line from existing tests, but what does this line verify?",
        "createdAt" : "2019-01-23T01:18:58Z",
        "updatedAt" : "2019-01-23T01:21:35Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "2af19684-6d93-4f44-903a-58b8b3df838b",
        "parentId" : "21781190-6186-4aaa-889b-0bc6a7011eb6",
        "authorId" : "6668d103-c3bb-4f6b-8ac8-5eee2be66517",
        "body" : "I indeed took it from the other test. I think it is just a sanity check to ensure that the channel is closed.",
        "createdAt" : "2019-01-24T06:37:35Z",
        "updatedAt" : "2019-01-24T06:37:35Z",
        "lastEditedBy" : "6668d103-c3bb-4f6b-8ac8-5eee2be66517",
        "tags" : [
        ]
      },
      {
        "id" : "7e5fd664-7cfa-4c23-bea4-8077dc192028",
        "parentId" : "21781190-6186-4aaa-889b-0bc6a7011eb6",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "But if the `called <- struct{}{}` is still being executing, then this line will still pass, right?",
        "createdAt" : "2019-01-24T18:47:36Z",
        "updatedAt" : "2019-01-24T18:47:36Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "acbb426a-9b95-460e-a1ef-40e2754d266d",
        "parentId" : "21781190-6186-4aaa-889b-0bc6a7011eb6",
        "authorId" : "6668d103-c3bb-4f6b-8ac8-5eee2be66517",
        "body" : "I would agree on that, yes. Then maybe another option is that it is trying to prevent leaving an (internal) goroutine stuck on a send which may have happened right before the stop/cancel.",
        "createdAt" : "2019-01-24T19:50:20Z",
        "updatedAt" : "2019-01-24T19:50:20Z",
        "lastEditedBy" : "6668d103-c3bb-4f6b-8ac8-5eee2be66517",
        "tags" : [
        ]
      },
      {
        "id" : "ed705b4a-4d59-47af-90be-ba42dfef47f0",
        "parentId" : "21781190-6186-4aaa-889b-0bc6a7011eb6",
        "authorId" : "6668d103-c3bb-4f6b-8ac8-5eee2be66517",
        "body" : "@caesarxuchao as an outcome of this discussion, do you want me to change anything here?",
        "createdAt" : "2019-01-27T16:48:24Z",
        "updatedAt" : "2019-01-27T16:48:24Z",
        "lastEditedBy" : "6668d103-c3bb-4f6b-8ac8-5eee2be66517",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4f1568d79622a34e038e99eadf987378be3d19c",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +67,71 @@\t<-called\n\tcancel()\n\t<-called\n}\n"
  },
  {
    "id" : "073aeeb0-24ab-480a-867a-1563bd09f6fc",
    "prId" : 72364,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72364#pullrequestreview-188274056",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bd7ab12-9687-4c98-934e-73d1817ffb4e",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Why dividing it by 2 instead of using ForeverTestTimeout directly? Is the purpose to make the test less false negative (i.e., less likely to miss a bug)?",
        "createdAt" : "2018-12-28T06:23:58Z",
        "updatedAt" : "2019-01-10T09:52:29Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "06ad2c74-46c2-440c-a901-df2e3bfc2017",
        "parentId" : "8bd7ab12-9687-4c98-934e-73d1817ffb4e",
        "authorId" : "e096ea8f-2d4e-42fd-ae68-c36986c797b7",
        "body" : "Yes.",
        "createdAt" : "2018-12-28T11:39:15Z",
        "updatedAt" : "2019-01-10T09:52:29Z",
        "lastEditedBy" : "e096ea8f-2d4e-42fd-ae68-c36986c797b7",
        "tags" : [
        ]
      }
    ],
    "commit" : "44b2e8464bd3ece4effdb888ceabf65ae2f39ff7",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +474,478 @@\n\t// The WaitFor should return immediately, so the duration is close to 0s.\n\tif duration >= ForeverTestTimeout/2 {\n\t\tt.Errorf(\"expected short timeout duration\")\n\t}"
  },
  {
    "id" : "ecb3c9a4-fd34-4948-81ae-c94f79238d4d",
    "prId" : 71088,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71088#pullrequestreview-179626746",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b77579f8-4883-4542-824d-7bdb01c3eb28",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "add a test without enough steps, big enough factor, and low enough jitter that it would have caught the compounding jitter issue",
        "createdAt" : "2018-11-29T04:42:26Z",
        "updatedAt" : "2018-12-03T21:43:55Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e62d389fb072e15ca4c6e3d42e283eff435c206b",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +512,516 @@\t\t{initial: &Backoff{Duration: time.Second, Factor: 2, Steps: 3}, want: []time.Duration{1 * time.Second, 2 * time.Second, 4 * time.Second}},\n\t\t{initial: &Backoff{Duration: time.Second, Factor: 2, Steps: 3, Cap: 3 * time.Second}, want: []time.Duration{1 * time.Second, 2 * time.Second, 3 * time.Second}},\n\t\t{initial: &Backoff{Duration: time.Second, Factor: 2, Steps: 2, Cap: 3 * time.Second, Jitter: 0.5}, want: []time.Duration{2 * time.Second, 3 * time.Second, 3 * time.Second}},\n\t\t{initial: &Backoff{Duration: time.Second, Factor: 2, Steps: 6, Jitter: 4}, want: []time.Duration{1 * time.Second, 2 * time.Second, 4 * time.Second, 8 * time.Second, 16 * time.Second, 32 * time.Second}},\n\t}"
  }
]