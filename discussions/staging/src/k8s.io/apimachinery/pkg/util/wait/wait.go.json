[
  {
    "id" : "26ef7a23-721b-42f7-8c6f-88622752b7ec",
    "prId" : 101668,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101668#pullrequestreview-651727523",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d85fff3-1bab-4692-8019-055d7b12df3c",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "missing a WithContext variant",
        "createdAt" : "2021-05-04T18:09:03Z",
        "updatedAt" : "2021-05-06T16:02:52Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "d8fa77cb-bd37-41e7-91b5-5d5e34dd6f3d",
        "parentId" : "1d85fff3-1bab-4692-8019-055d7b12df3c",
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "`PollInfiniteWithContext` added",
        "createdAt" : "2021-05-04T22:39:28Z",
        "updatedAt" : "2021-05-06T16:02:52Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5f8cca701575678819b5e9e6372df989ab6799f",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +482,486 @@// Some intervals may be missed if the condition takes too long or the time\n// window is too short.\nfunc PollInfinite(interval time.Duration, condition ConditionFunc) error {\n\treturn PollInfiniteWithContext(context.Background(), interval, condition.WithContext())\n}"
  },
  {
    "id" : "0e3cbf17-a5d8-433a-9fe6-55fae7df4f94",
    "prId" : 71326,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71326#pullrequestreview-178346656",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9f7b091-64d4-413e-9d93-e1b724ecd1f2",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "i'd suggest add a new func supporting passing context instead of stop channel as its signal since that long-termly we will support context in those wait utilities.\r\n\r\n```go\r\n\r\nfunc PollUntilWithContext(interval time.Duration, condition ConditionFunc, parentContext context.Context) {\r\n        ctx, cancel := context.WithCancel(parentContext)\r\n\tdefer cancel()\r\n\treturn WaitFor(poller(interval, 0), condition, ctx.Done())\r\n}\r\n\r\n\r\nfunc PollUntil(interval time.Duration, condition ConditionFunc, stopCh <-chan struct{}) {\r\n        ctx, cancel := stopChannelAsContext(stopCh)\r\n        defer cancel()\r\n        PollUntilWithContext(interval, condition, ctx)\r\n} \r\n\r\nfunc stopChannelAsContext(parentCh <-chan struct{}) (context.Context, context.CancelFunc) {\r\n        ctx, cancel := context.WithCancel(context.Background())\r\n \tgo func() {\r\n\t\tselect {\r\n\t\tcase <-parentCh:\r\n\t\t\tcancel()\r\n\t\tcase <-ctx.Done():\r\n\t\t}\r\n\t}()\r\n\treturn ctx, cancel\r\n}\r\n\r\n```",
        "createdAt" : "2018-11-22T06:39:04Z",
        "updatedAt" : "2018-12-06T19:32:46Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "40c94fba-8872-4bbb-835b-13bb2f96187c",
        "parentId" : "b9f7b091-64d4-413e-9d93-e1b724ecd1f2",
        "authorId" : "b616af52-cce1-4cdb-821b-582305c0cb82",
        "body" : "@yue9944882 thanks for the suggestion - it seems to me that work might be out of scope for this fix and should be addressed as part of a larger refactor to add context-based apis to _wait_ across the board, in addition to modifying known call sites. What do you think?",
        "createdAt" : "2018-11-26T15:30:15Z",
        "updatedAt" : "2018-12-06T19:32:46Z",
        "lastEditedBy" : "b616af52-cce1-4cdb-821b-582305c0cb82",
        "tags" : [
        ]
      }
    ],
    "commit" : "0869e636a904847752268511513293822a9b95e9",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +343,347 @@\tctx, cancel := contextForChannel(stopCh)\n\tdefer cancel()\n\treturn WaitFor(poller(interval, 0), condition, ctx.Done())\n}\n"
  },
  {
    "id" : "265bf78b-937c-4a32-9863-c2d88e1d1102",
    "prId" : 71326,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71326#pullrequestreview-217306145",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0001358c-7f73-40ef-bfd6-39e173be3003",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "~~this comment doesn't make sense to me... there is no done channel passed in or returned~~\r\n\r\nedit: got lost in the nesting levels... the caller of the returned function",
        "createdAt" : "2019-03-21T15:17:06Z",
        "updatedAt" : "2019-03-21T15:19:08Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0869e636a904847752268511513293822a9b95e9",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +403,407 @@// Over very short intervals you may receive no ticks before the channel is\n// closed. A timeout of 0 is interpreted as an infinity, and in such a case\n// it would be the caller's responsibility to close the done channel.\n// Failure to do so would result in a leaked goroutine.\n//"
  },
  {
    "id" : "83976c55-5b08-4e48-ba3b-c4d7fd2e28e7",
    "prId" : 71088,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71088#pullrequestreview-179623018",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0536b93f-05a6-48bb-8174-0fdf3f5b91e0",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "doesn't this mutate the passed in backoff object, making it unfit for reuse? a common pattern is to define backoff params in a shared var for reuse (c.f. UpdateTaintBackoff, UpdateNodeSpecBackoff, updateNetworkConditionBackoff, RemoveTokenBackoff, EvictionsRetry, updateBackoff, certificateWaitBackoff, DefaultRetry, DefaultBackoff)",
        "createdAt" : "2018-11-29T04:12:02Z",
        "updatedAt" : "2018-12-03T21:43:55Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "a010c8d2-8063-42e4-8f86-2ec1583d2ba6",
        "parentId" : "0536b93f-05a6-48bb-8174-0fdf3f5b91e0",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "no, it's a copy",
        "createdAt" : "2018-11-29T04:13:16Z",
        "updatedAt" : "2018-12-03T21:43:55Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b6c1776a-10d3-40b8-97af-f41ce260438f",
        "parentId" : "0536b93f-05a6-48bb-8174-0fdf3f5b91e0",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "nm, function arg is pass-by-value. Step() receiver being a pointer threw me",
        "createdAt" : "2018-11-29T04:14:39Z",
        "updatedAt" : "2018-12-03T21:43:55Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e62d389fb072e15ca4c6e3d42e283eff435c206b",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +237,241 @@\t\t\tbreak\n\t\t}\n\t\ttime.Sleep(backoff.Step())\n\t}\n\treturn ErrWaitTimeout"
  },
  {
    "id" : "d2a4af2e-9f70-4fae-957e-56e524f61647",
    "prId" : 71088,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71088#pullrequestreview-179625894",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ea6e114-6014-4ad4-a568-6237783232de",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this means that the first sleep is `b.Factor * b.Duration`, not `b.Duration`, which is a change",
        "createdAt" : "2018-11-29T04:35:51Z",
        "updatedAt" : "2018-12-03T21:43:55Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e62d389fb072e15ca4c6e3d42e283eff435c206b",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +206,210 @@\t// calculate the next step\n\tif b.Factor != 0 {\n\t\tb.Duration = time.Duration(float64(b.Duration) * b.Factor)\n\t\tif b.Cap > 0 && b.Duration > b.Cap {\n\t\t\tb.Duration = b.Cap"
  },
  {
    "id" : "adde9139-084e-46f0-8571-4ea7ee9f7182",
    "prId" : 71088,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71088#pullrequestreview-180994218",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb28cad1-d539-43e7-a172-835b5bd18c3b",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this should be:\r\n```go\r\nif delay := backoff.Step(); backoff.Steps > 0 {\r\n  time.Sleep(delay)\r\n}\r\n```\r\n\r\notherwise we sleep for no reason (and simply delay returning ErrWaitTimeout",
        "createdAt" : "2018-12-03T14:20:26Z",
        "updatedAt" : "2018-12-03T21:43:55Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "35cc574e-bbfc-477c-9e14-0e0862a34254",
        "parentId" : "cb28cad1-d539-43e7-a172-835b5bd18c3b",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Updated slightly differently",
        "createdAt" : "2018-12-03T21:43:48Z",
        "updatedAt" : "2018-12-03T21:43:55Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "e62d389fb072e15ca4c6e3d42e283eff435c206b",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +237,241 @@\t\t\tbreak\n\t\t}\n\t\ttime.Sleep(backoff.Step())\n\t}\n\treturn ErrWaitTimeout"
  },
  {
    "id" : "6323e015-76d9-4777-bbea-9324eb5dcb6c",
    "prId" : 70277,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70277#pullrequestreview-188031141",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d7b59b5-b0ef-4c5e-9b73-75aaf3553a05",
        "parentId" : null,
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "I believe this is wrong. I do not think this will break you out of the for loop, which I believe is the desired behavior. If we just return here, that will have us exit the for loop and then the deferred close will be called. Otherwise we are relying on waiting for the timeout which seems wrong. We should make sure we are properly testing this case.",
        "createdAt" : "2018-12-26T22:51:41Z",
        "updatedAt" : "2018-12-26T22:54:20Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "9ca9baea-0c23-49f9-997e-883d0307150b",
        "parentId" : "1d7b59b5-b0ef-4c5e-9b73-75aaf3553a05",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I had the same doubt but then decided the code in this PR was proper due to backward compatibility concerns.\r\n\r\nThe current behavior of the function is letting the `wait` function to decide how to react to the `done` channel, see https://github.com/kubernetes/kubernetes/blob/dfaf10f46955158c2715875a23c2352713a3162b/staging/src/k8s.io/apimachinery/pkg/util/wait/wait.go#L362. So the behavior in this PR is consistent with the current behavior, while calling `return` here would be a behavior change.\r\n\r\nAlso note that the comment of the `WaitFor` function didn't say if the `WaitFor` should stop waiting when the `done` channel is closed. I think we should explicitly point out what role the `done` channels plays here.",
        "createdAt" : "2018-12-26T23:24:07Z",
        "updatedAt" : "2018-12-26T23:24:07Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "8ec1be04-9c37-4a24-bc42-0af0b105aa67",
        "parentId" : "1d7b59b5-b0ef-4c5e-9b73-75aaf3553a05",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "If we decide that `WaitFor` should stop waiting once `done` channel is closed, regardless of the `wait` func, then I suggest that we apply @cheftako's comment in a different PR, because that's a behavior change while this PR is fixing a goroutine leak.\r\n",
        "createdAt" : "2018-12-26T23:30:49Z",
        "updatedAt" : "2018-12-26T23:30:50Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "0ac38072-29a8-4c1c-a315-a3ab899c464a",
        "parentId" : "1d7b59b5-b0ef-4c5e-9b73-75aaf3553a05",
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "I'd be ok with creating an issue to make sure this does not get dropped. Also we should properly document the parameters when we make that change.",
        "createdAt" : "2018-12-27T00:07:58Z",
        "updatedAt" : "2018-12-27T00:07:58Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "f7f9fed8-8b2e-4fe9-ac80-fa088ddf5890",
        "parentId" : "1d7b59b5-b0ef-4c5e-9b73-75aaf3553a05",
        "authorId" : "e096ea8f-2d4e-42fd-ae68-c36986c797b7",
        "body" : "As @caesarxuchao said, It just goes to another loop and runs the final test. \r\n\r\nThis behavior is described in the documents.\r\n```go\r\n// WaitFor gets a channel from 'wait()'', and then invokes 'fn' once for every value\r\n// placed on the channel and once more when the channel is closed.\r\n```",
        "createdAt" : "2018-12-27T03:22:05Z",
        "updatedAt" : "2018-12-27T04:37:08Z",
        "lastEditedBy" : "e096ea8f-2d4e-42fd-ae68-c36986c797b7",
        "tags" : [
        ]
      },
      {
        "id" : "a4133740-fd1c-4425-a396-69b296508170",
        "parentId" : "1d7b59b5-b0ef-4c5e-9b73-75aaf3553a05",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "> once more when the channel is closed\r\n\r\nThe \"channel\" here means the channel returned by \"wait()\", not the \"done\" channel. The doc doesn't mention the 'done' channel at all, which leaves space for uncertainties..\r\n\r\nWhat cheftako suggested (closing done channel should terminate WaitFor) was what I expected at first. Can you open an issue to track @cheftako's request?",
        "createdAt" : "2018-12-27T08:29:23Z",
        "updatedAt" : "2018-12-27T08:29:23Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "77af287e-2475-420f-acd6-d8c0af683171",
        "parentId" : "1d7b59b5-b0ef-4c5e-9b73-75aaf3553a05",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Nvm, created https://github.com/kubernetes/kubernetes/issues/72357.",
        "createdAt" : "2018-12-27T08:36:43Z",
        "updatedAt" : "2018-12-27T08:36:44Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "2306eb41254d86ac1f9b68f6583bc17ae262696d",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +383,387 @@\t\t\t}\n\t\tcase <-done:\n\t\t\tcloseCh()\n\t\t}\n\t}"
  }
]