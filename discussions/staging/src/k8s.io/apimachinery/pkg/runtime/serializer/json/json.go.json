[
  {
    "id" : "48b7b729-2a52-4aed-916f-ef1a6bd48059",
    "prId" : 74111,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74111#pullrequestreview-220395472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57d9f235-249c-4d6c-a590-9d327a9369d5",
        "parentId" : null,
        "authorId" : "05637862-b60e-403e-8519-09d1b3f0c9c2",
        "body" : "see here",
        "createdAt" : "2019-03-28T13:30:33Z",
        "updatedAt" : "2019-04-16T00:39:27Z",
        "lastEditedBy" : "05637862-b60e-403e-8519-09d1b3f0c9c2",
        "tags" : [
        ]
      },
      {
        "id" : "f4580219-c5d3-4e64-9ae1-c09c9251ed30",
        "parentId" : "57d9f235-249c-4d6c-a590-9d327a9369d5",
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "@sttts ^",
        "createdAt" : "2019-03-29T06:58:58Z",
        "updatedAt" : "2019-04-16T00:39:27Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "76d5066827ffe6337570a14e5cc842fcb42fb7e8",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +265,269 @@\tif err != nil {\n\t\treturn nil, actual, runtime.NewStrictDecodingError(err.Error(), string(originalData))\n\t}\n\t// As performance is not an issue for now for the strict deserializer (one has regardless to do\n\t// the unmarshal twice), we take the sanitized, altered data that is guaranteed to have no duplicated"
  },
  {
    "id" : "8d6084bb-ff65-4657-bc65-4ebcd4b2266e",
    "prId" : 74111,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74111#pullrequestreview-226941371",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "031b9188-19e9-42e0-87dc-7daf8ee2d764",
        "parentId" : null,
        "authorId" : "bf66f693-b705-46d8-a378-3750b55f033c",
        "body" : "We should comment that `Pretty` is silently ignored when `YAML` is true, because YAML is always printed with white-space.",
        "createdAt" : "2019-04-15T21:29:35Z",
        "updatedAt" : "2019-04-16T00:39:27Z",
        "lastEditedBy" : "bf66f693-b705-46d8-a378-3750b55f033c",
        "tags" : [
        ]
      },
      {
        "id" : "cd35e2b3-c194-4b01-8fe8-f91f42345b00",
        "parentId" : "031b9188-19e9-42e0-87dc-7daf8ee2d764",
        "authorId" : "05637862-b60e-403e-8519-09d1b3f0c9c2",
        "body" : "fixed",
        "createdAt" : "2019-04-16T00:44:41Z",
        "updatedAt" : "2019-04-16T00:44:41Z",
        "lastEditedBy" : "05637862-b60e-403e-8519-09d1b3f0c9c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "76d5066827ffe6337570a14e5cc842fcb42fb7e8",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +68,72 @@// (3) we can creates a strict JSON/YAML serializer that can also return errors of type strictDecodingError, once we set\n//    `Strict` to `true`. And note that this serializer is not as performant as the non-strict variant, and should not be\n//    used in fast paths.\ntype SerializerOptions struct {\n\tYaml   bool"
  },
  {
    "id" : "8658f5d2-4896-4d21-803b-236cbfa090f9",
    "prId" : 74111,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74111#pullrequestreview-227012274",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a7ae72c-4bc7-478b-92fb-18a81618cc7f",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "these need go docs",
        "createdAt" : "2019-04-16T06:56:51Z",
        "updatedAt" : "2019-04-16T06:56:52Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "76d5066827ffe6337570a14e5cc842fcb42fb7e8",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +70,74 @@//    used in fast paths.\ntype SerializerOptions struct {\n\tYaml   bool\n\tPretty bool\n\tStrict bool"
  },
  {
    "id" : "9a547e2d-1cdb-4fa7-9a27-4ee0da572d17",
    "prId" : 74111,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74111#pullrequestreview-227033933",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0758918e-3e35-4a48-a745-62626721937e",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "why is this a pointer? Is it permitted to change values after creation?",
        "createdAt" : "2019-04-16T06:57:48Z",
        "updatedAt" : "2019-04-16T06:57:48Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "98d4f116-6652-4272-836f-5319fe7ca359",
        "parentId" : "0758918e-3e35-4a48-a745-62626721937e",
        "authorId" : "bf66f693-b705-46d8-a378-3750b55f033c",
        "body" : "We could embed a private-field version of `SerializerOptions` (`privateSerializerOptions`).\r\n\r\nWe'd copy the values over when creating the `NewSerializerWithOptions`.\r\n\r\nThat would make the `Serializer` immutable.\r\nIs that worth doing?",
        "createdAt" : "2019-04-16T07:40:07Z",
        "updatedAt" : "2019-04-16T07:40:07Z",
        "lastEditedBy" : "bf66f693-b705-46d8-a378-3750b55f033c",
        "tags" : [
        ]
      },
      {
        "id" : "86c96342-ace8-4c77-acdc-ac7dcd6771be",
        "parentId" : "0758918e-3e35-4a48-a745-62626721937e",
        "authorId" : "bf66f693-b705-46d8-a378-3750b55f033c",
        "body" : "Also, I think this shouldn't be a pointer.",
        "createdAt" : "2019-04-16T07:40:44Z",
        "updatedAt" : "2019-04-16T07:40:52Z",
        "lastEditedBy" : "bf66f693-b705-46d8-a378-3750b55f033c",
        "tags" : [
        ]
      },
      {
        "id" : "3f0a79f1-52c2-4a49-87c3-995970aa8d01",
        "parentId" : "0758918e-3e35-4a48-a745-62626721937e",
        "authorId" : "05637862-b60e-403e-8519-09d1b3f0c9c2",
        "body" : "yes, no need for current demand, for `no need change value after create`",
        "createdAt" : "2019-04-16T07:52:54Z",
        "updatedAt" : "2019-04-16T07:52:54Z",
        "lastEditedBy" : "05637862-b60e-403e-8519-09d1b3f0c9c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "76d5066827ffe6337570a14e5cc842fcb42fb7e8",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +79,83 @@\tcreater runtime.ObjectCreater\n\ttyper   runtime.ObjectTyper\n\t*SerializerOptions\n}\n"
  },
  {
    "id" : "019c2baa-6f21-4735-a639-9f7022d8d2c5",
    "prId" : 55936,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55936#pullrequestreview-78040818",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad2c7f43-3e9b-4acc-b4df-7e97d7a370f8",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "was the comment out of date or why was text dropped?",
        "createdAt" : "2017-11-20T09:55:33Z",
        "updatedAt" : "2017-11-21T09:55:19Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "4cf07aa6-0c9e-48fd-a26c-079511595e86",
        "parentId" : "ad2c7f43-3e9b-4acc-b4df-7e97d7a370f8",
        "authorId" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "body" : "green line 102-105 && 107 is exactly same as previous except the indent format I changed each  `into` situation occupy one independent line.\r\n\r\n106 && 108 are two new lines I added, just some complementary informations of another `into` situation and schema kind calculated strategy, not sure those two lines are appropriate or not, if not I could delete those.",
        "createdAt" : "2017-11-21T09:17:03Z",
        "updatedAt" : "2017-11-21T09:55:19Z",
        "lastEditedBy" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "2044d56decab03f81eb701c92bff532abd3c0031",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +121,125 @@// If into is nil or data's gvk different from into's gvk, it will generate a new Object with ObjectCreater.New(gvk)\n// On success or most errors, the method will return the calculated schema kind.\n// The gvk calculate priority will be originalData > default gvk > into\nfunc (s *Serializer) Decode(originalData []byte, gvk *schema.GroupVersionKind, into runtime.Object) (runtime.Object, *schema.GroupVersionKind, error) {\n\tif versioned, ok := into.(*runtime.VersionedObjects); ok {"
  }
]