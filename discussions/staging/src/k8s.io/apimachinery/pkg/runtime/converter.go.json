[
  {
    "id" : "6d31bcdc-eb51-41b4-9158-24ed2e3d83c9",
    "prId" : 87908,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87908#pullrequestreview-354939166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "722ff1ef-7dac-4de2-8a8b-30d2aa9d4dce",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "if CanConvertToUnstructured returns false, shouldn't we return an error?",
        "createdAt" : "2020-02-07T03:40:06Z",
        "updatedAt" : "2020-02-08T00:22:30Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c6ab93d1-23ed-4765-a918-6e43743e3119",
        "parentId" : "722ff1ef-7dac-4de2-8a8b-30d2aa9d4dce",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "I misapplied this patch. It should fallback to code that performs unstructured conversion for non- `json.Marshal`/`UnstructuredConverter.ToUnstructured` types here. This is why most of the tests are failing on this PR. Fixed. ",
        "createdAt" : "2020-02-07T05:35:47Z",
        "updatedAt" : "2020-02-08T00:22:30Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9faaca64738a50455f38dd88845e8b4b5ca37e2",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +479,483 @@\t// Check if the object has a custom string converter.\n\tentry := value.TypeReflectEntryOf(sv.Type())\n\tif entry.CanConvertToUnstructured() {\n\t\tv, err := entry.ToUnstructured(sv)\n\t\tif err != nil {"
  },
  {
    "id" : "487f3e23-0325-4108-b560-b892523539bb",
    "prId" : 62981,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62981#pullrequestreview-117961701",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d96212c1-99db-44ed-b55b-81d69938bf59",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "is this an enumeration of \"types produced by json.Unmarshal() and also int64\" ?\r\n\r\nnit: put a `:` behind the previous sentence.",
        "createdAt" : "2018-05-07T11:18:32Z",
        "updatedAt" : "2018-05-07T11:18:32Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbef0f6f9dde2dc027b9ff26258e8840f3e7c2e4",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +439,443 @@// DeepCopyJSON deep copies the passed value, assuming it is a valid JSON representation i.e. only contains\n// types produced by json.Unmarshal() and also int64.\n// bool, int64, float64, string, []interface{}, map[string]interface{}, json.Number and nil\nfunc DeepCopyJSON(x map[string]interface{}) map[string]interface{} {\n\treturn DeepCopyJSONValue(x).(map[string]interface{})"
  }
]