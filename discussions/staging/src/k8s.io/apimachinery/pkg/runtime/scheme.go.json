[
  {
    "id" : "8dae3077-25ba-41c1-8b9a-e074444b756b",
    "prId" : 65904,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65904#pullrequestreview-135050220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae42b0e4-90a6-4554-b630-5fb3ca64a80d",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "given how much copy/pasta of packages there is, I think always capturing the call site would be useful",
        "createdAt" : "2018-07-06T13:42:11Z",
        "updatedAt" : "2018-07-06T18:08:19Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "636c278b-0c02-457b-8c45-ff6942671ee4",
        "parentId" : "ae42b0e4-90a6-4554-b630-5fb3ca64a80d",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> given how much copy/pasta of packages there is, I think always capturing the call site would be useful\r\n\r\nDone.  Such a lack of trust.",
        "createdAt" : "2018-07-06T15:05:12Z",
        "updatedAt" : "2018-07-06T18:08:19Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "79d04f670929eb5bb3d4c9078111dab46eb20bb4",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +81,85 @@\tobservedVersions []schema.GroupVersion\n\n\t// schemeName is the name of this scheme.  If you don't specify a name, the stack of the NewScheme caller will be used.\n\t// This is useful for error reporting to indicate the origin of the scheme.\n\tschemeName string"
  },
  {
    "id" : "63daac31-0b2d-4bc1-8989-cc35e00e02ba",
    "prId" : 59264,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59264#pullrequestreview-94197763",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2408915-200b-49be-a067-cae54b119452",
        "parentId" : null,
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "Is there a reason why it isn't necessary to also set the GroupVersionKind here? https://github.com/atlassian/kubernetes/blob/cd8fd313bb4323d58e2d0965aa161267e2c2cd46/staging/src/k8s.io/apimachinery/pkg/runtime/scheme.go#L452-L453",
        "createdAt" : "2018-02-05T21:32:23Z",
        "updatedAt" : "2018-02-06T02:06:56Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      },
      {
        "id" : "22357ec6-1ff0-4d1a-a49f-e6aff4eea481",
        "parentId" : "a2408915-200b-49be-a067-cae54b119452",
        "authorId" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "body" : "There is a test that verifies it all works as expected (internal to unstructured) and it does (I just verified). So it is not necessary. The GVK fields that are picked up by the unstructured converter are set here\r\nhttps://github.com/atlassian/kubernetes/blob/cd8fd313bb4323d58e2d0965aa161267e2c2cd46/staging/src/k8s.io/apimachinery/pkg/runtime/scheme.go#L576\r\n\r\nHowever I agree that it probably should not do that - if my reading of the code is correct, it sets the GVK for typed objects too, which it probably should not do.\r\n@deads2k maybe you could clarify? Also there is some code above that calls `copyAndSetTargetKind()` - why does it need to set the GVK?",
        "createdAt" : "2018-02-06T01:04:38Z",
        "updatedAt" : "2018-02-06T02:06:56Z",
        "lastEditedBy" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "tags" : [
        ]
      }
    ],
    "commit" : "03fc8dedb1c4c7cab1de4e331f7d74822bc89d3d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +432,436 @@\t\t\t}\n\t\t\tunstructuredOut.SetUnstructuredContent(content)\n\t\t\tunstructuredOut.GetObjectKind().SetGroupVersionKind(gvk)\n\t\t\treturn nil\n\t\t}"
  },
  {
    "id" : "a2c76867-fc86-469f-b4e8-9d13b7ff5efd",
    "prId" : 55650,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55650#pullrequestreview-77627108",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81e416b8-4e89-4c24-b54a-2cfb9a07d170",
        "parentId" : null,
        "authorId" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "body" : "@smarterclayton `UnstructuredContent()` may mutate the original object (both list and non-list) so this may lead to data races if `in` is shared among threads. See #55871 where I'm fixing this issue in another place. We need a thread safe read-only method to get unstructured content.\r\n/cc @sttts ",
        "createdAt" : "2017-11-18T21:43:09Z",
        "updatedAt" : "2018-03-03T11:51:15Z",
        "lastEditedBy" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8cc69cafe34ae516de3c100c5e5a6333a1be9a6",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +409,413 @@\t\t// converting unstructured input to an unstructured output is a straight copy - unstructured\n\t\t// is a \"smart holder\" and the contents are passed by reference between the two objects\n\t\tunstructuredOut.SetUnstructuredContent(unstructuredIn.UnstructuredContent())\n\t\treturn nil\n"
  },
  {
    "id" : "966fcd8e-09fd-4d11-9bf6-90a4ae36503a",
    "prId" : 46112,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46112#pullrequestreview-41506373",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17977211-031e-4f12-b9dc-d07548d99c7d",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "ah, I see.  You made it safe.",
        "createdAt" : "2017-06-01T13:22:01Z",
        "updatedAt" : "2017-06-01T13:22:02Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3b92a11f1e9b898265d50eba92727b8209e0bb2",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +152,156 @@\t\tgvk := version.WithKind(t.Name())\n\t\ts.unversionedTypes[t] = gvk\n\t\tif old, ok := s.unversionedKinds[gvk.Kind]; ok && t != old {\n\t\t\tpanic(fmt.Sprintf(\"%v.%v has already been registered as unversioned kind %q - kind name must be unique\", old.PkgPath(), old.Name(), gvk))\n\t\t}"
  },
  {
    "id" : "a3928a1d-6115-420c-8716-068e401e8f44",
    "prId" : 41788,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41788#pullrequestreview-22985875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c139609-c7d5-4f92-9618-57462fcc85d6",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "we're already panicing on invalid registrations... why not just panic in this case as well? plumbing/preserving stack traces seems really weird",
        "createdAt" : "2017-02-21T15:28:09Z",
        "updatedAt" : "2017-02-27T21:02:05Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "49e5a224-9fa0-4dbc-aff8-321af79e71ca",
        "parentId" : "0c139609-c7d5-4f92-9618-57462fcc85d6",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> we're already panicing on invalid registrations... why not just panic in this case as well? plumbing/preserving stack traces seems really weird\r\n\r\nTrying to chase them down and fix them.  Whacky things are currently possible/happening.",
        "createdAt" : "2017-02-21T15:29:37Z",
        "updatedAt" : "2017-02-27T21:02:05Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "ba7ee781-2226-439f-9d7f-7ef3bd00665e",
        "parentId" : "0c139609-c7d5-4f92-9618-57462fcc85d6",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Preserving stack traces is only for debugging, won't be merged.\r\n\r\nAm not so sure about panicking on duplicated registration. We might have situation where it's tricky to avoid repeated registration, compare https://github.com/kubernetes/kubernetes/pull/41757/files#diff-a32a22caf2988f380979f0fefbcdce13R28.",
        "createdAt" : "2017-02-21T15:32:12Z",
        "updatedAt" : "2017-02-27T21:02:05Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "bcd52742-8114-4fe9-90da-24f3fd784a7e",
        "parentId" : "0c139609-c7d5-4f92-9618-57462fcc85d6",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> Preserving stack traces is only for debugging, won't be merged.\r\n\r\nah, ok\r\n\r\n> Am not so sure about panicking on duplicated registration. We might have situation where it's tricky to avoid repeated registration\r\n\r\ntolerating multiple identical registrations to make it idempotent seems fine",
        "createdAt" : "2017-02-21T15:35:14Z",
        "updatedAt" : "2017-02-27T21:02:05Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f11d76ae44f60b2a515096f6d2f50646a8bfc711",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +191,195 @@\t}\n\n\tif oldT, found := s.gvkToType[gvk]; found && oldT != t {\n\t\tpanic(fmt.Sprintf(\"Double registration of different types for %v: old=%v.%v, new=%v.%v\", gvk, oldT.PkgPath(), oldT.Name(), t.PkgPath(), t.Name()))\n\t}"
  }
]