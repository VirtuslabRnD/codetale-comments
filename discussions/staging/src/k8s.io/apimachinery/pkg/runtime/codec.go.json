[
  {
    "id" : "5c84d9b0-556e-4ebd-b92c-f9b31db3dd45",
    "prId" : 73482,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73482#pullrequestreview-198249554",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "336ac979-0a81-48bc-b2ad-8f208d004ad5",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Can we convert these examples into a unit test?",
        "createdAt" : "2019-01-29T21:45:21Z",
        "updatedAt" : "2019-01-30T18:58:54Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "ef1dd404-d216-4ced-af6a-61b4a0e51ff0",
        "parentId" : "336ac979-0a81-48bc-b2ad-8f208d004ad5",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "done",
        "createdAt" : "2019-01-30T18:58:48Z",
        "updatedAt" : "2019-01-30T18:58:54Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "131dad6ee1c0854efd3e72f907b8c1baac9d58e2",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +299,303 @@// Incoming kinds that match the provided groupKinds are preferred.\n// Kind may be empty in the provided group kind, in which case any kind will match.\n// Examples:\n//   gv=mygroup/__internal, groupKinds=mygroup/Foo, anothergroup/Bar\n//   KindForGroupVersionKinds(yetanother/v1/Baz, anothergroup/v1/Bar) -> mygroup/__internal/Bar (matched preferred group/kind)"
  },
  {
    "id" : "9f0cc6dd-d8ed-47d1-93ef-9386793289a6",
    "prId" : 73482,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73482#pullrequestreview-197821090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78872a43-e4c4-4b04-ba9d-d8d14fae5628",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "A more targeted way to solve the issue is explicitly pass the cohabitating groups as the input when creating the mutleGroupVersioner. We can plumb the cohabitating groups when creating the storage code config [here](https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apiserver/pkg/server/storage/storage_factory.go#L263-L278).\r\n\r\nProbably the benefit isn't worth the complexity. After all, if the CoercingMultiGroupVersioner returns an invalid gvk, the codec will just fail later.",
        "createdAt" : "2019-01-29T22:20:26Z",
        "updatedAt" : "2019-01-30T18:58:54Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "2a8e0d56-b2d7-44c6-afab-1b26bd7757fc",
        "parentId" : "78872a43-e4c4-4b04-ba9d-d8d14fae5628",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> A more targeted way to solve the issue is explicitly pass the cohabitating groups\r\n\r\nthat was what I started with, but ended up here\r\n\r\n> After all, if the CoercingMultiGroupVersioner returns an invalid gvk, the codec will just fail later.\r\n\r\nExactly, I actually want to give every bit of data we get back a shot at getting converted into the target version... failing early seemed artificially limiting and I couldn't think of a good reason to do that.",
        "createdAt" : "2019-01-29T22:36:26Z",
        "updatedAt" : "2019-01-30T18:58:54Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "131dad6ee1c0854efd3e72f907b8c1baac9d58e2",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +308,312 @@//   gv=mygroup/__internal, groupKinds=mygroup, anothergroup\n//   KindForGroupVersionKinds(yetanother/v1/Baz, yetanother/v1/Bar) -> mygroup/__internal/Baz (no preferred group/kind match, uses first kind in list)\nfunc NewCoercingMultiGroupVersioner(gv schema.GroupVersion, groupKinds ...schema.GroupKind) GroupVersioner {\n\treturn multiGroupVersioner{target: gv, acceptedGroupKinds: groupKinds, coerce: true}\n}"
  }
]