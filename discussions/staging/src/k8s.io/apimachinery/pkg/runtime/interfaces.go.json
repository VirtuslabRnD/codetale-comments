[
  {
    "id" : "52c79f37-a788-407b-afba-bfb45e6f40dc",
    "prId" : 84692,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84692#pullrequestreview-314641610",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c976376-bfce-4bf2-8b1b-59b000edc392",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "is contentType the value of the `Content-Type` header, or a single token (e.g. `application/json`)? If the latter, is it expected to be simple (`application/json`) or can it be complex (`application/json;charset=utf-8`)? also need to document the params arg.\r\n\r\nif the specified content type isn't supported, is there a standard error that is returned (as opposed to \"supported content-type, but errored constructing the encoder\")?",
        "createdAt" : "2019-11-08T04:17:32Z",
        "updatedAt" : "2019-11-11T02:30:50Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "feced024-325a-4469-9e2f-340e7406fdfd",
        "parentId" : "5c976376-bfce-4bf2-8b1b-59b000edc392",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Should be simple (params is the charset).  That's technically the naming that the RFC uses, will clarify.\r\n\r\nIt should return a negotiation (content type not acceptable) error.  Will clarify.",
        "createdAt" : "2019-11-10T18:47:50Z",
        "updatedAt" : "2019-11-11T02:30:50Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "8c548bc8-5d54-4b0a-a8d6-b2e93c7b2f1b",
        "parentId" : "5c976376-bfce-4bf2-8b1b-59b000edc392",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "That's handled in `NegotiateOutputMediaType`.",
        "createdAt" : "2019-11-10T19:05:39Z",
        "updatedAt" : "2019-11-11T02:30:50Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "87a2a0e4-c4b8-489c-bbf5-b0e209c2cf46",
        "parentId" : "5c976376-bfce-4bf2-8b1b-59b000edc392",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Added an Error type",
        "createdAt" : "2019-11-10T19:07:32Z",
        "updatedAt" : "2019-11-11T02:30:50Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "39ac70df-bfb0-4ae3-90a3-04df27f4ec80",
        "parentId" : "5c976376-bfce-4bf2-8b1b-59b000edc392",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> optional mediaType parameters\r\n\r\ndoes that mean all parameters must be considered optional? how does that reconcile with our use of them to describe alternate GVKs?",
        "createdAt" : "2019-11-10T20:50:19Z",
        "updatedAt" : "2019-11-11T02:30:50Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "5215116a-d70b-402d-a229-720078faeeee",
        "parentId" : "5c976376-bfce-4bf2-8b1b-59b000edc392",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "would be good to describe supported params or behavior if unknown params are passed",
        "createdAt" : "2019-11-10T20:50:42Z",
        "updatedAt" : "2019-11-11T02:30:50Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ad5365ce-e782-46e0-8960-67965b752d6a",
        "parentId" : "5c976376-bfce-4bf2-8b1b-59b000edc392",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Servers don't return media type parameters today (will double check).  It's likely if they did other clients would break.  I think the best we can do is to say \"it is up to the client negotiator whether to treat these as optional or required, but current implementations consider them optional and modifiers to the base content type.",
        "createdAt" : "2019-11-10T21:02:11Z",
        "updatedAt" : "2019-11-11T02:30:50Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "20734a01-4c08-44c3-9452-e349f1f158d6",
        "parentId" : "5c976376-bfce-4bf2-8b1b-59b000edc392",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "not super satisfying, but after digging through I agree it's not worse than today, and it's not clear we could safely start returning parameters from the server",
        "createdAt" : "2019-11-10T21:15:55Z",
        "updatedAt" : "2019-11-11T02:30:50Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b780c64b89606f4e6b21f48fb9c305d5998b9e5",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +164,168 @@\t// a NegotiateError will be returned. The current client implementations consider params to be\n\t// optional modifiers to the contentType and will ignore unrecognized parameters.\n\tEncoder(contentType string, params map[string]string) (Encoder, error)\n\t// Decoder returns the appropriate decoder for the provided contentType (e.g. application/json)\n\t// and any optional mediaType parameters (e.g. pretty=1), or an error. If no serializer is found"
  },
  {
    "id" : "b35a8db6-b71e-4748-a7da-1c3cd0d5201f",
    "prId" : 81914,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81914#pullrequestreview-279845477",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6688daac-54a5-4682-8841-b01bb6c9bb5a",
        "parentId" : null,
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Since this is the runtime package, call this `EncoderIdentifier`?",
        "createdAt" : "2019-08-26T17:31:00Z",
        "updatedAt" : "2019-09-30T08:49:44Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "fded50f6-98ce-483d-9fc6-37e6c651dd5d",
        "parentId" : "6688daac-54a5-4682-8841-b01bb6c9bb5a",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I think the concept of identifier is generic enough and can be used for many different thing in the future.",
        "createdAt" : "2019-08-26T20:18:49Z",
        "updatedAt" : "2019-09-30T08:49:44Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "6bf912af-e3fa-456d-8f7e-fd4acef6180c",
        "parentId" : "6688daac-54a5-4682-8841-b01bb6c9bb5a",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Too generic thought? I can see a lot of value to providing a type for a class of identifiers that have some set or properties (e.g. URIs). Or, in this use case, a type that makes it clear that the string conforms to the format that is being introduced for encoder caching.",
        "createdAt" : "2019-08-26T21:42:02Z",
        "updatedAt" : "2019-09-30T08:49:44Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "25a728ae5eb0ae067d21679fad915c0555242470",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +44,48 @@}\n\n// Identifier represents an identifier.\n// Identitier of two different objects should be equal if and only if for every\n// input the output they produce is exactly the same."
  },
  {
    "id" : "ba01bd80-16a7-48d9-959a-596b324e2b37",
    "prId" : 81914,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81914#pullrequestreview-279845477",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b51be3b-7c85-47b2-98fa-0c56fbc722f3",
        "parentId" : null,
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Just pass in an `Encoder` and a `io.Writer` here? That way we can consolidate the idempotency rules about the encoder to just the `Encoder` godoc?",
        "createdAt" : "2019-08-26T17:35:29Z",
        "updatedAt" : "2019-09-30T08:49:44Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "43ad242b-9221-42cc-96b6-f83e0ea8963e",
        "parentId" : "6b51be3b-7c85-47b2-98fa-0c56fbc722f3",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Unfortunately this won't work that easily, because we need to avoid infinite recursion. \r\nSo we need to do things like this:\r\nhttps://github.com/kubernetes/kubernetes/pull/81914/files#diff-f216f544515d2fd05d66d92c5f95a248R305",
        "createdAt" : "2019-08-26T20:33:29Z",
        "updatedAt" : "2019-09-30T08:49:44Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "abd83038-78d6-4881-982c-ebe12bd800e4",
        "parentId" : "6b51be3b-7c85-47b2-98fa-0c56fbc722f3",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Gotcha. Could we define a type for `encode func(Object, io.Writer) error` since we use the function signature in multiple places?",
        "createdAt" : "2019-08-26T21:43:37Z",
        "updatedAt" : "2019-09-30T08:49:44Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "25a728ae5eb0ae067d21679fad915c0555242470",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +290,294 @@\t// CacheEncode assumes that for two different calls with the same <id>,\n\t// <encode> function will also be the same.\n\tCacheEncode(id Identifier, encode func(Object, io.Writer) error, w io.Writer) error\n\t// GetObject returns a deep-copy of an object to be encoded - the caller of\n\t// GetObject() is the owner of returned object. The reason for making a copy"
  },
  {
    "id" : "8fd67c7c-d194-4d7d-b5f7-4b0c09c7b10a",
    "prId" : 81914,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81914#pullrequestreview-279827982",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7dceac10-0319-4e69-9590-f02a01570147",
        "parentId" : null,
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Is the usage of this type limited to caching, or can it be named  `EncodableObject`?",
        "createdAt" : "2019-08-26T19:48:03Z",
        "updatedAt" : "2019-09-30T08:49:44Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "7e69e107-9df1-4b74-a9a6-33e28182faca",
        "parentId" : "7dceac10-0319-4e69-9590-f02a01570147",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Don't have strong preference. @liggitt ?",
        "createdAt" : "2019-08-26T20:20:12Z",
        "updatedAt" : "2019-09-30T08:49:44Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "cf7907f8-75a7-4a43-a586-2310fd1e8c13",
        "parentId" : "7dceac10-0319-4e69-9590-f02a01570147",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I meant I don't have strong preference for the name. Although I don't see any other usecase immediately, potentially there exist more.",
        "createdAt" : "2019-08-26T20:48:04Z",
        "updatedAt" : "2019-09-30T08:49:44Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "25a728ae5eb0ae067d21679fad915c0555242470",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +282,286 @@// CacheableObject allows an object to cache its different serializations\n// to avoid performing the same serialization multiple times.\ntype CacheableObject interface {\n\t// CacheEncode writes an object to a stream. The <encode> function will\n\t// be used in case of cache miss. The <encode> function takes ownership"
  },
  {
    "id" : "f79362a6-cc29-4cc3-8102-4d797ec87721",
    "prId" : 81914,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81914#pullrequestreview-279821634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68620785-8a5c-4987-b9eb-90e5e00029da",
        "parentId" : null,
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Just `Encode`?",
        "createdAt" : "2019-08-26T19:48:30Z",
        "updatedAt" : "2019-09-30T08:49:44Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "278967de-df19-49cd-b068-78c78af46cae",
        "parentId" : "68620785-8a5c-4987-b9eb-90e5e00029da",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Also no strong preference. @liggitt ?",
        "createdAt" : "2019-08-26T20:33:46Z",
        "updatedAt" : "2019-09-30T08:49:44Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "25a728ae5eb0ae067d21679fad915c0555242470",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +283,287 @@// to avoid performing the same serialization multiple times.\ntype CacheableObject interface {\n\t// CacheEncode writes an object to a stream. The <encode> function will\n\t// be used in case of cache miss. The <encode> function takes ownership\n\t// of the object."
  },
  {
    "id" : "f945b942-221c-4383-9c11-fc90578633ee",
    "prId" : 81914,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81914#pullrequestreview-279813725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f47ef2bd-4b4b-436a-ba78-8836d41be2f2",
        "parentId" : null,
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Is this function needed? Would it be cleaner for CacheableObject to embed runtime.Object?",
        "createdAt" : "2019-08-26T19:53:02Z",
        "updatedAt" : "2019-09-30T08:49:44Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "63a471cd-269b-4265-b707-c597ad7f0fef",
        "parentId" : "f47ef2bd-4b4b-436a-ba78-8836d41be2f2",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "It is needed for now (because of https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/response.go#L40\r\n)\r\n\r\nOnce we migrate that to be proper Encoder interface and we will get rid of selflink (which we are deprecating in 1.16) we should be able to get rid of it.",
        "createdAt" : "2019-08-26T20:22:18Z",
        "updatedAt" : "2019-09-30T08:49:44Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "25a728ae5eb0ae067d21679fad915c0555242470",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +298,302 @@\t// to be passed to <encode> function in CacheEncode method.\n\t// If CacheableObject is a wrapper, the copy of wrapped object should be returned.\n\tGetObject() Object\n}\n"
  },
  {
    "id" : "b14a7f67-62e1-420f-bf69-a3a6060dfa15",
    "prId" : 78135,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78135#pullrequestreview-242300688",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76059a28-72c2-442f-b13a-97317c2a924d",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "resource is part of the returned slice if the subresource in defined for that resource.",
        "createdAt" : "2019-05-27T14:22:09Z",
        "updatedAt" : "2019-05-28T18:30:39Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c194ea615459ddab09938528eca3a3a228da8a3",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +216,220 @@\t// If subresource is specified, only equivalent resources which also have the same subresource are included.\n\t// The specified resource can be included in the returned list.\n\tEquivalentResourcesFor(resource schema.GroupVersionResource, subresource string) []schema.GroupVersionResource\n\t// KindFor returns the kind expected by the specified resource[/subresource].\n\t// A zero value is returned if the kind is unknown."
  }
]