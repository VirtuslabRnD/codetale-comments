[
  {
    "id" : "e66886c7-7610-4984-956c-7220812e314f",
    "prId" : 51526,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51526#pullrequestreview-60871915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7f81de1-4e4d-4664-ba8d-e42075f395df",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "why not return the error?",
        "createdAt" : "2017-09-06T09:19:30Z",
        "updatedAt" : "2017-09-11T00:18:35Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "6547991f-5ad0-41d9-87f5-9d1338d6aa87",
        "parentId" : "c7f81de1-4e4d-4664-ba8d-e42075f395df",
        "authorId" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "body" : "It is an assertion, so IMHO a panic is the most appropriate thing to do. See #49369.\r\nI can change it to return this error, I don't mind.",
        "createdAt" : "2017-09-06T10:19:52Z",
        "updatedAt" : "2017-09-11T00:18:35Z",
        "lastEditedBy" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "tags" : [
        ]
      },
      {
        "id" : "e6dea389-a676-4c62-a925-a99de36bdea4",
        "parentId" : "c7f81de1-4e4d-4664-ba8d-e42075f395df",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "This whole if-clause looks suspicious. I guess it is there to support other types which happen to create the same JSON output. I am fine with leaving it is for now. It would be worth a follow-up to try to understand this code better.",
        "createdAt" : "2017-09-06T10:51:31Z",
        "updatedAt" : "2017-09-11T00:18:35Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "51e653dc68e47584ab571fc214a7aa5950918831",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +412,416 @@\t\tnewErr := toUnstructuredViaJSON(obj, &newUnstr)\n\t\tif (err != nil) != (newErr != nil) {\n\t\t\tglog.Fatalf(\"ToUnstructured unexpected error for %v: error: %v; newErr: %v\", obj, err, newErr)\n\t\t}\n\t\tif err == nil && !apiequality.Semantic.DeepEqual(u, newUnstr) {"
  },
  {
    "id" : "1eb10ba9-50ee-414c-b944-302b2eb73c9b",
    "prId" : 51526,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51526#pullrequestreview-60907592",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19552bb3-479d-4afb-a67b-ce4b50b6c34a",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : ":+1:",
        "createdAt" : "2017-09-06T13:23:43Z",
        "updatedAt" : "2017-09-11T00:18:35Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "51e653dc68e47584ab571fc214a7aa5950918831",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +426,430 @@// DeepCopyJSON deep copies the passed value, assuming it is a valid JSON representation i.e. only contains\n// types produced by json.Unmarshal().\nfunc DeepCopyJSON(x map[string]interface{}) map[string]interface{} {\n\treturn deepCopyJSON(x).(map[string]interface{})\n}"
  },
  {
    "id" : "ca81a2a9-ab54-4533-a453-1e37ab78bdaa",
    "prId" : 48060,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48060#pullrequestreview-47096338",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d25cf4cf-0600-42b9-af29-4e513eb9cc98",
        "parentId" : null,
        "authorId" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "body" : "A little confuse here, so actually this function doesn't covert an interface obj to map[string]interface{} ? if so why should we return an empty allocated map, I think that also can cause confusing ? ",
        "createdAt" : "2017-06-27T10:08:33Z",
        "updatedAt" : "2017-06-29T23:36:27Z",
        "lastEditedBy" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "tags" : [
        ]
      },
      {
        "id" : "08cfe246-4ab4-478b-9d4f-bdebb8a97386",
        "parentId" : "d25cf4cf-0600-42b9-af29-4e513eb9cc98",
        "authorId" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "body" : "I don't understand the question, sorry. Basically the only change I made is I pulled in the map allocation into the function and made it return that map. No functional changes. This function \"api\" change makes it impossible to misuse the function though.",
        "createdAt" : "2017-06-29T11:33:39Z",
        "updatedAt" : "2017-06-29T23:36:27Z",
        "lastEditedBy" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc1ee493a29251492403e4282b5df3e897de2214",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +389,393 @@}\n\nfunc (c *converterImpl) ToUnstructured(obj interface{}) (map[string]interface{}, error) {\n\tt := reflect.TypeOf(obj)\n\tvalue := reflect.ValueOf(obj)"
  },
  {
    "id" : "fa63c9a5-1729-4e27-a064-04521c6bb2ab",
    "prId" : 40522,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40522#pullrequestreview-23155768",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f3ab3a3-22d6-4ae4-a0d0-0e682f0a427f",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Add a test case for this",
        "createdAt" : "2017-02-21T21:33:55Z",
        "updatedAt" : "2017-02-23T08:09:09Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "a21bda1d-10b4-4e9b-91c2-0d88ddb44034",
        "parentId" : "8f3ab3a3-22d6-4ae4-a0d0-0e682f0a427f",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Done (unfortunately I should have done it explicitly, to force the map[string]interface{] to really contain float).",
        "createdAt" : "2017-02-22T08:58:27Z",
        "updatedAt" : "2017-02-23T08:09:09Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e34e1abe3345939268c1fdbc05e2d933396ab2fe",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +176,180 @@\t\t\t\t\treturn nil\n\t\t\t\t}\n\t\t\t\tif sv.Float() == math.Trunc(sv.Float()) {\n\t\t\t\t\tdv.Set(sv.Convert(dt))\n\t\t\t\t\treturn nil"
  },
  {
    "id" : "06e3eace-8a52-4693-9c80-2eb0c758070a",
    "prId" : 36721,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36721#pullrequestreview-40436162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "763bcc69-0817-40be-b939-88e88d724f56",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I hate to see us remove type safety, is this absolutely necessary?",
        "createdAt" : "2017-05-25T22:46:25Z",
        "updatedAt" : "2017-06-03T02:09:49Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "ff59a81a-eb35-406a-b8b8-f939fe24ac17",
        "parentId" : "763bcc69-0817-40be-b939-88e88d724f56",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "There was zero type safety in this code before - runtime.Object isn't type safety, and this code doesn't know anything about runtime objects.",
        "createdAt" : "2017-05-26T02:50:47Z",
        "updatedAt" : "2017-06-03T02:09:49Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "b993f7d303aa72961d6b0a32a42e7fcc5cb26190",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +37,41 @@)\n\n// Converter is an interface for converting between interface{}\n// and map[string]interface representation.\ntype Converter interface {"
  }
]