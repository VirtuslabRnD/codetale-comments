[
  {
    "id" : "214bab9a-e01c-451f-bfc1-67a4b9521875",
    "prId" : 39418,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39418#pullrequestreview-18939290",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22d654c8-1fa9-41cb-aa5f-f8a99ecbb9ae",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Test floating point numbers, empty array, array with nil, empty map, nil map, array of interface{} with nils, array of interface with empty arrays, array of booleans, array of numbers, map of numbers.  Would like close to 100% testing on possible types.",
        "createdAt" : "2017-01-26T16:00:03Z",
        "updatedAt" : "2017-02-10T09:54:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "d67b09f5-4bb8-4a1c-a4d8-db89e73d9c0c",
        "parentId" : "22d654c8-1fa9-41cb-aa5f-f8a99ecbb9ae",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Added few more - didin't add the two:\r\n- array of interface{} with nils\r\n- array of interface with empty arrays,\r\n\r\nThose currently do not work (and it was pretty explicit), because the the conversion to from \"interface{}\" fields is not supported. However, we are not using it anywhere in API and it doesn't seem to be a problem...",
        "createdAt" : "2017-01-26T16:28:03Z",
        "updatedAt" : "2017-02-10T09:54:23Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "06e19a50-8dea-482b-8838-a11afbee4a05",
        "parentId" : "22d654c8-1fa9-41cb-aa5f-f8a99ecbb9ae",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "we allow nulls in certain arrays.  So I'm fairly certain it's possible to get an object that generates them.  So I would expect unstructured To -> object to have to support them.  I don't care if it's in the round tripper, but there needs to be a test for those two because it is possible for patch or location to generate that.",
        "createdAt" : "2017-01-27T15:44:53Z",
        "updatedAt" : "2017-02-10T09:54:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "0f30dbf8-8d38-4c50-81d8-1db0f4a8dca1",
        "parentId" : "22d654c8-1fa9-41cb-aa5f-f8a99ecbb9ae",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "So for instance, if a user sends a patch that contains `Containers: [nil, nil, nil]`, unstructured From will get called on `[]interface{nil, nil, nil}`",
        "createdAt" : "2017-01-27T17:40:06Z",
        "updatedAt" : "2017-02-10T09:54:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "4289fb3c-d0c2-4af8-b9f5-04a5fca644da",
        "parentId" : "22d654c8-1fa9-41cb-aa5f-f8a99ecbb9ae",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "@smarterclayton - I don't understand. Isn't the \"I: \" field below (in this and next case) testing what you wanted?",
        "createdAt" : "2017-01-27T21:51:27Z",
        "updatedAt" : "2017-02-10T09:54:23Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dd0f10dc4c4885d61f66515a34592a4d68a2c28",
    "line" : 166,
    "diffHunk" : "@@ -1,1 +164,168 @@\t\t\tobj: &C{\n\t\t\t\tA: []A{\n\t\t\t\t\t{\n\t\t\t\t\t\tA: 1,\n\t\t\t\t\t\tB: \"11\","
  },
  {
    "id" : "6cf1216a-dafc-41d5-acc5-93e5b51a6315",
    "prId" : 39418,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39418#pullrequestreview-19039090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aee6e0cd-72c0-48e4-888b-1cee3acfbfb5",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "You also need a one way test for unstructuredTo that takes these values (round trip only addresses half of the problem).  You need \"unrecognized interfaces -> structs\" as well for this test to be complete.  I.e. create TestUnstructuredTo and verify the other types I described (anything that could be in valid JSON to map[string]interface{} to a struct).  And that test should do map[string]interface{} -> unstructuredTo -> struct and also map[string]interface{} -> JSON.marshal -> unmarshal struct and compare that they are equal.  You'll want to also verify that you handle mixed mode errors the same (i.e. [3.0, \"3.0\", nil] should behave the same in unstructuredTo that it does in JSON).",
        "createdAt" : "2017-01-30T04:00:08Z",
        "updatedAt" : "2017-02-10T09:54:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "60cb6d8d-3178-4cfe-8f19-0fe312a28ccd",
        "parentId" : "aee6e0cd-72c0-48e4-888b-1cee3acfbfb5",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "OK - I added some more tests (hopefully I understood you correctly in what you wanted).\r\n\r\nPTAL",
        "createdAt" : "2017-01-30T09:17:33Z",
        "updatedAt" : "2017-02-10T09:54:23Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dd0f10dc4c4885d61f66515a34592a4d68a2c28",
    "line" : 198,
    "diffHunk" : "@@ -1,1 +196,200 @@\t\t\t\tG: []int{1, 2, 5},\n\t\t\t\tH: 3.3,\n\t\t\t\tI: []interface{}{nil, nil, nil},\n\t\t\t},\n\t\t},"
  },
  {
    "id" : "8aa8815b-e0fe-47e0-b02e-24b82c88760f",
    "prId" : 39418,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39418#pullrequestreview-20038000",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d64b298-4433-431c-9f47-70c0b881ec73",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Add int, float, []string, []int, and []bool, and then be sure to try to send mismatching values to each (int, float, bool -> string, []int -> []string, int -> []string, int -> []int, etc).  ",
        "createdAt" : "2017-02-02T15:30:15Z",
        "updatedAt" : "2017-02-10T09:54:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "bb0f6ed8-e217-4095-bb41-e57fb08543f3",
        "parentId" : "3d64b298-4433-431c-9f47-70c0b881ec73",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I added ~20 more cases, and it seems 3 of them are not passing. I will try to debug them when I have some cycles.",
        "createdAt" : "2017-02-03T15:08:17Z",
        "updatedAt" : "2017-02-10T09:54:23Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "22fea182-0351-4d11-82ed-a24959a9f389",
        "parentId" : "3d64b298-4433-431c-9f47-70c0b881ec73",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "@smarterclayton - I just checked it, and it seems some of those doesn't have any chance to work.\r\nBasically, if the input is incorrect, in some cases just doing:\r\n1. string -> json.Unmarshal - > object\r\nvs\r\n2. string -> json.Unmarshal -> map[string]interface{} ->json.Marshal -> []byte -> json.Unmarshal -> object\r\n\r\nReturns different results (i.e. the first one is error, the latter is not).\r\n\r\nThat said, since the \"FromUnstructured\" works on data from 2nd scenario, it doesn't have a way to error (so we cannot expect it to return the error).\r\n\r\nThough, there are still some differences, which I will debug further next week.",
        "createdAt" : "2017-02-03T15:40:34Z",
        "updatedAt" : "2017-02-10T09:54:23Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "8d75eac1-12e4-4c03-b049-4e6d1f530724",
        "parentId" : "3d64b298-4433-431c-9f47-70c0b881ec73",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "@smarterclayton - WDYT?",
        "createdAt" : "2017-02-03T15:40:43Z",
        "updatedAt" : "2017-02-10T09:54:23Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dd0f10dc4c4885d61f66515a34592a4d68a2c28",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +63,67 @@\ntype F struct {\n\tA string `json:\"fa\"`\n\tB map[string]string `json:\"fb\"`\n\tC []A `json:\"fc\"`"
  }
]