[
  {
    "id" : "ff21f9e7-4d83-4ec8-a1d4-01620d14732e",
    "prId" : 43346,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43346#pullrequestreview-30153293",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aeb83443-e909-4c1e-8504-e8fde3d9d7f7",
        "parentId" : null,
        "authorId" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "body" : "I implemented this and then realized `json` package must be doing the same check. And it does https://github.com/golang/go/blob/9073af247d602dff4633710adf90c8b3c1869c45/src/encoding/json/encode.go#L392",
        "createdAt" : "2017-03-31T01:57:41Z",
        "updatedAt" : "2017-08-30T06:18:23Z",
        "lastEditedBy" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "tags" : [
        ]
      }
    ],
    "commit" : "0fe4911744890fab77e82664816fc55a72f5b383",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +91,95 @@\tmarshaler, ok := value.Interface().(Marshaler)\n\tif !ok {\n\t\tif !isPointerKind(value.Kind()) && value.CanAddr() {\n\t\t\tmarshaler, ok = value.Addr().Interface().(Marshaler)\n\t\t\tif !ok {"
  },
  {
    "id" : "76079f37-aa3f-4242-83ff-af8b83da9189",
    "prId" : 43346,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43346#pullrequestreview-59551502",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42073317-8483-4a1e-8f0e-e1d5e79548b3",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Previously, a call to `marshal(metav1.Now())` would marshal correctly.  Wouldn't the `CanAddr` fail now?  Worth adding a test since I'm sure someone else will have the question.",
        "createdAt" : "2017-05-12T12:01:56Z",
        "updatedAt" : "2017-08-30T06:18:23Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "505ee229-0d1c-473d-bc9a-3b0736b6d805",
        "parentId" : "42073317-8483-4a1e-8f0e-e1d5e79548b3",
        "authorId" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "body" : "No, the case where `Marshaler` interface is implemented by a type with a non-pointer receiver of the method is handled on line 91. Added a test - please correct me if I misunderstood you and this is not the test you meant.",
        "createdAt" : "2017-05-12T12:43:55Z",
        "updatedAt" : "2017-08-30T06:18:23Z",
        "lastEditedBy" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "tags" : [
        ]
      },
      {
        "id" : "71df571f-fb6f-4ac1-90c3-12c36f6459f4",
        "parentId" : "42073317-8483-4a1e-8f0e-e1d5e79548b3",
        "authorId" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "body" : "@deads2k [like this](https://play.golang.org/p/kVXnIk2AIg)? If only the pointer type implements `Marshaler`, passing a value type to `customMarshalValue()` causes `CanAddr` to return false.\r\n\r\n```\r\nCanAddr reports whether the value's address can be obtained with Addr. Such\r\nvalues are called addressable. A value is addressable if it is an element of a\r\nslice, an element of an addressable array, a field of an addressable struct, or\r\nthe result of dereferencing a pointer. If CanAddr returns false, calling Addr\r\nwill panic.\r\n```\r\n",
        "createdAt" : "2017-08-24T15:16:30Z",
        "updatedAt" : "2017-08-30T06:18:23Z",
        "lastEditedBy" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "tags" : [
        ]
      },
      {
        "id" : "4da92e42-1a3e-4fc3-8dad-70693701cdb2",
        "parentId" : "42073317-8483-4a1e-8f0e-e1d5e79548b3",
        "authorId" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "body" : "@ash2k I'm not sure we all came to a mutual understanding on this point. Do you guys agree that this is true:\r\n\r\n>If only the pointer type implements Marshaler, passing a value type to customMarshalValue() causes CanAddr to return false.\r\n\r\nAnd if so, do you agree that's a change from previous behavior, e.g.:\r\n\r\n>Previously, a call to marshal(metav1.Now()) would marshal correctly. \r\n\r\nAnd if that's also true, is all that okay?",
        "createdAt" : "2017-08-29T14:11:45Z",
        "updatedAt" : "2017-08-30T06:18:23Z",
        "lastEditedBy" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "tags" : [
        ]
      },
      {
        "id" : "1bfc8e85-5b56-4ea1-9c61-1dd2622b2a60",
        "parentId" : "42073317-8483-4a1e-8f0e-e1d5e79548b3",
        "authorId" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "body" : "@ironcladlou @deads2k What `marshal()` are we talking about? \r\n\r\n`MarshalQueryParameter()` is a method on `metav1.Time`. It is only ever called via reflection from [`customMarshalValue()`](https://github.com/atlassian/kubernetes/blob/6ec536513a4c85af08f43def4bea1fdddde9f215/staging/src/k8s.io/apimachinery/pkg/conversion/queryparams/convert.go#L85) which is only ever called from [`convertStruct()`](https://github.com/atlassian/kubernetes/blob/6ec536513a4c85af08f43def4bea1fdddde9f215/staging/src/k8s.io/apimachinery/pkg/conversion/queryparams/convert.go#L162) which is only called for structs. So `metav1.Time` is always a field in a struct and it should always be possible to take the address of a field.\r\n\r\nHowever I agree that if there was a method `marshal()` that tried to call `MarshalQueryParameter()` directly on a value (via reflection) and that value was `metav1.Time` then yes, it would be a change in behavior because it will not work (because of a pointer receiver). However I think this is a reasonable requirement to ask to pass a pointer to a value not just the value. That is how `encoding/json` package works: https://play.golang.org/p/jKkAXSJ9Ul\r\n\r\nIn the example above `MarshalJSON()` method is not picked up by `encoding/json` for the value/value case.\r\n\r\np.s. I was confused and now I understand that initial comment.",
        "createdAt" : "2017-08-30T01:00:50Z",
        "updatedAt" : "2017-08-30T06:18:23Z",
        "lastEditedBy" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "tags" : [
        ]
      },
      {
        "id" : "9c84a0d2-22e5-4335-b197-f0b29a7158a4",
        "parentId" : "42073317-8483-4a1e-8f0e-e1d5e79548b3",
        "authorId" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "body" : "I'm actually happy to remove the change to the method receiver. The original issue has been fixed in #45167 anyway and I've audited all other places where `MarshalQueryParameter()` is called and they are not using a pointer `Time`.\r\nI still believe the fix for reflection check should be merged though. WDYT?",
        "createdAt" : "2017-08-30T06:10:19Z",
        "updatedAt" : "2017-08-30T06:18:23Z",
        "lastEditedBy" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "tags" : [
        ]
      },
      {
        "id" : "bdbd7278-90c1-4953-a15e-21e900ffcc99",
        "parentId" : "42073317-8483-4a1e-8f0e-e1d5e79548b3",
        "authorId" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "body" : "^ done.",
        "createdAt" : "2017-08-30T06:18:29Z",
        "updatedAt" : "2017-08-30T06:18:29Z",
        "lastEditedBy" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "tags" : [
        ]
      },
      {
        "id" : "245e8ac7-30e8-48dc-ac84-abcf062eabff",
        "parentId" : "42073317-8483-4a1e-8f0e-e1d5e79548b3",
        "authorId" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "body" : "Thanks for the additional explanation... I agree that requiring a pointer argument is a reasonable requirement, and your detail about field addressability makes sense. I *think* everything makes sense now and looks good, and wish somebody else would chime in, but LGTM. :grin:",
        "createdAt" : "2017-08-30T13:22:33Z",
        "updatedAt" : "2017-08-30T13:22:34Z",
        "lastEditedBy" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "tags" : [
        ]
      }
    ],
    "commit" : "0fe4911744890fab77e82664816fc55a72f5b383",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +91,95 @@\tmarshaler, ok := value.Interface().(Marshaler)\n\tif !ok {\n\t\tif !isPointerKind(value.Kind()) && value.CanAddr() {\n\t\t\tmarshaler, ok = value.Addr().Interface().(Marshaler)\n\t\t\tif !ok {"
  }
]