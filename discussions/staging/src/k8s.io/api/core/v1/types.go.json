[
  {
    "id" : "d740a6e1-5205-494d-aca4-cbe23dcc89e6",
    "prId" : 103276,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103276#pullrequestreview-698485418",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5929f1e3-cc0d-4c12-95b9-0cc98ed4fbc4",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Same as above - explain the multi-field realtionship, pl3ase",
        "createdAt" : "2021-07-02T20:36:32Z",
        "updatedAt" : "2021-07-02T20:55:11Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "00dba76918e8ce5b5cff6719bbd64c2cd38ad4e2",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +503,507 @@\t// core object) or a PersistentVolumeClaim object.\n\t// When this field is specified, volume binding will only succeed if the type of\n\t// the specified object matches some installed volume populator or dynamic\n\t// provisioner.\n\t// This field will replace the functionality of the DataSource field and as such"
  },
  {
    "id" : "1a051052-621b-4baa-a4ac-ae3c90987b79",
    "prId" : 102966,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102966#pullrequestreview-695539825",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e05ddc7-c718-4991-a762-97c3c59154ce",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "add a check in nodeStrategy#WarningsOnCreate and nodeStrategy#WarningsOnUpdate if this field is non-nil to return a warning:\r\n\r\n```\r\nspec.configSource: deprecated in v1.22+, support removal is planned in v1.X\r\n```",
        "createdAt" : "2021-06-26T20:49:25Z",
        "updatedAt" : "2021-06-26T20:49:26Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "707fe7db-37a9-4b64-b406-468fca043e55",
        "parentId" : "4e05ddc7-c718-4991-a762-97c3c59154ce",
        "authorId" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "body" : "added, thank you for suggestion",
        "createdAt" : "2021-06-29T22:03:11Z",
        "updatedAt" : "2021-06-29T22:03:11Z",
        "lastEditedBy" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "tags" : [
        ]
      }
    ],
    "commit" : "dffc2a60a28c6a61ee0af638c011d60f3b8413f2",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +4607,4611 @@\t// Deprecated. If specified, the source of the node's configuration.\n\t// The DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field.\n\t// This field is deprecated as of 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration\n\t// +optional\n\tConfigSource *NodeConfigSource `json:\"configSource,omitempty\" protobuf:\"bytes,6,opt,name=configSource\"`"
  },
  {
    "id" : "fb225338-bdde-45c6-9649-1059c80a41a6",
    "prId" : 102412,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102412#pullrequestreview-671523108",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5470a39e-269a-4670-a4f6-6434aad2f39c",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "@aojea there is a tombstone, following what we did for ipFamily",
        "createdAt" : "2021-05-28T17:44:47Z",
        "updatedAt" : "2021-05-28T17:44:51Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "38d3ae1a0604fc6b17268a1ebe4ea28289967b7e",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +4234,4238 @@\tSessionAffinityConfig *SessionAffinityConfig `json:\"sessionAffinityConfig,omitempty\" protobuf:\"bytes,14,opt,name=sessionAffinityConfig\"`\n\n\t// TopologyKeys is tombstoned to show why 16 is reserved protobuf tag.\n\t//TopologyKeys []string `json:\"topologyKeys,omitempty\" protobuf:\"bytes,16,opt,name=topologyKeys\"`\n"
  },
  {
    "id" : "547e5311-e405-4f81-b7b2-a640190759a0",
    "prId" : 100684,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100684#pullrequestreview-631576450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5acab1e7-0a6a-4115-b66b-7d728329c6ed",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "should NodeSelectorTerm be marked atomic as well?",
        "createdAt" : "2021-04-08T16:01:04Z",
        "updatedAt" : "2021-04-08T19:27:48Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d86cff7c0518cd225b52794c51d2eae0dc75d1f",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +2676,2680 @@// It provides a subset of functionality as NodeSelectorTerm.\n// This is an alpha feature and may change in the future.\n// +structType=atomic\ntype TopologySelectorTerm struct {\n\t// Usage: Fields of type []TopologySelectorTerm must be listType=atomic."
  },
  {
    "id" : "47c7e028-13cd-4e6f-b6a8-560c583b47d1",
    "prId" : 100684,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100684#pullrequestreview-631627556",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8beee663-236e-4c08-acff-362b1aecc343",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "There are `AllowedTopologies []v1.TopologySelectorTerm` uses that are not marked as listType=atomic... where will that be done?",
        "createdAt" : "2021-04-08T16:03:04Z",
        "updatedAt" : "2021-04-08T19:27:48Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "b597d64d-c649-416c-b31b-11c119ef5fe2",
        "parentId" : "8beee663-236e-4c08-acff-362b1aecc343",
        "authorId" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "body" : "Commented on Joe's PR earlier, listType is atomic by default so omitting the annotation doesn't change any behavior. Would you prefer it to be explicitly marked?",
        "createdAt" : "2021-04-08T16:46:41Z",
        "updatedAt" : "2021-04-08T19:27:48Z",
        "lastEditedBy" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "tags" : [
        ]
      },
      {
        "id" : "ee301754-42b7-412f-8ed6-ceaa689667b2",
        "parentId" : "8beee663-236e-4c08-acff-362b1aecc343",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "I'm personally happy with explicitly marking it as atomic",
        "createdAt" : "2021-04-08T16:52:42Z",
        "updatedAt" : "2021-04-08T19:27:48Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d86cff7c0518cd225b52794c51d2eae0dc75d1f",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +2678,2682 @@// +structType=atomic\ntype TopologySelectorTerm struct {\n\t// Usage: Fields of type []TopologySelectorTerm must be listType=atomic.\n\n\t// A list of topology selector requirements by labels."
  },
  {
    "id" : "a9b26953-6cc4-49a6-8722-9c7be5f3bdbb",
    "prId" : 99643,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99643#pullrequestreview-603224497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "436cd2bb-6167-4cce-9428-b5f5912799cf",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "API doc should call out this is a beta feature and depends on the GenericEphemeralVolume feature gate being enabled",
        "createdAt" : "2021-03-03T17:39:24Z",
        "updatedAt" : "2021-03-09T07:25:16Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "fc82cf31-b986-45ce-9541-71379698c52f",
        "parentId" : "436cd2bb-6167-4cce-9428-b5f5912799cf",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "Done.\r\n",
        "createdAt" : "2021-03-03T18:36:57Z",
        "updatedAt" : "2021-03-09T07:25:16Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4311ae75470f33bff006eb072e823fbab67b11b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +157,161 @@\t// +optional\n\tCSI *CSIVolumeSource `json:\"csi,omitempty\" protobuf:\"bytes,28,opt,name=csi\"`\n\t// Ephemeral represents a volume that is handled by a cluster storage driver.\n\t// The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,\n\t// and deleted when the pod is removed."
  },
  {
    "id" : "fb48de31-8ede-4505-98c6-7fdda48f2830",
    "prId" : 99375,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99375#pullrequestreview-606803852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e9d3bc3-4907-4b86-9aa8-2c7674701823",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Indicate this is an alpha field and which feature gate controls it.",
        "createdAt" : "2021-03-08T23:31:29Z",
        "updatedAt" : "2021-03-12T00:41:17Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "7df1259d091322f2817b2db243f76470f61a3a7e",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +2127,2131 @@\t// the kill signal (no opportunity to shut down).\n\t// This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate.\n\t// +optional\n\tTerminationGracePeriodSeconds *int64 `json:\"terminationGracePeriodSeconds,omitempty\" protobuf:\"varint,7,opt,name=terminationGracePeriodSeconds\"`\n}"
  },
  {
    "id" : "6aa61862-01eb-4d24-87db-471afa2b0fb0",
    "prId" : 99375,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99375#pullrequestreview-608154350",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65105bad-4ba2-4cf5-aad4-b9fe5f4f36dd",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Move this sentence and the next one up right below the first sentence (Optional duration ... The grace period is ... Set this value longer than ...).",
        "createdAt" : "2021-03-09T22:18:21Z",
        "updatedAt" : "2021-03-12T00:41:17Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "7df1259d091322f2817b2db243f76470f61a3a7e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2119,2123 @@\tFailureThreshold int32 `json:\"failureThreshold,omitempty\" protobuf:\"varint,6,opt,name=failureThreshold\"`\n\t// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\n\t// The grace period is the duration in seconds after the processes running in the pod are sent\n\t// a termination signal and the time when the processes are forcibly halted with a kill signal.\n\t// Set this value longer than the expected cleanup time for your process."
  },
  {
    "id" : "1cb69d77-7e8c-47f5-961d-589778ca596b",
    "prId" : 98277,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98277#pullrequestreview-604429806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b3540be-737a-4bbd-ab78-ba2914c40637",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This needs to describer the contents allowed.  E.g. \r\n\r\n`loadBalancerClass is the class of the load balancer implementation this Service belongs to.  If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. \"internal-vip\" or \"example.com/internal-vip\".  Unprefixed names are reserved for end-users.  This field can only be set when the Service type is ...`",
        "createdAt" : "2021-03-04T18:38:36Z",
        "updatedAt" : "2021-03-05T01:12:13Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "72da0b1bb06607f3f3e067f1bb5ce329ec861e1b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +4272,4276 @@\t// implementation (e.g. cloud providers) should ignore Services that set this field.\n\t// This field can only be set when creating or updating a Service to type 'LoadBalancer'.\n\t// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.\n\t// featureGate=LoadBalancerClass\n\t// +optional"
  },
  {
    "id" : "08057722-20a7-4a40-b40d-99f1fffc9434",
    "prId" : 97896,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97896#pullrequestreview-566371996",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52161238-7c33-45a8-bdb4-44f283960ec1",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "I couldn't´t find any other place on the files that uses backticks for `type` , should we keep it as is?",
        "createdAt" : "2021-01-12T10:26:54Z",
        "updatedAt" : "2021-01-12T10:27:30Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "e8ed3cfc-a191-46e7-8cef-25403a593343",
        "parentId" : "52161238-7c33-45a8-bdb4-44f283960ec1",
        "authorId" : "c8a4e5e0-8ec9-4cc8-93ae-80acbbb17c1f",
        "body" : "I added backticks per this suggestion:\r\n\r\nhttps://github.com/kubernetes/kubernetes/pull/97896#discussion_r554985889\r\n\r\nIndeed, I can't find many usages of backticks in this file, but I didn't know if using backticks to annotate field names was a new convention.",
        "createdAt" : "2021-01-12T13:29:03Z",
        "updatedAt" : "2021-01-12T13:29:03Z",
        "lastEditedBy" : "c8a4e5e0-8ec9-4cc8-93ae-80acbbb17c1f",
        "tags" : [
        ]
      },
      {
        "id" : "5c8cf7cd-e75a-4f85-8adf-485c46997f81",
        "parentId" : "52161238-7c33-45a8-bdb4-44f283960ec1",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "ups sorry, I missed it, my fault, scratch my comment please",
        "createdAt" : "2021-01-12T15:14:03Z",
        "updatedAt" : "2021-01-12T15:14:29Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c82e444de8070b777f68b2170e58f88e859d9cc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4151,4155 @@\t// return as an alias for this service (e.g. a DNS CNAME record). No\n\t// proxying will be involved.  Must be a lowercase RFC-1123 hostname\n\t// (https://tools.ietf.org/html/rfc1123) and requires `type` to be \"ExternalName\".\n\t// +optional\n\tExternalName string `json:\"externalName,omitempty\" protobuf:\"bytes,10,opt,name=externalName\"`"
  },
  {
    "id" : "d4245a25-a0ba-4a5b-baa7-041d9599169e",
    "prId" : 96600,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96600#pullrequestreview-605682353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e749c11b-d72c-4cfb-ab60-8ec4e8fb1993",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "As above, spec the default",
        "createdAt" : "2021-03-05T23:14:58Z",
        "updatedAt" : "2021-03-08T16:43:23Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "405a2fe4-eab0-4f77-baf4-8e1f65e1ff9e",
        "parentId" : "e749c11b-d72c-4cfb-ab60-8ec4e8fb1993",
        "authorId" : "a2e00680-b383-4471-a78c-45fa5811f18b",
        "body" : "updated. also changed `protobuf:\"bytes,21` to `protobuf:\"bytes,22` because rebase pulls in `LoadBalancerClass` which claims `21`",
        "createdAt" : "2021-03-05T23:25:15Z",
        "updatedAt" : "2021-03-08T16:43:23Z",
        "lastEditedBy" : "a2e00680-b383-4471-a78c-45fa5811f18b",
        "tags" : [
        ]
      },
      {
        "id" : "ce9aeb20-0313-4b7c-a48f-f645edab65f2",
        "parentId" : "e749c11b-d72c-4cfb-ab60-8ec4e8fb1993",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "thansk!",
        "createdAt" : "2021-03-05T23:26:33Z",
        "updatedAt" : "2021-03-08T16:43:23Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "62804c1ae8762938e4f708f3d6e0408aa47d7020",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +4294,4298 @@\t// \"Cluster\" routes internal traffic to a Service to all endpoints.\n\t// \"Local\" routes traffic to node-local endpoints only, traffic is\n\t// dropped if no node-local endpoints are ready.\n\t// The default value is \"Cluster\".\n\t// +featureGate=ServiceInternalTrafficPolicy"
  },
  {
    "id" : "c9bd0252-0ac3-4246-b8bc-7574821f1f38",
    "prId" : 92744,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92744#pullrequestreview-468510391",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38de38d7-5aa5-4317-b738-670a08154881",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "I think here we want to mention that this field will be dropped if the alpha feature gate is not enabled. See https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api_changes.md#alpha-field-in-existing-api-version for more details on this. ",
        "createdAt" : "2020-08-17T14:24:10Z",
        "updatedAt" : "2020-11-13T06:50:03Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fca0f995596754ba2f53dab03cafda83632905c",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +4228,4232 @@\t// and will be cleared if the type is changed to any other type.\n\t// This field is alpha-level and is only honored by servers that enable the ServiceLBNodePortControl feature.\n\t// +optional\n\tAllocateLoadBalancerNodePorts *bool `json:\"allocateLoadBalancerNodePorts,omitempty\" protobuf:\"bytes,20,opt,name=allocateLoadBalancerNodePorts\"`\n}"
  },
  {
    "id" : "723b2bb7-8eca-46ac-b320-b4dd738fbc42",
    "prId" : 91381,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91381#pullrequestreview-437235490",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83811c49-f70e-4483-972e-09fb1cd9b0f4",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "needs godoc describing the valid types and their meaning (package variable field doc does not get pulled into API published doc)",
        "createdAt" : "2020-06-23T16:33:55Z",
        "updatedAt" : "2020-07-06T08:14:05Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "05ac5977-d5bb-4bb7-8566-5bf626d152cf",
        "parentId" : "83811c49-f70e-4483-972e-09fb1cd9b0f4",
        "authorId" : "7f996100-1a0c-46d0-9245-23461072b50e",
        "body" : "added a bit more context here",
        "createdAt" : "2020-06-25T07:30:23Z",
        "updatedAt" : "2020-07-06T08:14:05Z",
        "lastEditedBy" : "7f996100-1a0c-46d0-9245-23461072b50e",
        "tags" : [
        ]
      }
    ],
    "commit" : "8976e3620f8963e72084971d9d4decbd026bf49f",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +3242,3246 @@\t// RuntimeDefault - the container runtime default profile should be used.\n\t// Unconfined - no profile should be applied.\n\t// +unionDiscriminator\n\tType SeccompProfileType `json:\"type\" protobuf:\"bytes,1,opt,name=type,casttype=SeccompProfileType\"`\n\t// localhostProfile indicates a profile defined in a file on the node should be used."
  },
  {
    "id" : "4095fc19-2d2e-426d-b94e-d0b2ae99033d",
    "prId" : 87459,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87459#pullrequestreview-346799556",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0fe43f1-af01-45f1-9231-aba7dae3e24d",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "is there a way to limit this text to godoc and prevent it from appearing in the openapi description?",
        "createdAt" : "2020-01-22T18:17:25Z",
        "updatedAt" : "2020-01-23T00:28:45Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "90b49e80d6217fa9869c29f770894f668193145f",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +4981,4985 @@}\n\n// ObjectReference contains enough information to let you inspect or modify the referred object.\n// ---\n// New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs."
  },
  {
    "id" : "6a1a4e8a-d16b-4e72-a2fb-8418d83a757b",
    "prId" : 79489,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79489#pullrequestreview-256651528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab8b1226-2a54-47a7-af19-c6839d730c4b",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "~~still needs to indicate this is an alpha-level field, and which feature gate enables it~~\r\n\r\nedit: missed that was in a later commit",
        "createdAt" : "2019-07-02T03:39:54Z",
        "updatedAt" : "2019-07-17T15:03:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8c78d13596e4152d54420705b7fa4ee393d0cbe",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +5428,5432 @@\t// Defaults to the user specified in image metadata if unspecified.\n\t// May also be set in PodSecurityContext. If set in both SecurityContext and\n\t// PodSecurityContext, the value specified in SecurityContext takes precedence.\n\t// This field is alpha-level and it is only honored by servers that enable the WindowsRunAsUserName feature flag.\n\t// +optional"
  },
  {
    "id" : "10ceeb02-07a9-4d5a-8dd4-314be05a99fd",
    "prId" : 77807,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77807#pullrequestreview-271827512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "707fbbd2-cd7f-4c56-a48c-d2a728b0f66d",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Also need to comment that this field may revert to false if the pod gets restarted or if kubelet loses state temporarily.",
        "createdAt" : "2019-05-31T00:32:12Z",
        "updatedAt" : "2019-08-29T22:42:23Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "00f39130-78e5-46bd-9ec3-e3fc62819295",
        "parentId" : "707fbbd2-cd7f-4c56-a48c-d2a728b0f66d",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This is optional and needs to be a pointer.",
        "createdAt" : "2019-06-25T16:21:12Z",
        "updatedAt" : "2019-08-29T22:42:23Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "6b48dcfd-b66c-412d-8ebb-251958c7cd4d",
        "parentId" : "707fbbd2-cd7f-4c56-a48c-d2a728b0f66d",
        "authorId" : "4da24861-03eb-421f-b365-cf63f3c423b3",
        "body" : "changed to pointer",
        "createdAt" : "2019-08-07T09:11:24Z",
        "updatedAt" : "2019-08-29T22:42:23Z",
        "lastEditedBy" : "4da24861-03eb-421f-b365-cf63f3c423b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a042a4b0ee3e0fc27b0a4711202d66743af246e1",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +2401,2405 @@\t// +optional\n\tContainerID string `json:\"containerID,omitempty\" protobuf:\"bytes,8,opt,name=containerID\"`\n\t// Specifies whether the container has passed its startup probe.\n\t// Initialized as false, becomes true after startupProbe is considered successful.\n\t// Resets to false when the container is restarted, or if kubelet loses state temporarily."
  },
  {
    "id" : "5fb5abb5-52b2-477d-a3b3-6234289aafea",
    "prId" : 77807,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77807#pullrequestreview-281472692",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7b63934-39fe-444c-bc43-39f8d28034f4",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "nit: needs a comment indicating this is alpha-level and which feature gate is depends on",
        "createdAt" : "2019-08-29T12:54:30Z",
        "updatedAt" : "2019-08-29T22:42:23Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "1e3f3719-258e-4933-8ff6-b2b7110280b3",
        "parentId" : "c7b63934-39fe-444c-bc43-39f8d28034f4",
        "authorId" : "4da24861-03eb-421f-b365-cf63f3c423b3",
        "body" : "Done",
        "createdAt" : "2019-08-29T13:50:42Z",
        "updatedAt" : "2019-08-29T22:42:23Z",
        "lastEditedBy" : "4da24861-03eb-421f-b365-cf63f3c423b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a042a4b0ee3e0fc27b0a4711202d66743af246e1",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +2205,2209 @@\t// This is an alpha feature enabled by the StartupProbe feature flag.\n\t// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n\t// +optional\n\tStartupProbe *Probe `json:\"startupProbe,omitempty\" protobuf:\"bytes,22,opt,name=startupProbe\"`\n\t// Actions that the management system should take in response to container lifecycle events."
  },
  {
    "id" : "f15c8da5-65fa-4ae9-bd11-e4e00883f37c",
    "prId" : 77807,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77807#pullrequestreview-281490427",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e770d49a-65ea-4695-8c8b-16deacf93220",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "for pods without a startupProbe, this is true even while state is ContainerCreating, etc (i.e. before the point at which the startupProbe would have been run if it had been specified)?",
        "createdAt" : "2019-08-29T12:57:03Z",
        "updatedAt" : "2019-08-29T22:42:23Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "af67bf91-cce5-4c2b-ad0f-f5a55215831a",
        "parentId" : "e770d49a-65ea-4695-8c8b-16deacf93220",
        "authorId" : "4da24861-03eb-421f-b365-cf63f3c423b3",
        "body" : "Yes, if there is no `startupProbe` defined, we set immediately `Started=true` and thus we fall back to the classic behavior.",
        "createdAt" : "2019-08-29T13:06:22Z",
        "updatedAt" : "2019-08-29T22:42:23Z",
        "lastEditedBy" : "4da24861-03eb-421f-b365-cf63f3c423b3",
        "tags" : [
        ]
      },
      {
        "id" : "321027b7-295c-4fbe-bf01-eeade550db0f",
        "parentId" : "e770d49a-65ea-4695-8c8b-16deacf93220",
        "authorId" : "4da24861-03eb-421f-b365-cf63f3c423b3",
        "body" : "The reasoning is that without any defined way of checking for startup, we assume it's always true.",
        "createdAt" : "2019-08-29T13:07:28Z",
        "updatedAt" : "2019-08-29T22:42:23Z",
        "lastEditedBy" : "4da24861-03eb-421f-b365-cf63f3c423b3",
        "tags" : [
        ]
      },
      {
        "id" : "12317924-f67b-46cb-8b3b-dc5bcc3f6174",
        "parentId" : "e770d49a-65ea-4695-8c8b-16deacf93220",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Based on https://github.com/kubernetes/kubernetes/pull/77807/files#r315329804, it looks like there are currently three cases where this is set to true:\r\n1. when the feature is disabled (which seems wrong to me, see https://github.com/kubernetes/kubernetes/pull/77807/files#r319090460)\r\n2. when the feature is enabled, there is no startupProbe defined, and the container is running\r\n3. when the feature is enabled, there is a startupProbe defined, the container is running, and the startupProbe is passing\r\n\r\nWhat to do when the feature is disabled needs to be resolved, and the docs need updating to clarify that the container running state is used in the absence of a startupProbe",
        "createdAt" : "2019-08-29T14:15:31Z",
        "updatedAt" : "2019-08-29T22:42:23Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a042a4b0ee3e0fc27b0a4711202d66743af246e1",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +2404,2408 @@\t// Initialized as false, becomes true after startupProbe is considered successful.\n\t// Resets to false when the container is restarted, or if kubelet loses state temporarily.\n\t// Is always true when no startupProbe is defined.\n\t// +optional\n\tStarted *bool `json:\"started,omitempty\" protobuf:\"varint,9,opt,name=started\"`"
  },
  {
    "id" : "b616e160-e333-4746-958d-7e576e0274ce",
    "prId" : 77516,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77516#pullrequestreview-235231217",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3a509cb-4bfc-423d-ab16-1316d5b12552",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "API doc comment needs to indicate this is an alpha field, and which feature gate is required to be enabled for this to be set",
        "createdAt" : "2019-05-07T21:07:55Z",
        "updatedAt" : "2019-05-09T17:54:12Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "190ad0b2-395a-456f-98a8-46e8bb591e89",
        "parentId" : "a3a509cb-4bfc-423d-ab16-1316d5b12552",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "fixed",
        "createdAt" : "2019-05-08T18:53:25Z",
        "updatedAt" : "2019-05-09T17:54:12Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "69393291b64a2281533cb2567f67edca478b4a93",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1699,1703 @@\t// This is an alpha field and requires enabling ExpandCSIVolumes feature gate.\n\t// This field is optional, and may be empty if no secret is required. If the\n\t// secret object contains more than one secret, all secrets are passed.\n\t// +optional\n\tControllerExpandSecretRef *SecretReference `json:\"controllerExpandSecretRef,omitempty\" protobuf:\"bytes,9,opt,name=controllerExpandSecretRef\"`"
  },
  {
    "id" : "604e4661-dac6-4d8f-aced-ab0d5f147832",
    "prId" : 77327,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77327#pullrequestreview-244205558",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46561062-cc85-4884-aaa0-0e52a3447a67",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "According to your validation code, there's actually two keys. Please set the list keys as here: https://github.com/kubernetes/api/blob/kubernetes-1.15.0-alpha.0/core/v1/types.go#L2082-L2095",
        "createdAt" : "2019-05-28T20:22:56Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8b7a0c91-b55e-4b39-8ae7-fa82937df5fa",
        "parentId" : "46561062-cc85-4884-aaa0-0e52a3447a67",
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "ah we are missing this \r\n```\r\nlistType=map\r\n\t// +listMapKey=containerPort\r\n\t// +listMapKey=protocol\r\n``` , wondering how is this used ? ",
        "createdAt" : "2019-05-31T07:16:26Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "cfd235f0-dcc6-4811-a391-40013c1043d7",
        "parentId" : "46561062-cc85-4884-aaa0-0e52a3447a67",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Done. Nice to know this \"black magic\".",
        "createdAt" : "2019-05-31T09:06:12Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9d49a6309127d79c6c8ccb044c7c7d81c65adb2",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +3018,3022 @@\t// All topologySpreadConstraints are ANDed.\n\t// +optional\n\t// +patchMergeKey=topologyKey\n\t// +patchStrategy=merge\n\t// +listType=map"
  },
  {
    "id" : "7ba9fc77-c7fc-42a7-9a13-5595e9966452",
    "prId" : 77327,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77327#pullrequestreview-245878671",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e05effc-4b4d-43e4-a0b1-81a8e12cf834",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Is there a policy for what to do if the pods become imbalanced via attrition?",
        "createdAt" : "2019-05-28T20:36:26Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "51a37f30-4ca6-47f4-8f51-6f83c4260af4",
        "parentId" : "6e05effc-4b4d-43e4-a0b1-81a8e12cf834",
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "@lavalamp this Even Pod Spreading feature only applies to scheduling time decisions. Runtime even spreading due to any number of issues like drain, auto scaling ,etc is not covered. I am making a change in descheduler to incorporate the same policy for runtime. That means, when maxSkew is not honored for a topokey, the descheduler will evict some pods and assume the scheduling will do the right thing.\r\n\r\nHaving said, i would be interested in knowing if container orchestrators like . Borg, Tupperware handle runtime spreading ? Would that be something we could incoporate into k/k ?",
        "createdAt" : "2019-05-30T19:28:27Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "e095ff69-31aa-4211-a9c2-269f6078357b",
        "parentId" : "6e05effc-4b4d-43e4-a0b1-81a8e12cf834",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "If a descheduler is expected to take action on this as well, the comments should document that behavior. (Although that seems a little weird to me, I'd expect this to only be relevant if we are scaling down a deployment. If e.g. 2 pods in one zone fail, I'd expect users to be quite angry if the descheduler then killed 1 pod in each of their other zones!!)",
        "createdAt" : "2019-05-30T19:56:02Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "940568df-64c2-4301-b18c-d7f372934c19",
        "parentId" : "6e05effc-4b4d-43e4-a0b1-81a8e12cf834",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "> Is there a policy for what to do if the pods become imbalanced via attrition?\r\n\r\nDefault scheduler does nothing on it - like what we are doing all the time.\r\n\r\nHowever, @lavalamp you're right, the only case I do want to achieve is the scale-down case - arbitrary taking out a replica is not an ideal case - I'm going to tackle it down in Beta either in scheduler or workload controller side. ",
        "createdAt" : "2019-05-31T06:53:00Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "ff0647f6-ad38-408a-a77a-96c20cb3fe86",
        "parentId" : "6e05effc-4b4d-43e4-a0b1-81a8e12cf834",
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "@lavalamp  failed pods will not be accounted for in descheduler. Descheduler will only look at evictable pods , which means pods that are running and ready and are not daemonset pods. \r\n\r\nWe probably need to document this better, but even pod spreading is only applied when a new pod is scheduled, it should be as far apart in the domain as possible, to other already running pods\r\n\r\nDescheduler policy, will look at already running pods, divide them into buckets and see if the spread doesnt follow maxSkew, start evicting some pods from more full buckets and assume scheduling will fix them\r\n\r\n@bgrant0607 may be has insight on the Borg question, Does it handle runtime spreading across domains ?",
        "createdAt" : "2019-05-31T07:24:06Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "40fa9ad0-c6c6-4ca3-b519-25e298af1041",
        "parentId" : "6e05effc-4b4d-43e4-a0b1-81a8e12cf834",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Please answer the question in the comments :)",
        "createdAt" : "2019-05-31T15:55:28Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d94b4120-f1cc-4d02-9a7d-4703bb7b3843",
        "parentId" : "6e05effc-4b4d-43e4-a0b1-81a8e12cf834",
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "@lavalamp probably i misunderstood your question. I think attrition can only happen by scaling down. The scaling down case can be solved in two ways\r\n\r\n1: fix the scaling down in workload controller to account for topo constraints. I think this is less elegant and spreads the constraint knowledge in both scheduler and workload controller\r\n2: let the descheduler handle the eviction and the scheduler will automagically fix this. although this does require dependency on an external component\r\n\r\n>  If e.g. 2 pods in one zone fail, I'd expect users to be quite angry if the descheduler then killed 1 pod in each of their other zones!!)\r\n\r\nWhat do you mean by 2 pods in one zone fail ? Do you mean 2 pods are pending ?\r\n",
        "createdAt" : "2019-06-05T08:49:13Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9d49a6309127d79c6c8ccb044c7c7d81c65adb2",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +3079,3083 @@\t// won't make it *more* imbalanced.\n\t// It's a required field.\n\tWhenUnsatisfiable UnsatisfiableConstraintAction `json:\"whenUnsatisfiable\" protobuf:\"bytes,3,opt,name=whenUnsatisfiable,casttype=UnsatisfiableConstraintAction\"`\n\t// LabelSelector is used to find matching pods.\n\t// Pods that match this label selector are counted to determine the number of pods"
  },
  {
    "id" : "62d3bc2e-512b-45b6-87bb-5201e6f168fa",
    "prId" : 73405,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73405#pullrequestreview-277400721",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11b006a8-f81b-4ac0-b96b-fc8eb27a0cb7",
        "parentId" : null,
        "authorId" : "350ae9b6-b3b1-4ba1-a475-a78423f119d0",
        "body" : "Let's add  godoc here too.",
        "createdAt" : "2019-08-20T19:53:58Z",
        "updatedAt" : "2019-08-29T11:26:50Z",
        "lastEditedBy" : "350ae9b6-b3b1-4ba1-a475-a78423f119d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0459feb7d9ec7381be6ef2e93ae82be6d864ec5",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +4636,4640 @@)\n\ntype NamespaceConditionType string\n\n// These are valid conditions of a namespace."
  },
  {
    "id" : "27343695-a01b-4edd-8755-f7ad626fcc6d",
    "prId" : 72046,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72046#pullrequestreview-315978897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92468049-3211-48ee-abd0-1be36c48ee31",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This file needs to be in sync with the \"internal\" file, which has had a number of small but important changes to comments and constants.",
        "createdAt" : "2019-11-12T20:40:50Z",
        "updatedAt" : "2019-11-15T06:38:02Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "8a5e3973-df9f-4f86-901b-a658ea8e842e",
        "parentId" : "92468049-3211-48ee-abd0-1be36c48ee31",
        "authorId" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "body" : "Nice catch",
        "createdAt" : "2019-11-13T03:15:34Z",
        "updatedAt" : "2019-11-15T06:38:02Z",
        "lastEditedBy" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "tags" : [
        ]
      }
    ],
    "commit" : "31d623b4d74ceadfad101d36a4710d4406fcf144",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +3960,3964 @@\tIPFamily *IPFamily `json:\"ipFamily,omitempty\" protobuf:\"bytes,15,opt,name=ipFamily,Configcasttype=IPFamily\"`\n\n\t// topologyKeys is a preference-order list of topology keys which\n\t// implementations of services should use to preferentially sort endpoints\n\t// when accessing this Service, it can not be used at the same time as"
  },
  {
    "id" : "86a7964b-1189-4f76-a667-49c89d07c952",
    "prId" : 71351,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71351#pullrequestreview-184147917",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31a57161-f706-411e-b26d-fb1ab25e33b6",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Perhaps this field should be immediately after SubPath?",
        "createdAt" : "2018-12-10T23:32:45Z",
        "updatedAt" : "2019-02-20T01:37:45Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "3c439dc4-1ce4-47ec-af32-bedf63b91a04",
        "parentId" : "31a57161-f706-411e-b26d-fb1ab25e33b6",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Please state that this is alpha and in which version (like mount propagation above).",
        "createdAt" : "2018-12-10T23:48:41Z",
        "updatedAt" : "2019-02-20T01:37:45Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9d9fe6e2-7a7a-40ac-870d-e66e993b5669",
        "parentId" : "31a57161-f706-411e-b26d-fb1ab25e33b6",
        "authorId" : "0d43352d-b6ae-4016-9e7f-921f64611474",
        "body" : "In terms of the ordering - I didn't want to interfere with the protobuf numbering / merging, so it is next in the list",
        "createdAt" : "2018-12-11T11:57:30Z",
        "updatedAt" : "2019-02-20T01:37:45Z",
        "lastEditedBy" : "0d43352d-b6ae-4016-9e7f-921f64611474",
        "tags" : [
        ]
      },
      {
        "id" : "06bd2df9-39f2-41f9-b957-b97aef90e3e9",
        "parentId" : "31a57161-f706-411e-b26d-fb1ab25e33b6",
        "authorId" : "0d43352d-b6ae-4016-9e7f-921f64611474",
        "body" : "Added comment",
        "createdAt" : "2018-12-12T12:14:49Z",
        "updatedAt" : "2019-02-20T01:37:45Z",
        "lastEditedBy" : "0d43352d-b6ae-4016-9e7f-921f64611474",
        "tags" : [
        ]
      }
    ],
    "commit" : "a64b854137b5fc6c60724cbe349122e3bda8b09e",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1741,1745 @@\t// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\n\t// Defaults to \"\" (volume's root).\n\t// SubPathExpr and SubPath are mutually exclusive.\n\t// This field is alpha in 1.14.\n\t// +optional"
  },
  {
    "id" : "42703e8f-c3b5-4674-a320-f03c48b190b3",
    "prId" : 71351,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71351#pullrequestreview-184148011",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8572f86-de9b-4c49-9975-eec60c86a4fe",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "How is the expansion done?\r\nWhat component will do the expansion?\r\nWhat sources of environment variables will be used for the expansion?",
        "createdAt" : "2018-12-10T23:34:46Z",
        "updatedAt" : "2019-02-20T01:37:45Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "095c09fc-4fe0-4645-a89c-ff818cff1ccc",
        "parentId" : "e8572f86-de9b-4c49-9975-eec60c86a4fe",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think it'd be better to describe this as \"like SubPath, but with variable expansion immediately before use\" or something?",
        "createdAt" : "2018-12-10T23:40:34Z",
        "updatedAt" : "2019-02-20T01:37:45Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b5aa2602-c4ba-4cd5-aeb9-3fddbefac95b",
        "parentId" : "e8572f86-de9b-4c49-9975-eec60c86a4fe",
        "authorId" : "0d43352d-b6ae-4016-9e7f-921f64611474",
        "body" : "Amended description",
        "createdAt" : "2018-12-12T12:15:00Z",
        "updatedAt" : "2019-02-20T01:37:45Z",
        "lastEditedBy" : "0d43352d-b6ae-4016-9e7f-921f64611474",
        "tags" : [
        ]
      }
    ],
    "commit" : "a64b854137b5fc6c60724cbe349122e3bda8b09e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1738,1742 @@\t// +optional\n\tMountPropagation *MountPropagationMode `json:\"mountPropagation,omitempty\" protobuf:\"bytes,5,opt,name=mountPropagation,casttype=MountPropagationMode\"`\n\t// Expanded path within the volume from which the container's volume should be mounted.\n\t// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\n\t// Defaults to \"\" (volume's root)."
  },
  {
    "id" : "5e40ff1b-c5b0-477a-82ba-57869ecd3977",
    "prId" : 71351,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71351#pullrequestreview-187957606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "214d7518-5c20-4c4c-807e-1727879c5f8b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Did you consider making this a pointer for extra clarity about whether the user intended to set it?",
        "createdAt" : "2018-12-10T23:36:47Z",
        "updatedAt" : "2019-02-20T01:37:45Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "1d1b2b74-5f56-417a-919c-4c53d784dc0e",
        "parentId" : "214d7518-5c20-4c4c-807e-1727879c5f8b",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "You can also consider making SubPath a pointer. That shouldn't be a breaking change in the wire format.",
        "createdAt" : "2018-12-10T23:39:02Z",
        "updatedAt" : "2019-02-20T01:37:45Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "40ebb129-5fbc-4b82-bb5c-a503b5037b70",
        "parentId" : "214d7518-5c20-4c4c-807e-1727879c5f8b",
        "authorId" : "0d43352d-b6ae-4016-9e7f-921f64611474",
        "body" : "I wanted to keep subPathExpr in the same style and context as subPath. I really dont want to alter subPath behaviour as it could be potentially risky and is also not in the scope of the PR.",
        "createdAt" : "2018-12-11T06:45:29Z",
        "updatedAt" : "2019-02-20T01:37:45Z",
        "lastEditedBy" : "0d43352d-b6ae-4016-9e7f-921f64611474",
        "tags" : [
        ]
      },
      {
        "id" : "05cf5f3d-6fb1-4daf-8094-d90545e1505b",
        "parentId" : "214d7518-5c20-4c4c-807e-1727879c5f8b",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "@liggitt do all new fields need to be pointers?  I vaguely recall something about breaking older clients.",
        "createdAt" : "2018-12-20T22:22:30Z",
        "updatedAt" : "2019-02-20T01:37:45Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "88057dfa-5e78-4319-a20b-3e33d8a7ed91",
        "parentId" : "214d7518-5c20-4c4c-807e-1727879c5f8b",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "New fields must be optional and omitempty, and not result in any serialized output when unspecified. For strings, either `string` or `*string` can meet those requirements\r\n\r\nIf you need to be able to distinguish between an explicitly specified zero value and an omitted value, `*string` is required. That doesn't seem to be the case here.\r\n\r\nIn general, for optional fields that get defaults applied to them, making them pointers and only defaulting the nil value is recommended. It's somewhat confusing for an explicit `foo: \"\"` to get changed to `foo: \"some default\"` by defaulting.\r\n\r\nIn this case, since there's no defaulting, and `string` works with `omitempty`, and `subPath` already exists, I'd probably match `subPath`",
        "createdAt" : "2018-12-26T20:36:44Z",
        "updatedAt" : "2019-02-20T01:37:45Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a64b854137b5fc6c60724cbe349122e3bda8b09e",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1743,1747 @@\t// SubPathExpr and SubPath are mutually exclusive.\n\t// This field is alpha in 1.14.\n\t// +optional\n\tSubPathExpr string `json:\"subPathExpr,omitempty\" protobuf:\"bytes,6,opt,name=subPathExpr\"`\n}"
  },
  {
    "id" : "e234985d-07d7-4540-accb-02fa83876413",
    "prId" : 60195,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60195#pullrequestreview-144245069",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e187e24-3e47-4dcb-9cea-384d9c947d9d",
        "parentId" : null,
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "IIUC the fields name are kept the same as `GlusterfsVolumeSource` for some sort of backwards compatibility and symmetry. But it would be backwards incompatible if someone expects `PersistentVolumeSource.Glusterfs` to be `GlusterfsVolumeSource` (which turns out to be `GlusterfsPersistentVolumeSource` now). \r\n\r\nIn that case should we fix the go name (s/EndpointsName/Endpoints) now to follow the api rule https://github.com/kubernetes/kubernetes/blob/master/vendor/k8s.io/kube-openapi/pkg/generators/rules/names_match.go#L53-L78? \r\n\r\nAlso FYI I'm planning on fixing the existing go name violations (e.g. https://github.com/kubernetes/kubernetes/pull/66097). The fix will be breaking change, but it's mechanical change and will be caught by compiler. ",
        "createdAt" : "2018-07-20T17:53:13Z",
        "updatedAt" : "2018-11-06T10:23:29Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      },
      {
        "id" : "aaf76e96-cfc5-4bfa-9352-d52c774610b5",
        "parentId" : "2e187e24-3e47-4dcb-9cea-384d9c947d9d",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> But it would be backwards incompatible if someone expects PersistentVolumeSource.Glusterfs to be GlusterfsVolumeSource (which turns out to be GlusterfsPersistentVolumeSource now).\r\n\r\nNot via the API. The serialized JSON and protobuf output is identical, no matter what struct it comes from.\r\n\r\n> In that case should we fix the go name (s/EndpointsName/Endpoints) now to follow the api rule https://github.com/kubernetes/kubernetes/blob/master/vendor/k8s.io/kube-openapi/pkg/generators/rules/names_match.go#L53-L78?\r\n\r\nNo, we must maintain wire compatibility with all the fields of the old struct.\r\n\r\n> Also FYI I'm planning on fixing the existing go name violations (e.g. #66097)\r\n\r\nThat can be ok as long as the serialized wire formats do not change in any way. Some of the differences are intentional, to name the go fields \"Deprecated___\", etc",
        "createdAt" : "2018-07-20T17:57:06Z",
        "updatedAt" : "2018-11-06T10:23:29Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "61be4e4f-9f81-4d3e-a57d-76a8eefe331f",
        "parentId" : "2e187e24-3e47-4dcb-9cea-384d9c947d9d",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "Yes the change is backwards compatible via the API. I'm thinking if someone builds a go client that manipulates the field `Glusterfs` as a `GlusterfsVolumeSource` type, e.g.\r\n```\r\n    pvs := PersistentVolumeSource{\r\n        Glusterfs: &GlusterfsVolumeSource{}\r\n    }\r\n```\r\nthen it will be a breaking change when the user updates `k8s.io/api/core/v1` package, because `Glusterfs` should be of type `GlusterfsPersistentVolumeSource` now. Thus I'm thinking we could also fix the go field name `EndpointsName` to be `Endpoints` as part of the breaking change. Sorry I guess my previous comment was misleading, I agree we shouldn't change the json field name (the serialized wire formats), but we could change the go field name.",
        "createdAt" : "2018-07-20T21:00:44Z",
        "updatedAt" : "2018-11-06T10:23:29Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      },
      {
        "id" : "4ca8e38d-20aa-4aa1-aede-de32887a1ad5",
        "parentId" : "2e187e24-3e47-4dcb-9cea-384d9c947d9d",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> Thus I'm thinking we could also fix the go field name EndpointsName to be Endpoints as part of the breaking change. \r\n\r\nleaving the go field names the same means a client that obtains a PV object from client.Core().PersistentVolumes().Get(\"...\") would not need to make changes",
        "createdAt" : "2018-08-08T02:01:59Z",
        "updatedAt" : "2018-11-06T10:23:29Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdb051c72d836af2ab477dd23c4ff3fa06bbc1f4",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +642,646 @@\t// EndpointsName is the endpoint name that details Glusterfs topology.\n\t// More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\n\tEndpointsName string `json:\"endpoints\" protobuf:\"bytes,1,opt,name=endpoints\"`\n\n\t// Path is the Glusterfs volume path."
  },
  {
    "id" : "40c11eb9-71c1-49fa-97fe-58119c7e7e3e",
    "prId" : 60195,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60195#pullrequestreview-170662301",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "900e74c8-e1c1-40d6-9760-918c43561ebe",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "match the documentation on the internal type (this one is what actually gets published as API doc)",
        "createdAt" : "2018-10-26T16:35:38Z",
        "updatedAt" : "2018-11-06T10:23:29Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "fce509d1-6034-4f2e-aece-0a3887f7d7a7",
        "parentId" : "900e74c8-e1c1-40d6-9760-918c43561ebe",
        "authorId" : "3eb39df2-c27a-40ed-9fab-cabae1c6353d",
        "body" : "Done.",
        "createdAt" : "2018-11-01T12:24:27Z",
        "updatedAt" : "2018-11-06T10:23:29Z",
        "lastEditedBy" : "3eb39df2-c27a-40ed-9fab-cabae1c6353d",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdb051c72d836af2ab477dd23c4ff3fa06bbc1f4",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +654,658 @@\tReadOnly bool `json:\"readOnly,omitempty\" protobuf:\"varint,3,opt,name=readOnly\"`\n\n\t// EndpointsNamespace is the namespace that contains Glusterfs endpoint.\n\t// If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC.\n\t// More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
  },
  {
    "id" : "642a62c9-9938-4099-985f-48e5fa85a51c",
    "prId" : 60195,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60195#pullrequestreview-171788004",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd2b277f-05a3-4670-b42a-4475077fdc1b",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Sorry I'm late to the party. Is this a backwards compatible change?  Will clients that programatically interact with the API start failing because the type has changed?",
        "createdAt" : "2018-11-05T21:16:33Z",
        "updatedAt" : "2018-11-06T10:23:29Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "4d8ca4ab-6df8-4fd2-b23a-bbd858ccaf9e",
        "parentId" : "dd2b277f-05a3-4670-b42a-4475077fdc1b",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "It is backwards compatible in the dimensions we guarantee.\r\n\r\nThe type of the go field does not impact what gets serialized to the wire, so the type change does not affect wire compatibility (against the API or against etcd).\r\n\r\nThe type of the go struct field is changing. Depending on how a client made use of this object, it might have to adjust how it constructed a struct of this type. If all it did was retrieve objects from the API and access fields (e.g. `pv.Spec.Glusterfs.EndpointsName`) no change would be required. Go struct compatibility is not currently guaranteed release-to-release.",
        "createdAt" : "2018-11-05T22:02:22Z",
        "updatedAt" : "2018-11-06T10:23:29Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "7564c2ed-dabe-4fc8-a7af-654e4e9c2bba",
        "parentId" : "dd2b277f-05a3-4670-b42a-4475077fdc1b",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Ah ok, so if someone synced their go-client to the latest, then it's possible they will have to recompile, but older applications using the old clients will continue to work.  Is this something we need to call out in any release notes?",
        "createdAt" : "2018-11-05T22:15:47Z",
        "updatedAt" : "2018-11-06T10:23:29Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "dc85024d-8f13-40e5-8480-615da3cf4d77",
        "parentId" : "dd2b277f-05a3-4670-b42a-4475077fdc1b",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "yes, worth a release note, both for the new capability, and for the client-go impact",
        "createdAt" : "2018-11-05T22:19:48Z",
        "updatedAt" : "2018-11-06T10:23:29Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdb051c72d836af2ab477dd23c4ff3fa06bbc1f4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +192,196 @@\t// More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md\n\t// +optional\n\tGlusterfs *GlusterfsPersistentVolumeSource `json:\"glusterfs,omitempty\" protobuf:\"bytes,4,opt,name=glusterfs\"`\n\t// NFS represents an NFS mount on the host. Provisioned by an admin.\n\t// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
  },
  {
    "id" : "f736ae02-bda8-4a7a-95aa-9c46466216d0",
    "prId" : 59416,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59416#pullrequestreview-264841358",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "453a8ab6-5fad-4886-82e8-62d43fcc5bf3",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Note that the name should be `ephemeralContainers` in Godoc when referencing the field.  I'm ok with this being a follow up if there's nothing else in this pass.",
        "createdAt" : "2019-07-22T14:10:48Z",
        "updatedAt" : "2019-07-22T14:10:48Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a753c7a44b5f92e52d4119530ac76e38b837336",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2844,2848 @@\t// +patchStrategy=merge\n\tContainers []Container `json:\"containers\" patchStrategy:\"merge\" patchMergeKey:\"name\" protobuf:\"bytes,2,rep,name=containers\"`\n\t// EphemeralContainers is the list of ephemeral containers that run in this pod. Ephemeral containers\n\t// are added to an existing pod as a result of a user-initiated action such as troubleshooting.\n\t// This list is read-only in the pod spec. It may not be specified in a create or modified in an"
  },
  {
    "id" : "ac2882c3-3f9d-46f5-a275-dbae7332ff3c",
    "prId" : 58762,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58762#pullrequestreview-96881847",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c671d1d2-a67e-4bdc-a1ed-f68210bac03f",
        "parentId" : null,
        "authorId" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "body" : "As Saad mentioned, don't forget to re-generate the API code for this type.  If you need help, let me know.",
        "createdAt" : "2018-01-31T15:15:15Z",
        "updatedAt" : "2018-02-22T12:38:00Z",
        "lastEditedBy" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "tags" : [
        ]
      },
      {
        "id" : "baa17091-fcda-491a-98ca-3a9733962b87",
        "parentId" : "c671d1d2-a67e-4bdc-a1ed-f68210bac03f",
        "authorId" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "body" : "@musse When you change the API object, you must re-generate API source code.  Here are some steps:\r\n\r\n0) Make sure to make you API change in `pkg/apis/core/v1/types.go` also.\r\n1) From the kubernetes root dir, run `make update`\r\n2) Follow directions when that task fails, it should walk you through what needs to be done\r\n2) Run `make verify` to ensure all is good.  Follow directions there when things are broken.\r\n\r\nPost here (or ping me on slack) if things dont work.",
        "createdAt" : "2018-01-31T18:35:28Z",
        "updatedAt" : "2018-02-22T12:38:00Z",
        "lastEditedBy" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "tags" : [
        ]
      },
      {
        "id" : "c3d79d33-9c27-4ab5-a242-be59738a5f42",
        "parentId" : "c671d1d2-a67e-4bdc-a1ed-f68210bac03f",
        "authorId" : "48817c84-2856-4959-b284-9e22a831a231",
        "body" : "I don't have the `pkg/apis/core/v1/types.go` file. Will it be generated with `make update`?",
        "createdAt" : "2018-02-15T14:02:01Z",
        "updatedAt" : "2018-02-22T12:38:00Z",
        "lastEditedBy" : "48817c84-2856-4959-b284-9e22a831a231",
        "tags" : [
        ]
      },
      {
        "id" : "b7217f0a-2a3f-4aa2-9fc6-05e16ac17541",
        "parentId" : "c671d1d2-a67e-4bdc-a1ed-f68210bac03f",
        "authorId" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "body" : "@musse Apologies, this is the file and line# https://github.com/kubernetes/kubernetes/blob/master/pkg/apis/core/types.go#L1607",
        "createdAt" : "2018-02-15T15:12:09Z",
        "updatedAt" : "2018-02-22T12:38:00Z",
        "lastEditedBy" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c16b2c066bb61d61ced56099537e55f6858dde1",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1752,1756 @@\t// Attributes of the volume to publish.\n\t// +optional\n\tVolumeAttributes map[string]string `json:\"volumeAttributes,omitempty\" protobuf:\"bytes,5,rep,name=volumeAttributes\"`\n}\n"
  },
  {
    "id" : "c334a59f-ef42-498f-818d-b5de2ef47308",
    "prId" : 57938,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57938#pullrequestreview-91765623",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "466b6d28-d1e1-49fd-b142-92ef35a3b03d",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "How are byte arrays encoded in JSON by our API machinery?",
        "createdAt" : "2018-01-20T00:10:34Z",
        "updatedAt" : "2018-01-23T12:28:14Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "9cad9e62-e9b3-4053-af23-f87b6f91c781",
        "parentId" : "466b6d28-d1e1-49fd-b142-92ef35a3b03d",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "As base64-encoded strings ",
        "createdAt" : "2018-01-20T00:34:09Z",
        "updatedAt" : "2018-01-23T12:28:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "9264b566-6b48-4eae-855e-5cccf4a297f1",
        "parentId" : "466b6d28-d1e1-49fd-b142-92ef35a3b03d",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "As seen in Secret objects",
        "createdAt" : "2018-01-20T00:34:33Z",
        "updatedAt" : "2018-01-23T12:28:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "b336cc5f-da45-4415-b452-e2f6ebed3ac9",
        "parentId" : "466b6d28-d1e1-49fd-b142-92ef35a3b03d",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Ack.",
        "createdAt" : "2018-01-26T08:08:20Z",
        "updatedAt" : "2018-01-26T08:08:20Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "df1351f73e29a97771144d179febc0d498b8fe00",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +4955,4959 @@\t// kubelet.\n\t// +optional\n\tBinaryData map[string][]byte `json:\"binaryData,omitempty\" protobuf:\"bytes,3,rep,name=binaryData\"`\n}\n"
  },
  {
    "id" : "5048333e-e114-4eaf-8b79-84c5615d9089",
    "prId" : 55848,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55848#pullrequestreview-79099180",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8027fae-b748-45b9-95a4-b2a72d403dd0",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This needs to indicate that `None` is controlled by a feature gate and by alpha.  It also needs to note that only 1.9 or later Kubernetes servers will allow the None value.",
        "createdAt" : "2017-11-26T19:21:18Z",
        "updatedAt" : "2017-11-26T19:21:18Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "bd9c53c8-b8d7-4bfa-adbe-dbae6720b5d2",
        "parentId" : "d8027fae-b748-45b9-95a4-b2a72d403dd0",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Needs to be fixed for 1.9 so that public API documentation is correct.",
        "createdAt" : "2017-11-26T19:21:40Z",
        "updatedAt" : "2017-11-26T19:21:40Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "788f10c2-c416-48d7-a495-ffbef89c8ac3",
        "parentId" : "d8027fae-b748-45b9-95a4-b2a72d403dd0",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "will file a PR to fix this.",
        "createdAt" : "2017-11-27T09:08:16Z",
        "updatedAt" : "2017-11-27T09:08:16Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f9c721b20a42ade847ab9ef7e6015e83df14ec5",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +2768,2772 @@\t// Set DNS policy for the pod.\n\t// Defaults to \"ClusterFirst\".\n\t// Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.\n\t// DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.\n\t// To have DNS options set along with hostNetwork, you have to specify DNS policy"
  },
  {
    "id" : "4ef2a333-d135-444b-aa2d-9ad4d172668b",
    "prId" : 54748,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54748#pullrequestreview-72779359",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2aeaed07-aac3-4b97-b593-61e439b96d84",
        "parentId" : null,
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "Simply a rename, StorageMediumHugepages-> StorageMediumHugePages, right?",
        "createdAt" : "2017-10-29T05:15:46Z",
        "updatedAt" : "2017-10-29T05:15:52Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      },
      {
        "id" : "80a09534-428c-4833-a7e7-054081f32d9c",
        "parentId" : "2aeaed07-aac3-4b97-b593-61e439b96d84",
        "authorId" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "body" : "exactly :)",
        "createdAt" : "2017-10-29T05:54:57Z",
        "updatedAt" : "2017-10-29T05:54:58Z",
        "lastEditedBy" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "tags" : [
        ]
      },
      {
        "id" : "e2479257-2251-4be5-b1b7-ce4f79b58bb0",
        "parentId" : "2aeaed07-aac3-4b97-b593-61e439b96d84",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Doesn't it break API compatibility? Do we guarantee any in `k8s.i/api`?",
        "createdAt" : "2017-10-30T08:35:16Z",
        "updatedAt" : "2017-10-30T08:35:16Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "071688d2-5af2-47fe-9601-fa139b699997",
        "parentId" : "2aeaed07-aac3-4b97-b593-61e439b96d84",
        "authorId" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "body" : "I don't think it breaks API compatibility. It just change the const name. It doesn't change the actual name.",
        "createdAt" : "2017-10-30T08:49:01Z",
        "updatedAt" : "2017-10-30T08:49:02Z",
        "lastEditedBy" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "tags" : [
        ]
      },
      {
        "id" : "78b31301-26eb-443b-ac92-09960ef4b24e",
        "parentId" : "2aeaed07-aac3-4b97-b593-61e439b96d84",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Const name *is* API. Changing its name breaks builds to anyone who imported `k8s.i/api` and used `api.StorageMediumHugepages` in his go code. Question is if we support `k8s.i/api` stability.\r\n\r\n@kubernetes/sig-api-machinery-pr-reviews ",
        "createdAt" : "2017-10-30T09:22:30Z",
        "updatedAt" : "2017-10-30T09:22:31Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "43da9384-41dc-486b-ab9f-cf9d9cbc8df3",
        "parentId" : "2aeaed07-aac3-4b97-b593-61e439b96d84",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "We don't. In major updates we have a number of changes usually which breaks compilation of 3rdparty code.",
        "createdAt" : "2017-10-30T09:49:27Z",
        "updatedAt" : "2017-10-30T09:49:27Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e66ca584fc928edb42c08bdac7203c2c6d7e665",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +990,994 @@\tStorageMediumDefault   StorageMedium = \"\"          // use whatever the default is for the node\n\tStorageMediumMemory    StorageMedium = \"Memory\"    // use memory (tmpfs)\n\tStorageMediumHugePages StorageMedium = \"HugePages\" // use hugepages\n)\n"
  },
  {
    "id" : "9d87d9b6-66b5-4367-b228-1144cde0b50a",
    "prId" : 54302,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54302#pullrequestreview-71328325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f18689ed-73cf-489f-9c3b-571b16eae048",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "move this file to the non-generated commit",
        "createdAt" : "2017-10-23T20:51:31Z",
        "updatedAt" : "2017-10-23T21:00:18Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6b138ccc-fe8c-49d0-bfc7-6ac33c3d6c3f",
        "parentId" : "f18689ed-73cf-489f-9c3b-571b16eae048",
        "authorId" : "6c37c694-3f72-4ff3-ac3a-5fbddf4d5796",
        "body" : "done",
        "createdAt" : "2017-10-23T21:00:30Z",
        "updatedAt" : "2017-10-23T21:00:30Z",
        "lastEditedBy" : "6c37c694-3f72-4ff3-ac3a-5fbddf4d5796",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab32196ffdcc7970976dc19348fde8198f52d446",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +399,403 @@\t// More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md\n\t// +optional\n\tRBD *RBDPersistentVolumeSource `json:\"rbd,omitempty\" protobuf:\"bytes,6,opt,name=rbd\"`\n\t// ISCSI represents an ISCSI Disk resource that is attached to a\n\t// kubelet's host machine and then exposed to the pod. Provisioned by an admin."
  },
  {
    "id" : "0e6711cf-d1b8-43b9-b355-bda938c9ab5d",
    "prId" : 52077,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52077#pullrequestreview-100230339",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d64336b4-a6dd-432c-8b4b-af7c86421c1b",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "nit: prefer \"The GID to run the container's init process\"\r\n\r\n(entrypoint is a docker term)",
        "createdAt" : "2018-02-28T18:48:28Z",
        "updatedAt" : "2018-03-01T06:18:32Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "ce56ada3-9206-4ee2-8b37-16ab792b8c98",
        "parentId" : "d64336b4-a6dd-432c-8b4b-af7c86421c1b",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this matches RunAsUser doc... I'd leave it for now",
        "createdAt" : "2018-02-28T21:12:04Z",
        "updatedAt" : "2018-03-01T06:18:32Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b888415ebf0eb97b68c47222f5bca1ed79567bf7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2984,2988 @@\t// +optional\n\tRunAsUser *int64 `json:\"runAsUser,omitempty\" protobuf:\"varint,2,opt,name=runAsUser\"`\n\t// The GID to run the entrypoint of the container process.\n\t// Uses runtime default if unset.\n\t// May also be set in SecurityContext.  If set in both SecurityContext and"
  },
  {
    "id" : "a863737a-1d63-4408-afeb-88f5cf31c771",
    "prId" : 52077,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52077#pullrequestreview-100179217",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2658a135-747e-46ae-8e2a-912957555d73",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "ditto re: entrypoint vs init",
        "createdAt" : "2018-02-28T18:49:38Z",
        "updatedAt" : "2018-03-01T06:18:32Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      }
    ],
    "commit" : "b888415ebf0eb97b68c47222f5bca1ed79567bf7",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +5173,5177 @@\t// +optional\n\tRunAsUser *int64 `json:\"runAsUser,omitempty\" protobuf:\"varint,4,opt,name=runAsUser\"`\n\t// The GID to run the entrypoint of the container process.\n\t// Uses runtime default if unset.\n\t// May also be set in PodSecurityContext.  If set in both SecurityContext and"
  },
  {
    "id" : "b7ec3dea-59bb-4c05-bc4f-ef6540b1f3f4",
    "prId" : 51638,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51638#pullrequestreview-59623463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcea2f2c-961c-4feb-a21b-a82242f657a0",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "yay",
        "createdAt" : "2017-08-30T16:53:42Z",
        "updatedAt" : "2017-09-01T12:26:04Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d2be1c521dc7f93ae3f83dd123199963598c938",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2952,2956 @@\n// +genclient\n// +genclient:method=GetScale,verb=get,subresource=scale,result=k8s.io/api/extensions/v1beta1.Scale\n// +genclient:method=UpdateScale,verb=update,subresource=scale,input=k8s.io/api/extensions/v1beta1.Scale,result=k8s.io/api/extensions/v1beta1.Scale\n// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object"
  },
  {
    "id" : "6c923a74-b2f6-44c3-b596-a315e741fe56",
    "prId" : 51530,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51530#pullrequestreview-77601366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eea61a0d-2a24-4060-a390-6ce5db89c542",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Why is the JSON and internal name different?  Is this backwards compatible?  Or was this introduced when copied?\r\n\r\nMake the internal name consistent with the JSON name unless there is a good reason.",
        "createdAt" : "2017-09-01T15:46:15Z",
        "updatedAt" : "2017-11-18T20:05:48Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "a6b121d9-bd24-4c24-b52c-26e4784144bd",
        "parentId" : "eea61a0d-2a24-4060-a390-6ce5db89c542",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "This was preexisting. The json and protobuf tags cannot change, as this has to be able to deserialize existing objects. the field name can change (but should be a follow up, and address ISCSIVolumeSource as well)",
        "createdAt" : "2017-09-01T15:50:34Z",
        "updatedAt" : "2017-11-18T20:05:48Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "747358c5-963f-4d2c-8ff7-fa859dacfdbf",
        "parentId" : "eea61a0d-2a24-4060-a390-6ce5db89c542",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Changing proto field names breaks compilation of proto clients and any cases (typically tests) using ASCII proto representations.",
        "createdAt" : "2017-11-18T01:24:13Z",
        "updatedAt" : "2017-11-18T20:05:49Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "4e39d033-3b6b-44bb-bd28-ccc6dd535486",
        "parentId" : "eea61a0d-2a24-4060-a390-6ce5db89c542",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "We need a linter check that all these names match.",
        "createdAt" : "2017-11-18T01:25:20Z",
        "updatedAt" : "2017-11-18T20:05:49Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "56ec6e10287c19c1a5fac574659b2809a61c734b",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +1311,1315 @@\t// whether support iSCSI Discovery CHAP authentication\n\t// +optional\n\tDiscoveryCHAPAuth bool `json:\"chapAuthDiscovery,omitempty\" protobuf:\"varint,8,opt,name=chapAuthDiscovery\"`\n\t// whether support iSCSI Session CHAP authentication\n\t// +optional"
  },
  {
    "id" : "4f3f021b-4781-41f0-8049-7e704f377ee7",
    "prId" : 51530,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51530#pullrequestreview-60172804",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5a1ce4d-9fcc-414e-81bf-34f3b247ac7a",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Same comment here.",
        "createdAt" : "2017-09-01T15:46:21Z",
        "updatedAt" : "2017-11-18T20:05:48Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "56ec6e10287c19c1a5fac574659b2809a61c734b",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +1314,1318 @@\t// whether support iSCSI Session CHAP authentication\n\t// +optional\n\tSessionCHAPAuth bool `json:\"chapAuthSession,omitempty\" protobuf:\"varint,11,opt,name=chapAuthSession\"`\n\t// CHAP Secret for iSCSI target and initiator authentication\n\t// +optional"
  },
  {
    "id" : "633e3981-2c4c-4796-8b94-8975015ce103",
    "prId" : 50163,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50163#pullrequestreview-80356275",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75bba701-c9bc-431a-bf93-e738507bc32e",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Doesn't this break backward compatibility?",
        "createdAt" : "2017-11-30T22:39:41Z",
        "updatedAt" : "2017-11-30T22:39:41Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "e10cb395-5328-4449-b97a-857a9d0d431e",
        "parentId" : "75bba701-c9bc-431a-bf93-e738507bc32e",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : " Actually, the introduction of the non-pointer field broke compatibility, and this restored it ",
        "createdAt" : "2017-11-30T22:44:57Z",
        "updatedAt" : "2017-11-30T22:44:57Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1460efcf21b691a42fb690ad24f0c60cb2c636f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +740,744 @@\t// More info: http://kubernetes.io/docs/user-guide/volumes#emptydir\n\t// +optional\n\tSizeLimit *resource.Quantity `json:\"sizeLimit,omitempty\" protobuf:\"bytes,2,opt,name=sizeLimit\"`\n}\n"
  },
  {
    "id" : "9803db4f-3327-4ce9-a000-0a4b02345808",
    "prId" : 49112,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49112#pullrequestreview-73186835",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2dba7fd5-9f3a-432f-b18d-06407b48be31",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "now it's getting odd. I didn't expect all new (and party duplicated fields) to show up here in the old external type. This is really ugly as it makes the events object very complex for the user by interleaving basically two versions.",
        "createdAt" : "2017-08-15T08:42:58Z",
        "updatedAt" : "2017-11-22T18:52:01Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "14ef34dd-9d03-4f46-b512-6a3e51fb2676",
        "parentId" : "2dba7fd5-9f3a-432f-b18d-06407b48be31",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "@smarterclayton @deads2k @liggitt opinions?",
        "createdAt" : "2017-08-15T08:43:29Z",
        "updatedAt" : "2017-11-22T18:52:01Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "7db404d8-7090-469f-b50f-3ce2f8496124",
        "parentId" : "2dba7fd5-9f3a-432f-b18d-06407b48be31",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "The \"normal\" way is to add a new GroupVersion (we have that with events.k8s.io/v1beta1) with the extended information and use annotations in the old types to store additional info the types cannot express yet.",
        "createdAt" : "2017-08-15T08:45:51Z",
        "updatedAt" : "2017-11-22T18:52:01Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "ff1d9cbf-98f9-42a2-b468-c12362863c11",
        "parentId" : "2dba7fd5-9f3a-432f-b18d-06407b48be31",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "The thing is we have 'old' API which we need to fill. IIUC annotations are for adding 'new' data, not for preserving old. It's possible to do it if we create a new API and move the storage from Core to the new API group. I'm not convinced it's better in any way that current solution.",
        "createdAt" : "2017-08-15T15:55:30Z",
        "updatedAt" : "2017-11-22T18:52:01Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "d7e31cb1-5cce-4fbd-9794-548a8d516c14",
        "parentId" : "2dba7fd5-9f3a-432f-b18d-06407b48be31",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "IMO we make the old api extremely ugly this way. Technically adding elements to an old API is possible of course, but I have my doubt we want that. /cc @smarterclayton @deads2k opinions here?",
        "createdAt" : "2017-08-15T15:58:59Z",
        "updatedAt" : "2017-11-22T18:52:01Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "40f60b9d-0092-4367-b3cb-2d19d4b7650f",
        "parentId" : "2dba7fd5-9f3a-432f-b18d-06407b48be31",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We typically have added fields.  It might make sense to collect those fields all together under a struct that contains them and makes it clear these are new fields that may overlap with the old fields.",
        "createdAt" : "2017-08-29T17:33:29Z",
        "updatedAt" : "2017-11-22T18:52:01Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "883833b3-c047-48e6-a6a5-a296bcd8d765",
        "parentId" : "2dba7fd5-9f3a-432f-b18d-06407b48be31",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "I'm fine with that, though it'll make the conversion function even uglier and field selectors harder to use. I'll update this PR with new API once the discussion on how to name stuff will be concluded.",
        "createdAt" : "2017-08-30T07:52:59Z",
        "updatedAt" : "2017-11-22T18:52:01Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "92c65057-77d7-4be9-a096-791ac5f73659",
        "parentId" : "2dba7fd5-9f3a-432f-b18d-06407b48be31",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Note that some of the existing fields are reused, so that new uses of the API show some information via the old API, so it's not as simple as old vs new. I dropped a link to the proposal working doc so you can see how we got here.\r\n\r\nI do think it would make sense to reorder the fields as in events/types.go, and to update comments here about the new preferred fields. \r\n\r\nI do not think we should make the new fields seem less first-class here than the old ones by nesting them or prefixing them with `new` or anything.\r\n\r\nWe should update the type comment to remove the TODO (why should users care?), indicate that this API will be deprecated once the events Event API reaches v1, and encourage developers and other users to try the new API. We can't deprecate this until then, according to our deprecation policy, but we can suggest that people writing new clients should use the new API.\r\n\r\n\r\n\r\n",
        "createdAt" : "2017-10-20T15:32:28Z",
        "updatedAt" : "2017-11-22T18:52:01Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "7b88c7e2-87a1-4ea0-b5a4-3cedf16c7543",
        "parentId" : "2dba7fd5-9f3a-432f-b18d-06407b48be31",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Done.",
        "createdAt" : "2017-10-31T14:24:49Z",
        "updatedAt" : "2017-11-22T18:52:01Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef6f0b8c6e73fb8167e5debf7641f30a62c4e30c",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +4511,4515 @@\t// Time when this Event was first observed.\n\t// +optional\n\tEventTime metav1.MicroTime `json:\"eventTime,omitempty\" protobuf:\"bytes,10,opt,name=eventTime\"`\n\n\t// Data about the Event series this event represents or nil if it's a singleton Event."
  },
  {
    "id" : "96093b43-2e28-435d-9881-038e21344e74",
    "prId" : 49112,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49112#pullrequestreview-78380148",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b896503-ca28-4450-84eb-bc418bf37f8a",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Could also be `Unknown`?",
        "createdAt" : "2017-11-21T23:35:57Z",
        "updatedAt" : "2017-11-22T18:52:01Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "ad8bcf5c-5975-42d4-8001-f7c1a7fb3b4a",
        "parentId" : "3b896503-ca28-4450-84eb-bc418bf37f8a",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Good catch. Thx.",
        "createdAt" : "2017-11-22T09:31:32Z",
        "updatedAt" : "2017-11-22T18:52:01Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef6f0b8c6e73fb8167e5debf7641f30a62c4e30c",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +4541,4545 @@\t// Time of the last occurence observed\n\tLastObservedTime metav1.MicroTime `json:\"lastObservedTime,omitempty\" protobuf:\"bytes,2,name=lastObservedTime\"`\n\t// State of this Series: Ongoing or Finished\n\tState EventSeriesState `json:\"state,omitempty\" protobuf:\"bytes,3,name=state\"`\n}"
  },
  {
    "id" : "9f97bb7e-4c9e-4338-afd2-c4845db70b8f",
    "prId" : 47019,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47019#pullrequestreview-59268139",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e862536-2995-4198-894e-5ba9a8da5aad",
        "parentId" : null,
        "authorId" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "body" : "@jessfraz Are we missing the case \"when a container is not run as root\" here?",
        "createdAt" : "2017-08-29T14:32:44Z",
        "updatedAt" : "2017-08-29T14:32:44Z",
        "lastEditedBy" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "tags" : [
        ]
      },
      {
        "id" : "0ac9fe69-5cee-414a-bd28-561596f3291c",
        "parentId" : "0e862536-2995-4198-894e-5ba9a8da5aad",
        "authorId" : "ffc157a5-b8d0-4a06-b942-f8e5150e4215",
        "body" : "We got rid of that functionality",
        "createdAt" : "2017-08-29T14:36:08Z",
        "updatedAt" : "2017-08-29T14:36:08Z",
        "lastEditedBy" : "ffc157a5-b8d0-4a06-b942-f8e5150e4215",
        "tags" : [
        ]
      },
      {
        "id" : "2ab0b4f2-d326-4b57-980b-c2a4d1ecd45a",
        "parentId" : "0e862536-2995-4198-894e-5ba9a8da5aad",
        "authorId" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "body" : "And the proposal is outdated now? https://github.com/kubernetes/community/blob/f149433600ff1795521e7d9f2ae8ff3162394c61/contributors/design-proposals/no-new-privs.md#changes-of-securitycontext-objects",
        "createdAt" : "2017-08-29T14:43:46Z",
        "updatedAt" : "2017-08-29T14:43:46Z",
        "lastEditedBy" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "tags" : [
        ]
      },
      {
        "id" : "a2fa32d3-2485-45f5-897d-43d7e6e89c9a",
        "parentId" : "0e862536-2995-4198-894e-5ba9a8da5aad",
        "authorId" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "body" : "Also some tests can be deleted then: https://github.com/kubernetes/kubernetes/blob/28f6b3fcc037c3a21048160d062f6d544081bd71/pkg/securitycontext/util_test.go#L203-L212",
        "createdAt" : "2017-08-29T14:49:27Z",
        "updatedAt" : "2017-08-29T14:49:27Z",
        "lastEditedBy" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5e4c6f6ed0d441d8fd17a18416556f7621eeb56",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +4619,4623 @@\t// AllowPrivilegeEscalation is true always when the container is:\n\t// 1) run as Privileged\n\t// 2) has CAP_SYS_ADMIN\n\t// +optional\n\tAllowPrivilegeEscalation *bool `json:\"allowPrivilegeEscalation,omitempty\" protobuf:\"varint,7,opt,name=allowPrivilegeEscalation\"`"
  },
  {
    "id" : "4caac6d4-622d-452c-a534-cdc42b318096",
    "prId" : 43016,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43016#pullrequestreview-62257708",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2da86406-7068-4858-be17-def362a9cb07",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Isn't it a breaking API change in beta type?",
        "createdAt" : "2017-09-12T20:18:11Z",
        "updatedAt" : "2017-09-12T20:18:11Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "0f65ec42-9671-4557-85a4-a26ad5ab53db",
        "parentId" : "2da86406-7068-4858-be17-def362a9cb07",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "wire serialization remains compatible.\r\n\r\nthe old version encoded zero values to:\r\n*  json: `timeAdded: null`\r\n*  proto: 0x22 tag with zero length value\r\n\r\nthe new version omits zero values from the wire format\r\n\r\nthe new version successfully decodes zero values from the old version\r\n\r\nthe old version treats missing values as the zero value when decoding\r\n",
        "createdAt" : "2017-09-12T20:36:52Z",
        "updatedAt" : "2017-09-12T20:36:52Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe6af20910665e5d5faf294eb90e8db7a2735bf1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2467,2471 @@\t// It is only written for NoExecute taints.\n\t// +optional\n\tTimeAdded *metav1.Time `json:\"timeAdded,omitempty\" protobuf:\"bytes,4,opt,name=timeAdded\"`\n}\n"
  }
]