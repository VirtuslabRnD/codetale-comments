[
  {
    "id" : "744e78db-7c7c-46c7-8303-88227c69cba1",
    "prId" : 84971,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84971#pullrequestreview-315214368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0814ce5-5d65-4fc6-828c-a9ba0dc15d97",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "do we really need to leave a deprecation message in api doc? I mean it is alpha state, what is the guidance here?\r\n",
        "createdAt" : "2019-11-08T23:23:20Z",
        "updatedAt" : "2019-11-12T17:04:31Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "6d09d8b8-0fb5-464b-b9c8-b7d8e03b2efe",
        "parentId" : "c0814ce5-5d65-4fc6-828c-a9ba0dc15d97",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "I think it's better to be safe here, but also curious what api-reviewers say.",
        "createdAt" : "2019-11-11T18:54:57Z",
        "updatedAt" : "2019-11-12T17:04:31Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      },
      {
        "id" : "ae8689b4-4d4f-4adf-a739-1aa4a87cf665",
        "parentId" : "c0814ce5-5d65-4fc6-828c-a9ba0dc15d97",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "Looks like deprecation is the thing to do here (if I'm understanding comments below correctly).",
        "createdAt" : "2019-11-11T23:22:26Z",
        "updatedAt" : "2019-11-12T17:04:31Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0fa9981e0106d7f0d6f9c88fc49d4cdf779c95c1",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +63,67 @@\t// and IPv6 adddress types. New resources with this address type will be\n\t// considered invalid. This will be fully removed in 1.18.\n\t// +deprecated\n\tAddressTypeIP = AddressType(\"IP\")\n\t// AddressTypeIPv4 represents an IPv4 Address."
  },
  {
    "id" : "405107a0-ca4e-4d9d-baa4-9c80b3f3609c",
    "prId" : 84091,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84091#pullrequestreview-306240859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "444c5c6f-2a8f-4ca0-b33d-ef508b1d10ea",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "If people use this and roll back to a prior version, the objects will not pass validation any longer.",
        "createdAt" : "2019-10-23T19:00:14Z",
        "updatedAt" : "2019-10-24T20:56:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "2993113b-ff4a-4e00-aedd-c8a75626fd01",
        "parentId" : "444c5c6f-2a8f-4ca0-b33d-ef508b1d10ea",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "@lavalamp Good catch, what's the best way to add a type like this? Is it better to add a change like this along with a new API version like betav1?",
        "createdAt" : "2019-10-23T20:21:36Z",
        "updatedAt" : "2019-10-24T20:56:20Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      },
      {
        "id" : "57abcd3f-2ee2-4303-aead-38af13326ba9",
        "parentId" : "444c5c6f-2a8f-4ca0-b33d-ef508b1d10ea",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Or in this case, v1alpha2. But things still have to be round-trippable, so that doesn't really help. The actual way to make this safe is to release a version that understands the new address type, but doesn't permit new instances of it, followed by a next version that both understands and permits usages.\r\n\r\nWe generally permit alpha APIs to break things, so it might be OK to not do that dance. (@liggitt can confirm?)",
        "createdAt" : "2019-10-23T20:43:15Z",
        "updatedAt" : "2019-10-24T20:56:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "fe5304d5-7f4e-46b5-a7df-720446fcf077",
        "parentId" : "444c5c6f-2a8f-4ca0-b33d-ef508b1d10ea",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> If people use this and roll back to a prior version\r\n\r\nThe primary concern with alpha-level APIs (and fields) is around schema type compatibility, not API server validation. If this was changing the **type** of the field, it should do so in a new version to ensure no client written against the v1alpha1 API got a type error trying to decode an API server response. That API server with that new version should either round-trip it v1alpha1 or drop v1alpha1 entirely (which is [allowed on a release boundary](https://kubernetes.io/docs/reference/using-api/deprecation-policy/#deprecating-parts-of-the-api)) and release note that existing persisted v1alpha1 endpointslices must be deleted before upgrading.\r\n\r\nIf the question is just about adding an allowed enum value to validation, that's worth a release note, but not a version bump in my opinion. Full support for upgrade/rollback of alpha/experimental features is not claimed.\r\n\r\n> The actual way to make this safe is to release a version that understands the new address type, but doesn't permit new instances of it, followed by a next version that both understands and permits usages.\r\n\r\nThat is the dance we would require for a field/resource that was beta level or above, correct.",
        "createdAt" : "2019-10-23T21:03:50Z",
        "updatedAt" : "2019-10-24T20:56:20Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c34e836f-1e3c-4132-9006-ad58a41eecc9",
        "parentId" : "444c5c6f-2a8f-4ca0-b33d-ef508b1d10ea",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "> If the question is just about adding an allowed enum value to validation\r\n\r\nIt's worse than that, the different enum effectively changes the behavior of a string field; the old system only understands IP addresses, now the new one will also permit FQDNs to be stored there. ",
        "createdAt" : "2019-10-23T21:10:32Z",
        "updatedAt" : "2019-10-24T20:56:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a1579372-cd8b-4168-823a-faf7985defdd",
        "parentId" : "444c5c6f-2a8f-4ca0-b33d-ef508b1d10ea",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> It's worse than that, the different enum effectively changes the behavior of a string field; the old system only understands IP addresses, now the new one will also permit FQDNs to be stored there.\r\n\r\nIf it's still type-compatible (and especially if any old data is still valid and behaves the same), that seems like an in-bounds change for an alpha-level API.",
        "createdAt" : "2019-10-23T21:18:59Z",
        "updatedAt" : "2019-10-24T20:56:20Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "5777bfd9-40e7-4af4-a101-86a5f465f6ec",
        "parentId" : "444c5c6f-2a8f-4ca0-b33d-ef508b1d10ea",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, my original note was mostly meant to be informational.",
        "createdAt" : "2019-10-23T21:26:23Z",
        "updatedAt" : "2019-10-24T20:56:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "f67fd36a-e4f1-4bfe-a021-a4cfacc1b119",
        "parentId" : "444c5c6f-2a8f-4ca0-b33d-ef508b1d10ea",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "Thanks for the clarification @liggitt and @lavalamp! The plan is for this API to graduate to beta in 1.17 but we'd still like to leave the option open of adding additional address types in the future. Would the best approach here be to not prevent the creation of EndpointSlices with unrecognized address types here and maybe add some kind of soft error like an event? Consumers of this API (primarily kube-proxy at this point) would then just have to filter out address types they could not handle (already necessary with this FQDN update).",
        "createdAt" : "2019-10-23T21:43:40Z",
        "updatedAt" : "2019-10-24T20:56:20Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      },
      {
        "id" : "7cb4d99e-c34a-49f7-ad22-751fddb631d9",
        "parentId" : "444c5c6f-2a8f-4ca0-b33d-ef508b1d10ea",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "No, that lets people put in land mines (e.g., it's unrecognized today, but tomorrow it's recognized and also invalid because it was entered incorrectly).\r\n\r\nAdding new address types in a beta or GA API will require the laborious dance I described.\r\n\r\nI recommend that you figure out the types you will eventually want, and put recognition and validation code in place, and just prevent folks from making new instances of the ones you're not ready for. Then you'll have pre-done the first step of the dance and you can enable them in one release.\r\n\r\nHowever! Let me mention another potential failure mode: using these (e.g., via controller) in the same release that you enable them in apiserver. This means that the new controller, should it happen to talk to an old apiserver, will break. In theory, folks should upgrade apiserver first, but in practice, I'm not sure everyone does the upgrade in the right order (in fact, I am sure that some do not do so).",
        "createdAt" : "2019-10-23T21:58:21Z",
        "updatedAt" : "2019-10-24T20:56:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "0e34b7f2-884d-4459-959a-f69a2cc60d15",
        "parentId" : "444c5c6f-2a8f-4ca0-b33d-ef508b1d10ea",
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "It is hard to design for hypothetical as we do not have concrete use cases for now. We entertain a few ideas, but there is no easy way to add more address types after beta. (assuming we can make breaking change in alpha) For the consumer/producer of the EndpointSlice we control, we can safe guard its internals by filtering specific types so that they are ignoring future types. \r\n\r\nIt looks inevitable to go thru the 2-release process for  introducing new types in the future.   ",
        "createdAt" : "2019-10-23T23:05:12Z",
        "updatedAt" : "2019-10-24T20:56:20Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      }
    ],
    "commit" : "d410bd28c371fbb8c9b07feb8c4bc1fef018173f",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +64,68 @@\tAddressTypeIP = AddressType(\"IP\")\n\t// AddressTypeFQDN represents a Fully Qualified Domain Name.\n\tAddressTypeFQDN = AddressType(\"FQDN\")\n)\n"
  },
  {
    "id" : "f7a83f14-6537-4081-b347-2c9c14fda8fc",
    "prId" : 84091,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84091#pullrequestreview-306839485",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26acf8df-e599-409c-8e2e-8d2f5830cedf",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Does IP mean just IPv4 or both that an v6? If just v4, maybe you should add a v6? If it means both, then the documentation [below](https://github.com/kubernetes/kubernetes/pull/84091/files#diff-d12d4e96fc00e14e7c2bd68e23fd2284R67-R68) is confusing and should be explained:\r\n\r\n> The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. This allows for cases like dual-stack (IPv4 and IPv6) networking.",
        "createdAt" : "2019-10-24T20:02:12Z",
        "updatedAt" : "2019-10-24T20:56:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "0496ab36-7be3-4e46-b65f-85dc7f215a5b",
        "parentId" : "26acf8df-e599-409c-8e2e-8d2f5830cedf",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "This is currently meant to include both v4 and v6 addresses. When created by the EndpointSlice controller, this mirrors the value of `PodIPs` on the corresponding Pod (also containing v4 and v6 addresses). I'll update the comment to clarify that. It's also worth noting that there is some ongoing discussion around the merits of separating this into separate attributes, so there's a chance this could change before the next release.",
        "createdAt" : "2019-10-24T20:20:47Z",
        "updatedAt" : "2019-10-24T20:56:20Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d410bd28c371fbb8c9b07feb8c4bc1fef018173f",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +62,66 @@\t// AddressTypeIP represents an IP Address. Inclusive of IPv4 and IPv6\n\t// addresses.\n\tAddressTypeIP = AddressType(\"IP\")\n\t// AddressTypeFQDN represents a Fully Qualified Domain Name.\n\tAddressTypeFQDN = AddressType(\"FQDN\")"
  },
  {
    "id" : "47b06e13-852b-4305-975c-6ae4c5671768",
    "prId" : 80766,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80766#pullrequestreview-274576365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1d48377-3cff-4877-bfad-5312fc9fc984",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "all same comments from internal\r\n\r\n",
        "createdAt" : "2019-08-13T23:42:24Z",
        "updatedAt" : "2019-08-26T21:50:24Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "f80cee928040ad458fbced70392063e0a5d160e5",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +15,19 @@*/\n\npackage v1alpha1\n\nimport ("
  }
]