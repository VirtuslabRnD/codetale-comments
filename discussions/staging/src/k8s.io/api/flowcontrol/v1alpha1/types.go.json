[
  {
    "id" : "ead6c5fe-491d-4ad1-ba03-7d1c8374e9ee",
    "prId" : 96527,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96527#pullrequestreview-530150861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4294040-85e8-469c-a858-ca888f124d52",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "introduction of beta should deprecate alpha, right? I expected to see something like this added for these types:\r\n\r\n```\r\n// +k8s:prerelease-lifecycle-gen:deprecated=1.20\r\n// +k8s:prerelease-lifecycle-gen:removed=1.21\r\n// +k8s:prerelease-lifecycle-gen:replacement=flowcontrol.apiserver.k8s.io,v1beta1,FlowSchema\r\n```\r\n",
        "createdAt" : "2020-11-13T15:20:43Z",
        "updatedAt" : "2020-11-13T23:21:24Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "642b11483030e5aedbd6f43aeac3cbe40255b3b6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +61,65 @@// +genclient:nonNamespaced\n// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object\n// +k8s:prerelease-lifecycle-gen:introduced=1.18\n// +k8s:prerelease-lifecycle-gen:deprecated=1.20\n// +k8s:prerelease-lifecycle-gen:removed=1.21"
  },
  {
    "id" : "a7128820-f055-46c9-81b7-add653b9359c",
    "prId" : 84771,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84771#pullrequestreview-311802143",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7e53a38-d038-4f23-bba4-4124afb2dc51",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "if the future-us factor a new rate-based limit type, we will rename `assuredConcurrencyShares` to `assuredShares` nest it into a union structure, right?",
        "createdAt" : "2019-11-05T08:11:00Z",
        "updatedAt" : "2019-11-13T16:06:35Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "fa87d2e0-4ee1-4a5f-9b2c-da4966bfc6d6",
        "parentId" : "e7e53a38-d038-4f23-bba4-4124afb2dc51",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "yes and no.  The overall approach is right: if future-us (or anybody else) decides to generalize how the limiting is done then this field gets replaced with a union.  That union should be done the usual way: be a struct with a discriminator and an optional field per arm.",
        "createdAt" : "2019-11-05T15:09:40Z",
        "updatedAt" : "2019-11-13T16:06:35Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9bc2bcf620fccd319e6e4b1b67c5426c87052ec",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +375,379 @@\t// This field has a default value of 30.\n\t// +optional\n\tAssuredConcurrencyShares int32 `json:\"assuredConcurrencyShares\" protobuf:\"varint,1,opt,name=assuredConcurrencyShares\"`\n\n\t// `limitResponse` indicates what to do with requests that can not be executed right now"
  },
  {
    "id" : "79e9a925-7f55-4da6-bc96-bdeb35243a36",
    "prId" : 84771,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84771#pullrequestreview-311802963",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88792429-49ac-4628-a52a-00f537f9c32a",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "need `// +union` a tag here\r\n\r\n",
        "createdAt" : "2019-11-05T08:14:14Z",
        "updatedAt" : "2019-11-13T16:06:35Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "bdb964c6-b137-46d2-8a7e-6662b50601ba",
        "parentId" : "88792429-49ac-4628-a52a-00f537f9c32a",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Yes, here and on the other union type.",
        "createdAt" : "2019-11-05T15:10:43Z",
        "updatedAt" : "2019-11-13T16:06:35Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9bc2bcf620fccd319e6e4b1b67c5426c87052ec",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +323,327 @@// PriorityLevelConfigurationSpec specifies the configuration of a priority level.\n// +union\ntype PriorityLevelConfigurationSpec struct {\n\t// `type` indicates whether this priority level is subject to\n\t// limitation on request execution.  A value of `\"Exempt\"` means"
  },
  {
    "id" : "c7efe1f5-d941-4099-82e6-2626e23e81a9",
    "prId" : 84771,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84771#pullrequestreview-315275751",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acd74f1a-2e48-409c-af56-a9956663b290",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "`Queue` can be a good default value for this field given that `Drop` is mainly for the catch-all PL",
        "createdAt" : "2019-11-11T07:36:18Z",
        "updatedAt" : "2019-11-13T16:06:35Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "441dc92a-06ce-4149-9924-d9f7d042c517",
        "parentId" : "acd74f1a-2e48-409c-af56-a9956663b290",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Arguably, \"drop\" is actually the current behavior, so it should be the default :)",
        "createdAt" : "2019-11-11T17:00:27Z",
        "updatedAt" : "2019-11-13T16:06:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "aeafeb73-b62b-4c2a-b9fe-635d4e16caec",
        "parentId" : "acd74f1a-2e48-409c-af56-a9956663b290",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I think it is reasonable to require an explicit declaration here.  If we had a default here, and a default everywhere else, that would allow a completely empty spec.  That would look odd.",
        "createdAt" : "2019-11-11T17:52:10Z",
        "updatedAt" : "2019-11-13T16:06:35Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "23591d54-415c-4f92-9f3a-da75a1f857bd",
        "parentId" : "acd74f1a-2e48-409c-af56-a9956663b290",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "@lavalamp \"drop\" indeed aligns w/ the legacy max-inflight handler",
        "createdAt" : "2019-11-12T03:21:44Z",
        "updatedAt" : "2019-11-13T16:06:35Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9bc2bcf620fccd319e6e4b1b67c5426c87052ec",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +392,396 @@\t// Required.\n\t// +unionDiscriminator\n\tType LimitResponseType `json:\"type\" protobuf:\"bytes,1,opt,name=type\"`\n\n\t// `queuing` holds the configuration parameters for queuing."
  },
  {
    "id" : "92c6e254-16a9-4596-b7f8-0c5779e34ed7",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-305374935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29233177-f114-4eed-916c-fb2807adf36f",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "required?",
        "createdAt" : "2019-10-10T12:49:08Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "18b54822-83a5-446c-bbd4-c3e54f368ed4",
        "parentId" : "29233177-f114-4eed-916c-fb2807adf36f",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "It is logically required.  So there should be a comment saying so, and the field tag should not say it is optional in protobuf.",
        "createdAt" : "2019-10-10T18:17:16Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "6fc59eb5-7806-44a2-b746-66ae1fabc10d",
        "parentId" : "29233177-f114-4eed-916c-fb2807adf36f",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "added `// Required.` to the comment",
        "createdAt" : "2019-10-11T06:54:22Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "f01ee3f7-8b1f-42b6-b51c-740ba54ffdbb",
        "parentId" : "29233177-f114-4eed-916c-fb2807adf36f",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The field tag is inconsistent regarding optionality",
        "createdAt" : "2019-10-11T15:24:19Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "5a757d1d-8df6-4d8c-a215-9b851922a428",
        "parentId" : "29233177-f114-4eed-916c-fb2807adf36f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "opt in proto should still be fine, since we want to give people a validation error if they omit and not a proto-parsing-error.\r\n\r\nIn either case, it's only \"required\" (in the sense that a user not setting it will lead to an invalid name) if validation treats \"\" as an invalid name.",
        "createdAt" : "2019-10-21T17:37:04Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b8ec600f-b600-4dec-81e6-b5f0ccf9eee8",
        "parentId" : "29233177-f114-4eed-916c-fb2807adf36f",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The \"opt\" is in the protobuf here not because this field is in any sense optional (it is not) but rather because @deads2k told us that every field should be marked \"opt\" or \"rep\" in the protobuf.",
        "createdAt" : "2019-10-22T17:19:44Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +133,137 @@\t// `name` is the name of the priority level configuration being referenced\n\t// Required.\n\tName string `json:\"name\" protobuf:\"bytes,1,opt,name=name\"`\n}\n"
  },
  {
    "id" : "a3d6ca0e-fa37-4cec-9e15-63b38a84d6b7",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-300502258",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc6b646d-ed6c-436d-a1cb-847f66f47f2a",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "list the known methods in the godoc",
        "createdAt" : "2019-10-10T12:50:16Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "848f91c6-a440-4ad6-a012-c285f560d83b",
        "parentId" : "cc6b646d-ed6c-436d-a1cb-847f66f47f2a",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> list the known methods in the godoc\r\n\r\nalong with a hint about when to use each one.",
        "createdAt" : "2019-10-10T13:04:48Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "5b11bfcc-94ff-43da-8365-7e2c52e5a56a",
        "parentId" : "cc6b646d-ed6c-436d-a1cb-847f66f47f2a",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "See further discussion under FlowDistinguisherMethod",
        "createdAt" : "2019-10-10T18:08:28Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "3538532b-1f18-4b9c-a2a0-879d155921ed",
        "parentId" : "cc6b646d-ed6c-436d-a1cb-847f66f47f2a",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "added comment to the end\r\n\r\n```\r\n// The supported types are \"ByUser\" and \"ByNamespace\".\r\n```",
        "createdAt" : "2019-10-11T07:12:26Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +93,97 @@\tMatchingPrecedence int32 `json:\"matchingPrecedence\" protobuf:\"varint,2,opt,name=matchingPrecedence\"`\n\t// `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema.\n\t// `nil` specifies that the distinguisher is disabled and thus will always be the empty string.\n\t// +optional\n\tDistinguisherMethod *FlowDistinguisherMethod `json:\"distinguisherMethod,omitempty\" protobuf:\"bytes,3,opt,name=distinguisherMethod\"`"
  },
  {
    "id" : "9b771a17-da04-46d7-8d7b-d42bf3eea21e",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-300497277",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a15ea94-3729-4eaa-a44b-7df054ffcdc0",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Ah, this is the spot to describe the things from https://github.com/kubernetes/kubernetes/pull/83671/files#r333499642",
        "createdAt" : "2019-10-10T13:06:08Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "33ea5025-207f-4602-911b-70851a0329ba",
        "parentId" : "3a15ea94-3729-4eaa-a44b-7df054ffcdc0",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Following is suggested text.\r\n\r\n> The value FlowDistinguisherMethodByUserType provides some insulation between users.\r\n> The value FlowDistinguisherMethodByNamespaceType provides some insulation between tenants when each namespace is dedicated to a tenant.\r\n\r\nAlso, this field is not optional; do we want the field tag saying it is?",
        "createdAt" : "2019-10-10T18:15:27Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "c15044b7-0ebf-49e9-b796-b340017138e0",
        "parentId" : "3a15ea94-3729-4eaa-a44b-7df054ffcdc0",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "applied the suggestion",
        "createdAt" : "2019-10-11T06:59:37Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +123,127 @@// FlowDistinguisherMethod specifies the method of a flow distinguisher.\ntype FlowDistinguisherMethod struct {\n\t// `type` is the type of flow distinguisher method\n\t// The supported types are \"ByUser\" and \"ByNamespace\".\n\t// Required."
  },
  {
    "id" : "b94e28b5-1d3c-42c1-a9b2-d381c55e958f",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-300503218",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b94701b-ab97-4d4e-8bb0-14710d72be69",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "describe what happens if this is empty.  Does it match everyone or no one?",
        "createdAt" : "2019-10-10T13:07:17Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "f54a1877-a1e4-4843-9637-c0183e1c66c1",
        "parentId" : "4b94701b-ab97-4d4e-8bb0-14710d72be69",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The validation code forbids this to be empty.  The comment should say so, and should not say this field is optional.  Also, the field tag should not say `omitempty` and `opt`.",
        "createdAt" : "2019-10-10T18:18:23Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "3e85dfdb-258b-4e53-8cca-764ecc98ed04",
        "parentId" : "4b94701b-ab97-4d4e-8bb0-14710d72be69",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "```\r\n// There must be at least one subject for this field, or it will be rejected by the api validation.\r\n// Required.\r\n```\r\n\r\nadded more comments",
        "createdAt" : "2019-10-11T07:14:31Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 158,
    "diffHunk" : "@@ -1,1 +156,160 @@\t// and the target non-resource URL.\n\t// +listType=set\n\t// +optional\n\tNonResourceRules []NonResourcePolicyRule `json:\"nonResourceRules,omitempty\" protobuf:\"bytes,3,opt,name=nonResourceRules\"`\n}"
  },
  {
    "id" : "2176f24f-622f-41b6-bcd4-047a9dfc312a",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-300509633",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9375d847-6a12-454f-b7c0-55ad1924a899",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "tell me what the default is.\r\n\r\nBasically, I expect a user to be able to create this empty and we'll get a configuration that we think will work reasonably well for let's say a 50 node cluster, with 500 namespaces (three pods each), and 100 users.",
        "createdAt" : "2019-10-10T13:23:41Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "d618fc17-2b29-4fdd-bc0f-2d8ad0d1a3c5",
        "parentId" : "9375d847-6a12-454f-b7c0-55ad1924a899",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The comment says \"The value must be positive for a non-exempt priority level\".  There is no default value for this field in a non-exempt priority level.  For an exempt priority level this field is moot and the validation insists that it be zero.",
        "createdAt" : "2019-10-10T19:09:41Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "3868970b-df31-4e59-94c2-eb4b53f56248",
        "parentId" : "9375d847-6a12-454f-b7c0-55ad1924a899",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "the field is not optional. i replaced w/ `// Required.`",
        "createdAt" : "2019-10-11T07:28:42Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 397,
    "diffHunk" : "@@ -1,1 +395,399 @@\t// excess requests are rejected.  This value must be positive.  If\n\t// not specified, it will be defaulted to 50.\n\t// +optional\n\tQueueLengthLimit int32 `json:\"queueLengthLimit\" protobuf:\"varint,4,opt,name=queueLengthLimit\"`\n}"
  },
  {
    "id" : "13b7fe70-ce1a-45da-85a9-32f3e249fe45",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-300511450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6282826a-5050-4c2a-81ab-2401c209c770",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The comment says \"required\" but the field tag says optional.  Isn't this a problem?",
        "createdAt" : "2019-10-10T18:03:39Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "1a4cbe62-1cf8-4f6b-9991-0015f5f0b14e",
        "parentId" : "6282826a-5050-4c2a-81ab-2401c209c770",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "agree, also the `omitempty` tag is useless here",
        "createdAt" : "2019-10-11T07:32:23Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "b2c8ea84-1015-4352-9116-f8b72e0ecad8",
        "parentId" : "6282826a-5050-4c2a-81ab-2401c209c770",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "removed the omitempty field tag",
        "createdAt" : "2019-10-11T07:32:37Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +84,88 @@\t// `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot\n\t// be resolved, the FlowSchema will be ignored and marked as invalid in its status.\n\t// Required.\n\tPriorityLevelConfiguration PriorityLevelConfigurationReference `json:\"priorityLevelConfiguration\" protobuf:\"bytes,1,opt,name=priorityLevelConfiguration\"`\n\t// `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen"
  },
  {
    "id" : "9c000b49-299a-4b1d-b85b-5edf9e90d26f",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-300511866",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e26ec25-b5a4-4c05-9d17-e5a63fc89031",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "There are several issues here with optional/required.\r\n\r\n1. The tag is inconsistent between json and protobuf.\r\n2. The text of the comment says this field is optional but the formal `// +optional` is missing.\r\n3. I think it is a bad idea to make this field optional.  We can address that in a follow-up PR; this field is optional in the feature branch.",
        "createdAt" : "2019-10-10T18:06:16Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "5b444e14-eb05-437b-bfd4-bb4358807bb2",
        "parentId" : "3e26ec25-b5a4-4c05-9d17-e5a63fc89031",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "added `// +optional`",
        "createdAt" : "2019-10-11T07:33:33Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +91,95 @@\t// Note that if the precedence is not specified or zero, it will be set to 1000 as default.\n\t// +optional\n\tMatchingPrecedence int32 `json:\"matchingPrecedence\" protobuf:\"varint,2,opt,name=matchingPrecedence\"`\n\t// `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema.\n\t// `nil` specifies that the distinguisher is disabled and thus will always be the empty string."
  },
  {
    "id" : "4849bc9c-1553-4eb2-9b5d-ed6878498f1e",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-300758140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "971c52e8-b92a-402c-818a-99d079aed77e",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Optionality inconsistencies here.",
        "createdAt" : "2019-10-10T18:34:30Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "b17f7f97-3987-41bc-9088-692f7b618f5d",
        "parentId" : "971c52e8-b92a-402c-818a-99d079aed77e",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "good catch, updated",
        "createdAt" : "2019-10-11T07:45:43Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "7329f6e8-2ca5-462f-a027-49b115de8078",
        "parentId" : "971c52e8-b92a-402c-818a-99d079aed77e",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Still inconsistent inside the field tag, and the comment is not explicit.",
        "createdAt" : "2019-10-11T15:31:03Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 265,
    "diffHunk" : "@@ -1,1 +263,267 @@\t// +listMapKey=type\n\t// +optional\n\tConditions []FlowSchemaCondition `json:\"conditions,omitempty\" protobuf:\"bytes,1,rep,name=conditions\"`\n}\n"
  },
  {
    "id" : "eeda2637-4ef1-47e7-834a-5a8615ff583a",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-300758140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7cd58cd-511c-4159-8a54-be94054e374a",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "A value of this type appears only when every field has a meaningful value.  So I think all the fields are required.  This should be stated in the comments somehow, and not contradicted in the field tags.",
        "createdAt" : "2019-10-10T19:06:05Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "53552e1a-0e01-46b4-8a6b-9ef3708fc073",
        "parentId" : "a7cd58cd-511c-4159-8a54-be94054e374a",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "it's copied/pasted from core/v1 package, and it's consistent w/ most other APIs. let's keep it.",
        "createdAt" : "2019-10-11T07:48:04Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "15876ec2-410d-4d9d-be00-0bf1c0b364d9",
        "parentId" : "a7cd58cd-511c-4159-8a54-be94054e374a",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "We are looking at an evolving code base, some old code is not following best practices.  I am not convinced we should leave this in its current inconsistent state.",
        "createdAt" : "2019-10-11T15:32:33Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 269,
    "diffHunk" : "@@ -1,1 +267,271 @@\n// FlowSchemaCondition describes conditions for a FlowSchema.\ntype FlowSchemaCondition struct {\n\t// `type` is the type of the condition.\n\t// Required."
  },
  {
    "id" : "8ebd8dfe-cd30-4f5c-b09a-e2f792654249",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-300518923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d6b918e-1f1f-46b9-b677-9740672f96b3",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Same issue wrt field optionality as for the other condition struct.",
        "createdAt" : "2019-10-10T19:21:17Z",
        "updatedAt" : "2019-10-29T05:00:22Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "8ac66076-0eb8-44b4-b645-2f74eff474ef",
        "parentId" : "7d6b918e-1f1f-46b9-b677-9740672f96b3",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "same as https://github.com/kubernetes/kubernetes/pull/83671#discussion_r333866597",
        "createdAt" : "2019-10-11T07:48:29Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 414,
    "diffHunk" : "@@ -1,1 +412,416 @@\n// PriorityLevelConfigurationCondition defines the condition of priority level.\ntype PriorityLevelConfigurationCondition struct {\n\t// `type` is the type of the condition.\n\t// Required."
  },
  {
    "id" : "054845cc-fd7f-40ec-b514-09a9da0653cb",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-300758140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73405113-ebb8-43f2-bda9-5cf1406e27b0",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The field tag still says this is optional in the protobuf.",
        "createdAt" : "2019-10-11T15:20:19Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +85,89 @@\t// be resolved, the FlowSchema will be ignored and marked as invalid in its status.\n\t// Required.\n\tPriorityLevelConfiguration PriorityLevelConfigurationReference `json:\"priorityLevelConfiguration\" protobuf:\"bytes,1,opt,name=priorityLevelConfiguration\"`\n\t// `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen\n\t// FlowSchema is among those with the numerically lowest (which we take to be logically highest)"
  },
  {
    "id" : "50c551c8-e864-4702-9caa-08086174cc18",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-300758140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cf41404-dd41-4e29-b011-35da4d1b4b8a",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The field tag still does not say this is optional in the JSON.",
        "createdAt" : "2019-10-11T15:21:20Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +91,95 @@\t// Note that if the precedence is not specified or zero, it will be set to 1000 as default.\n\t// +optional\n\tMatchingPrecedence int32 `json:\"matchingPrecedence\" protobuf:\"varint,2,opt,name=matchingPrecedence\"`\n\t// `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema.\n\t// `nil` specifies that the distinguisher is disabled and thus will always be the empty string."
  },
  {
    "id" : "5d3154c5-8cac-4622-b689-523551a17093",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-301855049",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "263a3c71-9b8e-4cb4-a4a5-e09db2df65eb",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "How about we move the enumeration of FlowDistinguisherMethodType values to here? Keeping related things together.\r\n",
        "createdAt" : "2019-10-14T13:58:08Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "533d912f-12fa-4cb9-9c5c-56e7aabd9fcf",
        "parentId" : "263a3c71-9b8e-4cb4-a4a5-e09db2df65eb",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "moved",
        "createdAt" : "2019-10-15T12:09:13Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +106,110 @@// FlowDistinguisherMethodType is the type of flow distinguisher method\ntype FlowDistinguisherMethodType string\n\n// These are valid flow-distinguisher methods.\nconst ("
  },
  {
    "id" : "ea75c4c8-c319-4634-a557-d707f6d91178",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-306283964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a046c5e-d5ad-4c83-b083-c322afeb3850",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "This comment still is written for the rbac context rather than its current context.\r\n\r\nThis comment should say that the list may not be empty.\r\n\r\nThis comment continues to promise more general treatment of wildcards than the implementation delivers.\r\n\r\nThe fact that rbac has more general wildcards suggests that API Priority and Fairness should too.",
        "createdAt" : "2019-10-14T14:52:21Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "69659583-795e-4172-bc64-2c5b220d684c",
        "parentId" : "1a046c5e-d5ad-4c83-b083-c322afeb3850",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "updated to:\r\n\r\n> \t// `nonResourceURLs` is a set of partial urls that a user should have access to.\r\n\t// \"*\" represents all non-resource urls.\r\n\t// Required.\r\n\r\n",
        "createdAt" : "2019-10-15T12:13:14Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "b9ffcb1b-4da6-4c11-bdcf-71ff5d508d12",
        "parentId" : "1a046c5e-d5ad-4c83-b083-c322afeb3850",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Since the more extensive commentary has been removed, it is no longer clear what is meant by \"partial URL\".  But any reasonable interpretation of that phrase is inconsistent with the implementation we have so far.",
        "createdAt" : "2019-10-17T04:05:00Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "37db13ba-b818-4c49-837b-8f8b02b83e75",
        "parentId" : "1a046c5e-d5ad-4c83-b083-c322afeb3850",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Instead of \"partial URLs\", maybe \"URL prefixes\"? An example would make this clearer.",
        "createdAt" : "2019-10-21T19:21:56Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "20184e66-3058-408a-be1a-4c62044d18ec",
        "parentId" : "1a046c5e-d5ad-4c83-b083-c322afeb3850",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I am OK with \"illegal\" iff validation rejects \"illegal\" things.",
        "createdAt" : "2019-10-23T21:44:04Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "b5887897-2ecb-4452-8591-58542c15ebe8",
        "parentId" : "1a046c5e-d5ad-4c83-b083-c322afeb3850",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "And let's not forget that we have not implemented what's documented here.",
        "createdAt" : "2019-10-24T02:08:43Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 255,
    "diffHunk" : "@@ -1,1 +253,257 @@\t// \"*\" matches all non-resource urls. if it is present, it must be the only entry.\n\t// +listType=set\n\t// Required.\n\tNonResourceURLs []string `json:\"nonResourceURLs\" protobuf:\"bytes,6,rep,name=nonResourceURLs\"`\n}"
  },
  {
    "id" : "27f01c48-110e-42ef-ae00-d4fecd0cb9b9",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-301322685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5bf7aa96-a82d-457b-bdc9-f1df7ca7a731",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Per the conversation _ending_ at https://kubernetes.slack.com/archives/GMDKKM5JP/p1570823892079400 (where I confirm the condition that @deads2k states), I think we should switch to the usual union structure here.  That will make the optionaly comments much less confusing.  Thus:\r\n\r\n```\r\ntype PriorityLevelConfigurationSpec struct {\r\n    // `nonExempt` holds the configuration if this priority level is _NOT_ exempt, and is empty if this priority level _IS_ exempt.\r\n    nonExempt *NonExemptPriorityLevelConfigurationSpec `json:\"nonExempt,omitempty\" protobuf:\"bytes,1,opt,name=nonExempt\"`\r\n}\r\n\r\n// NonExemptPriorityLevelConfigurationSpec is the configuration of a non-exempt priority level.\r\ntype NonExemptPriorityLevelConfigurationSpec struct {\r\n    ...\r\n}\r\n",
        "createdAt" : "2019-10-14T15:02:25Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 324,
    "diffHunk" : "@@ -1,1 +322,326 @@\n// PriorityLevelConfigurationSpec is specification of a priority level\ntype PriorityLevelConfigurationSpec struct {\n\t// `type` indicates whether this priority level does\n\t// queuing or is exempt.  Valid values are \"Queuing\" and \"Exempt\"."
  },
  {
    "id" : "df594de3-82e5-45da-81e6-930b675bd320",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-304667052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43541684-f861-40ec-a77a-e90b5666c542",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "in a true union type, this and namespace would be grouped by stanza and distinct.",
        "createdAt" : "2019-10-16T14:42:40Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "f830f392-9a15-441c-8585-9947fbae9375",
        "parentId" : "43541684-f861-40ec-a77a-e90b5666c542",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Are you suggesting something like the following?\r\n```\r\n// +union\r\ntype Subject struct {\r\n    // Required\r\n    // +unionDiscriminator\r\n    Kind SubjectKind `json:\"kind\" protobuf:\"bytes,1,opt,name=kind\"`\r\n    // +optional\r\n    User *NamedSubject `json:\"user,omitempty\" protobuf:\"bytes,2,opt,name=user\"`\r\n    // +optional\r\n    Group *NamedSubject `json:\"group,omitempty\" protobuf:\"bytes,3,opt,name=group\"`\r\n    // +optional\r\n    ServiceAccount *NamespaceNamedSubject `json:\"serviceAccount,omitempty\" protobuf:\"bytes,4,opt,name=serviceAccount\"`\r\n}\r\n\r\ntype SubjectKind string\r\nconst SubjectKindUser SubjectKind = \"User\"\r\nconst SubjectKindGroup SubjectKind = \"Group\"\r\nconst SubjectKindServiceAccount SubjectKind = \"ServiceAccount\"\r\n\r\ntype NamedSubject struct {\r\n    // Required\r\n    Name string `json:\"name\" protobuf:\"bytes,1,opt,name=name\"`\r\n}\r\n\r\ntype NamespaceNamedSubject struct {\r\n    // Required\r\n    Namespace string `json:\"namespace\" protobuf:\"bytes,1,opt,name=namespace\"`\r\n    // Required\r\n    Name string `json:\"name\" protobuf:\"bytes,2,opt,name=name\"`\r\n}\r\n```",
        "createdAt" : "2019-10-17T04:00:30Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "ca8cfe9f-78e6-4568-affc-bbc6144eb370",
        "parentId" : "43541684-f861-40ec-a77a-e90b5666c542",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "i updated the subject to union type. ",
        "createdAt" : "2019-10-21T15:51:46Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 210,
    "diffHunk" : "@@ -1,1 +208,212 @@\t// `name` is the name of matching ServiceAccount objects, or \"*\" to match regardless of name.\n\t// Required.\n\tName string `json:\"name\" protobuf:\"bytes,2,opt,name=name\"`\n}\n"
  },
  {
    "id" : "a0acfdaf-8151-4c27-9c4e-1ccd79f59cde",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-304727562",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f08f2973-d470-4f6f-8ab6-f8415fc38951",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "because I can have this without any rules in it, this is logically optional.  I suggest making it optional here too.",
        "createdAt" : "2019-10-16T14:44:39Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "ea1a3d95-8e14-4ee4-8995-7da8a09df735",
        "parentId" : "f08f2973-d470-4f6f-8ab6-f8415fc38951",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "If we make this field optional then this field becomes a regularity singularity.  This semantics of this struct are, at the outmost level, an AND (i.e., of (1) `subjects` and (2) the union of the two sets of rules).  Normally removing an item from an AND means that you don't care about the issue addressed by that item.  Accordingly, omitting `subjects` should mean this PolicyRulesWithSubjects matches a request regardless of the request's subject.  OTOH, the semantics of the `subjects` field itself are an OR.  Normally an OR among the members of an empty list is trivially `false`.  Accordingly, when `subjects` is present but empty this PolicyRulesWithSubjects should match no requests.  In JSON there is a distinction between a list-valued field being omitted vs. present and empty.  But our unmarshalling system erases that distinction IF the list-valued field is marked \"optional\" --- meaning that we can not provide the natural (regular) meaning to both JSON sources.  We do not want the admins to be able to write something that they think (because of regularity) means one thing but actually gets interpreted in exactly the opposite way.  That is why we have chosen to avoid that situation, by requiring that this field always be present with at least one entry.",
        "createdAt" : "2019-10-17T03:49:15Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "396e941e-4999-44d6-9e89-8f8d0af3ad72",
        "parentId" : "f08f2973-d470-4f6f-8ab6-f8415fc38951",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "> Normally removing an item from an AND means that you don't care about the issue addressed by that item. \r\n\r\n+1. the field cannot be an empty list here. to match all subject, we agree to use the disjunction of `system:authenticated` and `system:unauthenticated` i remember..",
        "createdAt" : "2019-10-21T15:57:20Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "88a28eb7-c455-400c-85c7-1e075bfd1a9a",
        "parentId" : "f08f2973-d470-4f6f-8ab6-f8415fc38951",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "How about we update the comment to explain how to say \"match everything\"?  Perhaps something like the following.\r\n\r\n> // `subjects` is the list of normal user, serviceaccount, or group that this rule cares about.\r\n> // There must be at least one member in this slice.\r\n> // A slice that includes both the `system:authenticated` and `system:unauthenticated` user groups matches every request.\r\n> // Required.",
        "createdAt" : "2019-10-21T17:01:04Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "69efaacb-75e7-4173-8767-0b5bd7cfb177",
        "parentId" : "f08f2973-d470-4f6f-8ab6-f8415fc38951",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I agree w/ Mike & Min.\r\n\r\nWe must update the comment to describe how to select all subjects, though.",
        "createdAt" : "2019-10-21T18:00:42Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +146,150 @@\t// +listType=set\n\t// Required.\n\tSubjects []Subject `json:\"subjects\" protobuf:\"bytes,1,rep,name=subjects\"`\n\t// `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the\n\t// target resource."
  },
  {
    "id" : "68f3ced6-1217-449a-a912-bcaa7e27f638",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-304695494",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a78d75fc-a2d7-4111-a71a-a7f2b2410a95",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "How about we move the definitions of FlowDistinguisherMethodByUserType and FlowDistinguisherMethodByNamespaceType to here, to keep related things together?",
        "createdAt" : "2019-10-17T03:26:34Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "0d725be4-bbd4-4d11-a098-62c8eb1c509b",
        "parentId" : "a78d75fc-a2d7-4111-a71a-a7f2b2410a95",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "moved",
        "createdAt" : "2019-10-21T16:36:41Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +106,110 @@// FlowDistinguisherMethodType is the type of flow distinguisher method\ntype FlowDistinguisherMethodType string\n\n// These are valid flow-distinguisher methods.\nconst ("
  },
  {
    "id" : "4bfb42ad-24bf-4b6e-a5f6-9a81bd42306a",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-304990323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a769d427-200b-443e-bc9e-a9307da65af6",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think at least one of resourceRules or nonResourceRules must be non-empty for this to have an effect?",
        "createdAt" : "2019-10-21T18:07:36Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "bcf5a7ee-a86e-44c1-8e39-0b4b49237899",
        "parentId" : "a769d427-200b-443e-bc9e-a9307da65af6",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "If by \"have an effect\" you mean \"match a request\", the existing comment says that --- right?",
        "createdAt" : "2019-10-21T20:50:15Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "db3a94fb-9538-4c31-83ed-349316df5d00",
        "parentId" : "a769d427-200b-443e-bc9e-a9307da65af6",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It implies it. Mostly I was clarifying this prior to asking that, if we decide a zero-length Subjects field doesn't pass validation field, can we also require that one of resourceRules or nonResourceRules be non-empty as well? And state this in one of these documentation comments somewhere?",
        "createdAt" : "2019-10-21T22:16:10Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "ad6da5f3-5921-4e18-a9fa-009f6a64aff0",
        "parentId" : "a769d427-200b-443e-bc9e-a9307da65af6",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The validation code requires exactly one of the two lists to be non-empty.  Let's keep that and document it.",
        "createdAt" : "2019-10-21T22:28:34Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "2f918f8c-f43a-46aa-bb65-3314d31cccdc",
        "parentId" : "a769d427-200b-443e-bc9e-a9307da65af6",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "i appended following sentence to the comments:\r\n\r\n> // At least one of `resourceRules` and `nonResourceRules` has to be non-empty.",
        "createdAt" : "2019-10-22T06:53:44Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +139,143 @@// making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches\n// a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member\n// of resourceRules or nonResourceRules matches the request.\ntype PolicyRulesWithSubjects struct {\n\t// subjects is the list of normal user, serviceaccount, or group that this rule cares about."
  },
  {
    "id" : "e83a2a85-f5fc-4318-8795-69e4e425b4ad",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-304995588",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d939de6-74db-43fd-91ec-6ee0ba191dd1",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I would add something communicating:\r\n* bigger numbers mean more *reserved* concurrent requests (at the expense of every other PL).\r\n* unused concurrent requests are returned for use by PLs which have work to do.",
        "createdAt" : "2019-10-21T19:37:59Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "ce348ba1-774d-47fd-90c7-6f13b978a7c7",
        "parentId" : "9d939de6-74db-43fd-91ec-6ee0ba191dd1",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The math says the first of those two things, but I suppose there is no harm in explicitly calling it out --- as long as the wording makes it clear that this is just one implication of the math.\r\n\r\nThe second thing you said is explicitly not true.  This is a big deal.  It is a big simplification that we agreed on for the first release.  I do not like it, but we discussed it and agreed that the first release would be simple in this way.",
        "createdAt" : "2019-10-21T21:10:33Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "6b19c5f3-c472-43c7-8535-5ff9f9f13a1f",
        "parentId" : "9d939de6-74db-43fd-91ec-6ee0ba191dd1",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Sorry, yes, I keep forgetting--this is an excellent place to remind future me.",
        "createdAt" : "2019-10-21T22:32:40Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "76344627-355c-4755-94ba-50058942b0c6",
        "parentId" : "9d939de6-74db-43fd-91ec-6ee0ba191dd1",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "appended the first to the comment:\r\n\r\n> \t// bigger numbers of ACS mean more reserved concurrent requests (at the\r\n\t// expense of every other PL).",
        "createdAt" : "2019-10-22T07:08:41Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 363,
    "diffHunk" : "@@ -1,1 +361,365 @@\t//\n\t//             ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )\n\t//\n\t// bigger numbers of ACS mean more reserved concurrent requests (at the\n\t// expense of every other PL)."
  },
  {
    "id" : "a3d9df47-042e-440d-92cf-310d1da69945",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-306218197",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7abbbe4f-e14d-4d69-a90e-927d28151cf2",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "nit: s/if/If/",
        "createdAt" : "2019-10-22T17:17:59Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "bcbb1ddb-0963-4fea-bc69-750bdf5aac68",
        "parentId" : "7abbbe4f-e14d-4d69-a90e-927d28151cf2",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "... and therefore we forbid it being empty?",
        "createdAt" : "2019-10-22T21:44:55Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "190fc12c-ac0a-4812-8c89-dfe6e6f41427",
        "parentId" : "7abbbe4f-e14d-4d69-a90e-927d28151cf2",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The earlier discussion of this has evaporated from the \"Files Changed\" view of this PR.  To summarize:\r\n\r\n1. It is not _necessary_ to forbid an empty slice of rules because an empty slice of rules has a perfectly well-defined meaning.  It means the FlowSchema matches no requests, and thus has no consequences.  The FlowSchema might as well not exist.\r\n\r\n2. The question is whether we want to make a restriction that is not \"necessary\" but may be helpful in preventing user mistakes.",
        "createdAt" : "2019-10-23T02:04:00Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "afefbc49-114b-4fe3-9318-ae62ef55cc3f",
        "parentId" : "7abbbe4f-e14d-4d69-a90e-927d28151cf2",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "note that an empty slice for this field will also be helpful for those who wants to \"mute\" down a flow-schema w/o deleting it. e.g. when editing system auto-provisioned defaults object.",
        "createdAt" : "2019-10-23T06:07:05Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "8936a74a-7ce0-4f14-aff4-22ff1567a685",
        "parentId" : "7abbbe4f-e14d-4d69-a90e-927d28151cf2",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I did think about that, but I didn't think about muting system objects. I am not sure if we should be making system objects that people will want to mute and that just deleting them isn't good enough. I think Mike has some open PRs that might be a good place to debate this, so I'll head there next.",
        "createdAt" : "2019-10-23T22:02:03Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +98,102 @@\t// `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if\n\t// at least one member of rules matches the request.\n\t// if it is an empty slice, there will be no requests matching the FlowSchema.\n\t// +listType=set\n\t// +optional"
  },
  {
    "id" : "f25a0415-f4c9-4886-aff9-1d7453327adf",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-306283270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d460fb35-acda-4a80-9d7c-6a28d3f99649",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Our validation logic insists that _exactly_ one of those two is non-empty.  I think that is the right check, and it should be accurately documented in the comments in this file.  It's a little asymmetric to document it in a comment on one of the two fields involved.  Better to put this remark in the type's comment or the comments of both fields, I think.",
        "createdAt" : "2019-10-22T17:23:58Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "6df3ed08-1591-49d1-a370-23f49618efdb",
        "parentId" : "d460fb35-acda-4a80-9d7c-6a28d3f99649",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "hm, why? What bad thing happens if both are non-empty?",
        "createdAt" : "2019-10-22T18:00:18Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "3d1568cd-8ead-4996-83fd-74f36c13ad63",
        "parentId" : "d460fb35-acda-4a80-9d7c-6a28d3f99649",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Hmm, now that you mention it, there is nothing wrong with both lists being non-empty.  That prohibition was inherited from the earlier way of doing the union.  With the normal union structure, there is no longer a problem with both lists being non-empty.  So I agree with leaving the comment as it is and making the validation follow that.",
        "createdAt" : "2019-10-23T02:25:15Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "f4179673-4820-411a-bed1-6067b877424d",
        "parentId" : "d460fb35-acda-4a80-9d7c-6a28d3f99649",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "i think both non-empty should be supported, that will help us de-duplicate the default objects. if you check the current implementation on the feature branch. some flow-schemas are forced to be doubled due to that restriction.",
        "createdAt" : "2019-10-23T06:12:40Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "780b34d3-d35e-40bf-9e38-3a6d7d5400ec",
        "parentId" : "d460fb35-acda-4a80-9d7c-6a28d3f99649",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "OK, I think this is an AI for the validation code, not this line?",
        "createdAt" : "2019-10-23T22:03:12Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "cc7dd7b3-2399-4b4a-b715-6faf89258130",
        "parentId" : "d460fb35-acda-4a80-9d7c-6a28d3f99649",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Yes, I think we are more or less agreeing on this.  I still think putting this comment on one of two constrained fields is odd.  But this is a nit we can polish in a follow-up PR.",
        "createdAt" : "2019-10-24T02:05:32Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +149,153 @@\t// `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the\n\t// target resource.\n\t// At least one of `resourceRules` and `nonResourceRules` has to be non-empty.\n\t// +listType=set\n\t// +optional"
  },
  {
    "id" : "ed1d0e1d-3b40-42e4-8393-cc8a0400cd8d",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-306284255",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7df79e70-add4-4c28-a89c-d7b7a15244fd",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Note that everywhere else we say \"assured\" rather than \"reserved\".",
        "createdAt" : "2019-10-22T17:40:15Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "f3bf2719-ea87-4622-9a5c-cec25e956b10",
        "parentId" : "7df79e70-add4-4c28-a89c-d7b7a15244fd",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Although reserved is more accurate, no? At least to me, reserved implies I have an exclusive claim while assured just means I won't be denied if I try to use it.\r\n\r\nI think it is fine to continue to use the word assured, since I may be unique in that interpretation and we may change the behavior. But we could change this line to be \"Larger values of ACS mean more assured (think: reserved) concurrent requests \" since otherwise this isn't really explaining anything, it's just repeating the A in ACS.",
        "createdAt" : "2019-10-22T21:55:58Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "985b9192-9c30-433a-94d5-a4bc49d080ad",
        "parentId" : "7df79e70-add4-4c28-a89c-d7b7a15244fd",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I think that for our first release, \"reserved\" is a better word than \"assured\".  I think we are using \"assured\" because we started with more ambitious ideas, for which \"assured\" is the better word.\r\n\r\nI do not have a lot of enthusiasm for doing a comprehensive s/assured/reserved/, both because it is a lot of work and because we have ambitions that may lead us to wanting to reverse that reversal.\r\n\r\nIf you think the word \"assured\" needs some explanation, let's do that in its own sentence or more rather than sliding it into one parenthetic remark.",
        "createdAt" : "2019-10-23T02:09:23Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "032a1220-6ea1-4b06-a8ff-6e4f6b806b6b",
        "parentId" : "7df79e70-add4-4c28-a89c-d7b7a15244fd",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "> \"assured\" rather than \"reserved\"\r\n\r\n(it's hard for me to figure out the differences between the two tho 🙂) keeping this open until we agree on which word wins..",
        "createdAt" : "2019-10-23T07:21:51Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "c83014d8-6ea5-473c-a2c3-31cf8de4e8ea",
        "parentId" : "7df79e70-add4-4c28-a89c-d7b7a15244fd",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "We're not going to make progress on that until we get input from more than @lavalamp and me.",
        "createdAt" : "2019-10-23T21:46:16Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "d3b8fdf0-654d-427c-a976-f8022d470368",
        "parentId" : "7df79e70-add4-4c28-a89c-d7b7a15244fd",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I vote we call it good on this comment and clarify more once we see more specifically how people are confused by it :)",
        "createdAt" : "2019-10-23T22:08:48Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "de577cc0-181c-4e82-b7e6-9763de554001",
        "parentId" : "7df79e70-add4-4c28-a89c-d7b7a15244fd",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Right now the commentary uses mixed terminology, so that's certain to need fixing.  But we can fix the comments in later PRs.",
        "createdAt" : "2019-10-24T02:10:01Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 364,
    "diffHunk" : "@@ -1,1 +362,366 @@\t//             ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )\n\t//\n\t// bigger numbers of ACS mean more reserved concurrent requests (at the\n\t// expense of every other PL).\n\t// This field has a default value of 30."
  },
  {
    "id" : "0f554304-5bbd-494c-b152-be3eddcb4cb7",
    "prId" : 81224,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81224#pullrequestreview-274700213",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4329a68-53ad-45d9-adf1-dd58397d9f40",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "How about defining a `const` for this?",
        "createdAt" : "2019-08-13T21:24:23Z",
        "updatedAt" : "2019-08-16T04:36:31Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "ed06e7e7-ca9c-4bb7-91a7-445a44b59b0b",
        "parentId" : "e4329a68-53ad-45d9-adf1-dd58397d9f40",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "there is, named `GroupName`",
        "createdAt" : "2019-08-14T07:05:28Z",
        "updatedAt" : "2019-08-16T04:36:31Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a531c6ac594fac1835a231a83b4ec0b552bd2d6",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +255,259 @@// Syntactically, Subject is a general API object reference.\n// Authorization produces a username and a set of groups, and we imagine special kinds of non-namespaced objects,\n// User and Group in API group \"flowcontrol.apiserver.k8s.io\", to represent such a username or group.\n// The only kind of true object reference that currently will match any users is ServiceAccount.\ntype Subject struct {"
  },
  {
    "id" : "0461f486-8174-4d83-bc52-e3a6ba4ceb19",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-244432427",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d20c9f87-21f8-4c0b-8e24-523a246a3071",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'd suggest a range or give examples of values that make sense.",
        "createdAt" : "2019-05-29T22:18:08Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "3d454489-21f9-4694-ad8f-f119fe381c15",
        "parentId" : "d20c9f87-21f8-4c0b-8e24-523a246a3071",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Administrators need to know the MatchingPrecedence values of the default objects.\r\n\r\nWe probably do not want to list the default objects in this comment.  What is the right way to direct readers to a listing of the default objects?",
        "createdAt" : "2019-05-31T03:56:02Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "98fb2a64-6070-4576-abe9-be9e1ac12cca",
        "parentId" : "d20c9f87-21f8-4c0b-8e24-523a246a3071",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "ideally, i think we should unify/converge the usages of priorities in k/k apis e.g. apiservices. and the apis will share a common link to the docs describing how the priority work.",
        "createdAt" : "2019-05-31T17:28:38Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "6ad06907-5d28-4230-87d9-4961c250dc04",
        "parentId" : "d20c9f87-21f8-4c0b-8e24-523a246a3071",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "My point here is that an administrator creating or modifying FlowSchemaSpec objects needs to know not only general guidelines about matching precendence values but also the specific precedence values of the other existing FlowSchema objects.  Actually, that is what matters, not the precedence values of the default objects.  So really, an administrator has to have done a list of the other objects before she can proceed to make any changes.  Given that, I do not think we even need general guidelines --- the specifics of the other existing objects should suffice.\r\n\r\nFor those of us designing the precedence values of the default objecs, that is a self-contained problem and does not need to be documented in the API types.",
        "createdAt" : "2019-05-31T17:36:35Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +89,93 @@\t// `matchingPrecedence` is used to choose among the FlowSchemas that match a given request.  The chosen\n\t// FlowSchema is among those with the numerically lowest (which we take to be logically highest)\n\t// MatchingPrecedence.  Each MatchingPrecedence value must be non-negative.\n\tMatchingPrecedence int32 `json:\"matchingPrecedence\" protobuf:\"varint,2,opt,name=matchingPrecedence\"`\n\t// `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema."
  },
  {
    "id" : "ff4d38ec-39cf-4cc4-b558-762df60a6b6d",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-245279030",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5d490c3-6dfe-453e-9614-65d5bb723add",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Likewise, require objects setting this to be named \"exempt\" or something.",
        "createdAt" : "2019-05-29T22:30:51Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6b754991-099a-45e1-95ba-f45bfc6518f5",
        "parentId" : "c5d490c3-6dfe-453e-9614-65d5bb723add",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "agree, that ensures only one exempt priority-level globally",
        "createdAt" : "2019-06-04T07:44:31Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 196,
    "diffHunk" : "@@ -1,1 +194,198 @@\t// preset priority level can be exempt.\n\t// +optional\n\tExempt bool `json:\"exempt,omitempty\" protobuf:\"varint,2,opt,name=exempt\"`\n\t// `assuredConcurrencyShares` is a positive number for a non-exempt priority level, representing the weight by which\n\t// the priority level shares the concurrency from the global limit. The concurrency limit of an apiserver is divided"
  },
  {
    "id" : "ef0247a3-5d6e-49e9-a8d6-2c0b9307b7c2",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-257593819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d42e7bda-8226-431d-8fe2-84f9bc7af661",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Do we really want \"omitempty\" here?  This field is not optional.\r\nFor some non-optional fields, there is an explicit comment that it is required.  Is there a pattern to when that is explicitly noted and when it is not?",
        "createdAt" : "2019-06-12T18:01:34Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "6258fc13-8d75-45e9-bb5f-2d18fd330088",
        "parentId" : "d42e7bda-8226-431d-8fe2-84f9bc7af661",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Why are some fields explicitly commented as required but this one is not?",
        "createdAt" : "2019-07-03T16:21:04Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +86,90 @@\t// be resolved, the flow-schema will ignored and marked as invalid in its status.\n\t// Required.\n\tPriorityLevelConfiguration PriorityLevelConfigurationReference `json:\"priorityLevelConfiguration,omitempty\" protobuf:\"bytes,1,opt,name=priorityLevelConfiguration\"`\n\t// `matchingPrecedence` is used to choose among the FlowSchemas that match a given request.  The chosen\n\t// FlowSchema is among those with the numerically lowest (which we take to be logically highest)"
  }
]