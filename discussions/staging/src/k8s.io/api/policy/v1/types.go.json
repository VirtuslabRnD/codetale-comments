[
  {
    "id" : "a906fa14-eec5-4ee9-8306-c46093f989ef",
    "prId" : 99290,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99290#pullrequestreview-605480705",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24c1704f-3aee-4fea-9227-44959a913ec2",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I expected Eviction to be added to v1 and the eviction subresource storage to be updated to advertise v1 Eviction support. We got *super* lucky that subresource only supports Create and only returns a Status object, so we never have to worry about what version we return. Add a test to make sure both v1beta1 and v1 Eviction objects continue to be accepted to that subresource.",
        "createdAt" : "2021-02-24T14:28:16Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "5dc7f2a4-babd-4a8e-a217-ae9ad4f7b09d",
        "parentId" : "24c1704f-3aee-4fea-9227-44959a913ec2",
        "authorId" : "37016922-c330-4fc5-b602-08c675dca4fb",
        "body" : "So can we update the version of Eviction since the v1beta1 is part of the pod API (which is GA)? We had a discussion around this in my previous PR to take PDB to GA: https://github.com/kubernetes/kubernetes/pull/81571#discussion_r318874136 and https://github.com/kubernetes/kubernetes/pull/81571#discussion_r318874373",
        "createdAt" : "2021-02-25T02:35:01Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "37016922-c330-4fc5-b602-08c675dca4fb",
        "tags" : [
        ]
      },
      {
        "id" : "ed851311-1cf5-4105-9e3e-f418fcf83b9d",
        "parentId" : "24c1704f-3aee-4fea-9227-44959a913ec2",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "We can't change the returned value of the subresource, and most subresources return a specific API type, which is why I thought we couldn't change it. \r\n\r\nThe eviction subresource returns v1 Status however, so I *think* we can additionally accept a v1 Eviction type as long as we continue accepting v1beta1 Evictions as well (both v1 and v1beta1 would have to define conversions to the internal Eviction type).\r\n\r\nWe'd definitely need a test ensuring that both remained accepted. ",
        "createdAt" : "2021-02-25T02:52:29Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "0289e575-bcda-4ece-9c6f-76eae05628a1",
        "parentId" : "24c1704f-3aee-4fea-9227-44959a913ec2",
        "authorId" : "37016922-c330-4fc5-b602-08c675dca4fb",
        "body" : "That makes sense. I've tried to look into this, and I'm struggling to see how we would handle this in the `PodExpansion` interface: https://github.com/kubernetes/kubernetes/blob/27c89b9aec73f66529a497910c460af2b25ab6dd/staging/src/k8s.io/client-go/kubernetes/typed/core/v1/pod_expansion.go#L33\r\nI assume we can't add a separate function on the interface to handle the v1 version of the `Eviction`, so which type would we use here? Or should we be able to just keep the `v1beta1` type here and the `v1` version would be converted?\r\n\r\n",
        "createdAt" : "2021-02-25T06:10:21Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "37016922-c330-4fc5-b602-08c675dca4fb",
        "tags" : [
        ]
      },
      {
        "id" : "70e6a68e-a450-45eb-9afb-a3a46d5f795f",
        "parentId" : "24c1704f-3aee-4fea-9227-44959a913ec2",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> I assume we can't add a separate function on the interface to handle the v1 version of the `Eviction`\r\n\r\nThat's exactly what I'd do. I'd probably add EvictV1 and EvictV1beta1, document EvictV1 to only apply to 1.21+, and mark `Evict` as deprecated to poke people to explicitly select a version (but not remove it any time soon).",
        "createdAt" : "2021-02-25T06:28:00Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "5f8cab68-4fc1-4cac-97d6-9fb7ecd624a1",
        "parentId" : "24c1704f-3aee-4fea-9227-44959a913ec2",
        "authorId" : "37016922-c330-4fc5-b602-08c675dca4fb",
        "body" : "Updated the PR so we can accept both v1 Eviction types and v1beta1 Eviction types. This is done by adding additional `pods/evictionv1` and `pods/evictionv1beta1` endpoints and updating the `PodExpansion` with corresponding functions. It also adds test to verify that all endpoints works.",
        "createdAt" : "2021-02-26T03:46:43Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "37016922-c330-4fc5-b602-08c675dca4fb",
        "tags" : [
        ]
      },
      {
        "id" : "227cbff2-9b89-48f2-8481-a350e2859578",
        "parentId" : "24c1704f-3aee-4fea-9227-44959a913ec2",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Hmm... I was hoping `pods/eviction` could accept either `policy/v1` or `policy/v1beta1` Evictions. I can believe that would not play nicely with the apiserver decoding stack, though. And currently, we can only advertise one accepted version in discovery.\r\n\r\n@deads2k @lavalamp, any thoughts on what we should do here? To my knowledge, this is the only subresource of a GA endpoint that accepts a beta version. That's unfortunate to advertise forever and have no graduation path (and I worry a little about how the beta subresource type will interact with the \"stop serving deprecated beta types automatically\" [changes](https://github.com/kubernetes/kubernetes/pull/99362)).",
        "createdAt" : "2021-03-01T14:40:30Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "d15bcc77-4fe4-45e1-a1a4-b49b4b995fff",
        "parentId" : "24c1704f-3aee-4fea-9227-44959a913ec2",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "We never had anyone need to change the version of a subresource yet. The plan of record from way back in the day was to permit clients to use the Accept: header to request the version they want to see the result in. We should probably be emiting a warning to clients calling this without specifying an accept header, because such clients would start getting something different if we flip to having v1 as the default.\r\n\r\nI think we must continue to accept v1beta1 for quite some time.",
        "createdAt" : "2021-03-01T19:24:04Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "4256cfa0-b630-413f-b769-8578ef17de22",
        "parentId" : "24c1704f-3aee-4fea-9227-44959a913ec2",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> I think we must continue to accept v1beta1 for quite some time.\r\n\r\nNo disagreement there... this is actually a pretty unique resource that is write-only (doesn't support GET and the result of the write is a v1.Status object), so we could conceivably accept both v1beta1 and v1 Eviction objects.\r\n\r\nThe question is whether we think that subresource accepting both versions is a good thing to aim for, especially if it is likely to involve fixing up bits in the discovery and endpoint handling stack that have single-version fixed assumptions.",
        "createdAt" : "2021-03-01T19:27:48Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "0b178f91-88bd-4ad6-a136-7b8256f7fa9e",
        "parentId" : "24c1704f-3aee-4fea-9227-44959a913ec2",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Oh this is write-only, that's great!\r\n\r\nSadly I don't see any option other than supporting both for some amount of time? I don't think it's OK to abruptly break old clients.",
        "createdAt" : "2021-03-01T19:51:04Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a428b584-2500-43e0-ba69-b07c7c03e56a",
        "parentId" : "24c1704f-3aee-4fea-9227-44959a913ec2",
        "authorId" : "37016922-c330-4fc5-b602-08c675dca4fb",
        "body" : "So do we want to provide separate endpoints for the different version of the Eviction resource as we currently have in this PR or do we want to see if we can have one endpoint that can accept both the v1 and v1beta1 versions?\r\n\r\nIf we want to use one endpoint, it seems like that will require changes that are substantial enough that we can't make Eviction v1 in 1.21. So do we want to back out the changes to the Eviction resource from this PR and take just PDBs to GA in 1.21, or do we push everything to 1.22. 1.22 is the automatic deprecation deadline for PDBs?",
        "createdAt" : "2021-03-02T20:44:37Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "37016922-c330-4fc5-b602-08c675dca4fb",
        "tags" : [
        ]
      },
      {
        "id" : "381a214b-0061-406f-b1b2-0138be4fbb75",
        "parentId" : "24c1704f-3aee-4fea-9227-44959a913ec2",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> So do we want to provide separate endpoints for the different version of the Eviction resource as we currently have in this PR or do we want to see if we can have one endpoint that can accept both the v1 and v1beta1 versions?\r\n\r\nOne endpoint that accepts both would be my preference.\r\n\r\n> If we want to use one endpoint, it seems like that will require changes that are substantial enough that we can't make Eviction v1 in 1.21. So do we want to back out the changes to the Eviction resource from this PR and take just PDBs to GA in 1.21, or do we push everything to 1.22.\r\n\r\nI'm fine with moving out work on promoting eviction to v1 to 1.22.\r\n\r\n> 1.22 is the automatic deprecation deadline for PDBs?\r\n\r\nThat's when their deprecation period starts. It ends in 1.25 and we stop serving them then.",
        "createdAt" : "2021-03-03T16:10:22Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "15dcee6a-ec31-4a8b-b1fe-cc54c8c4ce3c",
        "parentId" : "24c1704f-3aee-4fea-9227-44959a913ec2",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "> I'm fine with moving out work on promoting eviction to v1 to 1.22.\r\n\r\nI was told we can't GA from a deprecated version, and we'd need to go through a 2nd beta, isn't that true? ",
        "createdAt" : "2021-03-03T20:45:57Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "2a6e01ea-563a-430c-b13e-bfd214e388a9",
        "parentId" : "24c1704f-3aee-4fea-9227-44959a913ec2",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "If 1.22 adds Eviction v1 and marks Eviction v1beta1 deprecated, that seems reasonable. Eviction v1beta1 is an oddball since it's a subresource of a v1 API, so I expect we'll have interesting things to iron out there anyway.",
        "createdAt" : "2021-03-03T21:48:15Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "74df7094-47c1-4f7e-8e2e-c3067595d728",
        "parentId" : "24c1704f-3aee-4fea-9227-44959a913ec2",
        "authorId" : "37016922-c330-4fc5-b602-08c675dca4fb",
        "body" : "I have backed out the changes for updating Eviction to v1.",
        "createdAt" : "2021-03-04T07:00:13Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "37016922-c330-4fc5-b602-08c675dca4fb",
        "tags" : [
        ]
      },
      {
        "id" : "8520d258-386a-4780-a711-cb5677719302",
        "parentId" : "24c1704f-3aee-4fea-9227-44959a913ec2",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "thanks, can you make sure this discussion is captured in an issue associated with the KEP, so we can make sure this happens in 1.22?",
        "createdAt" : "2021-03-05T17:40:25Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "853cee3f-1f97-45ba-ab7d-524f93b9dd32",
        "parentId" : "24c1704f-3aee-4fea-9227-44959a913ec2",
        "authorId" : "37016922-c330-4fc5-b602-08c675dca4fb",
        "body" : "Added a comment on the tracking issue: https://github.com/kubernetes/enhancements/issues/85#issuecomment-791591925",
        "createdAt" : "2021-03-05T18:12:08Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "37016922-c330-4fc5-b602-08c675dca4fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "66e722765a216db5288498b0a21bcededf8d9236",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +148,152 @@\t// Items is a list of PodDisruptionBudgets\n\tItems []PodDisruptionBudget `json:\"items\" protobuf:\"bytes,2,rep,name=items\"`\n}"
  },
  {
    "id" : "723551af-22d0-47c0-8de6-c269538c15ae",
    "prId" : 99290,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99290#pullrequestreview-601484621",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b5abf61-e5e7-4aef-88bd-94d26a2c1f69",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "is an empty selector allowed? what does it mean?",
        "createdAt" : "2021-02-24T16:55:15Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "0088d237-fcc4-4205-9aba-eaae48f5602a",
        "parentId" : "3b5abf61-e5e7-4aef-88bd-94d26a2c1f69",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I don't see the selector change proposed in https://github.com/kubernetes/enhancements/blob/master/keps/sig-apps/85-Graduate-PDB-to-Stable/README.md#fix-handling-of-empty-selector-in-disruption-controller implemented here",
        "createdAt" : "2021-02-24T17:36:54Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "8bfc6689-79d7-4290-a5a8-4cf88accadaa",
        "parentId" : "3b5abf61-e5e7-4aef-88bd-94d26a2c1f69",
        "authorId" : "37016922-c330-4fc5-b602-08c675dca4fb",
        "body" : "Yeah, I haven't done this yet. Just wanted to get the basics in place first. This is next on the list.",
        "createdAt" : "2021-02-25T06:12:45Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "37016922-c330-4fc5-b602-08c675dca4fb",
        "tags" : [
        ]
      },
      {
        "id" : "05ba87c5-7786-4956-a29c-3ec1618f2b84",
        "parentId" : "3b5abf61-e5e7-4aef-88bd-94d26a2c1f69",
        "authorId" : "37016922-c330-4fc5-b602-08c675dca4fb",
        "body" : "I have updated the PR with an attempt to address this, but I'm not sure it is correct. So my assumptions are:\r\n * We can't change the version of PDB used in the controller yet, since we want to update the API first and then only update the controller in the next release.\r\n * There will existing PDBs stored in etcd, so we also can't change the semantics of an empty selector in the internal type.\r\n\r\nThe result is that the conversion must happen in the v1 api as we convert between v1 and the internal type.",
        "createdAt" : "2021-03-01T03:30:08Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "37016922-c330-4fc5-b602-08c675dca4fb",
        "tags" : [
        ]
      },
      {
        "id" : "8630251f-e3fb-478f-9488-ba806023e38f",
        "parentId" : "3b5abf61-e5e7-4aef-88bd-94d26a2c1f69",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> There will existing PDBs stored in etcd, so we also can't change the semantics of an empty selector in the internal type.\r\n\r\netcd stores in v1beta1, not internal. I would expect to make adjustments in the `v1beta1 <-> internal` conversion",
        "createdAt" : "2021-03-01T14:30:24Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6a760bd3-6e69-4b4e-bb43-084f6d735c38",
        "parentId" : "3b5abf61-e5e7-4aef-88bd-94d26a2c1f69",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> We can't change the version of PDB used in the controller yet, since we want to update the API first and then only update the controller in the next release.\r\n\r\nif you want to add a conformance test, the controller must use the v1 API (conformance tests must pass in clusters with no alpha/beta features or APIs enabled)",
        "createdAt" : "2021-03-01T14:31:00Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "87de1370-b16c-4f86-8bfa-cefb9ea80d07",
        "parentId" : "3b5abf61-e5e7-4aef-88bd-94d26a2c1f69",
        "authorId" : "37016922-c330-4fc5-b602-08c675dca4fb",
        "body" : "That makes sense. I have updated the PR to handle conversion in v1beta1 and updated the controller to use the v1 api.",
        "createdAt" : "2021-03-02T07:09:11Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "37016922-c330-4fc5-b602-08c675dca4fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "66e722765a216db5288498b0a21bcededf8d9236",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +32,36 @@\n\t// Label query over pods whose evictions are managed by the disruption\n\t// budget.\n\t// A null selector will match no pods, while an empty ({}) selector will select\n\t// all pods within the namespace."
  },
  {
    "id" : "0647303a-58a7-4a80-a558-29ef68bff412",
    "prId" : 99290,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99290#pullrequestreview-605952555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e09e77f2-a162-46a9-a495-5f621f37bed4",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Explicitly describe in documentation what `null` and `{}` selectors do. Also update the v1beta1 type documentation to indicate what `null` and `{}` selectors do.\r\n\r\nIt is extremely likely that some people will try to convert their v1beta1 PDB objects to v1 by simply changing the apiVersion, which will be unfortunate for them if the behavior of an empty selector changes.",
        "createdAt" : "2021-03-07T21:12:51Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "568d31b8-4df8-43aa-8986-ddca01a1c2e3",
        "parentId" : "e09e77f2-a162-46a9-a495-5f621f37bed4",
        "authorId" : "37016922-c330-4fc5-b602-08c675dca4fb",
        "body" : "Updated. I will make sure we call this out in the documentation as well.",
        "createdAt" : "2021-03-08T04:10:58Z",
        "updatedAt" : "2021-03-09T15:30:52Z",
        "lastEditedBy" : "37016922-c330-4fc5-b602-08c675dca4fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "66e722765a216db5288498b0a21bcededf8d9236",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +32,36 @@\n\t// Label query over pods whose evictions are managed by the disruption\n\t// budget.\n\t// A null selector will match no pods, while an empty ({}) selector will select\n\t// all pods within the namespace."
  }
]