[
  {
    "id" : "d3fd9d09-2c5d-4ba0-baf7-e8ca998c6304",
    "prId" : 96844,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96844#pullrequestreview-555162731",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99d636f2-9ff3-44bf-ad7a-8206bf30e698",
        "parentId" : null,
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "At this point, pathExists == true. Based on the logic of PathExists, only two cases\r\n1. pathExists and error == nil\r\n2. if error != nil, then is must be corruptedMnt == true\r\n\r\nSo I think there is no need to check IsCorruptedMnt again here ..",
        "createdAt" : "2020-11-27T19:44:25Z",
        "updatedAt" : "2020-12-15T17:04:12Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "0fa9f463-1105-4245-ae2a-dac251bff3c9",
        "parentId" : "99d636f2-9ff3-44bf-ad7a-8206bf30e698",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "hmm, good point. but I think there is a logic error in this code. \r\n\r\n1. If pathExists is false and `pathErr` is nil. then and then only it should skip unmounting. \r\n2. If pathExists is false but `pathErr` is somehow non-nil, then unmounting should not succeed and should result in error and I think we have had this bug in the code for awhile now. :(\r\n\r\nI have pushed an update that fixes this PTAL.\r\n",
        "createdAt" : "2020-12-15T02:55:03Z",
        "updatedAt" : "2020-12-15T17:04:12Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "308f1106-f6da-490c-a063-975a6fce9ce2",
        "parentId" : "99d636f2-9ff3-44bf-ad7a-8206bf30e698",
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "Still feel there are some cleanup can be done related to the checking before and after actual unmount execution and path removal. Especially the checking logic before actually executing unmount or dir deletion has some issues. We have seen issues around this with some kind of corrupted dir (even though dir still exist, but PathExists show it does not..).  Also since pathExists has redundant check on IsCorruptedMnt. \r\n\r\nBut this further cleanup can be done in a different PR. For this one, let's focus on adding Force option.",
        "createdAt" : "2020-12-16T04:43:21Z",
        "updatedAt" : "2020-12-16T04:43:21Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "df3076f1-b8e1-41de-9d4d-5679a3b453c5",
        "parentId" : "99d636f2-9ff3-44bf-ad7a-8206bf30e698",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Why do you say - `PathExists` has a redundant check of `IsCorruptedMnt`? But if it was - then I think it was always there and I am not changing any of that code. If anything - this PR I think fixes the bug with ignoring errors from `PathExists` check.",
        "createdAt" : "2020-12-17T20:55:53Z",
        "updatedAt" : "2020-12-17T20:55:54Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "933650de-f365-45d9-ad74-af3618be931d",
        "parentId" : "99d636f2-9ff3-44bf-ad7a-8206bf30e698",
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "got it.  for this change it is good for me.",
        "createdAt" : "2020-12-18T04:18:47Z",
        "updatedAt" : "2020-12-18T04:18:48Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      }
    ],
    "commit" : "95852d7b8ec6bff61f6bad456ba4a0e9ad4356e1",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +48,52 @@\t\treturn nil\n\t}\n\tcorruptedMnt := IsCorruptedMnt(pathErr)\n\tif pathErr != nil && !corruptedMnt {\n\t\treturn fmt.Errorf(\"Error checking path: %v\", pathErr)"
  }
]