[
  {
    "id" : "9a904bb1-9af5-4023-9a4d-8ac0021805ff",
    "prId" : 101436,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101436#pullrequestreview-643608835",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bb60208-3b8a-4afc-8314-eeb843aa8447",
        "parentId" : null,
        "authorId" : "b1f0d506-e4a7-4426-9b32-185f93f5e39d",
        "body" : "Built on master:\r\n\r\n```\r\n· kubectl describe podsecuritypolicy\r\nName:         example\r\nNamespace:\r\nLabels:       <none>\r\nAnnotations:  <none>\r\nAPI Version:  policy/v1beta1\r\nKind:         PodSecurityPolicy\r\nMetadata:\r\n  Creation Timestamp:  2021-04-20T00:03:41Z\r\n  Managed Fields:\r\n    API Version:  policy/v1beta1\r\n    Fields Type:  FieldsV1\r\n    fieldsV1:\r\n      f:spec:\r\n        f:allowPrivilegeEscalation:\r\n        f:fsGroup:\r\n          f:rule:\r\n        f:runAsUser:\r\n          f:rule:\r\n        f:seLinux:\r\n          f:rule:\r\n        f:supplementalGroups:\r\n          f:rule:\r\n    Manager:         kubectl\r\n    Operation:       Update\r\n    Time:            2021-04-20T00:03:41Z\r\n  Resource Version:  37460\r\n  Self Link:         /apis/policy/v1beta1/podsecuritypolicies/example\r\n  UID:               97a541d9-83bf-4777-b0f2-a5caddcf874e\r\nSpec:\r\n  Allow Privilege Escalation:  true\r\n  Fs Group:\r\n    Rule:  RunAsAny\r\n  Run As User:\r\n    Rule:  RunAsAny\r\n  Se Linux:\r\n    Rule:  RunAsAny\r\n  Supplemental Groups:\r\n    Rule:  RunAsAny\r\nEvents:    <none>\r\n```\r\n\r\nBuilt on this branch:\r\n```\r\n· kubectl describe podsecuritypolicy\r\nName:  example\r\n\r\nSettings:\r\n  Allow Privileged:                       false\r\n  Allow Privilege Escalation:             true\r\n  Default Add Capabilities:               <none>\r\n  Required Drop Capabilities:             <none>\r\n  Allowed Capabilities:                   <none>\r\n  Allowed Volume Types:                   <none>\r\n  Allow Host Network:                     false\r\n  Allow Host Ports:                       <none>\r\n  Allow Host PID:                         false\r\n  Allow Host IPC:                         false\r\n  Read Only Root Filesystem:              false\r\n  SELinux Context Strategy: RunAsAny\r\n    User:                                 <none>\r\n    Role:                                 <none>\r\n    Type:                                 <none>\r\n    Level:                                <none>\r\n  Run As User Strategy: RunAsAny\r\n    Ranges:                               <none>\r\n  FSGroup Strategy: RunAsAny\r\n    Ranges:                               <none>\r\n  Supplemental Groups Strategy: RunAsAny\r\n    Ranges:                               <none>\r\n```\r\n\r\n\r\n",
        "createdAt" : "2021-04-23T19:35:25Z",
        "updatedAt" : "2021-04-23T19:35:25Z",
        "lastEditedBy" : "b1f0d506-e4a7-4426-9b32-185f93f5e39d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c1a86a272dfd25418be5c7995eba0985b3df34e",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +207,211 @@\t\t{Group: discoveryv1beta1.GroupName, Kind: \"EndpointSlice\"}:                &EndpointSliceDescriber{c},\n\t\t{Group: discoveryv1.GroupName, Kind: \"EndpointSlice\"}:                     &EndpointSliceDescriber{c},\n\t\t{Group: policyv1beta1.GroupName, Kind: \"PodSecurityPolicy\"}:               &PodSecurityPolicyDescriber{c},\n\t\t{Group: autoscalingv2beta2.GroupName, Kind: \"HorizontalPodAutoscaler\"}:    &HorizontalPodAutoscalerDescriber{c},\n\t\t{Group: extensionsv1beta1.GroupName, Kind: \"Ingress\"}:                     &IngressDescriber{c},"
  },
  {
    "id" : "4dde7b3c-78fa-4bd0-9001-72a3a56c715f",
    "prId" : 101171,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101171#pullrequestreview-641369122",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ca05ffb-d8f8-4ac7-9dc7-bee5a2b1c0ae",
        "parentId" : null,
        "authorId" : "b1f0d506-e4a7-4426-9b32-185f93f5e39d",
        "body" : "Note that I dropped `describerSettings.ShowEvents` from the original L679 here. We're already inside an `if describerSettings.ShowEvents` at L696.",
        "createdAt" : "2021-04-21T17:58:38Z",
        "updatedAt" : "2021-04-21T18:57:47Z",
        "lastEditedBy" : "b1f0d506-e4a7-4426-9b32-185f93f5e39d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ad6fd6ddbf6a8e0f2cdca17583af38cf30c2bb2",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +712,716 @@\t\t\t\t})\n\n\t\t\tif err2 == nil && len(events.Items) > 0 {\n\t\t\t\treturn tabbedString(func(out io.Writer) error {\n\t\t\t\t\tw := NewPrefixWriter(out)"
  },
  {
    "id" : "565a0539-4a69-497b-8351-7596a313c071",
    "prId" : 101171,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101171#pullrequestreview-641369122",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70bff856-b502-41e0-bb95-1018ff8c9f9f",
        "parentId" : null,
        "authorId" : "b1f0d506-e4a7-4426-9b32-185f93f5e39d",
        "body" : "`internalDeployment` was just a deep copy of `d`, and it is only used here. Since this is just a printer and does not mutate, I don't understand why we'd need to deep copy. If there's a reason, I could add it back right here.",
        "createdAt" : "2021-04-21T18:21:13Z",
        "updatedAt" : "2021-04-21T18:57:47Z",
        "lastEditedBy" : "b1f0d506-e4a7-4426-9b32-185f93f5e39d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ad6fd6ddbf6a8e0f2cdca17583af38cf30c2bb2",
    "line" : 419,
    "diffHunk" : "@@ -1,1 +4202,4206 @@\t\t\tw.Write(LEVEL_0, \"RollingUpdateStrategy:\\t%s max unavailable, %s max surge\\n\", ru.MaxUnavailable.String(), ru.MaxSurge.String())\n\t\t}\n\t\tDescribePodTemplate(&d.Spec.Template, w)\n\t\tif len(d.Status.Conditions) > 0 {\n\t\t\tw.Write(LEVEL_0, \"Conditions:\\n  Type\\tStatus\\tReason\\n\")"
  },
  {
    "id" : "d5db884d-a4eb-4b34-a6a7-c46408117e07",
    "prId" : 101171,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101171#pullrequestreview-641369122",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb4e03a1-d04f-44ab-b943-432b6d5514ca",
        "parentId" : null,
        "authorId" : "b1f0d506-e4a7-4426-9b32-185f93f5e39d",
        "body" : "This is moved out of `describeDeployment`. Doing so allows us to simplify the arguments passed, and seems more in keeping with a pattern I've noticed in this file where `Describe` gathers the data and `describeFoo` formats/prints it.",
        "createdAt" : "2021-04-21T18:22:22Z",
        "updatedAt" : "2021-04-21T18:57:47Z",
        "lastEditedBy" : "b1f0d506-e4a7-4426-9b32-185f93f5e39d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ad6fd6ddbf6a8e0f2cdca17583af38cf30c2bb2",
    "line" : 393,
    "diffHunk" : "@@ -1,1 +4171,4175 @@\t}\n\n\tvar oldRSs, newRSs []*appsv1.ReplicaSet\n\tif oldResult, _, newResult, err := deploymentutil.GetAllReplicaSetsInChunks(d, dd.client.AppsV1(), describerSettings.ChunkSize); err == nil {\n\t\toldRSs = oldResult"
  },
  {
    "id" : "9ca1065f-0f1c-4d69-bc23-14681c8b544e",
    "prId" : 101171,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101171#pullrequestreview-641369122",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1dc0671-7bba-4b64-8d41-1ebf29ec2a7e",
        "parentId" : null,
        "authorId" : "b1f0d506-e4a7-4426-9b32-185f93f5e39d",
        "body" : "Here's the Search implementation for reference: https://github.com/kubernetes/kubernetes/blob/6aa683e9cf9bfa9069a0085eb8a1756fc0678e07/staging/src/k8s.io/client-go/kubernetes/typed/core/v1/event_expansion.go#L100-L123\r\n\r\nTwo other meaningful differences to flag for the purposes of review:\r\n- Don't need to pass in `scheme.Scheme` as an argument because it is all local\r\n- Can use the namespace in the ref directly instead of having `client.Events` use a separate ns arg, since it is built internally. I think this actually fixes a bug in the PV and StorageClass describers. Neither of these is namespaced, but previously they passed in the user-provided ns instead of the empty \"all\" namespace constant. Tests didn't catch it because the fake for the event client's `Search` is super different from the real thing in terms of namespace handling. ",
        "createdAt" : "2021-04-21T18:53:20Z",
        "updatedAt" : "2021-04-21T18:57:47Z",
        "lastEditedBy" : "b1f0d506-e4a7-4426-9b32-185f93f5e39d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ad6fd6ddbf6a8e0f2cdca17583af38cf30c2bb2",
    "line" : 534,
    "diffHunk" : "@@ -1,1 +5483,5487 @@\n// searchEvents finds events about the specified object.\n// It is very similar to CoreV1.Events.Search, but supports the Limit parameter.\nfunc searchEvents(client corev1client.EventsGetter, objOrRef runtime.Object, limit int64) (*corev1.EventList, error) {\n\tref, err := reference.GetReference(scheme.Scheme, objOrRef)"
  },
  {
    "id" : "58ee9be5-f3c1-4105-bbec-e9db2982a2d3",
    "prId" : 100568,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100568#pullrequestreview-654087738",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca3caf94-5f8a-437b-a28e-b9306c0b7c57",
        "parentId" : null,
        "authorId" : "38ac0bf1-ca6b-4f18-9b32-48fd80cf36fd",
        "body" : "Please confirm that using `len` here is the right way.\r\n\r\nI know [`encoding/binary#Size`](https://pkg.go.dev/encoding/binary#Size) exists but I know nothing, Jon Snow.",
        "createdAt" : "2021-05-06T21:03:12Z",
        "updatedAt" : "2021-05-06T21:03:21Z",
        "lastEditedBy" : "38ac0bf1-ca6b-4f18-9b32-48fd80cf36fd",
        "tags" : [
        ]
      },
      {
        "id" : "58aec1f6-97bf-40a1-95f5-3e1f546a47d2",
        "parentId" : "ca3caf94-5f8a-437b-a28e-b9306c0b7c57",
        "authorId" : "8ae0caa5-9a81-4ec6-a72e-2c1411c61418",
        "body" : "Found this, https://stackoverflow.com/questions/31733145/size-of-a-byte-array-golang/31736829#comment51402266_31733145. I think they both will return the same because `data_type_size` will be 1 since `byte` type will be size 1\r\nGolang Playground: https://play.golang.org/p/4WCqUlvLoq2",
        "createdAt" : "2021-05-07T02:46:51Z",
        "updatedAt" : "2021-05-07T02:47:05Z",
        "lastEditedBy" : "8ae0caa5-9a81-4ec6-a72e-2c1411c61418",
        "tags" : [
        ]
      },
      {
        "id" : "51ea2c91-2504-49d6-b8fc-3a76946f713f",
        "parentId" : "ca3caf94-5f8a-437b-a28e-b9306c0b7c57",
        "authorId" : "38ac0bf1-ca6b-4f18-9b32-48fd80cf36fd",
        "body" : "Thanks for taking a look!",
        "createdAt" : "2021-05-07T05:17:35Z",
        "updatedAt" : "2021-05-07T05:17:35Z",
        "lastEditedBy" : "38ac0bf1-ca6b-4f18-9b32-48fd80cf36fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc28c6dba4d703f3ced1cb32394597252483b8bb",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +4236,4240 @@\t\tw.Write(LEVEL_0, \"\\nBinaryData\\n====\\n\")\n\t\tfor k, v := range configMap.BinaryData {\n\t\t\tw.Write(LEVEL_0, \"%s: %s bytes\\n\", k, strconv.Itoa(len(v)))\n\t\t}\n\t\tw.Write(LEVEL_0, \"\\n\")"
  },
  {
    "id" : "160d7d09-21ea-4019-a4ce-9c6a555e4d5e",
    "prId" : 100505,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100505#pullrequestreview-619288769",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4bda151-eb68-449e-84d1-a0796a33d7e5",
        "parentId" : null,
        "authorId" : "38ac0bf1-ca6b-4f18-9b32-48fd80cf36fd",
        "body" : "This is one of those things that's meh no matter what you do.\r\n\r\nI'd probably do something like this and only have one return.\r\n\r\n```\r\nvar apiGroup string\r\nif ic.APIGroup != nil {\r\n  apiGroup = fmt.Sprintf(\"%v\", *ic.APIGroup)\r\n}\r\n```",
        "createdAt" : "2021-03-24T03:03:02Z",
        "updatedAt" : "2021-03-24T03:56:24Z",
        "lastEditedBy" : "38ac0bf1-ca6b-4f18-9b32-48fd80cf36fd",
        "tags" : [
        ]
      },
      {
        "id" : "62d94dd8-c8c3-4cdc-a9ce-8af8fcb3186d",
        "parentId" : "c4bda151-eb68-449e-84d1-a0796a33d7e5",
        "authorId" : "8ae0caa5-9a81-4ec6-a72e-2c1411c61418",
        "body" : "Gotcha",
        "createdAt" : "2021-03-24T03:53:12Z",
        "updatedAt" : "2021-03-24T03:56:24Z",
        "lastEditedBy" : "8ae0caa5-9a81-4ec6-a72e-2c1411c61418",
        "tags" : [
        ]
      }
    ],
    "commit" : "12f8468fe03291a1da0803b9e5375ec079abd6e6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2558,2562 @@\t\tic := backend.Resource\n\t\tapiGroup := \"<none>\"\n\t\tif ic.APIGroup != nil {\n\t\t\tapiGroup = fmt.Sprintf(\"%v\", *ic.APIGroup)\n\t\t}"
  },
  {
    "id" : "5a581a6f-0d48-4b94-a02d-6823bdc21594",
    "prId" : 91824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91824#pullrequestreview-449985425",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cff7da46-80f0-4c07-99c4-0080a36745dc",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "typo in the commit message (\"ClutserIPs\")\r\n\r\nalso, we should modify the default columns for \"kubectl get\" to show ClusterIPs rather than ClusterIP too, right?",
        "createdAt" : "2020-07-16T15:23:41Z",
        "updatedAt" : "2020-10-26T18:06:38Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "ffbe6931-5d68-41e8-a684-431b6e67889f",
        "parentId" : "cff7da46-80f0-4c07-99c4-0080a36745dc",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "we don't change the `get` because scripts depend on column order and data. So we usually just update `describe`. This is what we followed before for `IPFamily` and `Pod.Status.PodIPs` ",
        "createdAt" : "2020-07-16T15:53:02Z",
        "updatedAt" : "2020-10-26T18:06:38Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "14b3451cfa7b96365807f3a0c7f952a87a8ef950",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +2721,2725 @@\t\tprintAnnotationsMultiline(w, \"Annotations\", service.Annotations)\n\t\tw.Write(LEVEL_0, \"Selector:\\t%s\\n\", labels.FormatLabels(service.Spec.Selector))\n\t\tw.Write(LEVEL_0, \"Type:\\t%s\\n\", service.Spec.Type)\n\n\t\tif service.Spec.IPFamilyPolicy != nil {"
  },
  {
    "id" : "abde10ad-40a9-4d40-91ac-1c3aae299481",
    "prId" : 91405,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91405#pullrequestreview-417719762",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cdf0d91-cd62-42bd-9f00-86f3c8da83bc",
        "parentId" : null,
        "authorId" : "7e507c4f-d321-46c7-844c-225563b1c638",
        "body" : "Above logic in line 4719 could be deleted:\r\n```\r\n\tif len(annotations) == 0 {\r\n\t\tw.WriteLine(\"<none>\")\r\n\t\treturn\r\n\t}\r\n```",
        "createdAt" : "2020-05-25T11:35:28Z",
        "updatedAt" : "2020-06-09T14:54:21Z",
        "lastEditedBy" : "7e507c4f-d321-46c7-844c-225563b1c638",
        "tags" : [
        ]
      },
      {
        "id" : "1852d980-5ad6-4d69-8373-c48e240d1315",
        "parentId" : "2cdf0d91-cd62-42bd-9f00-86f3c8da83bc",
        "authorId" : "74a85eb2-184f-4c1c-bd2d-da89b5ca8e64",
        "body" : "@zhouya0 \r\nYep, intentionally kept the changes very minimal since it's my first contribution. I've removed the above redundant code, let me know if it looks good now. Thanks!",
        "createdAt" : "2020-05-25T13:43:13Z",
        "updatedAt" : "2020-06-09T14:54:21Z",
        "lastEditedBy" : "74a85eb2-184f-4c1c-bd2d-da89b5ca8e64",
        "tags" : [
        ]
      }
    ],
    "commit" : "73a43f35f5c44e861eeb03353e372942e7e03761",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +4725,4729 @@\t\tkeys = append(keys, key)\n\t}\n\tif len(keys) == 0 {\n\t\tw.WriteLine(\"<none>\")\n\t\treturn"
  },
  {
    "id" : "ef123876-27bb-4b67-a1ae-4fb808ce9ac9",
    "prId" : 90691,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90691#pullrequestreview-439226417",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "202d9143-2b88-486e-a6aa-c13b2dad2199",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "cc @kubernetes/sig-cli-pr-reviews ",
        "createdAt" : "2020-06-29T15:40:58Z",
        "updatedAt" : "2020-10-21T19:17:39Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0fec7b0f7e2dfd4b0c6c57e086472546f6c69efa",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3654,3658 @@\t\t\t\t\tw.Write(LEVEL_1, \"(as a percentage of request):\\t%s / %s\\n\", current, target)\n\t\t\t\t}\n\t\t\tcase autoscalingv2beta2.ContainerResourceMetricSourceType:\n\t\t\t\tw.Write(LEVEL_1, \"resource %s of container \\\"%s\\\" on pods\", string(metric.ContainerResource.Name), metric.ContainerResource.Container)\n\t\t\t\tif metric.ContainerResource.Target.AverageValue != nil {"
  },
  {
    "id" : "4396b4c8-0d7f-4e94-98bc-f4525d11d54d",
    "prId" : 89646,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89646#pullrequestreview-583840461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae0f14f6-c673-4ae9-b436-5f452e5f331d",
        "parentId" : null,
        "authorId" : "5ba8956e-ec1f-452c-959a-ae0daad08298",
        "body" : "I realize this PR was already merged, but saw this and wanted to ask...\r\n\r\nIs checking `driver.Allocatable.Count != nil` sufficient to prevent a nil pointer exception?\r\n\r\nHow about this instead?\r\n```\r\nif driver.Allocatable != nil && driver.Allocatable.Count != nil {\r\n```\r\n\r\nAlso, it seems like there is not an existing unit test covering describe csinode, but it would be nice to have one.",
        "createdAt" : "2020-03-31T01:08:10Z",
        "updatedAt" : "2020-03-31T01:08:11Z",
        "lastEditedBy" : "5ba8956e-ec1f-452c-959a-ae0daad08298",
        "tags" : [
        ]
      },
      {
        "id" : "c90e0c2c-55cc-462a-b8e9-7b42cc825bd8",
        "parentId" : "ae0f14f6-c673-4ae9-b436-5f452e5f331d",
        "authorId" : "7e507c4f-d321-46c7-844c-225563b1c638",
        "body" : "Thanks for your review. @brianpursley \r\nSee:\r\nhttps://github.com/kubernetes/kubernetes/blob/a256498ba4e651ca0a3741707b4f5579a77e60ef/staging/src/k8s.io/api/storage/v1/types.go#L412-L424\r\nSo there are two reasons not considering `driver.Allocatable != nil`:\r\n1. struct `Allocatable` only have one filed `count`.\r\n2. Code here only describes `driver.Allocatable.Count` but not `driver.Allocatable`.\r\n\r\nBut the test is really needed, do you want to submit this test coverage PR?",
        "createdAt" : "2020-03-31T02:17:02Z",
        "updatedAt" : "2020-03-31T02:17:02Z",
        "lastEditedBy" : "7e507c4f-d321-46c7-844c-225563b1c638",
        "tags" : [
        ]
      },
      {
        "id" : "ae152d66-c031-4235-be2e-08f688051a36",
        "parentId" : "ae0f14f6-c673-4ae9-b436-5f452e5f331d",
        "authorId" : "5ba8956e-ec1f-452c-959a-ae0daad08298",
        "body" : "Thanks for the reply.\r\n\r\nI’m not sure I understand yet.\r\n\r\nCan `driver.Allocatable` be nil, and if so, won’t line 4035 fail when it tries to reference `.Count`?  Can you check it?\r\n",
        "createdAt" : "2020-03-31T02:57:14Z",
        "updatedAt" : "2020-03-31T02:57:14Z",
        "lastEditedBy" : "5ba8956e-ec1f-452c-959a-ae0daad08298",
        "tags" : [
        ]
      },
      {
        "id" : "4253ae92-2326-47fb-98f4-98b5fcd88cb6",
        "parentId" : "ae0f14f6-c673-4ae9-b436-5f452e5f331d",
        "authorId" : "7e507c4f-d321-46c7-844c-225563b1c638",
        "body" : "I get your point !  I'll correct this!",
        "createdAt" : "2020-03-31T03:10:38Z",
        "updatedAt" : "2020-03-31T03:10:38Z",
        "lastEditedBy" : "7e507c4f-d321-46c7-844c-225563b1c638",
        "tags" : [
        ]
      },
      {
        "id" : "189b3cff-c5f7-4647-b5c7-37f32ebf18f3",
        "parentId" : "ae0f14f6-c673-4ae9-b436-5f452e5f331d",
        "authorId" : "47dfb7ab-db92-411d-a70b-1dc70d2a9420",
        "body" : "hi @zhouya0 Was there a follow on PR to address this comment. Thanks!",
        "createdAt" : "2021-02-04T21:45:42Z",
        "updatedAt" : "2021-02-04T21:45:42Z",
        "lastEditedBy" : "47dfb7ab-db92-411d-a70b-1dc70d2a9420",
        "tags" : [
        ]
      }
    ],
    "commit" : "55c455e61f6f1e52337e04eeb4ebd41668ffef17",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +4033,4037 @@\t\t\t\tw.Write(LEVEL_2, \"%s:\\n\", driver.Name)\n\t\t\t\tw.Write(LEVEL_3, \"Node ID:\\t%s\\n\", driver.NodeID)\n\t\t\t\tif driver.Allocatable.Count != nil {\n\t\t\t\t\tw.Write(LEVEL_3, \"Allocatables:\\n\")\n\t\t\t\t\tw.Write(LEVEL_4, \"Count:\\t%d\\n\", *driver.Allocatable.Count)"
  }
]