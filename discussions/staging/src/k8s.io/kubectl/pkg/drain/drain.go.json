[
  {
    "id" : "dca3d5b3-ee16-46a6-97ce-e6ccc2931cf2",
    "prId" : 100724,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100724#pullrequestreview-626765584",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74ce00e8-6a85-4297-bce7-dff30e7f671c",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this changes to always use the group/version info published for the subresource, which has been present/correct since 1.8",
        "createdAt" : "2021-04-02T03:11:41Z",
        "updatedAt" : "2021-04-14T13:14:32Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a07d4460bf587d5771fa2df29ff5a628aec8769c",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +116,120 @@\t}\n\tfor _, resource := range resourceList.APIResources {\n\t\tif resource.Name == EvictionSubresource && resource.Kind == EvictionKind && len(resource.Group) > 0 && len(resource.Version) > 0 {\n\t\t\treturn schema.GroupVersion{Group: resource.Group, Version: resource.Version}, nil\n\t\t}"
  },
  {
    "id" : "d73f3288-c9ff-441b-933b-67aff4c92018",
    "prId" : 100206,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100206#pullrequestreview-613792269",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69aa29d8-f9ad-41c7-8374-594bdd315034",
        "parentId" : null,
        "authorId" : "b1f0d506-e4a7-4426-9b32-185f93f5e39d",
        "body" : "Is there a better way to add this? The reason it is not present is that these objects were loaded from a PodList, which does not include type meta on its items in the API response.",
        "createdAt" : "2021-03-16T22:58:29Z",
        "updatedAt" : "2021-03-16T22:58:29Z",
        "lastEditedBy" : "b1f0d506-e4a7-4426-9b32-185f93f5e39d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8bae3b449aab698decc9cedc2718ce20d80175f5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +222,226 @@\t\t// be catched by list.errors()\n\t\tpod.Kind = \"Pod\"\n\t\tpod.APIVersion = \"v1\"\n\t\tpods = append(pods, PodDelete{\n\t\t\tPod:    pod,"
  },
  {
    "id" : "1881726b-4006-406b-9eba-214f50983d9e",
    "prId" : 88337,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88337#pullrequestreview-361277384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b9a94aa-62c0-406b-ad84-1a76e7c0db75",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Do we need multiple?  Or is this just reusing other code?",
        "createdAt" : "2020-02-19T16:46:24Z",
        "updatedAt" : "2020-02-19T17:56:16Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "d773861c-343c-453b-8c90-d76c421befc5",
        "parentId" : "1b9a94aa-62c0-406b-ad84-1a76e7c0db75",
        "authorId" : "c924ff9d-2ff6-4d00-98bc-1de4b935110f",
        "body" : "Definitely you could get by with one instead of more than one if you're writing the filter yourself.  I think I prefer it as a slice of filters rather than just one filter.",
        "createdAt" : "2020-02-19T17:03:32Z",
        "updatedAt" : "2020-02-19T17:56:16Z",
        "lastEditedBy" : "c924ff9d-2ff6-4d00-98bc-1de4b935110f",
        "tags" : [
        ]
      },
      {
        "id" : "c19cc0c7-1978-4cf6-8579-20f5bdf341aa",
        "parentId" : "1b9a94aa-62c0-406b-ad84-1a76e7c0db75",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "If you leave it as an array, document the behavior (short circuit).",
        "createdAt" : "2020-02-19T17:12:31Z",
        "updatedAt" : "2020-02-19T17:56:16Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "85004f030dc3dceb9d15f41fdd607545758d5da2",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +69,73 @@\t// exclude pods using custom logic.  Any filter that returns PodDeleteStatus\n\t// with Delete == false will immediately stop execution of further filters.\n\tAdditionalFilters []PodFilter\n\n\tOut    io.Writer"
  },
  {
    "id" : "35962c78-2e4b-4363-ae22-5e3973eb8b50",
    "prId" : 87361,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87361#pullrequestreview-346410953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b81a415-72cb-4ed0-ab6d-abed2124b5eb",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Yeah, I agree with this change, especially after looking at https://github.com/kubernetes/kubernetes/blob/2808d7154dc820c2718d92eb2f000ffc5840b5d1/staging/src/k8s.io/kubectl/pkg/drain/filters.go#L160-L165.\r\n\r\nCan you please add a comment here, why this is done so, this will prevent eventual \"optimization\" like that from the PR you're reverting. ",
        "createdAt" : "2020-01-21T12:48:14Z",
        "updatedAt" : "2020-02-03T02:37:05Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "0b4c5467-91cb-4cdc-898f-37bb8e80e145",
        "parentId" : "3b81a415-72cb-4ed0-ab6d-abed2124b5eb",
        "authorId" : "7e507c4f-d321-46c7-844c-225563b1c638",
        "body" : "OK. I'll try to do this.",
        "createdAt" : "2020-01-22T08:28:36Z",
        "updatedAt" : "2020-02-03T02:37:05Z",
        "lastEditedBy" : "7e507c4f-d321-46c7-844c-225563b1c638",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3c8add683a095f1bffef1b0ca413f1e42be7fe0",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +184,188 @@\t\t// those pods whose podDeleteStatus is false like DaemonSet will\n\t\t// be catched by list.errors()\n\t\tpods = append(pods, podDelete{\n\t\t\tpod:    pod,\n\t\t\tstatus: status,"
  },
  {
    "id" : "a0eca2ce-7c55-4c52-a2a2-25f07844cb46",
    "prId" : 85577,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85577#pullrequestreview-326507298",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b55121fc-adc1-48a0-ba7a-19d9f55c3077",
        "parentId" : null,
        "authorId" : "d995a87c-4064-4495-9753-d0cf8a45072f",
        "body" : "I think we should add the KEP description of this feature as a comment here (the one that begins: \"Alternative to \"Unready Node Timeout\" above...)",
        "createdAt" : "2019-12-03T18:53:53Z",
        "updatedAt" : "2019-12-06T17:53:02Z",
        "lastEditedBy" : "d995a87c-4064-4495-9753-d0cf8a45072f",
        "tags" : [
        ]
      },
      {
        "id" : "995f6aee-263f-4e18-ab6b-aea3c7c98080",
        "parentId" : "b55121fc-adc1-48a0-ba7a-19d9f55c3077",
        "authorId" : "c924ff9d-2ff6-4d00-98bc-1de4b935110f",
        "body" : "Done.",
        "createdAt" : "2019-12-03T23:01:27Z",
        "updatedAt" : "2019-12-06T17:53:02Z",
        "lastEditedBy" : "c924ff9d-2ff6-4d00-98bc-1de4b935110f",
        "tags" : [
        ]
      }
    ],
    "commit" : "da53044abdf8c8a9771a5c3dfd861f0c4ec78c40",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +62,66 @@\t// option is appropriate; examples include the Node is unready and the pods\n\t// won't drain otherwise\n\tSkipWaitForDeleteTimeoutSeconds int\n\n\tOut    io.Writer"
  },
  {
    "id" : "eddc91a0-d356-4b94-bcf2-bb1597425fb8",
    "prId" : 83967,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83967#pullrequestreview-303385165",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d8dc0fc-3c75-4eaf-bce1-15e428e2e143",
        "parentId" : null,
        "authorId" : "6746e0cc-0c52-4344-889b-945a672c83e3",
        "body" : "Not related to the management of the goroutines, but should the value of globalTimeout also have an impact on the timeout passed to `waitForDelete` as well? It feels a bit odd that we could extend the timeout based on sitting in the call to `waitForDelete`",
        "createdAt" : "2019-10-15T19:54:21Z",
        "updatedAt" : "2019-10-21T19:22:01Z",
        "lastEditedBy" : "6746e0cc-0c52-4344-889b-945a672c83e3",
        "tags" : [
        ]
      },
      {
        "id" : "ffe20a2c-e61c-4b39-8eb3-712bd3f98f09",
        "parentId" : "3d8dc0fc-3c75-4eaf-bce1-15e428e2e143",
        "authorId" : "c924ff9d-2ff6-4d00-98bc-1de4b935110f",
        "body" : "That's what I thought too.  But actually, the bit at the bottom also catches the timeout and waitForDelete is closed for us.",
        "createdAt" : "2019-10-15T19:59:12Z",
        "updatedAt" : "2019-10-21T19:22:01Z",
        "lastEditedBy" : "c924ff9d-2ff6-4d00-98bc-1de4b935110f",
        "tags" : [
        ]
      },
      {
        "id" : "7437ffa1-aecf-48e2-866c-83359ef78427",
        "parentId" : "3d8dc0fc-3c75-4eaf-bce1-15e428e2e143",
        "authorId" : "c924ff9d-2ff6-4d00-98bc-1de4b935110f",
        "body" : "@detiber Looks like there was a goroutine leak here as well.  I updated.",
        "createdAt" : "2019-10-17T16:23:50Z",
        "updatedAt" : "2019-10-21T19:22:01Z",
        "lastEditedBy" : "c924ff9d-2ff6-4d00-98bc-1de4b935110f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0088a9e6a8c47b2710fc49b82a912861cda8a554",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +202,206 @@\t\tglobalTimeout = d.Timeout\n\t}\n\tctx, cancel := context.WithTimeout(context.TODO(), globalTimeout)\n\tdefer cancel()\n\tfor _, pod := range pods {"
  },
  {
    "id" : "18128d08-fcf5-4f18-a9b1-8543fb5f251b",
    "prId" : 83967,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83967#pullrequestreview-304650753",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43a872fe-f7f9-4597-9027-9ce01eca611f",
        "parentId" : null,
        "authorId" : "6746e0cc-0c52-4344-889b-945a672c83e3",
        "body" : "Would it make sense to also allow a user-provided context as well? In case there is a reason to stop progress for something other than hitting the globalTimeout?",
        "createdAt" : "2019-10-15T19:54:54Z",
        "updatedAt" : "2019-10-21T19:22:01Z",
        "lastEditedBy" : "6746e0cc-0c52-4344-889b-945a672c83e3",
        "tags" : [
        ]
      },
      {
        "id" : "6119eaf5-7f2d-44e5-935c-37c5be8c4cf0",
        "parentId" : "43a872fe-f7f9-4597-9027-9ce01eca611f",
        "authorId" : "c924ff9d-2ff6-4d00-98bc-1de4b935110f",
        "body" : "Yeah, I suggested the same in the PR's first comment.  But that would be a larger refactor and out of scope for this PR.",
        "createdAt" : "2019-10-15T20:00:08Z",
        "updatedAt" : "2019-10-21T19:22:01Z",
        "lastEditedBy" : "c924ff9d-2ff6-4d00-98bc-1de4b935110f",
        "tags" : [
        ]
      },
      {
        "id" : "002ecb65-8897-4d56-a79b-743aa83df375",
        "parentId" : "43a872fe-f7f9-4597-9027-9ce01eca611f",
        "authorId" : "6746e0cc-0c52-4344-889b-945a672c83e3",
        "body" : "I'm wondering if context should be plumbed through more of these methods, but not directly related to this PR.\r\n\r\n",
        "createdAt" : "2019-10-21T15:29:01Z",
        "updatedAt" : "2019-10-21T19:22:01Z",
        "lastEditedBy" : "6746e0cc-0c52-4344-889b-945a672c83e3",
        "tags" : [
        ]
      }
    ],
    "commit" : "0088a9e6a8c47b2710fc49b82a912861cda8a554",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +193,197 @@}\n\nfunc (d *Helper) evictPods(pods []corev1.Pod, policyGroupVersion string, getPodFn func(namespace, name string) (*corev1.Pod, error)) error {\n\treturnCh := make(chan error, 1)\n\t// 0 timeout means infinite, we use MaxInt64 to represent it."
  },
  {
    "id" : "848f4de0-9c73-4196-92b0-dc95dd23b6ec",
    "prId" : 83967,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83967#pullrequestreview-303583145",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b5e2eec-c19d-4a06-af4b-06b4f69d3a39",
        "parentId" : null,
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "Do we need this default statement?  Doesn't it just re-enter the loop and check again?",
        "createdAt" : "2019-10-17T22:27:50Z",
        "updatedAt" : "2019-10-21T19:22:01Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      },
      {
        "id" : "a9e665ea-7fd8-4fc4-ae1b-5c50a3f99fb2",
        "parentId" : "7b5e2eec-c19d-4a06-af4b-06b4f69d3a39",
        "authorId" : "c924ff9d-2ff6-4d00-98bc-1de4b935110f",
        "body" : "I'm not 100% sure.  I want to say it was blocking on reading from the channel without another case, I'll try to mock up a test locally.",
        "createdAt" : "2019-10-17T22:32:13Z",
        "updatedAt" : "2019-10-21T19:22:01Z",
        "lastEditedBy" : "c924ff9d-2ff6-4d00-98bc-1de4b935110f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0088a9e6a8c47b2710fc49b82a912861cda8a554",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +249,253 @@\t\t\t\terrors = append(errors, err)\n\t\t\t}\n\t\tdefault:\n\t\t}\n\t}"
  },
  {
    "id" : "9f46957d-d310-4bb9-8e78-93b1c5dc4836",
    "prId" : 83967,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83967#pullrequestreview-305330342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9502af1-d940-4804-b350-0019262ba6db",
        "parentId" : null,
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "FWIW, while there is no practical difference I am aware of, the golang examples use Background for creating a new context in WithTimeout.\r\n\r\nhttps://golang.org/pkg/context/#example_WithTimeout",
        "createdAt" : "2019-10-22T15:51:22Z",
        "updatedAt" : "2019-10-22T15:51:22Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      },
      {
        "id" : "80943eae-3a15-4df8-b645-c1411f0c6b67",
        "parentId" : "e9502af1-d940-4804-b350-0019262ba6db",
        "authorId" : "c924ff9d-2ff6-4d00-98bc-1de4b935110f",
        "body" : "TODO and background are one in the same.  TODO is just an indication that in the future, we should add support for an actual context to be passed in: https://golang.org/src/context/context.go?s=7599:7618#L203",
        "createdAt" : "2019-10-22T16:07:54Z",
        "updatedAt" : "2019-10-22T16:07:54Z",
        "lastEditedBy" : "c924ff9d-2ff6-4d00-98bc-1de4b935110f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0088a9e6a8c47b2710fc49b82a912861cda8a554",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +202,206 @@\t\tglobalTimeout = d.Timeout\n\t}\n\tctx, cancel := context.WithTimeout(context.TODO(), globalTimeout)\n\tdefer cancel()\n\tfor _, pod := range pods {"
  },
  {
    "id" : "fb355dcd-6b42-4a10-ab82-a002e1ec6a52",
    "prId" : 80045,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80045#pullrequestreview-276686721",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a845901c-e0fd-4b4d-8c54-e1cf2ec2e16e",
        "parentId" : null,
        "authorId" : "d995a87c-4064-4495-9753-d0cf8a45072f",
        "body" : "Now that this function is exported, there should be tests specifically calling/exercising this function.",
        "createdAt" : "2019-08-15T18:29:59Z",
        "updatedAt" : "2019-08-21T01:26:22Z",
        "lastEditedBy" : "d995a87c-4064-4495-9753-d0cf8a45072f",
        "tags" : [
        ]
      },
      {
        "id" : "bc1ef270-4bd8-4ca9-a5ca-7c6445eb7503",
        "parentId" : "a845901c-e0fd-4b4d-8c54-e1cf2ec2e16e",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "Created a test using mocks.",
        "createdAt" : "2019-08-19T20:24:34Z",
        "updatedAt" : "2019-08-21T01:26:22Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bba4449ae41a7889ad29da4bd1704ae8d19d126",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +171,175 @@\n// DeleteOrEvictPods deletes or evicts the pods on the api server\nfunc (d *Helper) DeleteOrEvictPods(pods []corev1.Pod) error {\n\tif len(pods) == 0 {\n\t\treturn nil"
  }
]