[
  {
    "id" : "64dae1d0-de4a-4a89-9dab-7dcb2f4a85b8",
    "prId" : 97408,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97408#pullrequestreview-567882920",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed2ecc72-bba3-4b80-ab3a-5796530b5559",
        "parentId" : null,
        "authorId" : "5ba8956e-ec1f-452c-959a-ae0daad08298",
        "body" : "Seems like you would also need a test for when observedGeneration is on status, not just for when it is on the condition.",
        "createdAt" : "2021-01-13T02:31:51Z",
        "updatedAt" : "2021-01-14T06:36:44Z",
        "lastEditedBy" : "5ba8956e-ec1f-452c-959a-ae0daad08298",
        "tags" : [
        ]
      },
      {
        "id" : "3d49296d-33fa-41bb-85cb-5757694f517f",
        "parentId" : "ed2ecc72-bba3-4b80-ab3a-5796530b5559",
        "authorId" : "d3fe3854-a059-4b84-8a4b-6fb7aa7eb36f",
        "body" : "@brianpursley \r\nCorrect I chose to not test all combinations of wait. I figured testing one would be sufficient, as the function to pick observedGeneration from condition or status was fairly basic.\r\n\r\nI can add a test case for the following function\r\nhttps://github.com/kubernetes/kubernetes/blob/44aff9917566885ab5d8cc712a3330bac1923214/staging/src/k8s.io/kubectl/pkg/cmd/wait/wait.go#L478-L485\r\n\r\nWould you prefer for me to test the function getObservedGeneration directly, or test waiting on .status.observedGeneration to change. Or not test either as it is straight forward.",
        "createdAt" : "2021-01-13T07:05:17Z",
        "updatedAt" : "2021-01-14T06:36:44Z",
        "lastEditedBy" : "d3fe3854-a059-4b84-8a4b-6fb7aa7eb36f",
        "tags" : [
        ]
      },
      {
        "id" : "88c669e7-6bf3-4cc8-a079-6f21e2faa0f0",
        "parentId" : "ed2ecc72-bba3-4b80-ab3a-5796530b5559",
        "authorId" : "d3fe3854-a059-4b84-8a4b-6fb7aa7eb36f",
        "body" : "I added tests for .status.observedGeneration changing",
        "createdAt" : "2021-01-14T06:37:23Z",
        "updatedAt" : "2021-01-14T06:37:23Z",
        "lastEditedBy" : "d3fe3854-a059-4b84-8a4b-6fb7aa7eb36f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bca0ddeba0d669093d04a148cef4d4179e2fa271",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +96,100 @@}\n\nfunc addConditionWithObservedGeneration(in *unstructured.Unstructured, name, status string, observedGeneration int64) *unstructured.Unstructured {\n\tconditions, _, _ := unstructured.NestedSlice(in.Object, \"status\", \"conditions\")\n\tconditions = append(conditions, map[string]interface{}{"
  },
  {
    "id" : "ada5d1ae-d122-45f5-979f-cfbcb15a0608",
    "prId" : 96020,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96020#pullrequestreview-523497379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8e9d93c-cb23-428b-8d7f-d07ab3657e59",
        "parentId" : null,
        "authorId" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "body" : "is this necessary? could you keep using NewSimpleDynamicClient(scheme) here and in other call sites above?",
        "createdAt" : "2020-10-30T00:16:42Z",
        "updatedAt" : "2020-11-04T19:57:25Z",
        "lastEditedBy" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "tags" : [
        ]
      },
      {
        "id" : "1fd9a8f0-b511-4d1d-b322-78cb468ed52c",
        "parentId" : "f8e9d93c-cb23-428b-8d7f-d07ab3657e59",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> is this necessary? could you keep using NewSimpleDynamicClient(scheme) here and in other call sites above?\r\n\r\nI can't because the existing tests separate resources and versions with unguessable names.  I have to provide the mapping somehow and schemes don't allow it.  I'm not sure how many other locations will face the same issue.  Plurals in english are weird (and that's just english), so I think this is needed to provide people a path to upgrade.",
        "createdAt" : "2020-10-30T18:24:52Z",
        "updatedAt" : "2020-11-04T19:57:25Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "b2b7952b-3a61-40cb-be16-d4c387814ab9",
        "parentId" : "f8e9d93c-cb23-428b-8d7f-d07ab3657e59",
        "authorId" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "body" : "ok. the other way is to make it always guessable, which means changing the guess function if/when necessary.",
        "createdAt" : "2020-10-30T19:05:26Z",
        "updatedAt" : "2020-11-04T19:57:25Z",
        "lastEditedBy" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "tags" : [
        ]
      },
      {
        "id" : "1234229c-5f1d-419b-98dc-0b2aeb162cf8",
        "parentId" : "f8e9d93c-cb23-428b-8d7f-d07ab3657e59",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> ok. the other way is to make it always guessable, which means changing the guess function if/when necessary.\r\n\r\nexternal components (imagine you have a custom operator) cannot modify that code.",
        "createdAt" : "2020-11-04T15:54:53Z",
        "updatedAt" : "2020-11-04T19:57:25Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "f4383458432cd67714e9ce0acde56a2ed5c24a21",
    "line" : 164,
    "diffHunk" : "@@ -1,1 +812,816 @@\t}\n\tfakeClient := dynamicfakeclient.NewSimpleDynamicClientWithCustomListKinds(scheme, listMapping)\n\n\to := &WaitOptions{\n\t\tResourceFinder: genericclioptions.NewSimpleFakeResourceFinder(infos...),"
  }
]