[
  {
    "id" : "f93b489d-81e0-45b7-95ca-7545f8447181",
    "prId" : 97820,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97820#pullrequestreview-564281171",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee811a4c-4adf-4373-abcc-ab0d34d74815",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "name the errors differently  to make this very clear for us in the future.",
        "createdAt" : "2021-01-08T14:03:50Z",
        "updatedAt" : "2021-01-08T16:30:43Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae2b353fbf519b29d168c534f88c373fd67a1c31",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +108,112 @@\t)\n\t// WithExponentialBackoff will return tokenreview create error (tokenReviewErr) if any.\n\tif err := webhook.WithExponentialBackoff(ctx, w.retryBackoff, func() error {\n\t\tvar tokenReviewErr error\n\t\tresult, tokenReviewErr = w.tokenReview.Create(ctx, r, metav1.CreateOptions{})"
  },
  {
    "id" : "9a86279f-73a1-47c9-9a49-ef168b4d346c",
    "prId" : 83064,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83064#pullrequestreview-293045265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "175ca0ce-82c8-4bd4-bc4d-267873c647e2",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "why is a context not passed from callsite as we've talked about doing in a future client-go?  I accept that this is congruent and would allow compatibility.  You would choose that over simply say, \"new version, if you want it, update\"?",
        "createdAt" : "2019-09-25T12:30:47Z",
        "updatedAt" : "2019-09-25T12:30:47Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "4b37b84f-36ba-4e9a-b2be-0a46b1512f1b",
        "parentId" : "175ca0ce-82c8-4bd4-bc4d-267873c647e2",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "This is to ease update from one version of the library to the next",
        "createdAt" : "2019-09-25T12:42:30Z",
        "updatedAt" : "2019-09-25T12:42:31Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b78edd86b8766b96278bcb46301f751d9e6e3631",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +171,175 @@}\n\nfunc (t *tokenReviewClient) Create(tokenReview *authentication.TokenReview) (*authentication.TokenReview, error) {\n\treturn t.CreateContext(context.Background(), tokenReview)\n}"
  },
  {
    "id" : "ff9326db-56f6-4887-a7a7-ddb2a30d7f8e",
    "prId" : 83064,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83064#pullrequestreview-293041050",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98e755bd-00cc-44e2-b913-482d185dedb9",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "ah ha!  This is the reason why, along with https://github.com/kubernetes/kubernetes/pull/83064/files#diff-e02d5c7606cf5bce2b8346ee8eadca9dR108 .  That took a little plumbing eh?",
        "createdAt" : "2019-09-25T12:35:47Z",
        "updatedAt" : "2019-09-25T12:35:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "b78edd86b8766b96278bcb46301f751d9e6e3631",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +100,104 @@\t)\n\twebhook.WithExponentialBackoff(ctx, w.initialBackoff, func() error {\n\t\tresult, err = w.tokenReview.CreateContext(ctx, r)\n\t\treturn err\n\t})"
  },
  {
    "id" : "19a2cb03-6e5e-4391-a8f7-67385f6582f2",
    "prId" : 69582,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69582#pullrequestreview-165150816",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2b923a3-374f-4b55-b7de-0c54697ee9e0",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "TODOs here:\r\n* take implicit audiences at WebhookTokenAuthenticator construction time\r\n* if ctx is audience-limited, add into the tokenreview object\r\n* if the tokenreview returns with an audience set that matches the ctx, copy into the response and return success\r\n* if the tokenreview returns without an audience set, ensure the ctx audiences intersect with the implicit audiences taken at WebhookTokenAuthenticator construction time, and pick one to add into the response",
        "createdAt" : "2018-10-16T13:38:04Z",
        "updatedAt" : "2018-10-22T19:11:52Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "809f278b032103cd24fcbb5ea2196c6c7caa6f63",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +71,75 @@\n// AuthenticateToken implements the authenticator.Token interface.\nfunc (w *WebhookTokenAuthenticator) AuthenticateToken(ctx context.Context, token string) (*authenticator.Response, bool, error) {\n\tr := &authentication.TokenReview{\n\t\tSpec: authentication.TokenReviewSpec{Token: token},"
  }
]