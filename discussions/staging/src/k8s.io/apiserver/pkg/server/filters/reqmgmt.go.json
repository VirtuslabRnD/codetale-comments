[
  {
    "id" : "ddecc299-ef01-4034-8f35-9a96f93adf18",
    "prId" : 80628,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80628#pullrequestreview-270557648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "609d0b98-b646-4609-8384-3a1881991ca8",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The last part of this comment needs updating.",
        "createdAt" : "2019-08-03T05:45:30Z",
        "updatedAt" : "2019-08-03T06:27:58Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "91650f43-26c6-4286-971f-8049fba18a31",
        "parentId" : "609d0b98-b646-4609-8384-3a1881991ca8",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "it's updated in #80956",
        "createdAt" : "2019-08-05T04:19:53Z",
        "updatedAt" : "2019-08-05T04:19:53Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "1669c6c1-6c20-4966-8e0c-b20d77b3efd2",
        "parentId" : "609d0b98-b646-4609-8384-3a1881991ca8",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I know :-)",
        "createdAt" : "2019-08-05T04:56:46Z",
        "updatedAt" : "2019-08-05T04:56:47Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bb5226c7c14901d3b993adacb70b98d946aea61",
    "line" : 198,
    "diffHunk" : "@@ -1,1 +35,39 @@// WithRequestManagement limits the number of in-flight\n// requests in a fine-grained way and is more appropriate than\n// WithRequestManagement for testing\nfunc WithRequestManagement(\n\thandler http.Handler,"
  },
  {
    "id" : "8da22c7f-c95d-43f7-a30b-1000d16923a3",
    "prId" : 80628,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80628#pullrequestreview-270447799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2667201e-239b-42ec-9827-e676cfaea486",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "`PickFlowSchema` and `RequestPriorityState` can be combined into one function, which I think would naturally be called `Classify`.  Also, there are a lot of function calls to pick out arguments, from inside another package, which are then handed back to a function in that same package.  It would be more natural to wrap all those details inside `Classify` and make that a method of `rmState`.  Thus I suggest:\r\n```\r\n    fs, ps := rmState.Classify(requestDigest)\r\n```",
        "createdAt" : "2019-08-03T06:00:55Z",
        "updatedAt" : "2019-08-03T06:27:58Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bb5226c7c14901d3b993adacb70b98d946aea61",
    "line" : 257,
    "diffHunk" : "@@ -1,1 +69,73 @@\t\t\trmState := reqMgmt.GetCurrentState()\n\t\t\tfs := utilflowcontrol.PickFlowSchema(requestDigest, rmState.GetFlowSchemas(), rmState.GetPriorityLevelStates())\n\t\t\tps := utilflowcontrol.RequestPriorityState(requestDigest, fs, rmState.GetPriorityLevelStates())\n\t\t\tif ps.IsExempt() {\n\t\t\t\tklog.V(5).Infof(\"Serving %v without delay\\n\", r)"
  },
  {
    "id" : "e8527dc0-b922-4422-a936-44eb1456f41f",
    "prId" : 80628,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80628#pullrequestreview-270557815",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c781927-054b-4764-bc6d-8651abb5d3f7",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "That function is now misnamed; it does not return a flow distinguisher, it returns a hash value.",
        "createdAt" : "2019-08-03T06:02:03Z",
        "updatedAt" : "2019-08-03T06:27:58Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "ad86c024-54da-4457-9885-db9b2441cda1",
        "parentId" : "0c781927-054b-4764-bc6d-8651abb5d3f7",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "is it also updated in #80956?",
        "createdAt" : "2019-08-05T04:20:34Z",
        "updatedAt" : "2019-08-05T04:20:35Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "af411310-e9cb-466a-973e-0f6d7e799b4b",
        "parentId" : "0c781927-054b-4764-bc6d-8651abb5d3f7",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Indeed.",
        "createdAt" : "2019-08-05T04:57:55Z",
        "updatedAt" : "2019-08-05T04:57:56Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bb5226c7c14901d3b993adacb70b98d946aea61",
    "line" : 266,
    "diffHunk" : "@@ -1,1 +75,79 @@\t\t\t\treturn\n\t\t\t}\n\t\t\thashValue := utilflowcontrol.ComputeFlowDistinguisher(requestDigest, fs)\n\t\t\tquiescent, execute, afterExecute := ps.GetFairQueuingSystem().Wait(hashValue, ps.GetHandSize())\n\t\t\tif quiescent {"
  },
  {
    "id" : "bfda2af5-4b5c-4353-9588-0d86bb95f7f2",
    "prId" : 80628,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80628#pullrequestreview-270557887",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34e0a96d-3b76-4c82-a94e-e03806055202",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "This also seems unnecessarily exposing details outside the package where they are homed.  Also, the hash value is only used in this call and so the hash computation could be folded in here.  Thus I suggest:\r\n```\r\n    quiescent, execute, afterExecute := ps.Wait(requestDigest, fs)\r\n```",
        "createdAt" : "2019-08-03T06:04:04Z",
        "updatedAt" : "2019-08-03T06:27:58Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "b594d466-154e-4129-bc8e-7e308815987c",
        "parentId" : "34e0a96d-3b76-4c82-a94e-e03806055202",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "And the early out for Exempt can be folded into Wait.  That leaves us with a sequence of three calls here (GetCurrentState, Classify, Wait) that can be merged into one.",
        "createdAt" : "2019-08-04T14:10:43Z",
        "updatedAt" : "2019-08-04T14:10:43Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "806d1b79-5455-4647-b366-93b5c6b6ea25",
        "parentId" : "34e0a96d-3b76-4c82-a94e-e03806055202",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "+1 on hiding unnecessarily details. the change is in #80956, is it?",
        "createdAt" : "2019-08-05T04:21:49Z",
        "updatedAt" : "2019-08-05T04:21:49Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "120de10a-f36b-4492-8904-9436917ec228",
        "parentId" : "34e0a96d-3b76-4c82-a94e-e03806055202",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "yes",
        "createdAt" : "2019-08-05T04:58:21Z",
        "updatedAt" : "2019-08-05T04:58:21Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bb5226c7c14901d3b993adacb70b98d946aea61",
    "line" : 267,
    "diffHunk" : "@@ -1,1 +76,80 @@\t\t\t}\n\t\t\thashValue := utilflowcontrol.ComputeFlowDistinguisher(requestDigest, fs)\n\t\t\tquiescent, execute, afterExecute := ps.GetFairQueuingSystem().Wait(hashValue, ps.GetHandSize())\n\t\t\tif quiescent {\n\t\t\t\tklog.V(3).Infof(\"Request %v landed in timing splinter, re-classifying\", r)"
  },
  {
    "id" : "95f13f64-01cf-4f27-bbcc-3b45d9b8b32e",
    "prId" : 78966,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78966#pullrequestreview-265207869",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "433b2695-f16f-4e58-8a9b-712a7ba13f3d",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "`requestWaitLimit` is this meant for a time-out for those requests pending in queues? there's already a time-out handler filter, we probably don't want them to overlap.. ",
        "createdAt" : "2019-07-18T05:09:33Z",
        "updatedAt" : "2019-07-25T00:37:16Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "781a18cf-201b-4669-842b-549e6e6ef085",
        "parentId" : "433b2695-f16f-4e58-8a9b-712a7ba13f3d",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "This parameter is introduced in https://github.com/kubernetes/enhancements/blob/79119ce549cda9cdfdb532273475ea5090fa5415/keps/sig-api-machinery/20190228-priority-and-fairness.md#latency-protection .  In particular, I think it must be set to something substantially shorter than the limit imposed by the timeout filter.  It does not make sense to allow a request to wait in a queue for longer than the total time allowed for waiting+executing.  In fact, I think the wait duration limit should be short enough that the majority of the overall duration limit is available for request execution.",
        "createdAt" : "2019-07-18T16:07:28Z",
        "updatedAt" : "2019-07-25T00:37:16Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "0e7f85aa-19dc-4063-b972-44b89ad5c984",
        "parentId" : "433b2695-f16f-4e58-8a9b-712a7ba13f3d",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : ">  I think it must be set to something substantially shorter than the limit imposed by the timeout filter\r\n\r\ni see, we can check that when validating the flags, what do you think will be the default value for this timeout?",
        "createdAt" : "2019-07-22T04:34:07Z",
        "updatedAt" : "2019-07-25T00:37:16Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "10229621-d33c-4cf6-b71a-b9afa45d794a",
        "parentId" : "433b2695-f16f-4e58-8a9b-712a7ba13f3d",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I suggest scaling it with the upstream timeout.  I suggest setting the wait duration limit to 1/4 of the upstream timeout.",
        "createdAt" : "2019-07-23T07:09:00Z",
        "updatedAt" : "2019-07-25T00:37:16Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "73fb37b389e55dee910db4b1d524549f1ed813dd",
    "line" : 237,
    "diffHunk" : "@@ -1,1 +235,239 @@\tkubeClient kubernetes.Interface,\n\tserverConcurrencyLimit int,\n\trequestWaitLimit time.Duration,\n\tlongRunningRequestCheck apirequest.LongRunningRequestCheck,\n\tclk clock.Clock,"
  },
  {
    "id" : "3de7db95-cae3-4f85-8814-b49c6db57438",
    "prId" : 78966,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78966#pullrequestreview-263757213",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37770169-9533-43ea-b80a-01a8648de434",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : ">      --max-mutating-requests-inflight int           The maximum number of mutating requests in flight at a given time. When the server exceeds this, it rejects requests. Zero for no limit. (default 200)\r\n>      --max-requests-inflight int                    The maximum number of non-mutating requests in flight at a given time. When the server exceeds this, it rejects requests. Zero for no limit. (default 400)\r\n\r\niiuc, the limit value reads from these flags, amiright? `serverConcurrencyLimit` = `max-mutating-requests-inflight` + `max-requests-inflight` ",
        "createdAt" : "2019-07-18T05:15:11Z",
        "updatedAt" : "2019-07-25T00:37:16Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "449d0616-5a72-41cb-98e0-865caffe9419",
        "parentId" : "37770169-9533-43ea-b80a-01a8648de434",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "See https://github.com/kubernetes/enhancements/blob/79119ce549cda9cdfdb532273475ea5090fa5415/keps/sig-api-machinery/20190228-priority-and-fairness.md#primary-cpu-and-memory-protection , including its last paragraph.",
        "createdAt" : "2019-07-18T16:04:07Z",
        "updatedAt" : "2019-07-25T00:37:16Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "73fb37b389e55dee910db4b1d524549f1ed813dd",
    "line" : 236,
    "diffHunk" : "@@ -1,1 +234,238 @@\thandler http.Handler,\n\tkubeClient kubernetes.Interface,\n\tserverConcurrencyLimit int,\n\trequestWaitLimit time.Duration,\n\tlongRunningRequestCheck apirequest.LongRunningRequestCheck,"
  },
  {
    "id" : "3799106e-2fac-4fd1-bf1c-b410a223caee",
    "prId" : 78966,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78966#pullrequestreview-263757213",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e38b5d6d-b2af-48e5-a6f3-e4e81fed30b9",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "does it have to be a public/exported type?",
        "createdAt" : "2019-07-18T05:17:12Z",
        "updatedAt" : "2019-07-25T00:37:16Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "a0ea3acb-108f-4400-b5bb-62653cc590ce",
        "parentId" : "e38b5d6d-b2af-48e5-a6f3-e4e81fed30b9",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I think the division of this stuff among packages is still TBD, so I have not worried about making the right decision for each name yet.",
        "createdAt" : "2019-07-18T16:01:55Z",
        "updatedAt" : "2019-07-25T00:37:16Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "73fb37b389e55dee910db4b1d524549f1ed813dd",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +183,187 @@// TypedConfigObjectReference is a reference to a relevant config API object.\n// No namespace is needed because none of these objects is namespaced.\ntype TypedConfigObjectReference struct {\n\tKind string\n\tName string"
  },
  {
    "id" : "83c400fe-e880-4ddc-9ed2-f454114bda4e",
    "prId" : 78966,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78966#pullrequestreview-263757213",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a509cd13-18ea-4d2a-92e1-ebe36141c749",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "we don't need to completely skip long-running requests.. we can start by processing them in a simple way in the beginning: how about we make the long-running requests consume one quota from the PL (and returns it on finishing) but it doesn't has to go through the queues(sharding+fair-queuing). i remember we agree that the point of introducing conconcurrency limit is to address the long-running calls, at least starting from a simple way.",
        "createdAt" : "2019-07-18T05:37:49Z",
        "updatedAt" : "2019-07-25T00:37:16Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "6a405130-57d0-4622-b93a-e97084138e49",
        "parentId" : "a509cd13-18ea-4d2a-92e1-ebe36141c749",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "No, we agreed that these are out of scope.  See the third item in https://github.com/kubernetes/enhancements/blob/79119ce549cda9cdfdb532273475ea5090fa5415/keps/sig-api-machinery/20190228-priority-and-fairness.md#non-goals",
        "createdAt" : "2019-07-18T16:09:46Z",
        "updatedAt" : "2019-07-25T00:37:16Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "73fb37b389e55dee910db4b1d524549f1ed813dd",
    "line" : 252,
    "diffHunk" : "@@ -1,1 +250,254 @@\n\t\t// Skip tracking long running events.\n\t\tif longRunningRequestCheck != nil && longRunningRequestCheck(r, requestInfo) {\n\t\t\thandler.ServeHTTP(w, r)\n\t\t\treturn"
  },
  {
    "id" : "4dab0cc4-8b17-4178-a930-986c6fe9ec33",
    "prId" : 78966,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78966#pullrequestreview-264604330",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1cbf4a9-bc5c-4ede-82c9-7d1e0f6a4f54",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "it's better if we use uid as key here? avoiding PL w/ the same name got removed and created instantly?",
        "createdAt" : "2019-07-18T05:55:32Z",
        "updatedAt" : "2019-07-25T00:37:16Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "ed02e519-93f5-449b-8b98-58c987bb9c2d",
        "parentId" : "a1cbf4a9-bc5c-4ede-82c9-7d1e0f6a4f54",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Yes, that would be part of the implementation if we agree on that behavior.  We have not agreed on what the desired behavior is.  https://github.com/kubernetes/enhancements/pull/1098/files#r300193486",
        "createdAt" : "2019-07-22T05:22:33Z",
        "updatedAt" : "2019-07-25T00:37:16Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "73fb37b389e55dee910db4b1d524549f1ed813dd",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +115,119 @@\t// priorityLevelStates maps the PriorityLevelConfiguration object\n\t// name to the state for that level\n\tpriorityLevelStates map[string]*PriorityLevelState\n}\n"
  },
  {
    "id" : "0aa79d2e-6390-449d-a62c-3f03ed873add",
    "prId" : 78966,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78966#pullrequestreview-267003070",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36ec7565-dcdf-4c03-b786-0af88fa0bd56",
        "parentId" : null,
        "authorId" : "65274c24-758d-49d6-96bf-a6c0fd7c510b",
        "body" : "I'm not sure I understand the purpose of the `for` loop here.  Additionally I'm not sure I understand from the skeleton how code exits this loop.",
        "createdAt" : "2019-07-26T04:49:27Z",
        "updatedAt" : "2019-07-26T04:49:27Z",
        "lastEditedBy" : "65274c24-758d-49d6-96bf-a6c0fd7c510b",
        "tags" : [
        ]
      },
      {
        "id" : "6422f2d1-3f96-4c87-aa7a-67f5b275e8cd",
        "parentId" : "36ec7565-dcdf-4c03-b786-0af88fa0bd56",
        "authorId" : "65274c24-758d-49d6-96bf-a6c0fd7c510b",
        "body" : "I think we might want to `return` after the execute select cases and the reject cases",
        "createdAt" : "2019-07-26T04:53:41Z",
        "updatedAt" : "2019-07-26T04:54:36Z",
        "lastEditedBy" : "65274c24-758d-49d6-96bf-a6c0fd7c510b",
        "tags" : [
        ]
      },
      {
        "id" : "c648ce1e-6d19-41ce-8f82-ee07fbc99b7c",
        "parentId" : "36ec7565-dcdf-4c03-b786-0af88fa0bd56",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Oops!  Right!\r\nThe purpose of the loop is just to be able to do a retry in the quiescing case.",
        "createdAt" : "2019-07-26T05:59:20Z",
        "updatedAt" : "2019-07-26T05:59:44Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "73fb37b389e55dee910db4b1d524549f1ed813dd",
    "line" : 257,
    "diffHunk" : "@@ -1,1 +255,259 @@\t\t}\n\n\t\tfor {\n\t\t\trmState := reqMgmt.curState.Load().(*RMState)\n\t\t\tfs := reqMgmt.pickFlowSchema(r, rmState.flowSchemas, rmState.priorityLevelStates)"
  }
]