[
  {
    "id" : "392b27a6-fdf4-4f9c-b05a-cabf0b0adb7d",
    "prId" : 103042,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103042#pullrequestreview-690075194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11a658ce-4d8b-4991-8f03-41b924514a94",
        "parentId" : null,
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "if `NonBlockingRun` returns an `error` we won't:\r\n- stop the AuditBacked\r\n- stop the `goroutine 1`\r\n- stop the `goroutine 2`",
        "createdAt" : "2021-06-22T11:37:43Z",
        "updatedAt" : "2021-06-22T11:37:43Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      },
      {
        "id" : "2a83fa85-0583-41e6-afd9-570184cb8fa4",
        "parentId" : "11a658ce-4d8b-4991-8f03-41b924514a94",
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "we are aborting, the primary goroutine that is executing `Run` will abort and all other go routines will be aborted with it. I don't think we need to be graceful when `Run` returns an error, thoughts?",
        "createdAt" : "2021-06-22T21:43:51Z",
        "updatedAt" : "2021-06-22T21:43:51Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      },
      {
        "id" : "9d604fdc-103f-4e7a-b930-35bdefb994fc",
        "parentId" : "11a658ce-4d8b-4991-8f03-41b924514a94",
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "okay, I moved `s.AuditBackend.Run` to its original site, now it is in keeping with the current implementation",
        "createdAt" : "2021-06-22T23:21:08Z",
        "updatedAt" : "2021-06-22T23:21:09Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      }
    ],
    "commit" : "913c449a42f13da758fca2740474bb33d3b65da8",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +353,357 @@\t// close socket after delayed stopCh\n\tstoppedCh, listenerStoppedCh, err := s.NonBlockingRun(delayedStopCh.Signaled())\n\tif err != nil {\n\t\treturn err\n\t}"
  },
  {
    "id" : "5b4b3e9a-bb0c-4941-9c21-dc09171afc0d",
    "prId" : 103042,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103042#pullrequestreview-690027075",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b236235-09e9-4437-9f15-cad66e426092",
        "parentId" : null,
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "should we convert to structured logging?",
        "createdAt" : "2021-06-22T11:39:38Z",
        "updatedAt" : "2021-06-22T11:39:38Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      },
      {
        "id" : "970ee3d2-552c-4814-aecd-912bad911267",
        "parentId" : "0b236235-09e9-4437-9f15-cad66e426092",
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "`[graceful-termination]` is just a prefix so we can search all graceful termination related log entries with this keyword. Is there a way to add a prefix in structured logging? ",
        "createdAt" : "2021-06-22T21:45:48Z",
        "updatedAt" : "2021-06-22T21:45:48Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      }
    ],
    "commit" : "913c449a42f13da758fca2740474bb33d3b65da8",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +381,385 @@\t\treturn err\n\t}\n\tklog.V(1).Info(\"[graceful-termination] RunPreShutdownHooks has completed\")\n\n\t// Wait for all requests in flight to drain, bounded by the RequestTimeout variable."
  },
  {
    "id" : "a5933247-aa54-4541-904a-0a06bd5d67f0",
    "prId" : 102671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102671#pullrequestreview-678686061",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aaa487e8-af9a-40f5-a0ed-60cbbe02bba7",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I don't understand this change.\r\n\r\nWe wait for delayedStopCh 4 lines above. So the new goroutine you introduced doesn't add any new synchronization.\r\n\r\nCan you explain?",
        "createdAt" : "2021-06-08T05:26:27Z",
        "updatedAt" : "2021-06-08T05:26:27Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "88b03694-c8dc-4652-8057-9c19a35db669",
        "parentId" : "aaa487e8-af9a-40f5-a0ed-60cbbe02bba7",
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "@wojtek-t  so this is the sequence of events:\r\n- `A`:  T+0s: we receive `KILL` signal (`stopCh` is signaled)\r\n- `B`: T+70s: `ShutdownDelayDuration` elapses, (`delayedStopCh` is signaled)\r\n- `C`: T+70s: as soon as `ShutdownDelayDuration` elapses we should signal `WithWaitGroup` that it should send `5xx` with a `Retry-After` response header.\r\n- `D`: wait for existing requests in flight to drain\r\n- `E`: The `server.Shutdown` returns (`stoppedCh` is signaled)\r\n\r\nSo currently `C` happens after `E`, the new goroutine in this PR ensures that `C` happens immediately after `B`. \r\n\r\n> We wait for delayedStopCh 4 lines above.\r\n\r\nyes, we don't really need that any longer, it can be simplified as shown below:\r\n```\r\n<-drainedCh\r\n<-stoppedCh\r\n```\r\n",
        "createdAt" : "2021-06-08T13:28:17Z",
        "updatedAt" : "2021-06-08T13:28:17Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      },
      {
        "id" : "de2271c8-f529-461a-8cf9-e612289d0f5d",
        "parentId" : "aaa487e8-af9a-40f5-a0ed-60cbbe02bba7",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "OK - that makes sense.\r\n\r\nPlease update this part to what you wrote above then.",
        "createdAt" : "2021-06-08T13:34:51Z",
        "updatedAt" : "2021-06-08T13:34:51Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "414b8484-8ea1-428a-804e-0472775d6297",
        "parentId" : "aaa487e8-af9a-40f5-a0ed-60cbbe02bba7",
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "done, thanks!\r\n\r\nalso, as an FYI, I have a WIP PR https://github.com/kubernetes/kubernetes/pull/101257 that makes an attempt at:\r\n- refactors the graceful termination logic and adds unit test so we can verify the expected behavior. \r\n- add a new mode of graceful termination to keep listening until the existing requests in flight drain\r\n\r\nI am going to split it to two separate PRs - one with the refactor only and the other with new mode, I will ping you when it is ready for review. ",
        "createdAt" : "2021-06-08T13:47:22Z",
        "updatedAt" : "2021-06-08T13:47:48Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      },
      {
        "id" : "4d58664e-dbf4-4770-8096-5ef58e30dfa1",
        "parentId" : "aaa487e8-af9a-40f5-a0ed-60cbbe02bba7",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I've briefly skimmed that some time ago - splitting out refactoring part to a separate PR is a good thing to do.",
        "createdAt" : "2021-06-08T15:38:27Z",
        "updatedAt" : "2021-06-08T15:38:27Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "de7e56bf37440ca6a4c634ede8abaf1315fe9de3",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +372,376 @@\n\t// Wait for all requests in flight to drain, bounded by the RequestTimeout variable.\n\t<-drainedCh\n\t// wait for stoppedCh that is closed when the graceful termination (server.Shutdown) is finished.\n\t<-stoppedCh"
  },
  {
    "id" : "6790f997-a788-4ff5-bf31-917bbd7fa409",
    "prId" : 95736,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95736#pullrequestreview-515968016",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e3eaabd-a42c-4f93-ae05-b678ba814fac",
        "parentId" : null,
        "authorId" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "body" : "This is probably not ideal, we should probably silently fail. Should we still record the error somewhere?",
        "createdAt" : "2020-10-22T19:27:37Z",
        "updatedAt" : "2020-10-26T18:03:27Z",
        "lastEditedBy" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "tags" : [
        ]
      },
      {
        "id" : "5ab1fc8d-cd7a-4f6e-af87-65813705a126",
        "parentId" : "8e3eaabd-a42c-4f93-ae05-b678ba814fac",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "So we are failing somewhere because of that for CRDs. If this is about a built-in type, we should clearly not fail silently.",
        "createdAt" : "2020-10-22T19:31:02Z",
        "updatedAt" : "2020-10-26T18:03:27Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "2e6a786a-9226-4dec-ab77-783c9ddbe89b",
        "parentId" : "8e3eaabd-a42c-4f93-ae05-b678ba814fac",
        "authorId" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "body" : "ack, fixed.",
        "createdAt" : "2020-10-23T19:48:01Z",
        "updatedAt" : "2020-10-26T18:03:27Z",
        "lastEditedBy" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f986cc69d8ac5b579ccc2e6817fd0a07903692b",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +426,430 @@\t\t\ttypeConverter, err := fieldmanager.NewTypeConverter(openAPIModels, false)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tapiGroupVersion.TypeConverter = typeConverter"
  },
  {
    "id" : "fb5cabcb-a5a0-4cdb-b8b0-26a2b84a3446",
    "prId" : 91984,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91984#pullrequestreview-428080265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b19cf32-e7ae-4709-b20e-c4bb1b28e6ec",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "maybe another comment?",
        "createdAt" : "2020-06-10T12:47:41Z",
        "updatedAt" : "2020-06-10T13:19:21Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "927c0f23-57e2-473d-b7d3-06dd792dd549",
        "parentId" : "5b19cf32-e7ae-4709-b20e-c4bb1b28e6ec",
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "done.",
        "createdAt" : "2020-06-10T13:57:23Z",
        "updatedAt" : "2020-06-10T13:57:24Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4362d613f243a02558f03e90b8fcb58b4c6efb06",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +347,351 @@\t<-delayedStopCh\n\t// wait for stoppedCh that is closed when the graceful termination (server.Shutdown) is finished.\n\t<-stoppedCh\n\n\t// Wait for all requests to finish, which are bounded by the RequestTimeout variable."
  },
  {
    "id" : "3632a559-67f7-44e9-92cc-b44be1f0b2a4",
    "prId" : 79840,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79840#pullrequestreview-258896711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e06281d-4bec-4a5b-adff-79d39755d87f",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "somewhat of a pre-existing issue (since PostStartHooks()/PreShutdownHooks() return unexported types), but declaring an interface method with an unexported return type makes it really hard for other interface implementers. ",
        "createdAt" : "2019-07-08T13:22:16Z",
        "updatedAt" : "2019-07-08T13:22:16Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f82bc712decd41db48cd81aded5ddddf7bca9e16",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +208,212 @@\n\t// PrepareRun does post API installation setup steps. It calls recursively the same function of the delegates.\n\tPrepareRun() preparedGenericAPIServer\n}\n"
  },
  {
    "id" : "fee7e1a7-ccd7-4e14-a7f5-087e2718485c",
    "prId" : 78458,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78458#pullrequestreview-246243000",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3191d664-78b9-4017-b41d-c9ead2916ecc",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "optional nit: we're up to five fields for health checks at this point, three are the same as readiness.  I would consider a struct.",
        "createdAt" : "2019-06-05T19:37:35Z",
        "updatedAt" : "2019-06-17T18:16:46Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "4afb31cd-b11b-4941-8902-d38a15eede43",
        "parentId" : "3191d664-78b9-4017-b41d-c9ead2916ecc",
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "That sounds like a good idea. I'll refactor this in a follow-up PR. ",
        "createdAt" : "2019-06-05T20:34:40Z",
        "updatedAt" : "2019-06-17T18:16:46Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      }
    ],
    "commit" : "54dcf5c9c46fc4782d4861936309349b5a71a1ac",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +147,151 @@\n\t// healthz checks\n\thealthzLock                sync.Mutex\n\thealthzChecks              []healthz.HealthzChecker\n\thealthzChecksInstalled     bool"
  },
  {
    "id" : "84a9f241-08a6-4a1e-a62e-16dab126fafd",
    "prId" : 72970,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72970#pullrequestreview-193289497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bb86739-a7cb-4a06-a3bf-544eebff7fdf",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "do we want to log that we're waiting for requests to complete here? do we want to set a time limit on how long we'll wait?",
        "createdAt" : "2019-01-16T16:07:23Z",
        "updatedAt" : "2019-01-18T09:57:13Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "b44f50de-a44b-4387-847b-eb9bdb0b0839",
        "parentId" : "4bb86739-a7cb-4a06-a3bf-544eebff7fdf",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "The shutdown of the server has a context already with the timeout. Following the api docs, we don't need another timeout here.",
        "createdAt" : "2019-01-16T17:49:00Z",
        "updatedAt" : "2019-01-18T09:57:13Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "e1c0c61a-0fbe-47f8-a629-e1ac3ff46ead",
        "parentId" : "4bb86739-a7cb-4a06-a3bf-544eebff7fdf",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "ok",
        "createdAt" : "2019-01-16T18:36:27Z",
        "updatedAt" : "2019-01-18T09:57:13Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b47f99164d76b6b043d7de2d3834abeda6685b0",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +314,318 @@\t\tclose(internalStopCh)\n\t\tif stoppedCh != nil {\n\t\t\t<-stoppedCh\n\t\t}\n\t\ts.HandlerChainWaitGroup.Wait()"
  },
  {
    "id" : "36983bce-464b-4ad8-9b10-de840d7b5634",
    "prId" : 72947,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72947#pullrequestreview-198860072",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc06908a-38b1-4807-818b-5a948e50d67c",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "note to self: this file shows a big diff that I didn't carefully review. (yet?)",
        "createdAt" : "2019-01-31T23:19:17Z",
        "updatedAt" : "2019-02-04T21:52:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcd4985ce4732be7c4dfa62f8e54d92d53496e15",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +324,328 @@}\n\n// installAPIResources is a private method for installing the REST storage backing each api groupversionresource\nfunc (s *GenericAPIServer) installAPIResources(apiPrefix string, apiGroupInfo *APIGroupInfo, openAPIModels openapiproto.Models) error {\n\tfor _, groupVersion := range apiGroupInfo.PrioritizedVersions {"
  },
  {
    "id" : "43293343-a9ee-49f9-bd1b-6e2519ae3dcf",
    "prId" : 65150,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65150#pullrequestreview-129293820",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a5154c8-2087-4ce0-8457-9c767f9d45be",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "We are changing the permissions necessary for create-on-update; we need a big release note for this. I think it is a good change, it means patch/put never implies create--formerly sometimes it did in a hard to reason about way. But administrators will need to know. Can you add to the feature branch change log file I started so we don't forget?",
        "createdAt" : "2018-06-15T19:31:42Z",
        "updatedAt" : "2018-07-03T18:20:27Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "7ae73317-cb9f-4754-8cd0-6b6fba018f4b",
        "parentId" : "1a5154c8-2087-4ce0-8457-9c767f9d45be",
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "This PR is to master, since it is just affecting create on update, which is broken in master. Should I remake this to the feature branch?",
        "createdAt" : "2018-06-15T19:38:29Z",
        "updatedAt" : "2018-07-03T18:20:27Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc5c17e554a4d8f802043b337ca0787ec0ce7475",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +142,146 @@\t// Authorizer determines whether a user is allowed to make a certain request. The Handler does a preliminary\n\t// authorization check using the request URI but it may be necessary to make additional checks, such as in\n\t// the create-on-update case\n\tAuthorizer authorizer.Authorizer\n"
  },
  {
    "id" : "9135dc02-32b1-4f0f-be35-0db0b5574222",
    "prId" : 54849,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54849#pullrequestreview-74030290",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e368d32a-d176-41d7-961c-c81f68598420",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "After moving everything over to our own WaitGroup (which looks all good btw code-wise!), one question from a few steps back:\r\n\r\nThe internalStopCh is eventually passed down to `RunServer`. `RunServer` will shutdown the http server below: `server.Shutdown()`. After the http server is down, no **new** request is going to be processed.\r\n\r\nQ: does `server.Shutdown()` enforce that all request handlers have been returned?\r\n\r\nAbout the race we saw in CI: the `s.HandlerChainWaitGroup.Wait()` here is potentially called before `server.Shutdown()` has returned. So even if the upper question is answered with 'yes', the `Wait` is called before the last `waitGroup.Add`. This is the race we saw (and this race is fixed with our own WaitGroup now).\r\n\r\nNow my concern:\r\n\r\nIn the situation of the race we saw (i.e. Add after Wait at counter==0), this `s.HandlerChainWaitGroup.Wait()` with our new WaitGroup will return early before the last request has been processed. Is this true? If yes, we loose events, don't we?\r\n\r\nIn other words: I have the suspicion that the occurance of the detected race (with the old WaitGroup) means that we loose events now (with the new WaitGroup).",
        "createdAt" : "2017-11-03T09:36:00Z",
        "updatedAt" : "2017-11-10T06:08:14Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "f928c0a3-38b5-4b24-96d6-d9021e219725",
        "parentId" : "e368d32a-d176-41d7-961c-c81f68598420",
        "authorId" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "body" : ">Q: does server.Shutdown() enforce that all request handlers have been returned?\r\n\r\nFor all the connections, Shutdown will wait until they turn into idle state,  then close them.  If a connection always stay active, Shutdown will close it until timeout.\r\n\r\n>In other words: I have the suspicion that the occurance of the detected race (with the old WaitGroup) means that we loose events now (with the new WaitGroup).\r\n\r\nIn theory, events lost can exist. And it is with very low probability.",
        "createdAt" : "2017-11-03T09:50:43Z",
        "updatedAt" : "2017-11-10T06:08:14Z",
        "lastEditedBy" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c44e2a6167c349fb17c9741959ca24998ae3738",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +326,330 @@\t\t<-stopCh\n\t\tclose(internalStopCh)\n\t\ts.HandlerChainWaitGroup.Wait()\n\t\tclose(auditStopCh)\n\t}()"
  },
  {
    "id" : "eb331e36-6ab8-4290-9297-f86105657915",
    "prId" : 53821,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53821#pullrequestreview-69672875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ad8eec1-7dee-4bb0-a6d9-f7aa9134c81b",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "can the audit shutdown be a pre stop hook as well?",
        "createdAt" : "2017-10-13T07:04:49Z",
        "updatedAt" : "2017-10-19T12:08:47Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "dbface4d-db58-4706-ad55-05e9f000d825",
        "parentId" : "1ad8eec1-7dee-4bb0-a6d9-f7aa9134c81b",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "/cc @hzxuzhonghu @crassirostris ",
        "createdAt" : "2017-10-13T07:12:51Z",
        "updatedAt" : "2017-10-19T12:08:47Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "225c61e5-bdca-4818-892f-ecb5208a765a",
        "parentId" : "1ad8eec1-7dee-4bb0-a6d9-f7aa9134c81b",
        "authorId" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "body" : "Yes, audit backend can register a prestop/poststop hook too.",
        "createdAt" : "2017-10-13T07:46:13Z",
        "updatedAt" : "2017-10-19T12:08:47Z",
        "lastEditedBy" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "tags" : [
        ]
      },
      {
        "id" : "32e90e05-988a-4c4e-936a-d1bedb92a42c",
        "parentId" : "1ad8eec1-7dee-4bb0-a6d9-f7aa9134c81b",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I think we should even have a synchronization of closing the listener and calling the hooks here.",
        "createdAt" : "2017-10-16T06:53:26Z",
        "updatedAt" : "2017-10-19T12:08:47Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "cd3c70e7-00da-4c61-9b31-0c283b6f8c42",
        "parentId" : "1ad8eec1-7dee-4bb0-a6d9-f7aa9134c81b",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "This of course means that some API server clients in an HA setup might get a connection refused. On the other hand, we cannot make kube-proxy updates synchronous anyway. So it does not matter much for external clients which order we have here.\r\n\r\nBut, auditing needs this synchronization.",
        "createdAt" : "2017-10-16T06:55:35Z",
        "updatedAt" : "2017-10-19T12:08:47Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "8a9b592b-1e3c-44d7-8962-70499e50f776",
        "parentId" : "1ad8eec1-7dee-4bb0-a6d9-f7aa9134c81b",
        "authorId" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "body" : "You mean do not call the shutdown hooks until the listener is closed?",
        "createdAt" : "2017-10-16T19:09:04Z",
        "updatedAt" : "2017-10-19T12:08:47Z",
        "lastEditedBy" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "tags" : [
        ]
      },
      {
        "id" : "7029457a-2bef-4e27-befe-828d3bd9c011",
        "parentId" : "1ad8eec1-7dee-4bb0-a6d9-f7aa9134c81b",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Yes, but I am fine with wiring this in a follow-up. We definitely need that for auditing.",
        "createdAt" : "2017-10-16T19:32:15Z",
        "updatedAt" : "2017-10-19T12:08:47Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "00b085ad4ad0c5d26466667a32a28046ffacd7f1",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +275,279 @@\n\tif s.GenericAPIServer.AuditBackend != nil {\n\t\ts.GenericAPIServer.AuditBackend.Shutdown()\n\t}\n"
  },
  {
    "id" : "0e582a27-8f41-4f39-a30a-27b56cd5fe98",
    "prId" : 53695,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53695#pullrequestreview-72430042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c2047f0-dd14-4506-9b38-9803d701b698",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : ":+1:",
        "createdAt" : "2017-10-27T08:08:44Z",
        "updatedAt" : "2017-10-28T07:04:18Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "f42686081bff88e44b339562c4927775f4439671",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +293,297 @@\t}\n\n\t// Wait for all requests to finish, which is bounded by the RequestTimeout variable.\n\ts.HandlerChainWaitGroup.Wait()\n"
  },
  {
    "id" : "028937a5-9268-44e0-b5a7-15e3399f424c",
    "prId" : 53695,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53695#pullrequestreview-72799603",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1b7fa31-3f44-4318-858d-917171015211",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Just realized: this changes the shutdown behaviour of every apiserver. We now wait for running requests to finish. This can take up to 60sec. I think it's the right behaviour, but we at least have to document that in the release notes. Wondering whether we also have make this configurable, either via Config and/or flag.\r\n\r\n@deads2k ^^ ",
        "createdAt" : "2017-10-30T09:58:05Z",
        "updatedAt" : "2017-10-30T09:58:05Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "94c98217-eafb-4324-b921-16a3a19c01da",
        "parentId" : "a1b7fa31-3f44-4318-858d-917171015211",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "@hzxuzhonghu I update the changelog in this direction. Can you prove-read that it is correct?",
        "createdAt" : "2017-10-30T10:01:42Z",
        "updatedAt" : "2017-10-30T10:01:42Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "8ebfb9bd-9b73-4c9f-857d-e9fe93f96648",
        "parentId" : "a1b7fa31-3f44-4318-858d-917171015211",
        "authorId" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "body" : "Sure",
        "createdAt" : "2017-10-30T11:10:33Z",
        "updatedAt" : "2017-10-30T11:10:33Z",
        "lastEditedBy" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "f42686081bff88e44b339562c4927775f4439671",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +294,298 @@\n\t// Wait for all requests to finish, which is bounded by the RequestTimeout variable.\n\ts.HandlerChainWaitGroup.Wait()\n\n\treturn nil"
  },
  {
    "id" : "8bc6ad23-82e9-4d4b-8e8f-fed11522edf0",
    "prId" : 50864,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50864#pullrequestreview-57517357",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26b567ac-f47d-48dc-8855-f527ed28da5a",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : ":+1:",
        "createdAt" : "2017-08-21T14:42:16Z",
        "updatedAt" : "2017-09-03T09:18:46Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9eacd0bf5df1af23ae53fa98f8770f4f96adad0",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +171,175 @@\n\t// NextDelegate returns the next delegationTarget in the chain of delegations\n\tNextDelegate() DelegationTarget\n}\n"
  },
  {
    "id" : "7ae5e6c9-0175-49f3-a6d8-218f97b4bee0",
    "prId" : 46966,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46966#pullrequestreview-45015284",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "656bf9eb-8ccf-4c0b-9cd6-15cb3af0f63b",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "@deads2k did you expect this to be exported or not?",
        "createdAt" : "2017-06-20T01:44:42Z",
        "updatedAt" : "2017-06-23T15:25:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c305f72315a83c16c40fbbfd06b563f9e67208ff",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +154,158 @@\t// enableAPIResponseCompression indicates whether API Responses should support compression\n\t// if the client requests it via Accept-Encoding\n\tenableAPIResponseCompression bool\n}\n"
  },
  {
    "id" : "39d03eb9-a711-4a9c-804f-05f895af8e42",
    "prId" : 46734,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46734#pullrequestreview-49103857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71506dbe-43bb-49cb-ab2e-02617c780a98",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "The generic API server repo is for supporting the common case for a \"normal\" API server.  No normal API server will need this update power, so this should not be on the struct here. \r\n\r\nThe aggregator can have its own special endpoint to avoid muddying the \"easy path\" implementation.",
        "createdAt" : "2017-06-06T12:00:32Z",
        "updatedAt" : "2017-06-06T12:00:32Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "36aa66e8-2e8c-426c-afed-63a5eb171a2d",
        "parentId" : "71506dbe-43bb-49cb-ab2e-02617c780a98",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "Do we use a normal API server code path for serving Custom Resources? I heard something about those resources can have dynamic OpenAPI spec, right?",
        "createdAt" : "2017-07-07T20:48:15Z",
        "updatedAt" : "2017-07-07T20:48:15Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      },
      {
        "id" : "0a04066d-adf3-47b7-9285-2dfc5232df63",
        "parentId" : "71506dbe-43bb-49cb-ab2e-02617c780a98",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "More on this from another comment by @sttts:\r\n\r\n> Static in which sense? Resources can come and go. With CRD validation, we will also get JSON Schema snippets that can change any moment and should be part of the OpenAPI spec served by the aggregator.\r\n\r\nI think not only we need this, we need an upstream channel to tell aggregator it changed (maybe something like a watch on OpenAPI spec).",
        "createdAt" : "2017-07-09T05:43:15Z",
        "updatedAt" : "2017-07-09T05:43:16Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      },
      {
        "id" : "10e461cb-c807-424f-8092-069286120200",
        "parentId" : "71506dbe-43bb-49cb-ab2e-02617c780a98",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Watchable discovery, https://github.com/kubernetes/community/pull/617",
        "createdAt" : "2017-07-10T06:41:53Z",
        "updatedAt" : "2017-07-10T06:41:54Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "c0eea17c-4c2c-4c1a-96c5-69197d46215a",
        "parentId" : "71506dbe-43bb-49cb-ab2e-02617c780a98",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "That could work for OpenAPI spec, though I assume you can modify schema for a custom resource without adding/removing the APIService, right? In that case we may need a separate watch for OpenAPI spec (or modify discovery watch to support it)",
        "createdAt" : "2017-07-10T19:31:11Z",
        "updatedAt" : "2017-07-10T19:31:11Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      },
      {
        "id" : "ade62884-ae5f-4ed2-a80e-bb0ad9d07a20",
        "parentId" : "71506dbe-43bb-49cb-ab2e-02617c780a98",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Or add the schema somehow to discovery, e.g. with a hash.",
        "createdAt" : "2017-07-11T06:31:23Z",
        "updatedAt" : "2017-07-11T06:31:23Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "63e3e84e7ec982ae25fd5b2adbef87924fe5f34a",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +134,138 @@\n\t// Enables updating OpenAPI spec using update method.\n\tOpenAPIService *openapi.OpenAPIService\n\n\t// PostStartHooks are each called after the server has started listening, in a separate go func for each"
  },
  {
    "id" : "c42552f5-f6b0-4d3e-bc6e-e7452cce9338",
    "prId" : 46734,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46734#pullrequestreview-48713674",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb510ed6-4434-4ad4-94d3-59b601fabc79",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This doesn't look right.  In the general case of openapi aggregation you don't have this level of access and given the unprotected handler chain from the delegate, this extra side-bar of communication shouldn't be necessary. ",
        "createdAt" : "2017-06-06T12:01:42Z",
        "updatedAt" : "2017-06-06T12:01:42Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "197e0577-303a-484e-a4ad-e1a868817dcd",
        "parentId" : "bb510ed6-4434-4ad4-94d3-59b601fabc79",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "Do you mean I can call http serve method of delegate to get `/swagger.spec` without credentials?",
        "createdAt" : "2017-07-07T20:44:05Z",
        "updatedAt" : "2017-07-07T20:44:05Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "63e3e84e7ec982ae25fd5b2adbef87924fe5f34a",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +173,177 @@\n\t// OpenAPISpec returns the OpenAPI spec of the delegation target if exists, nil otherwise.\n\tOpenAPISpec() *spec.Swagger\n}\n"
  },
  {
    "id" : "d2da9233-be4e-427c-8908-2cb2d7d51502",
    "prId" : 46734,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46734#pullrequestreview-48714715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6680446a-f3dd-46ec-8b26-8e6964b0b4fa",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "empty line below, none above.",
        "createdAt" : "2017-06-06T12:02:24Z",
        "updatedAt" : "2017-06-06T12:02:24Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "37bde96a-7cf1-476e-bba5-75e835493bf6",
        "parentId" : "6680446a-f3dd-46ec-8b26-8e6964b0b4fa",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "Will fix.",
        "createdAt" : "2017-07-07T20:48:44Z",
        "updatedAt" : "2017-07-07T20:48:44Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "63e3e84e7ec982ae25fd5b2adbef87924fe5f34a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +29,33 @@\t\"github.com/golang/glog\"\n\n\t\"github.com/go-openapi/spec\"\n\t\"k8s.io/apimachinery/pkg/apimachinery\"\n\t\"k8s.io/apimachinery/pkg/apimachinery/registered\""
  },
  {
    "id" : "cd5fefda-2110-4b73-a0c1-384a8e0eacad",
    "prId" : 46734,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46734#pullrequestreview-42292418",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d44e57aa-913f-475e-9cb1-d51e1cbb8a81",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Why do we need this helper? Isn't `s.OpenAPIService.GetSpec` enough? No added value.",
        "createdAt" : "2017-06-06T12:16:51Z",
        "updatedAt" : "2017-06-06T12:16:51Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "73827b62-590e-4a9f-b25a-cca0f2d43fd6",
        "parentId" : "d44e57aa-913f-475e-9cb1-d51e1cbb8a81",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "taking this back, it's the interface impl.",
        "createdAt" : "2017-06-06T12:17:20Z",
        "updatedAt" : "2017-06-06T12:17:20Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "63e3e84e7ec982ae25fd5b2adbef87924fe5f34a",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +190,194 @@}\nfunc (s *GenericAPIServer) OpenAPISpec() *spec.Swagger {\n\treturn s.OpenAPIService.GetSpec()\n}\n"
  },
  {
    "id" : "332a456c-c71a-4889-9567-a2de2072cd06",
    "prId" : 43553,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43553#pullrequestreview-28911997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e8fbfe8-4f23-46f7-a938-658093b2fd95",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Please document that the order is preserved in the function description, also.",
        "createdAt" : "2017-03-23T16:53:49Z",
        "updatedAt" : "2017-03-23T16:53:50Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "cc91f1ca-32fa-4f5a-b072-cdeebf17706d",
        "parentId" : "7e8fbfe8-4f23-46f7-a938-658093b2fd95",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "+1 Add a godoc to AddAPIGroupForDiscovery that the call order is significant.",
        "createdAt" : "2017-03-23T17:40:34Z",
        "updatedAt" : "2017-03-23T17:40:34Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d5a42594-6033-4f66-ae54-93d6c53ffd0f",
        "parentId" : "7e8fbfe8-4f23-46f7-a938-658093b2fd95",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "opened https://github.com/kubernetes/kubernetes/pull/43623 with doc",
        "createdAt" : "2017-03-24T14:10:44Z",
        "updatedAt" : "2017-03-24T14:10:45Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "707f0fb131b5ff89caae7c45a0e4b59991bd7bc2",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +404,408 @@\t\tsortedGroups := []metav1.APIGroup{}\n\n\t\t// ranging over apiGroupNamesForDiscovery preserves the registration order\n\t\tfor _, groupName := range s.apiGroupNamesForDiscovery {\n\t\t\tsortedGroups = append(sortedGroups, s.apiGroupsForDiscovery[groupName])"
  },
  {
    "id" : "29afe3cb-d91d-4d43-bbec-34a76d432b69",
    "prId" : 42278,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42278#pullrequestreview-25562137",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7890a9b-002f-48bf-8e60-9d23e383b379",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Also add the err case comment.",
        "createdAt" : "2017-03-07T10:26:46Z",
        "updatedAt" : "2017-03-08T14:59:07Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "b250b373-cfdd-4863-8755-360230cf0476",
        "parentId" : "a7890a9b-002f-48bf-8e60-9d23e383b379",
        "authorId" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "body" : "I'm assuming it's no longer necessary to document the error case now that cleanup is performed automatically in that case.",
        "createdAt" : "2017-03-07T16:05:59Z",
        "updatedAt" : "2017-03-08T14:59:07Z",
        "lastEditedBy" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "tags" : [
        ]
      },
      {
        "id" : "d070361a-6b57-44f4-b629-d7f29c986b35",
        "parentId" : "a7890a9b-002f-48bf-8e60-9d23e383b379",
        "authorId" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "body" : "Done",
        "createdAt" : "2017-03-07T16:36:22Z",
        "updatedAt" : "2017-03-08T14:59:07Z",
        "lastEditedBy" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd2a8127a554c0ec823c4966b18858cda73c0acf",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +190,194 @@// Run spawns the http servers (secure and insecure). It only returns if stopCh is closed\n// or one of the ports cannot be listened on initially.\nfunc (s preparedGenericAPIServer) Run(stopCh <-chan struct{}) error {\n\terr := s.NonBlockingRun(stopCh)\n\tif err != nil {"
  },
  {
    "id" : "85321714-c29e-4143-8d01-b6a20eb65312",
    "prId" : 42278,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42278#pullrequestreview-25620353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "355e89d8-b74e-41ef-98fa-9445a7fe778e",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "nicely self-contained error handling 👍 ",
        "createdAt" : "2017-03-07T20:21:30Z",
        "updatedAt" : "2017-03-08T14:59:07Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd2a8127a554c0ec823c4966b18858cda73c0acf",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +225,229 @@\tgo func() {\n\t\t<-stopCh\n\t\tclose(internalStopCh)\n\t}()\n"
  }
]