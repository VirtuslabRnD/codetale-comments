[
  {
    "id" : "34ef9cbd-762b-406a-8a17-9729569cfd9e",
    "prId" : 103437,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103437#pullrequestreview-699156325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e2b806c-0ac2-47ce-85d2-ccc66f1b3ea2",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "signalFirstTimeReady",
        "createdAt" : "2021-07-05T13:01:24Z",
        "updatedAt" : "2021-07-05T13:01:24Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "58b91ffca9efe3afb20d80914cdc33c6b0acdef2",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +143,147 @@// InstallReadyzHandlerWithHealthyFunc is like InstallReadyzHandler, but in addition call firstTimeReady\n// the first time /readyz succeeds.\nfunc InstallReadyzHandlerWithHealthyFunc(mux mux, firstTimeReady func(), checks ...HealthChecker) {\n\tInstallPathHandlerWithHealthyFunc(mux, \"/readyz\", firstTimeReady, checks...)\n}"
  },
  {
    "id" : "23c17579-d370-430f-a295-33429a3c4ea7",
    "prId" : 83598,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83598#pullrequestreview-346195450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76794fe6-7a24-4d2c-b7cc-6dfd538a3919",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "do we not need the subchecks instrumented as well?",
        "createdAt" : "2020-01-21T21:12:53Z",
        "updatedAt" : "2020-01-21T21:12:54Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "91517196-f439-421e-a0dc-1deaef594b28",
        "parentId" : "76794fe6-7a24-4d2c-b7cc-6dfd538a3919",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I guess the top-level ones are the most interesting / most commonly used",
        "createdAt" : "2020-01-21T21:13:14Z",
        "updatedAt" : "2020-01-21T21:13:21Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "00ecb171-037e-461f-b61a-40872c414615",
        "parentId" : "76794fe6-7a24-4d2c-b7cc-6dfd538a3919",
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "The top level ones are the ones which are configured in the liveness/readiness paths. The subpaths are generally hit manually, so probably less useful.",
        "createdAt" : "2020-01-21T21:14:16Z",
        "updatedAt" : "2020-01-21T21:14:17Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      }
    ],
    "commit" : "9dadafa8979619495317f166bf8bd4803ec89452",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +134,138 @@\t\t\thandleRootHealthz(checks...)))\n\tfor _, check := range checks {\n\t\tmux.Handle(fmt.Sprintf(\"%s/%v\", path, check.Name()), adaptCheckToHandler(check.Check))\n\t}\n}"
  },
  {
    "id" : "dc3cc7f1-74d2-4623-a01d-97d366cd8849",
    "prId" : 81969,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81969#pullrequestreview-280592797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "558d9fb6-40c1-4d94-883f-a355309365c3",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "were the `system:discovery` and `system:public-info-viewer` roles going to be updated to include this?",
        "createdAt" : "2019-08-28T02:05:40Z",
        "updatedAt" : "2019-08-29T21:14:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "8a6cc5a3-6b34-4c26-9eb5-06ba2bc069ca",
        "parentId" : "558d9fb6-40c1-4d94-883f-a355309365c3",
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "Ah, yes I will add those.",
        "createdAt" : "2019-08-28T05:14:20Z",
        "updatedAt" : "2019-08-29T21:14:14Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa1b2d6d35c92a31be17357fc66cfc1eca8a67e0",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +107,111 @@// than once for the same mux will result in a panic.\nfunc InstallLivezHandler(mux mux, checks ...HealthChecker) {\n\tInstallPathHandler(mux, \"/livez\", checks...)\n}\n"
  },
  {
    "id" : "7f323e4b-570b-4401-b754-46406386dfb6",
    "prId" : 72520,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72520#pullrequestreview-189137581",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fe4a08c-108f-4283-b869-a0148c433a0a",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "```suggestion\r\n \t\tw.Header().Set(\"Content-Type\", \"text/plain; charset=utf-8\")\r\n \t\tw.Header().Set(\"X-Content-Type-Options\", \"nosniff\")\r\n```",
        "createdAt" : "2019-01-03T18:54:29Z",
        "updatedAt" : "2019-01-06T02:34:53Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      }
    ],
    "commit" : "eedb70355ad59f9d7054dba198a8352554274e0a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +186,190 @@\t\t}\n\n\t\tw.Header().Set(\"Content-Type\", \"text/plain; charset=utf-8\")\n\t\tw.Header().Set(\"X-Content-Type-Options\", \"nosniff\")\n\t\tif _, found := r.URL.Query()[\"verbose\"]; !found {"
  },
  {
    "id" : "693b0db3-ac04-4690-aa2d-21136039f37c",
    "prId" : 72520,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72520#pullrequestreview-189222213",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6623d68b-7d73-4d3b-9710-9b1e0da3cb30",
        "parentId" : null,
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "Can we move this line (and the one below it) to between lines 159 and 160? That should ensure that the content type is set for early returns from our handler (i.e. healthz failures). ",
        "createdAt" : "2019-01-03T22:50:17Z",
        "updatedAt" : "2019-01-06T02:34:53Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      },
      {
        "id" : "4d2efb03-9c5a-4848-a43d-cc6ced7638ed",
        "parentId" : "6623d68b-7d73-4d3b-9710-9b1e0da3cb30",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "no, http.Error sets these headers itself",
        "createdAt" : "2019-01-03T22:54:15Z",
        "updatedAt" : "2019-01-06T02:34:53Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "d9c9b22a-f708-4526-9de2-0fd62709c850",
        "parentId" : "6623d68b-7d73-4d3b-9710-9b1e0da3cb30",
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "Ah, interesting.. \r\n\r\nWould it be worth considering modifying mux directly so that we don't have to set the nosniff each time? Maybe something like 'HandleWithMimeType' which always sets nosniff? ",
        "createdAt" : "2019-01-03T23:03:05Z",
        "updatedAt" : "2019-01-06T02:34:53Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      },
      {
        "id" : "a70936e4-5df2-454c-b93b-466c80635c26",
        "parentId" : "6623d68b-7d73-4d3b-9710-9b1e0da3cb30",
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "Mostly, this seems to be fixing the same issue as #72535, it seems possible we would run into this again in the future unless we set these things automatically. ",
        "createdAt" : "2019-01-03T23:05:10Z",
        "updatedAt" : "2019-01-06T02:34:53Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      },
      {
        "id" : "faae2348-f1db-4798-94a7-58b39ac5082d",
        "parentId" : "6623d68b-7d73-4d3b-9710-9b1e0da3cb30",
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : ":) y i filed this first and then @tallclair saw it and followed up with #72535 yes, we could have merged both into a single PR",
        "createdAt" : "2019-01-03T23:08:09Z",
        "updatedAt" : "2019-01-06T02:34:53Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      },
      {
        "id" : "0c04be8b-839e-43db-890e-05303fdc96db",
        "parentId" : "6623d68b-7d73-4d3b-9710-9b1e0da3cb30",
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "What about fixing this at the mux level? Then we would not have to set for each individual path. ",
        "createdAt" : "2019-01-03T23:21:38Z",
        "updatedAt" : "2019-01-06T02:34:53Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      }
    ],
    "commit" : "eedb70355ad59f9d7054dba198a8352554274e0a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +186,190 @@\t\t}\n\n\t\tw.Header().Set(\"Content-Type\", \"text/plain; charset=utf-8\")\n\t\tw.Header().Set(\"X-Content-Type-Options\", \"nosniff\")\n\t\tif _, found := r.URL.Query()[\"verbose\"]; !found {"
  },
  {
    "id" : "a4841af4-d966-468a-ab59-6a83c099ae90",
    "prId" : 70753,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70753#pullrequestreview-172618729",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9caaa4f7-abf7-4075-b37e-f50b40c84c1b",
        "parentId" : null,
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "I don't think we use `checkerNames` now.  Maybe just rename the function to `formatCheckerNames` but keep the existing code, and change the comment to say that we are formatting them for printing/debugging...",
        "createdAt" : "2018-11-07T17:54:10Z",
        "updatedAt" : "2018-11-07T18:31:26Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "0623f630ab37ad75961bf836195e190e6bcf560e",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +187,191 @@\n// checkerNames returns the names of the checks in the same order as passed in.\nfunc checkerNames(checks ...HealthzChecker) []string {\n\t// accumulate the names of checks for printing them out.\n\tcheckerNames := make([]string, 0, len(checks))"
  },
  {
    "id" : "8b6fcf3c-9da4-40b2-ac85-f5beee0a3c7a",
    "prId" : 70676,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70676#pullrequestreview-174155064",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bc5d6fb-b4ee-490a-a6f1-04af7ad027a4",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Where can we document this that users might see it?",
        "createdAt" : "2018-11-06T21:05:58Z",
        "updatedAt" : "2018-11-13T22:49:10Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8cbba6b2-0620-4952-9eb0-2ce60a81c5a1",
        "parentId" : "3bc5d6fb-b4ee-490a-a6f1-04af7ad027a4",
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "I don't actually have a good answer for this, I actually am unsure how people can learn about the verbose flag on the healthz endpoint currently without looking directly at the code. ",
        "createdAt" : "2018-11-06T22:11:42Z",
        "updatedAt" : "2018-11-13T22:49:10Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      },
      {
        "id" : "a6f8ac17-6256-418a-a694-4ffc99aa07d2",
        "parentId" : "3bc5d6fb-b4ee-490a-a6f1-04af7ad027a4",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "It should go into docs which describe how to set up kube-apiserver probes.  I don't think we have one, so maybe a comment at e.g. https://github.com/kubernetes/kubernetes/blob/master/cluster/gce/manifests/kube-apiserver.manifest#L37 where I think we're going to use it.\r\n\r\nIt's not great that this is the canonical source today, but it's the reality.  Eventually that moves to the bundle, which I think it's more reasonable to say should act as a reference for anyone not using the bundle. ",
        "createdAt" : "2018-11-07T16:04:55Z",
        "updatedAt" : "2018-11-13T22:49:10Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      },
      {
        "id" : "5d9d3e83-a9ec-4ad3-a67d-35e4fd92240d",
        "parentId" : "3bc5d6fb-b4ee-490a-a6f1-04af7ad027a4",
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "I was planning on rolling out the manifest changes in a separate PR, is that okay or would you like to add that here? \r\n\r\nInsofar as the comment, I am happy to add a comment where ever it would make sense but that manifest file looks like JSON. I don't think JSON supports comments but it has been a while, so I could be mistaken. Unless you have something specific in mind (like adding a \"_comment\" key or something).  ",
        "createdAt" : "2018-11-07T17:46:48Z",
        "updatedAt" : "2018-11-13T22:49:10Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      },
      {
        "id" : "4d08d55a-1078-4fb9-9819-2d259e2dc81e",
        "parentId" : "3bc5d6fb-b4ee-490a-a6f1-04af7ad027a4",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "Gah - you're right... remind me that we should express the bundle in yaml :-)\r\n\r\nI was thinking that showing the health checks you're planning on using would make the intent much clearer here!",
        "createdAt" : "2018-11-07T21:30:55Z",
        "updatedAt" : "2018-11-13T22:49:10Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      },
      {
        "id" : "42ded1f0-0483-4cdc-841c-dc0b55ba22cf",
        "parentId" : "3bc5d6fb-b4ee-490a-a6f1-04af7ad027a4",
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "sure thing @justinsb",
        "createdAt" : "2018-11-13T00:56:53Z",
        "updatedAt" : "2018-11-13T22:49:10Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      }
    ],
    "commit" : "895dd4187bac7567667844f651d27293f1489bfe",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +143,147 @@}\n\n// getExcludedChecks extracts the health check names to be excluded from the query param\nfunc getExcludedChecks(r *http.Request) sets.String {\n\tchecks, found := r.URL.Query()[\"exclude\"]"
  },
  {
    "id" : "ebe5edbb-6425-4dd1-98dd-3d678878f6d4",
    "prId" : 70676,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70676#pullrequestreview-174511082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83ee04c4-a81c-4a8f-9fc4-9e8a3220fa5b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I recommend printing this to the healthz page in addition (if not instead of) the logs.",
        "createdAt" : "2018-11-13T04:53:40Z",
        "updatedAt" : "2018-11-13T22:49:10Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "0e77f8c5-0bf6-47dc-ba1b-599b4b52c10b",
        "parentId" : "83ee04c4-a81c-4a8f-9fc4-9e8a3220fa5b",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "(I expect that the people doing the health checking may not think to look in the logs? Not sure. I guess this is optional :) )",
        "createdAt" : "2018-11-13T05:52:13Z",
        "updatedAt" : "2018-11-13T22:49:10Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "619aafc0-9722-4a6e-a9a8-5ce0d147d090",
        "parentId" : "83ee04c4-a81c-4a8f-9fc4-9e8a3220fa5b",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "Personally I'm more likely to look in the logs, as one anecdata point :-)  I don't think I've ever checked the healthz page directly when diagnosing something (but maybe I should get into that habit!)",
        "createdAt" : "2018-11-13T07:15:24Z",
        "updatedAt" : "2018-11-13T22:49:10Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      },
      {
        "id" : "770f3ee7-6f4f-4081-9168-a0d34c96805f",
        "parentId" : "83ee04c4-a81c-4a8f-9fc4-9e8a3220fa5b",
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "I'll do both :) ",
        "createdAt" : "2018-11-13T18:09:45Z",
        "updatedAt" : "2018-11-13T22:49:10Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      }
    ],
    "commit" : "895dd4187bac7567667844f651d27293f1489bfe",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +177,181 @@\t\tif excluded.Len() > 0 {\n\t\t\tfmt.Fprintf(&verboseOut, \"warn: some health checks cannot be excluded: no matches for %v\\n\", formatQuoted(excluded.List()...))\n\t\t\tklog.Warningf(\"cannot exclude some health checks, no health checks are installed matching %v\",\n\t\t\t\tformatQuoted(excluded.List()...))\n\t\t}"
  },
  {
    "id" : "5f3182e1-5403-48af-ad1c-f48b3e4c1cab",
    "prId" : 70676,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70676#pullrequestreview-174515316",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39b999b2-27f1-4ac5-841c-6182d20bfaee",
        "parentId" : null,
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "Not a huge fan of blacklist systems.\r\nAn exclude system means that if a provider wants a static list of checks they need to revisit the exclusion list with every release. \r\nAn inclusion list can default its absence to the complete list and then get the static list easily. The difficulty would be if you want remove an item but automatically pick up new checks with looking. This seems like less of a problem.",
        "createdAt" : "2018-11-13T07:28:17Z",
        "updatedAt" : "2018-11-13T22:49:10Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "a5885904-4a9f-4504-b72e-f3e652f6a326",
        "parentId" : "39b999b2-27f1-4ac5-841c-6182d20bfaee",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> An exclude system means that if a provider wants a static list of checks they need to revisit the exclusion list with every release.\r\n\r\nFor something like permissions, I agree with you. For something like health checks, I think the default should be to pick up new health checks added to the apiserver. A provider specifying an inclusion list would have to revisit it every release as well to ensure they weren't missing new named health checks added to the server that were critical.\r\n\r\n> The difficulty would be if you want remove an item but automatically pick up new checks without looking. This seems like less of a problem.\r\n\r\nThat actually sounds like exactly the use case https://github.com/kubernetes/kubernetes/issues/70591 describes ... opting out of a specific health check because of higher-level knowledge of the deployment, but wanting all the other built-in health checks to run.",
        "createdAt" : "2018-11-13T14:08:04Z",
        "updatedAt" : "2018-11-13T22:49:10Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e4edc528-3414-4e4a-9b65-374b1ce85c67",
        "parentId" : "39b999b2-27f1-4ac5-841c-6182d20bfaee",
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "With whitelisting, don't we encounter the same issues that @deads2k mentioned earlier in the thread, re: version skew and rollbacks?",
        "createdAt" : "2018-11-13T18:19:14Z",
        "updatedAt" : "2018-11-13T22:49:10Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      }
    ],
    "commit" : "895dd4187bac7567667844f651d27293f1489bfe",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +145,149 @@// getExcludedChecks extracts the health check names to be excluded from the query param\nfunc getExcludedChecks(r *http.Request) sets.String {\n\tchecks, found := r.URL.Query()[\"exclude\"]\n\tif found {\n\t\treturn sets.NewString(checks...)"
  },
  {
    "id" : "6f2b4c93-0bd6-4fbe-ba18-d5f37cb6672e",
    "prId" : 41821,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41821#pullrequestreview-23066507",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71fc28c7-7264-49d3-abcb-92e3bc3dedfc",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This probably breaks backwards compatibility on health checks, and people may already be using these checks in monitoring.  Effectively an API change - you may have to print something like \"reason withheld\" in the same format as before at a minimum.",
        "createdAt" : "2017-02-21T18:49:16Z",
        "updatedAt" : "2017-02-22T12:52:14Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "03b97e66-8a99-4cb5-bcf5-b052d6c8d7fd",
        "parentId" : "71fc28c7-7264-49d3-abcb-92e3bc3dedfc",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> This probably breaks backwards compatibility on health checks, and people may already be using these checks in monitoring. Effectively an API change - you may have to print something like \"reason withheld\" in the same format as before at a minimum.\r\n\r\ndone",
        "createdAt" : "2017-02-21T20:47:12Z",
        "updatedAt" : "2017-02-22T12:52:14Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cd0b7cdbeaf94792f02aab5025afb49c59202f4",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +97,101 @@\t\tvar verboseOut bytes.Buffer\n\t\tfor _, check := range checks {\n\t\t\tif check.Check(r) != nil {\n\t\t\t\t// don't include the error since this endpoint is public.  If someone wants more detail\n\t\t\t\t// they should have explicit permission to the detailed checks."
  }
]