[
  {
    "id" : "70d8b91a-703a-4de1-ae48-d58cde4613c7",
    "prId" : 46734,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46734#pullrequestreview-41644171",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "603e07e5-3435-4402-a172-f8c7458632fc",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "order doesn't matter, I take it?",
        "createdAt" : "2017-06-01T21:05:24Z",
        "updatedAt" : "2017-06-05T06:10:11Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "360d5f2e-8750-4410-97dc-058c39a97889",
        "parentId" : "603e07e5-3435-4402-a172-f8c7458632fc",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "True. As long as we have all of them, it should be fine.",
        "createdAt" : "2017-06-01T21:37:08Z",
        "updatedAt" : "2017-06-05T06:10:11Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "63e3e84e7ec982ae25fd5b2adbef87924fe5f34a",
    "line" : 223,
    "diffHunk" : "@@ -1,1 +221,225 @@\t\treturn false\n\t}\n\tfor _, v1 := range s1 {\n\t\tfound := false\n\t\tfor _, v2 := range s2 {"
  },
  {
    "id" : "03ca1d0b-df49-4014-96de-a34521671c67",
    "prId" : 46734,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46734#pullrequestreview-41643948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f922249-bcce-42b9-88fa-f6c813f56cb3",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "since you checked that the lengths equal, this loop shouldn't be necessary?",
        "createdAt" : "2017-06-01T21:06:04Z",
        "updatedAt" : "2017-06-05T06:10:11Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c01234e8-41c5-44f3-a379-02ae7f38a7ab",
        "parentId" : "8f922249-bcce-42b9-88fa-f6c813f56cb3",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "If we have duplicate values, that won't work. e.g. [\"a\" \"a\" \"a\"] and [\"a\" \"b\" \"c\"] are equal if we just take value from first list and find them in the second one. There could be other ways to solve this problem (removing items, etc.) but I think going both way works too.",
        "createdAt" : "2017-06-01T21:36:02Z",
        "updatedAt" : "2017-06-05T06:10:11Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "63e3e84e7ec982ae25fd5b2adbef87924fe5f34a",
    "line" : 235,
    "diffHunk" : "@@ -1,1 +233,237 @@\t\t}\n\t}\n\tfor _, v2 := range s2 {\n\t\tfound := false\n\t\tfor _, v1 := range s1 {"
  },
  {
    "id" : "6b0f2b1b-a045-45be-9bb3-9238ed611abd",
    "prId" : 46734,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46734#pullrequestreview-41644934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e221e9e-ccf2-4fbe-8c20-64abe55451fc",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "loop not necessary here, too.",
        "createdAt" : "2017-06-01T21:07:43Z",
        "updatedAt" : "2017-06-05T06:10:11Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "3b675048-da88-4d35-a7d4-ea647c52307a",
        "parentId" : "5e221e9e-ccf2-4fbe-8c20-64abe55451fc",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "same comment about duplicate values.",
        "createdAt" : "2017-06-01T21:40:40Z",
        "updatedAt" : "2017-06-05T06:10:11Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "63e3e84e7ec982ae25fd5b2adbef87924fe5f34a",
    "line" : 235,
    "diffHunk" : "@@ -1,1 +290,294 @@\t\t}\n\t}\n\tfor _, v2 := range s2 {\n\t\tfound := false\n\t\tfor _, v1 := range s1 {"
  },
  {
    "id" : "ea30ac8a-63e5-464e-8107-2093c7407036",
    "prId" : 46734,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46734#pullrequestreview-41645690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30e0242c-e9f3-4989-850b-7d48f76cd596",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "missing `usedNames[newName] = true`?",
        "createdAt" : "2017-06-01T21:13:58Z",
        "updatedAt" : "2017-06-05T06:10:11Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6e495497-9861-4acd-85cd-8c06cd1d71ca",
        "parentId" : "30e0242c-e9f3-4989-850b-7d48f76cd596",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "Done.",
        "createdAt" : "2017-06-01T21:44:18Z",
        "updatedAt" : "2017-06-05T06:10:11Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "63e3e84e7ec982ae25fd5b2adbef87924fe5f34a",
    "line" : 457,
    "diffHunk" : "@@ -1,1 +455,459 @@\t\t\t\ti += 1\n\t\t\t\tnewName = fmt.Sprintf(\"%s_v%d\", k, i)\n\t\t\t}\n\t\t\trenames = append(renames, Rename{from: k, to: newName})\n\t\t\tusedNames[newName] = true"
  },
  {
    "id" : "7cd944e8-59d6-490b-ade6-cc778297ee94",
    "prId" : 46734,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46734#pullrequestreview-48713962",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "048216de-7e52-4948-a1f4-2c6831fce791",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This file doesn't belong in the genericapiserver.  No \"normal\" apiserver has a reason to aggregate openapi specs, only the aggregator does that.  We should contain the logic where it is needed and keep the generic stuff separate.",
        "createdAt" : "2017-06-06T12:04:21Z",
        "updatedAt" : "2017-06-06T12:04:21Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "5f91f7a4-e0ca-4ddc-afd9-78123ef03a78",
        "parentId" : "048216de-7e52-4948-a1f4-2c6831fce791",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "I plan to move OpenAPI stuff out as a library, so where this code exists doesn't matter to me, I will move it to api aggregator for now.",
        "createdAt" : "2017-07-07T20:45:30Z",
        "updatedAt" : "2017-07-07T20:45:31Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "63e3e84e7ec982ae25fd5b2adbef87924fe5f34a",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@/*\nCopyright 2017 The Kubernetes Authors.\n"
  },
  {
    "id" : "866d497d-fe0d-4b60-8d03-55507f8e51b2",
    "prId" : 46734,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46734#pullrequestreview-48715207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fb19f73-23e9-48da-a046-71341a3cb8a8",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "why is something about aggregation in the generic apiserver?",
        "createdAt" : "2017-06-06T12:13:42Z",
        "updatedAt" : "2017-06-06T12:13:42Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "d1fc0285-8b66-4f78-8a93-10599fe90fca",
        "parentId" : "9fb19f73-23e9-48da-a046-71341a3cb8a8",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "Discussed in a previous comment. Will fix.",
        "createdAt" : "2017-07-07T20:50:57Z",
        "updatedAt" : "2017-07-07T20:50:58Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "63e3e84e7ec982ae25fd5b2adbef87924fe5f34a",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@/*\nCopyright 2017 The Kubernetes Authors.\n"
  },
  {
    "id" : "6738c941-1e59-486a-b969-58742b44dd91",
    "prId" : 46734,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46734#pullrequestreview-48752300",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "726586d4-b030-4687-825c-1f5be04dc031",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "this cloner is empty. We use the reflection code path without any custom deepcopy funcs. Intentional?",
        "createdAt" : "2017-06-06T12:14:27Z",
        "updatedAt" : "2017-06-06T12:14:27Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "b813c857-2f2c-48e6-8c79-6e8f40fa789b",
        "parentId" : "726586d4-b030-4687-825c-1f5be04dc031",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "Yes. As far as I can tell, we can't generate DeepCopy for spec.Swagger as it is not in our codebase. Please let me know if I am wrong (I want to be in this case).",
        "createdAt" : "2017-07-07T20:52:06Z",
        "updatedAt" : "2017-07-07T20:52:06Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      },
      {
        "id" : "19f9891d-bae1-4051-9e9f-6e3174252dae",
        "parentId" : "726586d4-b030-4687-825c-1f5be04dc031",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Good point! Just leave that for the moment. I will take care of it, when phase 2 of https://github.com/kubernetes/kubernetes/pull/48544 goes in.",
        "createdAt" : "2017-07-08T08:27:49Z",
        "updatedAt" : "2017-07-08T08:27:49Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "63e3e84e7ec982ae25fd5b2adbef87924fe5f34a",
    "line" : 477,
    "diffHunk" : "@@ -1,1 +475,479 @@// Clone OpenAPI spec\nfunc CloneSpec(source *spec.Swagger) (*spec.Swagger, error) {\n\tif ret, err := cloner.DeepCopy(source); err != nil {\n\t\treturn nil, err\n\t} else {"
  }
]