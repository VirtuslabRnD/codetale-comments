[
  {
    "id" : "7638c005-5033-41b6-8606-205918785433",
    "prId" : 102934,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102934#pullrequestreview-687143916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4f19c60-b5fb-4fbd-b857-584f7d890fe4",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "For the curious, this reordering doesn't cause apiserver to do more net work unless the probabilistic GOAWAY triggers, which is going to be rare or extremely rare.",
        "createdAt" : "2021-06-17T23:44:42Z",
        "updatedAt" : "2021-06-17T23:44:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b65f11a7-349b-497e-8d63-b8005c20847f",
        "parentId" : "f4f19c60-b5fb-4fbd-b857-584f7d890fe4",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "SGTM",
        "createdAt" : "2021-06-18T08:09:14Z",
        "updatedAt" : "2021-06-18T08:12:42Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "54fde5d119f8bb55aec18cb5aef01b6ea58dfea0",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +774,778 @@\thandler = genericfilters.WithHSTS(handler, c.HSTSDirectives)\n\thandler = genericfilters.WithHTTPLogging(handler)\n\thandler = genericapifilters.WithRequestInfo(handler, c.RequestInfoResolver)\n\thandler = genericapifilters.WithRequestReceivedTimestamp(handler)\n\thandler = genericfilters.WithPanicRecovery(handler, c.RequestInfoResolver)"
  },
  {
    "id" : "d21aab05-a1f9-41c4-b6de-b5b16b321c41",
    "prId" : 99237,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99237#pullrequestreview-597596729",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "963109d4-14b7-432c-bd7f-4fd509257d3c",
        "parentId" : null,
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "It's before `WithPanicRecovery` - this is so we can access the audit ID from the context when we log error message inside the `WithPanicRecovery`  handler. \r\nIf `WithAuditID` panics, `net/http2` will catch it and then log the panic with stack trace. ",
        "createdAt" : "2021-02-19T14:33:26Z",
        "updatedAt" : "2021-03-11T15:50:22Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      },
      {
        "id" : "c42f5eb5-3eb1-4abd-a5fc-65188da20fe5",
        "parentId" : "963109d4-14b7-432c-bd7f-4fd509257d3c",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "sounds fine",
        "createdAt" : "2021-02-24T15:19:24Z",
        "updatedAt" : "2021-03-11T15:50:22Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "b607ca1bf3e1cf6152c446ea61ac7fdd9014e1f1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +765,769 @@\thandler = genericapifilters.WithRequestReceivedTimestamp(handler)\n\thandler = genericfilters.WithPanicRecovery(handler, c.RequestInfoResolver)\n\thandler = genericapifilters.WithAuditID(handler)\n\treturn handler\n}"
  },
  {
    "id" : "13f97f6d-be74-4a4a-a2ef-c7e056b1061b",
    "prId" : 96527,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96527#pullrequestreview-529598886",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38af4877-4b01-49e3-a015-d10aedb21713",
        "parentId" : null,
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "so we do a nil check everywhere else within this file, but I think it was accidentally missed here; in actual execution, if the feature gate is enabled, `c.FlowControl` will never be nil. However, in this unit test, we don't set the feature gate, and `c.FlowControl` never gets set either, so the following Install call fails. Thankfully a pretty harmless nil pointer dereference :sweat_smile: ",
        "createdAt" : "2020-11-12T23:53:47Z",
        "updatedAt" : "2020-11-13T23:21:24Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      },
      {
        "id" : "8c04a2ae-7000-4da9-a1ef-553f4a7cc7f1",
        "parentId" : "38af4877-4b01-49e3-a015-d10aedb21713",
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "This and the fuzzer test were the only two that failed and I locally verified them. The other two CI failures (bazel and e2e-gce) seem to intermittent failures. Hopefully all green this time :D",
        "createdAt" : "2020-11-12T23:55:50Z",
        "updatedAt" : "2020-11-13T23:21:24Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      },
      {
        "id" : "5fc174a6-3b98-4819-be89-ad130a7ff273",
        "parentId" : "38af4877-4b01-49e3-a015-d10aedb21713",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Great, thanks for the quick fix!",
        "createdAt" : "2020-11-12T23:55:57Z",
        "updatedAt" : "2020-11-13T23:21:24Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "642b11483030e5aedbd6f43aeac3cbe40255b3b6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +786,790 @@\t\ts.Handler.GoRestfulContainer.Add(s.DiscoveryGroupManager.WebService())\n\t}\n\tif c.FlowControl != nil && feature.DefaultFeatureGate.Enabled(features.APIPriorityAndFairness) {\n\t\tc.FlowControl.Install(s.Handler.NonGoRestfulMux)\n\t}"
  },
  {
    "id" : "fe11a625-72b8-4775-9c3f-adadd066391d",
    "prId" : 96061,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96061#pullrequestreview-526459533",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea85de0a-af16-467c-85b6-e0e00e1a3c83",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "move behind WithWaitGroup, like in the insecure case.",
        "createdAt" : "2020-11-09T16:56:35Z",
        "updatedAt" : "2020-11-14T16:55:37Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "83f869ee1350da1b65d508725749fb70d0f535f2",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +753,757 @@\n\t// WithRequestDeadline sets a deadline for the request context appropriately\n\thandler = genericapifilters.WithRequestDeadline(handler, c.LongRunningFunc, c.RequestTimeout)\n\n\thandler = genericfilters.WithWaitGroup(handler, c.LongRunningFunc, c.HandlerChainWaitGroup)"
  },
  {
    "id" : "4c4713fa-0e91-4860-bf25-2d6be971f50a",
    "prId" : 95533,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95533#pullrequestreview-524760243",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "989f997d-20ac-4c1e-aa6f-7ec824d72eb9",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "As an administrator, I'd like to know my apiserver's current id by e.g. visiting some page on apiserver. Can I do that? What do you think about adding a standalone metric, e.g. where apiserver-id is a label? I'm totally open to other ideas too.",
        "createdAt" : "2020-11-04T23:16:35Z",
        "updatedAt" : "2020-11-06T21:36:13Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "1966c2ae-7c1e-40b8-b263-b052d3bfa419",
        "parentId" : "989f997d-20ac-4c1e-aa6f-7ec824d72eb9",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "Good point. I was relying on the hostname+pid to provide the debug info. \r\n\r\nHaving it in a metric makes sense. A similar case is the `/version` endpoint, which also has a metric \"kubernetes_build_info\" mapped in `/metrics`. We can start with a standalone metric. \r\n\r\nWhat do you think of having this in a followup PR? I think it can be a Beta graduate criteria, if the name / format gets controversial. ",
        "createdAt" : "2020-11-05T02:38:15Z",
        "updatedAt" : "2020-11-06T21:36:13Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      },
      {
        "id" : "f19d3bc6-49ed-4d7f-9245-b2713ab0e1c0",
        "parentId" : "989f997d-20ac-4c1e-aa6f-7ec824d72eb9",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Sure, a followup sounds fine.",
        "createdAt" : "2020-11-05T23:47:56Z",
        "updatedAt" : "2020-11-06T21:36:13Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "39f8daf9678e9bbea70ed2f72697e6173f2a299e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +226,230 @@\n\t// APIServerID is the ID of this API server\n\tAPIServerID string\n}\n"
  },
  {
    "id" : "fcc1cfee-d513-4363-8f52-b4b7e25ac8c3",
    "prId" : 95207,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95207#pullrequestreview-518887704",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e81d1d11-f3d3-436f-9061-4d5ad0a57f9e",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : ":+1: – a little more verbose here, but nicely contained where we define the chain.",
        "createdAt" : "2020-10-28T16:58:38Z",
        "updatedAt" : "2020-10-29T21:32:03Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "62431047b46c5949eaf592825712098d7280c4c0",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +698,702 @@\thandler = genericapifilters.WithAuthentication(handler, c.Authentication.Authenticator, failedHandler, c.Authentication.APIAudiences)\n\thandler = filterlatency.TrackStarted(handler, \"authentication\")\n\n\thandler = genericfilters.WithCORS(handler, c.CorsAllowedOriginList, nil, nil, nil, \"true\")\n\thandler = genericfilters.WithTimeoutForNonLongRunningRequests(handler, c.LongRunningFunc, c.RequestTimeout)"
  },
  {
    "id" : "e0ea32ad-b6f7-45a9-8799-9a1d33c51255",
    "prId" : 95207,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95207#pullrequestreview-519992535",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51cad74a-8be3-47dc-b124-a667a90f39f0",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "can we factor this a little tighter?  Perhaps an `Add` method that does the wrapping or a filter around just the WithImpersonation call?\r\n",
        "createdAt" : "2020-10-28T17:42:40Z",
        "updatedAt" : "2020-10-29T21:32:03Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "d9dbbb44-87ea-4a5b-8258-8a50aa1a8372",
        "parentId" : "51cad74a-8be3-47dc-b124-a667a90f39f0",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "note that we need both: start and complete.",
        "createdAt" : "2020-10-28T20:03:14Z",
        "updatedAt" : "2020-10-29T21:32:03Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "d788e060-deab-4336-a4ab-6c1bc44ed994",
        "parentId" : "51cad74a-8be3-47dc-b124-a667a90f39f0",
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "@deads2k I initially had this pattern but it looked less readable imo. I had to use a function like this to get it into one function:\r\n```\r\nfunc Tracked(handler http.Handler, name string, tracked func(h http.Handler) http.Handler) http.Handler\r\n```\r\n",
        "createdAt" : "2020-10-29T13:50:04Z",
        "updatedAt" : "2020-10-29T21:32:03Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      },
      {
        "id" : "6605ea6b-916b-42b4-846d-e33ebea78319",
        "parentId" : "51cad74a-8be3-47dc-b124-a667a90f39f0",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Yeah, either way would be OK with me.",
        "createdAt" : "2020-10-29T19:12:21Z",
        "updatedAt" : "2020-10-29T21:32:03Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "62431047b46c5949eaf592825712098d7280c4c0",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +685,689 @@\thandler = filterlatency.TrackCompleted(handler)\n\thandler = genericapifilters.WithImpersonation(handler, c.Authorization.Authorizer, c.Serializer)\n\thandler = filterlatency.TrackStarted(handler, \"impersonation\")\n\n\thandler = filterlatency.TrackCompleted(handler)"
  },
  {
    "id" : "81fdd9d2-3a6f-4743-8289-9375e725761b",
    "prId" : 94942,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94942#pullrequestreview-690964911",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23b6d348-3f65-42cb-b17f-8525a1c8d806",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "just to double check, from the KEP:\r\n\r\n> For incoming requests, this would go below WithRequestInfo in the filter stack, as it must be after authentication and authorization, before the panic filter, and is closest in function to the WithRequestInfo filter.\r\n\r\nabove/below are a little ambiguous... this constructs the filters \"inside out\"... the last filter added here runs first. Is the intent to run this filter **before** almost all other filters, including authn/authz and request received timestamp (not \"after authentication and authorization\" as described in the KEP)?",
        "createdAt" : "2021-06-23T17:03:01Z",
        "updatedAt" : "2021-06-23T17:05:24Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ad533165-6dee-48fb-bcd2-28b795667598",
        "parentId" : "23b6d348-3f65-42cb-b17f-8525a1c8d806",
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "I'm having trouble remembering the original conversation, but here is the comment I left: https://github.com/kubernetes/enhancements/pull/1458#discussion_r426961816.  The WithRequestInfo reference may not be as relevant anymore since it was recently moved in #102934.  I think the intention is that it is executed _after_ authentication, so I've placed it to be executed after (above in code) the authentication filter.",
        "createdAt" : "2021-06-23T17:43:01Z",
        "updatedAt" : "2021-06-23T17:43:02Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      }
    ],
    "commit" : "79550ed40c67a70534c1cb697e1fb7e7dbf96335",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +782,786 @@\tif utilfeature.DefaultFeatureGate.Enabled(genericfeatures.APIServerTracing) {\n\t\thandler = genericapifilters.WithTracing(handler, c.TracerProvider)\n\t}\n\thandler = genericapifilters.WithRequestInfo(handler, c.RequestInfoResolver)\n\thandler = genericapifilters.WithRequestReceivedTimestamp(handler)"
  },
  {
    "id" : "46a29a7c-432d-4158-b4f9-4146e7320f6b",
    "prId" : 94903,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94903#pullrequestreview-492624652",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b883b326-e261-4338-ac0b-7746254c480a",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "no need for the comment IMO.",
        "createdAt" : "2020-09-21T13:53:26Z",
        "updatedAt" : "2020-09-21T13:59:47Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "d74ab9e1a4929be208d4529fd12b76d3fcd5d546",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +691,695 @@\thandler = genericapifilters.WithWarningRecorder(handler)\n\thandler = genericapifilters.WithCacheControl(handler)\n\thandler = genericapifilters.WithRequestReceivedTimestamp(handler)\n\thandler = genericfilters.WithPanicRecovery(handler)\n\treturn handler"
  },
  {
    "id" : "d0b44326-19c2-405c-862b-273d5d976a7e",
    "prId" : 83579,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83579#pullrequestreview-298324000",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b2e423b-c400-4f4e-8ee1-33e2aab500fe",
        "parentId" : null,
        "authorId" : "c8bfafed-d184-4111-b0f7-47520a7dc6f5",
        "body" : "Another option would be to get `NewUnionCAContentProvider` to simply return value A if value B is nil",
        "createdAt" : "2019-10-07T18:26:59Z",
        "updatedAt" : "2019-10-23T15:02:12Z",
        "lastEditedBy" : "c8bfafed-d184-4111-b0f7-47520a7dc6f5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6beb96261e29754f2b7d0e44829eb6d15422cebf",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +354,358 @@\t}\n\tif servingInfo.ClientCA == nil {\n\t\tservingInfo.ClientCA = clientCA\n\t\treturn nil\n\t}"
  },
  {
    "id" : "19f5652a-c47d-457e-a4a7-b5fb88e3ff4e",
    "prId" : 82077,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82077#pullrequestreview-281047450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bbf8dd6-35cd-4829-926d-51b9a6318be6",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "What is a post start hook?\r\n\r\nMissing trailing dot.",
        "createdAt" : "2019-08-28T14:05:46Z",
        "updatedAt" : "2019-10-01T13:08:27Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "d8b8166e-93e4-4719-ab98-94bba2037247",
        "parentId" : "1bbf8dd6-35cd-4829-926d-51b9a6318be6",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> What is a post start hook?\r\n> \r\n> Missing trailing dot.\r\n\r\nSame as the existing poststarthook you can specify on the server.  This is a way to avoid side-effect code like I removed where a config is create, but the config doesn't work unless a poststarthook is later added in a separate step.\r\n\r\nUpdated the comment so we know its the same as the existing poststarthook.",
        "createdAt" : "2019-08-28T19:18:23Z",
        "updatedAt" : "2019-10-01T13:08:27Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "f14f4c933ee01d219ffbfa846875171e179019b7",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +398,402 @@// AddPostStartHook allows you to add a PostStartHook that will later be added to the server itself in a New call.\n// Name conflicts will cause an error.\nfunc (c *Config) AddPostStartHook(name string, hook PostStartHookFunc) error {\n\tif len(name) == 0 {\n\t\treturn fmt.Errorf(\"missing name\")"
  },
  {
    "id" : "cb6cd20a-61c2-4060-9af1-d52976a2cc06",
    "prId" : 82077,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82077#pullrequestreview-281278630",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aea5a472-23a2-4c3c-a8ee-81c34b421028",
        "parentId" : null,
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "could we log that a hook is not going to be registered/started because it was explicitly disabled?",
        "createdAt" : "2019-08-29T07:57:06Z",
        "updatedAt" : "2019-10-01T13:08:27Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f14f4c933ee01d219ffbfa846875171e179019b7",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +407,411 @@\tif c.DisabledPostStartHooks.Has(name) {\n\t\tklog.V(1).Infof(\"skipping %q because it was explicitly disabled\", name)\n\t\treturn nil\n\t}\n"
  },
  {
    "id" : "5f212bc3-d6a7-41da-b266-497acf347104",
    "prId" : 81946,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81946#pullrequestreview-279607853",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cc4dec6-345c-44d2-940a-a5fee1677839",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "also in kube-scheduler/app#buildHandlerChain and controller-manager/app#BuildHandlerChain?",
        "createdAt" : "2019-08-26T13:58:57Z",
        "updatedAt" : "2019-08-26T17:00:36Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f589c1213c8ba4fa0e31c523b2e9dcc27298084f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +600,604 @@\thandler = genericfilters.WithWaitGroup(handler, c.LongRunningFunc, c.HandlerChainWaitGroup)\n\thandler = genericapifilters.WithRequestInfo(handler, c.RequestInfoResolver)\n\thandler = genericapifilters.WithCacheControl(handler)\n\thandler = genericfilters.WithPanicRecovery(handler)\n\treturn handler"
  },
  {
    "id" : "b51866ef-6f14-4374-9557-db4f357689b3",
    "prId" : 81154,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81154#pullrequestreview-272351546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43e0e69c-8087-4bc2-8b71-5ddf758ba030",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "If this change is needed then there may be bigger problems.",
        "createdAt" : "2019-08-08T05:34:05Z",
        "updatedAt" : "2019-08-09T03:33:29Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "32cc04e9-3807-4463-84dc-a616d09474a1",
        "parentId" : "43e0e69c-8087-4bc2-8b71-5ddf758ba030",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "> \tif c.SharedInformerFactory != nil && !s.isPostStartHookRegistered(genericApiServerHookName) {\r\n\r\ni see the other hooks are doing the same.",
        "createdAt" : "2019-08-08T05:40:43Z",
        "updatedAt" : "2019-08-09T03:33:29Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "329b33ba2091a575bd23748d33d3685e47cf173e",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +555,559 @@\n\trequestManagementHookName := \"generic-apiserver-request-management\"\n\tif feature.DefaultFeatureGate.Enabled(features.RequestManagement) && !s.isPostStartHookRegistered(requestManagementHookName) {\n\t\terr := s.AddPostStartHook(requestManagementHookName, func(context PostStartHookContext) error {\n\t\t\treturn c.RequestManagement.Run(context.StopCh)"
  },
  {
    "id" : "2d18c1db-bbe6-4662-a831-0ba52ccde354",
    "prId" : 80628,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80628#pullrequestreview-268317872",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0951edd6-5529-404b-83c0-ec2d41012589",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "This filter is an alternative to the max-in-flight filter; exactly one of the two should be engaged.\r\nIs there a reason this filter should precede audit and impersonation, even though max-in-flight does not?",
        "createdAt" : "2019-07-28T05:56:41Z",
        "updatedAt" : "2019-08-02T09:27:05Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "00452503-3ebd-49fe-8780-7a4cb9736ec0",
        "parentId" : "0951edd6-5529-404b-83c0-ec2d41012589",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "good catch.. it should be in parallel w/ the max-in-flight filter..",
        "createdAt" : "2019-07-30T11:10:36Z",
        "updatedAt" : "2019-08-02T09:27:05Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bb5226c7c14901d3b993adacb70b98d946aea61",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +600,604 @@\thandler := genericapifilters.WithAuthorization(apiHandler, c.Authorization.Authorizer, c.Serializer)\n\tif feature.DefaultFeatureGate.Enabled(features.RequestManagement) {\n\t\thandler = genericfilters.WithRequestManagement(handler, c.LongRunningFunc, c.RequestManagement)\n\t} else {\n\t\thandler = genericfilters.WithMaxInFlightLimit(handler, c.MaxRequestsInFlight, c.MaxMutatingRequestsInFlight, c.LongRunningFunc)"
  },
  {
    "id" : "047a8d82-46e7-42a6-8ccb-1cdc77808ea9",
    "prId" : 80628,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80628#pullrequestreview-270558455",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22748049-7ca6-4e3d-aa38-6f9427df283f",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "This code has access to the main apiservers through `c.SharedInformerFactory`, but this is later in the startup process than we would like to start reading config.",
        "createdAt" : "2019-08-03T06:12:53Z",
        "updatedAt" : "2019-08-03T06:27:58Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "a6b2371e-a104-431a-8e56-f764b33a9c16",
        "parentId" : "22748049-7ca6-4e3d-aa38-6f9427df283f",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "it's designed i think. here we applies a `option-->config-->completed-config-->new` flow and it's commonly used in kubernetes world",
        "createdAt" : "2019-08-05T04:25:07Z",
        "updatedAt" : "2019-08-05T04:25:07Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "57a9a37c-0ded-4066-894e-acbfebe67acc",
        "parentId" : "22748049-7ca6-4e3d-aa38-6f9427df283f",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Right.  We did not put something in options, so the story starts with config for our feature.  I followed the standard pattern after config in #80956.\r\n\r\nI realized my first comment here is wrong.  I was thinking of reading config objects while constructing the handler chain, but have since realized that this does not make sense.  We have to initialize the filter's data structure to a useful default (as outlined in the KEP) and let the regular config object handling update that.",
        "createdAt" : "2019-08-05T05:02:06Z",
        "updatedAt" : "2019-08-05T05:02:06Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bb5226c7c14901d3b993adacb70b98d946aea61",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +557,561 @@\t\trequestManagementHookName := \"generic-apiserver-request-management\"\n\t\terr := s.AddPostStartHook(requestManagementHookName, func(context PostStartHookContext) error {\n\t\t\treturn c.RequestManagement.Run(context.StopCh)\n\t\t})\n\t\tif err != nil {"
  },
  {
    "id" : "f2770fe8-6575-4c16-8989-90cc33a75f00",
    "prId" : 79153,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79153#pullrequestreview-256005226",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc53e485-7f66-4492-9a1a-e5264d99c25b",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "🤔 ",
        "createdAt" : "2019-06-21T17:18:12Z",
        "updatedAt" : "2019-07-02T05:46:11Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "3b2a9338-109b-4dc5-b112-12284456a67a",
        "parentId" : "dc53e485-7f66-4492-9a1a-e5264d99c25b",
        "authorId" : "e81e699e-eb6c-4380-bfd5-16ab81ac51d6",
        "body" : "IMO this function should be more strict about the inputs. The caller could check for nil instead of relying on implicit noop behavior.",
        "createdAt" : "2019-06-28T22:15:53Z",
        "updatedAt" : "2019-07-02T05:46:11Z",
        "lastEditedBy" : "e81e699e-eb6c-4380-bfd5-16ab81ac51d6",
        "tags" : [
        ]
      },
      {
        "id" : "23e30e23-8567-4742-8d39-5b2dc0cafe59",
        "parentId" : "dc53e485-7f66-4492-9a1a-e5264d99c25b",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "@liggitt, do you know why this function is so loose?",
        "createdAt" : "2019-06-28T22:28:59Z",
        "updatedAt" : "2019-07-02T05:46:11Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "da831df0-75d5-4893-aed5-28418c43d4ba",
        "parentId" : "dc53e485-7f66-4492-9a1a-e5264d99c25b",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "it started in the apiserver, where we were trying to add in the loopback authn/authz. if no authn/authz was configured, this was supposed to be a no-op",
        "createdAt" : "2019-06-28T23:13:10Z",
        "updatedAt" : "2019-07-02T05:46:11Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7056e216addc7203f24c37a95c5c14ad194dddca",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +662,666 @@\t}\n\tif authn == nil || authz == nil {\n\t\t// prevent nil pointer panic\n\t\treturn\n\t}"
  },
  {
    "id" : "9dee22f5-5f75-4ac6-988d-56ba3aab0c3e",
    "prId" : 78458,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78458#pullrequestreview-243727966",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5caeb446-378c-4724-9d46-456b0376fc90",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "this is the config struct, not really the default, but the actual set of checks.",
        "createdAt" : "2019-05-30T09:51:52Z",
        "updatedAt" : "2019-06-17T18:16:46Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "822523b8-1da2-4690-ad65-8bc536456b31",
        "parentId" : "5caeb446-378c-4724-9d46-456b0376fc90",
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "ah, this was a stray comment from an iteration long ago.",
        "createdAt" : "2019-05-30T10:01:57Z",
        "updatedAt" : "2019-06-17T18:16:46Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      },
      {
        "id" : "9385944c-5c4e-4a2f-8ada-781801ea982c",
        "parentId" : "5caeb446-378c-4724-9d46-456b0376fc90",
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "It turns out I actually stole this comment from you. You wrote the initial comment two lines above for HealthzChecks three years ago.",
        "createdAt" : "2019-05-30T10:26:00Z",
        "updatedAt" : "2019-06-17T18:16:46Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      },
      {
        "id" : "c81f3062-5cb2-4ce0-a571-14f89d78eea6",
        "parentId" : "5caeb446-378c-4724-9d46-456b0376fc90",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Since that time it was moved around 7 times probably. Never trust existing code or comments ;-)",
        "createdAt" : "2019-05-30T10:26:46Z",
        "updatedAt" : "2019-06-17T18:16:46Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "eb3d15dc-e3d6-427f-ad0b-10fe13b81dac",
        "parentId" : "5caeb446-378c-4724-9d46-456b0376fc90",
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "It actually does make sense. We do assign the default checks to this field. And additional checks are, in fact, added dynamically.",
        "createdAt" : "2019-05-30T10:28:32Z",
        "updatedAt" : "2019-06-17T18:16:46Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      }
    ],
    "commit" : "54dcf5c9c46fc4782d4861936309349b5a71a1ac",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +137,141 @@\t// The default set of healthz checks. There might be more added via AddHealthzChecks dynamically.\n\tHealthzChecks []healthz.HealthzChecker\n\t// The default set of readyz-only checks. There might be more added via AddReadyzChecks dynamically.\n\tReadyzChecks []healthz.HealthzChecker\n\t// LegacyAPIGroupPrefixes is used to set up URL parsing for authorization and for validating requests"
  },
  {
    "id" : "651c7d47-879d-4050-aed3-94743e2c20be",
    "prId" : 78458,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78458#pullrequestreview-246265331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f31473d-8a47-4ae7-b2f2-8135b045eb96",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "does the wiring really need these 3 in the config or would GenericAPIServer be enough?",
        "createdAt" : "2019-06-05T20:44:30Z",
        "updatedAt" : "2019-06-17T18:16:46Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "065ba4c9-9072-478b-a8ca-d70f029b8a60",
        "parentId" : "6f31473d-8a47-4ae7-b2f2-8135b045eb96",
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "I'm not sure I follow what you are saying.. the portion of the code you are commenting on is in fact the GenericAPIServer. Specifically this is where we initialize the GenericAPIServer object. ",
        "createdAt" : "2019-06-05T21:21:49Z",
        "updatedAt" : "2019-06-17T18:16:46Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      }
    ],
    "commit" : "54dcf5c9c46fc4782d4861936309349b5a71a1ac",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +507,511 @@\t\thealthzChecks:              c.HealthzChecks,\n\t\treadyzChecks:               c.ReadyzChecks,\n\t\treadinessStopCh:            make(chan struct{}),\n\t\tmaxStartupSequenceDuration: c.MaxStartupSequenceDuration,\n"
  },
  {
    "id" : "83b15b08-c5c8-4e53-98b1-31b99919484e",
    "prId" : 78458,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78458#pullrequestreview-246259702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "395ade3f-2dc1-48a6-9750-e91443149af3",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "does the wiring really need this in the config?",
        "createdAt" : "2019-06-05T20:44:40Z",
        "updatedAt" : "2019-06-17T18:16:46Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "ef4b452a-ea61-41ce-a97a-91da2f16731c",
        "parentId" : "395ade3f-2dc1-48a6-9750-e91443149af3",
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "My thought was that it would be wise to initialize the GenericAPIServer with the clock since we can call AddPostStartHook arbitrarily on the GenericAPIServer object (prior to the installHealthz and installReadyz calls, in fact).",
        "createdAt" : "2019-06-05T21:09:12Z",
        "updatedAt" : "2019-06-17T18:16:46Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      }
    ],
    "commit" : "54dcf5c9c46fc4782d4861936309349b5a71a1ac",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +514,518 @@\t\tenableAPIResponseCompression: c.EnableAPIResponseCompression,\n\t\tmaxRequestBodyBytes:          c.MaxRequestBodyBytes,\n\t\thealthzClock:                 clock.RealClock{},\n\t}\n"
  },
  {
    "id" : "f8d693f2-789a-4f59-a018-4a6519c0f02a",
    "prId" : 78135,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78135#pullrequestreview-242306873",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13b264b3-b2b2-48ed-97b9-63706908c485",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "clever",
        "createdAt" : "2019-05-27T14:37:04Z",
        "updatedAt" : "2019-05-28T18:30:39Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c194ea615459ddab09938528eca3a3a228da8a3",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +428,432 @@\t\t} else {\n\t\t\tc.EquivalentResourceRegistry = runtime.NewEquivalentResourceRegistryWithIdentity(func(groupResource schema.GroupResource) string {\n\t\t\t\t// use the storage prefix as the key if possible\n\t\t\t\tif opts, err := c.RESTOptionsGetter.GetRESTOptions(groupResource); err == nil {\n\t\t\t\t\treturn opts.ResourcePrefix"
  },
  {
    "id" : "66ebd211-e3da-43a2-bf4c-5ffac40f8780",
    "prId" : 73805,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73805#pullrequestreview-201391531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fb89a65-eb6d-4477-8c4f-4851dab19e89",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Kudos to @jpbetz, who looked into a production cluster, the biggest json:proto ratio for a single object is ~2.3. So 10 is a very generous estimation.\r\n\r\nFWIW, I also did some maths in mind:\r\n* large primitive type Kubernetes have is int64, size ratio for int64 is log(2^64-1)/log10/2 = 9.1\r\n* for field names, the longest field that is wrapped in a list is `terminationMessagePolicy`, which is 24 chars long. It will be 1 byte in proto. ([bash one-liner](https://pastebin.com/AqRyprHi)).\r\n\r\n",
        "createdAt" : "2019-02-08T00:42:10Z",
        "updatedAt" : "2019-02-11T20:59:37Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "27166e48b86bf19570ae4e57775906cca1f52ad0",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +280,284 @@\t\t// A request body might be encoded in json, and is converted to\n\t\t// proto when persisted in etcd. Assuming the upper bound of\n\t\t// the size ratio is 10:1, we set 100MB as the largest request\n\t\t// body size to be accepted and decoded in a write request.\n\t\tMaxRequestBodyBytes:          int64(100 * 1024 * 1024),"
  },
  {
    "id" : "7e2174ba-12ea-4104-bd16-769ea0cb235e",
    "prId" : 73805,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73805#pullrequestreview-202253407",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3460d390-6b03-4705-b68e-42824519866e",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "doesn't this require updating the expected value in tests? same for the other change",
        "createdAt" : "2019-02-11T18:00:45Z",
        "updatedAt" : "2019-02-11T20:59:37Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "27166e48b86bf19570ae4e57775906cca1f52ad0",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +274,278 @@\t\t// the size ratio is 10:1, we set 100MB as the largest size\n\t\t// increase the \"copy\" operations in a json patch may cause.\n\t\tJSONPatchMaxCopyBytes: int64(100 * 1024 * 1024),\n\t\t// 10MB is the recommended maximum client request size in bytes\n\t\t// the etcd server should accept. See"
  },
  {
    "id" : "179aecd4-e44b-4a08-80fe-149fe97062b4",
    "prId" : 73409,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73409#pullrequestreview-198577828",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eebf4274-9775-43c3-ab3b-93777f411f6c",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "and if authn or authz is nil? We panic?",
        "createdAt" : "2019-01-30T10:52:52Z",
        "updatedAt" : "2019-03-06T06:08:36Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "d07900ff-4fcf-4949-8c80-8f38d11380dc",
        "parentId" : "eebf4274-9775-43c3-ab3b-93777f411f6c",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "it won't panic. authn/authz will just be bypassed\r\n\r\n[https://github.com/kubernetes/kubernetes/blob/529785e35564d52b08b3ce303df5faf4055d6d31/staging/src/k8s.io/apiserver/pkg/endpoints/filters/authorization.go#L46-L49](https://github.com/kubernetes/kubernetes/blob/529785e35564d52b08b3ce303df5faf4055d6d31/staging/src/k8s.io/apiserver/pkg/endpoints/filters/authorization.go#L46-L49)\r\n\r\n[https://github.com/kubernetes/kubernetes/blob/529785e35564d52b08b3ce303df5faf4055d6d31/staging/src/k8s.io/apiserver/pkg/endpoints/filters/authentication.go#L54-L57](https://github.com/kubernetes/kubernetes/blob/529785e35564d52b08b3ce303df5faf4055d6d31/staging/src/k8s.io/apiserver/pkg/endpoints/filters/authentication.go#L54-L57)",
        "createdAt" : "2019-01-30T11:55:27Z",
        "updatedAt" : "2019-03-06T06:08:36Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "b76da5a6-7700-4a11-9e7c-2cc280ed992f",
        "parentId" : "eebf4274-9775-43c3-ab3b-93777f411f6c",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "But here we check the `Authn/zInfo` structs, not the actual authenticators/authorizers. These info pointers can be nil. Then this code here panics.",
        "createdAt" : "2019-01-31T11:45:45Z",
        "updatedAt" : "2019-03-06T06:08:36Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "00807966-fd91-4dc0-a251-b56ee7e4d9c4",
        "parentId" : "eebf4274-9775-43c3-ab3b-93777f411f6c",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "👍🏻updated",
        "createdAt" : "2019-01-31T13:00:32Z",
        "updatedAt" : "2019-03-06T06:08:36Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "2486174142023ef785f196afee69bbcb78ae1f52",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +585,589 @@\t\t// prevent nil pointer panic\n\t}\n\tif authn.Authenticator == nil || authz.Authorizer == nil {\n\t\t// authenticator or authorizer might be nil if we want to bypass authz/authn\n\t\t// and we also do nothing in this case."
  },
  {
    "id" : "38f01673-ec44-4af0-bb65-b2458874858c",
    "prId" : 73409,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73409#pullrequestreview-204622880",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcfcf071-b4c7-4fd5-87e7-10aee90bedaa",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "We are returning here now if either of the two is nil. I.e. we disable bearer token authz if authn is not plumbed the normal way through. I don't think this is an too important code path. But for complete and correctness we might want to skip line 593 or 596 respectively.\r\n\r\n/cc @liggitt",
        "createdAt" : "2019-01-31T14:11:52Z",
        "updatedAt" : "2019-03-06T06:08:36Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "48eec95d-89c0-4ef1-90ae-56372f3a8c90",
        "parentId" : "bcfcf071-b4c7-4fd5-87e7-10aee90bedaa",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "previously we required both to be nil? what is the behavior with only authn or only authz configured?",
        "createdAt" : "2019-02-05T21:09:04Z",
        "updatedAt" : "2019-03-06T06:08:36Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "8e2a4a81-3185-4f81-8950-f93135ae8d82",
        "parentId" : "bcfcf071-b4c7-4fd5-87e7-10aee90bedaa",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "> what is the behavior with only authn or only authz configured?\r\n\r\n- __authn enabled && authz disabled__: this is useful for AA servers. w/ authz disabled, the server will disable delegated (subject review) authorizer (for our case, we place the request validation into one compiled-in admission controller since it's less costy). and w/ authn enabled, the user's info will still be passed as admission attributes so that the admission could work.\r\n- __authn disabled && authz enabled__: it doesnt seem to work. iiuc, authn should be a prerequisites to authz?",
        "createdAt" : "2019-02-18T05:15:20Z",
        "updatedAt" : "2019-03-06T06:08:36Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "2486174142023ef785f196afee69bbcb78ae1f52",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +583,587 @@\t}\n\tif authn == nil || authz == nil {\n\t\t// prevent nil pointer panic\n\t}\n\tif authn.Authenticator == nil || authz.Authorizer == nil {"
  },
  {
    "id" : "19f254f8-f150-4a9e-b827-484ce017059d",
    "prId" : 64601,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64601#pullrequestreview-145893500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07a22b67-4892-4cbb-8710-d7ddb20929e9",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Why is this gated on EnableProfiling?",
        "createdAt" : "2018-08-14T01:10:51Z",
        "updatedAt" : "2018-08-15T09:19:57Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "5558f098-e2b5-4cc0-a7d4-1dd3cb9b7e72",
        "parentId" : "07a22b67-4892-4cbb-8710-d7ddb20929e9",
        "authorId" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "body" : "xref: https://github.com/kubernetes/kubernetes/pull/63777#discussion_r191838475",
        "createdAt" : "2018-08-14T01:46:43Z",
        "updatedAt" : "2018-08-15T09:19:57Z",
        "lastEditedBy" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "815799638bc1f3afa97f1b9f5524d10f5c36973a",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +577,581 @@\t\t}\n\t\t// so far, only logging related endpoints are considered valid to add for these debug flags.\n\t\troutes.DebugFlags{}.Install(s.Handler.NonGoRestfulMux, \"v\", routes.StringFlagPutHandler(logs.GlogSetter))\n\t}\n\tif c.EnableMetrics {"
  },
  {
    "id" : "09cd3517-2dd1-4901-a0f4-b588aabbbdd1",
    "prId" : 63777,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63777#pullrequestreview-125025054",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "003bb69b-e9da-4c8c-b8cd-0a1fcbd5688b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I won't make you change it again but this is in the wrong section :)",
        "createdAt" : "2018-05-31T15:17:12Z",
        "updatedAt" : "2018-05-31T15:17:12Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9c4edba5-96e6-448e-b612-a5987f64cf3d",
        "parentId" : "003bb69b-e9da-4c8c-b8cd-0a1fcbd5688b",
        "authorId" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "body" : "Sorry,  the ide auto imports and put it here. I will fix it later.",
        "createdAt" : "2018-06-01T01:23:00Z",
        "updatedAt" : "2018-06-01T01:23:00Z",
        "lastEditedBy" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "73a22b2e611647de04aa8d7fe910fd4657e6a9d8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +66,70 @@\n\t// install apis\n\t\"github.com/golang/glog\"\n\t_ \"k8s.io/apiserver/pkg/apis/apiserver/install\"\n)"
  },
  {
    "id" : "c3c16350-18db-44b2-80f9-c0636caebb00",
    "prId" : 63777,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63777#pullrequestreview-145893395",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76da9d7c-1372-449f-9fbe-bd3dc1075f4b",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Why is this gated on profiling being enabled?",
        "createdAt" : "2018-08-14T00:58:11Z",
        "updatedAt" : "2018-08-14T00:58:11Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "3f29e51a-b1b1-4162-a4fe-4e8f37d27021",
        "parentId" : "76da9d7c-1372-449f-9fbe-bd3dc1075f4b",
        "authorId" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "body" : "That's @lavalamp suggested: https://github.com/kubernetes/kubernetes/pull/63777#discussion_r191838475",
        "createdAt" : "2018-08-14T01:45:53Z",
        "updatedAt" : "2018-08-14T01:45:53Z",
        "lastEditedBy" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "73a22b2e611647de04aa8d7fe910fd4657e6a9d8",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +578,582 @@\t\t}\n\t\t// so far, only logging related endpoints are considered valid to add for these debug flags.\n\t\troutes.DebugFlags{}.Install(s.Handler.NonGoRestfulMux, \"v\", routes.StringFlagPutHandler(\n\t\t\troutes.StringFlagSetterFunc(func(val string) (string, error) {\n\t\t\t\tvar level glog.Level"
  },
  {
    "id" : "f3fa0cc3-d52b-447f-b149-3af9ba42da48",
    "prId" : 55859,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55859#pullrequestreview-77763650",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4be0466-a848-47a7-81a6-49bf3bafdb6d",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "nice and clear",
        "createdAt" : "2017-11-20T12:10:41Z",
        "updatedAt" : "2017-11-21T03:01:45Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ba30f678c232793430a98770e7a851f1e814fd2",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +205,209 @@type SecureServingInfo struct {\n\t// Listener is the secure server network listener.\n\tListener net.Listener\n\n\t// Cert is the main server cert which is used if SNI does not match. Cert must be non-nil and is"
  },
  {
    "id" : "d7621535-8aab-433c-a487-4b87d6391d15",
    "prId" : 53695,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53695#pullrequestreview-72064385",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cd86496-fa68-45cb-823d-ac979197dc4e",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "do we really need this in the config? I would just create it in the GenericApiServer object.",
        "createdAt" : "2017-10-25T10:42:42Z",
        "updatedAt" : "2017-10-28T07:04:18Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "fa0bd6e9-3dcc-410d-8af1-aa49e3915599",
        "parentId" : "1cd86496-fa68-45cb-823d-ac979197dc4e",
        "authorId" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "body" : "Yes, we need. Because if only reserve it in GenericApiServer . It will introduce the change here\r\n```\r\nhandlerChainBuilder := func(handler http.Handler) http.Handler {\r\n\t\treturn c.BuildHandlerChainFunc(handler, c.Config)\r\n\t}\r\n\tapiServerHandler := NewAPIServerHandler(name, c.RequestContextMapper, c.Serializer, handlerChainBuilder, delegationTarget.UnprotectedHandler())\r\n\r\n\ts := &GenericAPIServer{\r\n```",
        "createdAt" : "2017-10-26T02:20:20Z",
        "updatedAt" : "2017-10-28T07:04:18Z",
        "lastEditedBy" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "tags" : [
        ]
      },
      {
        "id" : "5877341f-b709-4d8a-9365-6a81ac69d91e",
        "parentId" : "1cd86496-fa68-45cb-823d-ac979197dc4e",
        "authorId" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "body" : "HandlerChainWaitGroup now both used in Config and GenericAPIServer.",
        "createdAt" : "2017-10-26T02:25:34Z",
        "updatedAt" : "2017-10-28T07:04:18Z",
        "lastEditedBy" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "f42686081bff88e44b339562c4927775f4439671",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +130,134 @@\t// BuildHandlerChainFunc allows you to build custom handler chains by decorating the apiHandler.\n\tBuildHandlerChainFunc func(apiHandler http.Handler, c *Config) (secure http.Handler)\n\t// HandlerChainWaitGroup allows you to wait for all chain handlers exit after the server shutdown.\n\tHandlerChainWaitGroup *sync.WaitGroup\n\t// DiscoveryAddresses is used to build the IPs pass to discovery. If nil, the ExternalAddress is"
  },
  {
    "id" : "2c1fb80e-cabe-4dad-b267-14c3a3324a58",
    "prId" : 51900,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51900#pullrequestreview-60429069",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1e92e58-c818-4933-a9c9-761329c5ca4f",
        "parentId" : null,
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "These three lines should be deleted as well ?",
        "createdAt" : "2017-09-04T14:19:16Z",
        "updatedAt" : "2017-09-08T14:13:01Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      },
      {
        "id" : "6dc2f392-f2ae-4233-8be5-325a91eaf6fd",
        "parentId" : "f1e92e58-c818-4933-a9c9-761329c5ca4f",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "They belong to the next fields.",
        "createdAt" : "2017-09-04T14:37:12Z",
        "updatedAt" : "2017-09-08T14:13:01Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbd310dbc7312fcae4267dd64326a1e7b4a0a8ae",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +123,127 @@\tExternalAddress string\n\n\t//===========================================================================\n\t// Fields you probably don't care about changing\n\t//==========================================================================="
  },
  {
    "id" : "78a065ce-5929-4da1-ae1a-d3171441f0c8",
    "prId" : 51900,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51900#pullrequestreview-60429142",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "859b1613-dad6-4443-ab61-334485ab2cfd",
        "parentId" : null,
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "Should delete the newline here? These three commented lines should belong to `*Config`, right?",
        "createdAt" : "2017-09-04T14:20:21Z",
        "updatedAt" : "2017-09-08T14:13:01Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      },
      {
        "id" : "10105bc3-2dc4-4253-baa9-1e77edf021b1",
        "parentId" : "859b1613-dad6-4443-ab61-334485ab2cfd",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "It's header for everything following.",
        "createdAt" : "2017-09-04T14:37:32Z",
        "updatedAt" : "2017-09-08T14:13:01Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbd310dbc7312fcae4267dd64326a1e7b4a0a8ae",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +317,321 @@\t*Config\n\n\t//===========================================================================\n\t// values below here are filled in during completion\n\t//==========================================================================="
  },
  {
    "id" : "a3b64749-cd4a-4522-a1af-0ccb3afa7668",
    "prId" : 49395,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49395#pullrequestreview-51743659",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd013f2c-a269-499a-a843-007b86ab6fa1",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "with authn and audit before this filter, there is a higher chance to  DDoS external systems via the webhooks. Wdyt?",
        "createdAt" : "2017-07-24T10:03:16Z",
        "updatedAt" : "2017-07-24T10:03:17Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "fc64496b-7df4-4d32-8bf2-81c5c95ef332",
        "parentId" : "fd013f2c-a269-499a-a843-007b86ab6fa1",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "/cc @liggitt ",
        "createdAt" : "2017-07-24T10:05:11Z",
        "updatedAt" : "2017-07-24T10:05:11Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "64290bd4-8b1b-4b5b-ae45-c2b7e9bde3e6",
        "parentId" : "fd013f2c-a269-499a-a843-007b86ab6fa1",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> with authn and audit before this filter, there is a higher chance to DDoS external systems via the webhooks. Wdyt?\r\n\r\nThe components being exposed would need to protect themselves.  ",
        "createdAt" : "2017-07-24T11:43:09Z",
        "updatedAt" : "2017-07-24T11:43:09Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a3b4d81e6c3a74fa1afa5fd17d3bf42ba1e856d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +469,473 @@func DefaultBuildHandlerChain(apiHandler http.Handler, c *Config) http.Handler {\n\thandler := genericapifilters.WithAuthorization(apiHandler, c.RequestContextMapper, c.Authorizer, c.Serializer)\n\thandler = genericfilters.WithMaxInFlightLimit(handler, c.MaxRequestsInFlight, c.MaxMutatingRequestsInFlight, c.RequestContextMapper, c.LongRunningFunc)\n\thandler = genericapifilters.WithImpersonation(handler, c.RequestContextMapper, c.Authorizer, c.Serializer)\n\tif utilfeature.DefaultFeatureGate.Enabled(features.AdvancedAuditing) {"
  },
  {
    "id" : "724066fc-5501-4c58-9bf5-604ba98a79e8",
    "prId" : 46440,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46440#pullrequestreview-40549273",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "337f376f-ecf6-48c6-a415-158f1bff6d75",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "is this fixing a double-slash issue, or changing consumption of subpaths, or something else?",
        "createdAt" : "2017-05-26T14:57:26Z",
        "updatedAt" : "2017-05-26T16:15:16Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "18d6b58a-7bb5-4da1-ae7e-f375636e4be3",
        "parentId" : "337f376f-ecf6-48c6-a415-158f1bff6d75",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> is this fixing a double-slash issue, or changing consumption of subpaths, or something else?\r\n\r\nslash check for the non-allocating test.",
        "createdAt" : "2017-05-26T15:24:23Z",
        "updatedAt" : "2017-05-26T16:15:16Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "18177e2bdeafbddeb3d66fec0b8cb88794cd69ff",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +252,256 @@func DefaultSwaggerConfig() *swagger.Config {\n\treturn &swagger.Config{\n\t\tApiPath:         \"/swaggerapi\",\n\t\tSwaggerPath:     \"/swaggerui/\",\n\t\tSwaggerFilePath: \"/swagger-ui/\","
  },
  {
    "id" : "fa9239eb-23df-40f0-ab9a-423de082662e",
    "prId" : 42337,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42337#pullrequestreview-29796680",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99c26542-a4f8-4444-b9ea-2c611346d8d8",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Looks good now.",
        "createdAt" : "2017-03-29T17:58:06Z",
        "updatedAt" : "2017-03-29T17:58:07Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "e156aca4f21331465ba9406be362b9f16b8aba9e",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +193,197 @@\t// CipherSuites optionally overrides the list of allowed cipher suites for the server.\n\t// Values are from tls package constants (https://golang.org/pkg/crypto/tls/#pkg-constants).\n\tCipherSuites []uint16\n}\n"
  },
  {
    "id" : "2906a552-6bb8-461f-af35-8f5a63e4c7ae",
    "prId" : 41093,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41093#pullrequestreview-21022041",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64ecc6ef-bfc8-45d3-b206-90abaf39413a",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Please add \"This has a reasonable default for most apiservers.\" or something like that.",
        "createdAt" : "2017-02-09T14:38:00Z",
        "updatedAt" : "2017-02-09T14:38:00Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "a463540d47f16f14899b2ec60779f420df9368f4",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +132,136 @@\t// SwaggerConfig will be used in generating Swagger spec. This is nil by default. Use DefaultSwaggerConfig for \"working\" defaults.\n\tSwaggerConfig *swagger.Config\n\t// RESTOptionsGetter is used to construct \"normal\" RESTStorage types\n\tRESTOptionsGetter genericregistry.RESTOptionsGetter\n"
  }
]