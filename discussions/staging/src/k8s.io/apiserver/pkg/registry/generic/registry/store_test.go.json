[
  {
    "id" : "e77988ac-4ab2-4feb-a81f-6617d2051dcb",
    "prId" : 96393,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96393#pullrequestreview-564510668",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83152b89-1f0a-4ce6-b0da-b0d0ece2f0dd",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "give a comment here about delete options not having a fieldmanager field?",
        "createdAt" : "2021-01-08T15:27:11Z",
        "updatedAt" : "2021-01-08T19:14:39Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "6d9e2b9b-6e14-49f6-b0b7-81664c6a863e",
        "parentId" : "83152b89-1f0a-4ce6-b0da-b0d0ece2f0dd",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "ACK",
        "createdAt" : "2021-01-08T19:06:18Z",
        "updatedAt" : "2021-01-08T19:14:39Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "37b34f5b53edec78ca33929443bb4ba9a9534ed1",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +458,462 @@\n\t\t// DeleteOptions does not have these fields.\n\t\tdelete(inMap, \"fieldManager\")\n\n\t\t// UpdateOptions does not have these fields."
  },
  {
    "id" : "8b7a1cf0-bfd3-45ac-a0f3-8a830a63e40c",
    "prId" : 96393,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96393#pullrequestreview-564347328",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a6676f0-4b80-4ced-a03e-472cb73928cf",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "thanks for the bool output",
        "createdAt" : "2021-01-08T15:28:15Z",
        "updatedAt" : "2021-01-08T19:14:39Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "37b34f5b53edec78ca33929443bb4ba9a9534ed1",
    "line" : 217,
    "diffHunk" : "@@ -1,1 +542,546 @@\t\t\t}, nil\n\t\t},\n\t\texpectMilestones: []string{\"BeginCreate\", \"FinishCreate(true)\", \"AfterCreate\", \"Decorator\"},\n\t}, {\n\t\tname: \"fail ordering\","
  },
  {
    "id" : "e81d86ec-3a3f-48be-9be2-40b07c777d7f",
    "prId" : 96393,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96393#pullrequestreview-564523567",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6624bc0-28b1-4206-b583-d9631fe1b5a7",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I thought one of the semantics you wanted was that every attempt at an update got a separate finish call.  I don't think I see a test case checking for that semantic.  Given the likelihood of a refactor on the update code, I think it could help ensure the behavior sticks.  Is there a reasonable way to have the `NewTestGenericStoreRegistry` fail the guaranteed update?",
        "createdAt" : "2021-01-08T15:33:41Z",
        "updatedAt" : "2021-01-08T19:14:39Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "2a24da46-a08f-48d3-9850-d12b4db17449",
        "parentId" : "c6624bc0-28b1-4206-b583-d9631fe1b5a7",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Look at TestStoreUpdateHooksInnerRetry() - it uses the TTLFunc hook to force a failure and retry on the inner loop, so you see cases like:\r\n\r\n```\r\nexpectMilestones: []string{\"BeginUpdate\", \"TTLError\", \"FinishUpdate(false)\", \"BeginUpdate\", \"TTL\", \"FinishUpdate(true)\", \"AfterUpdate\", \"Decorator\"},\r\n```\r\n\r\nand \r\n\r\n```\r\nexpectMilestones: []string{\"BeginUpdate\", \"TTLError\", \"FinishUpdate(false)\", \"BeginUpdate\", \"TTLError\", \"FinishUpdate(false)\"},\r\n```\r\n\r\nI assume that handles what you are asking for?  Will resolve on that presumption.",
        "createdAt" : "2021-01-08T19:13:17Z",
        "updatedAt" : "2021-01-08T19:14:39Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "e0c813a9-35ce-4430-af28-5bec03f372be",
        "parentId" : "c6624bc0-28b1-4206-b583-d9631fe1b5a7",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I assume that handles what you are asking for? Will resolve on that presumption.\r\n\r\nso it is.  thank you.",
        "createdAt" : "2021-01-08T19:27:55Z",
        "updatedAt" : "2021-01-08T19:27:55Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "37b34f5b53edec78ca33929443bb4ba9a9534ed1",
    "line" : 322,
    "diffHunk" : "@@ -1,1 +795,799 @@\t}\n\n\ttestCases := []struct {\n\t\tname      string\n\t\tdecorator func(runtime.Object)"
  },
  {
    "id" : "834482c0-9b7a-4d2e-84d6-83016beb5bba",
    "prId" : 85516,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85516#pullrequestreview-323308082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5917703c-437d-4645-8301-945b087e53a9",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "did this test fail before the fix?",
        "createdAt" : "2019-11-26T21:35:32Z",
        "updatedAt" : "2019-11-26T21:35:33Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "bdabd744-8379-49a7-a4a6-edfe0d288122",
        "parentId" : "5917703c-437d-4645-8301-945b087e53a9",
        "authorId" : "c924ff9d-2ff6-4d00-98bc-1de4b935110f",
        "body" : "This behavior was not tested before the fix.  If you comment out the code I added in store.go, you'll see this test fail in the covered case.  Also, if you look at my PR test history for the eviction PR, you'll see it failing there before this fix went in.",
        "createdAt" : "2019-11-26T21:51:53Z",
        "updatedAt" : "2019-11-26T21:51:53Z",
        "lastEditedBy" : "c924ff9d-2ff6-4d00-98bc-1de4b935110f",
        "tags" : [
        ]
      }
    ],
    "commit" : "494629ef58c6d01607d610d3e757666356c0b18d",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +730,734 @@\n\t// delete object\n\t_, wasDeleted, err := registry.Delete(testContext, podA.Name, rest.ValidateAllObjectFunc, options)\n\tif err != nil {\n\t\tt.Errorf(\"Unexpected error: %v\", err)"
  },
  {
    "id" : "b4f36d39-4c62-4e7c-bcfe-e1022aadb877",
    "prId" : 77619,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77619#pullrequestreview-235356380",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41b848af-2d91-4548-bde1-fe6b1a21e4c6",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "This test fails without the fix.",
        "createdAt" : "2019-05-09T00:40:10Z",
        "updatedAt" : "2019-05-09T17:35:34Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e53522a9ef56f33d06c457c072c379131e127ef",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1865,1869 @@}\n\nfunc TestDeleteWithCachedObject(t *testing.T) {\n\tpodName := \"foo\"\n\tpodWithFinalizer := &example.Pod{"
  },
  {
    "id" : "c8a536f9-8aed-4bce-8126-afcef8d3826a",
    "prId" : 55228,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55228#pullrequestreview-75205158",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98029fb3-300a-428b-a157-aa7de2d0b3d5",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "these are the tests I was looking for",
        "createdAt" : "2017-11-08T18:41:28Z",
        "updatedAt" : "2017-11-08T19:45:39Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "c558d2a3517fafdb704edd2c00b6df6738786959",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +312,316 @@\tregistry.DeleteStrategy = testGracefulStrategy{defaultDeleteStrategy}\n\n\t// create the object with denying admission\n\tobjA, err := registry.Create(testContext, podA, denyCreateValidation, false)\n\tif err == nil {"
  },
  {
    "id" : "7f65f9e6-9f88-438f-a9fb-8ba57bc67ad7",
    "prId" : 51148,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51148#pullrequestreview-58537186",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09bb28f5-5a6f-4630-a35c-ecd947808afd",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "It looks like you didn't change the tests, you just added the case where gcStates=false, right?",
        "createdAt" : "2017-08-24T23:23:19Z",
        "updatedAt" : "2017-08-24T23:23:48Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "4dcd181a-4120-45f6-be66-272feda77fb0",
        "parentId" : "09bb28f5-5a6f-4630-a35c-ecd947808afd",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Yeah, ignoring white space (add ?w=1) made that clear. The diff was terrifying otherwise",
        "createdAt" : "2017-08-24T23:25:43Z",
        "updatedAt" : "2017-08-24T23:25:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c845c444d52b81689e4555aec0e8175f687b6a44",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +936,940 @@\tdefer destroyFunc()\n\n\tgcStates := []bool{true, false}\n\tfor _, gcEnabled := range gcStates {\n\t\tt.Logf(\"garbage collection enabled: %t\", gcEnabled)"
  },
  {
    "id" : "67879ce3-b90c-4b48-95db-225fdebdd477",
    "prId" : 36721,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36721#pullrequestreview-40402757",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea93386b-5e52-416f-9109-5fbc7e441453",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "can we make this a function (or method on struct) w/parameters instead of copypasting?",
        "createdAt" : "2017-05-25T23:41:25Z",
        "updatedAt" : "2017-06-03T02:09:49Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "b993f7d303aa72961d6b0a32a42e7fcc5cb26190",
    "line" : 226,
    "diffHunk" : "@@ -1,1 +501,505 @@\n\tch := make(chan struct{})\n\tgo func() {\n\t\tw, err := registry.Watch(ctx, &metainternalversion.ListOptions{\n\t\t\tIncludeUninitialized: true,"
  }
]