[
  {
    "id" : "673e08ab-f3f7-45ba-a0f6-ce4f8ed14d1f",
    "prId" : 88979,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88979#pullrequestreview-371473178",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01877e52-5146-4f23-a49e-6a85e0b29174",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "In a language with runtime representations for types, such as go, it is actually confusing to use the name \"object type\" instead of \"example object\" when the latter is meant.  (This complaint applies to a lot of code --- particularly code that uses the golang type `interface{}` for the value in question --- not just this change.)",
        "createdAt" : "2020-03-09T19:38:18Z",
        "updatedAt" : "2020-03-09T19:42:10Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a941755a39afd366dad6d005dfaf41fd584dec08",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +91,95 @@}\n\nfunc objectTypeToString(obj runtime.Object) string {\n\t// special-case unstructured objects that tell us their apiVersion/kind\n\tif u, isUnstructured := obj.(*unstructured.Unstructured); isUnstructured {"
  },
  {
    "id" : "fffac879-2a33-4acc-a926-7fd6811fb432",
    "prId" : 79793,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79793#pullrequestreview-258065680",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d7968c9-2993-429e-9831-c59d3ef732ac",
        "parentId" : null,
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "do we plan to support indexing based on arbitrary fields ?",
        "createdAt" : "2019-07-04T14:05:01Z",
        "updatedAt" : "2019-07-16T06:55:45Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      },
      {
        "id" : "b2089389-7173-4621-a48c-951033d83c3d",
        "parentId" : "0d7968c9-2993-429e-9831-c59d3ef732ac",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "no (at least not anytime in the near/mid future)",
        "createdAt" : "2019-07-04T14:10:46Z",
        "updatedAt" : "2019-07-16T06:55:45Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "68fd329e00d1ddf19a7ec0db1607820a1c4c008a",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +65,69 @@\t\t\tNewListFunc:           newListFunc,\n\t\t\tGetAttrsFunc:          getAttrsFunc,\n\t\t\tTriggerPublisherFuncs: triggerFuncs,\n\t\t\tCodec:                 storageConfig.Codec,\n\t\t}"
  },
  {
    "id" : "5134bcf4-3186-4fb2-8c1b-07b265724f0b",
    "prId" : 55175,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55175#pullrequestreview-74812885",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e7a61aa-51e0-4287-a6e8-0457a66a9f33",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Why not allow multiple cleanups and just only respect the first?",
        "createdAt" : "2017-11-07T16:15:22Z",
        "updatedAt" : "2017-11-07T16:15:22Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "148fa41e-47ce-44ea-90c4-4e538c59a1f9",
        "parentId" : "4e7a61aa-51e0-4287-a6e8-0457a66a9f33",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "We use the global state and have no knowledge to which \"session\" the storage belongs. The whole mechanism was a quickfix with this assumption in mind. Wiring through storage shutdown properly has been done by @frobware, but introduces quite some ugliness. So @dims added this hack for the tests. We still don't see complete stability, so this let's the mechanism fail early, but with a clear message.",
        "createdAt" : "2017-11-07T16:18:55Z",
        "updatedAt" : "2017-11-07T16:18:56Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "a246d6f1d13d1215e6556c5c419a7cb0e7afccab",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +93,97 @@\n\tif cleanup != nil {\n\t\tpanic(\"Conflicting storage tracking\")\n\t}\n\tcleanup = make([]func(), 0)"
  },
  {
    "id" : "dd304675-dfa6-4fd3-a70d-0af00732c515",
    "prId" : 52112,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52112#pullrequestreview-61587719",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8832c918-99bb-48b9-9a17-a5c3d7d542e0",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "meat! made it.",
        "createdAt" : "2017-09-08T18:32:56Z",
        "updatedAt" : "2017-09-08T18:32:56Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc2d201e155296f311ae0a9278b00dcae2d68708",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +42,46 @@\t\ts, d := generic.NewRawStorage(storageConfig)\n\t\tif capacity == 0 {\n\t\t\tglog.V(5).Infof(\"Storage caching is disabled for %T\", objectType)\n\t\t\treturn s, d\n\t\t}"
  }
]