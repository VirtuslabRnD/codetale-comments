[
  {
    "id" : "5e2eaa8d-ac93-4abe-acf2-7ae75ad79dc4",
    "prId" : 103504,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103504#pullrequestreview-699943699",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "adbff2af-de37-43cc-9145-b1330c37ad5a",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Also - there seem to be a compile error in some test...",
        "createdAt" : "2021-07-06T09:28:53Z",
        "updatedAt" : "2021-07-06T09:28:54Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "7d3c5ac4-18cf-49f3-8f4f-51e5812c479d",
        "parentId" : "adbff2af-de37-43cc-9145-b1330c37ad5a",
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "fixed the test",
        "createdAt" : "2021-07-06T13:20:09Z",
        "updatedAt" : "2021-07-06T13:20:09Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      }
    ],
    "commit" : "24e19229101d242d924ce98a562be3864dde9eae",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +37,41 @@\tfcfmt \"k8s.io/apiserver/pkg/util/flowcontrol/format\"\n\t\"k8s.io/apiserver/pkg/util/flowcontrol/metrics\"\n\tfcrequest \"k8s.io/apiserver/pkg/util/flowcontrol/request\"\n\t\"k8s.io/client-go/informers\"\n\tclientsetfake \"k8s.io/client-go/kubernetes/fake\""
  },
  {
    "id" : "23c3e1d5-30b4-41f8-b254-4bc5cc104ea4",
    "prId" : 98693,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98693#pullrequestreview-581531322",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0dd2b9aa-5cc1-4cfe-bd83-8bda818416ef",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "In addition to reducing iterations we run excessive numbers of times (which I agree with), we should also reduce the logging produced by this package by default. In addition to the number of iterations, excessive logging is part of why this package takes so long to test, and bloats test output enormously.\r\n\r\njust commenting out the Log statements, the package runs ~3x faster:\r\n```\r\ntime $(go test -race -v k8s.io/apiserver/pkg/util/flowcontrol -count=1 >/dev/null)\r\n\r\nreal\t0m5.252s\r\nuser\t0m6.884s\r\nsys\t0m2.837s\r\n```\r\n\r\nwith logging:\r\n```\r\ntime $(go test -race -v k8s.io/apiserver/pkg/util/flowcontrol -count=1 >/dev/null)\r\n\r\nreal\t0m18.145s\r\nuser\t0m29.135s\r\nsys\t0m6.430s\r\n```\r\n\r\nThis package alone produces ~115MB of logs:\r\n\r\n```\r\ngo test -race -v k8s.io/apiserver/pkg/util/flowcontrol -count=1 | wc -c\r\n\r\n122363748\r\n```\r\n\r\nthe logs seem useful for debugging, but I'd suggest a package-local test-only `var debug = false` var and making all the Log statements in the inner loops conditional on that var. When working on this package specifically, the debug logs could be enabled locally.",
        "createdAt" : "2021-02-02T14:26:15Z",
        "updatedAt" : "2021-02-02T16:20:22Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c69c38f4-78f4-4a25-b653-342525abc24d",
        "parentId" : "0dd2b9aa-5cc1-4cfe-bd83-8bda818416ef",
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "great catch! done.\r\n\r\nit's even more extreme in my machine:\r\n\r\ntestDebugLogs=true:\r\n\r\n```\r\nok      k8s.io/apiserver/pkg/util/flowcontrol   14.088s                                                                                                                                                                                        \r\n```\r\n\r\ntestDebugLogs=false:\r\n\r\n```\r\nok      k8s.io/apiserver/pkg/util/flowcontrol   2.155s\r\n```",
        "createdAt" : "2021-02-02T16:12:44Z",
        "updatedAt" : "2021-02-02T16:20:22Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      },
      {
        "id" : "c5821399-3b09-4ea0-856b-87e73a806d7d",
        "parentId" : "0dd2b9aa-5cc1-4cfe-bd83-8bda818416ef",
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "```\r\n$ go test -race . -count=1 -v | wc -c\r\n49820\r\n```",
        "createdAt" : "2021-02-02T16:20:04Z",
        "updatedAt" : "2021-02-02T16:20:22Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      },
      {
        "id" : "6b52daf3-fda4-46b4-9bd6-c2878372d616",
        "parentId" : "0dd2b9aa-5cc1-4cfe-bd83-8bda818416ef",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "good start, looks like there are frequently logged lines in match_test as well:\r\n\r\n```\r\ngo test -v k8s.io/apiserver/pkg/util/flowcontrol -race  -count=1 | egrep -o '^.+.go:\\d+:' | sort | uniq -c\r\n 604     match_test.go:49:\r\n 300     match_test.go:69:\r\n```",
        "createdAt" : "2021-02-02T16:21:39Z",
        "updatedAt" : "2021-02-02T16:21:39Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "f1a22778-adc7-48e7-b415-e338bcb7fe02",
        "parentId" : "0dd2b9aa-5cc1-4cfe-bd83-8bda818416ef",
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "I force pushed just before your comment :)",
        "createdAt" : "2021-02-02T16:29:04Z",
        "updatedAt" : "2021-02-02T16:29:05Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1f3e90969d38f5b8410b67f0640d5df0d098e6b",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +239,243 @@\trngOuter := rand.New(rand.NewSource(1234567890123456789))\n\tfor i := 1; i <= 10; i++ {\n\t\trng := rand.New(rand.NewSource(int64(rngOuter.Uint64())))\n\t\tt.Run(fmt.Sprintf(\"trial%d:\", i), func(t *testing.T) {\n\t\t\tclientset := clientsetfake.NewSimpleClientset()"
  },
  {
    "id" : "1b50d79b-710d-4e53-8f64-c47f6a863fcb",
    "prId" : 97323,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97323#pullrequestreview-555656999",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ad084cc-2f1d-4b24-8dc4-8addee321968",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "nit. I think that you can pass the `stopCh`  to `informerFactory.WaitForCacheSync()` and avoid creating the context,",
        "createdAt" : "2020-12-18T16:39:08Z",
        "updatedAt" : "2020-12-18T16:39:09Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "777fa707-41d8-4d01-a16f-ce0f3c6f1e73",
        "parentId" : "6ad084cc-2f1d-4b24-8dc4-8addee321968",
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "if the cache never syncs, for example due to a bad test setup -  let's say i forgot to start the informer, or any other issues with the cache then I expect the test to fail with the following error:\r\n```\r\nt.Fatalf(\"WaitForCacheSync did not successfully complete, resources=%#v\", names)\r\n```\r\nas opposed to `go test` timing out the test due to a deadlock - `informerFactory.WaitForCacheSync` waits on `stopCh` to be closed which never happens.",
        "createdAt" : "2020-12-18T16:54:25Z",
        "updatedAt" : "2020-12-18T16:54:25Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      },
      {
        "id" : "c64f44e7-d40a-4283-8c60-d503d53f0021",
        "parentId" : "6ad084cc-2f1d-4b24-8dc4-8addee321968",
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "thanks for reviewing the PR @aojea",
        "createdAt" : "2020-12-18T16:58:20Z",
        "updatedAt" : "2020-12-18T16:58:21Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      }
    ],
    "commit" : "7114319b3e66e331250c116ac926f1a57352072f",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +369,373 @@\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\tstatus := informerFactory.WaitForCacheSync(ctx.Done())\n\tif names := unsynced(status); len(names) > 0 {\n\t\tt.Fatalf(\"WaitForCacheSync did not successfully complete, resources=%#v\", names)"
  },
  {
    "id" : "af7bdeb6-54af-4dcd-acaa-ffdae5331e69",
    "prId" : 88714,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88714#pullrequestreview-369229497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "587924a1-231f-401c-be9e-8569433e9457",
        "parentId" : null,
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "I find `ctr.cqs.cts.t.Logf` incredibly hard to parse. ",
        "createdAt" : "2020-03-04T22:39:20Z",
        "updatedAt" : "2020-03-05T20:18:05Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      },
      {
        "id" : "ad3bd9e5-039b-4124-a7be-e27f7e3272e2",
        "parentId" : "587924a1-231f-401c-be9e-8569433e9457",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "My personal rule is \"no abbreviations in member variables\" but also more importantly, if you change the name, do it in a separate PR :)",
        "createdAt" : "2020-03-05T00:53:02Z",
        "updatedAt" : "2020-03-05T20:18:05Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7b098ac6c276d65a79db6cfeb04f5f0f86eb315",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +120,124 @@\tdefer cqs.cts.lock.Unlock()\n\tcqs.countActive++\n\tcqs.cts.t.Logf(\"Queued %q %#+v %#+v for %p QS=%s, countActive:=%d\", fsName, descr1, descr2, cqs, cqs.qc.Name, cqs.countActive)\n\treturn &ctlTestRequest{cqs, cqs.qc.Name, descr1, descr2}, false\n}"
  },
  {
    "id" : "304359f9-10e9-4b42-a58f-15f4bca20840",
    "prId" : 87754,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87754#pullrequestreview-354192883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98f79d63-147f-4485-a1d6-31ea05e1775c",
        "parentId" : null,
        "authorId" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "body" : "I'm really not a fan of randomized tests like this. Yes, they may be more compact than a sufficiently large set of explicit test cases, but they have the major disadvantage that you need to write code to construct the expected output of the system under test, which means that rather than comparing the effect of that system with a known expectation, they are comparing the outputs of two rather complicated (and therefore more or less equally likely to develop bugs) programs.",
        "createdAt" : "2020-02-04T19:35:49Z",
        "updatedAt" : "2020-02-11T03:56:19Z",
        "lastEditedBy" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "tags" : [
        ]
      },
      {
        "id" : "5d495f99-3d29-42cc-b87a-1224405cad0e",
        "parentId" : "98f79d63-147f-4485-a1d6-31ea05e1775c",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I have no problem with adding some explicit test cases in another PR.  I think we should also have randomized testing.  While the code to generate the expectations is non-trivial, it is independent of the implementation and so provides a good check of the implementation.  Bugs in the test generation get found quickly at development time.",
        "createdAt" : "2020-02-06T04:20:30Z",
        "updatedAt" : "2020-02-11T03:56:19Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "73614ddd4e42728a36c7ac6b7b20f27c8032cafb",
    "line" : 210,
    "diffHunk" : "@@ -1,1 +208,212 @@\nfunc TestConfigConsumer(t *testing.T) {\n\trngOuter := rand.New(rand.NewSource(1234567890123456789))\n\tfor i := 1; i <= 20; i++ {\n\t\trng := rand.New(rand.NewSource(int64(rngOuter.Uint64())))"
  },
  {
    "id" : "f8a92bf1-8152-4dd8-963f-3ac03f233096",
    "prId" : 87754,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87754#pullrequestreview-354196271",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e16ce0e-0b99-4eec-a477-82e28d37b9b2",
        "parentId" : null,
        "authorId" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "body" : "if I'm reading things right, this might never get called (if the request is rejected due to overlong queue)?",
        "createdAt" : "2020-02-05T22:32:23Z",
        "updatedAt" : "2020-02-11T03:56:19Z",
        "lastEditedBy" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "tags" : [
        ]
      },
      {
        "id" : "5b062cfe-ce18-4d86-8ed8-1e6477cbc3c7",
        "parentId" : "4e16ce0e-0b99-4eec-a477-82e28d37b9b2",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "That would be true if the QueueSet implementation ever rejected requests.  In this case we are using the special one for these tests, which does not reject requests.",
        "createdAt" : "2020-02-06T04:37:00Z",
        "updatedAt" : "2020-02-11T03:56:19Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "73614ddd4e42728a36c7ac6b7b20f27c8032cafb",
    "line" : 330,
    "diffHunk" : "@@ -1,1 +328,332 @@\t\t\t\t\t\t}\n\t\t\t\t\t}, func() {\n\t\t\t\t\t\tstartWG.Done()\n\t\t\t\t\t\t_ = <-finishCh\n\t\t\t\t\t})"
  }
]