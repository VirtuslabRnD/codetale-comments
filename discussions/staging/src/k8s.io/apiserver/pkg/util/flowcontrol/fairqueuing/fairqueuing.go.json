[
  {
    "id" : "a793e5b4-2361-4736-b841-69c716458fd6",
    "prId" : 81621,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81621#pullrequestreview-277035298",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e12640ec-d022-42b9-9679-6fe1dc78824d",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "plants prometheus metrics instead?",
        "createdAt" : "2019-08-20T05:16:37Z",
        "updatedAt" : "2019-08-20T05:16:37Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "4f18c07d-7d1d-4b85-8b8e-368a02b72bc4",
        "parentId" : "e12640ec-d022-42b9-9679-6fe1dc78824d",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Huh?  This does nothing with Prometheus.",
        "createdAt" : "2019-08-20T06:27:34Z",
        "updatedAt" : "2019-08-20T06:27:35Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "b0833bda-a418-4521-9f86-8730872be165",
        "parentId" : "e12640ec-d022-42b9-9679-6fe1dc78824d",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The reason for a queue set to have an optional wait group is to support testing like is done in https://github.com/kubernetes/kubernetes/blob/feature-rate-limiting/staging/src/k8s.io/apiserver/pkg/util/flowcontrol/fairqueuing/fq_test.go .  The test function needs to know when all the asynchronous work has finished before advancing the fake clock.",
        "createdAt" : "2019-08-20T06:37:39Z",
        "updatedAt" : "2019-08-20T06:37:39Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "7cfa1457-a3c0-4bd4-b85a-830f769f3bf9",
        "parentId" : "e12640ec-d022-42b9-9679-6fe1dc78824d",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "oh misread.. ",
        "createdAt" : "2019-08-20T09:18:31Z",
        "updatedAt" : "2019-08-20T09:18:31Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "8678ca2c3ca04585fd6f3ffe4ef085b75a356cce",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +60,64 @@type queueSetImpl struct {\n\tlock                 sync.Mutex\n\twg                   OptionalWaitGroup\n\tqueues               []*Queue\n\tclk                  clock.PassiveClock"
  },
  {
    "id" : "e54e00bc-798a-4164-a062-04100f50a647",
    "prId" : 80786,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80786#pullrequestreview-270862963",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8638f3ba-c2bf-4b76-80d4-c282d5ea3918",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "This reads better if the comma comes after the comment describing the returned int.",
        "createdAt" : "2019-08-02T06:38:43Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "5ba7d97d-2b48-4278-9f82-8202732e168c",
        "parentId" : "8638f3ba-c2bf-4b76-80d4-c282d5ea3918",
        "authorId" : "65274c24-758d-49d6-96bf-a6c0fd7c510b",
        "body" : "Not sure if I'm understanding correctly but in attempting to move the comment to before the comma, gofmt automatically saves it with the comment after.  I'm going to keep this the same for now",
        "createdAt" : "2019-08-04T20:12:57Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "65274c24-758d-49d6-96bf-a6c0fd7c510b",
        "tags" : [
        ]
      },
      {
        "id" : "98054172-c520-4c04-9763-d0af7b1b5e95",
        "parentId" : "8638f3ba-c2bf-4b76-80d4-c282d5ea3918",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I bit the bullet and made a bigger change.  See https://github.com/kubernetes/enhancements/pull/1196 .  Does that make more sense?",
        "createdAt" : "2019-08-05T16:04:26Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9b6e86ea6b0458102245831d83159f0b50891ef",
    "line" : 229,
    "diffHunk" : "@@ -1,1 +227,231 @@func shuffleDealAndPick(v, nq uint64,\n\tlengthOfQueue func(int) int,\n\tmr func(int /*in [0, nq-1]*/) int, /*in [0, numQueues-1] and excluding previously determined members of I*/\n\tnRem, minLen, bestIdx int) int {\n\tif nRem < 1 {"
  },
  {
    "id" : "8cde2864-2f63-4559-95f2-70d9eee03707",
    "prId" : 80786,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80786#pullrequestreview-270519800",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "772776a8-987f-48b9-8a2c-1e6aeadd605a",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "This func should also take a `lengthOfQueue` func as a parameter, that will make it testable.",
        "createdAt" : "2019-08-02T06:39:36Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "273c1c98-8161-4ee7-961e-ce0a9010de6a",
        "parentId" : "772776a8-987f-48b9-8a2c-1e6aeadd605a",
        "authorId" : "65274c24-758d-49d6-96bf-a6c0fd7c510b",
        "body" : "EDITED: I have NOT YET made this change. Wanted to additionally note that I think the plan would be for this function to be swapped out with a similar function (w/ tests) in @mars1024 & @yue9944882 hashing library.",
        "createdAt" : "2019-08-02T18:56:58Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "65274c24-758d-49d6-96bf-a6c0fd7c510b",
        "tags" : [
        ]
      },
      {
        "id" : "dafe6e75-4617-44b3-b4dd-b65097af7c58",
        "parentId" : "772776a8-987f-48b9-8a2c-1e6aeadd605a",
        "authorId" : "65274c24-758d-49d6-96bf-a6c0fd7c510b",
        "body" : "EDIT: I did not make these changes yet, sorry for the confusion.  I will update this when I have",
        "createdAt" : "2019-08-02T20:52:24Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "65274c24-758d-49d6-96bf-a6c0fd7c510b",
        "tags" : [
        ]
      },
      {
        "id" : "1471646c-585f-44f9-89d1-b51928f2a874",
        "parentId" : "772776a8-987f-48b9-8a2c-1e6aeadd605a",
        "authorId" : "65274c24-758d-49d6-96bf-a6c0fd7c510b",
        "body" : "Updated. Using same structure as:\r\nhttps://github.com/kubernetes/enhancements/pull/1197#pullrequestreview-270519451",
        "createdAt" : "2019-08-04T23:31:58Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "65274c24-758d-49d6-96bf-a6c0fd7c510b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9b6e86ea6b0458102245831d83159f0b50891ef",
    "line" : 230,
    "diffHunk" : "@@ -1,1 +228,232 @@\tlengthOfQueue func(int) int,\n\tmr func(int /*in [0, nq-1]*/) int, /*in [0, numQueues-1] and excluding previously determined members of I*/\n\tnRem, minLen, bestIdx int) int {\n\tif nRem < 1 {\n\t\treturn bestIdx"
  },
  {
    "id" : "a751c8f5-98e9-46d5-9026-a2dbe195e43b",
    "prId" : 80786,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80786#pullrequestreview-270512549",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b257f9d3-9cbf-46ac-80d3-2c801298e4fe",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Doesn't the `Index` field of the queues in `s[index+1:]` need to be updated?",
        "createdAt" : "2019-08-03T02:54:27Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "366b0524-7510-4786-9ff1-24bff8ddeeff",
        "parentId" : "b257f9d3-9cbf-46ac-80d3-2c801298e4fe",
        "authorId" : "65274c24-758d-49d6-96bf-a6c0fd7c510b",
        "body" : "Good catch, I accidentally left out this change update.  It is fixed now, thanks.",
        "createdAt" : "2019-08-04T20:10:09Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "65274c24-758d-49d6-96bf-a6c0fd7c510b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9b6e86ea6b0458102245831d83159f0b50891ef",
    "line" : 354,
    "diffHunk" : "@@ -1,1 +352,356 @@// removeIndex uses reslicing to remove an index from a slice\nfunc removeIndex(s []*Queue, index int) []*Queue {\n\treturn append(s[:index], s[index+1:]...)\n}\n"
  },
  {
    "id" : "a535374b-f144-4099-be66-54c8ab7beda0",
    "prId" : 80786,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80786#pullrequestreview-276086836",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d81e5012-7485-4bbb-ab34-179f4a92ccec",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "At this point, if the `fqs` is quiescing, has zero requests executing, and has zero requests enqueued then a call to the EmptyHandler should be forked.",
        "createdAt" : "2019-08-03T02:56:38Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "818fec44-6aa2-48b9-bce4-503081dc461d",
        "parentId" : "d81e5012-7485-4bbb-ab34-179f4a92ccec",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Ah, the WaitGroup should be incremented here.\r\nAnd the HandleEmpty implementation should decrement the WaitGroup (to which it does not yet have access, that will need to be plumbed).",
        "createdAt" : "2019-08-16T18:14:32Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9b6e86ea6b0458102245831d83159f0b50891ef",
    "line" : 397,
    "diffHunk" : "@@ -1,1 +395,399 @@\t\t\tgo qs.emptyHandler.HandleEmpty()\n\t\t}\n\t}\n}\n"
  },
  {
    "id" : "a4c6a45b-a4d1-4dd7-9b4a-6a1eaa32910b",
    "prId" : 80786,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80786#pullrequestreview-273931727",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11f94630-b5c4-463b-b9db-f51b6017d455",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "every request will be trapping in a loop in this method. considering larger scale cluster w/ 10k+ qps throughput, there will be unnecessary performance loss? how about running this in background as a daemon scheduler? @MikeSpreitzer for thoughts?",
        "createdAt" : "2019-08-07T13:50:20Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "3fee039a-937a-40d7-be6c-18f1cee860f6",
        "parentId" : "11f94630-b5c4-463b-b9db-f51b6017d455",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "@yue9944882 can you please elaborate on what you mean by \"every request will be trapping in a loop in this method\"?  As far as I can see, this call will spend O(N) CPU time where N is the number of requests that get dequeued.  That's as good as we can expect, and this time has to be spent somewhere, and this is the most direct place to put it.",
        "createdAt" : "2019-08-07T15:51:59Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "501b5f21-50b2-4e86-8cdd-3e93961a4e49",
        "parentId" : "11f94630-b5c4-463b-b9db-f51b6017d455",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "> @yue9944882 can you please elaborate on what you mean by \"every request will be trapping in a loop in this method\"?\r\n\r\ni mean we can expect the queue-set keeps continuously filling in requests, the queue-set will probably keep neither empty nor exceeding the concurrency-limit. ",
        "createdAt" : "2019-08-07T16:06:52Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "e6e3fa15-7260-44dc-8e04-387bd9313826",
        "parentId" : "11f94630-b5c4-463b-b9db-f51b6017d455",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "`qs.DequeueWithChannelAsMuchAsPossible()` is intended to do only the work that can be done immediately without waiting for any more arrivals or completions.",
        "createdAt" : "2019-08-07T16:16:34Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "503645ca-6b78-4c3c-8d10-f0e4153af3ee",
        "parentId" : "11f94630-b5c4-463b-b9db-f51b6017d455",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "There should be two calls to DequeueWithChannelAsMuchAsPossible in the source code, one for every arrival and one for every completion.  Thus, the average number of requests dequeued per call to DequeueWithChannelAsMuchAsPossible will be no more than 0.5.",
        "createdAt" : "2019-08-07T17:57:17Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "5159c252-2e53-4bc2-a268-275af8d71d54",
        "parentId" : "11f94630-b5c4-463b-b9db-f51b6017d455",
        "authorId" : "65274c24-758d-49d6-96bf-a6c0fd7c510b",
        "body" : "updated",
        "createdAt" : "2019-08-12T20:28:32Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "65274c24-758d-49d6-96bf-a6c0fd7c510b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9b6e86ea6b0458102245831d83159f0b50891ef",
    "line" : 603,
    "diffHunk" : "@@ -1,1 +601,605 @@\t// queue, increment the count of the number executing, and send `{true,\n\t// handleCompletion(that dequeued request)}` to the request's channel.\n\tqs.DequeueWithChannelAsMuchAsPossible()\n\t// ------------------------------------------------------------------------\n\tqs.lock.Unlock()"
  },
  {
    "id" : "4a76eb03-8f5e-47eb-b5f7-f46807a22004",
    "prId" : 80786,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80786#pullrequestreview-276086836",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82c0742b-d621-440b-8375-6813889c4b74",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "If this function took an initial index parameter then you would not need another function to add queues.",
        "createdAt" : "2019-08-16T17:57:14Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9b6e86ea6b0458102245831d83159f0b50891ef",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +79,83 @@\n// initQueues is a helper method for initializing an array of n queues\nfunc initQueues(numQueues int) []*Queue {\n\tfqqueues := make([]*Queue, numQueues, numQueues)\n\tfor i := 0; i < numQueues; i++ {"
  },
  {
    "id" : "a41e8fdb-3719-4d22-88da-33d904201333",
    "prId" : 80786,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80786#pullrequestreview-276086836",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be6a23aa-2471-4490-ba82-412b8dba89a5",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "This could cost O(1) instead of O(numQueues) if we incrementally maintain this quantity in `qs`.",
        "createdAt" : "2019-08-16T18:05:50Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9b6e86ea6b0458102245831d83159f0b50891ef",
    "line" : 221,
    "diffHunk" : "@@ -1,1 +219,223 @@func (qs *queueSetImpl) GetRequestsExecuting() int {\n\ttotal := 0\n\tfor _, queue := range qs.queues {\n\t\ttotal += queue.RequestsExecuting\n\t}"
  },
  {
    "id" : "2be0f2ec-00aa-474d-bfa2-364a365ff4d7",
    "prId" : 80786,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80786#pullrequestreview-276086836",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1be3fd8c-81ed-46d5-a295-4cfb7f651af0",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "It is a queue _set_ that quiesces, and the logic here handles more than that.",
        "createdAt" : "2019-08-16T18:13:14Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9b6e86ea6b0458102245831d83159f0b50891ef",
    "line" : 383,
    "diffHunk" : "@@ -1,1 +381,385 @@\tp.Queue.RequestsExecuting--\n\n\t// Logic to remove quiesced queues\n\t// >= as QueueIdx=25 is out of bounds for desiredNumQueues=25 [0...24]\n\tif p.Queue.Index >= qs.desiredNumQueues &&"
  },
  {
    "id" : "e12b2c36-e532-4351-a39b-7a6755f0b2ba",
    "prId" : 80786,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80786#pullrequestreview-276288663",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d448843-de5c-4fe3-808f-518f6f17d14f",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Also need to save the EmptyHandler in `qs`.",
        "createdAt" : "2019-08-16T18:16:19Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "547b3022-d159-4d1e-8845-7614280df490",
        "parentId" : "1d448843-de5c-4fe3-808f-518f6f17d14f",
        "authorId" : "65274c24-758d-49d6-96bf-a6c0fd7c510b",
        "body" : "this was added",
        "createdAt" : "2019-08-18T17:38:03Z",
        "updatedAt" : "2019-08-18T17:38:03Z",
        "lastEditedBy" : "65274c24-758d-49d6-96bf-a6c0fd7c510b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9b6e86ea6b0458102245831d83159f0b50891ef",
    "line" : 546,
    "diffHunk" : "@@ -1,1 +544,548 @@\t\t}()\n\t}\n\tqs.quiescent = true\n}\n"
  },
  {
    "id" : "0b45f13d-eb6f-42c0-9a02-e9b83ee142b9",
    "prId" : 80786,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80786#pullrequestreview-276173500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ae098ab-42c5-429a-bfc1-f8168a2b84f3",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Since there is no blanket `defer qs.lock.Unlock()`, you have to be sure to unlock before every return.",
        "createdAt" : "2019-08-16T18:16:50Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "183c02d4-235a-4c1c-b4d2-68559ad58007",
        "parentId" : "6ae098ab-42c5-429a-bfc1-f8168a2b84f3",
        "authorId" : "65274c24-758d-49d6-96bf-a6c0fd7c510b",
        "body" : "updated",
        "createdAt" : "2019-08-16T21:16:16Z",
        "updatedAt" : "2019-08-17T01:07:34Z",
        "lastEditedBy" : "65274c24-758d-49d6-96bf-a6c0fd7c510b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9b6e86ea6b0458102245831d83159f0b50891ef",
    "line" : 568,
    "diffHunk" : "@@ -1,1 +566,570 @@\t//   currently able to collapse to 1 impl layer and 2 locks...\n\n\tqs.LockAndSyncTime()\n\t// TODO(aaron-prindle) verify and test quiescent\n\t// A call to Wait while the system is quiescent will be rebuffed by"
  }
]