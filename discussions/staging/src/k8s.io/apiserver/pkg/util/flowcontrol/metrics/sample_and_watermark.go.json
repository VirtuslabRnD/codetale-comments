[
  {
    "id" : "0f5982f2-9fa2-4eca-9ae4-07625e68aa56",
    "prId" : 97860,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97860#pullrequestreview-564532269",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfb3f1cf-300e-42ae-968d-262e7fdb68ba",
        "parentId" : null,
        "authorId" : "a3951fe4-f857-4443-99b0-05ac89d3f2e9",
        "body" : "At this point it seems like there's not much point in keeping it as an anonymous function, might as well just move that whole block out to `func (saw *sampleAndWaterMarkHistograms) validateQuantization() (time.Time, int64, sampleAndWaterMarkAccumulator, bool)` (name it something better) unless the intent is to revert all of this once the golang bug is fixed.",
        "createdAt" : "2021-01-08T19:14:58Z",
        "updatedAt" : "2021-01-08T19:15:54Z",
        "lastEditedBy" : "a3951fe4-f857-4443-99b0-05ac89d3f2e9",
        "tags" : [
        ]
      },
      {
        "id" : "7819dcc8-5fa0-46ec-a9aa-9dd140087f86",
        "parentId" : "bfb3f1cf-300e-42ae-968d-262e7fdb68ba",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "the point of the inner func is to unlock via a `defer` as soon as our calculations are done before we log or call out to record metrics. Since the function has side effects, I'd prefer not to distribute it among several split up functions that are only expected to be called in a specific order",
        "createdAt" : "2021-01-08T19:19:32Z",
        "updatedAt" : "2021-01-08T19:20:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2995e1c0-82f4-42db-a369-83de1f896e40",
        "parentId" : "bfb3f1cf-300e-42ae-968d-262e7fdb68ba",
        "authorId" : "a3951fe4-f857-4443-99b0-05ac89d3f2e9",
        "body" : "The side effects argument makes sense I suppose. I get that it just exists to handle the unlock cleanly, but to me the code picks up a bit of an odor when anonymous functions grow return values and such. I'm just here as peanut gallery though, feel free to ignore my feedback.",
        "createdAt" : "2021-01-08T19:25:37Z",
        "updatedAt" : "2021-01-08T19:25:38Z",
        "lastEditedBy" : "a3951fe4-f857-4443-99b0-05ac89d3f2e9",
        "tags" : [
        ]
      },
      {
        "id" : "3553bc20-22d2-4898-a7eb-0feccb67afcc",
        "parentId" : "bfb3f1cf-300e-42ae-968d-262e7fdb68ba",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I agree with @liggitt , the inner function should never be invoked in any other context and so I would prefer to not expose it.",
        "createdAt" : "2021-01-08T19:42:21Z",
        "updatedAt" : "2021-01-08T19:42:21Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "611184aa59d0cd40466bc3bc4b40a3712a038171",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +161,165 @@\nfunc (saw *sampleAndWaterMarkHistograms) innerSet(updateXOrX1 func()) {\n\twhen, whenInt, acc, wellOrdered := func() (time.Time, int64, sampleAndWaterMarkAccumulator, bool) {\n\t\tsaw.Lock()\n\t\tdefer saw.Unlock()"
  }
]