[
  {
    "id" : "ca85d038-c331-4b4c-acc4-072447cdbcc5",
    "prId" : 103481,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103481#pullrequestreview-701044191",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65895cd5-b066-4a65-bb79-64337b8c22c6",
        "parentId" : null,
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "`NewWidthEstimator` would need two interfaces to be initialized:\r\n- `utilflowcontrol.WatchTracker` and \r\n- `StorageObjectCountTracker`\r\n\r\nif we add a field `WatchTracker` to `server.Config` then we can feed both interfaces to `NewWidthEstimator`",
        "createdAt" : "2021-07-07T13:52:14Z",
        "updatedAt" : "2021-07-07T13:53:40Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      },
      {
        "id" : "7e702b48-9f8e-436c-ac64-42287f771825",
        "parentId" : "65895cd5-b066-4a65-bb79-64337b8c22c6",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "You can take a look at https://github.com/kubernetes/kubernetes/pull/103539/commits/1ddb305481a8f2ab74883494f7448e2906bb5641 what I've done",
        "createdAt" : "2021-07-07T13:59:34Z",
        "updatedAt" : "2021-07-07T13:59:35Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "cea1dcfeed2fc4e8ab89cd43e5a0e402251c8df5",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +148,152 @@\n\t// watchTracker implements the necessary WatchTracker interface.\n\tWatchTracker\n}\n"
  },
  {
    "id" : "0d00f6c3-f42f-4898-9d71-2a53964a478b",
    "prId" : 97986,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97986#pullrequestreview-566901124",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d9f878a-5a5f-462b-ae63-9e94811cc5cb",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "See https://github.com/kubernetes/kubernetes/pull/97977#discussion_r556268442",
        "createdAt" : "2021-01-13T05:23:57Z",
        "updatedAt" : "2021-01-13T05:24:16Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "53f0bc9b332ff713dcf7d1737922f6022bff5229",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +224,228 @@\n// used from the unit tests only.\nfunc (cfgCtl *configController) getPriorityLevelState(plName string) *priorityLevelState {\n\tcfgCtl.lock.Lock()\n\tdefer cfgCtl.lock.Unlock()"
  },
  {
    "id" : "7d7e6452-b398-4bb0-8a73-b2dfaf2fcf87",
    "prId" : 97977,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97977#pullrequestreview-567392162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7cab7cf-1c99-4000-8507-2976c31d3625",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Eek, I just noticed, returning this pointer is a concurrency bug: this makes it possible for the caller to read the priorityLevelState without proper synchronization.  Fortunately, the actual caller only cares about whether the pointer is nil or not.  So what we really should have here is ` func (cfgCtlr *configController) hasPriorityLevelState(plName string) bool`.",
        "createdAt" : "2021-01-13T05:19:02Z",
        "updatedAt" : "2021-01-13T05:19:52Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "d4b7f11d-2e2c-41e3-ac73-5e74c1f5fe71",
        "parentId" : "f7cab7cf-1c99-4000-8507-2976c31d3625",
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "@MikeSpreitzer yes, we should not expose the internal states directly to the caller. This is used by the test only and is used to check it exists. \r\nI will open a PR with the suggested change on master.",
        "createdAt" : "2021-01-13T15:19:11Z",
        "updatedAt" : "2021-01-13T15:19:11Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      },
      {
        "id" : "fac95e50-557d-432b-bbd7-9e4558fa9544",
        "parentId" : "f7cab7cf-1c99-4000-8507-2976c31d3625",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "it is also worth noting that returning a boolean after releasing the lock means that, in general usage, the boolean may be inaccurate by the time the caller examines it.  Perhaps that should go in a comment on the methond.  Perhaps the method should move into the test file.  In the use case in the test, that fact that the boolean is stale in principle is not a problem in that usage.",
        "createdAt" : "2021-01-13T15:32:00Z",
        "updatedAt" : "2021-01-13T15:32:00Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "a0961429-3292-4318-ac59-0e5ded1063a0",
        "parentId" : "f7cab7cf-1c99-4000-8507-2976c31d3625",
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "@MikeSpreitzer  https://github.com/kubernetes/kubernetes/pull/98023",
        "createdAt" : "2021-01-13T16:19:03Z",
        "updatedAt" : "2021-01-13T16:19:03Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      }
    ],
    "commit" : "b84cfe3d8a3fa70512e30d4323a9bfc5aca3900b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +247,251 @@\n// used from the unit tests only.\nfunc (cfgCtlr *configController) getPriorityLevelState(plName string) *priorityLevelState {\n\tcfgCtlr.lock.Lock()\n\tdefer cfgCtlr.lock.Unlock()"
  },
  {
    "id" : "da6f2960-b42b-4e92-8cd1-cebc579f4329",
    "prId" : 97370,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97370#pullrequestreview-555587933",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b4d2b54-9526-4904-8b67-2a0a07b73621",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "`utilerrors.NewAggregate(errs)` can deal with empty error array, so L356-358 can be removed i believe",
        "createdAt" : "2020-12-18T08:49:03Z",
        "updatedAt" : "2020-12-20T02:18:31Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "2f9ac25c-6224-4122-82b9-636c6e0e8522",
        "parentId" : "3b4d2b54-9526-4904-8b67-2a0a07b73621",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Yes, that change is in #97036 ",
        "createdAt" : "2020-12-18T15:29:05Z",
        "updatedAt" : "2020-12-20T02:18:31Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef1e2039b5fc7f955ec4f9c636a64aa403cba2ab",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +372,376 @@\t\treturn nil\n\t}\n\treturn utilerrors.NewAggregate(errs)\n}\n"
  },
  {
    "id" : "51a2d2b5-f6e6-4264-8e63-56458c75e900",
    "prId" : 97370,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97370#pullrequestreview-555586882",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e35766cc-1b36-434c-8c71-0c30993e6d91",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "i know it's out of scope of this pull, but shouldn't we replace the usage of SMP to SSA everywhere? cc @lavalamp ",
        "createdAt" : "2020-12-18T08:50:14Z",
        "updatedAt" : "2020-12-20T02:18:31Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "da5a14a7-2998-4c59-b06b-fc296c7bf2ea",
        "parentId" : "e35766cc-1b36-434c-8c71-0c30993e6d91",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Yes, out of scope.",
        "createdAt" : "2020-12-18T15:27:48Z",
        "updatedAt" : "2020-12-20T02:18:31Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef1e2039b5fc7f955ec4f9c636a64aa403cba2ab",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +357,361 @@\t\tpatchBytes := []byte(fmt.Sprintf(`{\"status\": {\"conditions\": [ %s ] } }`, string(enc)))\n\t\tpatchOptions := metav1.PatchOptions{FieldManager: ConfigConsumerAsFieldManager}\n\t\t_, err = fsIfc.Patch(context.TODO(), fsu.flowSchema.Name, apitypes.StrategicMergePatchType, patchBytes, patchOptions, \"status\")\n\t\tif err == nil {\n\t\t\tcontinue"
  },
  {
    "id" : "b2910349-61d9-4826-9d51-58c7eeb6297c",
    "prId" : 91177,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91177#pullrequestreview-446069701",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0289b894-bea0-4198-8e01-721688e62ca0",
        "parentId" : null,
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "why `imaginePL`? why not `addPriorityLevel`? ",
        "createdAt" : "2020-07-07T17:27:54Z",
        "updatedAt" : "2020-07-15T19:48:22Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      },
      {
        "id" : "bc88571e-298d-401e-bb88-b8f13228b33e",
        "parentId" : "0289b894-bea0-4198-8e01-721688e62ca0",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Expanded the comment on that function, hopefully making the answer clear.",
        "createdAt" : "2020-07-10T01:36:56Z",
        "updatedAt" : "2020-07-15T19:48:22Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "57ecea22296797a93b0157169db0ff2e477f58d0",
    "line" : 329,
    "diffHunk" : "@@ -1,1 +603,607 @@// imaginePL adds a priority level based on one of the mandatory ones\n// that does not actually exist (right now) as a real API object.\nfunc (meal *cfgMeal) imaginePL(proto *fctypesv1a1.PriorityLevelConfiguration, requestWaitLimit time.Duration) {\n\tklog.V(3).Infof(\"No %s PriorityLevelConfiguration found, imagining one\", proto.Name)\n\tobsPair := meal.cfgCtlr.obsPairGenerator.Generate(1, 1, []string{proto.Name})"
  },
  {
    "id" : "0d53b2a4-d2e8-49f9-84e7-c4b583a65b48",
    "prId" : 87754,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87754#pullrequestreview-354231304",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a83e59df-26cb-4be0-bdd4-9a5391ddcda7",
        "parentId" : null,
        "authorId" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "body" : "Perhaps add a comment here that because the mandatory PLs are also immutable, we needn't worry that the spec of the held-over priority level differs from the one we would imagine in its place.",
        "createdAt" : "2020-02-04T20:40:26Z",
        "updatedAt" : "2020-02-11T03:56:19Z",
        "lastEditedBy" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "tags" : [
        ]
      },
      {
        "id" : "b41a8822-7d77-471f-b217-d39a2a2efb88",
        "parentId" : "a83e59df-26cb-4be0-bdd4-9a5391ddcda7",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Good point.  That is an important part of how this works.",
        "createdAt" : "2020-02-06T03:50:58Z",
        "updatedAt" : "2020-02-11T03:56:19Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "7461d550-56de-40ed-b786-920c9bf4e26e",
        "parentId" : "a83e59df-26cb-4be0-bdd4-9a5391ddcda7",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "done",
        "createdAt" : "2020-02-06T06:53:47Z",
        "updatedAt" : "2020-02-11T03:56:19Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "73614ddd4e42728a36c7ac6b7b20f27c8032cafb",
    "line" : 461,
    "diffHunk" : "@@ -1,1 +459,463 @@\t\t\tcontinue\n\t\t}\n\t\tif plName == fctypesv1a1.PriorityLevelConfigurationNameExempt && !meal.haveExemptPL || plName == fctypesv1a1.PriorityLevelConfigurationNameCatchAll && !meal.haveCatchAllPL {\n\t\t\t// BTW, we know the Spec has not changed because the\n\t\t\t// mandatory objects have immutable Specs"
  },
  {
    "id" : "36b59971-ea84-4fef-b2b3-70a6b7b9501e",
    "prId" : 87754,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87754#pullrequestreview-354231381",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4be554a-f800-4a33-8bf1-90bd3bfcc201",
        "parentId" : null,
        "authorId" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "body" : "The behavior resulting from this line (dividing concurrency shares between existing and deleted priority levels in proportion to their ACS), while I agree that it is sensible, is potentially somewhat surprising, though it's probably unlikely ever to be noticed.\r\n\r\n(Consider that I make a sweeping change to my flow control configuration, replacing *all* the priority levels with new ones, and simultaneously changing the scale of my assured concurrency shares by several orders of magnitude, say from small multiples of 10000 to small multiples of 10. Any retained priority levels will then get the lion's share of the available concurrency until their queues drain, which could be a meaningful problem if I allowed them to get very long queues in their old configuration.)\r\n\r\nThere's really no other reasonable way to handle this, since there's no guarantee that the old PLs' deletion will get picked up before (or even in any time bound after) the new PLs' construction anyway, but it probably merits a comment.",
        "createdAt" : "2020-02-04T21:48:41Z",
        "updatedAt" : "2020-02-11T03:56:19Z",
        "lastEditedBy" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "tags" : [
        ]
      },
      {
        "id" : "0755388b-5151-44ee-ac1d-cb9e94a94762",
        "parentId" : "d4be554a-f800-4a33-8bf1-90bd3bfcc201",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Not just a comment, it merits being clearly described in the documentation.  The user-facing doc is just starting to be written.  The KEP has an outdated statement of behavior here, that needs to be updated.  But yes, I will add a brief statement outlining the idea here.",
        "createdAt" : "2020-02-06T03:57:19Z",
        "updatedAt" : "2020-02-11T03:56:19Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "9801779a-e14b-49f9-a469-c711c6f6be69",
        "parentId" : "d4be554a-f800-4a33-8bf1-90bd3bfcc201",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "comment added",
        "createdAt" : "2020-02-06T06:54:04Z",
        "updatedAt" : "2020-02-11T03:56:19Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "73614ddd4e42728a36c7ac6b7b20f27c8032cafb",
    "line" : 491,
    "diffHunk" : "@@ -1,1 +489,493 @@\t\t\t// allocation determined by all the share values in the\n\t\t\t// regular way.\n\t\t\tmeal.shareSum += float64(plState.pl.Spec.Limited.AssuredConcurrencyShares)\n\t\t}\n\t\tmeal.haveExemptPL = meal.haveExemptPL || plName == fctypesv1a1.PriorityLevelConfigurationNameExempt"
  },
  {
    "id" : "82bf637d-dce8-4fe4-b4f8-b241b4a9b765",
    "prId" : 87754,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87754#pullrequestreview-354896540",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efa64378-5ed4-4b9e-8f7f-db5cd5f46345",
        "parentId" : null,
        "authorId" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "body" : "this could be ambiguous if someone starts an apiserver before midnight of Jan 1, 1970 :wink:\r\n\r\n(not requesting a change)",
        "createdAt" : "2020-02-06T19:33:29Z",
        "updatedAt" : "2020-02-11T03:56:19Z",
        "lastEditedBy" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "tags" : [
        ]
      },
      {
        "id" : "eb81b5fd-1b61-4d71-9975-bfdcc3c4272b",
        "parentId" : "efa64378-5ed4-4b9e-8f7f-db5cd5f46345",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I figured the zero value is a natural way to say \"didn't happen\".",
        "createdAt" : "2020-02-07T02:18:18Z",
        "updatedAt" : "2020-02-11T03:56:19Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "73614ddd4e42728a36c7ac6b7b20f27c8032cafb",
    "line" : 626,
    "diffHunk" : "@@ -1,1 +624,628 @@// The returned bool indicates whether the request is exempt from\n// limitation.  The startWaitingTime is when the request started\n// waiting in its queue, or `Time{}` if this did not happen.\nfunc (cfgCtl *configController) startRequest(ctx context.Context, rd RequestDigest) (fs *fctypesv1a1.FlowSchema, pl *fctypesv1a1.PriorityLevelConfiguration, isExempt bool, req fq.Request, startWaitingTime time.Time) {\n\tklog.V(7).Infof(\"startRequest(%#+v)\", rd)"
  },
  {
    "id" : "ec6729cb-7483-4a96-9ef0-31cc18dfb672",
    "prId" : 87754,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87754#pullrequestreview-358718067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af401def-d62d-4c22-8ede-f72eeb9d0395",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Can error be returned here instead of panicing ?",
        "createdAt" : "2020-02-14T04:55:43Z",
        "updatedAt" : "2020-02-14T04:55:43Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "4a7f1c93-e7ca-493b-96ba-bfdbeae9f72e",
        "parentId" : "af401def-d62d-4c22-8ede-f72eeb9d0395",
        "authorId" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "body" : "If this line is ever reached, either some very critical assumptions in this code are invalid or some bits have been silently been flipped in memory, and either way a panic is probably right.",
        "createdAt" : "2020-02-14T05:23:08Z",
        "updatedAt" : "2020-02-14T05:23:09Z",
        "lastEditedBy" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "tags" : [
        ]
      }
    ],
    "commit" : "73614ddd4e42728a36c7ac6b7b20f27c8032cafb",
    "line" : 326,
    "diffHunk" : "@@ -1,1 +324,328 @@\t\tif err != nil {\n\t\t\t// should never happen because these conditions are created here and well formed\n\t\t\tpanic(fmt.Sprintf(\"Failed to json.Marshall(%#+v): %s\", fsu.condition, err.Error()))\n\t\t}\n\t\tklog.V(4).Infof(\"Writing Condition %s to FlowSchema %s because its previous value was %s\", string(enc), fsu.flowSchema.Name, fcfmt.Fmt(fsu.oldValue))"
  }
]