[
  {
    "id" : "007b1a90-d68d-40ed-b6a9-806736013fe9",
    "prId" : 102848,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102848#pullrequestreview-686625539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85571939-f2d1-4dca-b544-8499fe995d6b",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I claim this test is incorrect - in connection to the comment that I added in the main code.",
        "createdAt" : "2021-06-16T15:44:25Z",
        "updatedAt" : "2021-06-16T15:44:25Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "d17b7899-3f99-42d9-8697-d526cd3c8ef3",
        "parentId" : "85571939-f2d1-4dca-b544-8499fe995d6b",
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "this test does not exercise the entire enqueu, select, dequeue and finish path, it just ensures that the given a snapshot of a `queueSet`, `selectQueueLocked` returns the queue with the minimum virtual finish time and also there are enough seats available\r\n",
        "createdAt" : "2021-06-17T17:45:39Z",
        "updatedAt" : "2021-06-17T17:45:39Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff716cef508f948b50e1026e980e6df5ee475538",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +914,918 @@\t\t\t},\n\t\t\tattempts:              3,\n\t\t\tminQueueIndexExpected: []int{-1, -1, 1},\n\t\t\trobinIndexExpected:    []int{1, 1, 1},\n\t\t},"
  },
  {
    "id" : "e5e1ed6d-75f4-4203-b523-8d544043045b",
    "prId" : 91761,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91761#pullrequestreview-426223403",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9c58d41-eee2-4b07-ac30-a10ab2384cee",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "can you elaborate the point of `time.Second - 1` (1 sec - 1 nano-sec)? what's the difference from exactly 1 sec?",
        "createdAt" : "2020-06-08T07:48:20Z",
        "updatedAt" : "2020-07-14T14:05:31Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "f3ddc868-54bc-4da1-b6dd-4cfa86d8414e",
        "parentId" : "b9c58d41-eee2-4b07-ac30-a10ab2384cee",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "This sort of configuration gets into a cadence where every 1000000000 nanoseconds some requests finish, and 1 ns before that some more arrive.  That means that when one request finishes, the dispatcher already has all the requests it will consider.  If the arrivals were at the same fake time as the completions then we are at the mercy of the golang goroutine scheduler: some dispatching may happen before some of the request arrivals.",
        "createdAt" : "2020-06-08T13:17:45Z",
        "updatedAt" : "2020-07-14T14:05:31Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3fdd5cf9f51f2a03ebfddef82bc2014e04b62a0",
    "line" : 479,
    "diffHunk" : "@@ -1,1 +403,407 @@\t\tqs: qs,\n\t\tclients: []uniformClient{\n\t\t\t{1001001001, 8, 20, time.Second, time.Second - 1, false},\n\t\t\t{2002002002, 8, 20, time.Second, time.Second - 1, false},\n\t\t},"
  },
  {
    "id" : "ab2125a0-ae95-4c1e-b61d-1257a0a40709",
    "prId" : 91761,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91761#pullrequestreview-426225108",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47e4a18f-f644-4e53-ac00-54a42dc949c7",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "`[]bool expectFair` is indeed less confusing than `expectFair[1|2]`, while for now  how about we commenting something like: \r\n\r\n`expectFair` is an array of single element indicating whether the concurrency distribution is overall fair for non-split cases. and the on the other hand for split cases, it's a two-element array with `expectFair[0]` indicating whether the splitted half is fair and `expectFair[1]` indicating the overall distribution is fair..",
        "createdAt" : "2020-06-08T08:02:03Z",
        "updatedAt" : "2020-07-14T14:05:31Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "ddef4c52-0007-479f-b7c9-12c90217ac20",
        "parentId" : "47e4a18f-f644-4e53-ac00-54a42dc949c7",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I think it is more meaningful to evaluate the two halves rather than the whole.  The whole will show a lesser degree of whatever effects there may be than an individual half.",
        "createdAt" : "2020-06-08T13:19:52Z",
        "updatedAt" : "2020-07-14T14:05:31Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3fdd5cf9f51f2a03ebfddef82bc2014e04b62a0",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +125,129 @@\tconcurrencyLimit                         int\n\tevalDuration                             time.Duration\n\texpectFair                               []bool\n\texpectAllRequests                        bool\n\tevalInqueueMetrics, evalExecutingMetrics bool"
  },
  {
    "id" : "2f4ef57a-b78d-4468-8fe8-b9f037577050",
    "prId" : 91761,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91761#pullrequestreview-446026634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7090da5-ae4b-4e33-b5f5-629706ef8156",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This is less deeply nested, so I'm going to assume it's a large improvement :)",
        "createdAt" : "2020-07-09T23:41:31Z",
        "updatedAt" : "2020-07-14T14:05:31Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3fdd5cf9f51f2a03ebfddef82bc2014e04b62a0",
    "line" : 204,
    "diffHunk" : "@@ -1,1 +169,173 @@\t\tuss.expectedInqueue = uss.expectedInqueue + fmt.Sprintf(`\t\t\t\tapiserver_flowcontrol_current_inqueue_requests{flowSchema=%q,priorityLevel=%q} 0%s`, fsName, uss.name, \"\\n\")\n\t\tfor j := 0; j < uc.nThreads; j++ {\n\t\t\tust := uniformScenarioThread{\n\t\t\t\tuss:    uss,\n\t\t\t\ti:      i,"
  },
  {
    "id" : "c9eb1846-a204-4120-a937-a09dfd56ea3e",
    "prId" : 88714,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88714#pullrequestreview-369831871",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2a2157f-e16a-42ed-9257-89d10a41ddba",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Is this really how people normally test metrics? I really would have expected to read the desired values and compare ints/floats. I'd also be satisfied with just reading the gauge directly if that's possible. @logicalhan ",
        "createdAt" : "2020-03-05T18:11:15Z",
        "updatedAt" : "2020-03-05T20:18:05Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "f156f7aa-ebe0-4343-b700-57217b7b93d5",
        "parentId" : "e2a2157f-e16a-42ed-9257-89d10a41ddba",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I found this pattern when looking at other metrics_test.go files in k8s.io/apiserver.",
        "createdAt" : "2020-03-05T19:00:05Z",
        "updatedAt" : "2020-03-05T20:18:05Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7b098ac6c276d65a79db6cfeb04f5f0f86eb315",
    "line" : 189,
    "diffHunk" : "@@ -1,1 +291,295 @@\t\t{2002002002, 4, 15, time.Second, 750 * time.Millisecond},\n\t}, time.Second*13, false, false, false, true, \"concurrency-limit\", clk, counter)\n\terr = metrics.GatherAndCompare(`\n\t\t\t\t# HELP apiserver_flowcontrol_rejected_requests_total [ALPHA] Number of requests rejected by API Priority and Fairness system\n\t\t\t\t# TYPE apiserver_flowcontrol_rejected_requests_total counter"
  },
  {
    "id" : "80b36fae-8803-468b-8978-0b645fbe3f52",
    "prId" : 88714,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88714#pullrequestreview-369881901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecd2cd71-e533-4f1a-8f5d-bedb8d4af82b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "From my reading of the code, timed out requests could get deducted from the wrong FS; I think a test should detect that if it happens (for any reason), but it's not clear that this one does?\r\n\r\nE.g. after everything is done, the metrics should show zero executing requests, or the sum of rejected+processed needs to match what was sent, something like that?",
        "createdAt" : "2020-03-05T18:13:51Z",
        "updatedAt" : "2020-03-05T20:18:05Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "2b96e28f-c3d8-4442-bc18-59ba53bb6a7d",
        "parentId" : "ecd2cd71-e533-4f1a-8f5d-bedb8d4af82b",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Yes, timeouts should be tested and this function does not do that.",
        "createdAt" : "2020-03-05T18:58:23Z",
        "updatedAt" : "2020-03-05T20:18:05Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "a292fdf6-b14c-4cfe-9c59-fb4ed17b794a",
        "parentId" : "ecd2cd71-e533-4f1a-8f5d-bedb8d4af82b",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I have added some examination of metrics for rejection.",
        "createdAt" : "2020-03-05T20:15:12Z",
        "updatedAt" : "2020-03-05T20:18:05Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7b098ac6c276d65a79db6cfeb04f5f0f86eb315",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +74,78 @@\t\tintegrators[i] = test.NewIntegrator(clk)\n\t\tfsName := fmt.Sprintf(\"client%d\", i)\n\t\texpectedInqueue = expectedInqueue + fmt.Sprintf(`\t\t\t\tapiserver_flowcontrol_current_inqueue_requests{flowSchema=%q,priorityLevel=%q} 0%s`, fsName, name, \"\\n\")\n\t\tfor j := 0; j < uc.nThreads; j++ {\n\t\t\tcounter.Add(1)"
  }
]