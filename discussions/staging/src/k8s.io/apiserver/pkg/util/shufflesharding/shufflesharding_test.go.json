[
  {
    "id" : "5df7b7ff-aecb-4162-8f0c-82d14d3294e9",
    "prId" : 96954,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96954#pullrequestreview-541324934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec275dbd-a920-4ba7-b388-31c0504994b8",
        "parentId" : null,
        "authorId" : "4feee2be-8624-4c75-a147-987078c5210f",
        "body" : "@lavalamp  the previous comment was around this line of code...   the comment was:\r\n> hm since this file is making assertions about the slice I think it'd be good to keep the cap set deliberately. Since without this it's not obvious that you won't get a larger cap than len.\r\n\r\nThe comment / question is:  `make` explicit sets the cap to the length unless specified.   Is this sufficient?  or are you suggesting that adding the addition of an explicit cap makes it more readable?   The explicit cap (which is redundant to the default) is considered a staticcheck violation... do you suggest an inline ignore?    \r\n\r\nThank you sir!",
        "createdAt" : "2020-11-30T14:44:27Z",
        "updatedAt" : "2020-11-30T14:44:28Z",
        "lastEditedBy" : "4feee2be-8624-4c75-a147-987078c5210f",
        "tags" : [
        ]
      },
      {
        "id" : "6f868c1a-782c-4055-b274-aa3cfa2c0528",
        "parentId" : "ec275dbd-a920-4ba7-b388-31c0504994b8",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I guess it is clear from the string what the author believes this is testing, that is probably good enough. Thanks.",
        "createdAt" : "2020-11-30T21:52:59Z",
        "updatedAt" : "2020-11-30T21:52:59Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "3de47dc05853131dcfc588bf2043207487cdd7c4",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +277,281 @@\t\t{\n\t\t\t\"size: 6 cap: 6 slice\",\n\t\t\tmake([]int, 6),\n\t\t\t6,\n\t\t},"
  },
  {
    "id" : "381d8941-dbd3-4a7d-b9ab-87a9832f17c0",
    "prId" : 81182,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81182#pullrequestreview-275132268",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3347793c-02a4-4593-b6f9-3297223e1cc8",
        "parentId" : null,
        "authorId" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "body" : "does it make sense to validate the params to meet the conditions as described in the comment above?",
        "createdAt" : "2019-08-14T17:00:50Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "tags" : [
        ]
      },
      {
        "id" : "b4b48c47-f274-4ce7-865c-834670b65f38",
        "parentId" : "3347793c-02a4-4593-b6f9-3297223e1cc8",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I think not, since this is not a public function; it only needs to be good enough for local usage and it is easy to check that the local usages meet the requirements.",
        "createdAt" : "2019-08-14T20:30:03Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5c9f5007659d9d9bf3b02f48330444bcee74840",
    "line" : 227,
    "diffHunk" : "@@ -1,1 +285,289 @@// positive and m to be in the range [0, n] and requires the answer to\n// fit in an int\nfunc ff(n, m int) int {\n\tans := 1\n\tfor f := n; f > n-m; f-- {"
  },
  {
    "id" : "fd153b36-ffb1-4e88-afe5-812964703fb3",
    "prId" : 81182,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81182#pullrequestreview-277573127",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abfeb57d-b0c5-49b2-9d42-67ec67291200",
        "parentId" : null,
        "authorId" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "body" : "I don't think it is good to test from 0 to hashMax, because we all know the principle of our algorithm, it will get same results in **[allCoordinateCount\\*N, allCoordinateCount\\*(N+1) )**, so the test case will always succeed, which is not expected. ",
        "createdAt" : "2019-08-19T03:17:36Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "tags" : [
        ]
      },
      {
        "id" : "15130af6-68ec-4d5f-af7d-579b7f1a59d0",
        "parentId" : "abfeb57d-b0c5-49b2-9d42-67ec67291200",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I think the point of unit tests is to check whether the implementation is doing what it is intended to do.  If we were confident that the implementation does what it is intended to do then these unit tests would prove nothing, and the only things to prove would be math exercises that do not need to be repeated in unit tests.\r\n\r\nBy exploring from 0 to hashMax-1, we can test a range of hash space that is like what gets used in the priority and fairness filter --- a range from 0 to SomePowerOfTwo-1.",
        "createdAt" : "2019-08-19T15:37:10Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "9a375a89-4a84-46f5-92df-8b5fe5a1a05f",
        "parentId" : "abfeb57d-b0c5-49b2-9d42-67ec67291200",
        "authorId" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "body" : "OK, I think these test cases are enough for priority and fairness filter.",
        "createdAt" : "2019-08-21T06:06:02Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5c9f5007659d9d9bf3b02f48330444bcee74840",
    "line" : 259,
    "diffHunk" : "@@ -1,1 +314,318 @@\t\tmaxCount := permutations * int(math.Ceil(nff))\n\t\taHand := make([]int, test.handSize)\n\t\tfor i := 0; i < test.hashMax; i++ {\n\t\t\tShuffleAndDealIntoHand(uint64(i), test.deckSize, aHand)\n\t\t\tsort.IntSlice(aHand).Sort()"
  },
  {
    "id" : "71a8ae64-e2e9-4e57-93ed-99c57fc43639",
    "prId" : 81182,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81182#pullrequestreview-276642634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "783551d1-d430-4b93-8b0e-ac143cde8b82",
        "parentId" : null,
        "authorId" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "body" : "If {128, 3, ff(128,3)} pass, {128, 3, 3 *ff(128, 3)} will pass either, so I think this case is duplication.",
        "createdAt" : "2019-08-19T03:18:53Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "tags" : [
        ]
      },
      {
        "id" : "4818e057-3901-432e-bf98-ef6b3fbdbaf1",
        "parentId" : "783551d1-d430-4b93-8b0e-ac143cde8b82",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "My thinking for the `{128, 3, 3 * ff(128, 3)}` test case is that by exploring a larger hash value space this gives the implementation more opportunities to mess up.",
        "createdAt" : "2019-08-19T15:34:52Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5c9f5007659d9d9bf3b02f48330444bcee74840",
    "line" : 245,
    "diffHunk" : "@@ -1,1 +301,305 @@\t\t{64, 3, 1 << uint(math.Ceil(math.Log2(float64(ff(64, 3))))+spare)},\n\t\t{128, 3, ff(128, 3)},\n\t\t{128, 3, 3 * ff(128, 3)},\n\t\t{70, 4, ff(70, 4)},\n\t}"
  },
  {
    "id" : "2eba7021-8273-47de-b639-c4f4db697cb8",
    "prId" : 80710,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80710#pullrequestreview-272721837",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0381d323-e370-4d39-b20c-e2e50621a9ee",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Even more interesting would be a power of 2 (the lowest one that is big enough).",
        "createdAt" : "2019-08-08T17:24:35Z",
        "updatedAt" : "2019-08-08T17:29:48Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "655ac52dbb5f112b2dd79a25404c150de250799d",
    "line" : 287,
    "diffHunk" : "@@ -1,1 +285,289 @@\tallCoordinateCount := 128 * 127 * 126 / 6\n\n\tfor i := 0; i < allCoordinateCount*16; i++ {\n\t\thands := ShuffleAndDealToSlice(rand.Uint64(), deckSize, handSize)\n\t\tsort.Slice(hands, func(i, j int) bool {"
  },
  {
    "id" : "bb5153f0-6399-467e-b106-55240e3f1b88",
    "prId" : 80710,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80710#pullrequestreview-272721837",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "207b707a-3c64-436a-991d-02cd668803bd",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Reflection!  That's about as expensive a way to sort this array as possible.",
        "createdAt" : "2019-08-08T17:27:41Z",
        "updatedAt" : "2019-08-08T17:29:48Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "655ac52dbb5f112b2dd79a25404c150de250799d",
    "line" : 289,
    "diffHunk" : "@@ -1,1 +287,291 @@\tfor i := 0; i < allCoordinateCount*16; i++ {\n\t\thands := ShuffleAndDealToSlice(rand.Uint64(), deckSize, handSize)\n\t\tsort.Slice(hands, func(i, j int) bool {\n\t\t\treturn hands[i] < hands[j]\n\t\t})"
  },
  {
    "id" : "32347405-8f91-42db-90ff-9d5efe0f0e87",
    "prId" : 80710,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80710#pullrequestreview-272738599",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29ace60f-12a8-4d03-91bd-9d9c750c68e1",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "BTW, this produces a single hand, not multiple hands.",
        "createdAt" : "2019-08-08T17:52:57Z",
        "updatedAt" : "2019-08-08T17:52:57Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "655ac52dbb5f112b2dd79a25404c150de250799d",
    "line" : 288,
    "diffHunk" : "@@ -1,1 +286,290 @@\n\tfor i := 0; i < allCoordinateCount*16; i++ {\n\t\thands := ShuffleAndDealToSlice(rand.Uint64(), deckSize, handSize)\n\t\tsort.Slice(hands, func(i, j int) bool {\n\t\t\treturn hands[i] < hands[j]"
  }
]