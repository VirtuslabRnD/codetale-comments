[
  {
    "id" : "3a086a33-6cb0-43d3-b89b-6bae9d6dd110",
    "prId" : 83665,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83665#pullrequestreview-301872982",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1d79fb4-f1af-46c8-b04a-f69f323a0e96",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Remember that floating point arithmetic has limited precision and accuracy.  `math.Log2(x)` produces only an approximation to the true base-2 logarithm of `x`.  I see no guarantee that this approximation is `<=` the true value.  Thus, the approximation could be slightly higher than the true value.  `math.Ceil` of something slightly higher than an integer is almost a whole integer larger.  That could be a problem here.  I suggest\r\n```\r\n \treturn int(math.Ceil(math.Log2(float64(deckSize)) * float64(handSize) - 0.001))\r\n```",
        "createdAt" : "2019-10-14T13:41:57Z",
        "updatedAt" : "2019-10-23T08:38:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "85648eaa-9b99-412b-874d-ee16d72fb77a",
        "parentId" : "a1d79fb4-f1af-46c8-b04a-f69f323a0e96",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "https://play.golang.org/p/cdiupEIE4EN\r\n\r\nIt seems it actually has the opposite problem (well, the same problem but with the opposite direction :) ).\r\n\r\nIs this a good way to test for this? Would computing a max number be better?",
        "createdAt" : "2019-10-14T22:43:27Z",
        "updatedAt" : "2019-10-23T08:38:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8e69b1f1-33dd-4d7d-93c9-b7bef1101ece",
        "parentId" : "a1d79fb4-f1af-46c8-b04a-f69f323a0e96",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "That is, that test observed approximations that were low but none that were high.\r\nLooking at the doc on the math package, I see no guarantee in either direction.\r\nThe formulation I suggested is safe for our purposes, both for approximations that are a little below the correct value and approximations that are a little above the correct value.",
        "createdAt" : "2019-10-14T23:37:28Z",
        "updatedAt" : "2019-10-23T08:38:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "35a0ad65-36bb-405d-9dc0-a886a998537a",
        "parentId" : "a1d79fb4-f1af-46c8-b04a-f69f323a0e96",
        "authorId" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "body" : "@lavalamp @MikeSpreitzer  Thanks for your suggestion, according to https://play.golang.org/p/muwuKH3EWDL, maybe we can use `math/big`, inspiration from @yue9944882 ...",
        "createdAt" : "2019-10-15T07:16:57Z",
        "updatedAt" : "2019-10-23T08:38:23Z",
        "lastEditedBy" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "tags" : [
        ]
      },
      {
        "id" : "070c26ff-9d3c-4dad-9f7d-e5d3e4b9cab9",
        "parentId" : "a1d79fb4-f1af-46c8-b04a-f69f323a0e96",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Even `math/big` is approximate when dealing with real numbers.  So switching to that changes nothing.\r\n\r\nLook carefully at the revision I suggested.  It works when the approximation is low, and it works when the approximation is high.",
        "createdAt" : "2019-10-15T12:40:17Z",
        "updatedAt" : "2019-10-23T08:38:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a3ca070cdd9804a22bf5db8a99576b09fc52484",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@// 1 <= handSize <= deckSize <= 1<<26.\nfunc RequiredEntropyBits(deckSize, handSize int) int {\n\treturn int(math.Ceil(math.Log2(float64(deckSize)) * float64(handSize)))\n}\n"
  },
  {
    "id" : "9935e37e-54b3-4e8d-bbf9-a003afb48af8",
    "prId" : 83665,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83665#pullrequestreview-305717878",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4512a6b-0922-4597-a9da-ecd749ce01cb",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Since the function's comment is documenting error conditions, this one has to be included.",
        "createdAt" : "2019-10-21T04:01:51Z",
        "updatedAt" : "2019-10-23T08:38:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "b7e2d602-603b-453c-8df6-81b18a16a88a",
        "parentId" : "b4512a6b-0922-4597-a9da-ecd749ce01cb",
        "authorId" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "body" : "done!",
        "createdAt" : "2019-10-23T08:35:57Z",
        "updatedAt" : "2019-10-23T08:38:23Z",
        "lastEditedBy" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a3ca070cdd9804a22bf5db8a99576b09fc52484",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +56,60 @@\t\treturn nil, fmt.Errorf(\"handSize %d is greater than deckSize %d\", handSize, deckSize)\n\t}\n\tif deckSize > 1<<26 {\n\t\treturn nil, fmt.Errorf(\"deckSize %d is impractically large\", deckSize)\n\t}"
  },
  {
    "id" : "c897a944-ecbf-4441-80e2-ab726182e765",
    "prId" : 81182,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81182#pullrequestreview-276235457",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c003d7b-0b53-4ea5-b49f-48c813a93e96",
        "parentId" : null,
        "authorId" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "body" : "Could we combine some **if** to make return in **if**?",
        "createdAt" : "2019-08-09T02:35:13Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "tags" : [
        ]
      },
      {
        "id" : "9e77b704-2ce5-4fb8-a217-7800e3abecaa",
        "parentId" : "8c003d7b-0b53-4ea5-b49f-48c813a93e96",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "We could, but I chose to use the existing structure because it made a certain amount of sense.  First, we check the range of each individual value, accumulating errors.  If there are any then take an early out.  Then check logically necessary relationships.  Early out if that revealed problems.  Finally do the more complicated and costly quantitative check.  I thought that would be easiest on other peoples' minds.  But since you objected, I will rewrite to be more direct.",
        "createdAt" : "2019-08-09T06:24:37Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "874d360e-f502-45a3-91b3-bdd2f9dd1f6a",
        "parentId" : "8c003d7b-0b53-4ea5-b49f-48c813a93e96",
        "authorId" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "body" : "i agree with Mike, the current flow is easier to understand.",
        "createdAt" : "2019-08-13T18:07:56Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "tags" : [
        ]
      },
      {
        "id" : "1100e6b9-dbbc-403f-8187-2645112ed650",
        "parentId" : "8c003d7b-0b53-4ea5-b49f-48c813a93e96",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "@yliaog : I am not sure which you are agreeing with.  Is the revised code OK?",
        "createdAt" : "2019-08-14T01:16:49Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "e69d55a2-e7b4-476e-8f3d-df45d8823a45",
        "parentId" : "8c003d7b-0b53-4ea5-b49f-48c813a93e96",
        "authorId" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "body" : "Yes, the current code structure looks good.",
        "createdAt" : "2019-08-14T16:50:14Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "tags" : [
        ]
      },
      {
        "id" : "f729bd4e-ce5d-481c-9aa5-2663b6f869cf",
        "parentId" : "8c003d7b-0b53-4ea5-b49f-48c813a93e96",
        "authorId" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "body" : "OKï¼Œlet's keep this.",
        "createdAt" : "2019-08-17T12:23:12Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5c9f5007659d9d9bf3b02f48330444bcee74840",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +38,42 @@\t}\n\tif len(errs) > 0 {\n\t\treturn\n\t}\n\tif handSize > deckSize {"
  },
  {
    "id" : "6d53d3ab-f8d5-416f-8326-a262121c703a",
    "prId" : 81182,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81182#pullrequestreview-276235457",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4432d9e4-d0a9-44dd-8066-16969532c948",
        "parentId" : null,
        "authorId" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "body" : "isn't idx always 0, since ShuffleAndDeal is called only once inside ShuffleAndDealIntoHand?",
        "createdAt" : "2019-08-13T18:18:47Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "tags" : [
        ]
      },
      {
        "id" : "01fcf2f2-76ae-4722-bb54-d88acd0aebc9",
        "parentId" : "4432d9e4-d0a9-44dd-8066-16969532c948",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "`ShuffleAndDeal` calls its `pick` parameter (which is the function here) `handSize` times, and each increments `idx`",
        "createdAt" : "2019-08-14T01:26:20Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "293a0edd-f4f8-417c-aa47-e42211b45539",
        "parentId" : "4432d9e4-d0a9-44dd-8066-16969532c948",
        "authorId" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "body" : "I think Mike is right.",
        "createdAt" : "2019-08-17T12:26:09Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5c9f5007659d9d9bf3b02f48330444bcee74840",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +110,114 @@\tvar idx int\n\tShuffleAndDeal(hashValue, deckSize, handSize, func(card int) {\n\t\thand[idx] = int(card)\n\t\tidx++\n\t})"
  },
  {
    "id" : "b5f93998-cf92-4b71-aec5-8d3659099874",
    "prId" : 81182,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81182#pullrequestreview-276335433",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4ef8c37-b1de-4b7b-8437-ff2f20413b31",
        "parentId" : null,
        "authorId" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "body" : "@MikeSpreitzer @yue9944882  why do we change int32 to int here?",
        "createdAt" : "2019-08-17T12:27:07Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "tags" : [
        ]
      },
      {
        "id" : "75678ad4-e0ec-4d7e-8a3a-ab2fbedc93fe",
        "parentId" : "a4ef8c37-b1de-4b7b-8437-ff2f20413b31",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I documented that in the commit comment.  See it at https://github.com/kubernetes/kubernetes/pull/81182/commits/aadd486973b0bd697eaa1568e73408b52392bafc , for example.",
        "createdAt" : "2019-08-17T13:42:26Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "73e63e2c-c474-4fb1-a3c6-5b95c8475e4e",
        "parentId" : "a4ef8c37-b1de-4b7b-8437-ff2f20413b31",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I also wrote about it in another comment: https://github.com/kubernetes/kubernetes/pull/81182#discussion_r313673013",
        "createdAt" : "2019-08-18T13:01:39Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "465c69f1-242e-4710-8ef3-904f00f5b256",
        "parentId" : "a4ef8c37-b1de-4b7b-8437-ff2f20413b31",
        "authorId" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "body" : "got it, I think both are OK if we accept the type conversion in priority and fairness. cc @yue9944882 ",
        "createdAt" : "2019-08-19T03:22:49Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "tags" : [
        ]
      },
      {
        "id" : "c2c5fafe-1b2a-4399-b6de-0b15289cbb84",
        "parentId" : "a4ef8c37-b1de-4b7b-8437-ff2f20413b31",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "convinced, let's make it an int",
        "createdAt" : "2019-08-19T04:18:32Z",
        "updatedAt" : "2019-08-21T06:30:10Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5c9f5007659d9d9bf3b02f48330444bcee74840",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +54,58 @@// then pick function will choose the optimal index from these\n// Algorithm: https://github.com/kubernetes/enhancements/blob/master/keps/sig-api-machinery/20190228-priority-and-fairness.md#queue-assignment-proof-of-concept\nfunc ShuffleAndDeal(hashValue uint64, deckSize, handSize int, pick func(int)) {\n\tremainders := make([]int, handSize)\n"
  },
  {
    "id" : "dc6160d1-e07b-4931-aa8a-e976e67d39a3",
    "prId" : 80710,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80710#pullrequestreview-270559786",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ace1f7c-2599-424d-b64d-a3e29edcd9ed",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I personally find it easier to argue for the correctness of the original, recursive formulation.  The comments on the `mr` functions there explain what's going on in a way that I find it relatively easy to see is correct (particularly when fixed by https://github.com/kubernetes/enhancements/pull/1196).",
        "createdAt" : "2019-08-02T19:06:24Z",
        "updatedAt" : "2019-08-08T15:32:06Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "6cb6d2fa-7d4f-4f44-87a1-3bb7b95f6457",
        "parentId" : "6ace1f7c-2599-424d-b64d-a3e29edcd9ed",
        "authorId" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "body" : "What about the performance? I try to use loop instead of recursive to improve performance, should we have a benchmark here to help us choose a better one ?",
        "createdAt" : "2019-08-05T02:53:55Z",
        "updatedAt" : "2019-08-08T15:32:06Z",
        "lastEditedBy" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "tags" : [
        ]
      },
      {
        "id" : "19e6712c-5ef2-4e18-912f-e23a7ae44a91",
        "parentId" : "6ace1f7c-2599-424d-b64d-a3e29edcd9ed",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Yeah, the loop should be faster.  I can live with that.",
        "createdAt" : "2019-08-05T05:10:31Z",
        "updatedAt" : "2019-08-08T15:32:06Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "655ac52dbb5f112b2dd79a25404c150de250799d",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +53,57 @@\t\tfor j := i; j > 0; j-- {\n\t\t\tif candidate >= remainders[j-1] {\n\t\t\t\tcandidate++\n\t\t\t}\n\t\t}"
  },
  {
    "id" : "6334452e-a188-499e-8de0-ffdd3136249b",
    "prId" : 80710,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80710#pullrequestreview-272721837",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37740d43-4043-495f-a2bb-a2c1776aec04",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "If this produced an `[]int` rather than an `[]int32` then the caller could use `sort`'s built-in support for sorting a slice of `int`.",
        "createdAt" : "2019-08-08T17:23:28Z",
        "updatedAt" : "2019-08-08T17:29:48Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "655ac52dbb5f112b2dd79a25404c150de250799d",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +72,76 @@// ShuffleAndDealToSlice will use specific pick function to return slices of indices\n// after ShuffleAndDeal\nfunc ShuffleAndDealToSlice(hashValue uint64, deckSize, handSize int32) []int32 {\n\tvar (\n\t\tcandidates = make([]int32, handSize)"
  }
]