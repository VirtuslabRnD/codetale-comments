[
  {
    "id" : "ae146123-4e9b-4772-8a52-6f9f1f8624e6",
    "prId" : 55282,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55282#pullrequestreview-75276933",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "240bbf72-657b-456a-a4e6-1949f4f42b2a",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The name of this plugin needs to be changed too, but maybe that is another PR?",
        "createdAt" : "2017-11-08T22:36:54Z",
        "updatedAt" : "2017-11-09T23:34:03Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d86d512d-2a47-4f58-bba0-a5f85fa0ac98",
        "parentId" : "240bbf72-657b-456a-a4e6-1949f4f42b2a",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "Yes, another PR is better.",
        "createdAt" : "2017-11-08T22:45:53Z",
        "updatedAt" : "2017-11-09T23:34:03Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "4568e0530c53df81d1bbd5e700daca041a1d8439",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +153,157 @@\n// WantsExternalKubeClientSet defines a function which sets external ClientSet for admission plugins that need it\nfunc (a *GenericAdmissionWebhook) SetExternalKubeClientSet(client clientset.Interface) {\n\ta.hookSource = configuration.NewValidatingWebhookConfigurationManager(client.AdmissionregistrationV1alpha1().ValidatingWebhookConfigurations())\n}"
  },
  {
    "id" : "bd2fb474-b82c-4e83-acbe-759574ea2e22",
    "prId" : 55127,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55127#pullrequestreview-76245327",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5c57c97-573f-4314-95ac-4d06bfa106e5",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Isn't there a namespace checker admission plugin? Maybe it needs to be placed in the list before webhooks?",
        "createdAt" : "2017-11-13T19:34:49Z",
        "updatedAt" : "2017-11-13T20:55:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "7e02fe14-f03c-4b44-a199-df2352dbbfa7",
        "parentId" : "c5c57c97-573f-4314-95ac-4d06bfa106e5",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "> Isn't there a namespace checker admission plugin? \r\n\r\nThe checker always allow DELETE request: https://github.com/kubernetes/kubernetes/blob/1418f9845237840a3e285cad3a763244c4deaaab/staging/src/k8s.io/apiserver/pkg/admission/plugin/namespace/lifecycle/admission.go#L113\r\n\r\nAlso, we need this webhook to function correctly even if the namespace plugin is turned off.\r\n\r\n>  Maybe it needs to be placed in the list before webhooks?\r\n\r\nIt is :)",
        "createdAt" : "2017-11-13T20:53:50Z",
        "updatedAt" : "2017-11-13T20:55:47Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab053a224d27aa48ea4b34ba7591cfd72c3f567d",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +395,399 @@\t}\n\tnamespaceLabels, err := a.getNamespaceLabels(attr)\n\t// this means the namespace is not found, for backwards compatibility,\n\t// return a 404\n\tif apierrors.IsNotFound(err) {"
  },
  {
    "id" : "f834bd3a-dce6-4dbc-8ee5-8cd876b64415",
    "prId" : 54889,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54889#pullrequestreview-75946258",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "530b7f4f-4426-4c36-8f28-6483359f40c4",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Does this do the right thing with schemeless urls?",
        "createdAt" : "2017-11-12T00:57:18Z",
        "updatedAt" : "2017-11-12T01:04:03Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc0924cd4b59ab49ee955b7f0631820db57a824f",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +452,456 @@\t}\n\n\tu, err := url.Parse(*h.ClientConfig.URL)\n\tif err != nil {\n\t\treturn nil, &ErrCallingWebhook{WebhookName: h.Name, Reason: fmt.Errorf(\"Unparsable URL: %v\", err)}"
  },
  {
    "id" : "6c5283e7-e640-441f-ae82-db7b11f87002",
    "prId" : 54889,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54889#pullrequestreview-75946258",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3ad02f7-f6e7-4055-a5b9-ec8e861ec959",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Not needed if host and serverName are the same",
        "createdAt" : "2017-11-12T00:57:45Z",
        "updatedAt" : "2017-11-12T01:04:03Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc0924cd4b59ab49ee955b7f0631820db57a824f",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +465,469 @@\tcfg.Host = u.Host\n\tcfg.APIPath = u.Path\n\t// TODO: test if this is needed: cfg.TLSClientConfig.ServerName = u.Host\n\n\treturn complete(cfg)"
  },
  {
    "id" : "ae1c995a-62b5-41b5-825e-acd740b21ae6",
    "prId" : 54861,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54861#pullrequestreview-74974528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "845bd01c-3b11-48f7-9936-7400fd882ddc",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "preserve the existing dialer set on the config, if present\r\n```\r\ndelegateDialer := cfg.Dial\r\nif delegateDialer == nil {\r\n  delegateDialer = net.Dial\r\n}\r\n```",
        "createdAt" : "2017-11-08T02:16:32Z",
        "updatedAt" : "2017-11-10T08:46:15Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "90795d1f-55f0-4da4-8c4c-b0d38d474eda",
        "parentId" : "845bd01c-3b11-48f7-9936-7400fd882ddc",
        "authorId" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "body" : "understand",
        "createdAt" : "2017-11-08T02:26:18Z",
        "updatedAt" : "2017-11-10T08:46:15Z",
        "lastEditedBy" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "b845e26983741c5d12e621604b5e064e03d4fed1",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +332,336 @@\tcfg.TLSClientConfig.CAData = h.ClientConfig.CABundle\n\tcfg.ContentConfig.NegotiatedSerializer = a.negotiatedSerializer\n\tcfg.ContentConfig.ContentType = runtime.ContentTypeJSON\n\n\tdelegateDialer := cfg.Dial"
  },
  {
    "id" : "2a732ffa-44d0-4f2a-ad97-477fb15f9bdf",
    "prId" : 54861,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54861#pullrequestreview-75908781",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81d90c91-7984-417c-93f6-859054213e70",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I am rebasing on top of this right now-- why did this get moved to a dialer instead of being done up-front?",
        "createdAt" : "2017-11-10T19:29:22Z",
        "updatedAt" : "2017-11-10T19:29:22Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "fcb0aa4f-5289-4d32-9db1-df6466b5bc15",
        "parentId" : "81d90c91-7984-417c-93f6-859054213e70",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "not sure what you mean by up-front... you need to resolve every time you connect in case the resolution has changed, otherwise you're stuck with the initially resolved address for the lifetime of the client. Dial is the right place to do connect-time name->IP resolution",
        "createdAt" : "2017-11-10T19:47:53Z",
        "updatedAt" : "2017-11-10T19:48:51Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ceb06181-2224-4312-a851-a4fd7e0ad3c3",
        "parentId" : "81d90c91-7984-417c-93f6-859054213e70",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "ah, that makes sense, thanks.",
        "createdAt" : "2017-11-10T23:44:05Z",
        "updatedAt" : "2017-11-10T23:44:05Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "b845e26983741c5d12e621604b5e064e03d4fed1",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +339,343 @@\t}\n\n\tcfg.Dial = func(network, addr string) (net.Conn, error) {\n\t\tif addr == host {\n\t\t\tu, err := a.serviceResolver.ResolveEndpoint(h.ClientConfig.Service.Namespace, h.ClientConfig.Service.Name)"
  },
  {
    "id" : "272f2159-9f5e-4410-b226-49d162b60590",
    "prId" : 54734,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54734#pullrequestreview-74239069",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c445bf1a-598b-46fb-a178-2113de2111c5",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Perhaps, instead of calling this here, we should find each call site of callHook and pass any error it returns through toStatusErr?",
        "createdAt" : "2017-11-04T00:01:35Z",
        "updatedAt" : "2017-11-06T19:16:45Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "7971673c-7811-413d-a67a-0916c37f0d98",
        "parentId" : "c445bf1a-598b-46fb-a178-2113de2111c5",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "What about `*ErrCallingWebhook`? It's handled differently in `Admit`.",
        "createdAt" : "2017-11-04T00:07:57Z",
        "updatedAt" : "2017-11-06T19:16:45Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "948bd7bbc18b343161120b365c089528f8fc0550",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +274,278 @@\t}\n\n\treturn toStatusErr(h.Name, response.Status.Result)\n}\n"
  },
  {
    "id" : "bafd0340-8f49-49de-ad8f-fac1804f9c80",
    "prId" : 54727,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54727#pullrequestreview-74227910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f12e1c53-0c99-44ca-952a-10cf7cd436e8",
        "parentId" : null,
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "Shouldn't this be f.CoreV1().Namespaces() ?",
        "createdAt" : "2017-11-03T20:34:48Z",
        "updatedAt" : "2017-11-10T21:44:34Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "c6fa1d3e-5ba1-46ac-ac02-db88c53434e5",
        "parentId" : "f12e1c53-0c99-44ca-952a-10cf7cd436e8",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "That's the informer interface is like.",
        "createdAt" : "2017-11-03T22:27:57Z",
        "updatedAt" : "2017-11-10T21:44:34Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f83748068e45fd548b1caaac2cc0ca06a769653",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +176,180 @@// SetExternalKubeInformerFactory implements the WantsExternalKubeInformerFactory interface.\nfunc (a *GenericAdmissionWebhook) SetExternalKubeInformerFactory(f informers.SharedInformerFactory) {\n\tnamespaceInformer := f.Core().V1().Namespaces()\n\ta.namespaceLister = namespaceInformer.Lister()\n\ta.SetReadyFunc(namespaceInformer.Informer().HasSynced)"
  },
  {
    "id" : "487983fe-2268-4d37-ab52-7701606f3a71",
    "prId" : 54727,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54727#pullrequestreview-74236308",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58400bdc-e818-4f52-b90d-02be699cdcf9",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Will extension apiservers have permissions to read all namespaces? I guess they must. Adding a line to my documentation outline :(",
        "createdAt" : "2017-11-03T23:35:44Z",
        "updatedAt" : "2017-11-10T21:44:34Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f83748068e45fd548b1caaac2cc0ca06a769653",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +128,132 @@\tserviceResolver      ServiceResolver\n\tnegotiatedSerializer runtime.NegotiatedSerializer\n\tnamespaceLister      corelisters.NamespaceLister\n\tclient               clientset.Interface\n"
  },
  {
    "id" : "8112dd21-c42d-46b8-9bce-633ad1936bb6",
    "prId" : 54727,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54727#pullrequestreview-74937234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d17950e7-6510-4505-8e2f-3186e167a41e",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "...and if the object doesn't have a namespace?",
        "createdAt" : "2017-11-03T23:39:57Z",
        "updatedAt" : "2017-11-10T21:44:34Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "490f18e5-ee5c-4112-9b10-895ae122e13b",
        "parentId" : "d17950e7-6510-4505-8e2f-3186e167a41e",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "It's handled before this function is called. Such objects are never exempted.",
        "createdAt" : "2017-11-07T22:48:55Z",
        "updatedAt" : "2017-11-10T21:44:34Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f83748068e45fd548b1caaac2cc0ca06a769653",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +292,296 @@\t}\n\n\tnamespaceName := attr.GetNamespace()\n\tnamespace, err := a.namespaceLister.Get(namespaceName)\n\tif err != nil && !apierrors.IsNotFound(err) {"
  }
]