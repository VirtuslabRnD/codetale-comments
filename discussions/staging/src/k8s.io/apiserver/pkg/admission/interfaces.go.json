[
  {
    "id" : "7b9bff6a-f5fa-47f8-a481-cbd28c81dee2",
    "prId" : 77824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77824#pullrequestreview-244429812",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8205421f-7e5e-4312-9fc2-3133d6af54bd",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "do we need two funcs? ",
        "createdAt" : "2019-05-31T08:53:32Z",
        "updatedAt" : "2019-08-23T18:09:13Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "bd15ffd8-b3dd-44eb-9201-10adc2f956a8",
        "parentId" : "8205421f-7e5e-4312-9fc2-3133d6af54bd",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "otherwise we need to update places invoking `AddAnnotation()`, and they need to import `auditinternal` package. I'd like those places (test code, some admission controller package) to be unaware of `auditinternal`",
        "createdAt" : "2019-05-31T17:30:41Z",
        "updatedAt" : "2019-08-23T18:09:13Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      }
    ],
    "commit" : "98ad20cc8fbdd1cbbdb0fe934d7b2d330b8b1ee5",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +70,74 @@\t// An Annotation gets logged into audit event if the request's audit level is greater or equal to the\n\t// intended audit level.\n\tAddAnnotationWithLevel(key, value string, level auditinternal.Level) error\n\n\t// GetReinvocationContext tracks the admission request information relevant to the re-invocation policy."
  },
  {
    "id" : "ef4fe561-6b46-44fd-8220-7af22441ea32",
    "prId" : 77824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77824#pullrequestreview-244541758",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "533a1c22-6ab2-4160-b11d-3a2bd0cd5de9",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "we could deprecate that and clean up the callers in an follow-up",
        "createdAt" : "2019-05-31T22:20:00Z",
        "updatedAt" : "2019-08-23T18:09:13Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "98ad20cc8fbdd1cbbdb0fe934d7b2d330b8b1ee5",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +65,69 @@\t// By default, an annotation gets logged into audit event if the request's audit level is greater or\n\t// equal to Metadata.\n\tAddAnnotation(key, value string) error\n\n\t// AddAnnotationWithLevel sets annotation according to key-value pair with additional intended audit level."
  },
  {
    "id" : "25f0c6e0-7802-43b0-8350-945a68462fcb",
    "prId" : 74154,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74154#pullrequestreview-205002752",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76b6b983-3e8e-499b-8bf7-f5289279dcac",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "@mbohlool @liggitt adding this as a parameter to all admission controller would widely change all the admissions' interface. how about injecting a dynamic scheme getter func from the initializers instead a fixed scheme? sth like `func GetScheme(gvk)`, if the gvk's not registered in the legacy scheme(which is, the requesting resource is not standard), it returns the extension scheme.",
        "createdAt" : "2019-02-18T04:54:47Z",
        "updatedAt" : "2019-02-18T04:54:47Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "3d7ded01-5085-4de1-91e5-6ed8a0f26a36",
        "parentId" : "76b6b983-3e8e-499b-8bf7-f5289279dcac",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> how about injecting a dynamic scheme getter func from the initializers instead a fixed scheme? sth like `func GetScheme(gvk)`, if the gvk's not registered in the legacy scheme(which is, the requesting resource is not standard), it returns the extension scheme.\r\n\r\nThat seems more complex and error-prone. The choice is not between the legacy scheme and the extensions scheme, but between the legacy scheme and a per-resource converter/typer/defaulter for each custom resource. The object interfaces for the object being handled are in the rest handler, and fit much more naturally as a parameter to admit/validate.",
        "createdAt" : "2019-02-19T02:04:22Z",
        "updatedAt" : "2019-02-19T02:04:22Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f186323bc8f6b502fd0721ef5aa0928552f227c",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +66,70 @@// such as Converter or Defaulter. These interfaces are normally coming from Request Scope\n// to handle special cases like CRDs.\ntype ObjectInterfaces interface {\n\t// GetObjectCreater is the ObjectCreator appropriate for the requested object.\n\tGetObjectCreater() runtime.ObjectCreater"
  },
  {
    "id" : "cfbcd819-8d7a-4a17-995d-bffed7228f3e",
    "prId" : 74154,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74154#pullrequestreview-226392023",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbf68f81-e280-402e-93a7-3e54987af457",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "This silently disabled validation plugins of 3rdparty code bases. We should start caring about compatibility. We could have added `ObjectInterfaces` to the attributes without damaging third parties.",
        "createdAt" : "2019-04-14T10:41:50Z",
        "updatedAt" : "2019-04-14T10:41:51Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "4fe78112-46a8-4613-a53c-5f81f6f59a84",
        "parentId" : "cbf68f81-e280-402e-93a7-3e54987af457",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Changing either interface would have broken compatibility. I'd strongly recommend type assertions downstream to ensure interface matching. ",
        "createdAt" : "2019-04-14T12:01:48Z",
        "updatedAt" : "2019-04-14T12:01:48Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f186323bc8f6b502fd0721ef5aa0928552f227c",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +107,111 @@\n\t// Validate makes an admission decision based on the request attributes.  It is NOT allowed to mutate\n\tValidate(a Attributes, o ObjectInterfaces) (err error)\n}\n"
  },
  {
    "id" : "0e05d8f9-5e64-4021-b126-948fbff6109e",
    "prId" : 58143,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58143#pullrequestreview-125541085",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b609fe1f-dff9-401b-8124-7a61815c6926",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "why do we need this?",
        "createdAt" : "2018-06-04T10:26:54Z",
        "updatedAt" : "2018-06-04T11:23:14Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "065bb907-ee04-459e-b807-29224c53bdff",
        "parentId" : "b609fe1f-dff9-401b-8124-7a61815c6926",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I don't see this used. Premature abstraction? Would drop it.",
        "createdAt" : "2018-06-04T10:28:56Z",
        "updatedAt" : "2018-06-04T11:23:14Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "b59f6481-2304-444e-a792-8c12b598215d",
        "parentId" : "b609fe1f-dff9-401b-8124-7a61815c6926",
        "authorId" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "body" : "This interface is used according to @liggitt 's suggestion.\r\n\r\nhttps://github.com/kubernetes/kubernetes/commit/d7474b875587c32b97f0cd93553ad1a9c9aa8441#r29220311",
        "createdAt" : "2018-06-04T11:20:06Z",
        "updatedAt" : "2018-06-04T11:23:14Z",
        "lastEditedBy" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "tags" : [
        ]
      },
      {
        "id" : "e5213f67-5f16-4916-ae5e-41a1b7a23b36",
        "parentId" : "b609fe1f-dff9-401b-8124-7a61815c6926",
        "authorId" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "body" : "It's used in WithAudit decorator to check the attribute interface.\r\nWould be useful for alternate Attributes.",
        "createdAt" : "2018-06-04T11:27:01Z",
        "updatedAt" : "2018-06-04T11:27:01Z",
        "lastEditedBy" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "tags" : [
        ]
      },
      {
        "id" : "402c70c9-e3f7-4836-bd96-95874af0b46c",
        "parentId" : "b609fe1f-dff9-401b-8124-7a61815c6926",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "ok, sounds reasonable.",
        "createdAt" : "2018-06-04T11:56:32Z",
        "updatedAt" : "2018-06-04T11:56:32Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "241422879d81ac7f8d7874d55c53df73e35d91b0",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +66,70 @@// this interface.\ntype AnnotationsGetter interface {\n\tGetAnnotations() map[string]string\n}\n"
  },
  {
    "id" : "d0eae25a-bb17-465c-8107-ac7e77b2d8cf",
    "prId" : 54484,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54484#pullrequestreview-72844696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6b5586e-c2c9-4148-924d-b79819afecd6",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "`Revise`?",
        "createdAt" : "2017-10-26T16:25:09Z",
        "updatedAt" : "2017-11-02T08:33:37Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "41926c1e-8ce6-411b-8f53-5f2e3b8e05c2",
        "parentId" : "c6b5586e-c2c9-4148-924d-b79819afecd6",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Revise?\r\n\r\nPerhaps in a future pull.  Keeping this the same for now keeps this pull smaller and gives a slightly more orderly transition.",
        "createdAt" : "2017-10-30T14:05:25Z",
        "updatedAt" : "2017-11-02T08:33:37Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "c9eeb583-d827-4cc7-8145-b77753f90562",
        "parentId" : "c6b5586e-c2c9-4148-924d-b79819afecd6",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Revise?\r\n> Perhaps in a future pull. Keeping this the same for now keeps this pull smaller and gives a slightly more orderly transition.\r\n\r\nOh, and I hadn't heard of `Revise` until a few days ago, so that'll be worth a conversation if you want to change the name.  That's a rarely used word and reminds me of Derek's \"confide\". :)",
        "createdAt" : "2017-10-30T14:06:38Z",
        "updatedAt" : "2017-11-02T08:33:37Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "35bb6823ea94c98622397f7cb270c6a67070e70d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +63,67 @@\n\t// Admit makes an admission decision based on the request attributes\n\tAdmit(a Attributes) (err error)\n}\n"
  }
]