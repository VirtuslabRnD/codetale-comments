[
  {
    "id" : "4700b626-84f8-4196-990b-5b29de47767e",
    "prId" : 89305,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89305#pullrequestreview-388652687",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1221a118-c6f6-4fa7-94db-48190619d13e",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Please add godoc for public symbols.",
        "createdAt" : "2020-04-06T22:07:43Z",
        "updatedAt" : "2020-04-08T23:53:25Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bc62112adf270ef4efada37286319c229324c7b",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +41,45 @@// This is required to support flows where handlers that come before WithAudit\n// (such as WithAuthentication) wish to set audit annotations.\nfunc WithAuditAnnotations(parent context.Context) context.Context {\n\t// this should never really happen, but prevent double registration of this slice\n\tif _, ok := parent.Value(auditAnnotationsKey).(*[]annotation); ok {"
  },
  {
    "id" : "d9ae2c70-45cd-4ae6-b228-ae25676bf2f3",
    "prId" : 89305,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89305#pullrequestreview-391251252",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cce6123-4196-4614-9cf9-b35821959ccc",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "How come this can't just be called from `AddAuditAnnotation` when required? Is it because the adding a value to the context requires creating a new context?",
        "createdAt" : "2020-04-09T17:54:09Z",
        "updatedAt" : "2020-04-09T17:59:14Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "b12ca5d5-eeaf-4acd-b75d-adcfdfe9c271",
        "parentId" : "7cce6123-4196-4614-9cf9-b35821959ccc",
        "authorId" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "body" : "We cannot modify the context or request in place so we have to wrap at an earlier layer.\r\n\r\n---\r\n\r\nhttps://golang.org/pkg/net/http/#Request.WithContext\r\n\r\n```go\r\nfunc (r *Request) WithContext(ctx context.Context) *Request\r\n```\r\n\r\n```\r\nWithContext returns a shallow copy of r with its context changed to ctx. The provided ctx must be non-nil.\r\n\r\n...\r\n```\r\n\r\n---\r\n\r\nhttps://pkg.go.dev/context#WithValue\r\n\r\n```go\r\nfunc WithValue(parent Context, key, val interface{}) Context\r\n```\r\n\r\n```\r\nWithValue returns a copy of parent in which the value associated with key is val.\r\n\r\n...\r\n```",
        "createdAt" : "2020-04-10T03:33:59Z",
        "updatedAt" : "2020-04-10T03:33:59Z",
        "lastEditedBy" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bc62112adf270ef4efada37286319c229324c7b",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +41,45 @@// This is required to support flows where handlers that come before WithAudit\n// (such as WithAuthentication) wish to set audit annotations.\nfunc WithAuditAnnotations(parent context.Context) context.Context {\n\t// this should never really happen, but prevent double registration of this slice\n\tif _, ok := parent.Value(auditAnnotationsKey).(*[]annotation); ok {"
  },
  {
    "id" : "0b062db6-d4b7-438c-b489-a75a0614c219",
    "prId" : 89305,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89305#pullrequestreview-391030821",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "661ca708-1d14-4002-81ba-7f4a089fb67c",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "This is just going to have the value 0, won't it cause collisions? Or is it also keyed off the type?",
        "createdAt" : "2020-04-09T17:54:55Z",
        "updatedAt" : "2020-04-09T17:59:14Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "64775e84-27bb-4558-9089-fb644c61517b",
        "parentId" : "661ca708-1d14-4002-81ba-7f4a089fb67c",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "> The provided key must be comparable and should not be of type string or any other built-in type to avoid collisions between packages using context. Users of WithValue should define their own types for keys. To avoid allocating when assigning to an interface{}, context keys often have concrete type struct{}. Alternatively, exported context key variables' static type should be a pointer or interface.\r\n\r\nhttps://pkg.go.dev/context#WithValue\r\n\r\n",
        "createdAt" : "2020-04-09T18:26:09Z",
        "updatedAt" : "2020-04-09T18:26:10Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bc62112adf270ef4efada37286319c229324c7b",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@const (\n\t// auditAnnotationsKey is the context key for the audit annotations.\n\tauditAnnotationsKey key = iota\n)\n"
  },
  {
    "id" : "81dcd945-2a65-4c3d-a6f5-810f969e92fc",
    "prId" : 89305,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89305#pullrequestreview-391251592",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "277eb703-7ed7-4d27-a1fc-b9de72de9780",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Should this log a warning?",
        "createdAt" : "2020-04-09T17:57:16Z",
        "updatedAt" : "2020-04-09T17:59:15Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "0ea6014b-e5c6-4999-9be3-4593dd8ab0c2",
        "parentId" : "277eb703-7ed7-4d27-a1fc-b9de72de9780",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "We will expect this in TokenReview unfortunately.",
        "createdAt" : "2020-04-09T18:27:23Z",
        "updatedAt" : "2020-04-09T18:27:23Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "9b407a99-f725-4d8e-984d-e27332a0b75f",
        "parentId" : "277eb703-7ed7-4d27-a1fc-b9de72de9780",
        "authorId" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "body" : "It would also flood the logs when auditing is disabled.",
        "createdAt" : "2020-04-10T03:35:59Z",
        "updatedAt" : "2020-04-10T03:35:59Z",
        "lastEditedBy" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bc62112adf270ef4efada37286319c229324c7b",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +67,71 @@\tannotations, ok := ctx.Value(auditAnnotationsKey).(*[]annotation)\n\tif !ok {\n\t\treturn // adding audit annotation is not supported at this call site\n\t}\n"
  },
  {
    "id" : "fa500da7-d6c5-46b1-833d-45f84330ed7c",
    "prId" : 89305,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89305#pullrequestreview-392376992",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d01ba9a5-b2fb-42d0-87cf-a99ba9fba0f5",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "calling LogAnnotation wouldn't be any better in that situation, right? deferring an AddAuditAnnotation wouldn't break anything, it just would be too late to put the annotation into the audit event, right?",
        "createdAt" : "2020-04-13T19:16:22Z",
        "updatedAt" : "2020-04-13T19:16:23Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "da96e3ae-5e35-4dd9-b8b8-7a00ef32a1c1",
        "parentId" : "d01ba9a5-b2fb-42d0-87cf-a99ba9fba0f5",
        "authorId" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "body" : "Correct.  Presumably one would write a test and notice that it does not work.",
        "createdAt" : "2020-04-13T19:28:01Z",
        "updatedAt" : "2020-04-13T19:28:01Z",
        "lastEditedBy" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bc62112adf270ef4efada37286319c229324c7b",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +55,59 @@// The notable exception being that this function must not be called via a\n// defer statement (i.e. after ServeHTTP) in a handler that runs before WithAudit\n// as at that point the audit event has already been sent to the audit sink.\n// Handlers that are unaware of their position in the overall request flow should\n// prefer AddAuditAnnotation over LogAnnotation to avoid dropping annotations."
  },
  {
    "id" : "32f7c9e5-ecf3-4d39-b9ca-616f1ed85fa9",
    "prId" : 89305,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89305#pullrequestreview-392435840",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e81b014-9bf1-47d1-96e0-feb7ee738d62",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "not sure if it's worth noting that this is not threadsafe and is expected to be called from the request handling goroutine",
        "createdAt" : "2020-04-13T19:17:58Z",
        "updatedAt" : "2020-04-13T19:22:46Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "4db6ff80-1c65-4cb2-b23f-751c4b30bf3d",
        "parentId" : "3e81b014-9bf1-47d1-96e0-feb7ee738d62",
        "authorId" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "body" : "`¯\\_(ツ)_/¯`\r\n\r\n`LogAnnotation` has the same requirement.  In general if you try to mutate the data inside of a context, you need to know that you own that data in some way.  We generally avoid issues with this because most data is single writer with many readers.  Audit is special since it gets invoked multiple times from different writers.",
        "createdAt" : "2020-04-13T19:34:08Z",
        "updatedAt" : "2020-04-13T19:34:08Z",
        "lastEditedBy" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "tags" : [
        ]
      },
      {
        "id" : "c2fa5895-a48b-4cb2-a1a0-a56652b21a6d",
        "parentId" : "3e81b014-9bf1-47d1-96e0-feb7ee738d62",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I don't disagree, though the more removed you are from the object storing the data, the less clear it becomes what your responsibilities are... this borders on a magic box I can stuff annotations into and assume unpleasant things like data races are handled for me (like other context things like Done()/Cancel()/Err())",
        "createdAt" : "2020-04-13T19:37:11Z",
        "updatedAt" : "2020-04-13T19:37:12Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "34b56dc5-89c1-46f6-97bc-8b90cd063e40",
        "parentId" : "3e81b014-9bf1-47d1-96e0-feb7ee738d62",
        "authorId" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "body" : "I can open a follow-up and make the whole thing thread safe if you are interested?",
        "createdAt" : "2020-04-13T21:00:17Z",
        "updatedAt" : "2020-04-13T21:00:17Z",
        "lastEditedBy" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bc62112adf270ef4efada37286319c229324c7b",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +58,62 @@// Handlers that are unaware of their position in the overall request flow should\n// prefer AddAuditAnnotation over LogAnnotation to avoid dropping annotations.\nfunc AddAuditAnnotation(ctx context.Context, key, value string) {\n\t// use the audit event directly if we have it\n\tif ae := genericapirequest.AuditEventFrom(ctx); ae != nil {"
  }
]