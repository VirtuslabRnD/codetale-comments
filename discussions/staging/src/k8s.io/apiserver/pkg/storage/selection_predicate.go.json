[
  {
    "id" : "d6971c09-7003-402d-bf5e-bd43062122b9",
    "prId" : 85445,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85445#pullrequestreview-340105285",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "678c973c-6408-40ec-9d45-4f282013175d",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I've made it all the way down here and I need some help being able to make some sense of this coming in cold.  I can't believe I'm going to ask for comments, but I need some comments on the struct to make decisions about this method.\r\n\r\n1. Conflating fields and labels in a single index will make it nearly impossible to have this generally configurable for things like CRDs in the future\r\n2. Based on the names in this file, I expected that SelectionPredicate.Label and SelectionPrediate.Field would be based on user input from the request.  If I'm mistaken, can you add doc explaining where they come from?  `generic/registry/store.go|List` as a for instance.\r\n3. I think this indicates a need to create an e2e test (not a unit) for this feature that create overlapping field and label selectors that should select different, non-overlapping sets and provides proof that they are returned correctly.\r\n",
        "createdAt" : "2019-12-20T15:45:14Z",
        "updatedAt" : "2020-02-05T09:39:13Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "9a5e795a-0f29-4ec9-b2ea-26c7ec396ea8",
        "parentId" : "678c973c-6408-40ec-9d45-4f282013175d",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "> Conflating fields and labels in a single index will make it nearly impossible to have this generally configurable for things like CRDs in the future\r\n\r\nI'm not sure I'm following this one - I agree we have a naming problem (we should somehow distinguish them, but sth like \"field:<field-name>\" and \"label:<label-name>\" or sth like that should do the job). \r\nBut I don't understand how CRDs make things worse for that.\r\n\r\n> I think this indicates a need to create an e2e test (not a unit) for this feature that create overlapping field and label selectors that should select different, non-overlapping sets and provides proof that they are returned correctly.\r\n\r\nAt the high level I agree. But e2e test would be hard, given that there is no way to create indices other than programatically. I'm not entirely sure how to make non-unit test for it.\r\n",
        "createdAt" : "2019-12-30T14:42:07Z",
        "updatedAt" : "2020-02-05T09:39:13Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "c8f44643-c57b-4445-a75a-8a3ad57d3933",
        "parentId" : "678c973c-6408-40ec-9d45-4f282013175d",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It needs to be impossible for fields and labels to collide. We should change this code until we are confident that they don't and it's verifyable with a unit test.",
        "createdAt" : "2020-01-08T19:51:38Z",
        "updatedAt" : "2020-02-05T09:39:13Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa9ba80a67deeb9089e1be8ebac21063ebc07904",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +134,138 @@// of objects that return <value> for a given index, a pair (<index name>, <value>)\n// wil be returned.\nfunc (s *SelectionPredicate) MatcherIndex() []MatchValue {\n\tvar result []MatchValue\n\tfor _, field := range s.IndexFields {"
  },
  {
    "id" : "6083529e-f008-4405-8493-96e63f2c78bc",
    "prId" : 85445,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85445#pullrequestreview-354945249",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad82b7b4-7865-4441-9887-3226df9de001",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I don't think you need to *both* store them separately and prefix the name?",
        "createdAt" : "2020-02-05T00:16:31Z",
        "updatedAt" : "2020-02-05T09:39:13Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "117e2ccc-8406-45b6-8dea-ba72609fe7a5",
        "parentId" : "ad82b7b4-7865-4441-9887-3226df9de001",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "The difference is that this field (or rather `IndexFields`0 is already used for a long time and those are not prefixed.\r\nI would feel safer not merging those two in this PR - rather introducing `IndexLabels` as @shaloulcy did, potentially dropping a TODO to merge them (though that requires changing all places where it is used - there are few of them, but it's potential to break someone).",
        "createdAt" : "2020-02-06T12:11:32Z",
        "updatedAt" : "2020-02-06T12:11:35Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "fa895212-1d01-4ef5-b2ef-e4e898959096",
        "parentId" : "ad82b7b4-7865-4441-9887-3226df9de001",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This isn't stored anywhere, so I don't understand the risk. Anyway, my point wasn't that this shouldn't be done, just that if you do this, you don't also need to prefix the names (as stored in this object).",
        "createdAt" : "2020-02-06T22:14:34Z",
        "updatedAt" : "2020-02-06T22:14:34Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "bca11e4d-d9c9-4c4d-b42f-56db503796f2",
        "parentId" : "ad82b7b4-7865-4441-9887-3226df9de001",
        "authorId" : "bae8b8b8-e8b6-45cc-9aa4-ab1e581edf1a",
        "body" : "> This isn't stored anywhere, so I don't understand the risk. Anyway, my point wasn't that this shouldn't be done, just that if you do this, you don't also need to prefix the names (as stored in this object).\r\n\r\n@lavalamp  I have fixed it",
        "createdAt" : "2020-02-07T06:01:00Z",
        "updatedAt" : "2020-02-07T06:03:20Z",
        "lastEditedBy" : "bae8b8b8-e8b6-45cc-9aa4-ab1e581edf1a",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa9ba80a67deeb9089e1be8ebac21063ebc07904",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +75,79 @@\tField               fields.Selector\n\tGetAttrs            AttrFunc\n\tIndexLabels         []string\n\tIndexFields         []string\n\tLimit               int64"
  },
  {
    "id" : "56c1a208-4907-40ff-afc9-86f4e5fbcc07",
    "prId" : 75474,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75474#pullrequestreview-225104236",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "124be23e-cb7d-4063-a341-6a1288cd7b4b",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Can we move adding this field and propagating it down to cacheWatcher to a separate PR?\r\nThis one is something we can merge independently and this is a change in the interface so I would prefer to have it separately for better visibility.",
        "createdAt" : "2019-04-10T09:22:56Z",
        "updatedAt" : "2019-04-16T11:06:05Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "cf2bd9d6-e579-4092-a001-62a67fac370f",
        "parentId" : "124be23e-cb7d-4063-a341-6a1288cd7b4b",
        "authorId" : "2298dd66-0920-41ef-85a0-e8d08cffdc22",
        "body" : "Moving this to a separate PR seems inappropriate as we do not merge the API code.",
        "createdAt" : "2019-04-10T17:09:49Z",
        "updatedAt" : "2019-04-16T11:06:05Z",
        "lastEditedBy" : "2298dd66-0920-41ef-85a0-e8d08cffdc22",
        "tags" : [
        ]
      }
    ],
    "commit" : "d70edd3d39d4430d71c4b7c9adba8df5ba7f16c8",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +78,82 @@\tLimit               int64\n\tContinue            string\n\tAllowWatchBookmarks bool\n}\n"
  },
  {
    "id" : "5b888f12-9967-492e-9003-b509d7111ce6",
    "prId" : 50019,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50019#pullrequestreview-54065482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cde964db-cd4b-415b-8d1a-695cc8730f4f",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "What is the usecase for it? I would like to see this used somehow to ensure that this is really needed.",
        "createdAt" : "2017-08-03T07:07:45Z",
        "updatedAt" : "2017-08-03T07:07:58Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "61ba5489-9f8a-4933-937b-4b42a718e790",
        "parentId" : "cde964db-cd4b-415b-8d1a-695cc8730f4f",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "It is used downstream https://github.com/openshift/origin/pull/15594/files#diff-7535834b17c573599df1a7aae64bb231R44.",
        "createdAt" : "2017-08-03T07:36:29Z",
        "updatedAt" : "2017-08-03T07:36:29Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "6179a30a-8423-4086-97cc-6af5abf63078",
        "parentId" : "cde964db-cd4b-415b-8d1a-695cc8730f4f",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> What is the usecase for it? I would like to see this used somehow to ensure that this is really needed.\r\n\r\nAnd it would be used for a few upstream as well.  Events come to mind.\r\n\r\nAnything that has custom fields that are selectable will need it.",
        "createdAt" : "2017-08-03T11:28:23Z",
        "updatedAt" : "2017-08-03T11:28:23Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "9fb6cb86-c377-49ed-8427-0ab893cc8956",
        "parentId" : "cde964db-cd4b-415b-8d1a-695cc8730f4f",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "OK - I misread the function initially and though it's doing something different.\r\n\r\nYeah - that makes perfect sense to me.",
        "createdAt" : "2017-08-03T11:33:02Z",
        "updatedAt" : "2017-08-03T11:33:02Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0258d044d3b46f5d2e6bf30658afd4f29e48a1ca",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +57,61 @@}\n\nfunc (f AttrFunc) WithFieldMutation(fieldMutator FieldMutationFunc) AttrFunc {\n\treturn func(obj runtime.Object) (labels.Set, fields.Set, bool, error) {\n\t\tlabelSet, fieldSet, initialized, err := f(obj)"
  },
  {
    "id" : "4c79f767-3432-4808-9a3b-3c4803e68ad6",
    "prId" : 48921,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48921#pullrequestreview-56970953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a4327d2-1eb9-4168-995e-23e32336eee7",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Seems unused now.",
        "createdAt" : "2017-08-17T11:24:09Z",
        "updatedAt" : "2017-09-01T14:50:06Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "a81b8ef0-13a5-40ce-9a8a-446b665e855c",
        "parentId" : "6a4327d2-1eb9-4168-995e-23e32336eee7",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Should be used in the `List(` method",
        "createdAt" : "2017-08-17T15:51:18Z",
        "updatedAt" : "2017-09-01T14:50:06Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b8e42afa6d6abb459c332690c931585c0177b9c",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +77,81 @@\tGetAttrs             AttrFunc\n\tIndexFields          []string\n\tLimit                int64\n\tContinue             string\n}"
  }
]