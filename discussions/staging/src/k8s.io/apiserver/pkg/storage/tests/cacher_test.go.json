[
  {
    "id" : "a223ed5e-abd5-42d1-a353-d83144036d11",
    "prId" : 90091,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90091#pullrequestreview-393447365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1602f10a-c853-4fd1-9ba3-5aa487bc761f",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Changing this one is probably fine, as it's more of an integration test from the watch_cache perspective.",
        "createdAt" : "2020-04-14T17:21:21Z",
        "updatedAt" : "2020-04-17T06:03:44Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "a6043537-6881-416e-9d4f-f43d2d17a8a6",
        "parentId" : "1602f10a-c853-4fd1-9ba3-5aa487bc761f",
        "authorId" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "body" : "Reserved this change because `lowerBoundCapacity` is a private member.",
        "createdAt" : "2020-04-15T04:25:55Z",
        "updatedAt" : "2020-04-17T06:03:44Z",
        "lastEditedBy" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "56407b656c7acf6039cead0192070429e53a0c70",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +445,449 @@\tdefer tooOldWatcher.Stop()\n\t// Events happens in eventFreshDuration, cache expand without event \"Gone\".\n\tverifyWatchEvent(t, tooOldWatcher, watch.Added, podFoo)\n\n\tinitialWatcher, err := cacher.Watch(context.TODO(), \"pods/ns/foo\", fooCreated.ResourceVersion, storage.Everything)"
  },
  {
    "id" : "78f1580e-3609-40cc-a39b-13576bdc607e",
    "prId" : 75474,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75474#pullrequestreview-225530142",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8381aaf-303f-4224-8442-f1864038029f",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "nit: can you please split this line - it's pretty long",
        "createdAt" : "2019-04-11T13:26:45Z",
        "updatedAt" : "2019-04-16T11:06:05Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d70edd3d39d4430d71c4b7c9adba8df5ba7f16c8",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +787,791 @@\nfunc TestWatchDispatchBookmarkEvents(t *testing.T) {\n\tdefer utilfeaturetesting.SetFeatureGateDuringTest(t, utilfeature.DefaultFeatureGate, features.WatchBookmark, true)()\n\n\tserver, etcdStorage := newEtcdTestStorage(t, etcdtest.PathPrefix())"
  },
  {
    "id" : "23fa17f9-0e46-4436-a9f6-c23095501942",
    "prId" : 75474,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75474#pullrequestreview-225530142",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b5c4c62-62d8-458a-9b6a-6ccc666897b7",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "nit: can you please split this line - it's pretty long",
        "createdAt" : "2019-04-11T13:27:10Z",
        "updatedAt" : "2019-04-16T11:06:05Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d70edd3d39d4430d71c4b7c9adba8df5ba7f16c8",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +849,853 @@\nfunc TestWatchBookmarksWithCorrectResourceVersion(t *testing.T) {\n\tdefer utilfeaturetesting.SetFeatureGateDuringTest(t, utilfeature.DefaultFeatureGate, features.WatchBookmark, true)()\n\n\tserver, etcdStorage := newEtcdTestStorage(t, etcdtest.PathPrefix())"
  },
  {
    "id" : "e93ab8ea-3bee-4bad-81b7-ffb7c3dd1493",
    "prId" : 75389,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75389#pullrequestreview-217484014",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf948138-1cea-461c-acda-7f6e2c1bd3ce",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Have you considered / ruled-out an integration test as well?  Off the cuff I couldn't think of anything that would be effective in that mode, but was curious whether I'm just missing something.",
        "createdAt" : "2019-03-20T04:44:25Z",
        "updatedAt" : "2019-04-02T20:06:31Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "c1a23ef4-852f-49b6-840c-35b36fff9992",
        "parentId" : "cf948138-1cea-461c-acda-7f6e2c1bd3ce",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "I couldn't find a good way to directly verify chunking of reflector via an integration test since chunking is hidden from the caller in this flow. \r\n\r\nBut I'm poking around at the integration tests, and I can't find much for \"watch cache disabled\" behavior, so I can improve that so we test a reflector against a watch cache disabled apiserver. That would give us black box coverage for the reflector part of this change.",
        "createdAt" : "2019-03-20T18:17:16Z",
        "updatedAt" : "2019-04-02T20:06:31Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "6bb3ed36-54b9-48b2-a90a-cf8d22c5c19a",
        "parentId" : "cf948138-1cea-461c-acda-7f6e2c1bd3ce",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "I've added two more tests: unit test for chunked listing in the reflector, integration test for pager based listing for RV=0, both with watch cache enabled and disabled. Still no integration test specifically covering the functionality of this change, but all the constitute parts are now well covered and existing e2e and integration tests indirectly cover the end-to-end code paths.",
        "createdAt" : "2019-03-21T20:48:35Z",
        "updatedAt" : "2019-04-02T20:06:31Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5a4f09ab3ac15815ceb039fbc7f546266855fd6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +694,698 @@}\n\nfunc TestCacherListerWatcher(t *testing.T) {\n\tprefix := \"pods\"\n\tfn := func() runtime.Object { return &example.PodList{} }"
  }
]