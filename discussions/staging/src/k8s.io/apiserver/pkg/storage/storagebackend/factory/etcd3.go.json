[
  {
    "id" : "a91c2e8f-d1f5-4cff-a883-62d268fa149d",
    "prId" : 103216,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103216#pullrequestreview-702320854",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b329662-7a18-4f76-9b36-f56cd0eda622",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I don't know enough about the grpc wiring to know the implications of this bit... would like an ack from an etcd reviewer",
        "createdAt" : "2021-07-08T16:54:17Z",
        "updatedAt" : "2021-07-08T16:54:17Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c9513a9a-63d8-4d3d-b54d-82ae6e12f3a8",
        "parentId" : "8b329662-7a18-4f76-9b36-f56cd0eda622",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "suggest @ptabor or @mm4tt ",
        "createdAt" : "2021-07-08T16:56:49Z",
        "updatedAt" : "2021-07-08T16:56:49Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "51165919-cf3d-4eb6-909b-6edd43d7ca73",
        "parentId" : "8b329662-7a18-4f76-9b36-f56cd0eda622",
        "authorId" : "f474bb7f-c91e-4c7f-8215-aa1a0f8eb05a",
        "body" : "This part looks good to me.",
        "createdAt" : "2021-07-08T17:20:27Z",
        "updatedAt" : "2021-07-08T17:20:27Z",
        "lastEditedBy" : "f474bb7f-c91e-4c7f-8215-aa1a0f8eb05a",
        "tags" : [
        ]
      }
    ],
    "commit" : "71f810bb71ed7b87e02c91ebb879363f32dcfaac",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +152,156 @@\t\tdialOptions = append(dialOptions,\n\t\t\tgrpc.WithUnaryInterceptor(otelgrpc.UnaryClientInterceptor(tracingOpts...)),\n\t\t\tgrpc.WithStreamInterceptor(otelgrpc.StreamClientInterceptor(tracingOpts...)))\n\t}\n\tif egressDialer != nil {"
  },
  {
    "id" : "d6008e12-7744-4a6e-af75-c96e0598d00c",
    "prId" : 82048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82048#pullrequestreview-281019860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a703bf24-199a-4e3e-9607-60a8e03d0d26",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "If you look up the dialer each time instead, it'd make it easier to (in the future) change the dialers without having to restart?",
        "createdAt" : "2019-08-28T17:03:12Z",
        "updatedAt" : "2019-08-30T17:39:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "3ded7d84-d83a-4eb8-8161-0506245c2830",
        "parentId" : "a703bf24-199a-4e3e-9607-60a8e03d0d26",
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "While we could look up which dialer each time we cannot enable/disable the dialer each time (Although you could simulate this if you made it always enabled the feature and then switched between direct and other dialer options). Currently the egress (dialer) configuration is statically loaded at process start time and we explicitly have no plan to change that. I am not convinced that the extra code complexity is worth it for something we do not currently support.",
        "createdAt" : "2019-08-28T18:26:57Z",
        "updatedAt" : "2019-08-30T17:39:47Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      }
    ],
    "commit" : "edbb0fa2fe2084d5d9ce0cf9dc0d1b2d820bb392",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +130,134 @@\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treturn egressDialer(ctx, \"tcp\", u.Host)\n\t\t}\n\t\tdialOptions = append(dialOptions, grpc.WithContextDialer(dialer))"
  },
  {
    "id" : "0d95d12d-fb24-476c-a332-0e95a2abfc83",
    "prId" : 81531,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81531#pullrequestreview-280343586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8eca2232-e0a6-416b-a9f1-a8a170c91e0f",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "cc @hexfusion",
        "createdAt" : "2019-08-26T18:56:59Z",
        "updatedAt" : "2019-08-27T19:47:26Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "71bd17aa-1d84-434a-9aec-854c1c7e1dad",
        "parentId" : "8eca2232-e0a6-416b-a9f1-a8a170c91e0f",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "this is new?",
        "createdAt" : "2019-08-26T18:57:44Z",
        "updatedAt" : "2019-08-27T19:47:26Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "9e2c167a-779e-4d58-89c3-b8fcfafa68dc",
        "parentId" : "8eca2232-e0a6-416b-a9f1-a8a170c91e0f",
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "It is auto-registered in grpc-prometheus. This allows the grpc metrics to be registered to our wrapped global registry. @brancz actually made the changes in grpc prom to allow this to be possible. ",
        "createdAt" : "2019-08-26T19:24:48Z",
        "updatedAt" : "2019-08-27T19:47:26Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      },
      {
        "id" : "d8adcf0c-1aad-4b59-b198-628a2a6494a9",
        "parentId" : "8eca2232-e0a6-416b-a9f1-a8a170c91e0f",
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "For reference: https://github.com/kubernetes/kubernetes/pull/81387",
        "createdAt" : "2019-08-27T00:19:06Z",
        "updatedAt" : "2019-08-27T19:47:26Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      },
      {
        "id" : "5a546e5e-92a7-4eaf-95b2-41a154a5c483",
        "parentId" : "8eca2232-e0a6-416b-a9f1-a8a170c91e0f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think that explanation is worth adding as a comment.",
        "createdAt" : "2019-08-27T17:08:41Z",
        "updatedAt" : "2019-08-27T19:47:26Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "1700a315c188e4b9d434d1e51de75426aa9d7867",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +53,57 @@\t// we need to explicitly register these metrics to our global registry here.\n\t// For reference: https://github.com/kubernetes/kubernetes/pull/81387\n\tlegacyregistry.RawMustRegister(grpcprom.DefaultClientMetrics)\n}\n"
  },
  {
    "id" : "0cdfc44c-9660-4e1d-80c3-c25b04e94f1f",
    "prId" : 72896,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72896#pullrequestreview-192422673",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "325ad6cc-e321-440c-beec-701a7b8395d2",
        "parentId" : null,
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "I don't think we should report healthy on `rpctypes.ErrPermissionDenied`. ",
        "createdAt" : "2019-01-14T23:01:55Z",
        "updatedAt" : "2019-01-15T20:22:19Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      },
      {
        "id" : "6e20ff6c-8c1a-4bcf-93fd-793e2e73e239",
        "parentId" : "325ad6cc-e321-440c-beec-701a7b8395d2",
        "authorId" : "b1b2eb10-b0ac-41b5-8354-7697c1bce7f9",
        "body" : "I think you're right, I took this from etcd's healthcheck but it doesn't make a whole lot of sense for K8s which needs API access in order to function",
        "createdAt" : "2019-01-14T23:36:16Z",
        "updatedAt" : "2019-01-15T20:22:19Z",
        "lastEditedBy" : "b1b2eb10-b0ac-41b5-8354-7697c1bce7f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "df3033a24095551db25dbab385ac3e630c8bd280",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +77,81 @@\t\t_, err := client.Get(ctx, path.Join(c.Prefix, \"health\"))\n\t\tif err == nil {\n\t\t\treturn nil\n\t\t}\n\t\treturn fmt.Errorf(\"error getting data from etcd: %v\", err)"
  },
  {
    "id" : "ced85d38-deb8-4410-8a01-1bf0595e5916",
    "prId" : 68557,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68557#pullrequestreview-188644291",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6995a2d-e7a4-4b44-9ab7-d3e4b78fc205",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "deleting by key here this looks dangerous. we may delete wrong storage on racing by mistake amiright? deleting by pointer equality would be safer.\r\n",
        "createdAt" : "2018-09-12T13:09:44Z",
        "updatedAt" : "2019-01-03T11:01:59Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "62c866de-868c-4cee-b6da-e2ea62666f4f",
        "parentId" : "b6995a2d-e7a4-4b44-9ab7-d3e4b78fc205",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "not sure I can follow. The compactor is not by storage, but by transport config. Moreover, we lock before reading or writing to `compactors`.",
        "createdAt" : "2019-01-02T11:05:56Z",
        "updatedAt" : "2019-01-03T11:01:59Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "00a717b572f3582d0d20633644e827dd60991dce",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +166,170 @@\t\t\tcompactor.cancel()\n\t\t\tcompactor.client.Close()\n\t\t\tdelete(compactors, key)\n\t\t}\n\t}, nil"
  },
  {
    "id" : "d8e066bc-40b8-4c8d-a4fd-0d847fb40eb0",
    "prId" : 68557,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68557#pullrequestreview-188644624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7da05ad-afe4-42aa-9bda-d3f1f4a75e3b",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "> If the interval get smaller on repeated calls\r\n\r\ndo we have such use case? 🤔",
        "createdAt" : "2018-09-12T13:21:50Z",
        "updatedAt" : "2019-01-03T11:01:59Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "2d9db385-9d21-470b-b0b3-8a384dffd81b",
        "parentId" : "f7da05ad-afe4-42aa-9bda-d3f1f4a75e3b",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Our storage API allows different intervals. So we should support it here in the backend as well.",
        "createdAt" : "2019-01-02T11:06:56Z",
        "updatedAt" : "2019-01-03T11:01:59Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "00a717b572f3582d0d20633644e827dd60991dce",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +122,126 @@)\n\n// startCompactorOnce start one compactor per transport. If the interval get smaller on repeated calls, the\n// compactor is replaced. A destroy func is returned. If all destroy funcs with the same transport are called,\n// the compactor is stopped."
  },
  {
    "id" : "4b666ebd-eceb-4e2d-a116-85475cf2a89e",
    "prId" : 68557,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68557#pullrequestreview-188964894",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bada4d34-3f8a-4d02-b6f8-9e8c505a62b0",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : ">  \t\tcompactorClient, err := newETCD3Client(c)\r\n> \t\tif err != nil {\r\n> \t\t\treturn nil, err\r\n> \t\t}\r\n\r\nif `startCompactorOnce` quits here w/ an error, calling `stopCompactor()` will cause nil panic b/c in  \r\n\r\n> compactor := compactors[key]\r\n> \t\tcompactor.refs--\r\n\r\nthe `compactor` will be nil, we need to check key existence here. and `sync.Once` could be removed since that calling `destroyFunc` multiple times now is safe w/ a key existence check. we can keep the comments documenting that the destroyFunc might also be called by subresource storage. wdyt? @sttts \r\n\r\n",
        "createdAt" : "2019-01-03T05:53:19Z",
        "updatedAt" : "2019-01-03T11:01:59Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "ec7728a7-bce8-4b7d-bdd1-cde161c84e61",
        "parentId" : "bada4d34-3f8a-4d02-b6f8-9e8c505a62b0",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "> if `startCompactorOnce` quits here w/ an error, calling `stopCompactor()` will cause nil panic b/c in\r\n\r\nIn that case `newETCD3Storage` also returns an error. So there is no destroy func returned to be called. What do I miss?\r\n\r\nWe can't remove the `sync.Once` because the ref counting logic expect exactly one `stopCompactor` call per `startCompactorOnce`. For history wiring reasons we don't know how often the `destroyFunc` is called (storage objects are reused leading to multiple calls; bad design long ago, needs a major cleanup).",
        "createdAt" : "2019-01-03T10:46:26Z",
        "updatedAt" : "2019-01-03T11:02:00Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "00a717b572f3582d0d20633644e827dd60991dce",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +189,193 @@\t\t// TODO: fix duplicated storage destroy calls higher level\n\t\tonce.Do(func() {\n\t\t\tstopCompactor()\n\t\t\tclient.Close()\n\t\t})"
  },
  {
    "id" : "fd2a951a-bc64-4225-8b79-f2c4c49c1d9c",
    "prId" : 61459,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61459#pullrequestreview-111542899",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76a653b3-a322-4722-a56c-554d3b2394f3",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "@kubernetes/sig-scalability-pr-reviews - Do you have any stats on a sane default on establishing a connection on a loaded cluster?  10 seems fine to me, but just want to be sure. \r\n\r\n/cc @jpbetz ",
        "createdAt" : "2018-04-11T15:12:34Z",
        "updatedAt" : "2018-04-11T15:12:47Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "9fe605e8-6b62-4e00-a43e-62becea28590",
        "parentId" : "76a653b3-a322-4722-a56c-554d3b2394f3",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "/cc @gyuho ",
        "createdAt" : "2018-04-12T04:16:48Z",
        "updatedAt" : "2018-04-12T04:16:48Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "ad89474c-f426-40b5-8339-839e1bce1fc8",
        "parentId" : "76a653b3-a322-4722-a56c-554d3b2394f3",
        "authorId" : "c7dbd810-160c-4078-b41d-e3d60320ffc2",
        "body" : "@timothysc @jpbetz We don't have any stats on dial timeout, but 10-second seems fine and is better than none. If dial timeout is not specified, `grpc.DialContext` would block on unavailable nodes for initial connection creation.\r\n\r\nWe are more interested in finding out optimal values for keepalives (default in k8s https://github.com/kubernetes/kubernetes/pull/58008/files).",
        "createdAt" : "2018-04-12T04:25:28Z",
        "updatedAt" : "2018-04-12T04:25:29Z",
        "lastEditedBy" : "c7dbd810-160c-4078-b41d-e3d60320ffc2",
        "tags" : [
        ]
      },
      {
        "id" : "424191c1-199d-4e9c-b0b9-03c487aea6e9",
        "parentId" : "76a653b3-a322-4722-a56c-554d3b2394f3",
        "authorId" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "body" : "we should better expose this keepalive config as a follow up.",
        "createdAt" : "2018-04-12T09:25:43Z",
        "updatedAt" : "2018-04-12T09:25:43Z",
        "lastEditedBy" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "814401fc902a7083bfd9933e245a2be62abfed60",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +36,40 @@\tkeepaliveTimeout = 10 * time.Second\n\t// dialTimeout is the timeout for failing to establish a connection.\n\tdialTimeout = 10 * time.Second\n)\n"
  },
  {
    "id" : "8bbd4aac-af7f-478b-8962-d4ebc4435f25",
    "prId" : 48921,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48921#pullrequestreview-56530643",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00cdce94-60f2-46f8-823b-d0a0cf6dbac4",
        "parentId" : null,
        "authorId" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "body" : "probably we should simply pass config into etcd3.New instead of separated field :P",
        "createdAt" : "2017-08-16T05:01:57Z",
        "updatedAt" : "2017-09-01T14:50:06Z",
        "lastEditedBy" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "tags" : [
        ]
      },
      {
        "id" : "29d72988-a9ae-4d11-9a21-9fbf13db1ab5",
        "parentId" : "00cdce94-60f2-46f8-823b-d0a0cf6dbac4",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yeah, this code needs a good hard refactor.  But I don't want to do it here, and I wouldn't stop just at the factory (the three levels above that are not well composed right now).",
        "createdAt" : "2017-08-16T05:03:29Z",
        "updatedAt" : "2017-09-01T14:50:06Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "f23f3000-f9c6-4139-bc9a-f4ae88a5d567",
        "parentId" : "00cdce94-60f2-46f8-823b-d0a0cf6dbac4",
        "authorId" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "body" : "sure. agreed.",
        "createdAt" : "2017-08-16T05:11:13Z",
        "updatedAt" : "2017-09-01T14:50:06Z",
        "lastEditedBy" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b8e42afa6d6abb459c332690c931585c0177b9c",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +64,68 @@\t\treturn etcd3.New(client, c.Codec, c.Prefix, transformer, c.Paging), destroyFunc, nil\n\t}\n\treturn etcd3.NewWithNoQuorumRead(client, c.Codec, c.Prefix, transformer, c.Paging), destroyFunc, nil\n}"
  },
  {
    "id" : "d89eebdb-4cc6-4baa-9e74-4fd33b8f301c",
    "prId" : 41939,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41939#pullrequestreview-36303051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95ce7173-462d-4850-94d5-c7eea6c13f1e",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Are there plans to ever make something other than `IdentityTransformer` the out-of-the-box default?",
        "createdAt" : "2017-05-03T01:09:25Z",
        "updatedAt" : "2017-05-17T02:37:09Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "fce23e47-587b-4cfa-97b9-672c608ee925",
        "parentId" : "95ce7173-462d-4850-94d5-c7eea6c13f1e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Maaaybe gzip/otherzips?",
        "createdAt" : "2017-05-04T15:27:59Z",
        "updatedAt" : "2017-05-17T02:37:09Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "7827899b1dd22074eb230e241f63e69499046fb6",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +59,63 @@\ttransformer := c.Transformer\n\tif transformer == nil {\n\t\ttransformer = value.IdentityTransformer\n\t}\n\tif c.Quorum {"
  },
  {
    "id" : "5f3ea56d-e5e3-4d08-ba6b-3dddca3af920",
    "prId" : 41939,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41939#pullrequestreview-53737578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76212c6e-8102-4d42-8f6c-a460cf247cad",
        "parentId" : null,
        "authorId" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "body" : "I don't see the similar change for the `newETCD2Storage()` that still use hard-coded `etcd.IdentityTransformer`. Was it on purpose?",
        "createdAt" : "2017-05-22T14:53:14Z",
        "updatedAt" : "2017-05-22T14:53:14Z",
        "lastEditedBy" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "tags" : [
        ]
      },
      {
        "id" : "a5b599ad-155e-45db-982e-8276d1310da3",
        "parentId" : "76212c6e-8102-4d42-8f6c-a460cf247cad",
        "authorId" : "dd7ae991-dbbc-4a29-896b-4334bdee748b",
        "body" : "Same question here, any plan to support etcd2?",
        "createdAt" : "2017-08-02T08:58:12Z",
        "updatedAt" : "2017-08-02T08:58:12Z",
        "lastEditedBy" : "dd7ae991-dbbc-4a29-896b-4334bdee748b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7827899b1dd22074eb230e241f63e69499046fb6",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +28,32 @@)\n\nfunc newETCD3Storage(c storagebackend.Config) (storage.Interface, DestroyFunc, error) {\n\ttlsInfo := transport.TLSInfo{\n\t\tCertFile: c.CertFile,"
  }
]