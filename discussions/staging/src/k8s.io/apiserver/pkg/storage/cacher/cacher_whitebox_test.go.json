[
  {
    "id" : "f1ffc60d-77a4-4f14-a023-ba9c315cfa32",
    "prId" : 96662,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96662#pullrequestreview-534122664",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a75d870-7b46-433b-991d-0984ad3e30c0",
        "parentId" : null,
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "nit: Moving this function makes for a diff that is difficult to review.",
        "createdAt" : "2020-11-18T19:38:22Z",
        "updatedAt" : "2020-11-19T06:57:35Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "e1c6b298-10d7-4e62-bb36-0e570b11ceab",
        "parentId" : "0a75d870-7b46-433b-991d-0984ad3e30c0",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yes - but in order to fake dispatchBudget (which is private field) it has to be here :(",
        "createdAt" : "2020-11-19T06:48:15Z",
        "updatedAt" : "2020-11-19T06:57:42Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "37b0004978ebc77838c1a83cf5211f5216e7b3b4",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1007,1011 @@func (f *fakeTimeBudget) returnUnused(_ time.Duration) {}\n\nfunc TestStartingResourceVersion(t *testing.T) {\n\tbackingStorage := &dummyStorage{}\n\tcacher, _, err := newTestCacher(backingStorage)"
  },
  {
    "id" : "b59390d4-7415-4188-8cec-88eb82e64aa6",
    "prId" : 95869,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95869#pullrequestreview-516934237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c836ed23-83fa-400e-af1c-d4981076e582",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I'm not very familiar with how this is used... what does this duration represent/do?",
        "createdAt" : "2020-10-26T15:10:48Z",
        "updatedAt" : "2020-10-26T19:09:23Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "216ad6ad-5595-4193-89cc-61556424f7df",
        "parentId" : "c836ed23-83fa-400e-af1c-d4981076e582",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "It's described in the interface definition in time_budget.go.",
        "createdAt" : "2020-10-26T16:04:12Z",
        "updatedAt" : "2020-10-26T19:09:23Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6eb71c4089f69c7cc35ef2fd13bba4329b5716b9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1001,1005 @@type fakeTimeBudget struct{}\n\nfunc (f *fakeTimeBudget) takeAvailable() time.Duration {\n\treturn 2 * time.Second\n}"
  },
  {
    "id" : "bc4b1a1a-d685-4cbd-8a30-0758347f17e0",
    "prId" : 91595,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91595#pullrequestreview-422384515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0de2764d-7d5d-4962-9224-cdef23c3e0f1",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Thanks for adding this !",
        "createdAt" : "2020-06-02T06:54:56Z",
        "updatedAt" : "2020-06-03T17:22:00Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c99949ae6b4a74e4ffda0caba86c151c23d579e",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +400,404 @@}\n\nfunc TestGetCacheBypass(t *testing.T) {\n\tbackingStorage := &dummyStorage{}\n\tcacher, _, err := newTestCacher(backingStorage, 1)"
  },
  {
    "id" : "867adefc-5762-4791-bea9-354e78892acd",
    "prId" : 81914,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81914#pullrequestreview-292343912",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a00ef7e-86b3-49b3-b26b-7d217bb5e097",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "initialize all pods (including the podNDeletedAt pods) before we pass them to any watch cache methods to ensure no modifications are made by the watch cache and bleed into comparisons\r\n\r\nsimilarly, initialize all expected watch event slices with copies of the pods before passing the pods into any watch cache methods to make sure our comparisons are insulated from internal changes made by the watch cache\r\n\r\n```\r\npod1 := ...\r\npod2 := ...\r\npod3 := ...\r\npod4 := ...\r\npod1DeletedAt2 := ...\r\npod2DeletedAt3 := ...\r\neverythingWatcherEvents := []watch.Event{\r\n  {Type: watch.Added, Object: pod1.DeepCopy()},\r\n  ...\r\n}\r\nfooWatcherEvents := []watch.Event{\r\n  ...\r\n}\r\nbarWatcherEvents := []watch.Event{\r\n  ...\r\n}\r\n```\r\n",
        "createdAt" : "2019-09-20T14:33:01Z",
        "updatedAt" : "2019-09-30T08:49:44Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6114df43-f8fc-44b3-af62-8219d3a81cb4",
        "parentId" : "5a00ef7e-86b3-49b3-b26b-7d217bb5e097",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "done",
        "createdAt" : "2019-09-24T11:14:23Z",
        "updatedAt" : "2019-09-30T08:49:44Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "25a728ae5eb0ae067d21679fad915c0555242470",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +986,990 @@\tpod1DeletedAt2.ResourceVersion = \"1002\"\n\tpod2DeletedAt3 := pod2.DeepCopyObject().(*examplev1.Pod)\n\tpod2DeletedAt3.ResourceVersion = \"1003\"\n\n\tallEvents := []watch.Event{"
  },
  {
    "id" : "9429355b-d3da-46fb-82d9-96287e4823b7",
    "prId" : 80692,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80692#pullrequestreview-268768726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd85d52b-e41e-4f20-a24c-453caf08b194",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "1. With this test, the keeping the previous one doesn't make sense imho.\r\n\r\n2. Did you check that this test is really catching the problem - it's not actually that obvious to me.\r\n[I think that with 10 watchers, it actually may not really be failing.]\r\nThe way to check that would be to temporary move the lock to where it was before and run this test and this test should fail.",
        "createdAt" : "2019-07-29T19:00:52Z",
        "updatedAt" : "2019-07-30T13:49:16Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "43c78371-802c-49f6-aba3-54679eddc343",
        "parentId" : "bd85d52b-e41e-4f20-a24c-453caf08b194",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "@wojtek-t \r\nI removed the first test since there is significant overlap between the two.\r\n\r\nI increased number of watchers to 20.\r\n\r\nw.r.t. triggering the race condition, the following has to be satisfied:\r\n\r\n1. addWatcher runs and obtains bucketID but hasn't taken the lock\r\n2. popExpiredWatchers runs, takes the lock and processes the watchers at position t.startBucketID\r\n3. before addWatcher gets a chance to resume, popExpiredWatchers advances t.startBucketID\r\n4. addWatcher resumes with bucketID lower than t.startBucketID - leading to leak\r\n\r\nNote that both func's use t.clock.Now() at the beginning.\r\nHowever, addWatcher doesn't take the lock even though it runs prior to popExpiredWatchers.\r\n\r\nWith instrumentation, it would be easier to show this race condition but I don't think that's what we should do.",
        "createdAt" : "2019-07-29T19:16:16Z",
        "updatedAt" : "2019-07-30T13:49:16Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "2272bc3e-02f1-4591-aa6d-9013fd56f3ab",
        "parentId" : "bd85d52b-e41e-4f20-a24c-453caf08b194",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I wasn't asking what has to happen to trigger a race.\r\nAnd I don't want to you to instrument the code.\r\n\r\nI want to see that it was failing before.\r\n\r\nI guess what Jordan and myself are trying to say is that if you have a test that is not failing even with the race that Jordan found in majority of cases, we will most probably not catch the regression if we regress again in the future (and that is exactly the point of having this test).",
        "createdAt" : "2019-07-29T19:48:14Z",
        "updatedAt" : "2019-07-30T13:49:16Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "ee53c5d9-7aa5-411a-ac78-cff5fad24c5d",
        "parentId" : "bd85d52b-e41e-4f20-a24c-453caf08b194",
        "authorId" : "2298dd66-0920-41ef-85a0-e8d08cffdc22",
        "body" : "I did not understand the purpose of this case, sorry for that. I think we need a case which runs dispatchEvents and Watch, and verify the watcher is leaked after that.",
        "createdAt" : "2019-07-31T03:28:55Z",
        "updatedAt" : "2019-07-31T03:28:55Z",
        "lastEditedBy" : "2298dd66-0920-41ef-85a0-e8d08cffdc22",
        "tags" : [
        ]
      }
    ],
    "commit" : "0204bc7e2594c297f146701132ee969721ada2ab",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +588,592 @@}\n\nfunc TestCacherNoLeakWithMultipleWatchers(t *testing.T) {\n\tdefer featuregatetesting.SetFeatureGateDuringTest(t, utilfeature.DefaultFeatureGate, features.WatchBookmark, true)()\n\tbackingStorage := &dummyStorage{}"
  },
  {
    "id" : "aa1759ac-904f-48ec-bed9-86366d9d7d0d",
    "prId" : 78029,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78029#pullrequestreview-239157670",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "229ca7d2-3b61-4751-9c00-ea6889953223",
        "parentId" : null,
        "authorId" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "body" : "do you need this defer given the explicit call cacher.Stop() at line 525?",
        "createdAt" : "2019-05-17T22:09:11Z",
        "updatedAt" : "2019-05-17T22:24:44Z",
        "lastEditedBy" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "tags" : [
        ]
      },
      {
        "id" : "f5a78e84-84ff-4d78-b9e5-ca79aad64836",
        "parentId" : "229ca7d2-3b61-4751-9c00-ea6889953223",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Yes. The stop on line 525 is required to trigger the tear down that allows the test to succeed. This is a backstop in case of panic/test failure",
        "createdAt" : "2019-05-17T22:28:09Z",
        "updatedAt" : "2019-05-17T22:28:09Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea464235a8e10b2b8c83fc929885295dd1a5adb7",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +500,504 @@\tbackingStorage := &dummyStorage{}\n\tcacher, _ := newTestCacher(backingStorage, 1000)\n\tdefer cacher.Stop()\n\n\t// Wait until cacher is initialized."
  },
  {
    "id" : "e53309cf-7f80-45e9-b40f-47cd6755b162",
    "prId" : 75474,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75474#pullrequestreview-225530142",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "842dc98f-b00c-42e1-870c-9ea94868e8ff",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "One test that I'm missing here is verifying whether bookmarks have correct RVs.\r\nThe test may be something like:\r\n- generate a stream of pods with consecutive RVs\r\n- open a watch with say 1s deadline\r\n- verify that when it received bookmark its RV was not lower than RV of previous object, and next object will have higher RV",
        "createdAt" : "2019-04-11T09:53:22Z",
        "updatedAt" : "2019-04-16T11:06:05Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "52a47eba-cbb7-41ca-a403-4f1d55584c58",
        "parentId" : "842dc98f-b00c-42e1-870c-9ea94868e8ff",
        "authorId" : "2298dd66-0920-41ef-85a0-e8d08cffdc22",
        "body" : "done",
        "createdAt" : "2019-04-11T13:14:59Z",
        "updatedAt" : "2019-04-16T11:06:05Z",
        "lastEditedBy" : "2298dd66-0920-41ef-85a0-e8d08cffdc22",
        "tags" : [
        ]
      },
      {
        "id" : "d09176aa-489f-4d69-9cf3-b73fc65b88c5",
        "parentId" : "842dc98f-b00c-42e1-870c-9ea94868e8ff",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "awesome - thanks!",
        "createdAt" : "2019-04-11T13:26:26Z",
        "updatedAt" : "2019-04-16T11:06:05Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d70edd3d39d4430d71c4b7c9adba8df5ba7f16c8",
    "line" : 272,
    "diffHunk" : "@@ -1,1 +697,701 @@\t\tw.Stop()\n\t}\n}"
  },
  {
    "id" : "b1169447-f128-4183-a09a-5d3750f7be84",
    "prId" : 75474,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75474#pullrequestreview-225530142",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63e32607-8dc8-4822-98f0-bfe4061b007d",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "nit add an empty line before this",
        "createdAt" : "2019-04-11T13:22:00Z",
        "updatedAt" : "2019-04-16T11:06:05Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d70edd3d39d4430d71c4b7c9adba8df5ba7f16c8",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +540,544 @@\tdefer cacher.Stop()\n\n\t// Wait until cacher is initialized.\n\tcacher.ready.wait()\n\tpred := storage.Everything"
  },
  {
    "id" : "5bf46232-6b42-4cd7-a39b-58cb6c0d2655",
    "prId" : 75474,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75474#pullrequestreview-227055477",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77d3b627-af1f-4ddf-9913-9ace83a9231b",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "nit: can you please split this line - it's pretty long",
        "createdAt" : "2019-04-11T13:22:19Z",
        "updatedAt" : "2019-04-16T11:06:05Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "9da5dd43-9768-4984-bbb6-3c18b83fe3f8",
        "parentId" : "77d3b627-af1f-4ddf-9913-9ace83a9231b",
        "authorId" : "2298dd66-0920-41ef-85a0-e8d08cffdc22",
        "body" : "Kubernetes does not split long line, I think it is consistent here. ",
        "createdAt" : "2019-04-12T02:16:50Z",
        "updatedAt" : "2019-04-16T11:06:05Z",
        "lastEditedBy" : "2298dd66-0920-41ef-85a0-e8d08cffdc22",
        "tags" : [
        ]
      },
      {
        "id" : "0c8daf39-1dae-4cc4-9f06-88804d9d92c3",
        "parentId" : "77d3b627-af1f-4ddf-9913-9ace83a9231b",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I disagree - there are many places where we split the lines too - in fact k8s isn't consistent with htis...",
        "createdAt" : "2019-04-12T08:42:35Z",
        "updatedAt" : "2019-04-16T11:06:05Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "ae769094-9763-4e23-aa92-c101f382d2b1",
        "parentId" : "77d3b627-af1f-4ddf-9913-9ace83a9231b",
        "authorId" : "2298dd66-0920-41ef-85a0-e8d08cffdc22",
        "body" : "split here will make SetFeatureGateDuringTest check failed, keep it now.",
        "createdAt" : "2019-04-15T06:31:11Z",
        "updatedAt" : "2019-04-16T11:06:05Z",
        "lastEditedBy" : "2298dd66-0920-41ef-85a0-e8d08cffdc22",
        "tags" : [
        ]
      },
      {
        "id" : "739a7608-3476-429b-832b-24f996e649cf",
        "parentId" : "77d3b627-af1f-4ddf-9913-9ace83a9231b",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I can't believe it, though I'm not going to block this PR on it...",
        "createdAt" : "2019-04-16T08:37:13Z",
        "updatedAt" : "2019-04-16T11:06:05Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d70edd3d39d4430d71c4b7c9adba8df5ba7f16c8",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +535,539 @@\nfunc testCacherSendBookmarkEvents(t *testing.T, watchCacheEnabled, allowWatchBookmarks, expectedBookmarks bool) {\n\tdefer utilfeaturetesting.SetFeatureGateDuringTest(t, utilfeature.DefaultFeatureGate, features.WatchBookmark, watchCacheEnabled)()\n\tbackingStorage := &dummyStorage{}\n\tcacher, _ := newTestCacher(backingStorage, 1000)"
  },
  {
    "id" : "8457e071-e46d-44e7-8463-ad5388f08fc3",
    "prId" : 75474,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75474#pullrequestreview-225530142",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23403665-9c20-4f9e-b427-9935c0ccccd5",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "nit: can you please split this line - it's pretty long",
        "createdAt" : "2019-04-11T13:25:58Z",
        "updatedAt" : "2019-04-16T11:06:05Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d70edd3d39d4430d71c4b7c9adba8df5ba7f16c8",
    "line" : 209,
    "diffHunk" : "@@ -1,1 +634,638 @@\nfunc TestDispatchingBookmarkEventsWithConcurrentStop(t *testing.T) {\n\tdefer utilfeaturetesting.SetFeatureGateDuringTest(t, utilfeature.DefaultFeatureGate, features.WatchBookmark, true)()\n\tbackingStorage := &dummyStorage{}\n\tcacher, _ := newTestCacher(backingStorage, 1000)"
  },
  {
    "id" : "842b0071-dd77-413f-bbf0-710ef83710b0",
    "prId" : 70735,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70735#pullrequestreview-174388317",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2a43076-3aa2-4fb9-8f8b-9e941c987118",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "make a second call without rv=0 to make sure our dummy error makes it through the layers?",
        "createdAt" : "2018-11-13T14:11:14Z",
        "updatedAt" : "2018-11-13T15:52:41Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "3b87443f-ebd5-40d5-aaf9-90bb04fbb5ef",
        "parentId" : "e2a43076-3aa2-4fb9-8f8b-9e941c987118",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "done",
        "createdAt" : "2018-11-13T14:27:09Z",
        "updatedAt" : "2018-11-13T15:52:41Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4242d1b760314adc69498b1f523a4759c446d7c0",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +316,320 @@\t// Inject error to underlying layer and check if cacher is not bypassed.\n\tbackingStorage.err = errDummy\n\terr := cacher.List(context.TODO(), \"pods/ns\", \"0\", pred, result)\n\tif err != nil {\n\t\tt.Errorf(\"List with Limit and RV=0 should be served from cache: %v\", err)"
  },
  {
    "id" : "c6b0c5f6-09c7-4fdd-a288-ccebc194e171",
    "prId" : 70735,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70735#pullrequestreview-174388363",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da9b88e5-c3bb-438f-ba7b-26410ff4bbaa",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "same here, make a second call that hits storage to make sure our error is surfaced when storage is called",
        "createdAt" : "2018-11-13T14:11:35Z",
        "updatedAt" : "2018-11-13T15:52:41Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "0dd23f38-3ae1-421f-a360-241d3c5bac11",
        "parentId" : "da9b88e5-c3bb-438f-ba7b-26410ff4bbaa",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "done",
        "createdAt" : "2018-11-13T14:27:13Z",
        "updatedAt" : "2018-11-13T15:52:41Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4242d1b760314adc69498b1f523a4759c446d7c0",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +342,346 @@\t// Inject error to underlying layer and check if cacher is not bypassed.\n\tbackingStorage.err = errDummy\n\terr := cacher.GetToList(context.TODO(), \"pods/ns\", \"0\", pred, result)\n\tif err != nil {\n\t\tt.Errorf(\"GetToList with Limit and RV=0 should be served from cache: %v\", err)"
  }
]