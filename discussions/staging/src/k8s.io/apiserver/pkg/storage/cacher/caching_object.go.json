[
  {
    "id" : "b95c7403-b5c7-4e1e-a2d8-780bf921e5df",
    "prId" : 81914,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81914#pullrequestreview-279896584",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9fa9377-2834-4574-9625-d28ab00bae47",
        "parentId" : null,
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Concurrency looks right here. Fast too.",
        "createdAt" : "2019-08-26T21:21:45Z",
        "updatedAt" : "2019-09-30T08:49:44Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "27dca755-c8a8-4e6d-b146-a29465fc6edc",
        "parentId" : "c9fa9377-2834-4574-9625-d28ab00bae47",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Thanks!",
        "createdAt" : "2019-08-27T00:02:54Z",
        "updatedAt" : "2019-09-30T08:49:44Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "25a728ae5eb0ae067d21679fad915c0555242470",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +122,126 @@// It assumes that for a given identifier, the encode function always encodes\n// each input object into the same output format.\nfunc (o *cachingObject) CacheEncode(id runtime.Identifier, encode func(runtime.Object, io.Writer) error, w io.Writer) error {\n\tresult := o.getSerializationResult(id)\n\tresult.once.Do(func() {"
  },
  {
    "id" : "1f652aa1-95ce-4fed-b862-9130dfcc6dfd",
    "prId" : 81914,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81914#pullrequestreview-294802397",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a803d644-5d6f-4b7e-991b-e90727b8b6b6",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "move this before the RLock/RUnlock/DeepCopy and drop the nested function",
        "createdAt" : "2019-09-27T14:11:24Z",
        "updatedAt" : "2019-09-30T08:49:44Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c16bae68-c1af-47b9-be48-e8417bf5b8ae",
        "parentId" : "a803d644-5d6f-4b7e-991b-e90727b8b6b6",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "done",
        "createdAt" : "2019-09-30T07:55:44Z",
        "updatedAt" : "2019-09-30T08:49:44Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "25a728ae5eb0ae067d21679fad915c0555242470",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +159,163 @@\t// cache is only an optimization we ignore copying it.\n\tresult := &cachingObject{}\n\tresult.serializations.Store(make(serializationsCache))\n\n\to.lock.RLock()"
  },
  {
    "id" : "2d0f1cbe-cd73-4a03-b660-42c07008d9f1",
    "prId" : 81914,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81914#pullrequestreview-295622943",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d7ccb1b-8da7-49a6-a667-85a25bd0fb65",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "nit: if we're already locked when we call `invalidateCacheLocked`, we shouldn't need the additional lock on the invalidationCacheTimestamp, right?",
        "createdAt" : "2019-10-01T13:51:06Z",
        "updatedAt" : "2019-10-01T13:51:12Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "27d7e28d-6fb9-452d-86aa-8324a96aa011",
        "parentId" : "1d7ccb1b-8da7-49a6-a667-85a25bd0fb65",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "The lock is per object, right? And the one I'm acquiring here is a global one.\r\nSo I think it's actually needed.",
        "createdAt" : "2019-10-01T13:55:21Z",
        "updatedAt" : "2019-10-01T13:55:21Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "55123047-aa4d-406a-9bf3-aefafc7958a2",
        "parentId" : "1d7ccb1b-8da7-49a6-a667-85a25bd0fb65",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "you're right",
        "createdAt" : "2019-10-01T13:56:45Z",
        "updatedAt" : "2019-10-01T13:56:46Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "25a728ae5eb0ae067d21679fad915c0555242470",
    "line" : 194,
    "diffHunk" : "@@ -1,1 +192,196 @@\t// OTOH, we don't want to spam logs with it.\n\t// So we try to log it at most once per second.\n\tif shouldLogCacheInvalidation(time.Now()) {\n\t\tklog.Warningf(\"Unexpected cache invalidation for %#v\\n%s\", o.object, string(debug.Stack()))\n\t}"
  }
]