[
  {
    "id" : "ec399215-a5d1-450d-92ba-d0bf318bbc08",
    "prId" : 99021,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99021#pullrequestreview-598755636",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51b69d46-b29e-455d-a907-8d6b00dda9bc",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "update the comment for the `EfficientWatchResumption` featuregate around like 153",
        "createdAt" : "2021-02-25T15:38:37Z",
        "updatedAt" : "2021-02-25T16:25:40Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "fcb81e69-fdbc-460a-a1e2-eee445329cd2",
        "parentId" : "51b69d46-b29e-455d-a907-8d6b00dda9bc",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "done",
        "createdAt" : "2021-02-25T16:25:35Z",
        "updatedAt" : "2021-02-25T16:25:40Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6b3b561bc0eaba67de5b7543a64cbf3c65cc893a",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +187,191 @@\tSelectorIndex:            {Default: true, PreRelease: featuregate.GA, LockToDefault: true},\n\tWarningHeaders:           {Default: true, PreRelease: featuregate.Beta},\n\tEfficientWatchResumption: {Default: true, PreRelease: featuregate.Beta},\n\tAPIServerIdentity:        {Default: false, PreRelease: featuregate.Alpha},\n}"
  },
  {
    "id" : "6a041ff3-1273-4eef-8cb8-8557018798a6",
    "prId" : 94397,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94397#pullrequestreview-479998329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e59a44f5-5725-4808-871b-bee1fb6c0359",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Wait, this was already here? Do we not test feature gates in both positions in tests?\r\n\r\nDid it work before? If it didn't work before, then no one could possibly have tested it and it's not clear to me that it's fair or safe to go to beta.",
        "createdAt" : "2020-09-01T16:09:19Z",
        "updatedAt" : "2020-09-01T18:58:06Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "915c84d5-b83b-495e-8377-da4f942cd3e6",
        "parentId" : "e59a44f5-5725-4808-871b-bee1fb6c0359",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Apparently not in unit tests...\r\n\r\nThe feature gate was there and the self-linking logic itself was gated.",
        "createdAt" : "2020-09-01T16:47:34Z",
        "updatedAt" : "2020-09-01T18:58:06Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "61304b2d-613d-408c-b6b2-4550a7c0e7d4",
        "parentId" : "e59a44f5-5725-4808-871b-bee1fb6c0359",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Actually - it seems that only a few e2e tests are running with all Alpha features enabled:\r\nhttps://github.com/kubernetes/test-infra/blob/03cbb16ef550658d61fb14912d3dd19b1cd7fa21/config/jobs/kubernetes/sig-cloud-provider/gcp/gcp-gce.yaml#L428\r\n\r\nThis is why all of these weren't caught...",
        "createdAt" : "2020-09-01T18:12:52Z",
        "updatedAt" : "2020-09-01T18:58:06Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2539912a2245a53f6612100a32af96dd71a2ad4f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +160,164 @@\tWatchBookmark:           {Default: true, PreRelease: featuregate.GA, LockToDefault: true},\n\tAPIPriorityAndFairness:  {Default: false, PreRelease: featuregate.Alpha},\n\tRemoveSelfLink:          {Default: true, PreRelease: featuregate.Beta},\n\tSelectorIndex:           {Default: true, PreRelease: featuregate.Beta},\n\tWarningHeaders:          {Default: true, PreRelease: featuregate.Beta},"
  },
  {
    "id" : "affcd26a-74e1-45f0-8c76-7f6552111dc3",
    "prId" : 88290,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88290#pullrequestreview-361967841",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4da8584-c563-4714-b8e1-5b7db2f01553",
        "parentId" : null,
        "authorId" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "body" : "Just to confirm I'm understanding the KEP - do we ever intend to mark `ValidateProxyRedirects` as deprecated? Or as that unnecessary because its only utilized in conjunction with `StreamingProxyRedirects`, and we are marking `StreamingProxyRedirects` as deprecated (so when the time comes, we can just delete `StreamingProxyRedirects`)?",
        "createdAt" : "2020-02-19T13:30:43Z",
        "updatedAt" : "2020-02-19T18:54:15Z",
        "lastEditedBy" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "tags" : [
        ]
      },
      {
        "id" : "487b604a-9f21-4193-9d95-718551f817ee",
        "parentId" : "e4da8584-c563-4714-b8e1-5b7db2f01553",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Good question, I was thinking about it a bit more when writing this change. The original KEP moved ValidateProxyRedirects to GA first, but folks thought that was weird since it would then be deleted. It might be more appropriate to mark it as deprecated, since it's going away, but I don't want people to see \"oh this is deprecated, I should disable it\", since it's dangerous to disable it before removing streaming proxy redirects.\r\n\r\nI'm thinking of just leaving it as Beta, and marking it as deprecated once the behavior is removed (the feature gate can be removed a few releases after that). WDYT?",
        "createdAt" : "2020-02-19T18:42:52Z",
        "updatedAt" : "2020-02-19T18:54:15Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "c1f0f0ca-db44-4977-a04c-cc803b9f3972",
        "parentId" : "e4da8584-c563-4714-b8e1-5b7db2f01553",
        "authorId" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "body" : "That rationale makes sense to me! Mind capturing what yousaid above either in the KEP, commit message, or PR body? Or even a comment?\r\n\r\nThanks :)",
        "createdAt" : "2020-02-20T14:56:00Z",
        "updatedAt" : "2020-02-20T14:56:00Z",
        "lastEditedBy" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "tags" : [
        ]
      }
    ],
    "commit" : "98ad7416faa5d393e18f29ccff11bc131338cab4",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +161,165 @@var defaultKubernetesFeatureGates = map[featuregate.Feature]featuregate.FeatureSpec{\n\tStreamingProxyRedirects: {Default: true, PreRelease: featuregate.Deprecated},\n\tValidateProxyRedirects:  {Default: true, PreRelease: featuregate.Beta},\n\tAdvancedAuditing:        {Default: true, PreRelease: featuregate.GA},\n\tDynamicAuditing:         {Default: false, PreRelease: featuregate.Alpha},"
  },
  {
    "id" : "7c082038-a9c2-49c0-9263-15f351fd35c4",
    "prId" : 85260,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85260#pullrequestreview-317075310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f22201e8-6bc9-4b16-8524-1a973450f1d1",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "is `APIFlowControl` a better name?",
        "createdAt" : "2019-11-14T08:42:04Z",
        "updatedAt" : "2019-11-14T08:42:04Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "5ddb1a7c-7cf7-4196-9397-e1a79dc79da2",
        "parentId" : "f22201e8-6bc9-4b16-8524-1a973450f1d1",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I think not.  To me, \"flow control\" still sounds pretty vague; there are many different sorts of flow control that are possible.",
        "createdAt" : "2019-11-14T16:09:57Z",
        "updatedAt" : "2019-11-14T16:09:57Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "76d090e30f917888c5882228f7261ed31a34a2ab",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +134,138 @@\t//\n\t// Enables managing request concurrency with prioritization and fairness at each server\n\tAPIPriorityAndFairness featuregate.Feature = \"APIPriorityAndFairness\"\n\n\t// owner: @wojtek-t"
  },
  {
    "id" : "744356e9-558f-473d-bc8e-b99ba5663066",
    "prId" : 66516,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66516#pullrequestreview-158248088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68a15d82-939f-45b0-9680-82ff16e86800",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "what's the plan for StreamingProxyRedirects? is that going away or stuck in beta?",
        "createdAt" : "2018-08-08T03:56:06Z",
        "updatedAt" : "2018-09-26T00:19:08Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "fa6de65d-f905-42cb-9f64-7539a7491946",
        "parentId" : "68a15d82-939f-45b0-9680-82ff16e86800",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "I'd like it to go away eventually, but version skew is a problem since it's required for older kubelets (I think anything older than 1.11)",
        "createdAt" : "2018-08-08T17:09:12Z",
        "updatedAt" : "2018-09-26T00:19:08Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "b09b3c46-2c3f-4fe3-97df-cea429ed2b14",
        "parentId" : "68a15d82-939f-45b0-9680-82ff16e86800",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Actually, it wasn't completely removed from the kubelet, it's still a configurable option. I'll add complete removal to the sig-node agenda for 1.13",
        "createdAt" : "2018-09-21T00:45:40Z",
        "updatedAt" : "2018-09-26T00:19:08Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "70748b7a-1f44-497f-bd3b-468b62d82383",
        "parentId" : "68a15d82-939f-45b0-9680-82ff16e86800",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Last time when we discussed this, the conclusion was that once authentication is resolved, we can switch back to redirect. https://github.com/kubernetes/kubernetes/pull/64006#issue-188901933\r\nIs that not the case now?",
        "createdAt" : "2018-09-22T00:49:45Z",
        "updatedAt" : "2018-09-26T00:19:08Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "19189944-8276-4a0f-8936-0daccd9598c1",
        "parentId" : "68a15d82-939f-45b0-9680-82ff16e86800",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Authentication could fix this issue, if we required the certificate to be signed / associated with the node that was originally contacted. I'll follow up on high that might be done.\r\n\r\nEDIT: To clarify, that's authentication of the CRI streaming server to the apiserver. Note that the SPKI scheme for sharing certificates that we previously discussed would not be sufficient in this situation.",
        "createdAt" : "2018-09-24T18:58:41Z",
        "updatedAt" : "2018-09-26T00:19:08Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ee9f007cbc88cca5fa3e8576ff951a52a248e3c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +40,44 @@\t//\n\t// ValidateProxyRedirects controls whether the apiserver should validate that redirects are only\n\t// followed to the same host. Only used if StreamingProxyRedirects is enabled.\n\tValidateProxyRedirects utilfeature.Feature = \"ValidateProxyRedirects\"\n"
  },
  {
    "id" : "b13cc92e-c83e-4fca-8518-558c733cab35",
    "prId" : 46009,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46009#pullrequestreview-39234741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9abf0b56-9b95-4715-bfec-ce1a0b9531bc",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "What do we want to switch here? By default auditing is off. If you use the `--audit-log-*` flags, you will get the log plugin. What about the default level? It used to be meta data only, but not \"none\".\r\n\r\nWe could re-add the old `WithAudit` filter as `WithBasicAudit` and use that if the feature is disabled. Wdyt?",
        "createdAt" : "2017-05-19T09:40:13Z",
        "updatedAt" : "2017-05-25T14:44:14Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "5c7a91d0-363d-4824-b1c9-e15e44855d8d",
        "parentId" : "9abf0b56-9b95-4715-bfec-ce1a0b9531bc",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "> We could re-add the old WithAudit filter as WithBasicAudit and use that if the feature is disabled. Wdyt?\r\n\r\nThat's what I was suggesting in https://github.com/kubernetes/kubernetes/pull/45766#discussion_r116766143. Since the pipeline is growing in complexity, I think we should do that.\r\n\r\nReasons for adding a feature flag:\r\n\r\n- This code is coming in hot and it mitigates risk. Additionally, it would make a code freeze exception easier if we end up needing it...\r\n- Default audit level (off = metadata, on = none)\r\n- If users specify flags for the new features (e.g. set a policy, different backend) they should be aware that they are using an *alpha* feature. Requiring the feature gate to be set makes that more explicit\r\n- Makes the support & completeness level of advanced auditing explicit",
        "createdAt" : "2017-05-19T16:01:12Z",
        "updatedAt" : "2017-05-25T14:44:14Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5de309ee261aea15bb1cc12647b32640c2ac196",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +41,45 @@\t// pluggable output backends and an audit policy specifying how different requests should be\n\t// audited.\n\tAdvancedAuditing utilfeature.Feature = \"AdvancedAuditing\"\n)\n"
  }
]