[
  {
    "id" : "172d21a9-5299-4e9a-ae38-823beb0ad982",
    "prId" : 51119,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51119#pullrequestreview-59815706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "235edf85-ac70-4c96-8976-01c77f22db8d",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "This makes the rw.WriteHeader to process an event. The `WithAudit` also decorates. So if an endpoint handler writes the header, the `WithAudit` decorator will send an event to the audit backend, then your new outer decorator will the same. Moreover, you `ev` here is another one than the one of `WithAudit`. So yours will be pretty empty.",
        "createdAt" : "2017-08-31T05:17:31Z",
        "updatedAt" : "2017-08-31T10:40:12Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "30a7424d-c57b-46ab-9958-004e484c671d",
        "parentId" : "235edf85-ac70-4c96-8976-01c77f22db8d",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "No double decoration will happen. he reason for that is that `WithFailedAuthenticationAudit` decorates *only* the failed handler that is passed to `WithAuthentication`. At that point no request will ever reach regular `WithAudit` because the processing is passed through a different handler chain. ",
        "createdAt" : "2017-08-31T08:58:48Z",
        "updatedAt" : "2017-08-31T10:40:12Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "13efe7f1-dbf9-4be5-b133-6a632f38baaa",
        "parentId" : "235edf85-ac70-4c96-8976-01c77f22db8d",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "got it. Please call the parameter `failedHandler` here. Then it's clearer.",
        "createdAt" : "2017-08-31T10:22:27Z",
        "updatedAt" : "2017-08-31T10:40:12Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fef244d4ccce0ea8daf37ab86a7af4892d000cf",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +54,58 @@\t\tev.Stage = auditinternal.StageResponseStarted\n\n\t\trw := decorateResponseWriter(w, ev, sink)\n\t\tfailedHandler.ServeHTTP(rw, req)\n\t})"
  },
  {
    "id" : "2b178a69-e423-4eb0-8991-a252afecd9fb",
    "prId" : 51119,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51119#pullrequestreview-60352270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "208d7d42-8cbf-41fd-bdf0-6ed9b3f587af",
        "parentId" : null,
        "authorId" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "body" : "I am OK with `auditinternal.StageResponseStarted` here.\r\nBut why `StageResponseStarted` is better than `StageRequestReceived`?",
        "createdAt" : "2017-09-04T08:32:34Z",
        "updatedAt" : "2017-09-04T08:32:35Z",
        "lastEditedBy" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fef244d4ccce0ea8daf37ab86a7af4892d000cf",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +52,56 @@\t\tev.ResponseStatus = &metav1.Status{}\n\t\tev.ResponseStatus.Message = getAuthMethods(req)\n\t\tev.Stage = auditinternal.StageResponseStarted\n\n\t\trw := decorateResponseWriter(w, ev, sink)"
  }
]