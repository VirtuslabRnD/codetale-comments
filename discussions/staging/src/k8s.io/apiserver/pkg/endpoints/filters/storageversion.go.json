[
  {
    "id" : "3edeb620-e291-4a55-ab02-8e57adcda03d",
    "prId" : 95978,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95978#pullrequestreview-529413935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a9e57e8-383c-4296-93c4-2b343e94ea02",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "That's a good point.",
        "createdAt" : "2020-11-12T01:46:18Z",
        "updatedAt" : "2020-11-13T00:37:37Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "d28dab6e-d9b3-46eb-ac9c-758789517dfa",
        "parentId" : "9a9e57e8-383c-4296-93c4-2b343e94ea02",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "We should probably just blanket-exclude all resources with known, transient lifetime. I guess that's just leases and events.",
        "createdAt" : "2020-11-12T20:08:04Z",
        "updatedAt" : "2020-11-13T00:37:37Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9f6959284260ed43401cdb2ee13ed1167c32b19",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +93,97 @@\t\t// apiserver-identity leases to operate. Leases in kube-system are either apiserver-identity\n\t\t// lease (which gets garbage collected when stale) or leader-election leases (which gets\n\t\t// periodically updated by system components). Both types of leases won't be stale in etcd.\n\t\tif requestInfo.APIGroup == \"coordination.k8s.io\" && requestInfo.Resource == \"leases\" &&\n\t\t\trequestInfo.Namespace == metav1.NamespaceSystem {"
  },
  {
    "id" : "2335b252-fab3-4904-aa9c-8a4816a1f598",
    "prId" : 95978,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95978#pullrequestreview-529473352",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3315ae3a-b8c7-4ad3-a99c-492cb725c6a9",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'm nervous that there may be more dependencies like this, this feature is behind a gate, right?",
        "createdAt" : "2020-11-12T20:09:52Z",
        "updatedAt" : "2020-11-13T00:37:37Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "84d9abaf-9649-4b7e-a34b-d7da3c45d36d",
        "parentId" : "3315ae3a-b8c7-4ad3-a99c-492cb725c6a9",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "two alpha feature gates are required: StorageVersionAPI and APIServerIdentity\r\n\r\nI have tested locally, allowing `namespaces` and `leases` writes stops this feature from deadlocking itself.\r\n\r\nwe can get signal of the filter breaking any bootstrap process from the alpha e2e test\r\n/test pull-kubernetes-e2e-gce-alpha-features",
        "createdAt" : "2020-11-12T20:30:41Z",
        "updatedAt" : "2020-11-13T00:37:37Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9f6959284260ed43401cdb2ee13ed1167c32b19",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +76,80 @@\t\t// The system namespace is required for apiserver-identity lease to exist. Allow the apiserver\n\t\t// itself to create namespaces.\n\t\t// NOTE: with this exception, if the bootstrap client writes namespaces with a new version,\n\t\t// and the upgraded apiserver dies before updating the StorageVersion for namespaces, the\n\t\t// storage migrator won't be able to tell these namespaces are stored in a different version in etcd."
  },
  {
    "id" : "7ec239f1-8c87-4d56-97d3-82323322bcbf",
    "prId" : 95978,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95978#pullrequestreview-529476635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a1e334e-4511-49ee-9619-2f80b3b047af",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Just checking the name is sufficient, I think.\r\n\r\nI think before beta we need a way for a priviliged user to override this check, perhaps via query parameter or header, to recover a stuck cluster, should there be some dependency chain we didn't know about.",
        "createdAt" : "2020-11-12T20:11:52Z",
        "updatedAt" : "2020-11-13T00:37:37Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b832b62f-302e-4b0b-ba82-99bb776ce8bb",
        "parentId" : "9a1e334e-4511-49ee-9619-2f80b3b047af",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "will add to beta requirement",
        "createdAt" : "2020-11-12T20:35:30Z",
        "updatedAt" : "2020-11-13T00:37:37Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9f6959284260ed43401cdb2ee13ed1167c32b19",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +86,90 @@\t\tif requestInfo.APIGroup == \"\" && requestInfo.Resource == \"namespaces\" &&\n\t\t\trequestInfo.Verb == \"create\" && hasUser &&\n\t\t\tu.GetName() == user.APIServerUser && contains(u.GetGroups(), user.SystemPrivilegedGroup) {\n\t\t\thandler.ServeHTTP(w, req)\n\t\t\treturn"
  },
  {
    "id" : "8eb314e4-271b-49c0-aeb2-21d0ec578351",
    "prId" : 95978,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95978#pullrequestreview-529514841",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1f2958f-ba7b-4afe-a72f-76bc55cd9365",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "kube-system namespace is only created when the cluster is newly created. So the etcd corruption only happens if the cluster admin creates a cluster, the kube-system namespace is created, but the cluster creation fails, then the cluster admin creates a cluster of a different version which supports a different encoding version for namespaces, but keeps using the same etcd.\r\n\r\nI think this is an extremely rare use case.",
        "createdAt" : "2020-11-12T20:24:27Z",
        "updatedAt" : "2020-11-13T00:37:37Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "739545a5-7d64-43ca-8c0f-3a6eb6e84090",
        "parentId" : "d1f2958f-ba7b-4afe-a72f-76bc55cd9365",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "I agree rolling back a just-created-and-crashed cluster without recreating etcd is weird.\r\n\r\nThe other case is possible. Adding a new kube-reserved namespace to an existing cluster could leave object with wrong encoding version in etcd.",
        "createdAt" : "2020-11-12T20:44:39Z",
        "updatedAt" : "2020-11-13T00:37:37Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      },
      {
        "id" : "0d20be0a-5fc7-40d8-ae6c-16bb89c00d3b",
        "parentId" : "d1f2958f-ba7b-4afe-a72f-76bc55cd9365",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Ack.\r\n\r\nCan we look into the body of the request to get the name of the namespace? We can explore in a followup.",
        "createdAt" : "2020-11-12T21:20:55Z",
        "updatedAt" : "2020-11-13T00:37:37Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "59454639-2f5c-4276-9b20-2c02eb6935f6",
        "parentId" : "d1f2958f-ba7b-4afe-a72f-76bc55cd9365",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "I think https://github.com/kubernetes/kubernetes/pull/95978#discussion_r522391599 is required for both:\r\n- solving this leak\r\n- providing way to recover a stuck cluster (not sure if the use case is bootstrap only, will think about it later)\r\n\r\nI'm not sure if deserializing the body in this filter is achievable. Could be a faster workaround if it is not hard to do. Will explore",
        "createdAt" : "2020-11-12T21:34:11Z",
        "updatedAt" : "2020-11-13T00:37:37Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9f6959284260ed43401cdb2ee13ed1167c32b19",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +82,86 @@\t\t// only happen if the upgraded apiserver is the first apiserver that kicks off namespace creation,\n\t\t// or if an upgraded server that joins an existing cluster has new system namespaces (other\n\t\t// than kube-system, kube-public, kube-node-lease) that need to be created.\n\t\tu, hasUser := request.UserFrom(ctx)\n\t\tif requestInfo.APIGroup == \"\" && requestInfo.Resource == \"namespaces\" &&"
  },
  {
    "id" : "55344198-a097-4ae3-96c5-6c2d22566cf5",
    "prId" : 93873,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93873#pullrequestreview-512313101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70328332-53a5-42cc-9677-ce5abf6f0e2e",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Can you add the \"non-resource requests\" to the list of the function comment?",
        "createdAt" : "2020-10-20T04:25:12Z",
        "updatedAt" : "2020-11-09T23:23:29Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "23f77ce7c62db3761580d06622fbfb1cedaa1293",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +56,60 @@\t\t}\n\t\t// Allow non-resource requests\n\t\tif !requestInfo.IsResourceRequest {\n\t\t\thandler.ServeHTTP(w, req)\n\t\t\treturn"
  },
  {
    "id" : "777c0277-cbc4-4ae3-aafe-59452cb58473",
    "prId" : 93873,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93873#pullrequestreview-512313101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6a993d8-542d-4bcf-9777-e409e063a779",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Can you add that non-persisted resources are not in the to-be-updated list, so they will pass?",
        "createdAt" : "2020-10-20T04:37:39Z",
        "updatedAt" : "2020-11-09T23:23:29Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "23f77ce7c62db3761580d06622fbfb1cedaa1293",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +70,74 @@\t\t\treturn\n\t\t}\n\t\t// If the resource's StorageVersion is not in the to-be-updated list, let it pass.\n\t\t// Non-persisted resources are not in the to-be-updated list, so they will pass.\n\t\tgr := schema.GroupResource{requestInfo.APIGroup, requestInfo.Resource}"
  }
]