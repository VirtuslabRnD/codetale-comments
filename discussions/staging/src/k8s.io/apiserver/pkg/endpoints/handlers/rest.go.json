[
  {
    "id" : "27e657e7-4cf3-495c-aab2-9df2bd5c7d98",
    "prId" : 96901,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96901#pullrequestreview-578652988",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1059d02e-f42f-430f-9294-80d09434dcf6",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "does `ctx.Err` contain the timeout in seconds?",
        "createdAt" : "2021-01-28T12:44:34Z",
        "updatedAt" : "2021-01-28T19:15:25Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "c2ab72aa-d1c3-4d8a-8c17-fa4ec6556327",
        "parentId" : "1059d02e-f42f-430f-9294-80d09434dcf6",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "it's not. But we decided it does not matter as the request URL will have the timeout.",
        "createdAt" : "2021-01-28T19:06:13Z",
        "updatedAt" : "2021-01-28T19:15:25Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "df7a890d94d95e19e066833cb99d3ca656b8dc54",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +276,280 @@\t\tpanic(p)\n\tcase <-ctx.Done():\n\t\treturn nil, errors.NewTimeoutError(fmt.Sprintf(\"request did not complete within requested timeout %s\", ctx.Err()), 0)\n\t}\n}"
  },
  {
    "id" : "e537a16f-9aca-48d7-9ef5-4fe7659dc1be",
    "prId" : 96061,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96061#pullrequestreview-527321978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26434947-1967-4e96-83cc-40ca2c8c4681",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "split the cases of `Err()` for timeout or cancelled please.",
        "createdAt" : "2020-11-09T18:21:43Z",
        "updatedAt" : "2020-11-14T16:55:37Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "7dbd82bb-3d06-4184-a401-25620fd5999e",
        "parentId" : "26434947-1967-4e96-83cc-40ca2c8c4681",
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "@deads2k am i missing a use case here? in either case, the request has timed out whether it's a context with a deadline or with a cancel. ",
        "createdAt" : "2020-11-09T23:29:47Z",
        "updatedAt" : "2020-11-14T16:55:37Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      },
      {
        "id" : "61d3137a-7bb4-4301-9263-ef706f2bc903",
        "parentId" : "26434947-1967-4e96-83cc-40ca2c8c4681",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> @deads2k am i missing a use case here? in either case, the request has timed out whether it's a context with a deadline or with a cancel.\r\n\r\nAs a dev debugging something for a cluster-admin, I want to know exactly what happened the information exists right here and is easy to expose.",
        "createdAt" : "2020-11-10T15:29:46Z",
        "updatedAt" : "2020-11-14T16:55:37Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "83f869ee1350da1b65d508725749fb70d0f535f2",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +265,269 @@\t\tpanic(p)\n\tcase <-ctx.Done():\n\t\treturn nil, errors.NewTimeoutError(fmt.Sprintf(\"request did not complete within requested timeout %s\", ctx.Err()), 0)\n\t}\n}"
  },
  {
    "id" : "ad386c62-ad40-4459-b3f4-847af6c99f95",
    "prId" : 94397,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94397#pullrequestreview-480031961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa438203-3bd5-4bbb-915e-69523e736dee",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "FYI - this was clearly a bug previously. Fortunately it was caught by an existing integration test.",
        "createdAt" : "2020-09-01T18:59:08Z",
        "updatedAt" : "2020-09-01T18:59:29Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2539912a2245a53f6612100a32af96dd71a2ad4f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +329,333 @@func setObjectSelfLink(ctx context.Context, obj runtime.Object, req *http.Request, namer ScopeNamer) error {\n\tif utilfeature.DefaultFeatureGate.Enabled(features.RemoveSelfLink) {\n\t\t// Ensure that for empty lists we don't return <nil> items.\n\t\tif meta.IsListType(obj) && meta.LenList(obj) == 0 {\n\t\t\tif err := meta.SetList(obj, []runtime.Object{}); err != nil {"
  },
  {
    "id" : "275e11b9-f427-4902-996e-3be9d49c677d",
    "prId" : 87508,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87508#pullrequestreview-348162668",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4e9e517-c989-4797-8c29-96f84948f74f",
        "parentId" : null,
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "we could also have the storage layer expose this, to avoid depending on grpc codes here",
        "createdAt" : "2020-01-24T19:06:31Z",
        "updatedAt" : "2020-02-27T20:42:44Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ccd9e4e2de32b8708f3a7be159f7a4316449c433",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +431,435 @@}\n\nfunc isTooLargeError(err error) bool {\n\tif err != nil {\n\t\tif etcdErr, ok := err.(etcdError); ok {"
  },
  {
    "id" : "8cdd3bfe-1bd8-43d5-a3cc-8939c2975536",
    "prId" : 87508,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87508#pullrequestreview-360572409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ae71796-c5cd-4d8d-9e5a-562f2426270f",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "would like ack from @jpbetz on this",
        "createdAt" : "2020-02-12T15:01:29Z",
        "updatedAt" : "2020-02-27T20:42:44Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "262c1fea-f74e-40b0-acaf-d113ea096056",
        "parentId" : "7ae71796-c5cd-4d8d-9e5a-562f2426270f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "@jpbetz PTAL, this is the last blocker for SSA (other than our perf issue).",
        "createdAt" : "2020-02-14T20:33:42Z",
        "updatedAt" : "2020-02-27T20:42:44Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "3fa05772-cfd4-4f97-969f-dfcc00841240",
        "parentId" : "7ae71796-c5cd-4d8d-9e5a-562f2426270f",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "~Yes, this is right.~ [update: see ErrGRPCRequestTooLarge case below]\r\n\r\n```\r\nhead -c 1G </dev/urandom | bin/etcdctl put a\r\n{\"level\":\"warn\",\"ts\":\"2020-02-14T16:25:50.671-0800\",\"caller\":\"clientv3/retry_interceptor.go:61\",\"msg\":\"retrying of unary invoker failed\",\"target\":\"endpoint://client-b6802cd6-e6b5-4bd9-8c10-74c519f36bf9/127.0.0.1:2379\",\"attempt\":0,\"error\":\"rpc error: code = ResourceExhausted desc = trying to send message larger than max (1073741833 vs. 2097152)\"}\r\nError: rpc error: code = ResourceExhausted desc = trying to send message larger than max (1073741833 vs. 2097152)\r\n```\r\n\r\nxref: https://github.com/grpc/grpc-go/blob/fff75ae40fde3e38ad4dc57695d639c8a99cb1ba/server.go#L882 ",
        "createdAt" : "2020-02-15T00:27:08Z",
        "updatedAt" : "2020-02-27T20:42:44Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "c14afcd3-fcd4-4481-92b9-57cca48ad479",
        "parentId" : "7ae71796-c5cd-4d8d-9e5a-562f2426270f",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Actually, hold on, there is also: \r\n\r\n```\r\nErrGRPCRequestTooLarge        = status.New(codes.InvalidArgument, \"etcdserver: request is too large\").Err()\r\n```\r\n\r\nThis is set by the etcd `--max-request-bytes` server flag.\r\n\r\n```\r\nhead -c 1K </dev/urandom | bin/etcdctl put a\r\n{\"level\":\"warn\",\"ts\":\"2020-02-14T16:34:30.737-0800\",\"caller\":\"clientv3/retry_interceptor.go:61\",\"msg\":\"retrying of unary invoker failed\",\"target\":\"endpoint://client-6b986f0f-1f6e-4469-8a32-ed5370e4731c/127.0.0.1:2379\",\"attempt\":0,\"error\":\"rpc error: code = InvalidArgument desc = etcdserver: request is too large\"}\r\nError: etcdserver: request is too large\r\n```\r\n\r\nWe need to check for both errors here.\r\n\r\nxref: https://github.com/etcd-io/etcd/blob/425b65467c1facafc9605133cd1de4f1e7cfc3d8/etcdserver/api/v3rpc/rpctypes/error.go#L47, https://github.com/etcd-io/etcd/blob/c94782cd55fb44df43574505db9ac1c1b7d49c00/etcdserver/v3_server.go#L635",
        "createdAt" : "2020-02-15T00:35:35Z",
        "updatedAt" : "2020-02-27T20:42:44Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "15ff8278-8159-4a21-936d-4aa64fb8aa73",
        "parentId" : "7ae71796-c5cd-4d8d-9e5a-562f2426270f",
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "@jpbetz that is checked in the line above: https://github.com/kubernetes/kubernetes/pull/87508/files#diff-390e9c6b4af51b3a3723c78f40b0e134R436",
        "createdAt" : "2020-02-18T17:52:20Z",
        "updatedAt" : "2020-02-27T20:42:44Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      },
      {
        "id" : "25cd8db5-5e58-41d5-8a2d-0a475fbd2243",
        "parentId" : "7ae71796-c5cd-4d8d-9e5a-562f2426270f",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "excellent, I'd missed that",
        "createdAt" : "2020-02-18T18:29:51Z",
        "updatedAt" : "2020-02-27T20:42:44Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ccd9e4e2de32b8708f3a7be159f7a4316449c433",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +442,446 @@\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false"
  },
  {
    "id" : "b0d3429d-2118-49fd-a67c-995f01954881",
    "prId" : 77563,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77563#pullrequestreview-236352435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f8551fb-4f9b-4fb9-ac07-0b61e3235225",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I was on the fence whether the connect options struct should go in the object field or the options field (We have to keep the v1beta1 admission review object the same, but we could have changed that for v1 admissionreview objects if we wanted)\r\n\r\nFrom the [KEP](https://github.com/kubernetes/enhancements/blob/master/keps/sig-api-machinery/00xx-admission-webhooks-to-ga.md#graduation-criteria):\r\n> There are still open questions that need to be addressed and updated in this KEP before graduation:\r\n> \r\n> * ConnectOptions is sent as the main object to the webhooks today (and it is mutable). Should we change that and send parent object as the main object?\r\n\r\nThe thing that swayed me is what we publish in openapi:\r\n```json\r\n    \"/api/v1/nodes/{name}/proxy\": {\r\n      \"delete\": {\r\n        \"consumes\": [\r\n          \"*/*\"\r\n        ],\r\n        \"description\": \"connect DELETE requests to proxy of Node\",\r\n        \"operationId\": \"connectCoreV1DeleteNodeProxy\",\r\n        \"produces\": [\r\n          \"*/*\"\r\n        ],\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"description\": \"OK\",\r\n            \"schema\": {\r\n              \"type\": \"string\"\r\n            }\r\n          },\r\n          \"401\": {\r\n            \"description\": \"Unauthorized\"\r\n          }\r\n        },\r\n        \"schemes\": [\r\n          \"https\"\r\n        ],\r\n        \"tags\": [\r\n          \"core_v1\"\r\n        ],\r\n        \"x-kubernetes-action\": \"connect\",\r\n        \"x-kubernetes-group-version-kind\": {\r\n          \"group\": \"\",\r\n          \"kind\": \"NodeProxyOptions\",\r\n          \"version\": \"v1\"\r\n        }\r\n      },\r\n```\r\n\r\nthe object we send in the admissionreview should have a GVK that matches the published GVK for the endpoint/operation\r\n\r\ncan you open a PR updating the KEP to detail the options behavior for Connect requests and removing the open question for that item?",
        "createdAt" : "2019-05-09T22:32:04Z",
        "updatedAt" : "2019-05-14T17:51:02Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "9f0d1d75-e1ea-40c4-902c-11a45834d0d0",
        "parentId" : "8f8551fb-4f9b-4fb9-ac07-0b61e3235225",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "I've opened https://github.com/kubernetes/enhancements/pull/1062. Let me know if I misunderstood the intent.",
        "createdAt" : "2019-05-11T00:22:10Z",
        "updatedAt" : "2019-05-14T17:51:02Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "900d652a9ac11e53293950b3d191295c21430215",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +138,142 @@\t\t\t// TODO: remove the mutating admission here as soon as we have ported all plugin that handle CONNECT\n\t\t\tif mutatingAdmission, ok := admit.(admission.MutationInterface); ok {\n\t\t\t\terr = mutatingAdmission.Admit(admission.NewAttributesRecord(opts, nil, scope.Kind, namespace, name, scope.Resource, scope.Subresource, admission.Connect, nil, false, userInfo), scope)\n\t\t\t\tif err != nil {\n\t\t\t\t\tscope.err(err, w, req)"
  },
  {
    "id" : "2f31e84e-3f4e-41b7-a7fd-e7f52903bc61",
    "prId" : 66083,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66083#pullrequestreview-136757236",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a72d5d35-b769-4203-b215-a25fa5e3ad14",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "Hi @jennybuckley , if we were to forbid dryRun requests for all verbs, why not do this via an HTTP handler filter. 😃",
        "createdAt" : "2018-07-12T07:11:10Z",
        "updatedAt" : "2018-07-12T07:11:10Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "1aa99a88-7f98-42b1-9556-4c67ef6b6d1e",
        "parentId" : "a72d5d35-b769-4203-b215-a25fa5e3ad14",
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "Thanks for reviewing this! The reason is that we plan on enabling it for some verbs in the future, depending on whether or not the dry run feature is enabled. Also, some verbs, like GET, don't make any change in the cluster, so dry running a get is equivalent to just running the get normally, so we don't need to fail if the client sends the dry run flag.",
        "createdAt" : "2018-07-12T17:42:33Z",
        "updatedAt" : "2018-07-12T17:42:54Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      }
    ],
    "commit" : "702937ac8614a05d3168c6565bea8a3347883dc0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +99,103 @@func ConnectResource(connecter rest.Connecter, scope RequestScope, admit admission.Interface, restPath string, isSubresource bool) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, req *http.Request) {\n\t\tif isDryRun(req.URL) {\n\t\t\tscope.err(errors.NewBadRequest(\"dryRun is not supported\"), w, req)\n\t\t\treturn"
  },
  {
    "id" : "49af0c14-c616-4c99-9299-995fae76b407",
    "prId" : 65150,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65150#pullrequestreview-129294822",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc023734-a4ba-4764-bdd4-dfb718b37173",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Surprised to see this in both group info and here. Maybe it will make sense after I read more.",
        "createdAt" : "2018-06-15T19:23:34Z",
        "updatedAt" : "2018-07-03T18:20:27Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "e96f8185-dcef-4cab-b3e7-48969202b6e8",
        "parentId" : "cc023734-a4ba-4764-bdd4-dfb718b37173",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I guess it is copied here from the group info struct for each request? It seems a little strange to me to copy this into the APIGroupVersion struct at all--it should be constant for the whole apiserver, not vary by endpoint, right?",
        "createdAt" : "2018-06-15T19:33:35Z",
        "updatedAt" : "2018-07-03T18:20:27Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "0a975e1e-72b5-4eac-9105-9a1971cf96a0",
        "parentId" : "cc023734-a4ba-4764-bdd4-dfb718b37173",
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "Yeah, It's the same for all the endpoints, but I thought this was the only way to expose it to the installer and then to the individual handlers",
        "createdAt" : "2018-06-15T19:42:13Z",
        "updatedAt" : "2018-07-03T18:20:27Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc5c17e554a4d8f802043b337ca0787ec0ce7475",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +56,60 @@\tTyper           runtime.ObjectTyper\n\tUnsafeConvertor runtime.ObjectConvertor\n\tAuthorizer      authorizer.Authorizer\n\n\tTableConvertor rest.TableConvertor"
  },
  {
    "id" : "f602f1bc-e647-4406-a602-f745671ec804",
    "prId" : 63557,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63557#pullrequestreview-119959207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f72e933-edc1-427b-a899-61912229498a",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It might be a good idea to add a TODO here explaining that this will be moved to our versioned structs like other parameters before being implemented for real.",
        "createdAt" : "2018-05-14T18:40:25Z",
        "updatedAt" : "2018-05-14T18:40:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "98613924ea282ef70a6f9a14dda11e854fe02c28",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +320,324 @@\treturn 30 * time.Second\n}\n\nfunc isDryRun(url *url.URL) bool {\n\treturn len(url.Query()[\"dryRun\"]) != 0"
  },
  {
    "id" : "0ff41a4a-8f05-44f1-81d2-0997fa933e4f",
    "prId" : 47792,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47792#pullrequestreview-45430235",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d978bbab-ccee-446e-8a89-a0c0a081c8e1",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "How do we know the object in RawExtension is of group defaultGVK.Group?",
        "createdAt" : "2017-06-20T20:20:50Z",
        "updatedAt" : "2017-06-20T20:20:50Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "bdfc6707-0d5a-4697-90bd-c1e721a5b0c6",
        "parentId" : "d978bbab-ccee-446e-8a89-a0c0a081c8e1",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "That's up to the group author.  Service catalog has an embedding case today as wel, although they mostly deal with unstructured there.",
        "createdAt" : "2017-06-20T23:09:46Z",
        "updatedAt" : "2017-06-20T23:09:46Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "ff2d2f21-779b-4e75-8661-5fc7b728061d",
        "parentId" : "d978bbab-ccee-446e-8a89-a0c0a081c8e1",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Also, note that consumers of this code can define arbitrary group versioners if they wish",
        "createdAt" : "2017-06-20T23:10:48Z",
        "updatedAt" : "2017-06-20T23:10:48Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "fcf81cfb-0fec-4ffb-9bfa-11e7da4cde45",
        "parentId" : "d978bbab-ccee-446e-8a89-a0c0a081c8e1",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> How do we know the object in RawExtension is of group defaultGVK.Group?\r\n\r\nWe don't, but both create and update already make this assumption, so this doesn't make it worse. This is just harmonizing update to behave the same as create, since the intent of the API server is to deal with internal objects.",
        "createdAt" : "2017-06-21T13:24:41Z",
        "updatedAt" : "2017-06-21T13:24:41Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a536ee3615e15954c63b0ccea0885837e2846e1e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +863,867 @@\t\toriginal := r.New()\n\t\ttrace.Step(\"About to convert to expected version\")\n\t\tdecoder := scope.Serializer.DecoderToVersion(s.Serializer, schema.GroupVersion{Group: defaultGVK.Group, Version: runtime.APIVersionInternal})\n\t\tobj, gvk, err := decoder.Decode(body, &defaultGVK, original)\n\t\tif err != nil {"
  },
  {
    "id" : "a2ff139f-8718-4150-b817-25b118ec6e3b",
    "prId" : 45600,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45600#pullrequestreview-37861962",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "786586b7-1b77-4715-aa5c-7fd731f2d988",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "This is an API change. We will now return a metav1.Status object where we were returning a StatusError object earlier. We should have always been returning a StatusError only in case of errors.\r\nThis was the only place where errors.FromObject was being used even when status is StatusSuccess: https://github.com/kubernetes/kubernetes/search?q=errors.FromObject.\r\n\r\nSo the fix should be fine but wanted to highlight it as an important change.",
        "createdAt" : "2017-05-10T15:27:14Z",
        "updatedAt" : "2017-05-15T06:11:25Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "7379379e-5f12-4e51-a6c3-3aa5b5232029",
        "parentId" : "786586b7-1b77-4715-aa5c-7fd731f2d988",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I need to think about the implications of this.",
        "createdAt" : "2017-05-12T14:55:34Z",
        "updatedAt" : "2017-05-15T06:11:25Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c828eeaab8540f42867a3f34902092bdcc1ff19",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1084,1088 @@\tcase result = <-ch:\n\t\tif status, ok := result.(*metav1.Status); ok {\n\t\t\tif status.Status != metav1.StatusSuccess {\n\t\t\t\treturn nil, errors.FromObject(status)\n\t\t\t}"
  },
  {
    "id" : "6530b3f2-21b8-49cc-9f6f-1a8caec18a94",
    "prId" : 44667,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/44667#pullrequestreview-33521697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d3aa2bc-cee7-4fa9-98f2-d3f48b55529a",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I'm not going to block this PR on this, but traces need to becoming from the context.",
        "createdAt" : "2017-04-19T14:44:57Z",
        "updatedAt" : "2017-04-19T14:44:57Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "bbddd7df-928a-43e7-abda-1b749083d075",
        "parentId" : "0d3aa2bc-cee7-4fa9-98f2-d3f48b55529a",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I think we want to switch to open tracing in general, but this was just a quick fix to what we currently have.",
        "createdAt" : "2017-04-19T14:50:25Z",
        "updatedAt" : "2017-04-19T14:50:26Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a49281b55278bb6932e8862304cff0becaaabf3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +78,82 @@// getterFunc performs a get request with the given context and object name. The request\n// may be used to deserialize an options object to pass to the getter.\ntype getterFunc func(ctx request.Context, name string, req *http.Request, trace *utiltrace.Trace) (runtime.Object, error)\n\n// MaxRetryWhenPatchConflicts is the maximum number of conflicts retry during a patch operation before returning failure"
  },
  {
    "id" : "03da26b4-bfdb-43cd-9480-3e240328efd9",
    "prId" : 44294,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/44294#pullrequestreview-31975397",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7637fdea-4b7c-48df-863c-64cbf8703bc7",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This looks tricky, but `path` was the \"extra bits\" from the go-restful request.  This does the same thing.",
        "createdAt" : "2017-04-10T20:06:38Z",
        "updatedAt" : "2017-04-11T13:57:23Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "1bc5be36-f60f-421a-9f35-958c526c1304",
        "parentId" : "7637fdea-4b7c-48df-863c-64cbf8703bc7",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Cluster scoped vs namespace scoped?",
        "createdAt" : "2017-04-10T20:25:44Z",
        "updatedAt" : "2017-04-11T13:57:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "07731357-9004-4dc1-a9d6-e9975bd56c3b",
        "parentId" : "7637fdea-4b7c-48df-863c-64cbf8703bc7",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "No difference there.  The parts already handle that case.",
        "createdAt" : "2017-04-10T22:29:15Z",
        "updatedAt" : "2017-04-11T13:57:23Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5e2f7c229d8194386de97df7ff6c1b0f71be4c7",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +166,170 @@\t\trequestInfo, _ := request.RequestInfoFrom(ctx)\n\t\tstartingIndex := 2\n\t\tif isSubresource {\n\t\t\tstartingIndex = 3\n\t\t}"
  },
  {
    "id" : "25a6a6cb-0d3d-4121-82fe-88a5b3d9909a",
    "prId" : 41165,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41165#pullrequestreview-23045214",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85792286-2118-41f8-87c9-dc4d27857328",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Add a test case in apiserver for this.",
        "createdAt" : "2017-02-09T19:48:14Z",
        "updatedAt" : "2017-02-24T00:32:52Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "1494a11e-9cff-4303-a426-196c69d32ca3",
        "parentId" : "85792286-2118-41f8-87c9-dc4d27857328",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "@smarterclayton Any recommendation on what is the right file to put that test in?\r\nI see `test/integration/auth/auth_test.go` being abused for status code testing. I can add a test there if there is no better place.",
        "createdAt" : "2017-02-21T19:17:01Z",
        "updatedAt" : "2017-02-24T00:32:52Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4895aeef3759251369e75de87cffa3df7d166911",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +879,883 @@\t\tif !wasDeleted && options.OrphanDependents != nil && *options.OrphanDependents == false {\n\t\t\tstatus = http.StatusAccepted\n\t\t}\n\t\t// if the rest.Deleter returns a nil object, fill out a status. Callers may return a valid\n\t\t// object with the response."
  },
  {
    "id" : "167a3bbb-9279-440a-b82c-caa43660f584",
    "prId" : 36721,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36721#pullrequestreview-40628425",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df93649b-5916-4849-9edd-5cc98924a82f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I thought apiserver was going to block until the object was created? When would this ever actually be returned?",
        "createdAt" : "2017-05-25T23:26:06Z",
        "updatedAt" : "2017-06-03T02:09:49Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5628b3dd-4a0e-4675-8680-f5d067c37bb0",
        "parentId" : "df93649b-5916-4849-9edd-5cc98924a82f",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I think in isolation (just this method) this block of code is correct.  If the storage decides to return an object from CreateInitialized, then the result was accepted, not created.  We don't have that case today, but I don't think the \"wait forever\" semantic is a detail this code should know about.",
        "createdAt" : "2017-05-26T02:50:16Z",
        "updatedAt" : "2017-06-03T02:09:49Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9aa6ebeb-66b3-4ccc-af2f-a9e49415826a",
        "parentId" : "df93649b-5916-4849-9edd-5cc98924a82f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Please add to the comment so it's clear that this is needed in case CreateInitialized fails to wait properly.",
        "createdAt" : "2017-05-26T20:15:06Z",
        "updatedAt" : "2017-06-03T02:09:49Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "525a9798-2fe8-405a-83d6-be0bcadb70f1",
        "parentId" : "df93649b-5916-4849-9edd-5cc98924a82f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Also I assume you meant \"return a partially initialized object\" where you wrote \"return an object\"",
        "createdAt" : "2017-05-26T20:15:41Z",
        "updatedAt" : "2017-06-03T02:09:49Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c8f6e718-e342-45b5-a655-da1b630e8f3a",
        "parentId" : "df93649b-5916-4849-9edd-5cc98924a82f",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I forgot, you can bypass waiting for initialization.  That's why this was here.",
        "createdAt" : "2017-05-26T22:05:25Z",
        "updatedAt" : "2017-06-03T02:09:49Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "b993f7d303aa72961d6b0a32a42e7fcc5cb26190",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +478,482 @@\t\tif accessor, err := meta.Accessor(result); err == nil {\n\t\t\tif accessor.GetInitializers() != nil {\n\t\t\t\tcode = http.StatusAccepted\n\t\t\t}\n\t\t}"
  },
  {
    "id" : "658c159d-8862-4211-b965-66f30896bdae",
    "prId" : 36721,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36721#pullrequestreview-41091719",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc21db87-8afa-4971-add9-5dcfe4198581",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "waitForInitialization is a much better name, I think?",
        "createdAt" : "2017-05-26T23:12:43Z",
        "updatedAt" : "2017-06-03T02:09:49Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "021aee57-6647-4b25-b5b1-9bc1417415c3",
        "parentId" : "fc21db87-8afa-4971-add9-5dcfe4198581",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We use \"includeUninitialized\" everywhere else - I was hesitant to say they are equivalent.  I don't care that much.",
        "createdAt" : "2017-05-26T23:13:35Z",
        "updatedAt" : "2017-06-03T02:09:49Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "83b4bc4c-f457-4809-84cd-2c9d76be0fad",
        "parentId" : "fc21db87-8afa-4971-add9-5dcfe4198581",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I honestly don't have any idea what to expect a parameter called \"includeUnititialized\" to Create to do.",
        "createdAt" : "2017-05-30T21:43:24Z",
        "updatedAt" : "2017-06-03T02:09:49Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "591e3bf4-e210-473b-b57a-7514b2df4951",
        "parentId" : "fc21db87-8afa-4971-add9-5dcfe4198581",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "However, if it's the same parameter everywhere in the system, including to users and code... it makes figuring out what the value means easier.  :)",
        "createdAt" : "2017-05-30T22:24:50Z",
        "updatedAt" : "2017-06-03T02:09:49Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "b993f7d303aa72961d6b0a32a42e7fcc5cb26190",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +504,508 @@}\n\nfunc (c *namedCreaterAdapter) Create(ctx request.Context, name string, obj runtime.Object, includeUninitialized bool) (runtime.Object, error) {\n\treturn c.Creater.Create(ctx, obj, includeUninitialized)\n}"
  }
]