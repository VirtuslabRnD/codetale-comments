[
  {
    "id" : "6c82381f-cbeb-4642-ac6e-40422c3c700c",
    "prId" : 96185,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96185#pullrequestreview-533866035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88633986-7cad-4c27-99f2-4804e933f985",
        "parentId" : null,
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "managed fields get updated in `applyPatch`. Currently a bad request can still wipe out managed fields.",
        "createdAt" : "2020-11-18T19:40:50Z",
        "updatedAt" : "2020-11-19T03:22:43Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      },
      {
        "id" : "de4973e2-24be-442c-a1aa-f7c59bf2e5c4",
        "parentId" : "88633986-7cad-4c27-99f2-4804e933f985",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "interesting how you mention that at the exact same time that this happened: https://github.com/kubernetes/kubernetes/issues/96688",
        "createdAt" : "2020-11-18T19:42:20Z",
        "updatedAt" : "2020-11-19T03:22:43Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "23bb596d-d1c8-42ba-a3f9-9667c92f75fd",
        "parentId" : "88633986-7cad-4c27-99f2-4804e933f985",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "cc @kwiesmueller ",
        "createdAt" : "2020-11-18T19:43:12Z",
        "updatedAt" : "2020-11-19T03:22:43Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "c92dd25c-ade6-48ac-b246-4796af08f029",
        "parentId" : "88633986-7cad-4c27-99f2-4804e933f985",
        "authorId" : "500960f8-0ed2-4739-b582-fd7135d2ce87",
        "body" : "Wouldn't it be enough to also dedup before apply?\r\nWell... we'd have to dedup on the patchObj we decode into unstructured I think.\r\n\r\nIn general, I think Apply would still be broken of sorts until we make all the fields you equal on keys.\r\nThis could even solve both problems because at least for apply the request would be rejected on duplicate keys?\r\nCorrect me if I'm wrong @apelisse ",
        "createdAt" : "2020-11-18T19:53:30Z",
        "updatedAt" : "2020-11-19T03:22:43Z",
        "lastEditedBy" : "500960f8-0ed2-4739-b582-fd7135d2ce87",
        "tags" : [
        ]
      },
      {
        "id" : "7d0d3434-1a06-41dd-adc1-8715d39f04b9",
        "parentId" : "88633986-7cad-4c27-99f2-4804e933f985",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "Apply does the schema validation so there's no way you're going to be able to apply duplicated keys. If you apply a key that is already in the object, it's going to be merged with the applied key. And, unfortunately, if the object has duplicated keys, I don't know if it can be applied.",
        "createdAt" : "2020-11-18T20:15:55Z",
        "updatedAt" : "2020-11-19T03:22:43Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "61294bec-e24e-4fce-9106-f658531a410f",
        "parentId" : "88633986-7cad-4c27-99f2-4804e933f985",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "here I'm thinking of: \r\n- if a patch appends a duplicate owner ref, the managedFields update will fail\r\n\r\nmutating admission is not involved. But I agree #96688 is also a problem",
        "createdAt" : "2020-11-18T20:24:50Z",
        "updatedAt" : "2020-11-19T03:22:43Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      },
      {
        "id" : "a6055d60-5934-4f12-b2b4-5e3389f08615",
        "parentId" : "88633986-7cad-4c27-99f2-4804e933f985",
        "authorId" : "500960f8-0ed2-4739-b582-fd7135d2ce87",
        "body" : "Yeah what I meant is, that we should make all fields in the ownerRef keys in the schema so we replicate the same behavior?",
        "createdAt" : "2020-11-18T20:49:22Z",
        "updatedAt" : "2020-11-19T03:22:43Z",
        "lastEditedBy" : "500960f8-0ed2-4739-b582-fd7135d2ce87",
        "tags" : [
        ]
      },
      {
        "id" : "51d8fe45-fbad-4b19-aa2d-eede8281994b",
        "parentId" : "88633986-7cad-4c27-99f2-4804e933f985",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "> Apply does the schema validation so there's no way you're going to be able to apply duplicated keys\r\n\r\nThat's good news. So the problem I was thinking of https://github.com/kubernetes/kubernetes/pull/96185#discussion_r526397606 only happens to the other patchers (json patch, json merge patch, SMP)",
        "createdAt" : "2020-11-18T20:52:41Z",
        "updatedAt" : "2020-11-19T03:22:43Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a6afe798913ae31ab546e697e158e81a8dfb13a",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +577,581 @@\n\twasCreated := false\n\tp.updatedObjectInfo = rest.DefaultUpdatedObjectInfo(nil, p.applyPatch, p.applyAdmission, dedupOwnerReferencesTransformer)\n\trequestFunc := func() (runtime.Object, error) {\n\t\t// Pass in UpdateOptions to override UpdateStrategy.AllowUpdateOnCreate"
  },
  {
    "id" : "2567ea17-a283-4f65-913c-7ee350870f53",
    "prId" : 88936,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88936#pullrequestreview-445023012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ead7ec5-c0e5-4467-bbeb-0f46133b7487",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I'm trying to work this out.  Are there other places we mutate out inbound request's context in this way after the filter chain?\r\n\r\n> To create a new request with a context, use NewRequestWithContext. To change the context of a request, such as an incoming request you want to modify before sending back out, use Request.Clone. Between those two uses, it's rare to need WithContext.\r\n\r\nI had to look up doc on what this method was doing: https://golang.org/pkg/net/http/#Request.WithContext",
        "createdAt" : "2020-07-08T15:38:54Z",
        "updatedAt" : "2020-07-11T13:42:24Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "15e9d1a8-7a7f-4bf0-a29c-76c5635b6bb6",
        "parentId" : "9ead7ec5-c0e5-4467-bbeb-0f46133b7487",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Good catch. Looks like I need to use `Request.Clone`.",
        "createdAt" : "2020-07-08T18:24:38Z",
        "updatedAt" : "2020-07-11T13:42:24Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b12ac0abc64adb71d97fbde12f373b1424631f20",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +64,68 @@\treturn func(w http.ResponseWriter, req *http.Request) {\n\t\t// For performance tracking purposes.\n\t\treq, trace := requestWithTrace(req, \"Patch\", utiltrace.Field{Key: \"url\", Value: req.URL.Path}, utiltrace.Field{Key: \"user-agent\", Value: &internal.LazyTruncatedUserAgent{req}}, utiltrace.Field{Key: \"client\", Value: &internal.LazyClientIP{req}})\n\t\tdefer trace.LogIfLong(500 * time.Millisecond)\n"
  },
  {
    "id" : "a8ba93b9-da01-41f3-b56e-2bf622872516",
    "prId" : 88936,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88936#pullrequestreview-445024945",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58382a93-ce26-40ca-969a-07c8bd5a58da",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "also, aren't these fields duplicates from the main handler?",
        "createdAt" : "2020-07-08T17:17:09Z",
        "updatedAt" : "2020-07-11T13:42:24Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "15c9aef5-3387-4a6f-873d-f4b229095343",
        "parentId" : "58382a93-ce26-40ca-969a-07c8bd5a58da",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "They are. The catch is that they don't always both get included in the trace. The handler level trace output is only printed if the 30s threshold is exceeded, and the operation trace output (in this case \"patch\") is only printed if this operation handler exceeds 750ms. So when they both get output, there will be some redundant output, but when only one of them is printed, it is all needed.",
        "createdAt" : "2020-07-08T18:27:24Z",
        "updatedAt" : "2020-07-11T13:42:24Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b12ac0abc64adb71d97fbde12f373b1424631f20",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +64,68 @@\treturn func(w http.ResponseWriter, req *http.Request) {\n\t\t// For performance tracking purposes.\n\t\treq, trace := requestWithTrace(req, \"Patch\", utiltrace.Field{Key: \"url\", Value: req.URL.Path}, utiltrace.Field{Key: \"user-agent\", Value: &internal.LazyTruncatedUserAgent{req}}, utiltrace.Field{Key: \"client\", Value: &internal.LazyClientIP{req}})\n\t\tdefer trace.LogIfLong(500 * time.Millisecond)\n"
  },
  {
    "id" : "f2edc104-6475-4170-a676-b0ac2ad3eac3",
    "prId" : 77563,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77563#pullrequestreview-236349467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca8f2438-d61e-4b95-acbd-7198d1856ce4",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "interesting... this means admission won't have visibility to the PatchOptions#force option that was set",
        "createdAt" : "2019-05-09T22:07:52Z",
        "updatedAt" : "2019-05-14T17:51:02Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "63803015-3313-4595-8c60-1807a1b3fead",
        "parentId" : "ca8f2438-d61e-4b95-acbd-7198d1856ce4",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "I think I might not have this right.  In `handler.UpdateResource` we have pre-existing code that will convert `UpdateOptions` to `CreateOptions` to allow for put (create or update) semantics. It that particular case it seemed appropriate to provide the options to the admission webhook that matched whatever operation was being performed, and it's a bit less controversial because `UpdateOptions` and `CreateOptions` options are identical (today at least). But being able to admission check `PatchOptions#force` would be valuable?\r\n\r\nThe main down side to passing in `PatchOptions` instead of `UpdateOptions` or `CreateOptions` would be that admission webhook authors no longer have a 1:1 association between the \"operation\" and the \"operation options\".",
        "createdAt" : "2019-05-10T21:18:12Z",
        "updatedAt" : "2019-05-14T17:51:02Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "648d0412-76e5-4217-a2d6-ef2df8531567",
        "parentId" : "ca8f2438-d61e-4b95-acbd-7198d1856ce4",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> The main down side to passing in PatchOptions instead of UpdateOptions or CreateOptions would be that admission webhook authors no longer have a 1:1 association between the \"operation\" and the \"operation options\".\r\n\r\nYeah, that's not great. One of the nice things about the way patch is wired is that storage and admission only has to think in terms of create and update. I don't like losing the force field from patch options, but I also am not thrilled about letting webhook authors treat patch and update differently. Hmmm.  \r\n",
        "createdAt" : "2019-05-10T23:53:26Z",
        "updatedAt" : "2019-05-14T17:51:02Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "900d652a9ac11e53293950b3d191295c21430215",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +604,608 @@}\n\n// patchToUpdateOptions creates an UpdateOptions with the same field values as the provided PatchOptions.\nfunc patchToUpdateOptions(po *metav1.PatchOptions) *metav1.UpdateOptions {\n\tif po == nil {"
  },
  {
    "id" : "a2929559-2499-41e9-b57e-39ed7853934e",
    "prId" : 74154,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74154#pullrequestreview-204533656",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51ad2fbe-3852-4a8a-baf0-ff7d8a6ee357",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "the set of things this patcher needs happens to intersect with the admission interface, but I'd probably leave this as alone, rather than require the patcher by given the object interface instance. I could imagine future things added to the admission interface that the patcher didn't care about",
        "createdAt" : "2019-02-16T19:42:12Z",
        "updatedAt" : "2019-02-16T21:29:39Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "4c0dd21a-c22a-4b69-b7e0-55632747fa61",
        "parentId" : "51ad2fbe-3852-4a8a-baf0-ff7d8a6ee357",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "I reverted changes to this patcher (except passing over objectInterfaces to admissions). I also removed \"GetObjectSafeConvertor\" that was only used in this patcher.",
        "createdAt" : "2019-02-16T20:27:00Z",
        "updatedAt" : "2019-02-16T21:29:39Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f186323bc8f6b502fd0721ef5aa0928552f227c",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +260,264 @@\tdryRun          bool\n\n\tobjectInterfaces admission.ObjectInterfaces\n\n\thubGroupVersion schema.GroupVersion"
  },
  {
    "id" : "e43d573a-3bea-4e9a-a234-ed20fb8cb6d2",
    "prId" : 74000,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74000#pullrequestreview-203388126",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca922b7b-1089-41e3-ac55-5180785b8dbf",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I had also considered 422 unprocessable entity, but that's for semantic error. ",
        "createdAt" : "2019-02-13T18:57:01Z",
        "updatedAt" : "2019-02-13T18:57:01Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e6fc5dce8b12c5ce80e016b208a51c81a8c9ce8",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +338,342 @@\t\t}\n\t\tif len(patchObj) > maxJSONPatchOperations {\n\t\t\treturn nil, errors.NewRequestEntityTooLargeError(\n\t\t\t\tfmt.Sprintf(\"The allowed maximum operations in a JSON patch is %d, got %d\",\n\t\t\t\t\tmaxJSONPatchOperations, len(patchObj)))"
  },
  {
    "id" : "3f0fa1cf-7d04-40e2-9b46-94914941256e",
    "prId" : 72986,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72986#pullrequestreview-193738390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a33357de-caa0-47fd-9717-e3e5ccb05107",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "still no default?",
        "createdAt" : "2019-01-17T17:01:02Z",
        "updatedAt" : "2019-01-17T18:13:02Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "8f7878a8-c7d8-453d-aea7-cfc8cb0646f3",
        "parentId" : "a33357de-caa0-47fd-9717-e3e5ccb05107",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "OK Found it :-)",
        "createdAt" : "2019-01-17T17:06:45Z",
        "updatedAt" : "2019-01-17T18:13:02Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f01867abdd533c6eb72f84dc55c7b7e13eb227a",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +548,552 @@}\n\nfunc (p *patcher) prefixFromUserAgent() string {\n\treturn strings.Split(p.userAgent, \"/\")[0]\n}"
  },
  {
    "id" : "0eec05b8-cf7f-424c-92b7-92a9a11cc692",
    "prId" : 71583,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71583#pullrequestreview-180356300",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45078311-bd5a-4ac7-9b3e-f7cb15a9f650",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "A convenient way to convert the `ManagedFields` directly into/from the proper type would be nice also I think",
        "createdAt" : "2018-11-30T17:05:05Z",
        "updatedAt" : "2018-12-12T21:16:07Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3b778f6f63bb322ae39691d7bfc070d92235cbf",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +492,496 @@\t\t}\n\n\t\tmanaged, err = updater.Update(oldObjTyped, newObjTyped, managed, manager)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to update ManagedFields: %v\", err)"
  },
  {
    "id" : "991c0e0f-e797-458d-bec7-78b167796b51",
    "prId" : 71583,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71583#pullrequestreview-182491876",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a2b1604-e91d-4ef0-981b-02be9cfb601e",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "You're passing nil here, which is supposed to be `newObject`. My problem with using newObject for the patch is that the order matters  a lot here :-/",
        "createdAt" : "2018-12-03T23:50:24Z",
        "updatedAt" : "2018-12-12T21:16:07Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "28ce95b5-26d2-4380-98a7-71cf1cfb276f",
        "parentId" : "5a2b1604-e91d-4ef0-981b-02be9cfb601e",
        "authorId" : "500960f8-0ed2-4739-b582-fd7135d2ce87",
        "body" : "So this is fixed with using patchBytes again?",
        "createdAt" : "2018-12-04T18:51:19Z",
        "updatedAt" : "2018-12-12T21:16:07Z",
        "lastEditedBy" : "500960f8-0ed2-4739-b582-fd7135d2ce87",
        "tags" : [
        ]
      },
      {
        "id" : "66fd7d99-e308-4862-913d-5019cff78a79",
        "parentId" : "5a2b1604-e91d-4ef0-981b-02be9cfb601e",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "yes",
        "createdAt" : "2018-12-06T23:10:16Z",
        "updatedAt" : "2018-12-12T21:16:07Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3b778f6f63bb322ae39691d7bfc070d92235cbf",
    "line" : 160,
    "diffHunk" : "@@ -1,1 +557,561 @@\n\twasCreated := false\n\tp.updatedObjectInfo = rest.DefaultUpdatedObjectInfo(nil, p.applyPatch, p.applyManagedFields, p.applyAdmission)\n\tresult, err := finishRequest(p.timeout, func() (runtime.Object, error) {\n\t\t// TODO: Pass in UpdateOptions to override UpdateStrategy.AllowUpdateOnCreate"
  },
  {
    "id" : "19d81fc9-9eac-4ebf-8b4c-158ee81baa89",
    "prId" : 71583,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71583#pullrequestreview-182474566",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f54414df-cee8-4845-8998-7a6fbe76466a",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "what prevents you from fixing the name now?",
        "createdAt" : "2018-12-06T18:34:25Z",
        "updatedAt" : "2018-12-12T21:16:07Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "a56afabf-9452-4020-9f11-685ebd2b0841",
        "parentId" : "f54414df-cee8-4845-8998-7a6fbe76466a",
        "authorId" : "500960f8-0ed2-4739-b582-fd7135d2ce87",
        "body" : "It was meant as a todo while creating the PR. So nothing long term I just wanted to move it until i finished what I was doing back then.\r\n\r\nAnd I got to think about it a little more/understand why convertor is named convertor etc. So I'm on it :+1: ",
        "createdAt" : "2018-12-06T22:16:19Z",
        "updatedAt" : "2018-12-12T21:16:07Z",
        "lastEditedBy" : "500960f8-0ed2-4739-b582-fd7135d2ce87",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3b778f6f63bb322ae39691d7bfc070d92235cbf",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +466,470 @@}\n\n// TODO(kwiesmueller): typeConverter & convertor naming needs \"fixing\"\nfunc makeManagedFieldsUpdater(typeConverter apply.TypeConverter, convert convertor, updater merge.Updater, manager string) rest.TransformFunc {\n\treturn func(_ context.Context, newObj runtime.Object, oldObj runtime.Object) (runtime.Object, error) {"
  },
  {
    "id" : "f9a4f8df-71cb-45ff-b17b-bd9b01de41c5",
    "prId" : 71583,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71583#pullrequestreview-183866188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b838a201-b403-4c33-902e-97e61f1e0f24",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "It looks like the `if scope.OpenAPIModels == nil` condition is repeated many times. Can we change this code just a little bit so that it doesn't happen? Also if you add a condition on the serversideapply flag, it's going to be even worse.",
        "createdAt" : "2018-12-11T19:39:37Z",
        "updatedAt" : "2018-12-12T21:16:07Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3b778f6f63bb322ae39691d7bfc070d92235cbf",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +550,554 @@\t\t\treturn nil, false, err\n\t\t}\n\t\tp.mechanism = &applyPatcher{patcher: p, converter: converter, updater: updater}\n\t\tp.forceAllowCreate = true\n\tdefault:"
  },
  {
    "id" : "e193cecf-236f-4da2-82a2-53d977c7c249",
    "prId" : 71583,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71583#pullrequestreview-183925555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4eb8597a-32b4-4cbe-b8f0-8fc8d9d42375",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "these two variables don't have to be pre-created now, do they?",
        "createdAt" : "2018-12-11T22:02:44Z",
        "updatedAt" : "2018-12-12T21:16:07Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3b778f6f63bb322ae39691d7bfc070d92235cbf",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +507,511 @@// patchResource divides PatchResource for easier unit testing\nfunc (p *patcher) patchResource(ctx context.Context, scope RequestScope) (runtime.Object, bool, error) {\n\tvar (\n\t\tconverter apply.TypeConverter\n\t\tupdater   merge.Updater"
  },
  {
    "id" : "f4efe65b-1860-4bb6-925f-0a51eace682f",
    "prId" : 71583,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71583#pullrequestreview-183925555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da02f860-1dff-47f7-a4da-5adc348b6970",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "doesn't need to be pre-created either",
        "createdAt" : "2018-12-11T22:02:53Z",
        "updatedAt" : "2018-12-12T21:16:07Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3b778f6f63bb322ae39691d7bfc070d92235cbf",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +515,519 @@\t\tif utilfeature.DefaultFeatureGate.Enabled(features.ServerSideApply) {\n\t\t\tif scope.OpenAPIModels != nil {\n\t\t\t\tvar err error\n\t\t\t\tconverter, err = apply.NewTypeConverter(scope.OpenAPIModels)\n\t\t\t\tif err != nil {"
  },
  {
    "id" : "a8169c92-d6a7-41eb-9f89-6348776206bc",
    "prId" : 68346,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68346#pullrequestreview-154263383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5941533-ee08-4d72-94b6-20a61be86ffa",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Can you use the `interpretPatchError(err)` like other places in this file?",
        "createdAt" : "2018-09-07T20:57:19Z",
        "updatedAt" : "2018-09-12T02:07:15Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "563f11cf-d519-4a03-93a8-33c73d7b1b37",
        "parentId" : "a5941533-ee08-4d72-94b6-20a61be86ffa",
        "authorId" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "body" : "interpretPatchError can only deal with [mergepatch errors](https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/util/mergepatch/errors.go#L26)",
        "createdAt" : "2018-09-10T08:40:38Z",
        "updatedAt" : "2018-09-12T02:07:15Z",
        "lastEditedBy" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "tags" : [
        ]
      },
      {
        "id" : "14c06731-43fa-4028-8c31-d574e22382ba",
        "parentId" : "a5941533-ee08-4d72-94b6-20a61be86ffa",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Got it. \r\n\r\n* Can you remove the `interpretPatchError` at this line: https://github.com/kubernetes/kubernetes/blob/d472a5477705317706b09afc9589bb75496aeb02/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/patch.go#L268? Because it does nothing.\r\n\r\n* Could you rename the `interpretPatchError` function to `interpretStrategicMergePatchError`, since that's what it handles.\r\n\r\nI agree that we should fix upstream to make json-patch return typed errors. Then we can make `interpretPatchError` interprets json-patch errors.",
        "createdAt" : "2018-09-10T18:16:29Z",
        "updatedAt" : "2018-09-12T02:07:15Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "29548ee9-bdb2-4dae-92f5-19e125055a78",
        "parentId" : "a5941533-ee08-4d72-94b6-20a61be86ffa",
        "authorId" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "body" : "Done",
        "createdAt" : "2018-09-11T15:36:40Z",
        "updatedAt" : "2018-09-12T02:07:15Z",
        "lastEditedBy" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "tags" : [
        ]
      }
    ],
    "commit" : "1248f569917511c37501b6ef6bbb215ce87353dc",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +285,289 @@\t\tpatchObj, err := jsonpatch.DecodePatch(p.patchJS)\n\t\tif err != nil {\n\t\t\treturn nil, errors.NewBadRequest(err.Error())\n\t\t}\n\t\tpatchedJS, err := patchObj.Apply(versionedJS)"
  },
  {
    "id" : "e436f797-905f-4667-bb88-15c47032bd54",
    "prId" : 68346,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68346#pullrequestreview-153500662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb7494d7-5490-4e71-b518-ca7fd74d36f0",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Same here.",
        "createdAt" : "2018-09-07T20:57:46Z",
        "updatedAt" : "2018-09-12T02:07:15Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "1248f569917511c37501b6ef6bbb215ce87353dc",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +289,293 @@\t\tpatchedJS, err := patchObj.Apply(versionedJS)\n\t\tif err != nil {\n\t\t\treturn nil, errors.NewGenericServerResponse(http.StatusUnprocessableEntity, \"\", schema.GroupResource{}, \"\", err.Error(), 0, false)\n\t\t}\n\t\treturn patchedJS, nil"
  },
  {
    "id" : "963a3052-feb1-4c99-b224-b67253a14966",
    "prId" : 65723,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65723#pullrequestreview-135111186",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d67f5e6-628a-4097-ad9b-f90e9030924a",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "@jennybuckley Could you sync with #65572?  Checking `CREATE` operation in `p.createValidation`?😃",
        "createdAt" : "2018-07-05T03:13:12Z",
        "updatedAt" : "2018-07-06T18:55:12Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "29223830-43eb-444f-ba8b-7bb0b0a0d0b4",
        "parentId" : "9d67f5e6-628a-4097-ad9b-f90e9030924a",
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "Thanks for the review!\r\n\r\nI think #65572 is to fix the admission called in create on update, but this PR is only concerned with create on patch. The server side apply feature branch, which this PR is being made to, already has a PR merged to it (#64892) which gets the right validating and mutating admission called. The staticAdmissionAttributes for create are set [here](https://github.com/jennybuckley/kubernetes/blob/a2a02afe4664cbfb5334c008304254a559f4ec5f/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/patch.go#L113), and then the p.createValidation is built using those attributes [here](https://github.com/jennybuckley/kubernetes/blob/a2a02afe4664cbfb5334c008304254a559f4ec5f/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/patch.go#L127)",
        "createdAt" : "2018-07-06T18:17:25Z",
        "updatedAt" : "2018-07-06T18:55:12Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e371539a676e51fa9fef1446d92b842baa30f88",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +417,421 @@\tresult, err := finishRequest(p.timeout, func() (runtime.Object, error) {\n\t\t// TODO: Pass in UpdateOptions to override UpdateStrategy.AllowUpdateOnCreate\n\t\tupdateObject, created, updateErr := p.restPatcher.Update(ctx, p.name, p.updatedObjectInfo, p.createValidation, p.updateValidation, p.forceAllowCreate)\n\t\twasCreated = created\n\t\treturn updateObject, updateErr"
  },
  {
    "id" : "f1ff6825-a7ac-4302-9e44-4ea289d54298",
    "prId" : 65105,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65105#pullrequestreview-135579618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab3ab76d-19aa-41ed-952a-9b9b31f26ab1",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I'm slightly cross-eyed at this point, but this didn't change, right?",
        "createdAt" : "2018-07-09T20:26:31Z",
        "updatedAt" : "2018-07-12T14:31:53Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "89412dcf-767a-4807-9603-bfd6fb9659e8",
        "parentId" : "ab3ab76d-19aa-41ed-952a-9b9b31f26ab1",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "No, it hasn't. Sorry, I initially had multiple commits, and I have a couple of pure cosmetic changes in the middle that got squashed together.",
        "createdAt" : "2018-07-09T20:29:11Z",
        "updatedAt" : "2018-07-12T14:31:53Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bfd5ec41ff7c6143514ffaf4250b106003d4ea3",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +116,120 @@\n\t\tuserInfo, _ := request.UserFrom(ctx)\n\t\tstaticAdmissionAttributes := admission.NewAttributesRecord(\n\t\t\tnil,\n\t\t\tnil,"
  },
  {
    "id" : "b60c509f-3e60-4fb3-9228-b4804a83dd0b",
    "prId" : 65105,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65105#pullrequestreview-135579172",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33afc2d7-d380-4652-9378-043ce6b6d3fc",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "are we comfortable saying any future differences in PatchOptions will result in a PatchOptions that is a superset of UpdateOptions? I think that makes sense.",
        "createdAt" : "2018-07-09T20:27:56Z",
        "updatedAt" : "2018-07-12T14:31:53Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bfd5ec41ff7c6143514ffaf4250b106003d4ea3",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +91,95 @@\t\t}\n\n\t\toptions := &metav1.UpdateOptions{}\n\t\tif err := metainternalversion.ParameterCodec.DecodeParameters(req.URL.Query(), scope.MetaGroupVersion, options); err != nil {\n\t\t\terr = errors.NewBadRequest(err.Error())"
  },
  {
    "id" : "a66820f9-4894-4ab8-8a05-2782184e9acb",
    "prId" : 64892,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64892#pullrequestreview-127789379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce680285-785a-47e9-af2e-51c5f442d9fc",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "for consistency with how admission normally sees create requests, I'd set current object to `nil` in the admission attributes in this case",
        "createdAt" : "2018-06-12T00:51:08Z",
        "updatedAt" : "2018-06-12T22:20:09Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3c7b21a15034f6fe98c5871e42b1466e4d81a7c",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +365,369 @@\t\treturn nil, err\n\t} else if !hasUID {\n\t\toperation = admission.Create\n\t\tcurrentObject = nil\n\t} else {"
  },
  {
    "id" : "b4f57e24-51b4-4348-a04b-04a74840e45d",
    "prId" : 64892,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64892#pullrequestreview-128149879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0555e849-9ade-4ace-aa27-daeeb926ceb1",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This name is also confusing now.",
        "createdAt" : "2018-06-12T21:09:08Z",
        "updatedAt" : "2018-06-12T22:20:09Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3c7b21a15034f6fe98c5871e42b1466e4d81a7c",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +327,331 @@}\n\n// applyPatch is called every time GuaranteedUpdate asks for the updated object,\n// and is given the currently persisted object as input.\n// TODO: rename this function because the name implies it is related to applyPatcher"
  },
  {
    "id" : "361f5ea1-7ba1-4f50-b713-4536942bb3df",
    "prId" : 64856,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64856#pullrequestreview-126862410",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e763221d-133b-4415-8144-15860f011cf0",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "should we add a new file for the applyPatcher & methods?",
        "createdAt" : "2018-06-06T23:14:58Z",
        "updatedAt" : "2018-06-07T17:48:48Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "deefc0c4-0dc7-4d6e-95df-8c45249d81dc",
        "parentId" : "e763221d-133b-4415-8144-15860f011cf0",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "We can. But if we do it should be in a different PR I think",
        "createdAt" : "2018-06-06T23:29:57Z",
        "updatedAt" : "2018-06-07T17:48:48Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "71a3c21c-6f9f-44e6-b574-5838c5f81325",
        "parentId" : "e763221d-133b-4415-8144-15860f011cf0",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "That's fine.",
        "createdAt" : "2018-06-07T16:34:40Z",
        "updatedAt" : "2018-06-07T17:48:48Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0c2fe21f2c49790e14c7ad65991f1d5f2f0755f",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +323,327 @@\t*patcher\n\n\tmodel proto.Schema\n}\n"
  },
  {
    "id" : "cbe37a39-348f-4b3b-8fc6-a4696334e8fe",
    "prId" : 64856,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64856#pullrequestreview-126588436",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afbdc0af-181c-4c76-a4aa-485ed69d0437",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "seems important :)",
        "createdAt" : "2018-06-06T23:16:13Z",
        "updatedAt" : "2018-06-07T17:48:48Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0c2fe21f2c49790e14c7ad65991f1d5f2f0755f",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +409,413 @@\t}\n\n\t// TODO(apelisse): Update last applied\n\t// TODO(apelisse): Also update last-applied on the create path\n\t// TODO(apelisse): Check for conflicts with other lastApplied"
  },
  {
    "id" : "cda0efe8-2b6a-4bf3-9c01-9a621332f06d",
    "prId" : 64856,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64856#pullrequestreview-126868154",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b7cf530-377d-4e92-8ae5-9e4d6795fa05",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Will errors this returns get converted into the correct status error for human consumption?",
        "createdAt" : "2018-06-06T23:20:56Z",
        "updatedAt" : "2018-06-07T17:48:48Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "2e280c0e-1a9a-4dd8-8142-01aa3d2291c5",
        "parentId" : "5b7cf530-377d-4e92-8ae5-9e4d6795fa05",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "I'm not sure what you mean or what we should do. I'll look into it though.",
        "createdAt" : "2018-06-06T23:34:36Z",
        "updatedAt" : "2018-06-07T17:48:48Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "440acfee-b39d-4953-94a3-f8f481bd7b86",
        "parentId" : "5b7cf530-377d-4e92-8ae5-9e4d6795fa05",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The error return stack only gives human friendly errors if the error implements a certain interface. So somewhere between here and there, something needs to convert the error into the correct object. Tracing back the call stack should answer the question.",
        "createdAt" : "2018-06-07T16:45:04Z",
        "updatedAt" : "2018-06-07T17:48:48Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8f856559-51f0-44b6-b983-4e1b5a2764aa",
        "parentId" : "5b7cf530-377d-4e92-8ae5-9e4d6795fa05",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "I've used the errors for debugging, here's what they look like:\r\n\r\n```\r\n{\r\n  \"kind\": \"Status\",\r\n  \"apiVersion\": \"v1\",\r\n  \"metadata\": {\r\n    \r\n  },\r\n  \"status\": \"Failure\",\r\n  \"message\": \"We managed to reach the end, congratulations!\",\r\n  \"code\": 500\r\n}\r\n```\r\n\r\nIs that what you'd expect?",
        "createdAt" : "2018-06-07T16:50:11Z",
        "updatedAt" : "2018-06-07T17:48:48Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0c2fe21f2c49790e14c7ad65991f1d5f2f0755f",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +380,384 @@}\n\nfunc (p *applyPatcher) applyPatchToCurrentObject(currentObject runtime.Object) (runtime.Object, error) {\n\tcurrent, err := p.convertCurrentVersion(currentObject)\n\tif err != nil {"
  },
  {
    "id" : "4d89c328-7acf-4e80-b4ad-1e0fb29b7f42",
    "prId" : 62868,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62868#pullrequestreview-114619277",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b82946ed-35d8-45cf-a5ba-81cbc1713873",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "inlining the patcher in the mechanism makes it hard to tell which fields of smpPatcher are safe to mutate during the operation and which are supposed to be immutable",
        "createdAt" : "2018-04-24T04:49:37Z",
        "updatedAt" : "2018-04-25T16:13:12Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "349a99b80e7e6c0c92218c814ae0858fd71609fc",
    "line" : 509,
    "diffHunk" : "@@ -1,1 +339,343 @@\ntype smpPatcher struct {\n\t*patcher\n\toriginalObjMap map[string]interface{}\n}"
  },
  {
    "id" : "c1fb6948-c5bb-45fa-985f-87e6c063150f",
    "prId" : 58260,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58260#pullrequestreview-89001716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f33da2d-4f18-4bab-bec7-5e92571bd2f0",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "nit: >= 0",
        "createdAt" : "2018-01-16T07:19:16Z",
        "updatedAt" : "2018-01-16T07:19:16Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "ff09be91-a832-4b0f-bdae-c9cab9666548",
        "parentId" : "2f33da2d-4f18-4bab-bec7-5e92571bd2f0",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Preexisting, and I don't think so… leading ; isn't a valid mime type attribute",
        "createdAt" : "2018-01-16T07:22:04Z",
        "updatedAt" : "2018-01-16T07:22:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "59c305b59083a8e731c76eb859e77222402d1448",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +50,54 @@\t\tcontentType := req.Header.Get(\"Content-Type\")\n\t\t// Remove \"; charset=\" if included in header.\n\t\tif idx := strings.Index(contentType, \";\"); idx > 0 {\n\t\t\tcontentType = contentType[:idx]\n\t\t}"
  },
  {
    "id" : "0ace65e4-c4a4-4754-89f4-d623f9de1256",
    "prId" : 58260,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58260#pullrequestreview-89002409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9623e1f-030d-40da-ad5e-c0291fbad31e",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "what's meant with the TODO? (I know it pre-existed)",
        "createdAt" : "2018-01-16T07:21:12Z",
        "updatedAt" : "2018-01-16T07:21:12Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "134619a3-5c6c-454a-ae3a-d5e3ee16f7e3",
        "parentId" : "c9623e1f-030d-40da-ad5e-c0291fbad31e",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "It means to switch this to follow a similar flow with the negotiating serializer, that's just not built for dealing with patch mime types as-is",
        "createdAt" : "2018-01-16T07:23:44Z",
        "updatedAt" : "2018-01-16T07:23:44Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "5708d5d0-f460-4a3c-a372-6e9da36fd70c",
        "parentId" : "c9623e1f-030d-40da-ad5e-c0291fbad31e",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "was reading \"in negation\". negotiation makes more sense actually.",
        "createdAt" : "2018-01-16T07:26:48Z",
        "updatedAt" : "2018-01-16T07:26:49Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "59c305b59083a8e731c76eb859e77222402d1448",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +47,51 @@\treturn func(w http.ResponseWriter, req *http.Request) {\n\t\t// Do this first, otherwise name extraction can fail for unrecognized content types\n\t\t// TODO: handle this in negotiation\n\t\tcontentType := req.Header.Get(\"Content-Type\")\n\t\t// Remove \"; charset=\" if included in header."
  },
  {
    "id" : "b3167968-a446-4472-ae1c-01290f204c3a",
    "prId" : 54477,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54477#pullrequestreview-72184937",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13976355-32c2-4aca-a96f-7088625d5637",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "`switch err.(type) {`, no?",
        "createdAt" : "2017-10-26T12:37:35Z",
        "updatedAt" : "2017-10-30T05:11:44Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "4c00d5a6-e335-47f5-bb46-31d7b4e39ce7",
        "parentId" : "13976355-32c2-4aca-a96f-7088625d5637",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "https://tour.golang.org/methods/16",
        "createdAt" : "2017-10-26T12:38:02Z",
        "updatedAt" : "2017-10-30T05:11:44Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "cb2bb32a-a804-4aff-8eaf-9680cf6253f4",
        "parentId" : "13976355-32c2-4aca-a96f-7088625d5637",
        "authorId" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "body" : "`mergepatch.ErrBadJSONDoc`, etc are all of type `error`. So `err.(type)` will give `error` everytime.\r\n\r\nSince `mergepatch.ErrBadJSONDoc` is already of type `error`, we need to check the values (instead of a type switch)",
        "createdAt" : "2017-10-26T12:43:47Z",
        "updatedAt" : "2017-10-30T05:11:44Z",
        "lastEditedBy" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "tags" : [
        ]
      },
      {
        "id" : "f262f954-2e0f-492b-95ab-dc3142a845ec",
        "parentId" : "13976355-32c2-4aca-a96f-7088625d5637",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "oh, so these are all constant error objects? Then your code is right. :+1:",
        "createdAt" : "2017-10-26T13:05:42Z",
        "updatedAt" : "2017-10-30T05:11:44Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "826f64fe-2691-42ed-8db8-49c4d7ce75c0",
        "parentId" : "13976355-32c2-4aca-a96f-7088625d5637",
        "authorId" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "body" : "> oh, so these are all constant error objects? \r\n\r\nYes, they are constant error objects formatted with the given text. :)",
        "createdAt" : "2017-10-26T13:09:29Z",
        "updatedAt" : "2017-10-30T05:11:44Z",
        "lastEditedBy" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0a2168ecbf8b4e43f932a32fa55cd55215123cc",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +460,464 @@// interpretPatchError interprets the error type and returns an error with appropriate HTTP code.\nfunc interpretPatchError(err error) error {\n\tswitch err {\n\tcase mergepatch.ErrBadJSONDoc, mergepatch.ErrBadPatchFormatForPrimitiveList, mergepatch.ErrBadPatchFormatForRetainKeys, mergepatch.ErrBadPatchFormatForSetElementOrderList:\n\t\treturn errors.NewBadRequest(err.Error())"
  },
  {
    "id" : "da9b7cac-e21c-4bd4-b076-4bb37242a57e",
    "prId" : 43871,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43871#pullrequestreview-30976698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37179adf-d440-44ba-8ccc-4e298cf81a58",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I just removed the return values here since they are unsuitable for use after having used them to apply the patch",
        "createdAt" : "2017-03-31T17:37:41Z",
        "updatedAt" : "2017-04-06T16:30:47Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "cdd2f197-9407-4d14-9256-3b8a46efc1f3",
        "parentId" : "37179adf-d440-44ba-8ccc-4e298cf81a58",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yeah - that sounds good.",
        "createdAt" : "2017-04-05T07:51:00Z",
        "updatedAt" : "2017-04-06T16:30:47Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c415e4aeabe5e5514dcdbf2c01c533533c25f4c1",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +87,91 @@\tobjToUpdate runtime.Object,\n\tversionedObj runtime.Object,\n) error {\n\toriginalObjMap := make(map[string]interface{})\n\tif err := unstructured.DefaultConverter.ToUnstructured(originalObject, &originalObjMap); err != nil {"
  },
  {
    "id" : "65a896b0-e955-4c72-a62b-b25ddc243b90",
    "prId" : 40522,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40522#pullrequestreview-23417819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b23743f3-b045-43a2-a168-f3570b1aea49",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I'd like the comment on this method to indicate that this expects a versioned object, not the internal object like it did before.  Also, no other callers in this package?",
        "createdAt" : "2017-02-22T21:27:27Z",
        "updatedAt" : "2017-02-23T08:09:09Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "bf9f923e-5ec6-47fb-a22c-cb5624290935",
        "parentId" : "b23743f3-b045-43a2-a168-f3570b1aea49",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Added comment. And yes - this is the only caller.",
        "createdAt" : "2017-02-23T08:09:17Z",
        "updatedAt" : "2017-02-23T08:09:18Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e34e1abe3345939268c1fdbc05e2d933396ab2fe",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +88,92 @@) (originalObjMap map[string]interface{}, patchMap map[string]interface{}, retErr error) {\n\toriginalObjMap = make(map[string]interface{})\n\tif err := unstructured.DefaultConverter.ToUnstructured(originalObject, &originalObjMap); err != nil {\n\t\treturn nil, nil, err\n\t}"
  }
]