[
  {
    "id" : "dc5c0ba4-7e3d-4332-a53b-635cb9a13be0",
    "prId" : 96061,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96061#pullrequestreview-526738219",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ae61f60-c19b-4015-ab13-df13d862a489",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "will the WithSecondaryDeadline timeout trigger this one too? I.e. is there only one timeout value in a context?",
        "createdAt" : "2020-11-09T16:58:48Z",
        "updatedAt" : "2020-11-14T16:55:37Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "4cfc0987-7c70-4d7e-8149-afaa83b1cc8f",
        "parentId" : "5ae61f60-c19b-4015-ab13-df13d862a489",
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "context is hierarchical, if a parent context times out or is canceled then the child context also gets canceled/times out.\r\n```\r\n\tparent, c1 := context.WithTimeout(context.TODO(), 5 * time.Second)\r\n\tchild, c2 := context.WithTimeout(parent, 10 * time.Second)\r\n```\r\nHere the child context will also time out in `5s`. ",
        "createdAt" : "2020-11-09T23:32:01Z",
        "updatedAt" : "2020-11-14T16:55:37Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      }
    ],
    "commit" : "83f869ee1350da1b65d508725749fb70d0f535f2",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +928,932 @@\tfor i, tc := range testcases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tctx, cancel := tc.timeout()\n\t\t\tdefer func() {\n\t\t\t\tcancel()"
  },
  {
    "id" : "57b14428-4924-4ef4-97a2-0f61cdede487",
    "prId" : 63146,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63146#pullrequestreview-115349917",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc8549e1-ab2b-4fcc-8c21-0adc551358ac",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this test computes and sends a patch of `{\"spec\":{\"nodeName\":\"there\"}}` (computed from delta(`startingPod`, `changedPod`)), which applies cleanly on top of `updatePod`, and should *succeed* in a retry, not fail (see PR description for removal of conflicts-with-delta-from-first-seen-current-object behavior).\r\n\r\nAs a follow-up, it would be good to refactor these tests to make it clearer what patch is actually being sent and tested",
        "createdAt" : "2018-04-25T20:52:13Z",
        "updatedAt" : "2018-04-26T02:45:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b526532c8abf3cbd4442f364377cb7c7f42f199e",
    "line" : 267,
    "diffHunk" : "@@ -1,1 +663,667 @@\t\tchangedPod:  &example.Pod{},\n\t\tupdatePod:   &example.Pod{},\n\t\texpectedPod: &example.Pod{},\n\t}\n"
  },
  {
    "id" : "5b97d19c-1ad3-4bcd-b508-c251033105c5",
    "prId" : 63146,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63146#pullrequestreview-115350304",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0dca2ce-72ed-4f4b-9962-42185176e74b",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "best viewed ignoring whitespace - https://github.com/kubernetes/kubernetes/pull/63146/commits/9f6d91f4c979fdc30067c7f3e7eabb8401da99c9?w=1",
        "createdAt" : "2018-04-25T20:53:25Z",
        "updatedAt" : "2018-04-26T02:45:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b526532c8abf3cbd4442f364377cb7c7f42f199e",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +174,178 @@\nfunc (p *testPatcher) Update(ctx context.Context, name string, objInfo rest.UpdatedObjectInfo, createValidation rest.ValidateObjectFunc, updateValidation rest.ValidateObjectUpdateFunc) (runtime.Object, bool, error) {\n\t// Simulate GuaranteedUpdate behavior (retries internally on etcd changes if the incoming resource doesn't pin resourceVersion)\n\tfor {\n\t\tcurrentPod := p.startingPod"
  },
  {
    "id" : "64eefc6c-2555-45fd-824b-9003ea528f04",
    "prId" : 63146,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63146#pullrequestreview-115357223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77e8666d-af86-485f-9da5-896581a20887",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I am nervous about recreating functionality here-- there's not much guarantee that this test will continue to correspond to GuaranteedUpdate (or even that it does currently without checking).",
        "createdAt" : "2018-04-25T20:56:37Z",
        "updatedAt" : "2018-04-26T02:45:04Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "627e658a-e3a8-4872-8956-4a9e5c8dc8fd",
        "parentId" : "77e8666d-af86-485f-9da5-896581a20887",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah I would be a lot more comfortable if there were some guarantee that this code corresponds to GuarateedUpdate.",
        "createdAt" : "2018-04-25T21:02:46Z",
        "updatedAt" : "2018-04-26T02:45:04Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "25ba25dc-3a0c-43d3-9875-5a550b2696bc",
        "parentId" : "77e8666d-af86-485f-9da5-896581a20887",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> Yeah I would be a lot more comfortable if there were some guarantee that this code corresponds to GuarateedUpdate.\r\n\r\nI can look into doing that, but it will likely result in far bigger test changes (as in, actually starting up an etcd test instance internally like we do for our rest storage tests).",
        "createdAt" : "2018-04-25T21:14:49Z",
        "updatedAt" : "2018-04-26T02:45:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b526532c8abf3cbd4442f364377cb7c7f42f199e",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +190,194 @@\t\t}\n\t\tinPod := obj.(*example.Pod)\n\t\tif inPod.ResourceVersion == \"\" || inPod.ResourceVersion == \"0\" {\n\t\t\tinPod.ResourceVersion = p.updatePod.ResourceVersion\n\t\t}"
  },
  {
    "id" : "eb83dbbc-8367-4169-96ee-65b92fd94a1c",
    "prId" : 63146,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63146#pullrequestreview-115356455",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99ef3804-ea07-4a52-baff-4dd01f51b91c",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'm having trouble understanding this-- why is there no locking? do we not have a GuaranteedUpdate fake anywhere? Why does the patcher have startingPod and updatePod as member variables?\r\n\r\nThe diff might be more comprehensible if you move the body of the loop into its own function.",
        "createdAt" : "2018-04-25T20:56:40Z",
        "updatedAt" : "2018-04-26T02:45:04Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5a8c839b-2b7c-4fac-9d3c-24cb0b31dafe",
        "parentId" : "99ef3804-ea07-4a52-baff-4dd01f51b91c",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> why is there no locking?\r\n\r\nthe test is single-threaded\r\n\r\n> do we not have a GuaranteedUpdate fake anywhere?\r\n\r\nwe do not (and if we did, I'd have low confidence it was in perfect sync with the various storage GuaranteedUpdate impls) :(\r\n\r\n> Why does the patcher have startingPod and updatePod as member variables?\r\n\r\nit only models a single conflict/retry scenario\r\n\r\n> The diff might be more comprehensible if you move the body of the loop into its own function.\r\n\r\nI can if you'd like, or you can view the commit ignoring whitespace changes https://github.com/kubernetes/kubernetes/commit/9f6d91f4c979fdc30067c7f3e7eabb8401da99c9?w=1",
        "createdAt" : "2018-04-25T21:12:18Z",
        "updatedAt" : "2018-04-26T02:45:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b526532c8abf3cbd4442f364377cb7c7f42f199e",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +176,180 @@\t// Simulate GuaranteedUpdate behavior (retries internally on etcd changes if the incoming resource doesn't pin resourceVersion)\n\tfor {\n\t\tcurrentPod := p.startingPod\n\t\tif p.numUpdates > 0 {\n\t\t\tcurrentPod = p.updatePod"
  },
  {
    "id" : "2573be57-8991-4104-abe7-7f39c21956b7",
    "prId" : 54477,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54477#pullrequestreview-72776282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "160c917e-bc8e-4324-b749-5954bc13c8d1",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "!apierrors.IsBadRequest(err)",
        "createdAt" : "2017-10-30T09:37:19Z",
        "updatedAt" : "2017-10-30T09:37:20Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0a2168ecbf8b4e43f932a32fa55cd55215123cc",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +114,118 @@\tactual := &testPatchType{}\n\terr := strategicPatchObject(codec, defaulter, original, []byte(patch), actual, &testPatchType{})\n\tif apierrors.IsBadRequest(err) == false {\n\t\tt.Errorf(\"expected HTTP status: BadRequest, got: %#v\", apierrors.ReasonForError(err))\n\t}"
  },
  {
    "id" : "c6572e12-01cb-4268-8aec-d6f78bfddee8",
    "prId" : 41650,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41650#pullrequestreview-22771262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4349274-2f58-4ac6-a5e3-6611056bd681",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "how much I dislike these global registrations....",
        "createdAt" : "2017-02-20T13:36:34Z",
        "updatedAt" : "2017-02-21T14:38:59Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "9378529b-042e-4ebd-9650-90e7b80085ba",
        "parentId" : "f4349274-2f58-4ac6-a5e3-6611056bd681",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> how much I dislike these global registrations....\r\n\r\nAgree, but this stops the bleeding.",
        "createdAt" : "2017-02-20T14:26:16Z",
        "updatedAt" : "2017-02-21T14:38:59Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "7153c9161739f97a5efebe39c5cdbbc32ca0e43d",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +41,45 @@\n\t// need to register pods\n\t_ \"k8s.io/client-go/pkg/api/install\"\n)\n"
  }
]