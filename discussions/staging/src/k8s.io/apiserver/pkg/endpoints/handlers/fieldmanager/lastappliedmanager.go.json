[
  {
    "id" : "5417b687-0fe1-4e68-8c22-67c489157577",
    "prId" : 90187,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90187#pullrequestreview-435029724",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61ac04f8-c766-4018-94e8-9189d412a0ad",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "We probably discussed that already, but I forgot the outcome. Should we really complain about things that we believe shouldn't be conflict? In other words, shouldn't we return the difference as the set of conflicts here?",
        "createdAt" : "2020-06-18T22:05:10Z",
        "updatedAt" : "2020-07-08T23:14:31Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "eb4d4620-b498-48c1-8079-a1df4a4d1767",
        "parentId" : "61ac04f8-c766-4018-94e8-9189d412a0ad",
        "authorId" : "f40287b7-c508-4d95-b3ad-07d0de320962",
        "body" : "Oh wow right, we should do this and only return the difference",
        "createdAt" : "2020-06-18T22:43:32Z",
        "updatedAt" : "2020-07-08T23:14:31Z",
        "lastEditedBy" : "f40287b7-c508-4d95-b3ad-07d0de320962",
        "tags" : [
        ]
      },
      {
        "id" : "e1e60feb-ccc8-4a8d-a508-778cf384dd68",
        "parentId" : "61ac04f8-c766-4018-94e8-9189d412a0ad",
        "authorId" : "f40287b7-c508-4d95-b3ad-07d0de320962",
        "body" : "Done",
        "createdAt" : "2020-06-19T18:15:54Z",
        "updatedAt" : "2020-07-08T23:14:31Z",
        "lastEditedBy" : "f40287b7-c508-4d95-b3ad-07d0de320962",
        "tags" : [
        ]
      },
      {
        "id" : "86848969-6293-4aa1-8be3-5939ae2f4233",
        "parentId" : "61ac04f8-c766-4018-94e8-9189d412a0ad",
        "authorId" : "f40287b7-c508-4d95-b3ad-07d0de320962",
        "body" : "Added a test for this",
        "createdAt" : "2020-06-22T15:20:26Z",
        "updatedAt" : "2020-07-08T23:14:31Z",
        "lastEditedBy" : "f40287b7-c508-4d95-b3ad-07d0de320962",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4368eb67e363d3d03f81214a8929268d2fe88ff",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +83,87 @@\t\treturn newLiveObj, newManaged, newErr\n\t}\n\tif !conflictSet.Difference(allowedConflictSet).Empty() {\n\t\tnewConflicts := conflictsDifference(conflicts, allowedConflictSet)\n\t\treturn newLiveObj, newManaged, newConflicts"
  },
  {
    "id" : "a5ea8d1a-2880-423a-b29b-8856e0d06efa",
    "prId" : 90187,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90187#pullrequestreview-434504527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f21d2bd0-7b1e-465d-aba6-f339a079cc9d",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "I was wondering what solution would exist for people who have a non-parseable last-applied annotation. There already exists tool in kubectl to edit it, but I also want to mention that forcing apply should solve the problem. Would you be able to confirm that it would not result in this piece of code failing (I think it wouldn't because we only get here if there are conflicts) and that the last-applied annotation would be updated none-the less?",
        "createdAt" : "2020-06-18T22:17:43Z",
        "updatedAt" : "2020-07-08T23:14:31Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "6bc9d09e-7594-4c56-83ae-adb2cd13e839",
        "parentId" : "f21d2bd0-7b1e-465d-aba6-f339a079cc9d",
        "authorId" : "f40287b7-c508-4d95-b3ad-07d0de320962",
        "body" : "Added a test for this, `TestServerSideApplyWithInvalidLastApplied`",
        "createdAt" : "2020-06-21T14:08:28Z",
        "updatedAt" : "2020-07-08T23:14:31Z",
        "lastEditedBy" : "f40287b7-c508-4d95-b3ad-07d0de320962",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4368eb67e363d3d03f81214a8929268d2fe88ff",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +91,95 @@}\n\nfunc (f *lastAppliedManager) allowedConflictsFromLastApplied(liveObj runtime.Object) (*fieldpath.Set, error) {\n\tvar accessor, err = meta.Accessor(liveObj)\n\tif err != nil {"
  }
]