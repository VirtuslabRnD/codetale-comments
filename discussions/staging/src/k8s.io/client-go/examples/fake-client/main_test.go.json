[
  {
    "id" : "6ec4bbb5-45e1-4fec-b73c-b0b1481b2915",
    "prId" : 95897,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95897#pullrequestreview-518228198",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c324a57-03a9-4af8-bcfc-31b94da3b0c0",
        "parentId" : null,
        "authorId" : "82028e42-35a4-463f-89f8-e989e3402f51",
        "body" : "One thing I did, since we don't know how many informers we will start without a lot of effort, is add a waitgroup between the List and the Watch. So list increments, watch decrements.\r\n\r\nThis probably doesn't work if you ever call List() for something other than ListAndWatch, but works great for this case\r\n\r\n```\r\n\tlistReactor := func(action clienttesting.Action) (handled bool, ret runtime.Object, err error) {\r\n\t\tc.informerWatchesPending.Inc()\r\n\t\treturn false, nil, nil\r\n\t}\r\n\twatchReactor := func(tracker clienttesting.ObjectTracker) func(action clienttesting.Action) (handled bool, ret watch.Interface, err error) {\r\n\t\treturn func(action clienttesting.Action) (handled bool, ret watch.Interface, err error) {\r\n\t\t\tgvr := action.GetResource()\r\n\t\t\tns := action.GetNamespace()\r\n\t\t\twatch, err := tracker.Watch(gvr, ns)\r\n\t\t\tif err != nil {\r\n\t\t\t\treturn false, nil, err\r\n\t\t\t}\r\n\t\t\tc.informerWatchesPending.Dec()\r\n\t\t\treturn true, watch, nil\r\n\t\t}\r\n\t}\r\n```",
        "createdAt" : "2020-10-27T16:15:22Z",
        "updatedAt" : "2021-03-23T00:01:13Z",
        "lastEditedBy" : "82028e42-35a4-463f-89f8-e989e3402f51",
        "tags" : [
        ]
      },
      {
        "id" : "d2d1aa6b-38da-4959-af3a-ba7967c1ed88",
        "parentId" : "2c324a57-03a9-4af8-bcfc-31b94da3b0c0",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "That's a nice trick! I added a comment to mention it.",
        "createdAt" : "2020-10-27T23:40:30Z",
        "updatedAt" : "2021-03-23T00:01:13Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      }
    ],
    "commit" : "942bc9b32e39bb9c6ca045c02b48cc84dfa86633",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +41,45 @@\tclient := fake.NewSimpleClientset()\n\t// A catch-all watch reactor that allows us to inject the watcherStarted channel.\n\tclient.PrependWatchReactor(\"*\", func(action clienttesting.Action) (handled bool, ret watch.Interface, err error) {\n\t\tgvr := action.GetResource()\n\t\tns := action.GetNamespace()"
  },
  {
    "id" : "4fafd638-02d5-4e6f-ae61-e33feb3b25a7",
    "prId" : 74969,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74969#pullrequestreview-211077391",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d8dc08d-3fd6-43be-9597-298f623d939b",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "wait.ForeverTestTimeout",
        "createdAt" : "2019-03-06T07:28:06Z",
        "updatedAt" : "2019-03-06T07:36:52Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "416c169d-e6f5-4dbe-b45b-2c00b14100c9",
        "parentId" : "5d8dc08d-3fd6-43be-9597-298f623d939b",
        "authorId" : "443f9b92-20b0-45c2-a13f-20c6f64f89eb",
        "body" : "this is not using timeout, just the function scope",
        "createdAt" : "2019-03-06T07:34:01Z",
        "updatedAt" : "2019-03-06T07:36:52Z",
        "lastEditedBy" : "443f9b92-20b0-45c2-a13f-20c6f64f89eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "88cab678ea541aa2edda2ef2971415c49edf8f86",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +32,36 @@// TestFakeClient demonstrates how to use a fake client with SharedInformerFactory in tests.\nfunc TestFakeClient(t *testing.T) {\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n"
  }
]