[
  {
    "id" : "1015a413-0805-46db-957f-bba9828bc36a",
    "prId" : 102107,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102107#pullrequestreview-666345546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c026af3f-eead-4c9e-b0a9-33f420344a74",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Same comment as in the other PR.\r\nThis PR is mixing great refactoring (btw - there are other places in this file where you could use this function too) with the actual changes in logic.\r\nIt would be much simpler to review if you would split the \"no-op\" refactoring change to a separate PR (as those are probably immediately mergable) and would make this PR much smaller.",
        "createdAt" : "2021-05-20T11:00:20Z",
        "updatedAt" : "2021-05-20T11:00:20Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "cf2f4b42-8dae-4e21-9c27-64a159973e40",
        "parentId" : "c026af3f-eead-4c9e-b0a9-33f420344a74",
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "@wojtek-t split the refactor into its own PR, please review when you have time - https://github.com/kubernetes/kubernetes/pull/102217",
        "createdAt" : "2021-05-24T02:09:18Z",
        "updatedAt" : "2021-05-24T02:09:18Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      }
    ],
    "commit" : "607d3819498e64d969407c3d7cbbb8f53d98f0d4",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +692,696 @@\turl := r.URL().String()\n\tfor {\n\t\treq, err := r.newHTTPRequest(ctx)\n\t\tif err != nil {\n\t\t\treturn nil, err"
  },
  {
    "id" : "4bedf447-c00d-44d5-bf6f-543f903a4eab",
    "prId" : 102107,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102107#pullrequestreview-668554613",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b80e997-a8e8-4728-881a-7ecd11c499b5",
        "parentId" : null,
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "This is in keeping with the current behavior, the caller may be relying on `watch.NewEmptyWatch()` on retryable error. (although we are retrying within Watch now)",
        "createdAt" : "2021-05-26T02:51:21Z",
        "updatedAt" : "2021-05-26T02:51:21Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      }
    ],
    "commit" : "607d3819498e64d969407c3d7cbbb8f53d98f0d4",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +745,749 @@\t\tif done {\n\t\t\tif isErrRetryableFunc(req, err) {\n\t\t\t\treturn watch.NewEmptyWatch(), nil\n\t\t\t}\n\t\t\tif err == nil {"
  },
  {
    "id" : "7f3f3efd-9988-428c-8510-55d67ce76288",
    "prId" : 102107,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102107#pullrequestreview-671147726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07584027-df12-4d4f-809b-7ff906a40a5c",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "nit: let's maybe define it consistently across methods (I mean in the same place)",
        "createdAt" : "2021-05-28T10:28:52Z",
        "updatedAt" : "2021-05-28T10:36:42Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "607d3819498e64d969407c3d7cbbb8f53d98f0d4",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +818,822 @@\n\tvar retryAfter *RetryAfter\n\turl := r.URL().String()\n\tfor {\n\t\treq, err := r.newHTTPRequest(ctx)"
  },
  {
    "id" : "7a4337fd-15d6-4d55-9deb-2c19776c1f2b",
    "prId" : 101162,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101162#pullrequestreview-639007078",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cea9574-5780-4f63-b490-2bec5d863110",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "isn't there `Info(message)` ?",
        "createdAt" : "2021-04-19T08:46:48Z",
        "updatedAt" : "2021-04-19T08:46:48Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "0ac3d608-8e51-4a08-bcac-1b389938cfa8",
        "parentId" : "9cea9574-5780-4f63-b490-2bec5d863110",
        "authorId" : "d4833dc2-a35d-4e7a-9a7b-e1e7566e1c83",
        "body" : "Not at the moment. This particular logger only defines [`Infof`](https://github.com/kubernetes/kubernetes/blob/4925cb66c942b4b4ce3677d343d08f2c5a393fa2/staging/src/k8s.io/client-go/rest/request.go#L666). Since it's not a widely used unexported type, I am hesitant to add more to it, but can easily be done. Let me know if we want to add `Info`.",
        "createdAt" : "2021-04-19T15:28:01Z",
        "updatedAt" : "2021-04-19T15:28:01Z",
        "lastEditedBy" : "d4833dc2-a35d-4e7a-9a7b-e1e7566e1c83",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1d0d401875b2076e73183f8468ecb95c3fe61aa",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +603,607 @@\t\t// If the rate limiter latency is very high, the log message should be printed at a higher log level,\n\t\t// but we use a throttled logger to prevent spamming.\n\t\tglobalThrottledLogger.Infof(\"%s\", message)\n\t}\n\tmetrics.RateLimiterLatency.Observe(ctx, r.verb, r.finalURLTemplate(), latency)"
  },
  {
    "id" : "e6c7b0ac-d0ea-4567-90b6-d4ade6f67d79",
    "prId" : 99079,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99079#pullrequestreview-590563182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0554dd91-c82a-45b9-a576-743c12180326",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "do we have a client-side 429 metric?  I know we have some metrics\r\n",
        "createdAt" : "2021-02-15T13:59:23Z",
        "updatedAt" : "2021-02-17T17:14:31Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "fad04b5c-97e8-4fe3-8f74-9264d76f20f6",
        "parentId" : "0554dd91-c82a-45b9-a576-743c12180326",
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "Yes, `client-go` provides sink interfaces for metrics. `component-base` implementation does provide a metric `rest_client_requests_total` which has a label called `code`. It should have `429` if the server has rejected the request. \r\n\r\nwe also have a metric `rest_client_rate_limiter_duration_seconds` that tracks the client-side rate limiter latency by verb and url.\r\nNot all k8s application/controller use the default `component-base` implementation though.\r\n\r\n\r\n\r\n",
        "createdAt" : "2021-02-15T14:44:34Z",
        "updatedAt" : "2021-02-17T17:14:31Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      },
      {
        "id" : "0b4d78d3-b3f7-4018-9aca-bb81adbcb71e",
        "parentId" : "0554dd91-c82a-45b9-a576-743c12180326",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Yes, `client-go` provides sink interfaces for metrics. `component-base` implementation does provide a metric `rest_client_requests_total` which has a label called `code`. It should have `429` if the server has rejected the request.\r\n\r\nopenshift largely does. Gather those numbers on your dashboard so we can slice by client binary.",
        "createdAt" : "2021-02-15T15:14:47Z",
        "updatedAt" : "2021-02-17T17:14:31Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc66d3d137d3600b117be390ccb253a9dbcde25e",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +946,950 @@\n\t\t\tretries++\n\t\t\tif seconds, wait := checkWait(resp); wait && retries <= r.maxRetries {\n\t\t\t\tretryInfo = getRetryReason(retries, seconds, resp, err)\n\t\t\t\tif seeker, ok := r.body.(io.Seeker); ok && r.body != nil {"
  },
  {
    "id" : "dbc168ea-88b4-4a12-8543-3732e9356b89",
    "prId" : 99079,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99079#pullrequestreview-592426202",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5476299a-cd7b-4196-97ea-b78942ce9493",
        "parentId" : null,
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "I think `Waited for %v due to client-side throttling, before the first round trip` is better here.",
        "createdAt" : "2021-02-16T23:58:10Z",
        "updatedAt" : "2021-02-17T17:14:31Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      },
      {
        "id" : "b92ea579-3b95-44da-93fd-375ef10a2d90",
        "parentId" : "5476299a-cd7b-4196-97ea-b78942ce9493",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think the meaning to the potential reader will be the same either way.",
        "createdAt" : "2021-02-17T17:07:28Z",
        "updatedAt" : "2021-02-17T17:14:31Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc66d3d137d3600b117be390ccb253a9dbcde25e",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +594,598 @@\t\tmessage = fmt.Sprintf(\"Waited for %v, %s - request: %s:%s\", latency, retryInfo, r.verb, r.URL().String())\n\tdefault:\n\t\tmessage = fmt.Sprintf(\"Waited for %v due to client-side throttling, not priority and fairness, request: %s:%s\", latency, r.verb, r.URL().String())\n\t}\n"
  },
  {
    "id" : "4c79a5df-b054-45ff-ac33-c45619e2dec9",
    "prId" : 89566,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89566#pullrequestreview-384038807",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff32d222-b556-482c-8c51-95fd45c9b191",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Update this comment",
        "createdAt" : "2020-03-30T16:42:26Z",
        "updatedAt" : "2020-04-02T07:43:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "f373697c64e9dc5a6618e1d360ad9a51bc8b79c7",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +845,849 @@\t}\n\n\t// Right now we make about ten retry attempts if we get a Retry-After response.\n\tretries := 0\n\tfor {"
  },
  {
    "id" : "fbeebf63-847b-46b9-98c2-1223aec65f0d",
    "prId" : 89566,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89566#pullrequestreview-386181725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6b71b78-0d84-4ba4-8e21-c1669558f7db",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Mention the default? (\"The default is 10 unless this function is specifically called with a different value.\" or something)",
        "createdAt" : "2020-03-30T16:43:05Z",
        "updatedAt" : "2020-04-02T07:43:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6bdaa39c-65f2-4307-bc69-b65ed72c318c",
        "parentId" : "b6b71b78-0d84-4ba4-8e21-c1669558f7db",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "mentioned the default value in the doc",
        "createdAt" : "2020-04-02T07:49:39Z",
        "updatedAt" : "2020-04-02T07:49:39Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "f373697c64e9dc5a6618e1d360ad9a51bc8b79c7",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +397,401 @@// \"Retry-After\" headers and 429 status-code in the response. The default is 10 unless this\n// function is specifically called with a different value.\n// A zero maxRetries prevent it from doing retires and return an error immediately.\nfunc (r *Request) MaxRetries(maxRetries int) *Request {\n\tif maxRetries < 0 {"
  },
  {
    "id" : "e1710a37-effa-47a3-a4cd-457b2eda2be7",
    "prId" : 88134,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88134#pullrequestreview-365109466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51267310-09e2-4430-8186-cabf31646014",
        "parentId" : null,
        "authorId" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "body" : "We should add a docstring on the return values. My first super quick skim, I was super confused by the -1 (it makes sense once I read the code though).",
        "createdAt" : "2020-02-26T17:46:31Z",
        "updatedAt" : "2020-02-26T17:46:38Z",
        "lastEditedBy" : "09e31512-b413-47a1-bc83-20b5a77064ee",
        "tags" : [
        ]
      }
    ],
    "commit" : "2bcf99f05fdc47fb4bc3601b9134408483f59773",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +593,597 @@}\n\nfunc (b *throttledLogger) attemptToLog() (klog.Level, bool) {\n\tfor _, setting := range b.settings {\n\t\tif bool(klog.V(setting.logLevel)) {"
  },
  {
    "id" : "a9ae8313-fab9-4baa-b1a6-8caa22caaa03",
    "prId" : 87599,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87599#pullrequestreview-349543943",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36f7aac0-d7d9-482e-9caa-6f9ad3a58f68",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "nit (here and other places), flip this to:\r\n```go\r\nctx := r.ctx\r\nif ctx == nil {\r\n  ctx = context.Background()\r\n}\r\n```\r\n\r\navoids an allocation, and later when ctx becomes a parameter to this method, we can just drop the `ctx := r.ctx` line",
        "createdAt" : "2020-01-28T13:48:46Z",
        "updatedAt" : "2020-01-28T13:49:20Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "91cd219c-d4e0-4f69-8449-0ccebfb0ad34",
        "parentId" : "36f7aac0-d7d9-482e-9caa-6f9ad3a58f68",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "oh, unless we require ctx to be non-nil in all invocations... in which case this is temporary/fine",
        "createdAt" : "2020-01-28T13:50:48Z",
        "updatedAt" : "2020-01-28T13:50:48Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "4e81962d-c744-4840-a6ed-2bfa481417a3",
        "parentId" : "36f7aac0-d7d9-482e-9caa-6f9ad3a58f68",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Yep. This should be temporary. ",
        "createdAt" : "2020-01-28T17:00:04Z",
        "updatedAt" : "2020-01-28T17:00:05Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d95ed2c8470158256466fb24728e63ac3afe0899",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +660,664 @@// If we can, we return that as an error.  Otherwise, we create an error that lists the http status and the content of the response.\nfunc (r *Request) Stream() (io.ReadCloser, error) {\n\tctx := context.Background()\n\tif r.ctx != nil {\n\t\tctx = r.ctx"
  },
  {
    "id" : "e62947d6-462e-4279-80b3-fd8d8390e44f",
    "prId" : 84692,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84692#pullrequestreview-314636467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b35ddb84-aa27-41bf-a4b0-4fec66c50457",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "so the request retains the client, and the client cannot be safely changed once requests have been created from it and are in flight? that's... a bit unexpected... though I guess only the Client field is exported from the RESTClient",
        "createdAt" : "2019-11-08T04:59:32Z",
        "updatedAt" : "2019-11-11T02:30:50Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "91516a6e-91e1-4ef4-9108-e6a14e905cee",
        "parentId" : "b35ddb84-aa27-41bf-a4b0-4fec66c50457",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I don't think we ever allowed mutating a RESTClient directly once created.",
        "createdAt" : "2019-11-10T19:35:59Z",
        "updatedAt" : "2019-11-11T02:30:50Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b0fc0eda-4c9b-4fde-b149-95fc4fa52061",
        "parentId" : "b35ddb84-aa27-41bf-a4b0-4fec66c50457",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Client is public because a bunch of old testing code still directly copies the Client from a fake to the test rest client.",
        "createdAt" : "2019-11-10T19:37:49Z",
        "updatedAt" : "2019-11-11T02:30:50Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b780c64b89606f4e6b21f48fb9c305d5998b9e5",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +110,114 @@}\n\n// NewRequest creates a new request helper object for accessing runtime.Objects on a server.\nfunc NewRequest(c *RESTClient) *Request {\n\tvar backoff BackoffManager"
  },
  {
    "id" : "9872a443-cc39-45cb-840a-9de3135aabc5",
    "prId" : 84692,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84692#pullrequestreview-314639324",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fac72d13-761c-43bd-a277-5b6c41f69021",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "what does passing nil params here mean?",
        "createdAt" : "2019-11-08T05:05:26Z",
        "updatedAt" : "2019-11-11T02:30:50Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "1be2f6b3-6e69-4855-a8bd-f501b67a3e9f",
        "parentId" : "fac72d13-761c-43bd-a277-5b6c41f69021",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Technically `application/json` is a content type and `application/json;pretty=1` is a mediaTypeWithParams.  We don't let you get Pretty encoding today.",
        "createdAt" : "2019-11-10T19:45:06Z",
        "updatedAt" : "2019-11-11T02:30:50Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "66c3050a-4699-46b5-9937-b75e1c2ef3c0",
        "parentId" : "fac72d13-761c-43bd-a277-5b6c41f69021",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "so setting client.ClientContentConfig.ContentType = \"application/json;as=...\" would be invalid?",
        "createdAt" : "2019-11-10T20:36:13Z",
        "updatedAt" : "2019-11-11T02:30:50Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b780c64b89606f4e6b21f48fb9c305d5998b9e5",
    "line" : 176,
    "diffHunk" : "@@ -1,1 +420,424 @@\t\t\treturn r\n\t\t}\n\t\tencoder, err := r.c.content.Negotiator.Encoder(r.c.content.ContentType, nil)\n\t\tif err != nil {\n\t\t\tr.err = err"
  },
  {
    "id" : "b5bbe7cc-81e5-4168-a8b1-d8af30c3e26e",
    "prId" : 84692,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84692#pullrequestreview-314642065",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd386bf9-511a-4602-b710-aa9481a0c090",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "This content type will have `;stream=watch` for proto watch streams, which we'll parse to params, and ignore in the StreamDecoder impl. Just pointing that out.",
        "createdAt" : "2019-11-10T21:25:27Z",
        "updatedAt" : "2019-11-11T02:30:50Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b780c64b89606f4e6b21f48fb9c305d5998b9e5",
    "line" : 294,
    "diffHunk" : "@@ -1,1 +617,621 @@\t}\n\n\tcontentType := resp.Header.Get(\"Content-Type\")\n\tmediaType, params, err := mime.ParseMediaType(contentType)\n\tif err != nil {"
  },
  {
    "id" : "3214f53d-6c72-4076-8afd-a97dbd51839f",
    "prId" : 82652,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82652#pullrequestreview-295178700",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6345b0b2-2a0b-4da6-8481-f722d3603ef4",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "If you want a typed error, why not just return the typed error from here?",
        "createdAt" : "2019-09-30T13:42:59Z",
        "updatedAt" : "2019-09-30T18:42:44Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "9708ff91-6a9f-43f8-b5af-2093782578a1",
        "parentId" : "6345b0b2-2a0b-4da6-8481-f722d3603ef4",
        "authorId" : "30ba133e-d9d6-49e6-bbb8-8990d01d2111",
        "body" : "The documentation/comment stated that programmer would receive a typed error in case of errors **prior** to a call to `Do()`. As far as I could see this is not true hence my attempt to make the code comply with the documentation/comment. \r\n\r\nI have sent a commit that removes the misguiding comment and restored almost everything to its place. PTAL.",
        "createdAt" : "2019-09-30T18:48:42Z",
        "updatedAt" : "2019-09-30T18:48:42Z",
        "lastEditedBy" : "30ba133e-d9d6-49e6-bbb8-8990d01d2111",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad5fafd6ade2838098890a4e7727c8e347686867",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +710,714 @@\tswitch r.verb {\n\tcase \"POST\":\n\t\treturn fmt.Errorf(\"an empty namespace may not be set during creation\")\n\tcase \"GET\", \"PUT\", \"DELETE\":\n\t\tif len(r.resourceName) > 0 {"
  },
  {
    "id" : "1f92fd89-3e52-4bb9-a7a3-dcf7d7d67322",
    "prId" : 79375,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79375#pullrequestreview-254145407",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c26ad852-e2af-4d47-a1c1-612d0074357a",
        "parentId" : null,
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "Could we use defer to rewrite this method?\r\n\r\n```go\r\nnow := time.Now()\r\ndefer func() {\r\n\tif latency := time.Since(now); latency > longThrottleLatency {\r\n\t\tklog.V(4).Infof(\"Throttling request took %v, request: %s:%s\", latency, r.verb, r.URL().String())\t\t\tklog.V(4).Infof(\"Throttling request took %v, request: %s:%s\", latency, r.verb, r.URL().String())\r\n\t}\t\r\n}()\r\n\r\nif r.ctx == nil {\r\n  r.throttle.Accept()\r\n  return nil\r\n}\r\n\r\nif err := r.throttle.Wait(r.ctx) {\r\n  return err\r\n}\r\n\r\nreturn nil\r\n```",
        "createdAt" : "2019-06-25T16:21:00Z",
        "updatedAt" : "2019-06-25T17:00:22Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      },
      {
        "id" : "31420ee1-081f-460c-a8e6-f4eefe61f1b7",
        "parentId" : "c26ad852-e2af-4d47-a1c1-612d0074357a",
        "authorId" : "f3e672e5-b55c-4e3f-9443-b9abf25195da",
        "body" : "This method will be called frequently when QPS is high, using defer will influence performance.",
        "createdAt" : "2019-06-25T17:04:35Z",
        "updatedAt" : "2019-06-25T17:04:35Z",
        "lastEditedBy" : "f3e672e5-b55c-4e3f-9443-b9abf25195da",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce8805f95fcf6540397eaa60b8d84db752f05eea",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +528,532 @@\n\tnow := time.Now()\n\tvar err error\n\tif r.ctx != nil {\n\t\terr = r.throttle.Wait(r.ctx)"
  },
  {
    "id" : "cb916344-5ca5-4488-9340-2b8e330aaa75",
    "prId" : 75368,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75368#pullrequestreview-316475232",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57df386b-9d10-4ef9-b13f-f93cfd6f45de",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "1 seems too short",
        "createdAt" : "2019-03-18T16:06:30Z",
        "updatedAt" : "2019-11-20T16:31:14Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "4429329c-a690-465b-b2bd-aea686e6548d",
        "parentId" : "57df386b-9d10-4ef9-b13f-f93cfd6f45de",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "1 is pre-existing, and fires on connectionreset errors... 1 second doesn't seem awful for that, but does maybe seem too short for apiserver is shutting down",
        "createdAt" : "2019-03-18T16:11:02Z",
        "updatedAt" : "2019-11-20T16:31:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "b7b9cb37-827f-4f53-9e47-0d093c6c8abd",
        "parentId" : "57df386b-9d10-4ef9-b13f-f93cfd6f45de",
        "authorId" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "body" : "i would guess on apiserver shutdown the client-go retry request and possibly hit different endpoint that is not shutting down (in HA env).",
        "createdAt" : "2019-03-18T16:23:19Z",
        "updatedAt" : "2019-11-20T16:31:14Z",
        "lastEditedBy" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "tags" : [
        ]
      },
      {
        "id" : "3dc26f93-484b-40be-9f22-7f89b7c18f9a",
        "parentId" : "57df386b-9d10-4ef9-b13f-f93cfd6f45de",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Will this retry infinitely? Connection refused could be non-transient as well. We should at least fail eventually.",
        "createdAt" : "2019-04-09T11:39:58Z",
        "updatedAt" : "2019-11-20T16:31:14Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "5de243c6-ce11-4b25-881c-ce7f70a266a8",
        "parentId" : "57df386b-9d10-4ef9-b13f-f93cfd6f45de",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "`if seconds, wait := checkWait(resp); wait && retries < maxRetries {` limits us to maxRetries",
        "createdAt" : "2019-04-09T12:59:51Z",
        "updatedAt" : "2019-11-20T16:31:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ce4d457b-5a05-49d2-9d39-4cb3078e31e8",
        "parentId" : "57df386b-9d10-4ef9-b13f-f93cfd6f45de",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "review with ignore whitespace, this is all preexisting.",
        "createdAt" : "2019-11-13T18:53:06Z",
        "updatedAt" : "2019-11-20T16:31:14Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3c82e8ae313a6ed97a63a4435438aa067225527",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +820,824 @@\t\t\t\tresp = &http.Response{\n\t\t\t\t\tStatusCode: http.StatusInternalServerError,\n\t\t\t\t\tHeader:     http.Header{\"Retry-After\": []string{\"1\"}},\n\t\t\t\t\tBody:       ioutil.NopCloser(bytes.NewReader([]byte{})),\n\t\t\t\t}"
  },
  {
    "id" : "8d8a552e-2d0d-495e-8753-d2e4ad052b24",
    "prId" : 74363,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74363#pullrequestreview-523099448",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6bb820a0-fe4d-45b6-afe0-18297ffbfb3c",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Instead of doing this, can we just do a `strings.TrimPrefix(url.Path, r.c.base.Path)`, and then try to find the \"group\" from the remaining string?",
        "createdAt" : "2020-11-04T07:32:47Z",
        "updatedAt" : "2020-11-05T09:12:49Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "c039b02fa7281fc061455e23b6530ed8b4d19645",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +517,521 @@\tindex := 0\n\ttrimmedBasePath := \"\"\n\tif url != nil && r.c.base != nil && strings.Contains(url.Path, r.c.base.Path) {\n\t\tp := strings.TrimPrefix(url.Path, r.c.base.Path)\n\t\tif !strings.HasPrefix(p, \"/\") {"
  },
  {
    "id" : "7ebf56c1-be0c-48cd-b620-5961114ba6a4",
    "prId" : 68530,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68530#pullrequestreview-155613045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54075d0a-a04d-402b-afca-f6f4685c9953",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "oapi was specifically grandfathered. Rather can fail, how about just returning the url as-is?",
        "createdAt" : "2018-09-14T14:17:25Z",
        "updatedAt" : "2018-09-14T18:31:34Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "ba662fd4-85ec-417e-96ff-6e271c63175d",
        "parentId" : "54075d0a-a04d-402b-afca-f6f4685c9953",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Perhaps rather than fail, use `{prefix}` as Jordan suggested?",
        "createdAt" : "2018-09-14T17:37:29Z",
        "updatedAt" : "2018-09-14T18:31:34Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "bae7288e-c140-44f8-a56f-7993e6def3b7",
        "parentId" : "54075d0a-a04d-402b-afca-f6f4685c9953",
        "authorId" : "f474bb7f-c91e-4c7f-8215-aa1a0f8eb05a",
        "body" : "Thanks! Using {prefix} with no error returned.",
        "createdAt" : "2018-09-14T18:32:50Z",
        "updatedAt" : "2018-09-14T18:32:50Z",
        "lastEditedBy" : "f474bb7f-c91e-4c7f-8215-aa1a0f8eb05a",
        "tags" : [
        ]
      }
    ],
    "commit" : "99248b8fe1fe1c28188657d811dc7baf8cd12982",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +487,491 @@\t\tindex = groupIndex + 3\n\t} else {\n\t\t// this should not happen that the only two possibilities are /api... and /apis..., just want to put an\n\t\t// outlet here in case more API groups are added in future if ever possible:\n\t\t// https://kubernetes.io/docs/concepts/overview/kubernetes-api/#api-groups"
  },
  {
    "id" : "46769b95-fe37-47b2-8d2a-0ef8f1c55da2",
    "prId" : 68530,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68530#pullrequestreview-155673516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d7d48fb-9133-49cf-b300-752164107f11",
        "parentId" : null,
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "Should be `index+2`? It looks like you are distinguishing\r\n\r\n - /namespaces/{namespace}/pods/{name}\r\n - /namespaces/{name}/finalize/subpath\r\n\r\nAlthough I don't think subresources of the namespace Kind (finalize and status) have subpaths. ",
        "createdAt" : "2018-09-14T18:25:39Z",
        "updatedAt" : "2018-09-14T18:31:34Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      },
      {
        "id" : "6bf739aa-a5e6-4f5b-9447-a727db104988",
        "parentId" : "9d7d48fb-9133-49cf-b300-752164107f11",
        "authorId" : "f474bb7f-c91e-4c7f-8215-aa1a0f8eb05a",
        "body" : "This is to distinguish between:\r\n/namespace/$NAMESPACE/$RESOURCE/$NAME\r\n/namespace/$NAMESPACE/$RESOURCE/$SUBRESOURCE\r\n\r\nso if segments[index+3] is not \"finalize\" or \"status\", then it's $NAME, replace it with {name}:\r\n`segments[index+3] = \"{name}\"`\r\n\r\nRight?\r\n\r\n",
        "createdAt" : "2018-09-14T18:41:23Z",
        "updatedAt" : "2018-09-14T18:41:23Z",
        "lastEditedBy" : "f474bb7f-c91e-4c7f-8215-aa1a0f8eb05a",
        "tags" : [
        ]
      },
      {
        "id" : "a2f0ff64-923a-40ab-9e3a-c9099ce6d983",
        "parentId" : "9d7d48fb-9133-49cf-b300-752164107f11",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "That's brittle since we could add new subresources for namespaces in the future, but the consequence of getting it wrong is somewhat minor, so I'm inclined to say just go ahead and do that. (be sure to add a test case)",
        "createdAt" : "2018-09-14T19:10:14Z",
        "updatedAt" : "2018-09-14T19:10:15Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "11abe2a8-dc7d-467d-8ddb-d0bdc820fe21",
        "parentId" : "9d7d48fb-9133-49cf-b300-752164107f11",
        "authorId" : "f474bb7f-c91e-4c7f-8215-aa1a0f8eb05a",
        "body" : "I am sorry, what are you referring to by \"do that\"?",
        "createdAt" : "2018-09-14T19:42:14Z",
        "updatedAt" : "2018-09-14T19:42:14Z",
        "lastEditedBy" : "f474bb7f-c91e-4c7f-8215-aa1a0f8eb05a",
        "tags" : [
        ]
      },
      {
        "id" : "ac035762-e961-424d-8b39-767deb4aa4cc",
        "parentId" : "9d7d48fb-9133-49cf-b300-752164107f11",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "Reserving \"finalize\" and \"status\" as keywords is brittle to future API changes for namespaces, but currently it seems to be the only way for a rest client (with all the information it has) to distinguish between the following two valid requests:\r\n\r\n - `GET /api/v1/namespaces/default/pods`: replace \"default\" with {namespace}\r\n - `GET /api/v1/namespaces/default/status`: replace \"default\" with {name}\r\n\r\nI prefer forcing how clients are used rather than just parsing the requests (as a followup)\r\n\r\n> This is to distinguish between:\r\n/namespace/$NAMESPACE/$RESOURCE/$NAME\r\n/namespace/$NAMESPACE/$RESOURCE/$SUBRESOURCE\r\n\r\n$SUBRESOURCE isn't constrained to \"finalize\" and \"status\" for Kinds other than namespaces\r\n\r\n> /namespaces/{name}/finalize/subpath\r\n> /namespaces/$NAMESPACE/$RESOURCE/$SUBRESOURCE\r\n\r\nFor the two cases above, they don't exist in Kubernetes yet, I suggest we don't handle/test them. ",
        "createdAt" : "2018-09-14T21:08:28Z",
        "updatedAt" : "2018-09-14T21:08:28Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      },
      {
        "id" : "8c805620-bdb0-45a6-aac2-44be7790e088",
        "parentId" : "9d7d48fb-9133-49cf-b300-752164107f11",
        "authorId" : "f474bb7f-c91e-4c7f-8215-aa1a0f8eb05a",
        "body" : "Thanks for the explanation! I will definitely take all these into consideration when I implement a better approach after code freeze for the next release. ",
        "createdAt" : "2018-09-14T21:50:28Z",
        "updatedAt" : "2018-09-14T21:50:28Z",
        "lastEditedBy" : "f474bb7f-c91e-4c7f-8215-aa1a0f8eb05a",
        "tags" : [
        ]
      }
    ],
    "commit" : "99248b8fe1fe1c28188657d811dc7baf8cd12982",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +513,517 @@\t\tsegments[index+1] = \"{namespace}\"\n\t\t// /namespace/$NAMESPACE/$RESOURCE/$NAME: replace $NAMESPACE with {namespace},  $NAME with {name}\n\t\tif segments[index+3] != \"finalize\" && segments[index+3] != \"status\" {\n\t\t\t// /$RESOURCE/$NAME/$SUBRESOURCE: replace $NAME with {name}\n\t\t\tsegments[index+3] = \"{name}\""
  },
  {
    "id" : "0c5e4ce9-22a1-4e35-b400-d121773a9462",
    "prId" : 62733,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62733#pullrequestreview-112855009",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee473914-ea9c-43eb-b81e-e4d224abf629",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "update doc on the `Timeout` method.",
        "createdAt" : "2018-04-17T15:09:35Z",
        "updatedAt" : "2018-04-20T14:23:06Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "7bd48a7e2325381cb777d0ea1ff89b2ecece23b6",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +649,653 @@\t\t\treturn err\n\t\t}\n\t\tif r.timeout > 0 {\n\t\t\tif r.ctx == nil {\n\t\t\t\tr.ctx = context.Background()"
  },
  {
    "id" : "ec3552d9-a026-4cf7-b7d2-4ec36879c499",
    "prId" : 62733,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62733#pullrequestreview-113596788",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d70cd3fa-367d-47f9-b733-81b1fdf98b88",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I think this works, but it will wait until all the retries are done.  I'm fine with it since it eventually cleans up.  I'll give some time if people really want to argue that it all ends up as an anonymous function to clean up sooner in exceptional cases.  I can't see it mattering much.",
        "createdAt" : "2018-04-19T13:11:04Z",
        "updatedAt" : "2018-04-20T14:23:06Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "7bd48a7e2325381cb777d0ea1ff89b2ecece23b6",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +655,659 @@\t\t\tvar cancelFn context.CancelFunc\n\t\t\tr.ctx, cancelFn = context.WithTimeout(r.ctx, r.timeout)\n\t\t\tdefer cancelFn()\n\t\t}\n\t\tif r.ctx != nil {"
  },
  {
    "id" : "11aa81bc-fd1e-4a74-9967-c5aa5a8ef216",
    "prId" : 52512,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52512#pullrequestreview-63108224",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d99b770d-7b09-4689-8541-10ccef3b7bdb",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Could you add a prefix like `[truncated]`?",
        "createdAt" : "2017-09-15T17:19:55Z",
        "updatedAt" : "2017-09-15T18:32:27Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "87098c56-3441-4de9-a112-04c474a4fb34",
        "parentId" : "d99b770d-7b09-4689-8541-10ccef3b7bdb",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "suffix? Yeah very good idea!",
        "createdAt" : "2017-09-15T17:21:41Z",
        "updatedAt" : "2017-09-15T18:32:27Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4304f8e79f8227fc7841ecc7cb80b94cbbd493d",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +849,853 @@\t\t\treturn r < 0x0a\n\t\t}) != -1 {\n\t\t\tglog.Infof(\"%s:\\n%s\", prefix, truncateBody(hex.Dump(body)))\n\t\t} else {\n\t\t\tglog.Infof(\"%s: %s\", prefix, truncateBody(string(body)))"
  },
  {
    "id" : "422cf7ee-b8c9-41f2-9f7f-73daa0d19e38",
    "prId" : 52512,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52512#pullrequestreview-72897813",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d40550cc-1f64-41f5-9943-7e6210824bb9",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "How do I see the whole response?  v(10) should truncate nothing.",
        "createdAt" : "2017-10-30T15:42:34Z",
        "updatedAt" : "2017-10-30T15:42:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "db7d36a2-30d8-45bc-8efc-6e1456efca3d",
        "parentId" : "d40550cc-1f64-41f5-9943-7e6210824bb9",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Can you fix that in a follow up?  I was unable to debug an issue because I couldn't see the body.",
        "createdAt" : "2017-10-30T15:52:59Z",
        "updatedAt" : "2017-10-30T15:52:59Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "7e104df4-e1f7-4b7d-8c0a-26157abd4b08",
        "parentId" : "d40550cc-1f64-41f5-9943-7e6210824bb9",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "agreed, not sure how I missed that. Sending now (with test)",
        "createdAt" : "2017-10-30T16:25:03Z",
        "updatedAt" : "2017-10-30T16:25:03Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4304f8e79f8227fc7841ecc7cb80b94cbbd493d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +826,830 @@// truncateBody decides if the body should be truncated, based on the glog Verbosity.\nfunc truncateBody(body string) string {\n\tmax := 0\n\tswitch {\n\tcase bool(glog.V(9)):"
  },
  {
    "id" : "4b3d0939-4879-4b38-b122-6e4607fda664",
    "prId" : 51381,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51381#pullrequestreview-59677850",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c92cf72-75a4-41e1-a465-23957518f322",
        "parentId" : null,
        "authorId" : "d324e241-a7f0-4ace-bda2-4174b07bdb18",
        "body" : "Oh, I think we should return `Result { err: fmt.Errorf(\"Unexpected error...\") }` here, too.  Otherwise we still try to decode the truncated \"json\" and print an error about that.\r\n\r\n```\r\nINFO: Running command line: bazel-bin/cmd/kubectl/kubectl '--request-timeout=3000ms' get cm -n kube-system\r\nE0828 16:12:41.403960    7263 round_trippers.go:169] CancelRequest not implemented\r\nE0828 16:12:41.404050    7263 request.go:766] Unexpected error when reading response body: &http.httpError{err:\"net/http: request canceled (Client.Timeout exceeded while reading body)\", timeout:true}\r\nunexpected end of JSON input\r\n```",
        "createdAt" : "2017-08-28T23:13:23Z",
        "updatedAt" : "2017-08-29T03:02:22Z",
        "lastEditedBy" : "d324e241-a7f0-4ace-bda2-4174b07bdb18",
        "tags" : [
        ]
      },
      {
        "id" : "e610e021-9b7d-4000-b4ce-9b6c0b0b1d83",
        "parentId" : "4c92cf72-75a4-41e1-a465-23957518f322",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "I agree. I will update it soon.\r\n> http.httpError{err:\"net/http: request canceled (Client.Timeout exceeded while reading body)\", timeout:true}\r\n\r\nI'm curious how do you get this error and it ends up have the same error `unexpected end of JSON input`.\r\n",
        "createdAt" : "2017-08-29T01:44:31Z",
        "updatedAt" : "2017-08-29T03:02:22Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "40c058a9-1918-4538-b278-af439f68fdac",
        "parentId" : "4c92cf72-75a4-41e1-a465-23957518f322",
        "authorId" : "d324e241-a7f0-4ace-bda2-4174b07bdb18",
        "body" : "I chose --request-timeout=3000ms because I was getting headers on my cluster at about 2300ms, and then it would take a long time for the rest of the request to return.  Setting this flag to this value, we get the HTTP 200, but then *we* cause the connection to close, rather than the other side.\r\n\r\nBut in this case, the same thing happens as before: we log the error and return an uninitialized body.",
        "createdAt" : "2017-08-30T20:06:00Z",
        "updatedAt" : "2017-08-30T20:06:00Z",
        "lastEditedBy" : "d324e241-a7f0-4ace-bda2-4174b07bdb18",
        "tags" : [
        ]
      }
    ],
    "commit" : "4de18dec2ba284657c89f7b6e1074385dc1d1baf",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +764,768 @@\t\t\t}\n\t\tdefault:\n\t\t\tglog.Errorf(\"Unexpected error when reading response body: %#v\", err)\n\t\t\tunexpectedErr := fmt.Errorf(\"Unexpected error %#v when reading response body. Please retry.\", err)\n\t\t\treturn Result{"
  },
  {
    "id" : "d07135b4-a4e3-42fa-b0a6-f3cb147d64b1",
    "prId" : 51042,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51042#pullrequestreview-68605414",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3762afd5-2a3e-4379-a609-7451ecc1f075",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Can you describe what you think this sets?  It actually sets a query parameter on our request for the apiserver to consume, not a timeout on the client side.  I doubt that's what most callers would expect.",
        "createdAt" : "2017-08-23T13:59:11Z",
        "updatedAt" : "2018-02-07T15:02:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "67738793-fee7-4c69-b6f6-6cf38a732188",
        "parentId" : "3762afd5-2a3e-4379-a609-7451ecc1f075",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "That's exactly my intention with this change. The downstream problem (https://bugzilla.redhat.com/show_bug.cgi?id=1433244) was that `--request-timeout` wasn't passed to apiserver, which although I've allowed this functionality to be long-running request, is being cut off by the apiserver. ",
        "createdAt" : "2017-08-29T13:03:24Z",
        "updatedAt" : "2018-02-07T15:02:48Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "3497763f-f49c-4c4e-8ca0-d9b1a5cb76c4",
        "parentId" : "3762afd5-2a3e-4379-a609-7451ecc1f075",
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "@deads2k the client-side timeout added by https://github.com/kubernetes/kubernetes/pull/33958 did not handles cases where the user requested a longer timeout, but the apiserver ended the request first. --request-timeout worked under the assumption that the client would be the one always terminating the connection",
        "createdAt" : "2017-10-10T15:42:51Z",
        "updatedAt" : "2018-02-07T15:02:48Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      },
      {
        "id" : "3e90428c-5792-4362-9e3a-b7aa5fce3cc3",
        "parentId" : "3762afd5-2a3e-4379-a609-7451ecc1f075",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> @deads2k the client-side timeout added by #33958 did not handles cases where the user requested a longer timeout, but the apiserver ended the request first. --request-timeout worked under the assumption that the client would be the one always terminating the connection\r\n\r\n@juanvallejo more specifically.  You think using the same value for both is a good idea?",
        "createdAt" : "2017-10-10T17:39:39Z",
        "updatedAt" : "2018-02-07T15:02:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "a3180d9b-38f5-4de0-b8ac-3d4c26dc4b0e",
        "parentId" : "3762afd5-2a3e-4379-a609-7451ecc1f075",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "From a user POV - I think the answer is yes. I'm not 100% sure about eventual downsides, though. ",
        "createdAt" : "2017-10-10T18:55:45Z",
        "updatedAt" : "2018-02-07T15:02:48Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "0f466a2f-ee94-4b36-a6a2-0d93c4e3ec04",
        "parentId" : "3762afd5-2a3e-4379-a609-7451ecc1f075",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I'm fine with having both match if the CLI behavior matches expectations.  @juanvallejo and @fabianofranz probably have more opinion there.\r\n\r\nIs this set non-zero somewhere?  The code you updated all seems to set zero",
        "createdAt" : "2017-10-11T13:29:16Z",
        "updatedAt" : "2018-02-07T15:02:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "7da1002091f026d4a58c1639dd70e1310b1d8991",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +132,136 @@\t\tbackoffMgr:  backoff,\n\t\tthrottle:    throttle,\n\t\ttimeout:     timeout,\n\t}\n\tswitch {"
  }
]