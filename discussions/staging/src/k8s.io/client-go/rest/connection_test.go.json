[
  {
    "id" : "8f0904fe-7e4c-41ae-b5d5-3e69ac1b5a27",
    "prId" : 95981,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95981#pullrequestreview-522138762",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d31418f0-c929-4153-9274-55397d691480",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Can you write a short test that a) verifies these are parsed correctly and b) exercises the case when they don't parse?",
        "createdAt" : "2020-11-02T16:38:14Z",
        "updatedAt" : "2020-11-15T21:40:21Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "fe6294b3-e4c7-4434-8d25-1ff6735cde80",
        "parentId" : "d31418f0-c929-4153-9274-55397d691480",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I added unit tests in http_test.go to verify the env var parsing functions.",
        "createdAt" : "2020-11-03T01:15:31Z",
        "updatedAt" : "2020-11-15T21:40:21Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "15648f1a7b51584df96dd5d6a422545b7f0f146b",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +94,98 @@func TestReconnectBrokenTCP(t *testing.T) {\n\tdefer setEnv(\"HTTP2_READ_IDLE_TIMEOUT_SECONDS\", strconv.Itoa(readIdleTimeout))()\n\tdefer setEnv(\"HTTP2_PING_TIMEOUT_SECONDS\", strconv.Itoa(pingTimeout))()\n\tdefer setEnv(\"DISABLE_HTTP2\", \"\")()\n\tts := httptest.NewUnstartedServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {"
  },
  {
    "id" : "f631781b-3cc2-4e53-bce9-5cb0f0e3d11d",
    "prId" : 95981,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95981#pullrequestreview-530838288",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7ddc8f9-175d-47eb-af0c-b345f99c5e29",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "we should add another `data, err = client.Get().AbsPath(\"/\").DoRaw(context.TODO())` before the `time.Sleep(time.Duration(1+readIdleTimeout+pingTimeout) * time.Second)` and assert that it actually fails, so we are sure that we are testing the broken behaviour",
        "createdAt" : "2020-11-14T12:29:33Z",
        "updatedAt" : "2020-11-15T21:40:21Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "4dbbc9c4-0c61-487e-9751-c7b65bf52159",
        "parentId" : "c7ddc8f9-175d-47eb-af0c-b345f99c5e29",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "```diff --git a/staging/src/k8s.io/client-go/rest/connection_test.go b/staging/src/k8s.io/client-go/rest/connection_test.go\r\nindex bec7ac047e6..c7db4a1f6c6 100644\r\n--- a/staging/src/k8s.io/client-go/rest/connection_test.go\r\n+++ b/staging/src/k8s.io/client-go/rest/connection_test.go\r\n@@ -139,6 +139,10 @@ func TestReconnectBrokenTCP(t *testing.T) {\r\n \r\n        stopCh = make(chan struct{})\r\n        go lb.serve(stopCh)\r\n+       data, err = client.Get().AbsPath(\"/\").DoRaw(context.TODO())\r\n+       if err == nil {\r\n+               t.Fatalf(\"unexpected success: %s\", data)\r\n+       }\r\n        // Sleep enough time for the HTTP/2 health check to detect and close\r\n        // the broken TCP connection.\r\n        time.Sleep(time.Duration(1+readIdleTimeout+pingTimeout) * time.Second)\r\n```",
        "createdAt" : "2020-11-14T21:44:15Z",
        "updatedAt" : "2020-11-15T21:40:21Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "a0cc0487-ba6d-4bb6-9d54-4161572ccbfd",
        "parentId" : "c7ddc8f9-175d-47eb-af0c-b345f99c5e29",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thanks for the suggestion. I didn't add the GET because it's time-sensitive, so it increases the flakiness of the test. More specifically, for the suggested GET to fail, it needs to happen before the broken connection is detected, which should happen after `readIdleTimeout+pingTimeout`, but because the health check is in a different goroutine, it could be flaky.\r\n",
        "createdAt" : "2020-11-15T21:39:42Z",
        "updatedAt" : "2020-11-15T21:40:21Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "a83ec310-aa35-4756-8158-223e59987462",
        "parentId" : "c7ddc8f9-175d-47eb-af0c-b345f99c5e29",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "ahh, ok, thanks for the clarification",
        "createdAt" : "2020-11-15T21:43:57Z",
        "updatedAt" : "2020-11-15T21:43:57Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "15648f1a7b51584df96dd5d6a422545b7f0f146b",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +147,151 @@\t// the broken TCP connection.\n\ttime.Sleep(time.Duration(1+readIdleTimeout+pingTimeout) * time.Second)\n\t// If the HTTP/2 health check were disabled, the broken connection\n\t// would still be in the connection pool, the following request would\n\t// then reuse the broken connection instead of creating a new one, and"
  },
  {
    "id" : "35292659-8dde-4eea-88ab-2b719d192d33",
    "prId" : 95981,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95981#pullrequestreview-530838094",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd9712cf-5be3-416e-b944-98607f115487",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@aojea, I did add a check for the number of dials. This indirectly verified that the broken connection was detected.",
        "createdAt" : "2020-11-15T21:41:11Z",
        "updatedAt" : "2020-11-15T21:41:12Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "15648f1a7b51584df96dd5d6a422545b7f0f146b",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +159,163 @@\t}\n\tdials := atomic.LoadInt32(&lb.dials)\n\tif dials != 2 {\n\t\tt.Fatalf(\"expected %d dials, got %d\", 2, dials)\n\t}"
  }
]