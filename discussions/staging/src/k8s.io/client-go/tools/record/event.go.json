[
  {
    "id" : "2980be5e-09b2-4311-9095-eca51d635bac",
    "prId" : 95664,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95664#pullrequestreview-528665255",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d270511-366b-490b-8255-bd69eb2f935d",
        "parentId" : null,
        "authorId" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "body" : "is dropping event an error? could it possibly spam logs when too many events are dropped?",
        "createdAt" : "2020-11-12T00:36:12Z",
        "updatedAt" : "2021-01-15T22:59:23Z",
        "lastEditedBy" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "tags" : [
        ]
      },
      {
        "id" : "bf365161-160c-40ed-95e4-556e80247afe",
        "parentId" : "9d270511-366b-490b-8255-bd69eb2f935d",
        "authorId" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "body" : "IIRC, we log when we drop from the other end.  It's unlikely that this happens, you probably want to know when it does, and we log events anyway.",
        "createdAt" : "2020-11-12T01:13:08Z",
        "updatedAt" : "2021-01-15T22:59:23Z",
        "lastEditedBy" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "tags" : [
        ]
      }
    ],
    "commit" : "e90e67bd002e70a525d3ee9045b213a5d826074d",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +345,349 @@\t// outgoing events anyway).\n\tif sent := recorder.ActionOrDrop(watch.Added, event); !sent {\n\t\tklog.Errorf(\"unable to record event: too many queued events, dropped event %#v\", event)\n\t}\n}"
  },
  {
    "id" : "bbf2eadd-dd86-4d2d-bc7c-1228a96b3172",
    "prId" : 91712,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91712#pullrequestreview-433995630",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fca7f79-08d3-43b9-bb3d-945ec812d44a",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "this breaks everybody implementing EventBroadcaster.",
        "createdAt" : "2020-06-18T12:50:03Z",
        "updatedAt" : "2020-06-22T01:51:41Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "e239dc45-fda2-42f9-957b-5f7478e1137b",
        "parentId" : "4fca7f79-08d3-43b9-bb3d-945ec812d44a",
        "authorId" : "6ea93d56-a0ec-4969-ac42-11a78c2085e6",
        "body" : "Do we care about external to k/k code dependencies? e.g. in 1.18 client-go changed it's client interface and started using context\r\nI think if such change goes to minor (1.19) release it should be ok.",
        "createdAt" : "2020-06-18T12:54:35Z",
        "updatedAt" : "2020-06-22T01:51:41Z",
        "lastEditedBy" : "6ea93d56-a0ec-4969-ac42-11a78c2085e6",
        "tags" : [
        ]
      },
      {
        "id" : "85bde5ff-b651-47bb-8d10-d389702082b7",
        "parentId" : "4fca7f79-08d3-43b9-bb3d-945ec812d44a",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "We do.\r\n\r\nDo the due diligence that this is not a common problem at least. Github code search might tell.",
        "createdAt" : "2020-06-18T12:57:13Z",
        "updatedAt" : "2020-06-22T01:51:41Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "a2dfcb2d-237a-4e7b-b008-7d6088735a4a",
        "parentId" : "4fca7f79-08d3-43b9-bb3d-945ec812d44a",
        "authorId" : "6ea93d56-a0ec-4969-ac42-11a78c2085e6",
        "body" : "I think there is no disagreement that we want event logs to support structured logging?\r\nSo what alternative solution (to growing interface) would you suggest?\r\n\r\nI expect that never changing interface to avoid breaking change or reusing `StartLogging` for structured logging are not an option.",
        "createdAt" : "2020-06-18T13:03:51Z",
        "updatedAt" : "2020-06-22T01:51:41Z",
        "lastEditedBy" : "6ea93d56-a0ec-4969-ac42-11a78c2085e6",
        "tags" : [
        ]
      },
      {
        "id" : "024c78d4-3ef0-46ef-998d-6e32fdf5c382",
        "parentId" : "4fca7f79-08d3-43b9-bb3d-945ec812d44a",
        "authorId" : "6ea93d56-a0ec-4969-ac42-11a78c2085e6",
        "body" : "/cc @lavalamp ",
        "createdAt" : "2020-06-18T14:21:16Z",
        "updatedAt" : "2020-06-22T01:51:41Z",
        "lastEditedBy" : "6ea93d56-a0ec-4969-ac42-11a78c2085e6",
        "tags" : [
        ]
      },
      {
        "id" : "b5acd1be-f4fb-4546-be24-95b9e7d6b2dd",
        "parentId" : "4fca7f79-08d3-43b9-bb3d-945ec812d44a",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "If this will break existing users (do a search) then we have to make a parallel interface type and do a runtime check to see if passed things support the parallel interface.",
        "createdAt" : "2020-06-18T15:59:14Z",
        "updatedAt" : "2020-06-22T01:51:41Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "648adb97-73c8-44b6-b551-b59a6dca1b76",
        "parentId" : "4fca7f79-08d3-43b9-bb3d-945ec812d44a",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Adding context warranted breaking people. This one doesn't. Sorry for failing to notice that the interface could be used that way earlier.",
        "createdAt" : "2020-06-18T16:00:17Z",
        "updatedAt" : "2020-06-22T01:51:41Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "eb8cf6cc-9696-4779-85ac-b2d56708f9e7",
        "parentId" : "4fca7f79-08d3-43b9-bb3d-945ec812d44a",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "@sttts are you aware of people implementing this interface? I wouldn't actually expect to find that, but I haven't searched.",
        "createdAt" : "2020-06-18T16:01:13Z",
        "updatedAt" : "2020-06-22T01:51:41Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8ca086d1-a681-4e96-a17b-e58f4f0b992f",
        "parentId" : "4fca7f79-08d3-43b9-bb3d-945ec812d44a",
        "authorId" : "6ea93d56-a0ec-4969-ac42-11a78c2085e6",
        "body" : "Not a specialist in GitHub search but I spent some time on trying to write a proper query. I tried many many different methods I have ended up with \r\nhttps://github.com/search?q=%22func%22+%22StartRecordingToSink%22+%22EventSink%22++-filename%3Aevent.go+language%3Ago+-filename%3Ainterfaces.go+-filename%3A*.test.go+NOT+%22EventSinkImpl%22+-filename%3Adynamic.go+NOT+%22NewFederatedEventSink%22&type=Code\r\n\r\nI was looking for implementation of `StartRecordingToSink` which should look like `func (x *X) StartRecordingToSink(y EventSink) z.Interface`. GitHub doesn't allow pattern matching so I needed to look for `func`, `StartRecordingToSink`, `EventSink` as separate strings. I also added filters to remove some noise `-filename:event.go language:go -filename:interfaces.go -filename:*.test.go NOT \"EventSinkImpl\" -filename:dynamic.go NOT \"NewFederatedEventSink\"`. Noise is generates as there are hundreds of copies of Kubernetes code on GitHub (not forks, not vendoring just copies). \r\n\r\nTo check correctness of this method, upon removal of `-filename:event.go` it should find a file with current implemenation. It finds also 400 copies of this implementation so I didn't check. It's possible that someone implemented custom version and put it in `event.go` file. It's hard to verify this without looking at every copy as I didn't find a way to distinquish them. I tried using path (K8s version is always in `client-go`), but I didn't manage to get `NOT client-go in:path` GitHub filter to work correctly (quering for both path and code didn't give correct results).\r\n\r\n@sttts please let me know if this research makes sense and what could we do better to verify if noone reimplements EventBroadcaster. Even if method is not ideal I would expect to stumble upon at least one case. Would be good to know if we can move forward.",
        "createdAt" : "2020-06-19T10:05:47Z",
        "updatedAt" : "2020-06-22T01:51:41Z",
        "lastEditedBy" : "6ea93d56-a0ec-4969-ac42-11a78c2085e6",
        "tags" : [
        ]
      },
      {
        "id" : "51468311-fbf0-46de-9672-5a57023a4d78",
        "parentId" : "4fca7f79-08d3-43b9-bb3d-945ec812d44a",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I also did a quick search without finding anything. I also checked our pretty big OpenShift code base and didn't find anything. IMO we are ok to change the interface.\r\n\r\nIn general, IMO it's a bad pattern to return interfaces from constructors instead of the actual implementation. Any such returned interface can never be extended again wihch means that the feature set of those objects is fixed forever. I also know that it is not considered great to return private struct in Go land, neither accepted by golint tools nor liked by reviewers. But this is really another strong case that this position is very questionable.",
        "createdAt" : "2020-06-19T10:36:35Z",
        "updatedAt" : "2020-06-22T01:51:41Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "43379b72-563f-478e-8b3d-21611d86e77e",
        "parentId" : "4fca7f79-08d3-43b9-bb3d-945ec812d44a",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Another argument why this change is not super harmful:\r\n\r\nImplementors of the old interface will be warned if they use their implementation in places where the interface is used. I expect that the chance that somebody does a type check against some implementation and that suddenly fails now is super low.",
        "createdAt" : "2020-06-19T10:39:00Z",
        "updatedAt" : "2020-06-22T01:51:41Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "8198e59e-9926-488e-8732-b9c3217e6852",
        "parentId" : "4fca7f79-08d3-43b9-bb3d-945ec812d44a",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "https://sourcegraph.com/search?q=-file:%22record/event.go%22+func+%5C%28%5B%5E%29%5D*%5C%29+StartLogging%5C%28.*+watch%5C.Interface&patternType=regexp&case=yes\r\n\r\nSame result. Nobody seems to implement this, at least in OpenSource code. That's enough due diligence IMO.",
        "createdAt" : "2020-06-19T11:13:44Z",
        "updatedAt" : "2020-06-22T01:51:41Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ecbec75a61fb96e0b9d1d6ab2e7f90c25457f12",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +124,128 @@\t// StartStructuredLogging starts sending events received from this EventBroadcaster to the structured\n\t// logging function. The return value can be ignored or used to stop recording, if desired.\n\tStartStructuredLogging(verbosity klog.Level) watch.Interface\n\n\t// NewRecorder returns an EventRecorder that can be used to send events to this EventBroadcaster"
  },
  {
    "id" : "02c1ba27-cf5a-41af-a377-8a9ba1688215",
    "prId" : 75092,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75092#pullrequestreview-211915606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83a684a1-1e08-4559-afb3-42773bed8e66",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "describe zero-value behavior for all options (and consider making it easy to get the default behavior you would get from NewEventCorrelator by leaving all options fields empty (default zero-values in NewEventCorrelatorWithOptions)",
        "createdAt" : "2019-03-07T15:37:55Z",
        "updatedAt" : "2019-03-08T09:02:37Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "b4b88d48-5c6a-4431-a535-5051fa3b7ffe",
        "parentId" : "83a684a1-1e08-4559-afb3-42773bed8e66",
        "authorId" : "b938d23c-d544-42ff-9bb8-d19c8d9e3c92",
        "body" : "Done.",
        "createdAt" : "2019-03-07T17:23:31Z",
        "updatedAt" : "2019-03-08T09:02:37Z",
        "lastEditedBy" : "b938d23c-d544-42ff-9bb8-d19c8d9e3c92",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d8e6fb1b9cf2d3fac8139a97334287e33ff911f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +52,56 @@\n// CorrelatorOptions allows you to change the default of the EventSourceObjectSpamFilter\n// and EventAggregator in EventCorrelator\ntype CorrelatorOptions struct {\n\t// The lru cache size used for both EventSourceObjectSpamFilter and the EventAggregator"
  }
]