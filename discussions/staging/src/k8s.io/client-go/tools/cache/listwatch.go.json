[
  {
    "id" : "b9fa35cc-5865-4ab3-ade9-f309450a836f",
    "prId" : 51876,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51876#pullrequestreview-61406018",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "144c7fd9-521c-41f2-ab9b-56ce5de098f2",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "can this be named in the positive, especially since that would get the default behavior you want?",
        "createdAt" : "2017-09-07T23:52:22Z",
        "updatedAt" : "2017-09-07T23:52:22Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8fb495a4-c68a-4827-ae26-0c5a99397312",
        "parentId" : "144c7fd9-521c-41f2-ab9b-56ce5de098f2",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The plan was in 1.9 to remove the `false &&` below.  All of the test suites are already configured to bypass chunking by setting this flag, whereas all clients would still be opt out for beta.  I wanted to avoid pointer insanity in internal code as well as bad globals (since this is core library code).",
        "createdAt" : "2017-09-08T03:39:46Z",
        "updatedAt" : "2017-09-08T03:40:41Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b571bb63bd8a9a6a37db6046a6ab35d3b047bf4",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +54,58 @@\t// DisableChunking requests no chunking for this list watcher. It has no effect in Kubernetes 1.8, but in\n\t// 1.9 will allow a controller to opt out of chunking.\n\tDisableChunking bool\n}\n"
  },
  {
    "id" : "82e6e55f-042f-48f3-94bb-fcaa2bac0aab",
    "prId" : 48921,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48921#pullrequestreview-53207318",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ffe4132-b3c9-471e-96c2-9b53012b1475",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "@smarterclayton - did you do any performance-related experiments?\r\n\r\nE.g. if I want to list 50k of objects, what is the different with pagination for e2e time of getting the result?",
        "createdAt" : "2017-07-31T12:58:41Z",
        "updatedAt" : "2017-09-01T14:50:06Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b8e42afa6d6abb459c332690c931585c0177b9c",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +92,96 @@// List a set of apiserver resources\nfunc (lw *ListWatch) List(options metav1.ListOptions) (runtime.Object, error) {\n\tif !lw.DisablePaging {\n\t\treturn pager.New(pager.SimplePageFunc(lw.ListFunc)).List(context.TODO(), options)\n\t}"
  }
]