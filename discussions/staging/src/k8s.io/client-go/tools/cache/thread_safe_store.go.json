[
  {
    "id" : "9fea592d-9f4b-4e5d-984b-31fb9d1896e4",
    "prId" : 84970,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84970#pullrequestreview-314679242",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22af2893-b2a9-4031-b25e-9388a3c6b33f",
        "parentId" : null,
        "authorId" : "20d75ebd-4d70-444d-84c0-bf0b563dfbfc",
        "body" : "nit: maybe add a comment here explaining that this prevents a memory leak?",
        "createdAt" : "2019-11-11T03:22:43Z",
        "updatedAt" : "2019-11-11T22:55:42Z",
        "lastEditedBy" : "20d75ebd-4d70-444d-84c0-bf0b563dfbfc",
        "tags" : [
        ]
      }
    ],
    "commit" : "29a051388a719e0359969b8431de8e38e955e2a6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +293,297 @@\t\t\tif set != nil {\n\t\t\t\tset.Delete(key)\n\n\t\t\t\t// If we don't delete the set when zero, indices with high cardinality\n\t\t\t\t// short lived resources can cause memory to increase over time from"
  },
  {
    "id" : "830e4bbd-88a5-4dfa-9a03-9e76fc97a17d",
    "prId" : 73529,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73529#pullrequestreview-198151734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b42eddc-0a0e-48f5-91d8-daa7bdf2dcdd",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "doesn't this break thread safety by returning the sets.String held by the index and letting it escape the lock?\r\n\r\nedit: nevermind... we don't return the string set, we iterate over it below",
        "createdAt" : "2019-01-30T15:47:48Z",
        "updatedAt" : "2019-01-30T15:59:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ec341348-6011-411d-9bff-85cf98aec8e5",
        "parentId" : "9b42eddc-0a0e-48f5-91d8-daa7bdf2dcdd",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "We don't return it - it's used couple lines ago (still under lock) to restore values of the items.",
        "createdAt" : "2019-01-30T15:49:00Z",
        "updatedAt" : "2019-01-30T15:59:43Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "70b7513c7e513b77cad8cf5048437ee11b13167f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +153,157 @@\t\t// In majority of cases, there is exactly one value matching.\n\t\t// Optimize the most common path - deduping is not needed here.\n\t\treturnKeySet = index[indexKeys[0]]\n\t} else {\n\t\t// Need to de-dupe the return list."
  },
  {
    "id" : "7b7d99b8-c2d8-4e70-b0be-970c5dc4a3c4",
    "prId" : 50555,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50555#pullrequestreview-66304792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b18ea08b-55d2-44c5-91c8-e3d8850a76e8",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "surprising that we did not use this returned error anywhere.",
        "createdAt" : "2017-08-25T07:40:58Z",
        "updatedAt" : "2017-09-30T04:52:53Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "eb1d3c82-ccb1-49db-9b17-7047ab776c18",
        "parentId" : "b18ea08b-55d2-44c5-91c8-e3d8850a76e8",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> surprising that we did not use this returned error anywhere.\r\n\r\nLikewise.  Given what we use the indexers for, it may be more appropriate to panic in the callers than force general, \"I'm going to try continuing\" behavior using `HandleError` below.",
        "createdAt" : "2017-08-25T18:55:19Z",
        "updatedAt" : "2017-09-30T04:52:53Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "897da33a-5bb2-42e5-adaf-5dc1d1461817",
        "parentId" : "b18ea08b-55d2-44c5-91c8-e3d8850a76e8",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "@deads2k what do you ultimately want to do here? I hate panicking from a library... maybe we should actually make the callers look at the returned error?",
        "createdAt" : "2017-09-27T14:31:07Z",
        "updatedAt" : "2017-09-30T04:52:53Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "63731e52-1e0c-4cf8-95b5-a9801947843d",
        "parentId" : "b18ea08b-55d2-44c5-91c8-e3d8850a76e8",
        "authorId" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "body" : "If getting an error from the function results in a panic then maybe we should change the signature of the function? Remove the `error` return value? That is a breaking change of course, same as panicking on error though.",
        "createdAt" : "2017-09-28T05:43:11Z",
        "updatedAt" : "2017-09-30T04:52:53Z",
        "lastEditedBy" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "tags" : [
        ]
      },
      {
        "id" : "6a4222bf-d6ad-4964-8590-d766c918f616",
        "parentId" : "b18ea08b-55d2-44c5-91c8-e3d8850a76e8",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> ncdc 2 days ago Member\r\n> @deads2k what do you ultimately want to do here? I hate panicking from a library... maybe we should actually make the callers look at the returned error?\r\n\r\nWe could make callers handle it, but I'd guess that the index is hosed/untrustworthy if this happens.  They may choose to kill themselves.",
        "createdAt" : "2017-09-29T17:46:38Z",
        "updatedAt" : "2017-09-30T04:52:53Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "fee233a3-9acf-4be4-ad41-c48ff9ab25d3",
        "parentId" : "b18ea08b-55d2-44c5-91c8-e3d8850a76e8",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Meh. If we make the callers deal with errors, that means modifying the Add/Update/Delete/Replace signatures in the interface to return errors. Maybe it's just best to panic after all.",
        "createdAt" : "2017-09-29T19:40:00Z",
        "updatedAt" : "2017-09-30T04:52:53Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "c47307df-15c9-46fa-986e-2bf4bad53609",
        "parentId" : "b18ea08b-55d2-44c5-91c8-e3d8850a76e8",
        "authorId" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "body" : "@ncdc ok, I made it panic. I think anything is better than status quo.",
        "createdAt" : "2017-09-30T04:55:00Z",
        "updatedAt" : "2017-09-30T04:55:00Z",
        "lastEditedBy" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "tags" : [
        ]
      }
    ],
    "commit" : "65369a68a1f6ff01d8d108ccd8424f92013ae876",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +242,246 @@// updateIndices modifies the objects location in the managed indexes, if this is an update, you must provide an oldObj\n// updateIndices must be called from a function that already has a lock on the cache\nfunc (c *threadSafeMap) updateIndices(oldObj interface{}, newObj interface{}, key string) {\n\t// if we got an old object, we need to remove it before we add it again\n\tif oldObj != nil {"
  }
]