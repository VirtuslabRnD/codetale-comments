[
  {
    "id" : "11f7445c-a515-4427-be9d-3d0e63d4748f",
    "prId" : 97964,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97964#pullrequestreview-605805001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "663244a7-c611-4e7a-82da-2716a33b5f7c",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "the signature of dedupDeltas does not make it obvious the input slice will be modified... that seems like it could be surprising or lead to subtle bugs",
        "createdAt" : "2021-03-06T20:06:07Z",
        "updatedAt" : "2021-03-06T20:06:07Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "7c8e7d76-19a5-4023-be6f-aa515eedbe8d",
        "parentId" : "663244a7-c611-4e7a-82da-2716a33b5f7c",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think the old code overwrote deltas[n-2] already, though.\r\n\r\nOK fine I verified that append works like I thought: https://play.golang.org/p/9n1QmE8VxdT",
        "createdAt" : "2021-03-07T03:13:53Z",
        "updatedAt" : "2021-03-07T03:13:53Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "238fce9357634502badbcc3704b0655cf8c378c3",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +374,378 @@\tb := &deltas[n-2]\n\tif out := isDup(a, b); out != nil {\n\t\tdeltas[n-2] = *out\n\t\treturn deltas[:n-1]\n\t}"
  },
  {
    "id" : "0f9a03ea-9dc4-429c-a506-03df99616ee0",
    "prId" : 91435,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91435#pullrequestreview-421540554",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b648d0ef-fa11-488f-8426-68e557072d08",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Maybe name the return parameters?",
        "createdAt" : "2020-05-26T18:39:22Z",
        "updatedAt" : "2020-06-01T17:19:46Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "40ce73f7-f3bd-4761-97e9-8d19de8bc623",
        "parentId" : "b648d0ef-fa11-488f-8426-68e557072d08",
        "authorId" : "7798b63f-c2b2-4bb6-b5a9-16d37fe33e03",
        "body" : "Good idea. Done.",
        "createdAt" : "2020-06-01T00:02:06Z",
        "updatedAt" : "2020-06-01T17:19:46Z",
        "lastEditedBy" : "7798b63f-c2b2-4bb6-b5a9-16d37fe33e03",
        "tags" : [
        ]
      }
    ],
    "commit" : "c71272b0c7ac09991ba215e7bc5a8af8334c4b17",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +664,668 @@// A KeyGetter is anything that knows how to get the value stored under a given key.\ntype KeyGetter interface {\n\t// GetByKey returns the value associated with the key, or sets exists=false.\n\tGetByKey(key string) (value interface{}, exists bool, err error)\n}"
  },
  {
    "id" : "a47de065-c7f7-4816-9134-891392005e3d",
    "prId" : 91435,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91435#pullrequestreview-421540741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8566ddc5-0050-43af-882d-0f9729c0b4a2",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The thing proposed by this TODO is potentially risky depending on who might have taken a pointer. I'd omit or include a disclaimer / rephrase to \"might be worth profiling and investigating if it is safe to optimize\"",
        "createdAt" : "2020-05-26T18:46:34Z",
        "updatedAt" : "2020-06-01T17:19:46Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6fffdc72-2686-496d-a3b9-139173e64521",
        "parentId" : "8566ddc5-0050-43af-882d-0f9729c0b4a2",
        "authorId" : "7798b63f-c2b2-4bb6-b5a9-16d37fe33e03",
        "body" : "Added disclaimer. I had no intention to make premature optimization unless profiling reveals this is a bottleneck for memory allocation. ",
        "createdAt" : "2020-06-01T00:04:37Z",
        "updatedAt" : "2020-06-01T17:19:46Z",
        "lastEditedBy" : "7798b63f-c2b2-4bb6-b5a9-16d37fe33e03",
        "tags" : [
        ]
      }
    ],
    "commit" : "c71272b0c7ac09991ba215e7bc5a8af8334c4b17",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +337,341 @@\tif out := isDup(a, b); out != nil {\n\t\t// `a` and `b` are duplicates. Only keep the one returned from isDup().\n\t\t// TODO: This extra array allocation and copy seems unnecessary if\n\t\t// all we do to dedup is compare the new delta with the last element\n\t\t// in `items`, which could be done by mutating `items` directly."
  },
  {
    "id" : "06af0913-e2bd-49f2-aa0f-7bddacc79897",
    "prId" : 91435,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91435#pullrequestreview-422033080",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ed641cb-bbd7-4903-a050-dfedbf93ea60",
        "parentId" : null,
        "authorId" : "7798b63f-c2b2-4bb6-b5a9-16d37fe33e03",
        "body" : "A `Queue` is indeed a `Store`. But I think `DeltaFIFO` is modeled as a `Queue`, as enforced in code.\r\n\r\n```\r\n_ = Queue(&DeltaFIFO{}) // DeltaFIFO is a Queue\r\n```",
        "createdAt" : "2020-06-01T17:15:45Z",
        "updatedAt" : "2020-06-01T17:19:46Z",
        "lastEditedBy" : "7798b63f-c2b2-4bb6-b5a9-16d37fe33e03",
        "tags" : [
        ]
      },
      {
        "id" : "acbb57be-7d6e-47d1-a3a6-3c96afdbe75f",
        "parentId" : "3ed641cb-bbd7-4903-a050-dfedbf93ea60",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah sorry I thought I deleted that comment before I sent the review but I'm failing at github today apparently!",
        "createdAt" : "2020-06-01T17:17:32Z",
        "updatedAt" : "2020-06-01T17:19:46Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "1ae9006d-4bb3-4bf3-bf2d-eca65e52bbc4",
        "parentId" : "3ed641cb-bbd7-4903-a050-dfedbf93ea60",
        "authorId" : "7798b63f-c2b2-4bb6-b5a9-16d37fe33e03",
        "body" : "You did! I read your comment from email.:P",
        "createdAt" : "2020-06-01T17:20:30Z",
        "updatedAt" : "2020-06-01T17:20:30Z",
        "lastEditedBy" : "7798b63f-c2b2-4bb6-b5a9-16d37fe33e03",
        "tags" : [
        ]
      }
    ],
    "commit" : "c71272b0c7ac09991ba215e7bc5a8af8334c4b17",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +100,104 @@}\n\n// NewDeltaFIFOWithOptions returns a Queue which can be used to process changes to\n// items. See also the comment on DeltaFIFO.\nfunc NewDeltaFIFOWithOptions(opts DeltaFIFOOptions) *DeltaFIFO {"
  },
  {
    "id" : "4ee2bab3-3890-4fe5-89c1-17ddd1e5c931",
    "prId" : 91435,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91435#pullrequestreview-423183508",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9a98b10-033b-4c45-8038-2366508feeea",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "\"the newest objects currently in the FIFO\" is kind of vague.  More precise wording might be something like \"the newest object from each accumulator\" or \"... each accumulator in the FIFO\".",
        "createdAt" : "2020-06-03T01:24:47Z",
        "updatedAt" : "2020-06-03T01:24:47Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "fbf6fb9a-23c0-4ddc-9da5-085ef8530127",
        "parentId" : "b9a98b10-033b-4c45-8038-2366508feeea",
        "authorId" : "7798b63f-c2b2-4bb6-b5a9-16d37fe33e03",
        "body" : "Agreed that's better wording. ",
        "createdAt" : "2020-06-03T02:50:03Z",
        "updatedAt" : "2020-06-03T02:50:03Z",
        "lastEditedBy" : "7798b63f-c2b2-4bb6-b5a9-16d37fe33e03",
        "tags" : [
        ]
      }
    ],
    "commit" : "c71272b0c7ac09991ba215e7bc5a8af8334c4b17",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +146,150 @@// interface{} to satisfy the Store/Queue interfaces, but they\n// will always return an object of type Deltas. List() returns\n// the newest objects currently in the FIFO.\n//\n// A DeltaFIFO's knownObjects KeyListerGetter provides the abilities"
  },
  {
    "id" : "58f7012f-c330-4223-9948-5c12335f3030",
    "prId" : 91435,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91435#pullrequestreview-423184536",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c54538aa-fca2-4ac9-be14-3f5b00eac1bb",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "(a) It might be worth more explicitly emphasizing that a given key appears _at most once_ in the queue.  The code enforces this and relies on this, except as follows.\r\n\r\n(b) In DeltaFIFO::queueActionLocked, it is contemplated that `len(newDeltas) == 0` and in this case the code asserts that is OK to remove the key from `f.items` but not `f.queue`.  There are also some other places that read these things and are coded as if a key can be in `f.queue` but not `f.items`.  In fact it is never OK to for a key to appear in `f.queue` but not `f.items`.",
        "createdAt" : "2020-06-03T02:07:30Z",
        "updatedAt" : "2020-06-03T02:07:30Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "be3f25ac-1ecd-464b-8450-61cd05fb9301",
        "parentId" : "c54538aa-fca2-4ac9-be14-3f5b00eac1bb",
        "authorId" : "7798b63f-c2b2-4bb6-b5a9-16d37fe33e03",
        "body" : "> keys in the `items` and `queue` are strictly 1:1 mapping\r\n\r\nYeah, since `items` is a map, keys are always unique. So the 1:1 mapping in queue also implies the keys in queue are unique. That could be more explicitly called out as well. ",
        "createdAt" : "2020-06-03T02:53:48Z",
        "updatedAt" : "2020-06-03T02:53:57Z",
        "lastEditedBy" : "7798b63f-c2b2-4bb6-b5a9-16d37fe33e03",
        "tags" : [
        ]
      }
    ],
    "commit" : "c71272b0c7ac09991ba215e7bc5a8af8334c4b17",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +165,169 @@\t// `queue` maintains FIFO order of keys for consumption in Pop().\n\t// We maintain the property that keys in the `items` and `queue` are\n\t// strictly 1:1 mapping, and that all Deltas in `items` should have\n\t// at least one Delta.\n\titems map[string]Deltas"
  },
  {
    "id" : "339bf081-4a88-42d1-af62-4e20e09f999d",
    "prId" : 86015,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86015#pullrequestreview-329294824",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "261311c8-0de1-46b3-a59a-0f2e012a6c3b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Old client may have written code that will not expect to see a new DeltaType.",
        "createdAt" : "2019-12-09T21:28:32Z",
        "updatedAt" : "2020-01-23T10:26:15Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "fc9d9fd1-254f-4ca2-a4af-e6a516d2eb7d",
        "parentId" : "261311c8-0de1-46b3-a59a-0f2e012a6c3b",
        "authorId" : "5f3d0da0-11c3-49d0-9aa9-f897fad1c961",
        "body" : "Ah. Yikes.",
        "createdAt" : "2019-12-09T21:58:06Z",
        "updatedAt" : "2020-01-23T10:26:15Z",
        "lastEditedBy" : "5f3d0da0-11c3-49d0-9aa9-f897fad1c961",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca1eeb99b530a6d76b464dad545abc18d4508c49",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +668,672 @@\t// as well. Hence, Replaced is only emitted when the option\n\t// EmitDeltaTypeReplaced is true.\n\tReplaced DeltaType = \"Replaced\"\n\t// Sync is for synthetic events during a periodic resync.\n\tSync DeltaType = \"Sync\""
  },
  {
    "id" : "cef490d3-574d-4c4c-b3e9-2ee8fcac1211",
    "prId" : 86015,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86015#pullrequestreview-334701472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d57a34d4-3247-4bdf-bc1f-ac63a6c589bb",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "since callers of this method are potentially at risk, we should mark it deprecated in godoc and document the recommended invocation of NewDeltaFIFOWithOptions:\r\n\r\n```\r\n// Warning: This constructs a DeltaFIFO that does not differentiate between events caused by a call to Replace\r\n// (for example, from a relist, which may contain object updates), and synthetic events caused by a periodic resync\r\n// (which just emit the existing object). See https://issue.k8s.io/86015 for details.\r\n//\r\n// Use `NewDeltaFIFOWithOptions(DeltaFIFOOptions{..., ClientUnderstandsReplacedDeltaType: true})` instead\r\n// to receive a `Replaced` event depending on the type.\r\n//\r\n// Deprecated: Equivalent to NewDeltaFIFOWithOptions(DeltaFIFOOptions{KeyFunction: keyFunc, KnownObjects: knownObjects});\r\n```",
        "createdAt" : "2019-12-19T15:16:34Z",
        "updatedAt" : "2020-01-23T10:26:15Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca1eeb99b530a6d76b464dad545abc18d4508c49",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +57,61 @@//       and internal tests.\n//\n// Also see the comment on DeltaFIFO.\n//\n// Warning: This constructs a DeltaFIFO that does not differentiate between"
  },
  {
    "id" : "b9504e31-60ce-45a6-b633-9ba81926d8b1",
    "prId" : 70801,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70801#pullrequestreview-175129512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3414e4f-8197-46f8-b53c-d8bbeb2b3a65",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I probably wouldn't have made these changes at all but I guess I don't object :)",
        "createdAt" : "2018-11-14T23:18:38Z",
        "updatedAt" : "2018-11-14T23:18:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8212bd1b-90bb-437d-9628-046b73d9416d",
        "parentId" : "c3414e4f-8197-46f8-b53c-d8bbeb2b3a65",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "(meaning, just these two--I'm a fan of the others)",
        "createdAt" : "2018-11-14T23:19:08Z",
        "updatedAt" : "2018-11-14T23:19:08Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "23248316-14e9-4eac-b1bc-6636d280a418",
        "parentId" : "c3414e4f-8197-46f8-b53c-d8bbeb2b3a65",
        "authorId" : "ca571aa9-6b89-4331-b6bb-bb09f553c5d6",
        "body" : "This change will mean nothing for most of the cases, as for now dedup will not yield an empty slice, but should optimize the path for empty slices. But I must agree is mostly a cosmetic change.",
        "createdAt" : "2018-11-14T23:28:35Z",
        "updatedAt" : "2018-11-14T23:28:35Z",
        "lastEditedBy" : "ca571aa9-6b89-4331-b6bb-bb09f553c5d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b16c43f59b736060bc18e2e1de0e7fcc268f39b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +322,326 @@\n\tif len(newDeltas) > 0 {\n\t\tif _, exists := f.items[id]; !exists {\n\t\t\tf.queue = append(f.queue, id)\n\t\t}"
  },
  {
    "id" : "2b864b01-fb72-467e-9b1b-100b7e0ad2b7",
    "prId" : 40815,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40815#pullrequestreview-19627158",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "571d71ef-ff6b-40c6-ab1c-19dc4d2eecd7",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "So a slow resync is now exactly like a Replace?",
        "createdAt" : "2017-02-01T18:57:10Z",
        "updatedAt" : "2017-02-01T18:57:11Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "676e365a-57e6-428f-b772-4ce19cc0c057",
        "parentId" : "571d71ef-ff6b-40c6-ab1c-19dc4d2eecd7",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Yes, although (as best I can tell), Resync is only ever called during an actual resync, and Replace is only ever called if the watch closes and the reflector restarts ListAndWatch.\r\n\r\nIf this PR is ultimately approved, it makes the code in #40759 a lot cleaner",
        "createdAt" : "2017-02-01T19:00:01Z",
        "updatedAt" : "2017-02-01T19:00:01Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8205df17129f71057c6531cf1d82bd7770448bb",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +506,510 @@// Resync will send a sync event for each item\nfunc (f *DeltaFIFO) Resync() error {\n\tf.lock.Lock()\n\tdefer f.lock.Unlock()\n"
  },
  {
    "id" : "5a5b3c17-1588-43d3-b6bf-60a20d014f91",
    "prId" : 40815,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40815#pullrequestreview-20280705",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "935b0ae5-977c-4b30-ad6b-b205c83ee6df",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Do we have data on what's the longest tail resync?  \r\n\r\nJust wondering how much we're going to back up the plumbing?  ",
        "createdAt" : "2017-02-01T19:36:57Z",
        "updatedAt" : "2017-02-01T19:36:57Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "cb3ed3c0-b853-4ef4-b873-6f9181de26dc",
        "parentId" : "935b0ae5-977c-4b30-ad6b-b205c83ee6df",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "resync not feeding an informer can be very long - but so can relist (same effective outcome, done less often)",
        "createdAt" : "2017-02-01T20:52:57Z",
        "updatedAt" : "2017-02-01T20:52:57Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "72f75cca-9da8-4931-ab21-8da502b3b3e3",
        "parentId" : "935b0ae5-977c-4b30-ad6b-b205c83ee6df",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "I surveyed the resync periods across the code base (for both shared informers and one-off controllers) and it looks like we have:\r\n\r\n- 15 seconds (PV)\r\n- 30 seconds (a small handful)\r\n- 5 minutes\r\n- 10 minutes\r\n- 12-24 hours (jittered)\r\n\r\nI'd like to see them converge toward a larger resync (the 12-24 hours w/jitter), but we will probably need to evaluate why the controllers that use the sub-minute resyncs need such short values.",
        "createdAt" : "2017-02-06T14:41:51Z",
        "updatedAt" : "2017-02-06T14:41:51Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "b540e4f5-9b4a-4791-8ad9-9d0b36b8f581",
        "parentId" : "935b0ae5-977c-4b30-ad6b-b205c83ee6df",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "@ncdc - IIUC, in case of PV not evertthing can be watch based (i.e. cloud providers usually don't expose watch on cloud resources). That said, to ensure that a PV, or LB or sth like that didn't change in the meantime (or wasn't deleted or sth), we need to periodically go over these. And IIUC, we are doing this by iterating over k8s resources and checking what is happening to the external resource associated with this.\r\n\r\nThat said, I'm afraid for those controllers that are controlling external resource, I'm not sure if we can reduce resync period to something really small (though there are probably a bunch of already existing in which we should be able to do that).",
        "createdAt" : "2017-02-06T14:47:59Z",
        "updatedAt" : "2017-02-06T14:48:00Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "1f89ab88-cca3-4667-951d-4518714edbd5",
        "parentId" : "935b0ae5-977c-4b30-ad6b-b205c83ee6df",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "@wojtek-t that makes sense. Thanks for the explanation.",
        "createdAt" : "2017-02-06T14:50:59Z",
        "updatedAt" : "2017-02-06T14:50:59Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8205df17129f71057c6531cf1d82bd7770448bb",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +507,511 @@func (f *DeltaFIFO) Resync() error {\n\tf.lock.Lock()\n\tdefer f.lock.Unlock()\n\n\tkeys := f.knownObjects.ListKeys()"
  }
]