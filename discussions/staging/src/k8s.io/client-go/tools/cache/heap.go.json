[
  {
    "id" : "3d199224-319e-468e-b791-7f9a4b18daba",
    "prId" : 49752,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49752#pullrequestreview-55598951",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "195b65d7-d391-4aa8-bb78-3a76bd405756",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Do you mean the consumer's requeue function should call AddIfNotPresent? Why it only useful in a single producer/consumer scenario? Isn't it useful in general?",
        "createdAt" : "2017-08-04T20:55:27Z",
        "updatedAt" : "2017-08-10T18:15:18Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "bf70485f-021d-46aa-8f04-730aee8ee025",
        "parentId" : "195b65d7-d391-4aa8-bb78-3a76bd405756",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "This is a comment copied from fifo.go. The comment doesn't say it is only useful in a single producer/consumer scenario, but if there are multiple consumers, the main benefit of it, which is not contending with the producer, goes away. Consider this scenario:\r\n\r\n\r\n1. Producer adds item: key: test, value: 1\r\n2. Consumer 1 takes the item with value 1 and processes it.\r\n3. Producer adds item: key: test, value: 2\r\n4. Consumer 2 takes the item with value 2 and processes it.\r\n5. Consumer 1 faces an error, requeues the stale item with value 1.",
        "createdAt" : "2017-08-05T01:18:18Z",
        "updatedAt" : "2017-08-10T18:15:18Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "0496f09c-5112-4954-bf41-6e63b18f0a3c",
        "parentId" : "195b65d7-d391-4aa8-bb78-3a76bd405756",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thanks for the explanation.",
        "createdAt" : "2017-08-10T16:50:09Z",
        "updatedAt" : "2017-08-10T18:15:18Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "773b26d6-e878-46e2-b7a6-d221bc7e7605",
        "parentId" : "195b65d7-d391-4aa8-bb78-3a76bd405756",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thanks for the explanation.",
        "createdAt" : "2017-08-10T16:57:21Z",
        "updatedAt" : "2017-08-10T18:15:18Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "68926a22ac1365a47caba55b0f9fcbebfdf0de76",
    "line" : 189,
    "diffHunk" : "@@ -1,1 +187,191 @@// the key is present in the map, no changes is made to the item.\n//\n// This is useful in a single producer/consumer scenario so that the consumer can\n// safely retry items without contending with the producer and potentially enqueueing\n// stale items."
  }
]