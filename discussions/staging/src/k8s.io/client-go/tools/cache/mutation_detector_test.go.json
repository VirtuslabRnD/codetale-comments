[
  {
    "id" : "af9e1140-0c2b-4a92-b381-198c75b875d4",
    "prId" : 99782,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99782#pullrequestreview-604692151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c151e1b-19be-4779-95e6-28baed05edf4",
        "parentId" : null,
        "authorId" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "body" : "should `mutationFound` have a buffer? Mutation is one line above and I wonder if race may happen here (theoretically) when added item to channel before it is being read.",
        "createdAt" : "2021-03-04T20:39:51Z",
        "updatedAt" : "2021-03-04T20:39:51Z",
        "lastEditedBy" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "tags" : [
        ]
      },
      {
        "id" : "e9469ac9-d860-41c0-a2a2-a2aa746a903c",
        "parentId" : "5c151e1b-19be-4779-95e6-28baed05edf4",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "no? this just makes sure an item is added to mutationFound eventually... the detection happens in a background goroutine and isn't blocked",
        "createdAt" : "2021-03-04T20:48:47Z",
        "updatedAt" : "2021-03-04T20:48:47Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "a10a8c10-ae00-43ce-b95a-0e1c0e7123ac",
        "parentId" : "5c151e1b-19be-4779-95e6-28baed05edf4",
        "authorId" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "body" : "what if the message to `mutationFound` will be attempted to be added before this line will start listening. Very low chance I understand",
        "createdAt" : "2021-03-04T20:52:15Z",
        "updatedAt" : "2021-03-04T20:52:15Z",
        "lastEditedBy" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "tags" : [
        ]
      },
      {
        "id" : "fb0bdb3b-5180-4a8f-8a85-b7c67c887467",
        "parentId" : "5c151e1b-19be-4779-95e6-28baed05edf4",
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "Adding the message will block until this line is ready to receive since unbuffered channels are synchronous.\r\nBut the message is being added in a different goroutine, and that one being blocked is not an issue ..?",
        "createdAt" : "2021-03-04T23:52:14Z",
        "updatedAt" : "2021-03-04T23:52:14Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "00ba1a33-cd14-495f-91f4-8f36424156a1",
        "parentId" : "5c151e1b-19be-4779-95e6-28baed05edf4",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> But the message is being added in a different goroutine, and that one being blocked is not an issue\r\n\r\nexactly",
        "createdAt" : "2021-03-04T23:53:42Z",
        "updatedAt" : "2021-03-04T23:53:42Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e584cc0d-8d3a-41d0-98d1-c9aa03449a09",
        "parentId" : "5c151e1b-19be-4779-95e6-28baed05edf4",
        "authorId" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "body" : "thank you.",
        "createdAt" : "2021-03-05T00:21:43Z",
        "updatedAt" : "2021-03-05T00:21:43Z",
        "lastEditedBy" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5307b00cc8f59cbd4f14623cfa3f4f0d1b0caa8",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +72,76 @@\n\tselect {\n\tcase <-mutationFound:\n\t}\n"
  },
  {
    "id" : "5d59e468-0599-4785-98b1-fa612ac1df91",
    "prId" : 34489,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34489#pullrequestreview-151134328",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0005ba6-c4fc-4561-b750-abd30f0bb6b3",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "does anyone remember why the race detector is turned off on this test?",
        "createdAt" : "2018-08-30T18:00:20Z",
        "updatedAt" : "2018-08-30T18:00:21Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "e562c5ce-9c20-4c70-b116-09e5e0af4c23",
        "parentId" : "e0005ba6-c4fc-4561-b750-abd30f0bb6b3",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Try @deads2k I think he's the author.",
        "createdAt" : "2018-08-30T18:25:40Z",
        "updatedAt" : "2018-08-30T18:25:40Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "4209349f-ce3a-4a48-be4e-ae0d3bc6be47",
        "parentId" : "e0005ba6-c4fc-4561-b750-abd30f0bb6b3",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "to answer my own question, because there is a data race:\r\n```\r\n==================\r\nWARNING: DATA RACE\r\nRead at 0x00c42026a540 by goroutine 89:\r\n  reflect.maplen()\r\n      GOROOT/src/runtime/hashmap.go:1232 +0x0\r\n  reflect.Value.Len()\r\n      GOROOT/src/reflect/value.go:1047 +0x1f1\r\n  reflect.deepValueEqual()\r\n      GOROOT/src/reflect/deepequal.go:110 +0xc0b\r\n  reflect.deepValueEqual()\r\n      GOROOT/src/reflect/deepequal.go:101 +0x7ea\r\n  reflect.deepValueEqual()\r\n      GOROOT/src/reflect/deepequal.go:101 +0x7ea\r\n  reflect.deepValueEqual()\r\n      GOROOT/src/reflect/deepequal.go:98 +0x114e\r\n  reflect.DeepEqual()\r\n      GOROOT/src/reflect/deepequal.go:196 +0x2bf\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.(*defaultCacheMutationDetector).CompareObjects()\r\n      staging/src/k8s.io/client-go/tools/cache/mutation_detector.go:116 +0x15b\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.(*defaultCacheMutationDetector).Run()\r\n      staging/src/k8s.io/client-go/tools/cache/mutation_detector.go:85 +0x50\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.(CacheMutationDetector).Run-fm()\r\n      staging/src/k8s.io/client-go/tools/cache/shared_informer.go:219 +0x50\r\n  k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait.(*Group).StartWithChannel.func1()\r\n      staging/src/k8s.io/apimachinery/pkg/util/wait/wait.go:54 +0x45\r\n  k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait.(*Group).Start.func1()\r\n      staging/src/k8s.io/apimachinery/pkg/util/wait/wait.go:71 +0x5c\r\n\r\nPrevious write at 0x00c42026a540 by goroutine 18:\r\n  runtime.mapassign_faststr()\r\n      GOROOT/src/runtime/hashmap_fast.go:694 +0x0\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.TestMutationDetector()\r\n      staging/src/k8s.io/client-go/tools/cache/mutation_detector_test.go:73 +0x7dd\r\n  testing.tRunner()\r\n      GOROOT/src/testing/testing.go:777 +0x16d\r\n\r\nGoroutine 89 (running) created at:\r\n  k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait.(*Group).Start()\r\n      staging/src/k8s.io/apimachinery/pkg/util/wait/wait.go:69 +0x6f\r\n  k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait.(*Group).StartWithChannel()\r\n      staging/src/k8s.io/apimachinery/pkg/util/wait/wait.go:53 +0xc7\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.(*sharedIndexInformer).Run()\r\n      staging/src/k8s.io/client-go/tools/cache/shared_informer.go:219 +0x660\r\n\r\nGoroutine 18 (running) created at:\r\n  testing.(*T).Run()\r\n      GOROOT/src/testing/testing.go:824 +0x564\r\n  testing.runTests.func1()\r\n      GOROOT/src/testing/testing.go:1063 +0xa4\r\n  testing.tRunner()\r\n      GOROOT/src/testing/testing.go:777 +0x16d\r\n  testing.runTests()\r\n      GOROOT/src/testing/testing.go:1061 +0x4e1\r\n  testing.(*M).Run()\r\n      GOROOT/src/testing/testing.go:978 +0x2cd\r\n  main.main()\r\n      bazel-out/k8-fastbuild/bin/staging/src/k8s.io/client-go/tools/cache/linux_amd64_race_stripped/go_default_test%/testmain.go:208 +0x2e9\r\n==================\r\n==================\r\nWARNING: DATA RACE\r\nRead at 0x00c42028f838 by goroutine 88:\r\n  k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/apis/meta/v1.(*ObjectMeta).DeepCopyInto()\r\n      staging/src/k8s.io/apimachinery/pkg/apis/meta/v1/zz_generated.deepcopy.go:653 +0xd9c\r\n  k8s.io/kubernetes/vendor/k8s.io/api/core/v1.(*Pod).DeepCopyInto()\r\n      staging/src/k8s.io/api/core/v1/zz_generated.deepcopy.go:2990 +0x10e\r\n  k8s.io/kubernetes/vendor/k8s.io/api/core/v1.(*Pod).DeepCopy()\r\n      staging/src/k8s.io/api/core/v1/zz_generated.deepcopy.go:3002 +0x5c\r\n  k8s.io/kubernetes/vendor/k8s.io/api/core/v1.(*Pod).DeepCopyObject()\r\n      staging/src/k8s.io/api/core/v1/zz_generated.deepcopy.go:3008 +0x38\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.(*defaultCacheMutationDetector).AddObject()\r\n      staging/src/k8s.io/client-go/tools/cache/mutation_detector.go:102 +0xd2\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.(*sharedIndexInformer).HandleDeltas()\r\n      staging/src/k8s.io/client-go/tools/cache/shared_informer.go:353 +0x1d0\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.(*sharedIndexInformer).HandleDeltas-fm()\r\n      staging/src/k8s.io/client-go/tools/cache/shared_informer.go:202 +0x55\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.(*DeltaFIFO).Pop()\r\n      staging/src/k8s.io/client-go/tools/cache/delta_fifo.go:444 +0x37c\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.(*controller).processLoop()\r\n      staging/src/k8s.io/client-go/tools/cache/controller.go:150 +0x6d\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.(*controller).(k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.processLoop)-fm()\r\n      staging/src/k8s.io/client-go/tools/cache/controller.go:124 +0x41\r\n  k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait.JitterUntil.func1()\r\n      staging/src/k8s.io/apimachinery/pkg/util/wait/wait.go:133 +0x61\r\n  k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait.JitterUntil()\r\n      staging/src/k8s.io/apimachinery/pkg/util/wait/wait.go:134 +0xcd\r\n  k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait.Until()\r\n      staging/src/k8s.io/apimachinery/pkg/util/wait/wait.go:88 +0x5a\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.(*controller).Run()\r\n      staging/src/k8s.io/client-go/tools/cache/controller.go:124 +0x3fd\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.(*sharedIndexInformer).Run()\r\n      staging/src/k8s.io/client-go/tools/cache/shared_informer.go:227 +0x75d\r\n\r\nPrevious write at 0x00c42028f838 by goroutine 18:\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.TestMutationDetector()\r\n      staging/src/k8s.io/client-go/tools/cache/mutation_detector_test.go:73 +0x7f3\r\n  testing.tRunner()\r\n      GOROOT/src/testing/testing.go:777 +0x16d\r\n\r\nGoroutine 88 (running) created at:\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.TestMutationDetector()\r\n      staging/src/k8s.io/client-go/tools/cache/mutation_detector_test.go:65 +0x6f5\r\n  testing.tRunner()\r\n      GOROOT/src/testing/testing.go:777 +0x16d\r\n\r\nGoroutine 18 (running) created at:\r\n  testing.(*T).Run()\r\n      GOROOT/src/testing/testing.go:824 +0x564\r\n  testing.runTests.func1()\r\n      GOROOT/src/testing/testing.go:1063 +0xa4\r\n  testing.tRunner()\r\n      GOROOT/src/testing/testing.go:777 +0x16d\r\n  testing.runTests()\r\n      GOROOT/src/testing/testing.go:1061 +0x4e1\r\n  testing.(*M).Run()\r\n      GOROOT/src/testing/testing.go:978 +0x2cd\r\n  main.main()\r\n      bazel-out/k8-fastbuild/bin/staging/src/k8s.io/client-go/tools/cache/linux_amd64_race_stripped/go_default_test%/testmain.go:208 +0x2e9\r\n==================\r\n```\r\n\r\nI wonder if this is fixable?",
        "createdAt" : "2018-08-30T18:31:01Z",
        "updatedAt" : "2018-08-30T18:31:01Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "60fb8bfe-cfb9-4480-9e3e-174a37ab1e5b",
        "parentId" : "e0005ba6-c4fc-4561-b750-abd30f0bb6b3",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "The cache mutation detector is constantly retrieving data from the shared informer's cache to detect for changes from external actors, without using locks. It should only ever be enabled in unit tests. I think this is working as designed (disabling the race detector for this test).",
        "createdAt" : "2018-08-30T18:51:42Z",
        "updatedAt" : "2018-08-30T18:51:54Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4287973d998178ad3f3dc0714dc1a0ea1236345a",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@// +build !race\n\n/*"
  }
]