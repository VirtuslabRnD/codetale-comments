[
  {
    "id" : "39ff30f6-d31c-4824-ba4b-9741fc0ed484",
    "prId" : 94316,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94316#pullrequestreview-478580831",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f8f319f-cabe-466d-b39e-61d86a589605",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "As a bug - this deserves a test.\r\n\r\nSomething similar to this test should work:\r\nhttps://github.com/kubernetes/kubernetes/pull/92537/files#diff-4713f63cf917b7881fa12f47f3d9ec75R717\r\n\r\nYou probably only need to change line 739 to not set Type, but instead just set message as it was before.",
        "createdAt" : "2020-08-31T07:07:27Z",
        "updatedAt" : "2020-09-01T19:20:08Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "f6aa37c6-aea1-4e29-925f-450bef2f1dfe",
        "parentId" : "7f8f319f-cabe-466d-b39e-61d86a589605",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "[Also, please don't copy-paste the full test, rather refactor the one I added.]",
        "createdAt" : "2020-08-31T07:07:48Z",
        "updatedAt" : "2020-09-01T19:20:08Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "64b920d0-4385-4ed3-a6f3-1930174d789f",
        "parentId" : "7f8f319f-cabe-466d-b39e-61d86a589605",
        "authorId" : "4cc401e7-5edc-423d-839c-940503ac75c7",
        "body" : "Refactored unit test to cover both variants of the error",
        "createdAt" : "2020-08-31T12:09:37Z",
        "updatedAt" : "2020-09-01T19:20:08Z",
        "lastEditedBy" : "4cc401e7-5edc-423d-839c-940503ac75c7",
        "tags" : [
        ]
      },
      {
        "id" : "887cbace-3928-4c4e-89f3-0224435982ba",
        "parentId" : "7f8f319f-cabe-466d-b39e-61d86a589605",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Great - thanks!",
        "createdAt" : "2020-08-31T12:49:54Z",
        "updatedAt" : "2020-09-01T19:20:08Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1f4bfe1db8d3975bf626c2c8536dd8076aeb7d4",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +591,595 @@\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}"
  },
  {
    "id" : "dde688aa-f826-4730-b0fa-2f5bc7149ac9",
    "prId" : 94235,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94235#pullrequestreview-481279786",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bfb14be-09ba-4e8b-a60c-0561d49ab34f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Do we need to reset this if it successfully connects?\r\n\r\nI wouldn't want e.g. a second disconnection to wait 5 minutes before attempting to connect.",
        "createdAt" : "2020-09-02T19:36:57Z",
        "updatedAt" : "2020-09-02T21:45:30Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "e2d340bb-53b8-49dc-8fc3-7467e612cb39",
        "parentId" : "1bfb14be-09ba-4e8b-a60c-0561d49ab34f",
        "authorId" : "f4ac3f8f-7ffb-4966-8247-0d4dc4a5bca1",
        "body" : "I think that is handled by the backoff manager's `resetDuration` field. \r\n\r\nMy reading of https://godoc.org/k8s.io/apimachinery/pkg/util/wait#NewExponentialBackoffManager thinks that after having not backed off for `resetDuration` it will start the backoff over again (i.e. only waiting `initBackoff` on the first iteration, increasing exponentially thereafter).\r\n\r\nI could add a test case for this, but that'll 1) make the mocked out `WatchFunc` really messy and 2) just be testing that the backoff manager does what it says it does.",
        "createdAt" : "2020-09-02T20:32:43Z",
        "updatedAt" : "2020-09-02T21:45:30Z",
        "lastEditedBy" : "f4ac3f8f-7ffb-4966-8247-0d4dc4a5bca1",
        "tags" : [
        ]
      },
      {
        "id" : "522b85e4-aac4-4a50-8c5b-e5f3867ce5e8",
        "parentId" : "1bfb14be-09ba-4e8b-a60c-0561d49ab34f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Nope, if it's documented that way, that's fine, great, no need to double test here.",
        "createdAt" : "2020-09-02T20:36:13Z",
        "updatedAt" : "2020-09-02T21:45:30Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ff789f2bb9bf7fbb3df35977bc249c0dd019d31",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +410,414 @@\t\t\t// If that's the case begin exponentially backing off and resend watch request.\n\t\t\tif utilnet.IsConnectionRefused(err) {\n\t\t\t\t<-r.initConnBackoffManager.Backoff().C()\n\t\t\t\tcontinue\n\t\t\t}"
  },
  {
    "id" : "8a2790a4-3182-420f-a742-f7b228dd08a6",
    "prId" : 87795,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87795#pullrequestreview-354942326",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb80130a-33dc-4beb-b0b1-f71b42cd8b67",
        "parentId" : null,
        "authorId" : "3f2a59ab-16d4-4e6a-90df-56d3c62d3d44",
        "body" : "BackoffUntil() and backoffManager are both tested so we'd skip testing reflector.Run() here",
        "createdAt" : "2020-02-07T05:49:58Z",
        "updatedAt" : "2020-02-08T02:06:48Z",
        "lastEditedBy" : "3f2a59ab-16d4-4e6a-90df-56d3c62d3d44",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1248163ff4dc3cf164284bf255c10b6b538aa66",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +174,178 @@func (r *Reflector) Run(stopCh <-chan struct{}) {\n\tklog.V(2).Infof(\"Starting reflector %s (%s) from %s\", r.expectedTypeName, r.resyncPeriod, r.name)\n\twait.BackoffUntil(func() {\n\t\tif err := r.ListAndWatch(stopCh); err != nil {\n\t\t\tutilruntime.HandleError(err)"
  },
  {
    "id" : "303053ce-6a1b-4609-9f24-fe92db0606cd",
    "prId" : 87795,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87795#pullrequestreview-355279735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b376225f-8ac8-4e5b-84b1-85fc42a43744",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "nit - let's not define it here - simply create it in line 142 where you set clock.",
        "createdAt" : "2020-02-07T09:44:00Z",
        "updatedAt" : "2020-02-08T02:06:48Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "777acc12-4454-48ba-966f-501c57ba227d",
        "parentId" : "b376225f-8ac8-4e5b-84b1-85fc42a43744",
        "authorId" : "3f2a59ab-16d4-4e6a-90df-56d3c62d3d44",
        "body" : "Both backoff manager and reflector needs this clock, so I have to create it ahead.",
        "createdAt" : "2020-02-07T16:29:58Z",
        "updatedAt" : "2020-02-08T02:06:48Z",
        "lastEditedBy" : "3f2a59ab-16d4-4e6a-90df-56d3c62d3d44",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1248163ff4dc3cf164284bf255c10b6b538aa66",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +128,132 @@// NewNamedReflector same as NewReflector, but with a specified name for logging\nfunc NewNamedReflector(name string, lw ListerWatcher, expectedType interface{}, store Store, resyncPeriod time.Duration) *Reflector {\n\trealClock := &clock.RealClock{}\n\tr := &Reflector{\n\t\tname:          name,"
  },
  {
    "id" : "81b89fc7-20d6-4296-b0f3-d7868f9ace89",
    "prId" : 87795,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87795#pullrequestreview-681700419",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "483d6a3c-67a5-487e-acc7-cffbae43bfc9",
        "parentId" : null,
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "Was it intentional that the log level got bumped up from 3 to 2?\r\n\r\nI just updated to client-go from 1.21.1 and these messages started to pop up quite a lot in my client (an e2e test suite).",
        "createdAt" : "2021-06-10T15:41:07Z",
        "updatedAt" : "2021-06-10T15:41:07Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      },
      {
        "id" : "500d17be-3490-4342-80eb-b265e50b5bbd",
        "parentId" : "483d6a3c-67a5-487e-acc7-cffbae43bfc9",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I don't think it really was - we should fix that and backport.\r\nWould you be able to send PR for it (happy to approve)?",
        "createdAt" : "2021-06-10T18:16:58Z",
        "updatedAt" : "2021-06-10T18:16:58Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "ec8a951f-715e-428e-8bee-c251bca1a6ce",
        "parentId" : "483d6a3c-67a5-487e-acc7-cffbae43bfc9",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "See https://github.com/kubernetes/kubernetes/pull/102788",
        "createdAt" : "2021-06-10T18:42:57Z",
        "updatedAt" : "2021-06-10T18:42:58Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      },
      {
        "id" : "553b2475-23f6-4013-94d1-27b75416beaa",
        "parentId" : "483d6a3c-67a5-487e-acc7-cffbae43bfc9",
        "authorId" : "3f2a59ab-16d4-4e6a-90df-56d3c62d3d44",
        "body" : "https://github.com/kubernetes/kubernetes/pull/87795#discussion_r376224120\r\n\r\nI guess that was my intention. In practice we found reflector starting is an important debugging point and it only prints once when reflector initially created so won’t be too verbose.",
        "createdAt" : "2021-06-10T18:53:46Z",
        "updatedAt" : "2021-06-10T18:53:46Z",
        "lastEditedBy" : "3f2a59ab-16d4-4e6a-90df-56d3c62d3d44",
        "tags" : [
        ]
      },
      {
        "id" : "aa2d664d-d762-4bb2-a062-654a7e454952",
        "parentId" : "483d6a3c-67a5-487e-acc7-cffbae43bfc9",
        "authorId" : "3f2a59ab-16d4-4e6a-90df-56d3c62d3d44",
        "body" : "@pohly if this line of log is polluting your log file, does your test include a lot of reflector creation?",
        "createdAt" : "2021-06-10T18:54:46Z",
        "updatedAt" : "2021-06-10T18:54:47Z",
        "lastEditedBy" : "3f2a59ab-16d4-4e6a-90df-56d3c62d3d44",
        "tags" : [
        ]
      },
      {
        "id" : "9cacc6c9-9c8f-4eef-ac11-5407e4eb30e4",
        "parentId" : "483d6a3c-67a5-487e-acc7-cffbae43bfc9",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "Yes. I'm running an e2e.test suite where essentially each test is independent and therefore instantiates its own reflectors.\r\n",
        "createdAt" : "2021-06-10T18:56:31Z",
        "updatedAt" : "2021-06-10T19:15:03Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      },
      {
        "id" : "ed34724f-d394-4a65-a5ed-70df623bb7b9",
        "parentId" : "483d6a3c-67a5-487e-acc7-cffbae43bfc9",
        "authorId" : "3f2a59ab-16d4-4e6a-90df-56d3c62d3d44",
        "body" : "Would this log help debug then? I.e. IMO it makes sense for v2 log or even v1 log to include critical time points such as component start / finish etc. in general.\r\n@wojtek-t thoughts?",
        "createdAt" : "2021-06-10T19:22:47Z",
        "updatedAt" : "2021-06-10T19:22:47Z",
        "lastEditedBy" : "3f2a59ab-16d4-4e6a-90df-56d3c62d3d44",
        "tags" : [
        ]
      },
      {
        "id" : "b1b1f851-cd0e-484b-8108-781da9b60c65",
        "parentId" : "483d6a3c-67a5-487e-acc7-cffbae43bfc9",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "> Would this log help debug then?\r\n\r\nNo. For me it is just additional noise. That's why I investigated.\r\n\r\n> I.e. IMO it makes sense for v2 log or even v1 log to include critical time points such as component start / finish etc. in general.\r\n\r\nBut client-go as a library cannot make assumptions about what constitutes component start/finish. In particular one cannot assume that this code is only called at the start and end of a program run. E2E testing is one counter example, but there might very well be others.\r\n \r\nA library that gets embedded in command line tools should be very cautious about logging at a level that is visible by default. I would not expect any output from client-go at V < 3 unless that output is relevant for the end-user of that command line tool.\r\n",
        "createdAt" : "2021-06-10T20:36:08Z",
        "updatedAt" : "2021-06-10T20:36:08Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      },
      {
        "id" : "6bebb0b3-59d7-46cb-8222-ffb6306a46f5",
        "parentId" : "483d6a3c-67a5-487e-acc7-cffbae43bfc9",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "> I don't think it really was - we should fix that and backport.\r\n\r\nHere's the backport: https://github.com/kubernetes/kubernetes/pull/102800\r\n",
        "createdAt" : "2021-06-11T06:06:58Z",
        "updatedAt" : "2021-06-11T06:06:58Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      },
      {
        "id" : "52f7ee7b-254a-4834-ad4d-cd3da4893e8e",
        "parentId" : "483d6a3c-67a5-487e-acc7-cffbae43bfc9",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "> Would this log help debug then? I.e. IMO it makes sense for v2 log or even v1 log to include critical time points such as component start / finish etc. in general.\r\n@wojtek-t thoughts?\r\n\r\nReflector starts may happen not only on component start/finish. Any time watch is not able to resume it may also happen. If you really want those logs, you can always configure verbosity per file. I don't think it should be v=2 by default.",
        "createdAt" : "2021-06-11T10:49:25Z",
        "updatedAt" : "2021-06-11T10:49:25Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1248163ff4dc3cf164284bf255c10b6b538aa66",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +173,177 @@// Run will exit when stopCh is closed.\nfunc (r *Reflector) Run(stopCh <-chan struct{}) {\n\tklog.V(2).Infof(\"Starting reflector %s (%s) from %s\", r.expectedTypeName, r.resyncPeriod, r.name)\n\twait.BackoffUntil(func() {\n\t\tif err := r.ListAndWatch(stopCh); err != nil {"
  },
  {
    "id" : "30cd7480-58e6-456a-9886-3a5bcb7c3693",
    "prId" : 87329,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87329#pullrequestreview-353101844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35eab1c3-03d9-4078-8473-c786f030d9b9",
        "parentId" : null,
        "authorId" : "06be2998-8e58-49a1-960a-716ab2ae239d",
        "body" : "What about removing all the specific error handling here to a DefaultDropWatchHandler that is registered by default?\r\nBecause I'd expect people would like to handle EOF and ConnectionRefused error (if only for monitoring purposes).",
        "createdAt" : "2020-01-21T09:20:26Z",
        "updatedAt" : "2020-03-14T00:25:47Z",
        "lastEditedBy" : "06be2998-8e58-49a1-960a-716ab2ae239d",
        "tags" : [
        ]
      },
      {
        "id" : "14c6d350-91bc-410f-8216-f88566ce35d4",
        "parentId" : "35eab1c3-03d9-4078-8473-c786f030d9b9",
        "authorId" : "f06f9568-4974-4d41-9a77-85c5b8610434",
        "body" : "The most important thing for us is to have some mechanism to bubble up to user \"hey, your auth tokens expired, and we can't talk to kubernetes anymore\".\r\n\r\nI'm deeply worried that this PR is going to turn into a quagmire where we can't add any error-handling mechanism at all until we've had a long discussion on which errors bubble up and which do not. \r\n\r\nI think that's a good discussion to have. But I don't feel like I'm well-equipped to facilitate that discussion, or to weigh competing needs (e.g., people who want the informer to retry EOF internally vs those who do not)\r\n",
        "createdAt" : "2020-01-21T22:40:40Z",
        "updatedAt" : "2020-03-14T00:25:47Z",
        "lastEditedBy" : "f06f9568-4974-4d41-9a77-85c5b8610434",
        "tags" : [
        ]
      },
      {
        "id" : "d66ab4e7-3ed5-4c24-9e17-1fa0086e9271",
        "parentId" : "35eab1c3-03d9-4078-8473-c786f030d9b9",
        "authorId" : "06be2998-8e58-49a1-960a-716ab2ae239d",
        "body" : "Understood, but I'm just suggesting to keep the existing error handling but move it to a DefaultDropWatchHandler. That way a user can customize it without changing the existing default behaviour.",
        "createdAt" : "2020-01-24T10:14:11Z",
        "updatedAt" : "2020-03-14T00:25:47Z",
        "lastEditedBy" : "06be2998-8e58-49a1-960a-716ab2ae239d",
        "tags" : [
        ]
      },
      {
        "id" : "b874d5d9-a288-489b-a166-3c74eec2a89d",
        "parentId" : "35eab1c3-03d9-4078-8473-c786f030d9b9",
        "authorId" : "f06f9568-4974-4d41-9a77-85c5b8610434",
        "body" : "hmmm...i spent some time playing around with this, and couldn't come up with a solution that fit well. This error handling depends on unexported fields and functions of the package (r.expectedTypeName, isExpiredError), and wasn't sure how much we should really be exposing.\r\n\r\nDid you have a particular API in mind?",
        "createdAt" : "2020-01-25T04:43:02Z",
        "updatedAt" : "2020-03-14T00:25:47Z",
        "lastEditedBy" : "f06f9568-4974-4d41-9a77-85c5b8610434",
        "tags" : [
        ]
      },
      {
        "id" : "f3f3e0b5-2150-40e7-aeee-220949543ef3",
        "parentId" : "35eab1c3-03d9-4078-8473-c786f030d9b9",
        "authorId" : "06be2998-8e58-49a1-960a-716ab2ae239d",
        "body" : "@nicks A DefaultDropWatchHandler could use these fields, right? Something like this:\r\n```\r\nfunc DefaultDropWatchHandler(err error, doneCh <-chan struct{}) {\r\n\tswitch {\r\n\t\t\tcase isExpiredError(err):\r\n\t\t\t\tr.setIsLastSyncResourceVersionExpired(true)\r\n\t\t\t\tklog.V(4).Infof(\"%s: watch of %v closed with: %v\", r.name, r.expectedTypeName, err)\r\n\t\t\tcase err == io.EOF:\r\n\t\t\t\t// watch closed normally\r\n\t\t\tcase err == io.ErrUnexpectedEOF:\r\n\t\t\t\tklog.V(1).Infof(\"%s: Watch for %v closed with unexpected EOF: %v\", r.name, r.expectedTypeName, err)\r\n\t\t\tdefault:\r\n\t\t\t\tutilruntime.HandleError(fmt.Errorf(\"%s: Failed to watch %v: %v\", r.name, r.expectedTypeName, err))\r\n\t}\r\n\tif !utilnet.IsConnectionRefused(err) {\r\n\t\tdoneCh <- <- struct{}{}\r\n\t}\r\n}\r\n```\r\n",
        "createdAt" : "2020-02-04T11:55:39Z",
        "updatedAt" : "2020-03-14T00:25:47Z",
        "lastEditedBy" : "06be2998-8e58-49a1-960a-716ab2ae239d",
        "tags" : [
        ]
      },
      {
        "id" : "ae7f4e60-ff9d-417a-8a19-93f640d97284",
        "parentId" : "35eab1c3-03d9-4078-8473-c786f030d9b9",
        "authorId" : "f06f9568-4974-4d41-9a77-85c5b8610434",
        "body" : "ok, i pushed a new branch to demonstrate what that would look like, what do you think?",
        "createdAt" : "2020-02-04T16:08:16Z",
        "updatedAt" : "2020-03-14T00:25:47Z",
        "lastEditedBy" : "f06f9568-4974-4d41-9a77-85c5b8610434",
        "tags" : [
        ]
      }
    ],
    "commit" : "435b40aa1e5c0ae44e0aeb9aa6dbde79838b3390",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +398,402 @@\n\t\tw, err := r.listerWatcher.Watch(options)\n\t\tif err != nil {\n\t\t\t// If this is \"connection refused\" error, it means that most likely apiserver is not responsive.\n\t\t\t// It doesn't make sense to re-list all objects because most likely we will be able to restart"
  },
  {
    "id" : "75a65989-deeb-4807-8062-5c54ada8a754",
    "prId" : 87329,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87329#pullrequestreview-388478106",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a9a7163-bbba-4732-9ac1-8c0c5763c8da",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'd repeat your disclaimer (about not doing work that will take time) in a comment here, as well.",
        "createdAt" : "2020-03-13T15:39:21Z",
        "updatedAt" : "2020-03-14T00:25:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "fc48063e-27fa-4b53-b7ee-8873ad6b16fc",
        "parentId" : "6a9a7163-bbba-4732-9ac1-8c0c5763c8da",
        "authorId" : "f06f9568-4974-4d41-9a77-85c5b8610434",
        "body" : "done",
        "createdAt" : "2020-03-13T22:06:19Z",
        "updatedAt" : "2020-03-14T00:25:47Z",
        "lastEditedBy" : "f06f9568-4974-4d41-9a77-85c5b8610434",
        "tags" : [
        ]
      },
      {
        "id" : "46cecd1d-66e3-4d9d-b4a9-188111d3fd82",
        "parentId" : "6a9a7163-bbba-4732-9ac1-8c0c5763c8da",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Should the caller put a cap on the amount of time the handler executes ?\r\nJust in case some implementation doesn't follow the guide above.",
        "createdAt" : "2020-04-04T17:58:42Z",
        "updatedAt" : "2020-04-04T17:58:42Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "6cc8277a-7469-4676-b7fe-09b19a225cf5",
        "parentId" : "6a9a7163-bbba-4732-9ac1-8c0c5763c8da",
        "authorId" : "f06f9568-4974-4d41-9a77-85c5b8610434",
        "body" : "@tedyu can you point to an established pattern for doing that safely? were you thinking a done channel to the handler, or something else?",
        "createdAt" : "2020-04-06T15:46:31Z",
        "updatedAt" : "2020-04-06T15:46:32Z",
        "lastEditedBy" : "f06f9568-4974-4d41-9a77-85c5b8610434",
        "tags" : [
        ]
      },
      {
        "id" : "d61f9f84-8251-4308-a265-cbffb153a04d",
        "parentId" : "6a9a7163-bbba-4732-9ac1-8c0c5763c8da",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Yeah, similar to done channel.\r\nYou can create goroutine for running the handler.\r\nIn the caller, use a timer to gauge the amount of time handler runs.",
        "createdAt" : "2020-04-06T15:57:36Z",
        "updatedAt" : "2020-04-06T15:57:36Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "60645c59-0ea5-4792-8df0-d411c893b0d3",
        "parentId" : "6a9a7163-bbba-4732-9ac1-8c0c5763c8da",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think that is too much complexity for this. If people abuse this, we can fix it. Until then, just documentation, please.",
        "createdAt" : "2020-04-06T17:44:09Z",
        "updatedAt" : "2020-04-06T17:44:09Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "435b40aa1e5c0ae44e0aeb9aa6dbde79838b3390",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +110,114 @@// ways. Implementations should return quickly - any expensive processing\n// should be offloaded.\ntype WatchErrorHandler func(r *Reflector, err error)\n\n// DefaultWatchErrorHandler is the default implementation of WatchErrorHandler"
  },
  {
    "id" : "6c27efeb-6be9-43e5-a7b1-2ac5ef82ad03",
    "prId" : 86430,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86430#pullrequestreview-351337589",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "927398c9-5956-4381-8c50-716b4cbe8339",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "why do we need to check options.ResourceVersion, and not just do this:\r\n\r\n```go\r\nif paginatedResult {\r\n  r.paginatedResult = true\r\n}\r\n```",
        "createdAt" : "2020-01-31T07:18:04Z",
        "updatedAt" : "2020-01-31T10:50:48Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "40437af1-dcda-453c-b690-f4af7feb476d",
        "parentId" : "927398c9-5956-4381-8c50-716b4cbe8339",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Actually, the check for RV=\"0\" is needed in my opinion - I extended the comment.",
        "createdAt" : "2020-01-31T08:05:10Z",
        "updatedAt" : "2020-01-31T10:50:48Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5dcf08c1993718e94cf6537af50e0a411dd2878c",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +284,288 @@\t\t// cache is disabled and there are a lot of objects of a given type. In such case,\n\t\t// there is no need to prefer listing from watch cache.\n\t\tif options.ResourceVersion == \"0\" && paginatedResult {\n\t\t\tr.paginatedResult = true\n\t\t}"
  },
  {
    "id" : "cdf33f41-17e9-4e10-a18b-4cadd2ff1937",
    "prId" : 83520,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83520#pullrequestreview-304278748",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce98204d-5bb1-4dc1-973e-ba24a608b413",
        "parentId" : null,
        "authorId" : "3f681241-1a29-4fbf-bddc-1df89a871240",
        "body" : "Hm, this makes it possible to go back in time on restarts, right? Wouldn't it hurt operators managing statefull resources ? ",
        "createdAt" : "2019-10-20T10:58:29Z",
        "updatedAt" : "2019-11-06T06:06:26Z",
        "lastEditedBy" : "3f681241-1a29-4fbf-bddc-1df89a871240",
        "tags" : [
        ]
      },
      {
        "id" : "9f5f40ca-e39e-4289-b356-0b64b9b22e1e",
        "parentId" : "ce98204d-5bb1-4dc1-973e-ba24a608b413",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Yes, this only fixes relist.  Restart has always used resourceVersion=“0” and we’re not fixing that with this PR. We do have plans to fix it, just not with this PR.",
        "createdAt" : "2019-10-20T21:02:54Z",
        "updatedAt" : "2019-11-06T06:06:26Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "57b451cfb6738fca45fc05cd50c1ff6d7240e3a7",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +466,470 @@\t\t// For performance reasons, initial list performed by reflector uses \"0\" as resource version to allow it to\n\t\t// be served from the watch cache if it is enabled.\n\t\treturn \"0\"\n\t}\n\treturn r.lastSyncResourceVersion"
  },
  {
    "id" : "c0f3f5d9-b67e-4a41-b13a-4798bb973f82",
    "prId" : 83520,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83520#pullrequestreview-309496140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8012dcad-14e0-4fe9-98ee-574d66a860c9",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Only if WatchListPageSize > 0",
        "createdAt" : "2019-10-24T18:32:08Z",
        "updatedAt" : "2019-11-06T06:06:26Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "1f23e8d9-958d-4ade-9518-46bdcfeb910e",
        "parentId" : "8012dcad-14e0-4fe9-98ee-574d66a860c9",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Otherwise we don't paginate.",
        "createdAt" : "2019-10-24T18:32:24Z",
        "updatedAt" : "2019-11-06T06:06:26Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "c47eafb8-14bd-438d-b568-167128f3ce03",
        "parentId" : "8012dcad-14e0-4fe9-98ee-574d66a860c9",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Not sure I follow. Is the goal to avoid any unpaginated RV=\"\" list request?\r\n\r\nIf we've already received a 410 Gone, then we can't do a RV=\"n\" request. It would just return Gone again. If we do RV=\"0\", we can get a stale read, which is what we're trying to avoid.",
        "createdAt" : "2019-10-24T20:07:19Z",
        "updatedAt" : "2019-11-06T06:06:26Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "cd159941-a744-4adc-8af3-66d62c9de78c",
        "parentId" : "8012dcad-14e0-4fe9-98ee-574d66a860c9",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "No, I mean you can create a Reflector that doesn't use paging.  So any logic related to paging has to be constrained to `r.WatchListPageSize > 0`",
        "createdAt" : "2019-10-30T18:59:50Z",
        "updatedAt" : "2019-11-06T06:06:26Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "74bf6eb1-da3d-4384-8960-48e471ac82ca",
        "parentId" : "8012dcad-14e0-4fe9-98ee-574d66a860c9",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "I think I understand.\r\n\r\nI've rewritten the comment explaining the fallback from paginated to full list:\r\n\r\nhttps://github.com/kubernetes/kubernetes/pull/83520/files#diff-df2b34adba86da0485290415620d737aR218\r\n\r\nDoes that make sense? I believe the logic is correct.",
        "createdAt" : "2019-10-30T19:17:07Z",
        "updatedAt" : "2019-11-06T06:06:26Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "3c869589-25cf-487b-9ffa-450281dd7a0b",
        "parentId" : "8012dcad-14e0-4fe9-98ee-574d66a860c9",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yeah, I think so.",
        "createdAt" : "2019-10-30T20:22:56Z",
        "updatedAt" : "2019-11-06T06:06:26Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "57b451cfb6738fca45fc05cd50c1ff6d7240e3a7",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +457,461 @@\tdefer r.lastSyncResourceVersionMutex.RUnlock()\n\n\tif r.isLastSyncResourceVersionGone {\n\t\t// Since this reflector makes paginated list requests, and all paginated list requests skip the watch cache\n\t\t// if the lastSyncResourceVersion is expired, we set ResourceVersion=\"\" and list again to re-establish reflector"
  },
  {
    "id" : "75cd2dc9-aec2-4311-9dea-610ee09dbcc5",
    "prId" : 83520,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83520#pullrequestreview-312242778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50878b22-f95a-4196-ac9d-34a5c6c45f12",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I hope that with \"watch bookmarks\" it won't hit us seriously, but it has some potential to break scalability (that said, I agree that we need  it for correctness). I'm just pointing to something that we should look at and if it will appear to happen more than rarely, consider some tuning of watch bookmarks features (or figure out if other things can be done).",
        "createdAt" : "2019-11-05T20:30:20Z",
        "updatedAt" : "2019-11-06T06:06:26Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "735299e8-669f-4d8c-8f26-90f6e13ceb7a",
        "parentId" : "50878b22-f95a-4196-ac9d-34a5c6c45f12",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "is the long-term goal to use watch heartbeat on etcd 3.4 to ensure lists at `resourceVersion=0` that are served from the watch cache only return once their data is current with etcd as of the time of the request? would we change this implementation at that point?",
        "createdAt" : "2019-11-06T00:52:58Z",
        "updatedAt" : "2019-11-06T06:06:26Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "37dd58ae-5f1a-4f16-96b6-9589464b9927",
        "parentId" : "50878b22-f95a-4196-ac9d-34a5c6c45f12",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "I was thinking we'd handle it by making it possible to serve RV=\"\" as a consistent read from watch cache (instead of always hitting etcd for the entire list request), and switching use cases that require consistency from RV=\"0\" to RV=\"\" (and not ever guarantee consistency for RV=\"0\").\r\n\r\nThis should be possible to do. The only thing needed from etcd to serve a consistent read is the current RV. The rest of the read can be served from that RV from cache, if the cache is caught up to it. Trick is knowing if the cache is caught up. For that, etcd has a progress notify operation that we can use (progress events are basically bookmarks, but for etcd watch). I've got a sketch of how this might all work, but need to discuss it more broadly before we decide if it's something we'd want to implement. I have a doc I can dust off and circulate.",
        "createdAt" : "2019-11-06T07:49:00Z",
        "updatedAt" : "2019-11-06T07:54:39Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "57b451cfb6738fca45fc05cd50c1ff6d7240e3a7",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +461,465 @@\t\t// if the lastSyncResourceVersion is expired, we set ResourceVersion=\"\" and list again to re-establish reflector\n\t\t// to the latest available ResourceVersion, using a consistent read from etcd.\n\t\treturn \"\"\n\t}\n\tif r.lastSyncResourceVersion == \"\" {"
  },
  {
    "id" : "ba8a559f-d3fa-4bb6-b267-6c217e676a3b",
    "prId" : 82388,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82388#pullrequestreview-284511529",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3481d21b-df60-474e-a708-03599e771975",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "expectedUnstructuredGVK",
        "createdAt" : "2019-09-05T19:53:37Z",
        "updatedAt" : "2019-09-24T14:47:17Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "10c969ed-d3b5-4b53-86ea-914b84a49cf0",
        "parentId" : "3481d21b-df60-474e-a708-03599e771975",
        "authorId" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "body" : "Done",
        "createdAt" : "2019-09-05T20:10:28Z",
        "updatedAt" : "2019-09-24T14:47:17Z",
        "lastEditedBy" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a836d1710b5a1c1330ff58dad369d6afd2a1185",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +59,63 @@\texpectedType reflect.Type\n\t// The GVK of the object we expect to place in the store if unstructured.\n\texpectedGVK *schema.GroupVersionKind\n\t// The destination to sync up with the watch source\n\tstore Store"
  },
  {
    "id" : "69269619-90f4-4d05-93c5-f63e6b557b98",
    "prId" : 82388,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82388#pullrequestreview-284511767",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b3c6e7e-55fa-40b6-95a6-44145c1a4ee5",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "would format the block above the same way:\r\n```\r\nif r.expectedType != nil {\r\n   ...\r\n}",
        "createdAt" : "2019-09-05T19:55:36Z",
        "updatedAt" : "2019-09-24T14:47:17Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "4edee1c0-1caf-43c7-b56f-614d90172b07",
        "parentId" : "7b3c6e7e-55fa-40b6-95a6-44145c1a4ee5",
        "authorId" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "body" : "Done",
        "createdAt" : "2019-09-05T20:10:54Z",
        "updatedAt" : "2019-09-24T14:47:17Z",
        "lastEditedBy" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a836d1710b5a1c1330ff58dad369d6afd2a1185",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +370,374 @@\t\t\t\t}\n\t\t\t}\n\t\t\tif r.expectedGVK != nil {\n\t\t\t\tif e, a := *r.expectedGVK, event.Object.GetObjectKind().GroupVersionKind(); e != a {\n\t\t\t\t\tutilruntime.HandleError(fmt.Errorf(\"%s: expected gvk %v, but watch event object had gvk %v\", r.name, e, a))"
  },
  {
    "id" : "ad15b643-9729-462e-bf8d-61c8cb9c5852",
    "prId" : 82388,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82388#pullrequestreview-284511490",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d24e7f31-e6e1-43af-872f-f19558f2b5dc",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "expectedNativeType",
        "createdAt" : "2019-09-05T19:56:02Z",
        "updatedAt" : "2019-09-24T14:47:17Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "dce57ac1-7a0d-4ead-bde5-bb38fc43c855",
        "parentId" : "d24e7f31-e6e1-43af-872f-f19558f2b5dc",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "And move the name on-top of this, so that the native and the unstructured fields are next to each other.",
        "createdAt" : "2019-09-05T19:56:24Z",
        "updatedAt" : "2019-09-24T14:47:17Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "5461b7a6-aab4-4274-9df4-c2819b368bba",
        "parentId" : "d24e7f31-e6e1-43af-872f-f19558f2b5dc",
        "authorId" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "body" : "Done",
        "createdAt" : "2019-09-05T20:10:23Z",
        "updatedAt" : "2019-09-24T14:47:17Z",
        "lastEditedBy" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a836d1710b5a1c1330ff58dad369d6afd2a1185",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +57,61 @@\texpectedTypeName string\n\t// The type of object we expect to place in the store.\n\texpectedType reflect.Type\n\t// The GVK of the object we expect to place in the store if unstructured.\n\texpectedGVK *schema.GroupVersionKind"
  },
  {
    "id" : "8d43205f-4224-4669-97d9-af77b7e9b169",
    "prId" : 82388,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82388#pullrequestreview-292148051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a10b71f-0354-45fc-bfec-5262c899defb",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "still assign r.expectedType here?",
        "createdAt" : "2019-09-24T01:28:05Z",
        "updatedAt" : "2019-09-24T14:47:17Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "cd4da50b-b3a4-4161-9c8e-d8a06028f43e",
        "parentId" : "4a10b71f-0354-45fc-bfec-5262c899defb",
        "authorId" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "body" : "Given that `reflect.TypeOf(nil) == nil`,  what would be the value of doing so?",
        "createdAt" : "2019-09-24T01:39:54Z",
        "updatedAt" : "2019-09-24T14:47:17Z",
        "lastEditedBy" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "tags" : [
        ]
      },
      {
        "id" : "5debabf7-1f09-49e4-be85-941122d56cfc",
        "parentId" : "4a10b71f-0354-45fc-bfec-5262c899defb",
        "authorId" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "body" : "Don't get me wrong, I'm happy to make the change.  I'd just like to understand the rational.",
        "createdAt" : "2019-09-24T01:40:28Z",
        "updatedAt" : "2019-09-24T14:47:17Z",
        "lastEditedBy" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "tags" : [
        ]
      },
      {
        "id" : "3a098953-f3d8-4ba5-baed-19d58f176bce",
        "parentId" : "4a10b71f-0354-45fc-bfec-5262c899defb",
        "authorId" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "body" : "Done",
        "createdAt" : "2019-09-24T01:43:29Z",
        "updatedAt" : "2019-09-24T14:47:17Z",
        "lastEditedBy" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "tags" : [
        ]
      },
      {
        "id" : "fe2af927-e1c0-4399-bab2-c3b0275ba8e1",
        "parentId" : "4a10b71f-0354-45fc-bfec-5262c899defb",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> Don't get me wrong, I'm happy to make the change. I'd just like to understand the rational.\r\n\r\nIf setExpectedType was previously called, returning early here could leave r.expectedType set to the previous non-nil value",
        "createdAt" : "2019-09-24T02:20:17Z",
        "updatedAt" : "2019-09-24T14:47:17Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "772c7e25-6469-4882-8b36-6aa430c3bba7",
        "parentId" : "4a10b71f-0354-45fc-bfec-5262c899defb",
        "authorId" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "body" : "Ok, thank you.",
        "createdAt" : "2019-09-24T02:37:36Z",
        "updatedAt" : "2019-09-24T14:47:17Z",
        "lastEditedBy" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a836d1710b5a1c1330ff58dad369d6afd2a1185",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +123,127 @@\tr.expectedType = reflect.TypeOf(expectedType)\n\tif r.expectedType == nil {\n\t\tr.expectedTypeName = defaultExpectedTypeName\n\t\treturn\n\t}"
  },
  {
    "id" : "b668fa45-77ca-412d-b9ab-4ddcfe272e12",
    "prId" : 82388,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82388#pullrequestreview-292763346",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fc73cff-2df3-48de-a3e9-1b3f828b8917",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Nice",
        "createdAt" : "2019-09-24T23:38:48Z",
        "updatedAt" : "2019-09-24T23:38:48Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a836d1710b5a1c1330ff58dad369d6afd2a1185",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +371,375 @@\t\t\t}\n\t\t\tif r.expectedGVK != nil {\n\t\t\t\tif e, a := *r.expectedGVK, event.Object.GetObjectKind().GroupVersionKind(); e != a {\n\t\t\t\t\tutilruntime.HandleError(fmt.Errorf(\"%s: expected gvk %v, but watch event object had gvk %v\", r.name, e, a))\n\t\t\t\t\tcontinue"
  },
  {
    "id" : "b33a1934-c142-4064-a5c8-8c394ec7dadc",
    "prId" : 75389,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75389#pullrequestreview-219325396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ace2fac-3e8f-4750-971a-905099aa6516",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "What I'm a bit afraid of now, is that now we don't have any fallback if this paginated list won't work.\r\nMaybe it's fine given the early phase of release cycle, but this is pretty crucial part (if this won't initialize, watch pretty much won't work at all) so I think we need to be careful.",
        "createdAt" : "2019-03-22T14:14:34Z",
        "updatedAt" : "2019-04-02T20:06:31Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "b19a4e0f-e065-4e8c-8d94-203866a114bd",
        "parentId" : "1ace2fac-3e8f-4750-971a-905099aa6516",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Ah, I should have pointed this out more explicitly: `pager.List` automatically falls back to full list (see pager.List impl), which is what we do today. So the behavior will be that first we attempt a paginated request and if that fails we fall back to full list. If both fail the cacher retries using the same flow it has today.",
        "createdAt" : "2019-03-22T20:53:13Z",
        "updatedAt" : "2019-04-02T20:06:31Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "ccfd88f7-11e8-4280-97a1-5182d83fc01d",
        "parentId" : "1ace2fac-3e8f-4750-971a-905099aa6516",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I looked into code and it fallbacks only if it fails due to \"expiration\" error.\r\nI think I can live with that, but at least let's add a comment about the semantics both here and an the watchcache code.",
        "createdAt" : "2019-03-25T14:08:35Z",
        "updatedAt" : "2019-04-02T20:06:31Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "ae42f5e2-49a3-4af7-8d4d-d30807b3e0aa",
        "parentId" : "1ace2fac-3e8f-4750-971a-905099aa6516",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Sounds good, adding.",
        "createdAt" : "2019-03-26T17:03:35Z",
        "updatedAt" : "2019-04-02T20:06:31Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "c06142ac-4608-41eb-b581-cd2d9db976ba",
        "parentId" : "1ace2fac-3e8f-4750-971a-905099aa6516",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Comments added. Thanks!\r\n\r\nAs you might already know, in addition to the fallback, there is a `wait.Until` `cacher.startCaching` that will loop that retries the list operation, so if the failure is transient, the cacher will attempt to recover.",
        "createdAt" : "2019-03-26T17:24:57Z",
        "updatedAt" : "2019-04-02T20:06:31Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "d1ca77e1-8ce7-400a-98b0-0ac0a2f0fd72",
        "parentId" : "1ace2fac-3e8f-4750-971a-905099aa6516",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "> As you might already know, in addition to the fallback, there is a wait.Until cacher.startCaching that will loop that retries the list operation, so if the failure is transient, the cacher will attempt to recover.\r\n\r\nYeah - I know. But if regular list would work and paginated one no, we would never recover.",
        "createdAt" : "2019-03-26T18:20:11Z",
        "updatedAt" : "2019-04-02T20:06:31Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "e2935672-473f-4182-a43d-f4a8450eb499",
        "parentId" : "1ace2fac-3e8f-4750-971a-905099aa6516",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I am not aware of any case that could cause that that isn't \"etcd has a horrible bug\".  I'm not saying that should be a blocker, but we'd break in other places too, like all informers.",
        "createdAt" : "2019-03-27T03:55:17Z",
        "updatedAt" : "2019-04-02T20:06:31Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "84651a14-767e-4d4e-a710-377c782bbaa7",
        "parentId" : "1ace2fac-3e8f-4750-971a-905099aa6516",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "So to be clear - I'm also not expecting any issues with this - it just the \"being on the safe size\" thing.",
        "createdAt" : "2019-03-27T08:41:50Z",
        "updatedAt" : "2019-04-02T20:06:31Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5a4f09ab3ac15815ceb039fbc7f546266855fd6",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +194,198 @@\t\t\t}\n\t\t\t// Pager falls back to full list if paginated list calls fail due to an \"Expired\" error.\n\t\t\tlist, err = pager.List(context.Background(), options)\n\t\t\tclose(listCh)\n\t\t}()"
  },
  {
    "id" : "426ae85b-150c-4e61-acc6-c3761200fa40",
    "prId" : 73137,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73137#pullrequestreview-194620952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47942b50-0c92-4ccc-b5df-168ff2a80c3e",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "why 1? why buffer at all?",
        "createdAt" : "2019-01-21T14:18:55Z",
        "updatedAt" : "2019-01-21T14:18:56Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "bd477dc1-0f49-44eb-a416-738f4d67d261",
        "parentId" : "47942b50-0c92-4ccc-b5df-168ff2a80c3e",
        "authorId" : "443f9b92-20b0-45c2-a13f-20c6f64f89eb",
        "body" : "if you get stopped the goroutine would hang blocking on the channel write",
        "createdAt" : "2019-01-21T14:19:55Z",
        "updatedAt" : "2019-01-21T14:19:56Z",
        "lastEditedBy" : "443f9b92-20b0-45c2-a13f-20c6f64f89eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "10f52e7c70d9ad4a3cf0ca09c6f36e208b9ac494",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +179,183 @@\tvar list runtime.Object\n\tvar err error\n\tlistCh := make(chan struct{}, 1)\n\tpanicCh := make(chan interface{}, 1)\n\tgo func() {"
  },
  {
    "id" : "e0ad7da4-6d80-4546-bbb8-afaaec321381",
    "prId" : 73137,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73137#pullrequestreview-194622108",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31477ce7-3bbf-4c1a-a311-244ee4559d47",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "make it a `chan err` and get rid of the shared variable.",
        "createdAt" : "2019-01-21T14:19:29Z",
        "updatedAt" : "2019-01-21T14:20:25Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "df85bd91-3414-46e3-a295-2959d1120943",
        "parentId" : "31477ce7-3bbf-4c1a-a311-244ee4559d47",
        "authorId" : "443f9b92-20b0-45c2-a13f-20c6f64f89eb",
        "body" : "it returns runtime.object as well making you wrap stuff in structs for the tuple which didn't seem to worth it",
        "createdAt" : "2019-01-21T14:22:24Z",
        "updatedAt" : "2019-01-21T14:22:25Z",
        "lastEditedBy" : "443f9b92-20b0-45c2-a13f-20c6f64f89eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "10f52e7c70d9ad4a3cf0ca09c6f36e208b9ac494",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +179,183 @@\tvar list runtime.Object\n\tvar err error\n\tlistCh := make(chan struct{}, 1)\n\tpanicCh := make(chan interface{}, 1)\n\tgo func() {"
  },
  {
    "id" : "89c5e475-6cac-4c32-a86a-a1e6a22fa472",
    "prId" : 73137,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73137#pullrequestreview-194621869",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f08a70cb-198f-4175-b68e-4553e449339d",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "note: this way you lose the backtrace of the actual issue.",
        "createdAt" : "2019-01-21T14:19:54Z",
        "updatedAt" : "2019-01-21T14:19:54Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "f3c9c020-d688-4476-8c3b-45668f2d916d",
        "parentId" : "f08a70cb-198f-4175-b68e-4553e449339d",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "it's not easy to change that though. In the apiserver handler code we append errors with the backtrace string. Not nice either. Maybe just leave it here as it is.",
        "createdAt" : "2019-01-21T14:21:53Z",
        "updatedAt" : "2019-01-21T14:21:53Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "10f52e7c70d9ad4a3cf0ca09c6f36e208b9ac494",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +194,198 @@\t\treturn nil\n\tcase r := <-panicCh:\n\t\tpanic(r)\n\tcase <-listCh:\n\t}"
  },
  {
    "id" : "1982e143-8026-4eb9-8b67-66fbd565678f",
    "prId" : 49919,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49919#pullrequestreview-53572198",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06cbe2ad-b7c0-4d0f-8ac8-8bbb5d3baea7",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "thanks",
        "createdAt" : "2017-08-01T15:31:51Z",
        "updatedAt" : "2017-08-01T15:31:51Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "2e9ee0e9-6ce5-48ba-a507-e2adcad1df81",
        "parentId" : "06cbe2ad-b7c0-4d0f-8ac8-8bbb5d3baea7",
        "authorId" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "body" : "~~so, I'm kind of uncomfortable depending on time here.  While incredibly unlikely now, it's theoretically feasible to have this called at the same timestamp.~~\r\n\r\nMissed the atomic increment below ;-)",
        "createdAt" : "2017-08-01T17:19:17Z",
        "updatedAt" : "2017-08-01T17:39:41Z",
        "lastEditedBy" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "tags" : [
        ]
      }
    ],
    "commit" : "1da4f4a745bf536c34e377321a252b4774d1a7e0",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +102,106 @@// reflectorDisambiguator is used to disambiguate started reflectors.\n// initialized to an unstable value to ensure meaning isn't attributed to the suffix.\nvar reflectorDisambiguator = int64(time.Now().UnixNano() % 12345)\n\n// NewNamedReflector same as NewReflector, but with a specified name for logging"
  },
  {
    "id" : "61f7fe26-bccd-47d3-985e-3168ef9ca4c7",
    "prId" : 48224,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48224#pullrequestreview-47498672",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fc6d117-ab48-474a-8343-12bd683f3750",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Same metric twice?",
        "createdAt" : "2017-06-29T21:44:34Z",
        "updatedAt" : "2017-07-25T13:01:40Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "e1d4f2af-9e3d-4e79-abde-b2568d68eced",
        "parentId" : "0fc6d117-ab48-474a-8343-12bd683f3750",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Same metric twice?\r\n\r\njust to be extra sure.",
        "createdAt" : "2017-06-30T11:53:09Z",
        "updatedAt" : "2017-07-25T13:01:40Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "0b391c76-6bbd-4f1e-9bd8-b3952b49e042",
        "parentId" : "0fc6d117-ab48-474a-8343-12bd683f3750",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Why do you say it's the same metric twice? I don't see other reference to numberOfItemsInWatch.",
        "createdAt" : "2017-06-30T22:01:14Z",
        "updatedAt" : "2017-07-25T13:01:40Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "151d39682e62b288c247d8174a5f7fb139ee7bd1",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +350,354 @@\t// update metrics\n\tdefer func() {\n\t\tr.metrics.numberOfItemsInWatch.Observe(float64(eventCount))\n\t\tr.metrics.watchDuration.Observe(time.Since(start).Seconds())\n\t}()"
  },
  {
    "id" : "c16bffc4-086f-43fc-9967-c27568b0eada",
    "prId" : 46094,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46094#pullrequestreview-39174129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9eb72664-d88b-470d-8163-01fd6753de78",
        "parentId" : null,
        "authorId" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "body" : "`Run` blocks now instead of starting a goroutine. That makes the decision whether to run it concurrently or not up to the caller which is more flexible and we use this flexibility in other places to wrap this method invocation with additional logic.",
        "createdAt" : "2017-05-19T11:46:57Z",
        "updatedAt" : "2017-07-18T04:07:42Z",
        "lastEditedBy" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "tags" : [
        ]
      }
    ],
    "commit" : "6464774a9b94f6e8376e11d015fd55e98457e74c",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +186,190 @@func (r *Reflector) Run(stopCh <-chan struct{}) {\n\tglog.V(3).Infof(\"Starting reflector %v (%s) from %s\", r.expectedType, r.resyncPeriod, r.name)\n\twait.Until(func() {\n\t\tif err := r.ListAndWatch(stopCh); err != nil {\n\t\t\tutilruntime.HandleError(err)"
  }
]