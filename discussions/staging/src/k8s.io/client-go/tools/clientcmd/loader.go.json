[
  {
    "id" : "bf10dd40-c563-4d40-a6f6-ef216c08b472",
    "prId" : 93293,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93293#pullrequestreview-452602908",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0dc6bdcb-714a-454a-82b9-efdcf4ff6639",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "this change looks correct to me because if a file is explicitly indicated, the precedence means nothing",
        "createdAt" : "2020-07-21T15:57:21Z",
        "updatedAt" : "2020-10-29T15:47:53Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c8e4c83fbe66548aeb446562c29c42efe1d4386",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +305,309 @@// GetLoadingPrecedence implements ConfigAccess\nfunc (rules *ClientConfigLoadingRules) GetLoadingPrecedence() []string {\n\tif len(rules.ExplicitPath) > 0 {\n\t\treturn []string{rules.ExplicitPath}\n\t}"
  },
  {
    "id" : "182ffb81-efbb-495d-a4b2-61f3e06b8a20",
    "prId" : 93293,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93293#pullrequestreview-523731973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "275e7c3f-7239-418c-9c43-eb084875f799",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "seems like when you set this field, perhaps you should reset rules.Precendence?  At least from genericclioptions?",
        "createdAt" : "2020-07-21T15:59:28Z",
        "updatedAt" : "2020-10-29T15:47:53Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "126ca27c-c032-48d8-8c84-5b69c8ce5258",
        "parentId" : "275e7c3f-7239-418c-9c43-eb084875f799",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "I tried, but it looks like this is breaking all of our test-cmd, so I don't think it's the right fix. With proper LoadingPrecedence we should be good, though. ",
        "createdAt" : "2020-07-23T12:57:48Z",
        "updatedAt" : "2020-10-29T15:47:53Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "88296d20-cd41-496a-99e4-4187a9e288f4",
        "parentId" : "275e7c3f-7239-418c-9c43-eb084875f799",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "it is also special cased above in `Load` so I guess I can live with it.  It doesn't seem awesome though.",
        "createdAt" : "2020-11-04T20:06:53Z",
        "updatedAt" : "2020-11-04T20:06:53Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "6b8838b1-8554-4326-9d3c-9a1b107df112",
        "parentId" : "275e7c3f-7239-418c-9c43-eb084875f799",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "I'm planning to squashing all `GetLoadingPrecedence` methods into single execution path, to avoid duplicated code and problems like the one this PR is fixing. But I wanted to make sure that approach isn't breaking anything. ",
        "createdAt" : "2020-11-04T21:01:37Z",
        "updatedAt" : "2020-11-04T21:01:37Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c8e4c83fbe66548aeb446562c29c42efe1d4386",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +306,310 @@func (rules *ClientConfigLoadingRules) GetLoadingPrecedence() []string {\n\tif len(rules.ExplicitPath) > 0 {\n\t\treturn []string{rules.ExplicitPath}\n\t}\n"
  },
  {
    "id" : "56566275-5211-47d2-902c-d65724b52d95",
    "prId" : 92138,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92138#pullrequestreview-537380465",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60d31cbf-967a-4404-985a-797d0574690d",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "why these permissions?",
        "createdAt" : "2020-11-24T09:37:38Z",
        "updatedAt" : "2020-11-24T11:03:59Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "30610d0e-1c6e-4d5e-9270-5cc36c8b63cd",
        "parentId" : "60d31cbf-967a-4404-985a-797d0574690d",
        "authorId" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "body" : "This is what `os.Create()` uses under the hood https://github.com/golang/go/blob/go1.15.5/src/os/file.go#L316",
        "createdAt" : "2020-11-24T09:46:16Z",
        "updatedAt" : "2020-11-24T11:03:59Z",
        "lastEditedBy" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "tags" : [
        ]
      },
      {
        "id" : "6a38230f-1df4-43cf-a238-05fc928b2424",
        "parentId" : "60d31cbf-967a-4404-985a-797d0574690d",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "> it is created with mode 0666 (**before umask**)\r\n\r\nCan you add a comment that this is umask'ed? I know our security ppl. finding this and complain.",
        "createdAt" : "2020-11-24T09:50:24Z",
        "updatedAt" : "2020-11-24T11:03:59Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "d6cfa4fb-d39e-48b1-8dba-1fb605075be2",
        "parentId" : "60d31cbf-967a-4404-985a-797d0574690d",
        "authorId" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "body" : "Done + rebased.",
        "createdAt" : "2020-11-24T11:04:20Z",
        "updatedAt" : "2020-11-24T11:04:21Z",
        "lastEditedBy" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9b928f1f13821b65ea4ef783f847993c51fb4dd",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +287,291 @@\t\t}\n\t\t// destination is created with mode 0666 before umask\n\t\terr = ioutil.WriteFile(destination, data, 0666)\n\t\tif err != nil {\n\t\t\treturn err"
  },
  {
    "id" : "79145d92-861c-470b-b672-1f6b2c21501a",
    "prId" : 65779,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65779#pullrequestreview-143755493",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f663cc4d-052f-4a9f-aeac-26d162d508a0",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> since values are overwritten, but maps values are not\r\n\r\n~~is this still true with the new version?~~\r\n\r\nedit: again, tests cover this",
        "createdAt" : "2018-08-06T20:50:41Z",
        "updatedAt" : "2018-08-12T05:16:51Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9cf2b0f798f1fac07f52b5d193419e938e3a7cd",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +223,227 @@\t}\n\n\t// since values are overwritten, but maps values are not, we can merge the non-map config on top of the map config and\n\t// get the values we expect.\n\tconfig := clientcmdapi.NewConfig()"
  },
  {
    "id" : "2d4ae914-d5f7-4da8-b0b3-02624dba44b5",
    "prId" : 65779,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65779#pullrequestreview-143755594",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd72b3ad-4f3b-4260-8651-e505ef8b442a",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> merge all of the struct values in the reverse order so that priority is given correctly\r\n\r\n~~is this still true with the new version?~~\r\n\r\nedit: looks like we have tests covering this, so this is fine",
        "createdAt" : "2018-08-06T20:51:00Z",
        "updatedAt" : "2018-08-12T05:16:51Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9cf2b0f798f1fac07f52b5d193419e938e3a7cd",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +215,219 @@\t}\n\n\t// merge all of the struct values in the reverse order so that priority is given correctly\n\t// errors are not added to the list the second time\n\tnonMapConfig := clientcmdapi.NewConfig()"
  },
  {
    "id" : "666d837b-8d2f-46ae-a8d8-599f6ac48c70",
    "prId" : 59495,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59495#pullrequestreview-99947223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f66de9b-55fb-4e6f-b757-e5db1c398216",
        "parentId" : null,
        "authorId" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "body" : "Relative logic added",
        "createdAt" : "2018-02-28T05:22:12Z",
        "updatedAt" : "2018-02-28T05:22:13Z",
        "lastEditedBy" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "tags" : [
        ]
      },
      {
        "id" : "0e1316f5-9db9-45f5-a95e-29cb8f3482a6",
        "parentId" : "5f66de9b-55fb-4e6f-b757-e5db1c398216",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "SGTM... make sure this nuance makes it into the docs (\"`./foo` is relative to the kubeconfig file, `foo` looks in the $PATH\")",
        "createdAt" : "2018-02-28T05:27:50Z",
        "updatedAt" : "2018-02-28T05:27:50Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "01801ae13a86c10cd343c329f5224ab47272f826",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +560,564 @@\ts := []*string{&authInfo.ClientCertificate, &authInfo.ClientKey, &authInfo.TokenFile}\n\t// Only resolve exec command if it isn't PATH based.\n\tif authInfo.Exec != nil && strings.ContainsRune(authInfo.Exec.Command, filepath.Separator) {\n\t\ts = append(s, &authInfo.Exec.Command)\n\t}"
  }
]