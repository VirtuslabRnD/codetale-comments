[
  {
    "id" : "73eb1281-8e52-4768-b572-28b1306b8943",
    "prId" : 91798,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91798#pullrequestreview-425287330",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2299271-f010-40d6-849a-d930baec69e5",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "This dependency is unfortunate, but I still think it's better to have that hidden in the library instead of requiring every single user to think about this fallback.\r\n[The fact that we already depend on record/util below makes it even less of an issue imho.]\r\n\r\nSo I think it's fine, but just cc-ing @yastij and @liggitt - in case the will disagree.",
        "createdAt" : "2020-06-05T06:31:58Z",
        "updatedAt" : "2020-06-17T19:46:38Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "1418ad6d-63da-4af7-8e56-700dee594a4e",
        "parentId" : "a2299271-f010-40d6-849a-d930baec69e5",
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "I'm fine with this dependency too, the benefit outweigh the cost",
        "createdAt" : "2020-06-05T10:48:29Z",
        "updatedAt" : "2020-06-17T19:46:38Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      },
      {
        "id" : "31ea140e-573a-40b4-99d7-f0829a15086b",
        "parentId" : "a2299271-f010-40d6-849a-d930baec69e5",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "dependencies are at the module level, so depending on `k8s.io/client-go` is the boundary I'm most concerned about",
        "createdAt" : "2020-06-05T13:15:02Z",
        "updatedAt" : "2020-06-17T19:46:38Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0e12f25c9ccd33f5578fddef79d93eb7b62ea0c",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +39,43 @@\ttypedv1core \"k8s.io/client-go/kubernetes/typed/core/v1\"\n\ttypedv1beta1 \"k8s.io/client-go/kubernetes/typed/events/v1beta1\"\n\t\"k8s.io/client-go/tools/record\"\n\t\"k8s.io/client-go/tools/record/util\"\n\t\"k8s.io/klog/v2\""
  },
  {
    "id" : "2f8fc01f-4bc6-4a58-9ea6-03fb8b4272f0",
    "prId" : 81780,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81780#pullrequestreview-278375021",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02459684-c87c-482a-87e8-dc9a10afeaa1",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Please add a unit test for it.",
        "createdAt" : "2019-08-22T11:11:23Z",
        "updatedAt" : "2019-08-22T12:10:47Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "18f276f7-7071-4efb-af92-a59ff9004ad1",
        "parentId" : "02459684-c87c-482a-87e8-dc9a10afeaa1",
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "Added a test that simulates an apiserver error",
        "createdAt" : "2019-08-22T12:13:52Z",
        "updatedAt" : "2019-08-22T12:13:53Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "000c2c557f862270ec83341c1af3fcd7c6f7d4a2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +112,116 @@\t\tif event.Series != nil {\n\t\t\tif recordedEvent, retry := recordEvent(e.sink, event); !retry {\n\t\t\t\tif recordedEvent != nil {\n\t\t\t\t\te.eventCache[isomorphicKey] = recordedEvent\n\t\t\t\t}"
  },
  {
    "id" : "e19b54fb-6a2e-480a-a03a-fbad5d76f6da",
    "prId" : 81305,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81305#pullrequestreview-273983857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b407eab-a7d0-4cab-8f31-265a5e76288e",
        "parentId" : null,
        "authorId" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "body" : "what about the following?\r\n\r\nvar patch []byte\r\npatch, err = createPatchBytesForSeries(event)",
        "createdAt" : "2019-08-12T22:22:32Z",
        "updatedAt" : "2019-08-12T22:22:32Z",
        "lastEditedBy" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "tags" : [
        ]
      },
      {
        "id" : "ff2514b1-eab8-4c69-a8b3-043548a26992",
        "parentId" : "5b407eab-a7d0-4cab-8f31-265a5e76288e",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "The above seems to be equivalent to what I have.\r\nUsing secondary error variable is commonly used practice in such scenario.",
        "createdAt" : "2019-08-12T22:30:19Z",
        "updatedAt" : "2019-08-12T22:30:19Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "31f374f42a2c816c8fb928c5db46474f5fc24b31",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +204,208 @@\tisEventSeries := event.Series != nil\n\tif isEventSeries {\n\t\tpatch, patchBytesErr := createPatchBytesForSeries(event)\n\t\tif patchBytesErr != nil {\n\t\t\tklog.Errorf(\"Unable to calculate diff, no merge is possible: %v\", patchBytesErr)"
  },
  {
    "id" : "02cee07a-e08b-4e97-b2f0-2f97f398a41f",
    "prId" : 81305,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81305#pullrequestreview-274179891",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf736c23-9b6f-4e38-b3af-5a6c0f9cdc55",
        "parentId" : null,
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "I don't see why the existing code would prevent checking the patch/create err ? (it is checked [here](https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/client-go/tools/events/event_broadcaster.go#L219))\r\nbut not opposed to this change",
        "createdAt" : "2019-08-13T08:54:39Z",
        "updatedAt" : "2019-08-13T08:55:17Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      },
      {
        "id" : "d1587b41-75c8-4209-b414-7297a4a141d8",
        "parentId" : "cf736c23-9b6f-4e38-b3af-5a6c0f9cdc55",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "@yastij\r\nThe bug was due to the assignment to err declared on line 206 which would go out of scope coming out of the if block.\r\nThe check you cited wouldn't be applied on the desired err variable.",
        "createdAt" : "2019-08-13T09:50:27Z",
        "updatedAt" : "2019-08-13T09:50:27Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "ae094eb8-89d5-4483-835d-4fd94c014a95",
        "parentId" : "cf736c23-9b6f-4e38-b3af-5a6c0f9cdc55",
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "sgtm",
        "createdAt" : "2019-08-13T10:02:26Z",
        "updatedAt" : "2019-08-13T10:02:27Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "31f374f42a2c816c8fb928c5db46474f5fc24b31",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +204,208 @@\tisEventSeries := event.Series != nil\n\tif isEventSeries {\n\t\tpatch, patchBytesErr := createPatchBytesForSeries(event)\n\t\tif patchBytesErr != nil {\n\t\t\tklog.Errorf(\"Unable to calculate diff, no merge is possible: %v\", patchBytesErr)"
  },
  {
    "id" : "dcbe0fb5-056f-469f-9b92-d37bed0b5491",
    "prId" : 78037,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78037#pullrequestreview-243216872",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1412b7f-87af-409d-a230-cf3917013087",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I realized now that I don't really understand why we need to recordEvent here - nothing should change since the previous one, right?",
        "createdAt" : "2019-05-19T05:46:41Z",
        "updatedAt" : "2019-05-29T20:12:17Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "f12a724c-e202-43d0-8f71-f90aaf9f85de",
        "parentId" : "e1412b7f-87af-409d-a230-cf3917013087",
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "This avoids users to wait (at worst) 30min to see the final event count, I think we should keep it",
        "createdAt" : "2019-05-29T11:32:23Z",
        "updatedAt" : "2019-05-29T20:12:17Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      },
      {
        "id" : "9a63ae60-c6ca-40bf-96e7-258e699e8521",
        "parentId" : "e1412b7f-87af-409d-a230-cf3917013087",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Hmm - I think I don't fully understand it.\r\n1. Yes - i agree that we may update the count or sth here.\r\n2. But if we wouldn't do that here, it would never happen, right? i.e. - I don't understand the 30m part of your comment.\r\n\r\n[But no matter what, please add a comment in the code why we're doing this]",
        "createdAt" : "2019-05-29T12:08:55Z",
        "updatedAt" : "2019-05-29T20:12:17Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "f3e57931-bc9f-454d-9b65-065b5eef2daa",
        "parentId" : "e1412b7f-87af-409d-a230-cf3917013087",
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "There are 2 things at play\r\n\r\n1 - refreshing TTL on events which happens every 30min\r\n2 - Finishing series to write the final count that happens each 6min\r\n\r\nif we drop 2 we'd only have a refresh each 30min which causes too much delay. I'll add a comment to explain this.",
        "createdAt" : "2019-05-29T12:15:09Z",
        "updatedAt" : "2019-05-29T20:12:17Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6663e8d4fceb6f7de7267149341d51966276df8",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +105,109 @@\t\teventSerie := event.Series\n\t\tif eventSerie != nil {\n\t\t\tif eventSerie.LastObservedTime.Time.Before(time.Now().Add(-finishTime)) {\n\t\t\t\tif _, retry := recordEvent(e.sink, event); !retry {\n\t\t\t\t\tdelete(e.eventCache, isomorphicKey)"
  },
  {
    "id" : "290042d8-5428-429f-8d0d-94ddd904228b",
    "prId" : 78037,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78037#pullrequestreview-243674709",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b6ba013-b193-450b-b64d-9b0496d66001",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "eventSerie -> eventSeries",
        "createdAt" : "2019-05-30T08:09:18Z",
        "updatedAt" : "2019-05-30T08:09:18Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6663e8d4fceb6f7de7267149341d51966276df8",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +103,107 @@\tdefer e.mu.Unlock()\n\tfor isomorphicKey, event := range e.eventCache {\n\t\teventSerie := event.Series\n\t\tif eventSerie != nil {\n\t\t\tif eventSerie.LastObservedTime.Time.Before(time.Now().Add(-finishTime)) {"
  },
  {
    "id" : "b2ee99d0-7727-476a-aa5d-a467d4756e1d",
    "prId" : 65782,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65782#pullrequestreview-228512000",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4325b3f-2211-48ef-ac8d-2b9a17e337c5",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I'm not really following the logic for this - there is significant different between e.g. add and delete of this watch event.\r\nI think the interface for this eventHandler is a bad one - it should probably take watch.Event as a parameter.\r\nAlternatively we may consider reusing the interface of ResourceHandlers from informer frameworks.\r\n\r\nWhat is the usecase for it?",
        "createdAt" : "2019-04-18T11:15:51Z",
        "updatedAt" : "2019-05-17T08:51:15Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "380c11f2-fb01-4e2a-a678-18fee700b769",
        "parentId" : "b4325b3f-2211-48ef-ac8d-2b9a17e337c5",
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "> I'm not really following the logic for this - there is significant different between e.g. add and delete of this watch event.\r\n\r\nCurrently the eventrecorder only sends watch-events with add type.\r\n\r\n> I think the interface for this eventHandler is a bad one - it should probably take watch.Event as a parameter.\r\n\r\nI agree on this, we shouldn't loose the event\r\n\r\n> Alternatively we may consider reusing the interface of ResourceHandlers from informer frameworks.\r\n> \r\n> What is the usecase for it?\r\n\r\nmake event broadcaster able to watch Events created from the recorder, a couple of things that could be achieved with apimachinery watch:\r\n\r\n- This would make us at some point able to shard to process generated events.\r\n\r\n- I've seen clusters with dedicated event clusters + a very long TTL that want to clean up some events (e.g. events generated by some components). so we want to distinguish between creation and deletion at some point.\r\n\r\n",
        "createdAt" : "2019-04-18T21:20:55Z",
        "updatedAt" : "2019-05-17T08:51:15Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "464a994a10b71c45583f3426fd970291f8a5b756",
    "line" : 258,
    "diffHunk" : "@@ -1,1 +256,260 @@\t\t\t\treturn\n\t\t\t}\n\t\t\teventHandler(watchEvent.Object)\n\t\t}\n\t}()"
  },
  {
    "id" : "4c11cd17-0d9e-4da5-beac-7cfcd1dbe788",
    "prId" : 65782,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65782#pullrequestreview-231015091",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "522ea646-c8e6-4154-b140-a79e3d61c9ac",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "This probably also should be a pointer - we don't want to copy the whole stuff for performance reasons.",
        "createdAt" : "2019-04-19T10:58:45Z",
        "updatedAt" : "2019-05-17T08:51:15Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "7a43d720-f53b-4327-953c-6466f1a0e4d4",
        "parentId" : "522ea646-c8e6-4154-b140-a79e3d61c9ac",
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "@wojtek-t - this would lead to a pointer comparison at the map level (which isn't something we want to do), actually related has the same issue. we might want to trade this with hash of the eventKey struct.",
        "createdAt" : "2019-04-25T21:09:04Z",
        "updatedAt" : "2019-05-17T08:51:15Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      },
      {
        "id" : "1f2ec935-6ad8-4289-b0aa-4bdda4164cea",
        "parentId" : "522ea646-c8e6-4154-b140-a79e3d61c9ac",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "OK - I see your point.\r\ni think that given it's an implementation detail and we may change that later, I would suggest:\r\n- use full objects for now\r\n- add a comment why we're using full objects (and that we're aware of performance impact of it)\r\n- add a TODO to validate its impact and consider using hashing.",
        "createdAt" : "2019-04-26T07:25:06Z",
        "updatedAt" : "2019-05-17T08:51:15Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "7a4f5e2e-b7fd-48b6-9678-d7107e16b6df",
        "parentId" : "522ea646-c8e6-4154-b140-a79e3d61c9ac",
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "Sgtm",
        "createdAt" : "2019-04-26T07:35:38Z",
        "updatedAt" : "2019-05-17T08:51:15Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "464a994a10b71c45583f3426fd970291f8a5b756",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +54,58 @@\treportingController string\n\treportingInstance   string\n\tregarding           corev1.ObjectReference\n\trelated             corev1.ObjectReference\n}"
  },
  {
    "id" : "0241108f-24cf-4ae6-958f-52a3320fd516",
    "prId" : 65782,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65782#pullrequestreview-236841243",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c582c1c8-9b4a-41cc-8d99-6374c3847594",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Can you please move the TODO about validating impact of copying whole ObjectReference here?",
        "createdAt" : "2019-05-06T08:07:02Z",
        "updatedAt" : "2019-05-17T08:51:15Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "3a67815d-6fa7-4563-9b8e-99855ab27c90",
        "parentId" : "c582c1c8-9b4a-41cc-8d99-6374c3847594",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "not solved",
        "createdAt" : "2019-05-13T18:22:20Z",
        "updatedAt" : "2019-05-17T08:51:15Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "464a994a10b71c45583f3426fd970291f8a5b756",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +49,53 @@\n// TODO: validate impact of copying and investigate hashing\ntype eventKey struct {\n\taction              string\n\treason              string"
  },
  {
    "id" : "b5d8f3a0-3a3c-4006-be43-ab9b442aa99e",
    "prId" : 65782,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65782#pullrequestreview-233865134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d845a228-49ef-44c6-97f5-3c7bc1be3c74",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "nit: can you move mu above eventCache (so that's it's above fields that it's protecting)?",
        "createdAt" : "2019-05-06T08:08:01Z",
        "updatedAt" : "2019-05-17T08:51:15Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "464a994a10b71c45583f3426fd970291f8a5b756",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +60,64 @@type eventBroadcasterImpl struct {\n\t*watch.Broadcaster\n\tmu            sync.RWMutex\n\teventCache    map[eventKey]*v1beta1.Event\n\tsleepDuration time.Duration"
  },
  {
    "id" : "08bfaf15-2d04-4b2b-81af-b6d852b7efc9",
    "prId" : 65782,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65782#pullrequestreview-239030070",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d2576bf-bb1d-4e77-b4f6-c5fcec39b351",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "eventCache is modified in the loop.\r\nI wonder if read lock is sufficient.\r\nSee code on line 151 below.",
        "createdAt" : "2019-05-17T16:13:33Z",
        "updatedAt" : "2019-05-17T16:24:55Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "50bcce08-cdb3-42ce-b0d1-510a372d5901",
        "parentId" : "3d2576bf-bb1d-4e77-b4f6-c5fcec39b351",
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "ack",
        "createdAt" : "2019-05-17T16:52:30Z",
        "updatedAt" : "2019-05-17T16:52:30Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "464a994a10b71c45583f3426fd970291f8a5b756",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +89,93 @@\t\tif event.Series != nil {\n\t\t\tif recordedEvent, retry := recordEvent(e.sink, event); !retry {\n\t\t\t\te.eventCache[isomorphicKey] = recordedEvent\n\t\t\t}\n\t\t}"
  },
  {
    "id" : "3da3b4ec-faba-4d13-83be-f56d26a71035",
    "prId" : 65782,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65782#pullrequestreview-239022528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e056f3eb-4ffd-4c3f-a293-b3371a83e7a0",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "eventSerie -> eventSeries",
        "createdAt" : "2019-05-17T16:14:16Z",
        "updatedAt" : "2019-05-17T16:24:55Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "bee0a04a-2da4-4666-8b4f-3e934e6b960d",
        "parentId" : "e056f3eb-4ffd-4c3f-a293-b3371a83e7a0",
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "ask",
        "createdAt" : "2019-05-17T16:34:26Z",
        "updatedAt" : "2019-05-17T16:34:26Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "464a994a10b71c45583f3426fd970291f8a5b756",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +101,105 @@\tdefer e.mu.Unlock()\n\tfor isomorphicKey, event := range e.eventCache {\n\t\teventSerie := event.Series\n\t\tif eventSerie != nil {\n\t\t\tif eventSerie.LastObservedTime.Time.Add(finishTime).Before(time.Now()) {"
  },
  {
    "id" : "a4aab6ae-90cd-4488-a47a-969e1c90e08a",
    "prId" : 65782,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65782#pullrequestreview-239022507",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66a7c8cd-0ba4-453c-8b97-e3e7cb0b9d1a",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "isEventSerie -> isEventSeries",
        "createdAt" : "2019-05-17T16:19:42Z",
        "updatedAt" : "2019-05-17T16:24:55Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "36255295-f837-4a96-ab27-7e4807b6aa24",
        "parentId" : "66a7c8cd-0ba4-453c-8b97-e3e7cb0b9d1a",
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "ack",
        "createdAt" : "2019-05-17T16:34:22Z",
        "updatedAt" : "2019-05-17T16:34:22Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "464a994a10b71c45583f3426fd970291f8a5b756",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +175,179 @@\tvar newEvent *v1beta1.Event\n\tvar err error\n\tisEventSerie := event.Series != nil\n\tif isEventSerie {\n\t\tpatch, err := createPatchBytesForSeries(event)"
  }
]