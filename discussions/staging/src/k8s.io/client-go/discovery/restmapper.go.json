[
  {
    "id" : "6e34ab76-62fc-4a3a-bc65-45a0cc8512a5",
    "prId" : 62234,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62234#pullrequestreview-110300771",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e79a962-5d66-44c8-b8f2-04a90e36c998",
        "parentId" : null,
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "When `err` is not nil,  we should let `apiGroups` always be nil. Right?\r\n\r\nAnd the code here just shows `apiGroup==nil` when `err != nil`.\r\n https://github.com/kubernetes/kubernetes/blob/bb3887d7ddc789a8d126e3c5c84a3eaacddd08bf/staging/src/k8s.io/client-go/discovery/discovery_client.go#L129-L157\r\n\r\n",
        "createdAt" : "2018-04-08T07:33:46Z",
        "updatedAt" : "2018-04-08T07:33:49Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      },
      {
        "id" : "8ceeef82-f1d7-46c8-b4c7-cc1f6482e353",
        "parentId" : "9e79a962-5d66-44c8-b8f2-04a90e36c998",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "that is only one possible implementation of DiscoveryInterface. GetAPIGroupResources should not make assumptions about the implementation, and already assumes results can be partial.",
        "createdAt" : "2018-04-08T21:30:09Z",
        "updatedAt" : "2018-04-08T21:30:10Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e203c4e42b9037a6800dbc0dc433c63fc8cf7516",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +145,149 @@\tapiGroups, err := cl.ServerGroups()\n\tif err != nil {\n\t\tif apiGroups == nil || len(apiGroups.Groups) == 0 {\n\t\t\treturn nil, err\n\t\t}"
  },
  {
    "id" : "610a9bab-29b2-4d90-b038-03fa5cb2a2c3",
    "prId" : 59353,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59353#pullrequestreview-95904640",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ae08eba-c92b-4269-b06a-e791c220f979",
        "parentId" : null,
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "@deads2k This avoids the aforementioned hack of \"treating the kind as if it were a resource\". versionMapper.AddSpecific maps a plural and singular resource name to a GVK object.\r\n\r\nAll that this is doing is mapping singular/plural resource -> GVK (to the gvk as-is)\r\nas well as mapping singular / plural resource -> GVk (only kind in all lower-case).\r\n\r\nThis supports cases where a user specifies `oc get mykind.Group/myresourcename`\r\nas well as `oc get Mykind.Group/myresourcename `",
        "createdAt" : "2018-02-12T19:04:57Z",
        "updatedAt" : "2018-02-15T15:33:14Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "765f9ec68b0d0759e64d474f9dfb3bf22c24cadf",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +110,114 @@\t\t\t\tsingular := gv.WithResource(resource.SingularName)\n\t\t\t\tversionMapper.AddSpecific(gv.WithKind(resource.Kind), plural, singular, scope)\n\t\t\t\tversionMapper.AddSpecific(gv.WithKind(strings.ToLower(resource.Kind)), plural, singular, scope)\n\t\t\t\t// TODO this is producing unsafe guesses that don't actually work, but it matches previous behavior\n\t\t\t\tversionMapper.Add(gv.WithKind(resource.Kind+\"List\"), scope)"
  },
  {
    "id" : "3a7053f7-a226-440d-8a93-9325ed1e36b2",
    "prId" : 59353,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59353#pullrequestreview-95966209",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed791c77-e6b7-4511-9560-60863b34c8cd",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Ok, we were already doing this (see directly above).  I can live with this.",
        "createdAt" : "2018-02-12T22:30:16Z",
        "updatedAt" : "2018-02-15T15:33:14Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "765f9ec68b0d0759e64d474f9dfb3bf22c24cadf",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +110,114 @@\t\t\t\tsingular := gv.WithResource(resource.SingularName)\n\t\t\t\tversionMapper.AddSpecific(gv.WithKind(resource.Kind), plural, singular, scope)\n\t\t\t\tversionMapper.AddSpecific(gv.WithKind(strings.ToLower(resource.Kind)), plural, singular, scope)\n\t\t\t\t// TODO this is producing unsafe guesses that don't actually work, but it matches previous behavior\n\t\t\t\tversionMapper.Add(gv.WithKind(resource.Kind+\"List\"), scope)"
  },
  {
    "id" : "473f2a76-d526-42e4-bfe1-19e2ee79294c",
    "prId" : 50012,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50012#pullrequestreview-62517718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb98db3d-aa59-49e3-ba67-ffc8ee8de832",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "@liggitt did this.",
        "createdAt" : "2017-09-13T17:36:56Z",
        "updatedAt" : "2017-09-13T17:36:57Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c8a9e406054e4163b8c81176f14478272ebf767",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +110,114 @@\t\t\t\tversionMapper.AddSpecific(gv.WithKind(resource.Kind), plural, singular, scope)\n\t\t\t\t// TODO this is producing unsafe guesses that don't actually work, but it matches previous behavior\n\t\t\t\tversionMapper.Add(gv.WithKind(resource.Kind+\"List\"), scope)\n\t\t\t}\n\t\t\t// TODO why is this type not in discovery (at least for \"v1\")"
  }
]