[
  {
    "id" : "52b68629-a96a-47c2-9c4c-e6d1b3c64772",
    "prId" : 70994,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70994#pullrequestreview-183712599",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "beb432e2-a14c-4559-93af-c098d2733ea5",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "godoc is now wrong. did we sweep callers that were built around the currently documented behavior?",
        "createdAt" : "2018-11-15T17:17:43Z",
        "updatedAt" : "2018-12-18T08:46:26Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "681d9ab9-7708-4a3f-8fc1-922a94828997",
        "parentId" : "beb432e2-a14c-4559-93af-c098d2733ea5",
        "authorId" : "5af3a49e-2ce9-4046-8a13-ee66b8cbca2e",
        "body" : "I looked for NewMemCacheClient calls in the kubernetes/kubernetes repo and all calls are using this as CachedDiscoveryInterface interface which defines Invalidate() as:\r\n```\r\n\t// Invalidate enforces that no cached data is used in the future that is older than the current time.\r\n\tInvalidate()\r\n```\r\n\r\nso we should be good. Godoc needs update.",
        "createdAt" : "2018-11-20T14:15:17Z",
        "updatedAt" : "2018-12-18T08:46:26Z",
        "lastEditedBy" : "5af3a49e-2ce9-4046-8a13-ee66b8cbca2e",
        "tags" : [
        ]
      },
      {
        "id" : "8388f95c-934b-4f3e-90d7-9726850318b3",
        "parentId" : "beb432e2-a14c-4559-93af-c098d2733ea5",
        "authorId" : "5af3a49e-2ce9-4046-8a13-ee66b8cbca2e",
        "body" : "In fact there is no way to create memCacheClient outside of the package in a different way than using NewMemCacheClient, which returns discovery.CachedDiscoveryInterface.\r\n\r\nSo the users of this memCacheClient are using discovery.CachedDiscoveryInterface which promises only that no cached data would be used in future, so there should be no caller assuming anything that underlying implementation would block until refresh is done (what memCacheClient promises).",
        "createdAt" : "2018-11-26T15:24:42Z",
        "updatedAt" : "2018-12-18T08:46:26Z",
        "lastEditedBy" : "5af3a49e-2ce9-4046-8a13-ee66b8cbca2e",
        "tags" : [
        ]
      },
      {
        "id" : "541ed5d9-5ee5-4773-b68d-63b8ac4c99fc",
        "parentId" : "beb432e2-a14c-4559-93af-c098d2733ea5",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@mborsz, can you add a release note warning about this behavior change, as there might be users outside of kubernetes/kubernetes.\r\n\r\nI agree this change doesn't break kuberentes/kubernetes. I followed all the use cases of NewMemCacheClient. Most cases the memCacheClient is used to create DeferredDiscoveryRestmapper, which is compatible with this new Invlidate() semantics. In other cases, the Invalidate() method isn't called.",
        "createdAt" : "2018-12-06T22:57:33Z",
        "updatedAt" : "2018-12-18T08:46:26Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "49a560e3-929b-4a6b-8488-5eefdf9713c1",
        "parentId" : "beb432e2-a14c-4559-93af-c098d2733ea5",
        "authorId" : "5af3a49e-2ce9-4046-8a13-ee66b8cbca2e",
        "body" : "I think that even outside of kubernetes/kubernetes we should be good: NewMemCacheClient returns type discovery.CachedDiscoveryInterface (not memCacheClient), so any correct code using CachedDiscoveryInterface shouldn't assume any specific implementation of that interface and CachedDiscoveryInterface promises that we invalidate data only (without any promise about when the refresh happens).\r\n\r\nI agree that adding this to release note is a good idea.",
        "createdAt" : "2018-12-11T13:44:42Z",
        "updatedAt" : "2018-12-18T08:46:26Z",
        "lastEditedBy" : "5af3a49e-2ce9-4046-8a13-ee66b8cbca2e",
        "tags" : [
        ]
      },
      {
        "id" : "54412764-9bc4-400c-94a8-8112e08ec1ed",
        "parentId" : "beb432e2-a14c-4559-93af-c098d2733ea5",
        "authorId" : "5af3a49e-2ce9-4046-8a13-ee66b8cbca2e",
        "body" : "Done.",
        "createdAt" : "2018-12-11T14:46:21Z",
        "updatedAt" : "2018-12-18T08:46:26Z",
        "lastEditedBy" : "5af3a49e-2ce9-4046-8a13-ee66b8cbca2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "c94bee0b8b88851e5f5fd6538b99adff8b3a13f0",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +165,169 @@// Invalidate enforces that no cached data that is older than the current time\n// is used.\nfunc (d *memCacheClient) Invalidate() {\n\td.lock.Lock()\n\tdefer d.lock.Unlock()"
  },
  {
    "id" : "9241ada7-e76f-44eb-8bf2-1fde50095b10",
    "prId" : 70994,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70994#pullrequestreview-183712599",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a7b690c-d421-485c-96fa-e8c69eb355f9",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "To be defensive, can we reset the caches here as well?",
        "createdAt" : "2018-12-06T23:23:43Z",
        "updatedAt" : "2018-12-18T08:46:26Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "d645bb27-c226-4d7d-9a70-a4923ab36dbe",
        "parentId" : "8a7b690c-d421-485c-96fa-e8c69eb355f9",
        "authorId" : "5af3a49e-2ce9-4046-8a13-ee66b8cbca2e",
        "body" : "Done.",
        "createdAt" : "2018-12-11T14:46:30Z",
        "updatedAt" : "2018-12-18T08:46:26Z",
        "lastEditedBy" : "5af3a49e-2ce9-4046-8a13-ee66b8cbca2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "c94bee0b8b88851e5f5fd6538b99adff8b3a13f0",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +168,172 @@\td.lock.Lock()\n\tdefer d.lock.Unlock()\n\td.cacheValid = false\n\td.groupToServerResources = nil\n\td.groupList = nil"
  },
  {
    "id" : "40c74a1d-a930-4e65-b145-9130c567db16",
    "prId" : 70994,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70994#pullrequestreview-185482331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef8a5b06-7e35-4cdf-985a-3fa294506889",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Can you update the comment in `Fresh()`, because now cacheValid won't always stay True?\r\n\r\nAlso, can you update the TODO at line 43?  It's wrong now as it says \"Right now it will poll anytime Invalidate() is called.\"",
        "createdAt" : "2018-12-15T01:39:42Z",
        "updatedAt" : "2018-12-18T08:46:26Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "37bef8fa-d75f-4598-a402-7d38191bda63",
        "parentId" : "ef8a5b06-7e35-4cdf-985a-3fa294506889",
        "authorId" : "5af3a49e-2ce9-4046-8a13-ee66b8cbca2e",
        "body" : "Done",
        "createdAt" : "2018-12-17T08:43:26Z",
        "updatedAt" : "2018-12-18T08:46:26Z",
        "lastEditedBy" : "5af3a49e-2ce9-4046-8a13-ee66b8cbca2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "c94bee0b8b88851e5f5fd6538b99adff8b3a13f0",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +168,172 @@\td.lock.Lock()\n\tdefer d.lock.Unlock()\n\td.cacheValid = false\n\td.groupToServerResources = nil\n\td.groupList = nil"
  },
  {
    "id" : "a3b6e1a3-59db-4ace-a740-64d251b4aaab",
    "prId" : 70994,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70994#pullrequestreview-186218223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27446a2a-31cf-4a30-8736-a3843d901d4f",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "If the group version doesn't exist, server will return 404, that's the only permanent error, so the client can retry any error other than 404. WDYT?",
        "createdAt" : "2018-12-17T22:38:56Z",
        "updatedAt" : "2018-12-18T08:46:26Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "66226a94-3795-4550-a79a-5a68dd0c04df",
        "parentId" : "27446a2a-31cf-4a30-8736-a3843d901d4f",
        "authorId" : "5af3a49e-2ce9-4046-8a13-ee66b8cbca2e",
        "body" : "I think it's better for this list to be incomplete rather than with too many elements: I trying to avoid a case when bug or misconfiguration creates retries calls at some high rate generating significant load on apiserver.\r\n\r\nRe retrying any error != 404 -- I don't think this is a good idea to do that --  errors like 401 (unauthorized), 403, 422 (invalid request) shouldn't be retried in most of the cases.\r\n\r\nAlso I'm afraid that there can be some other errors: e.g. IIUC right now empty response can mean cache miss:\r\nhttps://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/client-go/discovery/discovery_client.go#L182\r\n\r\nThis response is changed in d.serverResourcesForGroupVersion to fmt.Errorf response. We definitely don't want to retry that.\r\n\r\n",
        "createdAt" : "2018-12-18T08:58:02Z",
        "updatedAt" : "2018-12-18T08:58:02Z",
        "lastEditedBy" : "5af3a49e-2ce9-4046-8a13-ee66b8cbca2e",
        "tags" : [
        ]
      },
      {
        "id" : "822221ed-fcfc-4a87-8bf7-108f2aa0cfb0",
        "parentId" : "27446a2a-31cf-4a30-8736-a3843d901d4f",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "> I think it's better for this list to be incomplete rather than with too many elements\r\n\r\nI agree with this.\r\n\r\nThough I don't think we will get other errors in reality. Because a `groupVersion` needs to get into the cache in the first place to be retried, that means the apiserver has listed the `groupVersion` in its discovery doc.\r\n\r\nThe line you pasted is for compatibility with v1.0 k8s servers, hopefully there are not many of them in production.\r\n\r\nAnyway, I agree that being defensive is right.",
        "createdAt" : "2018-12-18T18:34:05Z",
        "updatedAt" : "2018-12-18T18:34:05Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "c94bee0b8b88851e5f5fd6538b99adff8b3a13f0",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +90,94 @@\n\treturn errorsutil.IsTooManyRequests(err)\n}\n\n// ServerResourcesForGroupVersion returns the supported resources for a group and version."
  }
]