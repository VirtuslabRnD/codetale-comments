[
  {
    "id" : "916cc6d1-3351-433d-a64f-544231715847",
    "prId" : 73345,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73345#pullrequestreview-202585376",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f99400f6-797a-47a3-90de-74cb033177a2",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "not new, but this interface should document the possibility of partial results, and what error will be used to communicate that",
        "createdAt" : "2019-02-05T14:08:43Z",
        "updatedAt" : "2019-02-12T13:29:05Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "d6f49f88-dd95-472d-a4f6-d37975baa30f",
        "parentId" : "f99400f6-797a-47a3-90de-74cb033177a2",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "done",
        "createdAt" : "2019-02-12T10:20:53Z",
        "updatedAt" : "2019-02-12T13:29:05Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cdddd8d4ec0c16df9b3667a11dfc07fa7bf49e2",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +95,99 @@\t// Deprecated: use ServerGroupsAndResources instead.\n\tServerResources() ([]*metav1.APIResourceList, error)\n\t// ServerResources returns the supported groups and resources for all groups and versions.\n\t//\n\t// The returned group and resource lists might be non-nil with partial results even in the"
  },
  {
    "id" : "25fa9201-6b81-4ad3-8081-eeecc097dc22",
    "prId" : 59342,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59342#pullrequestreview-94024207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75edd579-7129-4640-a231-7ad1e8cd54c0",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "am a bit surprised that this is client side. Have you check what comes from the actual discovery endpoint? Is the order correct there?",
        "createdAt" : "2018-02-05T15:07:57Z",
        "updatedAt" : "2018-02-05T15:07:57Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "c2cfd64b-726e-48b5-9918-5a0a742c3bf5",
        "parentId" : "75edd579-7129-4640-a231-7ad1e8cd54c0",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "there are two discovery endpoints, `/api` and `/apis`. this stitches them together",
        "createdAt" : "2018-02-05T15:16:40Z",
        "updatedAt" : "2018-02-05T15:16:40Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "45950fdb750d7ac12cec3b9ef3487baa99a40401",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +148,152 @@\t// prepend the group retrieved from /api to the list if not empty\n\tif len(v.Versions) != 0 {\n\t\tapiGroupList.Groups = append([]metav1.APIGroup{apiGroup}, apiGroupList.Groups...)\n\t}\n\treturn apiGroupList, nil"
  },
  {
    "id" : "39b7505a-4e23-44da-8e17-6278cb5a4035",
    "prId" : 59293,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59293#pullrequestreview-94823292",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d6de489-6a0f-445e-af0f-e41d067ac38f",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Cannot change this until 1.11 to maintain one version skew compatibility in kubectl",
        "createdAt" : "2018-02-06T04:30:53Z",
        "updatedAt" : "2018-02-22T23:06:40Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "4e683b60-88fb-405d-9098-bd9fc02ee2e6",
        "parentId" : "7d6de489-6a0f-445e-af0f-e41d067ac38f",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "we can do that or we can try new endpoint first and then fallback on the old one. Pro: we have new endpoints in one version and if there is any problem, we would figure it out before completely remove the old endpoint. Con: new clients will have a little more latency to talk to old clusters.",
        "createdAt" : "2018-02-06T11:31:04Z",
        "updatedAt" : "2018-02-22T23:06:40Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      },
      {
        "id" : "558e64d0-73db-4a0f-ada0-1b7f2994a1a5",
        "parentId" : "7d6de489-6a0f-445e-af0f-e41d067ac38f",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "I was working on the fallback logic after I sent out the PR. Thanks for pointing that out :) Updated. ",
        "createdAt" : "2018-02-07T18:43:31Z",
        "updatedAt" : "2018-02-22T23:06:40Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      }
    ],
    "commit" : "17917940b5dfc516834980f0493cc241bcac4ab2",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +334,338 @@// OpenAPISchema fetches the open api schema using a rest client and parses the proto.\nfunc (d *DiscoveryClient) OpenAPISchema() (*openapi_v2.Document, error) {\n\tdata, err := d.restClient.Get().AbsPath(\"/openapi/v2\").SetHeader(\"Accept\", mimePb).Do().Raw()\n\tif err != nil {\n\t\tif errors.IsForbidden(err) || errors.IsNotFound(err) {"
  },
  {
    "id" : "5abc86ac-1711-4ccd-b108-04fa5f49eccb",
    "prId" : 59293,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59293#pullrequestreview-99040676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6aea248-a668-421c-8dee-288d64f964de",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "looks like the apiserver in 1.9 (and in master) returns the same answer from `/openapi/v2` as it does from `/`\r\n\r\nthat means a superuser (or request against the unsecured port) won't get an HTTP error, it'll get a json doc that isn't the openapi document. this code needs to detect that and we should fix that bug in the apiserver so that an unhandled path returns a 404, and doesn't fall back to `/`",
        "createdAt" : "2018-02-23T18:58:26Z",
        "updatedAt" : "2018-02-23T18:58:39Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6f379a87-ba0a-4bda-bbb5-ba49d1bc6dcd",
        "parentId" : "c6aea248-a668-421c-8dee-288d64f964de",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "@liggitt the apiserver seems to return a 404 with the `/` json doc as body, which follows HTTPbis spec\r\nhttps://github.com/kubernetes/kubernetes/blob/1d6e114ce7a090d80b87b6eb0ca88d4eca98de7f/staging/src/k8s.io/apiserver/pkg/server/config.go#L517-L520\r\n\r\n< HTTP/1.1 404 Not Found\r\n< Content-Length: 524\r\n< Content-Type: application/json\r\n< Date: Fri, 23 Feb 2018 20:04:32 GMT\r\n< \r\n{\r\n  \"paths\": [\r\n    \"/apis\",\r\n    \"/apis/\",\r\n    \"/apis/apiextensions.k8s.io\",\r\n    \"/apis/apiextensions.k8s.io/v1beta1\",\r\n    \"/healthz\",\r\n    \"/healthz/etcd\",\r\n    \"/healthz/ping\",\r\n    \"/healthz/poststarthook/generic-apiserver-start-informers\",\r\n    \"/healthz/poststarthook/start-apiextensions-controllers\",\r\n    \"/healthz/poststarthook/start-apiextensions-informers\",\r\n    \"/metrics\",\r\n    \"/swagger-2.0.0.json\",\r\n    \"/swagger-2.0.0.pb-v1\",\r\n    \"/swagger-2.0.0.pb-v1.gz\",\r\n    \"/swagger.json\",\r\n    \"/swaggerapi\",\r\n    \"/version\"\r\n  ]",
        "createdAt" : "2018-02-23T20:15:10Z",
        "updatedAt" : "2018-02-23T20:15:10Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      },
      {
        "id" : "897e4339-6e6e-4099-ab80-ec21f533f628",
        "parentId" : "c6aea248-a668-421c-8dee-288d64f964de",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Ah, didn't notice the http status was 404. That's good ",
        "createdAt" : "2018-02-23T20:21:45Z",
        "updatedAt" : "2018-02-23T20:21:46Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "17917940b5dfc516834980f0493cc241bcac4ab2",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +336,340 @@\tdata, err := d.restClient.Get().AbsPath(\"/openapi/v2\").SetHeader(\"Accept\", mimePb).Do().Raw()\n\tif err != nil {\n\t\tif errors.IsForbidden(err) || errors.IsNotFound(err) {\n\t\t\t// single endpoint not found/registered in old server, try to fetch old endpoint\n\t\t\t// TODO(roycaihw): remove this in 1.11"
  },
  {
    "id" : "5e715c0a-9690-446a-b464-4dc911a182b3",
    "prId" : 46803,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46803#pullrequestreview-47434946",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8159c760-0039-4fc3-b799-96b834e4b280",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Ok, this now looks good apiserver-wise, but client-side it seems like this will break when run against old servers.  Don't you need a fallback to the old swagger.json?",
        "createdAt" : "2017-06-28T12:57:14Z",
        "updatedAt" : "2017-06-28T12:57:14Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "82a1eaa1-33a0-4f43-9b55-8244fd17c1e3",
        "parentId" : "8159c760-0039-4fc3-b799-96b834e4b280",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "It shouldn't. 1.7 server already supports that end-point, and this code is meant for 1.8 client.",
        "createdAt" : "2017-06-28T16:27:44Z",
        "updatedAt" : "2017-06-28T16:27:59Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "ea6528dd-cd8d-4f4d-9fc8-28c8c490c0a3",
        "parentId" : "8159c760-0039-4fc3-b799-96b834e4b280",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> It shouldn't. 1.7 server already supports that end-point, and this code is meant for 1.8 client.\r\n\r\nI rather not have this be the thing that breaks generic commands (like create) from working.  If it returns an error, will kubectl still work?  If not, at least guarding it sufficiently to keep that working seems reasonable even if client side validation doesn't work.",
        "createdAt" : "2017-06-28T17:04:18Z",
        "updatedAt" : "2017-06-28T17:04:18Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "575454ea-28ed-4d4f-8be0-15e5ed24c6e3",
        "parentId" : "8159c760-0039-4fc3-b799-96b834e4b280",
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "If --validate=false, we shouldn't block on getting the openapi.  If --validate=true, we should fail if we can't get the openapi to validate.",
        "createdAt" : "2017-06-28T20:28:28Z",
        "updatedAt" : "2017-06-28T20:28:28Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      },
      {
        "id" : "064733de-2f11-4a95-879c-94480216d74e",
        "parentId" : "8159c760-0039-4fc3-b799-96b834e4b280",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "IOW, This is fine for now as this code is not even used for validation. The only way to actually exercise this code today is to use `--experimental-use-openapi-print-columns`.",
        "createdAt" : "2017-06-28T20:36:43Z",
        "updatedAt" : "2017-06-28T20:36:43Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "c0aaa632-c30b-41bc-bc29-80465e325f5d",
        "parentId" : "8159c760-0039-4fc3-b799-96b834e4b280",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "The plan is to change validation to use this code, but even then, one will be able to go back to the old swagger validation with a flag.",
        "createdAt" : "2017-06-28T20:40:52Z",
        "updatedAt" : "2017-06-28T20:40:52Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "756c1846-d6e6-4565-9256-5dffad11b3a6",
        "parentId" : "8159c760-0039-4fc3-b799-96b834e4b280",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> The plan is to change validation to use this code, but even then, one will be able to go back to the old swagger validation with a flag\r\n\r\nIt still seems capricious and unnecessary to break.  We are just talking about keeping the old code in the `if err != nil` block, right?\r\n\r\n\r\n\r\n> If --validate=true, we should fail if we can't get the openapi to validate.\r\n\r\nThe only reason you \"can't\" is for want of a few lines right here.  ",
        "createdAt" : "2017-06-29T12:30:19Z",
        "updatedAt" : "2017-06-29T12:30:19Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "57ccf93d-f192-4cef-a3c3-7eadacbda6ec",
        "parentId" : "8159c760-0039-4fc3-b799-96b834e4b280",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "> It still seems capricious and unnecessary to break. We are just talking about keeping the old code in the if err != nil block, right?\r\n\r\nI would definitely not argue if that was it :-). \r\n\r\nWe used to parse the json file into a `spec.Schema`, while the protobuf is parsed into a `openapi_v2.Document`. While there is code to go from `spec.Schema` to `openapi_v2.Document` (that code is used by the API-server to serve both json and protobuf), there is no code to go the other way around. That's why this PR is also updating every `spec.Schema` types to `openapi_v2.Document`.\r\n\r\nI could still download the json file and convert it to protobuf and be happy, but to be honest, the json is 1.7mb (17x bigger than the gzipped protobuf), and the previous versions of the server don't support http caching, so it would have to be downloaded every-time, making it pretty much unusable anyway. \r\n\r\nIn other words, I don't think kubectl of any version should ever use openapi with a pre-1.7 server version.",
        "createdAt" : "2017-06-29T15:31:12Z",
        "updatedAt" : "2017-06-29T15:31:13Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "1f2bdba2-d5b1-455f-be8d-e5beea11156f",
        "parentId" : "8159c760-0039-4fc3-b799-96b834e4b280",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> In other words, I don't think kubectl of any version should ever use openapi with a pre-1.7 server version.\r\n\r\nGiven code to go from spec.Schema -> openapi_v2.Document, it seems like you could hit the old endpoint, read into spec.Schema (slow as it is), then convert that to the openapi_v2.Document to return.\r\n\r\nI'm fine telling people they shouldn't use the feature against older servers.  I'm less fine straight up breaking them.  With `--validate=true` being the default, that's what would happen with a 1.8 kubectl and 1.6 server (which a client may not be able to update), right?  Openapi for validation is a goal.",
        "createdAt" : "2017-06-29T15:40:41Z",
        "updatedAt" : "2017-06-29T15:40:41Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "e89e7422-8ba8-40fe-a8e7-5e1c49d3adef",
        "parentId" : "8159c760-0039-4fc3-b799-96b834e4b280",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "We could keep the code as it is, have it fail on validating with the openapi, and then automatically fallback on swagger. That would allow us even longer backward compatibility.",
        "createdAt" : "2017-06-29T17:00:26Z",
        "updatedAt" : "2017-06-29T17:00:26Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "838f9fb5-2359-41b8-aa81-119b1148a176",
        "parentId" : "8159c760-0039-4fc3-b799-96b834e4b280",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> We could keep the code as it is, have it fail on validating with the openapi, and then automatically fallback on swagger. That would allow us even longer backward compatibility.\r\n\r\nSold.  Is it practical do in this pull?",
        "createdAt" : "2017-06-30T11:57:10Z",
        "updatedAt" : "2017-06-30T11:57:10Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "d408c1d7-e47c-4edc-be65-7d05b7c4e498",
        "parentId" : "8159c760-0039-4fc3-b799-96b834e4b280",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "Nothing really uses this code so far, and I'm working on adding new features but it's too substantial to be added to this pr. I'll definitely add you as a reviewer/approver on pull-requests to come.",
        "createdAt" : "2017-06-30T15:55:45Z",
        "updatedAt" : "2017-06-30T15:55:45Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "53be381a-89f9-4d55-a6d3-801e4eca2b70",
        "parentId" : "8159c760-0039-4fc3-b799-96b834e4b280",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Nothing really uses this code so far, and I'm working on adding new features but it's too substantial to be added to this pr. I'll definitely add you as a reviewer/approver on pull-requests to come.\r\n\r\nOk.  Please open an issue for yourself about maintaining compatibility.",
        "createdAt" : "2017-06-30T16:19:29Z",
        "updatedAt" : "2017-06-30T16:19:29Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "224dba9a136e3e4014d88b3c2546418066bac026",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +378,382 @@// OpenAPISchema fetches the open api schema using a rest client and parses the proto.\nfunc (d *DiscoveryClient) OpenAPISchema() (*openapi_v2.Document, error) {\n\tdata, err := d.restClient.Get().AbsPath(\"/swagger-2.0.0.pb-v1\").Do().Raw()\n\tif err != nil {\n\t\treturn nil, err"
  },
  {
    "id" : "b09002fc-db31-4b31-8b83-a0e4f2cdd464",
    "prId" : 44531,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/44531#pullrequestreview-33319850",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "420c39ba-c313-4c7e-8c8a-cf3a53014500",
        "parentId" : null,
        "authorId" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "body" : "Is this because of `RawMessage`, or the OpenAPI loading? Kind of worrisome depending on where we'll use it (e.g. for `get`). I remember a significant performance degradation after we switched `get` to use unstructured objects, mostly because of the json decoding to `map[string]interface{}`.",
        "createdAt" : "2017-04-18T18:49:58Z",
        "updatedAt" : "2017-04-25T17:46:29Z",
        "lastEditedBy" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "tags" : [
        ]
      },
      {
        "id" : "e1828abc-88d3-44b3-b159-0e9bc9f4875e",
        "parentId" : "420c39ba-c313-4c7e-8c8a-cf3a53014500",
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "This is because the OpenAPI spec is a massive json file that takes a long time to deserialize into binary form.  This will be cached between calls as a binary, which loads much faster (~40ms).",
        "createdAt" : "2017-04-18T18:54:19Z",
        "updatedAt" : "2017-04-25T17:46:29Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      }
    ],
    "commit" : "21e239fb82e7e81dfed9bfddc4e95ff8201c52fa",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +377,381 @@\n// OpenAPISchema fetches the open api schema using a rest client and parses the json.\n// Warning: this is very expensive (~1.2s)\nfunc (d *DiscoveryClient) OpenAPISchema() (*spec.Swagger, error) {\n\tdata, err := d.restClient.Get().AbsPath(\"/swagger.json\").Do().Raw()"
  },
  {
    "id" : "89430de8-c85c-47c3-a155-47989f5aeb9d",
    "prId" : 44531,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/44531#pullrequestreview-33923064",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56c76041-3574-41c5-833e-14916da104ac",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "This comment is off-topic. /swagger.json is not shown as an path when i visit the root of the server. It only shows \"/swaggerapi/\" which leads me to swagger-1.2. @mbohlool do you think we should fix that?",
        "createdAt" : "2017-04-21T01:53:00Z",
        "updatedAt" : "2017-04-25T17:46:29Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "21e239fb82e7e81dfed9bfddc4e95ff8201c52fa",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +379,383 @@// Warning: this is very expensive (~1.2s)\nfunc (d *DiscoveryClient) OpenAPISchema() (*spec.Swagger, error) {\n\tdata, err := d.restClient.Get().AbsPath(\"/swagger.json\").Do().Raw()\n\tif err != nil {\n\t\treturn nil, err"
  }
]