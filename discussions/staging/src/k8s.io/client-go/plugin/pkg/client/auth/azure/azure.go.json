[
  {
    "id" : "e4a31722-9355-4823-84bf-c3f6abf42923",
    "prId" : 86481,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86481#pullrequestreview-368794384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99922975-7b0a-4ae2-9324-2445f726d5a5",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "What happens if err is not nil AND token is not nil? Previously, the non-nil error ruled. With this PR, the token value is later inspected/used if non-nil, even in error cases.",
        "createdAt" : "2020-03-04T13:55:05Z",
        "updatedAt" : "2020-03-22T09:07:26Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "26c97fa1b40a7939ca26084c819af4794df34406",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +220,224 @@\tif token == nil {\n\t\ttokenFromCfg, err := ts.retrieveTokenFromCfg()\n\n\t\tif err == nil {\n\t\t\ttoken = tokenFromCfg"
  },
  {
    "id" : "d2ec10e9-d3e0-4d5d-9cd8-0cf7241e8c03",
    "prId" : 86481,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86481#pullrequestreview-368794384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9257962b-561b-4a05-b571-71f455545e77",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this assumes a nil token object is returned in error cases... it is more accepted to use a non-nil error to decide whether an error handling path should be taken (alternatively, only assign to `token` in non-error cases)",
        "createdAt" : "2020-03-04T13:58:26Z",
        "updatedAt" : "2020-03-22T09:07:26Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "26c97fa1b40a7939ca26084c819af4794df34406",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +248,252 @@\t}\n\n\tif token == nil {\n\t\ttokenFromSource, err := ts.source.Token()\n\t\tif err != nil {"
  },
  {
    "id" : "3bfdbd5f-8224-47d9-9157-862b315b9bd4",
    "prId" : 86481,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86481#pullrequestreview-375545555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79758e40-1013-4c04-be93-471abcb49400",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "The code currently always writes non-expired tokens back to the cache. Should we return early if we got a good token from the cache? \r\n\r\n```go\r\nif token != nil && !token.token.IsExpired() {\r\n  return token, nil\r\n}\r\n```",
        "createdAt" : "2020-03-16T20:05:04Z",
        "updatedAt" : "2020-03-22T09:07:26Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "26c97fa1b40a7939ca26084c819af4794df34406",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +211,215 @@\n\tvar err error\n\ttoken := ts.cache.getToken(azureTokenKey)\n\n\tif token != nil && !token.token.IsExpired() {"
  },
  {
    "id" : "bba9cf99-d5f7-4765-b347-977384de29e0",
    "prId" : 72143,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72143#pullrequestreview-185974397",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf401f6c-9228-4a50-841b-e2d2197a9912",
        "parentId" : null,
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "is there any compatible issue here if it return error directly?",
        "createdAt" : "2018-12-18T07:13:18Z",
        "updatedAt" : "2018-12-18T07:14:34Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      },
      {
        "id" : "092719ba-5c9b-4acf-80b0-02c7c435aebd",
        "parentId" : "cf401f6c-9228-4a50-841b-e2d2197a9912",
        "authorId" : "dd7ae991-dbbc-4a29-896b-4334bdee748b",
        "body" : "Since this is to refresh token, the environment is read from previously saved value. If we encountered an unknown one, we should return error.",
        "createdAt" : "2018-12-18T09:31:46Z",
        "updatedAt" : "2018-12-18T09:31:46Z",
        "lastEditedBy" : "dd7ae991-dbbc-4a29-896b-4334bdee748b",
        "tags" : [
        ]
      }
    ],
    "commit" : "092f3988255801ce7a97de5448384c50c400a3a4",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +285,289 @@\tenv, err := azure.EnvironmentFromName(token.environment)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n"
  },
  {
    "id" : "1bdf6739-f9fc-4b14-9201-e640f8b7a949",
    "prId" : 43987,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43987#pullrequestreview-35020979",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffe33cef-cea1-40ef-8100-65e0799c0088",
        "parentId" : null,
        "authorId" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "body" : "Why would this be a useful field to store in the config?",
        "createdAt" : "2017-04-26T16:02:19Z",
        "updatedAt" : "2017-05-16T14:44:50Z",
        "lastEditedBy" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "tags" : [
        ]
      },
      {
        "id" : "612963c0-2ef3-4598-8384-641412959fec",
        "parentId" : "ffe33cef-cea1-40ef-8100-65e0799c0088",
        "authorId" : "2892af68-16a3-42b4-b41e-1a351380f2cc",
        "body" : "This is used to restore the azure token from configuration.",
        "createdAt" : "2017-04-27T05:35:32Z",
        "updatedAt" : "2017-05-16T14:44:50Z",
        "lastEditedBy" : "2892af68-16a3-42b4-b41e-1a351380f2cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "682d5ec01f37c65117b2496865cc9bf0cd9e0902",
    "line" : 227,
    "diffHunk" : "@@ -1,1 +225,229 @@\t\treturn nil, fmt.Errorf(\"no apiserver ID in cfg: %s\", apiserverID)\n\t}\n\texpiresIn := ts.cfg[cfgExpiresIn]\n\tif expiresIn == \"\" {\n\t\treturn nil, fmt.Errorf(\"no expiresIn in cfg: %s\", cfgExpiresIn)"
  },
  {
    "id" : "47a0841f-fc5f-4283-b2ed-28ffee0d88c1",
    "prId" : 43987,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43987#pullrequestreview-38458031",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "616ab060-2e7e-4bf9-ab8a-09194e45561d",
        "parentId" : null,
        "authorId" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "body" : "One last nit. Is \"azure\" the correct name for this plugin? Maybe aadv1?",
        "createdAt" : "2017-05-16T16:38:44Z",
        "updatedAt" : "2017-05-16T16:38:45Z",
        "lastEditedBy" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "tags" : [
        ]
      },
      {
        "id" : "fdb118a5-1f9f-410d-b853-0420d7f0d9ef",
        "parentId" : "616ab060-2e7e-4bf9-ab8a-09194e45561d",
        "authorId" : "2892af68-16a3-42b4-b41e-1a351380f2cc",
        "body" : " > I'm a little confused by \"client_secret auth\". Are you referring to a token endpoint  authentication method or a different oauth2 flow? Can you link to azure docs for this?\r\n\r\n@ericchiang Please have a look at page 227 in the develop.pdf document which is attached above. Essentially is an 1-legged flow where a client requests a token for a resource (in this case apiserver) using a secret. This type of token is typically used in service to service authentication.   \r\n\r\n> One last nit. Is \"azure\" the correct name for this plugin? Maybe aadv1?\r\n\r\n`azure` should be fine since the SDK is only using the aadv1 endpoints. It's true that this name will reflect more appropriately which AAD version is used. \r\n\r\n@colemickens What's your opinion regarding the name?",
        "createdAt" : "2017-05-16T17:31:30Z",
        "updatedAt" : "2017-05-16T17:31:30Z",
        "lastEditedBy" : "2892af68-16a3-42b4-b41e-1a351380f2cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "682d5ec01f37c65117b2496865cc9bf0cd9e0902",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +47,51 @@\nfunc init() {\n\tif err := restclient.RegisterAuthProviderPlugin(\"azure\", newAzureAuthProvider); err != nil {\n\t\tglog.Fatalf(\"Failed to register azure auth plugin: %v\", err)\n\t}"
  }
]