[
  {
    "id" : "7465636d-54df-4e35-9f59-14d3801f6a55",
    "prId" : 99012,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99012#pullrequestreview-603221433",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a82429a-3734-4c52-a1cb-aa3ab8a6fc14",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This doesn't seem very extendable, e.g. what will CRD authors do? Will we just worry about that later?",
        "createdAt" : "2021-03-03T00:26:11Z",
        "updatedAt" : "2021-03-04T18:33:21Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "e73511c7-1937-4ae4-8fe5-4e898ce5c7a4",
        "parentId" : "1a82429a-3734-4c52-a1cb-aa3ab8a6fc14",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "I don't have a great answer. Worry about it later is probably what we should. I could mark this as experimental. \r\n\r\nIt is exclusively used to make fuzz testing possible right now.\r\n\r\nIt is generated for each client, so a CRD author that runs the generator will get their own ForKind implementation that would support their CRD types. But that's it. It doesn't have the functionality of the scheme system or anything.",
        "createdAt" : "2021-03-03T03:55:59Z",
        "updatedAt" : "2021-03-04T18:33:21Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "3e30e12f-bb1c-4681-8434-c53c76f6001a",
        "parentId" : "1a82429a-3734-4c52-a1cb-aa3ab8a6fc14",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Sounds good.",
        "createdAt" : "2021-03-03T18:33:24Z",
        "updatedAt" : "2021-03-04T18:33:22Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "86184be5f1fb8fcf0dfc581b1c104dc0804e8083",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +105,109 @@// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no\n// apply configuration type exists for the given GroupVersionKind.\nfunc ForKind(kind schema.GroupVersionKind) interface{} {\n\tswitch kind {\n\t// Group=admissionregistration.k8s.io, Version=v1"
  }
]