[
  {
    "id" : "0b4cd3f5-2a2c-4d7c-a808-ee866e07fca3",
    "prId" : 102928,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102928#pullrequestreview-701109207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3219ffe4-be20-485f-a49e-08027b08336c",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Good idea.",
        "createdAt" : "2021-07-07T14:51:23Z",
        "updatedAt" : "2021-07-07T14:51:23Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "418fa71b6b1d1fba930daaba1f8ecf55070b4bdf",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +48,52 @@\t}\n\n\tobjects, err := convertObjectsToUnstructured(scheme, objects)\n\tif err != nil {\n\t\tpanic(err)"
  },
  {
    "id" : "ffef39d4-6e6e-4926-a268-f213ffb92d60",
    "prId" : 66078,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66078#pullrequestreview-138210867",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ac47aca-77ba-4898-8ab0-e8d21113cae5",
        "parentId" : null,
        "authorId" : "443f9b92-20b0-45c2-a13f-20c6f64f89eb",
        "body" : "@deads2k unfortunatelly this always writes to \r\nhttps://github.com/kubernetes/kubernetes/blob/4d609cea7f1ccd3840b46e3e2ae83cc6452ab4a7/staging/src/k8s.io/apimachinery/pkg/runtime/scheme.go#L206\r\nmaking that a data race (if the scheme is reused between test runs) with informers (calling scheme.New and reading that map)",
        "createdAt" : "2018-07-18T11:27:03Z",
        "updatedAt" : "2018-07-18T11:27:03Z",
        "lastEditedBy" : "443f9b92-20b0-45c2-a13f-20c6f64f89eb",
        "tags" : [
        ]
      },
      {
        "id" : "5dffc5e5-3ee5-41ff-be62-b903bd7de340",
        "parentId" : "5ac47aca-77ba-4898-8ab0-e8d21113cae5",
        "authorId" : "443f9b92-20b0-45c2-a13f-20c6f64f89eb",
        "body" : "for the record:\r\n(note that this is not master, but my branch switching pkg/cmd/kubectl/wait to informers)\r\n```\r\nî‚° go test -race ./pkg/kubectl/cmd/wait \r\n==================\r\nWARNING: DATA RACE\r\nWrite at 0x00c4205641b0 by goroutine 52:\r\n  runtime.mapassign()\r\n      /home/tnozicka/lib/go1.10.3/src/runtime/hashmap.go:505 +0x0\r\n  k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/runtime.(*Scheme).AddKnownTypeWithName()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/runtime/scheme.go:206 +0x2fd\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/dynamic/fake.NewSimpleDynamicClient()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/client-go/dynamic/fake/simple.go:38 +0xdc\r\n  k8s.io/kubernetes/pkg/kubectl/cmd/wait.TestWaitForCondition.func3()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/pkg/kubectl/cmd/wait/wait_test.go:206 +0x9d\r\n  k8s.io/kubernetes/pkg/kubectl/cmd/wait.TestWaitForCondition.func4()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/pkg/kubectl/cmd/wait/wait_test.go:227 +0x85\r\n  testing.tRunner()\r\n      /home/tnozicka/lib/go1.10.3/src/testing/testing.go:777 +0x16d\r\n\r\nPrevious read at 0x00c4205641b0 by goroutine 49:\r\n  runtime.mapaccess2()\r\n      /home/tnozicka/lib/go1.10.3/src/runtime/hashmap.go:395 +0x0\r\n  k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/runtime.(*Scheme).New()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/runtime/scheme.go:289 +0xa0\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/testing.(*tracker).List()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/client-go/testing/fixture.go:201 +0x140\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/testing.ObjectReaction.func1()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/client-go/testing/fixture.go:84 +0x14f1\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/testing.(*SimpleReactor).React()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/client-go/testing/fixture.go:487 +0x64\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/testing.(*Fake).Invokes()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/client-go/testing/fake.go:140 +0x275\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/dynamic/fake.(*dynamicResourceClient).List()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/client-go/dynamic/fake/simple.go:283 +0xc8b\r\n  k8s.io/kubernetes/pkg/kubectl/cmd/wait.InformerWait.func1()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/pkg/kubectl/cmd/wait/wait.go:234 +0x1a1\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/pager.SimplePageFunc.func1()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/client-go/tools/pager/pager.go:38 +0x84\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/pager.(*ListPager).List()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/client-go/tools/pager/pager.go:76 +0x148\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.(*ListWatch).List()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache/listwatch.go:106 +0x239\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.(*Reflector).ListAndWatch()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache/reflector.go:178 +0x2fd\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.(*Reflector).Run.func1()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache/reflector.go:133 +0x4a\r\n  k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait.JitterUntil.func1()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait/wait.go:133 +0x61\r\n  k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait.JitterUntil()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait/wait.go:134 +0xcd\r\n  k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait.Until()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait/wait.go:88 +0x5a\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.(*Reflector).Run()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache/reflector.go:132 +0x256\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.(*Reflector).Run-fm()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache/controller.go:122 +0x4b\r\n  k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait.(*Group).StartWithChannel.func1()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait/wait.go:54 +0x45\r\n  k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait.(*Group).Start.func1()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait/wait.go:71 +0x5c\r\n\r\nGoroutine 52 (running) created at:\r\n  testing.(*T).Run()\r\n      /home/tnozicka/lib/go1.10.3/src/testing/testing.go:824 +0x564\r\n  k8s.io/kubernetes/pkg/kubectl/cmd/wait.TestWaitForCondition()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/pkg/kubectl/cmd/wait/wait_test.go:226 +0x80b\r\n  testing.tRunner()\r\n      /home/tnozicka/lib/go1.10.3/src/testing/testing.go:777 +0x16d\r\n\r\nGoroutine 49 (finished) created at:\r\n  k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait.(*Group).Start()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait/wait.go:69 +0x6f\r\n  k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait.(*Group).StartWithChannel()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait/wait.go:53 +0xc7\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache.(*controller).Run()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/client-go/tools/cache/controller.go:122 +0x38a\r\n  k8s.io/kubernetes/vendor/k8s.io/client-go/tools/watch.NewIndexerInformerWatcher.func4()\r\n      /home/tnozicka/go/src/k8s.io/kubernetes/vendor/k8s.io/client-go/tools/watch/informerwatcher.go:104 +0x5e\r\n```",
        "createdAt" : "2018-07-18T11:29:46Z",
        "updatedAt" : "2018-07-18T11:30:47Z",
        "lastEditedBy" : "443f9b92-20b0-45c2-a13f-20c6f64f89eb",
        "tags" : [
        ]
      },
      {
        "id" : "26017be1-769d-499e-9b71-2a8d57546d3e",
        "parentId" : "5ac47aca-77ba-4898-8ab0-e8d21113cae5",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> making that a data race (if the scheme is reused between test runs) with informers (calling scheme.New and reading that map)\r\n\r\ndon't reuse the scheme.",
        "createdAt" : "2018-07-18T11:29:48Z",
        "updatedAt" : "2018-07-18T11:29:49Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "60afd0ba81aeccb04169716c815348ceb424730d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +36,40 @@\t// In order to use List with this client, you have to have the v1.List registered in your scheme. Neat thing though\n\t// it does NOT have to be the *same* list\n\tscheme.AddKnownTypeWithName(schema.GroupVersionKind{Group: \"fake-dynamic-client-group\", Version: \"v1\", Kind: \"List\"}, &unstructured.UnstructuredList{})\n\n\tcodecs := serializer.NewCodecFactory(scheme)"
  },
  {
    "id" : "40edbfb5-6188-4f6d-af0e-8d2dfdc95bf6",
    "prId" : 63446,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63446#pullrequestreview-118824176",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48ba0e8f-6cb1-409f-a3e5-bd681da0fd61",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "out of curiosity: do we have subresource deletion anywhere?",
        "createdAt" : "2018-05-09T17:05:34Z",
        "updatedAt" : "2018-05-11T17:12:14Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "cace3a34-72df-4ee5-81e4-ce5baa6979bd",
        "parentId" : "48ba0e8f-6cb1-409f-a3e5-bd681da0fd61",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> out of curiosity: do we have subresource deletion anywhere?\r\n\r\nit's logically possible.  nothing immediately comes to mind though.",
        "createdAt" : "2018-05-09T17:08:52Z",
        "updatedAt" : "2018-05-11T17:12:14Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd044d152ee13a6cb812e4c3e7504ee8e24b5b8c",
    "line" : 143,
    "diffHunk" : "@@ -1,1 +193,197 @@}\n\nfunc (c *dynamicResourceClient) Delete(name string, opts *metav1.DeleteOptions, subresources ...string) error {\n\tvar err error\n\tswitch {"
  }
]