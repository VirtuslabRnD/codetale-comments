[
  {
    "id" : "b70cc8d5-4ad2-4e1a-a290-93be34c02819",
    "prId" : 82365,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82365#pullrequestreview-305925509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "798ce25f-f6af-44b4-8022-fb148aacaa6f",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Please move the client-go changes to a separate PR.",
        "createdAt" : "2019-10-16T09:48:16Z",
        "updatedAt" : "2019-10-23T14:58:08Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "d72da950-e5ba-4b44-8b2b-abd5402701ea",
        "parentId" : "798ce25f-f6af-44b4-8022-fb148aacaa6f",
        "authorId" : "26e83e8e-0b56-4418-bc01-d562e5b0ea4b",
        "body" : "Done",
        "createdAt" : "2019-10-23T14:14:58Z",
        "updatedAt" : "2019-10-23T14:58:08Z",
        "lastEditedBy" : "26e83e8e-0b56-4418-bc01-d562e5b0ea4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "39883f08bf02dd703d161400418d47d7b7ee4c32",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +36,40 @@// NewDelayingQueue constructs a new workqueue with delayed queuing ability\nfunc NewDelayingQueue() DelayingInterface {\n\treturn NewDelayingQueueWithCustomClock(clock.RealClock{}, \"\")\n}\n"
  },
  {
    "id" : "2a56f278-4bd2-4556-ab1b-8a405e6e0645",
    "prId" : 45070,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45070#pullrequestreview-37689183",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6716ef1b-562f-48ea-8704-9b251bea6125",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "So you peek at the [0] element here (which I think is the \"earliest\") and then you add the popped [n-1] element which I think is the latest.",
        "createdAt" : "2017-05-11T12:03:01Z",
        "updatedAt" : "2017-05-13T21:21:30Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "27c7a477-ab1c-4eae-bd43-21ab7ab1e02c",
        "parentId" : "6716ef1b-562f-48ea-8704-9b251bea6125",
        "authorId" : "2b00cdc0-b0dd-4b4d-a8f3-7bc4eb1ef5a9",
        "body" : "@deads2k Gotcha, I agree this initially looks confusing but I think it's correct. I'll try to explain it as best I can here, but let me know if you think I can clarify or make the code more clear.\r\n\r\n* The [container/heap docs](https://godoc.org/container/heap) state that \"The minimum element in the tree is the root, at index 0.\"\r\n* But the [container/heap#Interface docs](https://godoc.org/container/heap#Interface) state that the `Pop` method should \"remove and return element Len() - 1.\" and that the `Push` method should \"add x as element Len()\"\r\n\r\nBasically, the 0th element of the heap is the least element (in this case, the element with the timestamp that will occur next in time). Therefore that's the element we want to `Peek`. In the `Pop` case, though, the `container/heap` [will have moved the minimum element to be temporarily at `Len() - 1`](https://golang.org/src/container/heap/heap.go#L61), so we pop off from that end. In the `Push` case, we add the new element to the 'end' of the heap and the element is percolated up to its correct position by `container/heap`.\r\n\r\nI've [created a simple integer-based heap on the playground](https://play.golang.org/p/vK5fmN_vfD) that might demonstrate this more clearly.",
        "createdAt" : "2017-05-11T17:14:39Z",
        "updatedAt" : "2017-05-13T21:21:30Z",
        "lastEditedBy" : "2b00cdc0-b0dd-4b4d-a8f3-7bc4eb1ef5a9",
        "tags" : [
        ]
      },
      {
        "id" : "5cb612af-c12e-4c88-ab0f-92bdb3b89ffe",
        "parentId" : "6716ef1b-562f-48ea-8704-9b251bea6125",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I'd like this comment attached to the peek, push, pop method area.",
        "createdAt" : "2017-05-11T19:50:51Z",
        "updatedAt" : "2017-05-13T21:21:30Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "242cf2b9-88a3-45a6-a01b-a32e811f50b2",
        "parentId" : "6716ef1b-562f-48ea-8704-9b251bea6125",
        "authorId" : "2b00cdc0-b0dd-4b4d-a8f3-7bc4eb1ef5a9",
        "body" : "@deads2k Sounds good. I've added a commit with some documentation. How do you think it reads?",
        "createdAt" : "2017-05-11T20:23:17Z",
        "updatedAt" : "2017-05-13T21:21:30Z",
        "lastEditedBy" : "2b00cdc0-b0dd-4b4d-a8f3-7bc4eb1ef5a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "dad64459a9b8c56d5bca681e37c3d0f44921d472",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +189,193 @@\t\t// Add ready entries\n\t\tfor waitingForQueue.Len() > 0 {\n\t\t\tentry := waitingForQueue.Peek().(*waitFor)\n\t\t\tif entry.readyAt.After(now) {\n\t\t\t\tbreak"
  }
]