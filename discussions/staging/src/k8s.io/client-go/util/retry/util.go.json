[
  {
    "id" : "b1b61ea1-36ed-40b9-9cb5-ed050aa69455",
    "prId" : 80402,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80402#pullrequestreview-264883292",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb776b12-a869-4f74-ab92-f2dddcbea0e2",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "does this change require unit-test modifications?\r\n\r\nyou can run this locally in the kubernetes source dir:\r\n```\r\nGO111MODULE=on go test staging/src/k8s.io/client-go/util/retry/...\r\n```\r\n",
        "createdAt" : "2019-07-21T18:47:42Z",
        "updatedAt" : "2019-07-21T18:48:13Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "1db1ea0c-4c95-4ff8-975d-76e7e148f0c3",
        "parentId" : "bb776b12-a869-4f74-ab92-f2dddcbea0e2",
        "authorId" : "3f5fc7d6-1ccf-4878-b86a-49d18eea982a",
        "body" : "Don't think so. \r\nIt just adds renames `RetryOnConfict` to `OnError` and makes `RetryOnConfict` call `OnError` with hardcoded parameter. ",
        "createdAt" : "2019-07-21T19:06:07Z",
        "updatedAt" : "2019-07-21T19:06:07Z",
        "lastEditedBy" : "3f5fc7d6-1ccf-4878-b86a-49d18eea982a",
        "tags" : [
        ]
      },
      {
        "id" : "dcf20c0e-fdda-4b9c-8854-81e7e721c1a2",
        "parentId" : "bb776b12-a869-4f74-ab92-f2dddcbea0e2",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "/ok-to-test\r\n",
        "createdAt" : "2019-07-21T19:08:59Z",
        "updatedAt" : "2019-07-21T19:08:59Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "320f8f5e-e270-420b-86c2-28e15b69e784",
        "parentId" : "bb776b12-a869-4f74-ab92-f2dddcbea0e2",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "RetryOnError would be more consistent, no?",
        "createdAt" : "2019-07-22T15:07:59Z",
        "updatedAt" : "2019-07-22T15:07:59Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "bd07cb68-d46d-41ab-bc9b-afdda547d783",
        "parentId" : "bb776b12-a869-4f74-ab92-f2dddcbea0e2",
        "authorId" : "3f5fc7d6-1ccf-4878-b86a-49d18eea982a",
        "body" : "Yes, but its against naming convention `retry.OnError` vs `retry.RetryOnError` :man_shrugging: I'm somehow trying to avoid `foo.fooBar` a pattern where package names already tell you what it does. \r\nBut no hard feelings can change if told so. \r\n",
        "createdAt" : "2019-07-22T15:10:44Z",
        "updatedAt" : "2019-07-22T15:10:44Z",
        "lastEditedBy" : "3f5fc7d6-1ccf-4878-b86a-49d18eea982a",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a0856a4d86600f3382dcdad26a0dd06428f951a",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +59,63 @@//\n// TODO: Make Backoff an interface?\nfunc OnError(backoff wait.Backoff, errorFunc func(error) bool, fn func() error) error {\n\tvar lastConflictErr error\n\terr := wait.ExponentialBackoff(backoff, func() (bool, error) {"
  }
]