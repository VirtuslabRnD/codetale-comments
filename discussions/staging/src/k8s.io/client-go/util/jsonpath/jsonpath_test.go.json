[
  {
    "id" : "b14a2dac-ab43-47cb-99d0-672ee94fce50",
    "prId" : 93408,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93408#pullrequestreview-455035183",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f90295f-178a-4335-a697-d8ee81577a7f",
        "parentId" : null,
        "authorId" : "9e6ce3ed-e2f7-40ea-b6d7-b1b04fc48f70",
        "body" : "should we also add a test to `TestFailParser` in `parser_test.go` to check if the expected error is returned?",
        "createdAt" : "2020-07-24T07:14:15Z",
        "updatedAt" : "2020-07-30T16:53:23Z",
        "lastEditedBy" : "9e6ce3ed-e2f7-40ea-b6d7-b1b04fc48f70",
        "tags" : [
        ]
      },
      {
        "id" : "25d47266-a39c-4042-bb13-bfada2fd60fa",
        "parentId" : "0f90295f-178a-4335-a697-d8ee81577a7f",
        "authorId" : "cebc811c-e565-44d5-bbb6-3b767a712327",
        "body" : "Thanks, added.",
        "createdAt" : "2020-07-24T16:45:04Z",
        "updatedAt" : "2020-07-30T16:53:24Z",
        "lastEditedBy" : "cebc811c-e565-44d5-bbb6-3b767a712327",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c702254938c40a48b2e3db78fcc944ca50fdc65",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +265,269 @@\t\t{\"recurfields\", \"{..Price}\", storeData, \"8.95 12.99 8.99 19.95 20.01\", false},\n\t\t{\"recurdotfields\", \"{...Price}\", storeData, \"8.95 12.99 8.99 19.95 20.01\", false},\n\t\t{\"superrecurfields\", \"{............................................................Price}\", storeData, \"\", true},\n\t\t{\"allstructsSlice\", \"{.Bicycle}\", storeData,\n\t\t\t`[{\"Color\":\"red\",\"Price\":19.95,\"IsNew\":true},{\"Color\":\"green\",\"Price\":20.01,\"IsNew\":false}]`, false},"
  },
  {
    "id" : "d590b229-5acb-490a-8ab6-7c0e84e02be4",
    "prId" : 73149,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73149#pullrequestreview-194786844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e9c1441-44eb-4b1d-84d0-f54de4bf6a22",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "test part of the slice?  [0:3], [0:3:3]",
        "createdAt" : "2019-01-21T22:48:27Z",
        "updatedAt" : "2019-01-21T23:08:32Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "7f513204-abe3-4012-bf32-873ef294a5c9",
        "parentId" : "0e9c1441-44eb-4b1d-84d0-f54de4bf6a22",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "added",
        "createdAt" : "2019-01-21T23:08:39Z",
        "updatedAt" : "2019-01-21T23:08:39Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "233d7e4962f61e9e8b4a4695f0cdab688ffc4368",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +642,646 @@\t\t\t},\n\t\t\t{\n\t\t\t\t\"test containers[0:6:6]\",\n\t\t\t\t`{.spec.containers[0:6:6].name}`,\n\t\t\t\tdata,"
  },
  {
    "id" : "98aabddf-5de9-462e-81f9-e07e52086354",
    "prId" : 72952,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72952#pullrequestreview-193867709",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4accb322-14f9-413f-896f-428ce011d91d",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "thanks for these... some additional cases are needed around range behavior (which the current fix changes), and around start > end behavior, which still panics:\r\n\r\n```\r\nfunc TestNegativeIndex(t *testing.T) {\r\n\tvar input = []byte(\r\n\t\t`{\r\n\t\t\t\"apiVersion\": \"v1\",\r\n\t\t\t\"kind\": \"Pod\",\r\n\t\t\t\"spec\": {\r\n\t\t\t\t\"containers\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"image\": \"radial/busyboxplus:curl\",\r\n\t\t\t\t\t\t\"name\": \"fake0\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"image\": \"radial/busyboxplus:curl\",\r\n\t\t\t\t\t\t\"name\": \"fake1\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"image\": \"radial/busyboxplus:curl\",\r\n\t\t\t\t\t\t\"name\": \"fake2\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"image\": \"radial/busyboxplus:curl\",\r\n\t\t\t\t\t\t\"name\": \"fake3\"\r\n\t\t\t\t\t}]}}`)\r\n\r\n\tvar data interface{}\r\n\terr := json.Unmarshal(input, &data)\r\n\tif err != nil {\r\n\t\tt.Fatal(err)\r\n\t}\r\n\r\n\ttestJSONPath(\r\n\t\t[]jsonpathTest{\r\n\t\t\t{\r\n\t\t\t\t\"test containers[0], it equals containers[0]\",\r\n\t\t\t\t`{.spec.containers[0].name}`,\r\n\t\t\t\tdata,\r\n\t\t\t\t\"fake0\",\r\n\t\t\t\tfalse,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"test containers[0:0], it equals the empty set\",\r\n\t\t\t\t`{.spec.containers[0:0].name}`,\r\n\t\t\t\tdata,\r\n\t\t\t\t\"\",\r\n\t\t\t\tfalse,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"test containers[0:-1], it equals containers[0:3]\",\r\n\t\t\t\t`{.spec.containers[0:-1].name}`,\r\n\t\t\t\tdata,\r\n\t\t\t\t\"fake0 fake1 fake2\",\r\n\t\t\t\tfalse,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"test containers[-1:0], expect error\",\r\n\t\t\t\t`{.spec.containers[-1:0].name}`,\r\n\t\t\t\tdata,\r\n\t\t\t\t\"\",\r\n\t\t\t\ttrue,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"test containers[-1], it equals containers[3]\",\r\n\t\t\t\t`{.spec.containers[-1].name}`,\r\n\t\t\t\tdata,\r\n\t\t\t\t\"fake3\",\r\n\t\t\t\tfalse,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"test containers[-1:], it equals containers[3:]\",\r\n\t\t\t\t`{.spec.containers[-1:].name}`,\r\n\t\t\t\tdata,\r\n\t\t\t\t\"fake3\",\r\n\t\t\t\tfalse,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"test containers[-2], it equals containers[2]\",\r\n\t\t\t\t`{.spec.containers[-2].name}`,\r\n\t\t\t\tdata,\r\n\t\t\t\t\"fake2\",\r\n\t\t\t\tfalse,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"test containers[-2:], it equals containers[2:]\",\r\n\t\t\t\t`{.spec.containers[-2:].name}`,\r\n\t\t\t\tdata,\r\n\t\t\t\t\"fake2 fake3\",\r\n\t\t\t\tfalse,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"test containers[-3], it equals containers[1]\",\r\n\t\t\t\t`{.spec.containers[-3].name}`,\r\n\t\t\t\tdata,\r\n\t\t\t\t\"fake1\",\r\n\t\t\t\tfalse,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"test containers[-4], it equals containers[0]\",\r\n\t\t\t\t`{.spec.containers[-4].name}`,\r\n\t\t\t\tdata,\r\n\t\t\t\t\"fake0\",\r\n\t\t\t\tfalse,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"test containers[-4:], it equals containers[0:]\",\r\n\t\t\t\t`{.spec.containers[-4:].name}`,\r\n\t\t\t\tdata,\r\n\t\t\t\t\"fake0 fake1 fake2 fake3\",\r\n\t\t\t\tfalse,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"test containers[-5], expect a error cause it out of bounds\",\r\n\t\t\t\t`{.spec.containers[-5].name}`,\r\n\t\t\t\tdata,\r\n\t\t\t\t\"\",\r\n\t\t\t\ttrue, // expect error\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"test containers[5:5], expect empty set\",\r\n\t\t\t\t`{.spec.containers[5:5].name}`,\r\n\t\t\t\tdata,\r\n\t\t\t\t\"\",\r\n\t\t\t\tfalse,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"test containers[-5:-5], expect empty set\",\r\n\t\t\t\t`{.spec.containers[-5:-5].name}`,\r\n\t\t\t\tdata,\r\n\t\t\t\t\"\",\r\n\t\t\t\tfalse,\r\n\t\t\t},\r\n\t\t},\r\n\t\tfalse,\r\n\t\tt,\r\n\t)\r\n}\r\n```",
        "createdAt" : "2019-01-17T22:11:35Z",
        "updatedAt" : "2019-01-18T06:40:45Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "809cc90f-9802-47b6-9ef5-e75533d594b3",
        "parentId" : "4accb322-14f9-413f-896f-428ce011d91d",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "also, catching panics in the test makes failures easier to see:\r\n```\r\n\r\nfunc testJSONPath(tests []jsonpathTest, allowMissingKeys bool, t *testing.T) {\r\n\tfor _, test := range tests {\r\n\t\tt.Run(test.name, func(t *testing.T) {\r\n\t\t\tdefer func() {\r\n\t\t\t\tif err := recover(); err != nil {\r\n\t\t\t\t\tt.Errorf(\"panic: %v\", err)\r\n\t\t\t\t}\r\n\t\t\t}()\r\n\t\t\tj := New(test.name)\r\n\t\t\tj.AllowMissingKeys(allowMissingKeys)\r\n\t\t\terr := j.Parse(test.template)\r\n\t\t\tif err != nil {\r\n\t\t\t\tt.Errorf(\"in %s, parse %s error %v\", test.name, test.template, err)\r\n\t\t\t}\r\n\t\t\tbuf := new(bytes.Buffer)\r\n\t\t\terr = j.Execute(buf, test.input)\r\n\t\t\tif test.expectError {\r\n\t\t\t\tif test.expectError && err == nil {\r\n\t\t\t\t\tt.Errorf(\"in %s, expected execute error\", test.name)\r\n\t\t\t\t}\r\n\t\t\t\treturn\r\n\t\t\t} else if err != nil {\r\n\t\t\t\tt.Errorf(\"in %s, execute error %v\", test.name, err)\r\n\t\t\t}\r\n\t\t\tout := buf.String()\r\n\t\t\tif out != test.expect {\r\n\t\t\t\tt.Errorf(`in %s, expect to get \"%s\", got \"%s\"`, test.name, test.expect, out)\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n}\r\n```",
        "createdAt" : "2019-01-17T22:12:15Z",
        "updatedAt" : "2019-01-18T06:40:45Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab1e377416926d431f6766f91733a66fbb861080",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +401,405 @@\t}\n\n\ttestJSONPath(\n\t\t[]jsonpathTest{\n\t\t\t{"
  }
]