[
  {
    "id" : "875bd401-806e-4aef-b5e0-f01687187afe",
    "prId" : 77819,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77819#pullrequestreview-253181737",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78c7a88a-888c-4a30-b2e0-cf0df2bf04e0",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "s/sent/set",
        "createdAt" : "2019-06-11T22:31:25Z",
        "updatedAt" : "2019-07-02T20:43:19Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "a92bb5a2-ac85-435f-991a-369b792b098e",
        "parentId" : "78c7a88a-888c-4a30-b2e0-cf0df2bf04e0",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Technically it's sent, if you see this on a server you're supposed to be concerned.  Copied from dynamic.",
        "createdAt" : "2019-06-24T02:54:17Z",
        "updatedAt" : "2019-07-02T20:43:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "21f5e643d9dbe6b65d21713dc16ab8888de5423e",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +89,93 @@\t// for serializing the options\n\tconfig.GroupVersion = &schema.GroupVersion{}\n\tconfig.APIPath = \"/this-value-should-never-be-sent\"\n\n\trestClient, err := rest.RESTClientFor(config)"
  },
  {
    "id" : "bdc36cc6-0162-49f1-9176-b9fd393d6a6d",
    "prId" : 77819,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77819#pullrequestreview-257120165",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e42fb48-681c-41e3-ad09-cb9af0eeaa14",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "if the server falls back to `application/json`, isn't that a failure?",
        "createdAt" : "2019-07-02T15:34:36Z",
        "updatedAt" : "2019-07-02T20:43:19Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "0ce1c9e3-ac5e-4891-8dc0-e1833a1ff2c9",
        "parentId" : "9e42fb48-681c-41e3-ad09-cb9af0eeaa14",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "or can we take an unstructured json object and construct a PartialObjectMetadata object by copying out the metadata?",
        "createdAt" : "2019-07-02T15:35:13Z",
        "updatedAt" : "2019-07-02T20:43:19Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "74e8fea8-d9bc-450a-8926-8cea085a66fe",
        "parentId" : "9e42fb48-681c-41e3-ad09-cb9af0eeaa14",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "A very old server that doesn't recognize any of these can return json, which because our scheme doesn't include any types should result in IsNotRegisteredError, which then allows us to do a decode straight into partial object metadata because the metav1 scheme for ObjectMetadata is backwards compatible all the way to 1.0.",
        "createdAt" : "2019-07-02T20:04:27Z",
        "updatedAt" : "2019-07-02T20:43:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "21f5e643d9dbe6b65d21713dc16ab8888de5423e",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +165,169 @@\t}\n\tresult := c.client.client.Get().AbsPath(append(c.makeURLSegments(name), subresources...)...).\n\t\tSetHeader(\"Accept\", \"application/vnd.kubernetes.protobuf;as=PartialObjectMetadata;g=meta.k8s.io;v=v1,application/json;as=PartialObjectMetadata;g=meta.k8s.io;v=v1,application/json\").\n\t\tSpecificallyVersionedParams(&opts, dynamicParameterCodec, versionV1).\n\t\tDo()"
  },
  {
    "id" : "1293862f-e7ed-4178-931b-91c3fcecb2da",
    "prId" : 77819,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77819#pullrequestreview-257121157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6715842a-4683-42a8-a8a3-df6f200f262f",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "does our codec not fall back to unstructured in this case?",
        "createdAt" : "2019-07-02T15:36:31Z",
        "updatedAt" : "2019-07-02T20:43:19Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "76dba4b6-d1dd-4571-bbc9-a5b803364217",
        "parentId" : "6715842a-4683-42a8-a8a3-df6f200f262f",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The codec scheme only has a limited number of types, so if you get back a known kind it will be IsNotRegisteredError, and then we get raw bytes in JSON that we can decode.\r\n\r\nThe contract of `as` is that we get back PartialObjectMetadata in v1, so we can't get `IsNotRegisteredError` (because PartialObjectMetadata is registered).\r\n\r\nIf the server is horribly broken and spewing invalid objects that our scheme somehow decodes, we just check for partialobjectmetadata and then exit.",
        "createdAt" : "2019-07-02T20:06:33Z",
        "updatedAt" : "2019-07-02T20:43:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "21f5e643d9dbe6b65d21713dc16ab8888de5423e",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +172,176 @@\t}\n\tobj, err := result.Get()\n\tif runtime.IsNotRegisteredError(err) {\n\t\tklog.V(5).Infof(\"Unable to retrieve PartialObjectMetadata: %#v\", err)\n\t\trawBytes, err := result.Raw()"
  },
  {
    "id" : "71ccfe05-4c4c-48a7-a5cf-d879817d90fa",
    "prId" : 77819,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77819#pullrequestreview-257121546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31cf2c5f-5726-47b9-b1c7-59d9319a7390",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "won't this result in a PartialObjectMetadata with kind/apiVersion set to something like Pod v1? that doesn't seem like what we want",
        "createdAt" : "2019-07-02T15:37:23Z",
        "updatedAt" : "2019-07-02T20:43:19Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "f2682e83-32e8-4419-841d-d172ef664f42",
        "parentId" : "31cf2c5f-5726-47b9-b1c7-59d9319a7390",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "same question applies to all the fallback cases",
        "createdAt" : "2019-07-02T16:40:05Z",
        "updatedAt" : "2019-07-02T20:43:19Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "f9611715-9b16-47ea-99e3-5860e9d35bbc",
        "parentId" : "31cf2c5f-5726-47b9-b1c7-59d9319a7390",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I can clear TypeMeta.  But that is what we want.  You asked for PartialObjectMetadata, you get partial object metadata.",
        "createdAt" : "2019-07-02T20:07:21Z",
        "updatedAt" : "2019-07-02T20:43:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "21f5e643d9dbe6b65d21713dc16ab8888de5423e",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +179,183 @@\t\t}\n\t\tvar partial metav1.PartialObjectMetadata\n\t\tif err := json.Unmarshal(rawBytes, &partial); err != nil {\n\t\t\treturn nil, fmt.Errorf(\"unable to decode returned object as PartialObjectMetadata: %v\", err)\n\t\t}"
  },
  {
    "id" : "410c37d9-8dd5-4836-9a1a-d833d18da39f",
    "prId" : 77819,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77819#pullrequestreview-257138524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d08bc2da-eaba-4bf2-8368-55ee76c4f224",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "since this is called prior to clearing typemeta, should we require kind/apiVersion to be set here? (making sure we're only decoding API objects)",
        "createdAt" : "2019-07-02T20:29:14Z",
        "updatedAt" : "2019-07-02T20:43:19Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e097d748-1d04-4857-9ef1-9861f31017f8",
        "parentId" : "d08bc2da-eaba-4bf2-8368-55ee76c4f224",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "reasonable",
        "createdAt" : "2019-07-02T20:37:50Z",
        "updatedAt" : "2019-07-02T20:43:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9c337105-7266-4a33-b884-a547d375770b",
        "parentId" : "d08bc2da-eaba-4bf2-8368-55ee76c4f224",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "actually, if we get the error above, we have to have had it set.  so we're already checking for it.  I'll test though",
        "createdAt" : "2019-07-02T20:40:00Z",
        "updatedAt" : "2019-07-02T20:43:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "efe804c7-c9b2-4705-87c6-fca2f6f5b7d3",
        "parentId" : "d08bc2da-eaba-4bf2-8368-55ee76c4f224",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "added two tests",
        "createdAt" : "2019-07-02T20:42:55Z",
        "updatedAt" : "2019-07-02T20:43:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "21f5e643d9dbe6b65d21713dc16ab8888de5423e",
    "line" : 310,
    "diffHunk" : "@@ -1,1 +308,312 @@}\n\nfunc isLikelyObjectMetadata(meta *metav1.PartialObjectMetadata) bool {\n\treturn len(meta.UID) > 0 || !meta.CreationTimestamp.IsZero() || len(meta.Name) > 0 || len(meta.GenerateName) > 0\n}"
  }
]