[
  {
    "id" : "457fa0fe-4f6e-4731-8585-d6bfb0ea91e0",
    "prId" : 79992,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79992#pullrequestreview-261247173",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "baf0d71c-2fc6-47f5-b600-b7f3abe2af7f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think this is premature optimization. I think it also means someone could delete the condition and it wouldn't be put back. I would just remove this, it should be pretty cheap to recompute the condition. You already protect against unnecessary writes below.",
        "createdAt" : "2019-07-10T17:48:51Z",
        "updatedAt" : "2019-07-24T11:41:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "553792e1-0a03-4856-826a-7a98c0169bda",
        "parentId" : "baf0d71c-2fc6-47f5-b600-b7f3abe2af7f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I guess since this just seems to be a stopgap and the validation criteria will do the work in the future, maybe this isn't too important.",
        "createdAt" : "2019-07-10T18:04:20Z",
        "updatedAt" : "2019-07-24T11:41:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "570902c7-6d30-4325-98de-2be51de5ab7f",
        "parentId" : "baf0d71c-2fc6-47f5-b600-b7f3abe2af7f",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I think this is premature optimization. I think it also means someone could delete the condition and it wouldn't be put back. I would just remove this, it should be pretty cheap to recompute the condition. You already protect against unnecessary writes below.\r\n\r\nWe've seen this particular area fight over messages and reasons.  This was inspired by the non-structural condition which operates similarly.",
        "createdAt" : "2019-07-12T13:05:28Z",
        "updatedAt" : "2019-07-24T11:41:39Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "b0ea4526-3515-4711-bdf9-ee0d1b340f5f",
        "parentId" : "baf0d71c-2fc6-47f5-b600-b7f3abe2af7f",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "yeah, this is a simple solution to avoid dueling HA apiservers, which is important",
        "createdAt" : "2019-07-12T13:11:11Z",
        "updatedAt" : "2019-07-24T11:41:39Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa84028119251b93042a1fc24ca6ebf13299ad29",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +139,143 @@\tc.lastSeenProtectedAnnotationLock.Unlock()\n\tif seenBefore && protectionAnnotationValue == lastSeen {\n\t\treturn nil\n\t}\n"
  },
  {
    "id" : "0e87b749-049f-48b7-9876-7ae6148cb601",
    "prId" : 79992,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79992#pullrequestreview-261245905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f07f4e4-9b21-49c6-be1a-cf95f1294471",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah apiserver fights are problematic if you do what I said in the prior comment. But there's no way to tell the difference between an apiserver and a user.\r\n\r\nWhat if we versioned the condition somehow, such that apiservers using the same version are running the same code and therefore won't fight, and apiservers using older versions will avoid writing over newer versions?",
        "createdAt" : "2019-07-10T17:54:23Z",
        "updatedAt" : "2019-07-24T11:41:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5ddbcd78-9405-4ce1-b6cc-4c43a78ec91d",
        "parentId" : "9f07f4e4-9b21-49c6-be1a-cf95f1294471",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Yeah apiserver fights are problematic if you do what I said in the prior comment. But there's no way to tell the difference between an apiserver and a user.\r\n\r\nThat seems like overkill for an informational condition.  If someone twiddles this, they're only lying to themselves.  I'd prefer to avoid the risk the apiserver fights and take the chance that a cluster-admin intentionally deceives themselves.  Also, that cluster-admin needs therapy.",
        "createdAt" : "2019-07-12T13:08:39Z",
        "updatedAt" : "2019-07-24T11:41:39Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa84028119251b93042a1fc24ca6ebf13299ad29",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +170,174 @@\n\t// store annotation in order to avoid repeated updates for the same annotation (and potential\n\t// fights of API server in HA environments).\n\tc.lastSeenProtectedAnnotationLock.Lock()\n\tdefer c.lastSeenProtectedAnnotationLock.Unlock()"
  },
  {
    "id" : "9f2f563f-5cec-47c0-b260-40ddef896927",
    "prId" : 79992,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79992#pullrequestreview-265521016",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b636532-93d8-47c2-9933-52b0c8cc1793",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "You only need the name, which is in the tombstone already IIRC? You might not need this second cast.",
        "createdAt" : "2019-07-10T17:55:59Z",
        "updatedAt" : "2019-07-24T11:41:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "84fcab90-667b-4c3a-b9ca-1cada0fae3ef",
        "parentId" : "7b636532-93d8-47c2-9933-52b0c8cc1793",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> You only need the name, which is in the tombstone already IIRC? You might not need this second cast.\r\n\r\nThe name is used a few lines down.  I'd prefer to keep it because I think it reads easier unless you feel strongly and prefer the idea of depending on the shape of a key to match a map set from a different value.  I don't think future code archeologists would appreciate having to know it.",
        "createdAt" : "2019-07-12T13:15:15Z",
        "updatedAt" : "2019-07-24T11:41:39Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "34d7c327-39e3-4331-88cd-293917a6be1d",
        "parentId" : "7b636532-93d8-47c2-9933-52b0c8cc1793",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "My point was you can still do what you want to even if this cast fails. I don't think it's too important.",
        "createdAt" : "2019-07-23T16:11:28Z",
        "updatedAt" : "2019-07-24T11:41:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa84028119251b93042a1fc24ca6ebf13299ad29",
    "line" : 254,
    "diffHunk" : "@@ -1,1 +252,256 @@\t\t\treturn\n\t\t}\n\t\tcastObj, ok = tombstone.Obj.(*apiextensions.CustomResourceDefinition)\n\t\tif !ok {\n\t\t\tklog.Errorf(\"Tombstone contained object that is not expected %#v\", obj)"
  }
]