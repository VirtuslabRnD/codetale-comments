[
  {
    "id" : "b148c315-a8f7-466f-a720-00889217cb83",
    "prId" : 80572,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80572#pullrequestreview-284009096",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b2078ba-ee1c-4673-a3a3-c1cd4c850b72",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Did this test fail previously?",
        "createdAt" : "2019-09-04T16:50:24Z",
        "updatedAt" : "2019-11-14T01:50:24Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "516ffa63-44ce-4ed4-93c6-cfb84e11e6e6",
        "parentId" : "4b2078ba-ee1c-4673-a3a3-c1cd4c850b72",
        "authorId" : "9e6ce3ed-e2f7-40ea-b6d7-b1b04fc48f70",
        "body" : "Yes, because missing resource version is not allowed previously.",
        "createdAt" : "2019-09-05T04:08:44Z",
        "updatedAt" : "2019-11-14T01:50:24Z",
        "lastEditedBy" : "9e6ce3ed-e2f7-40ea-b6d7-b1b04fc48f70",
        "tags" : [
        ]
      }
    ],
    "commit" : "da246010c3d875f01f9c61ff220923c4e2be936b",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +553,557 @@\t}\n\n\tif _, _, err := storage.Scale.Update(ctx, update.Name, rest.DefaultUpdatedObjectInfo(&update), rest.ValidateAllObjectFunc, rest.ValidateAllObjectUpdateFunc, false, &metav1.UpdateOptions{}); err != nil {\n\t\tt.Fatalf(\"error updating scale %v: %v\", update, err)\n\t}"
  },
  {
    "id" : "7edc4ae9-9be5-4d1b-bc77-c5c858ef94fa",
    "prId" : 80572,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80572#pullrequestreview-314589184",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34eba00f-66b8-432f-928b-11e1cc083fbe",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "can you set up a second test (e.g. TestScaleUpdateWithoutResourceVersionWithConflicts) that does this in the presence of conflicting updates to make sure no conflict error is returned to the client and their scale update is successful?\r\n\r\nto set up the conflicting updates, start two goroutines:\r\n* one that continuously submits a patch that updates a label and verifies the label update was effective\r\n* one that continuously submits a scale update without a resourceVersion for a monotonically increasing replica value and verifies the scale update was effective\r\n\r\nLet them run for a few seconds or for 100 updates or something. Neither request should receive a conflict error back from the server.\r\n\r\nTo verify this is testing what you want it to, set `retryOnConflict` to false in the storage impl, and the scale update should start encountering conflict errors.",
        "createdAt" : "2019-11-10T04:07:20Z",
        "updatedAt" : "2019-11-14T01:50:24Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "da246010c3d875f01f9c61ff220923c4e2be936b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +529,533 @@}\n\nfunc TestScaleUpdateWithoutResourceVersion(t *testing.T) {\n\tstorage, server := newStorage(t)\n\tdefer server.Terminate(t)"
  }
]