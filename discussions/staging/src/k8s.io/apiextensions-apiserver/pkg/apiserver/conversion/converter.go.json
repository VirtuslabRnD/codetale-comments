[
  {
    "id" : "e15d4b0c-1f9c-46ba-92b2-1a12ec09a441",
    "prId" : 98377,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98377#pullrequestreview-641581119",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1522e151-7dab-428b-a6be-f24b218e637d",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "lgtm",
        "createdAt" : "2021-04-21T21:54:52Z",
        "updatedAt" : "2021-04-21T21:55:03Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b666a61a170f61c7e223085478b24a03612fa99",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +166,170 @@\t\treturn nil, fmt.Errorf(\"%v is unstructured and is not suitable for converting to %q\", fromGVK.String(), target)\n\t}\n\t// Special-case typed scale conversion if this custom resource supports a scale endpoint\n\tif c.convertScale {\n\t\tif _, isInScale := in.(*autoscalingv1.Scale); isInScale {"
  },
  {
    "id" : "ba8add26-bedf-4845-981f-fe603636b003",
    "prId" : 77922,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77922#pullrequestreview-242323838",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07f43cbb-7727-40ea-ac5d-73310806acdb",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "@liggitt this fixes metrics reregistration errors because multiple test apiservers had different instances and didn't protect us from calling `prometheus/registry.Register` twice. /cc @logicalhan ",
        "createdAt" : "2019-05-26T07:53:38Z",
        "updatedAt" : "2019-05-27T17:33:10Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "42f08e0b-ca72-4baa-9f7a-332faf2df330",
        "parentId" : "07f43cbb-7727-40ea-ac5d-73310806acdb",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "can you open a follow-up issue for @logicalhan to think through ways to improve this for multi-instance tests? (also to fix the newConverterMertricFactory typo)",
        "createdAt" : "2019-05-27T15:21:14Z",
        "updatedAt" : "2019-05-27T17:33:10Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ccb26c3bb7c2fd995292cf6664ea23d5d25ae4b",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +40,44 @@// converterMetricFactorySingleton protects us from reregistration of metrics on repeated\n// apiextensions-apiserver runs.\nvar converterMetricFactorySingleton = newConverterMertricFactory()\n\n// NewCRConverterFactory creates a new CRConverterFactory"
  },
  {
    "id" : "439dae21-d9bb-4fd9-b388-7e5e3756a609",
    "prId" : 76849,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76849#pullrequestreview-228928803",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef63d77f-274f-4ad0-ae78-0cf086ec148a",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "The integration test doesn't cover the \"CR/scale\" case. Can we add a test?",
        "createdAt" : "2019-04-21T22:06:31Z",
        "updatedAt" : "2019-04-21T22:23:19Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "925faaee-7333-41a9-83d0-4b931e5e0f43",
        "parentId" : "ef63d77f-274f-4ad0-ae78-0cf086ec148a",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "actually, it does... that's how I found this case was broken",
        "createdAt" : "2019-04-21T22:27:08Z",
        "updatedAt" : "2019-04-21T22:27:08Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "69042da958525c5e5008baa1d4fa3175c2226764",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +131,135 @@\nfunc (c *crConverter) Convert(in, out, context interface{}) error {\n\t// Special-case typed scale conversion if this custom resource supports a scale endpoint\n\tif c.convertScale {\n\t\t_, isInScale := in.(*autoscalingv1.Scale)"
  },
  {
    "id" : "af7b4d85-9512-45f3-99bc-77a1fe92a44a",
    "prId" : 74376,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74376#pullrequestreview-211499090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4434b00-7426-47d3-b44b-de243d13394c",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "is this incorrect if `in` is a list? it looks like we are computing `toGVK` based on the list's GVK in that case (which seems like it could be very wrong if the list is a `v1.List`)\r\n\r\npreviously, the first thing we did in this method was iterate over the list, converting the individual items, and left the list GVK alone",
        "createdAt" : "2019-03-06T04:14:56Z",
        "updatedAt" : "2019-03-08T16:36:26Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "497fd0f6-5168-4f73-9f0e-6c2f689d39c7",
        "parentId" : "f4434b00-7426-47d3-b44b-de243d13394c",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "hmm, that was true for crConverter#ConvertToVersion, but not webhookConverter#ConvertToVersion. I'm having a hard time following the paths that led to the webhook conversion call previously. Does the current state of this PR mean we won't send lists to the webhook to convert, only individual items? Do we have an integration test that exercises the conversion path that gets sent a list?",
        "createdAt" : "2019-03-06T04:22:06Z",
        "updatedAt" : "2019-03-08T16:36:26Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "09e41221-3c53-44c1-80c4-2cfd56c94ff4",
        "parentId" : "f4434b00-7426-47d3-b44b-de243d13394c",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "integration test probably a good idea. but no, we don't send individual objects to webhook. We send a list. In old code, ConvertToVersion of the webhookConverter is the one we started with. the crConverter was only being used for nopConverter. That's why I had two separate commits before, one to merge crConverter with nopConverter (because it was only used for that), then second commit was to factor out common code between two converter into crConverter (because the name make sense for that).\r\n\r\nin old code, webhookConverter.ConvertToVersion did the same as we are doing here to get `toGVK` through [this function](tes/kubernetes/blob/master/staging/src/k8s.io/apiextensions-apiserver/pkg/apiserver/conversion/webhook_converter.go#L178).\r\n\r\nI will try to add a e2e test.",
        "createdAt" : "2019-03-06T13:58:45Z",
        "updatedAt" : "2019-03-08T16:36:26Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      },
      {
        "id" : "5613b71c-82da-4377-8370-806529a58b1b",
        "parentId" : "f4434b00-7426-47d3-b44b-de243d13394c",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "Extended the e2e case on the list to check if the webhook called on the list as whole instead of item by item.",
        "createdAt" : "2019-03-06T22:02:31Z",
        "updatedAt" : "2019-03-08T16:36:26Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "18be830680371d8becef7f2b51f4e94e49842dc5",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +145,149 @@func (c *crConverter) ConvertToVersion(in runtime.Object, target runtime.GroupVersioner) (runtime.Object, error) {\n\tfromGVK := in.GetObjectKind().GroupVersionKind()\n\ttoGVK, ok := target.KindForGroupVersionKinds([]schema.GroupVersionKind{fromGVK})\n\tif !ok {\n\t\t// TODO: should this be a typed error?"
  },
  {
    "id" : "f1d8bab5-5cb1-4f6d-a332-3ba3c63ed2ba",
    "prId" : 67006,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67006#pullrequestreview-172587882",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "494f1693-716f-4167-970a-065a497f72a7",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I would prefer to set this up even for disable feature gate, but not call the actual conversion depending on the gate. That's easier to reason about.",
        "createdAt" : "2018-08-16T14:55:55Z",
        "updatedAt" : "2018-11-09T23:57:46Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "fb6197ba-94c0-4851-9201-358c00de0158",
        "parentId" : "494f1693-716f-4167-970a-065a497f72a7",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "I thought about it. The thing is if the creating of this factory fails for any reason, with turning feature gate off, we can bypass it but if we don't feature gate it, the conversions will be fail even if we don't use webhooks.",
        "createdAt" : "2018-08-16T19:40:09Z",
        "updatedAt" : "2018-11-09T23:57:46Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      },
      {
        "id" : "45ac9683-cfad-479b-b4b3-c80dce53e797",
        "parentId" : "494f1693-716f-4167-970a-065a497f72a7",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "When can it fail? ",
        "createdAt" : "2018-08-17T06:49:55Z",
        "updatedAt" : "2018-11-09T23:57:46Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "9533fc71-f4a2-4889-a341-87667612249e",
        "parentId" : "494f1693-716f-4167-970a-065a497f72a7",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "right now `newWebhookConverterFactory` can fail if one of it's sub-calls fails. We can go into the details of those subcalls (`NewClientManager` and `NewDefaultAuthenticationInfoResolver`) but the fact that they can fail and even if we resolve failure for current code, it can change in future, make me believe that we should protect ourself from that by feature gate.",
        "createdAt" : "2018-11-07T16:46:45Z",
        "updatedAt" : "2018-11-09T23:57:46Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "d51d0164c5cb1657c98c5823078c38ae5fdfda80",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +39,43 @@func NewCRConverterFactory(serviceResolver webhook.ServiceResolver, authResolverWrapper webhook.AuthenticationInfoResolverWrapper) (*CRConverterFactory, error) {\n\tconverterFactory := &CRConverterFactory{}\n\tif utilfeature.DefaultFeatureGate.Enabled(apiextensionsfeatures.CustomResourceWebhookConversion) {\n\t\twebhookConverterFactory, err := newWebhookConverterFactory(serviceResolver, authResolverWrapper)\n\t\tif err != nil {"
  },
  {
    "id" : "ca1784ff-be07-4f04-8363-02d43f1e20b2",
    "prId" : 67006,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67006#pullrequestreview-149147738",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62dd00cd-9e16-44a3-82c1-58b33e608206",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "we check for the gate below. Let's simplify this constructor by not checking the gate at all.",
        "createdAt" : "2018-08-23T09:13:03Z",
        "updatedAt" : "2018-11-09T23:57:46Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "5ab77883-ae4c-43a3-9b77-d94f9eb8ad50",
        "parentId" : "62dd00cd-9e16-44a3-82c1-58b33e608206",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "`newWebhookConverterFactory` can fail and if we don't feature gate this, that means we can change construction behaviour without gating it. i.e. new code may fail initialization (if newWebhookConverterFactory fails) even though the gate is off.",
        "createdAt" : "2018-08-24T01:12:13Z",
        "updatedAt" : "2018-11-09T23:57:46Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "d51d0164c5cb1657c98c5823078c38ae5fdfda80",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +39,43 @@func NewCRConverterFactory(serviceResolver webhook.ServiceResolver, authResolverWrapper webhook.AuthenticationInfoResolverWrapper) (*CRConverterFactory, error) {\n\tconverterFactory := &CRConverterFactory{}\n\tif utilfeature.DefaultFeatureGate.Enabled(apiextensionsfeatures.CustomResourceWebhookConversion) {\n\t\twebhookConverterFactory, err := newWebhookConverterFactory(serviceResolver, authResolverWrapper)\n\t\tif err != nil {"
  },
  {
    "id" : "dfa487c1-7bba-4279-8d8c-5e3ed7186748",
    "prId" : 63830,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63830#pullrequestreview-122055481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3e76df8-4dfc-4d64-9f6d-1381fc04cb35",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "nit: empty line",
        "createdAt" : "2018-05-22T07:58:55Z",
        "updatedAt" : "2018-05-22T20:54:46Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "c25514a1ee513e1a7ad1c3c572ab9dd32a395d28",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +18,22 @@\nimport (\n\t\"fmt\"\n\n\t\"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions\""
  }
]