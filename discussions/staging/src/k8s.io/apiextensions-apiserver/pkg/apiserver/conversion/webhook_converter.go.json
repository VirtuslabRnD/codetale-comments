[
  {
    "id" : "9b2e6b08-dfd7-44b9-bb5a-80c2562a0050",
    "prId" : 88936,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88936#pullrequestreview-444729220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2390d572-4f6b-4e1d-9095-63c2f0759add",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "well, this how stands out nicely.",
        "createdAt" : "2020-07-08T12:48:20Z",
        "updatedAt" : "2020-07-11T13:42:24Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "b12ac0abc64adb71d97fbde12f373b1424631f20",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +261,265 @@\t}\n\n\tctx, trace := genericapirequest.WithTrace(context.TODO(), \"Call conversion webhook\",\n\t\tutiltrace.Field{\"custom-resource-definition\", c.name},\n\t\tutiltrace.Field{\"desired-api-version\", desiredAPIVersion},"
  },
  {
    "id" : "92e581af-5d6d-4d8c-a33d-2137ed6e9f74",
    "prId" : 84005,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84005#pullrequestreview-324619974",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e96eaa00-4753-478d-ad1d-d51fdca53832",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "can this be nil?",
        "createdAt" : "2019-11-29T09:49:36Z",
        "updatedAt" : "2019-12-03T16:49:47Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "c9ba5108-a8ad-4377-89db-17faf6d9c648",
        "parentId" : "e96eaa00-4753-478d-ad1d-d51fdca53832",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "the defaulting prevents nil pointer for us\r\n```go\r\n\tif obj.Port == nil {\r\n\t\tobj.Port = utilpointer.Int32Ptr(443)\r\n\t}\r\n```",
        "createdAt" : "2019-11-29T09:58:57Z",
        "updatedAt" : "2019-12-03T16:49:47Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "81471c36b1194f87219807b8f87e9020fdd4888e",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +87,91 @@\t\t\tName:      apiConfig.Service.Name,\n\t\t\tNamespace: apiConfig.Service.Namespace,\n\t\t\tPort:      *apiConfig.Service.Port,\n\t\t}\n\t\tif apiConfig.Service.Path != nil {"
  },
  {
    "id" : "c6e0a6e3-f940-48a8-bd62-78d06f86d938",
    "prId" : 81476,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81476#pullrequestreview-275694290",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "718c0661-2853-4970-b566-940ac2dbc13a",
        "parentId" : null,
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Thanks for adding a comment about preserving this behavior. I noticed it when e2e testing v1beta1 because our image previously didn't return apiVersion or kind.",
        "createdAt" : "2019-08-16T06:26:34Z",
        "updatedAt" : "2019-08-17T13:42:17Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce769a5edeaf9c1cdfe2cc3b214e741fda47ca34",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +216,220 @@\n\tcase *v1beta1.ConversionReview:\n\t\t// v1beta1 processing did not verify GVK or UID, so skip those for compatibility\n\n\t\tif response.Response == nil {"
  },
  {
    "id" : "e0882955-6c30-4ea2-9203-d9bf21cf3199",
    "prId" : 81476,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81476#pullrequestreview-275976057",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "890fb5d4-631a-4c97-bd3d-8b0d4343d5af",
        "parentId" : null,
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Important?",
        "createdAt" : "2019-08-16T06:26:48Z",
        "updatedAt" : "2019-08-17T13:42:17Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "67a235db-325c-4c8d-9b1e-0241e65b0557",
        "parentId" : "890fb5d4-631a-4c97-bd3d-8b0d4343d5af",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I don't think so. as long as the message propagates, a conversion error is generally going to produce an internal server error",
        "createdAt" : "2019-08-16T14:18:20Z",
        "updatedAt" : "2019-08-17T13:42:17Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce769a5edeaf9c1cdfe2cc3b214e741fda47ca34",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +223,227 @@\n\t\tif response.Response.Result.Status != metav1.StatusSuccess {\n\t\t\t// TODO: Return a webhook specific error to be able to convert it to meta.Status\n\t\t\tif len(response.Response.Result.Message) > 0 {\n\t\t\t\treturn nil, errors.New(response.Response.Result.Message)"
  },
  {
    "id" : "f4d727d8-c25b-4d8f-bf1f-0f6fbaef7e1e",
    "prId" : 78610,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78610#pullrequestreview-252079687",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98aee963-95f9-4a4b-9a4c-daedfadd0694",
        "parentId" : null,
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "I don't think we are likely to have anything concurrent here but for conformity I think we should indicate which request completed.",
        "createdAt" : "2019-06-06T18:40:35Z",
        "updatedAt" : "2019-08-05T19:33:53Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "b9c9ac86-6ecf-478b-a8f4-2008db33e8df",
        "parentId" : "98aee963-95f9-4a4b-9a4c-daedfadd0694",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "the trace instance holds the context and logs a unique trace instance with every line:\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/461f439b24ee43d95f328d225d1464f948f70893/vendor/k8s.io/utils/trace/trace.go#L63-L75",
        "createdAt" : "2019-06-06T18:48:06Z",
        "updatedAt" : "2019-08-05T19:33:53Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "07496bc4-fc97-44a6-9e35-14484a889f22",
        "parentId" : "98aee963-95f9-4a4b-9a4c-daedfadd0694",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "I'll capture the output of a couple traces and we can review it and see how it looks.",
        "createdAt" : "2019-06-06T19:43:42Z",
        "updatedAt" : "2019-08-05T19:33:53Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "036b1ae1-877f-483c-a364-265328f68754",
        "parentId" : "98aee963-95f9-4a4b-9a4c-daedfadd0694",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Here's an example output, with the trace id correlating the \"request completed\" with the webhook call. I'll add examples of all the trace output to the description of this issue.\r\n\r\n```\r\nI0611 20:09:55.596765       1 trace.go:81] Trace[723959798]: \"Call conversion webhook: custom resource definition: foos.stable.example.com, desired API version: stable.example.com/v1, object count: 1, UID: 392dc2ee-3623-4770-871e-1a8041ba5253\" (started: 2019-06-11 20:09:55.59189597 +0000 UTC m=+820.005173610) (total time: 1034.819304ms):\r\nTrace[723959798]: [4.773678ms] [4.773678ms] Request completed\r\n```",
        "createdAt" : "2019-06-11T20:14:28Z",
        "updatedAt" : "2019-08-05T19:33:53Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "3e98793b-003c-4788-80f6-e611dd341b94",
        "parentId" : "98aee963-95f9-4a4b-9a4c-daedfadd0694",
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "My confusion. I had assumed we were linking these traces to the traces for the requests (Eg. Update Pod) they are part of and not that they were independent traces. It would be nice to have these traces as part of the large request. Otherwise it is hard to identify how much delay the admission webhooks are adding to a request.",
        "createdAt" : "2019-06-20T00:39:24Z",
        "updatedAt" : "2019-08-05T19:33:53Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "a91a3084-045e-4431-9be4-984b43857fd4",
        "parentId" : "98aee963-95f9-4a4b-9a4c-daedfadd0694",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Yep, that's a follow-up. I reviewed the code briefly and it's not trivial to do with trace given how it works today. It's also a bit more broad of a change than this; there are etcd storage layer traces that are currently independent, that we also should linked. I'll open a separate issue now.",
        "createdAt" : "2019-06-20T04:00:16Z",
        "updatedAt" : "2019-08-05T19:33:53Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "237b16d9d99d1eaf9ef762ddeb4ccec247b2ba8c",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +201,205 @@\t\treturn nil, fmt.Errorf(\"conversion webhook for %v failed: %v\", in.GetObjectKind(), err)\n\t}\n\ttrace.Step(\"Request completed\")\n\n\tif response.Response == nil {"
  },
  {
    "id" : "a980a7e3-464c-4ae4-b45f-c49f13b389b6",
    "prId" : 78610,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78610#pullrequestreview-270913203",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc6da760-91cc-4b09-a613-0c953812b486",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "4ms doesn't seem to match constant 8 in the line below.",
        "createdAt" : "2019-08-04T15:40:29Z",
        "updatedAt" : "2019-08-05T19:33:53Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "3940999a-1d83-41d8-a389-4700443db384",
        "parentId" : "bc6da760-91cc-4b09-a613-0c953812b486",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "4+4=8",
        "createdAt" : "2019-08-05T17:48:19Z",
        "updatedAt" : "2019-08-05T19:33:53Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "237b16d9d99d1eaf9ef762ddeb4ccec247b2ba8c",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +190,194 @@\t// Only log conversion webhook traces that exceed a 8ms per object limit plus a 50ms request overhead allowance.\n\t// The per object limit uses the SLO for conversion webhooks (~4ms per object) plus time to serialize/deserialize\n\t// the conversion request on the apiserver side (~4ms per object).\n\tdefer trace.LogIfLong(time.Duration(50+8*objCount) * time.Millisecond)\n"
  },
  {
    "id" : "b724ab11-9fe8-41c9-913a-85a283a62b1c",
    "prId" : 77743,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77743#pullrequestreview-236429954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3b0fb7e-f0b1-413a-a145-0f0a06a547cf",
        "parentId" : null,
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "thank you",
        "createdAt" : "2019-05-12T18:19:01Z",
        "updatedAt" : "2019-05-28T08:22:53Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9814914b94c2b87b5063c02daf08aff027e6a5b5",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +228,232 @@\t\t\tif !ok {\n\t\t\t\t// this should not happened\n\t\t\t\treturn nil, fmt.Errorf(\"invalid converted object at index %v: invalid type, expected=Unstructured, got=%T\", convertedIndex, converted)\n\t\t\t}\n\t\t\tif err := validateConvertedObject(original, unstructConverted); err != nil {"
  },
  {
    "id" : "53d728e2-6050-42a7-8693-9ce67eef45ec",
    "prId" : 77743,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77743#pullrequestreview-241989682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "884d8e01-7fec-4f5e-9720-87ad39edd73f",
        "parentId" : null,
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "very minor: Since L297 ensures `converted.Object[\"metadata\"]` already exists, adjust comment to clarify that we're clearing it if `original` has not metadata?",
        "createdAt" : "2019-05-25T04:59:40Z",
        "updatedAt" : "2019-05-28T08:22:53Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9814914b94c2b87b5063c02daf08aff027e6a5b5",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +307,311 @@\t\t// the original will always have metadata. But just to be safe, let's clear in converted\n\t\t// with an empty object instead of nil, to be able to add labels and annotations below.\n\t\tconverted.Object[\"metadata\"] = map[string]interface{}{}\n\t} else {\n\t\tconverted.Object[\"metadata\"] = runtime.DeepCopyJSONValue(original.Object[\"metadata\"])"
  },
  {
    "id" : "766bef3e-a89f-484f-86e9-a7faf53ed8f3",
    "prId" : 77743,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77743#pullrequestreview-241994247",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2185830-c5ec-48e9-8cc7-b8434cde58a6",
        "parentId" : null,
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Log (to an appropriately low log level) a message if any metadata changes were ignored due to only annotations and labels being whitelisted?",
        "createdAt" : "2019-05-25T05:26:08Z",
        "updatedAt" : "2019-05-28T08:22:53Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "e2491dd0-6c2b-4c99-aa48-db83ca63121c",
        "parentId" : "a2185830-c5ec-48e9-8cc7-b8434cde58a6",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "would rather not to try. We decided against any kind of comparison (in order to reject) because marshalling (especially later with proto) is so sensitive with empty, null and undefined values. Logging those brings us back into this business. Our way out was to ignore other fields.",
        "createdAt" : "2019-05-25T07:47:17Z",
        "updatedAt" : "2019-05-28T08:22:53Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "9814914b94c2b87b5063c02daf08aff027e6a5b5",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +363,367 @@\t}\n\n\treturn nil\n}\n"
  },
  {
    "id" : "3d961c54-ed36-4e76-b251-659ccd4a3b4c",
    "prId" : 77743,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77743#pullrequestreview-243197586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6dde5c00-ce9c-406d-b052-25df34a3a0ac",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "It seems these 5 lines can be rewritten as:\r\n```\r\ndiff --git a/staging/src/k8s.io/apiextensions-apiserver/pkg/apiserver/conversion/webhook_converter.go b/staging/src/k8s.io/apiextensions-apiserver/pkg/apiserver/conversion/webhook_converter.go\r\nindex 8cc7e78e22..121654846d 100644\r\n--- a/staging/src/k8s.io/apiextensions-apiserver/pkg/apiserver/conversion/webhook_converter.go\r\n+++ b/staging/src/k8s.io/apiextensions-apiserver/pkg/apiserver/conversion/webhook_converter.go\r\n@@ -317,7 +317,11 @@ func restoreObjectMeta(original, converted *unstructured.Unstructured) error {\r\n                return fmt.Errorf(\"invalid metadata of type %T in input object\", obj)\r\n        }\r\n\r\n-       for _, fld := range []string{\"labels\", \"annotations\"} {\r\n+       type validatorType = func(map[string]string, *field.Path) field.ErrorList\r\n+       fldToValidator := make(map[string]validatorType)\r\n+       fldToValidator[\"labels\"] = metav1validation.ValidateLabels\r\n+       fldToValidator[\"annotations\"] = apivalidation.ValidateAnnotations\r\n+       for fld, validator := range fldToValidator {\r\n                obj, found := responseMetaData[fld]\r\n                if !found || obj == nil {\r\n                        delete(convertedMetaData, fld)\r\n@@ -349,11 +353,7 @@ func restoreObjectMeta(original, converted *unstructured.Unstructured) error {\r\n                                stringMap[k] = v.(string)\r\n                        }\r\n                        var errs field.ErrorList\r\n-                       if fld == \"labels\" {\r\n-                               errs = metav1validation.ValidateLabels(stringMap, field.NewPath(\"metadata\", \"labels\"))\r\n-                       } else {\r\n-                               errs = apivalidation.ValidateAnnotations(stringMap, field.NewPath(\"metadata\", \"annotation\"))\r\n-                       }\r\n+                       errs = validator(stringMap, field.NewPath(\"metadata\", \"labels\"))\r\n                        if len(errs) > 0 {\r\n                                return errs.ToAggregate()\r\n                        }\r\n```\r\nThe above is expandable: it is trivial to add more supported fields.",
        "createdAt" : "2019-05-29T11:31:23Z",
        "updatedAt" : "2019-05-29T11:45:11Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "9814914b94c2b87b5063c02daf08aff027e6a5b5",
    "line" : 168,
    "diffHunk" : "@@ -1,1 +350,354 @@\t\t\t}\n\t\t\tvar errs field.ErrorList\n\t\t\tif fld == \"labels\" {\n\t\t\t\terrs = metav1validation.ValidateLabels(stringMap, field.NewPath(\"metadata\", \"labels\"))\n\t\t\t} else {"
  },
  {
    "id" : "2666d65d-e111-4990-bd78-352e3df48c95",
    "prId" : 67006,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67006#pullrequestreview-172593855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f01f3cc-310e-4d0e-a34e-27d3622b93ab",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "when does this happen? Why should we handle that in a special way? ",
        "createdAt" : "2018-11-06T12:43:31Z",
        "updatedAt" : "2018-11-09T23:57:46Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "d2e379ce-08d8-4588-b8ff-08e5ca793bc2",
        "parentId" : "4f01f3cc-310e-4d0e-a34e-27d3622b93ab",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "actually now that we fixed the example webhook and also expect conversion webhooks to not fail on empty objects, this is less important. But it happens. This is where it initiated:\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/dbb448bbdcb9e440eee57024ffa5f1698956a054/staging/src/k8s.io/apiserver/pkg/storage/cacher/cacher.go#L201\r\n\r\nThe config.Type comes from a `NewFunc` which creates an empty object and this line will pass that eventually to webhook converter to convert an empty object from one version to another.\r\n\r\nI don't think we should call webhooks on an empty object as the behaviour should be like NopConverter. Generally conversion should not fail based on fields not exists. That is validation problem not conversion. Also we do not expect conversion webhook to do any defaulting too. So there is no point calling webhook on empty object.\r\n\r\nBecause we consistently create these empty objects in our machinery logic, it make sense to special case it here.",
        "createdAt" : "2018-11-06T21:41:53Z",
        "updatedAt" : "2018-11-09T23:57:46Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      },
      {
        "id" : "d825f01e-10f4-4439-b3fa-ce9a9cfef38f",
        "parentId" : "4f01f3cc-310e-4d0e-a34e-27d3622b93ab",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "It's some smoke test we added to the storage plumbing. @liggitt @deads2k do you remember why?\r\n\r\nIn theory an empty object in one version could map to a non-empty object in another version. So strictly speaking this special casing is wrong.",
        "createdAt" : "2018-11-07T09:10:43Z",
        "updatedAt" : "2018-11-09T23:57:46Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "bc00e5ad-2b43-45d4-98b6-dba7eccdb16c",
        "parentId" : "4f01f3cc-310e-4d0e-a34e-27d3622b93ab",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "> In theory an empty object in one version could map to a non-empty object in another version. So strictly speaking this special casing is wrong.\r\n\r\nhow? do you have an example?",
        "createdAt" : "2018-11-07T16:39:11Z",
        "updatedAt" : "2018-11-09T23:57:46Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      },
      {
        "id" : "3b69ed5f-958c-46c0-8637-1d21cc32d93a",
        "parentId" : "4f01f3cc-310e-4d0e-a34e-27d3622b93ab",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "Discussed offline. @sttts is good with adding a detail comment here and move on. Assuming webhook does not do any defaulting or validation, this case should hold.",
        "createdAt" : "2018-11-07T16:58:21Z",
        "updatedAt" : "2018-11-09T23:57:46Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "d51d0164c5cb1657c98c5823078c38ae5fdfda80",
    "line" : 194,
    "diffHunk" : "@@ -1,1 +192,196 @@\t// it special cased here not to call webhook converter. The test initiated here:\n\t// https://github.com/kubernetes/kubernetes/blob/dbb448bbdcb9e440eee57024ffa5f1698956a054/staging/src/k8s.io/apiserver/pkg/storage/cacher/cacher.go#L201\n\tif isEmptyUnstructuredObject(in) {\n\t\treturn c.nopConverter.ConvertToVersion(in, target)\n\t}"
  },
  {
    "id" : "60b3f8ee-402c-4115-bfc1-18458fca29a4",
    "prId" : 67006,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67006#pullrequestreview-172394092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d134d951-c2f4-4283-98d8-686a67f55356",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "should we put a timeout here? What does admission do?",
        "createdAt" : "2018-11-06T12:47:39Z",
        "updatedAt" : "2018-11-09T23:57:46Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "38cd3f42-f3b6-422c-93d1-8ef60280ab75",
        "parentId" : "d134d951-c2f4-4283-98d8-686a67f55356",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "It is the same there:\r\nhttps://github.com/kubernetes/kubernetes/blob/5652d5cffadcd8a2f107b6aecf5fc06c0fc473f1/staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/generic/webhook.go#L167",
        "createdAt" : "2018-11-06T21:45:03Z",
        "updatedAt" : "2018-11-09T23:57:46Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      },
      {
        "id" : "7e302a72-0969-4f18-86f8-d9056e10a5a7",
        "parentId" : "d134d951-c2f4-4283-98d8-686a67f55356",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Remembering the discussion to put one second here or something like that. But if admission is not better, this is not critical. But please add a TODO (also to admission while you are on it).",
        "createdAt" : "2018-11-07T09:11:26Z",
        "updatedAt" : "2018-11-09T23:57:46Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "d51d0164c5cb1657c98c5823078c38ae5fdfda80",
    "line" : 230,
    "diffHunk" : "@@ -1,1 +228,232 @@\tresponse := &v1beta1.ConversionReview{}\n\t// TODO: Figure out if adding one second timeout make sense here.\n\tctx := context.TODO()\n\tr := c.restClient.Post().Context(ctx).Body(request).Do()\n\tif err := r.Into(response); err != nil {"
  },
  {
    "id" : "e42d5697-3e11-41c8-a47b-3aac117af685",
    "prId" : 67006,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67006#pullrequestreview-173318728",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a542123-bc70-4f15-9ef6-85951141f2d7",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "how paranoid do we want to be about making sure the converted objects match their inputs (kind, uid, name, namespace must not change between the input and output)? that would make me more confident that a buggy or compromised conversion webhook wasn't causing data to be written to the wrong place in etcd, etc",
        "createdAt" : "2018-11-08T21:26:18Z",
        "updatedAt" : "2018-11-09T23:57:46Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "22730b90-98b7-4696-b808-cb76d144efd9",
        "parentId" : "8a542123-bc70-4f15-9ef6-85951141f2d7",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "For lists we are paranoid. Why not for non-lists as well, with the same `validateConvertedObject` validation?",
        "createdAt" : "2018-11-09T08:53:59Z",
        "updatedAt" : "2018-11-09T23:57:46Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "d51d0164c5cb1657c98c5823078c38ae5fdfda80",
    "line" : 247,
    "diffHunk" : "@@ -1,1 +245,249 @@\t}\n\n\tif len(response.Response.ConvertedObjects) != len(request.Request.Objects) {\n\t\treturn nil, fmt.Errorf(\"expected %v converted objects, got %v\", len(request.Request.Objects), len(response.Response.ConvertedObjects))\n\t}"
  },
  {
    "id" : "fa37ad91-994d-48bb-81b5-48c0d38a653c",
    "prId" : 67006,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67006#pullrequestreview-173315947",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ef4ebbb-77ed-4362-b387-e1f632ceb13d",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "surprised `u` doesn't have to be a pointer here",
        "createdAt" : "2018-11-08T21:29:14Z",
        "updatedAt" : "2018-11-09T23:57:46Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c4f44ee1-f84d-4660-95d5-c3ef1640c3ef",
        "parentId" : "0ef4ebbb-77ed-4362-b387-e1f632ceb13d",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "code:\r\n\r\n```golang\r\npackage main\r\n\r\nimport \"fmt\"\r\n\r\ntype A struct {value int}\r\ntype AP struct {value int}\r\n\r\nfunc (a A) set(v int) { a.value = v}\r\nfunc (a *AP) set(v int) { a.value = v}\r\nfunc (a A) get() int { return a.value }\r\nfunc (a *AP) get() int { return a.value }\r\n\r\nfunc main() {\r\n        a := A{}\r\n        ap := AP{}\r\n        b := &A{}\r\n        bp := &AP{}\r\n        a.set(10)\r\n        ap.set(12)\r\n        b.set(14)\r\n        bp.set(16)\r\n        fmt.Println(a.get())\r\n        fmt.Println(ap.get())\r\n        fmt.Println(b.get())\r\n        fmt.Println(bp.get())\r\n}\r\n```\r\n\r\noutput:\r\n\r\n```\r\n0\r\n12\r\n0\r\n16\r\n```\r\n\r\nwhich is interesting but in our case, we are fine.",
        "createdAt" : "2018-11-08T22:58:38Z",
        "updatedAt" : "2018-11-09T23:57:46Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      },
      {
        "id" : "2b15d7a8-f1c5-424c-af9b-8a249cf800cb",
        "parentId" : "0ef4ebbb-77ed-4362-b387-e1f632ceb13d",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Why should it be a pointer? The value `u` is addessible (is that the right term in Go semantics) such that the referencing is done implicitly by Go.",
        "createdAt" : "2018-11-09T08:44:38Z",
        "updatedAt" : "2018-11-09T23:57:46Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "d51d0164c5cb1657c98c5823078c38ae5fdfda80",
    "line" : 169,
    "diffHunk" : "@@ -1,1 +167,171 @@\t}\n\tu := unstructured.Unstructured{}\n\terr := u.UnmarshalJSON(rx.Raw)\n\tif err != nil {\n\t\treturn nil, err"
  }
]