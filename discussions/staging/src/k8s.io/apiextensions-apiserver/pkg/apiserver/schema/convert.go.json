[
  {
    "id" : "dd79312e-f1ce-45d2-9cd5-d9bcdcc3e841",
    "prId" : 78829,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78829#pullrequestreview-278689116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff4b8378-5597-454a-8384-28d218cf2bc3",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "is this only run on persisted schemas that should already be valid?",
        "createdAt" : "2019-08-22T14:45:42Z",
        "updatedAt" : "2019-08-23T20:21:15Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "7cd68431-3995-4a40-a81d-e5d9fa6ac437",
        "parentId" : "ff4b8378-5597-454a-8384-28d218cf2bc3",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "it's one of those checks which should never happen because we validate that already in the normal validation. It had the same error string, so I changed it here.",
        "createdAt" : "2019-08-22T21:10:40Z",
        "updatedAt" : "2019-08-23T20:21:15Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fd200c1487b6abea865c164d36882849dce53a6",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +249,253 @@\tif s.XPreserveUnknownFields != nil {\n\t\tif !*s.XPreserveUnknownFields {\n\t\t\treturn nil, fmt.Errorf(\"internal error: 'x-kubernetes-preserve-unknown-fields' must be true or undefined\")\n\t\t}\n\t\tret.XPreserveUnknownFields = true"
  },
  {
    "id" : "3a3b9dd5-7df2-4f9f-80d0-e4e3da0f3de2",
    "prId" : 77207,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77207#pullrequestreview-235657779",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d913d003-7601-421f-9c26-920b8c0912bc",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this is a one-way conversion that intentionally does not preserve the following things: id, schema, ref, patternProperties, dependencies, additionalItems, definitions, externalDocs, example\r\n\r\nFiguring that out required staring hard across four methods.\r\n\r\n* Those happen to be forbidden by specStandardValidatorV3#validate today, but should we ensure those fields are unset (especially patternProperties/additionalItems) when determining if a schema is structural?\r\n* For the fields we do carry over, do we need a round-trip test to ensure we accurately preserve all the data? (something like a fuzz, drop explicitly unsupported fields, then round-trip)",
        "createdAt" : "2019-05-08T14:49:47Z",
        "updatedAt" : "2019-05-09T19:41:12Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e2cf1b63-ebe5-48dc-aee9-75b1b7e16dd6",
        "parentId" : "d913d003-7601-421f-9c26-920b8c0912bc",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I expected to thread fldPath into these methods so we can return the specific field that is problematic, rather than needing to print `...%#v\", s.Items.JSONSchemas`",
        "createdAt" : "2019-05-08T15:08:22Z",
        "updatedAt" : "2019-05-09T19:41:12Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "68f0677a-f2f5-4b3b-83eb-3c333fd02b7a",
        "parentId" : "d913d003-7601-421f-9c26-920b8c0912bc",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "(especially if we're planning to call this and return field errors as part of CRD create/update validation)",
        "createdAt" : "2019-05-08T15:49:16Z",
        "updatedAt" : "2019-05-09T19:41:12Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6b664a37-bfb4-4547-8f72-75f78d795dc1",
        "parentId" : "d913d003-7601-421f-9c26-920b8c0912bc",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "NewStructural errors do not bubble up to the user. All of them are supposed to be caught on validation.",
        "createdAt" : "2019-05-09T07:14:48Z",
        "updatedAt" : "2019-05-09T19:41:12Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "6d10b4e8-5bdc-45e0-b447-4b4f0e6783c6",
        "parentId" : "d913d003-7601-421f-9c26-920b8c0912bc",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Added extra checks `validateUnsupportedFields` for the unsupported fields and added godoc describing what we reject and what we drop.",
        "createdAt" : "2019-05-09T07:27:04Z",
        "updatedAt" : "2019-05-09T19:41:12Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "2f95b5b8-a490-4fb5-b0d6-9cd4f62fa4ec",
        "parentId" : "d913d003-7601-421f-9c26-920b8c0912bc",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> NewStructural errors do not bubble up to the user. All of them are supposed to be caught on validation.\r\n\r\nis that accurate? non-empty Items.JSONSchemas returns an error from NewStructural:\r\n\r\n```go\r\nif s.Items != nil {\r\n\tif len(s.Items.JSONSchemas) > 0 {\r\n\t\t// we validate that it is not an array\r\n\t\treturn nil, fmt.Errorf(\"unexpected items array: %#v\", s.Items.JSONSchemas)\r\n\t}\r\n```\r\n\r\nbut seems to be allowed by API validation today:\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/524169fe1c37dec68cd98ec02bf60317f9fcf497/staging/src/k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/validation/validation.go#L661-L668\r\n\r\nWouldn't that would make the `NewStructural` error present to the user in v1beta1 validation if they used a new feature, or in the condition:\r\n\r\n```\r\n\tif in.Spec.Validation != nil && in.Spec.Validation.OpenAPIV3Schema != nil {\r\n\t\ts, err := schema.NewStructural(in.Spec.Validation.OpenAPIV3Schema)\r\n\t\tif err != nil {\r\n\t\t\tcond.Reason = \"StructuralError\"\r\n\t\t\tcond.Message = fmt.Sprintf(\"failed to check global validation schema: %v\", err)\r\n\t\t\treturn cond\r\n\t\t}\r\n```",
        "createdAt" : "2019-05-09T14:50:28Z",
        "updatedAt" : "2019-05-09T19:41:12Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2d8ce197-20e6-4862-9f2c-696e966e78ce",
        "parentId" : "d913d003-7601-421f-9c26-920b8c0912bc",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "given that errors from here bubble into the condition message, I think we should not print with \"%#v\" and should indicate the problematic field path instead",
        "createdAt" : "2019-05-09T14:52:20Z",
        "updatedAt" : "2019-05-09T19:41:12Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ead0e720-7434-464f-ab06-23cb4dfdcd33",
        "parentId" : "d913d003-7601-421f-9c26-920b8c0912bc",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "There is a second check: https://github.com/kubernetes/kubernetes/blob/524169fe1c37dec68cd98ec02bf60317f9fcf497/staging/src/k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/validation/validation.go#L722\r\n",
        "createdAt" : "2019-05-09T15:02:52Z",
        "updatedAt" : "2019-05-09T19:41:12Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "fed35c32-fccc-4239-854e-7113ebbb95b4",
        "parentId" : "d913d003-7601-421f-9c26-920b8c0912bc",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "ah, ok. then just drop the %#v",
        "createdAt" : "2019-05-09T15:13:18Z",
        "updatedAt" : "2019-05-09T19:41:12Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "bc8670f4-8ae6-4dee-a9ed-8c2d3f873159",
        "parentId" : "d913d003-7601-421f-9c26-920b8c0912bc",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I removed the schema from the errors, made them easier to understand (`OpenAPIV3Schema 'items' must be a schema, but is an array`), but remove the value from the output.",
        "createdAt" : "2019-05-09T15:23:26Z",
        "updatedAt" : "2019-05-09T19:41:12Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "c836a2518913c90d266fdd3919fabc55b6893b63",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +39,43 @@// - externalDocs\n// - example.\nfunc NewStructural(s *apiextensions.JSONSchemaProps) (*Structural, error) {\n\tif s == nil {\n\t\treturn nil, nil"
  }
]