[
  {
    "id" : "f0c6abb8-fdd6-42d3-b713-ecb6686d4eaf",
    "prId" : 99661,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99661#pullrequestreview-606670024",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d936b6a5-216e-4bc5-a1b8-7299dedb9c15",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "@liggitt Is it normal that we set-up the status thing here even though the `subresource` and `subresources.Status` fields are nil above in the set-up?",
        "createdAt" : "2021-03-05T03:51:06Z",
        "updatedAt" : "2021-03-10T01:02:29Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "1f36492e-602e-4bb1-9462-004430a17a3b",
        "parentId" : "d936b6a5-216e-4bc5-a1b8-7299dedb9c15",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "These shallow copies seem extremely sketchy, but everything appears to be just barely not wrong.",
        "createdAt" : "2021-03-08T20:15:40Z",
        "updatedAt" : "2021-03-10T01:02:29Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1fac8cbd9289d95db4831a83239292ed56ce59d",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +901,905 @@\t\t// shallow copy\n\t\tstatusScope := *requestScopes[v.Name]\n\t\tstatusScope.Subresource = \"status\"\n\t\tstatusScope.Namer = handlers.ContextBasedNaming{\n\t\t\tSelfLinker:         meta.NewAccessor(),"
  },
  {
    "id" : "b0df787d-8287-4246-be7f-d7a76f158c5d",
    "prId" : 99661,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99661#pullrequestreview-606794623",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f632bee-eba8-4525-83f0-b70081f531bb",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "We should probably only attach this `FieldManager` if `subresource != nil && subresource.Status != nil`, that'd remove the weird nil-test in `scopeWithFieldManager`",
        "createdAt" : "2021-03-08T23:13:18Z",
        "updatedAt" : "2021-03-10T01:02:29Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1fac8cbd9289d95db4831a83239292ed56ce59d",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +911,915 @@\t\tif utilfeature.DefaultFeatureGate.Enabled(features.ServerSideApply) && subresources != nil && subresources.Status != nil {\n\t\t\tresetFields := storages[v.Name].Status.GetResetFields()\n\t\t\tstatusScope, err = scopeWithFieldManager(\n\t\t\t\ttypeConverter,\n\t\t\t\tstatusScope,"
  },
  {
    "id" : "e923147f-26c3-4c4f-82c0-2528d3884c88",
    "prId" : 99199,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99199#pullrequestreview-593598016",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02f69e75-6f71-4ffc-90ee-740c71141d13",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "would you change all wait logic for CRDs in the tests? And if yes, how?",
        "createdAt" : "2021-02-18T13:59:09Z",
        "updatedAt" : "2021-02-19T13:41:29Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "10e601ac-905d-4d8f-82fc-e5910448b7a3",
        "parentId" : "02f69e75-6f71-4ffc-90ee-740c71141d13",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> would you change all wait logic for CRDs in the tests? And if yes, how?\r\n\r\nour client retries on 429.  I don't think they need to update.  If they do, this approach is bad.",
        "createdAt" : "2021-02-18T15:16:06Z",
        "updatedAt" : "2021-02-19T13:41:29Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "b4556196-8a2b-4a3b-8eb3-a5500aecf155",
        "parentId" : "02f69e75-6f71-4ffc-90ee-740c71141d13",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "kubectl doesn't. why would we fail this instead of holding the request for 2 seconds?",
        "createdAt" : "2021-02-18T18:30:38Z",
        "updatedAt" : "2021-02-19T13:41:29Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "3bb489db-d43e-4327-816f-50edee02d113",
        "parentId" : "02f69e75-6f71-4ffc-90ee-740c71141d13",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "switched to sleep",
        "createdAt" : "2021-02-18T20:01:42Z",
        "updatedAt" : "2021-02-19T13:41:29Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddd782ba1c55afd140b75ae348f1e6e928c46687",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +403,407 @@\t\tif justCreated {\n\t\t\ttime.Sleep(2 * time.Second)\n\t\t}\n\t\tif terminating {\n\t\t\terr := apierrors.NewMethodNotSupported(schema.GroupResource{Group: requestInfo.APIGroup, Resource: requestInfo.Resource}, requestInfo.Verb)"
  },
  {
    "id" : "abcf0cff-927f-456e-9f6c-5ebea8c2c410",
    "prId" : 99199,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99199#pullrequestreview-595239134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da809be6-7b68-4bcc-82f1-500c9c76a326",
        "parentId" : null,
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "> 5. server1 has not observed CRD established for whatever reason and returns a 404\r\n\r\n@deads2k could we read a CRD directly from the etcd (not from the cache) on a 404 instead of sleeping?\r\n\r\nreading from highly consistent storage is guaranteed to return the same result for all APIs whereas sleeping is not.",
        "createdAt" : "2021-02-19T09:18:36Z",
        "updatedAt" : "2021-02-19T13:41:29Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      },
      {
        "id" : "62276f01-c803-4e90-a5b5-8fd2ebf54c1b",
        "parentId" : "da809be6-7b68-4bcc-82f1-500c9c76a326",
        "authorId" : "5e225159-999d-430a-8b58-d5220dc1429d",
        "body" : "IMO, if not reading it from etcd here, there may be a performance issue with a large number of CRD creations. ",
        "createdAt" : "2021-02-19T09:50:58Z",
        "updatedAt" : "2021-02-19T13:41:29Z",
        "lastEditedBy" : "5e225159-999d-430a-8b58-d5220dc1429d",
        "tags" : [
        ]
      },
      {
        "id" : "fd171935-8b5d-46ec-8e88-0340a0216b7e",
        "parentId" : "da809be6-7b68-4bcc-82f1-500c9c76a326",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> IMO, if not reading it from etcd here, there may be a performance issue with a large number of CRD creations.\r\n\r\nI don't see a perf issue.  For two seconds after CRD creation, CRs cannot be created.  Since the process is already asynchronous, clients have to deal failures.  This doesn't even fail, it simply holds the first few.  Over the lifespan of a CRD it doesn't matter.",
        "createdAt" : "2021-02-19T13:25:36Z",
        "updatedAt" : "2021-02-19T13:41:29Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "1a2f4667-dfbb-4910-93ab-d4039ab18f65",
        "parentId" : "da809be6-7b68-4bcc-82f1-500c9c76a326",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> @deads2k could we read a CRD directly from the etcd (not from the cache) on a 404 instead of sleeping?\r\n\r\nAssuming you are talking about server1's delete call, that means that for every call while not established or accepted would result in an additional API call.  That tradeoff seems excessively costly for the problem.",
        "createdAt" : "2021-02-19T13:33:26Z",
        "updatedAt" : "2021-02-19T13:41:29Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "989da8ff-ee4a-4a56-9a4f-af1b5e45d129",
        "parentId" : "da809be6-7b68-4bcc-82f1-500c9c76a326",
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "I was referring to https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apiextensions-apiserver/pkg/apiserver/customresource_handler.go#L277 unless it can fail in a different place.",
        "createdAt" : "2021-02-19T13:40:53Z",
        "updatedAt" : "2021-02-19T13:41:29Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      },
      {
        "id" : "d165f4d8-6d2c-4d71-b161-539c935d8dea",
        "parentId" : "da809be6-7b68-4bcc-82f1-500c9c76a326",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I was referring to https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apiextensions-apiserver/pkg/apiserver/customresource_handler.go#L277 unless it can fail in a different place.\r\n\r\nA live get for resources that don't exist isn't worth the tradeoff here.",
        "createdAt" : "2021-02-19T14:32:28Z",
        "updatedAt" : "2021-02-19T14:32:28Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "0e70a9a7-e2dd-4eb6-aec1-1957626f8ea8",
        "parentId" : "da809be6-7b68-4bcc-82f1-500c9c76a326",
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "I have just realized that it can also fail on\r\n\r\n1. CRD is created\r\n2. server0 observes established\r\n3. client creates a CR instance on server1\r\n4. server1 has not observed CRD established for whatever reason and returns a 404\r\n5. client is confused",
        "createdAt" : "2021-02-19T15:20:11Z",
        "updatedAt" : "2021-02-19T15:20:11Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      },
      {
        "id" : "ee6cc771-421e-4a82-91b3-f3774b1c8572",
        "parentId" : "da809be6-7b68-4bcc-82f1-500c9c76a326",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "right, CRD creation and CR success is still not race-free. But this is a little better than \"CR create success followed by CR 404\".",
        "createdAt" : "2021-02-22T11:09:45Z",
        "updatedAt" : "2021-02-22T11:09:45Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddd782ba1c55afd140b75ae348f1e6e928c46687",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +402,406 @@\t\tjustCreated := time.Since(apiextensionshelpers.FindCRDCondition(crd, apiextensionsv1.Established).LastTransitionTime.Time) < 2*time.Second\n\t\tif justCreated {\n\t\t\ttime.Sleep(2 * time.Second)\n\t\t}\n\t\tif terminating {"
  },
  {
    "id" : "e26e568d-fe8b-4236-b4ed-71b4a2d32193",
    "prId" : 98377,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98377#pullrequestreview-638323331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "265408ca-8a3b-4d34-aa6d-506a8f22c0d5",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "It's a little unfortunate that we won't be able to find the replicas field in versions that don't have the \"Scale\" sub-resource. I guess it's fine to mostly just ignore this and assume they don't have it.",
        "createdAt" : "2021-04-14T21:48:21Z",
        "updatedAt" : "2021-04-21T18:29:58Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "79a00d9e-e802-4797-8c4e-c57f1e22d6ee",
        "parentId" : "265408ca-8a3b-4d34-aa6d-506a8f22c0d5",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "But is the scale handler going to gently ignore these, or is it going to remove their entire entry?",
        "createdAt" : "2021-04-15T19:07:17Z",
        "updatedAt" : "2021-04-21T18:29:58Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "8dcbbb2f-cbd1-4994-8d86-389d80bc2302",
        "parentId" : "265408ca-8a3b-4d34-aa6d-506a8f22c0d5",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "We absolutely have to fix that.",
        "createdAt" : "2021-04-16T03:36:09Z",
        "updatedAt" : "2021-04-21T18:29:58Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "eac0e954-f23c-4e91-aacf-78f219e242f8",
        "parentId" : "265408ca-8a3b-4d34-aa6d-506a8f22c0d5",
        "authorId" : "540c9da6-54d6-4aa0-9866-a6aa2187b553",
        "body" : "That's a good point. \r\n\r\nA possible solution would be for the scale handler to always ignore entries with version it doesn't know about, instead of dropping. This would apply for both CRs and other resources.  That would be inconsistent with `Apply`, I think.\r\n\r\nAnother way would be to somehow limit this behaviour to CRs, by passing some parameter down to the scale handler, so that we have a different logic for custom resources. I am not sure I like that though.",
        "createdAt" : "2021-04-16T07:28:29Z",
        "updatedAt" : "2021-04-21T18:29:58Z",
        "lastEditedBy" : "540c9da6-54d6-4aa0-9866-a6aa2187b553",
        "tags" : [
        ]
      },
      {
        "id" : "ac238af1-ce1c-4eae-9b50-f08f02be4cd1",
        "parentId" : "265408ca-8a3b-4d34-aa6d-506a8f22c0d5",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "I think there is a difference between versions that don't exist and versions that don't have a scale subresource.",
        "createdAt" : "2021-04-16T16:27:58Z",
        "updatedAt" : "2021-04-21T18:29:58Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "bdef1b76-b2f5-49a7-9ad5-06c2f9aab4f3",
        "parentId" : "265408ca-8a3b-4d34-aa6d-506a8f22c0d5",
        "authorId" : "540c9da6-54d6-4aa0-9866-a6aa2187b553",
        "body" : "Right, what about https://github.com/kubernetes/kubernetes/pull/98377/commits/1f1d9387ef0d3051d560b4c2bcbdc6bb7d45db60. \r\n\r\nBasically, I am adding an empty path to all CR versions that don't have `scale`. The assumption is that manage fields entries won't ever have an empty path, so those entries just gets ignored [here](https://github.com/nodo/kubernetes/blob/scale-ownership-tracking-deployment/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/fieldmanager/scalehandler.go#L121-L124)",
        "createdAt" : "2021-04-18T12:00:16Z",
        "updatedAt" : "2021-04-21T18:29:58Z",
        "lastEditedBy" : "540c9da6-54d6-4aa0-9866-a6aa2187b553",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b666a61a170f61c7e223085478b24a03612fa99",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +709,713 @@\t\t\treturn nil, fmt.Errorf(\"the server could not properly serve the CR subresources\")\n\t\t}\n\t\tif subresources == nil || subresources.Scale == nil {\n\t\t\treplicasPathInCustomResource[schema.GroupVersion{Group: crd.Spec.Group, Version: v.Name}.String()] = nil\n\t\t\tcontinue"
  },
  {
    "id" : "da28ce98-91ba-4cc4-bbcd-87b1b0187859",
    "prId" : 92329,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92329#pullrequestreview-436978039",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4450fcf7-076a-4bd0-9cda-57ea5854e28d",
        "parentId" : null,
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "Dumb question: is it okay for `agent` to be empty here? ",
        "createdAt" : "2020-06-24T20:19:48Z",
        "updatedAt" : "2020-06-24T22:08:20Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      },
      {
        "id" : "607d93ec-85e7-44c7-99b8-bb3467eb34d8",
        "parentId" : "4450fcf7-076a-4bd0-9cda-57ea5854e28d",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "yes, when we generate the header, an agent of \"\" is serialized as `-`. this matches how we produce the deprecated warnings for in-tree types",
        "createdAt" : "2020-06-24T20:22:04Z",
        "updatedAt" : "2020-06-24T22:08:20Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "30e39c71e2e5c5d6bb3fd64c71571a04beef5368",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +332,336 @@\tif utilfeature.DefaultFeatureGate.Enabled(features.WarningHeaders) {\n\t\tfor _, w := range crdInfo.warnings[requestInfo.APIVersion] {\n\t\t\twarning.AddWarning(req.Context(), \"\", w)\n\t\t}\n\t}"
  },
  {
    "id" : "02232636-fe32-436f-9a89-052ce83d540e",
    "prId" : 92329,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92329#pullrequestreview-441002435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c1f25c1-5b50-42a8-bbaa-fdc9ea02792b",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "versions for CRDs mapping to kube versions somehow seems weird.  I'd rather avoid this entire method by requiring the deprecation string.",
        "createdAt" : "2020-07-01T15:58:16Z",
        "updatedAt" : "2020-07-01T15:58:16Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "c5d319ed-b078-4211-bb5b-5caaaac307a8",
        "parentId" : "4c1f25c1-5b50-42a8-bbaa-fdc9ea02792b",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "This is following the same rules we already follow when determining the order we present the CRD versions in discovery",
        "createdAt" : "2020-07-01T15:59:03Z",
        "updatedAt" : "2020-07-01T15:59:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "30e39c71e2e5c5d6bb3fd64c71571a04beef5368",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +914,918 @@}\n\nfunc defaultDeprecationWarning(deprecatedVersion string, crd apiextensionsv1.CustomResourceDefinitionSpec) string {\n\tmsg := fmt.Sprintf(\"%s/%s %s is deprecated\", crd.Group, deprecatedVersion, crd.Names.Kind)\n"
  },
  {
    "id" : "ab9ff02d-bc26-4e49-be14-b5aaadac14ca",
    "prId" : 82045,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82045#pullrequestreview-280505348",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eab99e7d-86f0-4c6b-90f0-fc5cf73dcec4",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Needs an issue and a TODO referencing the issue, otherwise it'll be very mysterious to future readers.",
        "createdAt" : "2019-08-27T22:25:42Z",
        "updatedAt" : "2019-08-27T22:37:54Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "bca96a89-2684-4299-8619-74d59c757407",
        "parentId" : "eab99e7d-86f0-4c6b-90f0-fc5cf73dcec4",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "Good point, doing now",
        "createdAt" : "2019-08-27T22:26:50Z",
        "updatedAt" : "2019-08-27T22:37:54Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "6652091b63c9d9bc3b8826fc12b60416ba99e20c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +823,827 @@\t\t}\n\t\t// TODO(issues.k8s.io/82046): We can't effectively track ownership on scale requests yet.\n\t\tscaleScope.FieldManager = nil\n\t\tscaleScopes[v.Name] = &scaleScope\n"
  },
  {
    "id" : "6f81de5d-1a25-449b-9b75-173e9775b984",
    "prId" : 80852,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80852#pullrequestreview-269550108",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d043b1f5-a981-45e5-9b27-360751423e20",
        "parentId" : null,
        "authorId" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "body" : "Needs bazel update because of this change",
        "createdAt" : "2019-08-01T07:49:41Z",
        "updatedAt" : "2019-08-01T11:13:02Z",
        "lastEditedBy" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "tags" : [
        ]
      },
      {
        "id" : "6cf3b569-4c3a-4e17-8363-6c4fa0baff65",
        "parentId" : "d043b1f5-a981-45e5-9b27-360751423e20",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "updated",
        "createdAt" : "2019-08-01T11:13:05Z",
        "updatedAt" : "2019-08-01T11:13:05Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "e060d5805200c96da9052af1c5cfd8d683f42ac8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +44,48 @@\t\"k8s.io/apimachinery/pkg/types\"\n\tutilruntime \"k8s.io/apimachinery/pkg/util/runtime\"\n\t\"k8s.io/apimachinery/pkg/util/sets\"\n\t\"k8s.io/apiserver/pkg/admission\"\n\t\"k8s.io/apiserver/pkg/endpoints/handlers\""
  },
  {
    "id" : "976d5a14-2cf6-40dc-b219-d0f7fa6b36c4",
    "prId" : 80851,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80851#pullrequestreview-269550152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac1149cd-8323-4638-b69c-0089dc9b3edb",
        "parentId" : null,
        "authorId" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "body" : "Looks like the build is failing because this change needs a bazel update",
        "createdAt" : "2019-08-01T07:45:39Z",
        "updatedAt" : "2019-08-01T11:12:17Z",
        "lastEditedBy" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "tags" : [
        ]
      },
      {
        "id" : "0ab6bf50-80bd-47a8-9d2f-ec7c12b5f18c",
        "parentId" : "ac1149cd-8323-4638-b69c-0089dc9b3edb",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "updated",
        "createdAt" : "2019-08-01T11:13:12Z",
        "updatedAt" : "2019-08-01T11:13:12Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "449163c33576d5d883cf67442618ee53400ebe59",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +53,57 @@\t\"k8s.io/apimachinery/pkg/types\"\n\tutilruntime \"k8s.io/apimachinery/pkg/util/runtime\"\n\t\"k8s.io/apimachinery/pkg/util/sets\"\n\t\"k8s.io/apiserver/pkg/admission\"\n\t\"k8s.io/apiserver/pkg/authorization/authorizer\""
  },
  {
    "id" : "91279670-4f6a-49ae-b951-3e9b6cd80980",
    "prId" : 79114,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79114#pullrequestreview-254146539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a5b4ab5-d3eb-49d3-a7b6-9e096e38ba13",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "would it be simpler to reorder this:\r\n\r\n```golang\r\n\tif oldCRD.UID != newCRD.UID {\r\n\t\tr.removeStorage_locked(oldCRD.UID)\r\n\t}\r\n\r\n\tstorageMap := r.customStorage.Load().(crdStorageMap)\r\n\toldInfo, found := storageMap[newCRD.UID]\r\n\tif !found {\r\n\t\treturn\r\n\t}\r\n\tif apiequality.Semantic.DeepEqual(&newCRD.Spec, oldInfo.spec) && apiequality.Semantic.DeepEqual(&newCRD.Status.AcceptedNames, oldInfo.acceptedNames) {\r\n\t\tklog.V(6).Infof(\"Ignoring customresourcedefinition %s update because neither spec, nor accepted names changed\", oldCRD.Name)\r\n\t\treturn\r\n\t}\r\n\r\n\tklog.V(4).Infof(\"Updating customresourcedefinition %s\", newCRD.Name)\r\n\tr.removeStorage_locked(newCRD.UID)\r\n```",
        "createdAt" : "2019-06-25T17:07:22Z",
        "updatedAt" : "2019-06-26T02:28:32Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c452a7fa1ce64325a8c9414f85b58e0d04288a33",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +404,408 @@\t}\n\n\tstorageMap := r.customStorage.Load().(crdStorageMap)\n\toldInfo, found := storageMap[newCRD.UID]\n\tif !found {"
  },
  {
    "id" : "f8fe3bf8-112e-46ad-81f5-5c9429fdc299",
    "prId" : 79114,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79114#pullrequestreview-254146539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8efc3a45-bf86-4461-9fcd-a7c71dd1af75",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "if getOrCreateServingInfoFor is not using the passed-in CRD, make that obvious by only passing in the name and uid",
        "createdAt" : "2019-06-25T21:38:30Z",
        "updatedAt" : "2019-06-26T02:28:32Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c452a7fa1ce64325a8c9414f85b58e0d04288a33",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +518,522 @@\tdefer r.customStorageLock.Unlock()\n\n\t// Get the up-to-date CRD when we have the lock, to avoid racing with updateCustomResourceDefinition.\n\t// If updateCustomResourceDefinition sees an update and happens later, the storage will be deleted and\n\t// we will re-create the updated storage on demand. If updateCustomResourceDefinition happens before,"
  },
  {
    "id" : "1866ec01-4931-4677-b834-eb2303cfa2dc",
    "prId" : 79114,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79114#pullrequestreview-254288294",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3d56805-0ca9-426b-bfff-ed3277094367",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this seems the most likely cause of the flake to me",
        "createdAt" : "2019-06-25T21:40:01Z",
        "updatedAt" : "2019-06-26T02:28:32Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c6918a91-ab44-4d38-9a08-78544ae12f4e",
        "parentId" : "c3d56805-0ca9-426b-bfff-ed3277094367",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "yes",
        "createdAt" : "2019-06-25T21:48:11Z",
        "updatedAt" : "2019-06-26T02:28:32Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      }
    ],
    "commit" : "c452a7fa1ce64325a8c9414f85b58e0d04288a33",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +521,525 @@\t// If updateCustomResourceDefinition sees an update and happens later, the storage will be deleted and\n\t// we will re-create the updated storage on demand. If updateCustomResourceDefinition happens before,\n\t// we make sure that we observe the same up-to-date CRD.\n\tcrd, err := r.crdLister.Get(name)\n\tif err != nil {"
  },
  {
    "id" : "848e6cee-184e-416c-9bc3-774b547c79e9",
    "prId" : 79114,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79114#pullrequestreview-254738810",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34daa041-8f21-4d95-9ffe-599cbf8ced11",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "getOrCreateServingInfoFor now has the ability to return a NotFound error. Handle that here the same way we do above",
        "createdAt" : "2019-06-25T23:00:56Z",
        "updatedAt" : "2019-06-26T02:28:32Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "27d9eeae-4b51-48e4-8548-06b9d22e3ee4",
        "parentId" : "34daa041-8f21-4d95-9ffe-599cbf8ced11",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "also ensure the crdInfo.spec contains a served version for the requested api version, and if it does not, handle it the same way we do above",
        "createdAt" : "2019-06-25T23:01:34Z",
        "updatedAt" : "2019-06-26T02:28:32Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "aadae037-20d8-450c-9b1b-e3fbcfbf68aa",
        "parentId" : "34daa041-8f21-4d95-9ffe-599cbf8ced11",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "updated\r\n\r\nI assume we don't re-check the [conditions](https://github.com/kubernetes/kubernetes/blob/70b1c436576d8fe778e7f8cf8975ce89b8ade9f0/staging/src/k8s.io/apiextensions-apiserver/pkg/apiserver/customresource_handler.go#L238-L248) because they are in status. The race in status update always exists and it's unrelated to the informer in this PR",
        "createdAt" : "2019-06-25T23:53:04Z",
        "updatedAt" : "2019-06-26T02:28:32Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      },
      {
        "id" : "0942bfd9-885e-4561-b0f8-4f635f2cf154",
        "parentId" : "34daa041-8f21-4d95-9ffe-599cbf8ced11",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "correct",
        "createdAt" : "2019-06-26T16:39:31Z",
        "updatedAt" : "2019-06-26T16:39:35Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c452a7fa1ce64325a8c9414f85b58e0d04288a33",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +249,253 @@\tterminating := apiextensions.IsCRDConditionTrue(crd, apiextensions.Terminating)\n\n\tcrdInfo, err := r.getOrCreateServingInfoFor(crd.UID, crd.Name)\n\tif apierrors.IsNotFound(err) {\n\t\tr.delegate.ServeHTTP(w, req)"
  },
  {
    "id" : "83b6d57d-1cff-4c50-bbba-ebc6a0b18970",
    "prId" : 77817,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77817#pullrequestreview-243522986",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51325ee1-7bb6-46d6-bd2a-bd7bd61d7ba0",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "would it be clearer to put some sort of attribute on SerializerInfo indicating it can only be used for specific types, and then check in `acceptMediaTypeOptions` in the non-conversion case if the incoming `accepts` info allows an unconverted use?",
        "createdAt" : "2019-05-29T19:58:57Z",
        "updatedAt" : "2019-05-30T23:13:42Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ac5c5cf1-6906-488b-ac82-bb17c9d199b8",
        "parentId" : "51325ee1-7bb6-46d6-bd2a-bd7bd61d7ba0",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Then we have to put two serializer infos with the same media type.  Didn’t want to do that today, because callers assume serializer info media type is unique.",
        "createdAt" : "2019-05-29T21:18:41Z",
        "updatedAt" : "2019-05-30T23:13:42Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "26a6cdda86f054c7b3dcc2176f90952684950af6",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +775,779 @@\t\t\tSerializer:       json.NewYAMLSerializer(json.DefaultMetaFactory, s.creator, s.typer),\n\t\t},\n\t\t{\n\t\t\tMediaType:        \"application/vnd.kubernetes.protobuf\",\n\t\t\tMediaTypeType:    \"application\","
  },
  {
    "id" : "b970a934-e33e-4e44-9bca-340e9f81180a",
    "prId" : 77816,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77816#pullrequestreview-237037524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7dca8e3b-f242-44de-b0ce-e89d9e202a4e",
        "parentId" : null,
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Too bad we can't context cancel the in-flight requests.",
        "createdAt" : "2019-05-13T17:39:48Z",
        "updatedAt" : "2019-05-13T19:40:20Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "d38dfe32-3014-4501-bcbe-d3e458ff2a34",
        "parentId" : "7dca8e3b-f242-44de-b0ce-e89d9e202a4e",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "they'll get timed out at the configured request timeout by https://github.com/kubernetes/kubernetes/blob/0252a323423080a3a230ab3053fdaaca8a972eb1/staging/src/k8s.io/apiserver/pkg/server/config.go#L552",
        "createdAt" : "2019-05-13T19:29:23Z",
        "updatedAt" : "2019-05-13T19:40:20Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2cf119de-75b2-4a74-adef-eb62f8087918",
        "parentId" : "7dca8e3b-f242-44de-b0ce-e89d9e202a4e",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "ah, nice",
        "createdAt" : "2019-05-14T05:53:23Z",
        "updatedAt" : "2019-05-14T05:53:23Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee215ba705500c864f207668a0ba1309e0880cfb",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +441,445 @@\t\ttime.Sleep(time.Second)\n\t\t// Wait for in-flight requests to drain\n\t\toldInfo.waitGroup.Wait()\n\t}()\n"
  },
  {
    "id" : "c7298cb6-fd42-4071-af6b-5932cfffa70d",
    "prId" : 77816,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77816#pullrequestreview-236820683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "987e3f53-cc3c-4d6f-9f46-2aaaa220f8df",
        "parentId" : null,
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Great! This is much cleaner than the decorator.",
        "createdAt" : "2019-05-13T17:45:54Z",
        "updatedAt" : "2019-05-13T19:40:20Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee215ba705500c864f207668a0ba1309e0880cfb",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +274,278 @@\tif handlerFunc != nil {\n\t\thandlerFunc = metrics.InstrumentHandlerFunc(verb, requestInfo.APIGroup, requestInfo.APIVersion, resource, subresource, scope, metrics.APIServerComponent, handlerFunc)\n\t\thandler := genericfilters.WithWaitGroup(handlerFunc, longRunningFilter, crdInfo.waitGroup)\n\t\thandler.ServeHTTP(w, req)\n\t\treturn"
  },
  {
    "id" : "8dce9716-027a-4d0f-a237-73d29ed3efda",
    "prId" : 77816,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77816#pullrequestreview-236878344",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c4a1c87-5d06-4f9a-8dbc-6c84d2405fef",
        "parentId" : null,
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Comment here on why tearing down rest storage in the presence of watches is safe?",
        "createdAt" : "2019-05-13T17:46:46Z",
        "updatedAt" : "2019-05-13T19:40:20Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "3d8d2fb5-6d39-4d47-b0d2-c21c2895fe37",
        "parentId" : "3c4a1c87-5d06-4f9a-8dbc-6c84d2405fef",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "added a comment. for what it's worth, I have an expanded version of this test locally that also starts watches to make sure they get terminated cleanly. that recreates the watch hang bug. once this merges, I'll get that in a PR for use in verifying the watch hang when we fix that",
        "createdAt" : "2019-05-13T19:41:02Z",
        "updatedAt" : "2019-05-13T19:41:02Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee215ba705500c864f207668a0ba1309e0880cfb",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +183,187 @@// both on the server-side (by terminating the watch connection)\n// and on the client side (by restarting the watch)\nvar longRunningFilter = genericfilters.BasicLongRunningRequestCheck(sets.NewString(\"watch\"), sets.NewString())\n\nfunc (r *crdHandler) ServeHTTP(w http.ResponseWriter, req *http.Request) {"
  },
  {
    "id" : "a47b1c14-2851-4970-9dc1-7b4ffc2b8c60",
    "prId" : 77558,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77558#pullrequestreview-243232139",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba14f4f1-edbe-4919-a2dc-cd88bb7d041e",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "@liggitt fyi, this was missing: the defaulting on the way in.",
        "createdAt" : "2019-05-29T12:45:10Z",
        "updatedAt" : "2019-05-29T13:04:51Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbd192041d958cbe57f12e9d1c107798c30831be",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +773,777 @@func (s unstructuredNegotiatedSerializer) DecoderToVersion(decoder runtime.Decoder, gv runtime.GroupVersioner) runtime.Decoder {\n\td := schemaCoercingDecoder{delegate: decoder, validator: unstructuredSchemaCoercer{structuralSchemas: s.structuralSchemas, structuralSchemaGK: s.structuralSchemaGK, preserveUnknownFields: s.preserveUnknownFields}}\n\treturn versioning.NewCodec(nil, d, runtime.UnsafeObjectConvertor(Scheme), Scheme, Scheme, unstructuredDefaulter{\n\t\tdelegate:           Scheme,\n\t\tstructuralSchemas:  s.structuralSchemas,"
  },
  {
    "id" : "b8236f61-54c2-4eac-b6bb-d74aaa53a485",
    "prId" : 77354,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77354#pullrequestreview-281139524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f34bed68-e81b-4fc3-8e3d-2304675cabb7",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "missing disabling of server-side apply patch type for non-structural schemas, compare https://github.com/kubernetes/kubernetes/pull/79433/commits/437dd2084d60ea084e2b5ef398a522e996cc4c3d#diff-2f720a7e61a4ddfcfe9a9e353be8784bR333",
        "createdAt" : "2019-08-26T18:33:08Z",
        "updatedAt" : "2019-08-30T05:49:16Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "ca73e36e-9e58-4769-a12d-09d91411531f",
        "parentId" : "f34bed68-e81b-4fc3-8e3d-2304675cabb7",
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "I didn't know if we wanted to do that, since currently we already have server side apply for non structural crds, it just treats it as a map of maps, with any lists being atomic",
        "createdAt" : "2019-08-26T19:44:22Z",
        "updatedAt" : "2019-08-30T05:49:16Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      },
      {
        "id" : "fcb28bcc-e80f-4ba6-b510-a08dbec618d8",
        "parentId" : "f34bed68-e81b-4fc3-8e3d-2304675cabb7",
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "And client side apply also supports non structural crds in this same way",
        "createdAt" : "2019-08-26T19:44:57Z",
        "updatedAt" : "2019-08-30T05:49:16Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      },
      {
        "id" : "9724f892-e525-4f0c-bfd8-01925a0301a1",
        "parentId" : "f34bed68-e81b-4fc3-8e3d-2304675cabb7",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "We want SSA to make assumptions for schemaless CRDs and not fail.",
        "createdAt" : "2019-08-26T23:16:37Z",
        "updatedAt" : "2019-08-30T05:49:16Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "874bfb4b-b2d5-477f-ba6a-6d500b965136",
        "parentId" : "f34bed68-e81b-4fc3-8e3d-2304675cabb7",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Schemaless does not exist anymore in v1. There is always a schema, even if it says \"everything is raw json\".\r\n\r\nWe have been very strict to restrict any new feature to structural CRDs, with defaulting even to v1. I don't see why server-side-apply is any different.",
        "createdAt" : "2019-08-27T05:14:31Z",
        "updatedAt" : "2019-08-30T05:49:16Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "d7895bff-5db3-41a7-9353-1c4b082efd87",
        "parentId" : "f34bed68-e81b-4fc3-8e3d-2304675cabb7",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "One technical reason: go-openapi will go away. We will always go through our `*Structural` type. I don't want server-side apply code here to hold us back, forcing us to maintain legacy code paths, for a new feature in 1.16. That doesn't make sense.",
        "createdAt" : "2019-08-27T05:17:30Z",
        "updatedAt" : "2019-08-30T05:49:16Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "93e36b86-7c33-4f21-befa-a879baf084df",
        "parentId" : "f34bed68-e81b-4fc3-8e3d-2304675cabb7",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I originally shared your view--that a complete schema is necessary--but @erictune and others convinced us quite some time ago that it is a requirement for SSA to function on all CRDs, degraded if necessary. (Sadly, I can't find convincing documentation of when we took this position other than the [code](https://github.com/kubernetes/kubernetes/pull/72947/files#diff-438c18fccd3899026928547522f80743R66).) Users of the API can't always affect how the CRD is written, and if you're unable to use serverside apply on some resources, you are forced to use client side apply and/or write a script to tell the difference. Not to mention, programmatic clients have no fallback at all.\r\n\r\nIn other words, we can't use SSA as a stick to force people to fix their CRDs, because the users are not the CRD authors; it's just punishing the users.\r\n\r\nI don't see why removing go-openapi should block anything; the smd.Schema is super easy to produce. We're happy to write whatever conversion functions are necessary to unblock you on that.\r\n\r\n(It seems that SSA is already enabled for all CRDs in guess mode, and this PR permits it to take advantage of a schema if it exists. If we block this PR, the schemas will actually just be much less useful. It seems weird to block enabling use of a schema on the grounds that we're not turning it off for non-structural CRDs, when it's already on for them in guess mode anyway. Is that really what you're asking for?)",
        "createdAt" : "2019-08-27T16:29:56Z",
        "updatedAt" : "2019-08-30T05:49:16Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a90e8968-b46b-4996-9758-ef2520d5fa33",
        "parentId" : "f34bed68-e81b-4fc3-8e3d-2304675cabb7",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Maybe I lack understanding here. So you are saying the feature makes sense for users who consume a 3rdparty CRD that is old and uncontrollable by them. So these users use server-side-apply against those CRs and the 3rdparty controller does not, i.e. uses normal Update or Patch. Those users will still benefit from SSA? The old controller will not interfere with those users?",
        "createdAt" : "2019-08-27T19:01:36Z",
        "updatedAt" : "2019-08-30T05:49:16Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "6d1da7b9-1b2e-4e0b-ab21-b41d80e7af66",
        "parentId" : "f34bed68-e81b-4fc3-8e3d-2304675cabb7",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yes, absolutely. The built-in apis are all in that exact state!",
        "createdAt" : "2019-08-27T19:18:09Z",
        "updatedAt" : "2019-08-30T05:49:16Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "89fce81e-ce1b-4a96-b607-dcd65748f7b8",
        "parentId" : "f34bed68-e81b-4fc3-8e3d-2304675cabb7",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Ok, then I see the point.\r\n\r\n@jennybuckley we need tests for these cases then: 1) no schema 2) non-structural schema 3) structural schema. Not sure which of these we cover already.",
        "createdAt" : "2019-08-28T07:26:58Z",
        "updatedAt" : "2019-08-30T05:49:16Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "9899c8b5-3a98-4dd3-b572-b551651dda3a",
        "parentId" : "f34bed68-e81b-4fc3-8e3d-2304675cabb7",
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "@sttts I added test cases for these, the only one which wasn't tested before was non-structural schema",
        "createdAt" : "2019-08-28T22:31:29Z",
        "updatedAt" : "2019-08-30T05:49:16Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      },
      {
        "id" : "417e885a-5c24-4684-bc9b-bb928bb2d090",
        "parentId" : "f34bed68-e81b-4fc3-8e3d-2304675cabb7",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Thanks!",
        "createdAt" : "2019-08-28T22:38:21Z",
        "updatedAt" : "2019-08-30T05:49:16Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "7303df0b2161600c47f49034e120fa2065ef539c",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +38,42 @@\tapiservervalidation \"k8s.io/apiextensions-apiserver/pkg/apiserver/validation\"\n\tinformers \"k8s.io/apiextensions-apiserver/pkg/client/informers/internalversion/apiextensions/internalversion\"\n\tlisters \"k8s.io/apiextensions-apiserver/pkg/client/listers/apiextensions/internalversion\"\n\t\"k8s.io/apiextensions-apiserver/pkg/controller/establish\"\n\t\"k8s.io/apiextensions-apiserver/pkg/controller/finalizer\""
  },
  {
    "id" : "9013f0b7-b846-48c2-9453-db659d19086c",
    "prId" : 77354,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77354#pullrequestreview-283118097",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e47d6abe-62f0-4e12-8865-5e5ff9981dc8",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "I think using errors.Wrapf is better, preserving err.",
        "createdAt" : "2019-09-02T20:59:57Z",
        "updatedAt" : "2019-09-02T20:59:58Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "a58fd682-5605-4083-8b47-455f15be6024",
        "parentId" : "e47d6abe-62f0-4e12-8865-5e5ff9981dc8",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This repeats a pattern from earlier in the function, see commented blocks above. It seems that errors are deliberately suppressed here. e.g., they're not errors the user will gain benefit from seeing. @sttts, is there a reason for that?",
        "createdAt" : "2019-09-03T16:31:20Z",
        "updatedAt" : "2019-09-03T16:31:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "7303df0b2161600c47f49034e120fa2065ef539c",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +652,656 @@\t\t\tif err != nil {\n\t\t\t\tutilruntime.HandleError(err)\n\t\t\t\treturn nil, fmt.Errorf(\"the server could not properly serve the CR schema\")\n\t\t\t}\n\t\t\tspecs = append(specs, s)"
  },
  {
    "id" : "a3b1ce38-ae21-4079-b8da-205181a3eb2e",
    "prId" : 77333,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77333#pullrequestreview-234884756",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "654a8d3d-859d-49a5-8bc7-aaf778630c5c",
        "parentId" : null,
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Can `crd.Spec.PreserveUnknownFields` be nil here?",
        "createdAt" : "2019-05-08T05:16:10Z",
        "updatedAt" : "2019-05-17T07:35:23Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "b2c12d7b-1231-4c32-b03d-3bc005e59892",
        "parentId" : "654a8d3d-859d-49a5-8bc7-aaf778630c5c",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "we default it. So it should never be nil. But it's probably a good idea to fail with something else than a panic. Fixing.",
        "createdAt" : "2019-05-08T06:30:36Z",
        "updatedAt" : "2019-05-17T07:35:23Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "d10f8c1ad3e00bd7c690e833f79b342159e06819",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +533,537 @@\t\tif validationSchema != nil {\n\t\t\tstructuralSchema, err = structuralschema.NewStructural(validationSchema.OpenAPIV3Schema)\n\t\t\tif *crd.Spec.PreserveUnknownFields == false && err != nil {\n\t\t\t\treturn nil, err // validation should avoid this\n\t\t\t}"
  },
  {
    "id" : "91027532-e77f-4b6a-9566-c81fee93e4f3",
    "prId" : 77333,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77333#pullrequestreview-237711881",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d1ca8a0-43d6-4596-a33c-6cc986832764",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "the `if crd.Spec.PreserveUnknownFields == nil` short-circuit above only gets evaluated if the validation schema is non-nil. what happens if it is nil and no validation schema is provided? will this panic? same question for other uses of `*crd.Spec.PreserveUnknownFields`",
        "createdAt" : "2019-05-14T04:40:56Z",
        "updatedAt" : "2019-05-17T07:35:23Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6b2342fe-fa90-4dae-be2e-687d720a814e",
        "parentId" : "9d1ca8a0-43d6-4596-a33c-6cc986832764",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I move the nil check out to always run it and fail early, to avoid panics later. Even though all this is behind the defaulting code. But I agree it is better to protect against nil.",
        "createdAt" : "2019-05-15T09:38:50Z",
        "updatedAt" : "2019-05-17T07:35:23Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "d10f8c1ad3e00bd7c690e833f79b342159e06819",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +594,598 @@\t\t\t\tstructuralSchema:      structuralSchema,\n\t\t\t\tstructuralSchemaGK:    kind.GroupKind(),\n\t\t\t\tpreserveUnknownFields: *crd.Spec.PreserveUnknownFields,\n\t\t\t},\n\t\t\tcrd.Status.AcceptedNames.Categories,"
  },
  {
    "id" : "5901530e-0e89-4a34-bfe7-75acae2af7d6",
    "prId" : 63830,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63830#pullrequestreview-122278598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3e69818-3e62-4c3c-8134-a93dad383e4a",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "move log command outside of the loop.",
        "createdAt" : "2018-05-22T08:04:51Z",
        "updatedAt" : "2018-05-22T20:54:46Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "ca3e389d-85ed-434e-b894-30bbb7119fbb",
        "parentId" : "e3e69818-3e62-4c3c-8134-a93dad383e4a",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "Resource in the log is different for each version. Are you suggesting to log the first one only?",
        "createdAt" : "2018-05-22T15:20:43Z",
        "updatedAt" : "2018-05-22T20:54:46Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      },
      {
        "id" : "b649e74f-7f77-4bd1-b1c8-04e9359b3c32",
        "parentId" : "e3e69818-3e62-4c3c-8134-a93dad383e4a",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "We don't need the list of versions here I guess. Just print out the gk or gr is enough.",
        "createdAt" : "2018-05-22T15:24:54Z",
        "updatedAt" : "2018-05-22T20:54:46Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "700e4e8a-ca98-4026-932d-7f956c1f3832",
        "parentId" : "e3e69818-3e62-4c3c-8134-a93dad383e4a",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "Could be a simple fix, but lets do this in one of the follow ups too.",
        "createdAt" : "2018-05-22T17:42:50Z",
        "updatedAt" : "2018-05-22T20:54:46Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "c25514a1ee513e1a7ad1c3c572ab9dd32a395d28",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +351,355 @@\t\tif !found {\n\t\t\tfor version, storage := range s.storages {\n\t\t\t\tglog.V(4).Infof(\"Removing dead CRD storage for %v\", s.requestScopes[version].Resource)\n\t\t\t\t// destroy only the main storage. Those for the subresources share cacher and etcd clients.\n\t\t\t\tstorage.CustomResource.DestroyFunc()"
  },
  {
    "id" : "b0ab47a8-ecc8-4563-80e9-82a0b1f3fc6e",
    "prId" : 63830,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63830#pullrequestreview-122338940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a8247f9-120a-4bc6-9926-a478d7511164",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "do we have a test for this case?",
        "createdAt" : "2018-05-22T20:17:56Z",
        "updatedAt" : "2018-05-22T20:54:46Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "f8f233d0-c943-4d01-be48-93cddad460a1",
        "parentId" : "1a8247f9-120a-4bc6-9926-a478d7511164",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "Yes. I added it to integration tests.",
        "createdAt" : "2018-05-22T20:26:46Z",
        "updatedAt" : "2018-05-22T20:54:46Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "c25514a1ee513e1a7ad1c3c572ab9dd32a395d28",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +178,182 @@\t\treturn\n\t}\n\tif !apiextensions.HasServedCRDVersion(crd, requestInfo.APIVersion) {\n\t\tr.delegate.ServeHTTP(w, req)\n\t\treturn"
  },
  {
    "id" : "ea23010d-266e-4451-b03e-084e4b6ebe97",
    "prId" : 57883,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57883#pullrequestreview-86864511",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33fe8f6b-907b-47e4-a374-16e173216e08",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "ouch",
        "createdAt" : "2018-01-05T10:01:22Z",
        "updatedAt" : "2018-01-09T03:39:38Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "005b2778-57c1-4728-85e3-cf8e98d6bef6",
        "parentId" : "33fe8f6b-907b-47e4-a374-16e173216e08",
        "authorId" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "body" : "I am not sure whether it is a bug",
        "createdAt" : "2018-01-05T10:13:18Z",
        "updatedAt" : "2018-01-09T03:39:38Z",
        "lastEditedBy" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "tags" : [
        ]
      },
      {
        "id" : "04903bf7-db20-460c-a535-2e5f2a7cca86",
        "parentId" : "33fe8f6b-907b-47e4-a374-16e173216e08",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "it certainly is.",
        "createdAt" : "2018-01-05T10:21:09Z",
        "updatedAt" : "2018-01-09T03:39:38Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7530405456daafd014cb8e7702d5ce177dbf9e7",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +173,177 @@\tif !apiextensions.IsCRDConditionTrue(crd, apiextensions.Established) {\n\t\tr.delegate.ServeHTTP(w, req)\n\t\treturn\n\t}\n\tif len(requestInfo.Subresource) > 0 {"
  },
  {
    "id" : "fd3187ed-dd5d-497f-bf63-c9c490f27c05",
    "prId" : 57883,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57883#pullrequestreview-87447347",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1583307-d832-42f7-b536-6c9c27389fef",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "This storage could still accept new requests until storageMap2 is stored, and could still be handling previously accepted requests even after that. @sttts, what does this destroy func do, and does it gracefully shut down?",
        "createdAt" : "2018-01-09T02:43:51Z",
        "updatedAt" : "2018-01-09T03:39:38Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "65208145-6ce6-48ef-96c7-0f05ef1878da",
        "parentId" : "e1583307-d832-42f7-b536-6c9c27389fef",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Note this is preexisting, but wanted to point it out",
        "createdAt" : "2018-01-09T03:28:41Z",
        "updatedAt" : "2018-01-09T03:39:38Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2b9df47a-2e5f-41bc-8100-6920db6110de",
        "parentId" : "e1583307-d832-42f7-b536-6c9c27389fef",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "> This storage could still accept new requests until storageMap2 is stored\r\n\r\nThen we should defer that call. Doing that a moment later does not hurt as long as it is called.\r\n\r\nIt stops the etcd watch cache logic and some metrics related code (we leaked lots of memory in 1.8 without this).",
        "createdAt" : "2018-01-09T08:58:56Z",
        "updatedAt" : "2018-01-09T08:58:56Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7530405456daafd014cb8e7702d5ce177dbf9e7",
    "line" : 145,
    "diffHunk" : "@@ -1,1 +303,307 @@\t\tif !found {\n\t\t\tglog.V(4).Infof(\"Removing dead CRD storage for %v\", s.requestScope.Resource)\n\t\t\ts.storage.DestroyFunc()\n\t\t\tdelete(storageMap2, uid)\n\t\t}"
  },
  {
    "id" : "0206937b-43c8-4a2c-836a-3a86fe69186c",
    "prId" : 55168,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55168#pullrequestreview-94675072",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fff23443-1510-4c1f-8e6b-c4a93f31b583",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "need to make sure this works with yaml as enabled in https://github.com/kubernetes/kubernetes/pull/58260",
        "createdAt" : "2018-01-15T21:42:12Z",
        "updatedAt" : "2018-02-22T17:55:55Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "9300fc0f-7d49-4356-949e-572d86e3d211",
        "parentId" : "fff23443-1510-4c1f-8e6b-c4a93f31b583",
        "authorId" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "body" : "Added a test.",
        "createdAt" : "2018-02-07T11:29:00Z",
        "updatedAt" : "2018-02-22T17:55:55Z",
        "lastEditedBy" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "tags" : [
        ]
      }
    ],
    "commit" : "55ce3dedaa51c66dcd52b86f01e687905afe3e94",
    "line" : 342,
    "diffHunk" : "@@ -1,1 +522,526 @@\tscaleConverter := scale.NewScaleConverter()\n\tret.scaleRequestScope.Subresource = \"scale\"\n\tret.scaleRequestScope.Serializer = serializer.NewCodecFactory(scaleConverter.Scheme())\n\tret.scaleRequestScope.Kind = autoscalingv1.SchemeGroupVersion.WithKind(\"Scale\")\n\tret.scaleRequestScope.Namer = handlers.ContextBasedNaming{"
  },
  {
    "id" : "9900d6e5-4a4c-4706-8718-8c187baf609a",
    "prId" : 55168,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55168#pullrequestreview-249352154",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cb24f48-a084-450d-bac0-862c846ab7ec",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "@nikhita do you know what's the point of setting a constant timeout here?",
        "createdAt" : "2019-06-13T13:36:22Z",
        "updatedAt" : "2019-06-13T13:36:22Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "55ce3dedaa51c66dcd52b86f01e687905afe3e94",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +224,228 @@\trequestScope := crdInfo.requestScope\n\tstorage := crdInfo.storage.CustomResource\n\tminRequestTimeout := 1 * time.Minute\n\n\tswitch requestInfo.Verb {"
  },
  {
    "id" : "178be343-9667-4915-8bb5-39a45dee4a08",
    "prId" : 53586,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53586#pullrequestreview-68863094",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdd5acdc-997b-40a4-94a5-e4d42f1bad4f",
        "parentId" : null,
        "authorId" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "body" : "Shouldn't this be `oldCRD.UID`?",
        "createdAt" : "2017-10-12T09:14:39Z",
        "updatedAt" : "2017-10-13T10:17:09Z",
        "lastEditedBy" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "tags" : [
        ]
      },
      {
        "id" : "d2ed760e-a8d0-48d0-aefc-8129729c543b",
        "parentId" : "cdd5acdc-997b-40a4-94a5-e4d42f1bad4f",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "the UID does not change, i.e. it does not matter here.",
        "createdAt" : "2017-10-12T09:20:47Z",
        "updatedAt" : "2017-10-13T10:17:09Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "333f49f5d1dc7bb2f644ee57a93a38303d277dcf",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +433,437 @@\tstorageMap := c.customStorage.Load().(crdStorageMap)\n\n\toldInfo, found := storageMap[newCRD.UID]\n\tif !found {\n\t\treturn"
  },
  {
    "id" : "b937f377-9733-4877-942f-b18586a0653e",
    "prId" : 47263,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47263#pullrequestreview-54146823",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f51dcab8-0186-4b7e-8699-ba1baaf982ed",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "We need the same for adding an element.",
        "createdAt" : "2017-08-03T15:46:52Z",
        "updatedAt" : "2017-08-29T16:05:36Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "e602901c-2c5f-4803-9e3a-21a28a0c541c",
        "parentId" : "f51dcab8-0186-4b7e-8699-ba1baaf982ed",
        "authorId" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "body" : "Created https://github.com/kubernetes/kubernetes/pull/50098.",
        "createdAt" : "2017-08-03T16:19:25Z",
        "updatedAt" : "2017-08-29T16:05:36Z",
        "lastEditedBy" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ba1523a8e36c3121a9e08bfac7b4f342bb8ccb3",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +408,412 @@\n\tdelete(storageMap2, oldCRD.UID)\n\tc.customStorage.Store(storageMap2)\n}\n"
  },
  {
    "id" : "3c53cf50-9e36-4aea-8837-1efb5eea52dc",
    "prId" : 47263,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47263#pullrequestreview-57230779",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc7e07a7-a284-445c-8e14-ac87b4c3e172",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "It's unusual to handle update and not create.  Why the difference?",
        "createdAt" : "2017-08-18T15:02:18Z",
        "updatedAt" : "2017-08-29T16:05:36Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "06956e79-40e6-464e-9c25-ae90935f85d8",
        "parentId" : "fc7e07a7-a284-445c-8e14-ac87b4c3e172",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "create is implicit. We create the strategy on demand (your code btw ;-)).\r\n\r\nBut on update we have to delete the cached strategy. That's what this handler does.",
        "createdAt" : "2017-08-18T15:16:59Z",
        "updatedAt" : "2017-08-29T16:05:36Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ba1523a8e36c3121a9e08bfac7b4f342bb8ccb3",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +109,113 @@\n\tcrdInformer.Informer().AddEventHandler(cache.ResourceEventHandlerFuncs{\n\t\tUpdateFunc: ret.updateCustomResourceDefinition,\n\t})\n"
  },
  {
    "id" : "706362a1-2f50-44fe-a16d-566eb5ef1d7b",
    "prId" : 47263,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47263#pullrequestreview-57238548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a8bddc3-2242-474a-8e1a-5ca5b1598379",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Is this block likely to fail?  If so, this reads like a status condition",
        "createdAt" : "2017-08-18T15:03:12Z",
        "updatedAt" : "2017-08-29T16:05:36Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "ea8bf873-8455-4046-8abf-eda687611c29",
        "parentId" : "6a8bddc3-2242-474a-8e1a-5ca5b1598379",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "No, the validation should make sure it does not fail. Everything else is a bug in validation.",
        "createdAt" : "2017-08-18T15:18:33Z",
        "updatedAt" : "2017-08-29T16:05:36Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "c6e82335-1923-49b6-b323-4291d4aa35d1",
        "parentId" : "6a8bddc3-2242-474a-8e1a-5ca5b1598379",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Also note that the conversion is basically a 1:1 translation with a number of restrictions on the input, plus some string->openapi-type conversion which are done during validation already in order to guarantee they work in this step as well.",
        "createdAt" : "2017-08-18T15:44:45Z",
        "updatedAt" : "2017-08-29T16:05:36Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ba1523a8e36c3121a9e08bfac7b4f342bb8ccb3",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +311,315 @@\n\t// convert CRD schema to openapi schema\n\topenapiSchema := &openapispec.Schema{}\n\tif err := apiservervalidation.ConvertToOpenAPITypes(crd, openapiSchema); err != nil {\n\t\treturn nil, err"
  }
]