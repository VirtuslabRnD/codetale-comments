[
  {
    "id" : "7176ed87-c42d-46ca-83cc-8650419ce632",
    "prId" : 77750,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77750#pullrequestreview-236259671",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fc3f83d-ebf6-48b0-af62-1eaa4a73e9e6",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "`&& *in.XPreserveUnknownFields`?",
        "createdAt" : "2019-05-10T18:39:45Z",
        "updatedAt" : "2019-05-13T21:16:32Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e833abf5-0ae0-4efe-8708-18466d265c93",
        "parentId" : "5fc3f83d-ebf6-48b0-af62-1eaa4a73e9e6",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Validation enforces `true` if non-nil. Doesn't make much of a difference. In my variant even the non-validating `false` goes through.",
        "createdAt" : "2019-05-10T18:47:34Z",
        "updatedAt" : "2019-05-13T21:16:32Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "69c50a70f64fb7e239f5270b9abcdc21687bd665",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +196,200 @@\t}\n\n\tif in.XPreserveUnknownFields != nil {\n\t\tout.VendorExtensible.AddExtension(\"x-kubernetes-preserve-unknown-fields\", *in.XPreserveUnknownFields)\n\t}"
  },
  {
    "id" : "26c62844-ed58-48fa-bcb0-e3b9584c569d",
    "prId" : 74804,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74804#pullrequestreview-209688671",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54331998-9786-4f04-b04e-b2096618fe7a",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "we only append `null` if type is not \"\"? does validation enforce type being non-empty?",
        "createdAt" : "2019-03-01T16:38:11Z",
        "updatedAt" : "2019-03-01T17:11:56Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "5b6dfe58-4418-42a6-8e47-c50473e0e44f",
        "parentId" : "54331998-9786-4f04-b04e-b2096618fe7a",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "or does type:\"\" imply arbitrary type, including null?",
        "createdAt" : "2019-03-01T16:38:58Z",
        "updatedAt" : "2019-03-01T17:11:56Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "7f01fae8-5697-432f-a6d0-09cdd4eded1f",
        "parentId" : "54331998-9786-4f04-b04e-b2096618fe7a",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "yes, empty type means \"anything\". This includes the null case. So nullable is not needed.",
        "createdAt" : "2019-03-01T17:07:40Z",
        "updatedAt" : "2019-03-01T17:47:59Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "5209f3af8d1e4a8c69e3274f96a2a012a3774cc5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +72,76 @@\t\tout.Type = spec.StringOrArray([]string{in.Type})\n\t\tif in.Nullable {\n\t\t\tout.Type = append(out.Type, \"null\")\n\t\t}\n\t}"
  },
  {
    "id" : "76cf69f6-9d55-407f-b249-d88fb4d8630d",
    "prId" : 71137,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71137#pullrequestreview-175933963",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "034aaa4f-6be9-4e07-94a9-11d5682b4d55",
        "parentId" : null,
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "Nice catch. This makes input and output more consistent.",
        "createdAt" : "2018-11-16T18:23:55Z",
        "updatedAt" : "2018-11-16T18:28:07Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      },
      {
        "id" : "f2775ab9-e61e-438d-b8ad-d64c1d89dcf5",
        "parentId" : "034aaa4f-6be9-4e07-94a9-11d5682b4d55",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "And makes tests green :-)",
        "createdAt" : "2018-11-16T18:51:05Z",
        "updatedAt" : "2018-11-16T18:51:05Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d9a02253396b7786aca5fbc4a161bd06deac9b5",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +97,101 @@\n\tif in.Enum != nil {\n\t\tout.Enum = make([]interface{}, len(in.Enum))\n\t\tfor k, v := range in.Enum {\n\t\t\tout.Enum[k] = v"
  },
  {
    "id" : "f54c1ab5-a26c-41a6-b2b8-5119aedd325f",
    "prId" : 71137,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71137#pullrequestreview-175924004",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95538c03-2fa0-401e-8aea-eaec4aac8a83",
        "parentId" : null,
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "These functions probably fit better in a util/helper package",
        "createdAt" : "2018-11-16T18:25:14Z",
        "updatedAt" : "2018-11-16T18:28:07Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d9a02253396b7786aca5fbc4a161bd06deac9b5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +51,55 @@}\n\n// ConvertJSONSchemaProps converts the schema from apiextensions.JSONSchemaPropos to go-openapi/spec.Schema.\nfunc ConvertJSONSchemaProps(in *apiextensions.JSONSchemaProps, out *spec.Schema) error {\n\treturn ConvertJSONSchemaPropsWithPostProcess(in, out, nil)"
  },
  {
    "id" : "e09837aa-7e73-4fc4-8462-3fd97dbc7abb",
    "prId" : 71137,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71137#pullrequestreview-175933813",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d7b0c50-4985-4000-8d6f-98fc09514d2e",
        "parentId" : null,
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "The post process option looks like a good hot-fix to me. It's a little bit too flexible/powerful IMO. \r\n\r\nIn future maybe we want a walker processing on a single type like https://github.com/kubernetes/kubernetes/issues/71132 suggested (I checked kube-openapi and it's not straight-forward to use the refWalker there). So we don't have to mix conversion and object-processing up",
        "createdAt" : "2018-11-16T18:44:37Z",
        "updatedAt" : "2018-11-16T18:44:37Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      },
      {
        "id" : "2e755293-957a-4757-a0ec-5db72eddda56",
        "parentId" : "9d7b0c50-4985-4000-8d6f-98fc09514d2e",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Yes, a walker would be great. This is kind of a walker, but does the conversion in parallel.",
        "createdAt" : "2018-11-16T18:50:40Z",
        "updatedAt" : "2018-11-16T18:50:40Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d9a02253396b7786aca5fbc4a161bd06deac9b5",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +60,64 @@\n// ConvertJSONSchemaPropsWithPostProcess converts the schema from apiextensions.JSONSchemaPropos to go-openapi/spec.Schema\n// and run a post process step on each JSONSchemaProps node.\nfunc ConvertJSONSchemaPropsWithPostProcess(in *apiextensions.JSONSchemaProps, out *spec.Schema, postProcess PostProcessFunc) error {\n\tif in == nil {"
  },
  {
    "id" : "61b46b22-3702-467a-b495-6bc47450a26d",
    "prId" : 47263,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47263#pullrequestreview-53844873",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82a424c9-22fb-4c50-81fc-7aec8233ec81",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : ":+1:",
        "createdAt" : "2017-08-02T15:51:56Z",
        "updatedAt" : "2017-08-29T16:05:36Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ba1523a8e36c3121a9e08bfac7b4f342bb8ccb3",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +112,116 @@\n\tif in.Ref != nil {\n\t\tout.Ref, err = spec.NewRef(*in.Ref)\n\t\tif err != nil {\n\t\t\treturn err"
  }
]