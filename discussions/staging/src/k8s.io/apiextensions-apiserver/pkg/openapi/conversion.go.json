[
  {
    "id" : "0b176fcf-9018-47d2-811b-501f8c1ca881",
    "prId" : 67205,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67205#pullrequestreview-175224207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4ac51ae-c0a5-4b89-b47f-5caa56905aec",
        "parentId" : null,
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "Still trying to understand what fields we should prune to make an openapi v3 json schema be v2-compatible. Found a good reading around this topic: https://blog.readme.io/an-example-filled-guide-to-swagger-3-2/",
        "createdAt" : "2018-11-06T00:47:52Z",
        "updatedAt" : "2018-11-16T00:40:04Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      },
      {
        "id" : "e0d9a557-1015-47e2-a9f7-4fae9bea941c",
        "parentId" : "c4ac51ae-c0a5-4b89-b47f-5caa56905aec",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "During pruning we are allowed to make the specification weaker, not stricter. This means:\r\n\r\n- we can drop clauses if they are positive (in the sense of `A`, `not not A`, `not not not not A`: `A` is positive in each of them. In contrast: `not A`, `not not not A`: here `A` is negative.\r\n- pruning in a negative position means replacing a clause by False (= `{not: {}}` in OpenAPI).\r\n- dropping all 4 is fine.\r\n- both `not` and `oneOf` (equals `(andOf (anyOf A B) (not (andOf A B)))`) make pruning complex as you have to compute for each to-be-dropped clause in a subformula, whether it is positive or negative.\r\n\r\nHence, the easiest solution is to drop all 4.\r\n\r\nWe could do a bit better with `AllOf` by merging sub-formulas into one schema, e.g. `{allOf {type: number} {minValue: 42.0}}` can be merged into `{type: number, minValue: 42.0}`.\r\n\r\n",
        "createdAt" : "2018-11-06T08:54:07Z",
        "updatedAt" : "2018-11-16T00:40:04Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "dc4573cf-2fc2-4396-9bc5-efa0e7572cff",
        "parentId" : "c4ac51ae-c0a5-4b89-b47f-5caa56905aec",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "I realized that `allOf` was supported by OpenAPI Spec v2: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schema-object (we didn't use `allOf` for k8s built-in APIs). `anyOf`, `oneOf` and `not` are new to v3. We can probably keep `allOf` and drop the other three. \r\n\r\nSorry I didn't understand why we want to merge sub-formulas of `allOf` into one schema. Could you explain more on that?",
        "createdAt" : "2018-11-07T00:15:20Z",
        "updatedAt" : "2018-11-16T00:40:04Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      },
      {
        "id" : "79e9c2d1-e3b9-40aa-8be7-355b72edb957",
        "parentId" : "c4ac51ae-c0a5-4b89-b47f-5caa56905aec",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I assumed `allOf` is not part of v2. If it is, forget my comment about merging. Not needed. It was about getting as much as possible out of an `allOf` construct in v2 without actually using it.",
        "createdAt" : "2018-11-15T07:53:38Z",
        "updatedAt" : "2018-11-16T00:40:04Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "4625bf7dadb1ecc1d87c0f5d0c2ea22a7d698e41",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +45,49 @@\tout.OneOf = nil\n\tout.AnyOf = nil\n\tout.Not = nil\n\treturn out, nil\n}"
  }
]