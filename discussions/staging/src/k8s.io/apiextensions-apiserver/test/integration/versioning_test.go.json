[
  {
    "id" : "f5478f3b-c7e1-4850-ac77-7a7f021864dc",
    "prId" : 63830,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63830#pullrequestreview-235349514",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43b7855a-75bc-40d7-99da-a5a6116a66e9",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I was expecting to see some of the following tests:\r\n* a test that actually checked what got persisted in etcd matched the storage version\r\n* a test that set up a CRD, persisted some data, changed the version, and made sure the previously persisted data could be read\r\n* a test that verified discovery docs tracked the CRD through creation, version addition, version removal, and deletion\r\n\r\nsomething like described in https://github.com/kubernetes/kubernetes/pull/63518#discussion_r187123115:\r\n\r\n> definitely need a test that goes through a version lifecycle to flush out serving/storage issues, something like:\r\n> 1. create with v1, ensure v1 appears in discovery, is usable, and persists an object as v1\r\n> 2. add v2 with served=true, ensure v1 and v2 appear in discovery, are usable, and still persist as v1\r\n> 3. set v2 stored=true, ensure new object persists as v2, update all existing objects and ensure they persist as v2\r\n> 4. set v1 served=false, ensure v1 disappears from discovery and the api is no longer callable\r\n> 5. remove v1 from status.storedVersions\r\n> 6. remove v1 from versions\r\n\r\nthat planned as a followup?",
        "createdAt" : "2018-05-21T20:59:08Z",
        "updatedAt" : "2018-05-22T20:54:46Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "0e4da8c5-35fa-4a52-8850-9d0c5310daec",
        "parentId" : "43b7855a-75bc-40d7-99da-a5a6116a66e9",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "I suggest we do that as a follow up.",
        "createdAt" : "2018-05-21T21:32:35Z",
        "updatedAt" : "2018-05-22T20:54:46Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      },
      {
        "id" : "364203ca-78de-4051-9b74-7b457f56163a",
        "parentId" : "43b7855a-75bc-40d7-99da-a5a6116a66e9",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "See https://github.com/kubernetes/kubernetes/issues/64136 for followup details.",
        "createdAt" : "2019-05-09T00:04:01Z",
        "updatedAt" : "2019-05-09T00:04:01Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c25514a1ee513e1a7ad1c3c572ab9dd32a395d28",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +44,48 @@\n\tns := \"not-the-default\"\n\ttestSimpleVersionedCRUD(t, ns, noxuDefinition, dynamicClient)\n}\n"
  },
  {
    "id" : "e6a7d3f8-bf53-4ce7-9a1d-d05d8b10d23f",
    "prId" : 63830,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63830#pullrequestreview-122277473",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fac2d192-38c6-4403-841d-1fec1604a65a",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "do not duplicate this code. Doesn't this apply to the one-version case as well?",
        "createdAt" : "2018-05-22T08:16:21Z",
        "updatedAt" : "2018-05-22T20:54:46Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "08fe4be7-4354-4300-a305-0ca529a57f75",
        "parentId" : "fac2d192-38c6-4403-841d-1fec1604a65a",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "Added to follow up",
        "createdAt" : "2018-05-22T17:40:03Z",
        "updatedAt" : "2018-05-22T20:54:46Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "c25514a1ee513e1a7ad1c3c572ab9dd32a395d28",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +142,146 @@}\n\nfunc testSimpleVersionedCRUD(t *testing.T, ns string, noxuDefinition *apiextensionsv1beta1.CustomResourceDefinition, dynamicClient dynamic.Interface) {\n\tnoxuResourceClients := map[string]dynamic.ResourceInterface{}\n\tnoxuWatchs := map[string]watch.Interface{}"
  }
]