[
  {
    "id" : "bf6523f9-5809-4a45-8ae2-e5efbcff3cbb",
    "prId" : 49747,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49747#pullrequestreview-53001190",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bcc74e8-1e31-423b-b511-c76958afe646",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Wondering, do we need the parameter in`Equal` at all? Can't we create the empty map here?",
        "createdAt" : "2017-07-28T17:31:10Z",
        "updatedAt" : "2017-07-28T19:13:49Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "0fecd2bf-e0a6-49be-83de-e99c7704a418",
        "parentId" : "2bcc74e8-1e31-423b-b511-c76958afe646",
        "authorId" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "body" : "We can't do that because we need the populated map in line 366, 372, 374 and 376 below. If we create an empty map here and those lines are executed, they will see the type as \"not visited\" - which will defeat our purpose. :)\r\n\r\nAlso, tried it out. Gives the `goroutine stack exceeds 1000000000-byte limit` error.",
        "createdAt" : "2017-07-28T17:59:04Z",
        "updatedAt" : "2017-07-28T19:13:49Z",
        "lastEditedBy" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "tags" : [
        ]
      },
      {
        "id" : "81d6a490-4e28-4bb6-a121-27e71da641f9",
        "parentId" : "2bcc74e8-1e31-423b-b511-c76958afe646",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "oh, didn't realize the recursion goes through `Equal` and not `equal`. ",
        "createdAt" : "2017-07-28T18:08:56Z",
        "updatedAt" : "2017-07-28T19:13:49Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "a26bbd38-8691-4502-9858-5b1dd810576f",
        "parentId" : "2bcc74e8-1e31-423b-b511-c76958afe646",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "But, everything here in `Equal` can be moved to `equal` and then we can recursively call `equal` instead of `Equal`, can't it? Then my suggestion should work.",
        "createdAt" : "2017-07-28T18:11:27Z",
        "updatedAt" : "2017-07-28T19:13:49Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "c13471e7-512f-4e36-bf6f-37b7eba5badc",
        "parentId" : "2bcc74e8-1e31-423b-b511-c76958afe646",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Doesn't make the code easier to read though. Let's leave it as it is.",
        "createdAt" : "2017-07-28T18:12:07Z",
        "updatedAt" : "2017-07-28T19:13:49Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4656c3d029e47d03b3d7d9915d79cab72a80852",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +345,349 @@\t\treturn equal\n\t}\n\tresult := e.equal(a, b, alreadyVisitedTypes)\n\te[conversionPair{a, b}] = result\n\te[conversionPair{b, a}] = result"
  }
]