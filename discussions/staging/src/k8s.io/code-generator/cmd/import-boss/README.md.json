[
  {
    "id" : "7c1f4849-b901-4121-83ab-5472448a157c",
    "prId" : 85564,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85564#pullrequestreview-404442230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7a6b9b7-8c6d-4b76-8f49-dd1cc29e1e1c",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Can you expand? Why are inverse rules useful? When would one use the transitive option?\r\n\r\n(thanks for fixing the documentation!)",
        "createdAt" : "2020-05-01T23:09:43Z",
        "updatedAt" : "2020-05-02T14:06:48Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b208b6a83b845f66402f5072970e655baf9156f",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +53,57 @@- If an `.import-restrictions` file is found, then all imports of the package are checked against each `inverse rule` in the file. This check will continue, climbing up the directory tree, until a match is found and accepted.\n\n- Inverse rules also have a boolean `transitive` option. When this option is true, the import rule is also applied to `transitive` imports.\n  - `transitive` imports are dependencies not directly depended on by the code, but are needed to run the application. Use this option if you want to apply restrictions to those indirect dependencies.\n"
  }
]