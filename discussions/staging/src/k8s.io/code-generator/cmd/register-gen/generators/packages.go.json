[
  {
    "id" : "cba6c5d2-87e7-4e15-b070-cbab30c480e2",
    "prId" : 66251,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66251#pullrequestreview-138657788",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a7d9e78-5fd5-4936-898e-ae8a71a64962",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "what about internal types?",
        "createdAt" : "2018-07-19T11:44:12Z",
        "updatedAt" : "2018-08-06T12:19:31Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "09917b69-fe1b-4b8f-aa71-1325ffb4fc0a",
        "parentId" : "4a7d9e78-5fd5-4936-898e-ae8a71a64962",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I think we have some very ugly logic elsewhere to distinguish both cases. maybe in client-gen.",
        "createdAt" : "2018-07-19T11:44:50Z",
        "updatedAt" : "2018-08-06T12:19:31Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "b258890f-c5d6-4296-8381-1cc097e3a623",
        "parentId" : "4a7d9e78-5fd5-4936-898e-ae8a71a64962",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> what about internal types?\r\n\r\nI could live with that as a followup.  As we know, we have more external versions than internal ones.",
        "createdAt" : "2018-07-19T12:57:20Z",
        "updatedAt" : "2018-08-06T12:19:31Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcde05018875f838e201accd721dd3e847df8d31",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +75,79 @@\t\t\tpathParts := strings.Split(pkg.Path, \"/\")\n\t\t\tif len(pathParts) < 2 {\n\t\t\t\tglog.Errorf(\"the path of the package must contain the group name and the version, path = %s\", pkg.Path)\n\t\t\t\tcontinue\n\t\t\t}"
  },
  {
    "id" : "376166fb-d74e-4e3b-967f-b15d66757162",
    "prId" : 66251,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66251#pullrequestreview-140182233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae389770-b96a-4ccb-aad8-02a2b8713bc5",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "maybe you do that elsewhere already: if there is a register.go, skip the generation.",
        "createdAt" : "2018-07-19T11:48:15Z",
        "updatedAt" : "2018-08-06T12:19:31Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "625b5023-d02f-411b-b32d-52bbbbe65bc2",
        "parentId" : "ae389770-b96a-4ccb-aad8-02a2b8713bc5",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> maybe you do that elsewhere already: if there is a register.go, skip the generation.\r\n\r\nSkip the generation if register.go is already there, but I expected this file to be named something like `generated.register.go`.  I figure some other poor soul will try to plumb it into our build scripts.",
        "createdAt" : "2018-07-19T13:07:01Z",
        "updatedAt" : "2018-08-06T12:19:31Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "38139717-f3b9-45bc-8702-17f3f492d605",
        "parentId" : "ae389770-b96a-4ccb-aad8-02a2b8713bc5",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "more like zz_generated.register.go, like the other generated files.",
        "createdAt" : "2018-07-20T06:42:31Z",
        "updatedAt" : "2018-08-06T12:19:31Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "82a36a61-476f-41b2-b4f3-34c0d594bb70",
        "parentId" : "ae389770-b96a-4ccb-aad8-02a2b8713bc5",
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "do we want to skip the generation if there is `register.go` or `zz_generated.register.go` ? I think that we have two cases here:\r\n\r\n* a user already has `register.go` fille and runs the new version of the generators. If we will generate `zz_generated.register.go` this might be not only confusing but also can cause compilation errors.\r\n\r\n* a user changes `types.go` file and runs generators. It would be nice if we could reflect the changes in `zz_generated.register.go` otherwise the user would have to manually delete the file.",
        "createdAt" : "2018-07-24T21:20:28Z",
        "updatedAt" : "2018-08-06T12:19:31Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      },
      {
        "id" : "98329f54-1385-494a-b99b-a47990efae23",
        "parentId" : "ae389770-b96a-4ccb-aad8-02a2b8713bc5",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "If `register.go` exists, just continue with the next file.\r\nIf `zz_generated.register.go` exists, override it. \r\n",
        "createdAt" : "2018-07-25T06:59:52Z",
        "updatedAt" : "2018-08-06T12:19:31Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcde05018875f838e201accd721dd3e847df8d31",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +51,55 @@\n\tpackages := generator.Packages{}\n\tfor _, inputDir := range arguments.InputDirs {\n\t\tpkg := context.Universe.Package(inputDir)\n\t\tinternal, err := isInternal(pkg)"
  },
  {
    "id" : "5f711a91-cf57-417a-bd1d-3d58cb257299",
    "prId" : 66251,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66251#pullrequestreview-141984513",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9a8f6ab-1fc1-4c25-af72-1050bd9524c5",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "would be interesting to know whether this will give a complete list for kube.",
        "createdAt" : "2018-07-19T11:48:39Z",
        "updatedAt" : "2018-08-06T12:19:31Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "056d6fe2-b410-4f22-8f61-558a91f2e5ee",
        "parentId" : "f9a8f6ab-1fc1-4c25-af72-1050bd9524c5",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Have you double checked what the outcome is in kube?",
        "createdAt" : "2018-07-25T06:56:27Z",
        "updatedAt" : "2018-08-06T12:19:31Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "065c8c81-ec06-4d1b-abdc-57885482efa6",
        "parentId" : "f9a8f6ab-1fc1-4c25-af72-1050bd9524c5",
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "I'm not sure what do you mean by `kube`. Perhaps the internal types ? \r\n\r\nI run the generator for types defined in `https://github.com/kubernetes/kubernetes/tree/master/pkg/apis/apps`\r\n\r\nhere is the output:\r\n```\r\n....\r\n// Adds the list of known types to Scheme.\r\nfunc addKnownTypes(scheme *runtime.Scheme) error {\r\n        scheme.AddKnownTypes(SchemeGroupVersion,\r\n                &ControllerRevision{},\r\n                &ControllerRevisionList{},\r\n                &StatefulSet{},\r\n                &StatefulSetList{},\r\n        )\r\n        // AddToGroupVersion allows the serialization of client types like ListOptions.\r\n        v1.AddToGroupVersion(scheme, SchemeGroupVersion)\r\n        return nil\r\n}\r\n```",
        "createdAt" : "2018-07-25T20:32:35Z",
        "updatedAt" : "2018-08-06T12:19:31Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      },
      {
        "id" : "06af2a70-df7d-4462-8924-c84c6d3d073b",
        "parentId" : "f9a8f6ab-1fc1-4c25-af72-1050bd9524c5",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I meant against all external types in k8s.io/api.",
        "createdAt" : "2018-07-26T05:55:10Z",
        "updatedAt" : "2018-08-06T12:19:31Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "bed20101-4df0-4860-b747-a8ee7a06e06f",
        "parentId" : "f9a8f6ab-1fc1-4c25-af72-1050bd9524c5",
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "oh, good idea, I will prepare a pull that demonstrates the outcome.",
        "createdAt" : "2018-07-26T07:59:08Z",
        "updatedAt" : "2018-08-06T12:19:31Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      },
      {
        "id" : "e8b32cc4-9417-4db9-a89b-37090ee687e4",
        "parentId" : "f9a8f6ab-1fc1-4c25-af72-1050bd9524c5",
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "alright, I have something, what do you think :) ?\r\n\r\nhttps://github.com/p0lyn0mial/kubernetes/pull/4",
        "createdAt" : "2018-07-26T22:18:28Z",
        "updatedAt" : "2018-08-06T12:19:31Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      },
      {
        "id" : "adfa1c94-168f-4afb-aec4-0d2b1741b7e3",
        "parentId" : "f9a8f6ab-1fc1-4c25-af72-1050bd9524c5",
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "I generated `register.go` files one more time, this time only for the external types,\r\n\r\nhttps://github.com/p0lyn0mial/kubernetes/pull/5",
        "createdAt" : "2018-07-30T22:05:42Z",
        "updatedAt" : "2018-08-06T12:19:31Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      },
      {
        "id" : "f84549f2-82e0-40a9-b66b-94892b8e6f9f",
        "parentId" : "f9a8f6ab-1fc1-4c25-af72-1050bd9524c5",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "direct link to the diff I found: https://github.com/p0lyn0mial/api/pull/1/files",
        "createdAt" : "2018-07-31T14:32:59Z",
        "updatedAt" : "2018-08-06T12:19:31Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcde05018875f838e201accd721dd3e847df8d31",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +94,98 @@\t\t\tglog.V(5).Infof(\"considering type = %s\", t.Name.String())\n\t\t\tfor _, typeMember := range t.Members {\n\t\t\t\tif typeMember.Name == \"TypeMeta\" && typeMember.Embedded == true {\n\t\t\t\t\ttypesToRegister = append(typesToRegister, t)\n\t\t\t\t}"
  },
  {
    "id" : "e6745827-15b1-4188-9928-a3c684634e5d",
    "prId" : 66251,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66251#pullrequestreview-142151277",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f085c634-db50-4313-8f6c-08e44589d0ca",
        "parentId" : null,
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "I hope checking if there is `TypeMeta` is good enough. This is similar to what we have in `client-gen`, except that we check `TypeMeta` not `ObjectMeta`",
        "createdAt" : "2018-07-31T21:22:47Z",
        "updatedAt" : "2018-08-06T12:19:31Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcde05018875f838e201accd721dd3e847df8d31",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +129,133 @@\tfor _, t := range p.Types {\n\t\tfor _, member := range t.Members {\n\t\t\tif member.Name == \"TypeMeta\" {\n\t\t\t\treturn !strings.Contains(member.Tags, \"json\"), nil\n\t\t\t}"
  },
  {
    "id" : "1188cb15-8a90-4e7c-9967-4d92c4fc7eca",
    "prId" : 100738,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100738#pullrequestreview-715396318",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85418da2-63a2-4002-adfe-f255f25c60e0",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "does Comments contain all comments? Note, we have this strange distinction between comments directly above something and those separated by an empty line.",
        "createdAt" : "2021-07-16T13:14:26Z",
        "updatedAt" : "2021-07-16T13:14:26Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "04223c9a-686c-4579-bcfa-92313abda22c",
        "parentId" : "85418da2-63a2-4002-adfe-f255f25c60e0",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Ic, Comments means all:\r\n```\r\n// All comments from doc.go, if any.\r\n// TODO: remove Comments and use DocComments everywhere.\r\nComments []string\r\n```\r\n\r\nDo we have other places like that?",
        "createdAt" : "2021-07-16T13:19:34Z",
        "updatedAt" : "2021-07-16T13:19:34Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "f8812cce-0e65-4ea4-981d-32ed7d46cf0a",
        "parentId" : "85418da2-63a2-4002-adfe-f255f25c60e0",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "As far as I see the other 6 code snippets accessing groupName are fine, just this one.",
        "createdAt" : "2021-07-16T13:20:30Z",
        "updatedAt" : "2021-07-16T13:20:30Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "2adf2d54-54ba-49de-9e20-812a37b110ab",
        "parentId" : "85418da2-63a2-4002-adfe-f255f25c60e0",
        "authorId" : "7085d7de-edbf-4f9f-a83d-f364d9910bfa",
        "body" : "yes, I fount this bug  just this code . other code is right.",
        "createdAt" : "2021-07-27T01:03:53Z",
        "updatedAt" : "2021-07-27T01:03:54Z",
        "lastEditedBy" : "7085d7de-edbf-4f9f-a83d-f364d9910bfa",
        "tags" : [
        ]
      }
    ],
    "commit" : "68ec18a050d2ddedbad1ecf36dc66166b1d68a7d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +83,87 @@\t\t\t// if there is a comment of the form \"// +groupName=somegroup\" or \"// +groupName=somegroup.foo.bar.io\",\n\t\t\t// extract the fully qualified API group name from it and overwrite the group inferred from the package path\n\t\t\tif override := types.ExtractCommentTags(\"+\", pkg.Comments)[\"groupName\"]; override != nil {\n\t\t\t\tgroupName := override[0]\n\t\t\t\tklog.V(5).Infof(\"overriding the group name with = %s\", groupName)"
  }
]