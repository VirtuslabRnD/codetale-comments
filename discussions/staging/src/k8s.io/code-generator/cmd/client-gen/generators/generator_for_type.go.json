[
  {
    "id" : "7c6a523d-6842-4fe7-b083-910dcc639769",
    "prId" : 99214,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99214#pullrequestreview-599702041",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7425258f-cc5f-4df2-bf03-fdd53ff13956",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "I don't think we've talked about adding \"ApplyStatus\", but I think I agree it makes sense for controllers to have easy access to that function. This makes things more difficult if someone wants to apply to another subresource (scale?), but it also doesn't make as much sense IMO. So I think that's good.",
        "createdAt" : "2021-02-25T23:41:21Z",
        "updatedAt" : "2021-03-07T01:51:01Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "79803223-270a-4df6-8bc4-24fe76ed39ae",
        "parentId" : "7425258f-cc5f-4df2-bf03-fdd53ff13956",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "We did sneak this requirement into the KEP at the last minute, @deads2k noticed it was missing.  Functions of the form`<Operation>Status`  exist for update, so this does keep to the client-go convention. If we introduce scale apply support, there is also a convention for that-- once the developer annotates that the scale subresource supports apply, a `ScaleStatus` function would be generated. We will need to update this generator to support that, but most of the building blocks exist, so it shouldn't be terribly difficult to support.",
        "createdAt" : "2021-02-26T15:48:34Z",
        "updatedAt" : "2021-03-07T01:51:01Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b42cae1575066166d6e63e1f3f5364aeccb0ca3",
    "line" : 198,
    "diffHunk" : "@@ -1,1 +680,684 @@// ApplyStatus was generated because the type contains a Status member.\n// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().\nfunc (c *$.type|privatePlural$) ApplyStatus(ctx context.Context, $.inputType|private$ *$.applyConfig|raw$, opts $.ApplyOptions|raw$) (result *$.resultType|raw$, err error) {\n\tif $.inputType|private$ == nil {\n\t\treturn nil, fmt.Errorf(\"$.inputType|private$ provided to Apply must not be nil\")"
  },
  {
    "id" : "c7318215-f33e-4a03-9253-c2460fcb3035",
    "prId" : 99214,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99214#pullrequestreview-599798323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3130f29b-ab71-4ed9-b1eb-457e5d2bfc98",
        "parentId" : null,
        "authorId" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "body" : "Would it be worth it to check if the field manager is set or would it be fine to defer it to the server?\r\n\r\nEdit: Actually I'm a bit confused. We have a comment earlier saying that field manager should be mandatory for all apply requests but we also infer the field manager from the user agent in certain scenarios.",
        "createdAt" : "2021-02-26T17:24:28Z",
        "updatedAt" : "2021-03-07T01:51:01Z",
        "lastEditedBy" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "tags" : [
        ]
      },
      {
        "id" : "51d323ba-e5d3-40a7-ad56-72a578d867e3",
        "parentId" : "3130f29b-ab71-4ed9-b1eb-457e5d2bfc98",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "We only infer it from Update, never from patch or apply. So this is accurate.\r\n\r\nI'd like to leave enforcement up to the server. My thinking here is (1) the request is going to fail anyway, so there is no additional risk and (2) While not a big deal in this case, I'd like to bias towards keep logic on the server wherever possible to keep our clients thin.",
        "createdAt" : "2021-02-26T17:39:21Z",
        "updatedAt" : "2021-03-07T01:51:01Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b42cae1575066166d6e63e1f3f5364aeccb0ca3",
    "line" : 169,
    "diffHunk" : "@@ -1,1 +651,655 @@var applyTemplate = `\n// Apply takes the given apply declarative configuration, applies it and returns the applied $.resultType|private$.\nfunc (c *$.type|privatePlural$) Apply(ctx context.Context, $.inputType|private$ *$.applyConfig|raw$, opts $.ApplyOptions|raw$) (result *$.resultType|raw$, err error) {\n\tif $.inputType|private$ == nil {\n\t\treturn nil, fmt.Errorf(\"$.inputType|private$ provided to Apply must not be nil\")"
  },
  {
    "id" : "b57408f8-b350-44a1-be9a-51103805703b",
    "prId" : 99214,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99214#pullrequestreview-603480548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dffddf3c-1eda-4774-9d75-5cea17c94b8b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Add a TODO about other subresources (e.g. scale)?",
        "createdAt" : "2021-03-03T23:59:58Z",
        "updatedAt" : "2021-03-07T01:51:01Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b42cae1575066166d6e63e1f3f5364aeccb0ca3",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +237,241 @@\tif tags.HasVerb(\"applyStatus\") && generateApply {\n\t\tsw.Do(applyStatusTemplate, m)\n\t}\n\t// TODO: Add subresource support once apply subresources are supported on the server side\n"
  }
]