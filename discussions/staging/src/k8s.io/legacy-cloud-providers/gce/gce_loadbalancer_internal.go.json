[
  {
    "id" : "984dfd18-458e-4d77-b136-369f42658137",
    "prId" : 99595,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99595#pullrequestreview-601018304",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33ffc983-a20d-48d4-a2e6-c469eca5520c",
        "parentId" : null,
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "Is it necessary to surface a warning/event that all ports are configured now despite the given ports?",
        "createdAt" : "2021-03-01T17:51:49Z",
        "updatedAt" : "2021-03-01T22:20:04Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      },
      {
        "id" : "32e4851a-d417-4bb7-a0e0-e42c2a64dc79",
        "parentId" : "33ffc983-a20d-48d4-a2e6-c469eca5520c",
        "authorId" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "body" : "The firewall rules are added only for the specified ports, so traffic from clients to any non-listed ports will not work. We can add an Info event in any case.",
        "createdAt" : "2021-03-01T17:56:01Z",
        "updatedAt" : "2021-03-01T22:20:04Z",
        "lastEditedBy" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "tags" : [
        ]
      },
      {
        "id" : "c00a96b6-e721-4bf8-ba27-52ff09e1a675",
        "parentId" : "33ffc983-a20d-48d4-a2e6-c469eca5520c",
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "Thanks, in that sense it might be fine.",
        "createdAt" : "2021-03-01T18:02:46Z",
        "updatedAt" : "2021-03-01T22:20:04Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      }
    ],
    "commit" : "2479f754d4dd23fe7e960af3dd6d025c77db9154",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +191,195 @@\t}\n\tif len(ports) > maxL4ILBPorts {\n\t\tnewFwdRule.Ports = nil\n\t\tnewFwdRule.AllPorts = true\n\t}"
  },
  {
    "id" : "212834ef-87d1-4c43-a801-b3e11c218c81",
    "prId" : 96491,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96491#pullrequestreview-536737779",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f444c223-f2a9-4dde-b037-70fc53e6b43c",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "* Don't log in predicates like this.\r\n* Don't eat errors silently.\r\n\r\nWe should either propagate the error up or state that malformed URLs are not equal to anything.\r\nMy take would be to propagate back up and have the caller log the error.\r\n",
        "createdAt" : "2020-11-19T18:16:38Z",
        "updatedAt" : "2020-11-19T18:16:38Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      },
      {
        "id" : "75ab04b0-d054-436b-bbf0-e55b96973f94",
        "parentId" : "f444c223-f2a9-4dde-b037-70fc53e6b43c",
        "authorId" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "body" : "As discussed offline, I will be making this change in a follow-up.",
        "createdAt" : "2020-11-23T18:24:57Z",
        "updatedAt" : "2020-11-23T18:24:57Z",
        "lastEditedBy" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "tags" : [
        ]
      }
    ],
    "commit" : "a65675f1b7adc1769245baa90137fbc8b2025959",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +985,989 @@\t// basepath could have differences like compute.googleapis.com vs www.googleapis.com, compare resourceIDs\n\toldResourceID, err := cloud.ParseResourceURL(old.BackendService)\n\tklog.Errorf(\"forwardingRulesEqual(): failed to parse backend resource URL from existing FR, err - %v\", err)\n\tnewResourceID, err := cloud.ParseResourceURL(new.BackendService)\n\tklog.Errorf(\"forwardingRulesEqual(): failed to parse resource URL from new FR, err - %v\", err)"
  },
  {
    "id" : "17c6b2e3-5bd2-4373-a549-6e804cdf44f6",
    "prId" : 93423,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93423#pullrequestreview-455227994",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be7836d0-d505-492d-b813-f3c2dcf0a8fc",
        "parentId" : null,
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "I have some concern regarding this line. If there is any bug in the logic generating newFwdRule, this is likely to cause a delete/create loop for the forwarding rules.\r\n\r\nThe bug can potentially due to 1. a new version of controller added a new field 2. GCE defaulting behavior change etc\r\n\r\nFeels a bit risky to compare the whole forwarding rule. Does it make sense to do spot checks? For instance, check the protocol and port and etc....\r\n\r\n",
        "createdAt" : "2020-07-24T22:43:28Z",
        "updatedAt" : "2020-07-24T22:43:53Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      },
      {
        "id" : "680f73ac-7aa2-4882-bf4b-4585bfc25480",
        "parentId" : "be7836d0-d505-492d-b813-f3c2dcf0a8fc",
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "Not sure how was this handled before?",
        "createdAt" : "2020-07-24T22:43:51Z",
        "updatedAt" : "2020-07-24T22:43:53Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      },
      {
        "id" : "6d28c6ed-ffb4-4bc5-a69c-b816a9d08979",
        "parentId" : "be7836d0-d505-492d-b813-f3c2dcf0a8fc",
        "authorId" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "body" : "This is the same code from before - https://github.com/kubernetes/kubernetes/blob/a34f1e483104bd51c3e9a6aec3dbbcf6301789da/staging/src/k8s.io/legacy-cloud-providers/gce/gce_loadbalancer_internal.go#L143",
        "createdAt" : "2020-07-24T23:03:12Z",
        "updatedAt" : "2020-07-24T23:03:12Z",
        "lastEditedBy" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "tags" : [
        ]
      },
      {
        "id" : "fa525cf1-f999-4286-8531-0e7d02fff509",
        "parentId" : "be7836d0-d505-492d-b813-f3c2dcf0a8fc",
        "authorId" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "body" : "forwardingRulesEqual compares select fields - https://github.com/kubernetes/kubernetes/blob/a34f1e483104bd51c3e9a6aec3dbbcf6301789da/staging/src/k8s.io/legacy-cloud-providers/gce/gce_loadbalancer_internal.go#L750",
        "createdAt" : "2020-07-24T23:09:03Z",
        "updatedAt" : "2020-07-24T23:09:03Z",
        "lastEditedBy" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fc6100eb56fa368df99a1e4747bf488f4ea8844",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +197,201 @@\n\tfwdRuleDeleted := false\n\tif existingFwdRule != nil && !forwardingRulesEqual(existingFwdRule, newFwdRule) {\n\t\t// Delete existing forwarding rule before making changes to the backend service. For example - changing protocol\n\t\t// of backend service without first deleting forwarding rule will throw an error since the linked forwarding"
  },
  {
    "id" : "55030860-bc18-4840-be40-63534d3c976d",
    "prId" : 89902,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89902#pullrequestreview-388569518",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04a602e6-a39a-4d5a-8d9e-9eccd4e9fec9",
        "parentId" : null,
        "authorId" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "body" : "The node list is passed in from https://github.com/kubernetes/kubernetes/blob/64d75b3bad5b153df0e95c9f8fd8337090096a49/pkg/controller/service/controller.go#L389\r\n\r\nIs this truncation assumed to be in alphabetical order because the nodelister returns the nodes in alphabetical order? If not, this might pick a different list of 1000 nodes in ever update. Can we add a comment here?",
        "createdAt" : "2020-04-06T19:50:07Z",
        "updatedAt" : "2020-04-06T19:50:07Z",
        "lastEditedBy" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "tags" : [
        ]
      },
      {
        "id" : "4e7d0ad7-0ed4-4aa3-ac01-db8dd979cf2e",
        "parentId" : "04a602e6-a39a-4d5a-8d9e-9eccd4e9fec9",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "sets.List() is returning items sorted:\r\nhttps://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/util/sets/string.go#L171",
        "createdAt" : "2020-04-06T19:51:32Z",
        "updatedAt" : "2020-04-06T19:51:33Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "79c88210-50b2-4077-bdf9-572b3d182059",
        "parentId" : "04a602e6-a39a-4d5a-8d9e-9eccd4e9fec9",
        "authorId" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "body" : "ok, looks good. ",
        "createdAt" : "2020-04-06T19:54:46Z",
        "updatedAt" : "2020-04-06T19:54:46Z",
        "lastEditedBy" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6f6972958061a888a482e8559c83dfd4cabcdcf",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +523,527 @@\tif len(kubeNodes) > maxInstancesPerInstanceGroup {\n\t\tklog.Warningf(\"Limiting number of VMs for InstanceGroup %s to %d\", name, maxInstancesPerInstanceGroup)\n\t\tkubeNodes = sets.NewString(kubeNodes.List()[:maxInstancesPerInstanceGroup]...)\n\t}\n"
  },
  {
    "id" : "a91726ae-bc8e-4b1b-baad-4a894ee260ab",
    "prId" : 88392,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88392#pullrequestreview-408451652",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4b2ffa8-2db8-48b8-9271-54a6b45d7fe1",
        "parentId" : null,
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "Trying to understand the logic - isn't `old.IPAddress == new.IPAddress` sufficient?",
        "createdAt" : "2020-05-08T18:33:14Z",
        "updatedAt" : "2020-05-12T17:26:38Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      },
      {
        "id" : "c54b64f3-0b3a-4c3b-bbd4-9393628132dd",
        "parentId" : "d4b2ffa8-2db8-48b8-9271-54a6b45d7fe1",
        "authorId" : "c2ad5c1e-821a-42c7-b311-cb3c38848770",
        "body" : "This logic was introduced in #46663 (Search for `FwdRuleEqual` in `gce_loadbalancer_internal.go`)\r\n\r\n@prameshj brought this up as well, we are still figuring out the thought process behind this logic. Probably, I will fix this in a follow up PR. \r\n\r\n",
        "createdAt" : "2020-05-08T18:50:32Z",
        "updatedAt" : "2020-05-12T17:26:38Z",
        "lastEditedBy" : "c2ad5c1e-821a-42c7-b311-cb3c38848770",
        "tags" : [
        ]
      },
      {
        "id" : "977f1eb7-53d5-43ee-899d-985364a8e6f9",
        "parentId" : "d4b2ffa8-2db8-48b8-9271-54a6b45d7fe1",
        "authorId" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "body" : "It seems fine to replace with just \"old.IPAddress == new.IPAddress\". I am thinking the `new.IPAddress == \"\"` is to disallow change when IP assignment drops to empty if network/subnetwork have not changed.\r\n\r\nI can't see why `old.IPAddress== \"\"` needs to be here. We were thinking of fixing in a follow-up PR so that in can be easily reverted without reverting the GA api change.",
        "createdAt" : "2020-05-08T18:55:14Z",
        "updatedAt" : "2020-05-12T17:26:38Z",
        "lastEditedBy" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa6e58997d452729a00e10c172e4cf7e8604c2c9",
    "line" : 234,
    "diffHunk" : "@@ -1,1 +937,941 @@\nfunc forwardingRulesEqual(old, new *compute.ForwardingRule) bool {\n\treturn (old.IPAddress == \"\" || new.IPAddress == \"\" || old.IPAddress == new.IPAddress) &&\n\t\told.IPProtocol == new.IPProtocol &&\n\t\told.LoadBalancingScheme == new.LoadBalancingScheme &&"
  },
  {
    "id" : "9869f954-6005-40d8-93d2-93d6333308d2",
    "prId" : 84622,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84622#pullrequestreview-310669833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8aef9cb-d1bf-44bd-ab4d-58c500c5dffa",
        "parentId" : null,
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "maybe delete the legacy Firewall after the new one gets created?",
        "createdAt" : "2019-10-31T23:24:12Z",
        "updatedAt" : "2019-11-07T01:04:44Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      },
      {
        "id" : "8c124928-1e3e-44de-b666-a27004306215",
        "parentId" : "e8aef9cb-d1bf-44bd-ab4d-58c500c5dffa",
        "authorId" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "body" : "fixed.",
        "createdAt" : "2019-11-01T20:06:33Z",
        "updatedAt" : "2019-11-07T01:04:44Z",
        "lastEditedBy" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "tags" : [
        ]
      }
    ],
    "commit" : "a52125cc0aab2aa50dc24a53a17d9201e67359fe",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +343,347 @@\t// TODO(84821) Remove legacyFwName logic after 3 releases, so there would have been atleast 2 master upgrades that would\n\t// have triggered service sync and deletion of the legacy rules.\n\tif legacyFwName != \"\" {\n\t\t// Check for firewall named with the legacy naming scheme and delete if found.\n\t\tlegacyFirewall, err := g.GetFirewall(legacyFwName)"
  },
  {
    "id" : "0db69c87-bf87-4fa4-97a6-66f1fb09a6d9",
    "prId" : 84622,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84622#pullrequestreview-310669805",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20899946-a737-44a5-ab3b-f4995a1c8a8e",
        "parentId" : null,
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "Like Minhan mentioned, seems like this will be triggered even if the creation fails on the new rule?",
        "createdAt" : "2019-10-31T23:32:40Z",
        "updatedAt" : "2019-11-07T01:04:44Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      },
      {
        "id" : "6db1a943-577e-447e-b72b-d0f485e522c8",
        "parentId" : "20899946-a737-44a5-ab3b-f4995a1c8a8e",
        "authorId" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "body" : "Fixed.",
        "createdAt" : "2019-11-01T20:06:28Z",
        "updatedAt" : "2019-11-07T01:04:44Z",
        "lastEditedBy" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "tags" : [
        ]
      }
    ],
    "commit" : "a52125cc0aab2aa50dc24a53a17d9201e67359fe",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +353,357 @@\t\t\t// next sync or when the service is deleted.\n\t\t\tdefer func() {\n\t\t\t\terr = g.DeleteFirewall(legacyFwName)\n\t\t\t\tif err != nil {\n\t\t\t\t\tklog.Errorf(\"Failed to delete legacy firewall %s for service %s/%s, err %v\","
  },
  {
    "id" : "6309e2b3-a527-45b1-a53f-85ea211b4226",
    "prId" : 84622,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84622#pullrequestreview-310669720",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e07ce6fe-a77a-400e-86cf-695742b773b7",
        "parentId" : null,
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "We should probably have a TODO somewhere for removing the legacy logic after X releases?",
        "createdAt" : "2019-10-31T23:37:05Z",
        "updatedAt" : "2019-11-07T01:04:44Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      },
      {
        "id" : "51bf70fe-abf4-468c-8094-448f4e88c9ea",
        "parentId" : "e07ce6fe-a77a-400e-86cf-695742b773b7",
        "authorId" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "body" : "Added. ",
        "createdAt" : "2019-11-01T20:06:18Z",
        "updatedAt" : "2019-11-07T01:04:44Z",
        "lastEditedBy" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "tags" : [
        ]
      }
    ],
    "commit" : "a52125cc0aab2aa50dc24a53a17d9201e67359fe",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +343,347 @@\t// TODO(84821) Remove legacyFwName logic after 3 releases, so there would have been atleast 2 master upgrades that would\n\t// have triggered service sync and deletion of the legacy rules.\n\tif legacyFwName != \"\" {\n\t\t// Check for firewall named with the legacy naming scheme and delete if found.\n\t\tlegacyFirewall, err := g.GetFirewall(legacyFwName)"
  },
  {
    "id" : "1b83abb4-6083-49dc-b749-965f79863dfc",
    "prId" : 82257,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82257#pullrequestreview-310905057",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "290cd277-dcc1-4739-91d3-7380d105b0b7",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "Is this what we want? This seems to violate k8s-style reconciliation \r\n",
        "createdAt" : "2019-11-04T07:30:27Z",
        "updatedAt" : "2019-11-08T23:39:45Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      },
      {
        "id" : "182ee5b1-f8b0-40a7-b525-5ee3a959828c",
        "parentId" : "290cd277-dcc1-4739-91d3-7380d105b0b7",
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "I see this was logic from before, which seems kind of strange.",
        "createdAt" : "2019-11-04T07:33:15Z",
        "updatedAt" : "2019-11-08T23:39:45Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      }
    ],
    "commit" : "85e0457d63c7fbd0651b25a76940b2fe31d1d221",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +115,119 @@\t} else {\n\t\t// TODO(84885) remove this once ILBCustomSubnet goes beta.\n\t\tif existingFwdRule != nil && existingFwdRule.Subnetwork != \"\" {\n\t\t\t// If the ILB already exists, continue using the subnet that it's already using.\n\t\t\t// This is to support existing ILBs that were setup using the wrong subnet - https://github.com/kubernetes/kubernetes/pull/57861"
  },
  {
    "id" : "fd14ce73-5ccf-4186-8c11-0667c6bb9f9f",
    "prId" : 82257,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82257#pullrequestreview-310905057",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f39e9be3-f1f8-4c8d-87b5-25ab1a8d236f",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "don't eat the newline here:\r\n```\r\nILBOptions{\r\n  AllowGlobalAccess: ..., \r\n  ...,\r\n}\r\n```",
        "createdAt" : "2019-11-04T07:31:10Z",
        "updatedAt" : "2019-11-08T23:39:45Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      }
    ],
    "commit" : "85e0457d63c7fbd0651b25a76940b2fe31d1d221",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +792,796 @@\nfunc getILBOptions(svc *v1.Service) ILBOptions {\n\treturn ILBOptions{AllowGlobalAccess: GetLoadBalancerAnnotationAllowGlobalAccess(svc),\n\t\tSubnetName: GetLoadBalancerAnnotationSubnet(svc),\n\t}"
  },
  {
    "id" : "4cd50cd2-2223-487d-8707-a2f0a2358504",
    "prId" : 81549,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81549#pullrequestreview-281180869",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be038d7e-ab9c-49ca-af58-7688d0313ea1",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "Can we use meta.Version instead of the raw string. Also, you need to check that it is a sensible value (\"alpha\", \"beta\", \"ga\", \"\") instead of letting raw strings propagate around.",
        "createdAt" : "2019-08-28T20:35:17Z",
        "updatedAt" : "2019-08-30T00:05:08Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      },
      {
        "id" : "6110619a-f6e8-4cda-b388-aa66a025ab2a",
        "parentId" : "be038d7e-ab9c-49ca-af58-7688d0313ea1",
        "authorId" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "body" : "fixed. We check for beta and assume GA in the else case.",
        "createdAt" : "2019-08-29T01:34:29Z",
        "updatedAt" : "2019-08-30T00:05:08Z",
        "lastEditedBy" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "tags" : [
        ]
      }
    ],
    "commit" : "cae11a137932496538c65b26b1ac19b7f638bb3c",
    "line" : 265,
    "diffHunk" : "@@ -1,1 +879,883 @@\t\td.APIVersion = meta.VersionGA\n\t}\n\treturn d.APIVersion, nil\n}\n"
  },
  {
    "id" : "cb64a907-e1c9-4a13-8c0c-d1e359fc37bc",
    "prId" : 81549,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81549#pullrequestreview-281743080",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e6d87cd-0184-4f8e-964b-9fa74bdb523a",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "use a type switch https://tour.golang.org/methods/16:\r\n```\r\nswitch fr := rule.(type) {\r\n  case *compute.ForwardingRule:\r\n    ...\r\n  case *computebeta.ForwardingRule:\r\n    ...\r\n```\r\n",
        "createdAt" : "2019-08-29T21:16:22Z",
        "updatedAt" : "2019-08-30T00:05:08Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      },
      {
        "id" : "087606a7-c9f2-4986-bfe1-bba7d5c7a429",
        "parentId" : "0e6d87cd-0184-4f8e-964b-9fa74bdb523a",
        "authorId" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "body" : "This is already using type switch. Removed unnecessary typecast. ",
        "createdAt" : "2019-08-29T21:55:18Z",
        "updatedAt" : "2019-08-30T00:05:08Z",
        "lastEditedBy" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "tags" : [
        ]
      }
    ],
    "commit" : "cae11a137932496538c65b26b1ac19b7f638bb3c",
    "line" : 158,
    "diffHunk" : "@@ -1,1 +772,776 @@func toForwardingRuleComposite(rule interface{}) (frc *forwardingRuleComposite, err error) {\n\tswitch fr := rule.(type) {\n\tcase *compute.ForwardingRule:\n\t\tfrc = &forwardingRuleComposite{\n\t\t\tname:           fr.Name,"
  },
  {
    "id" : "da1f9862-b8d3-4cb1-8e4c-4bfbafd0f723",
    "prId" : 78463,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78463#pullrequestreview-245039019",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b39644b4-92d6-4152-9823-b9ac6e89ddd5",
        "parentId" : null,
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "You probably want to parse the annotation. Probably leave it for TODO for now",
        "createdAt" : "2019-06-03T18:09:02Z",
        "updatedAt" : "2019-06-03T18:09:06Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      }
    ],
    "commit" : "fea60b87740135e3ca81c6a0a515f528705b9355",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +37,41 @@\nfunc usesNEG(service *v1.Service) bool {\n\t_, ok := service.GetAnnotations()[NEGAnnotation]\n\treturn ok\n}"
  }
]