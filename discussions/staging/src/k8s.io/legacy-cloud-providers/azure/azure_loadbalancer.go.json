[
  {
    "id" : "5abb5404-f0ae-4540-9b76-93986a676ea7",
    "prId" : 99825,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99825#pullrequestreview-608196997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da8e2c26-665a-495b-bceb-d8cc7fefbadf",
        "parentId" : null,
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "Might be nice to add an info line that you are skipping additional rules.\r\n\r\nAlso it seems like its possible that HA rule might not be the first, in which case you will have more than one rule, if a non HA rule snuck in first.",
        "createdAt" : "2021-03-09T17:28:58Z",
        "updatedAt" : "2021-03-09T17:28:58Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "60cd27a0-1fab-4708-984d-256d3253ccbf",
        "parentId" : "da8e2c26-665a-495b-bceb-d8cc7fefbadf",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "> Also it seems like its possible that HA rule might not be the first, in which case you will have more than one rule, if a non HA rule snuck in first.\r\n\r\nthis shouldn't happen as the HA mode is determined by service annotation, instead of some configure on ports. And, when the first HA rule created, `highAvailabilityPortsEnabled` would be marked as true.",
        "createdAt" : "2021-03-09T23:14:40Z",
        "updatedAt" : "2021-03-09T23:14:40Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "ab388fc0-2205-4b4f-91db-296a7415f44a",
        "parentId" : "da8e2c26-665a-495b-bceb-d8cc7fefbadf",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "> Might be nice to add an info line that you are skipping additional rules.\r\n\r\nAnd this is actually not skipping additional rules. It is one rule to allow all ports, that's why the comment said `only one rule should be configured`.",
        "createdAt" : "2021-03-09T23:17:43Z",
        "updatedAt" : "2021-03-09T23:17:43Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "e48f80686e500de2edea3f82a313b6e3e2885f1b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1630,1634 @@\tfor _, port := range ports {\n\t\tif highAvailabilityPortsEnabled {\n\t\t\t// Since the port is always 0 when enabling HA, only one rule should be configured.\n\t\t\tbreak\n\t\t}"
  },
  {
    "id" : "a28a39b7-5812-442e-9ba8-3a78f4cb357f",
    "prId" : 96450,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96450#pullrequestreview-528012146",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8935b4dd-d4ef-48ea-9aa7-7f83c9205058",
        "parentId" : null,
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "this function should only compare the tags from annotation `ServiceAnnotationAzurePIPTags`, and other tags set by customers should also be kept on updating",
        "createdAt" : "2020-11-11T09:41:29Z",
        "updatedAt" : "2020-11-12T10:59:39Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "b33715711ed4d77f540bb031cc004d6694a8a361",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +2122,2126 @@\n//  ensurePIPTagged ensures the public IP of the service is tagged as configured\nfunc (az *Cloud) ensurePIPTagged(service *v1.Service, pip *network.PublicIPAddress) bool {\n\tchanged := false\n\tconfigTags := parseTags(az.Tags)"
  },
  {
    "id" : "c74162da-69fb-4059-8328-4b07a15fbceb",
    "prId" : 94991,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94991#pullrequestreview-497236265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2fbf1ea1-8973-481c-ac9c-46a1cdff4619",
        "parentId" : null,
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "add comments about return error, parameter",
        "createdAt" : "2020-09-28T07:17:11Z",
        "updatedAt" : "2020-09-29T13:58:37Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b3e6ab2b07c23109c3572263b17bbb1a009c82d",
    "line" : 745,
    "diffHunk" : "@@ -1,1 +2372,2376 @@// 2. an error when the pip is nil\n// example:\n// \"ns1/svc1\" + [\"ns1/svc1\", \"ns2/svc2\"] = \"ns1/svc1,ns2/svc2\"\nfunc bindServicesToPIP(pip *network.PublicIPAddress, incomingServiceNames []string, replace bool) (bool, error) {\n\tif pip == nil {"
  },
  {
    "id" : "8ee2efc6-4f26-478d-9c85-0882d997eb27",
    "prId" : 94991,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94991#pullrequestreview-498387994",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "343531cb-cf43-4a72-9e63-9af96b74dd53",
        "parentId" : null,
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "why an unit test condition is added here?",
        "createdAt" : "2020-09-29T10:25:08Z",
        "updatedAt" : "2020-09-29T13:58:37Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "22d855d1-7639-4d2b-a00b-a2191fbf1302",
        "parentId" : "343531cb-cf43-4a72-9e63-9af96b74dd53",
        "authorId" : "64fc929e-883a-48a0-9455-8a7e0828d4fa",
        "body" : "it is for some existing cases",
        "createdAt" : "2020-09-29T11:54:39Z",
        "updatedAt" : "2020-09-29T13:58:37Z",
        "lastEditedBy" : "64fc929e-883a-48a0-9455-8a7e0828d4fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b3e6ab2b07c23109c3572263b17bbb1a009c82d",
    "line" : 486,
    "diffHunk" : "@@ -1,1 +1372,1376 @@\t\t\t\t\trule.FrontendPort != nil &&\n\t\t\t\t\t*rule.FrontendPort == port.Port {\n\t\t\t\t\t// ignore self-owned rules for unit test\n\t\t\t\t\tif rule.Name != nil && az.serviceOwnsRule(service, *rule.Name) {\n\t\t\t\t\t\tcontinue"
  },
  {
    "id" : "cbbac2e3-1013-4759-892e-8c57afb9a76d",
    "prId" : 88448,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88448#pullrequestreview-365082935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "414196ed-2895-4b1d-82b0-4cc0b068a530",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "ClusterIP may be \"None\" for headless services, should we skip this if that's the case?",
        "createdAt" : "2020-02-26T12:38:26Z",
        "updatedAt" : "2020-02-26T21:34:40Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "cb8954e9-3bc3-48d7-8b85-48668508e328",
        "parentId" : "414196ed-2895-4b1d-82b0-4cc0b068a530",
        "authorId" : "62eb404a-5fe6-4b29-afab-583b57ce8f19",
        "body" : "@aojea The cloud provider reconciles only for services of type `LoadBalancer`. Since headless services are of type `ClusterIP` we don't have to worry about them here. ",
        "createdAt" : "2020-02-26T17:09:05Z",
        "updatedAt" : "2020-02-26T21:34:40Z",
        "lastEditedBy" : "62eb404a-5fe6-4b29-afab-583b57ce8f19",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee00896712c9a3521470ba364dd1a151d81559bf",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +552,556 @@\t// use the same family as the clusterIP as we support IPv6 single stack as well\n\t// as dual-stack clusters\n\tipv6 := utilnet.IsIPv6String(service.Spec.ClusterIP)\n\tif ipv6 {\n\t\tpip.PublicIPAddressVersion = network.IPv6"
  },
  {
    "id" : "ab5b70b7-ce23-484c-8a18-ff2a076f3213",
    "prId" : 81213,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81213#pullrequestreview-273136797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34a4ce30-b5fa-480f-8a8e-f051a65d743d",
        "parentId" : null,
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "When users set a wrong annotation, we should report an error instead of creating a new PIP silently.\r\n\r\nSo besides this, we also need to get the PIP and return errors when it couldn't be found.",
        "createdAt" : "2019-08-09T13:39:20Z",
        "updatedAt" : "2019-08-12T09:24:46Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "3facb631d4eacec1384515487c698ea19c54ebc4",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +421,425 @@\t\treturn name, shouldPIPExisted, nil\n\t}\n\n\tloadBalancerIP := service.Spec.LoadBalancerIP\n\tif len(loadBalancerIP) == 0 {"
  },
  {
    "id" : "2e551516-c371-49cf-8ad6-a24ae95ff00a",
    "prId" : 80485,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80485#pullrequestreview-269123371",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38558bc8-c728-403c-9efa-9d394339df26",
        "parentId" : null,
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "When `EnableFloatingIP` is true, the BackendPort is same as FrontendPort (see L983).\r\n\r\nIf `EnableFloatingIP` is false, then BackendPort should be nodePort.",
        "createdAt" : "2019-07-30T05:04:45Z",
        "updatedAt" : "2019-08-29T05:07:51Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "486080d5-31e9-4bc4-a8f2-d0508b8fe2f6",
        "parentId" : "38558bc8-c728-403c-9efa-9d394339df26",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "done. I couldn't test the traffic yet until the kube-proxy work is done.",
        "createdAt" : "2019-07-31T16:09:12Z",
        "updatedAt" : "2019-08-29T05:07:51Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd9108ba8454a390942a6ec7b8eefdc028fecc52",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +1058,1062 @@\t\t\t}\n\t\t\t// LB does not support floating IPs for IPV6 rules\n\t\t\tif utilnet.IsIPv6String(service.Spec.ClusterIP) {\n\t\t\t\texpectedRule.BackendPort = to.Int32Ptr(port.NodePort)\n\t\t\t\texpectedRule.EnableFloatingIP = to.BoolPtr(false)"
  },
  {
    "id" : "141df61f-385c-48c7-a6b1-c7eed213037b",
    "prId" : 80485,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80485#pullrequestreview-281054681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "612abb3e-7229-44d0-bd2f-2386066468ff",
        "parentId" : null,
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "I think you could merge these two logs as one in outside:\r\n`klog.V(2).Infof(\"service(%s): pip(%s) - creating as %s for clusterIP:%v\", serviceName, *pip.Name, pip.PublicIPAddressVersion, service.Spec.ClusterIP)`",
        "createdAt" : "2019-08-24T13:25:01Z",
        "updatedAt" : "2019-08-29T05:07:51Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      },
      {
        "id" : "73e73865-8c1b-406f-80e7-95ddf5b66241",
        "parentId" : "612abb3e-7229-44d0-bd2f-2386066468ff",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "I understand, but i need to call out the `ipfamily` of the ip in the log line. This will make debugging a lot easier.",
        "createdAt" : "2019-08-28T19:33:01Z",
        "updatedAt" : "2019-08-29T05:07:51Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd9108ba8454a390942a6ec7b8eefdc028fecc52",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +551,555 @@\t\t} else {\n\t\t\tpip.PublicIPAddressVersion = network.IPv4\n\t\t\tklog.V(2).Infof(\"service(%s): pip(%s) - creating as ipv4 for clusterIP:%v\", serviceName, *pip.Name, service.Spec.ClusterIP)\n\t\t}\n\t}"
  },
  {
    "id" : "3bdf2c99-cbe7-4c6a-bcf1-695865668fc3",
    "prId" : 80485,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80485#pullrequestreview-284422950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d429aec-c3fb-4cbc-be09-7d3e16a3a178",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "This change isn't feature gated, is that okay because we already assume ClusterIP can never by v6 for Azure internal LB? ",
        "createdAt" : "2019-09-03T15:56:30Z",
        "updatedAt" : "2019-09-03T15:56:30Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "cfcbceeb-808b-4d10-bc94-aac94708e54a",
        "parentId" : "6d429aec-c3fb-4cbc-be09-7d3e16a3a178",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "This change is not gated, because we want to be able to run IPv6 only clusters on Azure. Also, ILB on Azure does not support IPv6 on ILB (it is in the release notes of this PR) ",
        "createdAt" : "2019-09-05T17:29:44Z",
        "updatedAt" : "2019-09-05T17:29:44Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd9108ba8454a390942a6ec7b8eefdc028fecc52",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +751,755 @@\t\t\t\t// TODO: remove this check when ILB supports IPv6 *and* the SDK\n\t\t\t\t// have been rev'ed to 2019* version\n\t\t\t\tif utilnet.IsIPv6String(service.Spec.ClusterIP) {\n\t\t\t\t\treturn nil, fmt.Errorf(\"ensure(%s): lb(%s) - internal load balancers does not support IPv6\", serviceName, lbName)\n\t\t\t\t}"
  }
]