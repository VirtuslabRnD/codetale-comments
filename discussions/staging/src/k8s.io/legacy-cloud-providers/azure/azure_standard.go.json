[
  {
    "id" : "1244a402-d5dc-42c6-a7d9-1d94042022ac",
    "prId" : 102516,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102516#pullrequestreview-674867590",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cc95ed5-5705-48e6-a6bf-97f0bb922fe4",
        "parentId" : null,
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "As it stands the caller cannot tell the difference between this returned response and the response a few lines earlier (ie. whether or not the pip/fip were fully configured. ) We could just lose the earlier return if we really don't care about differentiating. Also are we sure that we might not hit a problem where something after calling serviceOwnsFrontendIP() references PublicIPAddress safely because currently this ensures its not nil? ",
        "createdAt" : "2021-06-02T18:48:31Z",
        "updatedAt" : "2021-06-02T18:48:31Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "ad40cb4f-9059-435d-b3b1-cd22f5daf9d9",
        "parentId" : "0cc95ed5-5705-48e6-a6bf-97f0bb922fe4",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "yes, that's a good suggestion. We could improve in the out-of-tree repo. And we're sure that the nil properties won't cause issues after the check (the nil pointer would be rechecked again whenever it is consumed again).",
        "createdAt" : "2021-06-03T04:37:21Z",
        "updatedAt" : "2021-06-03T04:37:21Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "95ac461a290b80cb355ffab5d702cd3ddf3b77b0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +382,386 @@\t\t}\n\n\t\treturn false, isPrimaryService, nil\n\t}\n"
  },
  {
    "id" : "b59f567c-212e-40e9-88f2-0003a2d10c5a",
    "prId" : 101739,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101739#pullrequestreview-678427481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a91a0e8f-0ff7-4ad9-b0cb-442b430c8541",
        "parentId" : null,
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "Did you want to also verify fip.PublicIPAddress != nil ?",
        "createdAt" : "2021-05-07T18:13:59Z",
        "updatedAt" : "2021-05-07T18:13:59Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "5a51a39e-c489-4a9c-97ea-586c0cb383a2",
        "parentId" : "a91a0e8f-0ff7-4ad9-b0cb-442b430c8541",
        "authorId" : "64fc929e-883a-48a0-9455-8a7e0828d4fa",
        "body" : "yes, but `fip.FrontendIPConfigurationPropertiesFormat.PublicIPAddress` is more clear for reading",
        "createdAt" : "2021-05-07T23:49:59Z",
        "updatedAt" : "2021-05-07T23:49:59Z",
        "lastEditedBy" : "64fc929e-883a-48a0-9455-8a7e0828d4fa",
        "tags" : [
        ]
      },
      {
        "id" : "b9409adc-9457-4d00-b297-78ec9d321d25",
        "parentId" : "a91a0e8f-0ff7-4ad9-b0cb-442b430c8541",
        "authorId" : "38ca536c-3406-4cf6-b8a1-2e1b07962bc7",
        "body" : "The funny thing is that I also was confused why fip.PublicIPAddress was not checked - is that not the real problem in the code on the next line?  Either that code should also used the \"more clear\" syntax or some comment should be here about how both end up being the same pointer since that is very much not clear from reading this code in this file.",
        "createdAt" : "2021-06-08T12:05:15Z",
        "updatedAt" : "2021-06-08T12:05:15Z",
        "lastEditedBy" : "38ca536c-3406-4cf6-b8a1-2e1b07962bc7",
        "tags" : [
        ]
      }
    ],
    "commit" : "527a9c9df8e8835228ddf9f0986363e6ffcc0a55",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +371,375 @@\t\t\tpip.IPAddress != nil &&\n\t\t\tfip.FrontendIPConfigurationPropertiesFormat != nil &&\n\t\t\tfip.FrontendIPConfigurationPropertiesFormat.PublicIPAddress != nil {\n\t\t\tif strings.EqualFold(to.String(pip.ID), to.String(fip.PublicIPAddress.ID)) {\n\t\t\t\tklog.V(4).Infof(\"serviceOwnsFrontendIP: found secondary service %s of the frontend IP config %s\", service.Name, *fip.Name)"
  },
  {
    "id" : "8fc9234d-3571-44e6-87a8-8892209984eb",
    "prId" : 95542,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95542#pullrequestreview-584910842",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4baa2af-130f-4044-84f3-430469169fbe",
        "parentId" : null,
        "authorId" : "aa111d77-fac6-440e-b034-3710cc9b43f3",
        "body" : "I have test data from 1.21.0-alpha clusters built by aks-engine that suggests this PR broke ELB creation for clusters running Windows availability sets. AKS Engine creates Windows NIC interfaces with a name like `1598k8s01nic-1`. The regex in the `nicIDRE` reference above expects an explicit `-nic-` suffix (note the `-` before `nic-1`).\r\n\r\nSee this go playground example that proves that the above regex fails the match length test:\r\n\r\nhttps://play.golang.org/p/Eh63N6EAOsc\r\n\r\nIt will be hard to change the name of the NIC that Windows VMs are attached in the AKS Engine ARM template logic without breaking backwards compatibility. Would it be possible to change the NIC regex to:\r\n\r\n`/subscriptions/(?:.*)/resourceGroups/(?:.+)/providers/Microsoft.Network/networkInterfaces/(.+)nic-(.+)/ipConfigurations/(?:.*)`\r\n\r\ncc @marosset @jsturtevant @nilo19 @jadarsie @CecileRobertMichon @devigned\r\n\r\nThis took longer than normal to verify it should have to discover due to the fact that we don't have a lot of AvailabilitySet tests for Windows.\r\n\r\n@chewong how are we testing Windows + Availability Set nodes upstream? We should probably target catching these symptoms earlier in the upstream tests themselves.",
        "createdAt" : "2021-02-05T21:36:42Z",
        "updatedAt" : "2021-02-05T21:36:42Z",
        "lastEditedBy" : "aa111d77-fac6-440e-b034-3710cc9b43f3",
        "tags" : [
        ]
      },
      {
        "id" : "118a4d65-89d4-49b7-96c1-5a5c57737a7b",
        "parentId" : "e4baa2af-130f-4044-84f3-430469169fbe",
        "authorId" : "07ccbf11-fca4-40b2-afdb-22b32c6be709",
        "body" : "> how are we testing Windows + Availability Set nodes upstream?\r\n\r\nWe have https://testgrid.k8s.io/provider-azure-windows#pr-aks-engine-azure-windows and https://testgrid.k8s.io/provider-azure-windows#pr-aks-engine-azure-windows-containerd but I don't think we have a job that tests the scenario above.",
        "createdAt" : "2021-02-05T21:51:59Z",
        "updatedAt" : "2021-02-05T21:51:59Z",
        "lastEditedBy" : "07ccbf11-fca4-40b2-afdb-22b32c6be709",
        "tags" : [
        ]
      },
      {
        "id" : "96331b76-3aa2-4ac5-9773-93207a24bcec",
        "parentId" : "e4baa2af-130f-4044-84f3-430469169fbe",
        "authorId" : "3966b9fe-a8de-4641-9e7e-947bf0585613",
        "body" : "All aks-engine test passes on https://testgrid.k8s.io/sig-windows-azure use availability sets.",
        "createdAt" : "2021-02-05T21:54:00Z",
        "updatedAt" : "2021-02-05T21:54:00Z",
        "lastEditedBy" : "3966b9fe-a8de-4641-9e7e-947bf0585613",
        "tags" : [
        ]
      },
      {
        "id" : "e72a3906-f4c0-4c06-9c98-7d73564a916a",
        "parentId" : "e4baa2af-130f-4044-84f3-430469169fbe",
        "authorId" : "c3c31161-e4c7-4bbd-ba7d-17ef3c134c5b",
        "body" : "I suspect this PR will break LB scenarios for all CAPZ VMs (not just Windows), as CAPZ naming for network interfaces is  `<machinename>-nic` (no `-` after \"nic\").",
        "createdAt" : "2021-02-05T21:54:19Z",
        "updatedAt" : "2021-02-05T21:54:20Z",
        "lastEditedBy" : "c3c31161-e4c7-4bbd-ba7d-17ef3c134c5b",
        "tags" : [
        ]
      },
      {
        "id" : "fcd1e1fb-f14e-41c4-b34f-65267fea3006",
        "parentId" : "e4baa2af-130f-4044-84f3-430469169fbe",
        "authorId" : "64fc929e-883a-48a0-9455-8a7e0828d4fa",
        "body" : "We changed the logic of this function in another PR https://github.com/kubernetes/kubernetes/pull/97635",
        "createdAt" : "2021-02-06T14:11:58Z",
        "updatedAt" : "2021-02-06T14:11:58Z",
        "lastEditedBy" : "64fc929e-883a-48a0-9455-8a7e0828d4fa",
        "tags" : [
        ]
      },
      {
        "id" : "6ac7dbc0-a28c-494c-ab51-81cc3772335f",
        "parentId" : "e4baa2af-130f-4044-84f3-430469169fbe",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "FYI @nader-ziada ",
        "createdAt" : "2021-02-06T19:36:42Z",
        "updatedAt" : "2021-02-06T19:36:42Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "7964e302b0273e737a06e49633df18f4a4e0a1f9",
    "line" : 223,
    "diffHunk" : "@@ -1,1 +1026,1030 @@func (as *availabilitySet) GetNodeNameByIPConfigurationID(ipConfigurationID string) (string, error) {\n\tmatches := nicIDRE.FindStringSubmatch(ipConfigurationID)\n\tif len(matches) != 3 {\n\t\tklog.V(4).Infof(\"Can not extract VM name from ipConfigurationID (%s)\", ipConfigurationID)\n\t\treturn \"\", fmt.Errorf(\"invalid ip config ID %s\", ipConfigurationID)"
  },
  {
    "id" : "3ca129db-1acb-4856-81a1-2d0266088444",
    "prId" : 94991,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94991#pullrequestreview-497253040",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5af41449-412a-434d-a2d1-0bb18bc23593",
        "parentId" : null,
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "I would vote for `IPOwnedByService`",
        "createdAt" : "2020-09-28T07:32:31Z",
        "updatedAt" : "2020-09-29T13:58:37Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b3e6ab2b07c23109c3572263b17bbb1a009c82d",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +333,337 @@// 2. The secondary services must have their loadBalancer IP set if they want to share the same config as the primary\n// service. Hence, it can be tracked by the loadBalancer IP.\nfunc (az *Cloud) serviceOwnsFrontendIP(fip network.FrontendIPConfiguration, service *v1.Service) (bool, bool, error) {\n\tvar isPrimaryService bool\n\tbaseName := az.GetLoadBalancerName(context.TODO(), \"\", service)"
  },
  {
    "id" : "acc78e59-fc5e-48cb-a708-cc688703871c",
    "prId" : 86276,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86276#pullrequestreview-332246045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01f6f08a-2ae0-4559-85fb-eb2c2f18042f",
        "parentId" : null,
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "is it possible that returned length of LoadBalancerRuleName exceeds 80?",
        "createdAt" : "2019-12-15T03:30:20Z",
        "updatedAt" : "2019-12-15T07:28:17Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      },
      {
        "id" : "52c9162d-b07d-4671-84c7-8177aedc982e",
        "parentId" : "01f6f08a-2ae0-4559-85fb-eb2c2f18042f",
        "authorId" : "405e6d07-e29d-4d39-a352-7a5b887f25b5",
        "body" : "that's not possible, the length of prefix + protocol + port has been calculated at len(ruleName). And based on how we calculate, it won't exceed 80 at that time, because UID is 36 characters - 4 hythen + 1 'a' at begining, it's 33 characters. with ports and protocol, it's well below 80.\r\n\r\nat L287 we use the rule name length to truncate it to 80.",
        "createdAt" : "2019-12-15T06:35:09Z",
        "updatedAt" : "2019-12-15T07:28:17Z",
        "lastEditedBy" : "405e6d07-e29d-4d39-a352-7a5b887f25b5",
        "tags" : [
        ]
      },
      {
        "id" : "6a404ae2-953d-4214-b95b-26b8de738532",
        "parentId" : "01f6f08a-2ae0-4559-85fb-eb2c2f18042f",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "it won't since the subnetSegment has been truncated at L289",
        "createdAt" : "2019-12-15T06:50:09Z",
        "updatedAt" : "2019-12-15T07:28:17Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbe3521e8e5c54373b4889e623a1c6ef9a1e9790",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +290,294 @@\t}\n\n\treturn fmt.Sprintf(\"%s-%s-%s-%d\", prefix, subnetSegment, protocol, port)\n}\n"
  },
  {
    "id" : "458856a9-06b9-4046-a137-1e8297cbe3b1",
    "prId" : 80485,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80485#pullrequestreview-268158107",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "286a9580-7562-4d28-95c8-c1c1ce7e88be",
        "parentId" : null,
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "this comment should probably also be included in the release notes (user-facing changes).",
        "createdAt" : "2019-07-30T05:06:45Z",
        "updatedAt" : "2019-08-29T05:07:51Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd9108ba8454a390942a6ec7b8eefdc028fecc52",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +263,267 @@// clusters moving from IPv4 to duakstack will require no changes\n// clusters moving from IPv6 (while not seen in the wild, we can not rule out their existence)\n// to dualstack will require deleting backend pools (the reconciler will take care of creating correct backendpools)\nfunc getBackendPoolName(clusterName string, service *v1.Service) string {\n\tif !utilfeature.DefaultFeatureGate.Enabled(IPv6DualStack) {"
  },
  {
    "id" : "3baf7fd9-eddc-48c4-9c75-85e706424fb6",
    "prId" : 80485,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80485#pullrequestreview-269120652",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2211123c-4f6e-4be1-adf0-04273e36936d",
        "parentId" : null,
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "consider using `features.IPv6DualStack` from `pkg/features` directly here?",
        "createdAt" : "2019-07-30T05:08:50Z",
        "updatedAt" : "2019-08-29T05:07:51Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "08605afd-bce7-40c4-8773-ee369f6032dc",
        "parentId" : "2211123c-4f6e-4be1-adf0-04273e36936d",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "We can not vendor `pkg/features` here, it will create a circular dependency",
        "createdAt" : "2019-07-31T16:05:10Z",
        "updatedAt" : "2019-08-29T05:07:51Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd9108ba8454a390942a6ec7b8eefdc028fecc52",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +49,53 @@\t// IPv6DualStack is here to avoid having to import features pkg\n\t// and violate import rules\n\tIPv6DualStack featuregate.Feature = \"IPv6DualStack\"\n\n\tloadBalancerMinimumPriority = 500"
  }
]