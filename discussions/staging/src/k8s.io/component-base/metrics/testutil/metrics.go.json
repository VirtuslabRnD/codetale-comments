[
  {
    "id" : "c8405088-0662-47f4-a319-f768778e4a17",
    "prId" : 90501,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90501#pullrequestreview-400466944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9dc2e11-54df-4501-9be3-48688a1ae8dc",
        "parentId" : null,
        "authorId" : "cc740aab-0edd-4978-b80c-6ca3543a6188",
        "body" : "Empty slice declaration via literal ",
        "createdAt" : "2020-04-26T06:58:38Z",
        "updatedAt" : "2020-04-26T07:28:17Z",
        "lastEditedBy" : "cc740aab-0edd-4978-b80c-6ca3543a6188",
        "tags" : [
        ]
      }
    ],
    "commit" : "807a7e242695fac88a5e25d2fe25f4de936751e7",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +44,48 @@// Equal returns true if all metrics are the same as the arguments.\nfunc (m *Metrics) Equal(o Metrics) bool {\n\tvar leftKeySet []string\n\tvar rightKeySet []string\n\tfor k := range *m {"
  },
  {
    "id" : "b64a3fce-0cc1-433a-a681-137e3f7d8d91",
    "prId" : 90501,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90501#pullrequestreview-400466944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f32731d5-bae2-40c2-bb82-3a99b41bb041",
        "parentId" : null,
        "authorId" : "cc740aab-0edd-4978-b80c-6ca3543a6188",
        "body" : " mFamily.GetName() returns the literal string",
        "createdAt" : "2020-04-26T06:59:58Z",
        "updatedAt" : "2020-04-26T07:28:17Z",
        "lastEditedBy" : "cc740aab-0edd-4978-b80c-6ca3543a6188",
        "tags" : [
        ]
      }
    ],
    "commit" : "807a7e242695fac88a5e25d2fe25f4de936751e7",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +208,212 @@\t}\n\tfor _, mFamily := range m {\n\t\tif mFamily.GetName() == metricName {\n\t\t\tmetricFamily = mFamily\n\t\t\tbreak"
  },
  {
    "id" : "4497e199-afdc-4af4-8c96-9923f1a76e90",
    "prId" : 90501,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90501#pullrequestreview-400466944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3387e16-f266-4078-b062-b1d5c04908a9",
        "parentId" : null,
        "authorId" : "cc740aab-0edd-4978-b80c-6ca3543a6188",
        "body" : "the staticcheck in my idea",
        "createdAt" : "2020-04-26T07:00:28Z",
        "updatedAt" : "2020-04-26T07:28:17Z",
        "lastEditedBy" : "cc740aab-0edd-4978-b80c-6ca3543a6188",
        "tags" : [
        ]
      }
    ],
    "commit" : "807a7e242695fac88a5e25d2fe25f4de936751e7",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +215,219 @@\n\tif metricFamily == nil {\n\t\treturn Histogram{}, fmt.Errorf(\"metric %q not found\", metricName)\n\t}\n"
  },
  {
    "id" : "1e92798a-f94a-435c-9537-20f9d47c0f2b",
    "prId" : 90501,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90501#pullrequestreview-400466944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2be802cf-4327-495a-82a9-915f18bbe1f5",
        "parentId" : null,
        "authorId" : "cc740aab-0edd-4978-b80c-6ca3543a6188",
        "body" : "Empty slice declaration via literal",
        "createdAt" : "2020-04-26T07:00:38Z",
        "updatedAt" : "2020-04-26T07:28:17Z",
        "lastEditedBy" : "cc740aab-0edd-4978-b80c-6ca3543a6188",
        "tags" : [
        ]
      }
    ],
    "commit" : "807a7e242695fac88a5e25d2fe25f4de936751e7",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +278,282 @@// It's expected the histogram is valid (by calling Validate)\nfunc (hist *Histogram) Quantile(q float64) float64 {\n\tvar buckets []bucket\n\n\tfor _, bckt := range hist.Bucket {"
  },
  {
    "id" : "e622beea-3742-4340-80df-969132a1067b",
    "prId" : 87923,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87923#pullrequestreview-357616711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85c9ca6d-6174-43e1-abbd-e8ab52f0303d",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "we should add unit tests to all exported functions.",
        "createdAt" : "2020-02-11T14:24:26Z",
        "updatedAt" : "2020-02-13T12:33:23Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "f0546304-c298-49c2-9952-f180354563e9",
        "parentId" : "85c9ca6d-6174-43e1-abbd-e8ab52f0303d",
        "authorId" : "c63e1ceb-64bd-4726-b8ef-e647d73dae0c",
        "body" : "Done",
        "createdAt" : "2020-02-12T16:49:37Z",
        "updatedAt" : "2020-02-13T12:33:23Z",
        "lastEditedBy" : "c63e1ceb-64bd-4726-b8ef-e647d73dae0c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b5534021ce1a223c59d0d0b277908bed1873b85",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +264,268 @@// Quantile computes q-th quantile of a cumulative histogram.\n// It's expected the histogram is valid (by calling Validate)\nfunc (hist *Histogram) Quantile(q float64) float64 {\n\tbuckets := []bucket{}\n"
  },
  {
    "id" : "3fec37aa-468c-47e4-adf1-42ca893e383c",
    "prId" : 84283,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84283#pullrequestreview-307025482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b65b38b-6b17-42cd-8610-51d87ccf0467",
        "parentId" : null,
        "authorId" : "ae15cfb8-5436-4398-94e0-d443e413b257",
        "body" : "I like this kind of functionalities.",
        "createdAt" : "2019-10-25T07:30:08Z",
        "updatedAt" : "2019-10-28T10:41:23Z",
        "lastEditedBy" : "ae15cfb8-5436-4398-94e0-d443e413b257",
        "tags" : [
        ]
      }
    ],
    "commit" : "09329b5bbc5a8b91a952ae6efafdad30a9043efd",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +133,137 @@// ComputeHistogramDelta computes the change in histogram metric for a selected label.\n// Results are stored in after samples\nfunc ComputeHistogramDelta(before, after model.Samples, label model.LabelName) {\n\tbeforeSamplesMap := make(map[string]*model.Sample)\n\tfor _, bSample := range before {"
  },
  {
    "id" : "2b7165d5-036f-43f9-8931-f88605a3fed8",
    "prId" : 99228,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99228#pullrequestreview-594543492",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2d4748b-7c8e-4de7-be67-8ca88fd6cb6e",
        "parentId" : null,
        "authorId" : "c63e1ceb-64bd-4726-b8ef-e647d73dae0c",
        "body" : "Can you add this check to `func (vec HistogramVec) Validate() error`?",
        "createdAt" : "2021-02-19T11:01:23Z",
        "updatedAt" : "2021-03-13T22:17:27Z",
        "lastEditedBy" : "c63e1ceb-64bd-4726-b8ef-e647d73dae0c",
        "tags" : [
        ]
      },
      {
        "id" : "312def21-4cab-4625-a643-b70186fd2bb3",
        "parentId" : "c2d4748b-7c8e-4de7-be67-8ca88fd6cb6e",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "done.",
        "createdAt" : "2021-02-19T20:25:55Z",
        "updatedAt" : "2021-03-13T22:17:27Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "55765f1b49efbba875c55fac0179e925761e98a5",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +178,182 @@\n// HistogramVec wraps a slice of Histogram.\n// Note that each Histogram must have the same number of buckets.\ntype HistogramVec []*Histogram\n"
  },
  {
    "id" : "e6d3152a-ce00-4600-8b63-7398c1182bd8",
    "prId" : 99228,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99228#pullrequestreview-706856146",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0396482-2c7b-4d7b-985b-694ff9216c63",
        "parentId" : null,
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "This looks like is problematic when processing the metric like `scheduler_framework_extension_point_duration_seconds`, it will aggregate all the `Histogram` which belong to the family, but what we want is the individual `Histogram` for each extension point, aggregate \"filter\" and \"score\" etc. into one vector and calculate base on that, the final data is meaningless IMHO. \r\n\r\nThe issue could be workaround by defining `lvMap` for each of the extension point, but this is not efficient though, it will loop N times for N extension points.\r\n\r\nThere are two types of `HistogramVec`, something like `attempts` could be done in this way, but the extension points could not be aggregated in this way, we'd better to differentiate those two cases and come up a `HistogramVec` with labels. ",
        "createdAt" : "2021-07-14T10:37:00Z",
        "updatedAt" : "2021-07-14T10:55:56Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "5cd58c42-24f0-42e5-9488-c594a66e4859",
        "parentId" : "e0396482-2c7b-4d7b-985b-694ff9216c63",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "/lgtm \r\n\r\nlet's tackle this in a follow up review.",
        "createdAt" : "2021-07-15T02:05:16Z",
        "updatedAt" : "2021-07-15T02:05:17Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      }
    ],
    "commit" : "55765f1b49efbba875c55fac0179e925761e98a5",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +282,286 @@\t\tif LabelsMatch(metric, lvMap) {\n\t\t\tif hist := metric.GetHistogram(); hist != nil {\n\t\t\t\tvec = append(vec, &Histogram{hist})\n\t\t\t}\n\t\t}"
  }
]