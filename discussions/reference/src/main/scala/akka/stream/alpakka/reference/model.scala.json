[
  {
    "id" : "cdae5b6c-82d1-4002-bb5e-6d5372afb60f",
    "prId" : 1039,
    "prUrl" : "https://github.com/akka/alpakka/pull/1039#pullrequestreview-132041167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f8d3fed-3cee-4604-9ee0-55d2500dc10d",
        "parentId" : null,
        "authorId" : "9500ec63-4ee5-4a4b-820c-121a3523fbda",
        "body" : "`create` for Java? \r\nEven if this is constructed internally only, for testing it should be made available.",
        "createdAt" : "2018-06-26T11:40:09Z",
        "updatedAt" : "2018-07-03T11:02:27Z",
        "lastEditedBy" : "9500ec63-4ee5-4a4b-820c-121a3523fbda",
        "tags" : [
        ]
      },
      {
        "id" : "ac33178b-f37e-4b6e-8eac-1e818ac179b9",
        "parentId" : "7f8d3fed-3cee-4604-9ee0-55d2500dc10d",
        "authorId" : "8173970f-6a3f-4891-8394-179e8251af2d",
        "body" : "Good point.",
        "createdAt" : "2018-06-26T14:17:29Z",
        "updatedAt" : "2018-07-03T11:02:27Z",
        "lastEditedBy" : "8173970f-6a3f-4891-8394-179e8251af2d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f556945a7e9f3ff22d3ebc38b56c8cc255f2a5ce",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +68,72 @@\nobject ReferenceReadMessage {\n  def apply(): ReferenceReadMessage = new ReferenceReadMessage()\n\n  def create(): ReferenceReadMessage = ReferenceReadMessage()"
  },
  {
    "id" : "905ae6b3-14e3-42c2-a3de-9b1a7c083ff1",
    "prId" : 1039,
    "prUrl" : "https://github.com/akka/alpakka/pull/1039#pullrequestreview-133573002",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eed52cf6-09d0-43e1-b9b0-f824c9472409",
        "parentId" : null,
        "authorId" : "c14fddd5-96c4-4f09-a311-4980ab40546d",
        "body" : "Quick question: so, many Scala users will want to pattern match on these messages .. but ReferenceReadMessage is not a case class and it doesn't  have an unapply :-(   ... Do you recommend that contributors/ authors manually write the unapplys ? \r\n",
        "createdAt" : "2018-06-30T16:25:58Z",
        "updatedAt" : "2018-07-03T11:02:27Z",
        "lastEditedBy" : "c14fddd5-96c4-4f09-a311-4980ab40546d",
        "tags" : [
        ]
      },
      {
        "id" : "623db020-0188-4dc8-a3bd-d3b55706f521",
        "parentId" : "eed52cf6-09d0-43e1-b9b0-f824c9472409",
        "authorId" : "8173970f-6a3f-4891-8394-179e8251af2d",
        "body" : "Most of the time `unapply` for a such a message is not very useful. Such messages usually contain a bytestring and possibly something for passthrough. Therefore I think it is fine to leave unapplies out.\r\n\r\nAuthors are of course free to add unapply methods, if, for a specific connector, unapply for Read or Write message does make sense.",
        "createdAt" : "2018-07-02T10:29:49Z",
        "updatedAt" : "2018-07-03T11:02:27Z",
        "lastEditedBy" : "8173970f-6a3f-4891-8394-179e8251af2d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f556945a7e9f3ff22d3ebc38b56c8cc255f2a5ce",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +21,25 @@ * Use \"Read\" in message data types to signify that the message was read from outside.\n */\nfinal class ReferenceReadMessage private (\n    val data: immutable.Seq[ByteString] = immutable.Seq.empty,\n    val bytesRead: Try[Int] = Success(0)"
  },
  {
    "id" : "a850a7af-8a84-44a1-818c-86ed9154e930",
    "prId" : 1039,
    "prUrl" : "https://github.com/akka/alpakka/pull/1039#pullrequestreview-136178060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac62b74e-ea52-4283-bb4a-56a7afca33c1",
        "parentId" : null,
        "authorId" : "b8cd968d-9321-417f-8dcf-5300bfdd199e",
        "body" : "I'd avoid line breaks in toString, since it might be used for logging, and line breaks in log messages are just a pain (e.g. grep)",
        "createdAt" : "2018-07-11T10:42:04Z",
        "updatedAt" : "2018-07-11T10:50:45Z",
        "lastEditedBy" : "b8cd968d-9321-417f-8dcf-5300bfdd199e",
        "tags" : [
        ]
      }
    ],
    "commit" : "f556945a7e9f3ff22d3ebc38b56c8cc255f2a5ce",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +128,132 @@       |  data       = $data\n       |  metrics    = $metrics\n       |)\"\"\".stripMargin\n}\n"
  }
]