[
  {
    "id" : "945fec45-54e4-47f2-bc78-8689ca2423cf",
    "prId" : 2691,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2691#pullrequestreview-43714385",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c64ffa59-c7cf-4008-b2ff-ec2047852f71",
        "parentId" : null,
        "authorId" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "body" : "When discussing this with Seth, he suggested to play around with currying by adding another argument list. The partial application should be fine: `repeat(_, 1)`, but what about `repeat(_, 1)(_)`?  (uncurrying?)",
        "createdAt" : "2017-06-08T23:46:02Z",
        "updatedAt" : "2017-06-08T23:46:48Z",
        "lastEditedBy" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "tags" : [
        ]
      },
      {
        "id" : "2927f61e-5d47-4916-a2e7-19a776afb481",
        "parentId" : "c64ffa59-c7cf-4008-b2ff-ec2047852f71",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "In dotc you get:\r\n\r\n    1 |repeat(1, _)(_)\r\n      |             ^\r\n      |             unbound placeholder parameter; incorrect use of `_`\r\n\r\nIn scalac you get:\r\n\r\n    scala> repeat(1, _)(_) \r\n    <console>:13: error: missing parameter type for expanded function ((x$1: <error>, x$2) => repeat(1, x$1)(x$2))\r\n           repeat(1, _)(_)\r\n                     ^\r\n    <console>:13: error: missing parameter type for expanded function ((x$1: <error>, x$2: <error>) => repeat(1, x$1)(x$2))\r\n           repeat(1, _)(_)\r\n\r\nThe fact that the types already contain `<error>` markers makes me suspect that scalac also issues a parsing error but somehow suppresses the error message. \r\n",
        "createdAt" : "2017-06-13T13:02:35Z",
        "updatedAt" : "2017-06-13T13:02:52Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e91afd4a971b7cfcc32f06b81105d41d77ff22fc",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1,5 @@object Test {\n\n  def repeat(s: String, i: Int, j: Int = 22) = s * i\n\n  val f1 = repeat(\"abc\", _)"
  }
]