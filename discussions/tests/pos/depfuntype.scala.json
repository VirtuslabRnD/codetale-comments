[
  {
    "id" : "e6b791f8-b779-47e8-98af-c290920b15c5",
    "prId" : 3464,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3464#pullrequestreview-76745480",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21aa1cc2-9ff9-44ee-98c9-6aa3cdc738d8",
        "parentId" : null,
        "authorId" : "6d71bb21-e402-4464-b2b1-8bdd8e068461",
        "body" : "Would changing implicitly to return `ev.type` instead of `T` help here?",
        "createdAt" : "2017-11-14T14:55:34Z",
        "updatedAt" : "2017-11-27T14:52:13Z",
        "lastEditedBy" : "6d71bb21-e402-4464-b2b1-8bdd8e068461",
        "tags" : [
        ]
      },
      {
        "id" : "0db8f555-0ad5-45f3-be86-06402779f513",
        "parentId" : "21aa1cc2-9ff9-44ee-98c9-6aa3cdc738d8",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "The fact that adding `inline` changes how a method is typechecked doesn't seem like a great thing. I think @OlivierBlanvillain has some examples where it breaks working code.",
        "createdAt" : "2017-11-14T23:36:07Z",
        "updatedAt" : "2017-11-27T14:52:13Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "fa778c53-eae9-4a14-aedd-a484dcfeb6ac",
        "parentId" : "21aa1cc2-9ff9-44ee-98c9-6aa3cdc738d8",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I am a bit nervous about changing it to `ev.type`. The inferencer has to do major acrobatics to deal with implicit method types. It might interfere with something else. The current type of `implicitly` is simpler and clearer.",
        "createdAt" : "2017-11-15T11:01:57Z",
        "updatedAt" : "2017-11-27T14:52:13Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a29eabf7a64901706bae075402f2b023ec0e65",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +20,24 @@  // therefore can't be inlined when testing non-bootstrapped.\n  // But inlining `implicitly` is vital to make the definition of `ifun` below work.\n  inline final def implicitly[T](implicit ev: T): T = ev\n\n  type IDF = implicit (x: C) => x.M"
  },
  {
    "id" : "9a081afb-97f1-4cd0-9e6d-d274ea30e68c",
    "prId" : 3464,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3464#pullrequestreview-78184982",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b229fb1-0aad-4754-9373-feaf83b40dc4",
        "parentId" : null,
        "authorId" : "6d71bb21-e402-4464-b2b1-8bdd8e068461",
        "body" : "I like than both the type and the value have the same syntax :)",
        "createdAt" : "2017-11-14T15:19:38Z",
        "updatedAt" : "2017-11-27T14:52:13Z",
        "lastEditedBy" : "6d71bb21-e402-4464-b2b1-8bdd8e068461",
        "tags" : [
        ]
      },
      {
        "id" : "a17e5ea5-242e-4efc-becf-5f15b7a5506e",
        "parentId" : "0b229fb1-0aad-4754-9373-feaf83b40dc4",
        "authorId" : "d1ff8c4f-8ca9-4b4c-9e3d-0c99aa78032f",
        "body" : "Yes. This is something that I really like about Scala in general.",
        "createdAt" : "2017-11-21T16:56:18Z",
        "updatedAt" : "2017-11-27T14:52:13Z",
        "lastEditedBy" : "d1ff8c4f-8ca9-4b4c-9e3d-0c99aa78032f",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a29eabf7a64901706bae075402f2b023ec0e65",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +4,8 @@\n  type DF = (x: C) => x.M\n  val depfun1: DF = (x: C) => x.m\n  val c = new C { type M = Int; val m = 0 }\n  val y = depfun1(c)"
  }
]