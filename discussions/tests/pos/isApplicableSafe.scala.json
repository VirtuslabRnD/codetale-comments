[
  {
    "id" : "f66b514e-3fa2-4442-81a7-5dfdc00fe9d4",
    "prId" : 1482,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9bf227f-14f7-4d10-a173-a01f28b28f46",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "What if instead of giving up when this fails, we tried to re-typecheck the inner call using every possible overload? Of course this would have to be done carefully to avoid ending up like the Swift typechecker which apparently gives up when trying to compile `let a: Double = -(1 + 2) + -(3 + 4) + 5` because of overloading and constraint resolutions: https://www.cocoawithlove.com/blog/2016/07/12/type-checker-issues.html\n\nOn a more general note, it seems that there is a tension in Scala caused by overloading: on one hand it significantly reduces the power of type inference, on the other hand it makes some APIs much nicer to use. So either we figure out how to get overloading to play well with type inference, or we come up with a more principled alternative to overloading that helps us keep our APIs nice.\n",
        "createdAt" : "2016-08-27T11:04:33Z",
        "updatedAt" : "2016-08-27T11:04:33Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "607843e8-ff09-42ce-99a3-c0c0a9e71f7e",
        "parentId" : "b9bf227f-14f7-4d10-a173-a01f28b28f46",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Yeah, I am very nervous about trying all combinations. That typically leads to blowup in compile times. Then you either become too restrictive and can't even typecheck trivial expressions or your compile times go through the roof. In both cases there's little a programmer can do. \n",
        "createdAt" : "2016-08-27T11:11:42Z",
        "updatedAt" : "2016-08-27T11:11:50Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dfe4db8b3babefeba83eb30ffdc92a5d84665bb",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@    //\n    // 1. the outer Array.apply is overloaded, so we need to typecheck the inner one\n    //    without an expected prototype\n    //\n    // 2. The inner Array.apply needs a ClassTag, so we need to instantiate"
  }
]