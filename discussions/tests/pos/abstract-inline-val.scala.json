[
  {
    "id" : "ca958951-e85f-4abf-868b-5ce45c531245",
    "prId" : 8832,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8832#pullrequestreview-403358066",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94f9c4f5-65ac-4ffd-841e-566263ec6c7f",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "A side note: in `inline val`, we require the rhs to be a literal type, which is not really related to `inline`. Meanwhile, const-folding can be achieved by annotating the constant type explicitly.",
        "createdAt" : "2020-04-30T07:50:12Z",
        "updatedAt" : "2020-04-30T07:53:58Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "e7426f2a-0e0f-430c-b4ed-89a921f133b4",
        "parentId" : "94f9c4f5-65ac-4ffd-841e-566263ec6c7f",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Actually, inline val requires a literal type result type and a pure body. This is a consequence of being marked as inline, as these are the only values that can be soundly inlined. We use constant folding to inline it because thee type already provides this functionality.\r\n",
        "createdAt" : "2020-04-30T08:57:57Z",
        "updatedAt" : "2020-04-30T08:57:57Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "aff1f081-01de-443d-913a-c59c7f04ce94",
        "parentId" : "94f9c4f5-65ac-4ffd-841e-566263ec6c7f",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "It's more about semantics than soundness. There is an inconsistency between _inline vals_ and _inline parameters_. ",
        "createdAt" : "2020-04-30T09:36:27Z",
        "updatedAt" : "2020-04-30T09:36:28Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee24482b64f3c0938d096e967f43461cb54b9a79",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +5,9 @@class C1 extends C:\n  inline val x = 1\n  inline val y = 2\n\nclass C2 extends C:"
  }
]