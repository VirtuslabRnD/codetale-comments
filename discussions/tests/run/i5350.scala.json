[
  {
    "id" : "029f5835-d0e7-4b8e-9901-67e2821995bb",
    "prId" : 5703,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5703#pullrequestreview-192754146",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcc1ca64-f9cd-43d7-a3a6-33d126511f51",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "@Blaisorblade does it make sense for this `lazy val` to be stable?",
        "createdAt" : "2019-01-14T17:44:21Z",
        "updatedAt" : "2019-01-15T17:03:07Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "078807b0-423c-42ac-a40f-b214f4c638aa",
        "parentId" : "fcc1ca64-f9cd-43d7-a3a6-33d126511f51",
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "Yes. The definition of `isStable` doesn't check for `Lazy`, so `Symbol.isStable` should only imply idempotence.\r\n\r\nTo detect if a value is pure, Realizability checks `sym.isStable && !sym.is(Lazy | Erased, butNot = Module)`. Maybe here you should check\r\n`sym.isStable && !sym.is(Lazy, butNot = Module)`? But on modules, this overlaps with #2266 and #4765.\r\n\r\nThat all needs testcases and consideration?",
        "createdAt" : "2019-01-15T16:37:04Z",
        "updatedAt" : "2019-01-15T17:03:07Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      },
      {
        "id" : "16b6bc06-37a0-4cba-8bb1-3c77189871a6",
        "parentId" : "fcc1ca64-f9cd-43d7-a3a6-33d126511f51",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Actually modules do not reach [this line](https://github.com/lampepfl/dotty/pull/5703/files#diff-60732058b4c21c7127418de34cb149e9R403).  Hence the current condition does not affect the module init elimination.",
        "createdAt" : "2019-01-15T16:56:30Z",
        "updatedAt" : "2019-01-15T17:03:07Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec3b3e1793778d7ec8bcfe2d2598af7c8409927f",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1,5 @@object Test {\n  def foo = {\n    lazy val bar: Unit = println(\"Hello\")\n    bar\n  }"
  }
]