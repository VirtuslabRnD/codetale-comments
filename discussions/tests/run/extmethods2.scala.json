[
  {
    "id" : "e525cf40-8f0b-45f2-bfca-74bd392746fd",
    "prId" : 6985,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6985#pullrequestreview-271953803",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "131436c2-2471-4379-857c-409273128b67",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Needs more examples involving extension methods with type and term parameters, as well as neg tests when names used for type and term parameters clash with those used for the given clause.",
        "createdAt" : "2019-08-07T13:22:50Z",
        "updatedAt" : "2019-08-07T16:15:03Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "d54c611b43b684113c601b6477e9bab75953065e",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +18,22 @@  object A {\n    given ListOps[T](xs: List[T]) {\n      def second: T = xs.tail.head\n      def third: T = xs.tail.tail.head\n      def concat(ys: List[T]) = xs ++ ys"
  },
  {
    "id" : "7c01d772-ca09-464d-9907-125557228a67",
    "prId" : 6339,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6339#pullrequestreview-228393620",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "140634ec-bb1c-478a-aa0f-5f91acfab22b",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "It's an interesting trick, but I'm afraid that it'll make signature information less readable in error messages and in the IDE (e.g. if I'm writing `a.foo(`, then a signature popup will tell me that an argument of type `T` is expected), and dealiasing all the time before showing type information is likely to be even less readable in general.",
        "createdAt" : "2019-04-18T16:09:08Z",
        "updatedAt" : "2019-04-18T16:09:08Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "3818e01c-17d1-4cf7-a4f1-37336423cc53",
        "parentId" : "140634ec-bb1c-478a-aa0f-5f91acfab22b",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Well, in practice it would probably be named `This` or `Self` or `Left`, not `T`. And of course we should have defined `foo` like this:\r\n```scala\r\ndef (x: T) foo (y: List[String]) = ...\r\n```\r\nThen the signature popup gives you the right info again.",
        "createdAt" : "2019-04-18T16:47:43Z",
        "updatedAt" : "2019-04-18T16:47:43Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3eb8a788c19c6a70d98b382a22ec1c07dd88bcf1",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +5,9 @@  implied StringListOps given TC {\n    type T = List[String]\n    def (x: T) foo (y: T) = (x ++ y, the[TC])\n    def (x: T) bar (y: Int) = (x(0)(y), the[TC])\n  }"
  }
]