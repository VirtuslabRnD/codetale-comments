[
  {
    "id" : "e695febb-a4c8-45f4-b7b7-ebd68e40cebc",
    "prId" : 5114,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5114#pullrequestreview-182774719",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56b341a2-b904-4dc2-b96d-87074a657591",
        "parentId" : null,
        "authorId" : "321b3909-e7ce-4c63-91ca-d05d80aabdfe",
        "body" : "Why do these need to be inline? They are already extension methods and they take no functions or by name parameters? Wouldnâ€™t the JIT inline these just fine for us?",
        "createdAt" : "2018-12-07T16:39:23Z",
        "updatedAt" : "2018-12-07T16:43:15Z",
        "lastEditedBy" : "321b3909-e7ce-4c63-91ca-d05d80aabdfe",
        "tags" : [
        ]
      }
    ],
    "commit" : "49bae02f0265878818483442800c2e240cbeba5e",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +11,15 @@\n    // These should be inline but that does not work currently. Try again\n    // once inliner is moved to ReifyQuotes\n    def (ia: IArray[A]) length[A]: Int = (ia: Array[A]).length\n    def (ia: IArray[A]) apply[A] (i: Int): A = (ia: Array[A])(i)"
  },
  {
    "id" : "6822c424-e52e-4678-bb21-72a3b37fd806",
    "prId" : 5114,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5114#pullrequestreview-182774719",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8a443e1-aac6-41bc-8be7-a78508b6928c",
        "parentId" : null,
        "authorId" : "321b3909-e7ce-4c63-91ca-d05d80aabdfe",
        "body" : "Might be a cool example to also define SortedIArray and return that here. Then binarySearch takes a SortedIArray.",
        "createdAt" : "2018-12-07T16:40:49Z",
        "updatedAt" : "2018-12-07T16:43:15Z",
        "lastEditedBy" : "321b3909-e7ce-4c63-91ca-d05d80aabdfe",
        "tags" : [
        ]
      }
    ],
    "commit" : "49bae02f0265878818483442800c2e240cbeba5e",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +16,20 @@\n    // return a sorted copy of the array\n    def sorted[A <: AnyRef : math.Ordering](ia: IArray[A]): IArray[A] = {\n      val arr = Arrays.copyOf(ia, (ia: Array[A]).length)\n      scala.util.Sorting.quickSort(arr)"
  },
  {
    "id" : "295a5f36-fe68-4b3b-8586-32067a9ddde9",
    "prId" : 5114,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5114#pullrequestreview-182774719",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d099ead7-1ffc-4efa-a4ca-49f2ba79e894",
        "parentId" : null,
        "authorId" : "321b3909-e7ce-4c63-91ca-d05d80aabdfe",
        "body" : "You might want to exercise `sorted` Here rather than building a sorted array by hand.",
        "createdAt" : "2018-12-07T16:43:02Z",
        "updatedAt" : "2018-12-07T16:43:15Z",
        "lastEditedBy" : "321b3909-e7ce-4c63-91ca-d05d80aabdfe",
        "tags" : [
        ]
      }
    ],
    "commit" : "49bae02f0265878818483442800c2e240cbeba5e",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +46,50 @@  }\n\n  val xs: IArray[Long] = IArray(1L, 2L, 3L)\n  assert(binaryIndexOf(xs, 2L) == 1)\n  assert(binaryIndexOf(xs, 4L) < 0)"
  }
]