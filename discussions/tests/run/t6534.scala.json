[
  {
    "id" : "2f860457-4059-434c-b0cc-293bd282d92d",
    "prId" : 4490,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4490#pullrequestreview-119625015",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe768a2a-786c-4372-89cd-b2346a70e9f0",
        "parentId" : null,
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "> The semantics looks good, as far as the test cases tell us.\r\n\r\nUnfortunately overriding `equals` was only forbidden in value classes but not in universal traits, so this PR appears to silently change runtime behavior for code that works right now with Scalac.\r\nIt seems necessary to consider and discuss implications for migration. Not changing behavior for now seems safer.\r\n\r\n`assert(b1 != b2)` also succeeds on Scalac, but just because the involved classes are different.\r\nInstead, adding a test like `trait Foo extends Any { override def equals(x: Any) = true }` would confirm the semantic change with Scalac. To wit:\r\n\r\n```\r\nscala> trait Foo extends Any { override def equals(x: Any) = false }\r\ndefined trait Foo\r\n\r\nscala>  trait Ding extends Any { override def hashCode = -1 }\r\ndefined trait Ding\r\n\r\nscala> class Bippy1(val x: Int) extends AnyVal with Foo { }  // warn\r\ndefined class Bippy1\r\n\r\nscala> class Bippy2(val x: Int) extends AnyVal with Ding { } // warn\r\ndefined class Bippy2\r\n\r\nscala> val b1 = new Bippy1(71)\r\nb1: Bippy1 = Bippy1@47\r\n\r\nscala>      val b2 = new Bippy2(71)\r\nb2: Bippy2 = Bippy2@47\r\n\r\nscala> b1 == b2\r\n<console>:14: warning: Bippy1 and Bippy2 are unrelated: they will never compare equal\r\n       b1 == b2\r\n          ^\r\nres0: Boolean = false\r\n\r\nscala> trait Foo extends Any { override def equals(x: Any) = true }\r\ndefined trait Foo\r\n\r\nscala> class Bippy1(val x: Int) extends AnyVal with Foo { }  // warn\r\ndefined class Bippy1\r\n\r\nscala> val b1 = new Bippy1(71)\r\nb1: Bippy1 = Bippy1@47\r\n\r\nscala> b1 == b2\r\n<console>:14: warning: Bippy1 and Bippy2 are unrelated: they will never compare equal\r\n       b1 == b2\r\n          ^\r\nres1: Boolean = false\r\n```",
        "createdAt" : "2018-05-09T20:53:36Z",
        "updatedAt" : "2018-06-12T10:42:51Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      },
      {
        "id" : "2881eb0e-d155-4697-b1cf-621d9112aeaf",
        "parentId" : "fe768a2a-786c-4372-89cd-b2346a70e9f0",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I think the previous `equals` behavior was unintentional and non-sensical. So I don't think we need to worry about migration, that should count as a bugfix. As far as I can tell, the boxing behavior is also the same as it was before. So I don't see a downside for doing this.\r\n\r\nBoxing could be improved for value classes that define `equals`, but that's a separate issue for which @smarter would be the best person.\r\n",
        "createdAt" : "2018-05-12T09:03:36Z",
        "updatedAt" : "2018-06-12T10:42:51Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "351830ae-717b-477a-81dc-537bc0505317",
        "parentId" : "fe768a2a-786c-4372-89cd-b2346a70e9f0",
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "> I think the previous equals behavior was unintentional and non-sensical. So I don't think we need to worry about migration, that should count as a bugfix.\r\n\r\nOnly making more programs compile is a safe bugfix, changing behavior of existing programs isn't safe. As you pointed out other times, they might depend on it without even knowing. We'd need to forbid the scenario in Scala 2 to make this safe.\r\n\r\nAnd this behavior wasn't even accidental â€” you, Paul and Adriaan discussed it in https://github.com/scala/bug/issues/6534 and https://github.com/scala/scala/pull/1526, so it can't be _that_ nonsensical, and it sure isn't a bugfix.\r\n\r\nThat `-Xlint` warning for `class Bippy1(val x: Int) extends AnyVal with Foo { }` was even removed in\r\nhttps://github.com/scala/scala/commit/1da48a45b62879c2bd2904342eeff7e6e568350a#diff-90c2f5c65d04e4b756b9989ff2e1b97dR339, but apparently only because there was no way to suppress it.",
        "createdAt" : "2018-05-12T12:10:12Z",
        "updatedAt" : "2018-06-12T10:42:51Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      }
    ],
    "commit" : "52c07c188e3af80f91afc11038c6a643ceba044c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +9,13 @@    val b1 = new Bippy1(71)\n    val b2 = new Bippy2(71)\n    assert(b1 != b1)\n    assert(b1.## == b1.x.##, \"hash differs1 \" + ((b1, b1.##)))\n    assert(b2 == b2)"
  }
]