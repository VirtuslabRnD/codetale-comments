[
  {
    "id" : "14134b4d-1d37-4eaf-be6d-670c31550117",
    "prId" : 15081,
    "prUrl" : "https://github.com/apache/airflow/pull/15081#pullrequestreview-624044810",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "891767b8-c6b4-4364-b494-cb331751e7b2",
        "parentId" : null,
        "authorId" : "a5092e56-4956-45ec-9914-ecec6b63df73",
        "body" : "Would this work?\r\n\r\n```suggestion\r\n        all_processes = subprocess.check_output([\"ps\", \"-ax\", \"-o\", \"pid=\"]).decode().splitlines(keepends=False)\r\n        assert str(process.pid) in all_processes\r\n```",
        "createdAt" : "2021-03-30T05:40:02Z",
        "updatedAt" : "2021-03-30T05:40:03Z",
        "lastEditedBy" : "a5092e56-4956-45ec-9914-ecec6b63df73",
        "tags" : [
        ]
      },
      {
        "id" : "261c4df6-3d66-47f2-ac46-23f69a001fa8",
        "parentId" : "891767b8-c6b4-4364-b494-cb331751e7b2",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "That would not work. The returned values do not have EOL. They are prefixed with spaces: \r\n\r\n```\r\n       1\r\n       2\r\n  234333\r\n```\r\n",
        "createdAt" : "2021-03-30T08:52:11Z",
        "updatedAt" : "2021-03-30T08:53:39Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "6a8875d0-7a0c-495e-af9f-33f0d28177ee",
        "parentId" : "891767b8-c6b4-4364-b494-cb331751e7b2",
        "authorId" : "a5092e56-4956-45ec-9914-ecec6b63df73",
        "body" : "Ouch. Thanks for the explanation.",
        "createdAt" : "2021-03-30T09:32:41Z",
        "updatedAt" : "2021-03-30T09:32:56Z",
        "lastEditedBy" : "a5092e56-4956-45ec-9914-ecec6b63df73",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f80b7696bf409f08a60e21c7180d6fa209c05eb",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +144,148 @@\n        all_processes = subprocess.check_output([\"ps\", \"-ax\", \"-o\", \"pid=\"]).decode().splitlines()\n        assert str(process.pid) in map(lambda x: x.strip(), all_processes)\n\n        with self.assertLogs(process_utils.log) as cm:"
  }
]