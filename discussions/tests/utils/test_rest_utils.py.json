[
  {
    "id" : "1dd34332-dba1-42c3-bb5b-81da2673ce12",
    "prId" : 3405,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3405#pullrequestreview-485546835",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a17e6703-56c5-4aac-9e36-2e8a43421fbf",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Fix the endpoint of this test to enable the JSON validation and raise an error.",
        "createdAt" : "2020-09-10T01:22:59Z",
        "updatedAt" : "2020-09-10T06:32:14Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "59a806dc-f44e-46e0-9ef1-e3f8c9bf9949",
        "parentId" : "a17e6703-56c5-4aac-9e36-2e8a43421fbf",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Thanks! Can we also test that receiving a non-JSON response on a non-/api/2.0 endpoint (e.g. `/dbfs/some/path`) does not raise an exception?",
        "createdAt" : "2020-09-10T03:53:53Z",
        "updatedAt" : "2020-09-10T06:32:14Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "93d305ffd3a6ea144e3490ce7bf0c9eddd70cb58",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +45,49 @@            \"in a valid JSON format\",\n        ):\n            call_endpoint(host_only, \"/api/2.0/fetch-model\", \"GET\", \"\", response_proto)\n\n"
  },
  {
    "id" : "3e4e6454-5b9c-45c1-8e56-2f0946fe02e7",
    "prId" : 3405,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3405#pullrequestreview-485553679",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "726d223a-b7f5-4768-aae4-8a3f6edd6487",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "@smurching Added a test here to verify that `http_request_safe` doesn't throw for a non-mlflow-rest-api endpoint that returns a non-json text. ",
        "createdAt" : "2020-09-10T04:17:44Z",
        "updatedAt" : "2020-09-10T06:32:14Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "93d305ffd3a6ea144e3490ce7bf0c9eddd70cb58",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +207,211 @@    http_request_safe(host_only, \"/my/endpoint\")\n    request.assert_called_with(\n        url=\"http://my-host/my/endpoint\", verify=False, headers=_DEFAULT_HEADERS,\n    )\n    response.status_code = 400"
  },
  {
    "id" : "4dfd0820-d92a-40b2-b4da-2afc5c0389f5",
    "prId" : 200,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/200#pullrequestreview-140883817",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19da6005-4721-411b-bb85-95974f5e02c9",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Nit: remove this line?",
        "createdAt" : "2018-07-26T20:19:59Z",
        "updatedAt" : "2018-07-30T16:45:28Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "82eb542ecf41ee26b683ac5118d6653a3e43eb61",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@#!/usr/bin/env python\nimport mock\nimport pytest"
  },
  {
    "id" : "61e716fe-7d39-42b8-9ce7-2a61ce0659bd",
    "prId" : 200,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/200#pullrequestreview-141322579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ff6e074-9759-4b80-99b7-1e4604b6adda",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "It could be nice to use `mock.patch.object` (e.g. as we do [here](https://github.com/databricks/mlflow/blob/c7633f228b5527603503fba71f9618898d8c9261/tests/projects/test_databricks.py#L60)) to ensure we clean up / reset `provider` after each test, maybe we could do something like:\r\n\r\n```\r\ndef _mock_profile(expected_profile, config):\r\n    def mock_get_config_for_profile(profile):\r\n            assert profile == expected_profile\r\n            return config\r\n        provider.get_config_for_profile = mock_get_config_for_profile\r\n    return mock.patch.object(provider, \"get_config_for_profile\", new=mock_get_config_for_profile)\r\n\r\n\r\ndef test_databricks_params_token():\r\n    with _mock_profile(expected_profile=\"...\", config=\"...\"):\r\n        # perform test, at end of with block `provider` will be reset\r\n```",
        "createdAt" : "2018-07-26T20:44:59Z",
        "updatedAt" : "2018-07-30T16:45:28Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "65a60a8e-be13-4316-81af-eb4c80cbf3b4",
        "parentId" : "3ff6e074-9759-4b80-99b7-1e4604b6adda",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "It's so complicated in comparison! I understand how/why the current one works, and if tests fail they fail. I would rather not change unless the test becomes more complicated such that a more compelling reason forms.",
        "createdAt" : "2018-07-27T22:36:08Z",
        "updatedAt" : "2018-07-30T16:45:28Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "ea3bad2e-5874-4aeb-9b58-0e89c47a08a7",
        "parentId" : "3ff6e074-9759-4b80-99b7-1e4604b6adda",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Yeah agreed that it's more complicated, fine with leaving it as is - also agree that if overriding `provider.get_config_for_profile` becomes a problem it'll likely manifest via another test (e.g. one that calls `provider.get_config_for_profile` in another suite) failing & we can address it then.",
        "createdAt" : "2018-07-27T23:35:52Z",
        "updatedAt" : "2018-07-30T16:45:28Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "5c7e7cae-dbf1-4dc2-9a34-2f04f2a108f7",
        "parentId" : "3ff6e074-9759-4b80-99b7-1e4604b6adda",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Oh, I'm pretty sure these suites are run in different processes! One suite cannot affect another, right?",
        "createdAt" : "2018-07-28T17:21:19Z",
        "updatedAt" : "2018-07-30T16:45:28Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "7a119720-5ca4-4ebc-b5f2-325bb8843f73",
        "parentId" : "3ff6e074-9759-4b80-99b7-1e4604b6adda",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "OK, I found a concise way to write this with `@mock.patch` which I think is pretty straightforward and is safe in case pytest shares the same python process with different suites. Thanks for raising this concern, I didn't think that was happening.",
        "createdAt" : "2018-07-28T17:25:44Z",
        "updatedAt" : "2018-07-30T16:45:28Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "82eb542ecf41ee26b683ac5118d6653a3e43eb61",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +8,12 @@\n\ndef _mock_profile(expected_profile, config):\n    def mock_get_config_for_profile(profile):\n        assert profile == expected_profile"
  }
]