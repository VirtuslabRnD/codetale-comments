[
  {
    "id" : "3498814a-bbf0-49a7-91e5-7bda7a12ef78",
    "prId" : 1534,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1534#pullrequestreview-122080242",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fe810d6-8205-4bf6-8e33-8e06c8c69aa4",
        "parentId" : null,
        "authorId" : "ea0dbf4f-66ef-40cf-8eb0-f1a5ed3d2711",
        "body" : "the fix makes the outcome for this scenario consistent with the one where multiple leading comments appear after BOF. This means that all comments (regardless of how many lines they are in) are associated to the closest non-trivia token. Please let me know if you think this is not correct",
        "createdAt" : "2018-05-17T23:37:26Z",
        "updatedAt" : "2018-05-17T23:48:48Z",
        "lastEditedBy" : "ea0dbf4f-66ef-40cf-8eb0-f1a5ed3d2711",
        "tags" : [
        ]
      },
      {
        "id" : "491c3b10-1c14-45f6-9d25-e759e3671618",
        "parentId" : "4fe810d6-8205-4bf6-8e33-8e06c8c69aa4",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "This looks great!",
        "createdAt" : "2018-05-22T09:10:52Z",
        "updatedAt" : "2018-05-22T09:13:19Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "7925cb15b8d5da59a34a7bf28cc93b46ef5156a5",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +145,149 @@         |/* trailing 2 */\n         |// trailing 3\n         |\"\"\".stripMargin.parse[Source].get\n\n    val defnTrait = input.find(_.is[Defn.Trait]).get"
  },
  {
    "id" : "0a13d2a8-50e3-4ed2-8428-73f8f360c873",
    "prId" : 1534,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1534#pullrequestreview-122269366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd402cfe-0dfa-45ae-a966-b7e34c4b251e",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "What happens to comments 2 and 3? I would expect comment 2 to be leading for `foo` and comment 3 leading for `0`. Looks like a bug unrelated to this PR.",
        "createdAt" : "2018-05-22T09:12:17Z",
        "updatedAt" : "2018-05-22T09:13:19Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "0a69c96b-412f-4a5b-aff5-a05599ab8bc3",
        "parentId" : "cd402cfe-0dfa-45ae-a966-b7e34c4b251e",
        "authorId" : "ea0dbf4f-66ef-40cf-8eb0-f1a5ed3d2711",
        "body" : "@olafurpg that's something that got me confused too. It turns out that the parsing logic associates comments to **tokens**. If you inspect the internal state you will see that comments 2 and 3 are there:\r\n\r\n```\r\nAssociatedComments(\r\n  Leading =\r\n    val [28..31) => List(/*∙comment∙1∙*/)\r\n\r\n  Trailing =\r\n    val [28..31) => List(/*∙comment∙2∙*/)\r\n    = [52..53) => List(/*∙comment∙3∙*/)\r\n    0 [70..71) => List(/*∙comment∙4∙*/)\r\n)\r\n```\r\n\r\nHowever, the public api lets you query comments associated to **trees**. The `leading` and `trailing` methods only search for comments associated to the first and last tokens (respectively) of the given tree node. Comments 2 and 3 are neither associated to one or the other of any tree. Not sure if this is a bug though. Wdyt?",
        "createdAt" : "2018-05-22T10:50:45Z",
        "updatedAt" : "2018-05-22T12:07:33Z",
        "lastEditedBy" : "ea0dbf4f-66ef-40cf-8eb0-f1a5ed3d2711",
        "tags" : [
        ]
      },
      {
        "id" : "e181c1dd-e072-47ee-a1c1-270ef71714ed",
        "parentId" : "cd402cfe-0dfa-45ae-a966-b7e34c4b251e",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "I think this is a bug, good catch. I opened https://github.com/scalameta/scalameta/issues/1539 to track it.",
        "createdAt" : "2018-05-22T17:18:59Z",
        "updatedAt" : "2018-05-22T17:19:00Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "7925cb15b8d5da59a34a7bf28cc93b46ef5156a5",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +198,202 @@    val input =\n      \"\"\"|object A {\n         | /* comment 1 */ val /* comment 2 */ foo = /* comment 3 */ 0 /* comment 4 */\n         |}\n         |\"\"\".stripMargin.parse[Source].get"
  }
]