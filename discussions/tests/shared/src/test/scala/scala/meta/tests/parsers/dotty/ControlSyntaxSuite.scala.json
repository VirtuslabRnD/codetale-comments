[
  {
    "id" : "65eefd83-cb28-488b-a9c4-7464beca1363",
    "prId" : 2413,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2413#pullrequestreview-703497458",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f2df063-6b81-436b-90cc-af3956d6e49b",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "is this really valid in scala 3?!",
        "createdAt" : "2021-07-10T12:05:31Z",
        "updatedAt" : "2021-07-10T12:05:31Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "19c9800f-c4e5-44dd-859d-a77136626004",
        "parentId" : "8f2df063-6b81-436b-90cc-af3956d6e49b",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Yep, it's taken straight from the tests. I think this is the most hardcore edge case they could find.",
        "createdAt" : "2021-07-10T12:35:35Z",
        "updatedAt" : "2021-07-10T12:35:36Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "28766865cb37c5afa3852779a57680741758af05",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1819,1823 @@    runTestAssert[Stat](\n      \"\"\"|if (1) max 10 gt 0\n         |\n         |then\n         |  1"
  },
  {
    "id" : "39b02ee4-cb41-43e3-b967-809c0a479d72",
    "prId" : 2381,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2381#pullrequestreview-685031815",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4de3206-b2a6-4b2d-88e1-b9072f39f292",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "should this also work (and if not, can we add the failure test?):\r\n```\r\n  while (x > 0) && (y > 0) x += 1\r\n```\r\nalso, is `do` allowed only in scala3?",
        "createdAt" : "2021-06-15T16:09:56Z",
        "updatedAt" : "2021-06-15T16:10:28Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "94cd1177-c233-4e64-9f0f-cb75c522723b",
        "parentId" : "e4de3206-b2a6-4b2d-88e1-b9072f39f292",
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "It shouldn't. It seems that the chained infix application works only if there is `do` keyword in the dotty parser.\r\n\r\nThanks for pointing at that. I will slightly rework that pr.",
        "createdAt" : "2021-06-16T06:34:12Z",
        "updatedAt" : "2021-06-16T06:34:12Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      },
      {
        "id" : "1baf50f8-67ea-4d5a-b9e3-54abb01b56f8",
        "parentId" : "e4de3206-b2a6-4b2d-88e1-b9072f39f292",
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "Added checks on having `do`/`then` kw after complex expressions as it's works in scala3.",
        "createdAt" : "2021-06-16T11:11:43Z",
        "updatedAt" : "2021-06-16T11:11:43Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a40e10fbb565d4add07d2a11c4dac0475e61e73",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1114,1118 @@  test(\"while-cond-expr-do\") {\n    val code =\n      \"\"\"|  while (x > 0) && (y > 0) do\n         |    x += 1\n         |\"\"\".stripMargin"
  },
  {
    "id" : "0f7e4a79-1a6c-4687-ab32-71106f673934",
    "prId" : 2285,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2285#pullrequestreview-635946143",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca4e8a35-7a09-432f-b069-017c5f6cb62f",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Could you also add a test for:\r\n```\r\n  val code = \"\"\"|for { a <- x }\r\n                  |  fx\r\n                  |  fy\r\n                  |\"\"\".stripMargin\r\n```\r\n?",
        "createdAt" : "2021-04-14T16:15:43Z",
        "updatedAt" : "2021-04-14T17:52:20Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "b73bbb63-d33b-4f11-8f68-f5c95b556451",
        "parentId" : "ca4e8a35-7a09-432f-b069-017c5f6cb62f",
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "Added",
        "createdAt" : "2021-04-14T18:13:33Z",
        "updatedAt" : "2021-04-14T18:13:33Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      }
    ],
    "commit" : "1716fd9b80f08361e7b3eebad8a30425c6fc2541",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +742,746 @@\n  test(\"new-for-indented-without-do\") {\n    val code = \"\"\"|for ( a <- x )\n                  |  fx\n                  |  fy"
  },
  {
    "id" : "531a76d3-0d36-4aca-9c66-087064026f92",
    "prId" : 2237,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2237#pullrequestreview-592028508",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1940526-6f8e-478f-a414-c08d8e1234d3",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "I think this should not be accepted, but I will follow up with a PR later.",
        "createdAt" : "2021-02-17T10:08:21Z",
        "updatedAt" : "2021-02-17T10:09:01Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "e65d886f60569f3957421c3e80b5d5c88ac189f0",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +219,223 @@\n  test(\"new-if-else-indented\") {\n    val code = \"\"\"|if cond\n                  |  fx1\n                  |  fx2"
  },
  {
    "id" : "93310572-fbbb-455d-88ea-b7db557c6095",
    "prId" : 2142,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2142#pullrequestreview-512882940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d169087-f89a-4611-90a3-a0bbaf7148f9",
        "parentId" : null,
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "I would duplicate them and change {} to significant indentation.",
        "createdAt" : "2020-10-20T08:57:58Z",
        "updatedAt" : "2020-10-21T12:35:22Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "2a7cf71c-1a35-4796-870a-dc72da72622b",
        "parentId" : "9d169087-f89a-4611-90a3-a0bbaf7148f9",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Added some more test, not everything could work without {",
        "createdAt" : "2020-10-20T15:48:25Z",
        "updatedAt" : "2020-10-21T12:35:22Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbc0fc6b18e3886b05c545b753a7f456d67fc436",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1370,1374 @@    )\n  }\n\n  test(\"match-chained\") {\n    val expected = Term.Match("
  },
  {
    "id" : "a4971476-9509-408b-903c-184410fb15a1",
    "prId" : 2142,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2142#pullrequestreview-512883268",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4986dbd4-746e-4887-9ba8-0e6d28b25703",
        "parentId" : null,
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "It will not be pretty but we could add expected layout. but also okay not to add :)",
        "createdAt" : "2020-10-20T09:03:14Z",
        "updatedAt" : "2020-10-21T12:35:22Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "02ca8792-3d02-4f7b-8d92-93798842251f",
        "parentId" : "4986dbd4-746e-4887-9ba8-0e6d28b25703",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "I added to the other cases with significant indentt",
        "createdAt" : "2020-10-20T15:48:45Z",
        "updatedAt" : "2020-10-21T12:35:22Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbc0fc6b18e3886b05c545b753a7f456d67fc436",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +1403,1407 @@         |}\n         |\"\"\".stripMargin,\n      assertLayout = None\n    )(expected)\n"
  },
  {
    "id" : "4c5d807d-5035-4147-bafd-3d933472c85f",
    "prId" : 2142,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2142#pullrequestreview-512883640",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37b2f6da-5f60-403c-95ef-39bfbf7a710a",
        "parentId" : null,
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "test:\r\n```\r\n    runTestAssert[Stat](\r\n      \"\"\"|def mtch(x: Int): String =\r\n         |   x.match {\r\n         |     case 1 => \"1\"\r\n         |     case _ => \"ERR\"\r\n         |   }.trim()\r\n         |\"\"\".stripMargin,\r\n```\r\nfails",
        "createdAt" : "2020-10-20T09:04:05Z",
        "updatedAt" : "2020-10-21T12:35:22Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "9df9c79d-2747-4477-bb58-a2dcc61eaa56",
        "parentId" : "37b2f6da-5f60-403c-95ef-39bfbf7a710a",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Fixed!",
        "createdAt" : "2020-10-20T15:49:08Z",
        "updatedAt" : "2020-10-21T12:35:22Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbc0fc6b18e3886b05c545b753a7f456d67fc436",
    "line" : 245,
    "diffHunk" : "@@ -1,1 +1612,1616 @@\n  }\n\n  test(\"catch-case-in-paren\") {\n    val code = \"\"\"|fx(p1,"
  },
  {
    "id" : "410a3149-a5b0-4f85-823a-c68712a93829",
    "prId" : 2142,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2142#pullrequestreview-513499205",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8edece53-3593-438e-8b04-b95d88ca42a9",
        "parentId" : null,
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "+test as Significant Indentation(just remove {}) `(error: illegal start of statement ^.^trim())`",
        "createdAt" : "2020-10-21T08:33:22Z",
        "updatedAt" : "2020-10-21T12:35:22Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "21995f91-4df4-4b21-bb02-4a85b7c3c70c",
        "parentId" : "8edece53-3593-438e-8b04-b95d88ca42a9",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Fixed!",
        "createdAt" : "2020-10-21T09:48:41Z",
        "updatedAt" : "2020-10-21T12:35:22Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbc0fc6b18e3886b05c545b753a7f456d67fc436",
    "line" : 218,
    "diffHunk" : "@@ -1,1 +1585,1589 @@    runTestAssert[Stat](\n      \"\"\"|def mtch(x: Int): String =\n         |   x.match {\n         |     case 1 => \"1\"\n         |     case _ => \"ERR\""
  },
  {
    "id" : "88446225-f3b2-40d6-bf76-7b00e882857b",
    "prId" : 2136,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2136#pullrequestreview-505740569",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8eeda044-15cc-4658-b193-65e645b8a96c",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Any way we can say that it's the keyword actually? Reprinting it might add `` always",
        "createdAt" : "2020-10-09T10:10:50Z",
        "updatedAt" : "2020-10-09T13:41:18Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "acadbae7-3d61-4669-96db-1d2237ffa710",
        "parentId" : "8eeda044-15cc-4658-b193-65e645b8a96c",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "Yes good catch, it printed match surrounded with ``\r\nThe thing is it needs to handle normal name: `end myCusfomFunc` but also keywords `end if`\r\nNow I just changed treeprinting to print back `ternname.value` because printing whole TermName added `` if it was keyword which is probably correct way in rest of the code.\r\n\r\nOne way would be to keep it as is.\r\nOther way would be to simply keep raw `String` in EndMarker?\r\nThird way would be to introduce sth. like `Either[Term.Name, Token]` \r\n",
        "createdAt" : "2020-10-09T13:36:57Z",
        "updatedAt" : "2020-10-09T13:41:18Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "d91ba891-0f94-4901-8998-09ffb58d5be5",
        "parentId" : "8eeda044-15cc-4658-b193-65e645b8a96c",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Let's leave it as is for now.",
        "createdAt" : "2020-10-09T14:43:31Z",
        "updatedAt" : "2020-10-09T14:43:31Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "f14cecc88bac2d47aef6944e84475b38e8e05af2",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1272,1276 @@          List(\n            Term.Match(Term.Name(\"x\"), List(Case(Lit.Int(2), None, Lit.String(\"ERROR\")))),\n            Term.EndMarker(Term.Name(\"match\"))\n          )\n        )"
  },
  {
    "id" : "55bda0db-2db9-4475-9d1b-d632b69b8538",
    "prId" : 2104,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2104#pullrequestreview-472247340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42b823d7-94a6-431c-b3f6-ef99f4e80065",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "FYI this is still a valid Scala 2 code.",
        "createdAt" : "2020-08-17T10:27:27Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "91764306-eea1-4382-9990-daec25946b8d",
        "parentId" : "42b823d7-94a6-431c-b3f6-ef99f4e80065",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "I updated test name :+1:",
        "createdAt" : "2020-08-21T06:54:33Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "abda6140f18cfdd322470f06e9c7b5a6fdee0156",
    "line" : 328,
    "diffHunk" : "@@ -1,1 +326,330 @@\n  test(\"old-try-catch-multi\") {\n    val code = \"\"\"|try fx \n                  |catch {\n                  |  case x => 1"
  },
  {
    "id" : "333a2614-1757-498b-bb65-84770d2dfcb5",
    "prId" : 2104,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2104#pullrequestreview-478467157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9380f9c-339a-4228-aee6-eb4d437fd1c8",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "It might actually make sense to have a separate `Term.IfThen` as we discussed. Although, I am not sure Dotty settled on the syntax here? Reprinting the tree here will not work I assume?",
        "createdAt" : "2020-08-25T13:41:53Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "aa94fe3e-cd7d-4b59-9e22-520ea00b750a",
        "parentId" : "a9380f9c-339a-4228-aee6-eb4d437fd1c8",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "Might make sense as discussed, not sure they settled on that yet, reprinting doesn't work in most cases for new control syntax",
        "createdAt" : "2020-08-27T07:25:38Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "bfdeec60-862c-4746-ae0e-053ec8a92659",
        "parentId" : "a9380f9c-339a-4228-aee6-eb4d437fd1c8",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "as talked, no need to add it for now.",
        "createdAt" : "2020-08-31T09:45:17Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "abda6140f18cfdd322470f06e9c7b5a6fdee0156",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +67,71 @@    val output = \"if (cond) fx else gx\"\n    runTestAssert[Stat](code, assertLayout = Some(output))(\n      Term.If(Term.Name(\"cond\"), Term.Name(\"fx\"), Term.Name(\"gx\"))\n    )\n  }"
  },
  {
    "id" : "3b8f3406-77fc-4f22-ad4f-8f01090fa152",
    "prId" : 2104,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2104#pullrequestreview-478467280",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac5620a9-17ed-4ad1-9298-005e0c812096",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Should we have additional `Term.ForDo` ? Will we be later able to figure out what the parser actually parsed?",
        "createdAt" : "2020-08-25T13:47:41Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "a75d468b-6070-4f35-b1f1-525069116b20",
        "parentId" : "ac5620a9-17ed-4ad1-9298-005e0c812096",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "not for now",
        "createdAt" : "2020-08-31T09:45:29Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "abda6140f18cfdd322470f06e9c7b5a6fdee0156",
    "line" : 695,
    "diffHunk" : "@@ -1,1 +693,697 @@    val output = \"for (a <- x; b <- y) fx\"\n    runTestAssert[Stat](code, assertLayout = Some(output))(\n      Term.For(\n        List(\n          Enumerator.Generator(Pat.Var(Term.Name(\"a\")), Term.Name(\"x\")),"
  },
  {
    "id" : "e8b5ec74-0949-48de-ab2e-6e325bd63caf",
    "prId" : 2104,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2104#pullrequestreview-476455032",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "277fb8dc-b052-4d15-b810-f7c2e1fc0d79",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Term.ForYieldIdent ?",
        "createdAt" : "2020-08-25T13:48:33Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "49faaccb-69ce-4777-93d4-4bfc34d191f0",
        "parentId" : "277fb8dc-b052-4d15-b810-f7c2e1fc0d79",
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "just a question (mostly to do with using these types in a parser like `scalafmt`): why not preserve `Term.Block` and `Term.ForYield`, but add a flag inside stating whether it is indented?",
        "createdAt" : "2020-08-25T19:06:56Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "bd6720c1-daab-4840-a850-ff94d0bb4e5b",
        "parentId" : "277fb8dc-b052-4d15-b810-f7c2e1fc0d79",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "Guys are very(like very very) against breaking backward compatibility",
        "createdAt" : "2020-08-27T07:26:43Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "c5c893a6-9832-403d-912f-81d1dd79f9b4",
        "parentId" : "277fb8dc-b052-4d15-b810-f7c2e1fc0d79",
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "fair enough. must have put more thought into it than i have, anyway.",
        "createdAt" : "2020-08-27T07:29:05Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      }
    ],
    "commit" : "abda6140f18cfdd322470f06e9c7b5a6fdee0156",
    "line" : 731,
    "diffHunk" : "@@ -1,1 +729,733 @@  test(\"new-for-yield-single1\") {\n    val code = \"\"\"|for\n                  |  a <- x\n                  |  b <- y\n                  |yield fx"
  },
  {
    "id" : "a65161e9-d745-4610-a302-872045a3308c",
    "prId" : 2104,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2104#pullrequestreview-478467547",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00c0ef76-bfd5-4557-b6d7-35aea31b9ba9",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Term.WhileDo ?",
        "createdAt" : "2020-08-25T13:49:12Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "3d0051ce-9c75-4529-b85a-1469f1802922",
        "parentId" : "00c0ef76-bfd5-4557-b6d7-35aea31b9ba9",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "not for now",
        "createdAt" : "2020-08-31T09:45:56Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "abda6140f18cfdd322470f06e9c7b5a6fdee0156",
    "line" : 898,
    "diffHunk" : "@@ -1,1 +896,900 @@    val output = \"while (cond) fx\"\n    runTestAssert[Stat](code, assertLayout = Some(output))(\n      Term.While(Term.Name(\"cond\"), Term.Name(\"fx\"))\n    )\n  }"
  },
  {
    "id" : "999eb847-2700-4e4e-88a7-ce079b797e45",
    "prId" : 2104,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2104#pullrequestreview-495544593",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51451514-a432-42d7-a600-d889c91b1a74",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Is this fixed? I think we just don't add indentation here. It should be ok",
        "createdAt" : "2020-09-23T15:27:49Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "980f8a87-726d-41f5-a07e-46e2f035f651",
        "parentId" : "51451514-a432-42d7-a600-d889c91b1a74",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : " all good :+1: ",
        "createdAt" : "2020-09-24T13:01:24Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "abda6140f18cfdd322470f06e9c7b5a6fdee0156",
    "line" : 1140,
    "diffHunk" : "@@ -1,1 +1138,1142 @@    val code = \"\"\"|cond match {\n                  |  case a =>\n                  |  fa\n                  |  case b =>\n                  |  fb"
  }
]