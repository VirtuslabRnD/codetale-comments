[
  {
    "id" : "cef9c71f-ac2d-4ac2-878e-117554ed2307",
    "prId" : 2327,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2327#pullrequestreview-652087862",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0df51379-0e87-4011-b51d-8064511e104d",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "this type of quasiquote is probably meaningless. as a result of your [welcome] change, there's no more confusion between matching a template and a parent class.\r\n\r\nanyone who uses `$foo` without `extends` would know it matches a template. and using `extends $foo` would now require `init\"...\"` and nothing else.\r\n\r\nso i would do this:\r\n- in `ConversionMacros.scala:typeMismatchMessage`, replace the entire template-related block (and `MetaTemplate` field) and remove the `wholeMessage` variable as well.\r\n- change this `#448` test into two:\r\n  - `q\"class C $foo` where `foo = t\"...\"` (this one); wants template, gets type\r\n  - `q\"class C extends $foo` where `foo = t\"...\"` (original, with `extends`); wants init, gets type\r\n",
        "createdAt" : "2021-05-04T15:02:58Z",
        "updatedAt" : "2021-05-05T09:12:55Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "b17e7a74-0d12-4785-9654-871e39fd7d55",
        "parentId" : "0df51379-0e87-4011-b51d-8064511e104d",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Did both, I think we should be fine now.",
        "createdAt" : "2021-05-05T09:13:52Z",
        "updatedAt" : "2021-05-05T09:13:52Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fcb000b8f81059d73eb92bba3e54f308f949da3",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +725,729 @@      import scala.meta._\n      val notReallyAParent = t\"_root_.scala.AnyVal\"\n      q\"class C $notReallyAParent\"\n    \"\"\"),\n      \"\"\"|<macro>:4: type mismatch when unquoting;"
  }
]