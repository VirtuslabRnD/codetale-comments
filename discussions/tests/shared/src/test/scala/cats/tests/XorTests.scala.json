[
  {
    "id" : "a28c92b5-3fb0-4f39-9d40-a8448580477f",
    "prId" : 521,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4882bb08-1e7a-4a11-8906-795cce2c9861",
        "parentId" : null,
        "authorId" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "body" : "Check Serializability\n",
        "createdAt" : "2015-09-10T03:41:31Z",
        "updatedAt" : "2015-09-10T03:41:31Z",
        "lastEditedBy" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "tags" : [
        ]
      },
      {
        "id" : "3fc7a77f-4b0f-4173-99a2-0ced9860c6d3",
        "parentId" : "4882bb08-1e7a-4a11-8906-795cce2c9861",
        "authorId" : "5fc41774-e53b-4d72-b032-2959b6584db3",
        "body" : "I see `- Xor[String, Int].monoid.serializable` in the test output. It appears serializability is checked via:\n\nhttps://github.com/non/algebra/blob/v0.3.1/laws/shared/src/main/scala/algebra/laws/GroupLaws.scala#L28\n\nIs that sufficient or is there a reason to have the following in addition?\n\n``` scala\ncheckAll(\"Xor[String, Int]\", SerializableTests.serializable(Monoid[Xor[String, Int]]))\n```\n",
        "createdAt" : "2015-09-10T04:44:16Z",
        "updatedAt" : "2015-09-10T04:44:16Z",
        "lastEditedBy" : "5fc41774-e53b-4d72-b032-2959b6584db3",
        "tags" : [
        ]
      },
      {
        "id" : "d9290335-dc45-41d7-9674-56499ab27b00",
        "parentId" : "4882bb08-1e7a-4a11-8906-795cce2c9861",
        "authorId" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "body" : "Oh you're right, `algebra` includes `Serializable` checks in their laws - @non confirm?\n",
        "createdAt" : "2015-09-10T04:53:15Z",
        "updatedAt" : "2015-09-10T04:53:15Z",
        "lastEditedBy" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "86dbe1c63fab0cd61a815fc22073c75ed0ba4ece",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +14,18 @@\nclass XorTests extends CatsSuite {\n  checkAll(\"Xor[String, Int]\", algebra.laws.GroupLaws[Xor[String, Int]].monoid)\n\n  checkAll(\"Xor[String, Int]\", MonadErrorTests[Xor, String].monadError[Int, Int, Int])"
  }
]