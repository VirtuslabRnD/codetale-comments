[
  {
    "id" : "8c73a69f-2e67-48a7-be71-3d882e441f65",
    "prId" : 1924,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1924#pullrequestreview-671727852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4399e58-10b6-459e-b5d0-3c6d3e308366",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Given that we're whitebox macroing here, I wonder if it's possible to have an API which *doesn't* require this kind of \"dsl partial application\" pattern. I'm totally fine going with this for now, especially since we aren't guaranteeing compatibility, but it feels possible.",
        "createdAt" : "2021-05-28T23:14:20Z",
        "updatedAt" : "2021-05-29T02:49:21Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "f9465fad-2c04-4d6f-9e6c-ae8265668f70",
        "parentId" : "e4399e58-10b6-459e-b5d0-3c6d3e308366",
        "authorId" : "f922026e-8d84-4598-ab47-680f9fb26f4a",
        "body" : "Turned into a blackbox macro in 259b723. \r\n\r\nWhat you suggest might be possible but it would require a lot more metaprogramming skills than what I can offer. Like, you'd have to collect all the await blocks (which would then be typed `def await[F[_], A](fa: F[A]) : A` which would likely mess with inference), extract the F from each of them, ensure they're all consistent, implicitly resolve the Async typeclass instance using macro magic ... \r\n\r\nLooking at [this library](https://github.com/rssh/cps-async-connect/blob/master/cats-effect/shared/src/test/scala/cps/cats/effect/StupidFizzBuzzSuite.scala#L48-L63), which provides the same feature for Scala 3, the UX is bound to improve in the future, but in the current state, I think \"dsl partial application\" is the least bad alternative. People who want to use async/await are likely gonna be coding against a specific effect (as opposed to an abstract one) and will be able to define a global instance of the dsl for their effect, after which type inference is solid. \r\n\r\nIn the meantime, should I add partially applied instance for the specific case of IO ? If so, can you suggest a location / name ? ",
        "createdAt" : "2021-05-29T08:44:57Z",
        "updatedAt" : "2021-05-29T08:49:41Z",
        "lastEditedBy" : "f922026e-8d84-4598-ab47-680f9fb26f4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2a9cb73abe00977470af722c8eaf9e35ffc7c6e",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@  \"IOAsyncAwait\" should {\n    object IOAsyncAwait extends cats.effect.std.AsyncAwaitDsl[IO]\n    import IOAsyncAwait.{await => ioAwait, _}\n\n    \"work on success\" in real {"
  },
  {
    "id" : "f0a605d1-3696-43be-9aa2-46bcbc34f0d7",
    "prId" : 1924,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1924#pullrequestreview-671728190",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a29aada2-fb73-4846-9b64-1279522011ee",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Should we have a test for `async(throw Boom)` as well?",
        "createdAt" : "2021-05-28T23:14:54Z",
        "updatedAt" : "2021-05-29T02:49:21Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "d73d4f4f-835f-423c-9b95-9b1f52f1fad2",
        "parentId" : "a29aada2-fb73-4846-9b64-1279522011ee",
        "authorId" : "f922026e-8d84-4598-ab47-680f9fb26f4a",
        "body" : "8971556",
        "createdAt" : "2021-05-29T08:50:26Z",
        "updatedAt" : "2021-05-29T08:50:26Z",
        "lastEditedBy" : "f922026e-8d84-4598-ab47-680f9fb26f4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2a9cb73abe00977470af722c8eaf9e35ffc7c6e",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +48,52 @@      val io = IO.raiseError[Int](Boom)\n\n      val program = async(ioAwait(io))\n\n      program.attempt.flatMap { res =>"
  }
]