[
  {
    "id" : "7771f058-7ad8-455e-ad8b-d3dc1eeace70",
    "prId" : 4317,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4317#pullrequestreview-117656300",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47de7525-a15e-4222-a021-6f507991f96b",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Try changing it to \r\n```scala\r\ndef of[A: Type: Liftable](arr0: Array[A]): Stream[A] = {\r\n  val arr = arr0.toExpr\r\n  ...\r\n```\r\n\r\nYou will need some lifter for Arrays from the library.",
        "createdAt" : "2018-05-04T15:45:43Z",
        "updatedAt" : "2018-05-29T08:22:09Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c46da82067f34e3247f6139a0b59bc01ba5d06f",
    "line" : 591,
    "diffHunk" : "@@ -1,1 +589,593 @@\n  object Stream {\n    def of[A: Type](arr: Expr[Array[A]]): Stream[A] = {\n      val prod = new Producer[Expr[A]] {\n        type St = (Var[Int], Var[Int], Expr[Array[A]])"
  },
  {
    "id" : "233e990b-a72d-4abc-9aed-c5d986d2fb38",
    "prId" : 4317,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4317#pullrequestreview-122067084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d705b74-4243-448c-b8e3-e97359dcfb8f",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "```scala\r\ndef take(n: Int): Stream[A] = Stream(takeRaw[Expr[A]](n.toExpr, stream))\r\n```",
        "createdAt" : "2018-05-04T15:47:56Z",
        "updatedAt" : "2018-05-29T08:22:09Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "e908e45f-f9b9-4dd9-b350-3b14e2c27780",
        "parentId" : "0d705b74-4243-448c-b8e3-e97359dcfb8f",
        "authorId" : "4107dafe-4e7b-4e85-8d5b-63e06e0e6318",
        "body" : "@nicolasstucki what’s the advantage of your proposal? At first sight it seems less powerful.",
        "createdAt" : "2018-05-22T08:09:30Z",
        "updatedAt" : "2018-05-29T08:22:09Z",
        "lastEditedBy" : "4107dafe-4e7b-4e85-8d5b-63e06e0e6318",
        "tags" : [
        ]
      },
      {
        "id" : "24a67ed8-7ec6-4f62-8187-9e71d455e4d8",
        "parentId" : "0d705b74-4243-448c-b8e3-e97359dcfb8f",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "The aim is to hide the `Expr` from the end user.",
        "createdAt" : "2018-05-22T08:21:07Z",
        "updatedAt" : "2018-05-29T08:22:09Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "82ff23bb-8589-4a9f-b8d5-d820579ac408",
        "parentId" : "0d705b74-4243-448c-b8e3-e97359dcfb8f",
        "authorId" : "4107dafe-4e7b-4e85-8d5b-63e06e0e6318",
        "body" : "Then do we want `fold` to have the following signature?\r\n\r\n~~~ scala\r\ndef fold[W : Type](z: W, f: (W, A) => W): W\r\n~~~\r\n\r\nI’m not sure this is what we want?",
        "createdAt" : "2018-05-22T08:31:36Z",
        "updatedAt" : "2018-05-29T08:22:09Z",
        "lastEditedBy" : "4107dafe-4e7b-4e85-8d5b-63e06e0e6318",
        "tags" : [
        ]
      },
      {
        "id" : "42e4931c-1ad8-40ab-9d54-4e2ac4ed8573",
        "parentId" : "0d705b74-4243-448c-b8e3-e97359dcfb8f",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "You are right, it is not exactly what I want. We need to hide the Expr behind a macro. I will test my signature idea and then document it here if it works",
        "createdAt" : "2018-05-22T08:34:25Z",
        "updatedAt" : "2018-05-29T08:22:09Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c46da82067f34e3247f6139a0b59bc01ba5d06f",
    "line" : 353,
    "diffHunk" : "@@ -1,1 +351,355 @@\n    /** A stream containing the first `n` elements of this stream. */\n    def take(n: Expr[Int]): Stream[A] = Stream(takeRaw[Expr[A]](n, stream))\n\n    private def zipRaw[A: Type, B: Type](stream1: StagedStream[Expr[A]], stream2: StagedStream[B]): StagedStream[(Expr[A], B)] = {"
  },
  {
    "id" : "0e916bda-bbc9-45d7-b8c6-3570db8f5493",
    "prId" : 4317,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4317#pullrequestreview-122061594",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae9aa979-214a-443e-973c-87e8e917eba0",
        "parentId" : null,
        "authorId" : "4107dafe-4e7b-4e85-8d5b-63e06e0e6318",
        "body" : "I’m wondering if this can cause subtle bugs, since `null.asInstanceOf[Int]` produces `0`, which is undistinguishable from the value `0` (by contrast with references, where `null` can always be distinguished from an object reference).\r\n\r\nWhy don’t you use `Option[A]` instead?",
        "createdAt" : "2018-05-22T08:18:06Z",
        "updatedAt" : "2018-05-29T08:22:09Z",
        "lastEditedBy" : "4107dafe-4e7b-4e85-8d5b-63e06e0e6318",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c46da82067f34e3247f6139a0b59bc01ba5d06f",
    "line" : 486,
    "diffHunk" : "@@ -1,1 +484,488 @@                Var('{ (_: Unit) => ()}){ nadv => {\n                  Var('{ true }) { hasNext => {\n                     Var('{ null.asInstanceOf[A] }) { curr => '{\n\n                        // Code generation of the `adv` function"
  },
  {
    "id" : "867f6110-a163-418e-9070-5f3a82a3499d",
    "prId" : 4317,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4317#pullrequestreview-123703845",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21bed1f5-44ec-4a0d-8872-718d766ab53c",
        "parentId" : null,
        "authorId" : "4107dafe-4e7b-4e85-8d5b-63e06e0e6318",
        "body" : "Is there any difference between `'{ ~s.update(…) }` and `s.update(…)`?",
        "createdAt" : "2018-05-22T08:27:22Z",
        "updatedAt" : "2018-05-29T08:22:09Z",
        "lastEditedBy" : "4107dafe-4e7b-4e85-8d5b-63e06e0e6318",
        "tags" : [
        ]
      },
      {
        "id" : "f8820362-d24b-4beb-8794-38ba2500e1bc",
        "parentId" : "21bed1f5-44ec-4a0d-8872-718d766ab53c",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "It is the same",
        "createdAt" : "2018-05-22T08:41:52Z",
        "updatedAt" : "2018-05-29T08:22:09Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "3872fbcf-58be-4caf-ae6c-9acf09dab263",
        "parentId" : "21bed1f5-44ec-4a0d-8872-718d766ab53c",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Though I would not change it. This kind of small additions have been useful to find bugs in the implementation. I would keep it like this for as a regression test.",
        "createdAt" : "2018-05-22T08:43:48Z",
        "updatedAt" : "2018-05-29T08:22:09Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "561c5ded-3b82-4867-98be-0016593ec103",
        "parentId" : "21bed1f5-44ec-4a0d-8872-718d766ab53c",
        "authorId" : "37519144-0f9f-4b2b-85f7-34dde9be2e11",
        "body" : "However, nice catch @julienrf!",
        "createdAt" : "2018-05-28T11:16:47Z",
        "updatedAt" : "2018-05-29T08:22:09Z",
        "lastEditedBy" : "37519144-0f9f-4b2b-85f7-34dde9be2e11",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c46da82067f34e3247f6139a0b59bc01ba5d06f",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +101,105 @@           ~foldRaw[Expr[A]]((a: Expr[A]) => '{\n             ~s.update(f(s.get, a))\n           }, stream)\n\n           ~s.get"
  },
  {
    "id" : "61ced1ab-84a7-4167-993d-91c547bc8d3c",
    "prId" : 4317,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4317#pullrequestreview-122071732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6abeb5c6-8575-4974-9bc3-0263c215d70e",
        "parentId" : null,
        "authorId" : "4107dafe-4e7b-4e85-8d5b-63e06e0e6318",
        "body" : "It seems that we don’t need to take `stream` as a parameter since it is already a parameter of the `Stream` class. (btw name shadowing is dangerous!)",
        "createdAt" : "2018-05-22T08:47:36Z",
        "updatedAt" : "2018-05-29T08:22:09Z",
        "lastEditedBy" : "4107dafe-4e7b-4e85-8d5b-63e06e0e6318",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c46da82067f34e3247f6139a0b59bc01ba5d06f",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +108,112 @@     }\n\n     private def foldRaw[A](consumer: A => Expr[Unit], stream: StagedStream[A]): Expr[Unit] = {\n       stream match {\n         case Linear(producer) => {"
  },
  {
    "id" : "4d9dfb51-3285-4cc8-9ae9-5a7b90518d54",
    "prId" : 4317,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4317#pullrequestreview-123726856",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70acf9f2-f100-4a6d-8ddb-2f1ff23d3081",
        "parentId" : null,
        "authorId" : "37519144-0f9f-4b2b-85f7-34dde9be2e11",
        "body" : "@nicolasstucki this is the line that triggers the exception after the last rebase",
        "createdAt" : "2018-05-28T11:50:20Z",
        "updatedAt" : "2018-05-29T08:22:09Z",
        "lastEditedBy" : "37519144-0f9f-4b2b-85f7-34dde9be2e11",
        "tags" : [
        ]
      },
      {
        "id" : "d68e419e-fe5a-4dad-b6c2-4911277cd6e2",
        "parentId" : "70acf9f2-f100-4a6d-8ddb-2f1ff23d3081",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Fix in #4592",
        "createdAt" : "2018-05-28T12:55:21Z",
        "updatedAt" : "2018-05-29T08:22:09Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c46da82067f34e3247f6139a0b59bc01ba5d06f",
    "line" : 484,
    "diffHunk" : "@@ -1,1 +482,486 @@            def init(k: St => Expr[Unit]): Expr[Unit] = {\n              producer.init(st =>\n                Var('{ (_: Unit) => ()}){ nadv => {\n                  Var('{ true }) { hasNext => {\n                     Var('{ null.asInstanceOf[A] }) { curr => '{"
  }
]