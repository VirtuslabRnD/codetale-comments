[
  {
    "id" : "b67f9191-f518-4a6b-a32b-a290e70f762a",
    "prId" : 4650,
    "prUrl" : "https://github.com/apache/kafka/pull/4650#pullrequestreview-105177306",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79bf2aaf-82e1-43a6-a888-cad1e0841272",
        "parentId" : null,
        "authorId" : "5b2b5fa0-0fb4-4e52-a4f9-9d4318b5ae5d",
        "body" : "Not really related to this pr - I was looking at the surrounding code and noticed that the `server_prop_overides arg` is defaulted to `[]`. Its probably fine since its not being written, but you almost never want that since every instance will share the same global list. Might want to fix that while you're here.",
        "createdAt" : "2018-03-08T06:25:26Z",
        "updatedAt" : "2018-03-22T23:45:08Z",
        "lastEditedBy" : "5b2b5fa0-0fb4-4e52-a4f9-9d4318b5ae5d",
        "tags" : [
        ]
      },
      {
        "id" : "3cfadb11-1306-4ea7-8b88-9915d311037b",
        "parentId" : "79bf2aaf-82e1-43a6-a888-cad1e0841272",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "@rodesai what do you mean by the \"global list\"?",
        "createdAt" : "2018-03-14T00:47:40Z",
        "updatedAt" : "2018-03-22T23:45:08Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "b13f36f5-b294-421c-ae70-705ce43e7785",
        "parentId" : "79bf2aaf-82e1-43a6-a888-cad1e0841272",
        "authorId" : "5b2b5fa0-0fb4-4e52-a4f9-9d4318b5ae5d",
        "body" : "When the interpreter processes the function def it will initialize one list that it passes to every instance of KafkaService thats constructed without specifying its own server_prop_overrides. Here's an illustrative example:\r\n```code\r\n>>> class A(object):\r\n...     def __init__(self, a, b=[]):\r\n...         b.append(a)\r\n...         self.b = b\r\n...\r\n>>> print A(1).b\r\n[1]\r\n>>> print A(2).b\r\n[1, 2]\r\n>>> print A(3).b\r\n[1, 2, 3]\r\n```",
        "createdAt" : "2018-03-14T01:17:02Z",
        "updatedAt" : "2018-03-22T23:45:08Z",
        "lastEditedBy" : "5b2b5fa0-0fb4-4e52-a4f9-9d4318b5ae5d",
        "tags" : [
        ]
      },
      {
        "id" : "2cf5d232-f686-4978-9d32-ce9a2f991c7a",
        "parentId" : "79bf2aaf-82e1-43a6-a888-cad1e0841272",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Got it, thanks! Please let me know if the fix makes sense to you.",
        "createdAt" : "2018-03-15T01:11:15Z",
        "updatedAt" : "2018-03-22T23:45:08Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "fffc22b2-6bc0-43ea-8d6e-bf38c70c8a60",
        "parentId" : "79bf2aaf-82e1-43a6-a888-cad1e0841272",
        "authorId" : "5b2b5fa0-0fb4-4e52-a4f9-9d4318b5ae5d",
        "body" : "This still has the same problem, though its more explicit. Not sure if that was the intent. The standard approach is something like this\r\n```{code}\r\ndef __init__(self, ..., server_prop_overrides=None, ...):\r\n    if server_prop_overrides is None:\r\n        server_prop_overrides = []\r\n```",
        "createdAt" : "2018-03-19T23:26:57Z",
        "updatedAt" : "2018-03-22T23:45:08Z",
        "lastEditedBy" : "5b2b5fa0-0fb4-4e52-a4f9-9d4318b5ae5d",
        "tags" : [
        ]
      },
      {
        "id" : "0a4d6e6f-4001-4416-bec5-802fab3a533e",
        "parentId" : "79bf2aaf-82e1-43a6-a888-cad1e0841272",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Ah got it. I will try this in the code:\r\n\r\n```\r\nif server_prop_overides is None:\r\n            self.server_prop_overides = []\r\nelse:\r\n            self.server_prop_overides = server_prop_overides\r\n```",
        "createdAt" : "2018-03-19T23:38:41Z",
        "updatedAt" : "2018-03-22T23:45:08Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d42620a1d7cc64ee0107012d24ff2e6d6329e78b",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +76,80 @@        :type context\n        :type zk: ZookeeperService\n        :type topics: dict\n        \"\"\"\n        Service.__init__(self, context, num_nodes)"
  },
  {
    "id" : "ff0f6be5-ec15-4946-97c6-76c03d60130f",
    "prId" : 5373,
    "prUrl" : "https://github.com/apache/kafka/pull/5373#pullrequestreview-138374294",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8c10a6a-f95c-49b9-bc7c-9c1e81c097f0",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "I'm wondering if we should log this exception in case `thread_dump` raises an unexpected error. We don't want to lose the original error.",
        "createdAt" : "2018-07-18T18:06:27Z",
        "updatedAt" : "2018-07-18T18:52:21Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "9665796aeabebe84253c82b3cd2f38690c9bb14d",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +292,296 @@        try:\n            wait_until(lambda: len(self.pids(node)) == 0, timeout_sec=60, err_msg=\"Kafka node failed to stop\")\n        except Exception:\n            self.thread_dump(node)\n            raise"
  },
  {
    "id" : "2fe10115-c089-4a97-bd52-4c78377f72d7",
    "prId" : 6938,
    "prUrl" : "https://github.com/apache/kafka/pull/6938#pullrequestreview-251431802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f9a00e2-19ff-440e-b33a-ba8778de09a3",
        "parentId" : null,
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "Have we considered making this a bit more flexible? For example, would it be better to allow tests to specify `client_listener_name` and `interbroker_listener_name` rather than a flag. There is a lot of tech debt here since this code was written before listener names were introduced. I was wondering if this could be an opportunity to clear some of that. If you have already considered that and found it a lot of work, then we merge this and consider that later.",
        "createdAt" : "2019-06-17T18:27:30Z",
        "updatedAt" : "2019-06-20T18:13:58Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "8135b956-207e-4643-81a9-5588deff67cc",
        "parentId" : "7f9a00e2-19ff-440e-b33a-ba8778de09a3",
        "authorId" : "d4a29de4-254d-4d4d-b37e-651082f95fa9",
        "body" : "Yes, all good points. I originally intended to do a bigger change, encapsulating all listener-related stuff (security protocol, port, sasl config) in a separate Listener class, and instead of pre-defined dict with ports we could actually add and remove listener objects to/from the dict. But that's a massive and not particularly backwards compatible change.\r\nAs for 'client_listener_name' and 'interbroker_listener_name' - I originally wrote a PR like that (only for interbroker one though, client change, again, is much bigger and harder to keep backwards compatible) - but went for boolean for practical reasons, since in the tests that we envision so far we don't care about listener name, just the fact that there are two listeners on the same security protocol - so effectively I was just calling constructor with interbroker_listener_name=KafkaService.INTERBROKER_LISTENER_NAME.\r\nI can send a follow-up PR to enable custom name interbroker listener or update this one, whichever you prefer. I would suggest making changes to client listeners in separate PRs.",
        "createdAt" : "2019-06-17T20:06:19Z",
        "updatedAt" : "2019-06-20T18:13:58Z",
        "lastEditedBy" : "d4a29de4-254d-4d4d-b37e-651082f95fa9",
        "tags" : [
        ]
      },
      {
        "id" : "810b1c1d-e4dc-46dd-84c1-a44969d0a44e",
        "parentId" : "7f9a00e2-19ff-440e-b33a-ba8778de09a3",
        "authorId" : "d4a29de4-254d-4d4d-b37e-651082f95fa9",
        "body" : "I played a bit with 'interbroker_listener_name' and its tricky to marry two concepts - existing one and custom named one, without having quite a messy code. I'd suggest keeping this PR as is, with boolean value, since the tests are passing and send a follow up with custom names - this way I can unblock several people who depend on separate interbroker listener, but don't care about custom names. Wdyt?",
        "createdAt" : "2019-06-19T01:05:43Z",
        "updatedAt" : "2019-06-20T18:13:58Z",
        "lastEditedBy" : "d4a29de4-254d-4d4d-b37e-651082f95fa9",
        "tags" : [
        ]
      }
    ],
    "commit" : "33bd50de5718ec9d02dec262430aaff7ced6662a",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +95,99 @@                 authorizer_class_name=None, topics=None, version=DEV_BRANCH, jmx_object_names=None,\n                 jmx_attributes=None, zk_connect_timeout=5000, zk_session_timeout=6000, server_prop_overides=None, zk_chroot=None,\n                 use_separate_interbroker_listener=False):\n        \"\"\"\n        :param context: test context"
  }
]