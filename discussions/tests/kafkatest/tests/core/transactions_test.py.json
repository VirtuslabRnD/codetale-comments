[
  {
    "id" : "7758c07c-0b70-4741-936e-fc85a350d353",
    "prId" : 8000,
    "prUrl" : "https://github.com/apache/kafka/pull/8000#pullrequestreview-347656840",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d519b54-c1ef-43ff-9cfb-5954a66bc580",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "During the test, I realized one scenario which is pretty dangerous. If we have a hard failure and the txn offsets get sticky on the broker side, for next consumer it could take over one minute to back-off and wait for the clearance, thus timing out on the fetch. Shrinking to 10 seconds here is just a remediation, but we should pay attention to general usage as well.",
        "createdAt" : "2020-01-23T22:40:17Z",
        "updatedAt" : "2020-02-11T21:07:09Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "17b1ebb275d0bef7744a0215fc2392c4c97285cc",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +48,52 @@        self.num_seed_messages = 100000\n        self.transaction_size = 750\n        self.transaction_timeout = 10000\n        self.consumer_group = \"transactions-test-consumer-group\"\n"
  },
  {
    "id" : "1fde1361-db41-4054-8e84-1555a87b6bec",
    "prId" : 8000,
    "prUrl" : "https://github.com/apache/kafka/pull/8000#pullrequestreview-351700812",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50069b50-d1aa-4c62-a81a-c2746094f7a4",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "The changes in transactions_test are mainly for compatibility. Nothing should be behaving differently",
        "createdAt" : "2020-01-31T18:43:51Z",
        "updatedAt" : "2020-02-11T21:07:09Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "17b1ebb275d0bef7744a0215fc2392c4c97285cc",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +227,231 @@            bounce_target=[\"brokers\", \"clients\"],\n            check_order=[True, False],\n            use_group_metadata=[True, False])\n    def test_transactions(self, failure_mode, bounce_target, check_order, use_group_metadata):\n        security_protocol = 'PLAINTEXT'"
  },
  {
    "id" : "f04e9ad6-c4f1-444e-a5ed-a9501df90ef6",
    "prId" : 8981,
    "prUrl" : "https://github.com/apache/kafka/pull/8981#pullrequestreview-445215744",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e766e6a2-fcfe-44ca-9bab-4e2f19f3843a",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "Hmm, still not sure about this. In a hard bounce, the broker failure will be detected after ZK session expiration, with a default of 18 sec. After that, new leaders will be elected and the client should recover. So, the transactional producer should be unblocked after 18 secs, even with a 40 sec transaction_timeout?",
        "createdAt" : "2020-07-07T22:27:57Z",
        "updatedAt" : "2020-07-09T00:34:38Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "63cc41d2-beb7-4d50-9437-3a70ea130e04",
        "parentId" : "e766e6a2-fcfe-44ca-9bab-4e2f19f3843a",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "> the broker failure will be detected after ZK session expiration\r\n\r\nIt is unrelate to broker. The root cause is client (TransactionMessageCopier) is ungracefully closed in hard_bounce mode. The transactional message sent by client is not correctly completed so there are pending transaction (unstable offset) stored by broker. When the client is restarting, it fails to get offsets of partition due to unstable offset (TransactionMessageCopier needs to get position of partition to calculate remaining messages after restarting).\r\n\r\nThe timeout of transaction is higher than the timeout of verification so this test fails if any transaction is not correctly abort.",
        "createdAt" : "2020-07-08T00:41:49Z",
        "updatedAt" : "2020-07-09T00:34:38Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "aba90142-5071-4d2d-be42-97f081a747c9",
        "parentId" : "e766e6a2-fcfe-44ca-9bab-4e2f19f3843a",
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "@chia7712 : Thanks for the reply. That makes sense. Perhaps we can adjust the comment to make it clear that the hard bounce is for the client.",
        "createdAt" : "2020-07-08T01:04:29Z",
        "updatedAt" : "2020-07-09T00:34:38Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "485346a0-af2e-43e3-b975-1a5c341b9f3c",
        "parentId" : "e766e6a2-fcfe-44ca-9bab-4e2f19f3843a",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "> we can adjust the comment to make it clear that the hard bounce is for the client.\r\n\r\ndone",
        "createdAt" : "2020-07-09T00:35:11Z",
        "updatedAt" : "2020-07-09T00:35:12Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      }
    ],
    "commit" : "6df6979ff5fe7197c4718a9becb72ed579c297b2",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +52,56 @@        # broker obstructs TransactionMessageCopier from getting offset of partition which is used to calculate\n        # remaining messages after restarting.\n        self.transaction_timeout = 5000\n        self.consumer_group = \"transactions-test-consumer-group\"\n"
  },
  {
    "id" : "76c6d047-4ecd-40e1-bec3-71f2281da7cd",
    "prId" : 9026,
    "prUrl" : "https://github.com/apache/kafka/pull/9026#pullrequestreview-449496208",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a827e439-37f8-4d69-afd9-6207eb6f41c1",
        "parentId" : null,
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "How about using different ```transaction_timeout``` for different mode? For example, lower timeout for hard_bounce of client and higher timeout for broker. I try to avoid higher waiting time (```progress_timeout_sec```) when encountering other error.\r\n",
        "createdAt" : "2020-07-15T08:04:24Z",
        "updatedAt" : "2020-07-15T08:05:00Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "95de3e88-5815-4230-85e5-dbaf7a84d9a0",
        "parentId" : "a827e439-37f8-4d69-afd9-6207eb6f41c1",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "What might be preferable is to provide a way to override the request timeout in `TransactionalMessageCopier` so that we can use lower values in all cases. Unfortunately we didn't give this class an easy way to override producer configurations, so we would need another argument. I decided to hold off on this, but I can reconsider it if you think it's worthwhile. This service (as well as `VerifiableConsumer` and `VerifiableProducer`) are a bit of a grey area as far as whether they are public APIs or not, but I have tended to take the position that they are not ðŸ™‚ .",
        "createdAt" : "2020-07-16T00:01:28Z",
        "updatedAt" : "2020-07-16T00:02:39Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "6ff1e809-5c11-48d4-9967-dc812b8bb173",
        "parentId" : "a827e439-37f8-4d69-afd9-6207eb6f41c1",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "> I decided to hold off on this, but I can reconsider it if you think it's worthwhile.\r\n\r\nit is fine to me as your approach is more simple :)\r\n\r\n> What might be preferable is to provide a way to override the request timeout in TransactionalMessageCopier so that we can use lower values in all cases.\r\n\r\nthe root cause I observed is different to https://issues.apache.org/jira/browse/KAFKA-9802. On my local, ```TransactionalMessageCopier``` fails due to ProducerFencedException which is caused by that broker increases the producer epoch when aborting transaction. \r\n```\r\n                    } catch (ProducerFencedException | OutOfOrderSequenceException e) {\r\n                        // We cannot recover from these errors, so just rethrow them and let the process fail\r\n                        throw e;\r\n                    } catch (KafkaException e) {\r\n                        producer.abortTransaction();\r\n                        resetToLastCommittedPositions(consumer);\r\n                    }\r\n```\r\n\r\nPerhaps we should make ```TransactionalMessageCopier``` recoverable from transaction timeout before [KIP-558](https://cwiki.apache.org/confluence/display/KAFKA/KIP-588%3A+Allow+producers+to+recover+gracefully+from+transaction+timeouts) is addressed.\r\n\r\nBTW, [group_mode_transactions_test.py]( https://github.com/apache/kafka/blob/trunk/tests/kafkatest/tests/core/group_mode_transactions_test.py#L256) has similar issue. Could you fix it also? Or we can apply your approach to fix ```group_mode_transactions_test.py``` in another PR.\r\n",
        "createdAt" : "2020-07-16T04:19:52Z",
        "updatedAt" : "2020-07-16T04:19:52Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      }
    ],
    "commit" : "dea96a4ff9e742ee522cf5469a071a7f5870739f",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +56,60 @@        # want the coordinator timing out the transaction.\n        self.transaction_timeout = 40000\n        self.progress_timeout_sec = 60\n        self.consumer_group = \"transactions-test-consumer-group\"\n"
  }
]