[
  {
    "id" : "41caaaf5-05c7-411c-8827-5fa66c4c28a6",
    "prId" : 7529,
    "prUrl" : "https://github.com/apache/kafka/pull/7529#pullrequestreview-302968260",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1640dc0-889e-43f8-98fe-206ce6865774",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Is it necessary to make `TASK_DELIMITER` configurable? I feel it is unnecessarily complicating the setup..",
        "createdAt" : "2019-10-17T01:03:31Z",
        "updatedAt" : "2019-10-17T02:39:12Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "e890e6d3-f3b0-4a2e-ad84-d97fceee8658",
        "parentId" : "e1640dc0-889e-43f8-98fe-206ce6865774",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Ack, although the test uses this delimiter (or will in the near future) so I'll leave the definition here but remove from the configs passed.",
        "createdAt" : "2019-10-17T01:49:55Z",
        "updatedAt" : "2019-10-17T02:39:12Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "e96bd7ff-f862-4a4d-8655-7a7ec0d0a272",
        "parentId" : "e1640dc0-889e-43f8-98fe-206ce6865774",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Yeah my point here is that we can just hard-coded it than passing it through.",
        "createdAt" : "2019-10-17T02:04:56Z",
        "updatedAt" : "2019-10-17T02:39:12Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce2e86b1297c78b52afff364eb8d667dd90b9f95",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +34,38 @@    source_topic = \"source\"\n    sink_topic = \"sink\"\n    task_delimiter = \"#\"\n    report_interval = \"1000\"\n    processing_message = \"Processed [0-9]* records so far\""
  },
  {
    "id" : "6a85a93c-bead-4ae5-9fd8-041f72f71f99",
    "prId" : 7529,
    "prUrl" : "https://github.com/apache/kafka/pull/7529#pullrequestreview-302969687",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "041224bf-ab02-42f9-b0db-2e58c0719d68",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Since we now let the log4j to print the upgrade_from string already, do we still need this and to print within the state listener any more?",
        "createdAt" : "2019-10-17T01:06:57Z",
        "updatedAt" : "2019-10-17T02:39:12Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "f7069f0c-6ff0-44a6-bf90-4c1bd6bf05e2",
        "parentId" : "041224bf-ab02-42f9-b0db-2e58c0719d68",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Not sure I follow here.  We need the `upgrade_from` field for setting in the  `CooperativeRebalanceUpgradeService` service to set the streams config.",
        "createdAt" : "2019-10-17T01:56:29Z",
        "updatedAt" : "2019-10-17T02:39:12Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "7d8aa51f-886b-414a-a18c-a4d0a34db3e0",
        "parentId" : "041224bf-ab02-42f9-b0db-2e58c0719d68",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "My bad, I thought the `upgradePhase-Starting a REBALANCE` message is used somewhere in verification and thought with the augmented log4j it can now be replaced, but now I see it is only for debugging purposes.",
        "createdAt" : "2019-10-17T02:12:31Z",
        "updatedAt" : "2019-10-17T02:39:12Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce2e86b1297c78b52afff364eb8d667dd90b9f95",
    "line" : 209,
    "diffHunk" : "@@ -1,1 +207,211 @@        processor.SINK_TOPIC = self.sink_topic\n        processor.REPORT_INTERVAL = self.report_interval\n        processor.UPGRADE_FROM = upgrade_from"
  },
  {
    "id" : "f25c371f-b744-4d9b-b13e-f4ac36e55fde",
    "prId" : 7529,
    "prUrl" : "https://github.com/apache/kafka/pull/7529#pullrequestreview-302987685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5237ca48-fc48-446e-9a5d-a93c6a594098",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Seems we are verifying processing twice: once here inside `maybe_upgrade_rolling_bounce_and_verify`, and once after `maybe_upgrade_rolling_bounce_and_verify` in `verify_processing`. Here we did the verify right after bouncing each node, and outside the `maybe_upgrade_rolling_bounce_and_verify` we just loop over them again and verify again. Is that intentional and necessary?",
        "createdAt" : "2019-10-17T01:16:14Z",
        "updatedAt" : "2019-10-17T02:39:12Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "626cc44d-6c46-49d6-bddc-83d7353e11b2",
        "parentId" : "5237ca48-fc48-446e-9a5d-a93c6a594098",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Yes, it's intentional.  The check inside the `maybe_upgrade_rolling_bounce_and_verify` is for validating the individual node resumes processing after it gets bounced.  The additional check outside `maybe_upgrade_rolling_bounce_and_verify` confirms that all nodes are continuing to process and that rebalancing has ceased.  I can remove the outside check if you insist.",
        "createdAt" : "2019-10-17T02:09:35Z",
        "updatedAt" : "2019-10-17T02:39:12Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "45258145-aaa0-4345-b07f-d4f3b8f71fa7",
        "parentId" : "5237ca48-fc48-446e-9a5d-a93c6a594098",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "That makes sense, let's keep it in that sense.\r\n\r\nEDIT: Actually, I'm wondering that if the `monitor` would always grep the same log4j entry in the outside verification or it always try to grep the new lines after the inner verification? If it's the first case, then the outside verification would always be redundant as we are doomed to just grep the same lines.",
        "createdAt" : "2019-10-17T02:13:08Z",
        "updatedAt" : "2019-10-17T02:39:12Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "e7d401e0-aaf1-4139-9b61-f0f111065707",
        "parentId" : "5237ca48-fc48-446e-9a5d-a93c6a594098",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "The external check uses a new `monitor` object which when it's created grabs an offset of the current number of bytes in the file.  The `monitor` only checks in the file from that point forward.  The issue you describe could happen if you were to re-use an existing monitor.",
        "createdAt" : "2019-10-17T02:50:10Z",
        "updatedAt" : "2019-10-17T03:43:06Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "cfc651fa-cc72-421a-90f9-4ad079cd4821",
        "parentId" : "5237ca48-fc48-446e-9a5d-a93c6a594098",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Fancy üëç ",
        "createdAt" : "2019-10-17T03:38:07Z",
        "updatedAt" : "2019-10-17T03:38:07Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce2e86b1297c78b52afff364eb8d667dd90b9f95",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +175,179 @@                                              processor.node.account))\n\n                # verify processing\n                verify_processing_msg = current_phase + self.processing_message\n                stdout_monitor.wait_until(verify_processing_msg,"
  },
  {
    "id" : "0e5e0667-6225-4714-9cbe-44efc730f605",
    "prId" : 7529,
    "prUrl" : "https://github.com/apache/kafka/pull/7529#pullrequestreview-302962576",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "916ac648-328e-4bdd-a52e-a0181f3ee4fd",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Hmm, on old versions, we do not have state listener and hence would not print `current_phase + self.running_state_msg`, how we would still pass here?",
        "createdAt" : "2019-10-17T01:19:58Z",
        "updatedAt" : "2019-10-17T02:39:12Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "5a6bd028-74f2-48ca-aca7-585bd58dbdc1",
        "parentId" : "916ac648-328e-4bdd-a52e-a0181f3ee4fd",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "At this point in the test, we've upgraded to the new version so we have a state listener.",
        "createdAt" : "2019-10-17T01:36:16Z",
        "updatedAt" : "2019-10-17T02:39:12Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce2e86b1297c78b52afff364eb8d667dd90b9f95",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +170,174 @@                # verify rebalanced into a running state\n                rebalance_msg = current_phase + self.running_state_msg\n                stdout_monitor.wait_until(rebalance_msg,\n                                          timeout_sec=60,\n                                          err_msg=\"Never saw '%s' message \" % rebalance_msg + str("
  }
]