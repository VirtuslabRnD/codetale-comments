[
  {
    "id" : "1223035c-1d8a-4d1d-9031-510341936d4b",
    "prId" : 7386,
    "prUrl" : "https://github.com/apache/kafka/pull/7386#pullrequestreview-296493811",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f200fd1-9f97-4cf3-92f9-447dee0aa348",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Why change here?",
        "createdAt" : "2019-10-02T18:40:36Z",
        "updatedAt" : "2019-10-06T23:53:51Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "7526c419-1d0f-48e1-ab93-fd2f36388a55",
        "parentId" : "3f200fd1-9f97-4cf3-92f9-447dee0aa348",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "The processor used here keeps track of the `numRecordsProcessed` and outputs this whenever it's a multiple of 100. It also resets in `init`, so the eos test watches for a rebalance and then looks for the `numRecordsProcessed` to hit 500 again, knowing it should have started over again from 0.\r\nBut the whole point of cooperative rebalancing is we may not have needed to revoke/reinitialize this task during a rebalance, and the counter may be reset after a rebalance. ",
        "createdAt" : "2019-10-02T20:07:22Z",
        "updatedAt" : "2019-10-06T23:53:51Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "f047cd9bea88a4ffc88ce2b4f82946d52202c539",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +160,164 @@    def wait_for_startup(self, monitor, processor):\n        self.wait_for(monitor, processor, \"StateChange: REBALANCING -> RUNNING\")\n        self.wait_for(monitor, processor, \"processed [0-9]* records from topic\")\n\n    def wait_for(self, monitor, processor, output):"
  }
]