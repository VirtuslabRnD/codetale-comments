[
  {
    "id" : "57628a9f-6514-487a-a362-b69f32f2af28",
    "prId" : 8938,
    "prUrl" : "https://github.com/apache/kafka/pull/8938#pullrequestreview-442537883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea973493-20fe-4d25-8cd7-dc38963c6de8",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "During a rolling bounce, we might see an old node try to read the changelog records of a new node, which would fail. All you have to do to recover is to continue upgrading, but we can't tolerate the failure in this system test. This is the exact same failure that we would see if we tried to downgrade.\r\n\r\nTo repair the non-downgradability of Streams (and hence allow rolling bounces to work without errors), we need to go back and release forward-compatible versions of older releases. For example, 2.5.1 and 2.4.2 would be such versions. I'll create a ticket to come back here and add the missing matrix coordinates once those versions are released. Additionally, when new versions are released, we should add them to the downgrade matrix and the rolling-bounce matrix to prevent this situation from arising again.",
        "createdAt" : "2020-07-01T18:10:02Z",
        "updatedAt" : "2020-07-01T19:49:48Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "0f7ce19d-add3-4b81-8356-fe001eb1d402",
        "parentId" : "ea973493-20fe-4d25-8cd7-dc38963c6de8",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "`All you have to do to recover is to continue upgrading, but we can't tolerate the failure in this system test. ` how this is handled now?",
        "createdAt" : "2020-07-01T19:34:16Z",
        "updatedAt" : "2020-07-01T19:49:48Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "cac85fb1-f2f2-44c0-81e4-b23e509c13db",
        "parentId" : "ea973493-20fe-4d25-8cd7-dc38963c6de8",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "When you say \"how is this handled\", do you mean in the system tests or in \"real life\"?\r\n\r\nI'm handling it in the system tests by not doing rolling bounces at all. If we do them, we'll see the test fail nondeterministically, when it just so happens that an old-version node tries to read a new-version record. Once we release 2.6.0, we'll be able to add a downgrade test from trunk to 2.6.0, and once we release 2.5.1, we can add a downgrade test from trunk to 2.5.1, and also one in the 2.6 branch from 2.6.x to 2.5.1.\r\n\r\nIn real life, you would see some of the old-versioned threads get exceptions and crash. But it wouldn't be a _huge_ deal, since you can just continue with the rolling bounce until there are no more old-versioned instances, at which point everything is fine. There would be no data corruption or anything.",
        "createdAt" : "2020-07-01T20:00:56Z",
        "updatedAt" : "2020-07-01T20:00:56Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "559eb55a-2d58-43cd-a85b-1616c0de5994",
        "parentId" : "ea973493-20fe-4d25-8cd7-dc38963c6de8",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I was asking about in system tests :) More specifically I'm wondering if we could separate the upgrade path which are \"rolling bouncible\" from others that are not, e.g. as two separate tests in our python code base. And this can also be used as a cross-reference for our upgrade docs.\r\n\r\nAnyways, sine for trunk / 2.7 we would only be rolling bouncible from 2.6 and not from others this is not a big point. We can leave it to another follow-up PR.",
        "createdAt" : "2020-07-01T22:44:04Z",
        "updatedAt" : "2020-07-01T22:44:05Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "0a8cf505-c81b-44ef-9dba-41d37af41123",
        "parentId" : "ea973493-20fe-4d25-8cd7-dc38963c6de8",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Ah, thanks for the clarification. Yes, I was thinking we would just add new matrices for both rolling-bounceable and downgradable versions. E.g., after the two pending releases, we'd also have:\r\n\r\n```\r\n@matrix(from=[2.5.1, 2.6.0], to=[DEV_VERSION], bounce_type=[full, rolling])\r\n@matrix(from=[DEV_VERSION], to=[2.5.1, 2.6.0], bounce_type=[full, rolling])\r\n```\r\n\r\n(just for illustrative purposes, we'd probably declare a variable to make it maintainable)",
        "createdAt" : "2020-07-02T01:49:43Z",
        "updatedAt" : "2020-07-02T01:49:43Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "18bd24cd-5e21-422b-a482-acbc086208b2",
        "parentId" : "ea973493-20fe-4d25-8cd7-dc38963c6de8",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Sounds great, thank you!!",
        "createdAt" : "2020-07-03T19:03:44Z",
        "updatedAt" : "2020-07-03T19:03:45Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0163c8023d3b9fc61df35c0428269ca2752e9e6f",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +51,55 @@            self.kafka.start_node(node)\n\n    @matrix(from_version=smoke_test_versions, to_version=dev_version, bounce_type=[\"full\"])\n    def test_app_upgrade(self, from_version, to_version, bounce_type):\n        \"\"\""
  },
  {
    "id" : "bd551cee-0037-414d-92aa-97d675687c98",
    "prId" : 8993,
    "prUrl" : "https://github.com/apache/kafka/pull/8993#pullrequestreview-444984742",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65a53c86-2405-47d4-9318-663124170f0c",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Note, in 2.5, I was able to add 2.0 and 2.1 to the upgrade matrix. This means we did break upgradability from anything 2.1- to 2.6+ in the 2.6 release. People would have to upgrade to 2.5 first and then upgrade to 2.6.\r\n\r\nShould we block the release and fix this for 2.6.0?",
        "createdAt" : "2020-07-08T15:44:24Z",
        "updatedAt" : "2020-07-10T14:57:01Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "9cabc370-c5dd-4dbb-ab89-d9e441d21890",
        "parentId" : "65a53c86-2405-47d4-9318-663124170f0c",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Actually, I just tried 2.1 and 2.0 again (with a full bounce now, instead of a rolling bounce), and it works on 2.6/trunk. So, it seems only the rolling bounce path has been broken.",
        "createdAt" : "2020-07-08T17:31:48Z",
        "updatedAt" : "2020-07-10T14:57:01Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "c87801aa970f960a9c072fbc03b2a2d2a19d7a30",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +23,27 @@from kafkatest.version import LATEST_2_0, LATEST_2_1, LATEST_2_2, LATEST_2_3, LATEST_2_4, LATEST_2_5, DEV_VERSION, KafkaVersion\n\nsmoke_test_versions = [str(LATEST_2_0), str(LATEST_2_1), str(LATEST_2_2), str(LATEST_2_3), str(LATEST_2_4), str(LATEST_2_5)]\ndev_version = [str(DEV_VERSION)]\n"
  }
]