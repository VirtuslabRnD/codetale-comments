[
  {
    "id" : "d5c753ce-6a5d-4ad5-9802-4402561c2cae",
    "prId" : 3329,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3329#pullrequestreview-488256408",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f601b27-4198-44b5-abf9-549306f917cb",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Why do we need to mock this function across the test cases?",
        "createdAt" : "2020-09-15T00:02:27Z",
        "updatedAt" : "2020-09-15T00:17:55Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "b829c7b8-494f-4ea7-aa63-955dc9ff9ec3",
        "parentId" : "0f601b27-4198-44b5-abf9-549306f917cb",
        "authorId" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "body" : "Because these tests also mock the run object and the `get_run` function, the call to `_get_store().update_run_info` added in this PR would error out because the run doesn't actually exist (in the store).",
        "createdAt" : "2020-09-15T00:05:36Z",
        "updatedAt" : "2020-09-15T00:17:55Z",
        "lastEditedBy" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "tags" : [
        ]
      },
      {
        "id" : "fe9052e2-2fb2-412a-bacc-9cabc4f34bea",
        "parentId" : "0f601b27-4198-44b5-abf9-549306f917cb",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Got it!",
        "createdAt" : "2020-09-15T01:15:30Z",
        "updatedAt" : "2020-09-15T01:15:30Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "19d2fd80c8ddea04114c6e24b8c994f19347bd6d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +388,392 @@\n    run_id = uuid.uuid4().hex\n    mock_get_store = mock.patch(\"mlflow.tracking.fluent._get_store\")\n\n    with mock_get_store, mock.patch.object(MlflowClient, \"get_run\", return_value=mock_run):"
  },
  {
    "id" : "b017799a-717e-484a-a80a-4f0a281ef67a",
    "prId" : 3329,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3329#pullrequestreview-488235997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2b5cf04-3952-4b9b-adca-20937575c8cd",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Can we test that the end time seems reasonable once we end the run again? (e.g., new end time > old end time ?)",
        "createdAt" : "2020-09-15T00:02:45Z",
        "updatedAt" : "2020-09-15T00:17:55Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "e9c040b2-870d-45a5-b70f-5393de3321e2",
        "parentId" : "b2b5cf04-3952-4b9b-adca-20937575c8cd",
        "authorId" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "body" : "Done!",
        "createdAt" : "2020-09-15T00:09:20Z",
        "updatedAt" : "2020-09-15T00:17:55Z",
        "lastEditedBy" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "tags" : [
        ]
      }
    ],
    "commit" : "19d2fd80c8ddea04114c6e24b8c994f19347bd6d",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +443,447 @@    assert MlflowClient().get_run(run_id).info.status == RunStatus.to_string(RunStatus.FINISHED)\n    restarted_run = mlflow.start_run(run_id)\n    assert restarted_run.info.status == RunStatus.to_string(RunStatus.RUNNING)\n\n"
  },
  {
    "id" : "ff5bcbb0-8d7f-438d-af8c-bedaa22c3544",
    "prId" : 3183,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3183#pullrequestreview-462166688",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83f031ea-7df4-4d75-a39e-e073a5c18528",
        "parentId" : null,
        "authorId" : "cdb19054-43ec-4ffc-a461-00fd844e66f9",
        "body" : "I don't like the changes in this test, as I don't feel like they are actually testing anything really, at least not really what the name implies, but I couldn't figure out a good way to validate a lambda short of what I added, which only validates that it was a callable, not anything about it. If you have any ideas of how to improve this please let me know.",
        "createdAt" : "2020-08-03T21:23:08Z",
        "updatedAt" : "2020-08-06T17:46:33Z",
        "lastEditedBy" : "cdb19054-43ec-4ffc-a461-00fd844e66f9",
        "tags" : [
        ]
      },
      {
        "id" : "87eddddc-00cf-47d7-8847-dcc2a0616457",
        "parentId" : "83f031ea-7df4-4d75-a39e-e073a5c18528",
        "authorId" : "240b730c-4fc4-4801-892a-18195816221b",
        "body" : "Wow you're right, this is a complicated test to write. \r\n\r\nI know this is lame, but what do you think of just asserting that `_get_experiment_id` was called? I think this does validate the behavior the test is trying to verify. (If you decide to do this, you should also update the docstring to ` When no experiment ID is specified, it should try to get the implicit one`.)",
        "createdAt" : "2020-08-05T05:43:37Z",
        "updatedAt" : "2020-08-06T17:46:33Z",
        "lastEditedBy" : "240b730c-4fc4-4801-892a-18195816221b",
        "tags" : [
        ]
      },
      {
        "id" : "c14b43ed-1fdc-4332-a02e-e585da9e2219",
        "parentId" : "83f031ea-7df4-4d75-a39e-e073a5c18528",
        "authorId" : "240b730c-4fc4-4801-892a-18195816221b",
        "body" : "IMO you should actually remove this test, since it's not really testing anything except that the lambda gets called. ",
        "createdAt" : "2020-08-06T03:44:38Z",
        "updatedAt" : "2020-08-06T17:46:33Z",
        "lastEditedBy" : "240b730c-4fc4-4801-892a-18195816221b",
        "tags" : [
        ]
      }
    ],
    "commit" : "44d6d841f4c074f80d624c5d03cf7ec9137de1d9",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +475,479 @@    experiment_id_patch = mock.patch(\"mlflow.tracking.fluent._get_experiment_id\",\n                                     return_value=mock_experiment_id)\n    get_paginated_runs_patch = mock.patch('mlflow.tracking.fluent._paginate', return_value=[])\n    with experiment_id_patch, get_paginated_runs_patch:\n        search_runs()"
  },
  {
    "id" : "f6b98302-98ff-4531-b6e6-56649fd3d7fb",
    "prId" : 923,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/923#pullrequestreview-208683035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca006678-1d6d-4810-8663-02e50cfee179",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Btw, these tests look quite similar to #913. May not need both sets for the DB integration, or may want to find the overlaps.",
        "createdAt" : "2019-02-27T18:13:32Z",
        "updatedAt" : "2019-02-27T23:41:29Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "593ecba7-6ed1-4b8f-a4d4-cfc2e6e360cd",
        "parentId" : "ca006678-1d6d-4810-8663-02e50cfee179",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Actually, I guess it doesn't quite overlap, as this tests specifically for the autodetection/overriding behavior.",
        "createdAt" : "2019-02-27T18:14:22Z",
        "updatedAt" : "2019-02-27T23:41:29Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6830926eea601ceffe0960ad8b684872536187c",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +88,92 @@\n\ndef test_get_experiment_id_in_databricks_detects_notebook_id_by_default():\n    notebook_id = 768\n"
  },
  {
    "id" : "b8d54af9-8d94-41be-a3ad-769bbe51b604",
    "prId" : 913,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/913#pullrequestreview-208125721",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e103ee0-e5d5-477c-9fd6-ff0effc10247",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "These tests do confirm that we call the appropriate functions and add appropriate labels/tags, but won't they all break after you refactor the underling implementation such that, for example, `mlflow.tracking.fluent._get_source_name`, but may rather be embedded in some sort of DefaultRunContextProvider?\r\n\r\nIf we tested the expected outcome (e.g., that source_name should be 'test_fluent'), then that would be robust to internal refactorings.",
        "createdAt" : "2019-02-26T16:01:21Z",
        "updatedAt" : "2019-02-28T14:01:12Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "5aef3c9e-40b6-466f-836a-f784d400427a",
        "parentId" : "8e103ee0-e5d5-477c-9fd6-ff0effc10247",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Here's a sketch of the databricks test updated with this approach:\r\nhttps://github.com/facultyai/mlflow/compare/fluent-start-run-tests...aarondav:fluent-start-run-tests\r\n\r\nUpside: this test would demonstrate that your proposed refactoring in fact continues to work. Otherwise, it's possible that for example you copy `mlflow.tracking.fluent.get_notebook_path`, forget to delete the old code path, and still hae the test pass.\r\n\r\nDownside: this becomes less of a unit test and more of a partial integration test, as it has to reach into databricks_utils.py's internal structure. I think this is somewhat reasonable since we're trying to avoid breaking the existing behavior, but ideally it would've been factored out into a ContextProvider interface in the first place so we don't have to special-case the test (but that's what we're moving towards anyway).",
        "createdAt" : "2019-02-26T16:26:09Z",
        "updatedAt" : "2019-02-28T14:01:12Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "464bb353-8a82-40f6-9044-a09100ace4d3",
        "parentId" : "8e103ee0-e5d5-477c-9fd6-ff0effc10247",
        "authorId" : "da2a90d1-571b-4818-a352-3f0fd14e245e",
        "body" : "Thanks for the comments - what you say about being robust to change is definitely relevant, though I have in mind to update these tests alongside subsequent refactoring in a way that provided confidence that the existing logic is retained.\r\n\r\nWhat I have in mind is:\r\n\r\n1. Move the helpers mocked in these tests (e.g. `_get_source_name`) to `mlflow.tracking.context` alongside the new `ContextProvider` logic and update the tests added in this PR to mock the new locations.\r\n2. Verify that the tests added in this PR still pass.\r\n3. Implement the context providers and use them in `mlflow.tracking.fluent.start_run`.\r\n4. Verify that the tests added in the PR still pass - this will then check that the integration of `start_run` with the new context provider logic results in the same mapping of `start_run` inputs to `MlflowClient.create_run` inputs as currently.\r\n5. With the refactoring complete, these tests can be revised to match the new code structure better. For example, some of the helpers might get merged into methods of context providers and we might want to test them directly and use mock context providers to test the new logic in `start_run`.\r\n\r\nIn general, I view the tests in this PR in part as a temporary scaffold so I don't bring the house down while refactoring.\r\n\r\nWhat do you think?",
        "createdAt" : "2019-02-26T18:19:49Z",
        "updatedAt" : "2019-02-28T14:01:12Z",
        "lastEditedBy" : "da2a90d1-571b-4818-a352-3f0fd14e245e",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca3f1b0671e479974bc98db41df1341f16e9a5bf",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +149,153 @@def test_start_run_defaults(empty_active_run_stack):\n\n    mock_experiment_id = mock.Mock()\n    experiment_id_patch = mock.patch(\n        \"mlflow.tracking.fluent._get_experiment_id\", return_value=mock_experiment_id"
  },
  {
    "id" : "13c71fa2-b1d4-4776-a531-02d835a22233",
    "prId" : 889,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/889#pullrequestreview-203468249",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bc3c485-2ede-4f57-83a7-41df124956a7",
        "parentId" : null,
        "authorId" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "body" : "Curious why this line is necessary. If it's to isolate all of the different test cases from each other, it'd be awesome to have something more explicit in intent which we can use for all test cases.",
        "createdAt" : "2019-02-13T21:31:56Z",
        "updatedAt" : "2019-02-13T22:00:33Z",
        "lastEditedBy" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "tags" : [
        ]
      },
      {
        "id" : "cb7682c3-01a3-4c65-96bf-f66cbc0d3a62",
        "parentId" : "4bc3c485-2ede-4f57-83a7-41df124956a7",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Because this part of the test is creating a new experiment. I could mock store to create and return experiments or let it create.",
        "createdAt" : "2019-02-13T21:55:11Z",
        "updatedAt" : "2019-02-13T22:00:33Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a749e285d430b7d0df1d352ef7bad5e35cd18c1",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +40,44 @@\n    # set only name\n    with TempDir(chdr=True):\n        name = \"random experiment %d\" % random.randint(1, 1e6)\n        exp_id = mlflow.create_experiment(name)"
  }
]