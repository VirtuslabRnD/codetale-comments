[
  {
    "id" : "ecbf7854-a439-476e-b60a-495be69ea2b1",
    "prId" : 1775,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1775#pullrequestreview-279307161",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4df4299c-9dab-4d81-9a2b-48ba759bfa43",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Also added an e2e test for GetExperiment",
        "createdAt" : "2019-08-24T18:38:56Z",
        "updatedAt" : "2019-09-13T21:31:41Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5b83e8e83e583120edefbe3b1251878f29bc546",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +469,473 @@\n\ndef test_get_experiment(mlflow_client, backend_store_uri):\n    name = 'test_get_experiment'\n    experiment_id = mlflow_client.create_experiment(name)"
  },
  {
    "id" : "df525a5b-c793-46f3-8269-4b32dd0d7cba",
    "prId" : 1775,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1775#pullrequestreview-285842545",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c00030cf-f23f-466c-ba4e-e5fee857290b",
        "parentId" : null,
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "Should we also check that the client did not have to fallback on list experiments?",
        "createdAt" : "2019-09-09T21:05:51Z",
        "updatedAt" : "2019-09-13T21:31:41Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      },
      {
        "id" : "ee13c64d-1575-423a-a80d-3f02ad4455f5",
        "parentId" : "c00030cf-f23f-466c-ba4e-e5fee857290b",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Yep good call, added a test for this. We also actually verify this in https://github.com/mlflow/mlflow/pull/1775/files#diff-339110c4cf69239298fe72c02f0d2cc6R279 (we verify that we only needed a single GetExperimentByName API request to get the experiment), although that test mocks out HTTP responses, so having the e2e test is definitely better.",
        "createdAt" : "2019-09-09T23:50:51Z",
        "updatedAt" : "2019-09-13T21:31:41Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5b83e8e83e583120edefbe3b1251878f29bc546",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +462,466 @@    name = 'test_get_experiment_by_name'\n    experiment_id = mlflow_client.create_experiment(name)\n    res = mlflow_client.get_experiment_by_name(name)\n    assert res.experiment_id == experiment_id\n    assert res.name == name"
  },
  {
    "id" : "772f74df-4435-4537-bb1d-16f1c66e594d",
    "prId" : 1573,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1573#pullrequestreview-262538622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "adfc2f50-16ce-41a8-ba44-87c34b45f858",
        "parentId" : null,
        "authorId" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "body" : "Extra credit but could we add a test verifying that @max-allen-db's panda converter handles the NaNs correctly? https://github.com/mlflow/mlflow/blob/master/tests/tracking/test_fluent.py#L373",
        "createdAt" : "2019-07-12T00:49:00Z",
        "updatedAt" : "2019-07-17T01:21:12Z",
        "lastEditedBy" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "tags" : [
        ]
      },
      {
        "id" : "567b9173-dc42-47a5-bb4e-7c36c89cbf59",
        "parentId" : "adfc2f50-16ce-41a8-ba44-87c34b45f858",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "I'd rather not add anything more to this PR and get this merged in time for the release. Can we add it as a followup?",
        "createdAt" : "2019-07-16T16:28:09Z",
        "updatedAt" : "2019-07-17T01:21:12Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      }
    ],
    "commit" : "aaaf311055edf0215c6c512f6610a1ddee1fcc96",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +298,302 @@    assert run.data.metrics.get('metric') == 123.456\n    import math\n    assert math.isnan(run.data.metrics.get('nan_metric'))\n    assert run.data.metrics.get('inf_metric') >= 1.7976931348623157e308\n    assert run.data.metrics.get('-inf_metric') <= -1.7976931348623157e308"
  },
  {
    "id" : "e45b10a2-5301-4f92-be52-43ade0b32f0b",
    "prId" : 1332,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1332#pullrequestreview-242410851",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9c092dd-7a6e-455a-8100-734bda22796b",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "haha!",
        "createdAt" : "2019-05-28T00:44:18Z",
        "updatedAt" : "2019-05-31T17:33:02Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c2e31ab59548a6c86cf4bc523036669caa9b8b8",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +366,370 @@\ndef test_artifacts(mlflow_client):\n    experiment_id = mlflow_client.create_experiment('Art In Fact')\n    experiment_info = mlflow_client.get_experiment(experiment_id)\n    assert experiment_info.artifact_location.startswith("
  },
  {
    "id" : "b983b58e-ca69-4efb-99d6-b1225edf6c78",
    "prId" : 1332,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1332#pullrequestreview-244216563",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "364b7a67-80c2-4f2a-b28a-dc7c2fe44c2c",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "@aarondav I augmented this test to verify that the artifact path ends with the experiment ID",
        "createdAt" : "2019-05-31T09:31:57Z",
        "updatedAt" : "2019-05-31T17:33:02Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c2e31ab59548a6c86cf4bc523036669caa9b8b8",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +371,375 @@        path_to_local_file_uri(SUITE_ARTIFACT_ROOT_DIR))\n    artifact_path = urllib.parse.urlparse(experiment_info.artifact_location).path\n    assert posixpath.split(artifact_path)[-1] == experiment_id\n\n    created_run = mlflow_client.create_run(experiment_id)"
  },
  {
    "id" : "c8607a52-63df-4baf-b008-9bb6ff016f44",
    "prId" : 1187,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1187#pullrequestreview-232846108",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ed88e4d-0b75-497d-ba77-653583764b83",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Should we still assert on `run.info.run_uuid` here? It is a little scary to have no tests that verify that `run.info.run_uuid` is still accessible, although looking at the code change to RunInfo, it should be (i.e. the code change is pretty simple). Adding such an assert here would give us e2e coverage that `run.info.run_uuid` is accessible when using the OSS REST client against a server running either the FileStore or the SQLAlchemyStore.",
        "createdAt" : "2019-05-02T05:28:47Z",
        "updatedAt" : "2019-05-02T18:19:24Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "8330dbc3-9a72-4fd8-9069-bc34bd633ec9",
        "parentId" : "3ed88e4d-0b75-497d-ba77-653583764b83",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Open to pushback here, since we'd just delete the `run.info.run_uuid` tests eventually anyways - maybe manual testing is sufficient.",
        "createdAt" : "2019-05-02T05:30:27Z",
        "updatedAt" : "2019-05-02T18:19:24Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "129a249406c6420c2d5291a46e6f86543368dacf",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +228,232 @@\n    run = mlflow_client.get_run(run_id)\n    assert run.info.run_id == run_id\n    assert run.info.run_uuid == run_id\n    assert run.info.experiment_id == experiment_id"
  },
  {
    "id" : "7e37108e-b079-4335-ac1a-8888b35a508c",
    "prId" : 1171,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1171#pullrequestreview-233705495",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7156f504-5a1b-4b7b-859e-71ac96408ea6",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "why was this change required? is it more platform independent?",
        "createdAt" : "2019-05-03T22:10:46Z",
        "updatedAt" : "2019-05-05T06:28:02Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "6b72977c-2454-42bf-b2a0-b8ff4faeecd2",
        "parentId" : "7156f504-5a1b-4b7b-859e-71ac96408ea6",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "The multiprocessing on windows is weird. I did not find a way how to start a Flask server using the Process abstraction. I had to use Popen instead so the process object is different. unfortunately python2 does not have a timeout argument in wait() and I did not find other way of fetching the return code other then calling wait(). And since we want to avoid a hang, the wait is called from a new thread.",
        "createdAt" : "2019-05-03T23:27:23Z",
        "updatedAt" : "2019-05-05T06:28:02Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      }
    ],
    "commit" : "23c61ed20a1e1523438f00290d0afb8fe4b4c2ab",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +54,58 @@    start_time = time.time()\n\n    def wait():\n        process.wait()\n"
  },
  {
    "id" : "23ff6ff4-0fef-4431-a58e-6dba92df589a",
    "prId" : 1167,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1167#pullrequestreview-230408886",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc66a025-2e73-42f8-b743-5346cbadc18c",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Use this helper function to run CLI commands instead of CLIRunner - the helper just wraps CLIRunner & verifies the CLI command exited with code 0 (previously we didn't verify the exit code of CLI commands)",
        "createdAt" : "2019-04-25T00:09:24Z",
        "updatedAt" : "2019-04-26T23:49:55Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "477a087d5e2b48ed98d5089d8d516a99680d57a1",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +22,26 @@from mlflow.utils.mlflow_tags import MLFLOW_RUN_NAME, MLFLOW_PARENT_RUN_ID, MLFLOW_SOURCE_TYPE, \\\n    MLFLOW_SOURCE_NAME, MLFLOW_PROJECT_ENTRY_POINT, MLFLOW_GIT_COMMIT\nfrom tests.integration.utils import invoke_cli_runner\n\nLOCALHOST = '127.0.0.1'"
  },
  {
    "id" : "e0ce4a14-efc8-40dd-8c93-0471335d452f",
    "prId" : 1143,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1143#pullrequestreview-228854137",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "746a51b1-f320-45f3-84d6-c97f0ddc58a6",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Test logging a metric with a zero & non-zero step using `MlflowClient.log_metric` against a remote tracking server.",
        "createdAt" : "2019-04-19T23:50:57Z",
        "updatedAt" : "2019-04-22T20:33:31Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e35d0446aaade7f0c739b015aaa3bb9c13c807c",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +225,229 @@    created_run = mlflow_client.create_run(experiment_id)\n    run_id = created_run.info.run_uuid\n    mlflow_client.log_metric(run_id, key='metric', value=123.456, timestamp=789, step=2)\n    mlflow_client.log_metric(run_id, key='stepless-metric', value=987.654, timestamp=321)\n    mlflow_client.log_param(run_id, 'param', 'value')"
  },
  {
    "id" : "4248f08a-6da4-4eae-a68f-9d4044cacf73",
    "prId" : 1143,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1143#pullrequestreview-228854326",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fdf8213-2d6b-4c5b-a99a-2629be568cc5",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Test logging a metric with a non-zero step via the `MlflowClient.log_batch` API (this doesn't actually test new functionality added by this PR - the same test would have passed after we merged the code changes in #1142)",
        "createdAt" : "2019-04-19T23:52:34Z",
        "updatedAt" : "2019-04-22T20:33:06Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e35d0446aaade7f0c739b015aaa3bb9c13c807c",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +256,260 @@    created_run = mlflow_client.create_run(experiment_id)\n    run_id = created_run.info.run_uuid\n    mlflow_client.log_batch(\n        run_id=run_id,\n        metrics=[Metric(\"metric\", 123.456, 789, 3)], params=[Param(\"param\", \"value\")],"
  },
  {
    "id" : "3955746e-d06c-4fa9-b9f6-748f4ae72f18",
    "prId" : 679,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/679#pullrequestreview-170012639",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a102209-bfed-4f66-a521-7393cca4b46e",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "At initialization, the tracking server specifies a file store directory that already exists. As a result, a default experiment is not created automatically.",
        "createdAt" : "2018-10-30T21:39:18Z",
        "updatedAt" : "2018-10-30T21:56:33Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f47929f55110ee468c6d60e7b2435a99a794231",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +120,124 @@\n    experiments = mlflow_client.list_experiments()\n    assert set([e.name for e in experiments]) == {'My Experiment'}\n\n"
  }
]