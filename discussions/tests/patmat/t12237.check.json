[
  {
    "id" : "b4da2b4c-29d3-49f4-acd5-0373db4cfcb1",
    "prId" : 11528,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11528#pullrequestreview-597935546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd6a4eba-9f2a-46a0-b2c4-c9f2313c0f5c",
        "parentId" : null,
        "authorId" : "5f907c64-1898-4d74-945b-1f630a7406b9",
        "body" : "Is this the right expected result?  What does `PathAndQuery./(_, _)` mean? Because the first case is matching values that are `PathAndQuery./`.  Similarly `PathAndQuery.:&(_, PathAndQuery.===(_, _))` and `PathAndQuery.+?(_, PathAndQuery.===(_, _))`.  I don't understand what the check file is asserting.",
        "createdAt" : "2021-02-24T17:13:32Z",
        "updatedAt" : "2021-02-24T17:13:32Z",
        "lastEditedBy" : "5f907c64-1898-4d74-945b-1f630a7406b9",
        "tags" : [
        ]
      },
      {
        "id" : "91478577-5627-4b1d-895d-d27cca3d0a3b",
        "parentId" : "bd6a4eba-9f2a-46a0-b2c4-c9f2313c0f5c",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Yes, it's the correct expect file, `PathAndQuery./(_, _)` means that pattern is not exhaustive. The test is to defend against compiler hangs.",
        "createdAt" : "2021-02-24T17:22:03Z",
        "updatedAt" : "2021-02-24T17:22:03Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "af977864-d85f-4001-ba8b-6d9645bc4c77",
        "parentId" : "bd6a4eba-9f2a-46a0-b2c4-c9f2313c0f5c",
        "authorId" : "5f907c64-1898-4d74-945b-1f630a7406b9",
        "body" : "> `PathAndQuery./(_, _)` means that pattern is not exhaustive.\r\n\r\nI see.  (Perhaps reporting `PathAndQuery.:&(_, _)` and `PathAndQuery.+?(_, _)` might be more uniform?)\r\n\r\nI guess the Scala 3 checker doesn't try to give good counter-examples like Scala 2, which tries to do something like `Root / \"page\" / x forSome x != \"1\"`?",
        "createdAt" : "2021-02-24T18:38:30Z",
        "updatedAt" : "2021-02-24T18:38:30Z",
        "lastEditedBy" : "5f907c64-1898-4d74-945b-1f630a7406b9",
        "tags" : [
        ]
      },
      {
        "id" : "d6c6c4c2-9348-4638-b3ec-41f1cec83b1f",
        "parentId" : "bd6a4eba-9f2a-46a0-b2c4-c9f2313c0f5c",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "We would like to have refined counter-examples as in Scala 2. However, we could not figure out how to make it principled. For example, given the following example:\r\n\r\n```Scala\r\nobject Even {\r\n  def unapply(x: Int): Option[Int] = ???\r\n}\r\n\r\nclass Test {\r\n  def foo(x: Option[Option[Int]]): Unit =\r\n    x match {\r\n      case Some(Some(5)) =>\r\n      case Some(Some(Even(10))) =>\r\n      case None =>\r\n    }\r\n}\r\n```\r\n\r\nIt's unclear how to handle extractors in the warnings. Even if it's possible to be more principled, there's the worry that the message gets messy, thus difficult to read.\r\n\r\nMeanwhile, even with refined counter-examples, users still need to check the existing patterns.  Due to the considerations, we only show general counter examples. ",
        "createdAt" : "2021-02-24T19:02:26Z",
        "updatedAt" : "2021-02-24T19:02:27Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "36375a3d-f9ee-49b7-882f-f1e4eb31a351",
        "parentId" : "bd6a4eba-9f2a-46a0-b2c4-c9f2313c0f5c",
        "authorId" : "5f907c64-1898-4d74-945b-1f630a7406b9",
        "body" : "Yeah, Scala 2's counter-example generation definitely doesn't handle extractors: it's all field based (for case classes) so it has no chance - it needs to be revisited.  But it does a good job for case classes I say.  It seems to be to be a good thing to generalise case class's unapply/extraction with the \"product match\" extractors, but it seems like discarding that knowledge for counter-example generation is lossy and thus a shame.",
        "createdAt" : "2021-02-24T21:07:35Z",
        "updatedAt" : "2021-02-24T21:07:36Z",
        "lastEditedBy" : "5f907c64-1898-4d74-945b-1f630a7406b9",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd8c6404c8db1360e15ff2269b651b289551d525",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@21: Pattern Match Exhaustivity: Root, PathAndQuery./(_, _), PathAndQuery.===(_, _), PathAndQuery.:&(_, PathAndQuery.===(_, _)), PathAndQuery.+?(_, PathAndQuery.===(_, _))"
  }
]