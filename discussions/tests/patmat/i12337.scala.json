[
  {
    "id" : "a5eba062-453b-4034-900d-819f77255e5d",
    "prId" : 12377,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/12377#pullrequestreview-654982143",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93836d80-f1a3-4067-a2b0-72cdf49a176d",
        "parentId" : null,
        "authorId" : "942432b4-7c08-40a4-a3b9-bf358c70a414",
        "body" : "Can one of these `case object` be `case class` instead to make sure it works for `case class` as well?\r\n\r\ne.g.)\r\n```scala\r\nsealed trait Status\r\nobject Status {\r\n  case class Active(since: Int) extends Status\r\n  case object Inactive extends Status\r\n}\r\n\r\ncase class Foo(status: Status)\r\ndef bar(foo: Foo): Unit = foo match {\r\n  case Foo(Status.Active(2000)) =>\r\n    println(\"active since 2000\")\r\n}\r\n// Expected:\r\n// warning: match may not be exhaustive.\r\n// It would fail on the following inputs: Foo(Active((x: Int forSome x not in 2000))), Foo(Inactive)\r\n// def bar(foo: Foo): Unit = foo match {\r\n```\r\n",
        "createdAt" : "2021-05-08T10:41:31Z",
        "updatedAt" : "2021-05-10T08:25:44Z",
        "lastEditedBy" : "942432b4-7c08-40a4-a3b9-bf358c70a414",
        "tags" : [
        ]
      },
      {
        "id" : "0cc1e8d6-4ef9-4fa9-894b-be34c0025f98",
        "parentId" : "93836d80-f1a3-4067-a2b0-72cdf49a176d",
        "authorId" : "942432b4-7c08-40a4-a3b9-bf358c70a414",
        "body" : "Or probably adding separate cases for `case class` and `case object` might be better?\r\n\r\ne.g.)\r\n```scala\r\nsealed trait Status\r\nobject Status {\r\n  case class Active(since: Int) extends Status\r\n  case object Inactive extends Status\r\n}\r\n\r\ncase class Foo(status: Status)\r\ndef bar(foo: Foo): Unit = foo match {\r\n  case Foo(Status.Active(since)) =>\r\n    println(s\"active since $since\")\r\n}\r\n// Expected:\r\n// warning: match may not be exhaustive.\r\n// It would fail on the following input: Foo(Inactive)\r\n// def bar(foo: Foo): Unit = foo match {\r\n\r\ndef baz(foo: Foo): Unit = foo match {\r\n  case Foo(Status.Active(2000)) =>\r\n    println(\"active since 2000\")\r\n  case Foo(Status.Inactive) =>\r\n    println(\"inactive\")\r\n}\r\n// Expected:\r\n// warning: match may not be exhaustive.\r\n// It would fail on the following input: Foo(Active((x: Int forSome x not in 2000)))\r\n// def baz(foo: Foo): Unit = foo match {\r\n```",
        "createdAt" : "2021-05-08T10:45:53Z",
        "updatedAt" : "2021-05-10T08:25:44Z",
        "lastEditedBy" : "942432b4-7c08-40a4-a3b9-bf358c70a414",
        "tags" : [
        ]
      }
    ],
    "commit" : "682a596454d9a0069e29b65b22c1616755e5c318",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2,6 @@object Status {\n  case class Active(since: Int) extends Status\n  case object Inactive extends Status\n}\n"
  }
]