[
  {
    "id" : "80326928-8752-4074-93d5-b5ca02c9039f",
    "prId" : 5532,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5532#pullrequestreview-179687180",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c22e9710-8f89-472d-b5d0-8ba616d08c35",
        "parentId" : null,
        "authorId" : "98bdc06d-7937-462c-9d62-1f850e7819aa",
        "body" : "So would it be possible to use `args.unseal.underlying` and leave `args` not by-name?",
        "createdAt" : "2018-11-29T09:00:07Z",
        "updatedAt" : "2018-11-29T09:00:08Z",
        "lastEditedBy" : "98bdc06d-7937-462c-9d62-1f850e7819aa",
        "tags" : [
        ]
      },
      {
        "id" : "d06a580d-5d5a-48b3-b6d4-48349476185a",
        "parentId" : "c22e9710-8f89-472d-b5d0-8ba616d08c35",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Yes. I copied this basic implementation from an old version of the xml interpolator. There are many other improvements that can be done. This is just a simple example of one way to do it.",
        "createdAt" : "2018-11-29T09:07:29Z",
        "updatedAt" : "2018-11-29T09:07:30Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2b7aadc5387b2b5cfb5fa55a0955752ef3c753e",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +44,48 @@\n    // [a0, ...]: Any*\n    val Term.Typed(Term.Repeated(allArgs), _) = args.unseal.underlyingArgument\n\n    for ((arg, part) <- allArgs.zip(parts.tail)) {"
  },
  {
    "id" : "3ac6f749-a886-45b2-9fcb-723319bff17d",
    "prId" : 5532,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5532#pullrequestreview-180744829",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a1d9996-ee4b-4ce2-ac23-ca5508503aac",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "For later: better error message with positions. ",
        "createdAt" : "2018-12-03T12:09:53Z",
        "updatedAt" : "2018-12-03T12:12:15Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "ad40f388-e939-4098-8a00-b854df7718d4",
        "parentId" : "5a1d9996-ee4b-4ce2-ac23-ca5508503aac",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "This is just an example for the student to start",
        "createdAt" : "2018-12-03T12:38:14Z",
        "updatedAt" : "2018-12-03T12:38:14Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2b7aadc5387b2b5cfb5fa55a0955752ef3c753e",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +40,44 @@        values.collect { case Term.Literal(Constant.String(value)) => value }\n      case tree =>\n        throw new QuoteError(s\"String literal expected, but ${tree.show} found\")\n    }\n"
  },
  {
    "id" : "ffb9138f-672c-4ab0-99bf-18bf8b2016c4",
    "prId" : 5532,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5532#pullrequestreview-180745079",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "563172ed-efdd-43c8-9dff-5903819a2b06",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Error message instead?",
        "createdAt" : "2018-12-03T12:10:12Z",
        "updatedAt" : "2018-12-03T12:12:15Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "e6d9c635-ce11-4166-a10a-42195093570e",
        "parentId" : "563172ed-efdd-43c8-9dff-5903819a2b06",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "This is just an example for the student to start. It is a simple way to see the output.",
        "createdAt" : "2018-12-03T12:38:56Z",
        "updatedAt" : "2018-12-03T12:38:56Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2b7aadc5387b2b5cfb5fa55a0955752ef3c753e",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +48,52 @@    for ((arg, part) <- allArgs.zip(parts.tail)) {\n      if (part.startsWith(\"%d\") && !(arg.tpe <:< definitions.IntType)) {\n        return '(s\"`${~arg.showCode.toExpr}` is not of type Int\")\n      }\n"
  },
  {
    "id" : "1f34a0a7-91c1-40a9-93bf-3905aa8b64b8",
    "prId" : 5532,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5532#pullrequestreview-180735013",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f348ba40-ef66-4843-8879-d4db35dd5fe9",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Just to confirm: I remember some time ago, we need to use `=> StringContext`. I guess with `underlyingArgument` this is no longer required. ",
        "createdAt" : "2018-12-03T12:11:21Z",
        "updatedAt" : "2018-12-03T12:12:15Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2b7aadc5387b2b5cfb5fa55a0955752ef3c753e",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +6,10 @@object FQuote {\n\n  implicit class SCOps(ctx: StringContext) {\n    inline def ff(args: => Any*): String = ~impl('(this), '(args))\n  }"
  },
  {
    "id" : "f5c664e0-8f36-41d6-aff5-b3e97c6ce52b",
    "prId" : 5532,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5532#pullrequestreview-180735013",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b642ff63-3dff-436f-835d-0591ed659493",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "For later: it seems the name `underlyingArgument` does not make sense here, as it's a receiver, not argument.",
        "createdAt" : "2018-12-03T12:12:09Z",
        "updatedAt" : "2018-12-03T12:12:15Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2b7aadc5387b2b5cfb5fa55a0955752ef3c753e",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@\n    // FQuote.SCOps(StringContext.apply([p0, ...]: String*)\n    val parts = receiver.unseal.underlyingArgument match {\n      case Term.Apply(conv, List(Term.Apply(fun, List(Term.Typed(Term.Repeated(values), _)))))\n          if isSCOpsConversion(conv) &&"
  }
]