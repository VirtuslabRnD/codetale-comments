[
  {
    "id" : "881dad97-bfd8-48f7-b6cf-204e18f9c9c1",
    "prId" : 1570,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1570#pullrequestreview-123941459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c239d1a8-1116-44c5-8b26-1d0abd1ecb45",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "note to self, we should move 2.11/2.12 specific tests to scala-2.11/scala-2.12 specific source directories",
        "createdAt" : "2018-05-29T12:51:52Z",
        "updatedAt" : "2018-05-29T16:05:31Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "79de6a1047866355c6ac1b46427e91840afcfc22",
    "line" : 770,
    "diffHunk" : "@@ -1,1 +975,979 @@  val ListBufferDeclsInString = \"+39 decls\"\n  lazy val ListBufferDeclsActual: String = {\n    if (scalaVersion.startsWith(\"2.11\")) \"+36 decls\"\n    else ListBufferDeclsInString\n  }"
  },
  {
    "id" : "92b51267-b10d-4680-a789-b7de699af7ec",
    "prId" : 1502,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1502#pullrequestreview-112239237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "984b5eae-dd84-4746-a674-ac0a94c4797f",
        "parentId" : null,
        "authorId" : "ee435ce0-4e9b-4dad-b7cc-9ac4ab481429",
        "body" : "For consistency with https://github.com/scalameta/scalameta/pull/1501#discussion_r181561316, maybe make this `kind.isLocal`?\r\n\r\n(That also saves you the import)",
        "createdAt" : "2018-04-15T13:12:09Z",
        "updatedAt" : "2018-04-15T13:12:35Z",
        "lastEditedBy" : "ee435ce0-4e9b-4dad-b7cc-9ac4ab481429",
        "tags" : [
        ]
      },
      {
        "id" : "3b8b1fda-0cb6-4520-bef8-96a7ab074439",
        "parentId" : "984b5eae-dd84-4746-a674-ac0a94c4797f",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "That's a good point, I agree. Gonna merge nevertheless so @andyscott can get a t-shirt 😂 ",
        "createdAt" : "2018-04-15T13:31:59Z",
        "updatedAt" : "2018-04-15T13:31:59Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "04abaa6f-4667-42ab-aa1c-a3152dbd1f00",
        "parentId" : "984b5eae-dd84-4746-a674-ac0a94c4797f",
        "authorId" : "ee435ce0-4e9b-4dad-b7cc-9ac4ab481429",
        "body" : "I won't stand between a man and his t-shirt 😂",
        "createdAt" : "2018-04-15T13:32:40Z",
        "updatedAt" : "2018-04-15T13:32:40Z",
        "lastEditedBy" : "ee435ce0-4e9b-4dad-b7cc-9ac4ab481429",
        "tags" : [
        ]
      },
      {
        "id" : "503e543f-c7b3-4f48-b695-cf76bc4e60ca",
        "parentId" : "984b5eae-dd84-4746-a674-ac0a94c4797f",
        "authorId" : "34cfcc4c-e240-4bfd-9da9-239a1a442c4d",
        "body" : "👕👍 ",
        "createdAt" : "2018-04-15T14:08:13Z",
        "updatedAt" : "2018-04-15T14:08:14Z",
        "lastEditedBy" : "34cfcc4c-e240-4bfd-9da9-239a1a442c4d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6227fddf4d1fc48442ad7add597b91edfe481cbb",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1330,1334 @@      val kind = denot.skind\n\n      assert(kind == k.LOCAL)\n    }\n  )"
  },
  {
    "id" : "815b4447-16de-49e8-9aa5-3ce5b2df2d87",
    "prId" : 1477,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1477#pullrequestreview-110300555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d794a5f5-5ddc-4fd8-ae4d-ee592457c741",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "This is a wtf, but I believe we have a ticket for that.",
        "createdAt" : "2018-04-08T21:19:40Z",
        "updatedAt" : "2018-04-08T21:20:19Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "c5947efb-feab-4714-a11e-f96389a923b2",
        "parentId" : "d794a5f5-5ddc-4fd8-ae4d-ee592457c741",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Yup, there is already a ticket for it.",
        "createdAt" : "2018-04-08T21:21:51Z",
        "updatedAt" : "2018-04-08T21:21:51Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "21b41e6c84d84575561dfa16c16833fad3c589b9",
    "line" : 315,
    "diffHunk" : "@@ -1,1 +890,894 @@       |_empty_.ac.y(). => val method y: Class[_]\n       |_empty_.ac.y. => private val field y: Class[_]\n       |_empty_.ac.y._$1# => abstract type _$1\n       |scala.Int. => final object Int\n       |scala.Int.MaxValue(). => final val method MaxValue: Int"
  },
  {
    "id" : "37aba7c5-2bca-4f7e-b111-e833f136df37",
    "prId" : 1323,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1323#pullrequestreview-97265167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f30732e9-5518-4a6d-ab10-1a6b0f296491",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Can we add a targeted test like this here to highlight the disambiguation like `List+1`/`List+2`? It's covered in the expect tests but I think it deserves highlighting in the targeted suite as @MasseGuillaume pointed out.",
        "createdAt" : "2018-02-16T10:55:38Z",
        "updatedAt" : "2018-02-16T18:06:43Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "6d231e9a-9fd0-4ab1-afe5-fd9631fe3f4e",
        "parentId" : "f30732e9-5518-4a6d-ab10-1a6b0f296491",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Done.",
        "createdAt" : "2018-02-16T17:59:56Z",
        "updatedAt" : "2018-02-16T18:06:43Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "808c93b6dbfc05c054223b4278b4fb325e60c102",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +94,98 @@      |}\n    \"\"\".trim.stripMargin, { (db, copy, age) =>\n      assert(copy === Symbol(\"_root_.e.User#copy(String,Int).\"))\n      assert(age === Symbol(\"_root_.e.User#copy(String,Int).(age)\"))\n    }"
  }
]