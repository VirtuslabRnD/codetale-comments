[
  {
    "id" : "c6ceebf1-462a-4467-a8e2-8580e50fe99a",
    "prId" : 1674,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1674#pullrequestreview-134598925",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51d400ee-e188-4403-8365-75b218a43102",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Nitpick. Instead of copy-pasting the same line here, I typically share one `tmp` val in the class and then for each test `tmp.resolve(\"testname\")`",
        "createdAt" : "2018-07-05T10:51:17Z",
        "updatedAt" : "2018-07-05T12:19:58Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3c012530b36d03419f3e882d24d6eeb3b34eb75",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +69,73 @@\n  test(\"missing symbol 3\") {\n    val cacheDir = Files.createTempDirectory(\"metacp\")\n    cacheDir.toFile.deleteOnExit()\n    val resources = Paths.get(\"tests\", \"jvm\", \"src\", \"test\", \"resources\")"
  },
  {
    "id" : "d57b76b9-24dc-488f-bac8-f4001ff16f9e",
    "prId" : 1674,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1674#pullrequestreview-134598925",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f4cc170-c0ce-4f71-a68b-2597a6320757",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Nitpick. Duplicated with `ManifestMetacp`, would be good to share the same logic to fetch the manifest jar. There's a risk in over-abstracting tests but there is also a risk that tests become unmaintainable when there is too much code-duplication.",
        "createdAt" : "2018-07-05T11:07:36Z",
        "updatedAt" : "2018-07-05T12:19:58Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3c012530b36d03419f3e882d24d6eeb3b34eb75",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +71,75 @@    val cacheDir = Files.createTempDirectory(\"metacp\")\n    cacheDir.toFile.deleteOnExit()\n    val resources = Paths.get(\"tests\", \"jvm\", \"src\", \"test\", \"resources\")\n    val manifest = resources.resolve(\"manifest.jar\")\n    val settings = Settings()"
  }
]