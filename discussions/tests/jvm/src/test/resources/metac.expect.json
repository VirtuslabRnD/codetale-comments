[
  {
    "id" : "43027277-44e6-4b2b-9b01-0b24af50dd9c",
    "prId" : 1656,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1656#pullrequestreview-133888435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c5357d1-199b-4eaf-801a-afacd9b10869",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "TODO, this should not be here",
        "createdAt" : "2018-07-02T17:25:33Z",
        "updatedAt" : "2018-07-03T10:39:13Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "73374b0e-4493-450a-984a-605328b7f97d",
        "parentId" : "9c5357d1-199b-4eaf-801a-afacd9b10869",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Decided to push this to a separate ticket instead https://github.com/scalameta/scalameta/issues/1659\r\n\r\nI think we need to come up with a consistent solution for how to handle these situations.",
        "createdAt" : "2018-07-03T10:18:54Z",
        "updatedAt" : "2018-07-03T10:49:59Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "69f04d314ab711c4bbd0f647eac1750017071bee",
    "line" : 212,
    "diffHunk" : "@@ -1,1 +1170,1174 @@  List => scala.collection.immutable.List#\n  Int => scala.Int#\nlocal0 => val local C1$1: C1\n  C1 => classes.C1#\nlocal1 => val local C2$1: C2"
  },
  {
    "id" : "82754518-13e8-4b7d-847c-6957d590d822",
    "prId" : 1656,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1656#pullrequestreview-133888435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "290a79f8-94f2-4b15-9850-691ec0c4983c",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "TODO, this should not be here",
        "createdAt" : "2018-07-02T17:25:46Z",
        "updatedAt" : "2018-07-03T10:39:13Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "9d38345e-7316-42a0-838c-5b463efb91bb",
        "parentId" : "290a79f8-94f2-4b15-9850-691ec0c4983c",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Moved to #1659",
        "createdAt" : "2018-07-03T10:23:34Z",
        "updatedAt" : "2018-07-03T10:49:59Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "69f04d314ab711c4bbd0f647eac1750017071bee",
    "line" : 382,
    "diffHunk" : "@@ -1,1 +2648,2652 @@  List => scala.package.List#\nlocal13 => typeparam T\nlocal14 => val local RepeatedType$1: RepeatedType\n  RepeatedType => types.Test.C#RepeatedType#\nlocal2 => abstract method k: Int"
  },
  {
    "id" : "2ea96db8-25d0-414f-8f70-c7fd12350d39",
    "prId" : 1656,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1656#pullrequestreview-134142882",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6b53cc6-44e6-4bfe-88ad-4739426e1232",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "@olafurpg Can we open a ticket for these guys as well?",
        "createdAt" : "2018-07-03T19:12:14Z",
        "updatedAt" : "2018-07-03T19:12:31Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "862ee834-499b-4ce2-88bb-99b5c4186a11",
        "parentId" : "b6b53cc6-44e6-4bfe-88ad-4739426e1232",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Done https://github.com/scalameta/scalameta/issues/1662\r\n\r\nI didn't observe these were generated from the wildcards, I agree they should not be persisted.",
        "createdAt" : "2018-07-03T19:37:19Z",
        "updatedAt" : "2018-07-03T19:37:20Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "69f04d314ab711c4bbd0f647eac1750017071bee",
    "line" : 358,
    "diffHunk" : "@@ -1,1 +2461,2465 @@local3 => selfparam x$1\nlocal4 => selfparam x$2: B\n  B => selfs.B#\nselfs. => package selfs\nselfs.B# => class B extends AnyRef { +1 decls }"
  }
]