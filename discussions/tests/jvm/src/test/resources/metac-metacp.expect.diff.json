[
  {
    "id" : "79216b37-8ba2-4924-8c3e-9d76aa3749a5",
    "prId" : 1606,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1606#pullrequestreview-129371429",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7ca5d7b-2caf-4b6c-b72c-7db2c4abc03b",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "What does `prefix {` do here?",
        "createdAt" : "2018-06-16T18:49:38Z",
        "updatedAt" : "2018-06-16T19:34:51Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "a23e4f88-118b-417c-b986-a2bfd125f43c",
        "parentId" : "b7ca5d7b-2caf-4b6c-b72c-7db2c4abc03b",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "That's a good question. It seems caused by the removal of `Option[T]` wrapping. Currently, we're producing roughly the equivalent of `TypeRef(Some(Type.defaultMessage), ...)` which is not the same as `TypeRef(None, ...`. I think we need to change the behavior of the no_box option to guard against the case when `Some(defaultValue) == None`, seems fixable but unrelated to the sealed oneof PR. It should likely be a PR changing the `(scalapb.field).no_box` option.",
        "createdAt" : "2018-06-16T19:33:08Z",
        "updatedAt" : "2018-06-16T19:35:19Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "7835b213-4ccc-46cc-893a-2c22772cfe21",
        "parentId" : "b7ca5d7b-2caf-4b6c-b72c-7db2c4abc03b",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Please open a ticket for this. Otherwise LGTM.",
        "createdAt" : "2018-06-16T19:44:23Z",
        "updatedAt" : "2018-06-16T19:44:24Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "4b87eedb-e3a1-4515-9e68-c38be93b12ce",
        "parentId" : "b7ca5d7b-2caf-4b6c-b72c-7db2c4abc03b",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Done. https://github.com/scalameta/scalameta/issues/1607",
        "createdAt" : "2018-06-16T19:51:12Z",
        "updatedAt" : "2018-06-16T19:51:13Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4c3e380cc2f67e0f333fe575330554340a09a56",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +5,9 @@+++ metacp\n                   typeRef {\n                     prefix {\n-                    symbol: \"local14\"\n+                    symbol: \"advanced.D#_#\""
  },
  {
    "id" : "bddbc5b2-84ea-44a0-9f47-33e82952aacf",
    "prId" : 1580,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1580#pullrequestreview-126426435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cc7561a-4c51-46b5-976a-43d878ea9a2c",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "The objective of metac-metacp.expect.diff is to become empty but in this case it's expected that the local symbols differ. Question if we should normalize `\"local.*\"` strings in `.toProtoString` so reduce this redundant diff.",
        "createdAt" : "2018-06-06T11:58:09Z",
        "updatedAt" : "2018-06-06T16:26:32Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "85a3e9f2-ed47-49c6-b703-e25c994a0ae7",
        "parentId" : "9cc7561a-4c51-46b5-976a-43d878ea9a2c",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "I thought I submitted a ticket for that, but it turns out that I didn't. Maybe, like the design of hardlinks, this was part of my dream the other night 🤣 ",
        "createdAt" : "2018-06-06T15:19:49Z",
        "updatedAt" : "2018-06-06T16:26:32Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "b8e104dd-1411-4e6b-a993-f35e3399f730",
        "parentId" : "9cc7561a-4c51-46b5-976a-43d878ea9a2c",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "https://github.com/scalameta/scalameta/issues/1587",
        "createdAt" : "2018-06-06T15:21:41Z",
        "updatedAt" : "2018-06-06T16:26:32Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c581e165334c532a8783b351597731da4ed18e8",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +30,34 @@               tag: TYPE_REF\n               typeRef {\n-                symbol: \"local7\"\n+                symbol: \"local0\"\n         declarations {"
  },
  {
    "id" : "28ec9b37-1bd5-4edf-930e-a34a31a1f2f7",
    "prId" : 1580,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1580#pullrequestreview-126425155",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61d79cb7-fe54-4f26-8dfe-694af1db8893",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "This seems like a legitimate metacp bug, `advanced.Test.T#` does not exist.",
        "createdAt" : "2018-06-06T11:59:47Z",
        "updatedAt" : "2018-06-06T16:26:32Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "19788acd-8ebb-4c6d-8ba8-4ab4a7011208",
        "parentId" : "61d79cb7-fe54-4f26-8dfe-694af1db8893",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Yeah, and an unfixable one at that, as long as we're using Scalap: https://github.com/scalameta/scalameta/issues/1586.",
        "createdAt" : "2018-06-06T15:18:56Z",
        "updatedAt" : "2018-06-06T16:26:32Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c581e165334c532a8783b351597731da4ed18e8",
    "line" : 216,
    "diffHunk" : "@@ -1,1 +119,123 @@                   typeRef {\n-                    symbol: \"local8\"\n+                    symbol: \"advanced.Test.T#\"\n             declarations {\n               hardlinks {"
  },
  {
    "id" : "f3d0b8ee-ed7e-45a3-95e4-082f3eb20fc5",
    "prId" : 1580,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1580#pullrequestreview-126447287",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0985226e-24cc-41d9-8421-968a2ef04c76",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Unrelated to this PR. I've wondered if `$default$` symbols should be included in SemanticDB 🤔 In a way, they can be treated as a compiler implementation detail. OTOH, the program below seems to compile OK so I guess we need to store those symbols\r\n\r\n```scala\r\nobject Foo {\r\n  case class A(a: Int = 2)\r\n  new A(2).copy$default$1\r\n}\r\n```",
        "createdAt" : "2018-06-06T12:50:40Z",
        "updatedAt" : "2018-06-06T16:26:32Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "6b919514-dcb1-4dc0-af93-2f216a6c1366",
        "parentId" : "0985226e-24cc-41d9-8421-968a2ef04c76",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Synthetics are a gray area for Scala, but here's my personal rule of thumb. \r\n\r\nThere are synthetics that are necessary for typer to operate (e.g. implicit evidences, default getters, etc), and there are synthetics that are not necessary for typer to operate (e.g. extension methods from value classes, MODULE$, etc). In my opinion, all synthetics from the first category should be included and specified in SemanticDB.\r\n\r\nAlso, interestingly, default getters are included in SLS: https://www.scala-lang.org/files/archive/spec/2.12/04-basic-declarations-and-definitions.html#default-arguments.",
        "createdAt" : "2018-06-06T15:32:53Z",
        "updatedAt" : "2018-06-06T16:26:32Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "685572d6-306e-47eb-bc9a-8e88cec39f89",
        "parentId" : "0985226e-24cc-41d9-8421-968a2ef04c76",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Interesting, I wasn't aware the spec mentioned the encoding of default params. I agree with your assessment that some synthetics are unavoidable, and it seems default method fall in that camp 😢 ",
        "createdAt" : "2018-06-06T16:08:15Z",
        "updatedAt" : "2018-06-06T16:26:32Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c581e165334c532a8783b351597731da4ed18e8",
    "line" : 274,
    "diffHunk" : "@@ -1,1 +163,167 @@\n============================\nclasses.C4#copy$default$1().\n============================\n--- metac"
  },
  {
    "id" : "7682e600-a001-4849-acce-1be074a134c2",
    "prId" : 1580,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1580#pullrequestreview-126432165",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25199565-c7b2-47cd-911b-3134c0459bf9",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Seems like a legitimate metacp bug.",
        "createdAt" : "2018-06-06T12:53:32Z",
        "updatedAt" : "2018-06-06T16:26:32Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "6cd2632a-86f2-4e58-8965-554098596af6",
        "parentId" : "25199565-c7b2-47cd-911b-3134c0459bf9",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Yeah, this is also an instance of https://github.com/scalameta/scalameta/issues/1586.",
        "createdAt" : "2018-06-06T15:33:43Z",
        "updatedAt" : "2018-06-06T16:26:32Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c581e165334c532a8783b351597731da4ed18e8",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +18,22 @@       symlinks: \"advanced.D#[CC]\"\n     declarations {\n+      symlinks: \"advanced.D#_#\"\n       symlinks: \"advanced.D#`<init>`().\"\n"
  },
  {
    "id" : "3638315b-b67b-4497-93f0-52f41aa843a6",
    "prId" : 1458,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1458#pullrequestreview-107304356",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7c5dd3c-1c52-40d2-992e-1404e7548554",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "👍 \r\n\r\nThis passed our scrutiny, `x#` makes no sense",
        "createdAt" : "2018-03-27T14:03:14Z",
        "updatedAt" : "2018-03-28T17:43:54Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4a155a9bbde2cac46f5359e30762e34787b3c39",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1077,1081 @@         string: \"\"\n-    symbol: \"types.P#x().\"\n+    symbol: \"types.P#x.\"\n     primitive: 0\n     string: \"\""
  },
  {
    "id" : "9dba8929-b4c6-4505-96e1-158668a6dcd5",
    "prId" : 1416,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1416#pullrequestreview-102687310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "649c4743-48a0-49dd-ad56-f7c3b1e28691",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "I hit on this before, I was surprised that `.isJavaDefined == true` for package symbols. I'm not sure what makes most sense here, a package symbol belongs to neither language IMO.",
        "createdAt" : "2018-03-09T11:44:00Z",
        "updatedAt" : "2018-03-09T15:12:28Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "9e86b2fa-d927-4014-b358-8222972b9e3c",
        "parentId" : "649c4743-48a0-49dd-ad56-f7c3b1e28691",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "https://github.com/scalameta/scalameta/issues/1420",
        "createdAt" : "2018-03-09T15:10:57Z",
        "updatedAt" : "2018-03-09T15:12:28Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "84dc8ae3-d36b-49d4-9caf-160d06114b4e",
        "parentId" : "649c4743-48a0-49dd-ad56-f7c3b1e28691",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Cool, that one passed by me.",
        "createdAt" : "2018-03-09T15:42:24Z",
        "updatedAt" : "2018-03-09T15:43:41Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ff10c15502b6b6400abe286a263819084a11d18",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +38,42 @@ owner: \"_root_.com.\"\n-language: SCALA\n+language: JAVA\n\n"
  },
  {
    "id" : "7b1e673f-3eb9-403e-8cef-56befb481707",
    "prId" : 1416,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1416#pullrequestreview-102678001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b63b3cc2-f1dd-43a5-a69e-522d2dcfdbfb",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Seems metac and metacp still disagree on FIELD/METHOD for private[this] vals\r\n\r\n```\r\nmetac:  _root_.example.Vals#xzlm(). => private[this] lazy val field xzlm: Int\r\nmetacp: _root_.example.Vals#xzlm(). => private[this] lazy val method xzlm: : Int\r\n```",
        "createdAt" : "2018-03-09T11:46:20Z",
        "updatedAt" : "2018-03-09T15:12:28Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "31e91c1b-94ff-44f7-91f6-27983fa1ba83",
        "parentId" : "b63b3cc2-f1dd-43a5-a69e-522d2dcfdbfb",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "https://github.com/scalameta/scalameta/issues/1328",
        "createdAt" : "2018-03-09T15:11:13Z",
        "updatedAt" : "2018-03-09T15:12:28Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ff10c15502b6b6400abe286a263819084a11d18",
    "line" : 247,
    "diffHunk" : "@@ -1,1 +715,719 @@ symbol: \"_root_.example.Vals#xzm().\"\n-kind: FIELD\n+kind: METHOD\n properties: 1088\n name: \"xzm\""
  },
  {
    "id" : "31470cb9-8bb1-499e-9bf2-fd6e1ad78857",
    "prId" : 1416,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1416#pullrequestreview-102687310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfc09fc9-1be5-485b-b83c-cd90e1c2bce8",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Seems we emit a constructor for java interfaces 🤔 ",
        "createdAt" : "2018-03-09T12:18:44Z",
        "updatedAt" : "2018-03-09T15:12:28Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "95e96fdc-e134-4e01-9292-8b8b2493910b",
        "parentId" : "bfc09fc9-1be5-485b-b83c-cd90e1c2bce8",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "https://github.com/scalameta/scalameta/issues/1419",
        "createdAt" : "2018-03-09T14:57:01Z",
        "updatedAt" : "2018-03-09T15:12:28Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "340ce205-b637-492b-8f5f-f52678ca3d56",
        "parentId" : "bfc09fc9-1be5-485b-b83c-cd90e1c2bce8",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Missed that one too!",
        "createdAt" : "2018-03-09T15:42:40Z",
        "updatedAt" : "2018-03-09T15:43:41Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ff10c15502b6b6400abe286a263819084a11d18",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +47,51 @@+++ metacp\n         symbol: \"_root_.java.lang.Object#\"\n-    declarations: \"_root_.com.javacp.Interface#`<init>`().\"\n accessibility {\n"
  }
]