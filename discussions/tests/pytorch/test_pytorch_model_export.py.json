[
  {
    "id" : "0e4b2a94-35ac-4485-8a01-fb6d1fdffdaf",
    "prId" : 4459,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4459#pullrequestreview-684692770",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fb87342-f29e-4413-b16d-2652d379798f",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Simplified a warninng message assertion using `assert_any_call`.",
        "createdAt" : "2021-06-16T03:33:59Z",
        "updatedAt" : "2021-06-16T03:33:59Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "57202d7692d81b7651e5bc3566f4001df4ff2cee",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +823,827 @@        mlflow.pytorch.load_model(model_uri=model_path, pickle_module=mlflow_pytorch_pickle_module)\n        torch_load_mock.assert_called_with(mock.ANY, pickle_module=mlflow_pytorch_pickle_module)\n        warn_mock.assert_any_call(mock.ANY, mlflow_pytorch_pickle_module.__name__, pickle.__name__)\n\n"
  },
  {
    "id" : "7eed34e9-3cae-4a71-856b-0665531fcc67",
    "prId" : 4422,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4422#pullrequestreview-675521066",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "989d66af-940a-44fc-bd78-fb22164facfd",
        "parentId" : null,
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Could we add a Pytorch-specific test here that verifies that if an explicitly passed in pip requirements file is passed in that we respect that instead?",
        "createdAt" : "2021-06-03T16:57:26Z",
        "updatedAt" : "2021-06-03T16:57:36Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e509a62ddaf04fde9200fbc722d7f140ccb88aa1",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +462,466 @@    _compare_conda_env_requirements(pytorch_custom_env, saved_pip_req_path)\n\n\n@pytest.mark.large\n@pytest.mark.parametrize(\"scripted_model\", [True, False])"
  },
  {
    "id" : "13da4375-4e09-4402-b24b-a40642ee3e4b",
    "prId" : 3607,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3607#pullrequestreview-518467751",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff6ddb53-ba71-4097-b243-ea2e5ea334bb",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Fixed `create_extra_files` to return multiple files.",
        "createdAt" : "2020-10-28T09:29:14Z",
        "updatedAt" : "2020-11-03T00:25:10Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca50f27cad874f761201f5b680fad0ca94390542",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +923,927 @@    fp1.write(\"1\")\n    fp2.write(\"2\")\n    return [fp1.strpath, fp2.strpath], [\"1\", \"2\"]\n\n"
  },
  {
    "id" : "0f15940e-17e3-4c2a-9ad3-4f4e724b6293",
    "prId" : 3399,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3399#pullrequestreview-484360865",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d76cc34-311c-451f-a2ba-e13bebfd268f",
        "parentId" : null,
        "authorId" : "5ea9649b-c37c-4aab-88b3-7bfcd507163e",
        "body" : "Eventhough the `forward` function is implemented in the class, pylint is throwing the error - `W0223: Method '_forward_unimplemented' is abstract in class 'Module' but is not overridden (abstract-method)`. \r\n\r\nhttps://stackoverflow.com/questions/22186843/pylint-w0223-method-is-abstract-in-class-but-is-not-overridden - Disabled it as suggested in the link. ",
        "createdAt" : "2020-09-08T17:41:55Z",
        "updatedAt" : "2020-09-16T11:02:16Z",
        "lastEditedBy" : "5ea9649b-c37c-4aab-88b3-7bfcd507163e",
        "tags" : [
        ]
      }
    ],
    "commit" : "34c10ffd134f6315ded4712df3966e2d4fb22370",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +99,103 @@    \"\"\"\n\n    # pylint: disable=W0223\n    class SubclassedModel(torch.nn.Module):\n        def __init__(self):"
  },
  {
    "id" : "0fa76080-375e-4b71-9f93-cb5f8fcedd5d",
    "prId" : 861,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/861#pullrequestreview-199271825",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5312bdef-8679-4b70-a583-c2863df8b2b1",
        "parentId" : null,
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "The same as above, can we maybe merge the two tests?",
        "createdAt" : "2019-02-01T21:04:36Z",
        "updatedAt" : "2019-02-02T23:41:32Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      },
      {
        "id" : "6fc630d3-22d9-479a-adc6-037142f36fb2",
        "parentId" : "5312bdef-8679-4b70-a583-c2863df8b2b1",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Again, I'd rather not merge the test cases since they encapsulate different workflows. It seems harder to to interpret the test case when it's merged and uses loops than when the cases are separated.",
        "createdAt" : "2019-02-01T23:54:15Z",
        "updatedAt" : "2019-02-02T23:41:32Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d6d729b4602846f61d09b0ff774d244effc317b",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +529,533 @@\n\ndef test_load_model_succeeds_when_data_is_model_file_instead_of_directory(\n        module_scoped_subclassed_model, model_path, data):\n    \"\"\""
  },
  {
    "id" : "57cecd8c-6eaa-432c-89d3-827eb732ffa4",
    "prId" : 861,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/861#pullrequestreview-199316835",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c378991-14f3-4a21-b046-dc591a1f2102",
        "parentId" : null,
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "I wonder if it would be better to add a pickle and unpickle methods to the test and use this module as a pickle module and verify the model was actually loaded via this module. mocking torch load model seems a bit indirect. What do you think?",
        "createdAt" : "2019-02-01T21:08:36Z",
        "updatedAt" : "2019-02-02T23:41:32Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      },
      {
        "id" : "72b83b25-d804-461d-8ef6-22b4569d76f7",
        "parentId" : "1c378991-14f3-4a21-b046-dc591a1f2102",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "I'm not sure that this makes it much easier to test that the model was loaded via this module. The module level `load()` method would need to pass some state about the fact that it was called to the test case. Because these methods are called by the PyTorch library, it's unclear how to propagate this state without using a mock and checking the call count anyway. Perhaps we can set attributes on the top-level function, but this seems like it might add complexity.",
        "createdAt" : "2019-02-01T23:43:04Z",
        "updatedAt" : "2019-02-02T23:41:32Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "d416af12-2cc0-4c70-a2d2-816a483dd05e",
        "parentId" : "1c378991-14f3-4a21-b046-dc591a1f2102",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "makes sense.",
        "createdAt" : "2019-02-02T00:12:32Z",
        "updatedAt" : "2019-02-02T23:41:32Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d6d729b4602846f61d09b0ff774d244effc317b",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +443,447 @@\ndef test_load_pyfunc_loads_torch_model_using_pickle_module_specified_at_save_time(\n        module_scoped_subclassed_model, model_path):\n    custom_pickle_module = pickle\n"
  },
  {
    "id" : "eca1eeef-b1d6-4d96-8f1d-e99641d83a7b",
    "prId" : 264,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/264#pullrequestreview-146352920",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdfc9238-8466-43a8-91a6-0494f34268e3",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Q: Just to confirm, is the `[:, 0]` indexing necessary because the PyFunc model generates a single output column containing a N-dimensional array with the same shape as the PyTorch model's output tensor?",
        "createdAt" : "2018-08-15T02:47:08Z",
        "updatedAt" : "2018-08-17T20:49:53Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "155b9a41-5f98-4dfe-8997-9c159ccf2210",
        "parentId" : "cdfc9238-8466-43a8-91a6-0494f34268e3",
        "authorId" : "a879560f-c800-43f5-9d21-56a9674175b6",
        "body" : "Yes, `[:, 0]` is necessary because the output of `pyfunc_loaded.predict(x)` is pandas DataFrame of shape `(N, 1)`, but `predicted` is `(N, )`. Wrapping by DataFrame gives such behavior.",
        "createdAt" : "2018-08-15T07:32:15Z",
        "updatedAt" : "2018-08-17T20:49:53Z",
        "lastEditedBy" : "a879560f-c800-43f5-9d21-56a9674175b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f9d2edd5eab3f09fae7241e8d16188714e2be3b",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +147,151 @@        # Loading pyfunc model\n        pyfunc_loaded = mlflow.pyfunc.load_pyfunc(path)\n        assert np.all(pyfunc_loaded.predict(x).values[:, 0] == predicted)"
  }
]