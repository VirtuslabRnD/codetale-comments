[
  {
    "id" : "255b57bc-cdc0-4d95-b5cf-3f3446fc827b",
    "prId" : 4147,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4147#pullrequestreview-599969374",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d552c386-29e9-4e32-b777-9a1add7d10fe",
        "parentId" : null,
        "authorId" : "6df779be-baaa-40f8-bfb9-de44c59eb7af",
        "body" : "oof thanks for all the test coverage here with all the types!",
        "createdAt" : "2021-02-26T21:55:02Z",
        "updatedAt" : "2021-02-26T23:12:48Z",
        "lastEditedBy" : "6df779be-baaa-40f8-bfb9-de44c59eb7af",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdcf347952ecf063e136199d8474555a1c01b6db",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +270,274 @@        assert isinstance(enforced_array, np.ndarray)\n\n    bool_ = [\"bool\", \"bool_\", \"bool8\"]\n    object_ = [\"object\"]\n    signed_int = ["
  },
  {
    "id" : "5edcf195-26d8-4275-b741-04b2c875fd23",
    "prId" : 4147,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4147#pullrequestreview-599969374",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "644eb4fd-bcd0-4ffa-98fa-4742b7d799f3",
        "parentId" : null,
        "authorId" : "6df779be-baaa-40f8-bfb9-de44c59eb7af",
        "body" : "the resulting np array created here will have a dtype \"U32\" or whatever here anyway, but might be more clear to make it explicit that we're creating a numpy with a dtype of a certain string/byte length, and it will still work e.g\r\n```test_dtype(np.array([\"a\", \"bc\", \"def\"], dtype=\"str10\"), \"str\")```",
        "createdAt" : "2021-02-26T21:57:15Z",
        "updatedAt" : "2021-02-26T23:12:48Z",
        "lastEditedBy" : "6df779be-baaa-40f8-bfb9-de44c59eb7af",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdcf347952ecf063e136199d8474555a1c01b6db",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +358,362 @@\n    # str_\n    for dtype in str_:\n        test_dtype(np.array([\"m\", \"l\", \"f\", \"l\", \"o\", \"w\"], dtype=dtype), dtype)\n        test_dtype(np.array([\"mlflow\"], dtype=dtype), dtype)"
  },
  {
    "id" : "75f68a43-aad3-4ce6-9659-8c24241e7a3f",
    "prId" : 4147,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4147#pullrequestreview-600008631",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed6346d6-1211-4804-988b-ae2b58b8fc38",
        "parentId" : null,
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "This comparison should fail for strings and bytes right? Did you forget to call clean_tensor_dtype?",
        "createdAt" : "2021-02-26T22:07:13Z",
        "updatedAt" : "2021-02-26T23:12:48Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      },
      {
        "id" : "ab642551-9d2a-4a31-b0d1-dde1f9c0e1d7",
        "parentId" : "ed6346d6-1211-4804-988b-ae2b58b8fc38",
        "authorId" : "7dc30493-29f9-4bc4-bf26-00054b8b0b57",
        "body" : "The `dtype` used to create the TensorSpec does not contain length information. It comes from the strings stored in the datatype arrays:\r\n`bytes_ = [\"bytes_\", \"string_\"]`\r\n\r\n `str_ = [\"str_\", \"unicode_\"]`\r\n",
        "createdAt" : "2021-02-26T22:38:40Z",
        "updatedAt" : "2021-02-26T23:12:48Z",
        "lastEditedBy" : "7dc30493-29f9-4bc4-bf26-00054b8b0b57",
        "tags" : [
        ]
      },
      {
        "id" : "50e36340-a096-44da-9004-d233aa3f843d",
        "parentId" : "ed6346d6-1211-4804-988b-ae2b58b8fc38",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "oh, right, I missed that :)",
        "createdAt" : "2021-02-26T22:46:52Z",
        "updatedAt" : "2021-02-26T23:12:48Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdcf347952ecf063e136199d8474555a1c01b6db",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +263,267 @@    def test_dtype(nparray, dtype):\n        schema = _infer_schema(nparray)\n        assert schema == Schema([TensorSpec(np.dtype(dtype), (-1,))])\n        spec = schema.inputs[0]\n        recreated_spec = TensorSpec.from_json_dict(**spec.to_dict())"
  }
]