[
  {
    "id" : "2413ebe5-a67c-4610-a139-e14d320e9aca",
    "prId" : 4043,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4043#pullrequestreview-581069083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3221e119-c261-4e75-9fdc-841e34bbc236",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Specify `save_format=\"h5\"` in tests that assume a model is saved in the H5 format.",
        "createdAt" : "2021-02-02T07:54:36Z",
        "updatedAt" : "2021-02-04T07:47:06Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "cda567df-c777-4278-9e45-863d111b43b5",
        "parentId" : "3221e119-c261-4e75-9fdc-841e34bbc236",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "This implicitly ensures that we can still save a keras model in the H5 format.",
        "createdAt" : "2021-02-02T08:00:20Z",
        "updatedAt" : "2021-02-04T07:47:06Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "48001389abd51a90ecc59dc0c5e74c0ce317fa5a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +205,209 @@        with pytest.raises(MlflowException):\n            mlflow.keras.save_model(x, path0)\n        mlflow.keras.save_model(x, path0, keras_module=FakeKerasModule, save_format=\"h5\")\n        y = mlflow.keras.load_model(path0)\n        assert x == y"
  },
  {
    "id" : "9ae6e35f-dca6-4c4e-a3ad-0e1fca4fda40",
    "prId" : 3731,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3731#pullrequestreview-542618892",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be7046fd-238c-40a1-8cd2-f5b0ace94369",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Workaround for `tf-nightly`. If we didn't specify this, `pyfunc_serve_and_score_model` would try to install `tensorflow-dev2020xxxx` which doesn't exist on PyPI and fail.",
        "createdAt" : "2020-12-02T00:21:56Z",
        "updatedAt" : "2020-12-08T00:26:29Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "4af0f55a-03ad-4e4a-8bec-25b3dd7da3f6",
        "parentId" : "be7046fd-238c-40a1-8cd2-f5b0ace94369",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Sounds good!",
        "createdAt" : "2020-12-02T08:59:42Z",
        "updatedAt" : "2020-12-08T00:26:29Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "05d603ac0af40f35f83edf0e8f8825ac866d0176",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +251,255 @@        data=pd.DataFrame(x),\n        content_type=pyfunc_scoring_server.CONTENT_TYPE_JSON_SPLIT_ORIENTED,\n        extra_args=[\"--no-conda\"],\n    )\n    print(scoring_response.content)"
  },
  {
    "id" : "434ec830-8a8e-46f6-9583-422f6e904123",
    "prId" : 3731,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3731#pullrequestreview-543759928",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5adee02f-689f-4529-b385-9d435864093e",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Fix for keras 2.0.9. Passing a dataframe to `fix` causes this error: https://stackoverflow.com/questions/47852818/keras-unboundlocalerror-local-variable-arrays-referenced-before-assignment-h",
        "createdAt" : "2020-12-03T09:31:05Z",
        "updatedAt" : "2020-12-08T00:26:29Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "05d603ac0af40f35f83edf0e8f8825ac866d0176",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +97,101 @@    model.add(TfDense(1))\n    model.compile(loss=\"mean_squared_error\", optimizer=TfSGD(learning_rate=0.001))\n    model.fit(x.values, y.values)\n    return model\n"
  },
  {
    "id" : "60be6163-76f9-451a-8e33-7b095b7e715d",
    "prId" : 3552,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3552#pullrequestreview-525340802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f5fc568-13e6-4b04-8c91-af798b815509",
        "parentId" : null,
        "authorId" : "e71c4958-9dfb-45f1-bc0b-6dd7ac6aef54",
        "body" : "Could we add tests for loading back via `pyfunc` here as well?",
        "createdAt" : "2020-11-05T22:48:37Z",
        "updatedAt" : "2020-11-10T16:40:59Z",
        "lastEditedBy" : "e71c4958-9dfb-45f1-bc0b-6dd7ac6aef54",
        "tags" : [
        ]
      },
      {
        "id" : "709ea13e-5960-40db-bae2-9f003b85e2a5",
        "parentId" : "9f5fc568-13e6-4b04-8c91-af798b815509",
        "authorId" : "9cdfbc74-33a3-4556-9257-cdb48b22d7b3",
        "body" : "Great suggestion! I added some more parameters to the `test_model_save_load` test so it covers all combinations (no param, \"h5\", and \"tf\").\r\n\r\nThis uncovered a subtle bug that I've now fixed! For clarity:\r\n\r\nKeras will compile the model if there is an optimizer on loading, unless we explicitly request it to _not_ compile. But during prediction, compilation is forced if optimizer state is saved. In the case that the optimizer state was not saved (and thus we can't compile on load), then Keras will log a warning if we set `compile=True`. As such, the fix I applied was to call load_model with `compile=True` if `SavedModel` format was used.",
        "createdAt" : "2020-11-06T17:10:20Z",
        "updatedAt" : "2020-11-10T16:40:59Z",
        "lastEditedBy" : "9cdfbc74-33a3-4556-9257-cdb48b22d7b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "57aca4fae4232b3d5efb37ffc44046c6572033c4",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +535,539 @@\n@pytest.mark.large\ndef test_save_and_load_model_with_tf_save_format(tf_keras_model, model_path):\n    \"\"\"Ensures that keras models saved with save_format=\"tf\" can be loaded.\"\"\"\n    mlflow.keras.save_model(keras_model=tf_keras_model, path=model_path, save_format=\"tf\")"
  },
  {
    "id" : "07893c49-5086-4abf-920d-4c1f0245ccc2",
    "prId" : 3552,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3552#pullrequestreview-524786605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18c0dfe7-df04-4ca0-a6f2-8bf706b3bc66",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "These assert error messages are actually nice because they clarify what is being asserted :)",
        "createdAt" : "2020-11-06T01:01:13Z",
        "updatedAt" : "2020-11-10T16:40:59Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "57aca4fae4232b3d5efb37ffc44046c6572033c4",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +545,549 @@    assert not os.path.exists(\n        os.path.join(model_path, \"data\", \"model.h5\")\n    ), \"TF model was saved with HDF5 format; expected SavedModel\"\n    assert os.path.isdir(\n        os.path.join(model_path, \"data\", \"model\")"
  },
  {
    "id" : "eb1ebbfa-fa85-4cea-aaea-6ef282f14aa3",
    "prId" : 1546,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1546#pullrequestreview-257767900",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e277ca8-f7f3-4cca-8293-8e2772a7c603",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "I'm concerned about using a test for exact equality, given that we previously had issues with flaky Keras tests due to numeric precision problems. Can we stick with the `allclose` call?",
        "createdAt" : "2019-07-03T22:22:35Z",
        "updatedAt" : "2019-07-04T00:10:57Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "9288fe7c-d291-4f4f-8803-f02ab3d239ce",
        "parentId" : "5e277ca8-f7f3-4cca-8293-8e2772a7c603",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "I don't think there is any need to lower the precision if this is working now. \r\nIt this stops failing in the future I think we should investigate it. I mean, it may be ok if the precision fluctuates, but going from 100% equal to almost equal is a big step down.",
        "createdAt" : "2019-07-03T22:45:44Z",
        "updatedAt" : "2019-07-04T00:10:57Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      },
      {
        "id" : "872c8b63-e2fe-4cd9-8844-30ecf98d553d",
        "parentId" : "5e277ca8-f7f3-4cca-8293-8e2772a7c603",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Makes sense",
        "createdAt" : "2019-07-03T22:56:12Z",
        "updatedAt" : "2019-07-04T00:10:57Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4d0e565980d86ec09bef43ac6e39f840da2f8c5",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +208,212 @@        content_type=pyfunc_scoring_server.CONTENT_TYPE_JSON_SPLIT_ORIENTED)\n    assert all(pd.read_json(scoring_response.content, orient=\"records\").values.astype(np.float32)\n               == expected)\n    # test spark udf\n    spark_udf_preds = score_model_as_udf(model_uri=os.path.abspath(model_path),"
  },
  {
    "id" : "53ca4b35-be88-4d17-a969-4ced9905f140",
    "prId" : 1546,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1546#pullrequestreview-257783048",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fe9eb3d-83e4-482f-a8f0-bf4b9d2f4a5a",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Hyper nit: `Tets` > `Test`. Sorry.",
        "createdAt" : "2019-07-04T00:14:01Z",
        "updatedAt" : "2019-07-04T00:14:02Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4d0e565980d86ec09bef43ac6e39f840da2f8c5",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +171,175 @@        z = mlflow.keras.load_model(path1)\n        assert x == z\n        # Tets model log\n        with mlflow.start_run() as active_run:\n            with pytest.raises(MlflowException):"
  },
  {
    "id" : "fd378f73-c7fe-41fe-83fe-d7c1fc2b3af4",
    "prId" : 1525,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1525#pullrequestreview-256670228",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64ef0edb-edbe-4b63-8fcd-5add8fbeab8b",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Can we also verify that calling `load_model` with `incorrect_custom_objects` throws an exception?",
        "createdAt" : "2019-07-02T05:59:41Z",
        "updatedAt" : "2019-07-02T20:08:07Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2131e70c74d522370447ea87bee3c240729c479d",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +184,188 @@    correct_custom_objects = {'MyDense': custom_layer}\n    mlflow.keras.save_model(custom_model, model_path, custom_objects=incorrect_custom_objects)\n    model_loaded = mlflow.keras.load_model(model_path, custom_objects=correct_custom_objects)\n    assert model_loaded is not None\n    with pytest.raises(TypeError):"
  },
  {
    "id" : "013d5764-b7ac-4e5d-80ed-7d6d65a7da3c",
    "prId" : 708,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/708#pullrequestreview-174112846",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab10a4dd-e2e3-4e6a-841c-a2b2ae99704d",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Nice catch & thanks for the test!",
        "createdAt" : "2018-11-12T22:10:09Z",
        "updatedAt" : "2018-11-12T22:24:50Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "3dba5d570eb2700ff50b234ab06895716104a113",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +176,180 @@        model, model_path, data, predicted):\n    \"\"\"\n    This is a backwards compatibility test to ensure that models saved in MLflow version <= 0.8.0\n    can be loaded successfully. These models are missing the `data` flavor configuration key.\n    \"\"\""
  },
  {
    "id" : "49049237-d90e-4357-aeeb-270a38ca2f3f",
    "prId" : 440,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/440#pullrequestreview-153107147",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b764c6db-7383-476a-a93c-ec379f515831",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "`all` doesn't seem necessary here because it's operating on a single boolean predicate",
        "createdAt" : "2018-09-06T18:17:47Z",
        "updatedAt" : "2018-09-06T20:29:07Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "793cbd3f-6940-4de6-8d4a-a57154c1eef8",
        "parentId" : "b764c6db-7383-476a-a93c-ec379f515831",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "It is needed. preds and predicted are both numpy arrays, == operator returns a vector of booleans.",
        "createdAt" : "2018-09-06T19:59:02Z",
        "updatedAt" : "2018-09-06T20:29:07Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      },
      {
        "id" : "51f78154-8db3-4b51-ac41-bbe0b72ca326",
        "parentId" : "b764c6db-7383-476a-a93c-ec379f515831",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "It is necessary, the preds and predicted are numpy arrays and their comparison is a boolean vector.",
        "createdAt" : "2018-09-06T20:10:51Z",
        "updatedAt" : "2018-09-06T20:29:07Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      },
      {
        "id" : "68040116-d9e2-4960-90c8-846817181210",
        "parentId" : "b764c6db-7383-476a-a93c-ec379f515831",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Cool, noted!",
        "createdAt" : "2018-09-06T20:29:09Z",
        "updatedAt" : "2018-09-06T20:29:09Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a4564119f0f2d20d8895ef4790f2d974a5f5583",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +59,63 @@    # pyfunc serve\n    preds = pyfunc_serve_and_score_model(model_path=os.path.abspath(path), data=pd.DataFrame(x))\n    assert all(preds.values.astype(np.float32) == predicted)\n\n"
  }
]