[
  {
    "id" : "eff9432b-d6de-449e-ab96-b6c6f27203b9",
    "prId" : 736,
    "prUrl" : "https://github.com/scalameta/metals/pull/736#pullrequestreview-244201245",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9bdee218-ebc5-4add-826b-f02d5995efa4",
        "parentId" : null,
        "authorId" : "a1d420d1-83d4-48b5-b245-772065f6633b",
        "body" : "maybe `tasks` ? `original` doesn't tell me anything. If the intent is that it is something we expect to get after the `when/act` phase, then `expected` is - I think - well established name.",
        "createdAt" : "2019-05-29T14:56:40Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : "a1d420d1-83d4-48b5-b245-772065f6633b",
        "tags" : [
        ]
      },
      {
        "id" : "3678c203-34c9-4d1c-9e68-5733069ba809",
        "parentId" : "9bdee218-ebc5-4add-826b-f02d5995efa4",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "`original` is used consistently in the metals test suites to represent the original input, for example\r\n```scala\r\ndef check(name: String, original: String, expected: String): Unit =\r\n  test(name) {\r\n    val obtained = someFunction(original)\r\n    assert(obtained == expected)\r\n  }\r\n```",
        "createdAt" : "2019-05-31T09:38:47Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +38,42 @@    val obtained = mutable.ListBuffer.empty[Int]\n    val size = 10\n    val original = 1.to(size).toList\n    val all = Future.traverse(original) { i =>\n      val promise = Promise[Unit]()"
  }
]