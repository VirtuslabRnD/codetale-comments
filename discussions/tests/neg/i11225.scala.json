[
  {
    "id" : "174a9983-655d-425d-97b9-aa763d695c3f",
    "prId" : 11231,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11231#pullrequestreview-583819065",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f60e24b7-c55d-4891-a844-ab75b94abbcb",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "This should be ok as the code we end up with is \r\n\r\n```scala\r\n  var x7: Int = uni  // ok\r\n// after inlining\r\n  var x7: Int = uninitialized // still ok\r\n```",
        "createdAt" : "2021-02-04T08:57:09Z",
        "updatedAt" : "2021-02-05T09:24:01Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "a07257f2-29d1-49ad-8b6e-31e0676f12c0",
        "parentId" : "f60e24b7-c55d-4891-a844-ab75b94abbcb",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Otherwise, we would need to make `g(uninitialized)` to be consistent with inlining/erased rules.",
        "createdAt" : "2021-02-04T08:59:46Z",
        "updatedAt" : "2021-02-05T09:24:01Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "b48e0685-a492-46da-918f-ebf76cd46387",
        "parentId" : "f60e24b7-c55d-4891-a844-ab75b94abbcb",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "It's an error since we end up with `Inlined(uninitialized)`. I think that's OK. Ideally we would not allow the inline def of `uni` in the first place.\r\n",
        "createdAt" : "2021-02-04T14:35:20Z",
        "updatedAt" : "2021-02-05T09:24:01Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "ceca5000-7073-436b-a6a8-c11c3d57a783",
        "parentId" : "f60e24b7-c55d-4891-a844-ab75b94abbcb",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Then it would be inconsistent with `var x4: Int = if false then uninitialized else 1 // ok, since inlined away` and `  def f2 = g(uninitialized) // this one is ok since uninitialized is inlined away`. We would have some special inlining rules that only apply `uninitialized` which will confuse everyone.",
        "createdAt" : "2021-02-04T15:48:44Z",
        "updatedAt" : "2021-02-05T09:24:01Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "7968c8c7-cc33-41da-9dc0-4e93b17c8304",
        "parentId" : "f60e24b7-c55d-4891-a844-ab75b94abbcb",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I think we need  not overthink this. The intention is that you should not use `uninitialized`  except as the RHS of a field definition. For all practical purposes that's what this PR achieves. We don't need to split hairs beyond that,\r\n",
        "createdAt" : "2021-02-04T21:15:29Z",
        "updatedAt" : "2021-02-05T09:24:01Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "90907ed5dba2c52f67ba656d6fb5c57320b77624",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@  def f2 = g(uninitialized) // this one is ok since `uninitialized` is inlined away\n\n  var x7: Int = uni  // error"
  }
]