[
  {
    "id" : "eec7c0fa-6397-4094-add7-e4407ed68db2",
    "prId" : 8097,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8097#pullrequestreview-349344090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4ce6ac0-89be-4858-9bf2-ab59d98c5b10",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "It's not obvious why this is not accepted by the check.",
        "createdAt" : "2020-01-27T20:19:13Z",
        "updatedAt" : "2020-01-28T10:02:11Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "7019ecf1-e5ea-40a4-93c3-cbf9dd436521",
        "parentId" : "e4ce6ac0-89be-4858-9bf2-ab59d98c5b10",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "```\r\n32 |      val r2 = '{identity[Option[T]](${s: Expr[Option[T]]})} // error // error\r\n   |                                     ^^^^^^^^^^^^^^^^^^^^^\r\n   |    (Test.this.given_Type_T : => quoted.Type[Test.this.T]) is not stable\r\n```\r\n\r\nAll these can be fixed by making the `given`  stable\r\n\r\n```scala\r\nval getT: Type[T] = T // need this to avoid getting `null`\r\ngiven getT.type = getT\r\n```",
        "createdAt" : "2020-01-28T10:02:12Z",
        "updatedAt" : "2020-01-28T10:02:13Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "e2b6d7dd-d433-470c-b52a-888089b247b1",
        "parentId" : "e4ce6ac0-89be-4858-9bf2-ab59d98c5b10",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Added an extra test for it",
        "createdAt" : "2020-01-28T10:02:25Z",
        "updatedAt" : "2020-01-28T10:02:25Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "d18ce8e3-96d9-41e5-8e5d-137816ef3463",
        "parentId" : "e4ce6ac0-89be-4858-9bf2-ab59d98c5b10",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Why it has to be stable?",
        "createdAt" : "2020-01-28T10:23:34Z",
        "updatedAt" : "2020-01-28T10:23:34Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "66b73467-f6b9-4348-bf05-17f62f98206d",
        "parentId" : "e4ce6ac0-89be-4858-9bf2-ab59d98c5b10",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Type splices require a stable prefix to be correctly encoded. It also avoids having to deal with side effects in the transformation performed in `ReifyQuotes`. Most code receives the quoted type as a parameter and hence is stable.",
        "createdAt" : "2020-01-28T11:08:44Z",
        "updatedAt" : "2020-01-28T11:08:44Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "fa89055f-6e4f-42de-ae6b-0ae3e102db49",
        "parentId" : "e4ce6ac0-89be-4858-9bf2-ab59d98c5b10",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "It's a restriction in TASTy? This is unprecedented in Scala, as usually only the path in types needs to be stable.",
        "createdAt" : "2020-01-28T12:39:45Z",
        "updatedAt" : "2020-01-28T12:39:46Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "e550c436-d802-4845-ab32-365041678ff1",
        "parentId" : "e4ce6ac0-89be-4858-9bf2-ab59d98c5b10",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "This is a path in a type. A type that is inferred and then healed.",
        "createdAt" : "2020-01-28T12:43:12Z",
        "updatedAt" : "2020-01-28T12:43:12Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "a00d1842f71ae8740b5c7bb0febcfb95a960224b",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +30,34 @@      val s = '{Option.empty[${T}]}\n      val r = '{identity($s)} // works\n      val r2 = '{identity(${s: Expr[Option[T]]})} // error // error\n    }\n"
  }
]