[
  {
    "id" : "027a200e-57b3-48f7-9b11-b06bd42f142f",
    "prId" : 7862,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7862#pullrequestreview-337667435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a08a4a88-6865-48bc-b161-77834edc4036",
        "parentId" : null,
        "authorId" : "4107dafe-4e7b-4e85-8d5b-63e06e0e6318",
        "body" : "This test case seems to already exercise conditional extension methods, which I believe is the most important thing to address, but could we also add a more complex test case like the following?\r\n\r\n~~~ scala\r\ntrait Zip[F[_]]\r\ntrait Traverse[F[_]] {\r\n  def [A, B, G[_] : Zip](fa: F[A]) traverse(f: A => G[B]): G[F[B]]\r\n}\r\n\r\nobject instances {\r\n  given zipOption: Zip[Option] = ???\r\n  given traverseList: Traverse[List] = ???\r\n}\r\n\r\nList(1, 2, 3).traverse(x => Option(x)) // error\r\n~~~\r\n",
        "createdAt" : "2020-01-01T11:08:00Z",
        "updatedAt" : "2020-01-05T15:16:17Z",
        "lastEditedBy" : "4107dafe-4e7b-4e85-8d5b-63e06e0e6318",
        "tags" : [
        ]
      },
      {
        "id" : "1013cd9c-a5ca-4b3a-9c35-ed077d619226",
        "parentId" : "a08a4a88-6865-48bc-b161-77834edc4036",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I added the test.",
        "createdAt" : "2020-01-02T13:56:06Z",
        "updatedAt" : "2020-01-05T15:16:17Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f94a835c513da53a2e8d1e3bc3e72d854c9c927",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +4,8 @@def consume[T: Numeric](xs: List[T], limit: T): List[T] = xs match\n  case x :: xs1 if limit > 0 => consume(xs1, limit - x) // error // error\n  case _ => xs\n\nimport scala.concurrent.Future"
  },
  {
    "id" : "aa171ef2-3dc8-41b8-98c2-6878020a371f",
    "prId" : 7862,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7862#pullrequestreview-338362135",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5031a67-5016-4d31-a3a4-601e8f17bf94",
        "parentId" : null,
        "authorId" : "4107dafe-4e7b-4e85-8d5b-63e06e0e6318",
        "body" : "What do you think of also adding `10.days` (which requires importing `concurrent.duration.DurationInt`)?",
        "createdAt" : "2020-01-02T20:04:54Z",
        "updatedAt" : "2020-01-05T15:16:17Z",
        "lastEditedBy" : "4107dafe-4e7b-4e85-8d5b-63e06e0e6318",
        "tags" : [
        ]
      },
      {
        "id" : "744fc0f9-30ed-47c2-85b6-771d662e3bf3",
        "parentId" : "e5031a67-5016-4d31-a3a4-601e8f17bf94",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "done",
        "createdAt" : "2020-01-04T17:28:10Z",
        "updatedAt" : "2020-01-05T15:16:17Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f94a835c513da53a2e8d1e3bc3e72d854c9c927",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +14,18 @@val DAYS = scala.concurrent.duration.DAYS\n\nval d: scala.concurrent.duration.Duration = (10, DAYS) // error\n\nval d2: scala.concurrent.duration.Duration = 10.days // error"
  }
]