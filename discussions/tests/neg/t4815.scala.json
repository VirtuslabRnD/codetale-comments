[
  {
    "id" : "88125b93-d9c0-4b8e-9e90-c1bd2862d38b",
    "prId" : 4850,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4850#pullrequestreview-141087277",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b02ea402-8743-4581-a8ce-7ba505f3c103",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "`scalac` rejects this. I think we should reject it as well",
        "createdAt" : "2018-07-26T16:42:03Z",
        "updatedAt" : "2018-07-27T16:38:08Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "116c0664-2a76-4bd7-af70-d8cc61d22a49",
        "parentId" : "b02ea402-8743-4581-a8ce-7ba505f3c103",
        "authorId" : "aa14f673-3d29-4a61-bf43-a86828212cf2",
        "body" : "I'm not sure I understand. We do reject this. This is what this PR does.",
        "createdAt" : "2018-07-27T09:36:47Z",
        "updatedAt" : "2018-07-27T16:38:08Z",
        "lastEditedBy" : "aa14f673-3d29-4a61-bf43-a86828212cf2",
        "tags" : [
        ]
      },
      {
        "id" : "3ab234f9-f5a6-4d5f-a2a4-4f30e8c23cc1",
        "parentId" : "b02ea402-8743-4581-a8ce-7ba505f3c103",
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "Sorry, it was meant for the line below (i.e. `final val v = 42`)",
        "createdAt" : "2018-07-27T09:38:28Z",
        "updatedAt" : "2018-07-27T16:38:08Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "95fa8fe3-8ec6-4c5f-a483-3789eb61c4eb",
        "parentId" : "b02ea402-8743-4581-a8ce-7ba505f3c103",
        "authorId" : "aa14f673-3d29-4a61-bf43-a86828212cf2",
        "body" : "Ah, I see. There's at least one test that uses this feature (constant value expression):\r\n- https://github.com/lampepfl/dotty/blob/946ba3f2d938b54e316749aef1c2ff117ecdb325/tests/run/tasty-eval/quoted_2.scala#L8\r\n- Additionally, it seem to be explicitly allowed by the spec: https://scala-lang.org/files/archive/spec/2.12/04-basic-declarations-and-definitions.html#value-declarations-and-definitions\r\n\r\n```\r\nA constant value definition is of the form\r\n\r\nfinal val x = e\r\n\r\nwhere e is a constant expression. The final modifier must be present and no type annotation may be given. References to the constant value x are themselves treated as constant expressions; in the generated code they are replaced by the definition's right-hand side e.\r\n```",
        "createdAt" : "2018-07-27T11:50:20Z",
        "updatedAt" : "2018-07-27T16:38:08Z",
        "lastEditedBy" : "aa14f673-3d29-4a61-bf43-a86828212cf2",
        "tags" : [
        ]
      },
      {
        "id" : "d72e0cae-25a5-4161-92ba-fd0697c3d710",
        "parentId" : "b02ea402-8743-4581-a8ce-7ba505f3c103",
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "This part of the spec only specifies what a constant value is, not where it is allowed. Looking at the [syntax part of the spec](https://scala-lang.org/files/archive/spec/2.12/13-syntax-summary.html), it doesn't seems to be allowed\r\n```\r\n  BlockStat         ::=  Import\r\n                      |  {Annotation} [‘implicit’ | ‘lazy’] Def\r\n                      |  {Annotation} {LocalModifier} TmplDef\r\n                      |  Expr1\r\n  Def               ::=  PatVarDef\r\n                      |  ‘def’ FunDef\r\n                      |  ‘type’ {nl} TypeDef\r\n                      |  TmplDef\r\n  PatVarDef         ::=  ‘val’ PatDef\r\n                      |  ‘var’ VarDef\r\n```",
        "createdAt" : "2018-07-27T12:10:39Z",
        "updatedAt" : "2018-07-27T16:38:08Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      }
    ],
    "commit" : "42fa9b24a13786277a84bf9f971d41d2636e0d04",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1,5 @@class Test {\n  def foo = {\n    final def bar = 1 // error: local def may not be final\n    final val v = 42 // error: local val may not be final\n    final var v2 = 100 // error: local var may not be final"
  }
]