[
  {
    "id" : "827eebd4-75c2-4936-8641-3562667d6f9c",
    "prId" : 5961,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5961#pullrequestreview-206206326",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e9d4c6b-c13f-4cc1-adb2-a598c17d8f02",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I'm wondering how we can use `a` properly in such context? We need to have some principles to deal with terms in types.",
        "createdAt" : "2019-02-21T09:01:12Z",
        "updatedAt" : "2019-02-21T09:48:58Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "7a566953-9532-436a-86b8-ea7e66348b00",
        "parentId" : "7e9d4c6b-c13f-4cc1-adb2-a598c17d8f02",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Maybe we could encode with something like\r\n\r\n```scala\r\ndef impl2[T: Type](a: MatcherFactory1)(self: Expr[T])(implicit ev: T =:= a.AndNotWord) = ...\r\n```",
        "createdAt" : "2019-02-21T09:43:22Z",
        "updatedAt" : "2019-02-21T09:48:58Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "e277ff2e4c4a450503de46450462f38e636a785c",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +8,12 @@  def impl2(a: MatcherFactory1)(self: Expr[a.AndNotWord]) =\n  '{ ~self } // error: access to value a from wrong staging level\n}"
  }
]