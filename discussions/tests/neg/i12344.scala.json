[
  {
    "id" : "cd8b05fc-067c-4f68-8e93-f50b7019a9b0",
    "prId" : 12353,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/12353#pullrequestreview-654300075",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a495cb85-043d-45f1-a598-c2229a24daa5",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Why is there an error with this one?",
        "createdAt" : "2021-05-06T15:30:27Z",
        "updatedAt" : "2021-05-06T17:13:09Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "4b190b52-5d2d-4209-95a7-2d6b1f1b533b",
        "parentId" : "a495cb85-043d-45f1-a598-c2229a24daa5",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "It seems like it should compile.",
        "createdAt" : "2021-05-06T15:31:44Z",
        "updatedAt" : "2021-05-06T17:13:09Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "3805e058-35e9-4107-a8b7-6704267883c2",
        "parentId" : "a495cb85-043d-45f1-a598-c2229a24daa5",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "As you mentioned in https://github.com/lampepfl/dotty/issues/12344#issuecomment-833351641, for the default parameters to apply, we do need double `()`:\r\n\r\n```Scala\r\ndef test1e(using q: Quotes) = new C()()\r\ndef test2e(using q: Quotes) = C()()\r\n```",
        "createdAt" : "2021-05-06T17:14:32Z",
        "updatedAt" : "2021-05-06T17:14:32Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "6801e8da-06d9-4ee3-9577-e52e27b1255f",
        "parentId" : "a495cb85-043d-45f1-a598-c2229a24daa5",
        "authorId" : "2ae9996c-0115-4b2e-8446-bad506884e67",
        "body" : "That goes against the design philosophy of `using` clauses though doesn't it? My understanding is that if `using` isn't specified at call-site then it shouldn't map to the `using` param clause. Having the first `()` map to the `using q` clause breaks that rule.",
        "createdAt" : "2021-05-06T23:28:24Z",
        "updatedAt" : "2021-05-06T23:28:24Z",
        "lastEditedBy" : "2ae9996c-0115-4b2e-8446-bad506884e67",
        "tags" : [
        ]
      },
      {
        "id" : "b7965e2c-01dd-4ad0-95eb-b78648409371",
        "parentId" : "a495cb85-043d-45f1-a598-c2229a24daa5",
        "authorId" : "317b625a-4db6-4333-bf57-152beea40aa0",
        "body" : "@japgolly I think there is no such mapping. It seems the ctor gets an initial empty param list that is not written, see the linked comment. The first explicit params in the call correspond to that one. This is perhaps more natural in Scala 2 where you expect auto-application and only one implicit at the end, so `new C` makes sense as `new C()(implicits)`. I see it must still be explicit in Scala 3 for case class: \"A case class must have at least one non-implicit parameter list\".",
        "createdAt" : "2021-05-07T00:38:02Z",
        "updatedAt" : "2021-05-07T00:38:03Z",
        "lastEditedBy" : "317b625a-4db6-4333-bf57-152beea40aa0",
        "tags" : [
        ]
      },
      {
        "id" : "9b732467-200a-4abe-af84-f0c90059b4a3",
        "parentId" : "a495cb85-043d-45f1-a598-c2229a24daa5",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Given a definition like the following:\r\n\r\n```Scala\r\nclass C(using Int)\r\nobject C\r\n```\r\n\r\nWithout prepending the constructor with`()`, the identifier `C` would be ambiguous (Scala 3 generailzes synthetic `apply` to [all classes][1] to avoid `new`).\r\n\r\nFor the example reported in #12344, the implicit parameter list comes after the `synthetic` empty parameter list `()`, and finally follows the default parameter list.\r\n\r\n[1]: http://dotty.epfl.ch/docs/reference/other-new-features/creator-applications.html",
        "createdAt" : "2021-05-07T10:13:25Z",
        "updatedAt" : "2021-05-07T10:13:26Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8b823fd300ee3b56655a0adbe4bcdf59212e416",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +8,12 @@def test4a(using q: Quotes) = new C(f = q.reflect.Flags.Lazy)   // error\n\ndef test1b(using q: Quotes) = C()                               // error\ndef test2b(using q: Quotes) = C(1)                              // error\ndef test3b(using q: Quotes) = C(1, q.reflect.Flags.Lazy)        // error"
  },
  {
    "id" : "244463eb-d1e7-40fd-ae61-884f132ced4f",
    "prId" : 12353,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/12353#pullrequestreview-653971659",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87e064d5-3754-4dcd-b05d-1f5407307396",
        "parentId" : null,
        "authorId" : "2ae9996c-0115-4b2e-8446-bad506884e67",
        "body" : "Similarly, I understand that these work now but that's part of the bug - these 2 lines shouldn't work. There's only one non-`using` param clause, it shouldn't be possible to specific two non-`using` clauses at call-site.",
        "createdAt" : "2021-05-06T23:29:50Z",
        "updatedAt" : "2021-05-06T23:29:50Z",
        "lastEditedBy" : "2ae9996c-0115-4b2e-8446-bad506884e67",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8b823fd300ee3b56655a0adbe4bcdf59212e416",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +24,28 @@\ndef test1e(using q: Quotes) = new C()()\ndef test2e(using q: Quotes) = C()()"
  }
]