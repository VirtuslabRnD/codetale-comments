[
  {
    "id" : "594b13ef-25fc-4884-92d7-94b7a26c55d4",
    "prId" : 28465,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28465#pullrequestreview-196753635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e1b2303-a7a1-4b7b-9683-907110464dfc",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Should this error be any other file than the declaration of const enum file? ",
        "createdAt" : "2019-01-24T23:53:52Z",
        "updatedAt" : "2019-02-02T02:53:03Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "1df0890e-b22b-43b8-9990-238bcf83c157",
        "parentId" : "5e1b2303-a7a1-4b7b-9683-907110464dfc",
        "authorId" : "c1baea4c-328f-4ae3-a816-64bf17e8a190",
        "body" : "The intention with this change is for the error to be on the *access*, not on the *declaration*, so in practice it could be in a completely different file than the const enum declaration. In a typical case, I might import the `chalk` library, which shouldn't error, but any attempt to use the `Level` enum should error.\r\n\r\nI could see an argument for putting an additional error on the const enum (like before), but the point of this change is that simply declaring a const enum is *not* an error anymore; the error is if you try to use it.",
        "createdAt" : "2019-01-25T20:53:32Z",
        "updatedAt" : "2019-02-02T02:53:03Z",
        "lastEditedBy" : "c1baea4c-328f-4ae3-a816-64bf17e8a190",
        "tags" : [
        ]
      },
      {
        "id" : "44b38ff2-8573-442b-8491-7383138a0a31",
        "parentId" : "5e1b2303-a7a1-4b7b-9683-907110464dfc",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Yes the error is on access but declaring const enum a {} and using a in module1 shouldn't cause error. It should cause when accessing in module2...n instead?",
        "createdAt" : "2019-01-25T21:10:10Z",
        "updatedAt" : "2019-02-02T02:53:03Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "7d3df882-6250-4354-a27d-6336669551a8",
        "parentId" : "5e1b2303-a7a1-4b7b-9683-907110464dfc",
        "authorId" : "c1baea4c-328f-4ae3-a816-64bf17e8a190",
        "body" : "Got it. I just tested it a bit more, and I believe the error still makes sense even within the same file. To be clear, this only happens with `isolatedModules` enabled and only happens for *ambient* const enums (the `declare` is necessary in the code above example).\r\n\r\nFrom my testing, it looks like with `isolatedModules` enabled, const enums are *always* compiled as plain enums and const enum accesses are *always* compiled as plain enum accesses, even when the const enum is in the same file. That means that in this code snippet, the first line is erased (since it's a `declare`) and the second line is compiled as-is as `export var y = E.X`. With `isolatedModules`, TypeScript will not inline the constant even within the same file, so this code would crash at runtime (because `E` doesn't exist) even though it would work at runtime without `isolatedModules`. So I think it's fair for TS to error here.\r\n\r\nIt certainly seems like a reasonable future improvement to implement inlining within the same file even when `isolatedModules` is on. In that case, this error could be limited to cross-file accesses, but for now, even same-file ambient const enum accesses need to be errors. This would also require the Babel implementation to implement same-file constant inlining.",
        "createdAt" : "2019-01-25T23:38:43Z",
        "updatedAt" : "2019-02-02T02:53:03Z",
        "lastEditedBy" : "c1baea4c-328f-4ae3-a816-64bf17e8a190",
        "tags" : [
        ]
      }
    ],
    "commit" : "942b020081911d4547ab6f72db5a22786a8ec8e6",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +4,8 @@==== tests/cases/compiler/file1.ts (1 errors) ====\n    declare const enum E { X = 1}\n    export var y = E.X;\n                   ~\n!!! error TS2748: Cannot access ambient const enums when the '--isolatedModules' flag is provided."
  }
]