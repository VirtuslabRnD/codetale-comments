[
  {
    "id" : "e4276139-7f6e-4dee-b482-7cb1f67ecc1f",
    "prId" : 39669,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39669#pullrequestreview-622572423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0c4fc26-42e4-46ee-8f83-aa3e12243994",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Oh, sorry if I missed earlier discussion on this, but I donâ€™t think `override` should be required to implement an abstract method. (Itâ€™s not _really_ overriding anything.)",
        "createdAt" : "2020-09-16T18:11:37Z",
        "updatedAt" : "2021-03-26T06:56:55Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "56ed9efd-110d-43c4-a7ff-36688ca1b485",
        "parentId" : "b0c4fc26-42e4-46ee-8f83-aa3e12243994",
        "authorId" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "body" : "Should we raise an error if use override with implement abstract method?",
        "createdAt" : "2020-09-16T18:34:34Z",
        "updatedAt" : "2021-03-26T06:56:55Z",
        "lastEditedBy" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "tags" : [
        ]
      },
      {
        "id" : "2f400c5f-ea5d-4a66-9be2-70843b98daf5",
        "parentId" : "b0c4fc26-42e4-46ee-8f83-aa3e12243994",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "That's what would make sense to me, but I donâ€™t feel too strongly about itâ€”@DanielRosenwasser what do you think?",
        "createdAt" : "2020-09-16T18:40:23Z",
        "updatedAt" : "2021-03-26T06:56:55Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "d4a38c78-a031-4f9b-8a87-5ab7084bc549",
        "parentId" : "b0c4fc26-42e4-46ee-8f83-aa3e12243994",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I guess if you rename in the base class, you won't run into issues. Still seems surprising.\r\n\r\nOne thing to be sure of is that if you are re-declaring an `abstract` member in a class (i.e. it's still marked as `abstract`), then you MUST use an `override` keyword.",
        "createdAt" : "2020-09-16T18:45:45Z",
        "updatedAt" : "2021-03-26T06:56:55Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "966e0adc-607b-44bd-81f6-9f730a57f5ea",
        "parentId" : "b0c4fc26-42e4-46ee-8f83-aa3e12243994",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Yeah, this is what Iâ€™d expect:\r\n\r\n```ts\r\nabstract class Base {\r\n  abstract foo(): unknown;\r\n  abstract bar(): void;\r\n}\r\n\r\n// No errors:\r\nclass Sub extends Base {\r\n  override abstract foo(): number;\r\n  bar() {\r\n    return;\r\n  }\r\n}\r\n```",
        "createdAt" : "2020-09-16T18:51:31Z",
        "updatedAt" : "2021-03-26T06:56:55Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "d0411899-862c-4fa7-ab0b-847a815bfb17",
        "parentId" : "b0c4fc26-42e4-46ee-8f83-aa3e12243994",
        "authorId" : "184c886e-007c-42e3-b591-2f0cc0bd5d23",
        "body" : "Peanut gallery comment:\r\n\r\nI think `override` is useful to indicate that this method must match a parent type's declaration, so that you get an early error if your implementation doesn't match.\r\n\r\nE.g. if you have `abstract class Parent { method(): string; }` and `class Child extends Parent { method() { return 'x'; } }`. Now `Parent` changes to `abstract class Parent { myMethod(): string; }`. You'll get an error about incorrectly extending `Parent` (OK), but it'd also be nice to get a message about `method()` no longer overriding (well, implementing) a parent signature.\r\n\r\nThis is particularly useful in large classes, where it might be confusing what changed and what method no longer matches.",
        "createdAt" : "2020-09-16T18:52:35Z",
        "updatedAt" : "2021-03-26T06:56:55Z",
        "lastEditedBy" : "184c886e-007c-42e3-b591-2f0cc0bd5d23",
        "tags" : [
        ]
      },
      {
        "id" : "b269c872-163e-4cac-95df-66d06f2e6ea9",
        "parentId" : "b0c4fc26-42e4-46ee-8f83-aa3e12243994",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "@andrewbranch I switched your comment to use `unknown` just because `void` in base, `number` in derived seems suspicious",
        "createdAt" : "2020-09-16T18:53:44Z",
        "updatedAt" : "2021-03-26T06:56:55Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "b006e2f0-0c2d-4b5d-bf38-2f5e764d8a3d",
        "parentId" : "b0c4fc26-42e4-46ee-8f83-aa3e12243994",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Yeah, thatâ€™s less sketchy, but `void` does work ðŸ¤· https://www.typescriptlang.org/play?#code/IYIwzgLgTsDGEAJYBthjAgQmgpgg3gFAIKiQzwIBmA9jQBQCUAXAgG40CWAJgNzGlw0OIhDAoTVhx78AvoUJlhlFGgwBlAK4gEOAB4QcAO24ZsYPERJKKiWgxYIjmgLYgcUOUA",
        "createdAt" : "2020-09-16T18:55:39Z",
        "updatedAt" : "2021-03-26T06:56:55Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "e5c2d8df-fffa-49cf-8b71-4fa7d9d8e8d6",
        "parentId" : "b0c4fc26-42e4-46ee-8f83-aa3e12243994",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "@mprobst I think that the current message there is\r\n\r\n```\r\nNon-abstract class 'Child' does not implement inherited abstract member 'myMethod' from class 'Parent'.\r\n```\r\n\r\nis there something I'm missing?",
        "createdAt" : "2020-09-16T18:56:16Z",
        "updatedAt" : "2021-03-26T06:56:55Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "de48230f-687e-4d1e-9bce-bd0954d18c3a",
        "parentId" : "b0c4fc26-42e4-46ee-8f83-aa3e12243994",
        "authorId" : "184c886e-007c-42e3-b591-2f0cc0bd5d23",
        "body" : "If users were able to put `override` on method, you'd get:\r\n\r\n```\r\nNon-abstract class 'Child' does not implement inherited abstract member 'myMethod' from class 'Parent'.\r\nMethod 'method' of 'Child' must override a super type method (or some such)\r\n```\r\n\r\nI'm arguing that it's useful to get the second error message, to more quickly determine what went wrong.\r\n\r\nThere's also the scenario where you refactor such that an interface you implement no longer needs you to implement `method`. With `override` on implementing methods, you'll get an error for code that's no longer useful.",
        "createdAt" : "2020-09-16T19:09:51Z",
        "updatedAt" : "2021-03-26T06:56:55Z",
        "lastEditedBy" : "184c886e-007c-42e3-b591-2f0cc0bd5d23",
        "tags" : [
        ]
      },
      {
        "id" : "9e3618f1-aa26-4dcd-82d5-c6c6a4f9f351",
        "parentId" : "b0c4fc26-42e4-46ee-8f83-aa3e12243994",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "@mprobst seems like something somewhat similar to weak type checks - but what would that specific check be? When do you know that *some* method needs to be overridden? When everything is protected or private?",
        "createdAt" : "2021-03-26T22:34:57Z",
        "updatedAt" : "2021-03-26T22:34:58Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4575b5a9921ad54be01de6431c11fa8aafd4089e",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +22,26 @@    \n    abstract class AD3 extends AB {\n        override foo(v: ''): void { } // need override?\n        abstract bar(): void;\n                 ~~~"
  }
]