[
  {
    "id" : "806967f4-39be-479b-98eb-a35803d963cb",
    "prId" : 22692,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22692#pullrequestreview-105155463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5dbd3447-695f-4a34-ac81-bb40f71518ab",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Do you know why we infer a literal type here now? AFAIK we only generate a literal if the contextual type of the literal is the same domain as the literal itself, which would imply that the contextual type here is `string`, which seems wrong, given the annotation above.",
        "createdAt" : "2018-03-19T21:30:20Z",
        "updatedAt" : "2018-03-19T22:17:00Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "421c3eb0-c7eb-42be-847c-d77bb85c1ea6",
        "parentId" : "5dbd3447-695f-4a34-ac81-bb40f71518ab",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "The inferred type of \"0\" is for the initialiser, which was already of type \"0\" (see the type baselines below). You get the same error in Typescript with an type annotation, too:\r\n\r\n```ts\r\nfunction f(x: number = \"hi\") {\r\n}\r\n```\r\n\r\nGives the error \"Type \"hi\" is not assignable to type 'number'.\" This error is expected now that `num` is of type `number` from contextual typing. Previously the arrow was typed with no contextual type, then assigned to `arrowFunc` and checked against its type annotation.",
        "createdAt" : "2018-03-19T21:40:10Z",
        "updatedAt" : "2018-03-19T22:17:00Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "94e01c9a-56de-47e0-a1db-7aa74b1b34f8",
        "parentId" : "5dbd3447-695f-4a34-ac81-bb40f71518ab",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Hm. OK.",
        "createdAt" : "2018-03-19T21:45:37Z",
        "updatedAt" : "2018-03-19T22:17:00Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "827f1a69-1c12-479c-bf66-dfe6bd467e40",
        "parentId" : "5dbd3447-695f-4a34-ac81-bb40f71518ab",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "It's not great, but it's consistent with the rest of the the compiler. Note that our baselines have gone back and forth on this in the last year or two.",
        "createdAt" : "2018-03-19T21:57:10Z",
        "updatedAt" : "2018-03-19T22:17:00Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "deba8e282459954e2dad7ceba35ce1b604e3c44c",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +33,37 @@      arrowFunc: (num=\"0\") => num + 42,\n                  ~~~~~~~\n!!! error TS2322: Type '\"0\"' is not assignable to type 'number'.\n      /** @type {string} */\n      lol"
  }
]