[
  {
    "id" : "2e513d34-4550-482d-9b73-78f4973c6e65",
    "prId" : 30829,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30829#pullrequestreview-257467417",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc9f1282-d1ac-420e-8a99-5e9923741531",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "what does the spec say about `C[#foo]`? It would be good to mention that in the comment.",
        "createdAt" : "2019-07-02T16:17:38Z",
        "updatedAt" : "2019-12-24T10:22:58Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "1d3074bd-3351-45c8-a247-9f52db2d41c8",
        "parentId" : "dc9f1282-d1ac-420e-8a99-5e9923741531",
        "authorId" : "7c818427-dca2-4bb8-94a1-f7e70e4a264a",
        "body" : "`C[#foo]` isn't allowed in JS.\r\n\r\nWe *may* want syntax like this at the type level in future: `const x: C[#foo]` (@DanielRosenwasser pointed this out).\r\nBut we punted on a type-level syntax, because we would want to use something familiar that isn't clashy and work on runtime metaprogramming for private names (decorators proposal I think) is still in flux.\r\n",
        "createdAt" : "2019-07-03T12:57:40Z",
        "updatedAt" : "2019-12-24T10:22:58Z",
        "lastEditedBy" : "7c818427-dca2-4bb8-94a1-f7e70e4a264a",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbb84d1e81b35f944d994f6c71c3eda40f944b85",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +15,19 @@        constructor () {\n            const ok: C[\"foo\"] = 3;\n            // not supported yet, could support in future:\n            const badForNow: C[#bar] = 3;   // Error\n                               ~~~~"
  }
]