[
  {
    "id" : "b19a9550-9935-4147-8346-3bb715580ea5",
    "prId" : 30790,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30790#pullrequestreview-250800850",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf6d5ee7-95ac-4f92-bd33-38e8d5e1ffe4",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "How does\r\n```ts\r\nfunction* g307<T>() {\r\n    const a: T = yield 0;\r\n    return a;\r\n}\r\n```\r\nbehave? and how usable is it? Eg, when I say `g307().next().next(\"ok\").value`, is the result going to be `unknown` (rather than, eg, `string`) because only the `g307` call is used for inference? Some more tests with generics smattered about within the generators would be nice.",
        "createdAt" : "2019-06-11T20:38:46Z",
        "updatedAt" : "2019-07-04T03:48:16Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "660a2274-2bec-4900-a179-0957a412183a",
        "parentId" : "bf6d5ee7-95ac-4f92-bd33-38e8d5e1ffe4",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "It would be `unknown`. This is akin to `new Set()` defaulting `T` to `unknown`, and is no more or less usable than that case.",
        "createdAt" : "2019-06-17T22:01:54Z",
        "updatedAt" : "2019-07-04T03:48:16Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "369a329e-2061-4118-b018-046f9e6d2a82",
        "parentId" : "bf6d5ee7-95ac-4f92-bd33-38e8d5e1ffe4",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I've added some additional tests.",
        "createdAt" : "2019-06-17T23:53:08Z",
        "updatedAt" : "2019-07-04T03:48:16Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f94886850b185bce3e442c40d7b638890f0de7b",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +132,136 @@\t})();\n}\n\n\n//// [generatorReturnTypeInference.js]"
  }
]