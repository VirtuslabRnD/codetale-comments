[
  {
    "id" : "c64b9b65-b662-4f98-a875-47d12de75ede",
    "prId" : 32064,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32064#pullrequestreview-266355821",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b676a2fd-6501-4832-b64f-943479c2f27c",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "All these computed property name symbol baseline changes are a bit odd... do you know what caused this?",
        "createdAt" : "2019-07-24T22:48:21Z",
        "updatedAt" : "2019-09-27T17:36:57Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "c2d41e7c-4577-42f8-b8ce-6b69af515f17",
        "parentId" : "b676a2fd-6501-4832-b64f-943479c2f27c",
        "authorId" : "4271dfc6-881a-4a6a-a9fe-ced42336f1e2",
        "body" : "These are result of commit https://github.com/microsoft/TypeScript/pull/32064/commits/30ff9643166b9216b24adbc85cd1c64d3453877f\r\n\r\nIntent was to bring template literals into line with numbers and regular strings in computed property names.\r\nThey produce separate symbols for names https://github.com/microsoft/TypeScript/pull/32064/files/caef2dc945cbb42cbfb021d9737f07033916180d#diff-739db372f229c7fa65d1a1da3101251aR36-R42\r\n\r\n[This one](https://github.com/microsoft/TypeScript/pull/32064/commits/30ff9643166b9216b24adbc85cd1c64d3453877f) and [last commit](https://github.com/microsoft/TypeScript/pull/32064/commits/caef2dc945cbb42cbfb021d9737f07033916180d) were under question for me, because I haven't found what exact behavior they will enable except unifying produced symbols and types with string literals in similar condition.\r\n\r\n",
        "createdAt" : "2019-07-25T00:25:35Z",
        "updatedAt" : "2019-09-27T17:36:57Z",
        "lastEditedBy" : "4271dfc6-881a-4a6a-a9fe-ced42336f1e2",
        "tags" : [
        ]
      },
      {
        "id" : "9fc72f25-3152-415d-9e58-38f3c1d9711d",
        "parentId" : "b676a2fd-6501-4832-b64f-943479c2f27c",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Huh, interesting. I think thatâ€™s probably fine, then.",
        "createdAt" : "2019-07-25T00:41:18Z",
        "updatedAt" : "2019-09-27T17:36:57Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "5781fdcd-c611-4252-8cdd-a346b34b232e",
        "parentId" : "b676a2fd-6501-4832-b64f-943479c2f27c",
        "authorId" : "4271dfc6-881a-4a6a-a9fe-ced42336f1e2",
        "body" : "I have no strong opinion about these commits and will revert if anyone considers its necessary.\r\n\r\nThese were found as comparisons of `StringLiteral` and `NoSubstitutionTemplateLiteral` usages. I would expect that last 2 commits will help in services (not included in this PR) but looks like there are a lot of differences that filter out template literals before symbols for them will be checked (which will need separate investigation). ",
        "createdAt" : "2019-07-25T01:00:01Z",
        "updatedAt" : "2019-09-27T17:36:57Z",
        "lastEditedBy" : "4271dfc6-881a-4a6a-a9fe-ced42336f1e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "169566a34923c10097cfe30e82491e68b1d3b9ab",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +51,55 @@    [`hello bye`]() { },\n>[`hello bye`] : Symbol([`hello bye`], Decl(computedPropertyNames10_ES5.ts, 12, 22))\n>`hello bye` : Symbol([`hello bye`], Decl(computedPropertyNames10_ES5.ts, 12, 22))\n\n    [`hello ${a} bye`]() { }"
  }
]