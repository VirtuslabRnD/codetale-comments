[
  {
    "id" : "3c7f05ba-6ec7-45d3-9487-75689c60a045",
    "prId" : 43033,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43033#pullrequestreview-601878738",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b383582-641b-4a9d-89b1-5360fc429b70",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Not sure how I feel about changing the public API on these, but maybe it's fine.",
        "createdAt" : "2021-03-02T06:08:24Z",
        "updatedAt" : "2021-03-02T18:06:39Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "e998fb13-3c89-498f-9374-5eef269a7b54",
        "parentId" : "9b383582-641b-4a9d-89b1-5360fc429b70",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I think it's fine: they just make the function easier to call, and they're on functions that already return `undefined` or `boolean`, which implies (correctly) that they pass through `undefined` if you call them.",
        "createdAt" : "2021-03-02T14:31:13Z",
        "updatedAt" : "2021-03-02T18:06:39Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "c14118d6879e780eb89fd72dfddd8a281b94c63e",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +4108,4112 @@    function symbolName(symbol: Symbol): string;\n    function getNameOfJSDocTypedef(declaration: JSDocTypedefTag): Identifier | PrivateIdentifier | undefined;\n    function getNameOfDeclaration(declaration: Declaration | Expression | undefined): DeclarationName | undefined;\n    /**\n     * Gets the JSDoc parameter tags for the node if present."
  },
  {
    "id" : "697e81e4-fbb0-4011-b70b-d45ac0b5d16b",
    "prId" : 42640,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42640#pullrequestreview-584439112",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de53894d-17a7-47a8-ae1c-a8ab93a7c5b4",
        "parentId" : null,
        "authorId" : "1d4633b6-c940-4836-914c-864f47cc37f8",
        "body" : "Do we also need to add the response types? We currently have to maintain a copy of them in VS Code: https://github.com/microsoft/vscode/blob/3d500ebd8b4a919e8631e916f417e5c68eb90d3f/extensions/typescript-language-features/src/languageFeatures/semanticTokens.ts#L275",
        "createdAt" : "2021-02-04T19:11:06Z",
        "updatedAt" : "2021-02-25T17:17:08Z",
        "lastEditedBy" : "1d4633b6-c940-4836-914c-864f47cc37f8",
        "tags" : [
        ]
      },
      {
        "id" : "0e98d4c8-e53b-40d6-92d1-38465240631c",
        "parentId" : "de53894d-17a7-47a8-ae1c-a8ab93a7c5b4",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Arenâ€™t they in typescript/tsserver .d.ts ?",
        "createdAt" : "2021-02-04T19:37:21Z",
        "updatedAt" : "2021-02-25T17:17:08Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "3d10de2d-fcf4-4abd-b7b2-51f9509ea0cc",
        "parentId" : "de53894d-17a7-47a8-ae1c-a8ab93a7c5b4",
        "authorId" : "1d4633b6-c940-4836-914c-864f47cc37f8",
        "body" : "We currently only use `protocol.d.ts` with VS Code. I think this should have all the types used communicating from or to tsserver",
        "createdAt" : "2021-02-04T19:46:52Z",
        "updatedAt" : "2021-02-25T17:17:08Z",
        "lastEditedBy" : "1d4633b6-c940-4836-914c-864f47cc37f8",
        "tags" : [
        ]
      },
      {
        "id" : "978d1178-a633-4321-81f0-40501313720e",
        "parentId" : "de53894d-17a7-47a8-ae1c-a8ab93a7c5b4",
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "Makes sense, added",
        "createdAt" : "2021-02-05T15:22:36Z",
        "updatedAt" : "2021-02-25T17:17:08Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      }
    ],
    "commit" : "26a0afdb5f01b5dbaf7444ffe14249f217c6bebf",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +7137,7141 @@     * A request to get encoded semantic classifications for a span in the file\n     */\n    interface EncodedSemanticClassificationsRequest extends FileRequest {\n        arguments: EncodedSemanticClassificationsRequestArgs;\n    }"
  },
  {
    "id" : "740f1e84-9ea7-4bab-b65e-c09b30ca16a0",
    "prId" : 42392,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42392#pullrequestreview-604451922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49770d0f-125d-409b-9a1d-2fb355d0ee2f",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "@sandersn is the best person to judge if this is appropriate",
        "createdAt" : "2021-01-22T07:56:51Z",
        "updatedAt" : "2021-03-04T18:35:22Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "f56ca0ed-691a-42d7-91ab-d155c0cfcce0",
        "parentId" : "49770d0f-125d-409b-9a1d-2fb355d0ee2f",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "@DanielRosenwasser Yes, you are right. Quick note: `try {} catch (/** @type {unknown} */ e) {}` - `e` is a `VariableDeclaration`, and in the current implementation, JSDoc comment is not attached to `e`. To have the opportunity to add a type declaration node has to have JSDoc, these changes related to that. Does that make sense?  If there is a better way to do this, I can change that.",
        "createdAt" : "2021-01-22T08:31:36Z",
        "updatedAt" : "2021-03-04T18:35:22Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      },
      {
        "id" : "ccc52189-bfde-425f-bc8b-cc2a08568503",
        "parentId" : "49770d0f-125d-409b-9a1d-2fb355d0ee2f",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "No, I think this is the best way.\r\nIn fact, in normal `var` declarations, we don't currently look for jsdoc on VariableDeclarations, meaning that `x: boolean` and `y: boolean` below, instead of `string` and `number` (or error, because of the conflict).\r\n\r\n```js\r\n/** @type {boolean} */\r\nvar /** @type {string} */ x, /** @type {number} */ y;\r\n```\r\n\r\nActually, can you add the above as a test? I wonder how much of that will Just Work after this change. It's likely that quite a bit of it will, because there's no walking up the tree required.\r\n\r\nIf it *doesn't*, that's fine; we haven't had anybody ask for it, nor have we gone looking whether it's a common pattern (my guess is No).",
        "createdAt" : "2021-03-04T17:52:15Z",
        "updatedAt" : "2021-03-04T18:35:22Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "6fd9dec6-155b-4458-a3ca-fe55ebe3e530",
        "parentId" : "49770d0f-125d-409b-9a1d-2fb355d0ee2f",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "> Actually, can you add the above as a test? \r\n\r\n@sandersn I've added a test and the other tests seem to work fine.",
        "createdAt" : "2021-03-04T19:03:22Z",
        "updatedAt" : "2021-03-04T19:03:22Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7db471230b1772c3e3f3f6a4d6995bd0b8dde082",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +688,692 @@    }\n    export type BindingName = Identifier | BindingPattern;\n    export interface VariableDeclaration extends NamedDeclaration, JSDocContainer {\n        readonly kind: SyntaxKind.VariableDeclaration;\n        readonly parent: VariableDeclarationList | CatchClause;"
  },
  {
    "id" : "bf96a1cc-2adb-4669-93bc-be93d5a87b0a",
    "prId" : 40347,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40347#pullrequestreview-480158115",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d083e13-3740-4ad1-b9ec-5f52418771e1",
        "parentId" : null,
        "authorId" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "body" : "You missed another `",
        "createdAt" : "2020-09-01T21:15:58Z",
        "updatedAt" : "2020-09-01T22:25:27Z",
        "lastEditedBy" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "tags" : [
        ]
      },
      {
        "id" : "cceee79c-2b0e-4346-b89f-861d2c2a0531",
        "parentId" : "7d083e13-3740-4ad1-b9ec-5f52418771e1",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Copy pasta\r\n\r\n```suggestion\r\n         * In the absence of `CompletionEntry[\"replacementSpan\"]`, the editor may choose whether to use\r\n```",
        "createdAt" : "2020-09-01T22:22:44Z",
        "updatedAt" : "2020-09-01T22:25:27Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd7dbe0e87ca743820ec2a0d419eba429c7d8e82",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +5966,5970 @@        isMemberCompletion: boolean;\n        /**\n         * In the absence of `CompletionEntry[\"replacementSpan\"], the editor may choose whether to use\n         * this span or its default one. If `CompletionEntry[\"replacementSpan\"]` is defined, that span\n         * must be used to commit that completion entry."
  },
  {
    "id" : "e1b6b4ed-0749-481e-8b68-97eb440545d4",
    "prId" : 38273,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38273#pullrequestreview-403811860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81bdf86b-855e-4532-863e-a4c3ad2e0db9",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This would be a break if we want it for 3.9.  Any way we can avoid it?",
        "createdAt" : "2020-04-30T19:21:14Z",
        "updatedAt" : "2020-04-30T19:21:15Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "763fefed-eb97-47dd-a4a4-f4c909fe9d15",
        "parentId" : "81bdf86b-855e-4532-863e-a4c3ad2e0db9",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Easily - now that I've used it to audit our internal usages, swapping it back is pretty simple; changing it is just for safety at callsites (so we may still want it for the 4.0 branch, where we may eventually add more).",
        "createdAt" : "2020-04-30T19:23:47Z",
        "updatedAt" : "2020-04-30T19:24:29Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "c80c177b448fa30c1c33976fad11a32e7d5292d9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2041,2045 @@        getTypeArguments(type: TypeReference): readonly Type[];\n        /** Note that the resulting nodes cannot be checked. */\n        typeToTypeNode(type: Type, enclosingDeclaration: Node | undefined, flags: NodeBuilderFlags | undefined): TypeNode | undefined;\n        /** Note that the resulting nodes cannot be checked. */\n        signatureToSignatureDeclaration(signature: Signature, kind: SyntaxKind, enclosingDeclaration: Node | undefined, flags: NodeBuilderFlags | undefined): (SignatureDeclaration & {"
  },
  {
    "id" : "7f16c088-3958-4385-aeb8-eeb0c46a308d",
    "prId" : 37871,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37871#pullrequestreview-435263262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de13e537-32fe-48a1-a8da-c3ecf6a2d1f6",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I feel like I'm missing something obvious, but shouldn't there also be a protocol change for this?",
        "createdAt" : "2020-06-22T21:09:29Z",
        "updatedAt" : "2020-06-22T21:09:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf992adf4bc5ee923a93b51bcaf230ec713f2086",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3790,3794 @@        readonly allowTextChangesInNewFiles?: boolean;\n        readonly providePrefixAndSuffixTextForRename?: boolean;\n        readonly provideRefactorNotApplicableReason?: boolean;\n    }\n    /** Represents a bigint literal value without requiring bigint support */"
  },
  {
    "id" : "75970e3d-9cb0-474f-9b1f-11a3c829b6b2",
    "prId" : 36383,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36383#pullrequestreview-348276034",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20e8075f-4269-4b77-9554-d8c32cb43797",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Wait, isn't this a breaking protocol change?  Don't we have to add a parallel array of flags that may or may not be provided?",
        "createdAt" : "2020-01-24T00:47:15Z",
        "updatedAt" : "2020-01-28T19:30:43Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "24be0d77-54d1-4849-ac9f-f02c008cedb9",
        "parentId" : "20e8075f-4269-4b77-9554-d8c32cb43797",
        "authorId" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "body" : "I think the idea is that it would only return the new type if the client asked for it in the request. (Maybe this should be clarified in the doc comment for the property though)",
        "createdAt" : "2020-01-24T03:57:45Z",
        "updatedAt" : "2020-01-28T19:30:43Z",
        "lastEditedBy" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "tags" : [
        ]
      },
      {
        "id" : "42decabb-631d-4528-9f56-b1ab8322e6d0",
        "parentId" : "20e8075f-4269-4b77-9554-d8c32cb43797",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "Updated the doc comment to clarify this. :)",
        "createdAt" : "2020-01-24T23:17:42Z",
        "updatedAt" : "2020-01-28T19:30:43Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dd89ca57bc7dd93b8772ef1927777d6e63e9d3d",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +7071,7075 @@         * List of added files\n         */\n        added: string[] | FileWithProjectReferenceRedirectInfo[];\n        /**\n         * List of removed files"
  },
  {
    "id" : "4ad621d8-fe6f-4648-854b-c4aea208e2ed",
    "prId" : 32517,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32517#pullrequestreview-279819628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6f534df-847c-490b-bda1-fffc3810be1e",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "This comment was previously not a properly formed JSDoc format so it didnâ€™t show up here. I just added an extra `*`.",
        "createdAt" : "2019-08-26T20:29:36Z",
        "updatedAt" : "2019-09-27T17:46:45Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "213a370aa94ca3c29356a7a451523315238cf26f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2645,2649 @@         * @deprecated typingOptions.enableAutoDiscovery\n         * Use typeAcquisition.enable instead.\n         */\n        enableAutoDiscovery?: boolean;\n        enable?: boolean;"
  },
  {
    "id" : "ba9ee9db-d284-4926-a66d-fc43f5332a6a",
    "prId" : 29085,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29085#pullrequestreview-203531944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e939f5e-07f7-47a9-973b-8ba4a0249010",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I thought this had already been addressed in #29783?",
        "createdAt" : "2019-02-14T01:03:46Z",
        "updatedAt" : "2019-02-20T22:31:28Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "af0ec48e-daec-491e-a96c-3176990d04eb",
        "parentId" : "9e939f5e-07f7-47a9-973b-8ba4a0249010",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I un-addressed it to make the nightlies build again.",
        "createdAt" : "2019-02-14T01:26:39Z",
        "updatedAt" : "2019-02-20T22:31:28Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "d86895a880f2dda6704ca7ac72c56f96aff4d0ce",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +8348,8352 @@        private typeAcquisition;\n        updateGraph(): boolean;\n        getExcludedFiles(): ReadonlyArray<NormalizedPath>;\n        getTypeAcquisition(): TypeAcquisition;\n        setTypeAcquisition(newTypeAcquisition: TypeAcquisition): void;"
  },
  {
    "id" : "ddc5357b-c920-4247-9423-207908d2ca5e",
    "prId" : 25439,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25439#pullrequestreview-134455964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4027cd8b-72c5-48bc-a256-4287aa623ef9",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "I don't think this should be included in the declaration file. I'll open a separate issue for that",
        "createdAt" : "2018-07-04T18:56:06Z",
        "updatedAt" : "2018-07-04T18:56:07Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      }
    ],
    "commit" : "c54c5f45c0184214ead412eee8eee3e3eb1a5b68",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +8372,8376 @@    function parenthesizeTypeParameters(typeParameters: ReadonlyArray<TypeNode> | undefined): MutableNodeArray<TypeNode> | undefined;\n    function parenthesizeConciseBody(body: ConciseBody): ConciseBody;\n    function isCommaSequence(node: Expression): node is (BinaryExpression & {\n        operatorToken: Token<SyntaxKind.CommaToken>;\n    }) | CommaListExpression;"
  },
  {
    "id" : "e36e2fff-f045-4a62-bf37-fad1bc2df975",
    "prId" : 25312,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25312#pullrequestreview-133061659",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c42e67d9-f70e-44a3-b4fa-0e9f141e44dc",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This is an internal-only change. (#24966)",
        "createdAt" : "2018-06-28T23:59:50Z",
        "updatedAt" : "2018-06-28T23:59:50Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "04ffaef8e80598cff174fcb19fb7de4590250b50",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +6169,6173 @@    function isExternalOrCommonJsModule(file: SourceFile): boolean;\n    function isJsonSourceFile(file: SourceFile): file is JsonSourceFile;\n    function isEnumConst(node: EnumDeclaration): boolean;\n    function isVarConst(node: VariableDeclaration | VariableDeclarationList): boolean;\n    function isLet(node: Node): boolean;"
  },
  {
    "id" : "d6b17cca-7233-4f2f-b841-905159676897",
    "prId" : 22801,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22801#pullrequestreview-106298872",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc7f5073-4b66-477d-b6b4-c0084ec1f405",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Well...this is just `0` now, so it doesn't seem necessary :D",
        "createdAt" : "2018-03-22T20:13:05Z",
        "updatedAt" : "2018-03-22T21:11:02Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "33e2ea10-99c2-42c6-bc24-7dc410b797d1",
        "parentId" : "bc7f5073-4b66-477d-b6b4-c0084ec1f405",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Nah. It's only zero because `SingleLine` desugars to zero because reasons (because it's the default). It still carries semantic meaning should we choose to adjust the list format again in the future, as it is a very unique list kind.",
        "createdAt" : "2018-03-22T20:56:51Z",
        "updatedAt" : "2018-03-22T21:11:02Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "57fae71bf1c7d0c346ee3fbb11bc1073f347ffb5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2824,2828 @@        SingleLineFunctionBodyStatements = 384,\n        MultiLineFunctionBodyStatements = 1,\n        ClassHeritageClauses = 0,\n        ClassMembers = 65,\n        InterfaceMembers = 65,"
  },
  {
    "id" : "77246956-67cd-42c6-afe8-4fac587689c8",
    "prId" : 20706,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20706#pullrequestreview-83946189",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b0c9207-3bd9-4d55-a1d6-98bf2794a532",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "are these aliases meant to be public? I guess maybe they are required for export to services/",
        "createdAt" : "2017-12-15T18:16:03Z",
        "updatedAt" : "2017-12-15T22:17:12Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "2248c8c0-7249-425e-81ef-dfe5612a509b",
        "parentId" : "8b0c9207-3bd9-4d55-a1d6-98bf2794a532",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I wanted to make them public (like `HasJSDoc`), because knowing what nodes have a `.type` or a `.initializer` is a useful set of nodes, IMO. It can be internal, since I don't think any public functions use them?",
        "createdAt" : "2017-12-15T22:09:42Z",
        "updatedAt" : "2017-12-15T22:17:12Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "f4b93384-895f-4ef6-9f58-b72c962b7a32",
        "parentId" : "8b0c9207-3bd9-4d55-a1d6-98bf2794a532",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I don't care much either way, just checking.",
        "createdAt" : "2017-12-15T22:55:13Z",
        "updatedAt" : "2017-12-15T22:55:13Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "07c7c6d2e9b2459a7cf7e0a3ee12e12a4a34c339",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +454,458 @@    }\n    type HasJSDoc = ParameterDeclaration | CallSignatureDeclaration | ConstructSignatureDeclaration | MethodSignature | PropertySignature | ArrowFunction | ParenthesizedExpression | SpreadAssignment | ShorthandPropertyAssignment | PropertyAssignment | FunctionExpression | LabeledStatement | ExpressionStatement | VariableStatement | FunctionDeclaration | ConstructorDeclaration | MethodDeclaration | PropertyDeclaration | AccessorDeclaration | ClassLikeDeclaration | InterfaceDeclaration | TypeAliasDeclaration | EnumMember | EnumDeclaration | ModuleDeclaration | ImportEqualsDeclaration | IndexSignatureDeclaration | FunctionTypeNode | ConstructorTypeNode | JSDocFunctionType | EndOfFileToken;\n    type HasType = SignatureDeclaration | VariableDeclaration | ParameterDeclaration | PropertySignature | PropertyDeclaration | TypePredicateNode | ParenthesizedTypeNode | TypeOperatorNode | MappedTypeNode | AssertionExpression | TypeAliasDeclaration | JSDocTypeExpression | JSDocNonNullableType | JSDocNullableType | JSDocOptionalType | JSDocVariadicType;\n    type HasInitializer = HasExpressionInitializer | ForStatement | ForInStatement | ForOfStatement | JsxAttribute;\n    type HasExpressionInitializer = VariableDeclaration | ParameterDeclaration | BindingElement | PropertySignature | PropertyDeclaration | PropertyAssignment | EnumMember;"
  },
  {
    "id" : "0a5be12f-40b6-449c-88f1-0eff9d0acaa4",
    "prId" : 20234,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20234#pullrequestreview-89643111",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f16c169b-767f-47a7-8e02-bc20d84d864e",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "this is going to be a breaking change to `Session` users. previously these were optional on `ServerHost`, now they are required.",
        "createdAt" : "2018-01-17T22:41:52Z",
        "updatedAt" : "2018-01-19T23:57:05Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "fd3efe93-9aae-4a96-8b57-86016598f67f",
        "parentId" : "f16c169b-767f-47a7-8e02-bc20d84d864e",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "But wasnt that implicit requirement? since we use watchFile and watchDirectory anyways without checking if host has it?",
        "createdAt" : "2018-01-17T23:44:35Z",
        "updatedAt" : "2018-01-19T23:57:05Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "a8ec48ee-752b-46a1-9b17-2f28f07231cd",
        "parentId" : "f16c169b-767f-47a7-8e02-bc20d84d864e",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "we do :) ok then. we need to check the jetbrain folks that this is not going to break them",
        "createdAt" : "2018-01-18T00:50:53Z",
        "updatedAt" : "2018-01-19T23:57:05Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a51cdaf42203e49fc40248bba723191372bc6ef",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +4801,4805 @@    };\n    interface ServerHost extends System {\n        watchFile(path: string, callback: FileWatcherCallback, pollingInterval?: number): FileWatcher;\n        watchDirectory(path: string, callback: DirectoryWatcherCallback, recursive?: boolean): FileWatcher;\n        setTimeout(callback: (...args: any[]) => void, ms: number, ...args: any[]): any;"
  },
  {
    "id" : "6aa57158-cbb8-49a6-84e4-6d7ec8e002eb",
    "prId" : 19053,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19053#pullrequestreview-68440793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fe43338-0db3-43d2-8bf2-308fa1f462ba",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Would be nice to have #8306 so we didn't need to include this..",
        "createdAt" : "2017-10-10T22:09:51Z",
        "updatedAt" : "2017-10-10T23:36:25Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "55bbcff348b49d063efe91e5d22e957ddb358076",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +7146,7150 @@        getSourceFile(path: Path): SourceFile;\n        close(): void;\n        private detachScriptInfoIfNotRoot(uncheckedFilename);\n        isClosed(): boolean;\n        hasRoots(): boolean;"
  }
]