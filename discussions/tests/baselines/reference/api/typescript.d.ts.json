[
  {
    "id" : "911d1dd6-e4cd-4a56-8b4a-7d393c662fb1",
    "prId" : 42890,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42890#pullrequestreview-594588691",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94f27f49-10ca-4d2f-8190-26022beb22c6",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I sort of wish this was an opaque type in our public API, but Iâ€™m not sure of a good way to handle that.",
        "createdAt" : "2021-02-19T21:26:00Z",
        "updatedAt" : "2021-02-26T23:14:54Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "62db7d04628ab3c68df8f21226bf8a394ab59805",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +6118,6122 @@         * is an auto-import.\n         */\n        data?: CompletionEntryData;\n    }\n    interface CompletionEntryDetails {"
  },
  {
    "id" : "5cb23239-be33-4f7d-b6ac-a00cbb024893",
    "prId" : 42542,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42542#pullrequestreview-602404615",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1af8f5c-4211-4606-b743-42fc1cfdc3dc",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Changing the numeric value of `UseFsEvents` won't break anyone?",
        "createdAt" : "2021-03-03T00:12:56Z",
        "updatedAt" : "2021-03-03T00:14:47Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "778ec18e-7987-438e-8efe-bea556a8c331",
        "parentId" : "b1af8f5c-4211-4606-b743-42fc1cfdc3dc",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Shouldnt because you are not suppose to use \"number\", you are suppose to use text in tsconfig file or command line option or in protocol. This is just part of WatchOptions returned by parsing commandline",
        "createdAt" : "2021-03-03T00:44:02Z",
        "updatedAt" : "2021-03-03T00:44:03Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "d688665d24766dc295055f6ba42040db5776e50a",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2777,2781 @@        DynamicPriorityPolling = 2,\n        FixedChunkSizePolling = 3,\n        UseFsEvents = 4,\n        UseFsEventsOnParentDirectory = 5\n    }"
  },
  {
    "id" : "43890765-1934-407d-9e45-1e0531f6acad",
    "prId" : 39119,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39119#pullrequestreview-488034498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19d54f3d-519f-4349-92b2-9a5652da17db",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This should definitely be not number but enum.. How does API user know what number means which classification otherwise?",
        "createdAt" : "2020-09-14T18:26:26Z",
        "updatedAt" : "2020-09-14T18:26:26Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff748a556da5ec930dec2426e46543f78d297dfa",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +5587,5591 @@    interface ClassifiedSpan2020 {\n        textSpan: TextSpan;\n        classificationType: number;\n    }\n    /**"
  },
  {
    "id" : "68e367c0-cf1e-4124-8dea-cde74624537f",
    "prId" : 31101,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31101#pullrequestreview-233158537",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4a41190-ba07-4aec-8a33-026326836b73",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "@sheetalkamat is it intended that the parameter has an `/*@internal*/` comment in the generated declaration file?",
        "createdAt" : "2019-05-02T17:49:53Z",
        "updatedAt" : "2019-05-02T17:49:53Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      },
      {
        "id" : "b261832b-ad3c-4419-b4c9-f2929a7854e4",
        "parentId" : "d4a41190-ba07-4aec-8a33-026326836b73",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "No. thanks for finding it.",
        "createdAt" : "2019-05-02T18:04:57Z",
        "updatedAt" : "2019-05-02T18:04:57Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "bc8fa394-faae-4bcf-aa5d-2cdcda8d19fe",
        "parentId" : "d4a41190-ba07-4aec-8a33-026326836b73",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "#31213",
        "createdAt" : "2019-05-02T18:08:34Z",
        "updatedAt" : "2019-05-02T18:08:34Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e22110991c15defb1fe75ffe1f5567a9b98ada8",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +3676,3680 @@     *    file to. e.g. outDir\n     */\n    function parseJsonSourceFileConfigFileContent(sourceFile: TsConfigSourceFile, host: ParseConfigHost, basePath: string, existingOptions?: CompilerOptions, configFileName?: string, resolutionStack?: Path[], extraFileExtensions?: ReadonlyArray<FileExtensionInfo>, /*@internal*/ extendedConfigCache?: Map<ExtendedConfigCacheEntry>): ParsedCommandLine;\n    interface ParsedTsconfig {\n        raw: any;"
  },
  {
    "id" : "423121bd-4bd6-4bd5-b262-e79139c6a3ff",
    "prId" : 28386,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28386#pullrequestreview-172450190",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c889fff-3d20-47e3-9201-808927769f1c",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "So this is now intended for public use or did you just forget to make it internal? ",
        "createdAt" : "2018-11-07T11:42:15Z",
        "updatedAt" : "2018-11-07T11:42:30Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e3fd4626a1e25bf81bb364ed5d89d7cd80adcce",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2255,2259 @@        MarkerType = 8192,\n        JSLiteral = 16384,\n        FreshLiteral = 32768,\n        ClassOrInterface = 3\n    }"
  },
  {
    "id" : "fbb7af04-9add-40f0-af22-9a379aab715a",
    "prId" : 27062,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27062#pullrequestreview-155638567",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "130cbce6-a6f0-4bdd-a5ad-9e665030c7bd",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "this is worth documenting as a breaking change. I'll need to update my use of that function or write my own that works for all TypeScript versions I want to support",
        "createdAt" : "2018-09-14T19:37:06Z",
        "updatedAt" : "2018-09-14T19:37:06Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      },
      {
        "id" : "0a3f4066-bece-4c7b-a4b0-26174665506b",
        "parentId" : "130cbce6-a6f0-4bdd-a5ad-9e665030c7bd",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "@RyanCavanaugh May be I can just revert the api change and make it such that first parameter is any so we don't break others",
        "createdAt" : "2018-09-14T19:46:10Z",
        "updatedAt" : "2018-09-14T19:46:10Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "88a90bfe-3c57-4a64-8b2f-263a9e143563",
        "parentId" : "130cbce6-a6f0-4bdd-a5ad-9e665030c7bd",
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "Maybe you could just add an overload that takes two parameters and discards the first one. This could be marked `@deprecated` ",
        "createdAt" : "2018-09-14T19:50:39Z",
        "updatedAt" : "2018-09-14T19:50:39Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      }
    ],
    "commit" : "b8f33f6a35e6659912f39055c4844e786d581c86",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +4187,4191 @@     * Note: The file might not exist.\n     */\n    function resolveProjectReferencePath(ref: ProjectReference): ResolvedConfigFileName;\n}\ndeclare namespace ts {"
  },
  {
    "id" : "2b515b05-3190-4c01-aa93-101c91b87c3f",
    "prId" : 26653,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26653#pullrequestreview-149492780",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cce11eda-c001-4f79-ab96-94f4ba08661a",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Disgustingly, the corresponding method for a greater-than is called `reScanGreaterToken`. Not sure if we should be consistent here.",
        "createdAt" : "2018-08-25T00:41:21Z",
        "updatedAt" : "2019-01-19T18:17:27Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e38ac0d5a4178f3a3d93e86bd1fef4f53f6e2ecf",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3098,3102 @@        scanJsxAttributeValue(): SyntaxKind;\n        reScanJsxToken(): JsxTokenSyntaxKind;\n        reScanLessThanToken(): SyntaxKind;\n        scanJsxToken(): JsxTokenSyntaxKind;\n        scanJSDocToken(): JsDocSyntaxKind;"
  },
  {
    "id" : "5e2b3f5c-b4f1-499e-ab26-04937a438846",
    "prId" : 20234,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20234#pullrequestreview-89643602",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd6cc3ff-747b-441a-a343-2e134c2b71c0",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "why do we need this one?",
        "createdAt" : "2018-01-17T23:19:11Z",
        "updatedAt" : "2018-01-19T23:57:05Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "6fb8e8da-098c-441f-aced-395552842ec7",
        "parentId" : "dd6cc3ff-747b-441a-a343-2e134c2b71c0",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This will be used to report the dependencies of the file to webpack by https://github.com/s-panferov/awesome-typescript-loader/pull/519/files#diff-de66cf07555cd70991f012b02db0bd52R379",
        "createdAt" : "2018-01-17T23:48:07Z",
        "updatedAt" : "2018-01-19T23:57:05Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "1fc8c02b-3f5e-4067-8237-1febe21314b7",
        "parentId" : "dd6cc3ff-747b-441a-a343-2e134c2b71c0",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Thanks.",
        "createdAt" : "2018-01-18T00:54:02Z",
        "updatedAt" : "2018-01-19T23:57:05Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a51cdaf42203e49fc40248bba723191372bc6ef",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +3909,3913 @@         * Get all the dependencies of the file\n         */\n        getAllDependencies(sourceFile: SourceFile): ReadonlyArray<string>;\n        /**\n         * Gets the semantic diagnostics from the program corresponding to this state of file (if provided) or whole program"
  }
]