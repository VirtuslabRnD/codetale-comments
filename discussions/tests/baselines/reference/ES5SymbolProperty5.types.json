[
  {
    "id" : "c4e7748c-da18-4a74-b330-f74b79c9e3b2",
    "prId" : 42543,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42543#pullrequestreview-595850487",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41bee0ac-f9ad-4a29-bec2-af7e81ee55af",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "This now gives an `error` type but doesn't show an error. That seems wrong to me, and seems similar to a complaint that @DanielRosenwasser had about an earlier test, but I can't tell if your explanation there applies to this test or not.\r\n\r\nHere's what I see:\r\n\r\n1. Symbol.iterator exists, and has type symbol. Fine to use as a computed property name.\r\n2. That computed property name should, ideally, look up the property in the call expression and give the expected error.",
        "createdAt" : "2021-02-19T22:36:37Z",
        "updatedAt" : "2021-02-22T22:11:55Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "c0dc7c40-ee80-4055-a24e-7561eb5b4a9f",
        "parentId" : "41bee0ac-f9ad-4a29-bec2-af7e81ee55af",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "`Symbol.iterator` in this case comes from an anonymous type on a `Symbol` variable declaration, so the interop `symbol` -> `unique symbol` code path doesn't take effect. So the `Symbol.iterator` in the class body makes an index signature, and that index signature doesn't handle symbols because they never do, hence the failed lookup here. It's not a problem that arises in the real world, since in the real world, the `lib` defines the global `Symbol` type using the `SymbolConstructor` type which we apply interop logic to.",
        "createdAt" : "2021-02-22T21:55:47Z",
        "updatedAt" : "2021-02-22T22:11:55Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "4fdeab28-861c-4c70-acbb-aa68ff9d740f",
        "parentId" : "41bee0ac-f9ad-4a29-bec2-af7e81ee55af",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "So....what is this test testing? Anything useful? Maybe it could be removed?",
        "createdAt" : "2021-02-22T22:33:25Z",
        "updatedAt" : "2021-02-22T22:33:25Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "5e3cbcab-f204-4d5c-9541-bd06472156fb",
        "parentId" : "41bee0ac-f9ad-4a29-bec2-af7e81ee55af",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "If/when we get proper symbol index signature support, its behavior should change, so I don't think it should be removed.",
        "createdAt" : "2021-02-22T22:38:01Z",
        "updatedAt" : "2021-02-22T22:38:02Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e99c05a632fd07bffdcf048adb90a4b1eb7a01a0",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +14,18 @@}\n\n(new C)[Symbol.iterator](0) // Should error\n>(new C)[Symbol.iterator](0) : error\n>(new C)[Symbol.iterator] : error"
  }
]