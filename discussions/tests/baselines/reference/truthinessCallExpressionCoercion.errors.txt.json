[
  {
    "id" : "5b47c4f5-d7a1-4f61-bf9e-eb80fa002ca5",
    "prId" : 43023,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43023#pullrequestreview-604725589",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb6a9a52-2f9e-46d3-9afd-b967f42e8562",
        "parentId" : null,
        "authorId" : "e99d882e-f92d-4043-8953-ae32b114eb90",
        "body" : "ðŸ‘‹ I think I first introduced this error message back when I contributed the first uncalled function check. I admit I didn't give it in-depth thought and it's kind of bothered me since. Since it's being adjusted, can I suggest one additional tweak?\r\n\r\n```suggestion\r\ntests/cases/compiler/truthinessCallExpressionCoercion.ts(2,9): error TS2774: This condition will always evaluate to true since this function appears to always be defined. Did you mean to call it instead?\r\n```\r\nRationale being that `return` is a function-level concern, but these are almost always expressions.",
        "createdAt" : "2021-03-04T01:27:32Z",
        "updatedAt" : "2021-03-04T01:27:32Z",
        "lastEditedBy" : "e99d882e-f92d-4043-8953-ae32b114eb90",
        "tags" : [
        ]
      },
      {
        "id" : "e2314378-34d4-4a65-bb8b-9eea48f13dbf",
        "parentId" : "fb6a9a52-2f9e-46d3-9afd-b967f42e8562",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "That also kind of bugged me - what about \"This condition will always **be** true\"?",
        "createdAt" : "2021-03-04T18:58:53Z",
        "updatedAt" : "2021-03-04T18:58:53Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "cd108b9b-fbc9-46e3-b921-6a80bdad95b4",
        "parentId" : "fb6a9a52-2f9e-46d3-9afd-b967f42e8562",
        "authorId" : "e99d882e-f92d-4043-8953-ae32b114eb90",
        "body" : "Even better!",
        "createdAt" : "2021-03-04T22:59:03Z",
        "updatedAt" : "2021-03-04T22:59:03Z",
        "lastEditedBy" : "e99d882e-f92d-4043-8953-ae32b114eb90",
        "tags" : [
        ]
      },
      {
        "id" : "cc134325-0699-4c9c-b402-17687a8eea34",
        "parentId" : "fb6a9a52-2f9e-46d3-9afd-b967f42e8562",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I don't like swapping \"appears to always be\" with \"is\". The wiggle room that the words give you isn't worth the extra reading, and the associated drop in number of people who will read to the end.\r\n\r\nJust giving an incorrect error, regardless of wording, drops the compiler's credibility to zero, so you might as well be confident and clear in your wording.\r\n\r\n",
        "createdAt" : "2021-03-05T01:14:35Z",
        "updatedAt" : "2021-03-05T01:14:56Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "51fb8d7d-32ea-4b37-b056-93198e290f5b",
        "parentId" : "fb6a9a52-2f9e-46d3-9afd-b967f42e8562",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "@sandersn we keep getting very annoying discussions about \"will always be true because the types have no overlap\", often because of issues like #9998.",
        "createdAt" : "2021-03-05T01:39:43Z",
        "updatedAt" : "2021-03-05T01:40:03Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "848e7fb7d489316750d7f8f2169912dd675e219b",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +-1,3 @@tests/cases/compiler/truthinessCallExpressionCoercion.ts(2,9): error TS2774: This condition will always return true since this function appears to always be defined. Did you mean to call it instead?\ntests/cases/compiler/truthinessCallExpressionCoercion.ts(18,9): error TS2774: This condition will always return true since this function appears to always be defined. Did you mean to call it instead?\ntests/cases/compiler/truthinessCallExpressionCoercion.ts(36,9): error TS2774: This condition will always return true since this function appears to always be defined. Did you mean to call it instead?"
  }
]