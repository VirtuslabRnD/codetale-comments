[
  {
    "id" : "27aab132-2698-433f-9a5c-1acaa8458ddd",
    "prId" : 39649,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39649#pullrequestreview-487089102",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ce268cf-b122-43a3-8e21-422e271a5466",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I could be wrong, but I believe we only need this change if the statement is inside a `try` block. Does that seem right, and do you think it would be difficult to limit the change to just those cases?",
        "createdAt" : "2020-09-10T17:51:46Z",
        "updatedAt" : "2020-09-11T17:13:36Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "5da264ac-13c6-4bc1-aab5-c5cac26f5b76",
        "parentId" : "1ce268cf-b122-43a3-8e21-422e271a5466",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "Do you mean for the following code the need to omit `await` in return statement and add it only if if inside try block?\r\n```ts\r\nfunction main2() {\r\n    console.log(\"Please wait. Loading.\");\r\n    return delay(500)\r\n        .then(() => { console.log(\".\"); return delay(500); })\r\n        .then(() => { console.log(\".\"); return delay(500); })\r\n        .then(() => { console.log(\".\"); return delay(500); })\r\n}\r\n```\r\n",
        "createdAt" : "2020-09-10T18:15:02Z",
        "updatedAt" : "2020-09-11T17:13:36Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      },
      {
        "id" : "54d84c95-6657-4f72-9b8c-826ace555e43",
        "parentId" : "1ce268cf-b122-43a3-8e21-422e271a5466",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Yeah, only if the resulting generated code is inside a `try`. `return await` is usually regarded as poor style, kind of like returning `Promise.resolve(something)` in a `then`. But it has importantly different semantics when inside a `try` block because it makes the difference between the error being handled in the function implementation vs. propagating the rejection onto the caller.",
        "createdAt" : "2020-09-10T19:15:25Z",
        "updatedAt" : "2020-09-11T17:13:36Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "36ad266d-e897-4c7e-bf79-301049f823f1",
        "parentId" : "1ce268cf-b122-43a3-8e21-422e271a5466",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Example:\r\n\r\n```ts\r\nasync function f1() {\r\n  return await fetch('/'); // `await` is not useful here\r\n}\r\n\r\nasync function f2() {\r\n  try {\r\n    // `await` is useful here; without it, the catch block would never execute.\r\n    // f2 returns a Promise that never rejects. f1 returns a Promise that resolves\r\n    // or rejects with `fetch('/')`, with or without the `await`.\r\n    return await fetch('/');\r\n  } catch {\r\n    return {};\r\n  }\r\n}\r\n```",
        "createdAt" : "2020-09-10T19:18:54Z",
        "updatedAt" : "2020-09-11T17:13:36Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "deeb4505-de41-4121-bf1e-6b4c80a913f9",
        "parentId" : "1ce268cf-b122-43a3-8e21-422e271a5466",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "Thanks for the clarification.",
        "createdAt" : "2020-09-10T19:28:50Z",
        "updatedAt" : "2020-09-11T17:13:36Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      },
      {
        "id" : "899772f5-50db-455b-8d07-44d221975e70",
        "parentId" : "1ce268cf-b122-43a3-8e21-422e271a5466",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "@andrewbranch Should these examples also omit `await` in `return`?\r\n\r\nhttps://github.com/microsoft/TypeScript/blob/083129f005ac0e40b96701c7928434e8aee40655/tests/baselines/reference/convertToAsyncFunction/convertToAsyncFunction_nestedPromises.ts#L10-L12\r\n\r\nor \r\n\r\nhttps://github.com/microsoft/TypeScript/blob/083129f005ac0e40b96701c7928434e8aee40655/tests/baselines/reference/convertToAsyncFunction/convertToAsyncFunction_callbackReturnsPromiseLastInChain.ts#L9-L11\r\n\r\nI'm thinking about how to handle `await` inside/outside `try` statement. Maybe you have some thoughts about that?",
        "createdAt" : "2020-09-11T17:23:19Z",
        "updatedAt" : "2020-09-11T17:23:20Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      },
      {
        "id" : "c0b29087-151b-4351-880b-dfd9e5b2f203",
        "parentId" : "1ce268cf-b122-43a3-8e21-422e271a5466",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Hmm, that baseline pointed me to this PR: https://github.com/microsoft/TypeScript/pull/27573\r\n\r\nI guess this is already a known limitation of the refactor. In that case, Iâ€™m ok with your PR as-is.",
        "createdAt" : "2020-09-11T19:45:01Z",
        "updatedAt" : "2020-09-11T19:45:01Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "1bd6f8cb-7cdb-4ed3-b457-239cffc792f7",
        "parentId" : "1ce268cf-b122-43a3-8e21-422e271a5466",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Well, Iâ€™m a little confused as to why #27573 didnâ€™t already apply to some of the baselines that changed in this PR. I do think that if we start adding a lot more `return await`, people are going to file issues about it. ðŸ¤” ",
        "createdAt" : "2020-09-11T19:46:48Z",
        "updatedAt" : "2020-09-11T19:46:48Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "750f7d21-ee14-415a-b17a-f6169c805236",
        "parentId" : "1ce268cf-b122-43a3-8e21-422e271a5466",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "@andrewbranch Thanks for sharing this PR. I didn't know about it.",
        "createdAt" : "2020-09-11T19:48:05Z",
        "updatedAt" : "2020-09-11T19:48:05Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      },
      {
        "id" : "be252136-fa4b-4157-b352-921a8a5919d8",
        "parentId" : "1ce268cf-b122-43a3-8e21-422e271a5466",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "Basically, this PR fixes a really simple issue, it just handles `return` statements in `{}`. For instance, two examples with the same logic behave differently. [Example ](https://www.typescriptlang.org/play?#code/GYVwdgxgLglg9mABMMAKAlALkQBQE5wC2MAzgKYA8AbnDACYB8iA3gFCIeJ5lQh5L4ipMgDpuJOABsqZDAG5WAX1ahIsBMgCMGFu07de-ZGnQioACzJodAXiYoM6BctXR4SYACYdbTlx58HiZmltboiHYs-oZBOopOSkA)\r\n\r\n\r\n```ts\r\nfunction fn(): Promise<void> {\r\n    return Promise.resolve();\r\n}\r\n\r\n// Before\r\nfunction f1() {\r\n    return fn().then(() => fn());\r\n}\r\n// After \r\nasync function f1() {\r\n    await fn();\r\nreturn await fn(); // await is added\r\n}\r\n\r\n// Before\r\nfunction f2() {\r\n    return fn().then(() => { return fn() });\r\n}\r\n// After \r\nasync function f2() {\r\n    await fn();\r\nreturn fn(); // await is missing \r\n}\r\n```\r\n\r\nAbout for the test, there is a test for `{}`, however, there is no test for `()`. I decided to add, to handle both cases. https://github.com/microsoft/TypeScript/pull/39649/files#diff-71c285c7a401ed150a7e8367a2d6681cR1408-R1422\r\n\r\n\r\n",
        "createdAt" : "2020-09-11T20:01:16Z",
        "updatedAt" : "2020-09-11T20:03:14Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbfc4c894f7f5ada39ad23b587d411a2a70bb39e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +27,31 @@    await delay(500);\n    console.log(\".\");\n    return await delay(500);\n}\n        "
  }
]