[
  {
    "id" : "5448ab01-dbdd-415f-82c9-9c2f20d63ab5",
    "prId" : 40231,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40231#pullrequestreview-475062548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "742de138-a58e-4a64-85c3-967bc373db3d",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Whatâ€™s this about?",
        "createdAt" : "2020-08-25T23:35:34Z",
        "updatedAt" : "2020-08-25T23:35:49Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "12e02aee-e96b-42ca-8540-93d8a9a073bc",
        "parentId" : "742de138-a58e-4a64-85c3-967bc373db3d",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Its likely due to the fact that we now compare a signature with a trailing void that we would have previously skipped because the `minArgumentCount` didn't match, and as a result we encounter `ArrayLike` during type checking earlier than we do `Iterable`. As a result, `ArrayLike` ends up with an earlier type id and thus its order in the union changes.",
        "createdAt" : "2020-08-25T23:58:35Z",
        "updatedAt" : "2020-08-25T23:58:35Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bbbe2803d27e542a51fc050e73b975ec574126f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +30,34 @@>inputARand : ArrayLike<A> | Iterable<A>\n>getEither(inputA, inputALike) : ArrayLike<A> | Iterable<A>\n>getEither : <T>(in1: Iterable<T>, in2: ArrayLike<T>) => ArrayLike<T> | Iterable<T>\n>inputA : A[]\n>inputALike : ArrayLike<A>"
  },
  {
    "id" : "cdce9bd4-954e-437a-a006-287020b29c40",
    "prId" : 23893,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23893#pullrequestreview-118838717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93b84279-f5dc-491b-aa08-51155ef930a7",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Shouldn't `arrayFrom.ts` have a `Set` test? Then if would break due to this change since `Set` is `Iterable` but not `ArrayLike`.",
        "createdAt" : "2018-05-08T22:03:58Z",
        "updatedAt" : "2018-06-04T21:39:13Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "b15f5bf3-4cc8-4d27-baa8-40b2941285bb",
        "parentId" : "93b84279-f5dc-491b-aa08-51155ef930a7",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I'll add a test, but this shouldn't break because there is still an overload that supports `Iterable`. The order just changed because I cleaned up the default order of libs. Previously if you had a `\"lib\": [\"es5\", \"es2015\"]` in your _tsconfig.json_ we would actually end up inserting them in reverse order because we were doing `files.unshift` for default libs.",
        "createdAt" : "2018-05-09T17:49:24Z",
        "updatedAt" : "2018-06-04T21:39:13Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "666841264cb5b9b7ef599983a1f3c3d5228ab771",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +54,58 @@>Array.from : { <T>(arrayLike: ArrayLike<T>): T[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[]; <T>(iterable: Iterable<T> | ArrayLike<T>): T[]; <T, U>(iterable: Iterable<T> | ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[]; }\n>Array : ArrayConstructor\n>from : { <T>(arrayLike: ArrayLike<T>): T[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[]; <T>(iterable: Iterable<T> | ArrayLike<T>): T[]; <T, U>(iterable: Iterable<T> | ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[]; }\n>inputA : A[]\n"
  }
]