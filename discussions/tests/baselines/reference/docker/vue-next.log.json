[
  {
    "id" : "2119ae8c-1a03-4016-9f18-de636631b7df",
    "prId" : 42842,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42842#pullrequestreview-625687237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47017423-fb2d-4bfa-96da-e05ca542fc50",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "this was fixed in Jan 4. I think the tsc version is wrong here too -- it must be 4.1 or older.",
        "createdAt" : "2021-04-01T16:17:34Z",
        "updatedAt" : "2021-04-06T15:10:59Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "4db6968ce7a2e6abfa54d86fa77b5992272712d8",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +98,102 @@Warning: dist/packages/compiler-core/src/options.d.ts:151:35 - (tsdoc-malformed-inline-tag) Expecting a TSDoc tag starting with \"{@\"\nWarning: dist/packages/compiler-core/src/options.d.ts:151:36 - (tsdoc-malformed-inline-tag) Expecting a TSDoc tag starting with \"{@\"\nWarning: /vue-next/packages/reactivity/src/baseHandlers.ts:198:3 - (TS2322) Type '(string | number | symbol)[]' is not assignable to type '(string | symbol)[]'.\n  Type 'string | number | symbol' is not assignable to type 'string | symbol'.\n    Type 'number' is not assignable to type 'string | symbol'."
  },
  {
    "id" : "a1deccba-d384-46e8-935a-5199def6826f",
    "prId" : 41496,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41496#pullrequestreview-569669767",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6444682e-8e65-4f0e-95e6-b20aafe0c2ec",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "error is correct; vue's `function ownKeys` should return `(string | symbol)[]` not `(string | number | symbol)[]`. This is a breaking change for 4.2 from #41987.\r\n\r\n@DanielRosenwasser do we normally document lib or DOM breaks in the release notes? I don't think we do.",
        "createdAt" : "2021-01-15T23:30:39Z",
        "updatedAt" : "2021-01-15T23:42:04Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3c90caf1e4982b95237ae78e77de4ce2f5972bf",
    "line" : 270,
    "diffHunk" : "@@ -1,1 +93,97 @@/vue-next/packages/reactivity/src/index.ts → packages/reactivity/dist/reactivity.esm-bundler.js...\n/vue-next/packages/runtime-core/src/index.ts → packages/runtime-core/dist/runtime-core.esm-bundler.js...\n[!] (plugin rpt2) Error: /vue-next/packages/reactivity/src/baseHandlers.ts(192,3): semantic error TS2322: Type '(target: object) => (string | number | symbol)[]' is not assignable to type '(target: object) => ArrayLike<string | symbol>'.\n  Type '(string | number | symbol)[]' is not assignable to type 'ArrayLike<string | symbol>'.\n    Index signatures are incompatible."
  },
  {
    "id" : "549172c3-621e-4747-a5f2-ed771a9dff75",
    "prId" : 40156,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40156#pullrequestreview-495014839",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9574068-1660-4874-81ec-f4c1df9bd634",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "from #39258 -- it's probably by-design, but it's hard to tell whether it should get an exemption.",
        "createdAt" : "2020-09-23T20:16:44Z",
        "updatedAt" : "2020-09-24T16:23:58Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "e597b0e31960644f0bbc197b24bee6189f1de630",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +84,88 @@created packages/compiler-ssr/dist/compiler-ssr.cjs.js in ?s\n/vue-next/packages/reactivity/src/index.ts → packages/reactivity/dist/reactivity.esm-bundler.js...\n[!] (plugin rpt2) Error: /vue-next/packages/reactivity/src/collectionHandlers.ts(24,3): semantic error TS2322: Type 'T | DeepReadonly<UnwrapNestedRefs<T & Record<any, any>>>' is not assignable to type 'T'.\n  'T | DeepReadonly<UnwrapNestedRefs<T & Record<any, any>>>' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint 'unknown'.\n    Type 'DeepReadonly<UnwrapNestedRefs<T & Record<any, any>>>' is not assignable to type 'T'."
  },
  {
    "id" : "60b63d08-675e-49f5-82ee-4b5625aa8b9a",
    "prId" : 39502,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39502#pullrequestreview-459389470",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31a32e9c-66c2-48e7-8eea-5fe66969683f",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I think this is error is new, and intentional.",
        "createdAt" : "2020-07-31T20:43:22Z",
        "updatedAt" : "2020-07-31T21:38:53Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "844483393fdb98e7c950d942e815cd0b7352612f",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +62,66 @@[!] (plugin rpt2) Error: /vue-next/packages/compiler-sfc/src/parse.ts(179,14): semantic error TS2790: The operand of a 'delete' operator must be optional.\npackages/compiler-sfc/src/parse.ts\nError: /vue-next/packages/compiler-sfc/src/parse.ts(179,14): semantic error TS2790: The operand of a 'delete' operator must be optional.\n    at error (/vue-next/node_modules/rollup/dist/shared/rollup.js:5174:30)\n    at throwPluginError (/vue-next/node_modules/rollup/dist/shared/rollup.js:17452:12)"
  },
  {
    "id" : "2482f384-398c-4744-a69c-49f849976fdc",
    "prId" : 38917,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38917#pullrequestreview-429975229",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e4d541e-9357-4884-b3b1-e949c0bdd7dc",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "doesn't repro in the editor; not sure who is pulling on this circularly.\r\n\r\nThis is from a recent change, vuejs/vue-next#80c868aef, so I'm surprised that it doesn't repro in the local build either. I'll have to do the same local upgrade as the dockerfile and see if it repros.",
        "createdAt" : "2020-06-12T19:04:01Z",
        "updatedAt" : "2020-06-15T18:00:03Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "e856b4c2-e6e9-4490-9e0e-ee8e21c79002",
        "parentId" : "5e4d541e-9357-4884-b3b1-e949c0bdd7dc",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "build repros with typescript@next \r\nedit: and with the first 4.0 dev branch build. but not 3.9.3...?\r\n\r\nedit edit: lol their build is broken.",
        "createdAt" : "2020-06-12T20:20:51Z",
        "updatedAt" : "2020-06-15T18:00:03Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3999b4c1dfab4f6b65b92a6f9ffd2be66d650e4",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +55,59 @@Warning: dist/packages/compiler-core/src/options.d.ts:69:35 - (tsdoc-malformed-inline-tag) Expecting a TSDoc tag starting with \"{@\"\nWarning: dist/packages/compiler-core/src/options.d.ts:69:36 - (tsdoc-malformed-inline-tag) Expecting a TSDoc tag starting with \"{@\"\nWarning: /vue-next/packages/runtime-dom/src/components/Transition.ts:71:5 - (TS7022) 'name' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.\nWarning: /vue-next/packages/runtime-dom/src/components/Transition.ts:75:5 - (TS7022) 'enterFromClass' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.\nWarning: /vue-next/packages/runtime-dom/src/components/Transition.ts:76:5 - (TS7022) 'enterActiveClass' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer."
  },
  {
    "id" : "7c013684-3c73-4b85-901a-aa034e14fdb3",
    "prId" : 38128,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38128#pullrequestreview-406959109",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87b7f8f9-5622-4f16-95bd-d359ef216f1e",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I *think* this is new, and should be checked for correctness.\r\n\r\nEdit: Yes, seems correct, and from the new union-in change.",
        "createdAt" : "2020-05-06T20:24:45Z",
        "updatedAt" : "2020-05-07T16:40:25Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cc26f434192806b94de9aa9ba28613ec1e72efe",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +103,107 @@created packages/reactivity/dist/reactivity.global.prod.js in ?s\n/vue-next/packages/runtime-core/src/index.ts → packages/runtime-core/dist/runtime-core.esm-bundler.js...\n[!] (plugin rpt2) Error: /vue-next/packages/runtime-core/src/apiInject.ts(40,9): semantic error TS2360: The left-hand side of an 'in' expression must be of type 'any', 'string', 'number', or 'symbol'.\npackages/runtime-core/src/apiInject.ts\nError: /vue-next/packages/runtime-core/src/apiInject.ts(40,9): semantic error TS2360: The left-hand side of an 'in' expression must be of type 'any', 'string', 'number', or 'symbol'."
  },
  {
    "id" : "2b12f854-2483-419c-9a02-c73286eb6c2c",
    "prId" : 37354,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37354#pullrequestreview-378178686",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e90401a-fcb9-41a8-9495-8bedd9864840",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Seems correct, `ReturnType<Function>` isn't allowed because Function is callable but doesn't have any signatures. I'm not sure why we didn't complain about this before.\r\n\r\nIt's pretty easy to fix: change\r\n\r\n```ts\r\nexport type ExtractComputedReturns<T extends any> = {\r\n  [key in keyof T]: T[key] extends { get: Function }\r\n    ? ReturnType<T[key]['get']>\r\n    : ReturnType<T[key]>\r\n}\r\n```\r\n\r\nto\r\n\r\n```ts\r\nexport type ExtractComputedReturns<T extends Record<string, (...args:any[]) => any>> = {\r\n    [key in keyof T]: T[key] extends { get: (...args:any[]) => any }\r\n    ? ReturnType<T[key]['get']>\r\n    : ReturnType<T[key]>\r\n}\r\n```\r\n\r\nI'll either contact the vue team or send a PR.",
        "createdAt" : "2020-03-20T00:27:08Z",
        "updatedAt" : "2020-03-20T04:30:48Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "d689fab0dc62c03b13911b292ccb1247a9425e9b",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +76,80 @@created packages/reactivity/dist/reactivity.esm.prod.js in ?s\n/vue-next/packages/runtime-core/src/index.ts → packages/runtime-core/dist/runtime-core.esm-bundler.js...\n[!] (plugin rpt2) Error: /vue-next/packages/runtime-core/src/apiOptions.ts(137,18): semantic error TS2344: Type 'Function & T[key][\"get\"]' does not satisfy the constraint '(...args: any) => any'.\n  Type 'Function' provides no match for the signature '(...args: any): any'.\npackages/runtime-core/src/apiOptions.ts"
  },
  {
    "id" : "0525c9a7-578f-4919-a105-8187b6def525",
    "prId" : 37033,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37033#pullrequestreview-364548901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f10d4a7c-208a-41f7-913e-fd59e6c65d80",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "[this](https://github.com/vuejs/vue-next/blob/master/packages/vue/src/devCheck.ts#L2) is due to us expending the uncalled functions checks to ternaries. As far as I'm concerned, the error's not wrong (this is a defensive check).",
        "createdAt" : "2020-02-26T00:32:04Z",
        "updatedAt" : "2020-02-26T01:34:45Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4500471ce80bd584819b5a8da75dc90107f73df",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +130,134 @@created packages/template-explorer/dist/template-explorer.global.js in ?s\n/vue-next/packages/vue/src/index.ts → packages/vue/dist/vue.esm-bundler.js...\n[!] (plugin rpt2) Error: /vue-next/packages/vue/src/devCheck.ts(2,11): semantic error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?\npackages/vue/src/devCheck.ts\nError: /vue-next/packages/vue/src/devCheck.ts(2,11): semantic error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?"
  }
]