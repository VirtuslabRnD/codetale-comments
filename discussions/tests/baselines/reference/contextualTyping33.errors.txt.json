[
  {
    "id" : "3a8211b8-50fe-407e-af4e-48fb33d16ba9",
    "prId" : 824,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cb91f0f-2ad4-42a8-9997-90b991972586",
        "parentId" : null,
        "authorId" : "062f3bee-c17a-4517-ad46-ba1c73ac0962",
        "body" : "I think this came up elsewhere but it sure would be nice to display this in lambda form although we don't have a good way to do that right now. It's not actually specific to union types but it becomes slightly worse with them. Something like this:\n\n`Array<() => string>`\n\nfeels much closer to what people write than\n\n`Array<{ (): string }>`\n\nAnd gets worse as you add unions:\n\n`Array<() => string | () => number>`\n\nvs\n\n`Array<{ (): number } | { (): string }>`\n\nThe object literal with call signatures feels a bit like displaying the compiler's internal representation.\n",
        "createdAt" : "2014-10-08T23:21:41Z",
        "updatedAt" : "2014-10-13T23:16:25Z",
        "lastEditedBy" : "062f3bee-c17a-4517-ad46-ba1c73ac0962",
        "tags" : [
        ]
      },
      {
        "id" : "41663b64-950d-4cc2-99be-8fe61a994001",
        "parentId" : "6cb91f0f-2ad4-42a8-9997-90b991972586",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "We would basically have to add parentheses to the type grammar:\n\n``` TypeScript\n() => string\n(() => string)[]\n(() => string) | (() => number)\n((() => string) | (() => number))[]\n```\n\nIt wouldn't be that complicated, although we'd have to do a bit of lookahead to disambiguate parentheses from parameter lists in function types.\n",
        "createdAt" : "2014-10-09T14:03:36Z",
        "updatedAt" : "2014-10-13T23:16:25Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5cd4145d5e2e02672018c267dbfc00ee1d2ebcb",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +0,4 @@tests/cases/compiler/contextualTyping33.ts(1,66): error TS2345: Argument of type 'Array<{ (): number; } | { (): string; }>' is not assignable to parameter of type '{ (): number; (i: number): number; }[]'.\n  Type '{ (): number; } | { (): string; }' is not assignable to type '{ (): number; (i: number): number; }':\n    Type '() => string' is not assignable to type '{ (): number; (i: number): number; }'.\n"
  }
]