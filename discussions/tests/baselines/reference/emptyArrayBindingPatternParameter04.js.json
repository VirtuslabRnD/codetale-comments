[
  {
    "id" : "fa2ebf1e-4292-4434-a870-ff2d2d7c490b",
    "prId" : 3601,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79de5547-9789-4d1b-8731-5717ba7122f8",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "looking at this, i think it should be an error. this can be any arbitrary expression with side effects, and we will be ignoring it. What is the ES6 spec says about this?\n",
        "createdAt" : "2015-06-23T16:37:01Z",
        "updatedAt" : "2015-06-23T19:06:03Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "9e8ca6d6-262a-43e5-a1ed-37286d9ba4c6",
        "parentId" : "79de5547-9789-4d1b-8731-5717ba7122f8",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "The idea was simply to get a case where the parameter has an initializer.\n\nThough I'm not seeing why this would be invalid; right it's perfectly valid to do something like\n\n``` TypeScript\nlet [a] = [1,2];\n// or even\nlet [] = [1,2]\n```\n\nIn `emptyArraybindingPatternParameter04.js`, you could be saying \"I'm expecting an array; I don't care what the contents are, but if I didn't get one, I want this effect to take place.\"\n",
        "createdAt" : "2015-06-23T16:59:32Z",
        "updatedAt" : "2015-06-23T19:06:03Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "1744ab22-4828-40d0-897b-e6c84ff545ee",
        "parentId" : "79de5547-9789-4d1b-8731-5717ba7122f8",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "sorry it should not be an error. it should be emitted regardless of the varible being used or not..\n\n``` ts\nfunction f([] = [1,somefunctionWithSideEffects()]) {\n}\n\n// should emit\nfunction f(_a) {\n    var _b = _a === void 0 ? [1, someFunctionWithSideEffects()] : _a;\n}\n```\n\nsimilar to how the var case you mentioned works today..\n\n``` ts\nlet [] = [1, someFunctionWithSideEfects()]; \n\n// emits\nvar _a = [1, someFunctionWithSideEfects()];\n```\n",
        "createdAt" : "2015-06-23T17:31:59Z",
        "updatedAt" : "2015-06-23T19:06:03Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "a040d532-e5f5-44d5-9fcf-3dbb01a02dad",
        "parentId" : "79de5547-9789-4d1b-8731-5717ba7122f8",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Ah, great catch!\n",
        "createdAt" : "2015-06-23T17:39:31Z",
        "updatedAt" : "2015-06-23T19:06:03Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "1c974621-31c6-4c72-97b1-1d21dbbb002e",
        "parentId" : "79de5547-9789-4d1b-8731-5717ba7122f8",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "@mhegazy  I was thinking it would just emit\n\n``` JavaScript\nfunction f(_a) {\n    void [1,2,3,4];\n}\n```\n\nI use `void` here to keep object literals from being read as block bodies, even though I don't think this could be an issue.\n",
        "createdAt" : "2015-06-23T18:00:44Z",
        "updatedAt" : "2015-06-23T19:06:03Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "18bd2c16-8f0a-4a0f-9d6e-e240c86f658b",
        "parentId" : "79de5547-9789-4d1b-8731-5717ba7122f8",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "nothing wrong with the unused variable. we are guaranteed to have the variable name unique. i would rather have a single code path/pattern when possible.\n",
        "createdAt" : "2015-06-23T18:03:27Z",
        "updatedAt" : "2015-06-23T19:06:03Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "740fd9c908380147212ecd9a2d77b238e13c7172",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2,6 @@\n\nfunction f([] = [1,2,3,4]) {\n    var x, y, z;\n}"
  }
]