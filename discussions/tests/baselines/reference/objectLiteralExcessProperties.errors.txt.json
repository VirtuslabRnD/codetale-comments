[
  {
    "id" : "c301b96a-a44d-4e33-999b-5163710a63a0",
    "prId" : 28854,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28854#pullrequestreview-181549361",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8bba3c3-e11d-4328-9af2-a7427dd7848b",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Side note: I've seen a couple issues opened where people don't really understand constrained generics well and are surprised an assignment like this fails and don't \"get\" the error. A little more elaboration could help here (ie, when assignment to a bare type parameter fails), like `A is assignable to T's constraint B, but not T itself.`, just to indicate that \"we looked at what you're thinking of, and that isn't what's going on here\".\r\n\r\nUnrelated to this PR, though. Just a remark. @DanielRosenwasser you agree?",
        "createdAt" : "2018-12-05T00:47:44Z",
        "updatedAt" : "2018-12-05T00:47:44Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e022bdd43a93499655b0468a7a75f597f5e35dc",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +111,115 @@        const obj1: T = { name: \"test\" };\n              ~~~~\n!!! error TS2322: Type '{ name: string; }' is not assignable to type 'T'.\n        // No excess property checks on intersections involving generics\n        const obj2: T & { prop: boolean } = { name: \"test\", prop: true };"
  },
  {
    "id" : "c3245335-b07d-485e-ae6d-a25fb78df3aa",
    "prId" : 28854,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28854#pullrequestreview-181860691",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54b2f025-c59e-4110-beaa-e30f59471c6d",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "This makes sense in an assignment context, but\r\n```ts\r\ndeclare function foo<T>(x: T | { prop: boolean }): T | boolean;\r\n\r\nfoo({prop: true, name: \"test\"}); // probably shouldn't be excess, trivially satisfies `T`\r\n```\r\nfor calls it seems a little jank, perhaps? The union case just seems presumptuous to me, I guess.",
        "createdAt" : "2018-12-05T00:50:01Z",
        "updatedAt" : "2018-12-05T00:50:47Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "57cf1e6d-f9c8-4c80-85e7-e4d024cf71bb",
        "parentId" : "54b2f025-c59e-4110-beaa-e30f59471c6d",
        "authorId" : "fde7ab8a-5820-4ddb-8e3f-0de480adc675",
        "body" : "Does the excess error happen before inference of `T` to `{prop: true, name: string}`?",
        "createdAt" : "2018-12-05T10:35:43Z",
        "updatedAt" : "2018-12-05T10:35:43Z",
        "lastEditedBy" : "fde7ab8a-5820-4ddb-8e3f-0de480adc675",
        "tags" : [
        ]
      },
      {
        "id" : "dd50c887-65df-4fdc-81a2-3e084ea4f1d6",
        "parentId" : "54b2f025-c59e-4110-beaa-e30f59471c6d",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "@weswigham As @jack-williams points out, there's no error in your example because we infer and substitute a type for `T` before the assignment check.",
        "createdAt" : "2018-12-05T16:49:25Z",
        "updatedAt" : "2018-12-05T16:49:25Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e022bdd43a93499655b0468a7a75f597f5e35dc",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +119,123 @@        // Excess property checks only on non-generic parts of unions\n        const obj3: T | { prop: boolean } = { name: \"test\", prop: true };\n                                              ~~~~~~~~~~~~\n!!! error TS2322: Type '{ name: string; prop: boolean; }' is not assignable to type 'T | { prop: boolean; }'.\n!!! error TS2322:   Object literal may only specify known properties, and 'name' does not exist in type '{ prop: boolean; }'."
  }
]