[
  {
    "id" : "30dc0301-9d32-4501-add5-488cc196fd28",
    "prId" : 37727,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37727#pullrequestreview-386053857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08329fbd-3684-4ef8-826a-e163c461020e",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Glad the test caught this - that was part of my intent when I wrote it. As you probably know, this needs to be fixed because `thing.original` should be defined. Let @ahejlsberg or @rbuckton know if you need help with that.",
        "createdAt" : "2020-04-01T19:39:42Z",
        "updatedAt" : "2020-05-21T02:54:02Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "17f4130b-16e7-4e18-8490-347af4744a28",
        "parentId" : "08329fbd-3684-4ef8-826a-e163c461020e",
        "authorId" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "body" : "I spent all afternoon And evening in this oneðŸ˜‚",
        "createdAt" : "2020-04-01T20:05:16Z",
        "updatedAt" : "2020-05-21T02:54:02Z",
        "lastEditedBy" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "tags" : [
        ]
      },
      {
        "id" : "f0dc917f-4af4-446c-a523-4e7b7916765b",
        "parentId" : "08329fbd-3684-4ef8-826a-e163c461020e",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Yeah, the code can be hard to get through, and I've honestly never wired up the CFG. Also, binary expressions recently changed to use a \"trampolining\" approach to avoid stack overflows on deep traversals. You can ask @weswigham about that.\r\n\r\nIf you want to play around to see if you can get it working, I'll provide a few tips and @weswigham and @ahejlsberg can weigh in case I'm totally off.\r\n\r\nFirst take a look at some of the logic at\r\n\r\nhttps://github.com/microsoft/TypeScript/blob/b58a29b8087445d0b0f647a28c1ad7fb452329e5/src/compiler/binder.ts#L1418\r\n\r\nand\r\n\r\nhttps://github.com/microsoft/TypeScript/blob/b58a29b8087445d0b0f647a28c1ad7fb452329e5/src/compiler/binder.ts#L1513\r\n\r\nThe binder needs to create branch labels for these new compound assignment operators (similar to in `bindLogicalExpression`) while creating at least one flow node that's considered an assignment after the expression (as in `bindAssignmentTargetFlow`). At a glance, I *think* that a lot of the logic can be reused and the changes can be added around  [here](https://github.com/microsoft/TypeScript/blob/b58a29b8087445d0b0f647a28c1ad7fb452329e5/src/compiler/binder.ts#L1513)\r\n\r\nEventually in `getTypeAtFlowNode` in the type-checker, you need to try to find a way to combine the logic when `flags & FlowFlags.Assignment` and `flags & FlowFlags.Label` both apply. To start, I'd just get something working, then worry about how to share the code.\r\n\r\nFeel free to ask some questions if you need help. If you'd prefer, I'm also sure we could send a PR if you'd like, but it's up to you.",
        "createdAt" : "2020-04-02T01:26:46Z",
        "updatedAt" : "2020-05-21T02:54:02Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "fed922a5cbe0d50c491e009c488f7303a15e5b95",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +52,56 @@                defaultValue.name;\n                ~~~~~~~~~~~~\n!!! error TS2532: Object is possibly 'undefined'.\n            }\n        }"
  }
]