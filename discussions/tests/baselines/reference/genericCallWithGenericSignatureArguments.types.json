[
  {
    "id" : "114b7ba5-7fc7-4459-a9f2-3bee01704752",
    "prId" : 16439,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16439#pullrequestreview-43784858",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2286844f-9358-48af-8c5d-47df0d196847",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "This inference from from the first argument is kind of weird. The result will not have `z?: number` from `typeof b`. It's arguably better than the error it replaces, but ideally the result would be `typeof a & typeof b` in this case. I don't think that result can be generalised though, so maybe \"surprising success\" is the best we can do.",
        "createdAt" : "2017-06-12T16:30:45Z",
        "updatedAt" : "2017-06-12T16:30:45Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "fc8dbfe0-4f1b-477c-9957-c8e872b5a8d0",
        "parentId" : "2286844f-9358-48af-8c5d-47df0d196847",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Previously we'd require that one be an exact subtype of the other, which would fail. Now, we allow the call because assignability succeeds even though neither is a subtype of the other. I don't think this corner case much matters, and you can make just as good a case for succeeding as for failing.",
        "createdAt" : "2017-06-13T16:44:46Z",
        "updatedAt" : "2017-06-13T16:44:46Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "604c34445c75ec8d723345efb4f9e39b9d4ed350",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +84,88 @@var r4 = foo((x: typeof a) => a, (x: typeof b) => b); // typeof a => typeof a\n>r4 : (x: { x: number; y?: number; }) => { x: number; y?: number; }\n>foo((x: typeof a) => a, (x: typeof b) => b) : (x: { x: number; y?: number; }) => { x: number; y?: number; }\n>foo : <T>(a: (x: T) => T, b: (x: T) => T) => (x: T) => T\n>(x: typeof a) => a : (x: { x: number; y?: number; }) => { x: number; y?: number; }"
  }
]