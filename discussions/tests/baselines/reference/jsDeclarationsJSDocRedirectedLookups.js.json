[
  {
    "id" : "f5a5461a-080d-48a2-a6e0-1a0939b3c77b",
    "prId" : 38368,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38368#pullrequestreview-408039541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0907d8e3-b38c-42b5-80e3-a123cd138cd6",
        "parentId" : null,
        "authorId" : "4397350a-eae4-4e61-9495-290068d88fd2",
        "body" : "What about add a `Object` => `object`?",
        "createdAt" : "2020-05-08T01:19:16Z",
        "updatedAt" : "2020-05-08T01:19:28Z",
        "lastEditedBy" : "4397350a-eae4-4e61-9495-290068d88fd2",
        "tags" : [
        ]
      },
      {
        "id" : "ae60ec77-4849-4a0b-b089-5d24220158da",
        "parentId" : "0907d8e3-b38c-42b5-80e3-a123cd138cd6",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "That's actually not a thing we interpret - `Object` with type arguments is interpreted as an index signature, without isn't recognized special (so it looks up the global `Object` constructor type, which is the apparent type of... pretty much everything except `null` and `undefined`) _except_ when `noImplicitAny` is false, where it is `any`.\r\n\r\n`getIntendedTypeFromJSDocTypeReference` in the checker has the special jsdoc types that we lookup in it.",
        "createdAt" : "2020-05-08T01:23:23Z",
        "updatedAt" : "2020-05-08T01:23:24Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "bcecbb68-df87-4262-8da8-7f9367b96bfe",
        "parentId" : "0907d8e3-b38c-42b5-80e3-a123cd138cd6",
        "authorId" : "4397350a-eae4-4e61-9495-290068d88fd2",
        "body" : "Hmm, but the handbook says\r\n\r\n> Donâ€™t ever use the types Number, String, Boolean, Symbol, or Object These types refer to non-primitive boxed objects that are almost never used appropriately in JavaScript code.\r\n\r\n> Instead of Object, use the non-primitive object type (added in TypeScript 2.2).",
        "createdAt" : "2020-05-08T01:33:58Z",
        "updatedAt" : "2020-05-08T01:33:58Z",
        "lastEditedBy" : "4397350a-eae4-4e61-9495-290068d88fd2",
        "tags" : [
        ]
      },
      {
        "id" : "3bf8a1a5-84f9-4c56-a38c-416f628298ae",
        "parentId" : "0907d8e3-b38c-42b5-80e3-a123cd138cd6",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I think that the point is to test out stuff might people write in JSDoc, because people often write terrible stuff in JSDoc because it was terribly specified.",
        "createdAt" : "2020-05-08T06:59:37Z",
        "updatedAt" : "2020-05-08T07:00:01Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "04e6b6fe920523344f120d1d5cd47df3b1066508",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +72,76 @@/** @type {array} */ declare const i: any[];\n/** @type {promise} */ declare const j: Promise<any>;\n/** @type {Object<string, string>} */ declare const k: {\n    [x: string]: string;\n};"
  }
]