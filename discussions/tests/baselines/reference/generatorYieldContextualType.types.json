[
  {
    "id" : "fb1a1991-5791-4bf7-8ed9-d4865b9b729c",
    "prId" : 40350,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40350#pullrequestreview-480191552",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e9cc036-2038-4c59-8ca9-91d7c454001e",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "In a sense, this is not wrong—`gen` could have its `next()` called with no arguments, making `a` `undefined` at runtime. But previously, this fell into a special case of ignoring that optionality for convenience.\r\n\r\nNow, when we try to get the iteration types of `Generator<R, T, S> | AsyncGenerator<R, T, S>` as an async _iterable_, we get `noIterationTypes`, because the former doesn’t have a `[Symbol.asyncIterator]()` member. Instead, we fall back to getting the iteration types of this union as an async _iterator_, using its next/return/throw method signatures to determine `T`, `TReturn`, and `TNext`. Because we have a union signature, it doesn’t count as a reference to one of the global generator/iterator types, and so it doesn’t take the fast path that ignores the optionality. Instead, it correctly sees that the `next()` method can take no arguments or `[1]`, and so it infers the type `1 | undefined`.\r\n\r\nMore work could be done to make union signatures take the fast path that drops the optionality if every signature in the union is a reference to one of the global generator/iterator types, but I felt like this was getting fairly complex for limited utility—the results it produces with less complexity are strictly more correct given the limitations we have for modeling this.",
        "createdAt" : "2020-09-01T23:52:23Z",
        "updatedAt" : "2020-09-01T23:52:23Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "c544adbbc342a55ec0c79eb0087aaf4c885da379",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +29,33 @@\n\tconst a = yield 0;\n>a : 1 | undefined\n>yield 0 : 1 | undefined\n>0 : 0"
  }
]