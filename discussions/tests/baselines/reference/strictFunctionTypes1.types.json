[
  {
    "id" : "a2c0b449-7850-46d8-bb62-ad2432260419",
    "prId" : 26566,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26566#pullrequestreview-148285365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09cb2f5d-51d3-4b0b-a293-72ce84143017",
        "parentId" : null,
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "We should discuss this later, but this inference seems bad",
        "createdAt" : "2018-08-21T16:08:13Z",
        "updatedAt" : "2018-08-21T16:08:14Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "adb68b48-5d49-4685-a36c-a159a8949a38",
        "parentId" : "09cb2f5d-51d3-4b0b-a293-72ce84143017",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "No, this inference is correct. The `fx` argument is a function taking a function, and since contra-contra-variant is the same as co-variant, we make two co-variant inferences, `\"abc\"` and `\"def\"`. Per normal rules we union together literal inferences for the same type parameter, so we end up with `\"abc\" | \"def\"`.",
        "createdAt" : "2018-08-21T23:11:39Z",
        "updatedAt" : "2018-08-21T23:11:39Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "137be48d-8b6d-4440-bb21-851588def750",
        "parentId" : "09cb2f5d-51d3-4b0b-a293-72ce84143017",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Missed the double 180; you're right",
        "createdAt" : "2018-08-21T23:16:04Z",
        "updatedAt" : "2018-08-21T23:16:08Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "f182389c5ba9405b1d8f7ecadd652967e38160f9",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +62,66 @@\nconst x3 = f3(\"abc\", fo, fx);  // \"abc\" | \"def\"\n>x3 : \"def\" | \"abc\"\n>f3(\"abc\", fo, fx) : \"def\" | \"abc\"\n>f3 : <T>(obj: T, f1: (x: T) => void, f2: (f: (x: T) => void) => void) => T"
  }
]