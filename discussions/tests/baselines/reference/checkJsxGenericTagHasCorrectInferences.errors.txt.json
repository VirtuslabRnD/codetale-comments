[
  {
    "id" : "41a2361d-4215-4139-9db9-147b070c21a2",
    "prId" : 27088,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27088#pullrequestreview-155664916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffd8b4ac-fc84-44fa-8873-13415ce83279",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "This intersection is unfortunate. Is there a way to avoid adding `(a: { x: string }) => string` to the type?",
        "createdAt" : "2018-09-14T21:06:20Z",
        "updatedAt" : "2018-09-14T21:06:20Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "db213044-c8b9-4e21-bab2-4f1c506f4ab6",
        "parentId" : "ffd8b4ac-fc84-44fa-8873-13415ce83279",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "The target is `Props & BaseProps<Values>` where we've already infered `Props` as `{  initialValues: {x: string};\r\n  nextValues: (cur: {x: string}) => string;\r\n}` (since that's the entire attributes type as written, which is inferred to `Props`) and `BaseProps<Values>` as `interface BaseProps<T> {\r\n  initialValues: T;\r\n  nextValues: (cur: T) => T;\r\n}` instantiated with `T = Values = {x: string}` (since that's what first matches `T` in the first context-free inference pass) - the intersection of both's `nextValues` member is the type we see here. Everything is as it should be.",
        "createdAt" : "2018-09-14T21:15:48Z",
        "updatedAt" : "2018-09-14T21:15:48Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0983225b5de1d451294e6f423e73557709f93229",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +19,23 @@    let d = <GenericComponent initialValues={{ x: \"y\" }} nextValues={a => a.x} />; // Error - `string` is not assignable to `{x: string}`\n                                                         ~~~~~~~~~~\n!!! error TS2322: Type '(a: { x: string; }) => string' is not assignable to type '((a: { x: string; }) => string) & ((cur: { x: string; }) => { x: string; })'.\n!!! error TS2322:   Type '(a: { x: string; }) => string' is not assignable to type '(cur: { x: string; }) => { x: string; }'.\n!!! error TS2322:     Type 'string' is not assignable to type '{ x: string; }'."
  }
]