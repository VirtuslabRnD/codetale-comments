[
  {
    "id" : "089363f1-13da-4f93-b263-2b3e73263af7",
    "prId" : 43086,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43086#pullrequestreview-605506781",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f33b845d-075f-4686-8c6c-2d6f793e92ba",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Hm - seems like this is the only questionable one.",
        "createdAt" : "2021-03-05T01:15:49Z",
        "updatedAt" : "2021-03-05T01:15:49Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "e5442307-6b8c-41f5-bf93-2332b81f2b1f",
        "parentId" : "f33b845d-075f-4686-8c6c-2d6f793e92ba",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Effectively, because we don't have a separate `missing` type, `undefined` represents the missing state in optional properties, so we really should remove `undefined` when we're inferring to an index signature as index signatures represent the type of those properties that are present.",
        "createdAt" : "2021-03-05T01:27:42Z",
        "updatedAt" : "2021-03-05T01:27:42Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "fff78d42-ce96-430c-aee6-c0e3e424aa3d",
        "parentId" : "f33b845d-075f-4686-8c6c-2d6f793e92ba",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Feels like things are getting a bit untenable without `missing`; any plausible implementation of `foo` with a legal `x4` could return `undefined`. We should revisit it.",
        "createdAt" : "2021-03-05T18:47:51Z",
        "updatedAt" : "2021-03-05T18:47:51Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "85815b08626c7b82c44f300cda22dadb039f406d",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +10,14 @@let a2 = foo(x2);  // string | number | undefined\nlet a3 = foo(x3);  // string | number\nlet a4 = foo(x4);  // string | number\n\n// Repro from #43045"
  }
]