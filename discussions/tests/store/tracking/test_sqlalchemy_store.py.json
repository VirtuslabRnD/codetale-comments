[
  {
    "id" : "1e4dc8c4-71e8-48a2-a894-a7a51666b4ac",
    "prId" : 4238,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4238#pullrequestreview-639405246",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99052129-017d-49a4-8adb-a0e334470d74",
        "parentId" : null,
        "authorId" : "ae7dd827-9f9e-4fb6-b1ba-d051793e929e",
        "body" : "Please move this section to the end of the test to not break the context on exception testing on L1996.",
        "createdAt" : "2021-04-20T00:33:40Z",
        "updatedAt" : "2021-04-30T07:13:37Z",
        "lastEditedBy" : "ae7dd827-9f9e-4fb6-b1ba-d051793e929e",
        "tags" : [
        ]
      }
    ],
    "commit" : "308069c83def5693a4f328342dcd4833bab01267",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1993,1997 @@        _get_orderby_clauses([\"param.a\", \"metric.a\", \"tag.a\"], session)\n\n        # test that \"=\" is used rather than \"is\" when comparing to True\n        parsed = [str(x) for x in _get_orderby_clauses([\"metric.a\"], session)[0]]\n        assert \"is_nan = true\" in parsed[0]"
  },
  {
    "id" : "1ed608ef-3b80-43d0-aab9-6c8d5e6f94df",
    "prId" : 4238,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4238#pullrequestreview-639405246",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94077f2a-33c4-42d6-9007-ba9bbb56829e",
        "parentId" : null,
        "authorId" : "ae7dd827-9f9e-4fb6-b1ba-d051793e929e",
        "body" : "also assert that \"value IS NULL\" in parsed[0].",
        "createdAt" : "2021-04-20T00:35:34Z",
        "updatedAt" : "2021-04-30T07:13:37Z",
        "lastEditedBy" : "ae7dd827-9f9e-4fb6-b1ba-d051793e929e",
        "tags" : [
        ]
      }
    ],
    "commit" : "308069c83def5693a4f328342dcd4833bab01267",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1995,1999 @@        # test that \"=\" is used rather than \"is\" when comparing to True\n        parsed = [str(x) for x in _get_orderby_clauses([\"metric.a\"], session)[0]]\n        assert \"is_nan = true\" in parsed[0]\n        assert \"value IS NULL\" in parsed[0]"
  },
  {
    "id" : "cbbc0cc3-df31-465f-9433-47490f8143e2",
    "prId" : 2217,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2217#pullrequestreview-356037998",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7f62ef2-2622-49e7-9fe5-56838944829d",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Can we have a negative case for `LIKE '%Other%'`?  This should return no results (or the same results if sqlite, with a comment).",
        "createdAt" : "2020-02-07T02:17:43Z",
        "updatedAt" : "2020-03-27T09:07:22Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "3b590e37-bce8-4715-85fe-7ca04cf0fcc6",
        "parentId" : "d7f62ef2-2622-49e7-9fe5-56838944829d",
        "authorId" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "body" : "Actually the sqlalchemy store tests run on sqllite, so this would return the same results",
        "createdAt" : "2020-02-10T15:39:38Z",
        "updatedAt" : "2020-03-27T09:07:22Z",
        "lastEditedBy" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "tags" : [
        ]
      }
    ],
    "commit" : "01cd1998f2c16a40f5fd8c0698a766a9ec2623df",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +941,945 @@\n        filter_string = \"params.generic_2 LIKE '%other%'\"\n        six.assertCountEqual(self, [r2], self._search(experiment_id, filter_string))\n\n        filter_string = \"params.generic_2 ILIKE '%Other%'\""
  },
  {
    "id" : "a9279389-e71d-4d88-858a-61627a1acf75",
    "prId" : 2217,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2217#pullrequestreview-394219337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fde491eb-777b-4fc9-ae99-dd8bdb18fbff",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "missing negative tests\r\n\r\n```\r\n        six.assertCountEqual(self, [],\r\n                             self._search(experiment_id,\r\n                                          filter_string=\"tags.generic_2 LIKE 'other%'\"))\r\n\r\n        six.assertCountEqual(self, [],\r\n                             self._search(experiment_id,\r\n                                          filter_string=\"tags.generic_2 LIKE '%other'\"))\r\n\r\n```",
        "createdAt" : "2020-04-15T01:53:26Z",
        "updatedAt" : "2020-04-15T02:03:54Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "b84d17bd-1235-4fe3-9172-f5b627ab940c",
        "parentId" : "fde491eb-777b-4fc9-ae99-dd8bdb18fbff",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "create #2708 to handle this and more tests",
        "createdAt" : "2020-04-16T00:19:31Z",
        "updatedAt" : "2020-04-16T00:19:31Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "01cd1998f2c16a40f5fd8c0698a766a9ec2623df",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +989,993 @@        six.assertCountEqual(self, [r2],\n                             self._search(experiment_id,\n                                          filter_string=\"tags.generic_2 LIKE '%other%'\"))\n        six.assertCountEqual(self, [r2],\n                             self._search(experiment_id,"
  },
  {
    "id" : "c307a393-ceb2-46ea-bc32-ab60029bab41",
    "prId" : 2195,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2195#pullrequestreview-331568884",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d581a3df-c4f2-4512-afc2-6882dff32a01",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "this is a great test! thanks",
        "createdAt" : "2019-12-12T22:33:03Z",
        "updatedAt" : "2019-12-13T12:03:39Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "98a8a0fea5f895143af0e668cd4ac86d01549b4f",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +1521,1525 @@                                             None,\n                                             ViewType.ALL, max_results=1000, order_by=[\"tag.t1\"])\n        assert len(run_results) == 2\n\n"
  },
  {
    "id" : "8d422231-04cc-4dd2-a121-aae59e877e8d",
    "prId" : 2059,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2059#pullrequestreview-314652231",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9961ddd1-e565-49eb-bc90-3437eca2fa62",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "I tried running this test against a MySQL database, and it emitted the following warning several times:\r\n```\r\ntests/store/tracking/test_sqlalchemy_store.py::TestSqlAlchemyStoreMysqlDb::test_order_by_metric_tag_param\r\n  /Users/czumar/anaconda2/lib/python2.7/site-packages/sqlalchemy/sql/base.py:556: SAWarning: Column 'CASE WHEN (anon_1.is_nan IS true) THEN :param_1 WHEN (anon_1.value IS NULL) THEN :param_2 ELSE :param_3 END' on table <sqlalchemy.sql.selectable.Select at 0x1190bebd0; Select object> being replaced by <sqlalchemy.sql.elements.ColumnClause at 0x118e17e10; %(4716925584 anon)s>, which has the same key.  Consider use_labels for select() statements.\r\n    % (key, getattr(existing, \"table\", None), value)\r\n```\r\n\r\nCan you implement the `use_labels` suggestion to remove column name conflicts between tables? This is an argument to `select()` (https://docs.sqlalchemy.org/en/13/core/selectable.html#sqlalchemy.sql.expression.select).",
        "createdAt" : "2019-11-11T04:31:35Z",
        "updatedAt" : "2019-11-15T09:47:15Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a74fb2b311d1e2374c1eddec4b31ba9862d652bb",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +790,794 @@                                            order_by=order_clauses)]\n\n    def test_order_by_metric_tag_param(self):\n        experiment_id = self.store.create_experiment('order_by_metric')\n"
  }
]