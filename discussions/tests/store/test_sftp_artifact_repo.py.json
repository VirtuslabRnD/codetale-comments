[
  {
    "id" : "f4d1b990-90cc-4847-aa3a-2ba85209fd22",
    "prId" : 299,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/299#pullrequestreview-146681998",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75602e2c-868d-4bc6-921d-368b0165d0f4",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Q: Why the large annotation here? Seems fine to add, but was this test slow beforehand?",
        "createdAt" : "2018-08-16T02:04:28Z",
        "updatedAt" : "2018-08-17T01:34:24Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "3b3151ea-38fc-4533-9e5f-2a17b45c11ed",
        "parentId" : "75602e2c-868d-4bc6-921d-368b0165d0f4",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "It takes about 60 seconds to throw the error.",
        "createdAt" : "2018-08-16T02:30:30Z",
        "updatedAt" : "2018-08-17T01:34:24Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c7575987b66727ee8e3cb5f75da4bfc748c2db3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +14,18 @@\n\n@pytest.mark.large\ndef test_artifact_uri_factory():\n    from paramiko.ssh_exception import SSHException"
  },
  {
    "id" : "c800dba8-1563-4731-a42b-2b616b28c8aa",
    "prId" : 250,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/250#pullrequestreview-145491073",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc78f89c-8a3c-4295-9746-3849382b148a",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Actually - I tried running this test locally via `pytest tests/store/test_sftp_artifact_repo.py --requires-ssh` and it failed with an `AuthenticationException`, do you know what setup is required to run this test? This was the output:\r\n\r\n```\r\n_____________________________________________________________________________________________________________ test_log_artifact _____________________________________________________________________________________________________________\r\n\r\n    @pytest.mark.requires_ssh\r\n    def test_log_artifact():\r\n        for artifact_path in [None, \"sub_dir\", \"very/nested/sub/dir\"]:\r\n            file_content = 'A simple test artifact\\nThe artifact is located in: ' + str(artifact_path)\r\n            with NamedTemporaryFile(mode=\"w\") as local, TempDir() as remote:\r\n                local.write(file_content)\r\n                local.flush()\r\n    \r\n                sftp_path = \"sftp://\" + remote.path()\r\n>               store = SFTPArtifactRepository(sftp_path)\r\n\r\ntests/store/test_sftp_artifact_repo.py:116: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nmlflow/store/sftp_artifact_repo.py:49: in __init__\r\n    self.sftp = pysftp.Connection(**self.config)\r\n../../miniconda3/envs/mlflow_python3/lib/python3.6/site-packages/pysftp/__init__.py:143: in __init__\r\n    self._transport.connect(**self._tconnect)\r\n../../miniconda3/envs/mlflow_python3/lib/python3.6/site-packages/paramiko/transport.py:1205: in connect\r\n    self.auth_publickey(username, pkey)\r\n../../miniconda3/envs/mlflow_python3/lib/python3.6/site-packages/paramiko/transport.py:1450: in auth_publickey\r\n    return self.auth_handler.wait_for_response(my_event)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <paramiko.auth_handler.AuthHandler object at 0x11049d160>, event = <threading.Event object at 0x11047e828>\r\n\r\n    def wait_for_response(self, event):\r\n        max_ts = None\r\n        if self.transport.auth_timeout is not None:\r\n            max_ts = time.time() + self.transport.auth_timeout\r\n        while True:\r\n            event.wait(0.1)\r\n            if not self.transport.is_active():\r\n                e = self.transport.get_exception()\r\n                if (e is None) or issubclass(e.__class__, EOFError):\r\n                    e = AuthenticationException('Authentication failed.')\r\n                raise e\r\n            if event.is_set():\r\n                break\r\n            if max_ts is not None and max_ts <= time.time():\r\n                raise AuthenticationException('Authentication timeout.')\r\n    \r\n        if not self.is_authenticated():\r\n            e = self.transport.get_exception()\r\n            if e is None:\r\n                e = AuthenticationException('Authentication failed.')\r\n            # this is horrible.  Python Exception isn't yet descended from\r\n            # object, so type(e) won't work. :(\r\n            if issubclass(e.__class__, PartialAuthentication):\r\n                return e.allowed_types\r\n>           raise e\r\nE           paramiko.ssh_exception.AuthenticationException: Authentication failed.\r\n\r\n../../miniconda3/envs/mlflow_python3/lib/python3.6/site-packages/paramiko/auth_handler.py:226: AuthenticationException\r\n____________________________________________________________________________________________________________ test_log_artifacts _____________________________________________________________________________________________________________\r\n\r\n    @pytest.mark.requires_ssh\r\n    def test_log_artifacts():\r\n        for artifact_path in [None, \"sub_dir\", \"very/nested/sub/dir\"]:\r\n            file_content_1 = 'A simple test artifact\\nThe artifact is located in: ' + str(artifact_path)\r\n            file_content_2 = os.urandom(300)\r\n    \r\n            file1 = \"meta.yaml\"\r\n            directory = \"saved_model\"\r\n            file2 = \"sk_model.pickle\"\r\n            with TempDir() as local, TempDir() as remote:\r\n                with open(os.path.join(local.path(), file1), \"w\") as f:\r\n                    f.write(file_content_1)\r\n                os.mkdir(os.path.join(local.path(), directory))\r\n                with open(os.path.join(local.path(), directory, file2), \"wb\") as f:\r\n                    f.write(file_content_2)\r\n    \r\n                sftp_path = \"sftp://\" + remote.path()\r\n>               store = SFTPArtifactRepository(sftp_path)\r\n\r\ntests/store/test_sftp_artifact_repo.py:146: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nmlflow/store/sftp_artifact_repo.py:49: in __init__\r\n    self.sftp = pysftp.Connection(**self.config)\r\n../../miniconda3/envs/mlflow_python3/lib/python3.6/site-packages/pysftp/__init__.py:143: in __init__\r\n    self._transport.connect(**self._tconnect)\r\n../../miniconda3/envs/mlflow_python3/lib/python3.6/site-packages/paramiko/transport.py:1205: in connect\r\n    self.auth_publickey(username, pkey)\r\n../../miniconda3/envs/mlflow_python3/lib/python3.6/site-packages/paramiko/transport.py:1450: in auth_publickey\r\n    return self.auth_handler.wait_for_response(my_event)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <paramiko.auth_handler.AuthHandler object at 0x110921860>, event = <threading.Event object at 0x1109216d8>\r\n\r\n    def wait_for_response(self, event):\r\n        max_ts = None\r\n        if self.transport.auth_timeout is not None:\r\n            max_ts = time.time() + self.transport.auth_timeout\r\n        while True:\r\n            event.wait(0.1)\r\n            if not self.transport.is_active():\r\n                e = self.transport.get_exception()\r\n                if (e is None) or issubclass(e.__class__, EOFError):\r\n                    e = AuthenticationException('Authentication failed.')\r\n                raise e\r\n            if event.is_set():\r\n                break\r\n            if max_ts is not None and max_ts <= time.time():\r\n                raise AuthenticationException('Authentication timeout.')\r\n    \r\n        if not self.is_authenticated():\r\n            e = self.transport.get_exception()\r\n            if e is None:\r\n                e = AuthenticationException('Authentication failed.')\r\n            # this is horrible.  Python Exception isn't yet descended from\r\n            # object, so type(e) won't work. :(\r\n            if issubclass(e.__class__, PartialAuthentication):\r\n                return e.allowed_types\r\n>           raise e\r\nE           paramiko.ssh_exception.AuthenticationException: Authentication failed.\r\n\r\n../../miniconda3/envs/mlflow_python3/lib/python3.6/site-packages/paramiko/auth_handler.py:226: AuthenticationException\r\n\r\n```",
        "createdAt" : "2018-08-10T21:30:42Z",
        "updatedAt" : "2018-08-13T16:29:23Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "eefd7ecf-92e8-47ae-bbb2-309a61b6a3b4",
        "parentId" : "fc78f89c-8a3c-4295-9746-3849382b148a",
        "authorId" : "1b8b31e6-6071-4ae0-ad3a-f6f3f59bf002",
        "body" : "You have to be able to login with ssh without password to localhost. \r\nIf you 'ssh localhost' does it ask for a password? If that's the case, you could add your pulic key to authorized_keys. ",
        "createdAt" : "2018-08-11T04:08:38Z",
        "updatedAt" : "2018-08-13T16:29:23Z",
        "lastEditedBy" : "1b8b31e6-6071-4ae0-ad3a-f6f3f59bf002",
        "tags" : [
        ]
      },
      {
        "id" : "cee01b28-24d9-49c1-a814-821fba745c8e",
        "parentId" : "fc78f89c-8a3c-4295-9746-3849382b148a",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Ah got it, thanks for clarifying - using an identityfile + adding the key to authorized_keys worked for me. Would you be able to add a comment stating that passwordless SSH access to localhost is required to run the test? I think at some point we'll add a nightly test runner that runs the tests requiring SSH, so it'd be helpful to document the requirements.",
        "createdAt" : "2018-08-12T23:45:19Z",
        "updatedAt" : "2018-08-13T16:29:23Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "070ae959c92176cbe96ee4601a5de234fbb2bedf",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +105,109 @@\n\n@pytest.mark.requires_ssh\ndef test_log_artifact():\n    for artifact_path in [None, \"sub_dir\", \"very/nested/sub/dir\"]:"
  }
]