[
  {
    "id" : "1f0ed6f6-de09-457f-bdcf-73cf98fa1537",
    "prId" : 1767,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1767#pullrequestreview-280656927",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6cf1c1b-fc31-41e5-ac4c-cf9c39d98f5d",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "BTW, how did you generate these files? It'd be nice to check those scripts in somewhere (maybe also under `test/resources/db`), or link to a gist with the scripts, since their correctness affects the correctness of this test",
        "createdAt" : "2019-08-27T01:59:02Z",
        "updatedAt" : "2019-09-01T04:13:51Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "1aae6bb4-aae6-4d42-9915-66930292b4b3",
        "parentId" : "a6cf1c1b-fc31-41e5-ac4c-cf9c39d98f5d",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "@smurching Great suggestion! I've added thorough docs to this test case that include a link to a Gist containing the script used to generate the sample metrics, as well as inline code for recreating the metrics JSON dump file.",
        "createdAt" : "2019-08-28T08:09:58Z",
        "updatedAt" : "2019-09-01T04:13:51Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fa61934515e0b92b1711d5fa9f3fded119d56cb",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +1317,1321 @@        db_resources_path = os.path.normpath(\n            os.path.join(current_dir, os.pardir, \"resources\", \"db\"))\n        expected_metric_values_path = os.path.join(\n            db_resources_path, \"db_version_7ac759974ad8_with_metrics_expected_values.json\")\n        with TempDir() as tmp_db_dir:"
  },
  {
    "id" : "64b141ad-fa52-4d68-aa58-f9f1459ee0b4",
    "prId" : 1558,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1558#pullrequestreview-260325047",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08bc3f5e-f3fe-4805-af28-986e6edc310f",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "@ankitmathur-db Can we also test the case where we call `set_tag()` with the same key on two different runs and ensure that deleting the tag from one run does not delete the tag from the other (per the filter issue you mentioned yesterday)",
        "createdAt" : "2019-07-10T20:02:37Z",
        "updatedAt" : "2019-07-11T18:32:59Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "52ef1680fbc3c39c0bbba85a39b1674a83c8bfca",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +548,552 @@    def test_delete_tag(self):\n        run = self._run_factory()\n        k0, v0 = 'tag0', 'val0'\n        k1, v1 = 'tag1', 'val1'\n        tag0 = entities.RunTag(k0, v0)"
  },
  {
    "id" : "52b902c5-0905-4aac-971a-e148f10ecb63",
    "prId" : 1167,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1167#pullrequestreview-230444852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18d086cb-217d-4d7d-970d-ac85068ac595",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Check attributes of run returned by the write path & read path, just to be safe (this test failed before this PR as `experiment_id` was an int on the read path)",
        "createdAt" : "2019-04-25T00:06:38Z",
        "updatedAt" : "2019-04-26T23:49:55Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "7406a091-a2d3-43e5-a066-3f23e05d7eaa",
        "parentId" : "18d086cb-217d-4d7d-970d-ac85068ac595",
        "authorId" : "668ead22-45dd-4911-8926-af33e1dbaebc",
        "body" : "LGTM. Might have added a test where experiment_id is passed as an int but it should not affect the to_mlflow_entity code path.",
        "createdAt" : "2019-04-25T04:15:14Z",
        "updatedAt" : "2019-04-26T23:49:55Z",
        "lastEditedBy" : "668ead22-45dd-4911-8926-af33e1dbaebc",
        "tags" : [
        ]
      }
    ],
    "commit" : "477a087d5e2b48ed98d5089d8d516a99680d57a1",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +356,360 @@        fetched_run = self.store.get_run(created_run.info.run_uuid)\n\n        for actual in [created_run, fetched_run]:\n            self.assertEqual(actual.info.experiment_id, experiment_id)\n            self.assertEqual(actual.info.user_id, expected[\"user_id\"])"
  },
  {
    "id" : "51d9f34a-a6e0-42e4-b17e-0d6ac88225ab",
    "prId" : 1167,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1167#pullrequestreview-230408646",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "504f32ec-d2f1-430b-9a96-00e5ae4d420b",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Test that we can log the same param twice (we didn't have a test for this before AFAICT)",
        "createdAt" : "2019-04-25T00:08:03Z",
        "updatedAt" : "2019-04-26T23:49:55Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "477a087d5e2b48ed98d5089d8d516a99680d57a1",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +485,489 @@        self.store.log_param(run.info.run_uuid, param)\n        self.store.log_param(run.info.run_uuid, param2)\n        self.store.log_param(run.info.run_uuid, param2)\n\n        run = self.store.get_run(run.info.run_uuid)"
  },
  {
    "id" : "7277577f-ca46-4a50-aacd-e8873c042916",
    "prId" : 1167,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1167#pullrequestreview-230408729",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6bd8f3d-4904-4abf-aceb-d1e1559bdd39",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Test that we can log the overwrite a tag via `set_tag` (we didn't have a direct test for this before AFAICT, though log batch tests indirectly verified this)",
        "createdAt" : "2019-04-25T00:08:31Z",
        "updatedAt" : "2019-04-26T23:49:55Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "477a087d5e2b48ed98d5089d8d516a99680d57a1",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +539,543 @@        self.store.set_tag(run.info.run_uuid, tag)\n        # Overwriting tags is allowed\n        self.store.set_tag(run.info.run_uuid, new_tag)\n\n        run = self.store.get_run(run.info.run_uuid)"
  },
  {
    "id" : "5f179936-a658-4067-b05e-3d2d89c5402e",
    "prId" : 1155,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1155#pullrequestreview-233291638",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9f8de8c-e4a6-4a7a-839f-606b64b5eb65",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "The changes to this test should be a no-op (I removed `with TempDir`, which unfortunately shifted everything else up a line / removed one level of indentation in the diff)",
        "createdAt" : "2019-05-03T00:20:41Z",
        "updatedAt" : "2019-05-07T02:33:19Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c797a7ace43cc6ee2842f1c9daf8a35e1fc1fd5",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +79,83 @@\n    def test_default_experiment_lifecycle(self):\n        default_experiment = self.store.get_experiment(experiment_id=0)\n        self.assertEqual(default_experiment.name, Experiment.DEFAULT_EXPERIMENT_NAME)\n        self.assertEqual(default_experiment.lifecycle_stage, entities.LifecycleStage.ACTIVE)"
  },
  {
    "id" : "f801ca17-2864-4ec4-a0dc-d190af213903",
    "prId" : 1155,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1155#pullrequestreview-233291873",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91c7d7c1-85ce-467c-b6a8-09776c632be9",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "This test runs & passes locally against MySQL 5.7 (interestingly our DB schema is & has been invalid in MySQL 8.0 because both the runs & experiments table include a constraint named `lifecycle_stage`, but that's a separate problem - will make a GitHub issue to track it). In a follow-up I can add back logic for running it in Travis via a nightly build.",
        "createdAt" : "2019-05-03T00:22:05Z",
        "updatedAt" : "2019-05-07T02:33:19Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c797a7ace43cc6ee2842f1c9daf8a35e1fc1fd5",
    "line" : 179,
    "diffHunk" : "@@ -1,1 +1130,1134 @@\n\n@pytest.mark.release\nclass TestSqlAlchemyStoreMysqlDb(TestSqlAlchemyStoreSqlite):\n    \"\"\""
  },
  {
    "id" : "5f39bd28-0846-456d-b7dd-b5badab2c488",
    "prId" : 1060,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1060#pullrequestreview-220674133",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58d31524-b84e-4854-894e-d60af1d94153",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "🤣 ... same test ;-)\r\nWe so totally need that backend store test bench.",
        "createdAt" : "2019-03-29T17:38:07Z",
        "updatedAt" : "2019-03-29T23:16:34Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "656fc794de9b53608d60d061bfa0082a2a66c9bd",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +777,781 @@        six.assertCountEqual(self, [r2], self._search(experiment_id, param_expressions=[expr]))\n\n    def test_search_tags(self):\n        experiment_id = self._experiment_factory('search_tags')\n        r1 = self._run_factory(self._get_run_configs('r1', experiment_id)).info.run_uuid"
  },
  {
    "id" : "2e869162-f302-46d0-b8da-75be1345dff0",
    "prId" : 972,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/972#pullrequestreview-214750763",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5604ee47-0c9d-45a3-867c-e91ac9231c0d",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "This silences a \"null metric value\" warning because we're deliberately testing that logging a null metric raises an exception",
        "createdAt" : "2019-03-14T20:37:55Z",
        "updatedAt" : "2019-03-18T16:12:25Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd948199e87d88587d2c4b07fd6e6724dc6e8bdc",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +458,462 @@\n        warnings.simplefilter(\"ignore\")\n        with self.assertRaises(MlflowException) as exception_context, warnings.catch_warnings():\n            self.store.log_metric(run.info.run_uuid, metric)\n            warnings.resetwarnings()"
  },
  {
    "id" : "c7578d1e-186c-4897-b34d-9c93e783ea41",
    "prId" : 926,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/926#pullrequestreview-211811623",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f5bf03d-845a-42c1-8099-c3dfa5c4b366",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "This change is intended to be staged across two releases, but it may make sense to make more of the changes that 'assume source_type is in tags only'. These would include:\r\n\r\n- Removing these parameters from the MlflowClient tracking API (e.g., mlflow/projects/__init__.py#create_run would have to embed these in tags instead).\r\n- Mentioning in the protos that these fields are deprecated and moved to tags.\r\n- Changing the JavaScript to read first from the tag and then from the field.",
        "createdAt" : "2019-03-06T16:46:24Z",
        "updatedAt" : "2019-03-08T15:47:10Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "9d43dd4b-1b29-4499-831a-24e6af83ecb0",
        "parentId" : "9f5bf03d-845a-42c1-8099-c3dfa5c4b366",
        "authorId" : "da2a90d1-571b-4818-a352-3f0fd14e245e",
        "body" : "We agreed that a subsequent PR should implement these.",
        "createdAt" : "2019-03-07T14:28:41Z",
        "updatedAt" : "2019-03-08T15:47:10Z",
        "lastEditedBy" : "da2a90d1-571b-4818-a352-3f0fd14e245e",
        "tags" : [
        ]
      }
    ],
    "commit" : "1aa3fbeeee10157c53c228e0240f4c09fc3a94e1",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +327,331 @@        self.assertEqual(len(actual.data.tags), 3)\n\n        name_tag = models.SqlTag(key=MLFLOW_RUN_NAME, value='booyya').to_mlflow_entity()\n        self.assertListEqual(actual.data.tags, tags + [name_tag])\n"
  },
  {
    "id" : "e59be064-d016-42d3-bb15-3ba0e0d5b374",
    "prId" : 900,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/900#pullrequestreview-208299606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "441c72b1-bd0d-48e4-97eb-a8ecd578bd60",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Nit: We should probably be using `pytest` here.",
        "createdAt" : "2019-02-27T01:41:10Z",
        "updatedAt" : "2019-02-27T01:41:10Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "97cd5261-2ca5-4882-8641-266c6d64a264",
        "parentId" : "441c72b1-bd0d-48e4-97eb-a8ecd578bd60",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Do we use `unittest` because it makes it easier to define `tearDown()` routine to purge the Sql store tables?",
        "createdAt" : "2019-02-27T01:43:56Z",
        "updatedAt" : "2019-02-27T01:43:56Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e99d4965994960f31e79265826fca34240cef61",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +20,24 @@\n\nclass TestSqlAlchemyStoreSqliteInMemory(unittest.TestCase):\n    def _setup_database(self, filename=''):\n        # use a static file name to initialize sqllite to test retention."
  },
  {
    "id" : "0fdd3494-eeaf-4381-b267-57c3bbf961f0",
    "prId" : 860,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/860#pullrequestreview-199321685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "662c7be4-9c3c-430c-b733-8479c86a6af7",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Would it be difficult to test that I can delete the default experiment and have it not come back, assuming that I created at least one other experiment?",
        "createdAt" : "2019-02-01T16:33:03Z",
        "updatedAt" : "2019-02-04T07:17:12Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "cd2b97c2-eab1-4992-a6f5-7049dbb079e8",
        "parentId" : "662c7be4-9c3c-430c-b733-8479c86a6af7",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "yes! Was a bit of a pain but wrote a testcase that pins a sqlite file for a test. in the middle of the test, it destroys `SqlAlchemyStore`, and ensures that deleted `Default` experiment stays deleted with new `SqlAlchemyStore` using same sqlite file.\r\n\r\nThanks for the idea...",
        "createdAt" : "2019-02-02T00:46:09Z",
        "updatedAt" : "2019-02-04T07:17:12Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb3cf583131d805f4d5cf86122b01c099393d4c4",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +41,45 @@        return self.store.create_experiment(name=names)\n\n    def test_default_experiment(self):\n        experiments = self.store.list_experiments()\n        self.assertEqual(len(experiments), 1)"
  },
  {
    "id" : "2d33fff0-bd02-4ee5-a68d-58a86bfe56d4",
    "prId" : 847,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/847#pullrequestreview-197298570",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e9430c3-395a-4b0a-93c7-53c3bf14f448",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "nice, like the restore part",
        "createdAt" : "2019-01-28T22:44:55Z",
        "updatedAt" : "2019-01-28T23:40:36Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e6dddba8feb1a236545c0dc94581b3342c24b7f",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +545,549 @@        self.assertIn(\"must be in 'active' state\", e.exception.message)\n\n        # restore this run and try again\n        self.store.restore_run(run_uuid)\n        self.assertEqual(self.store.get_run(run_uuid).info.lifecycle_stage,"
  },
  {
    "id" : "bd58195c-a4dd-49dc-be14-edf243c6903e",
    "prId" : 844,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/844#pullrequestreview-196707527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f8916f8-60fa-4c78-bbb8-b07b11e051c2",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Btw, could we document what the parameter to `_get_run` is? It seems a bit weird that I ask for a run by id, but also must pass in the state I expect it to be in. Maybe it could default to ViewType.ALL, unless this is a safety thing?\r\n\r\nThe error message isn't great, btw, if ViewType mismatches -- it would just say `No runs with id <> exists`. Not only is this grammatically incorrect (😛), but it doesn't indicate why there was a problem. Having the caller enforce the ViewType constraint where appropriate might be clearer.",
        "createdAt" : "2019-01-25T18:23:52Z",
        "updatedAt" : "2019-01-26T06:36:03Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "d417e4e8-0595-43dd-b840-415dadb0534a",
        "parentId" : "3f8916f8-60fa-4c78-bbb8-b07b11e051c2",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "That is a good point--I think the motivation was to push down the filter for ACTIVE vs DELETED runs. Maybe the method should return the run and caller should print appropriate message.\r\n\r\nWill handle this as a follow on change",
        "createdAt" : "2019-01-25T20:57:54Z",
        "updatedAt" : "2019-01-26T06:36:03Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbe048081a3d81054cd143234fe8d2f6120035a9",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +325,329 @@        # Should return duplicates as well\n        # MLflow RunData contains only the last reported values for metrics.\n        sql_run_metrics = self.store._get_run(run.info.run_uuid, ViewType.ALL).metrics\n        self.assertEqual(4, len(sql_run_metrics))\n        self.assertEqual(3, len(run.data.metrics))"
  },
  {
    "id" : "2e12e2f7-04ba-4c4b-99f2-80ea066d39d2",
    "prId" : 844,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/844#pullrequestreview-196642927",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3aee444d-517a-42ff-a99a-933a8caf27e2",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Maybe add a comment here that the run_data itself should pick only the latest metric for the given key, for clarity. Without the context of this PR, this line looks like a bug.",
        "createdAt" : "2019-01-25T18:25:13Z",
        "updatedAt" : "2019-01-26T06:36:03Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbe048081a3d81054cd143234fe8d2f6120035a9",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +327,331 @@        sql_run_metrics = self.store._get_run(run.info.run_uuid, ViewType.ALL).metrics\n        self.assertEqual(4, len(sql_run_metrics))\n        self.assertEqual(3, len(run.data.metrics))\n\n        found = False"
  },
  {
    "id" : "c2058220-9bc4-4842-944a-7248e61531ff",
    "prId" : 844,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/844#pullrequestreview-196644983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b799a93-bb3b-4a6d-9338-56939bd4c469",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Oh, this is nice, we should use this for the above.",
        "createdAt" : "2019-01-25T18:28:06Z",
        "updatedAt" : "2019-01-26T06:36:03Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "8a290701-3bd4-499d-b95f-6f4a91ba2a50",
        "parentId" : "3b799a93-bb3b-4a6d-9338-56939bd4c469",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "👍 ",
        "createdAt" : "2019-01-25T18:30:11Z",
        "updatedAt" : "2019-01-26T06:36:03Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbe048081a3d81054cd143234fe8d2f6120035a9",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +540,544 @@        runs = [self._run_factory('r_%d' % r, exp).run_uuid for r in range(3)]\n\n        self.assertSequenceEqual(runs, self._search(exp, run_view_type=ViewType.ALL))\n        self.assertSequenceEqual(runs, self._search(exp, run_view_type=ViewType.ACTIVE_ONLY))\n        self.assertSequenceEqual([], self._search(exp, run_view_type=ViewType.DELETED_ONLY))"
  },
  {
    "id" : "37f3143f-72c1-48e8-93be-4e905317d555",
    "prId" : 844,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/844#pullrequestreview-196645602",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2cc7f3b-0f58-4d0f-a15e-12068537b6f6",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "nit: in order to avoid potential mix-up of these two parameters, maybe we could give them different values for the different runs.",
        "createdAt" : "2019-01-25T18:30:39Z",
        "updatedAt" : "2019-01-26T06:36:03Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "32dcda4c-7598-4449-a506-4ce16b19ad8d",
        "parentId" : "f2cc7f3b-0f58-4d0f-a15e-12068537b6f6",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "oh, I see that it's important for the search query to have the same value. Since we have two pairs of parameters:\r\n- same key and same value\r\n- different keys and different values\r\n\r\nMaybe it would be good to add \"same key and different values\" as a third test case here.",
        "createdAt" : "2019-01-25T18:31:43Z",
        "updatedAt" : "2019-01-26T06:36:03Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbe048081a3d81054cd143234fe8d2f6120035a9",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +562,566 @@\n        self.store.log_param(r1, entities.Param('generic_param', 'p_val'))\n        self.store.log_param(r2, entities.Param('generic_param', 'p_val'))\n\n        self.store.log_param(r1, entities.Param('generic_2', 'some value'))"
  },
  {
    "id" : "b04758c0-936c-4748-aa78-aa3af4a9eeb2",
    "prId" : 844,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/844#pullrequestreview-196648063",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b852470-e629-4e17-8596-ba3c40216aed",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Let's make sure to include a test with the same metric name across multiple runs with different timestamps. We've had a bug in the past with that particular setup.",
        "createdAt" : "2019-01-25T18:37:28Z",
        "updatedAt" : "2019-01-26T06:36:03Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "b39a757d-5bc9-4c8d-bc2b-4e0e60f432f9",
        "parentId" : "2b852470-e629-4e17-8596-ba3c40216aed",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "That's a good call out.",
        "createdAt" : "2019-01-25T18:38:03Z",
        "updatedAt" : "2019-01-26T06:36:03Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbe048081a3d81054cd143234fe8d2f6120035a9",
    "line" : 160,
    "diffHunk" : "@@ -1,1 +603,607 @@\n        self.store.log_metric(r1, entities.Metric(\"common\", 1.0, 1))\n        self.store.log_metric(r2, entities.Metric(\"common\", 1.0, 1))\n\n        self.store.log_metric(r1, entities.Metric(\"measure_a\", 1.0, 1))"
  }
]