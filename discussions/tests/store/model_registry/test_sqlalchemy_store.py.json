[
  {
    "id" : "93fcc18f-36c8-4dd5-9017-069f8cacc642",
    "prId" : 3470,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3470#pullrequestreview-500572416",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ed93e01-794d-48f4-a3f7-bba3b9054482",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "this is just for the IN query, right? we do allow multiple conditions if the conditions are not IN queries? if so, why did we make this choice here?",
        "createdAt" : "2020-10-01T08:17:42Z",
        "updatedAt" : "2020-10-02T04:50:01Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "0833a13f-8569-48d8-85d4-0ce336bd4c82",
        "parentId" : "8ed93e01-794d-48f4-a3f7-bba3b9054482",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Per https://github.com/mlflow/mlflow/blob/master/mlflow/store/model_registry/sqlalchemy_store.py#L765, I believe we don't allow multiple conditions in search model versions filters both in OSS and within Databricks, so this test was to make sure that we didn't accidentally mess up the error messaging while adding support for the IN operator",
        "createdAt" : "2020-10-01T17:34:27Z",
        "updatedAt" : "2020-10-02T04:50:01Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c6ff5c7bbaa4ee0f32a24985c9690b7d6dbea21",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +765,769 @@        assert \"ill-formed list\" in exception_context.exception.message\n\n        # search using the IN operator is not allowed with other additional filters\n        with self.assertRaises(MlflowException) as exception_context:\n            search_versions("
  },
  {
    "id" : "2c1b64c6-8516-48e1-a14d-cd68d8893134",
    "prId" : 3470,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3470#pullrequestreview-500557803",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "520fa834-6d5a-4bea-a111-51c63fa4bf94",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "do we need to worry about malformed queries here like `run_id IN (` ?",
        "createdAt" : "2020-10-01T08:18:36Z",
        "updatedAt" : "2020-10-02T04:50:01Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "e56387d4-c1e9-4473-bbb3-f1d210a3e170",
        "parentId" : "520fa834-6d5a-4bea-a111-51c63fa4bf94",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Added a test for it, but it does seem to perform as expected (throws MlflowException with \"Invalid clause\")",
        "createdAt" : "2020-10-01T17:14:47Z",
        "updatedAt" : "2020-10-02T04:50:01Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c6ff5c7bbaa4ee0f32a24985c9690b7d6dbea21",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +740,744 @@        # search using the IN operator with empty lists should return exceptions\n        with self.assertRaises(MlflowException) as exception_context:\n            search_versions(\"run_id IN ()\")\n        assert exception_context.exception.error_code == ErrorCode.Name(INVALID_PARAMETER_VALUE)\n        assert \"expected a non-empty list of string values\" in exception_context.exception.message"
  },
  {
    "id" : "cfa30fa0-279a-40cf-8053-bc04f98885f3",
    "prId" : 3470,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3470#pullrequestreview-500859047",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d321ae8-4c7c-41c0-86f4-16e142b1a404",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "could have used @ parametrize but no need to change now.",
        "createdAt" : "2020-10-01T23:23:24Z",
        "updatedAt" : "2020-10-02T04:50:01Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "8b4af130-246e-41fb-9efa-ff0f7bea09d2",
        "parentId" : "4d321ae8-4c7c-41c0-86f4-16e142b1a404",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Ah right - yeah will keep that in mind for next time as well",
        "createdAt" : "2020-10-02T04:49:24Z",
        "updatedAt" : "2020-10-02T04:50:01Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c6ff5c7bbaa4ee0f32a24985c9690b7d6dbea21",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +745,749 @@\n        # search using an ill-formed IN operator correctly throws exception\n        with self.assertRaises(MlflowException) as exception_context:\n            search_versions(\"run_id IN (\")\n        assert exception_context.exception.error_code == ErrorCode.Name(INVALID_PARAMETER_VALUE)"
  },
  {
    "id" : "52dbc6dd-c193-4aad-8440-90ccbdca9571",
    "prId" : 3076,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3076#pullrequestreview-446093135",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5aa66a09-21dd-4680-98da-6a7340b457d9",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "check that with `False` we don't throw?",
        "createdAt" : "2020-07-09T23:03:02Z",
        "updatedAt" : "2020-07-13T08:47:37Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "f93d3e4f-41bd-483c-a72e-29dfd0338304",
        "parentId" : "5aa66a09-21dd-4680-98da-6a7340b457d9",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Makes sense. I'll add another assertion",
        "createdAt" : "2020-07-10T03:03:11Z",
        "updatedAt" : "2020-07-13T08:47:37Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "447d1d75c72e184680340d9b9b22d86ac11da83f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +364,368 @@        for stage in [\"Archived\", \"None\"]:\n            self.store.transition_model_version_stage(name, mv1.version, stage, False)\n\n        self.store.transition_model_version_stage(name, mv1.version, \"Staging\", False)\n        self.store.transition_model_version_stage(name, mv2.version, \"Production\", False)"
  },
  {
    "id" : "82e420a6-63a2-4aaf-b574-a52bc57357da",
    "prId" : 3076,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3076#pullrequestreview-446092999",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e2e80e7-431d-4433-8ab8-ef8631657653",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "can we also check somewhere that with `False` we don't archive the existing versions?",
        "createdAt" : "2020-07-09T23:05:58Z",
        "updatedAt" : "2020-07-13T08:47:37Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "db4c814c-ee11-4627-a50c-c1472be28c8a",
        "parentId" : "9e2e80e7-431d-4433-8ab8-ef8631657653",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "I'll add that test",
        "createdAt" : "2020-07-10T03:02:37Z",
        "updatedAt" : "2020-07-13T08:47:37Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "447d1d75c72e184680340d9b9b22d86ac11da83f",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +393,397 @@        mv2 = self._mv_maker(name)\n        mv3 = self._mv_maker(name)\n\n        msg = (r\"Model version transition cannot archive existing model versions \"\n               r\"because .+ is not an Active stage. Valid stages are .+\")"
  },
  {
    "id" : "b6444b71-8bf2-4a2a-8aa5-2a36f6b06420",
    "prId" : 3074,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3074#pullrequestreview-446674633",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07f7029b-fde7-4cc7-a7f4-e7b2ba82e0fd",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Nice test! Can we remove instances of `tags or []` from assert statements (I left a suggestion on a few before realizing that there are many). The rationale is that we're explicitly testing that tags should be present on MVs / RMs, so we should assume that the tags verification list is always populated.",
        "createdAt" : "2020-07-10T20:59:50Z",
        "updatedAt" : "2020-07-11T00:39:59Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cd186ab6ef6529a3aa2c73c09bd5683d1f2ac6e",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +6,10 @@import uuid\n\nimport mlflow\nimport mlflow.db\nimport mlflow.store.db.base_sql_model"
  },
  {
    "id" : "63b68ad1-a539-41b7-88d6-d4fd086767e9",
    "prId" : 3023,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3023#pullrequestreview-439578104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb436ccb-f994-480b-84e7-a68c158e822e",
        "parentId" : null,
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "This is the query the UI makes",
        "createdAt" : "2020-06-29T23:55:17Z",
        "updatedAt" : "2020-06-30T18:25:16Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f02ab97e3ba7ab9cba8459ceef70cde8b41d3cd1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +516,520 @@        self.assertEqual(rms, [])\n\n        # confirm that ILIKE works for empty query\n        rms, _ = self._search_registered_models(f\"name iLike '%%'\")\n        self.assertEqual(rms, names)"
  },
  {
    "id" : "1c58ef01-2f66-4c51-b1bc-ca210a0f4ecf",
    "prId" : 2968,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2968#pullrequestreview-434239406",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f329cd4-8d76-4ff0-b449-e1b873bd70c8",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "also add a negative test for case-insensitive operator : searching with filter `\"name iLike '%RM17%'\"` should yield empty result.",
        "createdAt" : "2020-06-19T04:16:52Z",
        "updatedAt" : "2020-06-19T22:01:07Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "c56cdfb8-1851-46d0-80fc-8b3fd32306d8",
        "parentId" : "0f329cd4-8d76-4ff0-b449-e1b873bd70c8",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Done!",
        "createdAt" : "2020-06-19T17:29:45Z",
        "updatedAt" : "2020-06-19T22:01:07Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1de79a5bf8c47ec2dcbaf039ea2e6afecbf81b2c",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +514,518 @@        self.assertEqual(rms, [])\n\n        rms, _ = self._search_registered_models(f\"name ilike '%RM4a'\")\n        self.assertEqual(rms, names[4:])\n"
  },
  {
    "id" : "d914b928-c66c-44d6-8e68-09b2c19aa672",
    "prId" : 2965,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2965#pullrequestreview-433791735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0f38840-62d8-4c1d-be03-f31113cb2c1f",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "reminder: handle in code and put in tests for `like`, `Like`, `iLike` ... etc",
        "createdAt" : "2020-06-19T01:45:15Z",
        "updatedAt" : "2020-06-22T23:19:19Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "00598fad-4a07-4638-981f-5208d81883b8",
        "parentId" : "c0f38840-62d8-4c1d-be03-f31113cb2c1f",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Tests for these cases are in #2968 - do you feel it should also be tested in conjunction with the `order_by`?\r\n\r\nAlso, what do you mean by handle in code?",
        "createdAt" : "2020-06-19T02:45:47Z",
        "updatedAt" : "2020-06-22T23:19:19Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      },
      {
        "id" : "3770c458-7e9a-4a98-ae55-4dbdc1bd24b8",
        "parentId" : "c0f38840-62d8-4c1d-be03-f31113cb2c1f",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "aah! i see. can can keep that PR separate",
        "createdAt" : "2020-06-19T04:17:30Z",
        "updatedAt" : "2020-06-22T23:19:19Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c509cf9d3ed4e85d5f93737773205ceef968132",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +607,611 @@        # test flow with fixed max_results and order_by (test stable order across pages)\n        returned_rms = []\n        query = \"name LIKE 'RM%'\"\n        result, token = self._search_registered_models(query,\n                                                       page_token=None,"
  },
  {
    "id" : "037e0c60-116d-42d9-b497-c86201151692",
    "prId" : 2965,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2965#pullrequestreview-435311317",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d52e28af-fa12-4247-b1b4-23d6b89861ec",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "for for different flavors of blanks\r\n- space (already covered)\r\n- multiple spaces\r\n- tabs",
        "createdAt" : "2020-06-22T22:16:38Z",
        "updatedAt" : "2020-06-22T23:19:19Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c509cf9d3ed4e85d5f93737773205ceef968132",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +630,634 @@        result, _ = self._search_registered_models(query,\n                                                   page_token=None,\n                                                   order_by=['timestamp DESC'],\n                                                   max_results=100)\n        self.assertEqual(rms[::-1], result)"
  },
  {
    "id" : "047949d6-4b5a-4216-95d6-cfc6af6bbe68",
    "prId" : 2951,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2951#pullrequestreview-432990788",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5dde7917-6252-4a5a-9378-375f567998c3",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "I am refactoring this test -- instead of overwriting results in `PagedList` structure, returning an ordered list of names (as a return ordering) and token as a separate object.",
        "createdAt" : "2020-06-18T06:58:01Z",
        "updatedAt" : "2020-06-18T07:07:29Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "27a074a7cc6ad599541247427a48d720ab797308",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +390,394 @@                                                     max_results=max_results,\n                                                     page_token=page_token)\n        return [registered_model.name for registered_model in result], result.token\n\n    def test_search_registered_models(self):"
  },
  {
    "id" : "b2c73eed-bf58-4af7-bb9a-e324df9d0d09",
    "prId" : 2951,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2951#pullrequestreview-432990788",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "386e52ff-53b4-4b21-b53b-c31abe83b73e",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "handle returned registered models name list and token independently. doing an ordered comparison of the returned name list with expected result.",
        "createdAt" : "2020-06-18T06:59:31Z",
        "updatedAt" : "2020-06-18T07:07:29Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "27a074a7cc6ad599541247427a48d720ab797308",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +400,404 @@        # search with no filter should return all registered models\n        rms, _ = self._search_registered_models(None)\n        self.assertEqual(rms, names)\n\n        # equality search using name should return exactly the 1 name"
  },
  {
    "id" : "33ec0bd5-1b21-4ed5-9cfe-e093481601aa",
    "prId" : 2939,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2939#pullrequestreview-432784287",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a1963fb-4f53-451b-a2cb-5a002f8cf1ce",
        "parentId" : null,
        "authorId" : "dab5a163-e8a4-4ae3-a16c-0d903dcff35c",
        "body" : "Nit: I'd prefer that a test function test only one scenario rather than have one test function validate multiple scenarios.",
        "createdAt" : "2020-06-17T21:43:17Z",
        "updatedAt" : "2020-06-18T20:02:49Z",
        "lastEditedBy" : "dab5a163-e8a4-4ae3-a16c-0d903dcff35c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1bbef6c0afb2e750831f6748354d1fdb9cb2d08",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +208,212 @@        self.store.delete_registered_model(name=f\"RM{0:03}\")\n        self.assertEqual(set(self._list_registered_models(max_results=100)),\n                         set(rms[1:]))\n\n    def test_get_latest_versions(self):"
  },
  {
    "id" : "f86e2f9e-a88d-4598-b59f-26168e0d2622",
    "prId" : 2939,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2939#pullrequestreview-432860977",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90bed271-624e-4914-b44c-0988867a309d",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "we can remove 173-180 now right?",
        "createdAt" : "2020-06-17T23:31:07Z",
        "updatedAt" : "2020-06-18T20:02:49Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "d4be1689-79cb-4812-8396-6c7a7a467b61",
        "parentId" : "90bed271-624e-4914-b44c-0988867a309d",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Yup sorry that was an oversight",
        "createdAt" : "2020-06-18T00:24:09Z",
        "updatedAt" : "2020-06-18T20:02:49Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1bbef6c0afb2e750831f6748354d1fdb9cb2d08",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +168,172 @@            returned_rms.extend(result)\n        self.assertEqual(result.token, None)\n        self.assertEqual(set(rms), set(returned_rms))\n\n    def test_list_registered_model_paginated_returns_in_correct_order(self):"
  },
  {
    "id" : "72e4e93d-1d34-45c8-a1ac-e4769de8fd64",
    "prId" : 2935,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2935#pullrequestreview-431079741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01078865-bfee-433f-b680-102600e1390b",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "these tests look good -- i would write an additional test that starts with a `None` token; and repeated calls search registered models with say `max_results = 5` until no more. In each round, collect the results and ensure that backend returns all 50 RMs",
        "createdAt" : "2020-06-16T00:50:40Z",
        "updatedAt" : "2020-06-16T21:29:41Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "a90aa2d486f914a58311253ecefd07bb4cfe813a",
    "line" : 186,
    "diffHunk" : "@@ -1,1 +519,523 @@        self.assertEqual(result.token, None)\n        self.assertEqual(result, rms[35:])\n\n        # test that providing a completely invalid page token throws\n        with self.assertRaises(MlflowException) as exception_context:"
  },
  {
    "id" : "3d8b32eb-22f8-43b1-bafa-2a5954b7f6ca",
    "prId" : 2921,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2921#pullrequestreview-429405437",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a09814c5-29a6-4e79-8a25-aaa31a3cf970",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Please put a comment that `\"_e%\"` matched `\"test_fo..\"`",
        "createdAt" : "2020-06-12T01:34:28Z",
        "updatedAt" : "2020-06-12T18:46:56Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6dfdca0c206fd21eae9653d4f45ba97956f7e5f",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +422,426 @@        # case-sensitive prefix search using LIKE with surrounding % should return all the RMs\n        # _e% matches test_for_search_ , so all RMs should match\n        self.assertEqual(set(search_registered_model(f\"name LIKE '_e%'\")),\n                         set([name1, name2, name3, name4, name5, name6]))\n"
  }
]