[
  {
    "id" : "3ac55da6-eb3e-4753-8878-17f61c326a1f",
    "prId" : 7419,
    "prUrl" : "https://github.com/apache/airflow/pull/7419#pullrequestreview-359939030",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bed471f4-4ba2-4cb7-ae9f-10d46c33c5d7",
        "parentId" : null,
        "authorId" : "f85ef659-e88b-40c6-856b-c86350e0d001",
        "body" : "For new tests, did you consider using `pytest` instead of `unittest`? This test can be a simple function with `pytest`. With `pytest.mark.paraemtrize`, individual modules can be created as sub tests automatically. Something like this will do. Having the relative_filepath in the test name (instead of full path) is just to make sure test names don't change.\r\n\r\nOne other suggestion you may consider is to mock `log.exception()` to raise error (instead of counting `import_errors`). That way, when a DAG fails to import and `log.exception()` is called inside dagbag.py, the stack trace is printed immediately by pytest instead of printing the exception to the terminal output together with other output.\r\n\r\n```python\r\nimport os\r\nimport pytest\r\n\r\n@pytest.mark.parametrize(\"relative_filepath\", [os.realpath(p, ROOT_FOLDER) \r\n                                               for p in glob(f\"{ROOT_FOLDER}/airflow/**/example_dags/example_*.py\", \r\n                                                             recursive=True))])\r\ndef test_should_be_importable(relative_filepath):\r\n    dagbag = DagBag(\r\n        dag_folder=os.path.join(ROOT_FOLDER, relative_filepath),\r\n        executor=None,\r\n        include_examples=False,\r\n    )\r\n    assert len(dagbag.import_errors) == 0, f\"import_errors={str(dagbag.import_errors)}\" \r\n    assert len(dagbag.dag_ids) >= 1, f\"{relative_filepath} should contain dags\"\r\n```",
        "createdAt" : "2020-02-15T12:07:48Z",
        "updatedAt" : "2020-02-18T00:10:04Z",
        "lastEditedBy" : "f85ef659-e88b-40c6-856b-c86350e0d001",
        "tags" : [
        ]
      },
      {
        "id" : "7935240b-03fb-4869-bea7-335be6813ad4",
        "parentId" : "bed471f4-4ba2-4cb7-ae9f-10d46c33c5d7",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "We had a long discussion about pytest and parameterized. https://lists.apache.org/thread.html/1e4df7d4b0cd9b2d2bb76a3336471aa85e852545dd41ada6d4e461b8%40%3Cdev.airflow.apache.org%3E\r\n\r\nThe use of subtest is more nicely displayed in the IDE.\r\n![Screenshot 2020-02-17 at 20 38 16](https://user-images.githubusercontent.com/12058428/74682183-a06b1180-51c5-11ea-98e1-7582353450de.png)\r\nUsing parameterized will fake us the number of tests, because suddenly the number of tests will increase by 80. If it's really not a few tests, but only one. I also don't like parameterized when generating a list is expensive. Here it is necessary to walk through a large number of directories to create these tests. \r\n\r\nI don't see the benefit of changing the place where this message is to be displayed. On the other hand, the lack of mock makes this test easier to understand.\r\n\r\n\r\n\r\n",
        "createdAt" : "2020-02-17T19:45:53Z",
        "updatedAt" : "2020-02-18T00:10:04Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce187018f66304f7d473306816c568602ff0865c",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +21,25 @@\nfrom airflow.models import DagBag\n\nROOT_FOLDER = os.path.realpath(\n    os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir)"
  }
]