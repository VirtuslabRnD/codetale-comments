[
  {
    "id" : "e9fbb9be-9e50-4cae-adf3-6af78cfd9155",
    "prId" : 19916,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19916#pullrequestreview-81332142",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42aefa71-9c99-400e-9838-07dbeec0cf18",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "not sure i understand why this is `{ z }` an not `import _z from \"z\"; const {z} = _z`;",
        "createdAt" : "2017-11-30T21:24:22Z",
        "updatedAt" : "2018-01-09T21:01:12Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "bda254b5-f2ed-4ce2-b8f1-15ccc05e96a0",
        "parentId" : "42aefa71-9c99-400e-9838-07dbeec0cf18",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "If we had this:\r\n```ts\r\nconst zNamespace = require(\"z\");\r\nzNamespace.z();\r\n```\r\nWe would translate to this:\r\n```ts\r\nimport { z } from \"z\";\r\nz();\r\n```\r\nright?\r\nUsing a destructure in commonjs (`const { z } = require(\"z\");`) behaves equivalently to the first example so I think we should upgrade it to es6 too.",
        "createdAt" : "2017-11-30T21:52:41Z",
        "updatedAt" : "2018-01-09T21:01:12Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "1e8e7fc7-68b3-439e-a297-1c8d954fffa1",
        "parentId" : "42aefa71-9c99-400e-9838-07dbeec0cf18",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "well it depends on what `\"z\"` is. if it is ES6 module, then it is fine. if it a cjs file, then it shoudl be `import zNamspace from \"z\"; zNamespace.z()`.\r\n\r\n2 questions:\r\n1. what if \"z\" is another file in the project, and the user is going to run the refactoring on `\"z\"` next, should we assume it is a `default`? or that it is a namespace?\r\n2. What do we do in absence of information, e.g. if this is a module from node_modules, or one we have not seen before.. i would say it safe to assume that everything is cjs unless proven otherwise..\r\n\r\nI think the important part here is for us to be consistent between import and export. either everything is a `default`, or everything is a namespace. let's grab @DanielRosenwasser tomorrow and talk it out.",
        "createdAt" : "2017-12-01T07:19:43Z",
        "updatedAt" : "2018-01-09T21:01:12Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "c9027861-a7b2-49f4-9156-9f7b1f4de55a",
        "parentId" : "42aefa71-9c99-400e-9838-07dbeec0cf18",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Talked with @DanielRosenwasser and I think it's fine to use a named import regardless of the thing we're importing from. @DanielRosenwasser mentioned that we could also choose to provide a second codefix that would always use default imports. But I think we should wait and see if anyone actually wants that, because I think most people will want named imports.",
        "createdAt" : "2017-12-05T20:54:44Z",
        "updatedAt" : "2018-01-09T21:01:12Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d67ef009c0ea63416675289f5d7b245d34aa3a8f",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +15,19 @@    newContent: `import x from \"x\";\nconst y = 0;\nimport { z } from \"z\";`,\n});"
  }
]