[
  {
    "id" : "0881a7c9-2a8a-4de9-a403-fe8302882509",
    "prId" : 40347,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40347#pullrequestreview-482915647",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48ef9346-f127-4e7b-b7c6-7b80cd41a1ff",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I am not sure why this has to be optionalReplacementSpan and not just replacementSpan if editor supports it (there is already preference for that no)",
        "createdAt" : "2020-09-02T19:26:22Z",
        "updatedAt" : "2020-09-02T19:26:22Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "001f9e3e-b2ae-449a-b515-900037840a63",
        "parentId" : "48ef9346-f127-4e7b-b7c6-7b80cd41a1ff",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "My understanding is there is not a preference that allows users to opt out of using `replacementSpan`—in VS and VS Code, the presence of `replacementSpan` means the editor will always use it, which is good because it means users can’t end up in a situation where they trigger completions on `style.|` and end up with a syntax error like `style.[\"background-color\"]`. This new span will be configurable by a preference.\r\n\r\nThat said, it does seem like using the new `optionalReplacementSpan` is almost _always_ better than the current behavior, but I guess @mjbvz and co. have thought through the reasons someone might want to have both options more than I have.",
        "createdAt" : "2020-09-02T19:56:10Z",
        "updatedAt" : "2020-09-02T19:56:10Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "eb355985-3331-4acf-83ab-431b586bf17c",
        "parentId" : "48ef9346-f127-4e7b-b7c6-7b80cd41a1ff",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "But i dont see this being configured by preference? Even if this is configured by preference, why cant it be returned as part of replacementSpan since replacement span if present is always meant to override this one?",
        "createdAt" : "2020-09-03T20:14:39Z",
        "updatedAt" : "2020-09-03T20:14:40Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "891d887f-3a05-478f-b63a-4075b9a14805",
        "parentId" : "48ef9346-f127-4e7b-b7c6-7b80cd41a1ff",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I believe it’s supposed to be an editor preference, which could potentially be configured across multiple languages. If TS Server adopted this preference and VS Code sent it to us, that would be an option. That’s not something that was discussed in the issue; I personally don’t have strong feelings one way or another. I’ll let @mjbvz weigh in.",
        "createdAt" : "2020-09-03T21:04:07Z",
        "updatedAt" : "2020-09-03T21:04:07Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "fdb64328-b3f6-41a1-a71f-60e3c76ac307",
        "parentId" : "48ef9346-f127-4e7b-b7c6-7b80cd41a1ff",
        "authorId" : "1d4633b6-c940-4836-914c-864f47cc37f8",
        "body" : "VS code lets users configure how suggestions are inserted using the `editor.suggest.insertMode` setting. The options are `insert` which always inserts the current suggestion without replacing the suffix, and `replace` which would try replacing the suffix word.\r\n\r\nHowever users can always toggle to the opposite mode of the current one by holding down `shift` while accepting a completion. This means that TS always needs to return both spans to us in some way. I think we need a clear distinction between: \r\n\r\n- Here's a span that should always be replaced regardless of insert mode (the current `replacementSpan` property)\r\n- Here's a replacement span that you should use if the user accepts a completion in `replace` mode (which would be the new `optionalRepalcementSpan`)\r\n\r\nI think the current proposal covers our needs but let me know if that doesn't sound correct based on my description\r\n",
        "createdAt" : "2020-09-04T01:58:26Z",
        "updatedAt" : "2020-09-04T01:58:33Z",
        "lastEditedBy" : "1d4633b6-c940-4836-914c-864f47cc37f8",
        "tags" : [
        ]
      },
      {
        "id" : "6d5ff3a4-bca6-4f32-ba41-e7f9768403ad",
        "parentId" : "48ef9346-f127-4e7b-b7c6-7b80cd41a1ff",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Got it. Now understand why you always want this property to be populated and separate. Thanks.",
        "createdAt" : "2020-09-04T16:53:51Z",
        "updatedAt" : "2020-09-04T16:53:51Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "dfbce8f2-d77c-4428-98b3-a856870899fc",
        "parentId" : "48ef9346-f127-4e7b-b7c6-7b80cd41a1ff",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Thanks for the clarification 👍 ",
        "createdAt" : "2020-09-04T20:09:47Z",
        "updatedAt" : "2020-09-04T20:09:47Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd7dbe0e87ca743820ec2a0d419eba429c7d8e82",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +4,8 @@\n//// console.[|cl/*0*/ockwork|];\n//// type T = Array[\"[|toS/*1*/paghetti|]\"];\n\ntest.ranges().forEach((range, marker) => {"
  }
]