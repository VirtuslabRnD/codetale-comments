[
  {
    "id" : "77e7a984-dc71-4fe6-80a4-8281f216cc75",
    "prId" : 37606,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37606#pullrequestreview-382512235",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4945c3aa-846d-4407-9921-2f61eff58b76",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Can you also add tests for ` export  { a,  /*here*/}`, `export { a/*here*/ as /*here*/}`, `export { a as b, /*here*/ }`",
        "createdAt" : "2020-03-25T22:14:47Z",
        "updatedAt" : "2020-03-26T19:42:38Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "741b8a94-4bb7-46ac-b04c-04bd648707f8",
        "parentId" : "4945c3aa-846d-4407-9921-2f61eff58b76",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "This brings up a good point: I was filtering out symbols that were already exported, but it’s valid to export the same thing several times if you rename:\r\n\r\n```ts\r\nexport { T, T as T2, T as T3, T as T4, ... }\r\n```\r\n\r\nDo you think I should eliminate the filtering?",
        "createdAt" : "2020-03-25T22:47:48Z",
        "updatedAt" : "2020-03-26T19:42:38Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "18b24108-f34b-4bc6-a29c-09eca20a15ef",
        "parentId" : "4945c3aa-846d-4407-9921-2f61eff58b76",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think instead of filtering you should sort text of those at lower priority ?\r\n",
        "createdAt" : "2020-03-25T22:58:09Z",
        "updatedAt" : "2020-03-26T19:42:38Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "047301a9-7b1b-4ca3-b8fe-cbf98bc55a49",
        "parentId" : "4945c3aa-846d-4407-9921-2f61eff58b76",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I don't know how practical it is, but another option might be to include the `as` the second time it's committed.",
        "createdAt" : "2020-03-26T18:28:18Z",
        "updatedAt" : "2020-03-26T19:42:38Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "94432318-5092-4962-8b4d-df2d563d8f5a",
        "parentId" : "4945c3aa-846d-4407-9921-2f61eff58b76",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "@sheetalkamat how would you set the sort text here? It defaults to `LocationPriority`, and the other enum member names aren’t _accurate_, even though the values are just `\"1\"`, `\"2\"`, etc... IIRC adding/changing SortText required changes elsewhere. Is it ok to use `OptionalMember` here for names that have already been included?",
        "createdAt" : "2020-03-26T19:00:49Z",
        "updatedAt" : "2020-03-26T19:42:38Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "8affe85d-e892-43b6-bdc2-00743eb314ba",
        "parentId" : "4945c3aa-846d-4407-9921-2f61eff58b76",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "symbolToSortTextMap[getSymbolId(symbol)] = SortText./*whatever you want to set*/;\r\n",
        "createdAt" : "2020-03-26T21:55:43Z",
        "updatedAt" : "2020-03-26T21:55:44Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "0dfe112d-7a34-46a7-9b46-57e02ccc00ea",
        "parentId" : "4945c3aa-846d-4407-9921-2f61eff58b76",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "That’s what I currently have, it’s just that none of the existing SortText members describe the scenario, and I think I recall that adding a new one messed something up for @uniqueiniquity one time, but he can correct me if that’s wrong.",
        "createdAt" : "2020-03-27T00:23:51Z",
        "updatedAt" : "2020-03-27T00:23:52Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "9048736b-775b-42dc-ba96-941be6a39d7f",
        "parentId" : "4945c3aa-846d-4407-9921-2f61eff58b76",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "Yeah I would prefer you didn't add new ones.... especially new ones above `GlobalsOrKeywords`. The other issue we had (i.e. the value for `JavaScriptIdentifiers` kept changing) is resolved now.",
        "createdAt" : "2020-03-27T00:28:25Z",
        "updatedAt" : "2020-03-27T00:28:26Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      },
      {
        "id" : "0abebd28-dcc3-4dde-b01b-f2d133d9b870",
        "parentId" : "4945c3aa-846d-4407-9921-2f61eff58b76",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I’m currently just using `OptionalMember` which is incorrect if introspecting by enum member name, but ultimately is just `\"1\"`.",
        "createdAt" : "2020-03-27T00:40:03Z",
        "updatedAt" : "2020-03-27T00:40:03Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1711368ea4b6d77839d5fb6fa0b5faab6067bb0",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +36,40 @@    { name: \"T\", sortText: completion.SortText.OptionalMember }\n  ]\n});"
  }
]