[
  {
    "id" : "868baf99-7c56-4aef-b80c-69bada5ccc3b",
    "prId" : 42612,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42612#pullrequestreview-581730132",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff946e1b-7761-408e-b9de-7f9d78b50a59",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This one is somewhat surprising since `T` is still generic.",
        "createdAt" : "2021-02-02T20:06:51Z",
        "updatedAt" : "2021-02-02T23:49:42Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "f317ced7-b077-4bad-8fa9-119dc396e87a",
        "parentId" : "ff946e1b-7761-408e-b9de-7f9d78b50a59",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I [commented about this](https://github.com/microsoft/TypeScript/issues/42595#issuecomment-771853487) in the issue.",
        "createdAt" : "2021-02-02T20:09:40Z",
        "updatedAt" : "2021-02-02T23:49:42Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "d158c25b1ed131487d28ce22b345ff188aff9adb",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +17,21 @@  marker: \"2\",\n  exact: [\"xyz\"],\n  isNewIdentifierLocation: false\n});"
  },
  {
    "id" : "215ff1e2-35b7-4330-95d8-67e71919b1e5",
    "prId" : 35709,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/35709#pullrequestreview-334071430",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccadc140-6cc5-4d28-8b65-bb0282bf85cd",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This change looks great but do you think we should allow `abc` in completions if `abc` is some variable in scope?",
        "createdAt" : "2019-12-17T21:26:24Z",
        "updatedAt" : "2019-12-17T21:26:24Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "920f3f19-5e22-4d22-b3ee-d5ec815fad96",
        "parentId" : "ccadc140-6cc5-4d28-8b65-bb0282bf85cd",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Right, I guess don't filter our anything that could be a shorthand property declaration.",
        "createdAt" : "2019-12-17T21:44:52Z",
        "updatedAt" : "2019-12-17T21:44:53Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "035da469-a08b-4a93-88e3-06b4dd34f868",
        "parentId" : "ccadc140-6cc5-4d28-8b65-bb0282bf85cd",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Those were never actually provided as object literal member completions, so this PR doesn’t filter them per se. I’m not sure if anything is really needed here as those completions already come up as plain text matches (I think this is provided by Monaco / VS):\r\n\r\n<img width=\"502\" alt=\"image\" src=\"https://user-images.githubusercontent.com/3277153/71100023-21c40a80-2169-11ea-886a-f05b7484f7d0.png\">\r\n\r\nI’m not sure if it’s right to make all in-scope identifiers first-class completions. _Real_ missing members from the contextual type are a very strong signal that the user will want to add those members, but the presence of random identifiers is a very weak signal. We can sort them appropriately, but otherwise there’s no visual distinction that one completion is a sure thing and the other is a wild guess. I think this would get really confusing.\r\n\r\nBesides, as I learned in #34855, with generics it can be extremely difficult to know ahead of time whether some hypothetical arbitrary member is a valid completion or not. It often appears not to be until the user adds it, when inference runs and incorporates it into the contextual type just because it’s there. But with conditional types, we effectively can’t know whether that member is going to be valid without speculatively type checking the change, which is prohibitively expensive.",
        "createdAt" : "2019-12-18T15:51:05Z",
        "updatedAt" : "2019-12-18T15:51:06Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "f398f4ce942ff6718882201f243b420387d14447",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2,6 @@\n////function f1<T>(x: T) {}\n////f1({ abc/*1*/ });\n////\n////function f2<T extends { xyz: number }>(x: T) {}"
  }
]