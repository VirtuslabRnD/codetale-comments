[
  {
    "id" : "916aa10f-0272-4571-bd71-6091b6b13a38",
    "prId" : 15932,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15932#pullrequestreview-39596358",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ff7a85d-8e9e-4f9d-b8ec-207e170227ba",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "can you please add example like:\r\n```typescript\r\nclass Base {\r\n}\r\nexport function foo() {\r\nreturn class extends Base {\r\n}\r\n}\r\n```\r\n\r\nThis should report error that Base is private and used here.",
        "createdAt" : "2017-05-18T21:11:58Z",
        "updatedAt" : "2017-05-22T21:58:11Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "e27595a2-d123-46c2-a7fe-eb20d268b1df",
        "parentId" : "5ff7a85d-8e9e-4f9d-b8ec-207e170227ba",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I tried adding an ad-hoc check, but I couldn't get it to distinguish between this case, where the class expression extends a class declaration, and the mixin case, where the class expression extends a parameter. There are two problems with the latter case:\r\n\r\n1. The mixed-in class could easily be a non-exported class declaration.\r\n2. Class declarations that call the mix-in are no longer enclosed in the mix-in function, making it difficult to track back to the original class expression's context in the displayType machinery.\r\n\r\nThis export will not cause errors in any case, because the class expression is exported as a type literal, so `Base` isn't actually referenced &mdash; just its contents.\r\n\r\ntl;dr &mdash; I don't think it's worthwhile to issue an error here.",
        "createdAt" : "2017-05-22T21:57:47Z",
        "updatedAt" : "2017-05-22T21:58:11Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecaf44d47437204f88ef11813665c1c38d32c6c3",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +24,28 @@\nexport class Test extends WithTags(FooItem) {}\n\nconst test = new Test();\n"
  },
  {
    "id" : "41900395-774d-48a5-b12c-96c295d8513d",
    "prId" : 15932,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15932#pullrequestreview-39566829",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cbacf27-d16b-4fae-8675-f27f0d778a15",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Can you also add private member to this? Are we suppose to see private member in the type literal? If yes we should not be writing type of that private property/method because then it would likely start showing errors (with inaccessible symbol) ",
        "createdAt" : "2017-05-18T21:13:24Z",
        "updatedAt" : "2017-05-22T21:58:11Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "09599da8-5bb7-4566-b79c-073784e08260",
        "parentId" : "1cbacf27-d16b-4fae-8675-f27f0d778a15",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Added test, and removed privates from declaration emit.",
        "createdAt" : "2017-05-22T19:35:53Z",
        "updatedAt" : "2017-05-22T21:58:11Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecaf44d47437204f88ef11813665c1c38d32c6c3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2,6 @@export var simpleExample = class {\n    static getTags() { }\n    tags() { }\n}\nexport var circularReference = class C {"
  }
]