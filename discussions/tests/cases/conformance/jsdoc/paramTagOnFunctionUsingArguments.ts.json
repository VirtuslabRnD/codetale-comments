[
  {
    "id" : "96fb887a-82c3-4256-b285-d90af7b055dc",
    "prId" : 22510,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22510#pullrequestreview-103594127",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45e2b473-e238-471f-95a1-bd2e3777353a",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This case I'm not so sure about supporting since people will think they're getting typing, when we just throw the type definition away without telling them and accept `any`. Instead we could add a better message telling them to use a rest parameter instead.",
        "createdAt" : "2018-03-13T18:30:03Z",
        "updatedAt" : "2018-03-14T16:53:06Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "c5f8cc44-1d65-4659-8aa7-39dc067ae1b9",
        "parentId" : "45e2b473-e238-471f-95a1-bd2e3777353a",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Rest parameters don't exist in ES5, so the error would only apply to ES2015 and later. And we don't usually know whether a .js file targets ES2015 or later. \r\n\r\nAs for throwing away typing, I don't think there's much we can do -- maybe a noImplicitAny error instead?\r\n\r\nI think it would be easier to error (to info-error?) whenever there's a reference to `arguments`. That error would be a lot easier to write, and would apply to both ES2015+ and TS, and should come with an associated quick fix. I'll open a separate issue for that.",
        "createdAt" : "2018-03-13T19:43:06Z",
        "updatedAt" : "2018-03-14T16:53:06Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "8d7b3eae-f39c-47ab-adfe-df0953fb5327",
        "parentId" : "45e2b473-e238-471f-95a1-bd2e3777353a",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Currently we require the user to place a dummy-parameter and type it as a rest parameter:\r\n```ts\r\n/** @param {...string} x */\r\nfunction f(x) {\r\n    return arguments[0];\r\n}\r\nf(1); // error, 1 is not a string\r\n```\r\nWe could make a codefix to convert `@param {string} first` to `@param {...string} args` and add the dummy parameter -- we could also stop requiring the dumy parameter.",
        "createdAt" : "2018-03-13T20:09:52Z",
        "updatedAt" : "2018-03-14T16:53:06Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "e4cde530-af3d-4cb5-b366-18e2592edacf",
        "parentId" : "45e2b473-e238-471f-95a1-bd2e3777353a",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I like that. I'll see how hard it is to get the error for the `{string} x` case and then remove it when it's changed to `{...string} x`. We can do the code fix later, since @mhegazy wants to get this into 2.8.1.",
        "createdAt" : "2018-03-13T20:12:08Z",
        "updatedAt" : "2018-03-14T16:53:06Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "70af333eec176e1fc19c8f8eb00f63b18ee5a964",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +8,12 @@\n/**\n * @param {string} first\n */\nfunction concat(/* first, second, ... */) {"
  }
]