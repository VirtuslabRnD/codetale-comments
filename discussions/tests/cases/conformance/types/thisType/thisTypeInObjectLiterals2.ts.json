[
  {
    "id" : "4c1a021e-7158-44fd-ac6a-53b3fa60fa1e",
    "prId" : 14141,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14141#pullrequestreview-24294140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60ec454d-3b2b-4fd2-b401-b7dde2964386",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Can you add a similar test based on the RWC case that used optional properties from the contextual type? Something like\r\n\r\n```ts\r\ntype Point = {\r\n  x: number;\r\n  y: number;\r\n  z?: number;\r\n  moveBy(dx: number, dy: number, dz?: number): void;\r\n}\r\nlet p1: Point = {\r\n  x: 10,\r\n  y: 20,\r\n  backward: true,\r\n  moveBy(dx, dy, dz) {\r\n    // 'backward' from object literal is available\r\n    this.x += dx * (this.backward ? -1 : 1);\r\n    this.y += dy;\r\n    // 'z' from contextual type is available\r\n    if (this.z && dz) {\r\n      this.z += dz;\r\n    }\r\n  }\r\n}\r\n```",
        "createdAt" : "2017-02-27T22:26:41Z",
        "updatedAt" : "2017-03-02T01:16:52Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "4512accd-4e41-4dbf-acb4-46066555c627",
        "parentId" : "60ec454d-3b2b-4fd2-b401-b7dde2964386",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Yes, will do. However, the `backward` property in your example would be an error because it is an excess property that doesn't exist in the contextual type.\r\n\r\nThe excess property check may an irritant in cases where an object literal introduces additional properties that are used in methods of the object literal--although we haven't gotten any complaints about it so far and it's been there for a while (since #3823). We might consider allowing excess properties if those properties are actually witnessed in methods of the object literal, although that is a rather complex rule to implement and explain.",
        "createdAt" : "2017-02-28T17:11:27Z",
        "updatedAt" : "2017-03-02T01:16:52Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "258bb4ff55f0336ac4df67056296eca23eaf783b",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +31,35 @@\n// In methods of an object literal with a contextual type, 'this' has the\n// contextual type.\n\ntype Point = {"
  }
]