[
  {
    "id" : "3bd226df-3737-48c8-aa96-81d8b94245d9",
    "prId" : 27695,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27695#pullrequestreview-163605343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66fc4801-cb52-406c-8245-302ab1677d3e",
        "parentId" : null,
        "authorId" : "fde7ab8a-5820-4ddb-8e3f-0de480adc675",
        "body" : "Could it be worth adding a test that includes constrained generics? My reasoning being that in the future it _might_ be worth considering discriminants that have constrained parameters because they are comparable to literals in some form. Having a test that would flag any changes might be helpful. Something like:\r\n\r\n```ts\r\nfunction f21<T extends number>(x: { a: undefined; b: { x: number } } | { a: T, b: { y: number } }) {\r\n    if (x.a === undefined) {\r\n        x.b = { y: 42 };\r\n    }\r\n}\r\n```",
        "createdAt" : "2018-10-10T23:54:19Z",
        "updatedAt" : "2018-10-10T23:54:19Z",
        "lastEditedBy" : "fde7ab8a-5820-4ddb-8e3f-0de480adc675",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cdba6d3516a32e36458ef68e2f785a914ffd91f",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +35,39 @@    }\n}\n\ntype Result<T> = { error?: undefined, value: T } | { error: Error };\n"
  }
]