[
  {
    "id" : "96e1163a-7443-486d-b69f-598e7c8e3463",
    "prId" : 6749,
    "prUrl" : "https://github.com/apache/airflow/pull/6749#pullrequestreview-328577294",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18daa72b-c7fc-4bf5-9e93-3b8dcede6fc2",
        "parentId" : null,
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "Pylint extensions. I strongly support this idea.",
        "createdAt" : "2019-12-07T21:56:43Z",
        "updatedAt" : "2019-12-08T22:44:08Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "fb00f300-9d07-4d02-a0bd-7133402c4a85",
        "parentId" : "18daa72b-c7fc-4bf5-9e93-3b8dcede6fc2",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Yep. It's super easy to add plugins :).",
        "createdAt" : "2019-12-07T21:59:38Z",
        "updatedAt" : "2019-12-08T22:44:08Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "81f633f1a0eccdc81f9dcfed45c01f5c7dd1dbbe",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +21,25 @@\n\nclass DoNotUseAssertsChecker(BaseChecker):\n    __implements__ = IAstroidChecker\n"
  },
  {
    "id" : "66df7da0-f5c0-42f6-9478-d9d6bfc0719b",
    "prId" : 6749,
    "prUrl" : "https://github.com/apache/airflow/pull/6749#pullrequestreview-328627108",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0358ac1-95f5-424b-87a9-9e4f8b1da6eb",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "How does this check that assert is not used?\r\n\r\nWoudn't it be just better to use pre-commit hook with pygrep ?",
        "createdAt" : "2019-12-08T01:17:38Z",
        "updatedAt" : "2019-12-08T22:44:08Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "7613554c-5ae0-4eaf-9ff1-b5614f02ec3b",
        "parentId" : "c0358ac1-95f5-424b-87a9-9e4f8b1da6eb",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "It will be very difficult to write the regular expression because the assert word may also appear in the comments.",
        "createdAt" : "2019-12-08T07:33:31Z",
        "updatedAt" : "2019-12-08T22:44:08Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "344c7dfa-03a6-4bab-9c4d-c7f9ff6d2793",
        "parentId" : "c0358ac1-95f5-424b-87a9-9e4f8b1da6eb",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "@kaxil  visit_assert is only called when there is an actual assert in the code parsed by Pylint. Pylint uses astroid to read the AST of python code and it will call visit_<lowercase_token> for all tokens parsed. This means that visit_assert will only be called when assert instruction is used. I was inspired by @BasPH https://github.com/BasPH/pylint-airflow which uses pylint plugins to verify DAGs and implemented it for assert checking. \r\n\r\nBTW. I think we should add more and more of those pylint plugins which are airflow-specific. for example we should be able to write - fairly easily - a pylint plugin that would prevent o instantiate Hooks inside of the __init__ methods of the operators or to prevent calling a DB instruction (such as reading Airflow Variables). Implementing assert plugin is the first step (and we should finalize pylint introduction and get rid of pylint_todo.txt).  ",
        "createdAt" : "2019-12-08T09:24:37Z",
        "updatedAt" : "2019-12-08T22:44:08Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "58ebdede-c2aa-4103-b20d-3e8a4440e83e",
        "parentId" : "c0358ac1-95f5-424b-87a9-9e4f8b1da6eb",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "That makes sense. I think I have much better idea of how this plugins work now. I didn't know how it worked when I was reviewing this PR. And I was like how does this check for assert. ðŸ˜‚\r\n\r\n+1 for using this plugjns now.",
        "createdAt" : "2019-12-08T11:28:39Z",
        "updatedAt" : "2019-12-08T22:44:08Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "7f47b968-333a-4fc7-8b34-aa0ad7b3685a",
        "parentId" : "c0358ac1-95f5-424b-87a9-9e4f8b1da6eb",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Cool!",
        "createdAt" : "2019-12-08T19:26:47Z",
        "updatedAt" : "2019-12-08T22:44:08Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "81f633f1a0eccdc81f9dcfed45c01f5c7dd1dbbe",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +37,41 @@        self.add_message(\n            self.name, node=node,\n        )\n\n"
  }
]