[
  {
    "id" : "0b24a46d-f464-4c49-8a18-506c13bf662e",
    "prId" : 8833,
    "prUrl" : "https://github.com/redis/redis/pull/8833#pullrequestreview-651053081",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "parentId" : null,
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "Here the assertion appears, $time_elapsed needs to be recalculated, otherwise the connection may be disconnected in the course of the above code, $time_elapsed will be less than $soft_limit_time.",
        "createdAt" : "2021-04-22T11:41:26Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "dba450e9-fd26-49a7-aa78-fa38461defbc",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "```suggestion\r\n                    assert {$omem >= 100000 && $time_elapsed < [expr $soft_limit_time*2]}\r\n```\r\nWhen ```$omem > 100000```, $start_time is actually behind, ```$time_elapsed >= $soft_limit_time``` is not necessarily true.",
        "createdAt" : "2021-04-22T12:27:34Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "09bbd644-d4f8-4436-b634-445730121153",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "body" : "This is a specific test relevant only when `wait_for_timeout` is `yes`. If it's `yes` and we're disconnected (`c == \"\"`) then we verify the `time_elapsed` is larger than `soft_limit_time` to make sure we were not disconnected before reaching the soft limit timeout.",
        "createdAt" : "2021-04-22T15:32:19Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "tags" : [
        ]
      },
      {
        "id" : "678c9b79-e2c9-4b65-8ae8-5abd654abc97",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "@yoav-steinberg what if we (the tcl code) detected the `start_time` late?\r\ni'm not sure we can afford to test that it wasn't disconnected prematurely.",
        "createdAt" : "2021-04-22T18:38:55Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "37e6cfd6-1f89-4efb-8258-5549442a5120",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "body" : "@oranagra if it detects `start_time` later then `time_elapsed` will also be calculated later. `time_elapsed` is always relative to the last updated `start_time`.",
        "createdAt" : "2021-04-27T07:48:05Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "tags" : [
        ]
      },
      {
        "id" : "c930582b-938a-467b-a899-f7b82dab7403",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "@yoav-steinberg ```start_time``` is delayed, but detection of user exit is on time, which may result in ```time_elapsed``` being less than soft_limit_time.",
        "createdAt" : "2021-04-27T08:34:23Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "2a74a4ab-54a3-465b-b335-5345d4f919c1",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "@yoav-steinberg There is a probability that the test will.\r\n```\r\nClient output buffer soft limit is enforced if time is overreached in tests/unit/obuf-limits.tcl\r\nExpected 143528 >= 100000 && 2981 >= 3000 (context: type eval line 23 cmd {assert {$omem >= 100000 && $time_elapsed >= $soft_limit_time}} proc ::test)\r\n```",
        "createdAt" : "2021-04-27T09:09:30Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "949b50b8-a908-4137-806b-104cb03bb02a",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "body" : "> Here the assertion appears, $time_elapsed needs to be recalculated, otherwise the connection may be disconnected in the course of the above code, $time_elapsed will be less than $soft_limit_time.\r\n\r\n@sundb Thanks, now I understand what you mean. I'll do a fix? Does the problem recreate when running with `--loop`? How long did you run it for?\r\nAnyway I pushed a fix. Can you take a look?",
        "createdAt" : "2021-04-27T12:59:22Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "tags" : [
        ]
      },
      {
        "id" : "be89709a-364f-4974-a4a7-3b2651f13c5f",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "@YaacovHazan No problem, I'll test it if you make changes, my freebsd only has 256m RAM so it's easy to reproduce these problems.",
        "createdAt" : "2021-04-27T13:45:38Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "84e4db66-d4f9-423c-88e0-b59fb3e4e787",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "It's about half an hour to show up, I'm just going to go do something else after the run and come back later to see if there are any problems.",
        "createdAt" : "2021-04-27T13:47:07Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "e619ecfa-320e-4e46-a1ce-20c2f644399f",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "@YaacovHazan I also tested your last commit, and it still gives the same error.",
        "createdAt" : "2021-04-27T16:32:11Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "e52af381-273a-4d34-82a0-a8ac9653a5ee",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "body" : "@sundb Can you paste the assertion error here?",
        "createdAt" : "2021-04-29T07:37:45Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "tags" : [
        ]
      },
      {
        "id" : "f4e36f23-45e3-45d2-b31c-12e4ef5afd52",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "I re-ran it again.\r\n````\r\n[err]: Client output buffer soft limit is enforced if time is overreached in tests/unit/obuf-limits.tcl\r\nExpected 164032 >= 100000 && 2876 >= 3000 (context: type eval line 28 cmd {assert {$omem >= 100000 && $time_elapsed >= $soft_limit_time}} proc ::test)\r\n```",
        "createdAt" : "2021-04-29T08:09:01Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "149eefa9-8b3e-457e-b2de-daca2cd84511",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "body" : "Thanks, on what platform/environment does this happen?",
        "createdAt" : "2021-04-29T09:16:38Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "tags" : [
        ]
      },
      {
        "id" : "6fefccdf-a1a7-4fcf-a3ff-f70f4cd595fd",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "os: freebsd 12\r\nmem: 256M\r\ncpu: 1core",
        "createdAt" : "2021-04-29T09:32:20Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "134bf830-7d10-4039-a842-1f18543320f2",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "body" : "@sundb This doesn't recreate on my freebsd (13). I ran it for over and hour with 50 parallel clients. Can you think of a reason for this failure on your setup? The current code makes sure to calculate `time_elapsed` **after** the disconnect, so there's no real way for it to be less than `soft_limit_time`.",
        "createdAt" : "2021-04-29T11:48:37Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "tags" : [
        ]
      },
      {
        "id" : "02c688bd-8a9b-440e-b120-3b4ae3c911bb",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "Do you have a memory limit for the virtual machine? Problems often arise in slow freebsd environments.",
        "createdAt" : "2021-04-29T11:56:27Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "07931e92-f456-47bf-a630-4d82ccb2485c",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "body" : "@sundb pushed another fix. Can you check?",
        "createdAt" : "2021-04-29T12:46:05Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "tags" : [
        ]
      },
      {
        "id" : "fc86585d-ed3a-462d-be81-cb6771815beb",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "@yoav-steinberg Another fail.\r\n```\r\nClient output buffer soft limit is not enforced too early and is enforced when no traffic in tests/unit/obuf-limits.tcl\r\nExpected [regexp {omem=([0-9]+)}  - omem] (context: type eval line 32 cmd {assert {[regexp {omem=([0-9]+)} $c - omem]}} proc ::test)\r\n```",
        "createdAt" : "2021-04-29T13:13:15Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "dd266f1c-a1ab-4b63-aeec-1df1e68180b9",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "body" : "It looks like for some reason `$c` was not `\"\"` but was rather `\" \"` (a space). How can that be? Does this happen every run?\r\nCan you try to debug this and find the reason/fix it?",
        "createdAt" : "2021-04-29T13:29:28Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "tags" : [
        ]
      },
      {
        "id" : "c2da811f-11ef-4cbd-93e1-35d263ee2b8c",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "Ok, I try it.",
        "createdAt" : "2021-04-29T13:31:33Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "989ec25f-44da-416d-b823-717969944a5e",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "@yoav-steinberg The previous assert doesn't appear anymore, I'll keep testing to see.\r\n```\r\nClient output buffer soft limit is enforced if time is overreached in tests/unit/obuf-limits.tcl\r\nExpected 5413 <= [expr 3000+2000] (context: type eval line 25 cmd {assert {$time_elapsed <= [expr $soft_limit_time+2000]}} proc ::test)\r\n```\r\nThere is still a probability, but when I changed it to +3000, it became much more stable.",
        "createdAt" : "2021-04-29T15:42:21Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "a6f3bb8f-ed6e-432c-925d-6809c3f2768f",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "body" : "@sundb, @oranagra this assertion is a safety check. It should really never happen. I tried to recreate the issue on a freebsd vm configured to run very slowly with only 256MB ram but still couldn't.\r\nI suggest to merge this PR and cherry-pick to 6.2. In the meantime if @sundb can recreate this failure, It would be good to investigate what's causing it? How the timing can be so off? And perhaps submit another fix.",
        "createdAt" : "2021-05-04T07:57:13Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "tags" : [
        ]
      },
      {
        "id" : "fd7da100-95c9-4606-aa3d-626327645c2a",
        "parentId" : "8b353e6f-227d-42bb-954e-8c4b1e62971d",
        "authorId" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "body" : "update: I managed to recreate the the `Expected 5008 <= [expr 3000+2000]` issue on a very slow running freebsd vm. I did some more testing and I can see that the redis commands (publishing, client list) are exceptionally slow. Sometimes peaking at over 1sec. I also saw that sometimes the tcl `after 10` takes over 1sec, which is consistently the reason the tests fails. \r\nSo what I suggest is to accept @sundb's suggestion and have a 3000 milli safety marign instead of 2000. On normal machines this test is efficient. On very slow machines this test doesn't really work as expected (the 'Client output buffer soft limit is not enforced too early and is enforced when no traffic' won't really check what it needs to). The alternative is to make all the timeouts here x10 longer, and then the test will be good on slow machines but this will slow down the tests too much.",
        "createdAt" : "2021-05-04T09:37:42Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff7fa8d1e0e259b30dcb677daca0bf48236e46c1",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +56,60 @@                if {$wait_for_timeout && $c == \"\"} {\n                    # Make sure we're disconnected when we reach the soft limit\n                    assert {$omem >= 100000 && $time_elapsed >= $soft_limit_time}\n                    break\n                } else {"
  },
  {
    "id" : "9d7c3ebc-7eef-4acb-b13f-ef50f7de1945",
    "prId" : 8833,
    "prUrl" : "https://github.com/redis/redis/pull/8833#pullrequestreview-642125311",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37700ae0-c3b8-4d83-9f0d-58b3ade10599",
        "parentId" : null,
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "Here assert also. I'm not sure why I have to wait for an extra 1s.",
        "createdAt" : "2021-04-22T12:12:26Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "e754279b-135c-499e-a0e3-ede1abb172b4",
        "parentId" : "37700ae0-c3b8-4d83-9f0d-58b3ade10599",
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "I was wrong, assert is here ```assert {[regexp {omem=([0-9]+)} $c - omem]}```.\r\nI think the problem was caused by the fact that the connection was disconnected during the 1 second period.",
        "createdAt" : "2021-04-22T12:17:24Z",
        "updatedAt" : "2021-05-04T10:41:33Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff7fa8d1e0e259b30dcb677daca0bf48236e46c1",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +63,67 @@                if {$omem > 100000} {\n                    if {$start_time == 0} {set start_time $last_under_limit_time}\n                    if {!$wait_for_timeout && $time_elapsed >= [expr $soft_limit_time-1000]} break\n                    # Slow down loop when omem has reached the limit.\n                    after 10"
  },
  {
    "id" : "883407d3-ead8-4287-97ea-b1f899989207",
    "prId" : 7202,
    "prUrl" : "https://github.com/redis/redis/pull/7202#pullrequestreview-490519152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e241df9d-5eae-4ec3-8fe0-e19e0f40e680",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "we may need `$rd flush` and even a short sleep if we wanna be sure redis processed this before the next statement.\r\nand it would also be good idea to add a check that makes sure redis disconnected the client before we proceed to do `$rd read`. we can do that by looking at `[s connected_clients]` (comparing before and other), or name it and look for it in `CLIENT LIST`.",
        "createdAt" : "2020-09-17T12:06:17Z",
        "updatedAt" : "2020-09-24T09:33:40Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "272ea6bbf7215a08389dbe81fcb885db8cf1041e",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +84,88 @@        $rd client setname mybiglist\n        assert {[$rd read] eq \"OK\"}\n        $rd lrange mylist 0 -1\n        $rd flush\n        after 100"
  },
  {
    "id" : "e661f6dd-fb37-48c6-bdee-328816c05eb1",
    "prId" : 7202,
    "prUrl" : "https://github.com/redis/redis/pull/7202#pullrequestreview-491981630",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a06a1393-b414-4500-bded-e1d786cddb2f",
        "parentId" : null,
        "authorId" : "98e31153-705f-4299-a152-78c428055d23",
        "body" : "It never fails regardless of 100k or 10M of output buffer limit on both fixed and unfixed version, because we actually close `async-free` clients in`beforeSleep`, so no buffer will be kept in redis even if we don't read the fd. I initially thought you want me to test it is right on my commit.",
        "createdAt" : "2020-09-18T15:17:44Z",
        "updatedAt" : "2020-09-24T09:33:40Z",
        "lastEditedBy" : "98e31153-705f-4299-a152-78c428055d23",
        "tags" : [
        ]
      },
      {
        "id" : "81d9cfe1-b486-4184-a8aa-c0db6a70362f",
        "parentId" : "a06a1393-b414-4500-bded-e1d786cddb2f",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "I'm confused. i thought that what we're fixing is that redis kept the partial response (what it cached up to the output buffer limit) in memory and writes it to the socket.\r\nbut now i realize it didn't keep it for very long.\r\n\r\nin fact, for the purpose of our test, it was enough to just change the order of these lines in beforeSleep:\r\n```c\r\n    /* Handle writes with pending output buffers. */\r\n    handleClientsWithPendingWritesUsingThreads();\r\n\r\n    /* Close clients that need to be closed asynchronous */\r\n    freeClientsInAsyncFreeQueue();\r\n```\r\n\r\nstill your fix might be slightly better, but in order to write an assert that will show that in `used_memory`, we need the two commands to be handled in the same event loop, and in the right order. (we can probablu do that, but it's very complicated)",
        "createdAt" : "2020-09-18T17:18:34Z",
        "updatedAt" : "2020-09-24T09:33:40Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "fe34673a-fd61-4204-a9fe-067cb7651b4f",
        "parentId" : "a06a1393-b414-4500-bded-e1d786cddb2f",
        "authorId" : "98e31153-705f-4299-a152-78c428055d23",
        "body" : "Hi @oranagra There are two points I fixed\r\n\r\n1. Don't continue to add reply bulk to output buffer(even if the reply is incomplete) to avoid increasing memory when reached output buffer limit.\r\n2. Don't write any reply(regardless of complete or incomplete) to client to avoid unnecessary `write` cost.\r\n\r\nFor point 2, Changing the order of above two lines also won't write replies to client, but this way also has a side effect the client flagged `CLIENT_CLOSE_AFTER_REPLY` will be closed with delay.\r\n\r\n> we need the two commands to be handled in the same event loop, and in the right order. (we can probablu do that, but it's very complicated)\r\n\r\nExactly yes, we have talked about relate to this problem. I can't find a way to stably generate this case. I did a test without tcl test, I push several GB items to a big list, and set a small output buffer limit, i didn't found redis used much memory by `top` command when i executed `lrange mylist 0 -1`. Generating a several GB reply gave me enough time to observe this all, but i don't think we should do that in tcl tests.\r\nFor this assertion, maybe i didn't understand you, i initially thought you ask me to test my commit can release the output buffer memory without introducing a new bug.",
        "createdAt" : "2020-09-19T01:34:04Z",
        "updatedAt" : "2020-09-24T09:33:40Z",
        "lastEditedBy" : "98e31153-705f-4299-a152-78c428055d23",
        "tags" : [
        ]
      },
      {
        "id" : "af4340aa-a5c3-4a22-93ac-381e14d6fa24",
        "parentId" : "a06a1393-b414-4500-bded-e1d786cddb2f",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "> For this assertion, maybe i didn't understand you, i initially thought you ask me to test my commit can release the output buffer memory without introducing a new bug.\r\n\r\ni thought this assertion was there to make sure the client output buffer was released before the `read` executed. for some reason i thought that in the old code it wasn't the case.",
        "createdAt" : "2020-09-19T08:15:36Z",
        "updatedAt" : "2020-09-24T09:33:40Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "272ea6bbf7215a08389dbe81fcb885db8cf1041e",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +93,97 @@        set cur_mem [s used_memory]\n        # 10k just is a deviation threshold\n        assert {$cur_mem < 10000 + $orig_mem}\n\n        # Read nothing"
  },
  {
    "id" : "074d303d-ed8d-4c6e-90f0-54fc209fefbf",
    "prId" : 7202,
    "prUrl" : "https://github.com/redis/redis/pull/7202#pullrequestreview-495323007",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "296186d7-06a0-4697-856c-8d54e0f58874",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "let's assert that the connection was indeed dropped.\r\nmaybe similar check in the prevoius test.",
        "createdAt" : "2020-09-24T07:26:14Z",
        "updatedAt" : "2020-09-24T09:33:40Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "f2e7e851-933f-4eb0-94ec-3f0676883f36",
        "parentId" : "296186d7-06a0-4697-856c-8d54e0f58874",
        "authorId" : "98e31153-705f-4299-a152-78c428055d23",
        "body" : "@oranagra That's OK, but I have a question, I can't use `get` command to get right value of key if i don't `reconnect`, but i can execute commands",
        "createdAt" : "2020-09-24T08:09:05Z",
        "updatedAt" : "2020-09-24T09:33:40Z",
        "lastEditedBy" : "98e31153-705f-4299-a152-78c428055d23",
        "tags" : [
        ]
      },
      {
        "id" : "5ace8a5b-036d-447e-bb7c-b1b9ca71f297",
        "parentId" : "296186d7-06a0-4697-856c-8d54e0f58874",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "not sure i understand your question.\r\ni thought it may be enough to assert for the tight value of `e` after catch, and then you can reconnect.\r\n\r\nalternatively you can use another client (by using `redis_client` similar to `redis_deferring_client`).\r\npossibly also making sure the other client is no longer listed in the CLIENT LIST.",
        "createdAt" : "2020-09-24T08:13:10Z",
        "updatedAt" : "2020-09-24T09:33:40Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "272ea6bbf7215a08389dbe81fcb885db8cf1041e",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +150,154 @@        r set k3 v3\n        r del k1\n        catch {[r exec]} e\n        assert_match \"*I/O error*\" $e\n        reconnect"
  },
  {
    "id" : "85c98055-235a-4c93-9342-ad8c2cc88268",
    "prId" : 7202,
    "prUrl" : "https://github.com/redis/redis/pull/7202#pullrequestreview-495328613",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27afc74b-9d4c-431e-9740-f568446f892c",
        "parentId" : null,
        "authorId" : "98e31153-705f-4299-a152-78c428055d23",
        "body" : "@oranagra Here, i can't get 'v2' unless i `reconnect` before",
        "createdAt" : "2020-09-24T08:20:19Z",
        "updatedAt" : "2020-09-24T09:33:40Z",
        "lastEditedBy" : "98e31153-705f-4299-a152-78c428055d23",
        "tags" : [
        ]
      }
    ],
    "commit" : "272ea6bbf7215a08389dbe81fcb885db8cf1041e",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +158,162 @@        # Transactions should be executed completely\n        assert_equal {} [r get k1]\n        assert_equal \"v2\" [r get k2]\n        assert_equal \"v3\" [r get k3]\n    }"
  },
  {
    "id" : "374e233e-5aba-452e-93e0-7005f57f0d31",
    "prId" : 7202,
    "prUrl" : "https://github.com/redis/redis/pull/7202#pullrequestreview-495376633",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbe7d542-3fbd-4f6f-90d8-202980daf00c",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "let's add an assertion that makes sure the client was disconnected.",
        "createdAt" : "2020-09-24T09:17:32Z",
        "updatedAt" : "2020-09-24T09:33:40Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "272ea6bbf7215a08389dbe81fcb885db8cf1041e",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +130,134 @@        assert_no_match \"*name=multicommands*\" $clients\n        set fd [$rd2 channel]\n        assert_equal {} [read $fd]\n    }\n"
  }
]