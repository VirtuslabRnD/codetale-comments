[
  {
    "id" : "9e298cdf-5fb9-42fa-8f7f-118fe278e0fb",
    "prId" : 1546,
    "prUrl" : "https://github.com/scalameta/metals/pull/1546#pullrequestreview-382676173",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2298197a-66ec-41f5-9504-b70b4f99a874",
        "parentId" : null,
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "/cc @olafurpg dogfooding the new scalacheck module ðŸ‘‡ ",
        "createdAt" : "2020-03-26T09:41:52Z",
        "updatedAt" : "2020-03-27T07:54:00Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      },
      {
        "id" : "b3937a1b-54c8-4088-8639-b61a41821b68",
        "parentId" : "2298197a-66ec-41f5-9504-b70b4f99a874",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Do we really need Scalacheck here though? It's supposed to be used over a set of possible values and here it is just normal testing. I have never found a usage for property based testing and maybe it would be better to keep the tests consistent?  \r\n\r\n",
        "createdAt" : "2020-03-26T11:55:17Z",
        "updatedAt" : "2020-03-27T07:54:00Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "0088cb42-791a-4b85-a28f-ab8be093c489",
        "parentId" : "2298197a-66ec-41f5-9504-b70b4f99a874",
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "> It's supposed to be used over a set of possible values and here it is just normal testing\r\n\r\nI'm using Scalacheck to test \"all\" possible positions of the cursor inside a (fixed) document.\r\n\r\n\r\n> Do we really need Scalacheck here though?\r\n\r\nIt's not strictly necessary, but it just gives me a little more confidence that the computation is not right by chance but it holds for \"all\" possible cursor positions.\r\n\r\nThat said, if you prefer we can remove it.",
        "createdAt" : "2020-03-27T07:55:51Z",
        "updatedAt" : "2020-03-27T07:55:51Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      },
      {
        "id" : "b3e0cb5e-b8a6-4ffa-ad7b-2c0c705d9dce",
        "parentId" : "2298197a-66ec-41f5-9504-b70b4f99a874",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "> I'm using Scalacheck to test \"all\" possible positions of the cursor inside a (fixed) document.\r\n\r\nI am totally blind and have not seen it. It's a perfectly valid scenario to use it in. :+1: \r\n",
        "createdAt" : "2020-03-27T08:58:08Z",
        "updatedAt" : "2020-03-27T08:58:09Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "9509aaa1d7c1803f9c5304e9517a4c0370590f23",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +5,9 @@import org.scalacheck.Gen\nimport org.scalacheck.Prop.forAll\n\nclass NewFileTemplateSuite extends BaseSuite with ScalaCheckSuite {\n"
  },
  {
    "id" : "871af1a2-f104-4f18-bbc9-19ad45bf3e20",
    "prId" : 1546,
    "prUrl" : "https://github.com/scalameta/metals/pull/1546#pullrequestreview-382797614",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f40b40b1-fb1b-4bdb-a54e-cdc9364fd03f",
        "parentId" : null,
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "What is the difference between `forAll` here and `0.to(template.length).foreach { .. }`?",
        "createdAt" : "2020-03-27T11:22:16Z",
        "updatedAt" : "2020-03-27T11:22:16Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      },
      {
        "id" : "81521e61-a744-4cb3-b23f-86b6b99e15b1",
        "parentId" : "f40b40b1-fb1b-4bdb-a54e-cdc9364fd03f",
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "ah, good point: in this case just the number of iterations (100 with ScalaCheck). I can revert to just using a range",
        "createdAt" : "2020-03-27T11:31:03Z",
        "updatedAt" : "2020-03-27T11:31:03Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      },
      {
        "id" : "f2d5e2cf-fa57-4c2c-9f3b-704f15909f67",
        "parentId" : "f40b40b1-fb1b-4bdb-a54e-cdc9364fd03f",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "I think `1.to(100)` would be clearer and more consistent with the rest of the tests. Property based testing is more helpful when you can't tests all possible inputs. ",
        "createdAt" : "2020-03-27T12:04:18Z",
        "updatedAt" : "2020-03-27T12:04:18Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9509aaa1d7c1803f9c5304e9517a4c0370590f23",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +24,28 @@          |\"\"\".stripMargin\n    val cursorOffsetGen = Gen.chooseNum(0, template.length)\n    forAll(cursorOffsetGen) { cursorOffset =>\n      val templateWithCursor = template.patch(cursorOffset, \"@@\", 0)\n      val newFileTemplate = NewFileTemplate(templateWithCursor)"
  }
]