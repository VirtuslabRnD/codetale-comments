[
  {
    "id" : "74fc2cc4-7591-4d6e-91eb-f931c73f25fd",
    "prId" : 9725,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9725#pullrequestreview-487318597",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3d9d1d1-32bc-4b1a-954b-dd9f30abc228",
        "parentId" : null,
        "authorId" : "f186a0ec-8fc4-4e94-87e9-c629d1b38b60",
        "body" : "Why do we have this restriction? (especially post scala-js/scala-js#4117, it feels pretty clear that `abstract` is merely a compile time concept).",
        "createdAt" : "2020-09-13T09:43:43Z",
        "updatedAt" : "2020-09-14T20:05:33Z",
        "lastEditedBy" : "f186a0ec-8fc4-4e94-87e9-c629d1b38b60",
        "tags" : [
        ]
      },
      {
        "id" : "c278e859-ae72-405f-8e45-51d2df4b53e4",
        "parentId" : "a3d9d1d1-32bc-4b1a-954b-dd9f30abc228",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Because of the way we implement the local captures of the constructor. We need `ExplicitJSClasses` to create a fake `New(TheLocalJSClass, fakeParams)`, which lambdaLift (or its equivalent) enhances with the captures for local vals. The back-end captures the transformed fake `New` to recover those.\r\n\r\nIf the class is abstract, we cannot create that `New` without triggering internal inconsistencies. We also cannot blindly remove the `Abstract` flag, because the class could contain abstract methods, which still creates inconsistencies.",
        "createdAt" : "2020-09-13T16:10:54Z",
        "updatedAt" : "2020-09-14T20:05:33Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bcba442107e53e95c821c5372e21bea374296a6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2,6 @@6 |    abstract class AbstractLocalJSClass extends js.Object // error\n  |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |    Implementation restriction: local JS classes cannot be abstract"
  }
]