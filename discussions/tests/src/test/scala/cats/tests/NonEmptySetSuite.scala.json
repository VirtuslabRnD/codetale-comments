[
  {
    "id" : "9417f5c6-5a44-4374-bfb7-9d6dd8a8786f",
    "prId" : 3538,
    "prUrl" : "https://github.com/typelevel/cats/pull/3538#pullrequestreview-457627836",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f756d78-0ff4-4070-8f11-e0ffc409d584",
        "parentId" : null,
        "authorId" : "9ef0156b-afd7-4f35-80a6-bb89d6331b7c",
        "body" : "Why is the equality flipped?",
        "createdAt" : "2020-07-29T14:53:34Z",
        "updatedAt" : "2020-07-30T03:32:24Z",
        "lastEditedBy" : "9ef0156b-afd7-4f35-80a6-bb89d6331b7c",
        "tags" : [
        ]
      },
      {
        "id" : "b7403bcc-bfd7-4d3a-a907-47114bdc8e9d",
        "parentId" : "3f756d78-0ff4-4070-8f11-e0ffc409d584",
        "authorId" : "240add12-1fe5-499a-918c-053b1f46b348",
        "body" : "I'ts because `===` in ScalaTest doesn't require type equality, whereas cats' `===` does. So you can't do `x: SortedSet[A] === y: Set[A]`, but  `y: Set[A] === x: SortedSet[A]` will compile just fine. And given the symmetry law for `===` I wager this is fine.",
        "createdAt" : "2020-07-29T15:17:28Z",
        "updatedAt" : "2020-07-30T03:32:24Z",
        "lastEditedBy" : "240add12-1fe5-499a-918c-053b1f46b348",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b51b2961d15d492b828b8f7cdc2a797c4ba5c47",
    "line" : 201,
    "diffHunk" : "@@ -1,1 +217,221 @@  test(\"NonEmptySet#zipWithIndex is consistent with Set#zipWithIndex\") {\n    forAll { (nes: NonEmptySet[Int]) =>\n      assert(nes.toSortedSet.zipWithIndex === nes.zipWithIndex.toSortedSet)\n    }\n  }"
  },
  {
    "id" : "abe90ff9-0b11-4195-a23e-a3222a06532d",
    "prId" : 2787,
    "prUrl" : "https://github.com/typelevel/cats/pull/2787#pullrequestreview-246143818",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4ea1fdd-e753-4679-a08c-258167c930af",
        "parentId" : null,
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "These two lines are unnecessary, no?  ",
        "createdAt" : "2019-05-28T13:44:29Z",
        "updatedAt" : "2019-05-29T22:30:09Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "f5faa335-de74-46d4-b2d2-877c05bef957",
        "parentId" : "e4ea1fdd-e753-4679-a08c-258167c930af",
        "authorId" : "636ee73c-a020-434a-b128-c328ae1dc9c4",
        "body" : "These instance tests are written based on https://github.com/typelevel/cats/blob/4f92efedd2c30534c07b5f75a72b22e3e1ba9b13/tests/src/test/scala/cats/tests/NonEmptyListSuite.scala and from what I can gather is that it's to test that an `Eq` and `PartialOrder` instance can be resolved when an `Order` instance is in scope. \r\n\r\nDo you think they are redundant?",
        "createdAt" : "2019-05-29T22:06:37Z",
        "updatedAt" : "2019-05-29T22:30:09Z",
        "lastEditedBy" : "636ee73c-a020-434a-b128-c328ae1dc9c4",
        "tags" : [
        ]
      },
      {
        "id" : "903f2ca9-0ad7-4359-b386-126e81d13e01",
        "parentId" : "e4ea1fdd-e753-4679-a08c-258167c930af",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "The resolution is already tested in the law and serialization tests",
        "createdAt" : "2019-05-30T02:43:40Z",
        "updatedAt" : "2019-05-30T02:43:41Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "8a4e5c15-8397-4103-9eb0-92120e72dbd2",
        "parentId" : "e4ea1fdd-e753-4679-a08c-258167c930af",
        "authorId" : "636ee73c-a020-434a-b128-c328ae1dc9c4",
        "body" : "ok",
        "createdAt" : "2019-06-05T17:15:23Z",
        "updatedAt" : "2019-06-05T17:15:23Z",
        "lastEditedBy" : "636ee73c-a020-434a-b128-c328ae1dc9c4",
        "tags" : [
        ]
      }
    ],
    "commit" : "de79fe2e560c16c472c98f923d3ec4eefeb7fd1d",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +48,52 @@\n    Eq[NonEmptySet[ListWrapper[Int]]]\n    PartialOrder[NonEmptySet[ListWrapper[Int]]]\n  }\n"
  }
]