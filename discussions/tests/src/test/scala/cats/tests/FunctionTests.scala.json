[
  {
    "id" : "7b66aacb-05e0-4216-bae7-54c19ef73672",
    "prId" : 1922,
    "prUrl" : "https://github.com/typelevel/cats/pull/1922#pullrequestreview-67285359",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f59c04ff-3ecc-40d5-8557-0fa99500fa91",
        "parentId" : null,
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "Just curious, why not just test the full HashLaw? won't pass? ",
        "createdAt" : "2017-10-05T02:19:34Z",
        "updatedAt" : "2017-10-06T12:06:09Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "075004da-da06-4737-8564-d588f6175b2e",
        "parentId" : "f59c04ff-3ecc-40d5-8557-0fa99500fa91",
        "authorId" : "240add12-1fe5-499a-918c-053b1f46b348",
        "body" : "Yeah, it's not the same as universal hash and not the same as `scala.util.Hashing`",
        "createdAt" : "2017-10-05T07:20:08Z",
        "updatedAt" : "2017-10-06T12:06:09Z",
        "lastEditedBy" : "240add12-1fe5-499a-918c-053b1f46b348",
        "tags" : [
        ]
      }
    ],
    "commit" : "668c4e1281fbbef8fab6a55a2ec40c3c9ec2a2e9",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +56,60 @@  checkAll(\"Function0[CGrp]\", CommutativeGroupTests[Function0[CGrp]].commutativeGroup)\n\n  test(\"Function0[Hsh]\") {\n    forAll { (x: Function0[Hsh], y: Function0[Hsh]) =>\n      HashLaws[Function0[Hsh]].hashCompatibility(x, y)"
  },
  {
    "id" : "60cb7368-3a9d-461a-948f-f721cabb685a",
    "prId" : 682,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2ea58db-0c81-4ac0-8420-d7e7404fba5b",
        "parentId" : null,
        "authorId" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "body" : "You've probably checked for this, but just to make sure :-) My first inclination is there's no `SerializableTests` because it can't be serialized, though it seems we're testing for it in the `Contravariant` instance?\n",
        "createdAt" : "2015-11-19T18:22:08Z",
        "updatedAt" : "2015-11-19T18:22:08Z",
        "lastEditedBy" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "tags" : [
        ]
      },
      {
        "id" : "03c8fff4-2dde-4164-9394-a47e0a01e5af",
        "parentId" : "e2ea58db-0c81-4ac0-8420-d7e7404fba5b",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "The laws that come algebra [include serializability checks](https://github.com/non/algebra/blob/master/laws/shared/src/main/scala/algebra/laws/GroupLaws.scala#L28), so I don't think we need separate checks for those.\n",
        "createdAt" : "2015-11-19T18:27:34Z",
        "updatedAt" : "2015-11-19T18:27:34Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "9f06a73b-4034-4be7-b04f-2e6d30a18eac",
        "parentId" : "e2ea58db-0c81-4ac0-8420-d7e7404fba5b",
        "authorId" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "body" : "Ah right :-)\n",
        "createdAt" : "2015-11-19T18:28:06Z",
        "updatedAt" : "2015-11-19T18:28:06Z",
        "lastEditedBy" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "8625b2e87c9c74db56af853b5706a12450708975",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +28,32 @@  checkAll(\"Contravariant[? => Int]\", SerializableTests.serializable(Contravariant[? => Int]))\n\n  checkAll(\"Function1[String, Int]\", GroupLaws[Function1[String, Int]].monoid)\n}"
  }
]