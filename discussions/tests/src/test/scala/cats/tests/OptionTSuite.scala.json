[
  {
    "id" : "d53e78ad-51d3-45f2-b445-98120bda668b",
    "prId" : 3237,
    "prUrl" : "https://github.com/typelevel/cats/pull/3237#pullrequestreview-338338512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b53693d-558c-46ae-863d-98c90e7a735c",
        "parentId" : null,
        "authorId" : "2ed5d687-cc94-4d72-ba74-717be38944e9",
        "body" : "Not a blocker, but since the property refers to `Option.when`, it might be helpful to future readers to comment why it's inlined here (e.g., that it's not available before 2.13).",
        "createdAt" : "2020-01-04T05:26:40Z",
        "updatedAt" : "2020-01-04T08:18:41Z",
        "lastEditedBy" : "2ed5d687-cc94-4d72-ba74-717be38944e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "abd798b8ee2ce16cc338f24cd88ac0377224651f",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +289,293 @@  test(\"OptionT.whenF[Id, A] consistent with Option.when\") {\n    // Option.when is inlined here because it is not available before Scala 2.13\n    def when[A]: (Boolean, A) => Option[A] = (c: Boolean, a: A) => if (c) Some(a) else None\n    forAll { (i: Int, b: Boolean) =>\n      OptionT.whenF[Id, Int](b)(i).value should ===(when(b, i))"
  },
  {
    "id" : "4e3159f4-06fc-4638-9a8b-1307ad845c2d",
    "prId" : 2548,
    "prUrl" : "https://github.com/typelevel/cats/pull/2548#pullrequestreview-160991726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24a1e392-c2d8-4ba7-b465-ab106d51a131",
        "parentId" : null,
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "Ideally we'd have a check here for a type that has an `Invariant` instance but not a `Contravariant` instance to make sure that we cover this use-case. I think that `Semigroup` would be an example of such a type.",
        "createdAt" : "2018-10-03T02:52:28Z",
        "updatedAt" : "2018-10-06T15:43:16Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "325d0ecf57ac582161ebdb715f6a914fcfa8c7fa",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +81,85 @@    checkAll(\"OptionT[ListWrapper, ?]\", InvariantTests[OptionT[ListWrapper, ?]].invariant[Int, Int, Int])\n    checkAll(\"Invariant[OptionT[ListWrapper, ?]]\", SerializableTests.serializable(Invariant[OptionT[ListWrapper, ?]]))\n  }\n\n  {"
  }
]