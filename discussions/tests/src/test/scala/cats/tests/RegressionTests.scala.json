[
  {
    "id" : "73033bc7-9611-4cb1-916b-cd237b629f63",
    "prId" : 1583,
    "prUrl" : "https://github.com/typelevel/cats/pull/1583#pullrequestreview-32413702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e28d972-0022-42f9-b023-32daa46129eb",
        "parentId" : null,
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "for some reason the `traverse` version can no longer infer the type correctly. Thus I had to pass the type into `Const`'s apply method. For convenience, I added an `of`  factory method to `Const`. Please shout out if you know a better solution. ",
        "createdAt" : "2017-04-01T03:10:07Z",
        "updatedAt" : "2017-04-20T21:14:34Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "4e27a2f5-a5dc-4d54-89fa-bd5b6a1f3a2b",
        "parentId" : "4e28d972-0022-42f9-b023-32daa46129eb",
        "authorId" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "body" : "That's not nice. Perhaps `Const` needs its type params reversed?",
        "createdAt" : "2017-04-05T20:54:08Z",
        "updatedAt" : "2017-04-20T21:14:34Z",
        "lastEditedBy" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "tags" : [
        ]
      },
      {
        "id" : "4fe8405b-0944-41f1-a230-7e413e479cc7",
        "parentId" : "4e28d972-0022-42f9-b023-32daa46129eb",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "would that affect partial unification? ",
        "createdAt" : "2017-04-05T21:24:03Z",
        "updatedAt" : "2017-04-20T21:14:34Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "657664e9-ebc8-49d1-a31b-9ad06b1f1430",
        "parentId" : "4e28d972-0022-42f9-b023-32daa46129eb",
        "authorId" : "9e8a6a6c-6f4e-49b4-ab87-ee2c5ced7e78",
        "body" : "Partial unification is strictly left to right. If Const varies on the left (can't look right now), then it wouldn't work with partial unification.as a rule of thumb, think about how you would declare the type constructor in Haskell.",
        "createdAt" : "2017-04-06T14:17:55Z",
        "updatedAt" : "2017-04-20T21:14:34Z",
        "lastEditedBy" : "9e8a6a6c-6f4e-49b4-ab87-ee2c5ced7e78",
        "tags" : [
        ]
      },
      {
        "id" : "6251a718-fc44-4315-8a5f-7f3a42030c81",
        "parentId" : "4e28d972-0022-42f9-b023-32daa46129eb",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "@djspiewak it varies on the right. @edmundnoble any other suggestion in terms of what to do with this? ",
        "createdAt" : "2017-04-06T15:18:31Z",
        "updatedAt" : "2017-04-20T21:14:34Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "5723642c-b4c0-4365-a151-ce71c0e6ab4d",
        "parentId" : "4e28d972-0022-42f9-b023-32daa46129eb",
        "authorId" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "body" : "Might it have something to do with Scala inferring `Nothing` on the unused type parameter which can make the compiler freak out since it treats `Nothing` specially?",
        "createdAt" : "2017-04-07T00:08:36Z",
        "updatedAt" : "2017-04-20T21:14:34Z",
        "lastEditedBy" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "tags" : [
        ]
      },
      {
        "id" : "91055f57-8811-4068-b9e8-c1fe1f95f7e0",
        "parentId" : "4e28d972-0022-42f9-b023-32daa46129eb",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "I think that specifying the type parameter here is an acceptable tradeoff for getting rid of the `Unapply` machinery, but paging @milessabin to see if he has any thoughts on this popping up.",
        "createdAt" : "2017-04-07T12:05:59Z",
        "updatedAt" : "2017-04-20T21:14:34Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "0df7ba4a-932d-4df0-939b-049b95763b91",
        "parentId" : "4e28d972-0022-42f9-b023-32daa46129eb",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "I chatted with @milessabin IRT to this. \r\nHere is the minimised version in case anyone is interested. \r\n\r\n```Scala\r\n    def trav[F[_], A, B](f: A => F[B]): F[B] = ???\r\n    case class C[A, B](a: A)\r\n    val c: C[Int, Int] = trav(C(_:Int))   //compiles\r\n    val a: Int  = trav(C(_:Int)).a    //doesnâ€™t compile\r\n```\r\n> [error]  found   : Int => C[Int,Nothing]\r\n[error]  required: Int => C[Int,B]\r\n[error]     val a: Int  = trav(C(_:Int)).a\r\n\r\nOur conclusion is that might have to live with this as is. ",
        "createdAt" : "2017-04-12T14:37:13Z",
        "updatedAt" : "2017-04-20T21:14:34Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "83efeefa-3e6d-46db-8124-28924537652e",
        "parentId" : "4e28d972-0022-42f9-b023-32daa46129eb",
        "authorId" : "9e8a6a6c-6f4e-49b4-ab87-ee2c5ced7e78",
        "body" : "What happens if you make `C` covariant in `B`?",
        "createdAt" : "2017-04-12T15:39:03Z",
        "updatedAt" : "2017-04-20T21:14:34Z",
        "lastEditedBy" : "9e8a6a6c-6f4e-49b4-ab87-ee2c5ced7e78",
        "tags" : [
        ]
      },
      {
        "id" : "f4901dc5-9571-496e-b369-d6195bf65ac4",
        "parentId" : "4e28d972-0022-42f9-b023-32daa46129eb",
        "authorId" : "9e8a6a6c-6f4e-49b4-ab87-ee2c5ced7e78",
        "body" : "Nevermind, I just tried it myself.  It resolves the issue.",
        "createdAt" : "2017-04-12T15:41:01Z",
        "updatedAt" : "2017-04-20T21:14:34Z",
        "lastEditedBy" : "9e8a6a6c-6f4e-49b4-ab87-ee2c5ced7e78",
        "tags" : [
        ]
      }
    ],
    "commit" : "df8aaab1719c72da43d39d96270fcc76e5a0bedb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +86,90 @@  test(\"#500: foldMap - traverse consistency\") {\n    assert(\n      List(1,2,3).traverse(i => Const.of[List[Int]](List(i))).getConst == List(1,2,3).foldMap(List(_))\n    )\n  }"
  }
]