[
  {
    "id" : "d480ff6c-01bb-4a7c-ab0c-80b483c1a6bc",
    "prId" : 1280,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eec4a6e6-b0bb-4790-a198-a56d89efc072",
        "parentId" : null,
        "authorId" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "body" : "Should this file be renamed?\n\nAlso can this be added as a law somewhere as opposed to a separate check?\n",
        "createdAt" : "2016-08-11T23:53:44Z",
        "updatedAt" : "2016-08-12T17:34:40Z",
        "lastEditedBy" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "tags" : [
        ]
      },
      {
        "id" : "c8df456f-8f8d-4c7f-bc9a-cd155c40c798",
        "parentId" : "eec4a6e6-b0bb-4790-a198-a56d89efc072",
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "I agree, but would it be possible that we follow that up in a next PR since this PR and discussion is already getting pretty large? Refactoring the existing tests might be a good line to draw.\n",
        "createdAt" : "2016-08-12T00:26:06Z",
        "updatedAt" : "2016-08-12T17:34:40Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "20305981-8a3a-4ba6-90c3-c6016a04904a",
        "parentId" : "eec4a6e6-b0bb-4790-a198-a56d89efc072",
        "authorId" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "body" : "Sure, I've created https://github.com/typelevel/cats/issues/1283 to track it\n",
        "createdAt" : "2016-08-12T00:28:51Z",
        "updatedAt" : "2016-08-12T17:34:40Z",
        "lastEditedBy" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "61de99514cdc8491fac8bd2e2b172e1ba50d4db8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2,6 @@package tests\n\nimport cats.data.{\n  Cokleisli,\n  IdT,"
  },
  {
    "id" : "7b01ebe4-659b-41f9-9181-086653ecc775",
    "prId" : 1041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a756b5e-ab8c-41df-acd5-51a1023c1d51",
        "parentId" : null,
        "authorId" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "body" : "Can this test be added as a `MonadRecLaws` and `MonadRecTests` in the `cats-laws` project, with tests for instances being put in `OptionTests`, `XorTests`, etc. ?\n",
        "createdAt" : "2016-05-17T05:38:00Z",
        "updatedAt" : "2016-05-30T21:46:39Z",
        "lastEditedBy" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "tags" : [
        ]
      },
      {
        "id" : "8a935adb-2129-4f6b-815c-9e40e293b71e",
        "parentId" : "6a756b5e-ab8c-41df-acd5-51a1023c1d51",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "A law that `tailRecM` is consistent with `flatMap` would be nice.\n",
        "createdAt" : "2016-05-17T10:33:54Z",
        "updatedAt" : "2016-05-30T21:46:39Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "ed2022d6-bc4e-4031-bb8c-4b5dad3ad4b9",
        "parentId" : "6a756b5e-ab8c-41df-acd5-51a1023c1d51",
        "authorId" : "5fc8c7f8-34e6-46ea-986e-eb92cd93a6ce",
        "body" : "@adelbertc Is it OK to call that unit test a law?\n\n@ceedubs The best I can think of is testing that `tailRecM` is consistent with the naive (non-stack safe) implementation of `tailRecM` that uses recursive `flatMap`s (and is implemented uniformly for any monad):\n\n``` scala\ndef naiveTailRecM[M[_], A, B](a: A)(f: A => M[A Xor B])(implicit M: Monad[M]): M[B] =\n  M.flatMap(f(a))(_ match {\n    case Xor.Left(a1) => naiveTailRecM(a1)(f)\n    case Xor.Right(b) => M.pure(b)\n  })\n```\n\n(This is also basically the implementation of `tailRecM` for `Free`, where it is OK, because `Free` is lazy.)\n\nDid you have something else in mind?\n",
        "createdAt" : "2016-05-17T17:58:37Z",
        "updatedAt" : "2016-05-30T21:46:39Z",
        "lastEditedBy" : "5fc8c7f8-34e6-46ea-986e-eb92cd93a6ce",
        "tags" : [
        ]
      },
      {
        "id" : "584230ac-c69f-4d6e-8cc0-1ad3eb9c1d4d",
        "parentId" : "6a756b5e-ab8c-41df-acd5-51a1023c1d51",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "@TomasMikula I was thinking of something like what [scalaz has](https://github.com/scalaz/scalaz/blob/series/7.3.x/core/src/main/scala/scalaz/BindRec.scala#L32).\n\nRegarding @adelbertc's comment, I have a little hesitation adding something like that as a law. Mostly because it could potentially take a really long time to run for some types. I'm not writing it off as a possibility, just raising a potential concern.\n",
        "createdAt" : "2016-05-17T18:04:52Z",
        "updatedAt" : "2016-05-30T21:46:39Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "0fc1f348-8d2a-4fcf-ac1a-670e4b22c48c",
        "parentId" : "6a756b5e-ab8c-41df-acd5-51a1023c1d51",
        "authorId" : "5fc8c7f8-34e6-46ea-986e-eb92cd93a6ce",
        "body" : "@ceedubs laws added.\n",
        "createdAt" : "2016-05-17T21:54:12Z",
        "updatedAt" : "2016-05-30T21:46:39Z",
        "lastEditedBy" : "5fc8c7f8-34e6-46ea-986e-eb92cd93a6ce",
        "tags" : [
        ]
      },
      {
        "id" : "1f5905d4-10ed-42ac-b43c-c05afb5951d7",
        "parentId" : "6a756b5e-ab8c-41df-acd5-51a1023c1d51",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "@TomasMikula nice! Thank you for this. I'll do a more detailed review shortly.\n",
        "createdAt" : "2016-05-17T23:31:23Z",
        "updatedAt" : "2016-05-30T21:46:39Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a38209b2a13ded2652528a8767b1683e74d339d",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +6,10 @@class MonadRecInstancesTests extends CatsSuite {\n  def tailRecMStackSafety[M[_]](implicit M: MonadRec[M], Eq: Eq[M[Int]]): Unit = {\n    val n = 50000\n    val res = M.tailRecM(0)(i => M.pure(if(i < n) Xor.Left(i + 1) else Xor.Right(i)))\n    res should === (M.pure(n))"
  }
]