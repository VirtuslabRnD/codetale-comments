[
  {
    "id" : "d74950fa-e8f4-4b19-ab21-81d45caf87f9",
    "prId" : 212,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0e98af2-de95-4b7d-837b-4ddd7da34723",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Could you link https://github.com/scalameta/scalameta/issues/203 in a comment to this test?\n",
        "createdAt" : "2015-08-03T19:46:39Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "4979b3b1-9e62-4066-be56-d6ae5b9f1d3f",
        "parentId" : "e0e98af2-de95-4b7d-837b-4ddd7da34723",
        "authorId" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "body" : "Done.\n",
        "createdAt" : "2015-08-03T19:56:20Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcbf2930c7194f4d53068c7e8e58fa0625d10b44",
    "line" : null,
    "diffHunk" : "@@ -1,1 +334,338 @@//  test(\"3 q\\\"for (..$enumerators) $expr\\\"\") {\n//    val q\"for (a <- as; if $cond; ..$enums) bar\" = q\"for (a <- as; if foo; b <- bs) bar\" // fixme does not compile, see #203\n//  }\n\n  test(\"1 q\\\"for (..$enumerators) yield $expr\\\"\") {"
  },
  {
    "id" : "8794d7bc-1ce3-4d30-919c-912761518bbd",
    "prId" : 212,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8dbc0960-174a-4ff2-9840-f5aa114aeae4",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Why's this test disabled?\n",
        "createdAt" : "2015-08-03T19:47:36Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "78c00e8f-4a0f-4b10-b87a-8434a8aff3b8",
        "parentId" : "8dbc0960-174a-4ff2-9840-f5aa114aeae4",
        "authorId" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "body" : "Because it does not compile, and waits for issue to be resolved.\n",
        "createdAt" : "2015-08-03T19:58:04Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "tags" : [
        ]
      },
      {
        "id" : "b65fa0eb-9430-46bd-94e7-36819780c540",
        "parentId" : "8dbc0960-174a-4ff2-9840-f5aa114aeae4",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "I see. Would be cool if you could mention that. \n",
        "createdAt" : "2015-08-03T19:59:18Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "9f758a25-72cb-475b-80a9-b5450a673bd6",
        "parentId" : "8dbc0960-174a-4ff2-9840-f5aa114aeae4",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Ah I see. Could you move the explaining comment to be above the test?\n",
        "createdAt" : "2015-08-03T19:59:35Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "ec9892a7-fccf-45f3-b541-e9f4badbd080",
        "parentId" : "8dbc0960-174a-4ff2-9840-f5aa114aeae4",
        "authorId" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "body" : "Done.\n",
        "createdAt" : "2015-08-03T20:35:00Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcbf2930c7194f4d53068c7e8e58fa0625d10b44",
    "line" : null,
    "diffHunk" : "@@ -1,1 +375,379 @@//  test(\"4 q\\\"new { ..$stat } with ..$exprs { $param => ..$stats }\\\"\") {\n//    val q\"new {..$stats; val b = 4} with $a {$selff => ..$statz}\" = q\"new {val a = 2; val b = 4}\"\n//  }\n\n  test(\"q\\\"_\\\"\") {"
  },
  {
    "id" : "c202e9b4-a6bd-464b-a4cf-132ce8783550",
    "prId" : 212,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c658ccf8-d4e6-4bf2-a170-efb910632676",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Why's it say `q\"$expr\"`?\n",
        "createdAt" : "2015-08-03T19:48:02Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "57664771-92e9-4d95-b458-9f8c298c2466",
        "parentId" : "c658ccf8-d4e6-4bf2-a170-efb910632676",
        "authorId" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "body" : "Typo, fixed.\n",
        "createdAt" : "2015-08-03T19:59:52Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcbf2930c7194f4d53068c7e8e58fa0625d10b44",
    "line" : null,
    "diffHunk" : "@@ -1,1 +410,414 @@    val expr = q\"foo\"\n    assert(arg\"$expr\".show[Syntax] === \"foo\")\n  }\n\n  test(\"t\\\"$ref.$tname\\\"\") {"
  },
  {
    "id" : "159de8b6-84f4-4c06-978b-8e603cb4e63f",
    "prId" : 212,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87abe080-1a40-41db-8a62-f8d4f4c7db1a",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Could we have a test when `..$atpes` are actually `Type.Arg`s here?\n",
        "createdAt" : "2015-08-03T19:49:02Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "e2621f0f-6b8e-4b8a-bae5-72207e8d7a76",
        "parentId" : "87abe080-1a40-41db-8a62-f8d4f4c7db1a",
        "authorId" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "body" : "Here they are `Type.Name`, isn't it `Type.Arg`? They both have `t` StringContext for creating.\n",
        "createdAt" : "2015-08-03T20:02:27Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "tags" : [
        ]
      },
      {
        "id" : "d4254965-ac09-4039-9bb0-66e69721a734",
        "parentId" : "87abe080-1a40-41db-8a62-f8d4f4c7db1a",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Yeah, sure, I mean could we have `Type.Arg`s that aren't `Type`, so that we really test that function types can accept type args as their arguments?\n",
        "createdAt" : "2015-08-03T20:03:37Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "8f718e08-12f5-4458-adec-adc3ec40f955",
        "parentId" : "87abe080-1a40-41db-8a62-f8d4f4c7db1a",
        "authorId" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "body" : "Changed test.\n",
        "createdAt" : "2015-08-03T20:38:30Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcbf2930c7194f4d53068c7e8e58fa0625d10b44",
    "line" : null,
    "diffHunk" : "@@ -1,1 +446,450 @@    val tpe = t\"Z\"\n    assert(t\"(..$atpes) => $tpe\".show[Syntax] === \"(X, Y) => Z\")\n  }\n\n  test(\"t\\\"(..$tpes)\\\"\") {"
  },
  {
    "id" : "29da2e07-1e01-4cbe-91d0-367ffd878c75",
    "prId" : 212,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bca56df-fdb9-4311-818c-41f51d761dcc",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Why does it say `opt` if you're unquoting regular types?\n",
        "createdAt" : "2015-08-03T19:49:59Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "8169236d-7ea8-4373-a705-689c8adf46d0",
        "parentId" : "1bca56df-fdb9-4311-818c-41f51d761dcc",
        "authorId" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "body" : "Because spec says so. Probably I should add one more comment\n`// TODO test for 'opt' after issue #199 resolved`\n",
        "createdAt" : "2015-08-03T20:03:40Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcbf2930c7194f4d53068c7e8e58fa0625d10b44",
    "line" : null,
    "diffHunk" : "@@ -1,1 +484,488 @@  // TODO test for 'opt' after issue #199 resolved\n\n  test(\"t\\\"_ >: $tpeopt <: $tpeopt\\\"\") {\n    val tpe1 = t\"X\"\n    val tpe2 = t\"Y\""
  },
  {
    "id" : "153fe005-2657-46ca-a170-3a794df044c0",
    "prId" : 212,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79d4c376-ee50-4811-82e4-c6c6f11d7e17",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "What is the principle according to which some cases get construction/deconstruction tests, and some just get a construction test? :)\n",
        "createdAt" : "2015-08-03T19:51:55Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "c9343dce-a125-4eeb-8af6-c1a60584d150",
        "parentId" : "79d4c376-ee50-4811-82e4-c6c6f11d7e17",
        "authorId" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "body" : "I check all cases for both type of tests in repl. For those who have (or had before) some issues, I explicitly add test.\n",
        "createdAt" : "2015-08-03T20:09:55Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcbf2930c7194f4d53068c7e8e58fa0625d10b44",
    "line" : 346,
    "diffHunk" : "@@ -1,1 +502,506 @@    val tpe = t\"Z\"\n    assert(t\"[..$tparams] => $tpe\".show[Syntax] === \"[X, Y] => Z\")\n  }\n\n  test(\"t\\\"$lit\\\"\") {"
  }
]