[
  {
    "id" : "497a2c40-5f22-4c5d-9531-a90130fa997f",
    "prId" : 7481,
    "prUrl" : "https://github.com/apache/airflow/pull/7481#pullrequestreview-364059545",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac3d45f4-d970-466c-8a31-05866eba41b2",
        "parentId" : null,
        "authorId" : "03e41e23-f438-4a06-9652-8f20638d2c3a",
        "body" : "Maybe make the second argument optional? Instead of passing an empty iterable.",
        "createdAt" : "2020-02-25T07:47:34Z",
        "updatedAt" : "2020-02-27T13:37:20Z",
        "lastEditedBy" : "03e41e23-f438-4a06-9652-8f20638d2c3a",
        "tags" : [
        ]
      },
      {
        "id" : "7869a9dc-940c-4927-813a-e0f7bc05009d",
        "parentId" : "ac3d45f4-d970-466c-8a31-05866eba41b2",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "In another PR I deletes the tis_out parameter completely.  This parameter is also required because this method returns values using this list. Unfortunately, we do not have an assertion in the tests. In real code is always required. ",
        "createdAt" : "2020-02-25T11:12:02Z",
        "updatedAt" : "2020-02-27T13:37:20Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f0b1aebb50d9e89bea77ed3ef8185f790b51e1c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +988,992 @@        scheduler.manage_slas = mock.MagicMock()\n\n        scheduler._process_dags([dag] + dag.subdags, [])\n\n        with create_session() as session:"
  },
  {
    "id" : "acb1b11a-7f54-4376-9cb0-ee1c36f8ed5b",
    "prId" : 7602,
    "prUrl" : "https://github.com/apache/airflow/pull/7602#pullrequestreview-370748267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1728134-37f3-4015-b8bd-279aa20916c6",
        "parentId" : null,
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "I am just wondering if we want to mark this test as `performance` and have a separate build for performance-only tests? In this way, it will be easier to spot PR / builds that change the performance. ",
        "createdAt" : "2020-03-07T14:34:45Z",
        "updatedAt" : "2020-03-07T14:34:45Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "a64cc27e-6aea-429c-bb48-dd0109e2ce9c",
        "parentId" : "c1728134-37f3-4015-b8bd-279aa20916c6",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "I think it's better to have it like it is now - > this way it will be executed for various DBs and pythons. And It is very fast",
        "createdAt" : "2020-03-07T14:36:56Z",
        "updatedAt" : "2020-03-07T14:36:57Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "477b468d-7636-49f8-a22f-3840293d21b6",
        "parentId" : "c1728134-37f3-4015-b8bd-279aa20916c6",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "Yes. These are very quick tests.  In the future, when we will work on tests that analyze complex cases, we can add markers and describe the principles on the basis of which we conclude that the test is a performance test. Then we will also have to think about the environment in which we want to run these tests and how often. These tests are very static tests and contain simple assertions for values.",
        "createdAt" : "2020-03-07T14:59:57Z",
        "updatedAt" : "2020-03-07T14:59:58Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "28bbb2d8-d735-4afa-a29d-1fb61ba6b062",
        "parentId" : "c1728134-37f3-4015-b8bd-279aa20916c6",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "Performance tests are run, for example, daily, and then the results are collected into one central system to detect performance regression. They do not have identical results every time. **Each time you run a pefomance test, you may have a different result.**",
        "createdAt" : "2020-03-07T15:02:50Z",
        "updatedAt" : "2020-03-07T15:05:37Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9ef45f9f7ecaae4035934006c768de5de90016f",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1068,1072 @@\n\nclass TestDagFileProcessorQueriesCount(unittest.TestCase):\n    \"\"\"\n    These tests are designed to detect changes in the number of queries for different DAG files."
  },
  {
    "id" : "73ea25da-1989-4f50-9b26-4963b42a50be",
    "prId" : 8671,
    "prUrl" : "https://github.com/apache/airflow/pull/8671#pullrequestreview-405933915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0352eba2-afa0-4a4e-a483-881f5d4eaac8",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "```suggestion\r\n        Test that the scheduler can successfully queue multiple dags in parallel\r\n        when using \"spawn\" mode of multiprocessing. (Fork is default on Linux and older OSX)\r\n```",
        "createdAt" : "2020-05-05T16:08:04Z",
        "updatedAt" : "2020-05-05T22:26:11Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4b76b3ce7f49a9bdb736ee6479569a9db081995",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2491,2495 @@    def test_scheduler_multiprocessing_with_spawn_method(self):\n        \"\"\"\n        Test that the scheduler can successfully queue multiple dags in parallel\n        when using \"spawn\" mode of multiprocessing. (Fork is default on Linux and older OSX)\n        \"\"\""
  },
  {
    "id" : "4fa71e28-f36a-407c-b011-97aa38fa5b05",
    "prId" : 9088,
    "prUrl" : "https://github.com/apache/airflow/pull/9088#pullrequestreview-421710103",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68bdec7e-ace9-4672-960a-9381f13eab03",
        "parentId" : null,
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "The number of queries depends on whether this value is None or not.\r\nhttps://github.com/apache/airflow/blob/7c0e6ede6078ff364da5d96afee65ec53e87cf65/airflow/jobs/scheduler_job.py#L1628\r\nhttps://github.com/apache/airflow/blob/7c0e6ede6078ff364da5d96afee65ec53e87cf65/airflow/jobs/scheduler_job.py#L1650",
        "createdAt" : "2020-06-01T09:29:15Z",
        "updatedAt" : "2020-06-02T12:47:27Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "40c3dc4cdfd4ecace60957835a9113d255991c1f",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +3423,3427 @@\n            mock_agent = mock.MagicMock()\n            mock_agent.harvest_simple_dags.return_value = [SimpleDag(d) for d in dagbag.dags.values()]\n\n            job = SchedulerJob(subdir=PERF_DAGS_FOLDER)"
  },
  {
    "id" : "f1fed417-f48d-45e7-ac99-a977aaafb953",
    "prId" : 10710,
    "prUrl" : "https://github.com/apache/airflow/pull/10710#pullrequestreview-481860007",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8879ac97-a4f0-40fd-b7e0-015e462b062e",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Call `session.commit()` less often, resulting in fewer queries. This is a side-effect of this change rather than a goal.",
        "createdAt" : "2020-09-03T13:42:27Z",
        "updatedAt" : "2020-09-03T13:42:27Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "2bc93b13-3f8d-44ee-96ca-22c30158e5bc",
        "parentId" : "8879ac97-a4f0-40fd-b7e0-015e462b062e",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "ðŸš€ ",
        "createdAt" : "2020-09-03T13:51:30Z",
        "updatedAt" : "2020-09-03T13:51:30Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      }
    ],
    "commit" : "eab0bb2081709db88769356e13f3f7c64e9e2c9e",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +3582,3586 @@            (17, 1, 5),  # noqa\n            # 10 DAGs with 10 tasks per DAG file\n            (46, 10, 10),  # noqa\n        ]\n    )"
  },
  {
    "id" : "47c3d624-3e3e-43bf-b9c2-c77d5d5f998e",
    "prId" : 12663,
    "prUrl" : "https://github.com/apache/airflow/pull/12663#pullrequestreview-540183802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3382b4b7-917b-4921-aa59-7d4e2fb618f7",
        "parentId" : null,
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "I'm observing CI error after this is merged into 1-10-stable.\r\n\r\nI assume it's because the order of the two elements in `ti_to_schedule` is not guaranteed.\r\n\r\nPossibly can instead assert like this:\r\n\r\n```python\r\n        mock_list = Mock()\r\n        scheduler._process_task_instances(dag, task_instances_list=mock_list)\r\n\r\n        mock_list.append.assert_called_with(\r\n            (dag.dag_id, dag_task1.task_id, DEFAULT_DATE, TRY_NUMBER)\r\n        )\r\n```\r\n\r\n(https://github.com/astronomer/airflow/blob/67807ee492482f57442239e271747a5acc69e15b/tests/jobs/test_scheduler_job.py#L1604-L1609)",
        "createdAt" : "2020-11-27T20:19:36Z",
        "updatedAt" : "2020-11-27T20:19:44Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "9d868661-64bd-4ab6-9b39-89254919feeb",
        "parentId" : "3382b4b7-917b-4921-aa59-7d4e2fb618f7",
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "I will prepare a PR shortly.",
        "createdAt" : "2020-11-27T20:23:29Z",
        "updatedAt" : "2020-11-27T20:23:30Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "71b30f3b-9235-434c-8acc-12ae0eb05226",
        "parentId" : "3382b4b7-917b-4921-aa59-7d4e2fb618f7",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "argghh Python 2.7 & 3.5 I guess because of the ordering",
        "createdAt" : "2020-11-27T20:28:36Z",
        "updatedAt" : "2020-11-27T20:28:36Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "dcc4056e-0399-46aa-aaa3-02957cd0ef12",
        "parentId" : "3382b4b7-917b-4921-aa59-7d4e2fb618f7",
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "Yes, the order is not guaranteed so assert two lists would fail.\r\n\r\nI have the change ready, and will raise the PR now.",
        "createdAt" : "2020-11-27T20:29:41Z",
        "updatedAt" : "2020-11-27T20:29:41Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      }
    ],
    "commit" : "67807ee492482f57442239e271747a5acc69e15b",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +574,578 @@            (dag.dag_id, dag_task1.task_id, DEFAULT_DATE, TRY_NUMBER),\n            (dag.dag_id, dag_task2.task_id, DEFAULT_DATE, TRY_NUMBER),\n        ]\n\n    def test_find_executable_task_instances_concurrency(self):"
  },
  {
    "id" : "de41e0b1-e147-4a43-88c3-ef19673a706d",
    "prId" : 16401,
    "prUrl" : "https://github.com/apache/airflow/pull/16401#pullrequestreview-693734480",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f894628-250a-48bb-a751-9fdad80ba5ba",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "```suggestion\r\n        assert dr.state == State.QUEUED\r\n        assert dr.start_date is None\r\n```",
        "createdAt" : "2021-06-28T09:16:56Z",
        "updatedAt" : "2021-06-28T09:16:56Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c61a52d71a57514d325cd4de9b91d6ea3902cc4",
    "line" : 166,
    "diffHunk" : "@@ -1,1 +3175,3179 @@        dr = session.query(DagRun).filter(DagRun.dag_id == dag.dag_id).first()\n        # Assert dr state is queued\n        assert dr.state == State.QUEUED\n        assert dr.start_date is None\n"
  },
  {
    "id" : "585311bf-c741-492b-b85b-e3b807b8cf52",
    "prId" : 17265,
    "prUrl" : "https://github.com/apache/airflow/pull/17265#pullrequestreview-725053590",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c663ca2b-f84b-4d0f-bd5b-3337b587e53c",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "It may not be relevant, but why does the execution_date change here?",
        "createdAt" : "2021-08-05T09:36:59Z",
        "updatedAt" : "2021-08-05T09:36:59Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "83445d3f-a92e-428b-a2ce-bf5142ed3263",
        "parentId" : "c663ca2b-f84b-4d0f-bd5b-3337b587e53c",
        "authorId" : "c7b0cb1c-ff95-4ec9-a0c6-a9f1b5135a52",
        "body" : "It's how the dagrun was created before this change,. I decided not to change it. Look at the deleted line 528",
        "createdAt" : "2021-08-05T09:43:25Z",
        "updatedAt" : "2021-08-05T09:43:26Z",
        "lastEditedBy" : "c7b0cb1c-ff95-4ec9-a0c6-a9f1b5135a52",
        "tags" : [
        ]
      },
      {
        "id" : "08a1b5ea-15ec-4b3b-82fd-0eb8f5d1979d",
        "parentId" : "c663ca2b-f84b-4d0f-bd5b-3337b587e53c",
        "authorId" : "a5092e56-4956-45ec-9914-ecec6b63df73",
        "body" : "I think the original setup was trying to test that if the `DEFAULT_DATE + 1h` run is (somehow) scheduled before the `DEFAULT_DATE` one, tasks in the earlier run will still be run first. Itâ€™s probably worthwhile to add a docstring or comment describing the testâ€™s setup.",
        "createdAt" : "2021-08-09T06:29:29Z",
        "updatedAt" : "2021-08-09T06:29:29Z",
        "lastEditedBy" : "a5092e56-4956-45ec-9914-ecec6b63df73",
        "tags" : [
        ]
      }
    ],
    "commit" : "3826a54cb6e18578539d09ca49044f004160b6dd",
    "line" : 249,
    "diffHunk" : "@@ -1,1 +440,444 @@        with dag_maker(dag_id=dag_id_1, max_active_tasks=16) as dag_1:\n            dag1_task = DummyOperator(task_id=task_id)\n        dr1 = dag_maker.create_dagrun(execution_date=DEFAULT_DATE + timedelta(hours=1))\n\n        with dag_maker(dag_id=dag_id_2, max_active_tasks=16) as dag_2:"
  }
]