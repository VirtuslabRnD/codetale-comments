[
  {
    "id" : "ee86848a-b0dd-46b8-b587-5c38a29696b3",
    "prId" : 8949,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8949#pullrequestreview-410673620",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8fad11c-0e9b-4d7e-9def-6a52040d6cc4",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "It's not clear why `using quoted.QuoteContext` is necessary for macro usage.",
        "createdAt" : "2020-05-13T06:46:57Z",
        "updatedAt" : "2020-05-13T11:30:18Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "106a8e1b-93e3-48a7-924f-3c78922471bc",
        "parentId" : "f8fad11c-0e9b-4d7e-9def-6a52040d6cc4",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "The test is awkward. The inline method is the one that requires the `quoted.Type` as an implicit. This might only be used to write a macro that is used in a macro implementation, hence the QuoteContext.\r\n\r\nPreviously it worked because we never used the `Type` and by chance it stayed encoded as a `QuoteContext ?=> Type[T]` which was never called. That is why we missed the need for a `QuoteContext`.\r\n\r\nThe current approach homogeneously requires the quote context for all `Type` quotes as we do with `Expr` quotes. This helps to find out missing QuoteContext early in the pipeline. ",
        "createdAt" : "2020-05-13T07:53:05Z",
        "updatedAt" : "2020-05-13T11:30:18Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "243ac3b81aa6b6374a9cd29a6f5ea84297bbb3f5",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1,5 @@def test(using quoted.QuoteContext) = {\n  Macro.ff(3)\n}"
  }
]