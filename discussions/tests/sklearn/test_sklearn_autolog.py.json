[
  {
    "id" : "cdf925e2-5e84-48f4-958d-2575b5d35013",
    "prId" : 4218,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4218#pullrequestreview-626518027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f9c0621-9f66-426c-92e0-884a5bb7a48c",
        "parentId" : null,
        "authorId" : "1b6f9778-4aa7-4624-a54a-7d13658a8187",
        "body" : "minor: maybe flaky to compare float equality without numerical tolerance",
        "createdAt" : "2021-03-31T18:44:55Z",
        "updatedAt" : "2021-04-06T04:57:42Z",
        "lastEditedBy" : "1b6f9778-4aa7-4624-a54a-7d13658a8187",
        "tags" : [
        ]
      },
      {
        "id" : "706c2300-a9fb-4052-9a37-6f6d4324f2e2",
        "parentId" : "9f9c0621-9f66-426c-92e0-884a5bb7a48c",
        "authorId" : "13c2fe5d-a515-45e7-aa45-fbbe80a8a8a0",
        "body" : "Yeah, good point. I basically followed the pattern in other tests which perform the same type of equality checks. I can change the new tests in this PR, or create a separate PR that changes the tests in the whole sklearn suite. Wdyt?",
        "createdAt" : "2021-03-31T22:24:16Z",
        "updatedAt" : "2021-04-06T04:57:42Z",
        "lastEditedBy" : "13c2fe5d-a515-45e7-aa45-fbbe80a8a8a0",
        "tags" : [
        ]
      },
      {
        "id" : "765fae88-f3ef-47cc-bd69-21eda9a9993b",
        "parentId" : "9f9c0621-9f66-426c-92e0-884a5bb7a48c",
        "authorId" : "1b6f9778-4aa7-4624-a54a-7d13658a8187",
        "body" : "nvm. let's wait for the first failure to fix it.",
        "createdAt" : "2021-04-01T18:05:51Z",
        "updatedAt" : "2021-04-06T04:57:42Z",
        "lastEditedBy" : "1b6f9778-4aa7-4624-a54a-7d13658a8187",
        "tags" : [
        ]
      }
    ],
    "commit" : "2039111a72896c3c2015692d608e4c1297957188",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +1131,1135 @@    # Check correctness for the returned metrics/artifacts\n    y_pred = model.predict(X_eval)\n    assert eval_metrics == {\n        \"eval_score\": model.score(X_eval, y_eval),\n        \"eval_mse\": sklearn.metrics.mean_squared_error(y_eval, y_pred),"
  },
  {
    "id" : "bc0acc47-c62e-4e53-bbe4-1e911171971e",
    "prId" : 4218,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4218#pullrequestreview-625798570",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42c224c7-2f4d-4847-8e6e-4c2faba9f4df",
        "parentId" : null,
        "authorId" : "1b6f9778-4aa7-4624-a54a-7d13658a8187",
        "body" : "Missing a test to verify `autolog()` training metrics are consistent with `log_eval_metrics()`.",
        "createdAt" : "2021-03-31T18:53:24Z",
        "updatedAt" : "2021-04-06T04:57:42Z",
        "lastEditedBy" : "1b6f9778-4aa7-4624-a54a-7d13658a8187",
        "tags" : [
        ]
      },
      {
        "id" : "6561d9b7-5257-4fb6-91fe-4c892a8d445d",
        "parentId" : "42c224c7-2f4d-4847-8e6e-4c2faba9f4df",
        "authorId" : "13c2fe5d-a515-45e7-aa45-fbbe80a8a8a0",
        "body" : "Added one with classifier, which has the most metrics/artifacts.",
        "createdAt" : "2021-03-31T23:34:14Z",
        "updatedAt" : "2021-04-06T04:57:42Z",
        "lastEditedBy" : "13c2fe5d-a515-45e7-aa45-fbbe80a8a8a0",
        "tags" : [
        ]
      }
    ],
    "commit" : "2039111a72896c3c2015692d608e4c1297957188",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1113,1117 @@    assert {\"estimator_name\": \"ChildMod\"}.items() <= tags.items()\n    assert model.predict(1) == np.array([8])\n\n\ndef test_eval_and_log_metrics_for_regressor():"
  },
  {
    "id" : "a77b1fbb-a6bd-45df-b19c-d2f5cfd3ade1",
    "prId" : 4084,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4084#pullrequestreview-589089182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41d8cf84-ddd8-4059-9752-8aa30a9711a6",
        "parentId" : null,
        "authorId" : "7dc30493-29f9-4bc4-bf26-00054b8b0b57",
        "body" : "Sweet! ðŸŽ‰ ",
        "createdAt" : "2021-02-11T23:59:54Z",
        "updatedAt" : "2021-02-12T00:46:12Z",
        "lastEditedBy" : "7dc30493-29f9-4bc4-bf26-00054b8b0b57",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4d8ac74aa10a9c4f369b7bb631b00510c3b9789",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +872,876 @@\n\n@pytest.mark.parametrize(\"data_type\", [pd.DataFrame, np.array])\ndef test_autolog_logs_signature_and_input_example(data_type):\n    mlflow.sklearn.autolog(log_input_examples=True, log_model_signatures=True)"
  },
  {
    "id" : "320de2c9-fd90-4c06-8d46-99e365cb6511",
    "prId" : 3948,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3948#pullrequestreview-562418696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5587d20-a3fd-4d45-9032-eef5c9dcba2d",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Replaced `assert_array_equal` with `assert_array_almost_equal`. Still not sure why this issue occurs. On my macbook pro, this test always succeeds but on github actions it's flaky (maybe related to ubuntu?)",
        "createdAt" : "2021-01-06T08:57:36Z",
        "updatedAt" : "2021-01-06T09:53:29Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6dc4017e5dae97e021dc6c7093fa038067be694",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +901,905 @@    #\n    # As a workaround, use `assert_array_almost_equal` instead of `assert_array_equal`\n    np.testing.assert_array_almost_equal(pyfunc_model.predict(input_example), model.predict(X[:5]))\n\n"
  },
  {
    "id" : "7eff1b0d-3ec7-4807-8983-53a6229c666f",
    "prId" : 3582,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3582#pullrequestreview-517236648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "729a4f93-50bf-45b9-80b7-016290894e69",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "nice trick :)",
        "createdAt" : "2020-10-26T23:01:13Z",
        "updatedAt" : "2020-10-27T05:56:11Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "daa732b926250deaa72a1c86ee2b6f09b0370e00",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +1073,1077 @@\n    with mock.patch(\"mlflow.sklearn.utils._all_estimators\", return_value=new_all_estimators):\n        mlflow.sklearn.autolog()\n\n    model = ChildMod()"
  },
  {
    "id" : "e54cb88d-a70c-4107-a8e7-e5fa662178f0",
    "prId" : 3491,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3491#pullrequestreview-502257729",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5196cb67-8283-44e1-90fc-15a40b31ce5d",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "nice trick :)",
        "createdAt" : "2020-10-05T02:20:55Z",
        "updatedAt" : "2020-10-05T17:09:11Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "f860e179-4e08-4363-9660-d3586155cc28",
        "parentId" : "5196cb67-8283-44e1-90fc-15a40b31ce5d",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "thanks!",
        "createdAt" : "2020-10-05T17:10:51Z",
        "updatedAt" : "2020-10-05T17:10:51Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2fa6591aeff38080debf3f4e2877165985d1d52e",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1018,1022 @@    # tags simplifies test validation logic\n    client = mlflow.tracking.MlflowClient()\n    run_id = client.create_run(experiment_id=0).info.run_id\n\n    from sklearn.preprocessing import Normalizer, LabelEncoder, MinMaxScaler"
  },
  {
    "id" : "1281b429-1dae-4bf7-b437-6c299391fbaf",
    "prId" : 3423,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3423#pullrequestreview-488311522",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67eccbcc-0174-4ad7-9126-04bb9f001ce6",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Assertion to verify no figure is open. after logging",
        "createdAt" : "2020-09-15T04:21:01Z",
        "updatedAt" : "2020-09-17T04:23:09Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2b1a72c1d48ad0814ef295fa34a3e4e63b9533d",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +261,265 @@    assert_predict_equal(loaded_model, model, X)\n    # verify no figure is open\n    assert len(plt.get_fignums()) == 0\n\n"
  },
  {
    "id" : "8982be2a-5d7d-4336-a30a-bfc72db55065",
    "prId" : 3326,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3326#pullrequestreview-477110379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "519d481b-1342-4ea8-9a42-171257ad0fe0",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "@harupy I tweaked this test case slightly to verify that the input example can be used to evaluate the pyfunc representation of the model. The example can be loaded as a dataframe using the `mlflow.models.utils._read_example` utility function.",
        "createdAt" : "2020-08-27T18:42:41Z",
        "updatedAt" : "2020-08-28T00:03:26Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "96ce4835-4b12-4f8f-93dd-6c24e7c4237e",
        "parentId" : "519d481b-1342-4ea8-9a42-171257ad0fe0",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "makes sense! Thanks!",
        "createdAt" : "2020-08-27T21:53:12Z",
        "updatedAt" : "2020-08-28T00:03:26Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "165440f39d6489ed6fadcb0901d803499cd304b5",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +702,706 @@\n    assert model_conf.signature == infer_signature(X, model.predict(X[:5]))\n    np.testing.assert_array_equal(pyfunc_model.predict(input_example), model.predict(X[:5]))\n\n"
  },
  {
    "id" : "db340ab9-d82b-4182-8aee-91a34f1992e2",
    "prId" : 3326,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3326#pullrequestreview-477111568",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "079b8fa0-2d50-4326-b8d6-dc9c57ee99c0",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Love it!",
        "createdAt" : "2020-08-27T18:45:46Z",
        "updatedAt" : "2020-08-28T00:03:26Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "07203eb2-b12c-4ce8-ac4e-293f9a32a777",
        "parentId" : "079b8fa0-2d50-4326-b8d6-dc9c57ee99c0",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "probably the best class I've ever written ðŸ˜‚",
        "createdAt" : "2020-08-27T21:55:28Z",
        "updatedAt" : "2020-08-28T00:03:26Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "165440f39d6489ed6fadcb0901d803499cd304b5",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +712,716 @@        def __getitem__(self, key):\n            if isinstance(key, slice):\n                raise IndexError(\"DO NOT SLICE ME\")\n            return super(ArrayThatThrowsWhenSliced, self).__getitem__(key)\n"
  },
  {
    "id" : "a360348d-74bf-400e-a9cf-96f466412c20",
    "prId" : 3323,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3323#pullrequestreview-474748575",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cceec039-5e53-4a6e-a9f4-65577eb97c5f",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "TODO: Assert that this run is in the terminated state & was successful",
        "createdAt" : "2020-08-25T02:23:27Z",
        "updatedAt" : "2020-08-27T02:49:52Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "2918c729-63df-4eb0-85c0-2e06443f3579",
        "parentId" : "cceec039-5e53-4a6e-a9f4-65577eb97c5f",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Done!",
        "createdAt" : "2020-08-25T18:45:19Z",
        "updatedAt" : "2020-08-27T02:49:52Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ab9325258f8cc72afd71c7569ae921f08e8a353",
    "line" : 209,
    "diffHunk" : "@@ -1,1 +599,603 @@        child_runs = client.search_runs(run.info.experiment_id, search_filter)\n        assert len(child_runs) == 1\n        child_run = child_runs[0]\n        assert child_run.info.status == RunStatus.to_string(RunStatus.FINISHED)\n        _, child_metrics, child_tags, _ = get_run_data(child_run.info.run_id)"
  },
  {
    "id" : "d5327d7f-040d-41f7-9b7e-8e22ea2b3682",
    "prId" : 3323,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3323#pullrequestreview-475746032",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a455a222-04d5-4a57-bc6e-45aba21bf45c",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "I should have used `run.info` instead of `run._info`.",
        "createdAt" : "2020-08-26T03:44:35Z",
        "updatedAt" : "2020-08-27T02:49:52Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "fa7e2a69-ff0c-41c0-841e-712430c9dcf6",
        "parentId" : "a455a222-04d5-4a57-bc6e-45aba21bf45c",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "I'll make this change - thanks for the reminder!",
        "createdAt" : "2020-08-26T18:26:03Z",
        "updatedAt" : "2020-08-27T02:49:52Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ab9325258f8cc72afd71c7569ae921f08e8a353",
    "line" : 235,
    "diffHunk" : "@@ -1,1 +625,629 @@        )\n        cv_model.fit(*get_iris())\n        run_id = run.info.run_id\n\n    client = mlflow.tracking.MlflowClient()"
  },
  {
    "id" : "5a4b3df7-e149-4572-9287-5298a81f0a5e",
    "prId" : 3287,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3287#pullrequestreview-468660964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88935cb1-b62c-4671-8eb9-29f3ee5d467b",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "This looks a bit ugly due to formatting by black but is equivalent to:\r\n\r\n```python\r\n    with mock.patch(\"mlflow.log_params\") as mock_log_params, \\\r\n         mock.patch(\"mlflow.log_metric\") as mock_log_metric, \\\r\n         mock.patch(\"mlflow.set_tags\") as mock_set_tags, \\ \r\n         mock.patch(\"mlflow.sklearn.log_model\") as mock_log_model:\r\n```",
        "createdAt" : "2020-08-16T22:29:08Z",
        "updatedAt" : "2020-08-22T13:15:08Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "e9826c55-00da-4ff2-9ee5-7ed39dccddd4",
        "parentId" : "88935cb1-b62c-4671-8eb9-29f3ee5d467b",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Awesome test case! Can we also verify that the associated MLflow run has no children?",
        "createdAt" : "2020-08-17T18:46:20Z",
        "updatedAt" : "2020-08-22T13:15:08Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "86a008595f5ef17520849ab1e871dce5a91cee6c",
    "line" : 488,
    "diffHunk" : "@@ -1,1 +486,490 @@    ) as mock_log_metric, mock.patch(\"mlflow.set_tags\") as mock_set_tags, mock.patch(\n        \"mlflow.sklearn.log_model\"\n    ) as mock_log_model:\n\n        with mlflow.start_run() as run:"
  },
  {
    "id" : "1861b930-96c4-4ebb-ae4e-180ff9cd595b",
    "prId" : 3287,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3287#pullrequestreview-470352042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94ec1a8b-dc24-47b2-875d-70fb46fc4d32",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "looks like we can access sklearn's submodules without importing them after calling `sklearn.utils.all_estimators`",
        "createdAt" : "2020-08-19T11:07:06Z",
        "updatedAt" : "2020-08-22T13:15:08Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "86a008595f5ef17520849ab1e871dce5a91cee6c",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +161,165 @@    mlflow.sklearn.autolog()\n    mlflow.start_run()\n    sklearn.cluster.KMeans().fit(*get_iris())\n    assert mlflow.active_run() is not None\n    mlflow.end_run()"
  },
  {
    "id" : "aaa874c8-e328-4405-89d5-67b4d261ed9a",
    "prId" : 3287,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3287#pullrequestreview-470595190",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cebee59e-48fb-4376-8fe5-8da21ce184c4",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Awesome! Can we also add a small test for the case where `X` and `y` are specified as kwargs?",
        "createdAt" : "2020-08-19T17:03:10Z",
        "updatedAt" : "2020-08-22T13:15:08Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "86a008595f5ef17520849ab1e871dce5a91cee6c",
    "line" : 294,
    "diffHunk" : "@@ -1,1 +292,296 @@\n\ndef test_call_fit_with_arguments_score_does_not_accept():\n    mlflow.sklearn.autolog()\n"
  },
  {
    "id" : "ebefdcc0-ab5e-4615-ac8c-fd487d012a36",
    "prId" : 3287,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3287#pullrequestreview-470723683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d189695-4e3e-4c85-8a17-1657ff3e5a53",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Autologging tests should be decorated with `@pytest.mark.large`.",
        "createdAt" : "2020-08-19T18:17:28Z",
        "updatedAt" : "2020-08-22T13:15:08Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "86a008595f5ef17520849ab1e871dce5a91cee6c",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +119,123 @@\n\ndef test_autolog_preserves_original_function_attributes():\n    def get_func_attrs(f):\n        attrs = {}"
  }
]