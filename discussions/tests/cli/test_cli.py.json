[
  {
    "id" : "b070bb85-ecf5-4e9d-9af1-a5889038458e",
    "prId" : 6543,
    "prUrl" : "https://github.com/apache/airflow/pull/6543#pullrequestreview-315233898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e89ba111-d3c3-4137-9821-6e10ae007a63",
        "parentId" : null,
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "Airflow has a side effect that will be difficult to fix, so I changed this test a bit.\r\nThe following message began to appear at the beginning of the output.\r\n```\r\n[2019-11-12 00:15:08,234] {cli_action_loggers.py:67} DEBUG - Calling callbacks: [<function default_action_log at 0x7f37bf1aed08>]\r\n```",
        "createdAt" : "2019-11-12T00:31:52Z",
        "updatedAt" : "2019-11-12T01:07:39Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "c31c5ce7caf463e9571c783802e8622c17c5098c",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +283,287 @@        output = mock_stdout.read()\n        self.assertIn(\"Dry run of DAG example_bash_operator on {}\\n\".format(DEFAULT_DATE.isoformat()), output)\n        self.assertIn(\"Task runme_0\\n\".format(DEFAULT_DATE.isoformat()), output)\n\n        mock_run.assert_not_called()  # Dry run shouldn't run the backfill"
  },
  {
    "id" : "bd6c128f-262f-4c60-bf5c-fcf1e0aec739",
    "prId" : 6579,
    "prUrl" : "https://github.com/apache/airflow/pull/6579#pullrequestreview-316500967",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d410478-0b88-4d12-a362-7e1907cf35ec",
        "parentId" : null,
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "Daemon is not found without the -f option. Sometimes pgrep would find the user process (824 linie) and report success, but if it didn't, the test would fail.",
        "createdAt" : "2019-11-13T19:32:56Z",
        "updatedAt" : "2019-11-14T21:00:17Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6d55b76f4cd4c413df02e9191a6b2338b8ceef1",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +828,832 @@\n        # Assert that gunicorn and its monitor are launched.\n        self.assertEqual(0, subprocess.Popen([\"pgrep\", \"-f\", \"-c\", \"airflow webserver\"]).wait())\n        self.assertEqual(0, subprocess.Popen([\"pgrep\", \"-c\", \"gunicorn\"]).wait())\n"
  },
  {
    "id" : "864acc2f-11aa-4d84-b694-d3abdbd328a2",
    "prId" : 6579,
    "prUrl" : "https://github.com/apache/airflow/pull/6579#pullrequestreview-316502157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9997a28-8064-4da0-b915-556dccdf3bb8",
        "parentId" : null,
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "It is necessary to check whether the monitor has started earlier, otherwise we are not sure if pgrep will be successful.",
        "createdAt" : "2019-11-13T19:34:52Z",
        "updatedAt" : "2019-11-14T21:00:17Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6d55b76f4cd4c413df02e9191a6b2338b8ceef1",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +832,836 @@\n        # Terminate monitor process.\n        proc = psutil.Process(pid_monitor)\n        proc.terminate()\n        proc.wait()"
  },
  {
    "id" : "aca7c2e8-ef22-4bdc-a09b-48801a75bd63",
    "prId" : 6579,
    "prUrl" : "https://github.com/apache/airflow/pull/6579#pullrequestreview-316502724",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bfed8d3-540a-49d5-816e-f01423c9d44c",
        "parentId" : null,
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "If we want to do pgrep for gunicorn then we need to check if procces has started",
        "createdAt" : "2019-11-13T19:35:44Z",
        "updatedAt" : "2019-11-14T21:00:17Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6d55b76f4cd4c413df02e9191a6b2338b8ceef1",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +825,829 @@\n        pid_monitor = self._wait_pidfile(pidfile_monitor)\n        self._wait_pidfile(pidfile_webserver)\n\n        # Assert that gunicorn and its monitor are launched."
  },
  {
    "id" : "bcb40a8e-d9c7-4005-9a2f-6b952a70360e",
    "prId" : 6579,
    "prUrl" : "https://github.com/apache/airflow/pull/6579#pullrequestreview-316641309",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29f06df0-af47-4e92-8161-a6b10c736ee8",
        "parentId" : null,
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "Sometimes these files may exist if the process was killed by ``kill -9``",
        "createdAt" : "2019-11-13T19:40:35Z",
        "updatedAt" : "2019-11-14T21:00:17Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "c40df124-73b2-4230-a1ee-b630705e4f41",
        "parentId" : "29f06df0-af47-4e92-8161-a6b10c736ee8",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "This can cause another race condition.",
        "createdAt" : "2019-11-14T00:09:34Z",
        "updatedAt" : "2019-11-14T21:00:17Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6d55b76f4cd4c413df02e9191a6b2338b8ceef1",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +781,785 @@    def _clean_pidfiles(self):\n        pidfile_webserver = cli.setup_locations(\"webserver\")[0]\n        pidfile_monitor = cli.setup_locations(\"webserver-monitor\")[0]\n        if os.path.exists(pidfile_webserver):\n            os.remove(pidfile_webserver)"
  },
  {
    "id" : "278e77d8-b9fd-40ac-884e-8f40ebec3551",
    "prId" : 6593,
    "prUrl" : "https://github.com/apache/airflow/pull/6593#pullrequestreview-318451620",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2efb5426-29d4-42ae-b61d-fabb7fb64ff7",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Can you add a `# TODO: ...` here so we stand a chance of remembering this if we don't get straight on to the other fix.\r\n\r\nThe other option would be to mock the Connection adding code -- we don't need to test that here, just the CLI code right?",
        "createdAt" : "2019-11-18T14:43:20Z",
        "updatedAt" : "2019-11-18T16:14:32Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "40a16ac2-7bf4-4641-8543-a07e3df07e95",
        "parentId" : "2efb5426-29d4-42ae-b61d-fabb7fb64ff7",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "In most cases, CLI only has integration tests. We do not test CLI with unit tests and very rarely use mock. I think this is a good approach because we don't have a lot of these tests, but they provide a lot more confidence. If we develop CLI then we will have to think that the next tests will be only unit tests.",
        "createdAt" : "2019-11-18T15:50:57Z",
        "updatedAt" : "2019-11-18T16:14:32Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "94827f16-e1f3-45b5-a56d-6dcfe5f13063",
        "parentId" : "2efb5426-29d4-42ae-b61d-fabb7fb64ff7",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "I added TODO comment.",
        "createdAt" : "2019-11-18T16:14:39Z",
        "updatedAt" : "2019-11-18T16:14:40Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b0925ebcd15522f72f7f63d6b265fb8d95e0798",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1331,1335 @@    def test_cli_connections_add_delete(self):\n        # TODO: We should not delete the entire database, but only reset the contents of the Connection table.\n        db.resetdb()\n        # Add connections:\n        uri = 'postgresql://airflow:airflow@host:5432/airflow'"
  }
]