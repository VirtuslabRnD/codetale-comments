[
  {
    "id" : "78a38f2b-387e-4366-90db-fcdfc0ae7f4b",
    "prId" : 5154,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5154#pullrequestreview-159094247",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6236266-1eab-48a2-bd04-085e489045a0",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Just a curiosity: we do eta-expansion for methods when the expected type is a function, so that a method is always applied. In this case of quotes, it seems it breaks this invariant.",
        "createdAt" : "2018-09-26T16:12:55Z",
        "updatedAt" : "2018-09-26T16:13:32Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "ec8f4790-8f4a-4a37-925c-38d37cf159cd",
        "parentId" : "c6236266-1eab-48a2-bd04-085e489045a0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "It is unrelated with the eta-expansion. This is about lifting a tree that represents a reference to a method that is outside the quote. It could not come from eta-expansion the code above could be `def f(x: Int): Int = ~eval1('{ f(1); 2 })` where `f` also needs lifting.",
        "createdAt" : "2018-09-26T16:44:08Z",
        "updatedAt" : "2018-09-26T16:44:08Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "757bb1eb8710598f0fcdad71c78c64aeb7be8393",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +7,11 @@\n  def peval1(): Expr[Unit] = '{\n    def f(x: Int): Int = ~eval1('(f))\n  }\n"
  }
]