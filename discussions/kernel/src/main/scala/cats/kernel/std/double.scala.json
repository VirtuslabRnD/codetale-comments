[
  {
    "id" : "e6a269fb-bd51-4751-b4db-cbc089a31f28",
    "prId" : 1001,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6c390ef-ff9e-4e5b-9046-d12d8cced484",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "strictly, is this a PartialOrder due to `NaN`? Should we maybe have that and some `unsafeToOrder` method for people to opt out?\n",
        "createdAt" : "2016-04-25T18:31:04Z",
        "updatedAt" : "2016-04-29T14:15:30Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "a2b05489-c029-4924-98ff-9bf44a379464",
        "parentId" : "b6c390ef-ff9e-4e5b-9046-d12d8cced484",
        "authorId" : "89a3e0e3-e301-4aa8-b150-74070eb5a619",
        "body" : "This implementation is using `java.lang.Double.compare` which means it is total (but ugly) -- `NaN` is greater than all non-NaN values:\n\n```\nscala> java.lang.Double.compare(Double.NaN, Double.PositiveInfinity)\nres4: Int = 1\nscala> java.lang.Double.compare(Double.NaN, Double.NaN)\nres7: Int = 0\n```\n",
        "createdAt" : "2016-04-25T19:29:16Z",
        "updatedAt" : "2016-04-29T14:15:30Z",
        "lastEditedBy" : "89a3e0e3-e301-4aa8-b150-74070eb5a619",
        "tags" : [
        ]
      }
    ],
    "commit" : "aac4652a20795153fea3101752904b2366206dea",
    "line" : null,
    "diffHunk" : "@@ -1,1 +16,20 @@}\n\nclass DoubleOrder extends Order[Double] {\n\n  def compare(x: Double, y: Double): Int ="
  }
]