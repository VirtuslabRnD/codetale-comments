[
  {
    "id" : "231c62ad-fdff-499d-b05e-10c52294c2d7",
    "prId" : 1712,
    "prUrl" : "https://github.com/typelevel/cats/pull/1712#pullrequestreview-59932724",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "066e3fab-4638-4e49-845f-613169bf3325",
        "parentId" : null,
        "authorId" : "f554ab49-3a30-4ea7-9e32-d35f2620d800",
        "body" : "consider using `Long` and move away from the JVM legacy?",
        "createdAt" : "2017-08-06T20:13:49Z",
        "updatedAt" : "2017-10-04T07:20:27Z",
        "lastEditedBy" : "f554ab49-3a30-4ea7-9e32-d35f2620d800",
        "tags" : [
        ]
      },
      {
        "id" : "ab00aae1-25b3-4a1e-93e2-76227fd3e1b0",
        "parentId" : "066e3fab-4638-4e49-845f-613169bf3325",
        "authorId" : "6d2b8fad-e41c-480d-9519-1b59a279a328",
        "body" : "@fommil What are the justifications of using `Long`? JVM-default `Int` works good enough I think?",
        "createdAt" : "2017-08-07T01:00:46Z",
        "updatedAt" : "2017-10-04T07:20:27Z",
        "lastEditedBy" : "6d2b8fad-e41c-480d-9519-1b59a279a328",
        "tags" : [
        ]
      },
      {
        "id" : "ce792b63-152b-4f38-a62f-8378e17c5894",
        "parentId" : "066e3fab-4638-4e49-845f-613169bf3325",
        "authorId" : "7e3d5e72-6b63-4e9d-8d2b-da0bc51b173c",
        "body" : "The `Object#hashCode: Int` in Java is basically used for distribution within `Set` or `Map`-like data structures and for that purpose `Int` will remain sufficient for some time, for one because the size of an array in Java can't exceed `Int.MaxValue` either and if you instantiate an `Array<Int>` of size `Int.MaxValue` that's around ~ 8 GB of RAM.\r\n\r\nSo I'm not seeing the size of an array evolving to a `Long`, for one because of backwards compatibility, but also it's probably counter productive to allow contiguous memory blocks bigger than that. For now at least.\r\nI'm guessing that's the reason other languages use 32 bit integers (or sometimes less) for their hash codes as well. For example: https://hackage.haskell.org/package/hashable-1.2.6.1/docs/Data-Hashable.html\r\n\r\nThe questions are:\r\n\r\n1. besides doing distribution in data structures like `HashMap` / `HashSet`, are there any other use cases?\r\n2. doesn't `Long` have performance implications? it's an important question to answer, as HashMaps tend to be abused\r\n3. are there any languages using `Long` for their universal `hashCode` already and if so, I'd be interested in why?",
        "createdAt" : "2017-08-09T14:51:57Z",
        "updatedAt" : "2017-10-04T07:20:27Z",
        "lastEditedBy" : "7e3d5e72-6b63-4e9d-8d2b-da0bc51b173c",
        "tags" : [
        ]
      },
      {
        "id" : "4802f8d9-3dbd-4a8e-9256-0ee89dd58260",
        "parentId" : "066e3fab-4638-4e49-845f-613169bf3325",
        "authorId" : "f554ab49-3a30-4ea7-9e32-d35f2620d800",
        "body" : "64 bit JVMs store both `Int` and `Long` as 64 bit numbers, so there is no advantage to use `Int` for space preserving reasons. However if you want to make use of existing `hashCode` algorithms that return `Int` then that would be a good reason to keep it that way.",
        "createdAt" : "2017-08-09T18:52:22Z",
        "updatedAt" : "2017-10-04T07:20:27Z",
        "lastEditedBy" : "f554ab49-3a30-4ea7-9e32-d35f2620d800",
        "tags" : [
        ]
      },
      {
        "id" : "88d0bdcf-6d66-46ed-94ae-ff9a18334cbd",
        "parentId" : "066e3fab-4638-4e49-845f-613169bf3325",
        "authorId" : "6d2b8fad-e41c-480d-9519-1b59a279a328",
        "body" : "I think that for now we should stay with what `Object#hashCode` is doing: returning an `Int`. Agree with @alexandru .",
        "createdAt" : "2017-08-11T04:00:47Z",
        "updatedAt" : "2017-10-04T07:20:27Z",
        "lastEditedBy" : "6d2b8fad-e41c-480d-9519-1b59a279a328",
        "tags" : [
        ]
      },
      {
        "id" : "e1720183-3122-49be-a77c-76a16ed0916d",
        "parentId" : "066e3fab-4638-4e49-845f-613169bf3325",
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "I disagree about using `Int`. If you have a `Long` you can easily get an `Int` from int, but not the other way around. Some nice algorithms using hashes want more than 32 bits. For instance hyperloglog with only 32 bits would not be great.",
        "createdAt" : "2017-08-31T17:27:17Z",
        "updatedAt" : "2017-10-04T07:20:27Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "2bbac3be-cf45-4246-b007-78a95ae4aa62",
        "parentId" : "066e3fab-4638-4e49-845f-613169bf3325",
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "+1 to using `Long` here. If you want to just give me an `Int` upcast to `Long` that's on you, but it would be better to enable better algorithms.",
        "createdAt" : "2017-08-31T17:48:48Z",
        "updatedAt" : "2017-10-04T07:20:27Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      }
    ],
    "commit" : "601e18d7ac3803aa0e60a26f72ad440cf10ea232",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +15,19 @@   * Returns the hash code of the given object under this hashing scheme.\n   */\n  def hash(x: A): Int\n\n  // `Hash#on` deliberately not implemented to avoid `Hash`/`Order` diamond inheritance problem."
  },
  {
    "id" : "f32c36e2-e7ef-4b51-a3d0-e43f268f599e",
    "prId" : 1712,
    "prUrl" : "https://github.com/typelevel/cats/pull/1712#pullrequestreview-64752285",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf50d11e-0ea1-4c09-ad1f-830ddcd85c97",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "untested",
        "createdAt" : "2017-09-02T19:15:01Z",
        "updatedAt" : "2017-10-04T07:20:27Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "c14bcf5e-cac9-43ee-ae1b-89b33f17ddd9",
        "parentId" : "cf50d11e-0ea1-4c09-ad1f-830ddcd85c97",
        "authorId" : "6d2b8fad-e41c-480d-9519-1b59a279a328",
        "body" : "done",
        "createdAt" : "2017-09-24T02:54:47Z",
        "updatedAt" : "2017-10-04T07:20:27Z",
        "lastEditedBy" : "6d2b8fad-e41c-480d-9519-1b59a279a328",
        "tags" : [
        ]
      }
    ],
    "commit" : "601e18d7ac3803aa0e60a26f72ad440cf10ea232",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +36,40 @@  @inline final def apply[A](implicit ev: Hash[A]): Hash[A] = ev\n\n  def by[@sp A, @sp B](f: A => B)(implicit ev: Hash[B]): Hash[A] =\n    new Hash[A] {\n      def hash(x: A) = ev.hash(f(x))"
  }
]