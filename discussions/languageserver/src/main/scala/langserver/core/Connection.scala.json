[
  {
    "id" : "8b21e502-0da5-46fa-ad23-698d5cdb9e3e",
    "prId" : 128,
    "prUrl" : "https://github.com/scalameta/metals/pull/128#pullrequestreview-83828338",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d733377-183c-49ea-b870-6b7768de5cf6",
        "parentId" : null,
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "I'll report the comment as a review comment, so it's easier to see.\r\nUnder what circumstances is this a `StringCorrelationId`? Should we ignore it?",
        "createdAt" : "2017-12-15T14:46:56Z",
        "updatedAt" : "2017-12-15T21:25:34Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      },
      {
        "id" : "57e1eadc-ece0-4290-ae0b-43a00c36c299",
        "parentId" : "3d733377-183c-49ea-b870-6b7768de5cf6",
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "I've seen https://github.com/scalameta/language-server/pull/128#commitcomment-26300800, that makes sense.",
        "createdAt" : "2017-12-15T14:48:49Z",
        "updatedAt" : "2017-12-15T21:25:34Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      }
    ],
    "commit" : "baa275778ef3f4f47fbd5cf8309f788fb8829473",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +180,184 @@    }.runAsync\n    id match {\n      case NumericCorrelationId(value) =>\n        activeRequestsById.put(value.toIntExact, future)\n      case _ =>"
  },
  {
    "id" : "4476c6ba-6234-462b-a75d-46eedc3351fb",
    "prId" : 103,
    "prUrl" : "https://github.com/scalameta/metals/pull/103#pullrequestreview-82325914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "032ae1b3-6078-4fd3-8dbe-e0121d4b45b7",
        "parentId" : null,
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "How about making this a `trait`? TBH I never understood the `abstract class` vs `trait` thing in Scala, hence I always used traits.",
        "createdAt" : "2017-12-09T13:38:09Z",
        "updatedAt" : "2017-12-09T13:43:06Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      },
      {
        "id" : "55956db1-12ba-4458-a95b-dc166a16a9e0",
        "parentId" : "032ae1b3-6078-4fd3-8dbe-e0121d4b45b7",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "I prefer abstract class unless I expect it to be mixed into another class. abstract classes can accept parameters (traits get that ability too in dotty) and they also make it easier to keep compatibility pre-2.12 (although that's irrelevant here). I think it's best to keep this as a class here, I can make it non-abstract by implementing commandHandler, but it doesn't really matter for us much here.",
        "createdAt" : "2017-12-09T13:47:51Z",
        "updatedAt" : "2017-12-09T13:47:51Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b806662917cd1a44afa64fabbb83717dd0bbefe5",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +28,32 @@ *       and that can't subclass anything other than Any\n */\nabstract class Connection(inStream: InputStream, outStream: OutputStream)(implicit s: Scheduler)\n    extends LazyLogging with Notifications {\n  private val msgReader = new MessageReader(inStream)"
  }
]