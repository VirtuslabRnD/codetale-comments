[
  {
    "id" : "5f267fe1-0b9a-4448-a141-c42e54c94660",
    "prId" : 849,
    "prUrl" : "https://github.com/zio/zio/pull/849#pullrequestreview-240380530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04152927-3e88-401c-953c-fac5df07a168",
        "parentId" : null,
        "authorId" : "94a9bd21-bc51-4681-8e4e-61d5917ea48f",
        "body" : "Could you please provide tracer benchmark numbers in a PR comment? It's not clear right away what are the benefits of using this code instead of ASM based parser (outside of maintaining a zero dep status).",
        "createdAt" : "2019-05-12T10:32:33Z",
        "updatedAt" : "2019-05-30T01:18:27Z",
        "lastEditedBy" : "94a9bd21-bc51-4681-8e4e-61d5917ea48f",
        "tags" : [
        ]
      },
      {
        "id" : "3362665b-13ad-4685-8ab7-c1d4f8bc45b3",
        "parentId" : "04152927-3e88-401c-953c-fac5df07a168",
        "authorId" : "02674bd6-d0ac-4b09-b920-a5e05b0a5cad",
        "body" : "Asm is faster a bit but this parser has no external dependencies. And this is the primary reason to choose this one. \r\n\r\nAlso keep in mind that once the cache is filled this code will never be invoked.\r\n\r\nKai will post benchmarks later, but IMO performance is not important here.",
        "createdAt" : "2019-05-12T11:51:07Z",
        "updatedAt" : "2019-05-30T01:18:27Z",
        "lastEditedBy" : "02674bd6-d0ac-4b09-b920-a5e05b0a5cad",
        "tags" : [
        ]
      },
      {
        "id" : "b612e823-59ee-421a-8bb1-9d76fcc27836",
        "parentId" : "04152927-3e88-401c-953c-fac5df07a168",
        "authorId" : "56b6f012-a8a8-437f-8276-11ce771fba44",
        "body" : "@pshirshov The cache is unbounded and could be a potential problem on large codebases. Do you have plans to optimize it? One of optimization from top of my head is to use String.intern() method for file, clazz maybe",
        "createdAt" : "2019-05-13T07:41:54Z",
        "updatedAt" : "2019-05-30T01:18:27Z",
        "lastEditedBy" : "56b6f012-a8a8-437f-8276-11ce771fba44",
        "tags" : [
        ]
      },
      {
        "id" : "5e7138eb-63f3-4652-8e78-d88822767a96",
        "parentId" : "04152927-3e88-401c-953c-fac5df07a168",
        "authorId" : "02674bd6-d0ac-4b09-b920-a5e05b0a5cad",
        "body" : "Check the whole patch, interning is there already. ",
        "createdAt" : "2019-05-13T07:49:09Z",
        "updatedAt" : "2019-05-30T01:18:27Z",
        "lastEditedBy" : "02674bd6-d0ac-4b09-b920-a5e05b0a5cad",
        "tags" : [
        ]
      },
      {
        "id" : "5e72a8b4-d9bd-4d37-987f-713c40977cb9",
        "parentId" : "04152927-3e88-401c-953c-fac5df07a168",
        "authorId" : "56b6f012-a8a8-437f-8276-11ce771fba44",
        "body" : "Didn't notice it, my bad. Cool!",
        "createdAt" : "2019-05-13T08:19:28Z",
        "updatedAt" : "2019-05-30T01:18:27Z",
        "lastEditedBy" : "56b6f012-a8a8-437f-8276-11ce771fba44",
        "tags" : [
        ]
      },
      {
        "id" : "6940ac2e-4742-4125-9e6e-dcf27923ee94",
        "parentId" : "04152927-3e88-401c-953c-fac5df07a168",
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "@artempyanykh Benchmark numbers on my machine:\r\n```\r\n[info] Running (fork) org.openjdk.jmh.Main scalaz.zio.stacktracer.TracersBenchmark -i 10 -wi 10 -f1 -t8\r\n[info] # JMH version: 1.21\r\n[info] # VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13\r\n[info] # VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/jre/bin/java\r\n[info] # VM options: <none>\r\n[info] # Warmup: 10 iterations, 1 s each\r\n[info] # Measurement: 10 iterations, 1 s each\r\n[info] # Timeout: 10 min per iteration\r\n[info] # Threads: 8 threads, will synchronize iterations\r\n[info] # Benchmark mode: Average time, time/op\r\n[info] # Benchmark: scalaz.zio.stacktracer.TracersBenchmark.akkaLineNumbers1000Lambdas\r\n[info] # Run progress: 0.00% complete, ETA 00:01:00\r\n[info] # Fork: 1 of 1\r\n[info] # Warmup Iteration   1: 688.078 ?(99.9%) 333.396 ms/op\r\n[info] # Warmup Iteration   2: 539.822 ?(99.9%) 10.256 ms/op\r\n[info] # Warmup Iteration   3: 526.389 ?(99.9%) 10.554 ms/op\r\n[info] # Warmup Iteration   4: 477.833 ?(99.9%) 17.939 ms/op\r\n[info] # Warmup Iteration   5: 481.406 ?(99.9%) 16.112 ms/op\r\n[info] # Warmup Iteration   6: 480.685 ?(99.9%) 19.045 ms/op\r\n[info] # Warmup Iteration   7: 493.985 ?(99.9%) 22.763 ms/op\r\n[info] # Warmup Iteration   8: 490.212 ?(99.9%) 15.283 ms/op\r\n[info] # Warmup Iteration   9: 502.920 ?(99.9%) 29.178 ms/op\r\n[info] # Warmup Iteration  10: 497.979 ?(99.9%) 25.670 ms/op\r\n[info] Iteration   1: 506.635 ?(99.9%) 26.874 ms/op\r\n[info] Iteration   2: 511.377 ?(99.9%) 34.289 ms/op\r\n[info] Iteration   3: 519.323 ?(99.9%) 42.639 ms/op\r\n[info] Iteration   4: 499.538 ?(99.9%) 29.123 ms/op\r\n[info] Iteration   5: 517.134 ?(99.9%) 22.145 ms/op\r\n[info] Iteration   6: 498.225 ?(99.9%) 17.942 ms/op\r\n[info] Iteration   7: 526.698 ?(99.9%) 15.620 ms/op\r\n[info] Iteration   8: 502.834 ?(99.9%) 18.593 ms/op\r\n[info] Iteration   9: 522.352 ?(99.9%) 23.818 ms/op\r\n[info] Iteration  10: 490.843 ?(99.9%) 16.605 ms/op\r\n[info] Result \"scalaz.zio.stacktracer.TracersBenchmark.akkaLineNumbers1000Lambdas\":\r\n[info]   509.496 ?(99.9%) 17.791 ms/op [Average]\r\n[info]   (min, avg, max) = (490.843, 509.496, 526.698), stdev = 11.768\r\n[info]   CI (99.9%): [491.705, 527.287] (assumes normal distribution)\r\n[info] # JMH version: 1.21\r\n[info] # VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13\r\n[info] # VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/jre/bin/java\r\n[info] # VM options: <none>\r\n[info] # Warmup: 10 iterations, 1 s each\r\n[info] # Measurement: 10 iterations, 1 s each\r\n[info] # Timeout: 10 min per iteration\r\n[info] # Threads: 8 threads, will synchronize iterations\r\n[info] # Benchmark mode: Average time, time/op\r\n[info] # Benchmark: scalaz.zio.stacktracer.TracersBenchmark.akkaTracer1000Lambdas\r\n[info] # Run progress: 33.33% complete, ETA 00:01:11\r\n[info] # Fork: 1 of 1\r\n[info] # Warmup Iteration   1: 810.213 ?(99.9%) 344.045 ms/op\r\n[info] # Warmup Iteration   2: 610.676 ?(99.9%) 32.374 ms/op\r\n[info] # Warmup Iteration   3: 557.663 ?(99.9%) 30.693 ms/op\r\n[info] # Warmup Iteration   4: 583.463 ?(99.9%) 24.476 ms/op\r\n[info] # Warmup Iteration   5: 526.098 ?(99.9%) 19.209 ms/op\r\n[info] # Warmup Iteration   6: 553.463 ?(99.9%) 12.259 ms/op\r\n[info] # Warmup Iteration   7: 539.786 ?(99.9%) 22.442 ms/op\r\n[info] # Warmup Iteration   8: 553.602 ?(99.9%) 21.540 ms/op\r\n[info] # Warmup Iteration   9: 535.725 ?(99.9%) 26.722 ms/op\r\n[info] # Warmup Iteration  10: 556.537 ?(99.9%) 18.868 ms/op\r\n[info] Iteration   1: 536.602 ?(99.9%) 12.564 ms/op\r\n[info] Iteration   2: 558.272 ?(99.9%) 16.455 ms/op\r\n[info] Iteration   3: 525.707 ?(99.9%) 19.731 ms/op\r\n[info] Iteration   4: 559.580 ?(99.9%) 29.885 ms/op\r\n[info] Iteration   5: 532.769 ?(99.9%) 20.721 ms/op\r\n[info] Iteration   6: 556.363 ?(99.9%) 8.802 ms/op\r\n[info] Iteration   7: 565.317 ?(99.9%) 15.784 ms/op\r\n[info] Iteration   8: 576.543 ?(99.9%) 9.204 ms/op\r\n[info] Iteration   9: 548.832 ?(99.9%) 24.991 ms/op\r\n[info] Iteration  10: 578.714 ?(99.9%) 13.820 ms/op\r\n[info] Result \"scalaz.zio.stacktracer.TracersBenchmark.akkaTracer1000Lambdas\":\r\n[info]   553.870 ?(99.9%) 27.057 ms/op [Average]\r\n[info]   (min, avg, max) = (525.707, 553.870, 578.714), stdev = 17.897\r\n[info]   CI (99.9%): [526.813, 580.927] (assumes normal distribution)\r\n[info] # JMH version: 1.21\r\n[info] # VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13\r\n[info] # VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/jre/bin/java\r\n[info] # VM options: <none>\r\n[info] # Warmup: 10 iterations, 1 s each\r\n[info] # Measurement: 10 iterations, 1 s each\r\n[info] # Timeout: 10 min per iteration\r\n[info] # Threads: 8 threads, will synchronize iterations\r\n[info] # Benchmark mode: Average time, time/op\r\n[info] # Benchmark: scalaz.zio.stacktracer.TracersBenchmark.asmTracer1000Lambdas\r\n[info] # Run progress: 66.67% complete, ETA 00:00:34\r\n[info] # Fork: 1 of 1\r\n[info] # Warmup Iteration   1: 392.895 ?(99.9%) 175.151 ms/op\r\n[info] # Warmup Iteration   2: 335.377 ?(99.9%) 53.985 ms/op\r\n[info] # Warmup Iteration   3: 673.830 ?(99.9%) 25.490 ms/op\r\n[info] # Warmup Iteration   4: 877.822 ?(99.9%) 194.560 ms/op\r\n[info] # Warmup Iteration   5: 329.584 ?(99.9%) 16.764 ms/op\r\n[info] # Warmup Iteration   6: 229.133 ?(99.9%) 10.911 ms/op\r\n[info] # Warmup Iteration   7: 249.190 ?(99.9%) 13.161 ms/op\r\n[info] # Warmup Iteration   8: 224.898 ?(99.9%) 55.644 ms/op\r\n[info] # Warmup Iteration   9: 279.752 ?(99.9%) 15.074 ms/op\r\n[info] # Warmup Iteration  10: 207.423 ?(99.9%) 5.639 ms/op\r\n[info] Iteration   1: 240.831 ?(99.9%) 12.544 ms/op\r\n[info] Iteration   2: 228.104 ?(99.9%) 13.935 ms/op\r\n[info] Iteration   3: 181.641 ?(99.9%) 4.350 ms/op\r\n[info] Iteration   4: 194.082 ?(99.9%) 14.451 ms/op\r\n[info] Iteration   5: 262.669 ?(99.9%) 13.056 ms/op\r\n[info] Iteration   6: 241.883 ?(99.9%) 9.852 ms/op\r\n[info] Iteration   7: 210.150 ?(99.9%) 3.828 ms/op\r\n[info] Iteration   8: 359.880 ?(99.9%) 33.290 ms/op\r\n[info] Iteration   9: 209.194 ?(99.9%) 5.922 ms/op\r\n[info] Iteration  10: 260.227 ?(99.9%) 9.506 ms/op\r\n[info] Result \"scalaz.zio.stacktracer.TracersBenchmark.asmTracer1000Lambdas\":\r\n[info]   238.866 ?(99.9%) 76.064 ms/op [Average]\r\n[info]   (min, avg, max) = (181.641, 238.866, 359.880), stdev = 50.312\r\n[info]   CI (99.9%): [162.802, 314.930] (assumes normal distribution)\r\n[info] # Run complete. Total time: 00:01:38\r\n[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on\r\n[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial\r\n[info] experiments, perform baseline and negative tests that provide experimental control, make sure\r\n[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.\r\n[info] Do not assume the numbers tell you what you want them to tell.\r\n[info] Benchmark                                    Mode  Cnt    Score    Error  Units\r\n[info] TracersBenchmark.akkaLineNumbers1000Lambdas  avgt   10  509.496 ? 17.791  ms/op\r\n[info] TracersBenchmark.akkaTracer1000Lambdas       avgt   10  553.870 ? 27.057  ms/op\r\n[info] TracersBenchmark.asmTracer1000Lambdas        avgt   10  238.866 ? 76.064  ms/op\r\n[success] Total time: 112 s, completed 22-May-2019 03:01:35\r\n```\r\nTracer from akka-typed is about ~2x slower, but has no dependencies.",
        "createdAt" : "2019-05-22T02:13:26Z",
        "updatedAt" : "2019-05-30T01:18:27Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c5bbbea1c9833689e7f728f96b420cad75711fc",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +37,41 @@ * class).\n */\nobject AkkaLineNumbers {\n\n  sealed trait Result"
  }
]