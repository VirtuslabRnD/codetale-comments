[
  {
    "id" : "56eab28d-0b4d-4698-af89-ee82cc79db9e",
    "prId" : 1949,
    "prUrl" : "https://github.com/akka/alpakka/pull/1949#pullrequestreview-296311450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34a54e47-c8ad-4843-a30b-bbf2f8dec21a",
        "parentId" : null,
        "authorId" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "body" : "I saw your note about using `Try` in the Java DSL. How come we even expose a `Try[Out]`? We could leave it up to the user to recover the stream.  Another option is to use `Either`, and then add a simple Alpakka implementation (and propose it upstream in Akka's `japi` package).  The only other Java alternatives I can think of are `Optional`, which loses information, or `japi.Pair` which seems like the wrong fit.",
        "createdAt" : "2019-10-02T13:50:35Z",
        "updatedAt" : "2019-10-02T13:55:13Z",
        "lastEditedBy" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "tags" : [
        ]
      },
      {
        "id" : "8c2778e2-1644-4e7f-a6d9-833c1b85ce05",
        "parentId" : "34a54e47-c8ad-4843-a30b-bbf2f8dec21a",
        "authorId" : "9500ec63-4ee5-4a4b-820c-121a3523fbda",
        "body" : "It is this new API that exposes the `Try`, so we might remove it before releasing. Offering a Java counterpart might be a solution.",
        "createdAt" : "2019-10-02T14:51:43Z",
        "updatedAt" : "2019-10-02T14:51:44Z",
        "lastEditedBy" : "9500ec63-4ee5-4a4b-820c-121a3523fbda",
        "tags" : [
        ]
      },
      {
        "id" : "2e2de27d-f08f-43b8-821e-3c4d33e74d8b",
        "parentId" : "34a54e47-c8ad-4843-a30b-bbf2f8dec21a",
        "authorId" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "body" : "The old API still had an output type of `akka.japi.Pair[Try[Out], State]`, which makes sense I guess since it was called the `tryFlow`.",
        "createdAt" : "2019-10-02T15:02:28Z",
        "updatedAt" : "2019-10-02T15:02:28Z",
        "lastEditedBy" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "tags" : [
        ]
      },
      {
        "id" : "8d53638b-71d7-43fe-8109-a743d9a94e4d",
        "parentId" : "34a54e47-c8ad-4843-a30b-bbf2f8dec21a",
        "authorId" : "9500ec63-4ee5-4a4b-820c-121a3523fbda",
        "body" : "Ah, that \"old API\" was recently added by @2m, it wasn't part of an Alpakka release.",
        "createdAt" : "2019-10-02T15:04:21Z",
        "updatedAt" : "2019-10-02T15:04:21Z",
        "lastEditedBy" : "9500ec63-4ee5-4a4b-820c-121a3523fbda",
        "tags" : [
        ]
      },
      {
        "id" : "775b97a0-3a0c-4621-8254-35629caaef37",
        "parentId" : "34a54e47-c8ad-4843-a30b-bbf2f8dec21a",
        "authorId" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "body" : "Oh, I see.  Ok.",
        "createdAt" : "2019-10-02T15:05:50Z",
        "updatedAt" : "2019-10-02T15:05:50Z",
        "lastEditedBy" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "tags" : [
        ]
      }
    ],
    "commit" : "31fd219811ef25f784ca3b6fd672a821b0da4c52",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +46,50 @@      operation: DynamoDbOp[In, Out],\n      parallelism: Int\n  ): FlowWithContext[In, Ctx, Try[Out], Ctx, NotUsed] =\n    scaladsl.DynamoDb.flowWithContext[In, Out, Ctx](parallelism)(client, operation).asJava\n"
  },
  {
    "id" : "9f6817e8-079d-4c15-ac91-5406cbd6831b",
    "prId" : 1896,
    "prUrl" : "https://github.com/akka/alpakka/pull/1896#pullrequestreview-277120115",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17f28df1-7ca8-4d9b-8d1b-5e7132a5c99f",
        "parentId" : null,
        "authorId" : "9500ec63-4ee5-4a4b-820c-121a3523fbda",
        "body" : "Add something along the lines \"Intended to be used with Akka retry flows which expect the Scala `Try` type\"",
        "createdAt" : "2019-08-20T12:14:15Z",
        "updatedAt" : "2019-08-22T12:54:42Z",
        "lastEditedBy" : "9500ec63-4ee5-4a4b-820c-121a3523fbda",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b20217d07da33fa090809f75264dca2e0a99739",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +33,37 @@\n  /**\n   * Create a Flow that emits a response for every request to DynamoDB.\n   * A successful response is wrapped in [scala.util.Success] and a failed\n   * response is wrapped in [scala.util.Failure]."
  }
]