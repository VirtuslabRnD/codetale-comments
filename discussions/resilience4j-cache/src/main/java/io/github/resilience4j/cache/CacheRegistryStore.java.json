[
  {
    "id" : "13bb4d0e-2de7-4ea5-abc4-277dfcc98b1d",
    "prId" : 1225,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/1225#pullrequestreview-517602565",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aba6afad-e416-422d-b006-9ff9a3644ac8",
        "parentId" : null,
        "authorId" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "body" : "I think we should throw a custom exception:\r\n\r\nInstead of wrapping it in a `RuntimeException` or `CacheException`, we could define a `CacheRegistryStoreException`.",
        "createdAt" : "2020-10-27T08:30:38Z",
        "updatedAt" : "2020-10-27T08:52:52Z",
        "lastEditedBy" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "tags" : [
        ]
      },
      {
        "id" : "aa0709d4-6d8d-4bcd-a901-655135828157",
        "parentId" : "aba6afad-e416-422d-b006-9ff9a3644ac8",
        "authorId" : "56764f71-fcbe-4bb7-8708-88cf401502a6",
        "body" : "Thanks for the review!\r\n\r\nI didn't create a new type to keep the behavior in sync with the in-memory store that throws underlying ConcurrentHashMap exception type: https://github.com/resilience4j/resilience4j/blob/3dc2eadb654514b5d503317dbf80a776a892931c/resilience4j-core/src/main/java/io/github/resilience4j/core/registry/InMemoryRegistryStore.java#L35\r\n\r\nDo you think it makes sense to create a `RegistryStoreException` that can be used by all store implementations?",
        "createdAt" : "2020-10-27T11:27:37Z",
        "updatedAt" : "2020-10-27T11:27:37Z",
        "lastEditedBy" : "56764f71-fcbe-4bb7-8708-88cf401502a6",
        "tags" : [
        ]
      },
      {
        "id" : "bb1bc182-e996-4c61-bed9-df79f49a7486",
        "parentId" : "aba6afad-e416-422d-b006-9ff9a3644ac8",
        "authorId" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "body" : "> * @throws RuntimeException or Error if the remappingFunction does so, in which case the mapping is unchanged\r\n\r\nYes, you are right. Then let's keep it as it is.",
        "createdAt" : "2020-10-27T11:32:33Z",
        "updatedAt" : "2020-10-27T11:32:48Z",
        "lastEditedBy" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "tags" : [
        ]
      }
    ],
    "commit" : "215af1f86683b5000cf0115da5102df4f618a90c",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@            return cacheStore.invoke(key, new AtomicComputeProcessor<>(), mappingFunction);\n        } catch (EntryProcessorException e) {\n            throw new RuntimeException(e.getCause());\n        }\n    }"
  }
]