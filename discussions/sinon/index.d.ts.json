[
  {
    "id" : "bf14527f-f082-42de-be1f-e1a857a7affc",
    "prId" : 13522,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/13522#pullrequestreview-14762707",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb8fa751-104a-4307-8a38-d418f9ba7fee",
        "parentId" : null,
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "How about `createStubInstance<T>(constructor: { prototype: T }): SinonStub & T;`?",
        "createdAt" : "2016-12-28T21:10:06Z",
        "updatedAt" : "2016-12-28T21:10:06Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "d567e329-2757-443c-bc07-b34b91de1662",
        "parentId" : "cb8fa751-104a-4307-8a38-d418f9ba7fee",
        "authorId" : "142caf8f-3ec3-451d-b2c0-cc3ca51a9869",
        "body" : "@andy-ms  this method returns instantiated constructor where each method of instance is `SinonStub` so `SinonStub & T` is not the right thing",
        "createdAt" : "2016-12-28T22:24:35Z",
        "updatedAt" : "2016-12-28T22:24:35Z",
        "lastEditedBy" : "142caf8f-3ec3-451d-b2c0-cc3ca51a9869",
        "tags" : [
        ]
      },
      {
        "id" : "6dd25a7f-ba3f-44f6-af4e-2740e288a6dd",
        "parentId" : "cb8fa751-104a-4307-8a38-d418f9ba7fee",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "How about [\"Mapped Types\"](https://www.typescriptlang.org/docs/handbook/advanced-types.html)?\r\n```ts\r\ncreateStubInstance<T>(constructor: { prototype: T }): { [P in keyof T]: SinonStub };\r\n```\r\nIf you do this you will need to add `// TypeScript Version: 2.1` as the last line of the header (line 5).",
        "createdAt" : "2016-12-28T22:34:39Z",
        "updatedAt" : "2016-12-28T22:34:39Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "12eac9d8-f74c-4ff9-99e2-4b70c5875ef8",
        "parentId" : "cb8fa751-104a-4307-8a38-d418f9ba7fee",
        "authorId" : "142caf8f-3ec3-451d-b2c0-cc3ca51a9869",
        "body" : "@andy-ms as far as I see, this would work, but how can we also target TS < 2.1?\r\nI assume a lot of projects are still on TS < 2.1 (my project too)",
        "createdAt" : "2016-12-29T00:23:53Z",
        "updatedAt" : "2016-12-29T00:23:53Z",
        "lastEditedBy" : "142caf8f-3ec3-451d-b2c0-cc3ca51a9869",
        "tags" : [
        ]
      },
      {
        "id" : "df800fd7-c5a4-4684-9a9f-8d427c568af4",
        "parentId" : "cb8fa751-104a-4307-8a38-d418f9ba7fee",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "Once a TS2.1 version has been published we don't have a way to go backwards and publish a new TS2.0 version. But NPM will continue to store the old versions, and we don't update the `latest` package (the one NPM installs by default) until a month after a compiler release. See Microsoft/types-publisher#229.",
        "createdAt" : "2016-12-29T01:21:20Z",
        "updatedAt" : "2016-12-29T01:21:20Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "4f7ad30f-cdd8-47df-9cdc-491a6274e2ff",
        "parentId" : "cb8fa751-104a-4307-8a38-d418f9ba7fee",
        "authorId" : "142caf8f-3ec3-451d-b2c0-cc3ca51a9869",
        "body" : "@andy-ms I realized that proposed typing will still be inaccurate, as `createStubInstance` makes only function properties to be of `SinonStub` type:\r\n```js\r\na = function() {}\r\na.prototype.b = 3;\r\na.prototype.c = function() {};\r\nstub = sinon.createStubInstance(a);\r\nconsole.log(typeof stub.c.getCall); // 'function', method of SinonStub\r\nconsole.log(typeof stub.b.getCall); // 'undefined'\r\nconsole.log(typeof stub.b); // 'number' - b is still number, not SinonStub\r\n```\r\nAs far as I see, this can't be achieved now and will only be achievable with mapped conditional types - [feature request](https://github.com/Microsoft/TypeScript/issues/12424),  [original suggestion](https://github.com/Microsoft/TypeScript/pull/12114#issuecomment-259776847)\r\n\r\nSo I'd say, let's leave it `any` for now and get back to it when it can be properly typed with mapped types.",
        "createdAt" : "2016-12-30T12:30:53Z",
        "updatedAt" : "2016-12-30T12:30:53Z",
        "lastEditedBy" : "142caf8f-3ec3-451d-b2c0-cc3ca51a9869",
        "tags" : [
        ]
      },
      {
        "id" : "eda7ea8a-7b69-46d9-88c3-8d7fcf36ca03",
        "parentId" : "cb8fa751-104a-4307-8a38-d418f9ba7fee",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "OK. :+1:",
        "createdAt" : "2016-12-30T14:34:52Z",
        "updatedAt" : "2016-12-30T14:34:52Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2c580104a798071355057e3525bc4edb53fecdd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +428,432 @@    // Utility overridables\n    interface SinonStatic {\n        createStubInstance(constructor: any): any;\n        format(obj: any): string;\n        log(message: string): void;"
  }
]