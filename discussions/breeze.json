[
  {
    "id" : "aa440c2b-57a9-43ee-a71b-d65f51cabe6f",
    "prId" : 6496,
    "prUrl" : "https://github.com/apache/airflow/pull/6496#pullrequestreview-311368702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea8807f6-b6a8-4663-b1c9-6f55e3f33876",
        "parentId" : null,
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "```diff\r\n+     echo\r\n      echo \"Only run airflow-testing image without dependent images\"\r\n```\r\nFor consistency. BTW. Do we need so many new lines? Maybe two at the beginning and end of the parse flags loop are enough",
        "createdAt" : "2019-11-04T16:23:06Z",
        "updatedAt" : "2019-11-06T16:24:35Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "bdac571c-4096-4647-97af-d030bfa2cfe6",
        "parentId" : "ea8807f6-b6a8-4663-b1c9-6f55e3f33876",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "It's just more readable this way. I like space.",
        "createdAt" : "2019-11-04T21:27:32Z",
        "updatedAt" : "2019-11-06T16:24:35Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "c3293088-2d8a-41f9-b37e-6f5e5f4669a4",
        "parentId" : "ea8807f6-b6a8-4663-b1c9-6f55e3f33876",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "But I will remove some.",
        "createdAt" : "2019-11-04T21:30:11Z",
        "updatedAt" : "2019-11-06T16:24:35Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b8ce07598ae885cfdcf833dedebbc04b32123f3",
    "line" : 193,
    "diffHunk" : "@@ -1,1 +508,512 @@    -N|--no-deps)\n      export AIRFLOW_CONTAINER_DEPS=\"false\"\n      echo \"Only run airflow-testing image without dependent images\"\n      echo\n      shift ;;"
  },
  {
    "id" : "3c79f6a4-2e44-488f-9c24-6842aaf5dbe2",
    "prId" : 6496,
    "prUrl" : "https://github.com/apache/airflow/pull/6496#pullrequestreview-311368702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0e7e4d5-f60c-4cd7-b30d-9d90b1f50bf9",
        "parentId" : null,
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "Thanks for that. This will probably fix my bash history. üò∏ ",
        "createdAt" : "2019-11-04T16:25:36Z",
        "updatedAt" : "2019-11-06T16:24:35Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "4e2918c2-24ff-451a-9ced-4ddc5f0c8f04",
        "parentId" : "c0e7e4d5-f60c-4cd7-b30d-9d90b1f50bf9",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "YEAH.",
        "createdAt" : "2019-11-04T21:34:11Z",
        "updatedAt" : "2019-11-06T16:24:35Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b8ce07598ae885cfdcf833dedebbc04b32123f3",
    "line" : 339,
    "diffHunk" : "@@ -1,1 +762,766 @@# .bash_history is preserved and you can modify .bash_aliases and .inputrc\n# according to your liking\nif [[ -d \"${MY_DIR}/.bash_history\" ]]; then\n    rm -rf \"${MY_DIR}/.bash_history\"\nfi"
  },
  {
    "id" : "46ba77ac-eacc-4a8d-995d-73f40e1505fb",
    "prId" : 7390,
    "prUrl" : "https://github.com/apache/airflow/pull/7390#pullrequestreview-355636998",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06886f0e-f6d5-4dda-a35c-fc7cbe46e6c7",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "There are many more Linuxes than Debian ;)",
        "createdAt" : "2020-02-09T21:32:54Z",
        "updatedAt" : "2020-02-09T21:33:46Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "132c1a6f-d779-4a8e-9c00-e6b4dbb20ed2",
        "parentId" : "06886f0e-f6d5-4dda-a35c-fc7cbe46e6c7",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Yep. but this is Darwin :) =-> MacOS",
        "createdAt" : "2020-02-09T22:01:04Z",
        "updatedAt" : "2020-02-09T22:01:04Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d4235ccbbb30bcdcb47d3dbb233dd15f4b32c6f",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +904,908 @@        if [[ ${SYSTEM} == \"Darwin\" ]]; then\n            echo \"  brew install sqlite mysql postgresql\"\n        else\n            echo \"  sudo apt-get install python3-dev python-dev openssl sqlite default-libmysqlclient-dev libmysqld-dev postgresql --confirm\"\n        fi"
  },
  {
    "id" : "00847f32-4f2f-4f70-a946-75226bf914b3",
    "prId" : 7390,
    "prUrl" : "https://github.com/apache/airflow/pull/7390#pullrequestreview-355636932",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03e4c03c-ff92-4147-b802-4f08346eec18",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Why python-dev and python3-dev?",
        "createdAt" : "2020-02-09T21:33:25Z",
        "updatedAt" : "2020-02-09T21:33:46Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "12036a57-d700-4296-88a8-edda01421cc2",
        "parentId" : "03e4c03c-ff92-4147-b802-4f08346eec18",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Just in case. I want to backport it to 1.10 so I want it to work there as well. There are still some distros that have python2 as default and it will be like that for a while so it's better to leave it like that just in case.",
        "createdAt" : "2020-02-09T22:00:09Z",
        "updatedAt" : "2020-02-09T22:00:09Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d4235ccbbb30bcdcb47d3dbb233dd15f4b32c6f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +905,909 @@            echo \"  brew install sqlite mysql postgresql\"\n        else\n            echo \"  sudo apt-get install python3-dev python-dev openssl sqlite default-libmysqlclient-dev libmysqld-dev postgresql --confirm\"\n        fi\n        echo"
  },
  {
    "id" : "17658f62-12df-4516-9892-997e74485ac1",
    "prId" : 7433,
    "prUrl" : "https://github.com/apache/airflow/pull/7433#pullrequestreview-359856385",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd6b0255-c439-46fd-a125-b45a4dd6a8d7",
        "parentId" : null,
        "authorId" : "b8b84983-5876-4ccf-886c-2449d94ca22f",
        "body" : "@potiuk did we ever determine what was causing the issues with pyenv virtualenvs?",
        "createdAt" : "2020-02-17T15:35:38Z",
        "updatedAt" : "2020-02-19T00:17:51Z",
        "lastEditedBy" : "b8b84983-5876-4ccf-886c-2449d94ca22f",
        "tags" : [
        ]
      },
      {
        "id" : "9e0660e2-8503-4e80-99ce-e205b26b9ce7",
        "parentId" : "cd6b0255-c439-46fd-a125-b45a4dd6a8d7",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Ah yeah. Will take a close look at this. I tested it on Linux and made sone fixes to the initialize virtualenv but I will test it now with anaconda/pyenv/venv and any other *env I can put my hands on. I will do it in another PR though :)",
        "createdAt" : "2020-02-17T16:29:16Z",
        "updatedAt" : "2020-02-19T00:17:51Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "c892ed2f6c807146150864b20fb6fd818290b1da",
    "line" : 197,
    "diffHunk" : "@@ -1,1 +128,132 @@   # Check if we are in virtualenv\n   set +e\n   echo -e \"import sys\\nif not hasattr(sys,'base_prefix'):\\n  sys.exit(1)\" | \"python${PYTHON_VERSION}\"\n   RES=$?\n   set -e"
  },
  {
    "id" : "ecf24b9c-a9f1-4a97-8b17-5387a7ead6fc",
    "prId" : 8261,
    "prUrl" : "https://github.com/apache/airflow/pull/8261#pullrequestreview-391876003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a0f86e7-510d-42a3-8b7d-fab1ba53de8a",
        "parentId" : null,
        "authorId" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "body" : "üëç for separate function",
        "createdAt" : "2020-04-12T16:18:30Z",
        "updatedAt" : "2020-04-12T17:00:47Z",
        "lastEditedBy" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "tags" : [
        ]
      },
      {
        "id" : "e798f9d1-6c4d-4b72-869e-74e7d078fc79",
        "parentId" : "4a0f86e7-510d-42a3-8b7d-fab1ba53de8a",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Yep. Much nicer.",
        "createdAt" : "2020-04-12T16:53:28Z",
        "updatedAt" : "2020-04-12T17:00:47Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "41349c68d4e5a66ef87152d44a8ce2b2c2c5c594",
    "line" : 453,
    "diffHunk" : "@@ -1,1 +1261,1265 @@}\n\nfunction flag_airflow_variants() {\n      echo \"\n-p, --python <PYTHON_MAJOR_MINOR_VERSION>"
  },
  {
    "id" : "435f1b56-4a72-41ca-9114-19ec56a7ec11",
    "prId" : 8898,
    "prUrl" : "https://github.com/apache/airflow/pull/8898#pullrequestreview-414368360",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "946fa149-e6c2-4f9e-b4db-9bbde10d10f0",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "We need to change the version.py file before we upload it to PyPI to include rcX.\r\n\r\nDo we already do that somewhere ?",
        "createdAt" : "2020-05-19T10:10:11Z",
        "updatedAt" : "2020-05-19T11:15:37Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "140b91ac-c69a-4b13-9fe4-0da8ae57371e",
        "parentId" : "946fa149-e6c2-4f9e-b4db-9bbde10d10f0",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "We don't have to. Let me explain.\r\n\r\nWhen we use the `--version-suffix-for-svn rc1` we generate packages without any suffix and we rename them to contain the rc1 in the name. This is so that when we release we can rename the packages back.\r\n\r\nHowever when you use the `--version-suffix-for-pypi`, the suffix is added dynamically during package generation - it's appended to the version of package. \r\n\r\nThe version is not read from version.py, it is read from the most recent PROVIDERS_CHANGES_YYYY_MM_DD.md  -> YYYY.[M]M.[D]D \r\n\r\nTheoretically, it can be a different version for each package being prepared (depending which PROVIDERS_CHANGES_YYYY_MM_DD.md is most recent (by the date). \r\n\r\nIt works like this:\r\n\r\n1)  Prepare release notes\r\n```\r\n./breeze prepare-backport-readme -- 2020.05.20 PACKAGE1 PACKAGE2\r\n```\r\n\r\nPrepares the README.md and PROVIDERS_CHANGES_2020.05.20.md for the packages specified.\r\n\r\nYou commit that and only tag the release after it has been merged into master.\r\n\r\n2) Then from that tagged release.  when you want to generate those packages you run:\r\n\r\n```\r\n./breeze prepare-backport-packages --version-suffix-for-pypi rc1 -- PACKAGE1 PACKAGE2\r\n```\r\nand the packages are generated with 2020.5.20rc1 version. Under the hood `setup_backport_packages.py` is run with --version-suffix rc1 flag and it will simply append the suffix to the  package version. There is no need to modify any sources temporarily, the suffix is added dynamically via result o this method call:\r\n\r\n```\r\ndef get_package_release_version(provider_package_id: str, version_suffix: str = \"\") -> str:\r\n    \"\"\"\r\n    Returns release version including optional suffix.\r\n\r\n    :param provider_package_id: package id\r\n    :param version_suffix: optional suffix (rc1, rc2 etc).\r\n    :return:\r\n    \"\"\"\r\n    return get_latest_release(\r\n        get_package_path(provider_package_id=provider_package_id)).release_version + version_suffix\r\n```\r\n\r\n3) Later when you want to release final packages for PyPI you run (from the same tag/commit) :\r\n\r\n```\r\n./breeze prepare-backport-packages -- PACKAGE1 PACKAGE2\r\n```\r\nAnd no version suffix is added in this case.\r\n\r\n4) For SVN packages you simply rename the packages already in SVN. They do not contain the rc1 suffix internally - only in the name.\r\n\r\nCurrently, I am only using it to generate all packages so there is no risk of mistakes but later I want to add additional switch `prepare-backport-packages --package-version 2020.05.20`. This will verify if the packages being released have all the 'CHANGES' prepared (via `prepare-backport-readme`)  and that they are the latest ''CHANGES' and that this version has not already been released (checking for tag version in the git log and possibly pypi). But I will only be able to test it after we release officially the first wave of packages so I wanted to implement it later. This will protect against the accidental generation of the same package version as already released. \r\n\r\nEventually, I want to get rid of the manual operations and have all the steps automated within breeze so that you do not have to copy&paste commands from BACKPORT_PACKAGES.md, but this will require at least few iterations of releasing packages to get it consistently right.\r\n\r\nI want the release process to take a few minutes and have it fully repeatable by anyone without setting up anything else but the local key and pypirc configuration. I want to be able to release quite a bit more often in the future - especially if we go AIP-8 route and split Airflow 2.0 into separate \"core\" and \"providers\" packages from day one. I treat backport packages as a testing ground for that approach to see if it is workable, so that I can propose it.\r\n\r\nWe can likely adopt it later to release airflow in the same way - without having to modify and discard version.py and add breeze command to do the same - but I planned to do it later.\r\n\r\n",
        "createdAt" : "2020-05-19T11:42:07Z",
        "updatedAt" : "2020-05-19T11:43:05Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "7033ad07-cba8-4efa-b2ef-571c8312f963",
        "parentId" : "946fa149-e6c2-4f9e-b4db-9bbde10d10f0",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "I think historically this was done so that even if someone installed the rc packages when they do `airflow version` it shows `rc` string in it. However maybe for backport packages it might not matter, thoughts @ashb ?",
        "createdAt" : "2020-05-19T11:45:46Z",
        "updatedAt" : "2020-05-19T11:45:46Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "fe915bae-0162-4cfb-a2be-6f53f5886ffc",
        "parentId" : "946fa149-e6c2-4f9e-b4db-9bbde10d10f0",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "> I think historically this was done so that even if someone installed the rc packages when they do `airflow version` it shows `rc` string in it. However maybe for backport packages it might not matter, thoughts @ashb ?\r\n\r\nYeah, since Airflow has `airflow.__version__` we want that to be right for RC releases, but as you say, the backport providers don't have this attribute anywhere (and it's probably not needed to add one) so this is a good approach for providers.",
        "createdAt" : "2020-05-19T11:50:32Z",
        "updatedAt" : "2020-05-19T11:50:32Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "0411f928-6692-42c4-bbf1-b0009f5a9f9a",
        "parentId" : "946fa149-e6c2-4f9e-b4db-9bbde10d10f0",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Ah I see. There is no 'airflow version\" command in those packages. And we can easily do it for airflow in the future - instead of reading from version.py we could generate an embedded version.txt file generated on the fly during package building and read the version from there.",
        "createdAt" : "2020-05-19T11:53:55Z",
        "updatedAt" : "2020-05-19T11:55:01Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5b4ccc8c019564d8cc40cb626f592ecc7c95755",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +1650,1654 @@-S, --version-suffix-for-pypi\n        Adds optional suffix to the version in the generated backport package. It can be used\n        to generate rc1/rc2 ... versions of the packages to be uploaded to PyPI.\n\n-N, --version-suffix-for-svn"
  },
  {
    "id" : "5fa05209-2a0f-422d-b15b-9d191caa1401",
    "prId" : 9685,
    "prUrl" : "https://github.com/apache/airflow/pull/9685#pullrequestreview-442918660",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22f06ca1-1e32-41e1-a1e8-3255a1c9bead",
        "parentId" : null,
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "Not sure if it's a good practice to modify `.zshrc` file. Most autocompletes I met suggest user do\r\n```\r\necho \"source <(xyz completion zsh)\" >> ~/.zshrc\r\n```\r\nIn this way I'm fully aware of what's going on. Moreover, I personally keep my `.zshrc` in order so I would probably prefer to add this manually in \"Autocompletes\" section üòâ \r\n\r\n",
        "createdAt" : "2020-07-06T09:15:46Z",
        "updatedAt" : "2020-07-06T09:21:53Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "fed24053-249d-41b3-b90f-ca5c8f0c71a5",
        "parentId" : "22f06ca1-1e32-41e1-a1e8-3255a1c9bead",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "I am using bash completion script to keep both bash and zsh. Unfortunately it's a little bit involved to have bash completion scripts to work for zsh. It's also a little bit different than when installing a binary for a tool as we are using dynamically changing sources and dynamically changing completions. \r\n\r\nIn our case the \"breeze-complete\" evolves continuously and new options are being added in the sources. That's why I created  .bash_completion.d and have symbolic link to the breeze-complete so that you do not have to reinstall it every time new options are added. \r\n\r\nThat's why rather than `echo \"source <(xyz completion zsh)\" >> ~/.zshrc` I do \"./breeze setup-autocomplete' which does all of that (it's more than just appending entries to .zshrc). Also I actually display warning and ask for confirmation before it happens:\r\n\r\n\"${AIRFLOW_SOURCES}/confirm\" \"This will create ~/.bash_completion.d/ directory and modify ~/.*rc files\"\r\n\r\n\r\n",
        "createdAt" : "2020-07-06T09:28:55Z",
        "updatedAt" : "2020-07-06T09:29:53Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "cb6207a7-a282-433b-ba67-2c582a327bd8",
        "parentId" : "22f06ca1-1e32-41e1-a1e8-3255a1c9bead",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "And actually in this version the \"Breeze\" autocomplete is clearly marked as such with START/END comment - precisely for the reason that you can manually move it wherever you think it's best :).",
        "createdAt" : "2020-07-06T09:30:47Z",
        "updatedAt" : "2020-07-06T09:30:47Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e225df35d64d6e991c7c6a577abd7eded9536278",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +268,272 @@        echo\n        echo \"The ${HOME}/.zshrc has been modified\"\n        echo\n    else\n        echo"
  },
  {
    "id" : "777b5891-b625-4f9e-b360-0598baf21290",
    "prId" : 10708,
    "prUrl" : "https://github.com/apache/airflow/pull/10708#pullrequestreview-481840944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d566794-2f2d-4f16-8505-54fd19f5dddd",
        "parentId" : null,
        "authorId" : "503f5940-5247-48c7-b205-b52538648514",
        "body" : "Isn't it better to use a [capitalized global variable](https://google.github.io/styleguide/shellguide.html#constants-and-environment-variable-names) name here?",
        "createdAt" : "2020-09-03T13:08:06Z",
        "updatedAt" : "2020-09-14T07:12:35Z",
        "lastEditedBy" : "503f5940-5247-48c7-b205-b52538648514",
        "tags" : [
        ]
      },
      {
        "id" : "ced2ce82-4567-4dc9-8487-485744a475e5",
        "parentId" : "0d566794-2f2d-4f16-8505-54fd19f5dddd",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Well. I thought about it - Technically it cannot be made constant (i.e. we cannot make these read-only). We can not do it because:\r\n\r\n*  we need to source 'breeze-complete' before we enter Breeze so that the 'auto-complete' works - this happens in the .bashrc or .zshrc file\r\n* we might want to source the same `breeeze-complete` potentially several times - especially when you develop it or switch between different airflow versions (1.10 -> master). \r\n* most important - in Breeze I am re-sourcing ./breeze-complete always at the beginning because I want to make sure that I am using the values from the same directory as the `breeze` script. This way you can validate if for example python versions are as expected in the version of Breeze script that you are running currently (not the one that was sourced in .bashrc, .zshrc). Those can be different if you have several repositories with Breeze (as I have - with 1.10 and 2.0 for example, but I keep several worktrees of master as well)\r\n\r\nSo those values cannot be made `constant`. They might change. They also do not need to be exported to other scripts - because we only use them in the `breeze` script for validation and help messages - so no need to export them.\r\n\r\nSince they are neither constant, nor exported - they are officially 'variables' and should be lower-case IMHO.\r\n",
        "createdAt" : "2020-09-03T13:20:24Z",
        "updatedAt" : "2020-09-14T07:12:35Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "e524db78-47bf-4008-8b50-e9dd3630e493",
        "parentId" : "0d566794-2f2d-4f16-8505-54fd19f5dddd",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "All constants should be made 'readonly` according to the guide:\r\n\r\n> Some things become constant at their first setting (for example, via getopts). Thus, it‚Äôs OK to set a constant in getopts or based on a condition, but it should be made readonly immediately afterwards.",
        "createdAt" : "2020-09-03T13:23:56Z",
        "updatedAt" : "2020-09-14T07:12:35Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "7f83bf68-e593-4c85-a791-45b2d6a88d88",
        "parentId" : "0d566794-2f2d-4f16-8505-54fd19f5dddd",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "But I am happy to discuss it :). It seems a bit borderline, as they are variables, but should not change too much , so using CAPITALISED name might be more \"natural\". However when I change them all to start with _breeze - indicated an internal name as well, it seems quite OK to keep those as variables. ",
        "createdAt" : "2020-09-03T13:28:53Z",
        "updatedAt" : "2020-09-14T07:12:35Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "79fbf326-913e-4ac3-9d19-d39f664378ff",
        "parentId" : "0d566794-2f2d-4f16-8505-54fd19f5dddd",
        "authorId" : "503f5940-5247-48c7-b205-b52538648514",
        "body" : "Great, this will help me with the cleaning of other scripts, thanks. ",
        "createdAt" : "2020-09-03T13:31:16Z",
        "updatedAt" : "2020-09-14T07:12:35Z",
        "lastEditedBy" : "503f5940-5247-48c7-b205-b52538648514",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8aa92bdd55e8f4a596c12480a53a1e2043b5d52",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +670,674 @@#\n# Used global variables:\n#    _breeze_all_commands\n#\n# Outputs:"
  }
]