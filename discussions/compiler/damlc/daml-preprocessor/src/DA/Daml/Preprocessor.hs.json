[
  {
    "id" : "67834331-8fa2-4f43-9c4a-cb8529ab1456",
    "prId" : 8006,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78a3bb64-947e-4d31-8c50-f9288ccfd438",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Is this check just for efficiency or do we depend on the fact that we never invoke `makeLocalValBinds` for <= 1 binds?",
        "createdAt" : "2020-11-18T15:46:31Z",
        "updatedAt" : "2020-11-18T18:48:17Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "15daeb48-f73d-49b8-8644-69f317d49f59",
        "parentId" : "78a3bb64-947e-4d31-8c50-f9288ccfd438",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Yes, just for efficiency. I think everything here works fine when `length binds == 1`, but we shouldn't be rewriting if we can avoid it.",
        "createdAt" : "2020-11-18T16:06:53Z",
        "updatedAt" : "2020-11-18T18:48:17Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8a4c7fef1beeffc1f08e2528727ecf76a36a19c",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +417,421 @@            | GHC.ValBinds GHC.NoExt bindBag sigs <- valBinds\n            , binds <- GHC.bagToList bindBag\n            , length binds > 1\n            -> makeLocalValBinds loc binds sigs\n        binds -> [binds]"
  },
  {
    "id" : "6e0f0009-2555-4e8f-9d53-4f0f992e8a85",
    "prId" : 8006,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5d1502f-dd76-4960-b9c5-8040e201d686",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Is this an overapproximation because we potentially include constructor names and similar things?",
        "createdAt" : "2020-11-18T15:48:57Z",
        "updatedAt" : "2020-11-18T18:48:17Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "079074cb-de97-41b8-a652-b4b4fa55282e",
        "parentId" : "f5d1502f-dd76-4960-b9c5-8040e201d686",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Yes!",
        "createdAt" : "2020-11-18T16:03:17Z",
        "updatedAt" : "2020-11-18T18:48:17Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8a4c7fef1beeffc1f08e2528727ecf76a36a19c",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +443,447 @@    bindNames = \\case\n        GHC.FunBind { fun_id } -> [ GHC.unLoc fun_id ]\n        GHC.PatBind { pat_lhs } -> Uniplate.universeBi pat_lhs -- safe overapproximation\n        GHC.VarBind { var_id } -> [ var_id ]\n        GHC.PatSynBind _ GHC.PSB { psb_id } -> [ GHC.unLoc psb_id ]"
  },
  {
    "id" : "0b841220-2dc7-4beb-9a5f-3c6083e7c4dc",
    "prId" : 8006,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b680653-e686-41f8-8752-eb00e2854cdc",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "```suggestion\r\n    -- Given a binding and a set of signatures, split it into the signatures relevant to this binding and other signatures.\r\n    peelRelevantSigs :: GHC.LHsBindLR GHC.GhcPs GHC.GhcPs\r\n```\r\n\r\ntook me a bit to figure out what this does.",
        "createdAt" : "2020-11-18T15:53:28Z",
        "updatedAt" : "2020-11-18T18:48:17Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5fc5416a-fb28-47e8-94a8-174bd0109edc",
        "parentId" : "1b680653-e686-41f8-8752-eb00e2854cdc",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Nice, thank you!",
        "createdAt" : "2020-11-18T16:07:22Z",
        "updatedAt" : "2020-11-18T18:48:17Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8a4c7fef1beeffc1f08e2528727ecf76a36a19c",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +451,455 @@\n    -- Given a binding and a set of signatures, split it into the signatures relevant to this binding and other signatures.\n    peelRelevantSigs :: GHC.LHsBindLR GHC.GhcPs GHC.GhcPs\n        -> [GHC.LSig GHC.GhcPs]\n        -> ([GHC.LSig GHC.GhcPs], [GHC.LSig GHC.GhcPs])"
  },
  {
    "id" : "0ae9011c-45d9-40b4-a29b-57f428467c5b",
    "prId" : 8006,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e444aff7-3eb3-40ac-ba45-b360ddd1736c",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Isn't this dropping signatures without bindings on the floor? \"Unbound\" signatures happen to me quite regularly because I have a typo in a name somewhere. I would suggest putting all remaining signatures in a final let binding such that we get GHC's errors for them.",
        "createdAt" : "2020-11-18T16:46:53Z",
        "updatedAt" : "2020-11-18T18:48:17Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "ea10bdef-cd98-4630-a34e-21c92ff47e22",
        "parentId" : "e444aff7-3eb3-40ac-ba45-b360ddd1736c",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Good point. I'll add a test as well.",
        "createdAt" : "2020-11-18T18:28:13Z",
        "updatedAt" : "2020-11-18T18:48:17Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "199d6fa6-ebd2-4a88-9076-dd1c25822df3",
        "parentId" : "e444aff7-3eb3-40ac-ba45-b360ddd1736c",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm confused now. What happens in the `makeLocalValBinds _ [] (sig1:sigs)` case to `sig1`? The test indicates that `sig1` gets preserved but I can't find the piece of code responsible for preserving it.",
        "createdAt" : "2020-11-19T08:12:18Z",
        "updatedAt" : "2020-11-19T08:12:18Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "9c1ca9c8-bbd5-45c2-880e-77745f638b76",
        "parentId" : "e444aff7-3eb3-40ac-ba45-b360ddd1736c",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "There's no `makeLocalValBinds _ [] _` case ... actually it could be removed since it never gets invoked.",
        "createdAt" : "2020-11-19T10:20:05Z",
        "updatedAt" : "2020-11-19T10:20:05Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "36fb2024-5e72-43be-96e1-c43422cda4f3",
        "parentId" : "e444aff7-3eb3-40ac-ba45-b360ddd1736c",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "The case you're looking for is right below on line 428 (-: ",
        "createdAt" : "2020-11-19T10:22:20Z",
        "updatedAt" : "2020-11-19T10:22:20Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "7d22f9b0-741f-48f4-b7ad-e557d3f5181f",
        "parentId" : "e444aff7-3eb3-40ac-ba45-b360ddd1736c",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "I opened a PR to make the non-emptiness of `binds` explicit: https://github.com/digital-asset/daml/pull/8013",
        "createdAt" : "2020-11-19T10:53:27Z",
        "updatedAt" : "2020-11-19T10:53:27Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "ed64f90d-63df-4766-8cf3-122ff74b0ddf",
        "parentId" : "e444aff7-3eb3-40ac-ba45-b360ddd1736c",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Strange, somehow GitHub did not show me the third PR, which added line 428. Now it does and it all makes sense. The use of non-empty lists makes it clearer nevertheless. Thank you.",
        "createdAt" : "2020-11-19T12:45:26Z",
        "updatedAt" : "2020-11-19T12:45:27Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8a4c7fef1beeffc1f08e2528727ecf76a36a19c",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +425,429 @@        -> [GHC.LSig GHC.GhcPs]\n        -> [GHC.LHsLocalBinds GHC.GhcPs]\n    makeLocalValBinds _ [] _ = []\n    makeLocalValBinds loc [bind] sigs = [ makeLocalValBind loc bind sigs ]\n    makeLocalValBinds loc (bind1 : bindRest) sigs ="
  },
  {
    "id" : "c5f3fa69-f36a-40e2-8425-93bacef405f9",
    "prId" : 7921,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7921",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c955c2e-74fc-4929-bafb-92e546c51031",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We might need to be a bit more aggressive here: we can import `Symbol` unqualified via `DA.Record` as well. ðŸ˜ž",
        "createdAt" : "2020-11-10T12:35:53Z",
        "updatedAt" : "2020-11-10T17:49:29Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "fe91bdf1-d1ed-4d5d-b8f7-5e2b83d2721c",
        "parentId" : "9c955c2e-74fc-4929-bafb-92e546c51031",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Ah, I can add the `Unqual` case here as well!",
        "createdAt" : "2020-11-10T15:22:49Z",
        "updatedAt" : "2020-11-10T17:49:29Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f71bb6100bfcbc0e0cacffdb7fb083342277d917",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +328,332 @@        GHC.Unqual (GHC.occNameString -> \"Symbol\") ->\n            [(loc, symbolKindMsg)]\n        GHC.Qual (GHC.moduleNameString -> \"GHC.Types\") (GHC.occNameString -> \"Symbol\") ->\n            [(loc, ghcTypesSymbolMsg)]\n        _ -> []"
  },
  {
    "id" : "97c5e849-7279-4fd8-b026-6489e9dfbf7b",
    "prId" : 5266,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5266",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43c09724-1563-48e6-99bf-81f60ab678e9",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Isn't that pretty much the only solution now?",
        "createdAt" : "2020-03-30T10:15:00Z",
        "updatedAt" : "2020-03-30T10:17:08Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "1f5c10cc-1348-4349-bcd2-e10f0256f973",
        "parentId" : "43c09724-1563-48e6-99bf-81f60ab678e9",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "No you can also change the type name, turn it into an enum in some cases, â€¦",
        "createdAt" : "2020-03-30T10:20:53Z",
        "updatedAt" : "2020-03-30T10:20:53Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "b38f0ac6aeb03673f81f602bc8a140d812da589b",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +143,147 @@        [ \"Record type\", tyNameStr, \"has constructor\", conNameStr\n        , \"with different name.\"\n        , \"Possible solution: Change the constructor name to\", tyNameStr ]\n\ncheckDataTypes :: GHC.ParsedSource -> [(GHC.SrcSpan, String)]"
  },
  {
    "id" : "c5069d4a-2a76-4b3e-afb6-a3a7d4995542",
    "prId" : 4892,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4892",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c76515bf-1f13-477c-a3a7-e3c73b1ae0f6",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Since there's no pattern matching going on here, I'd suggest to use `let` bindings.\r\n```suggestion\r\n        , let tyNameStr = GHC.occNameString (GHC.rdrNameOcc tyName)\r\n        , let conNameStr = GHC.occNameString (GHC.rdrNameOcc conName)\r\n```",
        "createdAt" : "2020-03-09T11:13:19Z",
        "updatedAt" : "2020-03-09T11:13:50Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "04e5a895-bedd-496e-b427-9c4f1214ba76",
        "parentId" : "c76515bf-1f13-477c-a3a7-e3c73b1ae0f6",
        "authorId" : null,
        "body" : "Changed it in the other PR.",
        "createdAt" : "2020-03-09T13:50:36Z",
        "updatedAt" : "2020-03-09T13:50:36Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "16db994d057f16c87fa9e0043ec09253ca740aeb",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +133,137 @@        , [GHC.L _ conName] <- GHC.getConNames (GHC.unLoc con)\n        , tyNameStr <- GHC.occNameString (GHC.rdrNameOcc tyName)\n        , conNameStr <- GHC.occNameString (GHC.rdrNameOcc conName)\n        , tyNameStr /= conNameStr\n        = Just (ss, message tyNameStr conNameStr)"
  },
  {
    "id" : "9a56bbbd-475a-40ed-8c2d-47c751a70872",
    "prId" : 4030,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4030",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75ea6e9f-d2f0-43fb-b61c-5c1c6911fbf7",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "To add some context this is because the template desugaring from https://github.com/digital-asset/ghc/pull/47 uses `primitive`.",
        "createdAt" : "2020-01-14T09:13:00Z",
        "updatedAt" : "2020-01-15T14:32:49Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a6d332937a2569a52ae38499c6fe1022c9fe04c",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +94,98 @@        onModule y = y {\n          GHC.hsmodImports =\n            newImport True \"GHC.Types\" :\n            newImport True \"DA.Internal.Desugar\" :\n            newImport False \"DA.Internal.RebindableSyntax\" : GHC.hsmodImports y"
  },
  {
    "id" : "0eb7466d-79dc-4468-be24-6da81aa318a6",
    "prId" : 3345,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3345",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "449f1f06-c9ab-4a63-852c-0f3d32850763",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We happily accept `data Foo a = Bar | Baz` and turn it into a variant type. However, we don't accept `data Foo a = Bar`. We should fix this inconsistency. I consider the former counterintuitive and would be ok to ban it. To be more precise, I would ban all `data T a_1 ... a_m = C_1 | ... | C_n` for `m >=1` and `n >= 1`. Thoughts, @associahedron @bame-da @cocreature?",
        "createdAt" : "2019-11-06T19:09:15Z",
        "updatedAt" : "2019-11-06T19:09:15Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "e832011b-a6e1-40ac-a081-41cfbd112949",
        "parentId" : "449f1f06-c9ab-4a63-852c-0f3d32850763",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Once we've decided on this and implemented it, we also need to adjust https://github.com/digital-asset/daml/blob/master/docs/source/app-dev/daml-lf-translation.rst#banned-declarations. (I'm happy to do that myself.)",
        "createdAt" : "2019-11-06T19:10:51Z",
        "updatedAt" : "2019-11-06T19:10:57Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "58ddef8c-5660-4a6a-af84-f64451624ca9",
        "parentId" : "449f1f06-c9ab-4a63-852c-0f3d32850763",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Iâ€™d rather lift the restriction in LF so we can have `data Foo a = Bar` desugar to an enum. I donâ€™t see why enums canâ€™t have type parameters.",
        "createdAt" : "2019-11-06T19:12:23Z",
        "updatedAt" : "2019-11-06T19:14:26Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "ebfbff4f-d705-4ba6-89e5-ced192ec4fd2",
        "parentId" : "449f1f06-c9ab-4a63-852c-0f3d32850763",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "The problem is--as always--codegen for **Java**: you cannot have `enum Foo<T> { Bar, Baz }`.",
        "createdAt" : "2019-11-06T19:20:06Z",
        "updatedAt" : "2019-11-06T19:20:06Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "bdf360a7-faf7-439f-b50c-0d2c10272c15",
        "parentId" : "449f1f06-c9ab-4a63-852c-0f3d32850763",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : ":cry: Is there anything stopping us from desugaring `data Foo a = Bar` as a variant? I find phantom type parameters to be quite useful in general so Iâ€™d rather not restrict their usage.",
        "createdAt" : "2019-11-06T19:21:49Z",
        "updatedAt" : "2019-11-06T19:21:49Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "ffc2283e-a828-458e-a1dc-8e832aca0350",
        "parentId" : "449f1f06-c9ab-4a63-852c-0f3d32850763",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I find translating `data Foo = Bar` into an enum but `data Foo a = Bar` into a variant quite confusing. If you really want the variant with the phantom type parameter, you can always do `data Foo a = Bar ()`. We should probably stick that into the error message.",
        "createdAt" : "2019-11-06T19:36:48Z",
        "updatedAt" : "2019-11-06T19:36:58Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "b87eaf46-1dd3-45b6-a05b-ec0b25e61cd3",
        "parentId" : "449f1f06-c9ab-4a63-852c-0f3d32850763",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Fair point, I guess in that case Iâ€™m fine with forbidding it but we should probably first turn it into a warning for a couple of releases.",
        "createdAt" : "2019-11-06T19:38:56Z",
        "updatedAt" : "2019-11-06T19:38:56Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "1b206d3e-904a-49e4-ba9a-e592d6bfd8f9",
        "parentId" : "449f1f06-c9ab-4a63-852c-0f3d32850763",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I agree with going through the deprecation warning cycle. Ideally, we could capture data on how many users actually hit this warning via our telemetry mechanism. @rohanjr do you have an idea how to do this?",
        "createdAt" : "2019-11-06T20:04:57Z",
        "updatedAt" : "2019-11-06T20:04:57Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "e4349b0e-e530-48c0-8f0e-2e25edfca92c",
        "parentId" : "449f1f06-c9ab-4a63-852c-0f3d32850763",
        "authorId" : null,
        "body" : "The error message already says `Ambiguous data type declaration. Enums cannot have type arguments. Write data Foo a = Bar {} for a record or data Foo a = Bar () for a variant.`",
        "createdAt" : "2019-11-07T09:52:14Z",
        "updatedAt" : "2019-11-07T09:52:14Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "97b23303-5e7f-4e90-9fa3-dac2d70409db",
        "parentId" : "449f1f06-c9ab-4a63-852c-0f3d32850763",
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "I suppose we could re-enable logging for compiler errors/warnings in our telemetry. We used to do that unintentionally and then disabled it, so it shouldn't be too hard to reenable. It may be overkill for this though?",
        "createdAt" : "2019-11-07T15:50:36Z",
        "updatedAt" : "2019-11-07T15:50:37Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      },
      {
        "id" : "676075f4-575f-444a-8c27-2e995e6adc6b",
        "parentId" : "449f1f06-c9ab-4a63-852c-0f3d32850763",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We never deliberately logged all compiler errors. We logged some of them by accident (mainly as a result of failures to get scenario results which is not a bug in our code). I think it makes more sense to specifically log certain cases when we introduce the warning rather than logging all errors.",
        "createdAt" : "2019-11-07T15:52:35Z",
        "updatedAt" : "2019-11-07T15:52:35Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "1bc61ebc-991f-41d9-ad7e-9f6647d36e91",
        "parentId" : "449f1f06-c9ab-4a63-852c-0f3d32850763",
        "authorId" : null,
        "body" : "It's not a new error though?\r\n\r\n`data Foo a = Bar` was not supported before, and continues to be unsupported. The only thing this PR allows that was previously not allowed is `data Foo = Bar`, with no type variables.\r\n\r\nI could see us supporting `data Foo a = Bar` in the future, possibly by making the Java codegen smarter about enums.",
        "createdAt" : "2019-11-07T15:59:36Z",
        "updatedAt" : "2019-11-07T15:59:36Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "89a1d85b-27ea-4a26-82b5-3256462394b3",
        "parentId" : "449f1f06-c9ab-4a63-852c-0f3d32850763",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "My understanding was that we are talking about introducing an error for `data Foo a = Bar | Baz` which is not an error right now.",
        "createdAt" : "2019-11-07T16:00:42Z",
        "updatedAt" : "2019-11-07T16:00:43Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d5fdfff0-7a61-4234-8b97-57cfd3dc848b",
        "parentId" : "449f1f06-c9ab-4a63-852c-0f3d32850763",
        "authorId" : null,
        "body" : "Ah, I see. Sorry.",
        "createdAt" : "2019-11-07T16:04:58Z",
        "updatedAt" : "2019-11-07T16:04:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "c83bd73dbde87ea2f73acebd8ebceddb3a7dddd5",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +116,120 @@    -- Generate an error if the declaration is a data type with one constructor and zero arguments\n    getAmbiguousError (GHC.L ss decl)\n      | GHC.TyClD _ GHC.DataDecl{tcdTyVars = dtyvars, tcdDataDefn=GHC.HsDataDefn{dd_cons=[con]}} <- decl -- single con data type\n      , GHC.HsQTvs _ (_:_) <- dtyvars -- with at least one type-level arguments\n      , GHC.PrefixCon [] <- GHC.con_args (GHC.unLoc con) -- but zero value arguments"
  }
]