[
  {
    "id" : "7e0a336e-dc9b-4b7c-8512-dbddd3f380d5",
    "prId" : 9289,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9289",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71a09240-fedb-4bb5-86c8-b0c5ac04cb44",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We don’t actually need any methods in this typeclass right? The way the literal conversion is setup. We need the instance to make things typecheck but then the LF conversion statically hardcodes the conversion logic and doesn’t make use of this typeclass (and you can’t add your own instance to make it work). Should we just keep this as an empty typeclass for now? Maybe also worth adding a comment that users should not add instances?",
        "createdAt" : "2021-03-31T08:12:50Z",
        "updatedAt" : "2021-03-31T10:17:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "781788d4-0945-4402-a94f-89946b595d2e",
        "parentId" : "71a09240-fedb-4bb5-86c8-b0c5ac04cb44",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "We could keep it as an empty typeclass, or as a typeclass with a private method, but I think I prefer adding these methods. Exposing them here makes them easier to learn and more consistent (vs using the respective methods in DA.Numeric/DA.BigNumeric). And if we decide to let users define their own types with decimal literals, it would be easy to add them via this typeclass. This would also make Numeric literals more usable in some cases, since it can handle polymorphic scales via the typeclass.",
        "createdAt" : "2021-03-31T09:43:14Z",
        "updatedAt" : "2021-03-31T10:17:15Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "05739d72-7330-473c-b3d7-ec3577898efd",
        "parentId" : "71a09240-fedb-4bb5-86c8-b0c5ac04cb44",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "cool then let’s keep it",
        "createdAt" : "2021-03-31T10:19:08Z",
        "updatedAt" : "2021-03-31T10:19:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "844aafa18791479a1d1602c02d8a549951fa7c4e",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +474,478 @@    -- | Convert from `BigNumeric`. Raises an error if the number can't be\n    -- represented exactly in the target type.\n    fromBigNumeric : BigNumeric -> t\n\ninstance NumericScale n => IsNumeric (Numeric n) where"
  },
  {
    "id" : "719ae31d-7805-48fe-95c2-0bce68741f8a",
    "prId" : 3667,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3667",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc94730b-3310-45dc-99b7-0011200975f5",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Help, I want to unsee this!",
        "createdAt" : "2019-11-28T16:14:49Z",
        "updatedAt" : "2019-11-28T16:35:51Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e7e947c49297bdbff942b9e807224650ca4f775",
    "line" : 314,
    "diffHunk" : "@@ -1,1 +749,753 @@       c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58,\n       c59, c60, c61)\nclass (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16,\n       c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30,\n       c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44,"
  },
  {
    "id" : "591ea0ed-93d2-47f4-b96c-9ad78fa843fa",
    "prId" : 3505,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3505",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6e6d575-d690-4fed-bac6-75db65116dff",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We could generate this with CPP :trollface: ",
        "createdAt" : "2019-11-18T13:07:42Z",
        "updatedAt" : "2019-11-18T13:29:19Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "adf1b6bf-993a-43f3-8a74-12b9c4e32b01",
        "parentId" : "e6e6d575-d690-4fed-bac6-75db65116dff",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Looks like somebody is \"growth hacking\" on his contribution stats. :wink: ",
        "createdAt" : "2019-11-18T17:41:32Z",
        "updatedAt" : "2019-11-18T17:41:38Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "eaa3dcd4f25268609b9fddf4f0510cf963f639df",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +400,404 @@    numericScalePrivate : proxy n -> ()\n\ninstance NumericScale 0 where numericScale _ = 0; numericScalePrivate _ = ()\ninstance NumericScale 1 where numericScale _ = 1; numericScalePrivate _ = ()\ninstance NumericScale 2 where numericScale _ = 2; numericScalePrivate _ = ()"
  },
  {
    "id" : "e84e273f-5392-4471-b921-8804d2797fc5",
    "prId" : 2333,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "763cef90-3fee-4d6f-978a-47aaacc2dd42",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Good call!",
        "createdAt" : "2019-07-30T12:07:22Z",
        "updatedAt" : "2019-07-30T12:07:28Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "3489bd859605c1aa7ad464a4a932f88c2274a0e3",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +67,71 @@default ()              -- Double isn't available yet\n\n-- | HIDE The syntax `?x :: a` is desugared into `IP \"x\" a`\n-- IP is declared very early, so that libraries can take\n-- advantage of the implicit-call-stack feature"
  }
]