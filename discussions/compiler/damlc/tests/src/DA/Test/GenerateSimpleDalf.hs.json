[
  {
    "id" : "e8edb9ee-85ae-489d-a1a5-034ad6202979",
    "prId" : 3703,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea014ee3-285f-481c-9dc4-8224d7f628af",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "```suggestion\r\n            , dataSerializable = IsSerializable False\r\n```\r\n\r\nFor reference, #3635 defines synonyms, but _does not_ define them as serializable. Therefore, presence of a synonym reference in a record or variant makes that record or variant unserializable, as well; I have not commented on that code change because the relevant function hasn't been updated in this PR, I believe. It is unsafe to simply extend the set of serializable types at will. cc @remyhaemmerle-da ",
        "createdAt" : "2019-12-02T21:03:57Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "dfb0594e-21cd-45c9-b20b-3f68a5544b33",
        "parentId" : "ea014ee3-285f-481c-9dc4-8224d7f628af",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Thank you. And for further reference, the LF spec for type synonyms is updated by https://github.com/digital-asset/daml/pull/3694\r\n",
        "createdAt" : "2019-12-02T21:27:00Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "d71bad0b-c61e-4768-8b44-b575fa3bca1a",
        "parentId" : "ea014ee3-285f-481c-9dc4-8224d7f628af",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Your are right, the spec doesn't defined synonyms as serializable. I wonder, is that right?\r\nWhy not define a type-constructor defined by a type-synonym to be serializable, so long as the synonymized type is serializable.",
        "createdAt" : "2019-12-02T21:38:57Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "3e449f71-f304-4266-bf71-dd163a1e2373",
        "parentId" : "ea014ee3-285f-481c-9dc4-8224d7f628af",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Serializability is about values of a given type not about serializability of the type. Since we are not introducing new values, it doesn’t really make sense to talk about serializability of a type synonym and we should always use serializability of the underlying type. For the interface reader and Ledger API values we will always expand type synonyms.",
        "createdAt" : "2019-12-03T07:51:35Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "121b2944-4986-40ad-9e01-a1221a92b43c",
        "parentId" : "ea014ee3-285f-481c-9dc4-8224d7f628af",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I agree with @S11001001. Currently `Serializability` is defined for types not for values.  \r\nTherefore: \r\nWe should specify how this works for type synonyms.  we need to add the following rule in the spec:\r\n```   \r\n     'synonym' T α₁ … αₙ ↦  σ₁  ∈  〚Ξ〛Mod  \r\n      ⊢ₛ  σ₁[α₁ ↦ τ₁, …, αₙ ↦ τₙ]\r\n    ———————————————————————————————————————————————————————————————— STyTypeSyn\r\n      ⊢ₛ  Mod:T τ₁ … τₙ\r\n```\r\n\r\nTo be consistent with the current philosophy of daml-lf, I also expect that type synonym definitions are annotated by the compiler with the `serializability` flag as any other definitions.    \r\n\r\n ",
        "createdAt" : "2019-12-03T08:32:13Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "0a195d91-f021-4dcf-88ae-ef89c3cec1d3",
        "parentId" : "ea014ee3-285f-481c-9dc4-8224d7f628af",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Sounds good :+1:",
        "createdAt" : "2019-12-03T09:28:45Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "6662bc03-88f0-4e96-b824-3765e004d523",
        "parentId" : "ea014ee3-285f-481c-9dc4-8224d7f628af",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "For, say, records we require that `t_1, ..., t_n` are serializable for `Mod:T t_1 ... t_n` to be serializable. The serializability inference works under that assumption. In fact, the `serializable` flag tells whether a type preserved serializability.",
        "createdAt" : "2019-12-03T11:12:49Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "092e1ec6-ce7c-499a-9dc0-5c9ca7ac8197",
        "parentId" : "ea014ee3-285f-481c-9dc4-8224d7f628af",
        "authorId" : null,
        "body" : "Given that we only plan to use type synonyms at the moment for typeclasses, and thanks to dictionary sanitization the underlying fields will never be serializable (they're functions from unit), I don't think we need to worry about serializability for type synonyms at the moment.",
        "createdAt" : "2019-12-03T11:27:54Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "277b38c8-fc5f-4f6d-9fc8-d3127120801d",
        "parentId" : "ea014ee3-285f-481c-9dc4-8224d7f628af",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I am fine with you proposal @associahedron. In this case, just for the sake of simplicity, set all type synonyms to Unseralizable, that is applied the change proposed by @S11001001.  ",
        "createdAt" : "2019-12-03T12:36:55Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e10f3d85f2547f8c6f1968d814c0ffeba77445b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +108,112 @@            { dataLocation = Nothing\n            , dataTypeCon = TypeConName [\"Syn\"]\n            , dataSerializable = IsSerializable True\n            , dataParams = []\n            , dataCons = DataSynonym TUnit"
  },
  {
    "id" : "0e06f232-de20-4eed-972d-b4bdfce2ac3a",
    "prId" : 3477,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3477",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ea591f8-baa4-4bf9-beed-c42f5c3e32d2",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Why can’t we support variants here? I know that it’s not possible to generate such code from DAML since we always build up a record (unless you manually write `Choice` instances) but it seems fairly easy to support this. in fact, it probably works out of the box unless you validate that the type is a record which I think you don’t do at the moment.\r\n\r\nIf we don’t support it as part of this PR, that’s fine as well but in that case I would like to keep the test case as an expected failure.",
        "createdAt" : "2019-11-15T09:50:37Z",
        "updatedAt" : "2019-11-19T22:40:52Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "7b8d71c0-89f4-45e5-9a39-639041c687b2",
        "parentId" : "1ea591f8-baa4-4bf9-beed-c42f5c3e32d2",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "The reason to change to a record type was because I wanted to test a cross-sdk exercise using DAML. I'll make the generated DALF have 2 choices: One with a record; one with a variant.",
        "createdAt" : "2019-11-15T16:09:11Z",
        "updatedAt" : "2019-11-19T22:40:52Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "142f0ba0-5984-445e-927c-b0f7514e81fd",
        "parentId" : "1ea591f8-baa4-4bf9-beed-c42f5c3e32d2",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Sounds good :+1:",
        "createdAt" : "2019-11-15T16:38:20Z",
        "updatedAt" : "2019-11-19T22:40:52Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "6c306c00-7550-4530-bbbb-158770059a69",
        "parentId" : "1ea591f8-baa4-4bf9-beed-c42f5c3e32d2",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Looks like you didn’t do this? We still seem to only have one choice for a `Record`.\r\n- This is done now",
        "createdAt" : "2019-11-19T08:07:11Z",
        "updatedAt" : "2019-11-19T22:40:52Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "46f2a938-bda4-49a2-ad80-bf32ab50885c",
        "parentId" : "1ea591f8-baa4-4bf9-beed-c42f5c3e32d2",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "done now. \r\nBut I'm not really convinced of the utility of creating DALF for testing which is not of the form which would result from the daml compiler.",
        "createdAt" : "2019-11-19T08:46:21Z",
        "updatedAt" : "2019-11-19T22:40:52Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "df46a0c0ece38f03f22149c7964ffc4d607dc43b",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +55,59 @@            , dataSerializable = IsSerializable True\n            , dataParams = []\n            , dataCons = DataRecord [ (FieldName \"choiceArg\", TUnit) ]\n            }\n    let emptyRec = DefDataType"
  },
  {
    "id" : "e18a1a6b-e9b8-4c16-8bc2-92da4545cf7c",
    "prId" : 3338,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3338",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a863aab-e825-4153-9f33-0f966a922f37",
        "parentId" : null,
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I like this idiom.",
        "createdAt" : "2019-11-05T14:14:56Z",
        "updatedAt" : "2019-11-05T14:15:14Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f9fc21dcf3180553445a6efd00ae19bc07f8523",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +85,89 @@            , tplObservers = ENil TParty\n            , tplAgreement = mkEmptyText\n            , tplChoices = NM.fromList ([chc] <> [arc | withArchiveChoice])\n            , tplKey = Nothing\n            }"
  },
  {
    "id" : "75709fc8-4dc2-4a1f-8fa7-faac466fbb03",
    "prId" : 3102,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3102",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ece4d9ec-ee6a-4354-935c-f6055daeb15e",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : ":see_no_evil: ",
        "createdAt" : "2019-10-03T19:12:04Z",
        "updatedAt" : "2019-10-03T19:14:27Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "935c54ff-b1c6-4ff4-b4a2-5c5d2b2b0d04",
        "parentId" : "ece4d9ec-ee6a-4354-935c-f6055daeb15e",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Let's make sure we import the stdlib qualified before our users find out we don't do it. ;)",
        "createdAt" : "2019-10-04T07:55:20Z",
        "updatedAt" : "2019-10-04T07:55:20Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "c73d5fdd3c9729ce3c93f9f81072db0c6e5c93fa",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@    let tplRec = DefDataType\n            { dataLocation = Nothing\n            , dataTypeCon = TypeConName [\"Template\"]\n            , dataSerializable = IsSerializable True\n            , dataParams = []"
  },
  {
    "id" : "7758c31f-2bee-4732-861e-5eb95cdf109a",
    "prId" : 3102,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3102",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66979df4-154e-45ca-a1c8-056526ec9cd2",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "How do you expect this to be represented in DAML? Just ignore the choice name?",
        "createdAt" : "2019-10-03T19:13:44Z",
        "updatedAt" : "2019-10-03T19:14:27Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "7e4d8dea-12de-4660-88f7-f58c092deba5",
        "parentId" : "66979df4-154e-45ca-a1c8-056526ec9cd2",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Yep, ignore the choice name in DAML, expose it via its choice argument type and make sure we exercise the right choice at the DAML-LF level. ",
        "createdAt" : "2019-10-04T07:54:48Z",
        "updatedAt" : "2019-10-04T07:54:48Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "c73d5fdd3c9729ce3c93f9f81072db0c6e5c93fa",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +46,50 @@    let chc = TemplateChoice\n            { chcLocation = Nothing\n            , chcName = ChoiceName \"NotChoice\"\n            , chcConsuming = True\n            , chcControllers = tplParties"
  }
]