[
  {
    "id" : "31e6c3b3-25aa-4098-bec4-e62dd6330111",
    "prId" : 6423,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8a8b498-8642-4ad8-90e0-cb9c35471fda",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I suggest we completely delete this code. This hint has never done anything helpful for us and I doubt it will ever do.",
        "createdAt" : "2020-06-22T08:36:26Z",
        "updatedAt" : "2020-06-22T08:36:35Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d1d4fdf697ac5c029167f8d8e4fd28d3f308c8f",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +324,328 @@    --         setFilesOfInterest [foo]\n    --         expectNoErrors\n    --         expectDiagnostic DsInfo (foo, 7, 4) \"Suggestion: Reduce duplication\"\n    ,  testCase' \"Use language pragmas\" $ do\n            foo <- makeFile \"Foo.daml\" $ T.unlines"
  },
  {
    "id" : "eee8ee65-d7b5-40ec-a98c-fe54c0f17a65",
    "prId" : 4013,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4013",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bebc758-de99-49c1-a747-0181bc852a26",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This simply undoes the changes that I made in c65f9181459cadc3da79687571788bdbd74c4484 which were required by the regression in https://github.com/digital-asset/ghcide/issues/315. Should have taken a closer look at this back then",
        "createdAt" : "2020-01-10T16:26:10Z",
        "updatedAt" : "2020-01-10T17:35:20Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "48f24250cf3f4654f2cad4ec64a795b0a5c2274c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +585,589 @@            expectGoToDefinition (foo,2,[9])    Missing             -- \"\\n\"\n            expectGoToDefinition (foo,2,[10])   Missing             -- (out of range)\n            expectGoToDefinition (foo,3,[0..2]) (At (foo,3,0))      -- \"foo\"\n            expectGoToDefinition (foo,3,[3..5]) Missing             -- \" = \"\n            expectGoToDefinition (foo,3,[6..8]) (At (foo,5,0))      -- \"bar\""
  },
  {
    "id" : "4db6ff62-868f-448d-a9ec-83aa6bc9814d",
    "prId" : 3865,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3865",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8036dac1-c7de-47d3-8a21-c532fb6e77c2",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I think the new behavior here actually makes more sense, we are still within the definition of `foo` at the equal sign so it makes sense for goto definition to point back to `foo`.",
        "createdAt" : "2019-12-16T15:42:18Z",
        "updatedAt" : "2019-12-17T08:26:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "0198df451e43c3aa103b884f1860d9b71329dc1c",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +585,589 @@            expectGoToDefinition (foo,2,[9])    Missing             -- \"\\n\"\n            expectGoToDefinition (foo,2,[10])   Missing             -- (out of range)\n            expectGoToDefinition (foo,3,[0..5]) (At (foo,3,0))      -- \"foo = \"\n            expectGoToDefinition (foo,3,[6..8]) (At (foo,5,0))      -- \"bar\"\n            expectGoToDefinition (foo,3,[9])    Missing             -- \"\\n\""
  },
  {
    "id" : "6b6a5488-977e-4a3c-9c37-f5143cea7801",
    "prId" : 3865,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3865",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7099a533-a13b-4e1a-94cf-d0b73fc77dbd",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Same here.",
        "createdAt" : "2019-12-16T15:42:26Z",
        "updatedAt" : "2019-12-17T08:26:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "0198df451e43c3aa103b884f1860d9b71329dc1c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +645,649 @@                ]\n            setFilesOfInterest [foo]\n            expectGoToDefinition (foo,2,[0..5]) (At (foo,2,0))\n            expectGoToDefinition (foo,2,[6..8]) (At (foo,3,0))\n            expectGoToDefinition (foo,2,[9]) Missing"
  },
  {
    "id" : "338d6d23-4860-4344-bbe6-b352071791f3",
    "prId" : 3319,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3319",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62403fc4-515d-4ce0-9ed6-202fe2e4776b",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I wonder if this rule and the one after are a good idea for DAML. Currently we are mostly encouraging people to use `do` notation and not worry about this Functor, Applicative, Monad thing and these rules seem to go in the other direction.\r\n\r\nWhat do you think @hurryabit @bame-da ",
        "createdAt" : "2019-11-01T17:50:46Z",
        "updatedAt" : "2019-11-01T17:51:21Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e14e78218fbbd60890b2aa175475fb179cd6b5a",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +524,528 @@                [ \"daml 1.2\"\n                , \"module Foo where\"\n                , \"foo f g bar = do x <- bar; return (f $ g x)\"\n                ]\n            setFilesOfInterest [foo]"
  },
  {
    "id" : "cb77c08f-b101-405f-9d5e-eb2993149e75",
    "prId" : 3230,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21990d0f-98c7-41d0-8125-0a12fc30066d",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Is there a `with`-syntax version of record patterns? Given that @bame-da seems to be fairly keen on using `with` syntax in all ouf our docs (and I agree that being consistent is better), Iâ€™m a bit hesistant to suggest braces by default.",
        "createdAt" : "2019-10-18T13:40:29Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "81b33c2f-d2fe-438c-9d4a-5c8e4a14d68d",
        "parentId" : "21990d0f-98c7-41d0-8125-0a12fc30066d",
        "authorId" : null,
        "body" : "Do you mean that the suggestion (in DAML), should read `Suggest : Foo with {...}`?",
        "createdAt" : "2019-10-18T13:50:46Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "2ddbe757-b170-4b5a-b002-4e3d94fccf9f",
        "parentId" : "21990d0f-98c7-41d0-8125-0a12fc30066d",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I donâ€™t know what the `with` syntax of `foo Foo {} = â€¦` is, I guess ` foo Foo with {} = `? Doesnâ€™t seem like an improvement to me but Iâ€™m the wrong person to comment on the beauty of with-syntax.",
        "createdAt" : "2019-10-18T13:53:11Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "97f9b394-d954-4aa4-8049-3485323cd0aa",
        "parentId" : "21990d0f-98c7-41d0-8125-0a12fc30066d",
        "authorId" : null,
        "body" : "```haskell\r\ndaml 1.2\r\ndata Foo = Foo { a : Int, b : Int}\r\nfoo : Foo -> Int\r\nfoo Foo with {a = a, b = b} = a + b\r\n```\r\n",
        "createdAt" : "2019-10-18T13:55:50Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "34e6b47d-2bd8-40bc-b856-ed80af4b689f",
        "parentId" : "21990d0f-98c7-41d0-8125-0a12fc30066d",
        "authorId" : null,
        "body" : "if you need more i can refer you to a helpful blog post (disclaimer : i'm the author!) ðŸ¤£ ",
        "createdAt" : "2019-10-18T13:56:50Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "e2543361-1a03-446d-a1cf-0258c505624a",
        "parentId" : "21990d0f-98c7-41d0-8125-0a12fc30066d",
        "authorId" : null,
        "body" : "leaving :trollface: mode for a moment, suggest letting it slide since it's only a shake ide test. the question above though - perhaps our suggestion should read ~`Suggest : Foo with {...}`~ `Suggest: Foo with {}`?",
        "createdAt" : "2019-10-18T13:57:57Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "255c9baf-d408-4d69-bdf0-e1966f5726b0",
        "parentId" : "21990d0f-98c7-41d0-8125-0a12fc30066d",
        "authorId" : null,
        "body" : "it's a minor enhancement but one more thing to maintain on the fork (not a bad thing necessarily - just undecided about that - generally try to keep it restricted to that which is mandatory e.g. different parse trees)",
        "createdAt" : "2019-10-18T13:58:57Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "0448e3e5-5447-4fdf-9ab9-2f96375aa7f1",
        "parentId" : "21990d0f-98c7-41d0-8125-0a12fc30066d",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Itâ€™s not just a Shake IDE test, right? This is a rule that DLint will suggest by default.\r\n",
        "createdAt" : "2019-10-18T13:59:25Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "05f733a0-7d47-4800-8181-01fbb560f92f",
        "parentId" : "21990d0f-98c7-41d0-8125-0a12fc30066d",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "`Foo with {..}` looks like a record wild card which is different from `Foo {}`.",
        "createdAt" : "2019-10-18T14:00:00Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "abcc3b66-11b6-400e-9364-9ddf50f4d6c6",
        "parentId" : "21990d0f-98c7-41d0-8125-0a12fc30066d",
        "authorId" : null,
        "body" : "Sorry, I didn't mean that. Should have wrote,\r\n```\r\nFoo with {}\r\n```\r\nI'm confused though. Can we back up? What is it you are advocating should happen here? Is it that the message should read `Suggest : Foo with {}`? \r\n",
        "createdAt" : "2019-10-18T14:02:55Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "f750fdc3-da3f-4335-83c5-ce3bb00a2320",
        "parentId" : "21990d0f-98c7-41d0-8125-0a12fc30066d",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Iâ€™m not sure Iâ€™m advocating for that but it does at least seem worth considering given that we try to guide users towards `with`-syntax.",
        "createdAt" : "2019-10-18T14:05:24Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "c998e9c0-2177-4648-9103-b4490224f534",
        "parentId" : "21990d0f-98c7-41d0-8125-0a12fc30066d",
        "authorId" : null,
        "body" : "Ok I got you. Yes, I can get onboard with that and it's simple enough to implement. Let's do it.",
        "createdAt" : "2019-10-18T14:06:56Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "cfcced4d809e51ca4235f279c5f405debc501424",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +451,455 @@                , \"module Foo where\"\n                , \"data Foo = Foo {a : Int, b : Int, c : Int, d : Int}\"\n                , \"foo (Foo _ _ _ _) = True\"\n                ]\n            setFilesOfInterest [foo]"
  },
  {
    "id" : "6e32f708-e9da-47e3-aa05-d2dab0501a97",
    "prId" : 3230,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a1ffb98-6cd4-40ab-9d0f-f39abccc5275",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This rule doesnâ€™t make sense for DAML but on the other hand putting bang patterns in DAML never makes sense so I guess we might as well warn about some of them being redundant.",
        "createdAt" : "2019-10-18T13:43:41Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "cc6f7973-027c-4119-9023-735e80ff7ea0",
        "parentId" : "6a1ffb98-6cd4-40ab-9d0f-f39abccc5275",
        "authorId" : null,
        "body" : "Fair. Perhaps more generally `daml-lf` conversion should fail in the presence of bangs? Or maybe we should customize the lexer to fail earlier since they \"aren't DAML\"?",
        "createdAt" : "2019-10-18T14:01:20Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "6ddd2cac-21e8-441c-a6fb-00767502ff2b",
        "parentId" : "6a1ffb98-6cd4-40ab-9d0f-f39abccc5275",
        "authorId" : null,
        "body" : "I'll raise an issue for this part of the discussion.",
        "createdAt" : "2019-10-18T14:09:08Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "cfcced4d809e51ca4235f279c5f405debc501424",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +465,469 @@            expectNoErrors\n            expectDiagnostic DsInfo (foo, 2, 4) \"Warning: Used otherwise as a pattern\"\n    ,  testCase' \"Redundant bang pattern\" $ do\n            foo <- makeFile \"Foo.daml\" $ T.unlines\n                [ \"{-# LANGUAGE BangPatterns #-}\""
  },
  {
    "id" : "4840c749-848a-4be4-823f-e9eb0cd0454d",
    "prId" : 2371,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2371",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d291609c-5f93-4cd1-a322-f5819a0e3c30",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Do we need the `archive` here if we just want to ensure that `fetch` does not produce an edge in the graph?",
        "createdAt" : "2019-08-05T14:03:47Z",
        "updatedAt" : "2019-08-05T14:08:21Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "c5811cd2-ba27-4c63-8e42-b4476de1920c",
        "parentId" : "d291609c-5f93-4cd1-a322-f5819a0e3c30",
        "authorId" : "295ee093-aa35-4d63-bc72-cc3a66e7e50c",
        "body" : "Nope,  got rid of it",
        "createdAt" : "2019-08-05T18:17:37Z",
        "updatedAt" : "2019-08-05T18:17:37Z",
        "lastEditedBy" : "295ee093-aa35-4d63-bc72-cc3a66e7e50c",
        "tags" : [
        ]
      }
    ],
    "commit" : "66b5b7e6be738ae8597dd2cb62a7f4df985506f7",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +875,879 @@                , \"        do \"\n                , \"        cn <- fetch otherCoin\"\n                , \"        archive otherCoin\"\n                ]\n            setFilesOfInterest [fetchTest]"
  },
  {
    "id" : "28809590-6c05-414c-a3f4-c3ba6ffd6a6a",
    "prId" : 2371,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2371",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d43c4846-a352-4c1e-9b91-b9c8b4600321",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "The expectation should say which choice is expected to exercise the `Archive` choice of `F:Coin`.",
        "createdAt" : "2019-08-05T14:06:09Z",
        "updatedAt" : "2019-08-05T14:08:21Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "87ef62dc-54de-4d24-9c5d-63e96cf260a5",
        "parentId" : "d43c4846-a352-4c1e-9b91-b9c8b4600321",
        "authorId" : "295ee093-aa35-4d63-bc72-cc3a66e7e50c",
        "body" : "Got rid of that action we this test intent was to make sure fetch did not add a edge",
        "createdAt" : "2019-08-05T18:22:39Z",
        "updatedAt" : "2019-08-05T18:22:39Z",
        "lastEditedBy" : "295ee093-aa35-4d63-bc72-cc3a66e7e50c",
        "tags" : [
        ]
      }
    ],
    "commit" : "66b5b7e6be738ae8597dd2cb62a7f4df985506f7",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +885,889 @@                        ExpectedChoices \"ReducedCoin\" False\n                    ])\n                    (Set.fromList [Exercise \"F:Coin\" \"Archive\"])\n                ]\n        , testCase' \"excercise sould add new action\" $ do"
  }
]