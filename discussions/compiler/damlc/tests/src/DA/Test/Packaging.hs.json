[
  {
    "id" : "7b866419-1679-44f7-a4ee-0e70bcba0039",
    "prId" : 7927,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7927",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8dae456d-834e-4613-9827-940ba1901a57",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Nice!",
        "createdAt" : "2020-11-10T13:59:07Z",
        "updatedAt" : "2020-11-10T13:59:07Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "acb0ae236346dd9d2204aa6425f0f07e8e942951",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +823,827 @@          withCurrentDirectory outDir $\n            callProcessSilent damlc [\"build\", \"--project-root\", dir, \"-o\", \"A.dar\"]\n          assertFileExists $ outDir </> \"A.dar\"\n    ] <>\n    [ lfVersionTests damlc"
  },
  {
    "id" : "a6818358-454b-4082-8dd3-8823b4db893b",
    "prId" : 7815,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7815",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4039fcb-09b9-4456-a8bd-1b54541af76d",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "What would happen here if we lost the MINIMAL pragma? I assume we would get a warning. Would that make this test fail?",
        "createdAt" : "2020-10-27T13:50:45Z",
        "updatedAt" : "2020-10-28T09:48:00Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "f9831389-f217-48b6-8a86-614b7c384244",
        "parentId" : "d4039fcb-09b9-4456-a8bd-1b54541af76d",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "We get errors all around (tested it).",
        "createdAt" : "2020-10-28T09:40:45Z",
        "updatedAt" : "2020-10-28T09:48:00Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "323977ef2324d231a554726a69744fffb86d151b",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1837,1841 @@        , \"instance MyClass B where\"\n        , \"    bar _ = 20\"\n        , \"    baz _ = 30\"\n        ]\n"
  },
  {
    "id" : "2376dbaf-a921-4341-a63d-9aa3c102e964",
    "prId" : 7664,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7664",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bd1ea6e-e395-4aa5-b942-8cb94ae80ff9",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "`P1` and `P2` seems unnecessarily confusing. Why not `Dep` and `Main` or `Importer` and `Importee`?",
        "createdAt" : "2020-10-13T11:25:10Z",
        "updatedAt" : "2020-10-13T11:26:20Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "6a6d4463-6592-4fb1-abb7-2d3da8f26344",
        "parentId" : "3bd1ea6e-e395-4aa5-b942-8cb94ae80ff9",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I thought about that as well. I'll change it to `Lib` and `Main`, I'm worried `Importer` and `Importee` are too close to get mixed up.",
        "createdAt" : "2020-10-13T11:29:13Z",
        "updatedAt" : "2020-10-13T11:29:13Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "ed4c0938-28e6-4e37-b940-6e7791243338",
        "parentId" : "3bd1ea6e-e395-4aa5-b942-8cb94ae80ff9",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "The `automerge` label was faster than me... Here we go: https://github.com/digital-asset/daml/pull/7665",
        "createdAt" : "2020-10-13T11:37:24Z",
        "updatedAt" : "2020-10-13T11:37:25Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "eedac149-f9b2-450a-884c-4da029868c96",
        "parentId" : "3bd1ea6e-e395-4aa5-b942-8cb94ae80ff9",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm not gaming my PR stats!",
        "createdAt" : "2020-10-13T11:37:49Z",
        "updatedAt" : "2020-10-13T11:37:49Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "d66458fe-0330-4abd-9945-45aa9917fd0e",
        "parentId" : "3bd1ea6e-e395-4aa5-b942-8cb94ae80ff9",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "looking at the contributor stats you should :trollface: ",
        "createdAt" : "2020-10-13T11:40:38Z",
        "updatedAt" : "2020-10-13T11:40:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f1c2e4d416f8ae752df9caeaf5a25afa9f4b044",
    "line" : 427,
    "diffHunk" : "@@ -1,1 +1771,1775 @@                , \"dependencies: [daml-prim, daml-stdlib]\"\n                ]\n            writeFileUTF8 (tmpDir </> \"type\" </> \"P1.daml\") $ unlines importee\n            withCurrentDirectory (tmpDir </> \"type\") $\n                callProcessSilent damlc [\"build\", \"-o\", \"type.dar\"]"
  },
  {
    "id" : "2d5553a1-1ac2-40f5-bb0f-4fce24bdf25b",
    "prId" : 7320,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7320",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c11156a-c3c2-4588-add3-c8e93b4d031a",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "I wonder if we can make a test that reliably generates an implicit parameter instance?\r\n\r\nOr perhaps, add some a check to this test that an implicit parameter instance is in the DAR.",
        "createdAt" : "2020-09-03T20:21:38Z",
        "updatedAt" : "2020-09-04T06:51:05Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "7b21a76a-a8cd-4034-a3df-0e59fee2c012",
        "parentId" : "7c11156a-c3c2-4588-add3-c8e93b4d031a",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Ah, I wonder if we can slip it in to the \"Simple DALF\" test or something. (It's not so simple...) ",
        "createdAt" : "2020-09-03T20:22:53Z",
        "updatedAt" : "2020-09-04T06:51:05Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "ab065646-6531-46c9-98d4-65724dcb9485",
        "parentId" : "7c11156a-c3c2-4588-add3-c8e93b4d031a",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I’ve added an assertion that we have 2 implicit instances. Simple DALF would work as well I guess but this has the advantage that it tests what our users actually hit which seems useful. I still don’t understand how to generate it reliably. Even in this example you can remove the type signature, the inferred type stays the same but now it’s inlined :shrug: ",
        "createdAt" : "2020-09-04T06:52:53Z",
        "updatedAt" : "2020-09-04T06:52:53Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "0d7f68b5-c4c9-47a2-a55a-2406fa4c6ef5",
        "parentId" : "7c11156a-c3c2-4588-add3-c8e93b4d031a",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Awesome, thank you!",
        "createdAt" : "2020-09-04T08:34:16Z",
        "updatedAt" : "2020-09-04T08:34:16Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0f939823ee767bead19253d2ada1b70ca3b7145",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +1742,1746 @@            ]\n        withCurrentDirectory (tmpDir </> \"dep\") $\n            callProcessSilent damlc [\"build\", \"-o\", \"dep.dar\"]\n        Right Dalfs{..} <- readDalfs . Zip.toArchive <$> BSL.readFile (tmpDir </> \"dep\" </> \"dep.dar\")\n        (_pkgId, pkg) <- either (fail . show) pure (LFArchive.decodeArchive LFArchive.DecodeAsMain (BSL.toStrict mainDalf))"
  },
  {
    "id" : "8827685a-417d-4f03-b647-e75ee015865d",
    "prId" : 7303,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7303",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd8e122c-6262-4e66-bf2f-a6659fff9ec0",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Should we add a third case `D ()` and check that it behaves like `D` when imported as data-dependency?",
        "createdAt" : "2020-09-02T12:33:10Z",
        "updatedAt" : "2020-09-02T14:30:40Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "e4f44827-ccb7-4534-8cda-24ea7467d45d",
        "parentId" : "cd8e122c-6262-4e66-bf2f-a6659fff9ec0",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "I don't think so. `D ()` is something we're deprecating, and the fact that it's treated the same as `D` in the current compiler is mostly a mistake.",
        "createdAt" : "2020-09-02T12:59:33Z",
        "updatedAt" : "2020-09-02T14:30:40Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "b879a9f8-856f-4e88-bde1-a7751a3593c9",
        "parentId" : "cd8e122c-6262-4e66-bf2f-a6659fff9ec0",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I generally agree but would feel more comfortable to have a test as long as users can still write it, even though they get warned about it.",
        "createdAt" : "2020-09-02T13:34:57Z",
        "updatedAt" : "2020-09-02T14:30:40Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "45cef66a-81f0-4e49-88fd-587e97b87fbc",
        "parentId" : "cd8e122c-6262-4e66-bf2f-a6659fff9ec0",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "I added a test for `D ()` in the single constructor case, which is something we had talked about adding as a special case  (since we can't distinguish single-constructor variants from enums any other way, and there's no ambiguity in the single constructor case). (This actually also came up in one of the other tests, but better to add one here as well.)",
        "createdAt" : "2020-09-02T15:07:37Z",
        "updatedAt" : "2020-09-02T15:08:43Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "59926babb9e698dbaa9e85ecabacd3d575c25df0",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1682,1686 @@        writeFileUTF8 (tmpDir </> \"type\" </> \"Foo.daml\") $ unlines\n            [ \"module Foo where\"\n            , \"data A = B | C Int\"\n            , \"data D = D ()\" -- single-constructor case uses explicit unit\n            ]"
  },
  {
    "id" : "b0455716-30f7-4029-9b12-d3ed34065e5f",
    "prId" : 4901,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ef17ad6-7f5a-484f-9b9e-b06244102647",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "These tests will break once we make DAML-LF 1.8 the default target, won't they? Shall we nail down the second target to DAML-LF 1.7 to prevent this?",
        "createdAt" : "2020-03-11T08:58:52Z",
        "updatedAt" : "2020-03-11T08:59:24Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "8b8a10c2-0479-44ad-8316-005ee08586e2",
        "parentId" : "5ef17ad6-7f5a-484f-9b9e-b06244102647",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "oops, I thought I had done that but apparently I didn’t. I’ll fix it. Thanks!",
        "createdAt" : "2020-03-11T09:01:47Z",
        "updatedAt" : "2020-03-11T09:01:47Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4ec4777b371e43fdf83120b0f43d09e043682ec",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +592,596 @@          buildProjectError projC \"\" \"dependencies with same unit id but conflicting package ids: a-0.0.1\"\n\n    , testCaseSteps \"Error on newer LF data-dependency\" $ \\step -> withTempDir $ \\tmpDir -> do\n          step \"Building 'a\"\n          createDirectoryIfMissing True (tmpDir </> \"a\")"
  },
  {
    "id" : "18a01cb1-76fb-4b6c-af85-28c7023645da",
    "prId" : 4714,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4714",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f290ab0d-2eda-41fd-94bf-e2ea32de6260",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "🔥 ",
        "createdAt" : "2020-02-26T10:37:08Z",
        "updatedAt" : "2020-02-26T10:37:30Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe8f2bc527269ea19ac1cb3cdd6c4ffb931d0b53",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +889,893 @@              ]\n          writeFileUTF8 (tmpDir </> \"dep\" </> \"Foo.daml\") $ unlines\n              [ \"daml 1.2\"\n              , \"module Foo where\"\n              , \"data X = X (Text, Int)\""
  },
  {
    "id" : "3d85d1d1-5caf-49c2-bff5-d0fbf8d28c6d",
    "prId" : 4710,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "187cc676-bb04-4692-81c4-abaaa6dd426b",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe a usage of that type would be useful?",
        "createdAt" : "2020-02-26T09:52:46Z",
        "updatedAt" : "2020-02-26T09:59:12Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "a65b1aba-5f0f-4c88-82ea-013e85feaf2d",
        "parentId" : "187cc676-bb04-4692-81c4-abaaa6dd426b",
        "authorId" : null,
        "body" : "Added!",
        "createdAt" : "2020-02-26T09:59:13Z",
        "updatedAt" : "2020-02-26T09:59:13Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "42e4a4e11e9cf653a83d431041ac5d02fec4816c",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +1322,1326 @@        writeFileUTF8 (tmpDir </> \"proj\" </> \"Main.daml\") $ unlines\n            [ \"daml 1.2\"\n            , \"module Main where\"\n            , \"import Foo\"\n            , \"mkA : A Int\""
  },
  {
    "id" : "3ab10af5-ecc3-4522-91e3-721bb204366e",
    "prId" : 4696,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "638c5bf7-75bf-47fc-bfe4-0edd16847e58",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We don’t strictly need both `a` and `b` here if we use `package`-flags to rename `Lib` we could directly reference both from `a`. However, this seems a bit more natural as something that users might run into themselves so I prefer to keep it like this.",
        "createdAt" : "2020-02-25T16:48:16Z",
        "updatedAt" : "2020-02-26T12:28:53Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7b44c5e8520cd952f6f76d76efb8b230d06d237",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +952,956 @@          withCurrentDirectory projDir $ callProcessSilent damlc [\"build\", \"-o\", projDir </> \"a.dar\"]\n\n          step \"Building b\"\n          let projDir = tmpDir </> \"b\"\n          createDirectoryIfMissing True projDir"
  },
  {
    "id" : "2c7ec4f4-4822-4e0f-8b4a-f2eb31e5f2a2",
    "prId" : 4421,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4421",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71050167-607f-4bfe-bde5-009935a55e0f",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We should really make a helper function for creating `daml.yaml` files in tests :slightly_smiling_face: ",
        "createdAt" : "2020-02-06T12:17:26Z",
        "updatedAt" : "2020-02-06T14:11:53Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "ded024d96b658daf9adac370050f78ba296dd20d",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +514,518 @@          createDirectoryIfMissing True (projC </> \"src\")\n\n          writeFileUTF8 (projA </> \"daml.yaml\") $ unlines\n            [ \"sdk-version: \" <> sdkVersion\n            , \"name: a\""
  },
  {
    "id" : "6f2d5a24-7fe3-4036-b6e1-ea83731f2600",
    "prId" : 4325,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9cf3184-8351-4e01-9ad7-822dcab6a551",
        "parentId" : null,
        "authorId" : null,
        "body" : "Gosh, that's so much nicer! Thank you.",
        "createdAt" : "2020-01-31T13:29:28Z",
        "updatedAt" : "2020-01-31T13:29:44Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "b125836240ec94339d4d25b6c2f38b05805cf309",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +450,454 @@          (exitCode, _, stderr) <- readProcessWithExitCode damlc [\"build\", \"--project-root\", projDir] \"\"\n          exitCode @?= ExitFailure 1\n          assertBool (\"Expected \\\"non-exhaustive\\\" error in stderr but got: \" <> show stderr) (\"non-exhaustive\" `isInfixOf` stderr)\n    ] <>\n    [ damlcTestTests damlc"
  },
  {
    "id" : "92c74bac-0c9b-48c8-ae59-d89e04010a7a",
    "prId" : 4222,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4222",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73408b8c-2f4c-46eb-aed1-6f1242657e45",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "If you think `left-pad` was the most useless library, think again!",
        "createdAt" : "2020-01-27T13:19:48Z",
        "updatedAt" : "2020-01-27T13:19:48Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d1b7759c43720ed16a58242f1f8878b29c70516",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +654,658 @@          writeFileUTF8 (tmpDir </> \"lib\" </> \"Lib.daml\") $ unlines\n              [ \"daml 1.2 module Lib where\"\n              , \"inc : Int -> Int\"\n              , \"inc = (+ 1)\"\n              ]"
  },
  {
    "id" : "3c14c039-eab5-4f29-8416-89830c62c7b5",
    "prId" : 4099,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e030943-ae13-4ec0-bb68-f769a36c668f",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "In what sense are we checking correctness here?",
        "createdAt" : "2020-01-20T12:50:29Z",
        "updatedAt" : "2020-01-20T12:50:29Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "a8289f4e-9071-4fac-9fed-2ab0fad8abb1",
        "parentId" : "4e030943-ae13-4ec0-bb68-f769a36c668f",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Dunno tbh, this test just got shuffled around not changed. I think it is supposed to check that `Tuple2` is mapped back to a DAML tuple.",
        "createdAt" : "2020-01-20T12:54:18Z",
        "updatedAt" : "2020-01-20T12:54:19Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "6b9f32c8d01070bdea665097a682f65dced38ed9",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +586,590 @@        , \"   with\"\n        , \"     p : Party\"\n        , \"     t : (Text, Int)\" -- check for correct tuple type generation\n        , \"   where\"\n        , \"     signatory p\""
  },
  {
    "id" : "03cee932-a3b4-4c94-89af-7d356b2aa277",
    "prId" : 3624,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50aee34e-16ed-4f9c-a79c-66c111bd514c",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "What exactly in an empty package depends on these libraries? ;)",
        "createdAt" : "2019-11-25T20:17:46Z",
        "updatedAt" : "2019-11-25T20:22:13Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "cf90d1eb-8b32-4a13-9722-3397b5af91c1",
        "parentId" : "50aee34e-16ed-4f9c-a79c-66c111bd514c",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Even if something depends on them, the entries are meaningless since we filter those two libs out :slightly_smiling_face: ",
        "createdAt" : "2019-11-25T20:24:27Z",
        "updatedAt" : "2019-11-25T20:24:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "afa7671dcbc3fd1bc4a260a96bae036a3185c7a7",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +303,307 @@            , \"version: 0.0.1\"\n            , \"source: src\"\n            , \"dependencies: [daml-prim, daml-stdlib]\"\n            ]\n        createDirectoryIfMissing True (projDir </> \"src\")"
  }
]