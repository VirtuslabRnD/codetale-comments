[
  {
    "id" : "1b75d892-3094-451a-98e5-ddc379e27d28",
    "prId" : 6467,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7035f15-3deb-466c-a7d4-72e95ee5fa2d",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Can we enable this and add an expected diagnostics to make sure we only hit it in the one places we expect?",
        "createdAt" : "2020-06-23T15:40:54Z",
        "updatedAt" : "2020-06-23T15:41:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2e468ffa-a010-46cc-9e7d-d71239b6000c",
        "parentId" : "a7035f15-3deb-466c-a7d4-72e95ee5fa2d",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Ok, let's see how that plays out!",
        "createdAt" : "2020-06-23T15:41:46Z",
        "updatedAt" : "2020-06-23T15:41:46Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "3622b30d-6a86-494c-9d61-d74471398b02",
        "parentId" : "a7035f15-3deb-466c-a7d4-72e95ee5fa2d",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "It's kind of a pain. As phrased we'll have to put in 48 `@WARN` lines. I think it hinders rather than helps. You ok with leaving it as is?",
        "createdAt" : "2020-06-23T15:50:26Z",
        "updatedAt" : "2020-06-23T15:50:26Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "5aee9fc8-c7e8-4a2a-a997-8846912f699a",
        "parentId" : "a7035f15-3deb-466c-a7d4-72e95ee5fa2d",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Yeah if it’s that much definitely leave it out for now.",
        "createdAt" : "2020-06-23T15:59:41Z",
        "updatedAt" : "2020-06-23T15:59:44Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "c2622ad9-537c-436d-bfa6-dacbc84645ac",
        "parentId" : "a7035f15-3deb-466c-a7d4-72e95ee5fa2d",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Gracias muchos.",
        "createdAt" : "2020-06-23T16:00:31Z",
        "updatedAt" : "2020-06-23T16:00:31Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "567deb06e19c8c134cfcd488ee6df7d410b0a1ba",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +11,15 @@{-# OPTIONS_GHC -Wunused-type-patterns #-}\n-- We know this will fail and why.\n--   {-# OPTIONS_GHC -Wunused-local-binds #-}\nmodule UnusedMatchTests where\n"
  },
  {
    "id" : "886be6b9-0fb2-4f06-a75b-ac39862ad9a0",
    "prId" : 6423,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e924d55a-3d2e-4a0f-8cd9-ef615e214b0c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I might be missing something here but I thought your implementation will not try to silence the unused binds here (which I think is totally reasonable, I’ve never seen anyone write this in DAML) so how does CI pass?",
        "createdAt" : "2020-06-19T18:10:20Z",
        "updatedAt" : "2020-06-19T18:12:51Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "61ca39ad-6cc7-4492-a3fc-abe09b62f846",
        "parentId" : "e924d55a-3d2e-4a0f-8cd9-ef615e214b0c",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Those are regular let bindings. They end up in the where clause of an implicit function e.g.\r\n```haskell\r\n  signatory this =\r\n    ...\r\n    where (a, b) = (0, 1)\r\n```\r\nFor some reason, GHC doesn't care about them (!) as evidenced by this program:\r\n```haskell\r\n{-# OPTIONS_GHC -Wunused-matches #-}\r\n\r\nf x = 23\r\n  where (a, b) = (0, 1)\r\n\r\nmain = undefined\r\n```\r\n\r\n```\r\n/Users/shaynefletcher/Foo.hs:3:3: warning: [-Wunused-matches]\r\n    Defined but not used: ‘x’\r\n  |\r\n3 | f x = 23\r\n  |   ^\r\n```\r\n",
        "createdAt" : "2020-06-19T18:17:10Z",
        "updatedAt" : "2020-06-19T18:17:47Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "3df607dc-e535-4f14-9445-17e3ac21dde0",
        "parentId" : "e924d55a-3d2e-4a0f-8cd9-ef615e214b0c",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "That's not new by the way - we didn't write (any new) code that processes let bindings, only arguments like `this`, `self` and `arg` are getting the \"dummy binding\" treatment.",
        "createdAt" : "2020-06-19T18:18:33Z",
        "updatedAt" : "2020-06-19T18:18:59Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "fd63fe72-6377-428e-92b2-930ef2b61dfc",
        "parentId" : "e924d55a-3d2e-4a0f-8cd9-ef615e214b0c",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Oh I see, you didn’t enable `-Wunused-local-binds`. I would suggest to just go for `-Wall` and selectively disable stuff so we capture all the unused stuff GHC has to offer.",
        "createdAt" : "2020-06-19T18:19:24Z",
        "updatedAt" : "2020-06-19T18:19:39Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e878411d-6ac6-4b18-ae4d-06b41eb14b8e",
        "parentId" : "e924d55a-3d2e-4a0f-8cd9-ef615e214b0c",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "> That's not new by the way - we didn't write (any new) code that processes let bindings, only arguments like `this`, `self` and `arg` are getting the \"dummy binding\" treatment.\r\n\r\nOh I thought let bindings worked if they are variables or as-pattern? If not, we should make them work.",
        "createdAt" : "2020-06-19T18:20:21Z",
        "updatedAt" : "2020-06-19T18:20:21Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "f2eda7b6-ac59-4ae2-b30b-ad381f2308d0",
        "parentId" : "e924d55a-3d2e-4a0f-8cd9-ef615e214b0c",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "We pass all arguments to `signatory` and friends to the `dummyBinds` function so all as patterns and var patterns are given that treatment. Bindings in a template `let` block are not \"function parameters\" and are not given any new treatments. Are you suggesting we should be doing more?",
        "createdAt" : "2020-06-19T18:23:47Z",
        "updatedAt" : "2020-06-19T18:23:47Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "93a14b15-9385-4ce6-9fe3-06e57cea5e5a",
        "parentId" : "e924d55a-3d2e-4a0f-8cd9-ef615e214b0c",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "> Oh I see, you didn’t enable `-Wunused-local-binds`\r\n\r\nRight, only `unused-matches`.\r\n\r\n> I would suggest to just go for `-Wall` and selectively disable stuff so we capture all the unused stuff GHC has to offer.\r\n\r\nI don't disagree but you're not arguing to extend the scope of this PR are you?\r\n",
        "createdAt" : "2020-06-19T18:25:10Z",
        "updatedAt" : "2020-06-19T18:25:11Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "34a64fb9-58c8-49c4-9d5c-b2487f5b820c",
        "parentId" : "e924d55a-3d2e-4a0f-8cd9-ef615e214b0c",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "> I don't disagree but you're not arguing to extend the scope of this PR are you?\r\n\r\nI’m not suggesting to change what we do but I am suggesting to enable more warnings so we have an overview of which ones are solved now and which ones are still pending.",
        "createdAt" : "2020-06-19T18:26:24Z",
        "updatedAt" : "2020-06-19T18:26:24Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2288b711-5926-40ce-ad14-39edf52e61c0",
        "parentId" : "e924d55a-3d2e-4a0f-8cd9-ef615e214b0c",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "> > Oh I see, you didn’t enable `-Wunused-local-binds`\r\n> \r\n> Right, only `unused-matches`.\r\n> \r\nIndeed with `unused-local-binds` we get the expected warnings on `a, b`.",
        "createdAt" : "2020-06-19T18:27:10Z",
        "updatedAt" : "2020-06-19T18:27:10Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "af0f65ec-023c-422f-abb8-c9149348da42",
        "parentId" : "e924d55a-3d2e-4a0f-8cd9-ef615e214b0c",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "> > I don't disagree but you're not arguing to extend the scope of this PR are you?\r\n> \r\n> I’m not suggesting to change what we do but I am suggesting to enable more warnings so we have an overview of which ones are solved now and which ones are still pending.\r\n\r\nSounds good. Yep more to do.",
        "createdAt" : "2020-06-19T18:35:54Z",
        "updatedAt" : "2020-06-19T18:35:54Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d1d4fdf697ac5c029167f8d8e4fd28d3f308c8f",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +19,23 @@    -- Include interaction with local binds.\n    let revokeRetVal = ()\n        (sig, obs) = (p, q)\n        assertion = True\n        plainEnglish = \"Chop wood, carry water.\""
  }
]