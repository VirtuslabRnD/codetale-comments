[
  {
    "id" : "e74def25-a1eb-47b1-9004-86db5bf2525e",
    "prId" : 6598,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cdddd4c-e925-4dd4-9943-fcee0a987253",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I’m a bit surprised to not see a case that checks that type lambdas don’t turn things into values. Did you intentionally omit this?",
        "createdAt" : "2020-07-21T10:57:14Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "982abdbe-4539-46cf-af70-a4cbc2b3d182",
        "parentId" : "6cdddd4c-e925-4dd4-9943-fcee0a987253",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "It's hard to test in DAML because of Damas–Milner. :-/\r\n\r\nIt's also a bit out of scope for this module, which tests that things *are* values, not that they *aren't* values. (Ok, I know that's a weak argument...)\r\n\r\nI think we should definitely test this in the DAML-LF version of the spec tests.",
        "createdAt" : "2020-07-21T11:35:34Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "6f2035a3-57fb-48b8-b1e0-57f480355747",
        "parentId" : "6cdddd4c-e925-4dd4-9943-fcee0a987253",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I had an example in https://github.com/digital-asset/daml/pull/5547#issuecomment-616565362 that exhibits the issue.",
        "createdAt" : "2020-07-21T11:39:23Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "083b7079-061d-46e9-89c6-b6bc36c63145",
        "parentId" : "6cdddd4c-e925-4dd4-9943-fcee0a987253",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "I added this as test in the other file. Thanks!",
        "createdAt" : "2020-07-21T12:02:09Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "af53832e-94d2-49b9-a696-b472a3b540c5",
        "parentId" : "6cdddd4c-e925-4dd4-9943-fcee0a987253",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Thanks for adding it!",
        "createdAt" : "2020-07-21T12:03:28Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b5b8d6f9826b681bfc839a684099b92c822db82",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@module SemanticsValue where\n\nmain = scenario do\n    let _ : Int -> Int = (\\ (x : Int) -> error \"ValExpAbs\")\n    -- ValExpTyAbsNat is tested in SemanticsValueSince17"
  }
]