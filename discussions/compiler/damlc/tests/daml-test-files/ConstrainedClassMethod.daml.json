[
  {
    "id" : "5c0fb035-f662-4ddf-b304-e42bb9d9eb2a",
    "prId" : 4023,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4023",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a2ff421-247e-4511-845a-592862e9247e",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We decided to just disable this for now. We don’t use this on our large internal DAML codebase. There is a reasonable workaround with manual dictionary passing and if it does become a record we could either handle this in the LF conversion or support infinite types (something like OCaml’s `-rectypes`).",
        "createdAt" : "2020-01-23T13:19:01Z",
        "updatedAt" : "2020-01-24T08:42:32Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "07baaa10-61ec-4fb2-9689-ff90686c47fc",
        "parentId" : "6a2ff421-247e-4511-845a-592862e9247e",
        "authorId" : null,
        "body" : "Seems reasonable to me. I don't know of any natural examples of a class that requires itself as a constraint.",
        "createdAt" : "2020-01-24T08:36:42Z",
        "updatedAt" : "2020-01-24T08:42:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "7756a58dadb0273a3e473dd5238baa88e5f39809",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +9,13 @@    bar : Eq t => t -> t\n\n-- This would create a recursive type synonym.\n-- For now, we do not support this. As a workaround\n-- you can do manual dictionary passing."
  },
  {
    "id" : "d316e2f1-7634-4082-995f-7a1b2d742b88",
    "prId" : 2632,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2632",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6003ce16-7b9e-4287-b8d6-a182ca693f4d",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "fwiw it’s not that much of an edge case `foldMap` is the first non-artifical example that comes to mind.",
        "createdAt" : "2019-08-22T12:34:09Z",
        "updatedAt" : "2019-08-22T13:17:36Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b112a03d-6f89-47ec-876c-0d2596a143fb",
        "parentId" : "6003ce16-7b9e-4287-b8d6-a182ca693f4d",
        "authorId" : null,
        "body" : "Good point! 👍 ",
        "createdAt" : "2019-08-22T13:17:59Z",
        "updatedAt" : "2019-08-22T13:17:59Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "bbcd2c41d3a0b442a584d575d784209b0d007d0b",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +6,10 @@module ConstrainedClassMethod where\n\nclass A t where\n    foo : t -> t\n    bar : Eq t => t -> t"
  }
]