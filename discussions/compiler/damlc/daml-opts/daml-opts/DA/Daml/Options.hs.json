[
  {
    "id" : "0e079116-1055-416b-9e7f-81ba95021f14",
    "prId" : 8278,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8278",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5806bcc-d929-4aff-abcb-067eea76b600",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "What's the idea behind this flexibility here?",
        "createdAt" : "2020-12-14T14:21:37Z",
        "updatedAt" : "2020-12-14T15:31:32Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "2212ea87-bbcd-4efa-9a66-06d9a466bfe4",
        "parentId" : "c5806bcc-d929-4aff-abcb-067eea76b600",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "It's because `locateRunfiles` sometimes returns the `ghcversion.h` file produced by the bazel rule, or returns the bundled resources directory.\r\n\r\nThis is super janky and I *think* I can fix it to always return a directory (by asking for \"compiler/damlc\" instead of the specific file).\r\n\r\nI thin we were just using `locatRunfiles` wrongly, here.",
        "createdAt" : "2020-12-14T14:27:16Z",
        "updatedAt" : "2020-12-14T15:31:32Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "dc876ce1-424b-4791-8158-512e8d3c1098",
        "parentId" : "c5806bcc-d929-4aff-abcb-067eea76b600",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "I tried to fix this and got a bunch of missing `ghcversion.h` errors on windows, so my conclusion is that the jank is somehow necessary because of Windows. :-( I guess this is some \"Bazel.Runfiles on Windows\" weirdness.",
        "createdAt" : "2020-12-14T15:29:29Z",
        "updatedAt" : "2020-12-14T15:31:32Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "c288b9d5-6e2d-4b5b-be58-91fb3142599a",
        "parentId" : "c5806bcc-d929-4aff-abcb-067eea76b600",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "> somehow necessary because of Windows\r\n\r\nhas convinced me. ðŸ˜¸",
        "createdAt" : "2020-12-14T17:14:53Z",
        "updatedAt" : "2020-12-14T17:14:53Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc7f24cc6011c4842037ebf4e7ba26bef0fc8363",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +435,439 @@    resourcesDir <- locateRunfiles (mainWorkspace </> \"compiler\" </> \"damlc\" </> \"ghcversion.h\")\n    isDirectory <- doesDirectoryExist resourcesDir\n    let path | isDirectory = resourcesDir </> \"ghcversion.h\"\n             | otherwise = resourcesDir\n    pure path"
  },
  {
    "id" : "d8acfd49-d34f-413a-81c0-952fa91436f2",
    "prId" : 7662,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba5cc0af-9577-42ac-9914-ceec205ba805",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "The `Ord` instance for `Extension` has been added to GHC after we forked off. Thus, I use `EnumSet` instead of a regular `Data.Set` here.",
        "createdAt" : "2020-10-15T16:37:45Z",
        "updatedAt" : "2020-10-15T17:00:53Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "8810e0d0-7edc-45b1-bf52-6858f30956d4",
        "parentId" : "ba5cc0af-9577-42ac-9914-ceec205ba805",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Seems reasonable although you could also just throw an orphan instance somewhere.",
        "createdAt" : "2020-10-15T16:40:19Z",
        "updatedAt" : "2020-10-15T17:00:53Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "c2ff1f1e-2d3b-4d8a-885c-2cf4b7707c61",
        "parentId" : "ba5cc0af-9577-42ac-9914-ceec205ba805",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "After spending so much time thinking about typeclass issues, I strongly dislike orphan instances. ðŸ˜°",
        "createdAt" : "2020-10-15T16:52:56Z",
        "updatedAt" : "2020-10-15T17:00:59Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3f23b1d5318f31cad2e008d6d135042c951a898",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +274,278 @@\n-- | Extensions which we support with data-dependencies.\ndataDependableExtensions :: ES.EnumSet Extension\ndataDependableExtensions = ES.fromList $ xExtensionsSet ++\n  [ -- useful for beginners to learn about type inference"
  },
  {
    "id" : "1b530d14-4875-42c7-a0b6-807acae164fb",
    "prId" : 7318,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7318",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34574403-586a-4c71-87e2-6610c111a2c0",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "If we put the DALF for DAML Script into the DAR for DAML Triggers, wouldn't that solve the problem as well? If so, I would prefer that approach over having this custom hook here.",
        "createdAt" : "2020-09-04T11:33:23Z",
        "updatedAt" : "2020-09-04T11:33:35Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "df1c5e4f-04b3-427a-9a63-ab1f0339666a",
        "parentId" : "34574403-586a-4c71-87e2-6610c111a2c0",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "No it doesnâ€™t. We need the GHC interface files.",
        "createdAt" : "2020-09-04T11:38:42Z",
        "updatedAt" : "2020-09-04T11:38:43Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb3ec2e69f03603a52bca3208b99778dd56cb0d6",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +471,475 @@            Nothing -> fail $ \"Cannot resolve SDK dependency '\" ++ fp ++ \"'. Use daml assistant.\"\n      | otherwise = pure fp\n    -- For `dependencies` you need to specify all transitive dependencies.\n    -- However, for the packages in the SDK that is an implementation detail\n    -- so we automagically insert `daml-script` if youâ€™ve specified `daml-trigger`."
  },
  {
    "id" : "13eabf57-cc43-4d05-9726-0a6153af56d7",
    "prId" : 6467,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c53c43c-7d8b-46a7-a6e0-1934fe30e559",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Not sure we want to. It might cause a fair amount of noise for some projects that havenâ€™t payed attention to this so far and itâ€™s purely a stylistic thing not a bug.",
        "createdAt" : "2020-06-23T15:39:58Z",
        "updatedAt" : "2020-06-23T15:41:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "31344f4c-79f8-4c35-849d-2255fde5f34f",
        "parentId" : "1c53c43c-7d8b-46a7-a6e0-1934fe30e559",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Well, of course, I am biased ðŸ¤£ ",
        "createdAt" : "2020-06-23T15:42:22Z",
        "updatedAt" : "2020-06-23T15:42:22Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "0730b211-1cc3-41df-9438-0483ae3fe66c",
        "parentId" : "1c53c43c-7d8b-46a7-a6e0-1934fe30e559",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I would enable it on _my_ projects but thatâ€™s different from throwing potentially thousands of warnings at our users :slightly_smiling_face: ",
        "createdAt" : "2020-06-23T15:44:07Z",
        "updatedAt" : "2020-06-23T15:59:44Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "a7d34fcd-c4db-463a-9a2c-810e4f952a45",
        "parentId" : "1c53c43c-7d8b-46a7-a6e0-1934fe30e559",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Oh wow! We almost never agree on these sorts of things! ðŸ¤£ ",
        "createdAt" : "2020-06-23T16:01:40Z",
        "updatedAt" : "2020-06-23T16:01:41Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "567deb06e19c8c134cfcd488ee6df7d410b0a1ba",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +285,289 @@wOptsSet =\n  [ Opt_WarnUnusedImports\n-- Can enable when we are on GHC >= 8.10 (we should, after all we\n-- upstreamed it :) ).\n--  , Opt_WarnPrepositiveQualifiedModule"
  },
  {
    "id" : "4c3b31c4-91b4-4313-8dd8-bde12c4ed906",
    "prId" : 2878,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2878",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "428ca40f-e5eb-4c15-9579-bf753dba6b5e",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "What is the relationship between this and https://github.com/digital-asset/ghcide/blob/44b11667d8593ae84c48ca88e96f4f227deec096/src/Development/IDE/GHC/Util.hs#L95?",
        "createdAt" : "2019-09-11T11:22:42Z",
        "updatedAt" : "2019-09-11T14:44:31Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "601112d8-b36d-40b0-9dd4-4e9cf2b03129",
        "parentId" : "428ca40f-e5eb-4c15-9579-bf753dba6b5e",
        "authorId" : null,
        "body" : "Ah, I didn't see that. Maybe I should try to copy those platform values and see if that is defined enough for CPP. (I don't think it will be, because CPP exposes platform info as `-D` flags.)",
        "createdAt" : "2019-09-11T11:37:57Z",
        "updatedAt" : "2019-09-11T14:44:31Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "387e82d5-b3f4-42a3-a056-a29dca221558",
        "parentId" : "428ca40f-e5eb-4c15-9579-bf753dba6b5e",
        "authorId" : null,
        "body" : "The `fakeDynFlags` platform settings does not work for `CPP`! It's missing required fields.\r\n\r\nI changed `platformUnregisterised` to `True` to match `fakeDynflags` though. Thanks :-)",
        "createdAt" : "2019-09-11T14:46:12Z",
        "updatedAt" : "2019-09-11T14:46:12Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "4b4ee9add38694378a528445e0e9b48ef1ab7dec",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +259,263 @@    -- for everyone even if they don't use CPP.\n    addPlatformFlags = alterSettings $ \\s -> s\n        { sTargetPlatform = P.Platform\n            { platformArch = P.ArchUnknown\n            , platformOS = P.OSUnknown"
  },
  {
    "id" : "f1717eaf-1a26-4bff-a5c6-a4de6859fe87",
    "prId" : 2871,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2871",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a18af85-544c-4efd-b3cb-13e60f88e99f",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : ":ghost:",
        "createdAt" : "2019-09-11T08:15:49Z",
        "updatedAt" : "2019-09-11T08:58:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "40382b239dcd82ff6195ff55027641feacaa396f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +150,154 @@    -- type classes\n  , MultiParamTypeClasses, FlexibleContexts, FlexibleInstances, GeneralizedNewtypeDeriving, TypeSynonymInstances\n  , DefaultSignatures, StandaloneDeriving, FunctionalDependencies, DeriveFunctor, UndecidableSuperClasses\n    -- let generalization\n  , MonoLocalBinds"
  }
]