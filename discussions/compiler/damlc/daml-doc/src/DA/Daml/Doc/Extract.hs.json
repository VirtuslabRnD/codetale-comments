[
  {
    "id" : "5f42badb-7679-461e-9073-859a014d3a9c",
    "prId" : 8751,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8751",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a420fab-f40e-4dce-ae87-56c327ab16b2",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "what’s up with those 2 lines?",
        "createdAt" : "2021-02-04T12:59:53Z",
        "updatedAt" : "2021-02-04T19:27:21Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "0c6bd168-75c4-443f-bbd0-22d2492f8150",
        "parentId" : "3a420fab-f40e-4dce-ae87-56c327ab16b2",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "probably reformatting messup, I'll delete them.",
        "createdAt" : "2021-02-04T15:50:45Z",
        "updatedAt" : "2021-02-04T19:27:21Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "34e3d8872d9fb191fa4b829b53b53d32178dc1dd",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +55,59 @@import Data.Either\n\n\n\n-- | Extract documentation in a dependency graph of modules."
  },
  {
    "id" : "17489f10-7702-4211-99ff-ba8b76eb7689",
    "prId" : 4112,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4112",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5f52a57-a091-44c7-ae8f-6f046cc6cc36",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This looks like we will attach a `DocCommentPrev` at the beginning to the next declaration which seems odd. I _think_ this is the same behavior as before but it seems weird. Is there a case where this actually makes sense?",
        "createdAt" : "2020-01-20T14:49:15Z",
        "updatedAt" : "2020-01-20T15:37:55Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e50f0796-999f-4e83-9bbc-669673cf402b",
        "parentId" : "f5f52a57-a091-44c7-ae8f-6f046cc6cc36",
        "authorId" : null,
        "body" : "I'm not sure if it comes up in practice, but if a `DocCommentNext` is followed up by a `DocCommentPrev` ... or we have a `DocCommentPrev` at the beginning of the list ... this will treat the `DocCommentPrev` as a `DocCommentNext` instead of silently ignoring it or treating it as a standalone declaration. ",
        "createdAt" : "2020-01-20T15:36:25Z",
        "updatedAt" : "2020-01-20T15:37:55Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "963c4e5ed4bd0c0fab26ee50c703b5f58e68582b",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +103,107 @@collectDocs :: [LHsDecl GhcPs] -> [DeclData]\ncollectDocs ds\n    | (nextDocs, decl:ds') <- spanMaybe getNextOrPrevDoc ds\n    , (prevDocs, ds'') <- spanMaybe getPrevDoc ds'\n    = DeclData decl (joinDocs nextDocs prevDocs)"
  },
  {
    "id" : "ac473231-bd84-49f7-ae03-574580ed04ff",
    "prId" : 3670,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3670",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab5ced63-7ccb-4c8b-969d-9ee9d48b22ae",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "@associahedron I’ve hacked around this for now since I don’t want to clutter this PR too much but we should kill the generic templates support from `daml-docs` in a separate PR.",
        "createdAt" : "2019-11-29T09:48:59Z",
        "updatedAt" : "2019-11-29T13:04:50Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "86b9ba01-0f18-4e0f-83fb-f2ce5143424c",
        "parentId" : "ab5ced63-7ccb-4c8b-969d-9ee9d48b22ae",
        "authorId" : null,
        "body" : "Makes sense. I can do it if you don't mind.",
        "createdAt" : "2019-11-29T11:17:57Z",
        "updatedAt" : "2019-11-29T13:04:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "abb363aad65b2173e41b6b0e0e9a16e83c6474a2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +124,128 @@            (adts, md_templateInstances) =\n                partitionEithers . flip map filteredTyCons $ \\adt ->\n                    case find (\\td -> td_name td == ad_name adt) md_templates of\n                        Nothing -> Left adt\n                        Just td -> Right TemplateInstanceDoc"
  },
  {
    "id" : "d0aa4eed-5c0a-4e6b-bab8-1daf19f9f750",
    "prId" : 3165,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3165",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e653d4e3-74b3-418d-b2ee-0d127fdb6a55",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Can we be more specific here and at least check the module name this is coming from, maybe even the package id?",
        "createdAt" : "2019-10-14T11:56:37Z",
        "updatedAt" : "2019-10-14T15:24:22Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "dd59302e-b6ac-46a2-99ec-efb73e4eeaa5",
        "parentId" : "e653d4e3-74b3-418d-b2ee-0d127fdb6a55",
        "authorId" : null,
        "body" : "Based on my reading of the code, there's no way to be more specific here without rewriting the way we extract template data from the module. That's probably worth doing at some point.",
        "createdAt" : "2019-10-14T15:34:16Z",
        "updatedAt" : "2019-10-14T15:34:28Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "b1bf6930f83002bbac256a37b2ca19c53473b676",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +511,515 @@                             }\n\n            dummyName (Typename \"Archive\") = Typename \"Archive\"\n            dummyName (Typename t) = Typename $ \"External:\" <> t\n"
  },
  {
    "id" : "2cd2ecf9-b999-4e69-898c-d31bef4e6d29",
    "prId" : 2667,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2667",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb4fdc95-2ef1-47b4-9cfb-29524c391938",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Note to myself and other reviewers: This corresponds to most of what `memberDocs` did before. What changed is that now we postprocess this with `getMethodDocs`.",
        "createdAt" : "2019-08-27T11:15:17Z",
        "updatedAt" : "2019-08-27T12:05:42Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "d42c9a445d00d6609a82fee50c9ba51fa1ee4914",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +296,300 @@    -- and then use collectDocs.\n    -- This is the equivalent of Haddock’s Haddock.Interface.Create.classDecls.\n    subDecls :: [(LHsDecl GhcPs, Maybe DocText)]\n    subDecls = collectDocs . sortOn getLoc $ decls\n    decls = docs ++ defs ++ sigs ++ ats"
  },
  {
    "id" : "1e38a41e-ab29-4ad6-8568-6749031d0526",
    "prId" : 2632,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2632",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b38dbba9-e7d8-43b1-8dc1-67c7b5e4f9f9",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Do we expect to ever reach this case atm? If not, maybe just call `error` so we see if we mess it up instead of silently doing something that might be wrong?",
        "createdAt" : "2019-08-22T12:29:14Z",
        "updatedAt" : "2019-08-22T13:17:36Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbcd2c41d3a0b442a584d575d784209b0d007d0b",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +343,347 @@\n                _ -> Just context\n                    -- TODO: Move to using a more appropriate type\n                    -- for contexts in damldocs, to avoid this case.\n        }"
  },
  {
    "id" : "9a7ae923-b12e-45f2-94fa-d1048cdde0a9",
    "prId" : 2589,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2589",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27255a81-914d-40f7-840d-b948dc713a8a",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Does it ever happen that we get `Nothing` here but `nameModule_maybe` returns `Just`? My understanding was that during compilation we have an `IndefiniteUnitId` for the current package so that case should already check for whether the name is from the current package.",
        "createdAt" : "2019-08-19T10:03:37Z",
        "updatedAt" : "2019-08-21T09:33:33Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "0f5f924e-7188-49e9-afcc-f52e2372944e",
        "parentId" : "27255a81-914d-40f7-840d-b948dc713a8a",
        "authorId" : null,
        "body" : "Hm. It seems to affect the docs somehow (if I remove this check, the instances disappear from the golden tests ... which seems like a bug. But it does suggest that by the time we look at instances the unit IDs are no longer indefinite.). I need to investigate this further.",
        "createdAt" : "2019-08-21T09:14:22Z",
        "updatedAt" : "2019-08-21T09:33:33Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "8c83f2cc-e579-4500-8ace-20fb67c79ad0",
        "parentId" : "27255a81-914d-40f7-840d-b948dc713a8a",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "It could very well just be me misunderstanding unit ids. No need to investigate this before merging or even anytime soon if it works but maybe add a comment.",
        "createdAt" : "2019-08-21T09:15:49Z",
        "updatedAt" : "2019-08-21T09:33:33Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "80f5251971e764b85072660bef0b75497f5e4d90",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +647,651 @@    let ghcName = tyConName tycon\n        referencePackage = do\n            guard (not (nameIsHomePackage dc_ghcMod ghcName))\n            mod <- nameModule_maybe ghcName\n            modulePackage mod"
  },
  {
    "id" : "b7f529e9-3022-4e03-b543-cb24b588a889",
    "prId" : 2492,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2492",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82fcd136-26dd-43d5-9b58-deb695d37abd",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "🕴️",
        "createdAt" : "2019-08-12T14:38:12Z",
        "updatedAt" : "2019-08-12T14:46:58Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9036c763dbb375fc675db8191ae81710f66b9b0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +704,708 @@\n    -- Special case for unsaturated (->) to remove the levity arguments.\n    TyConApp tycon (_:_:bs) | isFunTyCon tycon ->\n        TypeApp\n            Nothing"
  },
  {
    "id" : "4f5d9deb-2f38-4851-a2aa-fb02e7e6efd0",
    "prId" : 2487,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2487",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "279652c8-4ced-4f04-8948-3c0bb045dd6f",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I wonder if it would make sense to add a phantom type parameter indicating the “phase”, i.e., whetehr we are before or after `distributeInstanceDocs`.",
        "createdAt" : "2019-08-12T12:13:20Z",
        "updatedAt" : "2019-08-12T12:42:13Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "11f6f4cd-a4e1-4fbb-b586-93a234721da6",
        "parentId" : "279652c8-4ced-4f04-8948-3c0bb045dd6f",
        "authorId" : null,
        "body" : "I think it's a bit much, but I'll keep it in mind for the future.",
        "createdAt" : "2019-08-12T12:24:37Z",
        "updatedAt" : "2019-08-12T12:42:13Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "e788b2a993c57598623ba9cd06bff1615ac6bb39",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +364,368 @@            ad_anchor = Just $ typeAnchor dc_modname ad_name\n            ad_constrs = mapMaybe (constrDoc ad_name) . dd_cons $ tcdDataDefn\n            ad_instances = Nothing -- filled out later in 'distributeInstanceDocs'\n        guard (exportsType dc_exports ad_name)\n        Just (ad_name, ADTDoc {..})"
  },
  {
    "id" : "fb77f108-38a6-4041-b271-64de7781089d",
    "prId" : 2394,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52bdf386-7577-460a-8311-9084e24f76a5",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "This option seems weird to me. Why would you want to qualify stuff from the same package but not stuff from other packages?",
        "createdAt" : "2019-08-05T11:06:17Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "1743c756-d169-4abb-a69c-b40c18f77cb4",
        "parentId" : "52bdf386-7577-460a-8311-9084e24f76a5",
        "authorId" : null,
        "body" : "That's why it's an option from many. I think the main reason you'd want it is if your package has some strange convention (...like where you name all your types `T` like in OCaml...), but you still want the standard library (& other packages) to be unqualified like the default.",
        "createdAt" : "2019-08-05T11:11:27Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "85b19ef2-26be-4f4d-95a0-697ae58f42ee",
        "parentId" : "52bdf386-7577-460a-8311-9084e24f76a5",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "That makes sense. Thanks a lot for the explanation. I have not thought of using the OCaml convention in DAML but I know some people who do use it. :)",
        "createdAt" : "2019-08-05T11:20:22Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b9d15a77e50bf8780331c378c6b7080345b1c42",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +58,62 @@data QualifyTypes\n    = QualifyTypesAlways\n    | QualifyTypesInPackage\n    | QualifyTypesNever\n    deriving (Eq, Show, Read)"
  },
  {
    "id" : "9e509c51-d163-4cbf-9c71-18d453e3eb40",
    "prId" : 2394,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbedfdee-df49-4d9e-9865-fe80aa1eb7c4",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm not convinced this option is a good idea in a Haskell-based language since you cannot refer to `X.Y.z` as `Y.z` when you're in `X`. (In OCaml this would be a great option though.)",
        "createdAt" : "2019-08-05T11:08:09Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "0b2e6078-ead2-4acf-b547-db67ba889f33",
        "parentId" : "cbedfdee-df49-4d9e-9865-fe80aa1eb7c4",
        "authorId" : "47456c32-5020-4def-a2b4-79c67e41159e",
        "body" : "I see this option as a viable compromise to achieve a short but qualified name . Use case being something like `import X.Y.Z.Blah as Blah` - imported `stuff` may come out as `Z.Blah.stuff` but that is better than the full name or simply `stuff`.",
        "createdAt" : "2019-08-05T11:27:32Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : "47456c32-5020-4def-a2b4-79c67e41159e",
        "tags" : [
        ]
      },
      {
        "id" : "134c5170-03e3-4993-94ca-b7c0a99fe825",
        "parentId" : "cbedfdee-df49-4d9e-9865-fe80aa1eb7c4",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I disagree that `Z.Blah.stuff` is better than `X.Y.Z.Blah.stuff` or `stuff`. If there's actually something whose fully qualified names is `Z.Blah.stuff`, this can be incredibly confusing.",
        "createdAt" : "2019-08-05T12:21:46Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "69042e1b-871d-4832-bba4-adefc1057f42",
        "parentId" : "cbedfdee-df49-4d9e-9865-fe80aa1eb7c4",
        "authorId" : null,
        "body" : "The links are still pointing to the right place though, it's just the text that is a little more qualified. This really is for the use case where fully unqualified names (the default) are too ambiguous (e.g. with OCaml convention), but fully qualified names are overly verbose. Some ambiguity is expected.",
        "createdAt" : "2019-08-05T12:25:34Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "0b9d15a77e50bf8780331c378c6b7080345b1c42",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +52,56 @@    { eo_qualifyTypes :: QualifyTypes\n        -- ^ qualify non-local types\n    , eo_simplifyQualifiedTypes :: Bool\n        -- ^ drop common module prefix when qualifying types\n    } deriving (Eq, Show, Read)"
  },
  {
    "id" : "a5e97442-0165-4d59-885c-af2abf0941f5",
    "prId" : 2394,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e6b330b-ae53-4070-be09-6a0f0bf81217",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Is `dc_modname` the same as the root module of your DALF? In that case, I am not sure this option is very useful as a lot of people seem to just call that module `LibraryModules`. Maybe an option that strips away everything but the last component would be more useful? (I realize that this makes things potentially ambiguous.)",
        "createdAt" : "2019-08-05T11:32:52Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "32f926df-ef93-4c58-8549-52cd1ffa561b",
        "parentId" : "2e6b330b-ae53-4070-be09-6a0f0bf81217",
        "authorId" : null,
        "body" : "`dc_modname` is the name of the current module.\r\n\r\n> Maybe an option that strips away everything but the last component would be more useful?\r\n\r\nThat's definitely another possibility.",
        "createdAt" : "2019-08-05T11:37:41Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "d5515a2b-0ae8-44cd-a733-5ea8d5da6e5f",
        "parentId" : "2e6b330b-ae53-4070-be09-6a0f0bf81217",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Oh I see, in that case the current behavior seems fine.",
        "createdAt" : "2019-08-05T11:39:32Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b9d15a77e50bf8780331c378c6b7080345b1c42",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +625,629 @@-- periods. For instance @dropCommonModulePrefix \"Foo.BarBaz\" \"Foo.BarSpam\"@\n-- will evaluate to @\"BarSpam\"@, not @\"Spam\"@.\ndropCommonModulePrefix :: Modulename -> Modulename -> Modulename\ndropCommonModulePrefix (Modulename baseMod) (Modulename targetMod) =\n    Modulename . T.intercalate \".\" $"
  }
]