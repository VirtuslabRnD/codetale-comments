[
  {
    "id" : "b84e3e04-577d-4da4-abcd-854d895db08f",
    "prId" : 2351,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2351",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c66de75-1eb1-4c03-89b3-36086752df5b",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Oh I guess it might be because `length \"Field\" = 5`? In that case, maybe just use `maximum $ length \"Field\" : length \"Type\" : …`.",
        "createdAt" : "2019-07-31T11:17:07Z",
        "updatedAt" : "2019-07-31T16:47:11Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e7988264-4e26-443f-a74b-fa8f1ddfc3ef",
        "parentId" : "1c66de75-1eb1-4c03-89b3-36086752df5b",
        "authorId" : null,
        "body" : "Yes, that's right!",
        "createdAt" : "2019-07-31T12:08:15Z",
        "updatedAt" : "2019-07-31T16:47:11Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "43cf20febd7fb63e1a575296280a2c3177148144",
    "line" : 327,
    "diffHunk" : "@@ -1,1 +112,116 @@        [ T.concat\n            [ \"| \"\n            , adjust fLen \"Field\"\n            , \" | \"\n            , adjust fLen \"Type\""
  },
  {
    "id" : "0cb30478-615e-4feb-a385-d466d470485d",
    "prId" : 2351,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2351",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48797321-fe3f-43f2-829b-5e6f7a963b16",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Is there any reason why you’re using `mconcatMap` instead of `foldMap` which is even in `base`? This PR does not introduce this but I would generally prefer `foldMap` since I had to check if `mconcatMap` actually does what I thought since I usually don’t use it.",
        "createdAt" : "2019-07-31T11:28:16Z",
        "updatedAt" : "2019-07-31T16:47:11Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "4aea32af-7340-463c-9f4a-25cc06524151",
        "parentId" : "48797321-fe3f-43f2-829b-5e6f7a963b16",
        "authorId" : null,
        "body" : "I must be weird because I find `mconcatMap` more intuitive as a generalized  `concatMap`. It also has a more specific type than `foldMap`.",
        "createdAt" : "2019-07-31T12:13:12Z",
        "updatedAt" : "2019-07-31T16:47:11Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "43cf20febd7fb63e1a575296280a2c3177148144",
    "line" : 238,
    "diffHunk" : "@@ -1,1 +45,49 @@renderMdText :: RenderEnv -> RenderText -> T.Text\nrenderMdText env = \\case\n    RenderConcat ts -> mconcatMap (renderMdText env) ts\n    RenderPlain text -> escapeMd text\n    RenderStrong text -> T.concat [\"**\", escapeMd text, \"**\"]"
  },
  {
    "id" : "60a6629e-12b4-4d68-82e8-7580cd5814fb",
    "prId" : 2269,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2269",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57032a2a-7cb4-4d91-ba92-f1eb197a90fb",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "When do we expect `fct_type` to be `Nothing`? For partial type signatures?",
        "createdAt" : "2019-07-24T06:51:03Z",
        "updatedAt" : "2019-07-24T06:53:50Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "c7e5ba88-db23-44f0-bdb1-d2e8f887cfe6",
        "parentId" : "57032a2a-7cb4-4d91-ba92-f1eb197a90fb",
        "authorId" : null,
        "body" : "Whenever we can't find the function's type info based on the name for some reason. Actually the only time this happens in the standard library is with the GHC.Enum functions (`eftInt`, `efdInt`, etc) and I'm not sure *why*. ",
        "createdAt" : "2019-07-24T08:03:17Z",
        "updatedAt" : "2019-07-24T08:03:17Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "701dfe5e-1bce-4143-9148-d2e72526fd2b",
        "parentId" : "57032a2a-7cb4-4d91-ba92-f1eb197a90fb",
        "authorId" : null,
        "body" : "On further investigation, it seems this only happens when functions are not exported. (Does GHC change the names of non-exported functions, or get rid of the definitions altogether in some cases?) Since we shouldn't be showing these in the docs anyway, I think it'll be easy to make the type a mandatory part of the FunctionDocs.",
        "createdAt" : "2019-07-24T08:17:22Z",
        "updatedAt" : "2019-07-24T08:17:22Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "4ff143ad6ff625aa8af6139a6c99374609e55f00",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +215,219 @@        [ \"&nbsp; : \"\n        , maybe \"\" ((<> \" => \") . type2md env) fct_context\n        , maybe \"\\\\_\"  (type2md env) fct_type\n        ]\n    , renderDocText fct_descr"
  },
  {
    "id" : "f0ae293d-a8ca-4581-ac66-881d3be9b4cc",
    "prId" : 2269,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2269",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "180ed211-c566-49cb-828a-406d095f7567",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "What is the rational for having a `&nbsp;` followed by a regular space? This seems odd to me.",
        "createdAt" : "2019-07-24T08:45:26Z",
        "updatedAt" : "2019-07-24T08:47:14Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "f8e4f803-2edb-4031-903f-c703ee64735d",
        "parentId" : "180ed211-c566-49cb-828a-406d095f7567",
        "authorId" : null,
        "body" : "Markdown would interpret two spaces in a weird way, and `&nbsp; ` is enough to get HTML to accept this as a significant whitespace (although `&nbsp;&nbsp;` would work just as well).\r\n\r\n(But in my new PR I get rid of this anyway and start using blockquotes everywhere.)",
        "createdAt" : "2019-07-24T08:52:12Z",
        "updatedAt" : "2019-07-24T08:52:12Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "12da3315-6f3b-4e70-9586-d6c5f603450b",
        "parentId" : "180ed211-c566-49cb-828a-406d095f7567",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "That makes sense. Thanks for the explanation.",
        "createdAt" : "2019-07-24T08:53:33Z",
        "updatedAt" : "2019-07-24T08:53:41Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ff143ad6ff625aa8af6139a6c99374609e55f00",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +213,217 @@        [ \"**\", escapeMd $ unFieldname fct_name, \"**  \" ]\n    , renderLineDep $ \\env -> T.concat\n        [ \"&nbsp; : \"\n        , maybe \"\" ((<> \" => \") . type2md env) fct_context\n        , maybe \"\\\\_\"  (type2md env) fct_type"
  },
  {
    "id" : "c999080d-543a-44d4-b2f8-0dbde7bd98ef",
    "prId" : 2259,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2259",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9e9f738-ecd6-4965-bd07-4e8c2b4e48ec",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe add `braces` and `parens` helpers?",
        "createdAt" : "2019-07-23T11:03:34Z",
        "updatedAt" : "2019-07-23T16:24:56Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "44cddf09-17e2-435a-8882-8670db3246ee",
        "parentId" : "a9e9f738-ecd6-4965-bd07-4e8c2b4e48ec",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Or a `link` helper.",
        "createdAt" : "2019-07-23T12:23:15Z",
        "updatedAt" : "2019-07-23T16:24:56Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ed4fda9eea075172b450f1f9bef15880ed2a82c",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +201,205 @@            Nothing -> escapeMd $ unTypename n\n            Just anchorLoc -> T.concat\n                [ \"[\"\n                , escapeMd $ unTypename n\n                , \"](\""
  },
  {
    "id" : "302aa8f9-2dac-4ccf-bd40-e3928d574b95",
    "prId" : 2240,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2240",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33d5c55c-deee-41b6-aebf-aa93722b0536",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Might be a good idea to add a `bold x = \"**\" <> x <> \"**\"` helper.",
        "createdAt" : "2019-07-22T11:25:46Z",
        "updatedAt" : "2019-07-22T12:09:30Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cc5011d7625b29e31ecc1842db80d8f6c47d650",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +93,97 @@renderTemplateInstanceDocAsMarkdown :: TemplateInstanceDoc -> RenderOut\nrenderTemplateInstanceDocAsMarkdown TemplateInstanceDoc{..} = mconcat\n    [ renderAnchorInfix \"**template instance \" ti_anchor $\n        escapeMd (unTypename ti_name) <> \"**  \"\n    , renderLineDep $ \\env -> T.concat [\"&nbsp; = \", type2md env ti_rhs]"
  },
  {
    "id" : "5a848f1e-779d-47a6-ae2d-11138bdc1a82",
    "prId" : 2156,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2156",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa0ada4a-9cb3-4752-a890-17290497e637",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "That explanation sounds like we're rendering a paragraph. Is that correct? If so, we should reflect it in the name.",
        "createdAt" : "2019-07-16T11:43:38Z",
        "updatedAt" : "2019-07-16T11:54:08Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "016bc982aaab1c6f6d2c1e7da4db8600400ec927",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +31,35 @@\n-- | Render doc text. If Nothing, renders an empty line. If Just, renders\n-- doc text block between two empty lines.\nrenderDocText :: Maybe DocText -> RenderOut\nrenderDocText Nothing = renderLine \"\""
  },
  {
    "id" : "ab783e0a-3665-4ed2-af79-25b718e826e1",
    "prId" : 2156,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2156",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5968f012-6e85-415e-96d1-ed988ef8c36a",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm not the biggest fan of abbreviations when the actual name is not much longer. It makes it harder for new people to dive into the code base. Nothing to change now but probably worth consider in the future.",
        "createdAt" : "2019-07-16T11:46:05Z",
        "updatedAt" : "2019-07-16T11:54:08Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "016bc982aaab1c6f6d2c1e7da4db8600400ec927",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +62,66 @@\n\ntmpl2md :: TemplateDoc -> RenderOut\ntmpl2md TemplateDoc{..} = mconcat\n    [ renderAnchorInfix \"### \" td_anchor (\"Template \" <> escapeMd (unTypename td_name))"
  },
  {
    "id" : "5b13ecc2-98c7-4212-b462-9c1047fda3d6",
    "prId" : 2156,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2156",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b2f554d-c0d2-4446-8e0e-024f2b3b3c54",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Maybe rename `i` to `prec` to make it's meaning clear.",
        "createdAt" : "2019-07-16T11:48:45Z",
        "updatedAt" : "2019-07-16T11:54:08Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "016bc982aaab1c6f6d2c1e7da4db8600400ec927",
    "line" : 272,
    "diffHunk" : "@@ -1,1 +173,177 @@    f :: Int -> Type -> T.Text\n    f _ (TypeApp a n []) = link a n\n    f i (TypeApp a n as) = (if i >= 2 then inParens else id) $\n        T.unwords (link a n : map (f 2) as)\n    f i (TypeFun ts) = (if i >= 1 then inParens else id) $"
  }
]