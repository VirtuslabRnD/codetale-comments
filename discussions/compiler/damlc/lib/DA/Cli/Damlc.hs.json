[
  {
    "id" : "d52acd78-7ebe-4711-83c3-39829b721200",
    "prId" : 8439,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8439",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81eaf119-d9a9-4093-a685-a32850af1cae",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Afaict, we only need to set $HOME everywhere because `getXdgDirectory` needs it. Can we just disable telemetry if `getXdgDirectory` fails instead? I’m slightly worried users might hit this in CI as well.",
        "createdAt" : "2021-01-12T13:50:14Z",
        "updatedAt" : "2021-01-15T10:06:28Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "bc1279e8-a07a-4219-91cc-19c1325fae14",
        "parentId" : "81eaf119-d9a9-4093-a685-a32850af1cae",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "changed, I got really annoyed of setting $HOME everywhere ...",
        "createdAt" : "2021-01-12T16:24:44Z",
        "updatedAt" : "2021-01-15T10:06:28Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "535bda81-0f92-4990-ba54-cd0e44ef3bf7",
        "parentId" : "81eaf119-d9a9-4093-a685-a32850af1cae",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "So this means running damlc without having `DAML_HOME` set won’t enable telemetry? That seems perfectly acceptable to me :+1: ",
        "createdAt" : "2021-01-12T16:29:29Z",
        "updatedAt" : "2021-01-15T10:06:28Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f0b8d0f0d24e6a7afed7fb7587f940c63d65767",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +455,459 @@                  , gcpConfigDamlPath = damlPathM\n                  }\n              withLogger f = case telemetry of\n                  TelemetryOptedIn ->\n                    let logOfInterest prio = prio `elem` [Logger.Telemetry, Logger.Warning, Logger.Error] in"
  },
  {
    "id" : "b80c3568-e8c2-48a6-b298-bb9fee37b2b1",
    "prId" : 7927,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7927",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a715175e-f4c8-4f61-a41d-aab3b30e117b",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I don't think we need to pass `relativize` as an argument, do we?\r\n```suggestion\r\n                    Just out -> relativize out\r\n```",
        "createdAt" : "2020-11-10T12:57:45Z",
        "updatedAt" : "2020-11-10T13:32:09Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "3a7701e6-4b0f-42f1-a6bc-b61f108fb186",
        "parentId" : "a715175e-f4c8-4f61-a41d-aab3b30e117b",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "looks like we do, I think because the `where` clause is not relative to the lambda.",
        "createdAt" : "2020-11-10T13:35:00Z",
        "updatedAt" : "2020-11-10T13:35:00Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "acb0ae236346dd9d2204aa6425f0f07e8e942951",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +606,610 @@                  case mbOutFile of\n                    Nothing -> pure $ distDir </> name <.> \"dar\"\n                    Just out -> rel out\nexecRepl\n    :: ProjectOpts"
  },
  {
    "id" : "d78f748e-4376-4e7f-84e1-cd304fb0d412",
    "prId" : 7466,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a062e77b-3b61-4ed6-ab5c-05d57cceeaef",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "```suggestion\r\n       progDesc \"Deprecated. Compile the DAML program into a DAR\"\r\n```\r\nThis is consistent with the format @bame-da introduced in https://github.com/digital-asset/daml/pull/7458/files.",
        "createdAt" : "2020-09-23T12:47:58Z",
        "updatedAt" : "2020-09-24T09:44:50Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e6546a9e07f9fb8c292cc9d6fc4cc2f4cd61b55",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +362,366 @@cmdPackage numProcessors =\n    command \"package\" $ info (helper <*> cmd) $\n       progDesc \"Compile the DAML program into a DAR (deprecated)\"\n    <> fullDesc\n  where"
  },
  {
    "id" : "c30e7636-06e6-4895-8a47-1dcb574366db",
    "prId" : 4660,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4660",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a903e0d-28bd-4345-963a-5bd7eb568154",
        "parentId" : null,
        "authorId" : null,
        "body" : "It might be nice to add the rest of the project's dependencies/data-dependencies as well (if we're in a project), in the future.",
        "createdAt" : "2020-02-24T09:45:16Z",
        "updatedAt" : "2020-02-24T10:04:46Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "26b33599-df9c-46ae-b1d6-5eb06e098917",
        "parentId" : "3a903e0d-28bd-4345-963a-5bd7eb568154",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Yeah, either that or at least add CLI flags for adding new dependencies/data-dependencies. We also need to support adding imports.",
        "createdAt" : "2020-02-24T10:06:20Z",
        "updatedAt" : "2020-02-24T10:06:21Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "760346aad542cb7fd96ef1141ec51bc525702a51",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +615,619 @@                    , \"version: 0.0.1\"\n                    , \"source: .\"\n                    , \"dependencies:\"\n                    , \"- daml-prim\"\n                    , \"- daml-stdlib\""
  },
  {
    "id" : "bea7f4f0-0a22-41c7-b3d4-80864e76b28d",
    "prId" : 4648,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ba7bc46-1218-4c21-923b-29365a438321",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Note that this is not actually changing anything, it just makes it a bit more explicit. I thought you might be able to inject `version: null` in a `daml.yaml` but the check in `queryProjectConfigRequired` treats `null` and the absence of a field identical.",
        "createdAt" : "2020-02-21T10:35:35Z",
        "updatedAt" : "2020-02-21T10:35:39Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "8afff54f07edf4c4983b62e012c1bf961f504ef9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +483,487 @@    pSrc <- queryProjectConfigRequired [\"source\"] project\n    pExposedModules <- queryProjectConfig [\"exposed-modules\"] project\n    pVersion <- Just <$> queryProjectConfigRequired [\"version\"] project\n    pDependencies <- queryProjectConfigRequired [\"dependencies\"] project\n    pDataDependencies <- fromMaybe [] <$> queryProjectConfig [\"data-dependencies\"] project"
  },
  {
    "id" : "aafe7a4f-664b-4fbf-aba0-5bf1c332825e",
    "prId" : 4213,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4213",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bfcdee3-947f-4e14-af41-4a33c7f495a7",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "@cocreature Is this too permissive? What's the right place to add tests for this?",
        "createdAt" : "2020-01-24T22:43:47Z",
        "updatedAt" : "2020-01-28T15:01:36Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "6bcdb739-48b3-45c1-9e25-8f1337c61887",
        "parentId" : "3bfcdee3-947f-4e14-af41-4a33c7f495a7",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Should be fine I think. I don’t see any options that are less useful for `damlc ide` than they are for `damlc build`. Not sure what good tests for this would be. We have tests for the config parser but I think the parser is not the issue here. I guess you could extend the LSP tests to check different flag combinations but I’m fine to not have tests for this now.",
        "createdAt" : "2020-01-24T22:48:40Z",
        "updatedAt" : "2020-01-28T15:01:36Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba81e7635187faae2df66e955a5426793eb7a1df",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +127,131 @@        <*> debugOpt\n        <*> enableScenarioOpt\n        <*> optionsParser numProcessors (EnableScenarioService True) (pure Nothing)\n\ncmdLicense :: Mod CommandFields Command"
  },
  {
    "id" : "ff775c39-a679-4894-bd9a-529d73e47a7e",
    "prId" : 4182,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c531159-e831-43fa-b55a-2c4b88769178",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Not necessary to address this in this PR but some type signatures for these maps might be nice.",
        "createdAt" : "2020-01-27T09:36:15Z",
        "updatedAt" : "2020-01-27T09:37:26Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "06a85e217d7504649cf6665d6b337fcafda3e85b",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +813,817 @@            pure (dalfPkgMap, stableDalfPkgMap)\n\n        let allDalfPkgs =\n                [ (unitId, dalfPkg)\n                | ((unitId, _modName), dalfPkg) <- MS.toList stableDalfPkgMap ]"
  },
  {
    "id" : "9285f5bb-c14a-4a49-8e8e-9950d2bef412",
    "prId" : 4051,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fd9225b-782c-4d97-b4fb-66416ea7ffb7",
        "parentId" : null,
        "authorId" : null,
        "body" : "Surprised `either fail pure` isn't in extra. It's `requiredE` in the assistant codebase (± exception handling details), but that is neither here nor there.",
        "createdAt" : "2020-01-15T11:05:51Z",
        "updatedAt" : "2020-01-15T11:06:04Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "8070c0fdb1b2bbc5b95267b94fb75adedc260b6a",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +637,641 @@        let archive = ZipArchive.toArchive $ BSL.fromStrict dar\n        manifest <- either fail pure $ readDalfManifest archive\n        dalfs <- either fail pure $ readDalfs archive\n        pure (BSL.toStrict $ mainDalf dalfs, takeBaseName $ mainDalfPath manifest)\n  | otherwise = (, takeBaseName fp) <$> B.readFile fp"
  },
  {
    "id" : "f7a742ab-1b7b-4475-a6ee-2a0921a31861",
    "prId" : 3503,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe730b98-b4d9-4c21-8f29-475b1c3a28aa",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We should come up with a better syntax for those flags or just give up and accept them as JSON or something like that. Fine to do that separately given that I hope nobody specifies this manually :slightly_smiling_face: ",
        "createdAt" : "2019-11-18T12:29:51Z",
        "updatedAt" : "2019-11-18T20:20:05Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "3ecae221-7751-46e2-b3cb-fcb33f3ba994",
        "parentId" : "fe730b98-b4d9-4c21-8f29-475b1c3a28aa",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "my favourite option would be to just use the ghc `package-id` flag and pass it through as ghc option.",
        "createdAt" : "2019-11-18T14:08:51Z",
        "updatedAt" : "2019-11-18T20:20:05Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "e11899fa2735e5f9588b587ccc13106f6598a88d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +689,693 @@          let eqModNamesStr = map (T.unpack . LF.moduleNameString) eqModNames\n          let buildOptions =\n                  [ \"'--package=\" <> show (\"instances-\" <> pkgName1, True, [(m, m ++ \"A\") | m <- eqModNamesStr]) <> \"'\"\n                  , \"'--package=\" <> show (\"instances-\" <> pkgName2, True, [(m, m ++ \"B\") | m <- eqModNamesStr]) <> \"'\"\n                  ]"
  },
  {
    "id" : "da4df1fe-319a-4b58-b311-9c37c7996b1c",
    "prId" : 3406,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3406",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94c941c3-d220-4084-a178-0987d35eb2be",
        "parentId" : null,
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "No need to rewrite self references here, the dalf won't be linked or typechecked and for code generation it's easier if you just have the PRSelf references and translate those to the unit it.",
        "createdAt" : "2019-11-10T12:54:59Z",
        "updatedAt" : "2019-11-10T18:38:25Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "aada4ba363644b3ada5ab8ecb1443ad386c52708",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +555,559 @@            (pkgId, package) <-\n                either (fail . DA.Pretty.renderPretty) pure $\n                -- FIXME(MH): This keeps the old behaviour but seems wrong to me.\n                Archive.decodeArchive Archive.DecodeAsMain dalf\n            pure (pkgId, package, dalf, stringToUnitId name)"
  },
  {
    "id" : "7428c2b0-3b29-4afe-9d74-42cc47a45967",
    "prId" : 3399,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de6b5667-9a95-4393-8779-31e842ba70bc",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Why do we filter out `0.0.0`? The only case where I can see this being useful is immediately after a release where things are compatible for a very short amount of time. But that doesn’t seem like something anyone should rely on so I’d rather prevent it.",
        "createdAt" : "2019-11-08T12:23:48Z",
        "updatedAt" : "2019-11-08T14:53:30Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "707aba6d-8954-4b31-b94b-9afa66af14df",
        "parentId" : "de6b5667-9a95-4393-8779-31e842ba70bc",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "It's there because otherwise the assistant integration tests will fail, when they import SDK packages (which have a different sdk version than 0.0.0). ",
        "createdAt" : "2019-11-08T14:10:16Z",
        "updatedAt" : "2019-11-08T14:53:30Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "5fd9bde2-3d57-4ab3-af1f-fccf9b33781e",
        "parentId" : "de6b5667-9a95-4393-8779-31e842ba70bc",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "I added a comment, I'd like to drop it if somehow possible.",
        "createdAt" : "2019-11-08T14:13:04Z",
        "updatedAt" : "2019-11-08T14:53:30Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d9851e204dcebd5655cc9f17cb2763d0fa1942c",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +528,532 @@    deps <- handleSdkPackages $ filter (`notElem` basePackages) deps0\n    depsExtracted <- mapM extractDar deps\n    let uniqSdkVersions = nubSort $ filter (/= \"0.0.0\") $ thisSdkVer : map edSdkVersions depsExtracted\n    -- we filter the 0.0.0 version because otherwise integration tests fail that import SDK packages\n    unless (length uniqSdkVersions <= 1) $"
  },
  {
    "id" : "d1b6ea6c-a580-4c39-8d5e-f20c56bc0f73",
    "prId" : 3399,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf84fb53-469b-46cb-b938-4bf754fc4ff7",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I feel like these arguments would be easier if you inline it into the tuple, i..e,\r\n```\r\n[(m <> \"Instances\", m <> \"AInstances\") | m <- eqModNamesStr]\r\n```",
        "createdAt" : "2019-11-08T12:26:41Z",
        "updatedAt" : "2019-11-08T14:53:30Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "35794ef4-8322-4567-86b3-7890ed6246ec",
        "parentId" : "cf84fb53-469b-46cb-b938-4bf754fc4ff7",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "yes, why not!",
        "createdAt" : "2019-11-08T13:37:45Z",
        "updatedAt" : "2019-11-08T14:53:30Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d9851e204dcebd5655cc9f17cb2763d0fa1942c",
    "line" : 300,
    "diffHunk" : "@@ -1,1 +1051,1055 @@                                          , [(m', m'')\n                                            | m <- eqModNamesStr\n                                            , let m' = m <> \"Instances\"\n                                            , let m'' = m <> \"AInstances\"\n                                            ]"
  },
  {
    "id" : "aa27b3b7-a2a3-4ab6-89f5-1d303ac8ab28",
    "prId" : 3399,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7cd11e2-5bdc-41c4-895c-c8d0e9f80811",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Same here.",
        "createdAt" : "2019-11-08T12:26:50Z",
        "updatedAt" : "2019-11-08T14:53:30Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d9851e204dcebd5655cc9f17cb2763d0fa1942c",
    "line" : 307,
    "diffHunk" : "@@ -1,1 +1056,1060 @@                                          ) <> \"'\"\n                  , \"'--package=\" <> show (\"instances-\" <> pkgName2\n                                          , [(m', m'')\n                                            | m <- eqModNamesStr\n                                            , let m' = m <> \"Instances\""
  },
  {
    "id" : "8138f8f1-2b87-4b93-a20d-3c57730e64a2",
    "prId" : 3379,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a14b6fd-cf12-496a-b1b7-58bb30039df8",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Why did this change?",
        "createdAt" : "2019-11-07T14:49:25Z",
        "updatedAt" : "2019-11-07T15:06:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "499cb7f5-7d6a-4df5-b9de-100a775a3126",
        "parentId" : "0a14b6fd-cf12-496a-b1b7-58bb30039df8",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "We write the interfaces with `writeIfaceAndHie` in the next step. This way we don't do it two times.",
        "createdAt" : "2019-11-07T15:04:59Z",
        "updatedAt" : "2019-11-07T15:06:09Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "a0e31ed4-d93a-4076-a70e-ebb91e8f7ef2",
        "parentId" : "0a14b6fd-cf12-496a-b1b7-58bb30039df8",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "So this was redundant before this PR as well? Makes sense in that case, thanks for the explanation!",
        "createdAt" : "2019-11-07T15:06:18Z",
        "updatedAt" : "2019-11-07T15:06:21Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "9518843d-617e-46ba-8170-3459ef741bc7",
        "parentId" : "0a14b6fd-cf12-496a-b1b7-58bb30039df8",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "yes, this was redundant before.",
        "createdAt" : "2019-11-07T15:13:23Z",
        "updatedAt" : "2019-11-07T15:13:24Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a63b2d51d7218279407aef334b68a2efb59dadd2",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +651,655 @@            mkOptions $\n            opts\n                { optWriteInterface = False\n                , optPackageDbs = projectPackageDatabase : optPackageDbs opts\n                , optIfaceDir = Nothing"
  },
  {
    "id" : "271d538a-0f6c-43bf-a52e-faa860e3b728",
    "prId" : 3379,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "154b68f8-bbd2-4e58-8b85-9f2d17903caf",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Same question here, do we need no longer need `optIfaceDir`?",
        "createdAt" : "2019-11-07T14:51:43Z",
        "updatedAt" : "2019-11-07T15:06:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "0e285222-f42d-48b2-a151-4921e6bbd0f6",
        "parentId" : "154b68f8-bbd2-4e58-8b85-9f2d17903caf",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "same as above.",
        "createdAt" : "2019-11-07T15:05:15Z",
        "updatedAt" : "2019-11-07T15:06:09Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a63b2d51d7218279407aef334b68a2efb59dadd2",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +653,657 @@                { optWriteInterface = False\n                , optPackageDbs = projectPackageDatabase : optPackageDbs opts\n                , optIfaceDir = Nothing\n                , optIsGenerated = True\n                , optDflagCheck = False"
  },
  {
    "id" : "264a379d-5d66-459f-ad6e-b0a4af4fca76",
    "prId" : 3379,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1e87944-3945-412a-b7d2-927c63bcbedc",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We do basically the same thing in `generateAndInstallInstancesPkg` so we should probably fix that one as well (fine to leave that for a separate PR).",
        "createdAt" : "2019-11-07T14:54:03Z",
        "updatedAt" : "2019-11-07T15:06:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "a63b2d51d7218279407aef334b68a2efb59dadd2",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +612,616 @@\n                      unless (null templInstSrc) $\n                          generateAndInstallInstancesPkg\n                              templInstSrc\n                              opts"
  },
  {
    "id" : "33e6445a-978a-4cf3-84d4-b35cb08aaf9d",
    "prId" : 3358,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3358",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "daf71294-5f42-4f1a-b9a7-13764785cdd8",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I don’t understand this comment.",
        "createdAt" : "2019-11-06T14:33:51Z",
        "updatedAt" : "2019-11-06T17:52:03Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "f2b2099f-b061-4561-9b05-5c2ffb10f19f",
        "parentId" : "daf71294-5f42-4f1a-b9a7-13764785cdd8",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "we use two different zip libraries in Damlc. Here we write a zip archive generated with the first to disc and decode it with the second library. I want to just use one zip library in Damlc.hs",
        "createdAt" : "2019-11-06T14:47:18Z",
        "updatedAt" : "2019-11-06T17:52:03Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "6b5a3a7f-ef38-42b2-b62e-9a6cbb22c7ff",
        "parentId" : "daf71294-5f42-4f1a-b9a7-13764785cdd8",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Makes sense :+1:",
        "createdAt" : "2019-11-06T15:47:17Z",
        "updatedAt" : "2019-11-06T17:52:03Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b0aeb99ed4d3a42210e8653d7873d2ba828d51d",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +740,744 @@                            (FromDalf False)\n                dar <- mbErr \"ERROR: Creation of instances DAR file failed.\" mbDar\n              -- TODO (drsk) switch to different zip library so we don't have to write\n              -- the dar.\n                let darFp = instancesUnitIdStr <.> \"dar\""
  },
  {
    "id" : "adb2467e-c19b-4bae-821f-0a5d132f6cca",
    "prId" : 3342,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "483033b4-f380-4b50-b07c-443d79b4dd5a",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Is there a reason why we can’t always go for the first case, even if the SDK versions are different? Either way we should document this in a comment.",
        "createdAt" : "2019-11-05T14:53:11Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2d84906e-0a82-4d1f-9c36-82139bde38c1",
        "parentId" : "483033b4-f380-4b50-b07c-443d79b4dd5a",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "If we have different sdks we need to allow this with the flag --allow-different-sdks and also import the created instances modules with aliases. If not, we only need aliases for the modules of the two equally named packages. You can't add aliases for the instances modules in the later case, because they are not generated. I'll add a comment.",
        "createdAt" : "2019-11-05T16:10:33Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "272818c92a48fbaf19707d743912199fcaf709f7",
    "line" : 446,
    "diffHunk" : "@@ -1,1 +981,985 @@          let buildOptions\n                  | differentSdks = buildOptions0 ++ buildOptions1\n                  | otherwise = buildOptions1\n          --If we have different sdks we need to allow this with the flag --allow-different-sdks and\n          --also import the created instances modules with aliases (their names clash). If not, we"
  },
  {
    "id" : "4935b85f-e387-4f8b-a95a-c886997b63c6",
    "prId" : 3342,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9aa9d223-67d3-46ba-9ab9-24dcc8bb2adf",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We now have a `generate-src` and a `generate-gen-src` command with `generate-src` accepting a DALF and `generate-gen-src` accepting a DAR. That seems like a rather confusing UX. Can we make them consistent?",
        "createdAt" : "2019-11-05T14:58:36Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "6a7f4f62-6ea5-4f8d-92c8-fe8b13d8ab36",
        "parentId" : "9aa9d223-67d3-46ba-9ab9-24dcc8bb2adf",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "I was thinking about it. But the use cases are a bit different. You typically will call generate-src if you want to debug something and wonder what source was created from the dalf. While you typically call generate-gen-src when you want generic instances in your migration project for your dars. If I would make the second input option a dalf as well, I'd force the user to unzip his packages.",
        "createdAt" : "2019-11-05T15:33:18Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "272818c92a48fbaf19707d743912199fcaf709f7",
    "line" : 522,
    "diffHunk" : "@@ -1,1 +1083,1087 @@-- | Generate daml source files containing generic instances for data types.\nexecGenerateGenSrc :: FilePath -> Maybe String -> Maybe FilePath -> Command\nexecGenerateGenSrc darFp mbQual outDir = Command GenerateGenerics effect\n  where\n    effect = do"
  },
  {
    "id" : "83d7c735-67c9-47f8-a8f2-dec29dbfe712",
    "prId" : 3342,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90b0fbd2-83e4-4675-b305-0b7dd2651208",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Do we need to change the work dir here? It looks like we can just pass in the directory and prefix the paths in `generateAndInstallIfaceFiles` which would imho be easier to understand and avoids modifying process-global state.",
        "createdAt" : "2019-11-05T15:01:16Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "4e84ef21-c684-430a-bda6-fe38fcb962e2",
        "parentId" : "90b0fbd2-83e4-4675-b305-0b7dd2651208",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "I think we could do that but would prefer doing that in a separate PR to keep the noise of this already noisy PR lower.",
        "createdAt" : "2019-11-05T17:04:09Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "272818c92a48fbaf19707d743912199fcaf709f7",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +594,598 @@                      -- we change the working dir so that we get correct file paths for the\n                      -- interface files.\n                      withCurrentDirectory workDir $\n                          generateAndInstallIfaceFiles\n                              dalf"
  },
  {
    "id" : "ea377ef1-5e6a-40b2-8e60-65df609e20e1",
    "prId" : 3342,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6d03fd8-61bc-4f5e-8c40-868084e89874",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Why do we compare versions rather than comparing package ids? The latter seems like a more robust solution.",
        "createdAt" : "2019-11-05T15:05:09Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5eae5fe2-62e9-49d4-b58e-907f067dbf31",
        "parentId" : "b6d03fd8-61bc-4f5e-8c40-868084e89874",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "we are not interested whether we have different package id's for the same package name, we want to know whether we have a mix of packages compiled with different sdks. Comparing package id's wouldn't work I think.",
        "createdAt" : "2019-11-05T15:34:47Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "66ab9c4c-692e-44f2-8458-43ba09ac7b56",
        "parentId" : "b6d03fd8-61bc-4f5e-8c40-868084e89874",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I was thinking of comparing the package id of `daml-stdlib` not the main dalf.",
        "createdAt" : "2019-11-05T16:09:11Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b1fe8bd4-f5b4-4148-b2c8-87ab1ca2fb22",
        "parentId" : "b6d03fd8-61bc-4f5e-8c40-868084e89874",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "ah I see. so you would want to get the version of the `daml-stdlib` to figure out this sdk version or also of all dependencies (which would fail in the rare case that a a package doesn't depend on the daml-stdlib).",
        "createdAt" : "2019-11-05T16:20:38Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "272818c92a48fbaf19707d743912199fcaf709f7",
    "line" : 422,
    "diffHunk" : "@@ -1,1 +960,964 @@                  (NM.names $ LF.packageModules lfPkg2)\n          thisSdkVer <- getSdkVersion\n          let differentSdks = (length $ nubSort [sdkVer1, sdkVer2, thisSdkVer]) /= 1\n          let eqModNamesStr = map (T.unpack . LF.moduleNameString) eqModNames\n          let buildOptions0 ="
  },
  {
    "id" : "eb29296c-2b12-4816-a043-17e60e072e0a",
    "prId" : 3176,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3176",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a3f5d30-034f-4a2c-8086-266bab905e42",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I guess deduplication of DALFs with the same package id happens at this step? probably worth pointing out in a comment.",
        "createdAt" : "2019-10-15T12:04:48Z",
        "updatedAt" : "2019-10-15T14:51:02Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "7de77ef7-60dd-4944-93ff-8255872abc51",
        "parentId" : "7a3f5d30-034f-4a2c-8086-266bab905e42",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "added a comment.",
        "createdAt" : "2019-10-15T12:38:41Z",
        "updatedAt" : "2019-10-15T14:51:02Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "45fdc25e48bcb73c44106adba42b01b2161be66a",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +558,562 @@              -- different unit id's, we would loose a unit id here.\n              let pkgMap =\n                      MS.fromList [(pkgId, unitId) | (pkgId, _pkg, _bs, unitId) <- pkgs]\n              -- order the packages in topological order\n              let (depGraph, vertexToNode, _keyToVertex) ="
  },
  {
    "id" : "0a42d254-4c59-43bd-9205-bbc26be18ad3",
    "prId" : 3140,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8405a545-f136-459c-83da-d4fde3edae30",
        "parentId" : null,
        "authorId" : null,
        "body" : "Would it be better to just have one case to compiling the package db, whether it be with one or multiple SDKs? I guess it would be slower...",
        "createdAt" : "2019-10-09T12:17:57Z",
        "updatedAt" : "2019-10-09T12:26:05Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "3db9dd8b-26f9-44c2-be58-f05e7e188de7",
        "parentId" : "8405a545-f136-459c-83da-d4fde3edae30",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "That would be a lot slower.",
        "createdAt" : "2019-10-09T15:10:40Z",
        "updatedAt" : "2019-10-09T15:10:40Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "6233938c-a258-4a5e-9b47-01c666e8e9ab",
        "parentId" : "8405a545-f136-459c-83da-d4fde3edae30",
        "authorId" : null,
        "body" : "Does that mean the \"slow route\" is also taken for packages in the current SDK, as long as there is a single dependency from another SDK?",
        "createdAt" : "2019-10-09T15:23:57Z",
        "updatedAt" : "2019-10-09T15:23:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "4803bbe0-02ee-4087-bfc1-9b39a08beb11",
        "parentId" : "8405a545-f136-459c-83da-d4fde3edae30",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "currently that would just fail. but yes, as soon as you have cross sdk dependencies, we generate the interface files.",
        "createdAt" : "2019-10-09T15:39:52Z",
        "updatedAt" : "2019-10-09T15:39:52Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "27bea24afe60cba9068df256b1e821564a3b0450",
    "line" : 269,
    "diffHunk" : "@@ -1,1 +556,560 @@                  ]\n       | length uniqSdkVersions > 1 && optAllowDifferentSdks opts ->\n            -- when we compile packages with different sdk versions, we need to generate the interface files\n           do loggerH <- getLogger opts \"generate interface files\"\n              pkgs <-"
  },
  {
    "id" : "075ae272-36d1-42a4-aaea-89d411d2dc85",
    "prId" : 3129,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2860f297-495b-4527-91a4-6bb4d1b08f99",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Should we add something like `-o output_directory`?",
        "createdAt" : "2019-10-08T13:09:15Z",
        "updatedAt" : "2019-10-08T14:02:37Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "08ff964e-0079-45a7-a265-bc01730d401c",
        "parentId" : "2860f297-495b-4527-91a4-6bb4d1b08f99",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "let's keep it simple for now, I expect you create a directory where you put your dalf into and run this.",
        "createdAt" : "2019-10-08T13:57:22Z",
        "updatedAt" : "2019-10-08T14:02:37Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5e37998edf3317adac5943b55b47b77ed37b228",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +311,315 @@    progDesc \"Generate DAML source code from a dalf package\" <> fullDesc\n  where\n    cmd = execGenerateSrc <$> inputDalfOpt\n\ncmdDocTest :: Int -> Mod CommandFields Command"
  },
  {
    "id" : "91d1a582-337d-4661-b3f8-ec0d7d7536e7",
    "prId" : 2772,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2772",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e3f27b0-657d-4abf-be03-681406bae182",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I wonder if we really want to allow all arguments here. The issue with that is that `daml build` accepts different options than `daml ide` so you can end up creating a `daml.yaml` that works with `daml build` but not with `daml ide`. In #2676 I suggested only allowing `--ghc-option` initially which avoids this issue and I would probably also make this logic specific to `execIde` and `execBuild` so we avoid issue with commands that don’t accept `--ghc-option`.",
        "createdAt" : "2019-09-05T14:06:16Z",
        "updatedAt" : "2019-09-10T14:38:02Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2bdfb32f-629c-49d0-b6ce-016da7f14fb7",
        "parentId" : "7e3f27b0-657d-4abf-be03-681406bae182",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "That all seems a lot harder to grasp as a mental model for users. \"Add these to all invocations of damlc\" seems plain enough, and matches the name `damlc-options`; \"Add these to only damlc ide and damlc build, and it only supports a subbset of the options they support, and we may change how this behaves in the future\" would seem a bit harder for me as a user. I would personally prefer the simple, straightforward behaviour even if it sometimes mean I end up cutting myself.",
        "createdAt" : "2019-09-05T16:00:28Z",
        "updatedAt" : "2019-09-10T14:38:02Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "fbb073b8-f1fb-40e1-8e5b-b67d32ed9e0e",
        "parentId" : "7e3f27b0-657d-4abf-be03-681406bae182",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I’m fine with allowing arbitrary flags and expecting users to get this right but I believe that we do at least need to limit the commands affected by this.\r\nThere are some commands that do not support `--ghc-options` (e.g. `damlc visualize`) so you would literally be unable to have a `daml.yaml` that sets `--ghc-options` for `damlc build` and `damlc ide` while not breaking `damlc visualize`.",
        "createdAt" : "2019-09-05T16:15:33Z",
        "updatedAt" : "2019-09-10T14:38:02Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "ccad67cf98292f7fae9420c08748172e68348f0e",
    "line" : 922,
    "diffHunk" : "@@ -1,1 +1065,1069 @@    let parse = ParseArgs.lax (parserInfo numProcessors)\n    cliArgs <- getArgs\n    damlYamlArgs <- cliArgsFromDamlYaml\n    let (_, tempParseResult) = parse cliArgs\n    -- Note: need to parse given args first to decide whether we need to add"
  },
  {
    "id" : "eca2ec52-f198-4054-bdb4-ebbc97fb6d0a",
    "prId" : 2689,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2689",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79a051b7-584a-4b6b-a5d8-109807241534",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Do we actually still produce DARs that satisfy this assumption?",
        "createdAt" : "2019-08-28T13:25:20Z",
        "updatedAt" : "2019-08-28T13:40:09Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "ef3a9b39-f3d4-4535-a918-60eb52f2decd",
        "parentId" : "79a051b7-584a-4b6b-a5d8-109807241534",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I have no idea. Presumably @robin-da tested the merge command at some point :slightly_smiling_face: ",
        "createdAt" : "2019-08-28T13:27:41Z",
        "updatedAt" : "2019-08-28T13:40:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "e16d7577a743e12f1ffc9e47b2bc89c57762d6cc",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +823,827 @@                -- TODO This should use the proper manifest reader.\n                -- At the moment this relies on the fact that the input manifest\n                -- does not have Dalfs: entries that are split over multiple lines.\n                pure $ case BSL.stripPrefix \"Dalfs:\" l of\n                    Nothing -> l"
  },
  {
    "id" : "22076e92-6e01-4fcd-846d-c8fa5e0c5b1b",
    "prId" : 2629,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2629",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56208940-1038-458e-8a96-5afb3ba08651",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Is that intended?",
        "createdAt" : "2019-08-22T09:39:22Z",
        "updatedAt" : "2019-08-22T12:39:39Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "ed2bd805-61cb-4123-b440-2debd73bcde3",
        "parentId" : "56208940-1038-458e-8a96-5afb3ba08651",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Yes, we broke doctests when we switched the lexing mode to make HLint happy. We have tests but we only changed the options in the tests when they broke :man_facepalming: and not in doctest itself. I’ll look into adding an integration test that runs the actual executable on a failing doctest and verifies that it fails so this doesn’t happen again.",
        "createdAt" : "2019-08-22T09:42:02Z",
        "updatedAt" : "2019-08-22T12:39:39Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "9e70b473-bd73-4663-b512-b179388b7bb3",
        "parentId" : "56208940-1038-458e-8a96-5afb3ba08651",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Thanks for the explanation. Adding a test for this sounds good.",
        "createdAt" : "2019-08-22T09:43:30Z",
        "updatedAt" : "2019-08-22T12:39:39Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "6620422b-10de-45a3-a4d1-ce1ddfb4828e",
        "parentId" : "56208940-1038-458e-8a96-5afb3ba08651",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Tests added",
        "createdAt" : "2019-08-22T10:52:45Z",
        "updatedAt" : "2019-08-22T12:39:39Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "7103266c3942f479ba4739f42007eef9dd83d308",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +841,845 @@        -- IdeState at the moment.\n        pure $ nubOrd $ mapMaybe moduleImportPaths pmS\n    opts <- mkOptions opts { optImportPath = importPaths <> optImportPath opts, optHaddock = Haddock True }\n    withDamlIdeState opts logger diagnosticsLogger $ \\ideState ->\n        docTest ideState files'"
  },
  {
    "id" : "d5898e3e-d1d5-4c64-baae-313c19d1e1e6",
    "prId" : 2232,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2232",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d397273-2b07-4c2d-b133-59ba96915551",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Might be a good idea to add a comment that you rely on the fact that `nubSortOn` keeps the first occurence.",
        "createdAt" : "2019-07-19T16:57:00Z",
        "updatedAt" : "2019-07-22T11:38:52Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "f45a81f6-325b-49c0-8381-79b8bc01cbac",
        "parentId" : "2d397273-2b07-4c2d-b133-59ba96915551",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "done.",
        "createdAt" : "2019-07-22T11:37:27Z",
        "updatedAt" : "2019-07-22T11:38:52Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff79e6096473d1f83a02cf14522304894fdc6fcf",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +824,828 @@    let merged =\n            Archive\n                (nubSortOn eRelativePath $ mf : zEntries dar1 ++ zEntries dar2)\n                -- nubSortOn keeps the first occurence\n                Nothing"
  },
  {
    "id" : "3af8ecd3-75b4-4163-b6b7-4d878a55891a",
    "prId" : 2232,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2232",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ae13f71-883f-4977-a9b7-76ef4818ed17",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Is there a reason why we deduplicate only based on the filename instead of the full relative path? That seems somewhat weird. I guess we never expect dalfs in subdirectories but then we should probably check for that. I would also only deduplicate once and then only filter the deduplicated list here instead of deduplicating once based on the full path and once on the filename.",
        "createdAt" : "2019-07-19T16:58:35Z",
        "updatedAt" : "2019-07-22T11:38:52Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2ca6ace7-2033-47bc-b16e-5a7604a4b1b3",
        "parentId" : "0ae13f71-883f-4977-a9b7-76ef4818ed17",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "because only the dalf name will end up in the manifest. we will make sure that the dalf names of two packages are always different if they have different content in the next piece of work.",
        "createdAt" : "2019-07-22T11:35:57Z",
        "updatedAt" : "2019-07-22T11:38:52Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff79e6096473d1f83a02cf14522304894fdc6fcf",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +834,838 @@        let dalfNames =\n                nubSort\n                    [ takeFileName p\n                    | e <- zEntries dar1 ++ zEntries dar2\n                    , let p = eRelativePath e"
  },
  {
    "id" : "457cf4da-6465-4386-bdeb-7d15fcc0e741",
    "prId" : 2222,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2222",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99847525-9ffe-44dc-9d24-317433e3377c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Can we add a comment here on why we need to change the directory? It isn’t clear to me why that is required.",
        "createdAt" : "2019-07-19T04:45:57Z",
        "updatedAt" : "2019-07-19T09:48:52Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2c2d0533-3ca6-4d1e-b8bb-ead7c7b09d0e",
        "parentId" : "99847525-9ffe-44dc-9d24-317433e3377c",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "so that you get the right filepath's for the generated interface files.",
        "createdAt" : "2019-07-19T09:42:24Z",
        "updatedAt" : "2019-07-19T09:48:52Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ef5f6898797fc761099139830f38d6ac6b6952e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +708,712 @@            createDirectoryIfMissing True workDir\n            -- we change the working dir so that we get correct file paths for the interface files.\n            withCurrentDirectory workDir $ do\n                unless\n                -- TODO (drsk) remove this filter"
  },
  {
    "id" : "bdb3b7c1-43e1-44d5-a456-3bf1be88b1a2",
    "prId" : 2177,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2177",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3381761e-3969-4263-bffb-c1963375e460",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We should exit with `exitFailure` if we get diagnostics. An easy solution is probably something like:\r\n```\r\ndiags <- getDiagnostics ide\r\nunless (null diags) exitFailure\r\n```",
        "createdAt" : "2019-07-16T17:37:29Z",
        "updatedAt" : "2019-07-16T19:34:17Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e0cd3042-244d-425f-b777-a3ec934b5a5f",
        "parentId" : "3381761e-3969-4263-bffb-c1963375e460",
        "authorId" : null,
        "body" : "✔️ ",
        "createdAt" : "2019-07-16T18:35:28Z",
        "updatedAt" : "2019-07-16T19:34:17Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "bc4d6df5136944c7a6a061f4397ddeeda1b10e75",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +337,341 @@    withDamlIdeState opts loggerH diagnosticsLogger $ \\ide -> do\n        setFilesOfInterest ide (Set.singleton inputFile)\n        runAction ide $ getHlintIdeas inputFile\n        diags <- getDiagnostics ide\n        when (null diags) $ hPutStrLn stderr \"No hints.\""
  },
  {
    "id" : "e56a560c-b60c-4884-938e-171f81687c77",
    "prId" : 2177,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2177",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9ce09f4-703b-4e0f-b0d3-02f5e4941d65",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "```suggestion\r\n    opts <- setHlintDataDir =<< mkOptions opts\r\n```\r\nmight be a bit more idiomatic but I don’t feel strongly about this at all so your choice :wink: ",
        "createdAt" : "2019-07-16T19:16:35Z",
        "updatedAt" : "2019-07-16T19:34:17Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "78529604-d3cc-4dec-ae51-4c85030e71dc",
        "parentId" : "c9ce09f4-703b-4e0f-b0d3-02f5e4941d65",
        "authorId" : null,
        "body" : "Noted. Thanks!",
        "createdAt" : "2019-07-16T19:18:42Z",
        "updatedAt" : "2019-07-16T19:34:17Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "bc4d6df5136944c7a6a061f4397ddeeda1b10e75",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +334,338 @@    loggerH <- getLogger opts \"lint\"\n    inputFile <- toNormalizedFilePath <$> relativize inputFile\n    opts <- (setHlintDataDir <=< mkOptions) opts\n    withDamlIdeState opts loggerH diagnosticsLogger $ \\ide -> do\n        setFilesOfInterest ide (Set.singleton inputFile)"
  },
  {
    "id" : "86149643-d0b1-44e2-a620-8d4628666af4",
    "prId" : 2177,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2177",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04bb0ffa-80a0-43cb-8458-3501d619a7b4",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Instead of\r\n```haskell\r\nwhen x a\r\nunless x b\r\n```\r\nI'd just write\r\n```haskell\r\nif x then a else b\r\n```",
        "createdAt" : "2019-07-17T08:41:37Z",
        "updatedAt" : "2019-07-17T08:42:12Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc4d6df5136944c7a6a061f4397ddeeda1b10e75",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +340,344 @@        diags <- getDiagnostics ide\n        when (null diags) $ hPutStrLn stderr \"No hints.\"\n        unless (null diags) exitFailure\n  where\n     setHlintDataDir :: Options -> IO Options"
  },
  {
    "id" : "3cd2b03c-c304-4ee3-b274-afcf34d6a53f",
    "prId" : 2151,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32e986a8-be24-4266-bf83-8bbe898f976c",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I tend to put this at the end of the previous line.",
        "createdAt" : "2019-07-15T16:40:58Z",
        "updatedAt" : "2019-07-16T09:53:08Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a3d126b7a3f438fd5aeab809b4352d28723ba26",
    "line" : 200,
    "diffHunk" : "@@ -1,1 +625,629 @@    execInit (optDamlLfVersion opts) projectOpts (InitPkgDb True)\n    withProjectRoot' projectOpts $ \\_relativize\n     -> do\n        -- for all contained dalfs, generate source, typecheck and generate interface files and\n        -- overwrite the existing ones."
  },
  {
    "id" : "56260a59-eae9-405c-97c8-17bac2f377ad",
    "prId" : 2151,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc7ec7b2-3b4d-4366-8f82-5e979b5fac61",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "This mix of list comprehensions and `do` notation for lists is slightly odd.",
        "createdAt" : "2019-07-15T16:50:15Z",
        "updatedAt" : "2019-07-16T09:53:08Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a3d126b7a3f438fd5aeab809b4352d28723ba26",
    "line" : 219,
    "diffHunk" : "@@ -1,1 +644,648 @@            generatePackageState (dbPath : optPackageDbs opts) False []\n        let (depGraph, vertexToNode, _keyToVertex) =\n                graphFromEdges $ do\n                    (uid, src) <- genSrcs\n                    let iuid = toInstalledUnitId uid"
  },
  {
    "id" : "b8b91a6d-3ca2-4a0f-9365-dd19a1b9ba4c",
    "prId" : 2115,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2115",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8f24cfc-e441-4731-950b-d39c7cbbd1a0",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "```suggestion\r\n    <*> optHlintEnabled\r\n```",
        "createdAt" : "2019-07-12T12:05:57Z",
        "updatedAt" : "2019-07-12T15:42:21Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "70dbda3a4e6f6e2c8b607e944eb807553787c2c2",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +717,721 @@    <*> pure enableScenarioService\n    <*> pure (optScenarioValidation $ defaultOptions Nothing)\n    <*> optHlintEnable\n    <*> optHlintDataDir\n    <*> pure False"
  }
]