[
  {
    "id" : "080898f6-39b4-4658-923d-6b45e93588b0",
    "prId" : 8427,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8427",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1132fb01-ded8-4d96-b871-b0dc36d3b9e8",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "What exactly do we need in `LFConversion.hs` for these?",
        "createdAt" : "2021-01-11T08:52:54Z",
        "updatedAt" : "2021-01-11T11:23:02Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "233dea38-133a-464e-bcb9-c30aaff76bae",
        "parentId" : "1132fb01-ded8-4d96-b871-b0dc36d3b9e8",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "We need some easy way to refer to them in LFConversion (giving them separate names like \"magicThrow\" and \"magicToAnyException\" etc). It's just a little more involved. But the idea is we could then prevent \"magicThrow\", etc from being invoked at non-LF exception types.",
        "createdAt" : "2021-01-11T10:57:01Z",
        "updatedAt" : "2021-01-11T11:23:02Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f82bb336a179d521cfbb08a931b3d273de57427",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +385,389 @@\n-- TODO #8020 https://github.com/digital-asset/daml/issues/8020\n-- Handle these three in LFConversion.hs and check that ty1 is an exception type.\nconvertPrim _ \"EThrow\" (ty1 :-> ty2) =\n    ETmLam (mkVar \"x\", ty1) (EThrow ty2 ty1 (EVar (mkVar \"x\")))"
  },
  {
    "id" : "2b408d07-e682-48b2-b351-01c5a82ad18c",
    "prId" : 3815,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3815",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7750c51-6b29-40be-84e1-d6bca0ca5fd8",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I thought the plan was to keep `BEEqualContractId`, at least that’s what @remyhaemmerle-da  changed the spec to in https://github.com/digital-asset/daml/pull/3812",
        "createdAt" : "2019-12-11T11:35:34Z",
        "updatedAt" : "2019-12-11T11:36:25Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b2bc4941-a0c4-4863-a51d-70b91c4f60d5",
        "parentId" : "a7750c51-6b29-40be-84e1-d6bca0ca5fd8",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Looking at the code, I don’t really understand why we are not deprecating `BEEqualContractId`. I thought it was something about relative vs absolute contract ids but looking at the code they compile to the same thing in speedy.",
        "createdAt" : "2019-12-11T11:44:54Z",
        "updatedAt" : "2019-12-11T11:44:54Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "4b58466b-e194-4697-a244-e9fbc8a48ac1",
        "parentId" : "a7750c51-6b29-40be-84e1-d6bca0ca5fd8",
        "authorId" : null,
        "body" : "Let's deprecate it then. (-:",
        "createdAt" : "2019-12-11T11:50:14Z",
        "updatedAt" : "2019-12-11T11:50:15Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "479f25a5-e35d-4b46-b94e-d038192427cf",
        "parentId" : "a7750c51-6b29-40be-84e1-d6bca0ca5fd8",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Fine with me but @remyhaemmerle-da should take a look before we do this.",
        "createdAt" : "2019-12-11T11:52:09Z",
        "updatedAt" : "2019-12-11T11:52:10Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "c6a8524f-d370-48a1-b4ba-d326b4ae963b",
        "parentId" : "a7750c51-6b29-40be-84e1-d6bca0ca5fd8",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I am fine with deprecating it. ",
        "createdAt" : "2019-12-11T12:02:00Z",
        "updatedAt" : "2019-12-11T12:11:49Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac5f477b7d51f4e3b6730bf6602cc5237cc0c32a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +61,65 @@convertPrim v \"BEEqualContractId\" (TContractId a1 :-> TContractId a2 :-> TBool) | a1 == a2 =\n    if v `supports` featureGenMap\n        then EBuiltin BEEqualGeneric `ETyApp` TContractId a1\n        else EBuiltin BEEqualContractId `ETyApp` a1\n"
  },
  {
    "id" : "6ca37748-0cd8-4205-ab6c-8dc25468721d",
    "prId" : 2896,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2896",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edaa4b53-0c71-4d21-8080-f3dc8cadf8c9",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We should be able to remove this function now. This was our old hack around the fact that the stdlib could not depend on the DAML-LF version we're compiling to.",
        "createdAt" : "2019-09-18T12:07:56Z",
        "updatedAt" : "2019-09-18T12:08:10Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "6312a22b3f6ba7ed05585b762ba542cae9f75568",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +200,204 @@\nruntimeUnsupported :: Feature -> Type -> Expr\nruntimeUnsupported (Feature name version _) t =\n  ETmApp\n  (ETyApp (EBuiltin BEError) t)"
  }
]