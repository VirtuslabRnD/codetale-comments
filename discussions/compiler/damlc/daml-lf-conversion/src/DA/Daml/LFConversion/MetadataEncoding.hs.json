[
  {
    "id" : "3635edfa-b365-4850-bf86-dc2cc98295a3",
    "prId" : 7815,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7815",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d961d0e6-e8bc-494d-a5f8-fa0cc2176d11",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "The MINIMAL pragma can be loaded with arbitrary positive Boolean formulae? Wow, I didn't know that. It's also a bit scary. What do you think about \"flattening\" the formula into disjunctive normal form and encode the result as a list of lists of strings? I would assume the blowup coming with conversion to DNF doesn't matter here in practice and it would allow us to drop the `And`, `Or`, and `Parens` thingies.",
        "createdAt" : "2020-10-27T16:06:09Z",
        "updatedAt" : "2020-10-28T09:48:00Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "68c3c544-0d1d-4c8f-aead-7d97d1da9d7e",
        "parentId" : "d961d0e6-e8bc-494d-a5f8-fa0cc2176d11",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Yeah. I think I prefer to leave the boolean formulas in place. GHC already does some simplifying, but it doesn't go full DNF for good reasons, I assume (e.g. better error messages). Also I don't want to risk introducing new errors by normalizing the boolean formula incorrectly.",
        "createdAt" : "2020-10-28T09:51:42Z",
        "updatedAt" : "2020-10-28T09:51:42Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "323977ef2324d231a554726a69744fffb86d151b",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +113,117 @@decodeLBooleanFormula = fmap GHC.noLoc . decodeBooleanFormula\n\nencodeBooleanFormula :: BF.BooleanFormula T.Text -> LF.Type\nencodeBooleanFormula = \\case\n    BF.Var x -> TEncodedCon \"Var\" (TEncodedStr x)"
  }
]