[
  {
    "id" : "a44185d1-8031-4f84-a4e2-4a08af342a2e",
    "prId" : 2597,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2597",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a24ee57-8dde-446d-a956-9193d5b69515",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I don’t understand the reasoning behind grouping and sorting the imports this way. Unless there is a good reason to split up imports (e.g. to differentiate between imports from external libraries and our own code), I prefer to just have a single block of imports sorted alphabetically by the module name.",
        "createdAt" : "2019-08-21T07:14:12Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2522b958-0577-4ace-926a-44b5a7293204",
        "parentId" : "0a24ee57-8dde-446d-a956-9193d5b69515",
        "authorId" : "295ee093-aa35-4d63-bc72-cc3a66e7e50c",
        "body" : "I was following the same style within the modules in that folder. I have no strong preference here. Will get rid of it ",
        "createdAt" : "2019-08-21T19:35:39Z",
        "updatedAt" : "2019-08-26T14:36:05Z",
        "lastEditedBy" : "295ee093-aa35-4d63-bc72-cc3a66e7e50c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +10,14 @@import Development.IDE.LSP.Server\nimport Development.IDE.Types.Logger\nimport qualified Data.Text as T\nimport Development.IDE.Core.Rules\nimport Development.IDE.Core.Service.Daml"
  },
  {
    "id" : "be231dd8-5a64-4780-926a-347e9e971788",
    "prId" : 2597,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2597",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8479aa3-77e4-411c-b093-45d1d96daacb",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This is still not going via the error mechanism in LSP. It looks like doing that will require modifications to `withResponse` so I’m fine with doing that in a separate PR but please add a `TODO`.",
        "createdAt" : "2019-08-21T07:15:59Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "9f540480-73e0-4fad-af5b-7e3c609c121b",
        "parentId" : "e8479aa3-77e4-411c-b093-45d1d96daacb",
        "authorId" : "295ee093-aa35-4d63-bc72-cc3a66e7e50c",
        "body" : "sounds good. Done",
        "createdAt" : "2019-08-21T19:36:18Z",
        "updatedAt" : "2019-08-26T14:36:05Z",
        "lastEditedBy" : "295ee093-aa35-4d63-bc72-cc3a66e7e50c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +46,50 @@            Nothing     -> do\n                logError (ideLogger ide) \"Expected a single module to visualize, got multiple module\"\n                return $ Aeson.String \"Expected a single module to visualize, got multiple module\"\n    ExecuteCommandParams  command args -> do\n        logError (ideLogger ide) $ T.pack (\"Unsupported command \" ++ show command ++ \"with args \" ++ show args)"
  }
]