[
  {
    "id" : "15403316-4f90-4e0d-89be-e14d69ea0f3f",
    "prId" : 7202,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7202",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3908793c-93f9-4d09-8516-f1e1e5308d24",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Hm, I was initially only thinking of supporting pure expressions. But I don’t really see any reason not to support script expressions as well so I guess we might as well do it.",
        "createdAt" : "2020-08-21T14:27:22Z",
        "updatedAt" : "2020-08-21T14:34:26Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "1e8e6a4f-f563-4fe5-a266-137142debc12",
        "parentId" : "3908793c-93f9-4d09-8516-f1e1e5308d24",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Yeah, initially I implemented it only supporting pure expressions, i.e. only using `tryTypecheck lineNumber (T.pack pureArbitraryExpr)`. But, when a user then tries to use `:json` on a `Script` expression they will get a confusing type error due to the prefixed `return`. I didn't see a good reason not to support `Script` expressions either, so that's the way I went to solve this.",
        "createdAt" : "2020-08-21T14:52:43Z",
        "updatedAt" : "2020-08-21T14:52:44Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "69003e8d75763053c000aab7fcaa5540389eb817",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +413,417 @@            (ReplClient.ReplJson, BodyRenderings {..}) ->\n                withExceptT getLast\n                $   withExceptT Last (tryTypecheck lineNumber (T.pack arbitraryScript))\n                <!> withExceptT Last (tryTypecheck lineNumber (T.pack pureArbitraryExpr))\n        -- Type of the statement so we can give it a type annotation"
  },
  {
    "id" : "e3416bfa-da03-4aeb-b035-b57bb82b55e3",
    "prId" : 6865,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6865",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6c2be71-054e-4088-a136-590e8706a3bf",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Just for my own clarification: Do you know why `replline` special cases commands? Is there any advantage to using this over implementing it in the `replLine` function?",
        "createdAt" : "2020-07-24T17:42:23Z",
        "updatedAt" : "2020-07-27T08:37:18Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "68eaba55-c3c3-4158-a100-285fac056281",
        "parentId" : "b6c2be71-054e-4088-a136-590e8706a3bf",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "It automatically generates short-cuts like `:m` for `:modules` and generates a \"no such command\" error in case of unknown commands.",
        "createdAt" : "2020-07-27T08:09:25Z",
        "updatedAt" : "2020-07-27T08:37:18Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "6277574b-9f39-479e-aa04-cc41101e3fce",
        "parentId" : "b6c2be71-054e-4088-a136-590e8706a3bf",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Thanks for the explanation!",
        "createdAt" : "2020-07-27T08:27:51Z",
        "updatedAt" : "2020-07-27T08:37:18Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cab735d361bea852ebf35c1964c6db6922cc870",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +329,333 @@            banner = pure \"daml> \"\n            command = replLine\n            options = replOptions\n            prefix = Just ':'\n            tabComplete = Repl.Cursor $ \\_ _ -> pure []"
  },
  {
    "id" : "494efe27-1549-44b0-8151-36d63f092f3e",
    "prId" : 6865,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6865",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b25954b5-5195-4f24-9045-2ab3b60c4e40",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "```suggestion\r\n      [ \"Commands available from the prompt:\"\r\n```\r\n(unless I’m missing something and this is helpful for formatting)",
        "createdAt" : "2020-07-24T17:43:16Z",
        "updatedAt" : "2020-07-27T08:37:18Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e4cdce2b-8280-4a80-961c-0506568ebddd",
        "parentId" : "b25954b5-5195-4f24-9045-2ab3b60c4e40",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "I followed GHCi's example here which indents the help message by one column. Presumably as a guide for the eye. Happy to remove the indent if you prefer.",
        "createdAt" : "2020-07-27T08:10:59Z",
        "updatedAt" : "2020-07-27T08:37:18Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "4fc773b9-0eda-46b4-b931-4455b37bef47",
        "parentId" : "b25954b5-5195-4f24-9045-2ab3b60c4e40",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Makes sense, let’s keep it.",
        "createdAt" : "2020-07-27T08:28:01Z",
        "updatedAt" : "2020-07-27T08:37:18Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cab735d361bea852ebf35c1964c6db6922cc870",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +431,435 @@      ]\n    optHelp _dflags _args = liftIO $ T.putStrLn $ T.unlines\n      [ \" Commands available from the prompt:\"\n      , \"\"\n      , \"   <statement>                 evaluate/run <statement>\""
  },
  {
    "id" : "e946dffc-28be-44c1-aa6c-9de1cd7a360b",
    "prId" : 6865,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6865",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10082392-5249-4d15-8516-c98590672238",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I got curious what ghci does and it also just has the list https://gitlab.haskell.org/ghc/ghc/-/blob/master/ghc/GHCi/UI.hs#L2524. So maybe this isn’t actually worth worrying about?",
        "createdAt" : "2020-07-24T17:55:26Z",
        "updatedAt" : "2020-07-27T08:37:18Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "c09b27ba-6634-4644-bbd6-0281fc59eb2f",
        "parentId" : "10082392-5249-4d15-8516-c98590672238",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "That's true, though at least it filters out redundant imports https://gitlab.haskell.org/ghc/ghc/-/blob/52685cf7c077c51e3719e3c4dd5ca8257a99c4ea/ghc/GHCi/UI.hs#L2687.",
        "createdAt" : "2020-07-27T08:12:57Z",
        "updatedAt" : "2020-07-27T08:37:18Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "3d829b5f-b0e3-4db1-9dfa-5c5eb64b853c",
        "parentId" : "10082392-5249-4d15-8516-c98590672238",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Good catch!",
        "createdAt" : "2020-07-27T08:31:03Z",
        "updatedAt" : "2020-07-27T08:37:18Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cab735d361bea852ebf35c1964c6db6922cc870",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +438,442 @@    optModule _dflags (\"-\" : modules) = do\n        ReplState {imports} <- lift State.get\n        -- TODO[AH] Use a more appropriate data structure to track imports.\n        let unknown =\n              [ removed"
  },
  {
    "id" : "38e1265a-9389-4454-9399-142a981916aa",
    "prId" : 5386,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f69d1241-a35d-446f-95cf-802277fdba71",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We should probably just add that debugging flag :slightly_smiling_face:  (separately)",
        "createdAt" : "2020-04-03T07:26:40Z",
        "updatedAt" : "2020-04-03T09:02:06Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "c73b467aef8338af9bc082e37549881f971c2da5",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +221,225 @@            (renderModule dflags imports lineNumber bindings bind expr)\n        -- Useful for debugging, probably best to put it behind a --debug flag\n        -- rendered <- liftIO $ readFileUTF8 (fromNormalizedFilePath $ lineFilePath lineNumber)\n        -- liftIO $ for_ (lines rendered) $ \\line ->\n        --      hPutStrLn stderr (\"> \" <> line)"
  },
  {
    "id" : "f24fffd8-e8e9-4f3d-b67c-a1a69b80d64a",
    "prId" : 5386,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee697a48-167c-4f63-b663-c78cc76fc3bf",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "The `liftIO` here is unnecessary here I believe and confused me for a moment (I thought we were lifting into `ExceptT` and didn’t understand why we need the `withExceptT` then).",
        "createdAt" : "2020-04-03T07:29:34Z",
        "updatedAt" : "2020-04-03T09:02:06Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "f533bd16-d0c4-422f-8db9-c215b7000be0",
        "parentId" : "ee697a48-167c-4f63-b663-c78cc76fc3bf",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "No, it's needed to lift into `ReplM`. The monad here is `ExceptT Error ReplM`. `ReplM` is used for state in `handleStmt`. See https://github.com/digital-asset/daml/pull/5386/commits/a78a847c17cfee1e5e4bdca14bde09469b14f9a7 and https://github.com/digital-asset/daml/pull/5386/commits/9d05b82077272101f9ddcbf7dc1fbf8621fdf43b .",
        "createdAt" : "2020-04-03T08:33:40Z",
        "updatedAt" : "2020-04-03T09:02:06Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "c73b467aef8338af9bc082e37549881f971c2da5",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +233,237 @@        -- If we get an error we don’t increment lineNumber and we\n        -- do not get a new binding\n        withExceptT ScriptError $ ExceptT $ liftIO $\n            ReplClient.runScript replClient (optDamlLfVersion opts) lfMod\n        let boundVars = mkOccSet (map occName (collectPatBinders bind))"
  },
  {
    "id" : "573ae6c9-69eb-42ce-9949-67749eb63ec3",
    "prId" : 5386,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e6735f9-5612-487d-87e5-f759a04924d0",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Hm, this seems surprisingly tricky with qualified import, explicit imports, …. I wonder if we can biggypack on `-ddump-minimal-imports` (no idea how and that drops too much).",
        "createdAt" : "2020-04-03T07:34:02Z",
        "updatedAt" : "2020-04-03T09:02:06Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "237eaaf8-e53b-492d-99b6-8f2097c219fe",
        "parentId" : "2e6735f9-5612-487d-87e5-f759a04924d0",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Yeah, I haven't looked at all the options, yet. Duplicate imports don't make it fail, but only add bloat, so this didn't seem too critical.\r\n\r\nHmm, AFAIK `-ddump-minimal-imports` takes into account which symbols you actually use in the module. In the REPL use case that's almost always going to lead to too few imports. But, maybe we can re-use some piece of its implementation.\r\n\r\nAnother very dumb, but simple, solution could be to deduplicate on how the import declarations render. That doesn't yield a minimal set, but at least eliminates obvious duplicates.",
        "createdAt" : "2020-04-03T08:41:07Z",
        "updatedAt" : "2020-04-03T09:02:06Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "c73b467aef8338af9bc082e37549881f971c2da5",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +248,252 @@        ReplState {imports, lineNumber} <- State.get\n        -- TODO[AH] Deduplicate imports.\n        let newImports = imp : imports\n        -- TODO[AH] Factor out the module render and typecheck step.\n        liftIO $ writeFileUTF8 (fromNormalizedFilePath $ lineFilePath lineNumber)"
  },
  {
    "id" : "58e1cb56-339c-4bac-a3c6-6a5aded0980f",
    "prId" : 5337,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f1157b9-9241-4c2b-822f-5d9fc033b387",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Can we upgrade already?",
        "createdAt" : "2020-04-01T11:54:25Z",
        "updatedAt" : "2020-04-01T11:55:27Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "4c8470fa-3e65-44b3-8b2d-8abf9a231798",
        "parentId" : "7f1157b9-9241-4c2b-822f-5d9fc033b387",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Sadly not, there's a version constraint on `haskeline` and that's a core package. So, this is blocked on a GHC upgrade.",
        "createdAt" : "2020-04-01T12:01:59Z",
        "updatedAt" : "2020-04-01T12:01:59Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "cefddc69-75ed-423e-97d9-7a8f09d7b2d0",
        "parentId" : "7f1157b9-9241-4c2b-822f-5d9fc033b387",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Ah right :disappointed: ",
        "createdAt" : "2020-04-01T12:12:31Z",
        "updatedAt" : "2020-04-01T12:12:31Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "7edafcdc6d482d8d3947074845131f21846fa79f",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +181,185 @@          , lineNumber = 0\n          }\n    -- TODO[AH] Use Repl.evalReplOpts once we're using repline >= 0.2.2\n    let replM = Repl.evalRepl banner command options prefix tabComplete initialiser\n          where"
  }
]