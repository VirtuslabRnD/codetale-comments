[
  {
    "id" : "2203cb32-10e6-4e1a-914f-46484f2eb31e",
    "prId" : 7770,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7770",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f50304ee-840a-414f-8fde-cd0665bfb448",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : ":scream_cat: ",
        "createdAt" : "2020-10-21T12:56:42Z",
        "updatedAt" : "2020-10-21T13:14:45Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "00b23824-5da3-448c-8a13-2542fd121c08",
        "parentId" : "f50304ee-840a-414f-8fde-cd0665bfb448",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "üëª ",
        "createdAt" : "2020-10-21T13:26:17Z",
        "updatedAt" : "2020-10-21T13:26:18Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "0fb09696-be41-4e63-91c5-9a5cd93cbbf3",
        "parentId" : "f50304ee-840a-414f-8fde-cd0665bfb448",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "It feels like we're giving people a giant foot gun here. I mean it's more of a foot gun than in Haskell but still. Let's not tell people about it.",
        "createdAt" : "2020-10-22T13:24:10Z",
        "updatedAt" : "2020-10-22T13:25:06Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "99bf8b3526af4baa9252a090ef4cde7af0cb8a7c",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +484,488 @@            , (\"OVERLAPPABLE\", Overlappable)\n            , (\"OVERLAPS\", Overlaps)\n            , (\"INCOHERENT\", Incoherent)\n            ]\n"
  },
  {
    "id" : "5928c221-9e97-4216-be82-2445ced1c7ea",
    "prId" : 7770,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7770",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17087658-b086-4dfc-b095-6ad09519a491",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe worth defining the mapping here and the one in the LF conversion somewhere close to each other or at least add a comment that the two must stay in sync.",
        "createdAt" : "2020-10-21T13:09:34Z",
        "updatedAt" : "2020-10-21T13:14:45Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "1811f385-c2fd-4b1e-826c-4fcc7fb7fb13",
        "parentId" : "17087658-b086-4dfc-b095-6ad09519a491",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "A roundtrip test might also be a good idea and avoids the need to write four tests just to make sure we translate strings correctly :slightly_smiling_face: ",
        "createdAt" : "2020-10-21T13:14:37Z",
        "updatedAt" : "2020-10-21T13:14:45Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d3283dca-1d5b-4431-8ea1-000e41f11f99",
        "parentId" : "17087658-b086-4dfc-b095-6ad09519a491",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "That's a good idea. (I think I'll do that as a separate refactoring PR since it involves touching more code.)",
        "createdAt" : "2020-10-21T14:06:46Z",
        "updatedAt" : "2020-10-21T14:06:47Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "99bf8b3526af4baa9252a090ef4cde7af0cb8a7c",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +480,484 @@\n        overlapModeFns :: MS.Map T.Text (SourceText -> OverlapMode)\n        overlapModeFns = MS.fromList\n            [ (\"OVERLAPPING\", Overlapping)\n            , (\"OVERLAPPABLE\", Overlappable)"
  },
  {
    "id" : "89211a9d-bbe8-4582-b809-6427e1051b40",
    "prId" : 7539,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f3d5607-435e-417f-bce9-bf58d17dd5c3",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "It's a bit sad that `Data.Text` doesn't have `spanEnd`, unlike `Data.Bytestring`. üòø ",
        "createdAt" : "2020-10-01T10:53:15Z",
        "updatedAt" : "2020-10-01T11:30:36Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d9da2da895f51fee2ab302864d36b6c137d48e6",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +421,425 @@            let name = LF.unExprValName (fst (LF.dvalBinder dval))\n                (intR,tagR) = T.span isDigit (T.reverse name)\n            in (T.reverse tagR, readMay (T.unpack (T.reverse intR)))\n\n    hiddenRefMap :: HMS.HashMap Ref Bool"
  },
  {
    "id" : "69eb14f3-dab0-4b50-a318-c9491b495427",
    "prId" : 4881,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4881",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "904f3a6a-2cb6-4bc8-9efe-e155af2c208e",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Given that this follows references across packages afaict, would it make sense to call it once for all packages instead of once per package? (Happy to not do this as part of this PR even if it does make sense).",
        "createdAt" : "2020-03-06T14:59:59Z",
        "updatedAt" : "2020-03-06T15:32:00Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b2e38234-de30-4280-aad4-ebddfb980ab2",
        "parentId" : "904f3a6a-2cb6-4bc8-9efe-e155af2c208e",
        "authorId" : null,
        "body" : "Yes! I think that should be the next experiment :)",
        "createdAt" : "2020-03-06T15:03:11Z",
        "updatedAt" : "2020-03-06T15:32:00Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "319e6bff-f90b-442c-8606-d521d86c8031",
        "parentId" : "904f3a6a-2cb6-4bc8-9efe-e155af2c208e",
        "authorId" : null,
        "body" : "Wait, it shouldn't make a difference unless you have multiple data-dependencies with lots of packages in common.",
        "createdAt" : "2020-03-06T15:39:39Z",
        "updatedAt" : "2020-03-06T15:39:39Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "350f506f-50a9-49b3-ae79-ef425ed11e69",
        "parentId" : "904f3a6a-2cb6-4bc8-9efe-e155af2c208e",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Right but having multiple data-dependencies that are interlinked doesn‚Äôt sound that unreasonable.",
        "createdAt" : "2020-03-06T15:41:29Z",
        "updatedAt" : "2020-03-06T15:41:30Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2cb7d72c-3675-43f6-9a2b-2e41fab9d9a4",
        "parentId" : "904f3a6a-2cb6-4bc8-9efe-e155af2c208e",
        "authorId" : null,
        "body" : "Yes, but perhaps that change can be made if/when it becomes relevant, and/or as part of a larger refactoring of packaging rules.",
        "createdAt" : "2020-03-06T15:53:35Z",
        "updatedAt" : "2020-03-06T15:53:35Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "160641a5-5437-459a-bc65-ce7949cd7578",
        "parentId" : "904f3a6a-2cb6-4bc8-9efe-e155af2c208e",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : ":+1:",
        "createdAt" : "2020-03-06T15:58:06Z",
        "updatedAt" : "2020-03-06T15:58:06Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae157cc4063eef409e90f907834d5c5d2150e7f1",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +829,833 @@\n-- | Calculate the set of all references that should be hidden.\nbuildHiddenRefMap :: Config -> LF.World -> HMS.HashMap Ref Bool\nbuildHiddenRefMap config world =\n    case leastFixedPointBy (||) refGraphList of"
  },
  {
    "id" : "6f38229c-32c2-4216-9acd-0017b75f84bd",
    "prId" : 4833,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cb06430-d6d0-4a54-909a-a1bf22b8668f",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Will we ever look up a reference to a `dependency`? Presumably the case where this matters is for reexported typeclasses. Do we check if the original typeclass is hidden or if the new typeclass is hidden? I think I don‚Äôt really understand why we need to ‚Äúwhite-list‚Äù this so maybe it would be good to expand on this in a comment.",
        "createdAt" : "2020-03-05T13:41:57Z",
        "updatedAt" : "2020-03-05T17:07:10Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "6568de5b-5e5b-4d8c-8ee3-842f7b4a69fa",
        "parentId" : "7cb06430-d6d0-4a54-909a-a1bf22b8668f",
        "authorId" : null,
        "body" : "I didn't check to see if it made a significant difference, but this whitelist is for the case where the data-dependency shares a dependency with the package being built. It doesn't check re-exports, it's just a check for actual references to the same dependencies.\r\n\r\nThe only case where this is logically relevant is if both the package being built & the data-dependencies depend on the same package, and that package contains something that would otherwise be erased. That's pretty rare. OTOH, this check prevents us from building up the a complicated dependency graph for daml-stdlib / daml-prim modules each time, on the assumption that the SDK hasn't changed.\r\n\r\nGiven that the case where it matters is quite rare, I can try removing this and see if it makes a difference to compile times. If removing it makes it significantly worse, I'll keep the whitelist and add a comment, and then see if we can just eat the cost once we start building this map once per package instead of once per module.",
        "createdAt" : "2020-03-05T15:29:07Z",
        "updatedAt" : "2020-03-05T17:07:10Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "ad7cfad4-1e49-49d8-bb71-74a3639f9979",
        "parentId" : "7cb06430-d6d0-4a54-909a-a1bf22b8668f",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Thanks for the explanation! Happy to keep it for this PR if we add a comment.",
        "createdAt" : "2020-03-05T15:30:13Z",
        "updatedAt" : "2020-03-05T17:07:10Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "26882d77e73f48422434c0913d230f50575a20f7",
    "line" : 194,
    "diffHunk" : "@@ -1,1 +863,867 @@            -- from daml-stdlib.\n        | LF.PRImport pkgId <- refPackage ref\n        , Set.member pkgId (configDependencyPackages (envConfig env))\n            = HMS.insert ref (False, []) refGraph\n            -- Dependencies are always available. This is a mostly a small optimization."
  },
  {
    "id" : "8c4e7eda-6932-4549-9b84-11f90d75e9f0",
    "prId" : 4833,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9ec919b-3cf6-4f0f-a9a3-fee9feb2727c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Can we add a comment why `Erased` is not sufficient to throw out the problematic stuff from `DA.Generics`?",
        "createdAt" : "2020-03-05T13:42:24Z",
        "updatedAt" : "2020-03-05T17:07:10Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "76209245-f305-4387-828d-008f4e0e4f75",
        "parentId" : "a9ec919b-3cf6-4f0f-a9a3-fee9feb2727c",
        "authorId" : null,
        "body" : "I'll add a comment. It's because `GenConvertible` causes kind errors in the back and forth translation, without actual  references to `Erased`.",
        "createdAt" : "2020-03-05T15:16:11Z",
        "updatedAt" : "2020-03-05T17:07:10Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "fc8cdc76-9183-40d4-be07-7216acc17002",
        "parentId" : "a9ec919b-3cf6-4f0f-a9a3-fee9feb2727c",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "FWIW, `GenConvertible` is killed in https://github.com/digital-asset/daml/pull/4839. Although I don‚Äôt really understand why `GenConvertible` causes issues here since it‚Äôs not used in the project you tested on afaik and we have other tests that use `daml-stdlib`. Either way, happy to keep this code if we add a comment.",
        "createdAt" : "2020-03-05T15:27:16Z",
        "updatedAt" : "2020-03-05T17:07:10Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "26882d77e73f48422434c0913d230f50575a20f7",
    "line" : 188,
    "diffHunk" : "@@ -1,1 +857,861 @@        | ref == RTypeCon erasedTCon\n            = HMS.insert ref (True, []) refGraph -- Erased is always erased\n        | refModule ref == LF.ModuleName [\"DA\", \"Generics\"]\n            = HMS.insert ref (True, []) refGraph\n            -- DA.Generics is not supported. This prevents issues with GenConvertible."
  },
  {
    "id" : "358b0ece-82dc-4bed-a15c-88658991b1cb",
    "prId" : 4833,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e63e07fd-72b6-46e2-b309-287dc52beb6d",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Similar question here, why do we need to whitelist this?",
        "createdAt" : "2020-03-05T13:46:09Z",
        "updatedAt" : "2020-03-05T17:07:10Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "415b73e1-b74f-4373-8844-86eb350e7668",
        "parentId" : "e63e07fd-72b6-46e2-b309-287dc52beb6d",
        "authorId" : null,
        "body" : "Same as above. I can probably just remove it though.",
        "createdAt" : "2020-03-05T15:29:55Z",
        "updatedAt" : "2020-03-05T17:07:10Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "26882d77e73f48422434c0913d230f50575a20f7",
    "line" : 201,
    "diffHunk" : "@@ -1,1 +870,874 @@        | LF.PRImport pkgId <- refPackage ref\n        , MS.member pkgId (configStablePackages (envConfig env))\n            = HMS.insert ref (False, []) refGraph -- stable pkgs are always available\n            -- TODO (SF): Check if we really need this after we move to running the\n            -- erased tracker once per package."
  },
  {
    "id" : "5fd74fd4-e0c5-44cb-943e-63b41c9a5abd",
    "prId" : 4517,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4517",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24e02d69-199b-46b0-9d26-fda0b39b76db",
        "parentId" : null,
        "authorId" : null,
        "body" : "This makes sense to me. If I knew then what I know now about package IDs vs unit IDs, I probably would have done it like this to begin with.",
        "createdAt" : "2020-02-14T12:41:11Z",
        "updatedAt" : "2020-02-14T14:40:46Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "4f1b089c2ff3d47e403e999827eb32b9cf999c6d",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +48,52 @@\ndata Config = Config\n    { configPackages :: MS.Map LF.PackageId LF.Package\n     -- ^ All packages we know about, i.e., dependencies,\n     -- data-dependencies and stable packages."
  },
  {
    "id" : "d6485475-03d0-4255-8fe4-45721e9e9b5f",
    "prId" : 4517,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4517",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f09a7e25-44d0-4f7b-a95b-7f23e7886be1",
        "parentId" : null,
        "authorId" : null,
        "body" : "I see, this map conflates different classes with the same name, but it's ok because this is only an optimization and the real collision check in `isDuplicate` tests that the types are equal. It might be nice to add a comment.",
        "createdAt" : "2020-02-14T13:20:51Z",
        "updatedAt" : "2020-02-14T14:40:46Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "066462d9-0bfc-4a36-9095-43ba3fec005b",
        "parentId" : "f09a7e25-44d0-4f7b-a95b-7f23e7886be1",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Good idea, I‚Äôve added a comment.",
        "createdAt" : "2020-02-14T13:58:03Z",
        "updatedAt" : "2020-02-14T14:40:46Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f1b089c2ff3d47e403e999827eb32b9cf999c6d",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +124,128 @@    , LF.DefValue{..} <- NM.toList moduleValues\n    , Just dfun <- [getDFunSig dvalBinder]\n    , let clsName = LF.qualObject $ dfhName $ dfsHead dfun\n    ]\n"
  },
  {
    "id" : "59239e54-db4f-459d-a5e5-52654c31cfee",
    "prId" : 4517,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4517",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fea4adbb-ac28-465a-a2cd-e1983765979e",
        "parentId" : null,
        "authorId" : null,
        "body" : "It might be good to add a small comment explaining when this happens.",
        "createdAt" : "2020-02-14T13:25:29Z",
        "updatedAt" : "2020-02-14T14:40:46Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "3d9521d4-e8ea-408b-b9ec-79c48a3523c4",
        "parentId" : "fea4adbb-ac28-465a-a2cd-e1983765979e",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Good idea, I added a comment.",
        "createdAt" : "2020-02-14T14:01:29Z",
        "updatedAt" : "2020-02-14T14:40:46Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f1b089c2ff3d47e403e999827eb32b9cf999c6d",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +242,246 @@            -- since LF structs need to have a non-zero number of\n            -- fields.\n            LF.TUnit -> True\n            _ -> False\n        LF.TypeSynName [name] <- [synName]"
  },
  {
    "id" : "62f7e5d3-c873-4c98-98e7-93453a304126",
    "prId" : 4517,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4517",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06e9d79c-84f4-47af-8bcd-c9fefef0a2d7",
        "parentId" : null,
        "authorId" : null,
        "body" : "Happy leave it for a future PR, but I think it makes sense to pass `reexported` inside `env` at this point.",
        "createdAt" : "2020-02-14T13:37:58Z",
        "updatedAt" : "2020-02-14T14:40:46Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "5cc37770-6cdb-4ff8-8f32-9cf6322e3226",
        "parentId" : "06e9d79c-84f4-47af-8bcd-c9fefef0a2d7",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "good idea, I‚Äôll leave it for a separate PR.",
        "createdAt" : "2020-02-14T14:02:35Z",
        "updatedAt" : "2020-02-14T14:40:46Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f1b089c2ff3d47e403e999827eb32b9cf999c6d",
    "line" : 326,
    "diffHunk" : "@@ -1,1 +568,572 @@\nconvType :: Env -> MS.Map LF.TypeSynName LF.PackageId -> LF.Type -> Gen (HsType GhcPs)\nconvType env reexported =\n    \\case\n        LF.TVar tyVarName -> pure $"
  },
  {
    "id" : "344ee58f-a62d-4824-8176-f3cfa992e054",
    "prId" : 4488,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4488",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24a859b3-1d74-4ae0-99a6-2cb8f923b4d5",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Not entirely sure this is necessary given the context where typeclasses appear but `HsAppTy` definitely needs parentheses in some cases so I‚Äôd rather just always add them.",
        "createdAt" : "2020-02-12T11:00:24Z",
        "updatedAt" : "2020-02-12T11:00:25Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d24cde98-a3c3-400c-bbe6-3e3797a9949a",
        "parentId" : "24a859b3-1d74-4ae0-99a6-2cb8f923b4d5",
        "authorId" : null,
        "body" : "Sounds good, & might as well.",
        "createdAt" : "2020-02-12T12:55:13Z",
        "updatedAt" : "2020-02-12T12:55:14Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "217240b0f8df55e5dab2736f7148a4685ee8949c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +510,514 @@                    . mkOrig ghcMod . mkOccName clsName $ T.unpack tyname\n            args <- mapM (convType env) lfArgs\n            pure $ HsParTy noExt (noLoc $ foldl (HsAppTy noExt . noLoc) tyvar (map noLoc args))\n\n        LF.TCon LF.Qualified {..}"
  },
  {
    "id" : "cf148c26-a9b8-40f4-9c59-cfea416291c5",
    "prId" : 4377,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4377",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa47ddd6-fc9f-4ba9-b71f-a469dbb42dad",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I wonder if it might be slightly less hacky to search for a record selector in the body? Don‚Äôt really have a strong opinion here so happy to go with this for now.",
        "createdAt" : "2020-02-04T14:41:10Z",
        "updatedAt" : "2020-02-04T14:44:12Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "98adec8e-86f0-443e-91d0-ef217b14e51b",
        "parentId" : "fa47ddd6-fc9f-4ba9-b71f-a469dbb42dad",
        "authorId" : null,
        "body" : "I think either way is fine, but this seems a little bit simpler, and should handle custom `HasField` instances better. (Not that I suggest anybody write those, but you never know.)",
        "createdAt" : "2020-02-04T15:01:38Z",
        "updatedAt" : "2020-02-04T15:01:39Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "11ace7345f8f6eed774640514b8e9f30ebc621d8",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +889,893 @@    getFieldArg :: LF.ExprValName -> Maybe T.Text\n    getFieldArg (LF.ExprValName name) = do\n        name' <- T.stripPrefix \"$fHasField\\\"\" name\n        Just $ fst (T.breakOn \"\\\"\" name')\n"
  },
  {
    "id" : "9abdddf2-de1b-4fe7-bfaf-75240620dc99",
    "prId" : 4336,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4336",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "514d000c-f314-429e-a95e-625f6f53c235",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Might be nice to add a comment here explaining the relationship between `configPackages`, `configStablePackages` and `configDependencyPackages`. I guess `configPackages` includes stable packages, dependencies and data-dependencies?",
        "createdAt" : "2020-02-03T08:08:48Z",
        "updatedAt" : "2020-02-03T11:00:51Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5fa822c7-e3b4-418a-89c5-d5422a36aa0d",
        "parentId" : "514d000c-f314-429e-a95e-625f6f53c235",
        "authorId" : null,
        "body" : "Improved the docs here. I also switched gave `envQualify` a more explicit name and switched it (`True -> False`) since it was confusing to me.",
        "createdAt" : "2020-02-03T10:13:19Z",
        "updatedAt" : "2020-02-03T11:00:51Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "f7a75365b89d256e55bf0795b4284729c3b038de",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +48,52 @@    , configStablePackages :: Set LF.PackageId\n        -- ^ set of package ids for stable packages\n    , configDependencyPackages :: Set LF.PackageId\n        -- ^ set of package ids for dependencies (not data-dependencies)\n    , configSdkPrefix :: [T.Text]"
  },
  {
    "id" : "35ea3a41-48f5-4eb6-a75b-481eb1328026",
    "prId" : 4326,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4326",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7035cb28-3549-4881-9b27-9204838fb8ef",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe `mkStubBind` would be a better name?",
        "createdAt" : "2020-01-31T13:38:26Z",
        "updatedAt" : "2020-01-31T13:49:22Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "fc3055ea-6a39-4931-870b-d59ab8eca27c",
        "parentId" : "7035cb28-3549-4881-9b27-9204838fb8ef",
        "authorId" : null,
        "body" : "I'll change it in the next PR, thanks!",
        "createdAt" : "2020-01-31T14:20:02Z",
        "updatedAt" : "2020-01-31T14:20:02Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "c598bf91f25a67ef3aef8f21d597e8bdf4aa0f5c",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +346,350 @@-- we turn the left-hand side into the unqualified form of that name (LHS\n-- must always be unqualified), and the right-hand side remains qualified.\nmkTrivialBind :: Located RdrName -> HsBind GhcPs\nmkTrivialBind lname =\n    let lexpr = noLoc $ HsPar noExt $ noLoc $ HsVar noExt lname :: LHsExpr GhcPs"
  },
  {
    "id" : "26c22408-2ecb-4ac7-99d4-db8654e0a07f",
    "prId" : 4326,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4326",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6637a0de-f5eb-4073-9af3-8925d0830ae1",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Is there a reason why we don‚Äôt just generate an empty instance?",
        "createdAt" : "2020-01-31T13:45:26Z",
        "updatedAt" : "2020-01-31T13:49:23Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "0a9a39b7-46ce-43e4-be8f-e5549721dbfb",
        "parentId" : "6637a0de-f5eb-4073-9af3-8925d0830ae1",
        "authorId" : null,
        "body" : "Ah, I just assumed that wouldn't work. I'll try it out.",
        "createdAt" : "2020-01-31T14:02:20Z",
        "updatedAt" : "2020-01-31T14:02:21Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "5c5f95e8-6708-4d0c-8e84-615d2eb17e94",
        "parentId" : "6637a0de-f5eb-4073-9af3-8925d0830ae1",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We probably want to silence the warning but apart from that I don‚Äôt see why it shouldn‚Äôt work.",
        "createdAt" : "2020-01-31T14:04:41Z",
        "updatedAt" : "2020-01-31T14:04:41Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "c598bf91f25a67ef3aef8f21d597e8bdf4aa0f5c",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +185,189 @@                { cid_ext = noExt\n                , cid_poly_ty = polyTy\n                , cid_binds = listToBag (mapMaybe (mkBind ghcMod) fieldNames)\n                , cid_sigs = []\n                , cid_tyfam_insts = []"
  },
  {
    "id" : "f3eb6f29-e4b3-4ed1-83fc-30f8defd9cc4",
    "prId" : 4326,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4326",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81178f71-8b81-43dd-8067-061fddb7cbf4",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Where are they generated? I thought we don‚Äôt run the preprocessor on generated sources. Might be good to add a test for this (if it doesn‚Äôt work, let‚Äôs do it in a separate PR).\r\n\r\nReconstructing those instances from DAML-LF is a bit tricky since the type-level strings are lost. For `HasField` we can probably get the field name fairly easily from the body. A bit gross but probably fairly reasonable. The only other instance that I remember that relies heavily on type-level stuff that is lost in the translation to LF is `Generic` and for now, I would just ignore that (but probably also good to have a testcase for this, happy to do it in a separate PR)",
        "createdAt" : "2020-01-31T13:46:37Z",
        "updatedAt" : "2020-01-31T13:49:23Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "57dd34df-6f6c-4663-a50d-1b5f98839cf9",
        "parentId" : "81178f71-8b81-43dd-8067-061fddb7cbf4",
        "authorId" : null,
        "body" : "We could just run the daml-preprocessor step for records, rather than recreating that. Since we'll (soon) re-export the typeclasses, we don't even need to change the prefix.\r\n\r\n(We should also be able to drop the `CurrentSdk` prefix logic from the enum type preprocessor as well.)\r\n\r\nI'll handle this in a separate PR.",
        "createdAt" : "2020-01-31T14:12:16Z",
        "updatedAt" : "2020-01-31T14:12:31Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "213ccf69-13c6-455f-8c56-d4c7bfd48d1c",
        "parentId" : "81178f71-8b81-43dd-8067-061fddb7cbf4",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "The problem with that is that then you will get the stub instances even if the DALF does not contain the instances. Probably not a huge deal in practice but it feels a bit fragile.",
        "createdAt" : "2020-01-31T14:14:26Z",
        "updatedAt" : "2020-01-31T14:14:26Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "12449f87-06e0-4f4b-9f22-4efff635cc33",
        "parentId" : "81178f71-8b81-43dd-8067-061fddb7cbf4",
        "authorId" : null,
        "body" : "Hmm, I see. I guess the safer thing is to make the stub instance by reconstructing the field name from the body of the HasField instance. That's definitely a separate PR.",
        "createdAt" : "2020-01-31T14:18:57Z",
        "updatedAt" : "2020-01-31T14:18:57Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "c598bf91f25a67ef3aef8f21d597e8bdf4aa0f5c",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +195,199 @@\n        -- | Filter out HasField instances, since they are generated separately.\n        isHasField :: LF.Qualified LF.TypeSynName -> Bool\n        isHasField LF.Qualified{..} =\n            qualModule == LF.ModuleName [\"DA\", \"Internal\", \"Record\"]"
  },
  {
    "id" : "f5d72348-3f16-457d-a4a7-5e54752fab09",
    "prId" : 4274,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4274",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62d6f989-ebfa-4f0d-bb3a-7e1961dd7864",
        "parentId" : null,
        "authorId" : null,
        "body" : "By the way, this is 100% a module reference we weren't tracking before, but since GHC.Types is pretty commonly depended on, it didn't cause problems in practice.",
        "createdAt" : "2020-01-29T19:17:42Z",
        "updatedAt" : "2020-01-31T11:44:00Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "639b57af-ff21-4184-b805-6ae6e4199297",
        "parentId" : "62d6f989-ebfa-4f0d-bb3a-7e1961dd7864",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Yeah, the new approach is a lot less fragile :+1:",
        "createdAt" : "2020-01-30T08:27:07Z",
        "updatedAt" : "2020-01-31T11:44:00Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4bb033d06d9248fab9ca5ebf41c23a505d8d123",
    "line" : 579,
    "diffHunk" : "@@ -1,1 +430,434 @@convKind env = \\case\n    LF.KStar -> pure . noLoc $ HsStarTy noExt False\n    LF.KNat -> noLoc <$> mkGhcType env \"Nat\"\n    LF.KArrow k1 k2 -> do\n        k1' <- convKind env k1"
  },
  {
    "id" : "4bf64b3a-caa3-490d-a652-cd629cba30af",
    "prId" : 4274,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4274",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a325064f-624f-411e-a881-fe2736c94891",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I thought `ghc-mod` is dead :trollface: ",
        "createdAt" : "2020-01-30T08:28:21Z",
        "updatedAt" : "2020-01-31T11:44:00Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4bb033d06d9248fab9ca5ebf41c23a505d8d123",
    "line" : 623,
    "diffHunk" : "@@ -1,1 +470,474 @@mkStableType :: Env -> UnitId -> LF.ModuleName -> String -> Gen (HsType GhcPs)\nmkStableType env unitId modName tyName = do\n    ghcMod <- genStableModule env unitId modName\n    pure . HsTyVar noExt NotPromoted . noLoc\n        . mkOrig ghcMod $ mkOccName varName tyName"
  },
  {
    "id" : "8c27c751-23dc-4d4d-b408-8fa74285f51d",
    "prId" : 4274,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4274",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a145bd6a-39a5-47ad-8b35-4b9cb5d70c5d",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I really hate that GHC‚Äôs `Module` type is not a module but just a reference to it. This makes the names here a bit confusing since it sounds like we are generating the source for a module. But I don‚Äôt really have a less confusing suggestion sadly :disappointed: ",
        "createdAt" : "2020-01-30T08:31:15Z",
        "updatedAt" : "2020-01-31T11:44:00Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "fa3bcef0-536a-4bb7-b6df-2191f8e4f5d8",
        "parentId" : "a145bd6a-39a5-47ad-8b35-4b9cb5d70c5d",
        "authorId" : null,
        "body" : "I agree, `Module` is very counterintuitive name for a module reference.",
        "createdAt" : "2020-01-30T11:34:07Z",
        "updatedAt" : "2020-01-31T11:44:01Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "a4bb033d06d9248fab9ca5ebf41c23a505d8d123",
    "line" : 387,
    "diffHunk" : "@@ -1,1 +309,313 @@    _ -> False\n\ngenModule :: Env -> LF.PackageRef -> LF.ModuleName -> Gen Module\ngenModule env pkgRef modName = do\n    let isStable"
  },
  {
    "id" : "9b5a1f22-c7aa-4394-95f0-509d912733bc",
    "prId" : 4251,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4251",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1655a3d0-cddf-4a83-83b0-5d1e1452e43a",
        "parentId" : null,
        "authorId" : null,
        "body" : "I *think* this is an unrelated bugfix.",
        "createdAt" : "2020-01-28T17:37:55Z",
        "updatedAt" : "2020-01-28T17:43:23Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "e82ef1b4-89ab-4a64-b9d6-81a33ec3279b",
        "parentId" : "1655a3d0-cddf-4a83-83b0-5d1e1452e43a",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This really should be in HLint :slightly_smiling_face: ",
        "createdAt" : "2020-01-28T17:41:30Z",
        "updatedAt" : "2020-01-28T17:43:23Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "60062de322cb4c820a5af20895251bc92fd8e88e",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +219,223 @@        | ModRef{..} <- Set.toList modRefs\n         -- don‚Äôt import ourselves\n        , not (modRefModule == lfModName && modRefUnitId == unitId)\n        -- GHC.Prim doesn‚Äôt need to and cannot be explicitly imported (it is not exposed since the interface file is black magic\n        -- hardcoded in GHC)."
  },
  {
    "id" : "af0d4a7d-2f47-47ab-ac4b-34d69d660210",
    "prId" : 4182,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7dedbdac-5df6-4060-abfa-c6b023c55790",
        "parentId" : null,
        "authorId" : null,
        "body" : "Changing the line above to `True` causes us to not expose functions that rely on new-style typeclass constraints, as well. This is a temporary measure, and once we support new-style typeclasses in data-dependencies (in a separate PR) we can change it back to `False`.",
        "createdAt" : "2020-01-24T15:40:10Z",
        "updatedAt" : "2020-01-25T14:42:26Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "06a85e217d7504649cf6665d6b337fcafda3e85b",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +552,556 @@        -- typeclasses being referenced. HOWEVER, we don't support\n        -- type synonyms here yet. TODO: Fix this, and change\n        -- the above to False.\n    LF.TApp a b -> typeHasOldTypeclass env a || typeHasOldTypeclass env b\n    LF.TBuiltin _ -> False"
  },
  {
    "id" : "8d1be2e7-1805-409d-940b-d874f58de2af",
    "prId" : 4182,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4424ef50-29cc-4506-b94a-d5a8add58453",
        "parentId" : null,
        "authorId" : null,
        "body" : "(See relevant PR #4143) ",
        "createdAt" : "2020-01-25T13:32:57Z",
        "updatedAt" : "2020-01-25T14:42:26Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "06a85e217d7504649cf6665d6b337fcafda3e85b",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +189,193 @@          | LF.DataEnum [_] <- [LF.dataCons typeDef]\n          ] -- ^ single constructor enums spawn a reference to\n            -- CurrentSdk.GHC.Types.DamlEnum in the daml-preprocessor.\n        ]\n"
  },
  {
    "id" : "94349604-c2bc-4080-bc21-74b5f31f3acd",
    "prId" : 4182,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c35dbf03-6aac-4a91-ba9c-e4460edba1b5",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Is there actually a problem with exposing scenarios? I could see it being useful, e.g., if you have some function to initialize the state in scenarios you might want to use it across upgrades.",
        "createdAt" : "2020-01-27T09:27:37Z",
        "updatedAt" : "2020-01-27T09:37:26Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "6fc99775-28ef-4ddc-833d-162a8dae7382",
        "parentId" : "c35dbf03-6aac-4a91-ba9c-e4460edba1b5",
        "authorId" : null,
        "body" : "I'll expose them in a separate PR :)",
        "createdAt" : "2020-01-27T10:04:25Z",
        "updatedAt" : "2020-01-27T10:04:25Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "06a85e217d7504649cf6665d6b337fcafda3e85b",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +108,112 @@    shouldExposeDefValue LF.DefValue{..}\n        | (lfName, lfType) <- dvalBinder\n        = not (LF.getIsTest dvalIsTest)\n        && not (\"$\" `T.isPrefixOf` LF.unExprValName lfName)\n        && not (typeHasOldTypeclass env lfType)"
  },
  {
    "id" : "9adb210c-d248-4112-91f9-fe823d10d34f",
    "prId" : 4182,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8642044-4aec-4e08-97ef-0651795ef8e1",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Fun fact: We have typeclasses with no methods in `daml-stdlib` which this will not hit but it should be fine to not handle that and I don‚Äôt see a reasonable way of detecting those.",
        "createdAt" : "2020-01-27T09:33:54Z",
        "updatedAt" : "2020-01-27T09:37:26Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "06a85e217d7504649cf6665d6b337fcafda3e85b",
    "line" : 214,
    "diffHunk" : "@@ -1,1 +585,589 @@defDataTypeIsOldTypeClass LF.DefDataType{..}\n    | LF.DataRecord fields <- dataCons\n    = notNull fields && all isDesugarField fields\n\n    | otherwise"
  },
  {
    "id" : "30bb8573-dbbc-4445-a09b-a63959f53b6c",
    "prId" : 4042,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acc19310-6e64-494b-b55e-9781804f0a87",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "it doesn‚Äôt really make sense to warn about unused imports in autogenerated code and it makes the build very noisy.",
        "createdAt" : "2020-01-14T13:50:27Z",
        "updatedAt" : "2020-01-14T13:50:28Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "1581ef74cd1df1f3390a1a3986fe2c587490a68e",
    "line" : 269,
    "diffHunk" : "@@ -1,1 +680,684 @@        , \"{-# LANGUAGE NoImplicitPrelude #-}\"\n        , \"{-# LANGUAGE TypeOperators #-}\"\n        , \"{-# OPTIONS_GHC -Wno-unused-imports #-}\"\n        ]\n"
  },
  {
    "id" : "78dfd423-1e57-4b9a-9871-b3da25db807d",
    "prId" : 3703,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c256993a-a980-45f3-9ad8-2505e519a057",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "At least according to our current plans, we don‚Äôt want to create Haskell type synonyms. For now, we only intend to use DAML-LF type synonyms for type classes so we also need to map them back to type classes.",
        "createdAt" : "2019-12-03T07:45:22Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e10f3d85f2547f8c6f1968d814c0ffeba77445b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +110,114 @@    convDataCons dataTypeCon0 = \\case\n            LF.DataSynonym _ ->\n              [] -- TODO(NICK) write the Haskell type synonym\n\n            LF.DataRecord fields ->"
  },
  {
    "id" : "ee57018a-5280-469f-b515-a004b97d7806",
    "prId" : 3703,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ea7ba98-a30d-422a-997c-22cf17404f1a",
        "parentId" : null,
        "authorId" : null,
        "body" : "In theory, it will (usually? / always?) be a (DAML) typeclass actually. This is something I'm pretty unclear about at the moment  -- how we will be able to recover the typeclass definition from the synonym definition.",
        "createdAt" : "2019-12-03T08:00:05Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "8e10f3d85f2547f8c6f1968d814c0ffeba77445b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +110,114 @@    convDataCons dataTypeCon0 = \\case\n            LF.DataSynonym _ ->\n              [] -- TODO(NICK) write the Haskell type synonym\n\n            LF.DataRecord fields ->"
  }
]