[
  {
    "id" : "3c7d2013-4fec-4d0e-ac37-0973c262f87b",
    "prId" : 4807,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4807",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2585d2d8-283e-42e4-954f-a0e4726d337c",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Under what circumstances is this lazier? Only if `>>=` involved some sort of function composition, as in `State` or `Reader` and in `Update` or `Scenario` because they get rewritten into some sort of `Reader` in the speedy compiler, right? `Optional` and `Either _` are unaffected by this. Should we add some documentation around this? Or should we add an internal type class for monads that allow for `debug`?",
        "createdAt" : "2020-03-04T15:39:18Z",
        "updatedAt" : "2020-03-04T15:45:32Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "f52a3bb2-f797-46cb-976c-38065f052f3e",
        "parentId" : "2585d2d8-283e-42e4-954f-a0e4726d337c",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Given that I constantly get confused by strictness myself, I think trying to explain this in docs is probably going to do more harm than good. For `Either` it works as expected with and without this change but I think I managed to confuse myself sufficiently now to not be able to tell you why exactly :slightly_smiling_face: ",
        "createdAt" : "2020-03-04T16:20:38Z",
        "updatedAt" : "2020-03-04T16:20:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "c72d3341b427eb431e7830ecc69effad10916d2f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +536,540 @@  -- Instead it will only be printed when you execute the monadic\n  -- action.\n  pure () >>= \\_ -> pure (trace x ())\n\n-- | Return the first element of a tuple."
  },
  {
    "id" : "08b05e5b-fd16-4480-ad23-8affa879b515",
    "prId" : 4552,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4552",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5be5c6cb-fad3-4e00-b8a7-30be2663e691",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "It would be good to document why we give this the more restrictive constraint.",
        "createdAt" : "2020-02-17T17:11:16Z",
        "updatedAt" : "2020-02-18T13:22:23Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "82fb5cd3-ea48-41d7-9e67-2f75a9724e4c",
        "parentId" : "5be5c6cb-fad3-4e00-b8a7-30be2663e691",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Totally agreed. And done.",
        "createdAt" : "2020-02-17T17:59:17Z",
        "updatedAt" : "2020-02-18T13:22:23Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "e65fd8da34470a622c7f2e0a13f72ab5e3079ff7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +87,91 @@-- by the first. This is like sequencing operators (such as the semicolon)\n-- in imperative languages.\n(>>) : Action m => m a -> m b -> m b\n-- NOTE(MH): We need an `Action` constraint here rather than an `Applicative`\n-- constrait since the conversion to DAML-LF rewrites `A >> B` into"
  },
  {
    "id" : "4158dbda-1519-4325-9267-5240c8289f57",
    "prId" : 2163,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2163",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5585b9c0-971e-4d0b-8a20-1b3f1b954566",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Not really sure what a better description would be but this seems like we should be able to come up with something better.",
        "createdAt" : "2019-07-16T14:09:19Z",
        "updatedAt" : "2019-07-17T07:09:05Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "4fd5bc01-c873-4d1a-a0bb-c9f2037de929",
        "parentId" : "5585b9c0-971e-4d0b-8a20-1b3f1b954566",
        "authorId" : "217c7adb-d958-471a-ac17-e626ccd391d4",
        "body" : "Yeah, I really don't like this either, but I don't know how to improve.",
        "createdAt" : "2019-07-16T14:14:11Z",
        "updatedAt" : "2019-07-17T07:09:05Z",
        "lastEditedBy" : "217c7adb-d958-471a-ac17-e626ccd391d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a785640fe8d72eb256de0bbfe8b1eaf7c46d032e",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +50,54 @@    pure : a -> f a\n\n    -- | Sequentially apply the function.\n    --\n    -- A few functors support an implementation of `<*>` that is more"
  },
  {
    "id" : "20e0169b-f888-4b17-a3e3-d58a335718d1",
    "prId" : 2163,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2163",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36a83c26-c897-4887-8d12-53b5b4b70623",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Good catch!",
        "createdAt" : "2019-07-16T14:09:56Z",
        "updatedAt" : "2019-07-17T07:09:05Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "a785640fe8d72eb256de0bbfe8b1eaf7c46d032e",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +194,198 @@-- measures such as `error`.\n--\n-- The `Optional` type is also an `Action`.  It is a simple kind of error\n-- `Action`, where all errors are represented by `None`.  A richer\n-- error `Action` could be built using the `Data.Either.Either` type."
  }
]