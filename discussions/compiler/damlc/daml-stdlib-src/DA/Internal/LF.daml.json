[
  {
    "id" : "9cf2d604-0c4b-43c6-8a57-21a429cd91a8",
    "prId" : 7252,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7252",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a15de309-bab8-4471-a156-fce8bf11e280",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Probably not the right place to comment on this but I would like to also display source locations on failed submits when running against an actual ledger. Definitely something for a separate PR not this one.",
        "createdAt" : "2020-08-27T15:44:44Z",
        "updatedAt" : "2020-08-28T11:39:11Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cd8cd54f886d4b5d729f46c48c70c22c49f3082",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +214,218 @@  --\n  -- If the transaction fails, `submit` also fails.\n  submit : HasCallStack => Party -> cmds a -> m a\n\n  -- | `submitMustFail p cmds` submits the commands `cmds` as a single transaction"
  },
  {
    "id" : "382fe66c-45ab-42c0-936d-22dd948ff70d",
    "prId" : 4233,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50ea2021-890c-494c-845a-701f596a7e94",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : ":+1:",
        "createdAt" : "2020-01-28T08:21:03Z",
        "updatedAt" : "2020-01-28T10:56:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f33fdace1c0823e750c7ff0b6ad930c0031ffd2",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +180,184 @@    abort = fail\n\ninstance CanAbort (Either Text) where\n    abort = fail\n"
  },
  {
    "id" : "fdeea1e6-470a-486a-8fb6-573e4e495ca5",
    "prId" : 3816,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3816",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44edff08-9eb5-4b8b-8e25-e454df8b3301",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Why does `AnyTemplate` not contain any form of type representation in contrast to the other `Any*` types?",
        "createdAt" : "2019-12-11T13:49:38Z",
        "updatedAt" : "2019-12-11T14:20:46Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "9193fca9-7996-46a5-ba2e-4154d20d91cf",
        "parentId" : "44edff08-9eb5-4b8b-8e25-e454df8b3301",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Because there is no need for it. The reason why we have it in `AnyChoice` is because we want `toAnyChoice @T1 Archive` to be different from `toAnyChoice @T2 Archive`. For the template that type parameter is represented by the template itself.",
        "createdAt" : "2019-12-11T13:59:49Z",
        "updatedAt" : "2019-12-11T14:20:46Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fae38125bd17aedd898f8fa5b05a8313e62b64e",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +255,259 @@\ninstance Eq AnyTemplate where\n  AnyTemplate a == AnyTemplate b = eqAny a b\n\ninstance Eq AnyChoice where"
  },
  {
    "id" : "1e7d8def-3a4b-4c86-8670-780a677f6a3d",
    "prId" : 3816,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3816",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18235d96-9334-40bd-8773-48f9485582a7",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n    aRep == bRep && eqAny aAny bAny\r\n```\r\nSomehow comparing the type reps after the values _feels_ wrong to me. Same below.",
        "createdAt" : "2019-12-11T13:51:30Z",
        "updatedAt" : "2019-12-11T14:20:46Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "871f130c-ed54-4c0d-8557-7ee642268cae",
        "parentId" : "18235d96-9334-40bd-8773-48f9485582a7",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I disagree, this is not the type of the choice but the type of the template the choice belongs to. Having the same choice type on two different templates is an edge case so it make sense to test for that only if the other test isn’t conclusive.",
        "createdAt" : "2019-12-11T14:00:48Z",
        "updatedAt" : "2019-12-11T14:20:46Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fae38125bd17aedd898f8fa5b05a8313e62b64e",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +259,263 @@instance Eq AnyChoice where\n  AnyChoice aAny aRep == AnyChoice bAny bRep =\n    eqAny aAny bAny && aRep == bRep\n\ninstance Eq AnyContractKey where"
  },
  {
    "id" : "7ec48dc9-7848-4350-a3d7-aa0d0399bb4b",
    "prId" : 2973,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d70d9cf4-6761-44df-8916-a18e1cf5dfc7",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Let's follow the common pattern in this module:\r\n```suggestion\r\ndata AnyTemplate =\r\n    -- | HIDE\r\n    AnyTemplate Opaque\r\n```",
        "createdAt" : "2019-09-23T16:44:25Z",
        "updatedAt" : "2019-09-23T16:44:43Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "62f01586-94fe-4650-bd08-1114b668d4fd",
        "parentId" : "d70d9cf4-6761-44df-8916-a18e1cf5dfc7",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "What’s the point of adding a field to this constructor?",
        "createdAt" : "2019-09-23T16:54:14Z",
        "updatedAt" : "2019-09-23T16:54:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "349cbf1d-0fa7-4531-b074-5a0e1b098b35",
        "parentId" : "d70d9cf4-6761-44df-8916-a18e1cf5dfc7",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "ah nvm, got it.",
        "createdAt" : "2019-09-23T16:56:04Z",
        "updatedAt" : "2019-09-23T16:56:04Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "0e9e86ac-a0cb-45bc-9399-0638283cad3c",
        "parentId" : "d70d9cf4-6761-44df-8916-a18e1cf5dfc7",
        "authorId" : null,
        "body" : "Semi-related, we shouldn't need the HIDEs in this module any more since the constructors are not exported, so damldocs now hides them automatically.",
        "createdAt" : "2019-09-23T17:06:25Z",
        "updatedAt" : "2019-09-23T17:06:25Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "256118b7f2894aaab5f49184e0422475cb64d3dd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +208,212 @@\n-- | Existential template type that can wrap an arbitrary template.\ndata AnyTemplate = AnyTemplate\n-- We need the constructor to avoid GHC warning about impossible pattern matches."
  }
]