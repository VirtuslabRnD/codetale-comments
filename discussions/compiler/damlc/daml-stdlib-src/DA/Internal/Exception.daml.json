[
  {
    "id" : "1c4516bd-3a78-4fc4-b123-4ab964f6c24c",
    "prId" : 9754,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9754",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce2eadd4-a783-422d-8bc6-599cd995aaad",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "```suggestion\r\n    fromAnyException = primitive @\"EFromAnyException\"\r\n```\r\n\r\nto keep it consistent with the others :-) ",
        "createdAt" : "2021-05-20T10:23:08Z",
        "updatedAt" : "2021-05-20T10:23:43Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "29e78ab7dced6ecaa22f7e5210c7d00af2193a71",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +139,143 @@instance HasFromAnyException ContractError where\n    fromAnyException e =\n      primitive @\"EFromAnyException\" e\n\n--------------------------------------------------------------"
  },
  {
    "id" : "aa56f90d-1dc7-43c5-8034-cf98594e0226",
    "prId" : 9523,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9523",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec53cc16-d4b3-4fe7-82ea-c50760cf47ab",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "what’s up with the comment?",
        "createdAt" : "2021-04-28T12:23:46Z",
        "updatedAt" : "2021-04-29T06:45:55Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "45085617-aaca-4b68-983f-b9d6fa787393",
        "parentId" : "ec53cc16-d4b3-4fe7-82ea-c50760cf47ab",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "It's a placeholder for adding some rules in LFConversion for dealing with builtin exceptions (rather than handling them in daml).",
        "createdAt" : "2021-04-28T12:40:48Z",
        "updatedAt" : "2021-04-29T06:45:55Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "0c7bb56e-03f3-43b6-81c9-890546e39286",
        "parentId" : "ec53cc16-d4b3-4fe7-82ea-c50760cf47ab",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "maybe add a comment?",
        "createdAt" : "2021-04-28T12:42:04Z",
        "updatedAt" : "2021-04-29T06:45:55Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "927f42412143b22c82c5eaa94c9c8b82b01c9644",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +156,160 @@-- | HIDE\nhandleBuiltinException : Text -> (Text -> e) -> (AnyException -> Optional e) -> (AnyException -> Optional e)\nhandleBuiltinException _ _ f = f -- magic @\"handleBuiltinException\"\n    -- TODO https://github.com/digital-asset/daml/issues/8020\n    --    Placeholder for handling built-in exceptions during LF conversion."
  },
  {
    "id" : "4594581d-913f-4a26-adde-19ac1e26baee",
    "prId" : 9523,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9523",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52a0eb07-1203-4022-ab87-b7f4e2de4ca3",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Will we ever throw this? I thought we agreed that `error` is just going to bypass the LF primitive and throw the LF stdlib primitive.",
        "createdAt" : "2021-04-28T12:25:48Z",
        "updatedAt" : "2021-04-29T06:45:55Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "450ea746-4e64-4582-a63e-26f7eabecea0",
        "parentId" : "52a0eb07-1203-4022-ab87-b7f4e2de4ca3",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "This is for catching, not throwing.",
        "createdAt" : "2021-04-28T12:45:32Z",
        "updatedAt" : "2021-04-29T06:45:55Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "589612df-b25c-454c-9a13-a501721d926b",
        "parentId" : "52a0eb07-1203-4022-ab87-b7f4e2de4ca3",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Right but if we throw `GeneralError` directly in Daml-Stdlib and LF never throws this then we don’t need to go via `Text` here.",
        "createdAt" : "2021-04-28T12:49:47Z",
        "updatedAt" : "2021-04-29T06:45:55Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "8b5349fc-54cf-4bb5-9437-316250a2534f",
        "parentId" : "52a0eb07-1203-4022-ab87-b7f4e2de4ca3",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Ah, true! I guess the question is do we ever want to throw a GeneralError in LF?",
        "createdAt" : "2021-04-28T12:55:04Z",
        "updatedAt" : "2021-04-29T06:45:55Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "a5abb068-c160-4454-baf3-07cf5ec3845e",
        "parentId" : "52a0eb07-1203-4022-ab87-b7f4e2de4ca3",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "my understanding is we don’t but we don’t have to solve this in this PR. Maybe just add a todo.",
        "createdAt" : "2021-04-28T12:56:10Z",
        "updatedAt" : "2021-04-29T06:45:55Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "927f42412143b22c82c5eaa94c9c8b82b01c9644",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +94,98 @@\ninstance HasFromAnyException GeneralError where\n    fromAnyException = handleBuiltinException \"GeneralError\" GeneralError (primitive @\"EFromAnyException\")\n        -- TODO https://github.com/digital-asset/daml/issues/8020\n        --   Remove the \"handleBuiltinException\" part if we decide we never want to throw a GeneralError in LF."
  },
  {
    "id" : "361125d2-8025-4fe0-bc40-b69ec9646e93",
    "prId" : 8427,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8427",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf26c26b-4690-4ca2-8bae-ad01dcfefb9a",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Should we just hide this? Can we hide a method from a typeclass in daml-docs?",
        "createdAt" : "2021-01-11T08:58:12Z",
        "updatedAt" : "2021-01-11T11:23:02Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "a140ba87-bfce-41f2-a58a-c23e9d2ceea6",
        "parentId" : "cf26c26b-4690-4ca2-8bae-ad01dcfefb9a",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "We can. Hiding is an option, but I think it might be better to expose it and let people know that there's a better thing to use, and that they only need to think about this method if they want to implement their own instance of ActionCatch.",
        "createdAt" : "2021-01-11T10:53:12Z",
        "updatedAt" : "2021-01-11T11:23:02Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "2c3d3c7c-998c-405b-94c8-51fcaf45afe1",
        "parentId" : "cf26c26b-4690-4ca2-8bae-ad01dcfefb9a",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "sounds good, I guess I didn’t expect anyone to write their own instance but thinking about it, I think we both have at least one user in mind who will do that :slightly_smiling_face: ",
        "createdAt" : "2021-01-11T11:03:11Z",
        "updatedAt" : "2021-01-11T11:23:02Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f82bb336a179d521cfbb08a931b3d273de57427",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +119,123 @@-- | Action type in which `try ... catch ...` is supported.\nclass ActionThrow m => ActionCatch m where\n    -- | Handle an exception. Use the `try ... catch ...` syntax\n    -- instead of calling this method directly.\n    tryCatchRaw : (() -> m t) -> (AnyException -> Optional (m t)) -> m t"
  }
]