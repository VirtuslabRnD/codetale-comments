[
  {
    "id" : "7c712874-00c6-4fba-bf41-bd7759e56203",
    "prId" : 2893,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50db856e-5782-43ff-9561-be15df4de285",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I totally agree with this instance. It doesn't necessarily work when you add the new field _not_ as the last field of the record, right? I suppose that is intended.",
        "createdAt" : "2019-09-13T11:54:33Z",
        "updatedAt" : "2019-09-14T10:33:43Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "1a1e6d3c-dda5-45d1-a490-0a88d8d3d034",
        "parentId" : "50db856e-5782-43ff-9561-be15df4de285",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "yes, that's intended.",
        "createdAt" : "2019-09-13T14:12:41Z",
        "updatedAt" : "2019-09-14T10:33:43Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d44fa2cd4eb78e8a4fc41cf48858dbe93d4a882",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +90,94 @@\n-- product embeddings\ninstance (GenConvertible a1 a2) => GenConvertible a1 (a2 :*: Opt b s) where\n  cv a = P1 (cv a) genNone\n"
  },
  {
    "id" : "dd71d078-c3a1-482b-833a-997f0fdff915",
    "prId" : 2893,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "290edaec-aabd-4155-a48f-2564fdf92a54",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm not convinced by this instance. As it stands right now, you can remove a field from a record and then the value get's dropped during an upgrade. That doesn't sound too nice to me. Instead, it should only work if the value we drop is `None` and fail if we're trying to drop a `Some _`.",
        "createdAt" : "2019-09-13T11:56:43Z",
        "updatedAt" : "2019-09-14T10:33:43Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "d53f88c7-f5de-4935-908e-c03522a22f73",
        "parentId" : "290edaec-aabd-4155-a48f-2564fdf92a54",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "Not sure, that would mean it's impossible to drop fields even if you wanted to. On the other side, it is, of course, dangerous if fields just get dropped unintentionally.  I'll change it for now and we'll have to see how that plays out in practice.",
        "createdAt" : "2019-09-13T14:17:52Z",
        "updatedAt" : "2019-09-14T10:33:43Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "ceab7bba-10b0-49f7-8cd4-9472bdcc8eb2",
        "parentId" : "290edaec-aabd-4155-a48f-2564fdf92a54",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "actually not sure if we can do this without having a partial pattern match, because whether it's `None`, `Some _ ` is not at the type-level.",
        "createdAt" : "2019-09-13T15:12:31Z",
        "updatedAt" : "2019-09-14T10:33:43Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "3f2ba634-c1a3-4688-a98e-f4e9727ac043",
        "parentId" : "290edaec-aabd-4155-a48f-2564fdf92a54",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We could make it fail at runtime if itâ€™s a `Some`. Right now I would probably just remove the instance. ",
        "createdAt" : "2019-09-13T16:22:19Z",
        "updatedAt" : "2019-09-14T10:33:43Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "33d2e6d5-22b4-4e7d-9313-e3c1a5349eeb",
        "parentId" : "290edaec-aabd-4155-a48f-2564fdf92a54",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "removing the instance makes rollbacks of previously embedded data impossible, so that's not an option. I changed it to fail at runtime. But I think this is really wrong. If a user removes a field of a contract then the only thing that can possibly happen, is that the field gets deleted. We shouldn't prevent a user from doing that.",
        "createdAt" : "2019-09-14T10:06:47Z",
        "updatedAt" : "2019-09-14T10:33:43Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "646110db-9be5-499a-adb8-e089422f7ea7",
        "parentId" : "290edaec-aabd-4155-a48f-2564fdf92a54",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We're not preventing people from doing that. We're just forcing them to write it down explicitly when they want to do that. I think that's fine.",
        "createdAt" : "2019-09-18T12:02:15Z",
        "updatedAt" : "2019-09-18T12:02:45Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d44fa2cd4eb78e8a4fc41cf48858dbe93d4a882",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +94,98 @@\n-- product projections\ninstance GenConvertible a1 a2 => GenConvertible (a1 :*: Opt b1 s) a2 where\n  cv ~(P1 a (M1 (K1 {unK1 = None}))) = cv a\n  -- cv ~(P1 a (M1 (K1 {unK1 = Some _b}))) = error \"This conversion would have introduced data loss\""
  },
  {
    "id" : "6eca23bd-eb91-43ef-b3a4-8ceafd52d3d7",
    "prId" : 2893,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76cdaf04-40cb-40c9-92d6-f2c622836a05",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Should this really be commented out?",
        "createdAt" : "2019-09-18T12:02:29Z",
        "updatedAt" : "2019-09-18T12:02:45Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d44fa2cd4eb78e8a4fc41cf48858dbe93d4a882",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +96,100 @@instance GenConvertible a1 a2 => GenConvertible (a1 :*: Opt b1 s) a2 where\n  cv ~(P1 a (M1 (K1 {unK1 = None}))) = cv a\n  -- cv ~(P1 a (M1 (K1 {unK1 = Some _b}))) = error \"This conversion would have introduced data loss\"\n\n-- sums"
  },
  {
    "id" : "5ac8e272-6e51-438a-8508-3552b640a8ed",
    "prId" : 2884,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2884",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e99a9221-a07b-4090-ad0e-1bf91fe698ab",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Another fun example for @hurryabit where we leak the `*Instance` classes :slightly_smiling_face: ",
        "createdAt" : "2019-09-11T13:14:54Z",
        "updatedAt" : "2019-09-11T13:15:20Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e6f5451fffaf6994c322999fe6012b0e159c9df",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +13,17 @@  , GenConvertible\n  , Upgrade(..)\n  , UpgradeInstance(..)\n  , RollbackInstance(..)\n  , Rollback(..)"
  },
  {
    "id" : "2b7da90f-f9a0-40c6-b220-412fe857ed9e",
    "prId" : 2605,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a891b5e7-43fc-4b61-b2cb-c17063aab8d0",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Can we add a default implementation as in\r\nhttps://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#default-method-signatures\r\nfor this? This would have the advantage, that we can just dump a\r\n```haskell\r\ninstance Convertible Old.X New.X\r\n```\r\ninto the auto generated code and it passes if the conversion via generic works and fails with a \"method missing\" error otherwise.\r\nIf that works, we can remove the `conv` function. If not, we should probably rename it to `genConvert`.",
        "createdAt" : "2019-08-20T13:05:19Z",
        "updatedAt" : "2019-08-26T11:49:47Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "1f17142e-e2e4-432e-9413-32734dbb1418",
        "parentId" : "a891b5e7-43fc-4b61-b2cb-c17063aab8d0",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "that would be cool, I'll give it a try",
        "createdAt" : "2019-08-20T13:20:25Z",
        "updatedAt" : "2019-08-26T11:49:47Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f9ffdf4547903e867fbc570ace6269e1b9295b7",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +60,64 @@-- | Types, for which there exists a conversion.\nclass Convertible a b where\n  convert : a -> b\n  -- | HIDE\n  default convert : (Generic a repA, Generic b repB, GenConvertible repA repB) => a -> b"
  },
  {
    "id" : "1ca8656e-9f6c-4461-a96d-9a97f286759c",
    "prId" : 2605,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "120d9a1c-8b82-4acf-91c1-c632dfae4f73",
        "parentId" : null,
        "authorId" : null,
        "body" : "This workaround can be removed now that #2667 has been merged.",
        "createdAt" : "2019-08-27T17:53:31Z",
        "updatedAt" : "2019-08-27T17:53:31Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "6f9ffdf4547903e867fbc570ace6269e1b9295b7",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +61,65 @@class Convertible a b where\n  convert : a -> b\n  -- | HIDE\n  default convert : (Generic a repA, Generic b repB, GenConvertible repA repB) => a -> b\n  convert = to . cv . from"
  }
]