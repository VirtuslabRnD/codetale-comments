[
  {
    "id" : "9c87c5f2-be9b-4b4b-aa82-71f3f7f29b58",
    "prId" : 10091,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10091",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db0c5dc3-c5d9-4f90-ad7a-51dfd7c4d87e",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "this isnâ€™t actually true. you can easily `coerceContractId` your way into this error. Not for this PR though.",
        "createdAt" : "2021-06-24T12:18:26Z",
        "updatedAt" : "2021-06-24T12:23:43Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5121d66a-c1cd-4d36-89cb-eeb6e07c9a9b",
        "parentId" : "db0c5dc3-c5d9-4f90-ad7a-51dfd7c4d87e",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Can you gave me a short example, so I added it as test ?\r\nFor another PR of course. ",
        "createdAt" : "2021-06-24T12:31:08Z",
        "updatedAt" : "2021-06-24T13:39:45Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "cc8e8043-7a49-497c-a6e2-9ec66abcebd9",
        "parentId" : "db0c5dc3-c5d9-4f90-ad7a-51dfd7c4d87e",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "let a TODO here. ",
        "createdAt" : "2021-06-24T12:31:32Z",
        "updatedAt" : "2021-06-24T13:39:45Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "67b95f49-7651-4a3d-a25b-e7a37cf56836",
        "parentId" : "db0c5dc3-c5d9-4f90-ad7a-51dfd7c4d87e",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "https://gist.github.com/cocreature/a9a2f55031413f50c7eef5d5bda7cb17 should do the trick",
        "createdAt" : "2021-06-24T13:45:41Z",
        "updatedAt" : "2021-06-24T13:45:41Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "58c2d764e4b0541c1e64b6ba15c6839cc4b70de6",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +160,164 @@            //   coerceContractId your way into this error. Not for\n            //   this PR though.\n            sys.error(\n              s\"Got unexpected DamlEWronglyTypedContract error in scenario service: $wtc. Note that in the scenario service this error should never surface since contract fetches are all type checked.\"\n            )"
  },
  {
    "id" : "62c49dd0-6383-43f9-8593-c46dd888ec0d",
    "prId" : 10091,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10091",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04ed9b32-212a-47ef-9658-c11440041bfc",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Added this to https://github.com/digital-asset/daml/issues/9974 's description, feel free to delete [the comment](https://github.com/digital-asset/daml/issues/9974#issuecomment-867649444) if unnecessary. ðŸ™‚ ",
        "createdAt" : "2021-06-24T13:44:14Z",
        "updatedAt" : "2021-06-24T13:52:03Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "58c2d764e4b0541c1e64b6ba15c6839cc4b70de6",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +104,108 @@            //  2. Contract id fetch failures because a contract was\n            //     archived or what not are turned into more specific\n            //     errors so we never produce ContractNotFound\n            builder.setCrash(s\"contract ${cid.coid} not found\")\n          case TemplatePreconditionViolated(tid, optLoc, arg) =>"
  },
  {
    "id" : "07a0e0ec-038d-4c39-9af2-ceba3c835a96",
    "prId" : 10091,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10091",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e540ede4-89d7-4ed2-bbb4-dd784a3dc263",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Added this to https://github.com/digital-asset/daml/issues/9974 's description, feel free to delete [the comment](https://github.com/digital-asset/daml/issues/9974#issuecomment-867649444) if unnecessary. ðŸ™‚ ",
        "createdAt" : "2021-06-24T13:46:40Z",
        "updatedAt" : "2021-06-24T13:52:03Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "58c2d764e4b0541c1e64b6ba15c6839cc4b70de6",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +159,163 @@            //   (MK) This isnâ€™t actually true. You can easily\n            //   coerceContractId your way into this error. Not for\n            //   this PR though.\n            sys.error(\n              s\"Got unexpected DamlEWronglyTypedContract error in scenario service: $wtc. Note that in the scenario service this error should never surface since contract fetches are all type checked.\""
  },
  {
    "id" : "1d766f2c-7e75-48cb-b1ab-f50045690068",
    "prId" : 9952,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0879752-2f29-4a32-8441-c8237d8eb213",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "`incomplete.transaction` use only the node until the last failing exercise, it should from the root.",
        "createdAt" : "2021-06-10T11:27:21Z",
        "updatedAt" : "2021-06-10T11:27:21Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "deec488dc67b0678793605de1103880e81d65b20",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +406,410 @@    val builder = proto.PartialTransaction.newBuilder\n      .addAllNodes(tx.nodes.map(convertNode).asJava)\n      .addAllRoots(tx.roots.toList.map(convertTxNodeId).asJava)\n\n    incomplete.exerciseContextMaybe.foreach { exe =>"
  },
  {
    "id" : "357ac49e-4d49-4da3-86df-380ce4a36d10",
    "prId" : 9952,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f760227a-338a-494b-bcef-bfb7024fbab0",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "@remyhaemmerle-da @nickchapman-da we use the nodes here at least. I guess we donâ€™t use the roots so it works?  But that means we rely on having nodes not reachable by the roots which seems extremely confusing so I think fixing this should happen before merging this PR.",
        "createdAt" : "2021-06-10T13:19:00Z",
        "updatedAt" : "2021-06-10T13:19:00Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "da2c396d-1b75-4abb-8f35-aab2daf01f0a",
        "parentId" : "f760227a-338a-494b-bcef-bfb7024fbab0",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "This PR is a semantic no-op\r\nProbably best to make the fix in a separate PR. To avoid confusing things.",
        "createdAt" : "2021-06-10T13:22:19Z",
        "updatedAt" : "2021-06-10T13:22:19Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "57064ced-8f5c-4f44-a515-faae7c64550e",
        "parentId" : "f760227a-338a-494b-bcef-bfb7024fbab0",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I donâ€™t think it is. Youâ€™re transaction has different roots than the partial transaction we had before We get lucky because we donâ€™t use the roots but I donâ€™t think thatâ€™s a sensible state. Youâ€™re effectively building an invalid transaction with unreachable nodes while relying on those nodes being there.",
        "createdAt" : "2021-06-10T13:25:05Z",
        "updatedAt" : "2021-06-10T13:25:06Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "1d3fdde9-fa8f-4504-9436-add6417ccf9a",
        "parentId" : "f760227a-338a-494b-bcef-bfb7024fbab0",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Are you sure?\r\nThe roots before were: `ptx.context.children.toImmArray.toSeq.sortBy(_.index)`\r\nAnd they still are now.",
        "createdAt" : "2021-06-10T13:31:46Z",
        "updatedAt" : "2021-06-10T13:31:46Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "5d62e5ff-9bea-409f-820b-a74b879bf51a",
        "parentId" : "f760227a-338a-494b-bcef-bfb7024fbab0",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Offline we discuss and agree that this PR did not introduce any bug/change. But the original code from scenario-service which is now moved to `PartialTransaction.finishIncomplete` is somehow not correct and should be looked at in the future.",
        "createdAt" : "2021-06-10T14:20:46Z",
        "updatedAt" : "2021-06-10T14:20:46Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "deec488dc67b0678793605de1103880e81d65b20",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +30,34 @@  // The ledger data will not contain information from the partial transaction at this point.\n  // We need the mapping for converting error message so we manually add it here.\n  private val ptxCoidToNodeId = incomplete.transaction.nodes\n    .collect { case (nodeId, node: N.NodeCreate[V.ContractId]) =>\n      node.coid -> ledger.ptxEventId(nodeId)"
  },
  {
    "id" : "5f6ede5c-ce38-44e2-b4b3-e1deaab8dc12",
    "prId" : 7241,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf677171-b211-4b82-999a-fa35cb265a84",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Good!",
        "createdAt" : "2020-08-26T12:32:23Z",
        "updatedAt" : "2020-09-04T15:15:53Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb7af8a7663f08908d413d5964f55cb37e10d89b",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +625,629 @@          proto.Tuple.newBuilder\n            .addAllFields(\n              fields.iterator\n                .map { field =>\n                  proto.Field.newBuilder"
  },
  {
    "id" : "3eedbb4f-d25b-4317-8650-d8d6f778f92a",
    "prId" : 6229,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6229",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d12bea38-9731-4187-a579-29685b21dd19",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "More like `coYonedanvertKeyWithMaintainers`? :trollface: ",
        "createdAt" : "2020-06-04T21:35:29Z",
        "updatedAt" : "2020-06-05T07:52:05Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9f6ec15365fd75ce595be1c6d63e106be3dc994",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +482,486 @@  def convertKeyWithMaintainers[Val](\n      convertValue: Val => Value,\n      key: N.KeyWithMaintainers[Val],\n  ): KeyWithMaintainers = {\n    KeyWithMaintainers"
  },
  {
    "id" : "2c40b671-9296-4949-beb5-c84091eade35",
    "prId" : 5577,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5577",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cafec1df-ba00-4d70-bd40-a3c889cadf96",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : ":+1: ",
        "createdAt" : "2020-04-16T08:40:36Z",
        "updatedAt" : "2020-04-16T08:47:13Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "1637d23562080176d2c492d2330431d14e8ff1a7",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +322,326 @@        coidToNodeId(acoid)\n      case V.RelativeContractId(_) =>\n        throw new IllegalArgumentException(\"unexpected relative contract id\")\n    }\n"
  },
  {
    "id" : "3ab810e3-34cf-4435-83f6-4d954e22f1ff",
    "prId" : 643,
    "prUrl" : "https://github.com/digital-asset/daml/pull/643",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46b2cbb3-001d-4224-938a-22549556687b",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "This part of the code doesn't quite seem to entail the \"transaction value-ness\" of most other code in this PR, so I've left it a little more independent than you might expect given `WithTxValue`, because I'd expect it to vary more easily.",
        "createdAt" : "2019-04-23T20:52:46Z",
        "updatedAt" : "2019-04-24T12:56:17Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fb04e2966f071e3c9ce810232c205fa8bc35f0e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +402,406 @@            Ledger.NodeId,\n            V.AbsoluteContractId,\n            Tx.Value[V.AbsoluteContractId]] =>\n        ex.optLocation.map(loc => builder.setLocation(convertLocation(loc)))\n        builder.setExercise("
  }
]