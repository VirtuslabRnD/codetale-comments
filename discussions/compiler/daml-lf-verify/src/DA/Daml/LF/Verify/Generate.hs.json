[
  {
    "id" : "65428baa-1a3c-44e1-a5fa-54968a23de8a",
    "prId" : 6516,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a347a136-d7b9-4f19-9660-044029f557a4",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Given how many functions take this argument, maybe worth turning it into a `newtype` or a custom ADT with some docs why and when we turn this off.",
        "createdAt" : "2020-06-29T11:31:02Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : 298,
    "diffHunk" : "@@ -1,1 +312,316 @@-- | Analyse a let binding expression.\ngenForLet :: (GenPhase ph, MonadEnv m ph)\n  => Bool\n  -- ^ Flag denoting whether to analyse update expressions.\n  -> Binding"
  },
  {
    "id" : "cceccdc4-69d4-419b-9bda-296f7fa5f7df",
    "prId" : 6516,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8f06567-cc39-4533-aa2a-22fe9560915e",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Why does the type not matter?",
        "createdAt" : "2020-06-29T11:32:52Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "82c2e4e9-37b9-40f7-8678-217c08ec67ef",
        "parentId" : "a8f06567-cc39-4533-aa2a-22fe9560915e",
        "authorId" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "body" : "The only place where these types are used, is in `bindCids`, where they are used to bind fetched / created contract cids. However, as a `UPure` update can't fetch or create a new contract, its type specifically is not important.\r\nBut you're right that that's not very clear at all. I added a note.",
        "createdAt" : "2020-06-30T14:47:32Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : 500,
    "diffHunk" : "@@ -1,1 +504,508 @@  let bodyUpd = case _oExpr bodyOut of\n        EUpdate bodyUpd -> bodyUpd\n        -- Note: This is a bit of a hack, as we're forced to provide some type to\n        -- UPure, but the type itself doesn't really matter.\n        -- The only reason where these types are used is in `bindCids`, where"
  },
  {
    "id" : "bd1fa023-937c-4f76-89a3-804b636a7816",
    "prId" : 5472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cee380fe-af0d-4357-b537-29d2cd109029",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "What is an annotated choice? Presumably that’s some new annotation that you want to add to express constraints that should be verified?",
        "createdAt" : "2020-04-07T20:31:35Z",
        "updatedAt" : "2020-05-19T20:39:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "28bac439-923d-46e8-acf3-97c712009f34",
        "parentId" : "cee380fe-af0d-4357-b537-29d2cd109029",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I’m still not quite sure what an annotated choice is :slightly_smiling_face: ",
        "createdAt" : "2020-05-11T08:36:25Z",
        "updatedAt" : "2020-05-19T20:39:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7c840ec94d841cd4a9d3f0bd85eabff75e5d3a",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +120,124 @@\n-- | Analyse a choice definition and add to the environment.\n-- TODO: Handle annotated choices, by returning a set of annotations.\ngenChoice :: MonadEnv m 'ChoiceGathering\n  => PackageRef"
  },
  {
    "id" : "132083db-ecfb-4234-8090-b15d5492c8a2",
    "prId" : 5472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fe16625-3d4c-497c-8174-531d1df8c0f0",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "In my experience, spelling out identifiers has proven beneficial most of the time, ie., `_goExpr`, `_goUpdate` and `_goDelta`. (`Expr` is such a common unambiguous abbreviation that it's ok, whereas `Del` could also abbreviate \"delete\".)",
        "createdAt" : "2020-04-09T08:22:33Z",
        "updatedAt" : "2020-05-19T20:39:29Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7c840ec94d841cd4a9d3f0bd85eabff75e5d3a",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +26,30 @@  , _oUpdate :: UpdateSet ph\n    -- ^ The updates, performed by this expression.\n  }\n\n-- | Construct an output with no updates."
  },
  {
    "id" : "75b6b642-ee5f-45dd-b103-5d158f8ac47e",
    "prId" : 5472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d2ab34a-f0b1-4bd0-ac70-e41827e3e970",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Somehow this whole GADT/DataKinds thing seems more complex than necessary. Did you start out with just using separate functions for this and it turned out to be more complicated for some reason? If not I think that’s at least worth trying out although not necessarily before merging (I’d like to lock something in sooner rather than later).",
        "createdAt" : "2020-05-11T08:35:14Z",
        "updatedAt" : "2020-05-19T20:39:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7c840ec94d841cd4a9d3f0bd85eabff75e5d3a",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +98,102 @@  -> m ()\ngenModule pac mod = getEnv >>= \\case\n  EnvVG{} -> do\n    extDatsEnv (NM.toHashMap (moduleDataTypes mod))\n    mapM_ (genValue pac (moduleName mod)) (NM.toList $ moduleValues mod)"
  },
  {
    "id" : "0e2300b5-7dc5-4dec-b088-fe2db8c7dcd3",
    "prId" : 5472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79b0ff83-d259-49ae-a49d-6b4046fd5922",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "If you write this as a record it’s much easier to understand what the arguments mean.",
        "createdAt" : "2020-05-11T08:41:58Z",
        "updatedAt" : "2020-05-19T20:39:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7c840ec94d841cd4a9d3f0bd85eabff75e5d3a",
    "line" : 176,
    "diffHunk" : "@@ -1,1 +174,178 @@  where\n    archive :: TemplateChoice\n    archive = TemplateChoice Nothing (ChoiceName \"Archive\") True\n      (ENil (TBuiltin BTParty)) (ExprVarName \"self\")\n      (ExprVarName \"arg\", TStruct []) (TBuiltin BTUnit)"
  },
  {
    "id" : "b9e3b310-e863-484d-be01-e5f18d1df512",
    "prId" : 5472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3732e7c3-f58c-41e8-9f30-b151694df94f",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "SMT does have ADTs so we could in principle use those but you can also encode pattern matches without using them.",
        "createdAt" : "2020-05-11T08:52:10Z",
        "updatedAt" : "2020-05-19T20:39:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7c840ec94d841cd4a9d3f0bd85eabff75e5d3a",
    "line" : 355,
    "diffHunk" : "@@ -1,1 +353,357 @@-- | Analyse a case expression.\n-- TODO: Atm only boolean cases are supported\ngenForCase :: (GenPhase ph, MonadEnv m ph)\n  => Bool\n  -- ^ Flag denoting whether updates should be analysed."
  }
]