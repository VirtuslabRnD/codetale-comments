[
  {
    "id" : "dee0587e-57dd-49af-9144-3207a556e173",
    "prId" : 6565,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6565",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbaa722c-9cc7-4860-bb8d-c5b507d630b7",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This is going towards a direction where a typeclass might come in handy but given that this is internal to this module it didn’t seem worth it.",
        "createdAt" : "2020-07-01T19:17:41Z",
        "updatedAt" : "2020-07-01T19:17:42Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "bfa7c238-5473-43c7-9440-805305899139",
        "parentId" : "bbaa722c-9cc7-4860-bb8d-c5b507d630b7",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I think this combinator style is perfectly fine.",
        "createdAt" : "2020-07-02T05:53:09Z",
        "updatedAt" : "2020-07-02T05:53:43Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "74a01b28d39d5be59fc2b394455104b7c0f7207e",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +928,932 @@    BLtE e1 e2 -> BLtE (applySubstInExpr subst e1) (applySubstInExpr subst e2)\n\napplySubstInCond :: (Subst -> a -> a) -> Subst -> Cond a -> Cond a\napplySubstInCond f subst = \\case\n    Determined a -> Determined (f subst a)"
  },
  {
    "id" : "b8d0ea80-dde7-41d5-bb98-4c27665db99e",
    "prId" : 6516,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c16481d9-b407-4fcd-9c6f-d8687a0af172",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "In what way do we rely on these simplifications? SMT solvers almost certainly do a better job at this so presumably this is not just to simplify the constraints that end up passed to the SMT solver and our own code requires this somewhere? If we perform fewer simplications what breaks?",
        "createdAt" : "2020-06-29T08:48:11Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "ea537d51-c631-46e0-a565-403d88ad5b46",
        "parentId" : "c16481d9-b407-4fcd-9c6f-d8687a0af172",
        "authorId" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "body" : "Nothing would break if we stopped performing these simplifications. The only reason why we have them, is to make the output look less daunting to the user.",
        "createdAt" : "2020-06-29T17:31:51Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "tags" : [
        ]
      },
      {
        "id" : "a2d1603d-36b0-44f4-a065-505f0522f19f",
        "parentId" : "c16481d9-b407-4fcd-9c6f-d8687a0af172",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Thanks! Would be great to add a comment for this.",
        "createdAt" : "2020-06-29T17:32:55Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +131,135 @@  in simplifyCond cond'\n\n-- | Perform common simplifications on Conditionals.\n-- This simplification should never alter the meaning of the constraints in any\n-- way. It's only purpose is to simplify the output shown to the user."
  },
  {
    "id" : "036d87a8-9f9b-4deb-852a-6f4dc1cfade7",
    "prId" : 6516,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43eac8c2-830c-472b-a956-9efd8452060d",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Is there a difference between `Simple a` and `Rec [a]`?",
        "createdAt" : "2020-06-29T08:49:11Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "7a698960-6847-4144-8ff3-f14f008c6c49",
        "parentId" : "43eac8c2-830c-472b-a956-9efd8452060d",
        "authorId" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "body" : "Yes! This distinction is important while solving. The `Simple a` values are part of the main flow through the choice definition, while every `Rec [a]` value corresponds to a single recursion cycle. This means that while every `Simple a` value is solved simultaneously, every `Rec [a]` value has to be solved separately, and all of them have to preserve the field.",
        "createdAt" : "2020-06-29T17:35:01Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : 209,
    "diffHunk" : "@@ -1,1 +166,170 @@\n-- | Data type denoting a potential recursion cycle.\ndata Rec a\n  = Simple a\n  -- ^ Basic, non-recursive value."
  },
  {
    "id" : "9bf3ac48-b361-4a13-bb5f-8b8c549da743",
    "prId" : 6516,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec9e9bc7-d02a-4d5f-9fe6-f52873697fdf",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Can the list be empty? If not, let’s at least leave a comment.",
        "createdAt" : "2020-06-29T08:49:51Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "463f25bc-2385-464d-bd0e-b2cc3f6e2864",
        "parentId" : "ec9e9bc7-d02a-4d5f-9fe6-f52873697fdf",
        "authorId" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "body" : "I don't think the tool will ever create an empty `Rec` value. But it also never depends on the assumption that this would be non-empty. So while I don't think it happens in practice atm, I guess that future simplifications could possibly introduce empty `Rec` values. While I haven't extensively tested this, I'm fairly confident that an empty `Rec` value should not pose any issues :) ",
        "createdAt" : "2020-06-29T17:38:47Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : 212,
    "diffHunk" : "@@ -1,1 +169,173 @@  = Simple a\n  -- ^ Basic, non-recursive value.\n  | Rec [a]\n  -- ^ (Possibly multiple) recursion cycles.\n  -- Note that future optimisations could possible introduce an empty list here,"
  },
  {
    "id" : "4d8def97-6eab-4fe8-b038-df5d283548b8",
    "prId" : 6516,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6bcf9cdb-c624-4639-8960-1d104de60f50",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "What exactly is stored in the `String`?",
        "createdAt" : "2020-06-29T08:50:22Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e201f14c-801b-4139-bbce-b5e6e72959b7",
        "parentId" : "6bcf9cdb-c624-4639-8960-1d104de60f50",
        "authorId" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "body" : "At the moment, the names of every let value / choice included within the mutual recursion cycle. But this could easily be extended with additional debugging information in the future. Right now, a simple String seemed sufficient.",
        "createdAt" : "2020-06-29T17:40:03Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : 216,
    "diffHunk" : "@@ -1,1 +173,177 @@  -- Note that future optimisations could possible introduce an empty list here,\n  -- so no assumptions are made that this list is non-empty.\n  | MutRec [(String,a)]\n  -- ^ (Possibly multiple) mutual recursion cycles.\n  -- Note that this behaves idential to regular recursion, with the addition of"
  },
  {
    "id" : "862abcc2-277d-44ab-a979-36cc74e71d73",
    "prId" : 6516,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03f10554-6c68-47f3-aa50-9ee4ad3cee42",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "That typeclass looks very scary especially given that half of the methods call `error` in at least one of the instances. I’ll leave a few comments on individual methods.",
        "createdAt" : "2020-06-29T09:06:51Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : 312,
    "diffHunk" : "@@ -1,1 +255,259 @@  deriving (Eq, Generic, Hashable, Show)\n\n-- | Class containing the environment, and operations on it, for each generator phase.\nclass IsPhase (ph :: Phase) where\n  -- | The updates which can be performed."
  },
  {
    "id" : "3fdaf8b8-5878-4297-ba78-e6a40433fb3e",
    "prId" : 6516,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0deb7ded-d9f2-44c2-bcab-e9d49322dd5a",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Not entirely sure but I believe only called for `ChoiceGathering`",
        "createdAt" : "2020-06-29T09:47:08Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "57d93988-1f01-43c3-ba81-1bb7219092af",
        "parentId" : "0deb7ded-d9f2-44c2-bcab-e9d49322dd5a",
        "authorId" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "body" : "I don't think that's correct. It could also be called through `genChoice` -> `extEnvContract` -> `extCtr` in the `ValueGathering` phase.\r\nHowever, as this function can't throw any errors, I think that's less of an issue.",
        "createdAt" : "2020-06-30T13:21:48Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : 355,
    "diffHunk" : "@@ -1,1 +295,299 @@  envCtrs :: Env ph -> [BoolExpr]\n  -- | Update the additional constraints in the environment.\n  setEnvCtrs :: [BoolExpr] -> Env ph -> Env ph\n  -- | Get the set of relevant choices from the environment.\n  envChoices :: Env ph -> HM.HashMap UpdChoice (ChoiceData ph)"
  },
  {
    "id" : "3ead3178-fcc5-4acc-ac53-e42dc3b7b1da",
    "prId" : 6516,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "881f5ad1-3c56-4d84-9df4-f72ea74daff5",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Not completely sure but I believe only called for `ChoiceGathering`",
        "createdAt" : "2020-06-29T09:47:59Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "72692df8-36ad-4a17-9956-5f71f9c3b218",
        "parentId" : "881f5ad1-3c56-4d84-9df4-f72ea74daff5",
        "authorId" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "body" : "I think this could also be called through `extEnvContract` in the `ValueGathering` phase. But as it never throws an error, that seems fine :) ",
        "createdAt" : "2020-06-30T13:24:42Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : 349,
    "diffHunk" : "@@ -1,1 +289,293 @@  envCids :: Env ph -> HM.HashMap Cid (ExprVarName, [ExprVarName])\n  -- | Update the fetched cid's in the environment.\n  setEnvCids :: HM.HashMap Cid (ExprVarName, [ExprVarName]) -> Env ph -> Env ph\n  -- | Get the set of preconditions from the environment.\n  envPreconds :: Env ph -> HM.HashMap (Qualified TypeConName) (Expr -> Expr)"
  },
  {
    "id" : "d4ac85bf-4790-4bda-849f-c2634682d4ed",
    "prId" : 6516,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5dd237d2-568f-4f6d-80b4-6f8f2415b1c2",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Does this solve any issue or are you just trying to get nicer names? Variable names in DAML-LF can start with `_` so I don’t believe this helps with ensuring that the variable is fresh. In fact it seems to make it worse since they cannot start with a digit.",
        "createdAt" : "2020-06-29T11:14:42Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "02decbea-3a61-44b0-8949-5b66b8a34632",
        "parentId" : "5dd237d2-568f-4f6d-80b4-6f8f2415b1c2",
        "authorId" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "body" : "This actually solves an issue! :) \r\nEvery variable gets refreshed at least once, by adding `_Number` to it.\r\n- Variables ending on an underscore don't pose any issue. e.g. if you have both variable `x` and `x_`, they would be translated to `x_Number` and `x__Number` which are different.\r\n- Without the underscore, there is an issue though. Consider having variables `x1` and `x`. While refreshing them, we would add a unique number to them. If those numbers happened to be `2` and `12` for example, the refreshed variables would suddenly collide as `x12`. However, with the underscores this would result in `x1_2` and `x_12`.",
        "createdAt" : "2020-06-29T17:55:08Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : 732,
    "diffHunk" : "@@ -1,1 +601,605 @@  (cur,env) <- get\n  put (cur + 1,env)\n  return $ \"_\" ++ show cur\n\n-- | Evaluate the MonadEnv to produce an error message or the final environment."
  },
  {
    "id" : "05849256-e95c-4331-a682-91936af9811d",
    "prId" : 6516,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cee12df9-50fe-47fd-aa5d-2d4c52c8a486",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "At least the 4 fields seem to be common to all 3 `Env` types and there also seem to be shared parts between the latter fields in particular for `ChoiceGathering` and `Solving`. How about we either factor them out or factor out the whole `Env` type?",
        "createdAt" : "2020-06-29T11:14:54Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "830beec2-67a2-452d-8aa5-6efe6686cca9",
        "parentId" : "cee12df9-50fe-47fd-aa5d-2d4c52c8a486",
        "authorId" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "body" : "What exactly do you mean with `factor out` here? I very much dislike the current definition of `Env`, because there is a lot of overlap indeed. But I don't see a nicer solution?",
        "createdAt" : "2020-06-30T14:16:01Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "tags" : [
        ]
      },
      {
        "id" : "9e94c607-130f-4fac-b2f3-a1b83dac76fc",
        "parentId" : "cee12df9-50fe-47fd-aa5d-2d4c52c8a486",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I see two solutions:\r\n1. Use a single `Env` type with one or more type parameters for the fields that are different between the 3 phases. 1 + type families should be enough but you can argue whether type families are easier or harder to understand here compared to just having separate type parameters.\r\n2. Keep using different `Env` types but factor out the shared parts into separate types, e.g., you could make a type with 4 fields that captures the 4 fields currently in `Env` and then give the `Env` types a single field that references that type.\r\n\r\nI’d probably go for 1 since you then have a single Env type that you can operate on generically instead of needing all those `get` methods for things that are common to all 3.",
        "createdAt" : "2020-06-30T14:28:02Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "a286381d-445e-4f9d-8788-502e14387cbd",
        "parentId" : "cee12df9-50fe-47fd-aa5d-2d4c52c8a486",
        "authorId" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "body" : "Cool! I guess that would work indeed, and it would certainly reduce the duplication here :) ",
        "createdAt" : "2020-06-30T14:43:24Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : 368,
    "diffHunk" : "@@ -1,1 +308,312 @@    -- ^ A referenced value.\n  data Env 'ValueGathering = EnvVG\n    ![Skolem]\n    -- ^ The skolemised term variables and fields.\n    !(HM.HashMap (Qualified ExprValName) (Expr, UpdateSet 'ValueGathering))"
  },
  {
    "id" : "4ec63746-6bad-45e3-99d6-c306199db456",
    "prId" : 5472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42d1bf72-4638-4c1d-848f-579f06d082ac",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "This does not necessarily rename to a fresh name. For instance, `x` could be renamed to `x1` which is already in use. Is this intended?",
        "createdAt" : "2020-04-29T08:42:04Z",
        "updatedAt" : "2020-05-19T20:39:29Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7c840ec94d841cd4a9d3f0bd85eabff75e5d3a",
    "line" : 251,
    "diffHunk" : "@@ -1,1 +249,253 @@  -- ^ The variable to be renamed.\n  -> m ExprVarName\ngenRenamedVar (ExprVarName x) = ExprVarName . T.append x . T.pack <$> fresh\n\n-- | Data type denoting a skolemized variable."
  },
  {
    "id" : "5f157cab-a784-48b9-b593-f7809d97a9b6",
    "prId" : 5472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9058f7f-0d09-4415-870d-981ab3714459",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I guess record projections just occur particularly often so it’s important to add them here while other expressions (e.g. a variant with a contract id that you can select) are not common enough so we can ignore them at least for now?",
        "createdAt" : "2020-05-11T08:14:55Z",
        "updatedAt" : "2020-05-19T20:39:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7c840ec94d841cd4a9d3f0bd85eabff75e5d3a",
    "line" : 266,
    "diffHunk" : "@@ -1,1 +264,268 @@  = CidVar ExprVarName\n    -- ^ An expression variable denoting a contract id.\n  | CidRec ExprVarName FieldName\n    -- ^ A record projection denoting a contract id.\n  deriving (Generic, Hashable, Eq, Show)"
  },
  {
    "id" : "7a328be1-789c-4330-9980-9928b16784a5",
    "prId" : 5472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0679442d-cd34-4124-bbc6-8520353c8dd7",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "My impression is that you're using GADTs here to link the `UpdateSet` types from the three different phases with their `Env` counterparts. This problem might be better solved with associated data types similar to\r\n```haskell\r\nclass IsPhase (ph :: Phase) where\r\n  data UpdateSet ph\r\n  data Env ph\r\n```\r\nLet's try that out in a follow-up PR.",
        "createdAt" : "2020-05-11T08:26:44Z",
        "updatedAt" : "2020-05-19T20:39:29Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7c840ec94d841cd4a9d3f0bd85eabff75e5d3a",
    "line" : 173,
    "diffHunk" : "@@ -1,1 +171,175 @@\n-- | The collection of updates being performed.\ndata UpdateSet (ph :: Phase) where\n  UpdateSetVG ::\n    { _usvgUpdate :: ![Cond Upd]"
  },
  {
    "id" : "da4e7d7f-483f-4419-b814-808f7bd7172b",
    "prId" : 5472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "987bc420-e546-4077-a541-b0515c00f966",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "`rec` is not the best prefix when both \"record\" and \"recursion\" are common words in your problem domain. 😄",
        "createdAt" : "2020-05-11T08:41:59Z",
        "updatedAt" : "2020-05-19T20:39:29Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7c840ec94d841cd4a9d3f0bd85eabff75e5d3a",
    "line" : 800,
    "diffHunk" : "@@ -1,1 +798,802 @@-- | Lookup the field names and corresponding types, for a given record type\n-- constructor name.\nrecTypConFields :: MonadEnv m ph\n  => TypeConName\n  -- ^ The record type constructor name to lookup."
  },
  {
    "id" : "6ea37463-b204-480b-96cf-9d22a21f9dde",
    "prId" : 5472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "244f2ba9-9780-4b2f-866c-7194831746b7",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Any reason why this is not a `HashSet`?",
        "createdAt" : "2020-05-11T08:49:07Z",
        "updatedAt" : "2020-05-19T20:39:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7c840ec94d841cd4a9d3f0bd85eabff75e5d3a",
    "line" : 751,
    "diffHunk" : "@@ -1,1 +749,753 @@  -> (updset -> updset)\n  -- ^ Function for emptying a given update set of all updates.\n  -> [ref]\n  -- ^ The references which have already been visited.\n  -> HM.HashMap ref updset"
  },
  {
    "id" : "02d580e1-e384-44b2-b8bf-95dcfdee52cc",
    "prId" : 5472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e909459-1c6a-49b3-bda9-ef32bc518df6",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Can we give this a Semigroup instance?",
        "createdAt" : "2020-05-11T08:49:41Z",
        "updatedAt" : "2020-05-19T20:39:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7c840ec94d841cd4a9d3f0bd85eabff75e5d3a",
    "line" : 745,
    "diffHunk" : "@@ -1,1 +743,747 @@  -> (updset -> ([Cond ref], updset))\n  -- ^ Function popping the references from the update set.\n  -> (updset -> updset -> updset)\n  -- ^ Function for concatinating update sets.\n  -> (Cond updset -> updset)"
  }
]