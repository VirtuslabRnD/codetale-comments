[
  {
    "id" : "25b61800-567d-4787-a2c7-f3c6baf1d59b",
    "prId" : 6516,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f013703b-11f3-47aa-af3b-bb192748b4cd",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "8 function parameters might be a bit excessive. Can we wrap this up into (a few) record(s) or maybe a typeclass?",
        "createdAt" : "2020-06-29T08:13:08Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b6a332ef-eed2-46a9-87e4-39e58db95907",
        "parentId" : "f013703b-11f3-47aa-af3b-bb192748b4cd",
        "authorId" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "body" : "You're right. This function started off small, and kinda got out of control.\r\nA dedicated typeclass might be slight overkill, but a (few) record(s) would be much more readable indeed...",
        "createdAt" : "2020-06-30T12:30:38Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : 191,
    "diffHunk" : "@@ -1,1 +189,193 @@\n-- | Solves a single reference by recursively inlining the references into updates.\nsolveReference :: forall ref updset0 updset1. (Eq ref, Hashable ref, Show ref)\n  => (ref -> HM.HashMap ref updset0 -> Maybe (updset0, HM.HashMap ref updset0))\n  -- ^ Function for looking up and popping a reference from the update set."
  },
  {
    "id" : "905fde4d-154c-439d-9162-2ad1e4caed02",
    "prId" : 6516,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ffc9250-6141-477e-9caf-aa0990cfe451",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This whole module seems super complex and I admittedly donâ€™t really understand the internals. Given the limited time, I would suggest to leave it as is for now but I very much would like to see this refactored in the future.",
        "createdAt" : "2020-06-29T08:37:11Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b2595009-c982-4abd-8557-87d7d61a3578",
        "parentId" : "1ffc9250-6141-477e-9caf-aa0990cfe451",
        "authorId" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "body" : "I agree... This module basically contains the entire logic behind references and recursion.\r\nIt was designed with the goal of being polymorphic (it works exactly the same way for value references and choice references, and is only defined once). But this polymorphism ended up adding more complexity than I anticipated...",
        "createdAt" : "2020-06-30T12:33:13Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : "6db71421-a9fc-457e-964a-e4b8f1301c2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +23,27 @@import DA.Daml.LF.Verify.Context\n\n-- | Solves the value references by computing the closure of all referenced\n-- values, for each value in the environment.\n-- It thus empties `_usValue` by collecting all updates made by this closure."
  }
]