[
  {
    "id" : "1778b852-9885-4e46-a81a-5d00b467a436",
    "prId" : 1423,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83763c5a-c3d3-4688-95b9-4ae2f59ab779",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "I really like this style of code.",
        "createdAt" : "2019-05-30T11:41:21Z",
        "updatedAt" : "2019-05-30T11:50:11Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "55ff51b7e3b25657762ac2910822bd5ab50d66d2",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +216,220 @@          -> IO IdeState\nshakeOpen eventer logger opts rules = do\n    shakeExtras <- do\n        globals <- newVar Map.empty\n        state <- newVar Map.empty"
  },
  {
    "id" : "324479c9-9fde-4947-8d56-f6a028387957",
    "prId" : 1423,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "927e93e6-db36-43e6-8bf5-bc758f38bf1a",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "I'd have put the do on the same line as the `liftIO`. I find the below indentation a bit weird.",
        "createdAt" : "2019-05-30T11:42:07Z",
        "updatedAt" : "2019-05-30T11:50:11Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "55ff51b7e3b25657762ac2910822bd5ab50d66d2",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +272,276 @@garbageCollect keep = do\n    ShakeExtras{state, diagnostics} <- getShakeExtras\n    liftIO $\n        do modifyVar_ state $ return . Map.filterWithKey (\\(file, _) _ -> keep file)\n           modifyVar_ diagnostics $ return . filterDiagnostics keep"
  },
  {
    "id" : "4bcbacaa-b05e-471d-9024-cc62f8235cf4",
    "prId" : 724,
    "prUrl" : "https://github.com/digital-asset/daml/pull/724",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d1fc893-cdab-4f4b-a7e7-eb4a6cde6445",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "👍 ",
        "createdAt" : "2019-04-26T10:43:11Z",
        "updatedAt" : "2019-04-26T11:19:10Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "214e30babe5d470b67534d40584c7716be75c15f",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +204,208 @@-- | The outer Maybe is Nothing if this function hasn't been computed before\n--   the inner Maybe is Nothing if the result of the previous computation failed to produce\n--   a value\ngetValues :: forall k v. IdeRule k v => Var Values -> k -> FilePath -> IO (Maybe (Maybe v))\ngetValues state key file = do"
  },
  {
    "id" : "ddeb045e-c804-4971-a10e-f808fe3bf5ad",
    "prId" : 708,
    "prUrl" : "https://github.com/digital-asset/daml/pull/708",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee63cd74-595a-4d49-bfa0-0f6a76b281bc",
        "parentId" : null,
        "authorId" : "5e288d0d-ba83-40da-abe2-03bdfaf1d3de",
        "body" : "What does the Maybe (Maybe v) mean? For example what does Just Nothing tell me?",
        "createdAt" : "2019-04-26T09:55:39Z",
        "updatedAt" : "2019-04-26T09:55:39Z",
        "lastEditedBy" : "5e288d0d-ba83-40da-abe2-03bdfaf1d3de",
        "tags" : [
        ]
      },
      {
        "id" : "3e58f2dc-2a82-423a-adcb-ea14cfd56548",
        "parentId" : "ee63cd74-595a-4d49-bfa0-0f6a76b281bc",
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Just Nothing tells you that it has been computed, but that last time it computed, it failed to produce a value. There's no point rerunning it because it has working dependencies, so it will fail again. In contrast, Nothing means it hasn't ever been computed.",
        "createdAt" : "2019-04-26T10:01:05Z",
        "updatedAt" : "2019-04-26T10:01:06Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c53a20bb97387e1da28312292f457da6ca1522f",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +202,206 @@    return (outVal, (f <$> Map.lookup file inVal, f $ outVal Map.! file))\n\ngetValues :: forall k v. IdeRule k v => Var Values -> k -> FilePath -> IO (Maybe (Maybe v))\ngetValues state key file = do\n    vs <- readVar state"
  }
]