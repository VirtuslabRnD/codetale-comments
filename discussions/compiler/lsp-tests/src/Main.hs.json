[
  {
    "id" : "c423d2de-3fb0-4916-a10b-a013f2111286",
    "prId" : 7252,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7252",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ea708be-e1fc-4951-9620-121383f0e881",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "two submits in one script might be worth testing. What could also be useful to test  is having the `submit` in some function that we call from the main script. We could also think about displaying full call stacks for failed submits but that’s definitely something separate.",
        "createdAt" : "2020-08-27T15:45:56Z",
        "updatedAt" : "2020-08-28T11:39:11Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e05102f6-95c5-414e-83a8-68a0080244fe",
        "parentId" : "4ea708be-e1fc-4951-9620-121383f0e881",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "That's a good idea. I've added a line that calls a second submit through an intermediate definition and extended the test to match against a regex for two locations.\r\n\r\nI've noticed a difference between scenarios and scripts in this case in that in scenarios the location will extend to the left of the equal sign so long as no bind is in the way while it does not with scripts. However, I'd argue the scripts behavior is more consistent.\r\n\r\nTo illustrate, `[]` marks the referenced range:\r\n```\r\n-- scenarios\r\n[indirect party = \r\n    submit party do createCmd (T party)]\r\nindirect party =\r\n    [submit party do createCmd (T party)]\r\n    >> pure ()\r\nindirect party = do\r\n    [submit party do createCmd (T party)]\r\n    pure ()\r\n-- script\r\nindirect party =\r\n    [submit party do createCmd (T party)]\r\nindirect party =\r\n    [submit party do createCmd (T party)]\r\n    >> pure ()\r\nindirect party = do\r\n    [submit party do createCmd (T party)]\r\n    pure ()\r\n```",
        "createdAt" : "2020-08-28T09:04:58Z",
        "updatedAt" : "2020-08-28T11:39:11Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "787de71e-3655-4e0b-bb30-ef512934b0aa",
        "parentId" : "4ea708be-e1fc-4951-9620-121383f0e881",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Agreed, the script behavior is better :+1: ",
        "createdAt" : "2020-08-28T11:39:36Z",
        "updatedAt" : "2020-08-28T11:39:37Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cd8cd54f886d4b5d729f46c48c70c22c49f3082",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +551,555 @@              , \"main = do\"\n              , \"  alice <- allocateParty \\\"Alice\\\"\"\n              , \"  submit alice do createCmd (T alice)\"\n              , \"  submitCreateT alice\"\n              , \"submitCreateT party = submit party do createCmd (T party)\""
  },
  {
    "id" : "cf7d61ff-27eb-4966-ae35-a35573b74fc8",
    "prId" : 2673,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2673",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b439228-9f50-487a-8aa4-3d001e2bfe23",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Can we get some proper tests in the shake tests that this works like it is supposed to?",
        "createdAt" : "2019-08-28T07:18:26Z",
        "updatedAt" : "2019-09-05T14:29:06Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "4b3feb0f-7711-421b-9181-0eb31080f684",
        "parentId" : "8b439228-9f50-487a-8aa4-3d001e2bfe23",
        "authorId" : "295ee093-aa35-4d63-bc72-cc3a66e7e50c",
        "body" : "I am not sure what do you mean by like it is supposed to, earlier we had no field information now we have that ",
        "createdAt" : "2019-08-28T18:04:10Z",
        "updatedAt" : "2019-09-05T14:29:06Z",
        "lastEditedBy" : "295ee093-aa35-4d63-bc72-cc3a66e7e50c",
        "tags" : [
        ]
      },
      {
        "id" : "92a27b4b-8569-462e-9629-e56765add83d",
        "parentId" : "8b439228-9f50-487a-8aa4-3d001e2bfe23",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Just testing a bunch of different case and making sure (without golden tests) that they all behave as you expect, e.g., records, nested records, variants, …",
        "createdAt" : "2019-08-28T18:11:09Z",
        "updatedAt" : "2019-09-05T14:29:06Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "afd378ed-4bd6-4eb2-baf9-39828bfd5842",
        "parentId" : "8b439228-9f50-487a-8aa4-3d001e2bfe23",
        "authorId" : "295ee093-aa35-4d63-bc72-cc3a66e7e50c",
        "body" : "The nested record types, edge creation and such are covered with tests in `DA.Test.ShakeIdeClient` which do not use golden file tests. This is checking if the dot string is generated currently because that is not covered by the shakeIde tests. ",
        "createdAt" : "2019-08-28T18:26:52Z",
        "updatedAt" : "2019-09-05T14:29:06Z",
        "lastEditedBy" : "295ee093-aa35-4d63-bc72-cc3a66e7e50c",
        "tags" : [
        ]
      },
      {
        "id" : "9d7c27b0-9ddb-4c20-bd86-39944a63307f",
        "parentId" : "8b439228-9f50-487a-8aa4-3d001e2bfe23",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "What I am trying to say is that we should have tests that check for this in the shake tests. Given that this change did not change any of the Shake tests, they evidently don’t test your change here so we should extend them to test that fields are correctly represented in the graph.",
        "createdAt" : "2019-08-28T18:28:52Z",
        "updatedAt" : "2019-09-05T14:29:06Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "8f76abac-d12f-4b74-ad84-bc84be5af5cd",
        "parentId" : "8b439228-9f50-487a-8aa4-3d001e2bfe23",
        "authorId" : "295ee093-aa35-4d63-bc72-cc3a66e7e50c",
        "body" : "Ah ok that makes sense, thanks for explaining ",
        "createdAt" : "2019-08-28T18:54:31Z",
        "updatedAt" : "2019-09-05T14:29:06Z",
        "lastEditedBy" : "295ee093-aa35-4d63-bc72-cc3a66e7e50c",
        "tags" : [
        ]
      },
      {
        "id" : "db44ad63-1b7d-4b30-9176-3b2206cd8913",
        "parentId" : "8b439228-9f50-487a-8aa4-3d001e2bfe23",
        "authorId" : "295ee093-aa35-4d63-bc72-cc3a66e7e50c",
        "body" : "I have updated the tests to assert the fields that were added in this PR. The bit that is not tested in these ShakeIdeTest is the style (the table one which shows template data fields within the DOT file). ",
        "createdAt" : "2019-09-04T18:45:32Z",
        "updatedAt" : "2019-09-05T14:29:06Z",
        "lastEditedBy" : "295ee093-aa35-4d63-bc72-cc3a66e7e50c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f132fa8499359d43acb8be985d25f7293c76ce03",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +436,440 @@        actualDotString :: ExecuteCommandResponse <- LSP.request WorkspaceExecuteCommand $ ExecuteCommandParams\n           \"daml/damlVisualize\"  (Just (List [Aeson.String $ T.pack escapedFp]))\n        let expectedDotString = \"digraph G {\\ncompound=true;\\nrankdir=LR;\\nsubgraph cluster_Coin{\\nn0[label=Create][color=green]; \\nn1[label=Archive][color=red]; \\nn2[label=Delete][color=red]; \\nlabel=<<table align = \\\"left\\\" border=\\\"0\\\" cellborder=\\\"0\\\" cellspacing=\\\"1\\\">\\n<tr><td align=\\\"center\\\"><b>Coin</b></td></tr><tr><td align=\\\"left\\\">owner</td></tr> \\n</table>>;color=blue\\n}\\n}\\n\"\n        liftIO $ assertEqual \"Visulization command\" (Just expectedDotString) (_result actualDotString)\n        closeDoc main'"
  },
  {
    "id" : "d4cbd1ba-a021-48d4-be1a-68fa5a3680b0",
    "prId" : 2597,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2597",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0130a92-2248-4db3-9e4e-e6c30efb51ba",
        "parentId" : null,
        "authorId" : "295ee093-aa35-4d63-bc72-cc3a66e7e50c",
        "body" : "This looks more like golden test. Let me know if there is a better way to do this.",
        "createdAt" : "2019-08-23T15:59:55Z",
        "updatedAt" : "2019-08-26T14:36:05Z",
        "lastEditedBy" : "295ee093-aa35-4d63-bc72-cc3a66e7e50c",
        "tags" : [
        ]
      },
      {
        "id" : "0d1cddb5-b0b9-4bff-a766-4d0cb17e6389",
        "parentId" : "c0130a92-2248-4db3-9e4e-e6c30efb51ba",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Given that the example is very simple, I think this is fine for now. If it becomes an issue we could either do some simple string matching using a regex or `isInfixOf` or if we want to test something more complex, parse the dot file and check for certain connections. But given that we have separate tests for testing that visualization works correctly, keeping this test simple and focusing on whether the LSP integration works seems like a good choice.",
        "createdAt" : "2019-08-26T06:58:23Z",
        "updatedAt" : "2019-08-26T14:36:05Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +436,440 @@        actualDotString :: ExecuteCommandResponse <- LSP.request WorkspaceExecuteCommand $ ExecuteCommandParams\n           \"daml/damlVisualize\"  (Just (List [Aeson.String $ T.pack escapedFp]))\n        let expectedDotString = \"digraph G {\\ncompound=true;\\nrankdir=LR;\\nsubgraph cluster_Coin{\\nn0[label=Create][color=green]; \\nn1[label=Archive][color=red]; \\nn2[label=Delete][color=red]; \\nlabel=Coin;color=blue\\n}\\n}\\n\"\n        liftIO $ assertEqual \"Visulization command\" (Just expectedDotString) (_result actualDotString)\n        closeDoc main'"
  },
  {
    "id" : "66870fcb-a62d-44f6-88db-e11324203ede",
    "prId" : 2257,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2257",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3786f59a-4d27-4c4c-9c6c-8525f7612807",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Why not `assert True`? :)",
        "createdAt" : "2019-07-23T09:37:38Z",
        "updatedAt" : "2019-07-23T12:16:41Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "6dc0f94a-7972-47b6-be80-39a7dea0f302",
        "parentId" : "3786f59a-4d27-4c4c-9c6c-8525f7612807",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Because I’m lazy and keep copying the same silly example from other tests :stuck_out_tongue: ",
        "createdAt" : "2019-07-23T12:16:30Z",
        "updatedAt" : "2019-07-23T12:16:41Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a507defa99383adda7779ab3da3c31a1db28779",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +256,260 @@              , \"module Main where\"\n              , \"single = scenario do\"\n              , \"  assert (True == True)\"\n              ]\n          lenses <- getCodeLenses main'"
  },
  {
    "id" : "a1cda949-d7f2-4de8-a0ca-dd296532f8df",
    "prId" : 2257,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2257",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c03cb9c2-9d28-496d-a632-5bd8e3c9b066",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Very nice.",
        "createdAt" : "2019-07-23T09:39:31Z",
        "updatedAt" : "2019-07-23T12:16:41Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a507defa99383adda7779ab3da3c31a1db28779",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +281,285 @@          changeDoc main' [TextDocumentContentChangeEvent (Just (Range (Position 1 0) (Position 1 0))) Nothing \"\\n\\n\"]\n          lenses <- getCodeLenses main'\n          liftIO $ lenses @?= [codeLens (Range (Position 4 0) (Position 4 6))]\n          closeDoc main'\n    , testCase \"type on hover: name\" $ run $ do"
  },
  {
    "id" : "45a06f86-9303-492c-a2bf-ebb235c90191",
    "prId" : 2004,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2004",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e47a3f6-98e2-4f56-8932-e1390adf1e48",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Why do we split this into two loops with the same body?",
        "createdAt" : "2019-07-04T11:23:19Z",
        "updatedAt" : "2019-07-04T11:52:15Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "fc0a0578-6365-43de-9c49-236a398c1179",
        "parentId" : "6e47a3f6-98e2-4f56-8932-e1390adf1e48",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Oops, that made sense before now it doesn’t, changed",
        "createdAt" : "2019-07-04T11:30:52Z",
        "updatedAt" : "2019-07-04T11:52:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "54d6d583f4fec01a2e40f80c1bec3d0962e66f68",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +423,427 @@        forM_ [1 .. 2000] $ \\i -> do\n            replaceDoc foo $ fooContent i\n            expect i\n        expectDiagnostics [(\"Foo.daml\", [])]\n  , testCase \"Set 10 files of interest\" $ run $ do"
  },
  {
    "id" : "98428018-4608-4b4a-97fe-c3ff00f6584a",
    "prId" : 2004,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2004",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2550afa-0b5a-4847-9127-b190d9dadbe6",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Could we please give this a type signature as a reminder what monad we're in.",
        "createdAt" : "2019-07-04T11:25:44Z",
        "updatedAt" : "2019-07-04T11:52:15Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "95e20a05-6f44-46c8-98ef-90cf81a67fcb",
        "parentId" : "c2550afa-0b5a-4847-9127-b190d9dadbe6",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Done!",
        "createdAt" : "2019-07-04T11:49:22Z",
        "updatedAt" : "2019-07-04T11:52:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "54d6d583f4fec01a2e40f80c1bec3d0962e66f68",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +402,406 @@                ]\n            expect :: Int -> Session ()\n            expect i = when (odd i) $ do\n                -- We do not wait for empty diagnostics on even i since debouncing\n                -- causes them to only be emitted after a delay which slows down"
  },
  {
    "id" : "9db8155c-1fa2-4e1f-913f-c2f02ec905ec",
    "prId" : 1799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52db4fe3-96fe-4097-b858-132d85700ef0",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "@cocreature This had a 180 s timeout before, now it takes less than three seconds. That makes me suspicious.",
        "createdAt" : "2019-06-21T13:15:58Z",
        "updatedAt" : "2019-06-21T13:42:33Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "294c95eb-9594-47c2-bf1c-bc74676d0896",
        "parentId" : "52db4fe3-96fe-4097-b858-132d85700ef0",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "The code looks reasonable to me and I don’t see any reason why typechecking 100 trivial modules should take longer than 3 seconds so I suspect that we might just have fixed whatever was causing issues here.",
        "createdAt" : "2019-06-21T13:30:16Z",
        "updatedAt" : "2019-06-21T13:42:33Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "77a8455c0ec36c5f5ba815fbdbb20ae8784a4151",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +435,439 @@            , \"foo100 = False\"\n            ]\n        withTimeout 30 $ do\n            expectDiagnostics [(\"Foo0.daml\", [(DsError, (4, 7), \"Couldn't match expected type\")])]\n            void $ replaceDoc foo0 $ moduleContent \"Foo0\""
  },
  {
    "id" : "6878c045-f695-44a5-8b7b-f0f09a5fd057",
    "prId" : 1516,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da5b7bd2-e2e1-440b-a619-854e34b45027",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Why not just `daml-foundations/daml-tools/da-hs-damlc-app/...` - using `</>` doesn't really help but is more verbose.",
        "createdAt" : "2019-06-04T18:48:42Z",
        "updatedAt" : "2019-06-04T18:51:17Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      },
      {
        "id" : "d4b103a8-4726-4bbd-aea1-fae2d1f8631a",
        "parentId" : "da5b7bd2-e2e1-440b-a619-854e34b45027",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "At this point I’m slightly traumatized from issues caused by mixing `/` and `\\` on Windows so I try to avoid it where I can :slightly_smiling_face:",
        "createdAt" : "2019-06-04T18:56:28Z",
        "updatedAt" : "2019-06-04T18:56:28Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "01c6223d9eda18a3bb535e620ebea04d9988ba9b",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +20,24 @@main = do\n    damlcPath <- locateRunfiles $\n        mainWorkspace </> \"daml-foundations\" </> \"daml-tools\" </>\n        \"da-hs-damlc-app\" </> \"da-hs-damlc-app\"\n    let run s = withTempDir $ \\dir -> runSessionWithConfig conf (damlcPath <> \" ide\") fullCaps dir s"
  }
]