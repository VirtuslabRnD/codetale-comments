[
  {
    "id" : "61f9ce10-9fd4-4e26-abd5-2e54a4c1dd63",
    "prId" : 6508,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6508#pullrequestreview-237701536",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "589386ef-c744-4e48-a087-fcab7a122365",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "It is worth figuring out where they come from and why. Could or should they already be relative? This is a separate issue.",
        "createdAt" : "2019-05-15T07:42:02Z",
        "updatedAt" : "2019-05-15T09:52:03Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "2d7fb064-0d70-4643-9c6e-8948f9406b88",
        "parentId" : "589386ef-c744-4e48-a087-fcab7a122365",
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "Technically, both relative and absolute paths are correct ways to point to a file. If the compiler at some point converts relative paths to absolute ones, I don't think it is an issue.",
        "createdAt" : "2019-05-15T08:58:50Z",
        "updatedAt" : "2019-05-15T09:52:03Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "e8b25757-af6a-4ddb-92d4-3f157486b8b0",
        "parentId" : "589386ef-c744-4e48-a087-fcab7a122365",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "That can be an issue. For example `.tasty` files contain a path to the file which will be published. This path must be relative or any tool that consumes them will be lost.",
        "createdAt" : "2019-05-15T09:18:52Z",
        "updatedAt" : "2019-05-15T09:52:03Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "792442105ee053a1180d9204ed5856d16a481a40",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +686,690 @@    def getMissingExpectedErrors(errorMap: HashMap[String, Integer], reporterErrors: Iterator[MessageContainer]) = !reporterErrors.forall { error =>\n      val key = if (error.pos.exists) {\n        def toRelative(path: String): String =  // For some reason, absolute paths leak from the compiler itself...\n          path.split(\"/\").dropWhile(_ != \"tests\").mkString(\"/\")\n        val fileName = toRelative(error.pos.source.file.toString)"
  },
  {
    "id" : "1bcd06c3-b3b3-476f-aa6d-4247d30ce529",
    "prId" : 6340,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6340#pullrequestreview-229976589",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42368657-4d1d-48e0-b83d-71cb28c43869",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "It would be nice to document the methods in this trait",
        "createdAt" : "2019-04-21T15:02:40Z",
        "updatedAt" : "2019-05-02T12:50:24Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "03a82f51-2168-4a97-81ee-24a045b3a165",
        "parentId" : "42368657-4d1d-48e0-b83d-71cb28c43869",
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "I don't really like comments in the code. Besides, there's not that much code in that trait.",
        "createdAt" : "2019-04-23T09:24:40Z",
        "updatedAt" : "2019-05-02T12:50:24Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "4d679b0c-ca62-431a-8063-be985fbeaf67",
        "parentId" : "42368657-4d1d-48e0-b83d-71cb28c43869",
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "At first glance, it is not clear what is public API, helper functions, meant to be overridden in this trait... I would at the very least, make this more explicit:\r\n- `encapsulatedCompilation` is the main entry point. This needs a doc comment\r\n- `onComplete`, `compileTestSource` are helper functions only called from `encapsulatedCompilation`. They should either be private or defined in `encapsulatedCompilation`.\r\n- `testFailed`, `onFailure`, `testFailed` are callback meant to be overridden. Why not write it in a doc comment?\r\n- `testFailed` is a confusing name. When is `onFailure` called? When is `testFailed` called? How do they relate to each other? It is not clear from the name what this function is supposed to do.",
        "createdAt" : "2019-04-24T08:50:53Z",
        "updatedAt" : "2019-05-02T12:50:24Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      }
    ],
    "commit" : "55fde9b31993d93b7da6ea5fa346738218ed12b9",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +184,188 @@  }\n\n  private trait CompilationLogic { this: Test =>\n    def suppressErrors = false\n"
  },
  {
    "id" : "045ca819-0a73-4d00-a42f-fb74b8f3fe5d",
    "prId" : 6292,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6292#pullrequestreview-225714171",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8650392-1206-4f1b-8dc0-fe27990790bc",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "I believe `ex.PrintStackTrace` already prints the message:\r\n```scala\r\nscala> new Exception(\"Hello World\").printStackTrace()\r\njava.lang.Exception: Hello World\r\n\tat $line5.$read$$iw$$iw$.<init>(<console>:12)\r\n\tat $line5.$read$$iw$$iw$.<clinit>(<console>)\r\n\t...\r\n```",
        "createdAt" : "2019-04-11T18:31:45Z",
        "updatedAt" : "2019-04-11T18:31:45Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9ee294bf6ca59616b78f3c8b2f8a2ce7544455f",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +486,490 @@          catch {\n            case ex: Exception =>\n              System.err.println(ex.getMessage)\n              ex.printStackTrace()\n          }"
  },
  {
    "id" : "e9b49716-542f-4fb1-a7bb-42d9ae97acc6",
    "prId" : 5852,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5852#pullrequestreview-200434073",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5283eba-de36-4d71-a736-9539a3325310",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Minor: I usually find it more readable if we move the check `checkFile.exists` to the call site.",
        "createdAt" : "2019-02-05T17:27:14Z",
        "updatedAt" : "2019-02-06T07:30:38Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "eec7716d-9cfc-4fdc-8927-feca3164cdf5",
        "parentId" : "e5283eba-de36-4d71-a736-9539a3325310",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "done",
        "createdAt" : "2019-02-06T07:03:07Z",
        "updatedAt" : "2019-02-06T07:30:38Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d80546ed05fcb164d957cb0c4a04568cbf16c1d",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +768,772 @@          val expexted = Source.fromFile(checkFile, \"UTF-8\").getLines().toList\n          diffMessage(sourceName, actual, expexted).foreach(fail)\n        }\n\n        val (compilerCrashed, expectedErrors, actualErrors, hasMissingAnnotations, errorMap) = testSource match {"
  },
  {
    "id" : "cfe15b84-af70-471c-802a-7b6356802c0c",
    "prId" : 5852,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5852#pullrequestreview-200435361",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bda27dda-add4-4c29-87fe-ff6329732c1e",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "`sourceFiles`? => no special case for directory",
        "createdAt" : "2019-02-05T19:20:22Z",
        "updatedAt" : "2019-02-06T07:30:38Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "d4b7f812-f640-46b4-85eb-d2230a690bec",
        "parentId" : "bda27dda-add4-4c29-87fe-ff6329732c1e",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "That is the way it works for `pos` and `run` tests.",
        "createdAt" : "2019-02-06T07:10:04Z",
        "updatedAt" : "2019-02-06T07:30:38Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d80546ed05fcb164d957cb0c4a04568cbf16c1d",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +776,780 @@            val reporter = compile(sourceFiles, flags, true, outDir)\n            val actualErrors = reporter.errorCount\n            files.foreach { file =>\n              if (!file.isDirectory) {\n                val checkFile = new JFile(file.getAbsolutePath.replaceFirst(\"\\\\.scala$\", \".check\"))"
  },
  {
    "id" : "65dc4a5f-1d86-48c3-bda8-c3eabbc75e2c",
    "prId" : 4832,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4832#pullrequestreview-140242641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6122834-cb83-4b8d-9975-ce05b15f4777",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "This is the easiest way to reproduce but is it helpful for debugging? My experience is that when you run a test with vulpix and the compiler crashes then the exception is swallowed and I either need to look at the test log or run the compiler manually.\r\n\r\nI often want to run the compiler manually outside vulpix and I would rather have the manual instructions. E.g:\r\n```\r\n> dotc -d tmp Foo.scala -some-options\r\n> dotc Foo -classpath tmp -from-tasty -some-options\r\n```",
        "createdAt" : "2018-07-25T09:07:12Z",
        "updatedAt" : "2018-07-25T19:07:09Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "c847e787-438c-4785-9bb0-dd0bbc0b40d5",
        "parentId" : "c6122834-cb83-4b8d-9975-ce05b15f4777",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "The issue is that there is no way at this point to know which are the inputs (class names) of the second script. I will try to come up with something more precise but for now, it is more important to emit a report that gives a correct way to reproduce the error.",
        "createdAt" : "2018-07-25T10:00:13Z",
        "updatedAt" : "2018-07-25T19:07:09Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "5edcee6bf13ce6a05a026c6d164b9293ebd4299f",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1291,1295 @@            |the test can be reproduced by running:\n            |\n            |  sbt \"testFromTasty $file\"\n            |\n            |This tests can be disabled by adding `${file.getName}` to `compiler/test/dotc/$runOrPos-$listName.blacklist`"
  },
  {
    "id" : "4a674c64-f336-4f3e-9701-7cdbde369f2f",
    "prId" : 2194,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2194#pullrequestreview-32223734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35ce4bb1-c83e-4cab-8da5-801c67e88c4c",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "If this doesn't use anything from the outer class, it should not be an inner class, and preferably it should be in its own file.",
        "createdAt" : "2017-04-11T20:53:15Z",
        "updatedAt" : "2017-04-12T09:49:48Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6d519ab713cac49c6228f142cc4ccfc8880ef10",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +192,196 @@\n    /** A runnable that logs its contents in a buffer */\n    trait LoggedRunnable extends Runnable {\n      import TestReporter.logWriter\n"
  }
]