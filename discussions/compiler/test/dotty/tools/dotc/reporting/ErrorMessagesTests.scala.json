[
  {
    "id" : "65730b6e-973e-4def-a0a5-d57fdbff204c",
    "prId" : 5180,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5180#pullrequestreview-160842090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db303d3c-dec0-4ac1-8ca9-46ad20d356d9",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "I would rewrite the test as follow to be minimal so that you get only one error message:\r\n```scala\r\nclass Foo\r\nclass Test {\r\n  def test(foo: Foo) = foo match {\r\n    case Foo(name) => ???\r\n  }\r\n}\r\n```",
        "createdAt" : "2018-10-02T17:42:53Z",
        "updatedAt" : "2018-10-03T15:48:06Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      }
    ],
    "commit" : "08373f4a466e9dc2e2a0c19b08964a091e56a2ff",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1520,1524 @@        |       case Foo(name) => ???\n        |   }\n        | }\n      \"\"\".stripMargin\n    }.expect { (ictx, messages) =>"
  },
  {
    "id" : "1f33fab6-3c10-4acc-b085-56764df8aa8f",
    "prId" : 5014,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5014#pullrequestreview-149512054",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cab50266-2ced-41ec-9db1-93c23d4442a5",
        "parentId" : null,
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "FWIW: we usually don't test strings but that's the correct thing *as long as we don't switch to error messages here (#1589). @skvithalani are you interested in doing that in a followup? Accepting this meanwhile.",
        "createdAt" : "2018-08-25T14:36:40Z",
        "updatedAt" : "2018-08-25T14:36:56Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      },
      {
        "id" : "4f559e9b-3ac0-4717-b029-d6500cf421aa",
        "parentId" : "cab50266-2ced-41ec-9db1-93c23d4442a5",
        "authorId" : "4906bcbd-69bc-4e74-9faf-20035a7c0351",
        "body" : "Sure . I will take that up.",
        "createdAt" : "2018-08-25T14:38:26Z",
        "updatedAt" : "2018-08-25T14:38:26Z",
        "lastEditedBy" : "4906bcbd-69bc-4e74-9faf-20035a7c0351",
        "tags" : [
        ]
      },
      {
        "id" : "a038e3a9-521a-49e0-b064-ff9774cd803d",
        "parentId" : "cab50266-2ced-41ec-9db1-93c23d4442a5",
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "Thanks! Beyond the pre-labeled issues, ones in parser/desugar tend to be more approachable.",
        "createdAt" : "2018-08-25T14:44:52Z",
        "updatedAt" : "2018-08-25T14:44:52Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      }
    ],
    "commit" : "843e52a89f699ce5de4a55345f046cad561c145d",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +31,35 @@        assertMessageCount(1, messages)\n        val errorMsg = messages.head\n        assertEquals(\"normal case class Bar in package <empty> cannot extend an enum\", errorMsg.msg)\n      }\n"
  },
  {
    "id" : "3924af4a-ef44-487c-a97e-3604d2728594",
    "prId" : 3905,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3905#pullrequestreview-91449439",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9903608e-5057-41a2-a3f5-4f7d302c9299",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "This is very mysterious: If I copy out the code of the test I always see 4 messages - one \"missing param type\", followed by 3 \"cannot resolve overloading\". that happens no matter whether I am on master or this PR. \r\n\r\nOn master the ErrorMessageTests succeeded, i.e. they report only one failure instead of the 4 we see in the terminal. On this PR this is no longer the case. Instead, it reports all 4 tests in `messages`, but in reverse order. \r\n\r\nI have no idea what could be the cause of these effects.",
        "createdAt" : "2018-01-24T15:51:57Z",
        "updatedAt" : "2018-01-24T16:56:46Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "943cd558-cefd-4f3e-abb6-e5175a0a3a52",
        "parentId" : "9903608e-5057-41a2-a3f5-4f7d302c9299",
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "The reporter for the error message tests is mixed in with `dotty.tools.dotc.reporting.UniqueMessagePositions` which suppresses multiple error messages per position. This is why only one error message is reported. This PR must have changed the position of the reported error messages, so that now the test sees 4 messages as well.",
        "createdAt" : "2018-01-24T17:04:41Z",
        "updatedAt" : "2018-01-24T17:04:42Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "c50e864f-24c1-451d-ad2d-e9918f594dbb",
        "parentId" : "9903608e-5057-41a2-a3f5-4f7d302c9299",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "The problem is that in master, there is no overlap in positions of the 4 errors, and this PR doesn't change positions of the errors, and the order doesn't change either.",
        "createdAt" : "2018-01-24T17:33:41Z",
        "updatedAt" : "2018-01-24T17:33:41Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "7acb6db7-941e-46de-898e-cb26c91dc368",
        "parentId" : "9903608e-5057-41a2-a3f5-4f7d302c9299",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "The root cause is the following line in `Inferencing.scala` (https://github.com/lampepfl/dotty/blob/master/compiler/src/dotty/tools/dotc/typer/Inferencing.scala#L339-L342):\r\n\r\n```Scala\r\n      val hasUnreportedErrors = ctx.typerState.reporter match {\r\n        case r: StoreReporter if r.hasErrors => true\r\n        case _ => false\r\n      }\r\n\r\n      // ....\r\n\r\n      if (!hasUnreportedErrors)\r\n        vs foreachBinding { (tvar, v) =>\r\n          if (v != 0 && ctx.typerState.constraint.contains(tvar)) {\r\n            // previous interpolations could have already instantiated `tvar`\r\n            // through unification, that's why we have to check again whether `tvar`\r\n            // is contained in the current constraint.\r\n            typr.println(s\"interpolate ${if (v == 1) \"co\" else \"contra\"}variant ${tvar.show} in ${tp.show}\")\r\n            ensureConstrained()\r\n            tvar.instantiate(fromBelow = v == 1)\r\n          }\r\n        }\r\n\r\n```\r\n\r\nIn normal command line compilation, we are using `ConsoleReporter`, `hasUnreportedErrors` will be false, despite there's error in `ConsoleReporter` ( unspecified type of anonymous function), thus resulting instantiating of `List.unapplySeq[A](null)` with `A = Nothing`. The instantiation in turn leads to 3 overloading errors.\r\n\r\nIn the testing, we are using `StoreReporter`, thus `hasUnreportedErrors` will be `true` due to the unspecified type of the anonymous function. Now, instantiation of `A` in `List.unapplySeq[A](null)` will be delayed, after type checking `(1, 2, 3)`. So there will not be overloading errors and `A = Int` eventually.\r\n\r\n After the change in this PR, we are triggering early instantiation even for `StoreReporter`, thus now in test we get 4 errors.",
        "createdAt" : "2018-01-24T22:23:41Z",
        "updatedAt" : "2018-01-25T09:14:09Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "dca9bf7b-0c1d-4fe4-bcfb-63d32b870ed0",
        "parentId" : "9903608e-5057-41a2-a3f5-4f7d302c9299",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Thanks for clearing this up, Fengyung!",
        "createdAt" : "2018-01-25T07:37:32Z",
        "updatedAt" : "2018-01-25T07:37:32Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "c13ba1c9-6623-479e-a7da-dca0d0fa5f10",
        "parentId" : "9903608e-5057-41a2-a3f5-4f7d302c9299",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Do we need to change or document `hasUnreportedErrors` somehow? The fact that different reporters will influence type inference doesn't  sound correct.",
        "createdAt" : "2018-01-25T09:02:21Z",
        "updatedAt" : "2018-01-25T09:02:21Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "540b01119295a04c7e29f5430064a6214d3ebfb6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +812,816 @@      implicit val ctx: Context = ictx\n\n      val AnonymousFunctionMissingParamType(param, args, _, pt) = messages.last\n      assertEquals(\"x$1\", param.show)\n      assertEquals(s\"List(ValDef(${param.show},TypeTree,EmptyTree))\", args.toString)"
  }
]