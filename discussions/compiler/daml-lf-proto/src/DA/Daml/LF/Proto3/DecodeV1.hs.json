[
  {
    "id" : "8a5e4e4e-834c-4a89-84f3-69cf0af68076",
    "prId" : 9381,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9381",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23c22041-8428-4669-a54e-b72198026190",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I somehow managed to misread this as `LitRoundingFloof` and now Iâ€™m disappointed :poodle: ",
        "createdAt" : "2021-04-12T13:26:53Z",
        "updatedAt" : "2021-04-13T13:24:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "38e3a4b8c1178583667cdff57390fc6fe15f44b8",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +772,776 @@       LF1.PrimLit_RoundingModeDOWN -> BERoundingMode LitRoundingDown\n       LF1.PrimLit_RoundingModeCEILING -> BERoundingMode LitRoundingCeiling\n       LF1.PrimLit_RoundingModeFLOOR -> BERoundingMode LitRoundingFloor\n       LF1.PrimLit_RoundingModeHALF_UP -> BERoundingMode LitRoundingHalfUp\n       LF1.PrimLit_RoundingModeHALF_DOWN -> BERoundingMode LitRoundingHalfDown"
  },
  {
    "id" : "4c9a4400-3afd-412f-b1d0-6029819d6225",
    "prId" : 8087,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8087",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51189fc3-4f45-4530-83dc-bb82a59ea5c8",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I might be guilty of dodging to write this function in the past and having used `decodeDottedName wrapDottedName (Just (Right dnId))` instead. Thanks for doing it properly!",
        "createdAt" : "2020-11-27T14:39:37Z",
        "updatedAt" : "2020-11-30T09:34:33Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "be09f73da5e864a208b3886e2844f3bfb609f366",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +126,130 @@\ndecodeDottedNameId :: ([T.Text] -> a) -> Int32 -> Decode a\ndecodeDottedNameId wrapDottedName dnId = do\n  (_, unmangledOrErr) <- lookupDottedName dnId\n  case unmangledOrErr of"
  },
  {
    "id" : "47a3e49c-2211-4255-8385-ea44586867b3",
    "prId" : 8087,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8087",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db0c9363-1859-40cf-b627-ef951ff67daf",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Please use the full url of the issue. I grep it when releasing a new version of LF.\r\n```# FIXME: https://github.com/digital-asset/daml/issues/8020```",
        "createdAt" : "2020-11-30T13:27:36Z",
        "updatedAt" : "2020-11-30T13:28:26Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "e3da2a17-61a4-4a44-9a78-0979f41cb922",
        "parentId" : "db0c9363-1859-40cf-b627-ef951ff67daf",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "I'll add the full URL for instances that will only be relevant when the version number changes, for example in the commit https://github.com/digital-asset/daml/pull/8114/commits/bfff8a08d53d08e94f3f717d03a6003c9c98acb5\r\n\r\nIn the meantime, just grep for `#8020` if you want to find _temporary_ placeholders like this.",
        "createdAt" : "2020-11-30T16:37:07Z",
        "updatedAt" : "2020-11-30T16:38:31Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "be09f73da5e864a208b3886e2844f3bfb609f366",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +437,441 @@\n  LF1.BuiltinFunctionERROR          -> BEError\n  LF1.BuiltinFunctionTHROW -> undefined -- TODO #8020\n  LF1.BuiltinFunctionANY_EXCEPTION_MESSAGE -> undefined -- TODO #8020\n  LF1.BuiltinFunctionMAKE_GENERAL_ERROR -> undefined -- TODO #8020"
  },
  {
    "id" : "c4b00270-6b2e-43f0-ad2f-baf83edebabf",
    "prId" : 3067,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9e2407d-eaeb-4e13-a40f-bc70f482cb29",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I think a comment on what the arguments represent would be good.",
        "createdAt" : "2019-10-02T14:23:04Z",
        "updatedAt" : "2019-10-04T10:37:43Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb8a3c63a39ce4715734e5fd8e994ef0f0490499",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +70,74 @@-- then the number must not be set, i.e. zero. If there are no strings,\n-- then the number is treated as an index into the interning table.\ndecodeInternableStrings :: V.Vector TL.Text -> Int32 -> Decode [T.Text]\ndecodeInternableStrings strs id\n    | V.null strs = lookupDottedName id"
  },
  {
    "id" : "49d1d6af-d1b7-49f6-a403-8d5a0eab57bf",
    "prId" : 3053,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3053",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2633d068-679c-4690-ad29-c727e3b02db2",
        "parentId" : null,
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "This looks like a new addition here? Or does this replace the `PackageRefCtx`?",
        "createdAt" : "2019-09-26T18:28:50Z",
        "updatedAt" : "2019-09-26T18:29:10Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      },
      {
        "id" : "7c4b7ba1-4f4f-49eb-b09a-7fabf41c6f88",
        "parentId" : "2633d068-679c-4690-ad29-c727e3b02db2",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "It replaces the `PackageRefCtx`. I somehow prefer passing data rather than functions around when possible.",
        "createdAt" : "2019-09-27T07:42:21Z",
        "updatedAt" : "2019-09-27T07:42:21Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "a43bda6a4d235ee9cc39e6d532b1e4c7213585cf",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +27,31 @@\nnewtype DecodeEnv = DecodeEnv\n    { internedStrings :: V.Vector T.Text\n    }\n"
  },
  {
    "id" : "870b2735-9fa5-46f6-9760-eb33723a3dd4",
    "prId" : 2670,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2670",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a23ec371-e1e6-4faa-b5f2-7779b820122e",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Do we have tests for the decoder anywhere? Maybe some roundtrip tests?",
        "createdAt" : "2019-08-27T18:32:02Z",
        "updatedAt" : "2019-08-28T11:30:58Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "16c6f7db-6fba-4f1a-b193-11cee2555b8f",
        "parentId" : "a23ec371-e1e6-4faa-b5f2-7779b820122e",
        "authorId" : null,
        "body" : "I couldn't find any. I added the issue #2682 to track this.",
        "createdAt" : "2019-08-28T11:49:46Z",
        "updatedAt" : "2019-08-28T11:49:46Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "2c2900d7cd2fd33fbf5de9881afed0fec07bff1f",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +169,173 @@  LF1.BuiltinFunctionEQUAL_INT64 -> BEEqual BTInt64\n  LF1.BuiltinFunctionEQUAL_DECIMAL -> BEEqual BTDecimal\n  LF1.BuiltinFunctionEQUAL_NUMERIC -> BEEqualNumeric\n  LF1.BuiltinFunctionEQUAL_TEXT -> BEEqual BTText\n  LF1.BuiltinFunctionEQUAL_TIMESTAMP -> BEEqual BTTimestamp"
  },
  {
    "id" : "fcee64ec-9e2f-44ce-9207-894276d2cc2a",
    "prId" : 1614,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1614",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b519c83-ef4e-4262-a23e-f2a0cbcbfd0e",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Why not just call this `Decode`? Together with `MonadDecode` this would fit `mtl`'s `X` vs `MonadX` naming scheme.",
        "createdAt" : "2019-06-21T14:20:37Z",
        "updatedAt" : "2019-06-26T07:32:46Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "65515da9-71a7-47a9-8838-62edf4043fc9",
        "parentId" : "4b519c83-ef4e-4262-a23e-f2a0cbcbfd0e",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "`MonadDecode` reflects only `Decode`, not this one (which also includes `MonadReader PackageRefCtx`). Also, `Decode` is in the public interface, whereas the additional elements of `DecodeImpl` are not.",
        "createdAt" : "2019-06-24T09:47:35Z",
        "updatedAt" : "2019-06-26T07:32:46Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "cdebfafb9ac009ed15ea8adb801c50def398bf27",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +27,31 @@\n-- internal functions that *implement* decoding\ntype DecodeImpl = ReaderT PackageRefCtx Decode\ntype MonadDecode = MonadError Error\n"
  }
]