[
  {
    "id" : "7ff00659-1922-4358-bbb9-ed5f0a23a6f8",
    "prId" : 3959,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bb0d9a6-9cf8-4582-833d-2fc0803e2feb",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "It would be great if you could add one slightly bigger testcase that tests code a module that is more of the form that we will want to generate, e.g., a single module that defines type synonyms for `Functor` and `Applicative`, instances for one type and a definition that has an `Applicative` constraint. Don’t worry about exactly capturing how the generated code will look like.",
        "createdAt" : "2020-01-09T19:16:49Z",
        "updatedAt" : "2020-01-10T16:41:51Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "1eea5fdf-4768-4c56-b901-73cac462729d",
        "parentId" : "3bb0d9a6-9cf8-4582-833d-2fc0803e2feb",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Not sure exactly what you want to see in this bigger example.\r\nAnd what are we attempting to test, that isn't already tested?\r\n",
        "createdAt" : "2020-01-10T09:25:30Z",
        "updatedAt" : "2020-01-10T16:41:51Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "c6a59a1f-38d3-4f35-8999-7618242e475c",
        "parentId" : "3bb0d9a6-9cf8-4582-833d-2fc0803e2feb",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "something like the following (in pseudocode)\r\n\r\n```\r\ntype Functor f = [(\"fmap\", forall a b. (a -> b) -> f a -> f b)]\r\ntype Applicative f = [(\"super\", Functor f), (\"pure\", forall a. a -> f a), (\"<*>\", forall a b. f (a -> b) -> f b -> f a)]\r\noptFunctor : Functor Optional\r\noptFunctor = …\r\noptApplicative : Applicative Optional\r\noptApplicative = …\r\nf : Applicative f -> a -> f a\r\nf apDict = structProj \"pure\" apDict\r\n```\r\n\r\nWe probably do test the individual pieces already but having a test that puts it altogether is helpful both for documentation purposes and to make sure that we didn’t forget anything.",
        "createdAt" : "2020-01-10T09:33:01Z",
        "updatedAt" : "2020-01-10T16:41:51Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "86578ee3-c5a7-4539-b92d-344f38b809ee",
        "parentId" : "3bb0d9a6-9cf8-4582-833d-2fc0803e2feb",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "bigger example added",
        "createdAt" : "2020-01-10T16:10:25Z",
        "updatedAt" : "2020-01-10T16:41:51Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "306d1f61-5504-4d3b-80cb-3eccd5a8dc95",
        "parentId" : "3bb0d9a6-9cf8-4582-833d-2fc0803e2feb",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "it found two bugs, so thanks for asking for it",
        "createdAt" : "2020-01-10T16:10:58Z",
        "updatedAt" : "2020-01-10T16:41:51Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "d4356c80-b6e8-46f8-aa72-225b96855ed1",
        "parentId" : "3bb0d9a6-9cf8-4582-833d-2fc0803e2feb",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Thanks a lot for adding it! It would be great if you could expand it to include the superclass case, i.e., `Applicative` (or `Pointed` or whatever) just to make sure there are no unforeseen issues there either.",
        "createdAt" : "2020-01-10T16:18:14Z",
        "updatedAt" : "2020-01-10T16:41:51Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "0fb2fdea-9b56-4b1e-a062-93e549b88ff9",
        "parentId" : "3bb0d9a6-9cf8-4582-833d-2fc0803e2feb",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "ok, done",
        "createdAt" : "2020-01-10T16:43:17Z",
        "updatedAt" : "2020-01-10T16:43:18Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a9feaae0a6921e3c04c93a65e754eca04cc83df",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +72,76 @@\n\ntypeSynTests :: TestTree\ntypeSynTests =\n  testGroup \"type synonyms\""
  }
]