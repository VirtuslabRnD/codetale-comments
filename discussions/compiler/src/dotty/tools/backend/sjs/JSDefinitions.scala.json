[
  {
    "id" : "3b6b56c2-0f9a-4292-adc8-64eafdfcaa30",
    "prId" : 9725,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9725#pullrequestreview-487623290",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e7bf142-c9f4-4830-afa5-5ef99d8b3f13",
        "parentId" : null,
        "authorId" : "f186a0ec-8fc4-4e94-87e9-c629d1b38b60",
        "body" : "Do we still need to special case this? I thought dotty supports union types.",
        "createdAt" : "2020-09-13T09:32:59Z",
        "updatedAt" : "2020-09-14T20:05:33Z",
        "lastEditedBy" : "f186a0ec-8fc4-4e94-87e9-c629d1b38b60",
        "tags" : [
        ]
      },
      {
        "id" : "02065a41-13be-4cb0-b414-b9f706be337b",
        "parentId" : "4e7bf142-c9f4-4830-afa5-5ef99d8b3f13",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Dotty supports union types, but it can also interoperate with Scala 2 libraries. And in particular with the pseudo `|` type in `scalajs-library`, which could itself be referenced by other methods in the std lib or in third-party libs. In Scala 3.0, we'll still need to recognize Scala.js' `|` type and correctly handle it. In 3.1, when we get rid of the compatibility with Scala 2 binaries, we'll be able to entirely drop `scala.scalajs.js.|` from the library, and have all usages of `|` be the true union type of dotty.\r\n\r\nAlso note that we cannot \"reinterpret\" `scala.scalajs.js.|` as a dotty union type during Scala2Unpickler because they do not have the same erasure: `scala.scalajs.js.|[A, B]` erases to `any` with a `ClassRef(\"scala.scalajs.js.|\")`, whereas a true `A | B` erases to the JVM lub of `A` and `B`, with a corresponding `ClassRef`.",
        "createdAt" : "2020-09-13T15:56:00Z",
        "updatedAt" : "2020-09-14T20:05:33Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "418b6a5b-367a-4aaa-a356-72b1ad987db4",
        "parentId" : "4e7bf142-c9f4-4830-afa5-5ef99d8b3f13",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "> Also note that we cannot \"reinterpret\" scala.scalajs.js.| as a dotty union type during Scala2Unpickler because they do not have the same erasure\r\n\r\nThe same is true for Scala 2 intersection types versus Dotty &, I have a wip branch which erases those differently, so we could extend that mechanism to handle unions too if needed.",
        "createdAt" : "2020-09-13T19:20:19Z",
        "updatedAt" : "2020-09-14T20:05:33Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "9e48f220-673f-41b0-a7df-7b6f5701ce2d",
        "parentId" : "4e7bf142-c9f4-4830-afa5-5ef99d8b3f13",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "You mean we could reinterpret `scala.scalajs.js.|` as a special brand of union type that somehow erases differently? That would be awesome!",
        "createdAt" : "2020-09-14T09:46:07Z",
        "updatedAt" : "2020-09-14T20:05:33Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "21ae0e19-0d93-44fc-9ba5-fd50b63c66b1",
        "parentId" : "4e7bf142-c9f4-4830-afa5-5ef99d8b3f13",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Yes that should be doable.",
        "createdAt" : "2020-09-14T10:31:09Z",
        "updatedAt" : "2020-09-14T20:05:33Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bcba442107e53e95c821c5372e21bea374296a6",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +53,57 @@  def PseudoUnionClass(using Context) = PseudoUnionType.symbol.asClass\n\n  @threadUnsafe lazy val PseudoUnionModuleRef = requiredModuleRef(\"scala.scalajs.js.|\")\n  def PseudoUnionModule(using Context) = PseudoUnionModuleRef.symbol\n    @threadUnsafe lazy val PseudoUnion_fromTypeConstructorR = PseudoUnionModule.requiredMethodRef(\"fromTypeConstructor\")"
  }
]