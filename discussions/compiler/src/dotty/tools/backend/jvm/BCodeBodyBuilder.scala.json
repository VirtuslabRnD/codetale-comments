[
  {
    "id" : "38987cdd-2e6d-41a1-a5ac-6b273c68056e",
    "prId" : 11839,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11839#pullrequestreview-618782941",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5af587dd-a0ce-4875-be7e-4338af1b3288",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I suggest adding the same comment than in Scala 2 for context:\r\n```suggestion\r\n      // scala/bug#10334: make sure that a lambda object for `T => U` has a method `apply(T)U`, not only the `(Object)Object`\r\n      // version. Using the lambda a structural type `{def apply(t: T): U}` causes a reflective lookup for this method.\r\n      val needsGenericBridge = samMethodType != instantiatedMethodType\r\n```",
        "createdAt" : "2021-03-23T16:34:14Z",
        "updatedAt" : "2021-03-24T15:48:50Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ab6f5d69d6ebe20a508f2777fc546b9818986af",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1462,1466 @@      // scala/bug#10334: make sure that a lambda object for `T => U` has a method `apply(T)U`, not only the `(Object)Object`\n      // version. Using the lambda a structural type `{def apply(t: T): U}` causes a reflective lookup for this method.\n      val needsGenericBridge = samMethodType != instantiatedMethodType\n      val bridgeMethods = atPhase(erasurePhase){\n        samMethod.allOverriddenSymbols.toList"
  },
  {
    "id" : "2cb68f45-46d5-42bd-9d54-cb380ead2a73",
    "prId" : 9181,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9181#pullrequestreview-452449921",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc0d420c-a25b-4705-9cae-437da592254f",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Since you are doing this for the JVM back-end, could you also apply the appropriate fix in the SJS back-end?\r\n\r\nThe code to fix is at\r\nhttps://github.com/lampepfl/dotty/blob/6ada79cfe3f736b3d00c7f47882d4e023a053976/compiler/src/dotty/tools/backend/sjs/JSCodeGen.scala#L1391-L1401\r\nto be updated similarly to what was done for scalac at\r\nhttps://github.com/scala-js/scala-js/commit/e02799b636b577eb56593d08c21a7cb2e68719e8#diff-c9a195a739d51194e79f0655bc93bd61R2343-R2363\r\nand you can enable the `RegressionTest.scala` test (i.e., remove it from the blacklist) to test the fix at\r\nhttps://github.com/lampepfl/dotty/blob/6ada79cfe3f736b3d00c7f47882d4e023a053976/project/Build.scala#L1024",
        "createdAt" : "2020-07-21T11:31:46Z",
        "updatedAt" : "2020-08-06T20:20:36Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "2efa7ab4-a19d-433a-9f50-10c3be5b695b",
        "parentId" : "bc0d420c-a25b-4705-9cae-437da592254f",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Thanks for the detailed instruction @sjrd, I'll do that.",
        "createdAt" : "2020-07-21T12:16:55Z",
        "updatedAt" : "2020-08-06T20:20:36Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "b23b9753-0293-44c7-898f-d8221143eec8",
        "parentId" : "bc0d420c-a25b-4705-9cae-437da592254f",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "@sjrd FYI, in this PR (unlike scalac), the `qual` in a `Super` is still `this`, it's only in the backend phase where the invariant is broken. Do you think the changes proposed above are still relevant?",
        "createdAt" : "2020-07-21T12:42:53Z",
        "updatedAt" : "2020-08-06T20:20:36Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "687ab7bd-2358-4c4b-87f0-0c0282553041",
        "parentId" : "bc0d420c-a25b-4705-9cae-437da592254f",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Actually we can enrich the `-Ycheck` to make sure it's always a compiler invariant. Do you think it's a good idea @smarter ?",
        "createdAt" : "2020-07-21T12:48:18Z",
        "updatedAt" : "2020-08-06T20:20:36Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "916a16ba-70f8-44d4-b44b-0a34aa4882f9",
        "parentId" : "bc0d420c-a25b-4705-9cae-437da592254f",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Sounds good to me.",
        "createdAt" : "2020-07-21T13:08:26Z",
        "updatedAt" : "2020-08-06T20:20:36Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "2a4536a9-4045-41e9-a7bc-6ed890e6ea58",
        "parentId" : "bc0d420c-a25b-4705-9cae-437da592254f",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "> @sjrd FYI, in this PR (unlike scalac), the `qual` in a `Super` is still `this`, it's only in the backend phase where the invariant is broken. Do you think the changes proposed above are still relevant?\r\n\r\nThe proposed changes are direct equivalent of the changes you made to the JVM back-end, but in terms of SJSIR. So if the changes you made are relevant for the JVM (which I assume is true since you did them), then the proposed changes for the JS back-end are also relevant.",
        "createdAt" : "2020-07-21T13:22:54Z",
        "updatedAt" : "2020-08-06T20:20:36Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "745d53c78e040aea398c38754bcc8ff3ad2df91d",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +724,728 @@\n          // scala/bug#10290: qual can be `this.$outer()` (not just `this`), so we call genLoad (not just ALOAD_0)\n          genLoad(superQual)\n          genLoadArguments(args, paramTKs(app))\n          generatedType = genCallMethod(fun.symbol, InvokeStyle.Super, app.span)"
  },
  {
    "id" : "527e23f6-dfc8-4dc0-90c4-31d2b11d9edb",
    "prId" : 8499,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8499#pullrequestreview-373575686",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e0e47d4-921b-4073-8a58-6594532ac0e4",
        "parentId" : null,
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "What happens if there is a different number of arguments? I think it is best to handle this case as was done previously with the `abort` call so that to avoid confusing error messages.",
        "createdAt" : "2020-03-12T13:38:23Z",
        "updatedAt" : "2020-03-12T14:09:41Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "b41c08fd-0186-4281-962a-8f409f0b2db8",
        "parentId" : "3e0e47d4-921b-4073-8a58-6594532ac0e4",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "> What happens if there is a different number of arguments?\r\n \r\nIf it happens there's a bug somewhere else in the backend.\r\n\r\n> I think it is best to handle this case as was done previously with the abort call\r\n\r\nI'm not opposed to this change in theory, but I don't want to introduce unnecessary changes compared to the scalac backend: every such change makes it harder to port code between the two backends. So I'd like to keep this as is unless this is also changed in scalac.",
        "createdAt" : "2020-03-12T13:55:40Z",
        "updatedAt" : "2020-03-12T14:09:41Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fa3eb22d868beddbabff2f14550e950b71bdd63",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +165,169 @@      }\n      else if (isArraySet(code)) {\n        val List(a1, a2) = args\n        genLoad(a1, INT)\n        genLoad(a2)"
  }
]