[
  {
    "id" : "5b47eaf6-5a07-4d2e-b0b8-4a8769735f7c",
    "prId" : 5703,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5703#pullrequestreview-192762670",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3698561-c29d-4843-806d-f2bda6010270",
        "parentId" : null,
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : ":+1: on printing the flag to the left (in `ReplPrinter`). On this change, FWIW, Scala 2 also uses `<lazy>` here. Not sure anybody cares tho, so merging anyway.\r\n```\r\nscala> lazy val x = 1\r\nx: Int = <lazy>\r\n```",
        "createdAt" : "2019-01-15T17:13:44Z",
        "updatedAt" : "2019-01-15T17:13:44Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec3b3e1793778d7ec8bcfe2d2598af7c8409927f",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +78,82 @@    try {\n      if (d.symbol.is(Flags.Lazy)) Some(dcl)\n      else valueOf(d.symbol).map(value => s\"$dcl = $value\")\n    }\n    catch { case ex: InvocationTargetException => Some(renderError(ex)) }"
  },
  {
    "id" : "cc95c0a3-60ff-4634-9bb9-d4acddce242c",
    "prId" : 5226,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5226#pullrequestreview-163258549",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2af24996-0247-4c7c-95e0-6ecd4b3d51b0",
        "parentId" : null,
        "authorId" : "6d71bb21-e402-4464-b2b1-8bdd8e068461",
        "body" : "Do you know what's used in scalac?",
        "createdAt" : "2018-10-10T09:15:07Z",
        "updatedAt" : "2018-10-10T09:15:07Z",
        "lastEditedBy" : "6d71bb21-e402-4464-b2b1-8bdd8e068461",
        "tags" : [
        ]
      },
      {
        "id" : "b213b792-73a0-47cd-9188-1f546a0f6919",
        "parentId" : "2af24996-0247-4c7c-95e0-6ecd4b3d51b0",
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "Copy pasted: https://github.com/scala/scala/blob/ba9701059216c629410f4f23a2175d20ad62484b/src/repl/scala/tools/nsc/interpreter/MemberHandlers.scala#L127",
        "createdAt" : "2018-10-10T09:16:43Z",
        "updatedAt" : "2018-10-10T09:16:43Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "49f5c4c1-58cd-499d-91f4-c95a00c2e916",
        "parentId" : "2af24996-0247-4c7c-95e0-6ecd4b3d51b0",
        "authorId" : "6d71bb21-e402-4464-b2b1-8bdd8e068461",
        "body" : ":shipit: ",
        "createdAt" : "2018-10-10T09:19:13Z",
        "updatedAt" : "2018-10-10T09:19:13Z",
        "lastEditedBy" : "6d71bb21-e402-4464-b2b1-8bdd8e068461",
        "tags" : [
        ]
      }
    ],
    "commit" : "d825baff3d50a3209bfdc4d5d7d3aa8862213d7b",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +42,46 @@    }\n\n  private[this] def MaxStringElements = 1000  // no need to mkString billions of elements\n\n  /** Load the value of the symbol using reflection."
  },
  {
    "id" : "8d097ecd-d6e3-41e2-a391-291307bd3d1c",
    "prId" : 3314,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3314#pullrequestreview-68891874",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "263b0537-85e1-4c10-a0e9-d33228869673",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "I am trying to isolate the underlying exception. This is based on nothing but experiment:\r\n```scala\r\n> null.toString\r\nException in thread \"main\" java.lang.reflect.InvocationTargetException\r\n\t...\r\nCaused by: java.lang.ExceptionInInitializerError\r\n\t...\r\nCaused by: java.lang.NullPointerException\r\n\t...\r\n```\r\n```scala\r\nscala> def foo: Int = foo + 1 \r\ndef foo: Int\r\nscala> foo \r\nException in thread \"main\" java.lang.reflect.InvocationTargetException\r\n\t...\r\nCaused by: java.lang.StackOverflowError\r\n\t...\r\n```\r\nI am sure there is a better a way to do it.",
        "createdAt" : "2017-10-12T10:20:01Z",
        "updatedAt" : "2017-10-13T15:52:00Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "f6f1fd32-b82f-4533-8e5b-cf839fb40689",
        "parentId" : "263b0537-85e1-4c10-a0e9-d33228869673",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "We really need tests for all of those :)",
        "createdAt" : "2017-10-12T10:23:59Z",
        "updatedAt" : "2017-10-13T15:52:00Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "68d52ff0-fb57-4528-a0a1-6eb7fc8dec96",
        "parentId" : "263b0537-85e1-4c10-a0e9-d33228869673",
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "Working on it",
        "createdAt" : "2017-10-12T11:24:58Z",
        "updatedAt" : "2017-10-13T15:52:00Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      }
    ],
    "commit" : "3144646b988a974f165c973b6cf9149294aa5d38",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +87,91 @@  private def renderError(ex: InvocationTargetException): String = {\n    val cause = ex.getCause match {\n      case ex: ExceptionInInitializerError => ex.getCause\n      case ex => ex\n    }"
  }
]