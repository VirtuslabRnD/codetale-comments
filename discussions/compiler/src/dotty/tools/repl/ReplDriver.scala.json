[
  {
    "id" : "0b965238-9797-444c-842a-89adad7a7eb7",
    "prId" : 12865,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/12865#pullrequestreview-686741056",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34888b0a-27d8-4f20-817f-b3ea5b77a1aa",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I would have expected the exclusion of `Synthetic` to be enough to avoid default getters, so I think the real issue is that they're not always marked Synthetic, it looks like currently they're only Synthetic if the method they correspond to is also Synthetic, but it should be unconditional: https://github.com/lampepfl/dotty/blob/af3703bc4c489506afb2461e1f7cea72984ea1a0/compiler/src/dotty/tools/dotc/ast/Desugar.scala#L302",
        "createdAt" : "2021-06-17T19:54:55Z",
        "updatedAt" : "2021-06-17T19:55:01Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f03d208336b7f4b69ac29cee93b5c4e3ec05bbd",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +306,310 @@      val defs =\n        info.bounds.hi.finalResultType\n          .membersBasedOnFlags(required = Method, excluded = Accessor | ParamAccessor | Synthetic | Private)\n          .filterNot { denot =>\n            defn.topClasses.contains(denot.symbol.owner) || denot.symbol.isConstructor"
  },
  {
    "id" : "b9024019-049f-478d-85e3-f3ba23adfe10",
    "prId" : 5137,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5137#pullrequestreview-158986298",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0492066-4f0d-43a6-a961-f5fddbbb00c9",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Will need to open an issue for this",
        "createdAt" : "2018-09-26T13:13:43Z",
        "updatedAt" : "2018-09-26T19:57:20Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "feeb42028d18ef8f0b63ac26008c42e44716bb84",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +285,289 @@      }\n      .foreach { sym =>\n        // FIXME syntax highlighting on comment is currently not working\n        // out.println(SyntaxHighlighting.highlight(\"// defined \" + sym.showUser))\n        out.println(SyntaxHighlighting.CommentColor + \"// defined \" + sym.showUser + SyntaxHighlighting.NoColor)"
  },
  {
    "id" : "17c3ac05-0126-42c4-82f7-2a08e7752c47",
    "prId" : 3384,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3384#pullrequestreview-72122433",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f9bb522-c3cb-4157-a139-9c72ce3e944f",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "This was probably intended, as it creates a new `Array` making sure that it cannot be modified from outside the `ReplDriver`.",
        "createdAt" : "2017-10-25T15:29:36Z",
        "updatedAt" : "2017-10-25T15:29:57Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "d12566a0-1d42-4405-8b86-8aa3127768fc",
        "parentId" : "5f9bb522-c3cb-4157-a139-9c72ce3e944f",
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "`toArray` does not create a new Array:\r\n```scala\r\nscala> val foo = Array(1 , 2)\r\nfoo: Array[Int] = Array(1, 2)\r\n\r\nscala> foo eq foo.toArray\r\nres0: Boolean = true\r\n```",
        "createdAt" : "2017-10-25T15:35:23Z",
        "updatedAt" : "2017-10-25T15:35:23Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "bec7f743-2c11-42f3-8ed1-fac25747f544",
        "parentId" : "5f9bb522-c3cb-4157-a139-9c72ce3e944f",
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "@felixmulder Did you intend to make a copy?",
        "createdAt" : "2017-10-25T15:53:32Z",
        "updatedAt" : "2017-10-25T15:53:32Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "62d5d9df-e178-4b27-b349-ced92dd438f7",
        "parentId" : "5f9bb522-c3cb-4157-a139-9c72ce3e944f",
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "Nope, I think this is a remnant from when the `ReplDriver` didn't take an array.",
        "createdAt" : "2017-10-25T17:06:59Z",
        "updatedAt" : "2017-10-25T17:06:59Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      },
      {
        "id" : "05808088-e2a7-4cd5-95a7-10a61823679d",
        "parentId" : "5f9bb522-c3cb-4157-a139-9c72ce3e944f",
        "authorId" : "802e55da-1ddd-4082-bfb6-ae518addb1e6",
        "body" : "Great. \r\nBtw, I have just signed the CLA. ",
        "createdAt" : "2017-10-25T17:12:48Z",
        "updatedAt" : "2017-10-25T17:12:48Z",
        "lastEditedBy" : "802e55da-1ddd-4082-bfb6-ae518addb1e6",
        "tags" : [
        ]
      },
      {
        "id" : "7bd076f9-ba71-4511-92bd-c965780a98bf",
        "parentId" : "5f9bb522-c3cb-4157-a139-9c72ce3e944f",
        "authorId" : "802e55da-1ddd-4082-bfb6-ae518addb1e6",
        "body" : "I have checked the classes involved  in processing `settings` and have not found any mutation of the array, only conversion to list in `CompilerCommand`. Shall I defend the array from potential yet no existing side-effects by making a copy ? Seems like premature optimisation to me, but you decide :)",
        "createdAt" : "2017-10-26T09:03:08Z",
        "updatedAt" : "2017-10-26T09:03:08Z",
        "lastEditedBy" : "802e55da-1ddd-4082-bfb6-ae518addb1e6",
        "tags" : [
        ]
      }
    ],
    "commit" : "b30aed04d95ea95b2611be1bd8f46b6a1315b001",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +90,94 @@  private[this] def initialCtx = {\n    val rootCtx = initCtx.fresh.addMode(Mode.ReadPositions).addMode(Mode.Interactive)\n    val ictx = setup(settings, rootCtx)._2.fresh\n    ictx.base.initialize()(ictx)\n    ictx"
  },
  {
    "id" : "93fea404-cb00-47dc-a545-9b066d1d9c43",
    "prId" : 13209,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/13209#pullrequestreview-719559227",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b332fdc-081e-44d9-8dbd-dc1592d0830c",
        "parentId" : null,
        "authorId" : "5f907c64-1898-4d74-945b-1f630a7406b9",
        "body" : "Btw, before I wired the reporter through newRun I was adding it here with `.fresh.setReporter(reporter)` but that was breaking something to do with class-loading, which seemed complicated.  I'm not sure if that's expected and if anyone knows why that happened.",
        "createdAt" : "2021-07-31T08:47:05Z",
        "updatedAt" : "2021-07-31T08:47:05Z",
        "lastEditedBy" : "5f907c64-1898-4d74-945b-1f630a7406b9",
        "tags" : [
        ]
      }
    ],
    "commit" : "438a04190e999d01244b24e7a712d3a440286d0d",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +245,249 @@    implicit val state = {\n      val state0 = newRun(istate, parsed.reporter)\n      state0.copy(context = state0.context.withSource(parsed.source))\n    }\n    compiler"
  }
]