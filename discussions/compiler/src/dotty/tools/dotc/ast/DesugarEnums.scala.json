[
  {
    "id" : "10b17e80-b96b-4dc6-90f6-c7289d3e4b6c",
    "prId" : 9677,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9677#pullrequestreview-478141690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6f45e7e-72f5-450f-b36f-2ecc9796d04c",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "The `lazyFlagOpt` disappeared. Was this a mistake during conflict resolution?",
        "createdAt" : "2020-08-29T15:24:36Z",
        "updatedAt" : "2020-09-02T10:14:45Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "c175eccc-d83c-4def-9c0b-d07bbde94ad1",
        "parentId" : "b6f45e7e-72f5-450f-b36f-2ecc9796d04c",
        "authorId" : "128563de-a925-4397-af34-450c7978a8d2",
        "body" : "no, it was removed because it was only required when the enum values were explicitly selected from the companion, and the companion was a local lazy val. Now they are selected from `this` which doesn't force the companion to be initialised.",
        "createdAt" : "2020-08-29T15:51:12Z",
        "updatedAt" : "2020-09-02T10:14:45Z",
        "lastEditedBy" : "128563de-a925-4397-af34-450c7978a8d2",
        "tags" : [
        ]
      },
      {
        "id" : "c87a2a1b-3efa-42ad-a857-f73f2d0ad86d",
        "parentId" : "b6f45e7e-72f5-450f-b36f-2ecc9796d04c",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Ah, that makes sense!",
        "createdAt" : "2020-08-29T17:07:33Z",
        "updatedAt" : "2020-09-02T10:14:45Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdea97a93df1a245aafec6b7c200551ade15ae4a",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +128,132 @@        Annotated(ArrayLiteral(enumValues, rawEnumClassRef), New(ref(defn.UncheckedAnnot.typeRef)))\n      ValDef(nme.DOLLAR_VALUES, TypeTree(), uncheckedValues)\n        .withFlags(Private | Synthetic)\n\n    val valuesDef ="
  },
  {
    "id" : "5e1bb414-2c36-4ad9-8e97-994fb6a35196",
    "prId" : 9628,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9628#pullrequestreview-474210055",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11339be0-a65e-4b06-9236-62b769e8d7be",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Can't you directly generate a `JavaSeqLiteral` here instead?",
        "createdAt" : "2020-08-24T15:46:28Z",
        "updatedAt" : "2020-08-27T16:32:40Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "74988d9c-a837-4383-8a27-bebffa634e98",
        "parentId" : "11339be0-a65e-4b06-9236-62b769e8d7be",
        "authorId" : "128563de-a925-4397-af34-450c7978a8d2",
        "body" : "yes thanks for the tip",
        "createdAt" : "2020-08-25T07:35:45Z",
        "updatedAt" : "2020-08-27T16:32:40Z",
        "lastEditedBy" : "128563de-a925-4397-af34-450c7978a8d2",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc2ae75f97d9d9f20164456883a56d9d716880ac",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +101,105 @@    val ctag    = Apply(TypeApply(ref(defn.ClassTagModule_apply.termRef), tpt :: Nil), clazzOf :: Nil)\n    val apply   = Select(ref(defn.ArrayModule.termRef), nme.apply)\n    Apply(Apply(TypeApply(apply, tpt :: Nil), values), ctag :: Nil)\n\n  /**  The following lists of definitions for an enum type E and known value cases e_0, ..., e_n:"
  },
  {
    "id" : "70a97fe8-11ce-4d78-a046-4c7a64898df7",
    "prId" : 9532,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9532#pullrequestreview-465481448",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9881d8db-73c7-4d76-acc9-5a690a30ecde",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "We should have testcases checking that `values` works as expected both with higher-kinded and non-higher-kinded type parameters",
        "createdAt" : "2020-08-11T15:10:39Z",
        "updatedAt" : "2020-08-17T08:40:53Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "b0b3c673-1972-4b6f-a1a5-06f76b13c32c",
        "parentId" : "9881d8db-73c7-4d76-acc9-5a690a30ecde",
        "authorId" : "128563de-a925-4397-af34-450c7978a8d2",
        "body" : "added tests",
        "createdAt" : "2020-08-11T22:53:04Z",
        "updatedAt" : "2020-08-17T08:40:53Z",
        "lastEditedBy" : "128563de-a925-4397-af34-450c7978a8d2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0872aaf4e76ffc956c184630173eb3e397f641f1",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +96,100 @@    extension (tpe: NamedType) def ofRawEnum = AppliedTypeTree(ref(tpe), rawEnumClassRef)\n    val valuesDef =\n      DefDef(nme.values, Nil, Nil, defn.ArrayType.ofRawEnum, Select(valuesDot(nme.values), nme.toArray))\n        .withFlags(Synthetic)\n    val privateValuesDef ="
  },
  {
    "id" : "066256a7-7f5d-445d-b1fc-fe0ed455737d",
    "prId" : 6576,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6576#pullrequestreview-246119785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d19470d-5581-4047-9bae-4ed99b016df3",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "We can leave it like this for now, but I'd like to get rid of `EnumValues` altogether. The idea would be that code\r\nfor enums can be generated without reference to collection classes. Let's create an issue so that we can come back to this.\r\n",
        "createdAt" : "2019-06-05T16:29:53Z",
        "updatedAt" : "2019-06-06T18:24:19Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b4c54630e5c6bb1eb7e8a56e564ae6868d2886c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +84,88 @@  /**  The following lists of definitions for an enum type E:\n   *\n   *   private val $values = new EnumValues[E]\n   *   def valueOf($name: String) =\n   *     try $values.fromName($name) catch"
  },
  {
    "id" : "4193c9c8-68ef-4314-8b9f-be1e13ff7358",
    "prId" : 2722,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2722#pullrequestreview-43644471",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e9b7866-3a56-4d74-b8a4-1a4076c93c39",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Can you add an explanation how that makes a difference? I thought that the previous version would give `pos` to the actual value definition and `startPos` to scaffolding. Isn't that what we want?",
        "createdAt" : "2017-06-10T09:26:55Z",
        "updatedAt" : "2017-06-10T09:27:11Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "526fac24-a34c-4e57-86af-ef33f544b03b",
        "parentId" : "8e9b7866-3a56-4d74-b8a4-1a4076c93c39",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "The previous version called `withPos(pos.startPos)` on the whole tree, since children positions have to be contained inside their parents positions, this means that the whole tree including `vdef` got position `pos.startPos`.",
        "createdAt" : "2017-06-10T10:32:22Z",
        "updatedAt" : "2017-06-10T10:32:22Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "6fc95631-3f30-4683-9eb6-4c390ac61e33",
        "parentId" : "8e9b7866-3a56-4d74-b8a4-1a4076c93c39",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Ah I see now. There are some subtleties involved here.",
        "createdAt" : "2017-06-13T07:53:50Z",
        "updatedAt" : "2017-06-13T07:53:51Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c03aaddfecae717fae0ef7e08128a0a931b750e",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +163,167 @@        impl.body ++ List(tagMeth, toStringMeth) ++ registerCall)\n      val vdef = ValDef(name, TypeTree(), New(impl1)).withMods(mods | Final)\n      flatTree(scaffolding ::: vdef :: Nil).withPos(pos)\n    }\n"
  }
]