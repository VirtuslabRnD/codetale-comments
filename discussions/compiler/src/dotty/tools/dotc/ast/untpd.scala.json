[
  {
    "id" : "ae8b2ea9-9ef8-41f8-89de-f4f5abd9efb0",
    "prId" : 5918,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5918#pullrequestreview-206763958",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d358acd7-f110-42a0-b86c-648d5ec472e2",
        "parentId" : null,
        "authorId" : "37519144-0f9f-4b2b-85f7-34dde9be2e11",
        "body" : "Super nitpick ðŸ™ˆ, `TypSplice`.",
        "createdAt" : "2019-02-22T09:49:13Z",
        "updatedAt" : "2019-02-22T18:26:02Z",
        "lastEditedBy" : "37519144-0f9f-4b2b-85f7-34dde9be2e11",
        "tags" : [
        ]
      },
      {
        "id" : "2f3e1c26-e081-473c-b688-e7dcb13daf9f",
        "parentId" : "d358acd7-f110-42a0-b86c-648d5ec472e2",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "No, this is actually a `TypeSplice` which is a completely different concept ðŸ™‰. That one wraps a tree that is typed inside an untyped tree.",
        "createdAt" : "2019-02-22T11:02:17Z",
        "updatedAt" : "2019-02-22T18:26:02Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b0c23466238b2b8b7b767496c87c19dfcb91931",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +21,25 @@  }\n\n  /** A typed subtree of an untyped tree needs to be wrapped in a TypedSplice\n   *  @param owner  The current owner at the time the tree was defined\n   */"
  },
  {
    "id" : "24b7f3de-53b7-48cd-ae77-0e0769e2a71a",
    "prId" : 4616,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4616#pullrequestreview-140734356",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8a26951-b0e9-4b56-addb-24163580f4bb",
        "parentId" : null,
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "Makes sense to me â€” @Medowhill please take a look at this commit, hope your tests are sufficient to catch any unintended effects.",
        "createdAt" : "2018-07-26T13:45:03Z",
        "updatedAt" : "2018-07-26T14:54:44Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      }
    ],
    "commit" : "88e7d180574eda8a71037d1735ac6a3ff76a1c08",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +318,322 @@        val argTypes = tpt1.tpe.dealias.argTypesLo\n        def wrap(tpe: Type) = TypeTree(tpe).withPos(tpt.pos)\n        (tpt, argTypes.map(wrap))\n      case _ =>\n        (tpt, Nil)"
  },
  {
    "id" : "22838155-5da4-479d-ac86-54b617d3efbe",
    "prId" : 2162,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2162#pullrequestreview-30408447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a0e06c0-a33b-4eae-af8a-1790520c5e04",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I haven't checked how `UntypedTreeAccumulator` is used exactly, but if InfixOp folds over the `op`, then surely `PostfixOp` and `PrefixOp` should too?",
        "createdAt" : "2017-04-01T13:17:17Z",
        "updatedAt" : "2017-04-02T16:50:35Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "d4c60e94-ccb2-45e9-a96a-3bdec921a838",
        "parentId" : "6a0e06c0-a33b-4eae-af8a-1790520c5e04",
        "authorId" : "aa14f673-3d29-4a61-bf43-a86828212cf2",
        "body" : "`UntypedTreeAccumulator` (and its cousing `UntypedDeepFolder`) is used only in the repl code (`CompilingInterpreter.scala`).\r\nChanged `{Post, Pre}fixOp` as well.\r\nPTAL.",
        "createdAt" : "2017-04-02T16:52:15Z",
        "updatedAt" : "2017-04-02T16:52:15Z",
        "lastEditedBy" : "aa14f673-3d29-4a61-bf43-a86828212cf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f937e1735574ffda679761a0a9a8bebbe9cb2ae",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +528,532 @@      case InfixOp(left, op, right) =>\n        this(this(this(x, left), op), right)\n      case PostfixOp(od, op) =>\n        this(this(x, od), op)\n      case PrefixOp(op, od) =>"
  },
  {
    "id" : "eac46ee6-775c-4b8e-8402-46056996ee42",
    "prId" : 2162,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2162#pullrequestreview-30735204",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62176eb3-6eb6-463b-b890-2c51b2c74e16",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "Would it be possible to expand the test to also test this change?",
        "createdAt" : "2017-04-03T13:00:31Z",
        "updatedAt" : "2017-04-03T13:00:45Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "40a6e598-ab9a-4bbb-bf57-b2f01d66fbd0",
        "parentId" : "62176eb3-6eb6-463b-b890-2c51b2c74e16",
        "authorId" : "aa14f673-3d29-4a61-bf43-a86828212cf2",
        "body" : "Does Dotty have prefix type operators? If so, how are they used?\r\n\"Regular\" prefix operators already worked in the REPL *before* this change: it's a different ast that doesn't end up using the code above.\r\n\r\nThis is the hypothetical test I'd add, but like I said it's not really exercising this PR.\r\n\r\n> scala> class B(val n: Int) {\r\n>         def unary_! = new B(-n)\r\n>        } \r\n> defined class B\r\n> scala> val x = new B(42) \r\n> val x: B = B@10e92f8f\r\n> scala> (!x).n \r\n> val res4: Int = -42\r\n\r\nThoughts?",
        "createdAt" : "2017-04-03T18:31:45Z",
        "updatedAt" : "2017-04-03T18:31:45Z",
        "lastEditedBy" : "aa14f673-3d29-4a61-bf43-a86828212cf2",
        "tags" : [
        ]
      },
      {
        "id" : "c555bc4d-c360-44b6-ba8f-222a1c90306d",
        "parentId" : "62176eb3-6eb6-463b-b890-2c51b2c74e16",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "Yes, I agree. Let's get this in.",
        "createdAt" : "2017-04-04T10:04:54Z",
        "updatedAt" : "2017-04-04T10:04:54Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f937e1735574ffda679761a0a9a8bebbe9cb2ae",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +531,535 @@        this(this(x, od), op)\n      case PrefixOp(op, od) =>\n        this(this(x, op), od)\n      case Parens(t) =>\n        this(x, t)"
  }
]