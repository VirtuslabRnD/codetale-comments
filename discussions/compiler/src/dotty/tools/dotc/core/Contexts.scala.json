[
  {
    "id" : "2c2b8cc1-e8f4-4760-bafe-a4f17b2967bc",
    "prId" : 11195,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11195#pullrequestreview-580604467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2523e51-3ecd-41b9-ac58-dc5af9a6f947",
        "parentId" : null,
        "authorId" : "75c8b660-aff3-44c8-9783-7c2d813cea08",
        "body" : "Also need `&& !Feature.enabledBySetting(nme.unsafeNulls)`",
        "createdAt" : "2021-01-26T07:45:34Z",
        "updatedAt" : "2021-01-31T12:01:21Z",
        "lastEditedBy" : "75c8b660-aff3-44c8-9783-7c2d813cea08",
        "tags" : [
        ]
      },
      {
        "id" : "169e6849-ad12-4006-85e7-397cd0f8c4b4",
        "parentId" : "c2523e51-3ecd-41b9-ac58-dc5af9a6f947",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I think not. The initial setting of `unsafeNulls` is irrelevant here.\r\n",
        "createdAt" : "2021-01-31T11:53:18Z",
        "updatedAt" : "2021-01-31T12:01:21Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "a7d982c6-ead3-441f-998a-43c6675fc910",
        "parentId" : "c2523e51-3ecd-41b9-ac58-dc5af9a6f947",
        "authorId" : "75c8b660-aff3-44c8-9783-7c2d813cea08",
        "body" : "If we don't have the test and `unsafeNulls` is enabled globally, the `SafeNulls` will be added to the context here, which is not expected.",
        "createdAt" : "2021-02-01T00:25:18Z",
        "updatedAt" : "2021-02-01T00:25:19Z",
        "lastEditedBy" : "75c8b660-aff3-44c8-9783-7c2d813cea08",
        "tags" : [
        ]
      },
      {
        "id" : "6688f5ea-1304-4971-bb69-1410b83b75e0",
        "parentId" : "c2523e51-3ecd-41b9-ac58-dc5af9a6f947",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "No, I think that _is_ the expected behavior. A local (un-)import overrides an outer import and a global setting.",
        "createdAt" : "2021-02-01T08:10:46Z",
        "updatedAt" : "2021-02-01T08:10:46Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "c2e737e4-65f6-4ab5-8ed1-8ceee424d55e",
        "parentId" : "c2523e51-3ecd-41b9-ac58-dc5af9a6f947",
        "authorId" : "75c8b660-aff3-44c8-9783-7c2d813cea08",
        "body" : "I think you are right. We should allow local imports to overrides a global setting.",
        "createdAt" : "2021-02-01T17:40:49Z",
        "updatedAt" : "2021-02-01T17:40:49Z",
        "lastEditedBy" : "75c8b660-aff3-44c8-9783-7c2d813cea08",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f993b72d12b7895fb2719c9f408526872708a6f",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +633,637 @@        case Some(true) =>\n          setMode(this.mode &~ Mode.SafeNulls)\n        case Some(false) if ctx.settings.YexplicitNulls.value =>\n          setMode(this.mode | Mode.SafeNulls)\n        case _ =>"
  },
  {
    "id" : "e9616fb1-2e24-4be2-ba64-8de9159cfb27",
    "prId" : 10607,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10607#pullrequestreview-548317734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2766bcfa-b517-4224-a686-f5e0eed0e91a",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Is the memoization needed here? Does the Scala 2 compiler bridge do something similar?",
        "createdAt" : "2020-12-08T16:07:01Z",
        "updatedAt" : "2020-12-11T18:08:42Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "9c93aaa1-acc1-49b3-9e26-73fb3d09218f",
        "parentId" : "2766bcfa-b517-4224-a686-f5e0eed0e91a",
        "authorId" : "ae8a350c-513d-4e26-b751-b1b65838ca0b",
        "body" : "Following our private discussion I try to remove `sourceNamed` in https://github.com/lampepfl/dotty/pull/10607/commits/b492fd8ce10e056d98a9afac4021ef91d4e4d192",
        "createdAt" : "2020-12-09T15:42:54Z",
        "updatedAt" : "2020-12-11T18:08:42Z",
        "lastEditedBy" : "ae8a350c-513d-4e26-b751-b1b65838ca0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef81ccf7446d54a4f0cf795bcfe274f33cfd85fd",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +275,279 @@    def getSource(path: String): SourceFile = getSource(path.toTermName)\n\n    /** AbstraFile with given path name, memoized */\n    def getFile(name: TermName): AbstractFile = base.files.get(name) match\n      case Some(file) =>"
  },
  {
    "id" : "04ffe730-bed1-4913-b781-d8183f76b31e",
    "prId" : 9405,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9405#pullrequestreview-469616952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "647ad742-ef54-4690-b855-9f4170a69b32",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Do we need to clear `exploreContexts`, and reset `exploresInUse` and `comparersInUse` to `0`?",
        "createdAt" : "2020-08-18T14:17:33Z",
        "updatedAt" : "2020-08-18T14:19:20Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "1e0ecaaf-4e0b-43b3-9685-cb84e6aa9bca",
        "parentId" : "647ad742-ef54-4690-b855-9f4170a69b32",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "No, every nested call with reset to the previous state after itself, even under exceptions. So there's nothing to do here.\r\n",
        "createdAt" : "2020-08-18T16:18:40Z",
        "updatedAt" : "2020-08-18T16:18:41Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c64b9ff98958aa650acb9e43693fe8b9bb896b0",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +900,904 @@      sources.clear()\n      sourceNamed.clear()\n      comparers.clear()  // forces re-evaluation of top and bottom classes in TypeComparer\n    }\n"
  },
  {
    "id" : "4b18c241-1655-402f-9819-72dad2704fdf",
    "prId" : 6156,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6156#pullrequestreview-218316051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9a5ec41-6709-460b-8e39-9e9edc806563",
        "parentId" : null,
        "authorId" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "body" : "This code looks a bit suspicious (we should already record the info as bounds in `newPatternBoundSymbol`), so I checked why does it make a difference. It seems that when adding bounds to `Constraint`, it checks whether they fit in the `TypeParamRef`s original bounds. This turns out to actually fail when dealing with HK types.\r\n\r\nThis'll do for now, but I'd like to touch up this code in the future - in general when inserting a symbol into GADTMap, we probably should just use the initial bounds as the fake `TypeParamRef`s bounds.",
        "createdAt" : "2019-03-25T12:59:26Z",
        "updatedAt" : "2019-03-26T09:05:49Z",
        "lastEditedBy" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "tags" : [
        ]
      },
      {
        "id" : "3b216ac9-2f0d-432b-bba1-d2c2602f015b",
        "parentId" : "c9a5ec41-6709-460b-8e39-9e9edc806563",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "OK, then can you open an issue and add a TODO in the code that points to the issue so we can keep track of this ?",
        "createdAt" : "2019-03-25T13:09:15Z",
        "updatedAt" : "2019-03-26T09:05:49Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e1428d495b6073a030cd321c777e71c2c7a452e",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +933,937 @@                case tb @ TypeBounds(_, hi) if hi.isLambdaSub => tb\n                case _ => TypeBounds.empty\n              }) :: Nil,\n              pt => defn.AnyType)\n            new TypeVar(poly.paramRefs.head, creatorState = null)"
  },
  {
    "id" : "da679edc-6093-4c8f-a70b-ca8bf2c79e8e",
    "prId" : 5611,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5611#pullrequestreview-185205249",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5963b56d-b04a-42bf-b5d5-6094e4ff0547",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "It would be good to have some docs about `cautiousSubype` What's cautious about it? Maybe call it \r\n`externalizedSubType` instead?",
        "createdAt" : "2018-12-14T18:05:58Z",
        "updatedAt" : "2018-12-17T11:14:37Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1fa5d73c4194448e1ab0d4d4e39a764b6e1f651",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +752,756 @@        case _ => tp\n      }\n\n      def externalizedSubtype(tp1: Type, tp2: Type, isSubtype: Boolean): Boolean = {\n        val externalizedTp1 = removeTypeVars(tp1)"
  },
  {
    "id" : "c4f01e1e-3cb1-448c-93a8-41161f4af351",
    "prId" : 5611,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5611#pullrequestreview-185205249",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "252c2d01-507a-4362-9794-f35e4a786298",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "You could use `reporting` here: `(...).reporting(res => i\"$descr = $res\", gadts)`.",
        "createdAt" : "2018-12-14T18:22:40Z",
        "updatedAt" : "2018-12-17T11:14:37Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1fa5d73c4194448e1ab0d4d4e39a764b6e1f651",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +759,763 @@        (\n          if (isSubtype) externalizedTp1 frozen_<:< externalizedTp2\n          else externalizedTp2 frozen_<:< externalizedTp1\n        ).reporting({ res =>\n          val descr = i\"$externalizedTp1 frozen_${if (isSubtype) \"<:<\" else \">:>\"} $externalizedTp2\""
  },
  {
    "id" : "a2b80ca5-56ac-4ccd-afdb-f2e14d0d7ed0",
    "prId" : 5203,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5203#pullrequestreview-162003618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a9483e5-f323-4667-a26e-1e8c435bf12a",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "I am not sure it is meant to be a `FreshContext`. I would try `Context` and see if it still compile",
        "createdAt" : "2018-10-05T10:49:36Z",
        "updatedAt" : "2018-10-05T15:57:20Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "d3dcfd45-2945-47e2-8586-6686544b02e2",
        "parentId" : "3a9483e5-f323-4667-a26e-1e8c435bf12a",
        "authorId" : "6d71bb21-e402-4464-b2b1-8bdd8e068461",
        "body" : "Nope, has to be fresh:\r\n\r\n```scala\r\n[error] /home/olivier/workspace/dotty/compiler/src/dotty/tools/repl/ReplCompiler.scala:58:24: type mismatch;\r\n[error]  found   : dotty.tools.dotc.core.Contexts.Context\r\n[error]  required: dotty.tools.dotc.core.Contexts.FreshContext\r\n[error]           importContext(imp)(ctx))\r\n[error]                        ^\r\n[error] one error found\r\n```",
        "createdAt" : "2018-10-05T12:05:04Z",
        "updatedAt" : "2018-10-05T15:57:20Z",
        "lastEditedBy" : "6d71bb21-e402-4464-b2b1-8bdd8e068461",
        "tags" : [
        ]
      }
    ],
    "commit" : "c54153a8e2949c25fabda40c7953c04779b883c2",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +372,376 @@\n    /** A new context that summarizes an import statement */\n    def importContext(imp: Import[_], sym: Symbol): FreshContext = {\n      val impNameOpt = imp.expr match {\n        case ref: RefTree[_] => Some(ref.name.asTermName)"
  },
  {
    "id" : "c35099f0-43a6-491b-8407-b1f9d53d99c9",
    "prId" : 3223,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3223#pullrequestreview-66339968",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fc9febf-b85f-4479-a7ff-7441244ad8fb",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Shouldn't the override also be used in the other subclasses of `HashSet` ? That is, `AppliedUniques` and `NamedTypeUniques`",
        "createdAt" : "2017-10-01T15:24:45Z",
        "updatedAt" : "2017-10-01T17:26:57Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "f9e843e8-5f8f-476c-baa0-89e005d15e8c",
        "parentId" : "6fc9febf-b85f-4479-a7ff-7441244ad8fb",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "No, `equals` is never called on those sets. Everything is based on `eq` for them.",
        "createdAt" : "2017-10-01T15:43:22Z",
        "updatedAt" : "2017-10-01T17:26:57Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "93f0ff330fd749568d71d0d5b958500ba55a1bf6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +607,611 @@    private[core] val uniques = new util.HashSet[Type](Config.initialUniquesCapacity) {\n      override def hash(x: Type): Int = x.hash\n      override def isEqual(x: Type, y: Type) = x.eql(y)\n    }\n"
  },
  {
    "id" : "2f9a5efc-a051-465c-a908-351390abbe75",
    "prId" : 3061,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3061#pullrequestreview-60851576",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7162a3bd-8b29-4a90-a49f-6f164388252b",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Type parameters are no longer accessors, need to be mentioned explicitly.",
        "createdAt" : "2017-09-06T09:25:06Z",
        "updatedAt" : "2017-09-20T15:20:34Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e65bd581c7506e1a382d906a9c8a961fafabfff",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +339,343 @@     */\n    def superCallContext: Context = {\n      val locals = newScopeWith(owner.typeParams ++ owner.asClass.paramAccessors: _*)\n      superOrThisCallContext(owner.primaryConstructor, locals)\n    }"
  },
  {
    "id" : "498dbfdd-f8cd-48c8-a0f5-9c9e2ddd1fab",
    "prId" : 3061,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3061#pullrequestreview-60851669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9a389de-4e8d-481e-a19b-6236af5e8fa9",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Optimize for different set of common types",
        "createdAt" : "2017-09-06T09:25:31Z",
        "updatedAt" : "2017-09-20T15:20:34Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e65bd581c7506e1a382d906a9c8a961fafabfff",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +622,626 @@        \"uniqueAppliedTypes\" -> uniqueAppliedTypes,\n        \"uniqueWithFixedSyms\" -> uniqueWithFixedSyms,\n        \"uniqueNamedTypes\" -> uniqueNamedTypes)\n\n    /** A map that associates label and size of all uniques sets */"
  },
  {
    "id" : "576b97cb-ce3e-4048-85d1-d89f67aaa08c",
    "prId" : 2823,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2823#pullrequestreview-47594625",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c4338d3-fdfe-4e54-8c4a-6bdbd6860b21",
        "parentId" : null,
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : ":heart:",
        "createdAt" : "2017-07-03T07:46:06Z",
        "updatedAt" : "2017-07-05T14:34:27Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      }
    ],
    "commit" : "16be5c5c8d179a5a972996aecb93e7d3b823b7fd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +127,131 @@    def sstate: SettingsState = _sstate\n\n    /** The current compilation unit */\n    private[this] var _compilationUnit: CompilationUnit = _\n    protected def compilationUnit_=(compilationUnit: CompilationUnit) = _compilationUnit = compilationUnit"
  }
]