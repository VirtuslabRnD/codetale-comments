[
  {
    "id" : "cbbd3c7a-e877-4330-8bba-4f73763a6965",
    "prId" : 9018,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9018#pullrequestreview-417066305",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e6b7a0b-c8a6-481c-a766-fe525a3b5bc8",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I'm not sure we should leave dead code like this around without a clear idea of what we want to do with it. Is this something you're planning to experiment with more? I think it would make sense to use this mechanism for getting rid of Serializable and Product so that they don't show up when lubbing case classes.",
        "createdAt" : "2020-05-22T16:31:20Z",
        "updatedAt" : "2020-05-22T17:25:23Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "34f99758-38ad-4fa1-9d03-c366961068e7",
        "parentId" : "3e6b7a0b-c8a6-481c-a766-fe525a3b5bc8",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "See #9028.\r\n",
        "createdAt" : "2020-05-22T17:09:23Z",
        "updatedAt" : "2020-05-22T17:25:23Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "50f6b2fc-8c43-465c-b3e1-814be511cb28",
        "parentId" : "3e6b7a0b-c8a6-481c-a766-fe525a3b5bc8",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Very nice, thanks! Can you leave a reference to this issue number in the comment?",
        "createdAt" : "2020-05-22T17:12:39Z",
        "updatedAt" : "2020-05-22T17:25:23Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "74cc1b1f2441cbbf319b273ea75ed20c7304b4f0",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +347,351 @@        // widenRestricted is currently not called since it's special cased in `dropEnumValue`\n        // in `Namer`. It's left in here in case we want to generalize the scheme to other\n        // \"protected inheritance\" classes.\n    wideInst match\n      case wideInst: TypeRef if wideInst.symbol.is(Module) =>"
  },
  {
    "id" : "d309868a-bafd-4d05-bccf-ec003b21ef20",
    "prId" : 9012,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9012#pullrequestreview-415471924",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e424c91a-bce9-4b80-b7a0-ace92c77454f",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I am not 100% sure about performance implications here. Let's test this.",
        "createdAt" : "2020-05-20T15:44:40Z",
        "updatedAt" : "2020-05-20T15:47:25Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ac5a5bb7db17feccd584cf493f3ff52827e1336",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +90,94 @@    else if !isUpper && param.occursIn(bound)\n      // We don't allow recursive lower bounds when defining a type,\n      // so we shouldn't allow them as constraints either.\n      false\n    else"
  },
  {
    "id" : "d80dddc2-e119-4a04-a522-a859a42a000a",
    "prId" : 8635,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8635#pullrequestreview-388242033",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d90954c-fa64-4abc-8d89-f3dcc0b796f0",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "@AleksanderBG Can you confirm that this comment is correct ?",
        "createdAt" : "2020-04-01T20:26:56Z",
        "updatedAt" : "2020-04-01T20:26:56Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "36d0d07d-060c-48d6-9c09-98cc988ba15e",
        "parentId" : "7d90954c-fa64-4abc-8d89-f3dcc0b796f0",
        "authorId" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "body" : "@smarter missed your comment! GADT code only goes through `addToConstraint`/`addUpperBound`/`addLowerBound`. AFAIT none of these invoke `addBound`.",
        "createdAt" : "2020-04-06T13:22:10Z",
        "updatedAt" : "2020-04-06T13:22:10Z",
        "lastEditedBy" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe5be5965e8d193f71e474e351110debe0f690d7",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +559,563 @@          // simply do not record any new constraint.\n          // Unlike in `TypeComparer#either`, the same reasoning does not apply\n          // to GADT mode because this code is never run on GADT constraints.\n          if ctx.mode.is(Mode.ConstrainResult) && constraintsNarrowed then\n            constraint = savedConstraint"
  },
  {
    "id" : "963ac70b-03e7-41b3-99f2-8afb93d8b014",
    "prId" : 8635,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8635#pullrequestreview-386332621",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6a8e912-120d-4f04-996f-eaa5560ed528",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "That looks good to me. It would be even nicer to have a prune that does not narrow. But let's save this for another day.",
        "createdAt" : "2020-04-02T11:23:38Z",
        "updatedAt" : "2020-04-02T11:23:48Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe5be5965e8d193f71e474e351110debe0f690d7",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +561,565 @@          // to GADT mode because this code is never run on GADT constraints.\n          if ctx.mode.is(Mode.ConstrainResult) && constraintsNarrowed then\n            constraint = savedConstraint\n          res\n      }"
  },
  {
    "id" : "add593c9-ab34-4c56-8e47-a46c4156bbef",
    "prId" : 6398,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6398#pullrequestreview-244228833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15f26b73-e5f6-4fae-b4f0-6adad16d9a3e",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "This is now in contradiction to the doc comment. Also, I don't see how it could capture the intended meaning. \r\nIf both `c1` and `c2` constrain different new type parameters that are not in `pre`, then according to the old meaning neither subsumes the other. But according to the new meaning each subsumes the other. This is clearly wrong, at least if we use the usual meaning of subsumes. \r\n\r\nThis seems to be a critical problem that requires further thought to be addressed.",
        "createdAt" : "2019-05-31T11:10:32Z",
        "updatedAt" : "2019-06-06T09:39:12Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "01096ffc5b90aa40a0270fa5101ba9d13216e0c2",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +351,355 @@        // If `c2` has, compared to `pre`, instantiated a param and we iterated over params of `c2`,\n        // we could miss that param being instantiated to an incompatible type in `c1`.\n        pre.forallParams(p =>\n          c1.contains(p) &&\n          c2.upper(p).forall(c1.isLess(p, _)) &&"
  },
  {
    "id" : "40f3c224-f1c2-4f2d-90e9-48b9b4d2f01b",
    "prId" : 6243,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6243#pullrequestreview-223454602",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64dccd3a-8a03-436c-80bb-95ba1d5c444e",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Update the method documentation.",
        "createdAt" : "2019-04-05T19:59:05Z",
        "updatedAt" : "2019-04-09T12:37:37Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ed5d3c7eada5b65dd38611e6da54e6771495a67",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +306,310 @@          !isSubTypeWhenFrozen(bound, defn.SingletonType)) tp.widen\n      else tp\n    widenOr(widenSingle(tp)).dropRepeatedAnnot\n  }\n"
  },
  {
    "id" : "d211b18f-009e-4f1f-a70b-45a3fa3b3321",
    "prId" : 5611,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5611#pullrequestreview-185560476",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c0e1af4-88dd-4b4e-8529-6aa8f4c1b945",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I believe that's overkill. Now we don't know anymore what a printer really is! If someone wants to see\r\ngadt messages, as well as constr messages and typr messages related to GADTs, just turn all three printers on.\r\n",
        "createdAt" : "2018-12-14T17:41:30Z",
        "updatedAt" : "2018-12-17T11:14:37Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "7d60c1d6-d0c4-4b46-a10d-1347816ff2d1",
        "parentId" : "2c0e1af4-88dd-4b4e-8529-6aa8f4c1b945",
        "authorId" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "body" : "This was done to override this method in `SmartGADTMap` with another printer. The problem is that there was no way to see constraint logs related _only_ to GADTs, and distinguishing which constraint the logs were related to was very confusing.",
        "createdAt" : "2018-12-17T12:12:23Z",
        "updatedAt" : "2018-12-17T12:23:17Z",
        "lastEditedBy" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1fa5d73c4194448e1ab0d4d4e39a764b6e1f651",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +21,25 @@trait ConstraintHandling[AbstractContext] {\n\n  def constr_println(msg: => String): Unit = constr.println(msg)\n  def typr_println(msg: => String): Unit = typr.println(msg)\n"
  },
  {
    "id" : "0cd0004d-dc9f-4ab3-82ab-b5861d6f8c48",
    "prId" : 3061,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3061#pullrequestreview-60851429",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e63983da-0619-44a1-be92-882b0cfaa6b0",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Added case prompted by a failure. But it looks like we'd need it anyway, and we just failed to have a test that exercises this pass before.",
        "createdAt" : "2017-09-06T09:24:30Z",
        "updatedAt" : "2017-09-20T15:20:34Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e65bd581c7506e1a382d906a9c8a961fafabfff",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +391,395 @@            if (fromBelow) addLess(bound, param) else addLess(param, bound)\n          case tp =>\n            if (fromBelow) isSubType(bound, tp) else isSubType(tp, bound)\n        }\n"
  },
  {
    "id" : "4e12110f-190b-448f-88ee-0e914d5ad25d",
    "prId" : 2045,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2045#pullrequestreview-24966946",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbc47e50-9489-474d-974d-907060c957f4",
        "parentId" : null,
        "authorId" : "6d71bb21-e402-4464-b2b1-8bdd8e068461",
        "body" : "Could this state be stored in `Context` instead?",
        "createdAt" : "2017-03-02T17:46:22Z",
        "updatedAt" : "2017-03-03T13:09:11Z",
        "lastEditedBy" : "6d71bb21-e402-4464-b2b1-8bdd8e068461",
        "tags" : [
        ]
      },
      {
        "id" : "a4cdc3c9-0737-407c-b49e-014e8e35a3cb",
        "parentId" : "bbc47e50-9489-474d-974d-907060c957f4",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I think this would make the logic more complicated. ",
        "createdAt" : "2017-03-03T12:55:09Z",
        "updatedAt" : "2017-03-03T13:09:11Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7f1f35c36593ac9454c8572a59c649610829b6a",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +92,96 @@      if (isUpper) oldBounds.derivedTypeBounds(lo, hi & bound)\n      else oldBounds.derivedTypeBounds(lo | bound, hi)\n    finally homogenizeArgs = saved\n  }\n"
  }
]