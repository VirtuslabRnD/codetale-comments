[
  {
    "id" : "0170a5c9-19f8-42f3-bfe1-57e6c2f3d7b4",
    "prId" : 10785,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10785#pullrequestreview-562814622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d72398f-cf51-4604-80d0-6ac19a416eac",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Could the usages of `ThisType.raw` be replaced by `.thisType`?",
        "createdAt" : "2021-01-06T15:28:34Z",
        "updatedAt" : "2021-01-07T18:05:26Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "b15997c6-af73-4904-82f1-51bd8e4d64f7",
        "parentId" : "4d72398f-cf51-4604-80d0-6ac19a416eac",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "It's done.",
        "createdAt" : "2021-01-06T15:46:11Z",
        "updatedAt" : "2021-01-07T18:05:26Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "f81004922d85e942757cf01e4d9a91bd031f11e5",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1432,1436 @@     *  this means we output `pre.O.member` rather than `pre.O$.this.member`.\n     */\n    def reachableThisType(using Context): Type =\n      if this.is(Package) then\n        symbol.thisType"
  },
  {
    "id" : "9f95bcac-18c5-4a44-bb7b-a1399180a746",
    "prId" : 10785,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10785#pullrequestreview-563633656",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a907e81d-0eee-4a37-b413-89213e168cb8",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "What abotu the ThisType.raw here?",
        "createdAt" : "2021-01-07T16:23:48Z",
        "updatedAt" : "2021-01-07T18:05:26Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "7bb5e14f-21c0-4893-9c91-44e6aed016b7",
        "parentId" : "a907e81d-0eee-4a37-b413-89213e168cb8",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "This one is different, as we need to call `owner. reachableThisType`.",
        "createdAt" : "2021-01-07T16:31:17Z",
        "updatedAt" : "2021-01-07T18:05:26Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "f81004922d85e942757cf01e4d9a91bd031f11e5",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1440,1444 @@        TermRef(owner.reachableThisType, this.sourceModule)\n      else\n        ThisType.raw(TypeRef(owner.reachableThisType, symbol.asType))\n\n    /** The variance of this type parameter or type member as a subset of"
  },
  {
    "id" : "5545e176-740c-44c0-8d23-341dcc1e5b2f",
    "prId" : 10670,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10670#pullrequestreview-549949367",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd3b798b-0dff-47ba-b40c-692269ee1277",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Previously we did not do it for `AnyValClass`. It seems that we have a constructor there as we do not initialize it with [`ensureCtor = false` in `completeClass`](https://github.com/lampepfl/dotty/pull/10670/files#diff-91bb9b80218c5b1c9fb90d562a52c1aa7a271d795ffffa86c9cd8d1cc133e5ffR265). Not sure if this does a difference in practice.",
        "createdAt" : "2020-12-10T14:43:17Z",
        "updatedAt" : "2020-12-14T19:19:50Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "551724f9-b7d9-4405-9dc2-51e8bc4b549a",
        "parentId" : "dd3b798b-0dff-47ba-b40c-692269ee1277",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I think it would not make a difference, since objects cannot extend `AnyVal`. Anyway, it's clearer to have the rule work for all top classes.\r\n ",
        "createdAt" : "2020-12-11T09:51:06Z",
        "updatedAt" : "2020-12-14T19:19:50Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fad5c7bc3060d9628b08347789649a32ab56f7d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2247,2251 @@          else\n            val pobjMembers = pcls.nonPrivateMembersNamed(name).filterWithPredicate { d =>\n              !defn.topClasses.contains(d.symbol.maybeOwner) // Drop members of top classes\n            }\n            recur(pobjs1, acc.union(pobjMembers))"
  },
  {
    "id" : "cce66f69-d7d2-4929-afa4-fafd13967cc3",
    "prId" : 9608,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9608#pullrequestreview-473027802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb3e4e03-02e1-42c8-906a-2af6ca0f2903",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I'm not familiar with code in this area. I'm wondering will the cache be always valid for classes defined in libraries,  regardless of runs?",
        "createdAt" : "2020-08-21T07:05:16Z",
        "updatedAt" : "2020-08-21T07:05:22Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "664866a1-0502-48bd-a738-7e310eb8a397",
        "parentId" : "bb3e4e03-02e1-42c8-906a-2af6ca0f2903",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Yes, but libraries might be redefined in source in the next run, so you need to re-check.\r\n",
        "createdAt" : "2020-08-23T17:11:59Z",
        "updatedAt" : "2020-08-23T17:11:59Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6729e1cabaa801f04be775a76c3662c8d5648167",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +2646,2650 @@        // Note: We rely on the fact that whenever base types of classes change,\n        // the affected classes will get new denotations with new basedata caches.\n        // So basedata caches can become invalid only if the run changes.\n\n    def invalidate(): Unit ="
  },
  {
    "id" : "5d6328cf-d34d-44bd-b2f4-f6fb8a6b9f9f",
    "prId" : 9578,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9578#pullrequestreview-470474291",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52ffb228-ffb5-41d5-9296-933e01fa8d18",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "If the phases have changed (e.g., adding or removing some phases in the middle), then the periods of denotations will be incorrect in the new run. Therefore, do we need to invalidate all non-permanent denotations in such cases, as the same `phaseId` does not mean the same phase?\r\n\r\n\r\nhttps://github.com/lampepfl/dotty/blob/64a239f62ce8a9528b3a4e2c52349180629ef570/compiler/src/dotty/tools/repl/ReplCompiler.scala#L34-L39",
        "createdAt" : "2020-08-19T05:37:38Z",
        "updatedAt" : "2020-08-19T05:37:48Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "cf5d6dfd-fd9a-4c5c-8c63-82a9b5f34036",
        "parentId" : "52ffb228-ffb5-41d5-9296-933e01fa8d18",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Yes, that looks like a problem. But can phases change like this in the same compiler instance? In that case I don't see how we can re-use any symbols. So it might be better to just start a new compiler instance in that case.\r\n",
        "createdAt" : "2020-08-19T13:47:17Z",
        "updatedAt" : "2020-08-19T13:47:18Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9b70549853155e8ea877803898362435607939e",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +2356,2360 @@      if firstPhaseId > ctx.lastPhaseId then\n        false\n      else if (initial ne denot) || ctx.phaseId != firstPhaseId then\n        atPhase(firstPhaseId)(stillValidInOwner(initial))\n      else"
  },
  {
    "id" : "a97def74-7062-4e8f-97b5-97b50ef66567",
    "prId" : 8867,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8867#pullrequestreview-408663476",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75a36a41-b3e7-4f01-8c7f-753b44ff6557",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "The documentation of this method is inaccurate currently: NoSymbol.nestingLevel crashes because it has no owner:\r\n```suggestion\r\n        case _ => if maybeOwner.exists then recur(maybeOwner, n + 1) else 0\r\n```",
        "createdAt" : "2020-05-08T13:49:24Z",
        "updatedAt" : "2020-05-09T16:11:15Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "e67de9d0-3f43-4cde-a990-e7c986bfafbd",
        "parentId" : "75a36a41-b3e7-4f01-8c7f-753b44ff6557",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I thought it was preferable to change the comment instead. So, `nestingLevel` of _root_ is 0, and it's undefined for NoSymbol. We don't need it for NoSymbol, and the code is simpler that way.\r\n\r\n",
        "createdAt" : "2020-05-09T10:19:11Z",
        "updatedAt" : "2020-05-09T16:11:15Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "1aea81ba-848b-4359-967f-91e613a9a3e9",
        "parentId" : "75a36a41-b3e7-4f01-8c7f-753b44ff6557",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : ">  We don't need it for NoSymbol\r\n\r\nIn TypeVar#avoidCaptures we call `ref.symbol.maybeOwner.nestingLevel`, I think this will crash if ref happens to be a reference to a member of a structural type.",
        "createdAt" : "2020-05-09T13:25:04Z",
        "updatedAt" : "2020-05-09T16:11:15Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "a9808d45-6796-4b3f-9b8b-d475a0ab9a67",
        "parentId" : "75a36a41-b3e7-4f01-8c7f-753b44ff6557",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Also, ClassDenotation#nestingLevel does check if the owner exists, is that difference intentional?",
        "createdAt" : "2020-05-09T13:26:34Z",
        "updatedAt" : "2020-05-09T16:11:15Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "5f28446e-9425-44e5-a487-5d1ad3540a5d",
        "parentId" : "75a36a41-b3e7-4f01-8c7f-753b44ff6557",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Thinking about it more, the case of structural type member is interesting: it seems that their level should be the level of their underlying type, but then that means `nestingLevel` should be defined on `Type`",
        "createdAt" : "2020-05-09T13:29:27Z",
        "updatedAt" : "2020-05-09T16:11:15Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "f995d1e9-af60-4bab-b3df-477a9bb67761",
        "parentId" : "75a36a41-b3e7-4f01-8c7f-753b44ff6557",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Currently, TypeVar#avoidCaptures only looks for TermRefs, and I think these TermRefs can never be structural members because a reference to such a member is never a stable path. So I think the current implementation is OK, but it's something to watch out for if Typevar#avoidCaptures is extended to do more checks",
        "createdAt" : "2020-05-09T14:30:48Z",
        "updatedAt" : "2020-05-09T16:11:15Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "5993e422-22b7-4568-b239-025ef7b49ed8",
        "parentId" : "75a36a41-b3e7-4f01-8c7f-753b44ff6557",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I fixed `nestingLevel` to work for `NoDenotation` as well. Structural type members would not have the form `TermRef(NoPrefix, _)`, so we do not check their nestingLevel. It's true that we might also have to extend this to type members. That's part of #8900.\r\n",
        "createdAt" : "2020-05-09T16:12:23Z",
        "updatedAt" : "2020-05-09T16:12:36Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e97b2782dbc6980ff056142dd152b79e33e2c1bf",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1456,1460 @@        case NoDenotation => n\n        case d: ClassDenotation => d.nestingLevel + n // profit from the cache in ClassDenotation\n        case _ => recur(d.owner, n + 1)\n      recur(this, 0)\n"
  },
  {
    "id" : "3f776875-693c-441b-b6f9-3a159c5380d6",
    "prId" : 8836,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8836#pullrequestreview-403783256",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a213a42-570f-4d3b-861d-42581ffa2f35",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "What we need the test `!hasAnnotation(defn.ScalaStaticAnnot)`?",
        "createdAt" : "2020-04-30T18:07:25Z",
        "updatedAt" : "2020-05-01T07:36:55Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "56a5464a-c0a9-4cad-a680-c3d917617665",
        "parentId" : "8a213a42-570f-4d3b-861d-42581ffa2f35",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "The `@static` annotation is supposed to guarantee that the field is emitted in the bytecode with the original signature. Hence we cannot remove the definition. There was one bytecode test with a `final val` that failed without this test.",
        "createdAt" : "2020-04-30T18:42:27Z",
        "updatedAt" : "2020-05-01T07:36:55Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "01ca6e63a5bf7eb508cb0106754b956502130da4",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1006,1010 @@     */\n    def isEffectivelyErased(implicit ctx: Context): Boolean =\n      is(Erased) || is(Inline) && !isRetainedInline && !hasAnnotation(defn.ScalaStaticAnnot)\n      // Do not mark local inline vals as erased. Currently some inline val references do not get\n      // fully inlined and then would fail the erased check."
  },
  {
    "id" : "02f47a66-33d2-481a-80be-7a0b9ea4795a",
    "prId" : 8637,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8637#pullrequestreview-386994897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63837ecf-79fc-4bcd-a787-cfc08712937d",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "@nicolasstucki The `paramSymss ` method should be exported through Tasty reflect. ",
        "createdAt" : "2020-03-30T19:20:01Z",
        "updatedAt" : "2020-04-03T07:22:59Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "eda0a8a3-04e4-4daf-a8c8-a4f0716d6990",
        "parentId" : "63837ecf-79fc-4bcd-a787-cfc08712937d",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I added `paramSymss` to the TASTy reflect API",
        "createdAt" : "2020-04-03T07:27:29Z",
        "updatedAt" : "2020-04-03T07:27:29Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e8014ebb26d54bf3c589321e4f2c83de44339a0",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +388,392 @@      setParamss(tparams.map(_.symbol), vparamss.map(_.map(_.symbol)))\n\n    /** A pair consistsing of type paremeter symbols and value parameter symbol lists\n     *  of this method definition, or (Nil, Nil) for other symbols.\n     *  Makes use of `rawParamss` when present, or constructs fresh parameter symbols otherwise."
  },
  {
    "id" : "17af9320-480f-45ba-bbb9-48b9b83aba71",
    "prId" : 8580,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8580#pullrequestreview-378990309",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa83374f-36dc-4f54-ae67-fecd52239711",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Just curious, we have to use `tparams` instead of `alias.typeParams` due to the following test in `boundsFromParams`?\r\n\r\n```Scala\r\n      def isOpaqueAlias = params match\r\n        case (param: Symbol) :: _ => param.owner.is(Opaque)\r\n        case _ => false\r\n```",
        "createdAt" : "2020-03-21T21:41:56Z",
        "updatedAt" : "2020-03-21T21:42:20Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "65480cf0-8c49-4b49-b73c-00dc7c6bce09",
        "parentId" : "fa83374f-36dc-4f54-ae67-fecd52239711",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "`alias.typeParams` is a list of `TypeParamRefs`, which are different from the symbols on `rhs`. That caused the problem.\r\n",
        "createdAt" : "2020-03-22T10:22:42Z",
        "updatedAt" : "2020-03-22T10:22:43Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c06f6d8fd9221116ab25420580c906f8132e08f7",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +463,467 @@        case TypeAlias(alias) if isOpaqueAlias && owner.isClass =>\n          setAlias(alias)\n          HKTypeLambda.boundsFromParams(tparams, bounds(rhs))\n        case _ =>\n          info"
  },
  {
    "id" : "0019d2c9-e8d4-4afa-ba97-e41ae3b62ee4",
    "prId" : 6179,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6179#pullrequestreview-222625892",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fc43190-82e1-4688-a839-6c070dac5120",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Why not change the Scala2Unpickler to set the Scala2x flag on methods too ?",
        "createdAt" : "2019-03-28T12:46:11Z",
        "updatedAt" : "2019-04-04T09:39:09Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "82682877-3a70-4edb-9f25-a5e2815215ca",
        "parentId" : "9fc43190-82e1-4688-a839-6c070dac5120",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We could try that",
        "createdAt" : "2019-03-28T14:19:34Z",
        "updatedAt" : "2019-04-04T09:39:09Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "1d26a2ab-c528-4aad-a834-cb8e2d2abdfd",
        "parentId" : "9fc43190-82e1-4688-a839-6c070dac5120",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I added an alternative fix in 4b6d417 that sets the `Scala2x` flag to all symbols.",
        "createdAt" : "2019-03-28T14:50:12Z",
        "updatedAt" : "2019-04-04T09:39:09Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "0ce3414b-7089-4205-892f-bb9d91a6484f",
        "parentId" : "9fc43190-82e1-4688-a839-6c070dac5120",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "> I added an alternative fix in 4b6d417 that sets the Scala2x flag to all symbols.\r\n\r\n\r\nThat looks good to me but maybe there was a reason to not set Scala2x on all Scala 2 symbols ? /cc @odersky ",
        "createdAt" : "2019-03-28T14:53:26Z",
        "updatedAt" : "2019-04-04T09:39:09Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "e25b9ee7-7c7b-42a1-9970-265cbd379fb4",
        "parentId" : "9fc43190-82e1-4688-a839-6c070dac5120",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "The issue is that we have to use an additional as `Scala2x` is only a type flag.",
        "createdAt" : "2019-03-29T14:05:22Z",
        "updatedAt" : "2019-04-04T09:39:09Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "a2413106-1cc3-425d-83fa-a000cc30106f",
        "parentId" : "9fc43190-82e1-4688-a839-6c070dac5120",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We did not add the flag as it was not absolutely necessary",
        "createdAt" : "2019-04-04T08:41:05Z",
        "updatedAt" : "2019-04-04T09:39:09Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "89412a06ec6ab705fec634da927f8c4de1808d1b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +809,813 @@\n    /** Is this a Scala 2 macro */\n    final def isScala2Macro(implicit ctx: Context): Boolean = is(Macro) && symbol.owner.is(Scala2x)\n\n    /** An erased value or an inline method, excluding @forceInline annotated methods."
  },
  {
    "id" : "834886d5-c927-49e5-990a-1d69328d4e6d",
    "prId" : 5985,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5985#pullrequestreview-207469735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f288f55-e712-4393-9da5-c06d387531f7",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "@OlivierBlanvillain I'm not sure how this fits into your refactoring. Maybe we can delay this PR until the refactoring is merged.",
        "createdAt" : "2019-02-25T15:48:00Z",
        "updatedAt" : "2019-02-25T16:12:12Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8b7038e5ce3c6b6345f519f76b6e9c797e8b640",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1586,1590 @@      !this.is(Final) && !that.is(Final) && (this.is(Trait) || that.is(Trait)) ||\n        this.derivesFrom(that) || that.derivesFrom(this.symbol)\n\n    final override def typeParamCreationFlags: FlagSet = ClassTypeParamCreationFlags\n"
  },
  {
    "id" : "02fae314-770a-452a-818f-e431d88075c9",
    "prId" : 5754,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5754#pullrequestreview-199341334",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "757be792-a488-494c-82f8-8281dd6a9910",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Is the comment above this method still accurate with these changes ? That is, do members of the package objects still shadow members of the package ?",
        "createdAt" : "2019-02-01T17:08:07Z",
        "updatedAt" : "2019-02-04T15:48:01Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "c75c27f4-2356-4811-a1e4-5bc0e35aef72",
        "parentId" : "757be792-a488-494c-82f8-8281dd6a9910",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "No. Fixed.\r\n",
        "createdAt" : "2019-02-02T09:14:05Z",
        "updatedAt" : "2019-02-04T15:48:01Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "537f80d90d7822a33b3f62d01d24b67c6906efe9",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +1991,1995 @@        case nil =>\n          val directMembers = super.computeNPMembersNamed(name)\n          if (acc.exists) acc.union(directMembers.filterWithPredicate(!_.symbol.isAbsent))\n          else directMembers\n      }"
  },
  {
    "id" : "f2a17d80-6394-44a9-9a19-dc197e66238e",
    "prId" : 5730,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5730#pullrequestreview-193713120",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e270ce7-2bbf-495d-be63-55589ad37b34",
        "parentId" : null,
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "The relation between stable and idempotent was a bit surprising to me and @odersky, but I think I just convinced him (in a quick chat) this makes sense. Counterexamples welcome!",
        "createdAt" : "2019-01-17T16:22:00Z",
        "updatedAt" : "2019-01-22T15:21:34Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0c8e68ffbfd380216183388a58dea3489adafd2",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +611,615 @@    /** Is this a denotation of a stable term (or an arbitrary type)?\n      * Terms are stable if they are idempotent (as in TreeInfo.Idempotent): that is, they always return the same value,\n      * if any.\n      *\n      * A *member* is stable, basically, if it behaves like a field projection: that is, it projects a constant result"
  },
  {
    "id" : "8ccb7b1d-00cb-4b19-a23a-3703acf48bef",
    "prId" : 5300,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5300#pullrequestreview-167293090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63fc46b6-9396-4cd5-a54f-e059e58bd9f7",
        "parentId" : null,
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "Somewhat orthogonal, but having different apparent kinds for the bounds seems surprising? I can see you’re encoding the kind-arity this way.\r\nI expect this fulfills the invariants necessary to Dotty, but those still puzzle me.",
        "createdAt" : "2018-10-21T00:27:56Z",
        "updatedAt" : "2018-11-08T16:16:24Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      },
      {
        "id" : "f868299f-8bb3-4f47-b78a-4a4075fcaa41",
        "parentId" : "63fc46b6-9396-4cd5-a54f-e059e58bd9f7",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Yes, that's still up for reconsideration and a possible change. There's comment in the type lambdas spec that states this.",
        "createdAt" : "2018-10-23T08:49:39Z",
        "updatedAt" : "2018-11-08T16:16:24Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "93757f502960d527d9b8ebb6baa88dcd9fed3bc3",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +376,380 @@        info match {\n          case TypeAlias(alias) =>\n            info = TypeBounds(defn.NothingType, abstractRHS(alias))\n            setFlag(Deferred)\n          case _ =>"
  },
  {
    "id" : "a600864f-b3e8-45ba-8ccc-524a460a6bc4",
    "prId" : 5300,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5300#pullrequestreview-167293188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0ca3ade-be10-43e9-9131-a84d3e80d029",
        "parentId" : null,
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "tp: TypeOrSymbol (from Types) would be more informative.",
        "createdAt" : "2018-10-21T00:33:47Z",
        "updatedAt" : "2018-11-08T16:16:24Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      },
      {
        "id" : "c697cefb-86d2-4a47-bfa2-ce0ebf517aad",
        "parentId" : "f0ca3ade-be10-43e9-9131-a84d3e80d029",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Agreed.",
        "createdAt" : "2018-10-23T08:49:52Z",
        "updatedAt" : "2018-11-08T16:16:24Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "93757f502960d527d9b8ebb6baa88dcd9fed3bc3",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +858,862 @@    final def sourceModule(implicit ctx: Context): Symbol = myInfo match {\n      case ClassInfo(_, _, _, _, selfType) if this is ModuleClass =>\n        def sourceOfSelf(tp: Any): Symbol = tp match {\n          case tp: TermRef => tp.symbol\n          case tp: Symbol => sourceOfSelf(tp.info)"
  },
  {
    "id" : "e575251f-1e1e-4555-ae79-2cfce0b3e0e5",
    "prId" : 5300,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5300#pullrequestreview-166766490",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3b347c1-0931-4221-94e6-dfc6de39f78c",
        "parentId" : null,
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "Mmh, wondering if other uses of isStaticOwner need to also test isOpaqueCompanion... TODO check",
        "createdAt" : "2018-10-21T01:04:37Z",
        "updatedAt" : "2018-11-08T16:16:24Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      }
    ],
    "commit" : "93757f502960d527d9b8ebb6baa88dcd9fed3bc3",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +763,767 @@    def membersNeedAsSeenFrom(pre: Type)(implicit ctx: Context): Boolean =\n      !(  this.isTerm\n       || this.isStaticOwner && !this.isOpaqueCompanion\n       || ctx.erasedTypes\n       || (pre eq NoPrefix)"
  },
  {
    "id" : "4b287294-95fa-4529-a940-a3b656867755",
    "prId" : 5300,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5300#pullrequestreview-173904031",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "892c3260-b7e0-4311-bdbe-8404e87a2a71",
        "parentId" : null,
        "authorId" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "body" : "Comparing this to scalac's implementation, I noticed we still do ASF post erasure when the prefix is Array `|| phase.erasedTypes && pre.typeSymbol != ArrayClass`. (See `val trivial` in `def asSeenFrom`.)",
        "createdAt" : "2018-10-23T12:03:28Z",
        "updatedAt" : "2018-11-09T08:46:03Z",
        "lastEditedBy" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "tags" : [
        ]
      },
      {
        "id" : "fc2021cc-312b-4297-83d1-e952b8f99f9f",
        "parentId" : "892c3260-b7e0-4311-bdbe-8404e87a2a71",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I wonder why?",
        "createdAt" : "2018-11-09T10:35:01Z",
        "updatedAt" : "2018-11-09T10:35:01Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "1e3160b2-ccc1-4992-b677-c37a20a210e1",
        "parentId" : "892c3260-b7e0-4311-bdbe-8404e87a2a71",
        "authorId" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "body" : "I’ll see if I can find the corresponding bug and report back. I guess erasing a member selection on an array may need to know the element type in the prefix (the array type). Could be that we special cased this elsewhere and this is now redundant. ",
        "createdAt" : "2018-11-09T10:57:18Z",
        "updatedAt" : "2018-11-09T10:57:18Z",
        "lastEditedBy" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "tags" : [
        ]
      },
      {
        "id" : "8e796558-0303-4537-b262-fbc95777ba33",
        "parentId" : "892c3260-b7e0-4311-bdbe-8404e87a2a71",
        "authorId" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "body" : "Potentially a premature optimization. It's been in there for about 13 years: https://github.com/scala/scala/commit/2a5f623#diff-2731df2ea3054555efb4a23f8c628acdR158",
        "createdAt" : "2018-11-12T12:25:20Z",
        "updatedAt" : "2018-11-12T12:25:21Z",
        "lastEditedBy" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "tags" : [
        ]
      },
      {
        "id" : "7d3d2fe0-06d0-40a1-bc63-a8ffbaed1588",
        "parentId" : "892c3260-b7e0-4311-bdbe-8404e87a2a71",
        "authorId" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "body" : "Well, could've been for correctness: that same diff also reworks `transformInfo` in erasure. These days Array does not extend Seq anymore, so maybe that's why it's redundant?",
        "createdAt" : "2018-11-12T12:29:23Z",
        "updatedAt" : "2018-11-12T12:29:24Z",
        "lastEditedBy" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "tags" : [
        ]
      },
      {
        "id" : "e30c0a6a-16cb-4a2d-98ae-3a78fed8904c",
        "parentId" : "892c3260-b7e0-4311-bdbe-8404e87a2a71",
        "authorId" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "body" : "I tried a bootstrap without the special case for Array, but then scalac crashes on compiling ArrayOps.",
        "createdAt" : "2018-11-12T12:49:22Z",
        "updatedAt" : "2018-11-12T12:49:22Z",
        "lastEditedBy" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "tags" : [
        ]
      },
      {
        "id" : "b2198086-d515-4fe8-9e94-ee2b15d5a580",
        "parentId" : "892c3260-b7e0-4311-bdbe-8404e87a2a71",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "So, we do compile ArrayOps, so it might be an artifact how parameters are tied to asSeenFrom (which is different in the two compilers).\r\n",
        "createdAt" : "2018-11-12T13:29:50Z",
        "updatedAt" : "2018-11-12T13:29:51Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "b90bfced-1cf3-4517-8faf-0693b03ed6e1",
        "parentId" : "892c3260-b7e0-4311-bdbe-8404e87a2a71",
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "I tried as well on the 2.13 std lib and it works fine",
        "createdAt" : "2018-11-12T13:43:41Z",
        "updatedAt" : "2018-11-12T13:43:42Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      }
    ],
    "commit" : "93757f502960d527d9b8ebb6baa88dcd9fed3bc3",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +764,768 @@      !(  this.isTerm\n       || this.isStaticOwner && !this.isOpaqueCompanion\n       || ctx.erasedTypes\n       || (pre eq NoPrefix)\n       || (pre eq thisType)"
  },
  {
    "id" : "a6ac2968-e8cc-41e7-abb3-ba5ce4d3850a",
    "prId" : 5300,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5300#pullrequestreview-173357032",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a378b679-964f-4558-b0ff-efd09ae34506",
        "parentId" : null,
        "authorId" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "body" : "btw, couldn't a term member's info (e.g. a bound) still refer to a member of an outer class?",
        "createdAt" : "2018-10-23T12:18:49Z",
        "updatedAt" : "2018-11-09T08:46:03Z",
        "lastEditedBy" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "tags" : [
        ]
      },
      {
        "id" : "a33d400a-4951-440f-b288-29dc07f0a45c",
        "parentId" : "a378b679-964f-4558-b0ff-efd09ae34506",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Sure, but it's already taken care of when the type is constructed. \r\n\r\n  ",
        "createdAt" : "2018-11-09T10:41:21Z",
        "updatedAt" : "2018-11-09T10:41:21Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "93757f502960d527d9b8ebb6baa88dcd9fed3bc3",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +762,766 @@     */\n    def membersNeedAsSeenFrom(pre: Type)(implicit ctx: Context): Boolean =\n      !(  this.isTerm\n       || this.isStaticOwner && !this.isOpaqueCompanion\n       || ctx.erasedTypes"
  },
  {
    "id" : "eb9e42d1-09ab-4c53-8781-67f64e286f63",
    "prId" : 5203,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5203#pullrequestreview-162019227",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02bd7e8c-ec2a-46e1-a87f-3a6a1f2efa12",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "Remove RHS type annotation?",
        "createdAt" : "2018-10-05T12:28:16Z",
        "updatedAt" : "2018-10-05T15:57:20Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "fe4b1eca-c248-4ede-a4a6-a322592b18e3",
        "parentId" : "02bd7e8c-ec2a-46e1-a87f-3a6a1f2efa12",
        "authorId" : "6d71bb21-e402-4464-b2b1-8bdd8e068461",
        "body" : "Needed as well, not sure why",
        "createdAt" : "2018-10-05T12:50:54Z",
        "updatedAt" : "2018-10-05T15:57:20Z",
        "lastEditedBy" : "6d71bb21-e402-4464-b2b1-8bdd8e068461",
        "tags" : [
        ]
      }
    ],
    "commit" : "c54153a8e2949c25fabda40c7953c04779b883c2",
    "line" : 326,
    "diffHunk" : "@@ -1,1 +867,871 @@\n    /** The chain of owners of this denotation, starting with the denoting symbol itself */\n    final def ownersIterator(implicit ctx: Context): Iterator[Symbol] = new Iterator[Symbol] {\n      private[this] var current = symbol\n      def hasNext = current.exists"
  },
  {
    "id" : "d7b659d5-3fa2-43a4-8ff7-e9c7a274c060",
    "prId" : 4622,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4622#pullrequestreview-126247872",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "661f6137-24da-4a3e-a57d-ff48e10ffb44",
        "parentId" : null,
        "authorId" : "70ef1594-3bb7-4579-b053-2189b409b5dc",
        "body" : "I think the method's and the flag's name should match (so probably `isInlineMethod`, i.e. minus the `d`).",
        "createdAt" : "2018-06-05T19:39:56Z",
        "updatedAt" : "2018-06-06T12:14:33Z",
        "lastEditedBy" : "70ef1594-3bb7-4579-b053-2189b409b5dc",
        "tags" : [
        ]
      },
      {
        "id" : "d9a363fc-8bf7-4493-a197-fca5489eca69",
        "parentId" : "661f6137-24da-4a3e-a57d-ff48e10ffb44",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I was thinking if we keep something like `inline` as a modifier we should rename it to `inlined` instead. Then we don't have a clash with the `@inline` annotation, and it's a bit cleaner. `transparent` and `inlined` are both adjectives, whereas it's a stretch to call `inline` an adjective.",
        "createdAt" : "2018-06-06T06:32:54Z",
        "updatedAt" : "2018-06-06T12:14:33Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b359c7dd2a24ffbfdf4bf85673a9ac789362d83a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +780,784 @@    def isSkolem: Boolean = name == nme.SKOLEM\n\n    def isInlinedMethod(implicit ctx: Context): Boolean =\n      is(InlineMethod, butNot = Accessor)\n"
  },
  {
    "id" : "5aec080b-9c3d-4b0c-ae80-baedcd7018ac",
    "prId" : 3735,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3735#pullrequestreview-86608889",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9533750-30b5-43ad-8fb3-0c7190ee4361",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "This long chain of conditions is getting really hard to read, factor it out into a few vals?",
        "createdAt" : "2018-01-03T18:06:53Z",
        "updatedAt" : "2018-01-04T11:18:48Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "2a12c9dc-bda3-41bd-9490-8e9654ace096",
        "parentId" : "f9533750-30b5-43ad-8fb3-0c7190ee4361",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I tried but it does not seem to help. The key is treating !A || B as an implication, then things get clearer. I was wondering whether we should add an inline helper method `implies` on `Boolean` to do this. But it's quite a lot of effort.\r\n  ",
        "createdAt" : "2018-01-04T11:20:16Z",
        "updatedAt" : "2018-01-04T11:20:28Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "894d77964d4563dafa357b3952eb54cb1c5a2102",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +731,735 @@             || (owner is ImplClass) // allow private local accesses to impl class members\n             || isCorrectThisType(pre)\n             ) &&\n             (!(this.is(Private) && owner.is(Package)) ||\n              owner == ctx.owner.enclosingPackageClass)"
  },
  {
    "id" : "43754ecb-0f5f-4f1a-8d0f-1df4e3c98f03",
    "prId" : 3622,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3622#pullrequestreview-84813511",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdf883fb-45cf-4aa5-b796-1a0cf94db318",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "What is fixed with this change?",
        "createdAt" : "2017-12-15T08:31:31Z",
        "updatedAt" : "2017-12-15T08:31:32Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "4016d077-00c3-4f02-8dcb-1ce048a1d7f7",
        "parentId" : "bdf883fb-45cf-4aa5-b796-1a0cf94db318",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "That was an IDE hardening tweak.",
        "createdAt" : "2017-12-20T16:10:45Z",
        "updatedAt" : "2017-12-20T16:10:46Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc6f86a869a434f490a828e352e05e34c8c13670",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1445,1449 @@      for (p <- classParents) {\n        if (p.typeSymbol.isClass) builder.addAll(p.typeSymbol.asClass.baseClasses)\n        else assert(ctx.mode.is(Mode.Interactive), s\"$this has non-class parent: $p\")\n        builder.addAll(p.typeSymbol.asClass.baseClasses)\n      }"
  },
  {
    "id" : "49cf8a17-8f1f-42d7-8e34-de819803fd96",
    "prId" : 3061,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3061#pullrequestreview-60852946",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07568908-3295-4464-828b-604426c7c15c",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Refactoring: givenSelfType moved from ClassInfo to ClassDenotation",
        "createdAt" : "2017-09-06T09:30:15Z",
        "updatedAt" : "2017-09-20T15:20:34Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e65bd581c7506e1a382d906a9c8a961fafabfff",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +1381,1385 @@\n    /** The explicitly given self type (self types of modules are assumed to be\n     *  explcitly given here).\n     */\n    def givenSelfType(implicit ctx: Context) = classInfo.selfInfo match {"
  },
  {
    "id" : "b9d024e6-5507-46aa-a3b9-122322f973f5",
    "prId" : 3061,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3061#pullrequestreview-60853380",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19d4fd73-2ed4-4295-bec9-3f48aeeea090",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "It seems we were needlessly pessimistic before and therefore cached less than we could have.",
        "createdAt" : "2017-09-06T09:31:53Z",
        "updatedAt" : "2017-09-20T15:20:34Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e65bd581c7506e1a382d906a9c8a961fafabfff",
    "line" : 197,
    "diffHunk" : "@@ -1,1 +1612,1616 @@          //case tp: TypeProxy => inCache(tp.underlying) // disabled, can re-enable insyead of last two lines for performance testing\n          //case tp: AndOrType => inCache(tp.tp1) && inCache(tp.tp2)\n          case tp: TypeProxy => isCachable(tp.underlying, btrCache)\n          case tp: AndOrType => isCachable(tp.tp1, btrCache) && isCachable(tp.tp2, btrCache)\n          case _ => true"
  },
  {
    "id" : "20ac7872-8aa4-4af3-bc5a-7c5d13b37839",
    "prId" : 3061,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3061#pullrequestreview-60853858",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "737eaec8-8289-41d1-89fd-3ab8e612aea8",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Complication: Compute applied base types instead of simple TypeRefs.",
        "createdAt" : "2017-09-06T09:33:43Z",
        "updatedAt" : "2017-09-20T15:20:34Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e65bd581c7506e1a382d906a9c8a961fafabfff",
    "line" : 221,
    "diffHunk" : "@@ -1,1 +1626,1630 @@          symbol.typeRef\n        else tp match {\n          case tp @ TypeRef(prefix, _) =>\n            val subsym = tp.symbol\n            if (subsym eq symbol) tp"
  },
  {
    "id" : "afaf6607-edea-4ef9-b6a7-18b9b569983e",
    "prId" : 2425,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2425#pullrequestreview-38005739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3f2f57f-8d09-481f-acc0-74f0ea41944c",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Missing an `(implicit ctx: Context)`",
        "createdAt" : "2017-05-14T18:36:22Z",
        "updatedAt" : "2017-05-15T16:51:27Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "effaca17f465032e39f068ab069a5f6313e7c0a8",
    "line" : 784,
    "diffHunk" : "@@ -1,1 +2040,2044 @@    final def isValid(implicit ctx: Context): Boolean = valid && isValidAt(ctx.phase)\n\n    def invalidate(): Unit =\n      if (valid && !locked) {\n        cache = null"
  },
  {
    "id" : "004186f9-1333-4bc3-833a-d45156e89f99",
    "prId" : 2425,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2425#pullrequestreview-38118714",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4014845-4bf7-4b5d-9f82-0e986b01f03b",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "maybe add a check that also checks correctness of `changesMembers` assumption here?\r\nIt may be slow, so I'd propose to guard it with config flag.",
        "createdAt" : "2017-05-15T08:41:21Z",
        "updatedAt" : "2017-05-15T16:51:27Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "e9a5fc8e-e0c2-4a6f-ba5d-04e10f2b3b81",
        "parentId" : "f4014845-4bf7-4b5d-9f82-0e986b01f03b",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "The check is in `enteredAfter`. I think it would make little sense checking in `info_=` because typically we set the info with a clone of the previous scope and then add symbols later using `enteredAfter`.\r\n",
        "createdAt" : "2017-05-15T13:43:59Z",
        "updatedAt" : "2017-05-15T16:51:27Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "effaca17f465032e39f068ab069a5f6313e7c0a8",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1172,1176 @@      val info1 = if (info != null) info else this.info\n      if (ctx.isAfterTyper && changedClassParents(info, info1, completersMatter = false))\n        assert(ctx.phase.changesParents, i\"undeclared parent change at ${ctx.phase} for $this, was: $info, now: $info1\")\n      val privateWithin1 = if (privateWithin != null) privateWithin else this.privateWithin\n      val annotations1 = if (annotations != null) annotations else this.annotations"
  },
  {
    "id" : "d58b5016-b802-4ec4-ad31-7d8701c16028",
    "prId" : 2425,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2425#pullrequestreview-38057325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e066f0cf-6272-4248-97fb-ff6c05d84301",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "rename to myTypeParamsCache for consistency?",
        "createdAt" : "2017-05-15T08:42:13Z",
        "updatedAt" : "2017-05-15T16:51:27Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "effaca17f465032e39f068ab069a5f6313e7c0a8",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +1233,1237 @@    // ----- caches -------------------------------------------------------\n\n    private[this] var myTypeParams: List[TypeSymbol] = null\n    private[this] var fullNameCache: SimpleMap[QualifiedNameKind, Name] = SimpleMap.Empty\n"
  },
  {
    "id" : "23860911-88a4-4e6c-9610-3cab9a534d76",
    "prId" : 2425,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2425#pullrequestreview-38118929",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4a36aae-6dad-446f-8964-b3dd4e260b86",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "I'd propose to check for inclusion instead of equality: `!myMemberCachePeriod.contains(ctx.period)`",
        "createdAt" : "2017-05-15T08:43:27Z",
        "updatedAt" : "2017-05-15T16:51:27Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "1a0950b7-4ac8-46e8-8caf-0af9941d5620",
        "parentId" : "d4a36aae-6dad-446f-8964-b3dd4e260b86",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "The reason is that mini-phase driver runs with ctx.period set to multiple phases.",
        "createdAt" : "2017-05-15T08:48:43Z",
        "updatedAt" : "2017-05-15T16:51:27Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "6d2bd66d-5a64-42d2-9764-b05e1efb582c",
        "parentId" : "d4a36aae-6dad-446f-8964-b3dd4e260b86",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "But `myMemberCachePeriod` is always set to a single phase period, right?",
        "createdAt" : "2017-05-15T13:44:47Z",
        "updatedAt" : "2017-05-15T16:51:27Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "effaca17f465032e39f068ab069a5f6313e7c0a8",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +1248,1252 @@\n    private def memberCache(implicit ctx: Context): LRUCache[Name, PreDenotation] = {\n      if (myMemberCachePeriod != ctx.period) {\n        myMemberCache = new LRUCache\n        myMemberCachePeriod = ctx.period"
  },
  {
    "id" : "c4ae99bf-5408-4e52-8254-b4b9b5faebf5",
    "prId" : 2425,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2425#pullrequestreview-38057325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "093df3ea-4e09-4bbb-a643-5d6d46c5a3c7",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "same here, `contains` instead of equality.",
        "createdAt" : "2017-05-15T08:43:46Z",
        "updatedAt" : "2017-05-15T16:51:27Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "effaca17f465032e39f068ab069a5f6313e7c0a8",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +1256,1260 @@\n    private def baseTypeRefCache(implicit ctx: Context): BaseTypeRefMap = {\n      if (myBaseTypeRefCachePeriod != ctx.period &&\n          (myBaseTypeRefCachePeriod.runId != ctx.runId ||\n           ctx.phases(myBaseTypeRefCachePeriod.phaseId).sameParentsStartId != ctx.phase.sameParentsStartId)) {"
  },
  {
    "id" : "6fc1762e-d235-4300-8e94-6b5443e4b3a8",
    "prId" : 2425,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2425#pullrequestreview-38121264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2067c0b3-1fba-4c1b-b93c-89425b5a4825",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "Does this ever happen? should we throw an error here?",
        "createdAt" : "2017-05-15T08:50:39Z",
        "updatedAt" : "2017-05-15T16:51:27Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "7bfee000-328a-454f-9762-d2b3daf7bf0a",
        "parentId" : "2067c0b3-1fba-4c1b-b93c-89425b5a4825",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Could happen if original info is a completer.",
        "createdAt" : "2017-05-15T13:52:35Z",
        "updatedAt" : "2017-05-15T16:51:27Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "effaca17f465032e39f068ab069a5f6313e7c0a8",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +1288,1292 @@            myBaseTypeRefCache = from.baseTypeRefCache\n          }\n        case _ =>\n      }\n      this"
  },
  {
    "id" : "a4f83319-c1ad-4db7-ad3c-3aa8e26fe3a9",
    "prId" : 2425,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2425#pullrequestreview-38119831",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8453ba5-3340-435c-a03b-aff97afdda24",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "I'd propose to add a check similar to `changedClassParents` for members, which is guarder by a Config flag.",
        "createdAt" : "2017-05-15T08:51:51Z",
        "updatedAt" : "2017-05-15T16:51:27Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "a52c9717-1bb5-4ed6-9897-140a9b181394",
        "parentId" : "a8453ba5-3340-435c-a03b-aff97afdda24",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "member names are relatively infrequently needed, so I think we lose little to invalidate them more aggressively than strictly needed. Also, names will usually be entered later using `enteredAfter`.",
        "createdAt" : "2017-05-15T13:47:58Z",
        "updatedAt" : "2017-05-15T16:51:27Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "effaca17f465032e39f068ab069a5f6313e7c0a8",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +1332,1336 @@      if (changedClassParents(infoOrCompleter, tp, completersMatter = true))\n        invalidateBaseDataCache()\n      invalidateMemberNamesCache()\n      myTypeParams = null // changing the info might change decls, and with it typeParams\n      super.info_=(tp)"
  },
  {
    "id" : "2c51f081-16e9-46ee-962c-62cc14b60dbd",
    "prId" : 2425,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2425#pullrequestreview-38057325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f715dfe8-b85d-4b17-9ed4-b542a40615cf",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "And here.",
        "createdAt" : "2017-05-15T08:53:23Z",
        "updatedAt" : "2017-05-15T16:51:27Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "effaca17f465032e39f068ab069a5f6313e7c0a8",
    "line" : 388,
    "diffHunk" : "@@ -1,1 +1477,1481 @@    def enterNoReplace(sym: Symbol, scope: MutableScope)(implicit ctx: Context): Unit = {\n      scope.enter(sym)\n      if (myMemberCache != null) myMemberCache.invalidate(sym.name)\n      if (!sym.flagsUNSAFE.is(Private)) invalidateMemberNamesCache()\n    }"
  },
  {
    "id" : "3ce6b574-e53f-4e1a-879c-c2a00a2696c0",
    "prId" : 2425,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2425#pullrequestreview-38057325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28a31e37-d257-4d35-8965-8978e8e83787",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "and here)",
        "createdAt" : "2017-05-15T08:53:43Z",
        "updatedAt" : "2017-05-15T16:51:27Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "effaca17f465032e39f068ab069a5f6313e7c0a8",
    "line" : 401,
    "diffHunk" : "@@ -1,1 +1487,1491 @@    def replace(prev: Symbol, replacement: Symbol)(implicit ctx: Context): Unit = {\n      unforcedDecls.openForMutations.replace(prev, replacement)\n      if (myMemberCache != null) myMemberCache.invalidate(replacement.name)\n    }\n"
  },
  {
    "id" : "2ac70857-0a78-4d0b-9c62-b9e4dda2062a",
    "prId" : 2425,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2425#pullrequestreview-38057325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "207580ee-a5f8-4abd-a2f1-d06ae271bb69",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "Is caching private members worth it?",
        "createdAt" : "2017-05-15T08:54:43Z",
        "updatedAt" : "2017-05-15T16:51:27Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "effaca17f465032e39f068ab069a5f6313e7c0a8",
    "line" : 413,
    "diffHunk" : "@@ -1,1 +1496,1500 @@    def delete(sym: Symbol)(implicit ctx: Context) = {\n      info.decls.openForMutations.unlink(sym)\n      if (myMemberCache != null) myMemberCache.invalidate(sym.name)\n      if (!sym.flagsUNSAFE.is(Private)) invalidateMemberNamesCache()\n    }"
  },
  {
    "id" : "e79f1824-cc80-43a3-8d85-ea70d8f7e1ed",
    "prId" : 2425,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2425#pullrequestreview-38129234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af56c6bd-8f58-4acc-8bd4-cecd6f68fa3a",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "why do you need both call to `invalidate` and assignment to an empty cache?\r\n\r\nIn copyCaches you copy over the refernce from previous cache. It means that invalidating a future cache will also invalidate an old cache, which is still correct.\r\n\r\nSame in other invalidation methods.",
        "createdAt" : "2017-05-15T09:06:01Z",
        "updatedAt" : "2017-05-15T16:51:27Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "3c3ba44c-20f7-4f09-97fb-663d71d32691",
        "parentId" : "af56c6bd-8f58-4acc-8bd4-cecd6f68fa3a",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Good point. It was originally to save space, but I don't think that matters in practice.",
        "createdAt" : "2017-05-15T13:51:23Z",
        "updatedAt" : "2017-05-15T16:51:27Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "0e39ec6b-0396-4995-841d-6bd6b0b94c5f",
        "parentId" : "af56c6bd-8f58-4acc-8bd4-cecd6f68fa3a",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "In fact no. It does matter. IsValid at only checks that the creation period is compatible with the current one. Invalidation does not affect the creation period. So we need another way to signal that the cache is nowhere valid. That's what the assignment does. ",
        "createdAt" : "2017-05-15T14:20:02Z",
        "updatedAt" : "2017-05-15T16:51:27Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "effaca17f465032e39f068ab069a5f6313e7c0a8",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +1266,1270 @@\n    private def invalidateBaseDataCache() = {\n      baseDataCache.invalidate()\n      baseDataCache = BaseData.None\n    }"
  },
  {
    "id" : "408bccee-c888-407c-8023-ede047d0365f",
    "prId" : 2205,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2205#pullrequestreview-31724777",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63f64362-4e55-47d1-973d-5e8621660f66",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Would it possible to detect when a scala package object member hides a scala class/object and return an error?",
        "createdAt" : "2017-04-09T13:24:38Z",
        "updatedAt" : "2017-04-09T13:24:38Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "ceb80286-f75a-43c0-9208-5b444fc314c9",
        "parentId" : "63f64362-4e55-47d1-973d-5e8621660f66",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Not sure. It would be tricky since everything we do in the scala package is fraught with causing all sorts of initialization errors. Not sure it's worth it really, given that we never had a problem so far.",
        "createdAt" : "2017-04-09T14:32:09Z",
        "updatedAt" : "2017-04-09T14:32:09Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a321a982a6ebdaaa924a2538866959abe0b9eb18",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +1832,1836 @@     *  be entered in it. As a consequence, there should be no entry in the scala package\n     *  object that hides a class or object in the scala package of the same name, because\n     *  the behavior would then be unintuitive for such members.\n     */\n    override def computeNPMembersNamed(name: Name, inherited: Boolean)(implicit ctx: Context): PreDenotation ="
  },
  {
    "id" : "28ac8f25-34b2-4427-8cfc-83cdc1f5b8e6",
    "prId" : 2128,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2128#pullrequestreview-30391916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4313b802-498a-4105-8507-5765f6389aeb",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Should this setter be `protected[dotc]` like `def info_=` ?",
        "createdAt" : "2017-04-01T21:47:22Z",
        "updatedAt" : "2017-04-11T07:50:53Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "87608bded1fb23519a829fa7f6ee14d4b6a515dc",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +136,140 @@\n    /** Update the name; only called when unpickling top-level classes */\n    def name_=(n: Name) = myName = n\n\n    /** The owner of the symbol; overridden in NoDenotation */"
  }
]