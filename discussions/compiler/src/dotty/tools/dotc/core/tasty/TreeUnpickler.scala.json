[
  {
    "id" : "67b4270b-5226-444a-ac8d-9004d2f64c59",
    "prId" : 11546,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11546#pullrequestreview-600284133",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fbfeafd-6729-4fe9-b200-2669ecc323e9",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "This flag should be visible in tasty-reflect too /cc @nicolasstucki ",
        "createdAt" : "2021-02-28T17:53:17Z",
        "updatedAt" : "2021-03-05T15:43:06Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "54495b60c1a2109e087cd35a0a3917b196c24255",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +669,673 @@          case EXPORTED => addFlag(Exported)\n          case OPEN => addFlag(Open)\n          case INVISIBLE => addFlag(Invisible)\n          case TRANSPARENT => addFlag(Transparent)\n          case INFIX => addFlag(Infix)"
  },
  {
    "id" : "125c3c61-7cc0-4a4f-a4fd-b1177eb07c9d",
    "prId" : 10363,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10363#pullrequestreview-539467039",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7dcbfaab-79f2-4a6d-b472-61acd98eccb1",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "There is a potential issue here: the relative path of a file is not a unique identifier of the file, there might be path conflicts in the Scala ecosystem.\r\n\r\nIf we also store the hash of source files, that would be better.",
        "createdAt" : "2020-11-24T17:09:21Z",
        "updatedAt" : "2020-11-27T09:30:05Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "ddb11669-304b-45c0-a523-aeb0d6b07709",
        "parentId" : "7dcbfaab-79f2-4a6d-b472-61acd98eccb1",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "How would you use that hash?",
        "createdAt" : "2020-11-25T08:01:27Z",
        "updatedAt" : "2020-11-27T09:30:05Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "0144eda4-9818-47b1-9956-9d846881b0ff",
        "parentId" : "7dcbfaab-79f2-4a6d-b472-61acd98eccb1",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Maybe `ctx.getSource(path)` can take hash as an argument? I haven't thought through the details.",
        "createdAt" : "2020-11-25T08:08:21Z",
        "updatedAt" : "2020-11-27T09:30:05Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "14a969ca-83bd-44c5-82b7-3b53a4eff166",
        "parentId" : "7dcbfaab-79f2-4a6d-b472-61acd98eccb1",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "The hash would be on the contents of the source? Then we would need to read all the sources eagerly when we add them to the context. That may be quite expensive.",
        "createdAt" : "2020-11-25T08:48:53Z",
        "updatedAt" : "2020-11-27T09:30:05Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "bf6a208d-0ccb-4947-9c9c-b9d0acd8532c",
        "parentId" : "7dcbfaab-79f2-4a6d-b472-61acd98eccb1",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "When we compile files, we already have the file contents in memory.",
        "createdAt" : "2020-11-25T08:53:21Z",
        "updatedAt" : "2020-11-27T09:30:05Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "799f933e-483c-491c-84c7-c073c8886ec0",
        "parentId" : "7dcbfaab-79f2-4a6d-b472-61acd98eccb1",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Actually, it is only loaded when we first access something the depends on the source https://github.com/lampepfl/dotty/blob/master/compiler/src/dotty/tools/dotc/util/SourceFile.scala#L43.",
        "createdAt" : "2020-11-26T16:49:26Z",
        "updatedAt" : "2020-11-27T09:30:05Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "b9f8fa5a-76e9-478f-bd26-cdace1963d53",
        "parentId" : "7dcbfaab-79f2-4a6d-b472-61acd98eccb1",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "When we compile Scala files, the contents for the Scala files will be forced.\r\n",
        "createdAt" : "2020-11-26T17:00:14Z",
        "updatedAt" : "2020-11-27T09:30:05Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "361a680279028a2431e2ed85ea4dc9ed85bcb7e3",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1367,1371 @@        posUnpicklerOpt match\n          case Some(posUnpickler) =>\n            sourceFile.setLineIndicesFromLineSizes(posUnpickler.lineSizes)\n          case _ =>\n        pickling.println(i\"source change at $addr: $path\")"
  },
  {
    "id" : "49e3715e-0702-4d72-9e66-83fc9b04208f",
    "prId" : 8811,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8811#pullrequestreview-404505852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50a6d9d6-4f17-4d99-bb20-4570638e6379",
        "parentId" : null,
        "authorId" : "128563de-a925-4397-af34-450c7978a8d2",
        "body" : "should the symbol even be created?",
        "createdAt" : "2020-04-29T16:00:46Z",
        "updatedAt" : "2020-04-29T16:39:26Z",
        "lastEditedBy" : "128563de-a925-4397-af34-450c7978a8d2",
        "tags" : [
        ]
      },
      {
        "id" : "b4d06b27-d0ff-4e0a-a87a-e346faa734a9",
        "parentId" : "50a6d9d6-4f17-4d99-bb20-4570638e6379",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We may need to load the tree and symbol for tools like the IDE and semanticdb.",
        "createdAt" : "2020-04-29T16:29:32Z",
        "updatedAt" : "2020-04-29T16:39:26Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "f0d59a45-e8c5-4ede-ba13-384adb5cb103",
        "parentId" : "50a6d9d6-4f17-4d99-bb20-4570638e6379",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "In the Scala 2 unpickler we can probably ignore the inline definition completely.",
        "createdAt" : "2020-05-02T06:52:04Z",
        "updatedAt" : "2020-05-02T06:52:04Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "56a38a06260e28d3770de813bf659e5b6ce0ed00",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +583,587 @@      val isScala2MacroDefinedInScala3 = flags.is(Macro, butNot = Inline) && flags.is(Erased)\n      ctx.owner match {\n        case cls: ClassSymbol if !isScala2MacroDefinedInScala3 => cls.enter(sym)\n        case _ =>\n      }"
  },
  {
    "id" : "e839a8da-be63-4f89-9c43-aa6cd5dbe79b",
    "prId" : 8624,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8624#pullrequestreview-383402507",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ee965a7-ab34-4727-b099-5bbc1598c652",
        "parentId" : null,
        "authorId" : "128563de-a925-4397-af34-450c7978a8d2",
        "body" : "I was potentially concerned about traversing the paramNames to get a length versus comparing to an end address, but I guess it is insignificant compared to the logic to traverse types",
        "createdAt" : "2020-03-29T00:45:39Z",
        "updatedAt" : "2020-03-29T03:01:21Z",
        "lastEditedBy" : "128563de-a925-4397-af34-450c7978a8d2",
        "tags" : [
        ]
      },
      {
        "id" : "f88dee11-ed92-4c69-b01f-c82fba8cbba4",
        "parentId" : "2ee965a7-ab34-4727-b099-5bbc1598c652",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Yes, indeed. Generally, we assume that `length` is free since most lists are small.",
        "createdAt" : "2020-03-29T11:55:26Z",
        "updatedAt" : "2020-03-29T11:55:27Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c77f8e271c0be1081824597495e43d662c06728a",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +311,315 @@              val (paramNames, mods) = nameReader.readParamNamesAndMods(end)\n              companionOp(mods)(paramNames.map(nameMap))(\n                pt => registeringType(pt, paramReader.readParamTypes[PInfo](paramNames.length)),\n                pt => readType())\n            })"
  },
  {
    "id" : "fc5cf6cd-685f-44e7-8a12-f8e2d845eb1a",
    "prId" : 8591,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8591#pullrequestreview-379310861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "932c62ef-8be6-4c2d-ab76-304a80881ca0",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I propose we go to the new syntax `(using ctx) => rdr.readTerm()`.",
        "createdAt" : "2020-03-22T19:13:23Z",
        "updatedAt" : "2020-03-22T19:19:44Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "a6579261-1c79-41aa-b73d-403f102c66ff",
        "parentId" : "932c62ef-8be6-4c2d-ab76-304a80881ca0",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "That doesn't work because the expected type is not a context function type but a regular function type, and I was hesitant to change this since it'll make it harder to port code between the Scala 2 and 3 readers.",
        "createdAt" : "2020-03-22T19:40:50Z",
        "updatedAt" : "2020-03-22T19:40:50Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "b52045c3-50d8-42b1-a3d2-622cf91fb1e0",
        "parentId" : "932c62ef-8be6-4c2d-ab76-304a80881ca0",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "OK\r\n",
        "createdAt" : "2020-03-23T10:42:47Z",
        "updatedAt" : "2020-03-23T10:42:47Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c94c58e2011e16fd3580f41dfc2c6cc1bf61aecd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +671,675 @@        val end = readEnd()\n        val tp = readType()\n        val lazyAnnotTree = readLaterWithOwner(end, rdr => implicit ctx => rdr.readTerm())\n\n        owner =>"
  },
  {
    "id" : "75ccd938-7633-4643-8cc9-3998032a2666",
    "prId" : 8591,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8591#pullrequestreview-379037720",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "173029a3-4dfb-4d34-b2df-fbb6c8f6e3d9",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "ditto",
        "createdAt" : "2020-03-22T19:19:21Z",
        "updatedAt" : "2020-03-22T19:19:44Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c94c58e2011e16fd3580f41dfc2c6cc1bf61aecd",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +781,785 @@          }\n        else\n          readLater(end, rdr => implicit ctx => rdr.readTerm())\n\n      def ValDef(tpt: Tree) ="
  },
  {
    "id" : "92c6bf7a-1708-4b23-9098-d8c42c6cea9b",
    "prId" : 8561,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8561#pullrequestreview-385523152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "471dfc45-a9d5-4fbd-90f7-386abf6ddf81",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "It seems now we can remove the `splices` param for `TreeUnpickler`.",
        "createdAt" : "2020-04-01T09:18:54Z",
        "updatedAt" : "2020-04-01T12:21:36Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "bfddf9e2-d0d6-4904-889a-031487ed40c5",
        "parentId" : "471dfc45-a9d5-4fbd-90f7-386abf6ddf81",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Yes :)",
        "createdAt" : "2020-04-01T11:54:49Z",
        "updatedAt" : "2020-04-01T12:21:36Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "89cdfaf5-aaf7-436b-9e08-d47e33510df7",
        "parentId" : "471dfc45-a9d5-4fbd-90f7-386abf6ddf81",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Actually the `QuoteUnpickler` is redundant now. We can use the `DottyUnpickler` directly.",
        "createdAt" : "2020-04-01T12:11:45Z",
        "updatedAt" : "2020-04-01T12:21:36Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "cebfdd8f5b6249aa1f7d8f4870bf0da7b7349152",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1226,1230 @@              val tpe = readType()\n              val args = until(end)(readTerm())\n              TreePickler.Hole(true, idx, args).withType(tpe)\n            case _ =>\n              readPathTerm()"
  },
  {
    "id" : "5da1dfc4-79e1-4582-804f-3eae0d4b6511",
    "prId" : 6454,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6454#pullrequestreview-233755588",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce729c8f-924b-40dc-8368-ed1b8e579790",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I'm not super happy with having to recompute whether the prefix needs to be skolemized in the unpickler, but I don't really see a way around it. Maybe asSeenFrom should behave differently when unpickling a tree, but how do you even know if the type on which asSeenFrom is called comes from a tree being unpickled ? And even if we manage to allow unstable prefixes when unpickling, is that really sound when combined with inlining ?",
        "createdAt" : "2019-05-05T00:26:16Z",
        "updatedAt" : "2019-05-07T16:42:27Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "502c7c9fd700ad449cf8383cf75153999ee90ba9",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1035,1039 @@\n      def accessibleDenot(qualType: Type, name: Name, sig: Signature) = {\n        val pre = ctx.typeAssigner.maybeSkolemizePrefix(qualType, name)\n        val d = qualType.findMember(name, pre).atSignature(sig)\n        if (!d.symbol.exists || d.symbol.isAccessibleFrom(pre)) d"
  },
  {
    "id" : "b74ff15a-2d13-451f-bf9c-5799f751a815",
    "prId" : 5754,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5754#pullrequestreview-199341379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be350c6f-2e9f-4ed9-98ac-2f03b8fc4b2f",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Couldn't we do some normalization when we pickle types to avoid having to do this on unpickling ?",
        "createdAt" : "2019-02-01T17:07:09Z",
        "updatedAt" : "2019-02-04T15:48:01Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "26db883e-d34b-4a37-9ec3-1a8fc1b80051",
        "parentId" : "be350c6f-2e9f-4ed9-98ac-2f03b8fc4b2f",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "No, since these are trees, not types. The normalization is done when we unpickle a SELECT ot SELCTtpt node.\r\n",
        "createdAt" : "2019-02-02T09:16:10Z",
        "updatedAt" : "2019-02-04T15:48:01Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "537f80d90d7822a33b3f62d01d24b67c6906efe9",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1022,1026 @@        val owner = denot.symbol.maybeOwner\n        if (owner.isPackageObject && pre.termSymbol.is(Package))\n          pre = pre.select(owner.sourceModule)\n        val tpe = name match {\n          case name: TypeName => TypeRef(pre, name, denot)"
  },
  {
    "id" : "54a4dc7a-7f00-4807-8948-d9c3b082411a",
    "prId" : 4964,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4964#pullrequestreview-157352524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ddcb02d-dfac-4b30-b723-e657460e22e1",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Shouldn't this check be performed in `TypeBounds`?",
        "createdAt" : "2018-09-20T15:29:28Z",
        "updatedAt" : "2018-09-20T15:43:39Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "28edebf9-633d-47fc-af9b-620977e407b6",
        "parentId" : "0ddcb02d-dfac-4b30-b723-e657460e22e1",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "We don't have a constructor in TypeBounds. Maybe we need a refactoring, I am not sure. Anyway at the moment MatchType as whole needs more work but this will be in future PRs.\r\n",
        "createdAt" : "2018-09-20T16:11:35Z",
        "updatedAt" : "2018-09-20T16:11:36Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b548dbd0b6734f2c92ace2f55a33ccdeefb1ffd",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +328,332 @@              val lo = readType()\n              val hi = readType()\n              if (lo.isMatch && (lo `eq` hi)) MatchAlias(lo)\n              else TypeBounds(lo, hi)\n            case ANNOTATEDtype =>"
  },
  {
    "id" : "9d08d863-eece-41bc-9ae7-a483b5b66cf3",
    "prId" : 4620,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4620#pullrequestreview-126296683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9ec1996-8c8d-4331-b605-c66ecac375c1",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Why a val and not a def?",
        "createdAt" : "2018-06-05T18:41:43Z",
        "updatedAt" : "2018-06-06T09:48:45Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "5765e7e8-7a1e-409f-94f3-824ddf7b8289",
        "parentId" : "e9ec1996-8c8d-4331-b605-c66ecac375c1",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "We use it as a closure everytime we read a symbol. Making it a `val` avoids a lot of allocations.\r\n",
        "createdAt" : "2018-06-06T09:20:16Z",
        "updatedAt" : "2018-06-06T09:48:45Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c7ef1354e5ee16e4f4e2f0b4d6719ef49a3fb11",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +623,627 @@    }\n\n    private val readAnnot: Context => Annotation = {\n      implicit ctx =>\n        readByte()"
  },
  {
    "id" : "7259d19b-58cd-4525-bb24-3b0b03b5fe12",
    "prId" : 4538,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4538#pullrequestreview-120972571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf71c028-8f5d-4a71-9781-5620edeabdfc",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Document what this method does, how it differs from unpickle(), when it is used",
        "createdAt" : "2018-05-17T09:59:23Z",
        "updatedAt" : "2018-05-17T10:00:51Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "40b200a3e545fab64f97b0e66158e88967b24c79",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +79,83 @@  }\n\n  def unpickleExpr()(implicit ctx: Context): Tree = {\n    this.roots = Set(ctx.owner)\n    val rdr = new TreeReader(reader).fork"
  },
  {
    "id" : "4b1dd580-ff7c-4328-8eac-03328f72e4d9",
    "prId" : 3941,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3941#pullrequestreview-92341615",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59ca08d7-e5dc-44ba-99e3-a49c9597a5c6",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "how come we don't need to do something similar to `ensureUpToDate` in `Namer#typeDefSig` ?",
        "createdAt" : "2018-01-29T18:51:38Z",
        "updatedAt" : "2018-02-02T21:27:51Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "981fbf08-7d93-4b35-b8dd-0a0899faa6af",
        "parentId" : "59ca08d7-e5dc-44ba-99e3-a49c9597a5c6",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Frankly: I don't know. The other question is why we need to use `abstracted` in Namer but the same example passes OK in `TreeUnpickler`. I tried to remove `abstracted` in Namer, bu then i3816.scala would fail to compile. So the two cases are not the same. But I did not have the time to dig deeper.\r\n",
        "createdAt" : "2018-01-29T20:16:13Z",
        "updatedAt" : "2018-02-02T21:27:51Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "311a6540161c72b80e8872d6ed8cabaa04d48276",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +757,761 @@              case _ => TypeAlias(rhs.tpe)\n            }\n            sym.resetFlag(Provisional)\n            TypeDef(rhs)\n          }"
  },
  {
    "id" : "c76ef094-0a0e-4970-9b1a-fa6e0af552a7",
    "prId" : 3678,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3678#pullrequestreview-84495562",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6336b8b-8673-4fd1-ad7c-a6f1f31e658a",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Should the use of JavaSeqLiteral in this case be removed too?",
        "createdAt" : "2017-12-19T15:55:06Z",
        "updatedAt" : "2017-12-19T17:00:47Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4ef99fa02d9cc4ab400b8b0ed5f972eb7104c7f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +948,952 @@            case TYPEAPPLY =>\n              tpd.TypeApply(readTerm(), until(end)(readTpt()))\n            case TYPED =>\n              val expr = readTerm()\n              val tpt = readTpt()"
  },
  {
    "id" : "98332ca0-c362-43de-9724-68320a26825b",
    "prId" : 3202,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3202#pullrequestreview-66069299",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be1c1614-faa5-49d6-b612-f4013338847d",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Why use `isLocal` instead of `isInaccessibleChildOf` here?",
        "createdAt" : "2017-09-28T23:32:19Z",
        "updatedAt" : "2017-09-29T06:43:24Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "d289b8ba-6351-4095-85cd-a3410763cd3a",
        "parentId" : "be1c1614-faa5-49d6-b612-f4013338847d",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Because we don't have a parent yet against which to test with `inAccessibleChildOf`",
        "createdAt" : "2017-09-29T06:42:51Z",
        "updatedAt" : "2017-09-29T06:43:24Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "acdf2e8f3cd97a02e8b30941dadfea9cb1f59f14",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +703,707 @@        sym.info = ta.avoidPrivateLeaks(sym, tree.pos)\n      }\n      if ((sym.isClass || sym.is(CaseVal)) && sym.isLocal)\n        // Child annotations for local classes and enum values are not pickled, so\n        // need to be re-established here."
  },
  {
    "id" : "539e078c-04d0-46fc-a38e-0160c713c08d",
    "prId" : 2187,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2187#pullrequestreview-31286618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f416ced-eb32-4962-a08f-2eab5eba2d36",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "You can simply use `nextUnsharedTag` for this. \r\n\r\n    collectWhile(nextUnsharedTag == CASEDEF && currentAddr != end) { readCase()(ctx.fresh.setNewScope) }",
        "createdAt" : "2017-04-06T11:26:54Z",
        "updatedAt" : "2017-04-06T13:53:32Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9191d636138a025c9967c11e37900dacf0bab1c2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1063,1067 @@\n    def readCases(end: Addr)(implicit ctx: Context): List[CaseDef] =\n      collectWhile((nextByte == CASEDEF || nextByte == SHARED) && currentAddr != end) {\n        if (nextByte == SHARED) {\n          readByte()"
  },
  {
    "id" : "760113d9-61fe-4c3f-98cd-e1e1a6ef2cfb",
    "prId" : 1636,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1636#pullrequestreview-9539611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7638b01-823a-4546-b385-4161cf63d35e",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "This one LGTM",
        "createdAt" : "2016-11-21T20:53:00Z",
        "updatedAt" : "2016-11-22T00:54:14Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9222af0bb61921f20417112c9d4a4ccce5b0d01a",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +882,886 @@          case path: TypeRef => TypeTree(path)\n          case path: TermRef => ref(path)\n          case path: ThisType => untpd.This(untpd.EmptyTypeIdent).withType(path)\n          case path: ConstantType => Literal(path.value)\n        }"
  },
  {
    "id" : "471e0142-e66f-49eb-880f-1c8b9598d49e",
    "prId" : 1636,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1636#pullrequestreview-9542706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdfb50de-b6c8-4176-b4a0-3508ec49df51",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "These changes look good, but I wonder whether we should generalize them: Never use & or simplify when dealing with type trees. This looks logically consistent. Have you tried this?",
        "createdAt" : "2016-11-21T20:54:45Z",
        "updatedAt" : "2016-11-22T00:54:14Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "9d3f865e-7b1f-4103-84cf-6392ace9d67e",
        "parentId" : "bdfb50de-b6c8-4176-b4a0-3508ec49df51",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Haven't tried it yet, mostly because I wasn't sure if I should do the same with `|`, etc and wanted to get this PR in first.",
        "createdAt" : "2016-11-21T21:09:46Z",
        "updatedAt" : "2016-11-22T00:54:14Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "9222af0bb61921f20417112c9d4a4ccce5b0d01a",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +1030,1034 @@              val tpt2 = readTpt()\n              // FIXME: We need to do this instead of \"AndType(tpt1, tpt2)\" to avoid self-type cyclic reference in tasty_tools\n              untpd.AndTypeTree(tpt1, tpt2).withType(AndType(tpt1.tpe, tpt2.tpe))\n            case ORtpt =>\n              OrTypeTree(readTpt(), readTpt())"
  }
]