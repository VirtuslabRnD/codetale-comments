[
  {
    "id" : "8d1b2ef6-8c4f-46e7-8c27-1fe0406466e7",
    "prId" : 8828,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8828#pullrequestreview-408233019",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c023388-5966-4318-9fd8-5485c742cc8d",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "@AleksanderBG Does this change remove the need for https://github.com/lampepfl/dotty/commit/f94606a8490f724882628565926b8605c8a28def ?",
        "createdAt" : "2020-05-07T17:33:35Z",
        "updatedAt" : "2020-05-07T17:33:36Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "966248f7-3ef1-4c25-a5a2-395b9adccc58",
        "parentId" : "4c023388-5966-4318-9fd8-5485c742cc8d",
        "authorId" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "body" : "I was planning on testing that. I'm not completely sure how to make myself certain that now there's no need for f94606a - AFAIU, the above change will make the bounds of an unconstrained variable be `>: Nothing <: AnyKind`, but I'm not sure if it's not possible to still get a `<: Any` constraint, because other `TypeBounds` default to `>: Nothing <: Any` anyway.",
        "createdAt" : "2020-05-08T13:17:40Z",
        "updatedAt" : "2020-05-08T13:17:40Z",
        "lastEditedBy" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "tags" : [
        ]
      },
      {
        "id" : "e2c93974-d8e3-416d-91ef-7b195f4ccc08",
        "parentId" : "4c023388-5966-4318-9fd8-5485c742cc8d",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Ah right, those need to be fixed too, I have a wip branch wÄ¥ere I attempted that but I don't know when I'll be able to get back to it: https://github.com/dotty-staging/dotty/commits/wildcard-bounds",
        "createdAt" : "2020-05-08T13:21:25Z",
        "updatedAt" : "2020-05-08T13:21:25Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "031c69a335ba5a6a12ad4360ea49eb98f21eabb6",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +264,268 @@      isUpper: Boolean)(implicit ctx: Context): Type =\n    stripParams(tp, paramBuf, isUpper)\n      .orElse(if (isUpper) defn.AnyKindType else defn.NothingType)\n\n  def add(poly: TypeLambda, tvars: List[TypeVar])(implicit ctx: Context): This = {"
  },
  {
    "id" : "3345783e-4489-4479-9ddb-923590e042c0",
    "prId" : 6084,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6084#pullrequestreview-219721510",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f43f639d-8504-4c20-8d91-66b09e9f2983",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I'm not completely sold on after-the-fact renaming being the best approach. What if instead `TypeLambda` had a `var inUse: Boolean` set to `true` when added to a constraint and set back to false when it's removed from the constraint ? Then we can make sure to use different TypeLambdas in different constraints live at the same time, it's a slight memory increase but should be much less expensive than doing deep replacements when merging constraints.",
        "createdAt" : "2019-03-27T16:53:33Z",
        "updatedAt" : "2019-03-28T07:43:09Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "5af823ac-d878-49a4-890e-6ca0054d573f",
        "parentId" : "f43f639d-8504-4c20-8d91-66b09e9f2983",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Yes, possibly. I need to think this over.\r\n",
        "createdAt" : "2019-03-27T18:16:38Z",
        "updatedAt" : "2019-03-28T07:43:09Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "19f0e1b5-98ed-4efb-b507-8725ed8cd826",
        "parentId" : "f43f639d-8504-4c20-8d91-66b09e9f2983",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "No, in fact that would not work. The problem is that we create constraints and then forget about them. So a lambda might never be removed from a constraint.\r\n",
        "createdAt" : "2019-03-27T20:56:24Z",
        "updatedAt" : "2019-03-28T07:43:09Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "52f2e63dd8ac10dbe36289bedb74d1530e725019",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +550,554 @@        this.contains(tl) && hasConflictingTypeVarsFor(tl))\n      conflicting match {\n        case Some(tl) => ensureNotConflicting(c.rename(tl))\n        case None => c\n      }"
  },
  {
    "id" : "a261ce86-2ff9-40ae-b4d6-4f49269709e3",
    "prId" : 5203,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5203#pullrequestreview-162002538",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bff0b7f4-5b03-418b-ab4c-49effddbe95e",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "Remove RHS type annotation?",
        "createdAt" : "2018-10-05T12:16:29Z",
        "updatedAt" : "2018-10-05T15:57:20Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c54153a8e2949c25fabda40c7953c04779b883c2",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +80,84 @@  }\n\n  val boundsLens: ConstraintLens[Type] = new ConstraintLens[Type] {\n    def entries(c: OrderingConstraint, poly: TypeLambda): Array[Type] =\n      c.boundsMap(poly)"
  },
  {
    "id" : "aadb5422-34c5-4a92-9a43-f8e9b187d829",
    "prId" : 5203,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5203#pullrequestreview-162002538",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58a309ad-cf2e-4853-9b6d-fdfa8c8d9382",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "Remove RHS type annotation?",
        "createdAt" : "2018-10-05T12:16:35Z",
        "updatedAt" : "2018-10-05T15:57:20Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c54153a8e2949c25fabda40c7953c04779b883c2",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +88,92 @@  }\n\n  val lowerLens: ConstraintLens[List[TypeParamRef]] = new ConstraintLens[List[TypeParamRef]] {\n    def entries(c: OrderingConstraint, poly: TypeLambda): Array[List[TypeParamRef]] =\n      c.lowerMap(poly)"
  },
  {
    "id" : "c7f969f4-8287-4c10-b22e-5f65fbeb97fc",
    "prId" : 5203,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5203#pullrequestreview-162017805",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb493e88-b416-474e-9918-ff1a05a5a80b",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "Remove RHS type annotation?",
        "createdAt" : "2018-10-05T12:16:43Z",
        "updatedAt" : "2018-10-05T15:57:20Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "279ccd65-3210-4ef6-a596-efe9fbd2c7d7",
        "parentId" : "fb493e88-b416-474e-9918-ff1a05a5a80b",
        "authorId" : "6d71bb21-e402-4464-b2b1-8bdd8e068461",
        "body" : "These ones on `ConstraintLens` are needed somehow...",
        "createdAt" : "2018-10-05T12:47:00Z",
        "updatedAt" : "2018-10-05T15:57:20Z",
        "lastEditedBy" : "6d71bb21-e402-4464-b2b1-8bdd8e068461",
        "tags" : [
        ]
      }
    ],
    "commit" : "c54153a8e2949c25fabda40c7953c04779b883c2",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +96,100 @@  }\n\n  val upperLens: ConstraintLens[List[TypeParamRef]] = new ConstraintLens[List[TypeParamRef]] {\n    def entries(c: OrderingConstraint, poly: TypeLambda): Array[List[TypeParamRef]] =\n      c.upperMap(poly)"
  },
  {
    "id" : "65cde122-c3c6-43aa-bbd6-20475203c728",
    "prId" : 3726,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3726#pullrequestreview-88670388",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f0d5ca3-07b7-4754-9400-77220fc78859",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Shouldn't this use `instanceOpt` instead of `inst`? Otherwise this will still return instantiated type variables whose `inst` field has not yet been set.",
        "createdAt" : "2018-01-04T01:31:58Z",
        "updatedAt" : "2018-01-04T01:31:58Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "7c53c2b2-6503-4b1d-badb-72757625c414",
        "parentId" : "7f0d5ca3-07b7-4754-9400-77220fc78859",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I wonder if it wouldn't be simpler and more efficient to clear the cache everytime we instantiate a typevar instead.",
        "createdAt" : "2018-01-04T01:39:00Z",
        "updatedAt" : "2018-01-04T01:39:00Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "9a5bdf30-229c-41d3-bf2d-c407744a0645",
        "parentId" : "7f0d5ca3-07b7-4754-9400-77220fc78859",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Anything in the constraint is already taken into account in `uninstVars`. After all, constraints are immutable. So we only need to make sure there are no instantiations not mirrored in the constraint. We can't clear the cache when we instantiate a typevar because there is no 1-1 mapping between constraints and typevars. So there could me multiple constraints that become invalid.",
        "createdAt" : "2018-01-14T00:19:02Z",
        "updatedAt" : "2018-01-14T00:19:02Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2744447fe29834fac69757fc23eecc9a908c1bd9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +549,553 @@  /** The uninstantiated typevars of this constraint */\n  def uninstVars: collection.Seq[TypeVar] = {\n    if (myUninstVars == null || myUninstVars.exists(_.inst.exists)) {\n      myUninstVars = new mutable.ArrayBuffer[TypeVar]\n      boundsMap.foreachBinding { (poly, entries) =>"
  },
  {
    "id" : "a7ebeea3-16a9-4b94-8a6f-935dc6b75ce8",
    "prId" : 3661,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3661#pullrequestreview-83214084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40507810-1cee-4e67-9114-9630ce95da72",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "`private[this]` ?",
        "createdAt" : "2017-12-13T15:41:29Z",
        "updatedAt" : "2017-12-13T15:46:14Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8b7566fafe087faee2cfcabd5fd6810262b1a3d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +573,577 @@// ---------- Invalidation -------------------------------------------\n\n  private var retracted = false\n\n  def isRetracted: Boolean = retracted"
  }
]