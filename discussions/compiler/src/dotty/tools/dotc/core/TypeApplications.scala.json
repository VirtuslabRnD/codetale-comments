[
  {
    "id" : "786e0bb9-d68d-4e81-91ce-a61366c32775",
    "prId" : 9979,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9979#pullrequestreview-508195820",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2df307c-e450-4165-916f-64a0458b9ab9",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "It is the manifestation of #9965 which I also encountered in #9954.\r\n\r\nIt happens when inlining\r\nhttps://github.com/lampepfl/dotty/blob/a128dab3a435a9eb3aa7a8cba359a9989a73d9c2/tests/pos/reference/delegates.scala#L114-L115\r\n",
        "createdAt" : "2020-10-12T08:16:46Z",
        "updatedAt" : "2020-10-14T10:11:41Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "a099c471-5d65-490b-b77d-8c6c170a5212",
        "parentId" : "d2df307c-e450-4165-916f-64a0458b9ab9",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "@odersky does this match what you saw while debugging or are there other problematic cases?",
        "createdAt" : "2020-10-12T09:09:45Z",
        "updatedAt" : "2020-10-14T10:11:41Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "81b6c453-739b-49f3-a3d0-70ec53482052",
        "parentId" : "d2df307c-e450-4165-916f-64a0458b9ab9",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "That's what I saw, yes.\r\n",
        "createdAt" : "2020-10-14T10:11:27Z",
        "updatedAt" : "2020-10-14T10:11:41Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "17509573f7485a2762259f06e6e69a98d33d3d65",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +48,52 @@        // Note: this pre-test helps efficiency. It is also necessary to workaround  #9965 since in some cases\n        // tparams is empty. This can happen when we change the owners of inlined local\n        // classes in mapSymbols. See pos/reference/delegates.scala for an example.\n        // In this case, we can still return true if we know that the hk lambda bounds\n        // are empty anyway."
  },
  {
    "id" : "059b3978-9c04-4ca6-8aa9-35f646027ebd",
    "prId" : 9601,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9601#pullrequestreview-471700210",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e8de178-6810-49dd-b163-cedbd9dfbc4c",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I don't understand how that condition matches the comment and what was there before. I'd like to see a more explanation what this is intended to express at this point.",
        "createdAt" : "2020-08-20T15:46:10Z",
        "updatedAt" : "2020-08-21T13:08:01Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "173899b64d2000eb8ad47dc316384241df4cf81a",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +436,440 @@  def translateJavaArrayElementType(using Context): Type =\n    // A type parameter upper-bounded solely by `FromJavaObject` has `ObjectClass` as its classSymbol\n    if self.typeSymbol.isAbstractOrParamType && (self.classSymbol eq defn.ObjectClass) then\n      AndType(self, defn.ObjectType)\n    else"
  },
  {
    "id" : "16df0d6c-eb5d-4d52-8ccb-82e743b34de6",
    "prId" : 4902,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4902#pullrequestreview-144089915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f53386d-fb76-476b-92b1-4f7d35f51c99",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Can we further refine `isTrivial` to cover the case when `prefix` is static?",
        "createdAt" : "2018-08-07T13:28:58Z",
        "updatedAt" : "2018-08-08T09:37:47Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "711e9cb2-7698-4d3e-86cf-a204fd17f920",
        "parentId" : "2f53386d-fb76-476b-92b1-4f7d35f51c99",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I am not sure we want to do this. The purpose of `isTrivial` is to fall back to a special case to avoid cyclic reference errors. It seems we don't need to include static `this` types to achieve this. On the other hand, the `isStatic` test could prompt cyclic references itself.\r\n",
        "createdAt" : "2018-08-07T16:55:27Z",
        "updatedAt" : "2018-08-08T09:37:47Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f639b6330abcdadd03ad2d0399da597bac229ca",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +173,177 @@      case NoPrefix => true\n      case _ => false\n    }\n    try self match {\n      case self: TypeRef =>"
  },
  {
    "id" : "afdbcf05-d270-4890-b7f9-a6caba60e15b",
    "prId" : 3733,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3733#pullrequestreview-88665139",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2baf8991-01fc-47be-8608-d7487ddbc3ec",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : ".How come we don't have the symbol for the refinement member here? That seems likely to be problematic in a lot of other cases, for example in the IDE how do we do \"go to definition\" if the tree has no symbol?",
        "createdAt" : "2018-01-04T01:15:59Z",
        "updatedAt" : "2018-01-04T01:15:59Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "28ffeb43-9f3b-47d2-b383-5c33ed177579",
        "parentId" : "2baf8991-01fc-47be-8608-d7487ddbc3ec",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Refinements of types that do not exist in the baseclass don't have a symbol. Which symbol could they have?",
        "createdAt" : "2018-01-13T19:16:23Z",
        "updatedAt" : "2018-01-13T19:16:24Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3b49320e7343def793ffe50cb4384e1c34eef70",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +173,177 @@        val tsym = self.symbol\n        if (tsym.isClass) tsym.typeParams\n        else if (!tsym.exists) self.info.typeParams\n        else if (!tsym.isCompleting) tsym.info.typeParams\n        else Nil"
  },
  {
    "id" : "854f49b3-4fa6-4477-ae66-f68e890c4ab3",
    "prId" : 3061,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3061#pullrequestreview-61809474",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d61f2e2-41cf-4c39-8a85-056839512b6f",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Note: the comment for the enclosing class keeps referring to \"refinements\" for type lambdas which we should probably just call arguments now.",
        "createdAt" : "2017-09-11T13:59:42Z",
        "updatedAt" : "2017-09-20T15:20:34Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e65bd581c7506e1a382d906a9c8a961fafabfff",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +115,119 @@    var allReplaced = true\n    def hasWildcardArg(p: TypeParamRef) =\n      p.binder == tycon && args(p.paramNum).isInstanceOf[TypeBounds]\n    def canReduceWildcard(p: TypeParamRef) =\n      !ctx.mode.is(Mode.AllowLambdaWildcardApply) || available.contains(p.paramNum)"
  }
]