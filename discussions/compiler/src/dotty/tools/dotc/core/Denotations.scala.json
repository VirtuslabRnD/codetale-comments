[
  {
    "id" : "bab296b5-6dce-4a92-a75e-434923c0b821",
    "prId" : 10982,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10982#pullrequestreview-562676425",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce3911e1-a510-46f4-9972-1c405aa15627",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "```suggestion\r\n      // It could happen that we see the symbol with prefix `this` as a member of a different class\r\n```",
        "createdAt" : "2021-01-05T11:19:27Z",
        "updatedAt" : "2021-01-05T17:06:44Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "060fefb9-17b0-40e4-8937-46135f27a717",
        "parentId" : "ce3911e1-a510-46f4-9972-1c405aa15627",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "We have similar logic in `Types.scala`:\r\n\r\n```Scala\r\n    private def infoDependsOnPrefix(symd: SymDenotation, prefix: Type)(using Context): Boolean =\r\n      symd.maybeOwner.membersNeedAsSeenFrom(prefix) && !symd.is(NonMember)\r\n```\r\n\r\nI'm wondering if it is worth creating a method to abstract the logic?",
        "createdAt" : "2021-01-05T17:06:32Z",
        "updatedAt" : "2021-01-05T17:06:44Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "779fb496-0002-4460-930c-d33b8600fbe1",
        "parentId" : "ce3911e1-a510-46f4-9972-1c405aa15627",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Interesting observation! This looked promising at first, but in the end I found no way to improve over the status quo. The problem is that the code in Types only works for SymDenotations, whereas the more complicated logic in Denotations works also for SingleDenotations and it's difficult to break it out.\r\n",
        "createdAt" : "2021-01-06T12:35:34Z",
        "updatedAt" : "2021-01-06T12:35:34Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebcb04df3cb7e2b39844541b295df5538f90a670",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1064,1068 @@          if (symbol.is(Opaque) || this.prefix != NoPrefix) pre else this.prefix)\n\n      // Tt could happen that we see the symbol with prefix `this` as a member a different class\n      // through a self type and that it then has a different info. In this case we have to go\n      // through the asSeenFrom to switch the type back. Test case is pos/i9352.scala."
  },
  {
    "id" : "a27089e7-f3b7-4b7c-9d99-04ffb60da27e",
    "prId" : 9063,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9063#pullrequestreview-421805251",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2815bd2f-4886-42d5-b22e-269da86376f5",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "The documentation of `&` above still says \"If SingleDenotations with different signatures are joined, return NoDenotation.\" which is no longer true I guess.",
        "createdAt" : "2020-06-01T12:31:42Z",
        "updatedAt" : "2020-06-04T08:44:35Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "19e658ca38f03961d5f8e8f4dff1832681548354",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +410,414 @@\n      /** Try to merge single-denotations. */\n      def mergeSingleDenot(denot1: SingleDenotation, denot2: SingleDenotation): Denotation =\n        val info1 = denot1.info\n        val info2 = denot2.info"
  },
  {
    "id" : "afcd0a1c-5aa5-4494-a94b-2d7ff1fe8423",
    "prId" : 9063,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9063#pullrequestreview-423699361",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "974badf9-ef8e-4b76-a805-68fb45980c41",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "```suggestion\r\n     *  1. If exactly one of the denotations has an inaccessible symbol, pick the other one.\r\n```",
        "createdAt" : "2020-06-03T16:00:39Z",
        "updatedAt" : "2020-06-04T08:44:35Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "19e658ca38f03961d5f8e8f4dff1832681548354",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +369,373 @@     *  are joined by following this sequence of steps:\n     *\n     *  1. If exactly one the denotations has an inaccessible symbol, pick the other one.\n     *  2. Otherwise, if one of the infos overrides the other one, and the associated\n     *     symbol does not score strictly lower than the other one,"
  },
  {
    "id" : "7bbfb9d8-81f1-439d-ae4d-b910622fcd3a",
    "prId" : 7430,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7430#pullrequestreview-304286741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da841b4f-97a4-4d04-9550-082aeb4e4077",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Can this ever actually succeed ? I assume `tp2` is always go to be a method type or a poly type so we'll end up with a mergeConflict. If so we might as well directly return with a mergeConflict here:\r\n```suggestion\r\n          case _ => mergeConflict(sym1, sym2, tp1, tp2)\r\n```\r\n```",
        "createdAt" : "2019-10-20T18:36:54Z",
        "updatedAt" : "2019-10-20T18:37:35Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "04474c34-8bd8-4f1f-a4c9-4c81ca3fab9f",
        "parentId" : "da841b4f-97a4-4d04-9550-082aeb4e4077",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Ah, I guess this would actually suceed if we're merging a `val` and a nilary `def`, nevermind then.",
        "createdAt" : "2019-10-20T23:25:02Z",
        "updatedAt" : "2019-10-20T23:25:03Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e76778ecab20f246bb381f423cf91f064f9905e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +654,658 @@        tp2 match {\n          case ExprType(rtp2) => ExprType(rtp1 & rtp2)\n          case _ => infoMeet(rtp1, tp2, sym1, sym2, safeIntersection)\n        }\n      case _ =>"
  },
  {
    "id" : "bc7565e7-6c4e-4507-9fb8-431b750e3648",
    "prId" : 3748,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3748#pullrequestreview-86662398",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0051524-085f-42a3-adf7-8ef6e1b0e63c",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "This check should also be done at https://github.com/lampepfl/dotty/blob/67e34d7674f03b48c863322bba8ac02893d0b554/compiler/src/dotty/tools/dotc/core/unpickleScala2/Scala2Unpickler.scala#L412 instead of ctx.debug",
        "createdAt" : "2018-01-04T15:16:23Z",
        "updatedAt" : "2018-01-31T17:46:15Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "df28080d5ceec2d8bd716351b7f2859a2f3eeed1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +278,282 @@        case m @ MissingRef(ownerd, name) =>\n          if (generateStubs) {\n            if (ctx.settings.YdebugMissingRefs.value) m.ex.printStackTrace()\n            ctx.newStubSymbol(ownerd.symbol, name, source)\n          }"
  },
  {
    "id" : "1dec40bc-93ca-4977-b9d6-3ec212b2a6fe",
    "prId" : 3045,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3045#pullrequestreview-60441084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c8b91c6-e150-40db-b784-38c77f7c8229",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "@smarter could you review the `isPackageFromCoreLibMissing` condition in this file. Thanks.",
        "createdAt" : "2017-09-04T15:34:34Z",
        "updatedAt" : "2017-09-04T17:54:11Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "16f35186-f165-485b-a2b0-2d258c0a97dc",
        "parentId" : "2c8b91c6-e150-40db-b784-38c77f7c8229",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Looks fine to me.",
        "createdAt" : "2017-09-04T15:41:19Z",
        "updatedAt" : "2017-09-04T17:54:11Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "025885905d178607f8629a2d0deedd0df8b5fcf9",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1209,1213 @@            if (alt.exists) alt.denot\n            else if (isPackageFromCoreLibMissing) throw new MissingCoreLibraryException(selector.toString)\n            else MissingRef(owner, selector)\n          }\n        }"
  }
]