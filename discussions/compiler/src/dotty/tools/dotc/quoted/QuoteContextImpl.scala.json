[
  {
    "id" : "febb72e3-4064-4fbe-81a7-951d5e45e2e6",
    "prId" : 10281,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10281#pullrequestreview-528261234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90264b26-0dda-4c33-97d7-82bcdf00b684",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "```suggestion\r\n            new ExprImpl(self, QuoteContextImpl.this.hashCode)\r\n```",
        "createdAt" : "2020-11-11T15:14:15Z",
        "updatedAt" : "2020-11-11T15:18:28Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3affa74a7ebdbe4ac5a948287bbc1a15d3f4e5c",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +73,77 @@        def asExpr: scala.quoted.Expr[Any] =\n          if self.isExpr then\n            new dotty.tools.dotc.quoted.ExprImpl(self, QuoteContextImpl.this.hashCode)\n          else self match\n            case TermTypeTest(self) => throw new Exception(\"Expected an expression. This is a partially applied Term. Try eta-expanding the term first.\")"
  },
  {
    "id" : "8388f9b5-42df-4312-b0d3-498d8273ab4e",
    "prId" : 10281,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10281#pullrequestreview-528261234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be02e4e8-fb1f-459a-a005-47759bcd8a11",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "```suggestion\r\n          if self.isExpr then new ExprImpl(self, QuoteContextImpl.this.hashCode)\r\n```",
        "createdAt" : "2020-11-11T15:14:41Z",
        "updatedAt" : "2020-11-11T15:18:28Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3affa74a7ebdbe4ac5a948287bbc1a15d3f4e5c",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +317,321 @@      extension (self: Term):\n        def seal: scala.quoted.Expr[Any] =\n          if self.isExpr then new dotty.tools.dotc.quoted.ExprImpl(self, QuoteContextImpl.this.hashCode)\n          else throw new Exception(\"Cannot seal a partially applied Term. Try eta-expanding the term first.\")\n"
  },
  {
    "id" : "52423258-2641-414c-93e0-7aa643d631aa",
    "prId" : 10281,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10281#pullrequestreview-528261234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13b6d776-806c-4b78-9477-9d8d26e679fc",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "```suggestion\r\n          if self.isExpr then Some(new ExprImpl(self, QuoteContextImpl.this.hashCode))\r\n```",
        "createdAt" : "2020-11-11T15:14:51Z",
        "updatedAt" : "2020-11-11T15:18:28Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3affa74a7ebdbe4ac5a948287bbc1a15d3f4e5c",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +321,325 @@\n        def sealOpt: Option[scala.quoted.Expr[Any]] =\n          if self.isExpr then Some(new dotty.tools.dotc.quoted.ExprImpl(self, QuoteContextImpl.this.hashCode))\n          else None\n"
  },
  {
    "id" : "62be0792-56a9-4619-b37b-6a0a65c3227e",
    "prId" : 10281,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10281#pullrequestreview-528261234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0fc6421-8044-4f3f-b637-795900c0e111",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "```suggestion\r\n        tp.asInstanceOf[TypeImpl].typeTree\r\n```",
        "createdAt" : "2020-11-11T15:15:01Z",
        "updatedAt" : "2020-11-11T15:18:28Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3affa74a7ebdbe4ac5a948287bbc1a15d3f4e5c",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +1004,1008 @@    object TypeTree extends TypeTreeModule:\n      def of[T <: AnyKind](using tp: scala.quoted.Type[T]): TypeTree =\n        tp.asInstanceOf[dotty.tools.dotc.quoted.TypeImpl].typeTree\n    end TypeTree\n"
  },
  {
    "id" : "5b945bf2-0be0-4f9c-98c2-c07a8a08918a",
    "prId" : 10281,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10281#pullrequestreview-528261234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a974ee47-d433-47cd-a386-8634407ca685",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "```suggestion\r\n        tp.asInstanceOf[TypeImpl].typeTree.tpe\r\n```",
        "createdAt" : "2020-11-11T15:15:11Z",
        "updatedAt" : "2020-11-11T15:18:28Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3affa74a7ebdbe4ac5a948287bbc1a15d3f4e5c",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +1573,1577 @@    object TypeRepr extends TypeReprModule:\n      def of[T <: AnyKind](using tp: scala.quoted.Type[T]): TypeRepr =\n        tp.asInstanceOf[dotty.tools.dotc.quoted.TypeImpl].typeTree.tpe\n      def typeConstructorOf(clazz: Class[?]): TypeRepr =\n        if (clazz.isPrimitive)"
  },
  {
    "id" : "74a4a0fb-753f-4910-8f4f-ae33efae8dd4",
    "prId" : 10281,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10281#pullrequestreview-528261234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "894f940a-f3f5-4da8-b7e5-b5f059326b4c",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "```suggestion\r\n          new TypeImpl(Inferred(self), QuoteContextImpl.this.hashCode)\r\n```",
        "createdAt" : "2020-11-11T15:15:22Z",
        "updatedAt" : "2020-11-11T15:18:28Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3affa74a7ebdbe4ac5a948287bbc1a15d3f4e5c",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +1610,1614 @@\n        def asType: scala.quoted.Type[?] =\n          new dotty.tools.dotc.quoted.TypeImpl(Inferred(self), QuoteContextImpl.this.hashCode)\n\n        def =:=(that: TypeRepr): Boolean = self =:= that"
  },
  {
    "id" : "ebfd6264-e8a0-4d04-b59e-203be77b30c1",
    "prId" : 10281,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10281#pullrequestreview-528261234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de3db3bd-e14c-4213-b3df-8ba44885c8cd",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "```suggestion\r\n    new ExprImpl(tree, hash).asInstanceOf[scala.quoted.Expr[T]]\r\n```",
        "createdAt" : "2020-11-11T15:15:29Z",
        "updatedAt" : "2020-11-11T15:18:28Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3affa74a7ebdbe4ac5a948287bbc1a15d3f4e5c",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +2625,2629 @@  def unpickleExpr[T](pickled: String | List[String], typeHole: (Int, Seq[Any]) => scala.quoted.Type[?], termHole: (Int, Seq[Any], scala.quoted.QuoteContext) => scala.quoted.Expr[?]): scala.quoted.Expr[T] =\n    val tree = PickledQuotes.unpickleTerm(pickled, typeHole, termHole)(using reflect.rootContext)\n    new dotty.tools.dotc.quoted.ExprImpl(tree, hash).asInstanceOf[scala.quoted.Expr[T]]\n\n  def unpickleType[T <: AnyKind](pickled: String | List[String], typeHole: (Int, Seq[Any]) => scala.quoted.Type[?], termHole: (Int, Seq[Any], scala.quoted.QuoteContext) => scala.quoted.Expr[?]): scala.quoted.Type[T] ="
  },
  {
    "id" : "9e19e702-dcb7-414f-b4e8-5840a6dbd37b",
    "prId" : 10281,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10281#pullrequestreview-528261234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1e52258-b8a4-4999-b5ce-530ded0d8cf1",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "```suggestion\r\n    new TypeImpl(tree, hash).asInstanceOf[scala.quoted.Type[T]]\r\n```",
        "createdAt" : "2020-11-11T15:15:40Z",
        "updatedAt" : "2020-11-11T15:18:28Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3affa74a7ebdbe4ac5a948287bbc1a15d3f4e5c",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +2629,2633 @@  def unpickleType[T <: AnyKind](pickled: String | List[String], typeHole: (Int, Seq[Any]) => scala.quoted.Type[?], termHole: (Int, Seq[Any], scala.quoted.QuoteContext) => scala.quoted.Expr[?]): scala.quoted.Type[T] =\n    val tree = PickledQuotes.unpickleTypeTree(pickled, typeHole, termHole)(using reflect.rootContext)\n    new dotty.tools.dotc.quoted.TypeImpl(tree, hash).asInstanceOf[scala.quoted.Type[T]]\n\n  object ExprMatch extends ExprMatchModule:"
  },
  {
    "id" : "ec267c40-b918-4440-8e75-fec657164fc3",
    "prId" : 10238,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10238#pullrequestreview-526259032",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3b42133-aecf-417c-bd15-f01414640f46",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "It seems to me that the original type signature is better. By returning the type `Expr[T]`, there are no guarantees.",
        "createdAt" : "2020-11-09T13:14:45Z",
        "updatedAt" : "2020-11-09T13:14:59Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "2dbb19a4-9db6-4b13-81ed-f414bbefcf91",
        "parentId" : "f3b42133-aecf-417c-bd15-f01414640f46",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Indeed, there are no guarantees. Calls to this method should only be inserted be the compiler.\r\nThe previous version added the cast after each call to this method, effectively having the same guaranties.\r\n\r\nI will add some extra documentation to make it clear that no one should be calling this method directly. Currently, it is hidden from the user as it is defined in `QuoteContextInteranal`.",
        "createdAt" : "2020-11-09T13:31:01Z",
        "updatedAt" : "2020-11-09T13:31:02Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "0127e2f3-a235-4e65-83a7-bef9c18dcef4",
        "parentId" : "f3b42133-aecf-417c-bd15-f01414640f46",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "In general, all methods in `QuoteContextInteranal` should only be called by code generated by the compiler or something in the library.",
        "createdAt" : "2020-11-09T13:32:16Z",
        "updatedAt" : "2020-11-09T13:32:16Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "d35a5d77a2ffc3ef1eea11cd92aaacfd671e6c29",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2631,2635 @@  def unpickleExpr[T](pickledQuote: PickledQuote): scala.quoted.Expr[T] =\n    val tree = PickledQuotes.unpickleTerm(pickledQuote)(using reflect.rootContext)\n    new scala.internal.quoted.Expr(tree, hash).asInstanceOf[scala.quoted.Expr[T]]\n\n  def unpickleType[T <: AnyKind](pickledQuote: PickledQuote): scala.quoted.Type[T] ="
  },
  {
    "id" : "ef3a691b-b385-49f8-844e-44d35946d90a",
    "prId" : 10207,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10207#pullrequestreview-525667020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ccc2d65-5f8a-47de-8ce9-e16b4ce6a5a9",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Why is that cast needed?",
        "createdAt" : "2020-11-07T15:25:15Z",
        "updatedAt" : "2020-11-09T08:59:35Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "454ce5be-0705-412d-84c5-28ba7d37f66d",
        "parentId" : "8ccc2d65-5f8a-47de-8ce9-e16b4ce6a5a9",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "More precisely, why is it `Type[TypeTree]` and not `Type[T]`",
        "createdAt" : "2020-11-07T15:25:44Z",
        "updatedAt" : "2020-11-09T08:59:35Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "e839ac32-fd72-4cf6-886b-a07b67778694",
        "parentId" : "8ccc2d65-5f8a-47de-8ce9-e16b4ce6a5a9",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Because it is the `scala.internal.quoted.Type` and not `scala.quoted.Type`. That variant is parametrised with the tree type to make it easier to cast and extract internally.",
        "createdAt" : "2020-11-07T17:11:36Z",
        "updatedAt" : "2020-11-09T08:59:35Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d33dbf47028047098c6b044f8d14cf7699f49ce",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1004,1008 @@    object TypeTree extends TypeTreeModule:\n      def of[T <: AnyKind](using tp: scala.quoted.Type[T]): TypeTree =\n        tp.asInstanceOf[scala.internal.quoted.Type[TypeTree]].typeTree\n    end TypeTree\n"
  },
  {
    "id" : "8e1a6fe4-de33-49e0-b09b-d61d84602e04",
    "prId" : 10189,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10189#pullrequestreview-525168525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1854f173-0169-4bde-8644-ddcdb31bb1a2",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "There are three concepts here:\r\n\r\n- CompilerInterface\r\n- Reflection\r\n- QuoteContext\r\n\r\nThe responsibility for QuoteContext is relatively clear, it's the facade and it mainly holds API for `Type[T]` and `Expr[T]`.\r\n\r\nIt seems there is some overlapping of responsibilities between `Reflection` and `CompilerInterface`:\r\n\r\n- `CompilerInterface` is a contract with the compiler, not the API for meta-programmers\r\n- `Reflection` is both the contract with the compiler, and the API for meta-programmers\r\n\r\nTo continue the refactoring in #9818, it would be nice to make the responsibility of each interface clear and disjoint.",
        "createdAt" : "2020-11-06T12:39:35Z",
        "updatedAt" : "2020-11-06T12:41:11Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "589ee11b-3bd0-4611-b351-a0354775972f",
        "parentId" : "1854f173-0169-4bde-8644-ddcdb31bb1a2",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I would say that this PR also removed the overlapping between `Reflection` and `CompilerInterface` as now the `CompilerInterface` only cares about `Expr` and `Type`, but nothing within `Reflection`. \r\n\r\nI will still try to make the internal interaction with `CompilerInterface` simpler.",
        "createdAt" : "2020-11-06T13:14:00Z",
        "updatedAt" : "2020-11-06T13:14:00Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "3edae744-37b2-4592-bc6e-b83cbe7b899c",
        "parentId" : "1854f173-0169-4bde-8644-ddcdb31bb1a2",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "> I would say that this PR also removed the overlapping between `Reflection` and `CompilerInterface` as now the `CompilerInterface` only cares about `Expr` and `Type`, but nothing within `Reflection`.\r\n> \r\n\r\nSo rename `CompilerInterface` to `QuoteInterface` might make things more clear?\r\n",
        "createdAt" : "2020-11-06T13:17:55Z",
        "updatedAt" : "2020-11-06T13:17:56Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "176cdcbf-8c44-463b-b5ce-040a8f7e6843",
        "parentId" : "1854f173-0169-4bde-8644-ddcdb31bb1a2",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "That would make it clearer.",
        "createdAt" : "2020-11-06T13:55:44Z",
        "updatedAt" : "2020-11-06T13:55:44Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cc810e93e714db63031471f58b0de21ee4c3d75",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +48,52 @@class QuoteContextImpl private (ctx: Context) extends QuoteContext, scala.internal.quoted.CompilerInterface:\n\n  object reflect extends scala.tasty.Reflection:\n\n    def rootContext: Context = ctx"
  },
  {
    "id" : "6b7279af-a8ec-4ddc-ba8e-adac5abc1568",
    "prId" : 10162,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10162#pullrequestreview-524123788",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a94d9fab-ee01-43b1-a7d6-851acb937365",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Does the name change `showTree -> showDecompiledTree` suggest that the method only works for decompiled trees?",
        "createdAt" : "2020-11-05T10:21:11Z",
        "updatedAt" : "2020-11-05T10:27:36Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "9f5a0fec-d88c-4d9b-8481-f363d55d52e3",
        "parentId" : "a94d9fab-ee01-43b1-a7d6-851acb937365",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "This method is only used internally for decompilation. I renamed it to make it clear what it should do to avoid using it somewhere else afterward and changing something inside to adapt to the new use. It also differentiates it from the other general-purpose `showTree` methods.",
        "createdAt" : "2020-11-05T10:30:13Z",
        "updatedAt" : "2020-11-05T10:30:13Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "da8f5319ef16b0efada9e1af30b571ff6e666528",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +33,37 @@    else\n      qctx.reflect.TreeMethodsImpl.extension_show(tree)\n  }\n\n  private[dotty] def checkScopeId(id: ScopeId)(using Context): Unit ="
  },
  {
    "id" : "12a8731b-414f-4954-919d-ef2aa3d4b011",
    "prId" : 10054,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10054#pullrequestreview-513628503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d3032a4-dbb6-4942-b160-f1ebd29026cf",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "```suggestion\r\n      def overloaded(qualifier: Term, name: String, targs: List[Type], args: List[Term]): Apply =\r\n        withDefaultPos(tpd.applyOverloaded(qualifier, name.toTermName, args, targs, Types.WildcardType).asInstanceOf[Apply])\r\n        \r\n      def overloaded(qualifier: Term, name: String, targs: List[Type], args: List[Term], returnType: Type): Apply =\r\n```",
        "createdAt" : "2020-10-21T12:45:37Z",
        "updatedAt" : "2020-10-21T21:57:56Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbde5bd121902b0dd9782d7e95657b659704c360",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +416,420 @@        withDefaultPos(tpd.applyOverloaded(qualifier, name.toTermName, args, targs, Types.WildcardType).asInstanceOf[Apply])\n        \n      def overloaded(qualifier: Term, name: String, targs: List[Type], args: List[Term], returnType: Type): Apply =\n        withDefaultPos(tpd.applyOverloaded(qualifier, name.toTermName, args, targs, returnType).asInstanceOf[Apply])\n      def copy(original: Tree)(qualifier: Term, name: String): Select ="
  },
  {
    "id" : "6ed16cba-f488-4d75-a22e-7412c97232db",
    "prId" : 9818,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9818#pullrequestreview-495288380",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f56711d-548f-4672-8e45-a46e6b24417e",
        "parentId" : null,
        "authorId" : "6998ebc0-40b8-4e52-b4f8-721fd5d8c0a9",
        "body" : "This has nothing to do with this PR, but it is sad that you are forced to open a second extension block, here.",
        "createdAt" : "2020-09-24T07:32:50Z",
        "updatedAt" : "2020-09-24T12:23:58Z",
        "lastEditedBy" : "6998ebc0-40b8-4e52-b4f8-721fd5d8c0a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cd1cce6e8903363d2f4f04718014b5e5df76310",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +84,88 @@      end extension\n\n      extension [T](tree: Tree)\n        def asExprOf(using scala.quoted.Type[T])(using QuoteContext): scala.quoted.Expr[T] =\n          if tree.isExpr then"
  }
]