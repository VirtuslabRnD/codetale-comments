[
  {
    "id" : "ee8f3ff6-3c25-4943-bd6f-95dc2d59a6a8",
    "prId" : 7007,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7007#pullrequestreview-272954445",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81c9e6e3-75a7-4a2d-9252-6aa9dc7d9c43",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "The documentation on the method `run` already says nested `run` is not supported, while this fix seems to suggest that nesting is fine if different toolboxes are used.\r\n\r\nAs the usage of nesting violates the protocol, I think an improvement of the documentation might be enough. ",
        "createdAt" : "2019-08-08T20:15:41Z",
        "updatedAt" : "2019-08-08T20:27:39Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "374321e4-b962-46b6-988a-05e45c252fe8",
        "parentId" : "81c9e6e3-75a7-4a2d-9252-6aa9dc7d9c43",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "It is the other fix that catches issues of nesting with different toolboxes.",
        "createdAt" : "2019-08-09T05:54:18Z",
        "updatedAt" : "2019-08-09T05:54:18Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "b35936d80b8b9ea683d415ed47f8cacd88265a24",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +28,32 @@      } finally {\n        running = false\n      }\n    }\n  }"
  },
  {
    "id" : "43bea9c6-1113-49c3-a871-8a8dd6761514",
    "prId" : 7007,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7007#pullrequestreview-273104928",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ca1c777-b185-4ac7-8773-9f2734782333",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "The approach to check scope extrusion seems to be too ad-hoc, and it only addresses the tip of a hard iceberg problem. I'm not sure if it's a win given the complication of the code.\r\n\r\nCan we just make it clear that never use `run` in macros in the documentation for `run`?\r\n\r\n/cc: @anatoliykmetyuk ",
        "createdAt" : "2019-08-08T20:24:28Z",
        "updatedAt" : "2019-08-08T20:27:40Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "1ca256ae-3dc0-48e8-9914-f8fa63a28843",
        "parentId" : "8ca1c777-b185-4ac7-8773-9f2734782333",
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "Documentation is too weak for such things. If a user does a wrong thing, the compiler should tell them what exactly they did wrong.",
        "createdAt" : "2019-08-08T21:04:17Z",
        "updatedAt" : "2019-08-08T21:04:17Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "05e095a1-5449-40b7-91b1-94e888a2fb69",
        "parentId" : "8ca1c777-b185-4ac7-8773-9f2734782333",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "If it's something that can be effectively checked, then the compiler should perform the check. However, in programming there are so many properties and contracts that cannot be effectively checked by the compiler and have to be defined via documentation.",
        "createdAt" : "2019-08-08T21:43:36Z",
        "updatedAt" : "2019-08-08T21:43:36Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "9ece6f65-ae61-4a27-93b0-22728a2e0f8b",
        "parentId" : "8ca1c777-b185-4ac7-8773-9f2734782333",
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "Some prominent protocols not enforced by the compiler I worked with were the actor model, the http model, machine learning models, purely functional style and OOP patterns. Others were Scala 2 macros, SBT and Slick SQL library. The former group are the \"laws of physics\" you live by and the latter are the building blocks with which you try to build a building under the given laws of physics.\r\n\r\nWeird physics can be fun, but if each building block is different and blows up under its own conditions and in its own way, it gets painful. Often we don't choose the rules of the game, but I believe that our responsibility is to manufacture reliable tools with which the given game can be played most efficiently. As a minimum it implies tools with no surprises (such as an obscure exception if you do something that is not in the free-form docs).\r\n\r\n> Can we just make it clear that never use run in macros\r\n\r\nThat sounds like a simple enough protocol to be encoded. Otherwise it warrants a discussion on how to make `run` reliable (possibly trading power for reliability), not a guide on how to live with its surprises.",
        "createdAt" : "2019-08-08T23:06:04Z",
        "updatedAt" : "2019-08-08T23:06:04Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "92848dd4-6057-4f93-8a47-4bc03135904b",
        "parentId" : "8ca1c777-b185-4ac7-8773-9f2734782333",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "The way the check is implemented is quite ad-hoc but it will catch any attempt of using and Expr is a different instance of the compiler. Those crash the compiler in various and unexpected ways.",
        "createdAt" : "2019-08-09T05:59:37Z",
        "updatedAt" : "2019-08-09T05:59:37Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "84ff8abf-1e6f-451c-b9d5-fce836ac9b51",
        "parentId" : "8ca1c777-b185-4ac7-8773-9f2734782333",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "It is only intended for scope extrusions in a `run`. Other kinds of scope extrusion happen on the same compiler which will only have Ycheck failures. We still need to handle those failures with a better message, but this is an orthogonal concern.",
        "createdAt" : "2019-08-09T06:03:17Z",
        "updatedAt" : "2019-08-09T06:03:17Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "f35754b9-4896-4669-a30a-6a829d72d0f3",
        "parentId" : "8ca1c777-b185-4ac7-8773-9f2734782333",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "It seems that `run` is useless in macros --- I'm not sure how useful it's in staged programming. I remember there is also theoretical problems with `run`.\r\n\r\nI'm wondering if it is possible to just remove the method so that it will not be misused by macro authors.\r\n\r\n/cc : @biboudis ",
        "createdAt" : "2019-08-09T11:31:13Z",
        "updatedAt" : "2019-08-09T11:32:22Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "52be41d9-1177-4e6b-a323-83f22bee2201",
        "parentId" : "8ca1c777-b185-4ac7-8773-9f2734782333",
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "`run` is useful for running literals. I [use it](https://github.com/anatoliykmetyuk/utest/blob/a4ac313b76886e4e053e5637b14ca761b1bce532/utest/src-0/utest/TestBuilder.scala#L68) in uTest for that purpose. I believe at least for the literals it should remain there, it works fine for them.",
        "createdAt" : "2019-08-09T12:03:16Z",
        "updatedAt" : "2019-08-09T12:03:16Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "58f4d0f1-ba2e-412d-9df6-6c91232e6f87",
        "parentId" : "8ca1c777-b185-4ac7-8773-9f2734782333",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "NO, do not use run to evaluate literals. Use https://github.com/lampepfl/dotty/blob/master/library/src/scala/quoted/ValueOfExpr.scala or the Const extractor directly. \r\n\r\nThis miss use show that we really need to fail as soon as the user mixes the two concepts.",
        "createdAt" : "2019-08-09T12:15:50Z",
        "updatedAt" : "2019-08-09T12:15:50Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "60cf4b83-e9e0-402f-a87b-716c835a98f2",
        "parentId" : "8ca1c777-b185-4ac7-8773-9f2734782333",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Unfortunately it is not possible to remove the run when executing code in a macro. Though it might be possible to statically partially check for scope extrusion. ",
        "createdAt" : "2019-08-09T12:19:54Z",
        "updatedAt" : "2019-08-09T12:19:54Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "0287fd63-b7bd-4584-b65a-f404e4fcab61",
        "parentId" : "8ca1c777-b185-4ac7-8773-9f2734782333",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Those check would not be complete either and therefore we still need a runtime check",
        "createdAt" : "2019-08-09T12:20:44Z",
        "updatedAt" : "2019-08-09T12:20:44Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "b35936d80b8b9ea683d415ed47f8cacd88265a24",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +37,41 @@    if (id != scopeId)\n      throw new Toolbox.RunScopeException\n  }\n\n  // TODO Explore more fine grained scope ids."
  }
]