[
  {
    "id" : "0e560192-c050-4278-a7e2-8c43d53401f6",
    "prId" : 11920,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11920#pullrequestreview-622987494",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03ed4da4-5317-4051-aca6-b1f779a2369d",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Why would we need this?",
        "createdAt" : "2021-03-29T08:22:12Z",
        "updatedAt" : "2021-03-29T08:22:12Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "a3035073-9f83-4d6d-8c66-83920cc53f62",
        "parentId" : "03ed4da4-5317-4051-aca6-b1f779a2369d",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "So that we can run the tests from a release compiler\r\n",
        "createdAt" : "2021-03-29T08:27:01Z",
        "updatedAt" : "2021-03-29T08:27:02Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "fc6f8429-fbe0-4489-95b3-264ccc16aae4",
        "parentId" : "03ed4da4-5317-4051-aca6-b1f779a2369d",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Why would we want to run tests on experimental features on a release compiler? These cannot be used and there will be a nightly that will cover those tests on that day anyway.",
        "createdAt" : "2021-03-29T08:32:15Z",
        "updatedAt" : "2021-03-29T08:32:15Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "a496607d-f6f5-4429-8159-90bb61784531",
        "parentId" : "03ed4da4-5317-4051-aca6-b1f779a2369d",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "The tests are there so that we can make sure that the compiler *code base* can in fact handle the experimental features. There's only one codebase. Those tests can be run from either release or experimental versions. The fact that compilers flag experimental imports as errors unless their _version string_ is a  nightly or snapshot is orthogonal to this. \r\n",
        "createdAt" : "2021-03-29T08:37:37Z",
        "updatedAt" : "2021-03-29T08:39:42Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "a0d6ca16-99ef-45f9-beb2-8100f9141b40",
        "parentId" : "03ed4da4-5317-4051-aca6-b1f779a2369d",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Note that the previous workaround of `experimental` subdirectores has been reverted.\r\n",
        "createdAt" : "2021-03-29T08:39:02Z",
        "updatedAt" : "2021-03-29T08:39:03Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9b808b896f88db2f2cb0b600a66d09723a5a893",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +103,107 @@    def hasSpecialPermission =\n      new Exception().getStackTrace.exists(elem =>\n        assumeExperimentalIn.exists(elem.getClassName().startsWith(_)))\n    if !(Properties.experimental || hasSpecialPermission)\n       || ctx.settings.YnoExperimental.value"
  },
  {
    "id" : "638ad930-c734-4720-8ad2-ab66dd1b6ffb",
    "prId" : 11852,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11852#pullrequestreview-618535121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6760d23-11f8-4a24-bf63-cba0d0ac7de5",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Maybe we should refine the message by saying that Scala 3 `macros` are not experimental.",
        "createdAt" : "2021-03-23T12:37:45Z",
        "updatedAt" : "2021-03-25T13:51:14Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f622553de16f93fe2312492a9c7aa7cb1b5ce9f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +29,33 @@  val fewerBraces = experimental(\"fewerBraces\")\n\n  val experimentalWarningMessage = \"Experimental features may only be used with nightly or snapshot version of compiler.\"\n\n  /** Experimental features are only enabled for snapshot and nightly compiler versions"
  },
  {
    "id" : "6e48eaab-b3d3-4f2f-8371-1ffd30d58f89",
    "prId" : 11852,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11852#pullrequestreview-621477775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e539bc74-b6b4-4d76-aa87-dce3a6bb3308",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "@odersky FYI, putting `fewerBraces` under `experimental` means that it will only available for nightly build of compilers after this PR. Normal releases cannot use the feature.",
        "createdAt" : "2021-03-25T13:45:09Z",
        "updatedAt" : "2021-03-25T13:51:14Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "10b09e82-d5cf-4276-ac3e-806b60d971b2",
        "parentId" : "e539bc74-b6b4-4d76-aa87-dce3a6bb3308",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Yes, that's understood.\r\n",
        "createdAt" : "2021-03-25T18:56:15Z",
        "updatedAt" : "2021-03-25T18:56:16Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f622553de16f93fe2312492a9c7aa7cb1b5ce9f",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +28,32 @@  val symbolLiterals = deprecated(\"symbolLiterals\")\n  val fewerBraces = experimental(\"fewerBraces\")\n\n  val experimentalWarningMessage = \"Experimental features may only be used with nightly or snapshot version of compiler.\"\n"
  },
  {
    "id" : "38848b13-1e1c-49bb-8533-c5ff6d7868ec",
    "prId" : 11695,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11695#pullrequestreview-614547889",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ec7b666-5f1c-4f83-9ba5-e675ba4eeac4",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Erased is not only about definitions. It is also about the term values they provide. This is completely lost with this new name. The `erased class` concept is also about erasing term definitions and uses as arguments. Therefore, the scope of the feature has not really changed.",
        "createdAt" : "2021-03-17T15:32:37Z",
        "updatedAt" : "2021-03-17T17:59:11Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "2525d3af-aa80-4e5f-b94b-b57da606b346",
        "parentId" : "2ec7b666-5f1c-4f83-9ba5-e675ba4eeac4",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "But `erased` is a modifier on a definition, not a term. Anyway, people usually do not know what a term is. We'd have to say `erasedExpressions`, but I believe `Definitions` is preferable, since that's where the erased goes.\r\n",
        "createdAt" : "2021-03-17T16:38:16Z",
        "updatedAt" : "2021-03-17T17:59:11Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "35e1e10f-7d62-4d22-aae2-df2ac5268692",
        "parentId" : "2ec7b666-5f1c-4f83-9ba5-e675ba4eeac4",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "The fact that if you erase a definition you also erase its RHS, and if you erase a parameter, you also erase its argument follows naturally since it's the only thing that makes sense. But the trigger is the `erased` on a definition. Or parameter, but I think it's OK to include that in the meaning.\r\n\r\n ",
        "createdAt" : "2021-03-17T16:40:16Z",
        "updatedAt" : "2021-03-17T17:59:11Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0af3f598cc7026212393f7ca8271e0985adbf30a",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +25,29 @@\n  val dependent = experimental(\"dependent\")\n  val erasedDefinitions = experimental(\"erasedDefinitions\")\n  val symbolLiterals: TermName = deprecated(\"symbolLiterals\")\n"
  }
]