[
  {
    "id" : "a63dcd0c-d534-4bb0-9193-b120a6d7bd1e",
    "prId" : 9725,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9725#pullrequestreview-487318597",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c03a38c-9248-42a3-a8b4-04bc8e753b7a",
        "parentId" : null,
        "authorId" : "f186a0ec-8fc4-4e94-87e9-c629d1b38b60",
        "body" : "Why is this not simply `false`? This seems to add private methods with magic names relevant for Java serialization. Scala.js doesn't support this anyways, no?",
        "createdAt" : "2020-09-13T09:36:30Z",
        "updatedAt" : "2020-09-14T20:05:33Z",
        "lastEditedBy" : "f186a0ec-8fc4-4e94-87e9-c629d1b38b60",
        "tags" : [
        ]
      },
      {
        "id" : "a4c4d83f-0c61-465f-b5d2-782d1357653b",
        "parentId" : "2c03a38c-9248-42a3-a8b4-04bc8e753b7a",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Because the Scala classes and objects might be transitively used by macros and other compile-time code. I would rather have them be somewhat equivalent to the ones we would get in a JVM project. The JVM back-end will slap an `extends java.io.Serializable` to them, so we should be consistent and also emit the proper serialization methods, I believe.",
        "createdAt" : "2020-09-13T15:58:39Z",
        "updatedAt" : "2020-09-14T20:05:33Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bcba442107e53e95c821c5372e21bea374296a6",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +36,40 @@   */\n  override def shouldReceiveJavaSerializationMethods(sym: ClassSymbol)(using Context): Boolean =\n    !sym.isSubClass(jsDefinitions.JSAnyClass)\n}"
  }
]