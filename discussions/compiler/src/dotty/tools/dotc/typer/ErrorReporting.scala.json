[
  {
    "id" : "f7486c72-a3e9-4388-bbf4-b78a2213d784",
    "prId" : 8672,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8672#pullrequestreview-388029935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0fa2410-e645-41b3-9fd6-4587660c6e64",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "If the Unit in the error message is the confusing part, maybe we could explain that:\r\n```suggestion\r\n          \"\\nNote: an `if` without a corresponding `else` will always have type `Unit`\"\r\n```\r\nNot sure if that's better.",
        "createdAt" : "2020-04-06T00:19:17Z",
        "updatedAt" : "2020-04-06T10:04:16Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "e305f525-dfbe-49f1-bcd3-fdf933277b57",
        "parentId" : "c0fa2410-e645-41b3-9fd6-4587660c6e64",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I think the single line is enough of a hint. An intelligent reader will connect the dots.",
        "createdAt" : "2020-04-06T08:23:36Z",
        "updatedAt" : "2020-04-06T10:04:16Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6d4a36840f898ea7cb55e2757149657ef11c879",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +101,105 @@      def missingElse = tree match\n        case If(_, _, elsep @ Literal(Constant(()))) if elsep.span.isSynthetic =>\n          \"\\nMaybe you are missing an else part for the conditional?\"\n        case _ => \"\"\n      errorTree(tree, TypeMismatch(treeTp, pt, implicitFailure.whyNoConversion, missingElse))"
  },
  {
    "id" : "7af6dc5c-cbd6-490f-bbd7-18a0f517c475",
    "prId" : 4007,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4007#pullrequestreview-97618323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f30d444-6dd6-4d3d-bd87-d3aa6cc90253",
        "parentId" : null,
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "Looks like this function might be useful for more annotations (@smarter mentioned a couple more ones on Gitter), as suggested by the new name you picked, but not by the comment. What do you think?",
        "createdAt" : "2018-02-19T16:41:25Z",
        "updatedAt" : "2018-03-21T14:16:42Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      },
      {
        "id" : "f758fa78-e2fd-4e3b-b71d-2503464bd16a",
        "parentId" : "7f30d444-6dd6-4d3d-bd87-d3aa6cc90253",
        "authorId" : "1a7d8f9e-77a7-44d8-8e84-72ed77060419",
        "body" : "I sort of agree. I'm open to suggestions ðŸ˜…",
        "createdAt" : "2018-02-19T16:54:03Z",
        "updatedAt" : "2018-03-21T14:16:42Z",
        "lastEditedBy" : "1a7d8f9e-77a7-44d8-8e84-72ed77060419",
        "tags" : [
        ]
      },
      {
        "id" : "aabc9616-0d81-486f-b621-cdde80c85773",
        "parentId" : "7f30d444-6dd6-4d3d-bd87-d3aa6cc90253",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I think it's not worth overgeneralizing, we can change this when we need to.",
        "createdAt" : "2018-02-19T16:55:27Z",
        "updatedAt" : "2018-03-21T14:16:42Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "1df6db36-0f52-462d-b641-82619efb100d",
        "parentId" : "7f30d444-6dd6-4d3d-bd87-d3aa6cc90253",
        "authorId" : "1a7d8f9e-77a7-44d8-8e84-72ed77060419",
        "body" : "I may have misinterpreted your question a little bit. It is useful for all annotations whose messages can reference type parameters, which could potentially be more than the 2 listed here, but not all annotations carrying a custom message. I'm open to suggestions for a better name.",
        "createdAt" : "2018-02-19T17:08:28Z",
        "updatedAt" : "2018-03-21T14:16:42Z",
        "lastEditedBy" : "1a7d8f9e-77a7-44d8-8e84-72ed77060419",
        "tags" : [
        ]
      },
      {
        "id" : "6a76b9a7-fdcb-441c-a35f-3c6f2035a885",
        "parentId" : "7f30d444-6dd6-4d3d-bd87-d3aa6cc90253",
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "Hm, I suspect the name is fine and would write \"Format `raw` user-defined error message\" in the doc. WDYT? Anyway, this isn't critical, just nice to have. (Warning, I've been told I'm a perfectionist).",
        "createdAt" : "2018-02-19T17:40:34Z",
        "updatedAt" : "2018-03-21T14:16:42Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a55c33d6a074ac613417a8117eaeaecfc05b08d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +161,165 @@    }\n\n    /** Format `raw` implicitNotFound or implicitAmbiguous argument, replacing\n     *  all occurrences of `${X}` where `X` is in `paramNames` with the\n     *  corresponding shown type in `args`."
  },
  {
    "id" : "7ac38af0-d4af-4967-ad05-afb0aff773b6",
    "prId" : 3061,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3061#pullrequestreview-60931530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6b9ef17-a028-4174-a0d6-7d7279c3a120",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Improvement: Avoid a type error message where \"found\" looks like it is a subtype of \"expected\".",
        "createdAt" : "2017-09-06T14:32:30Z",
        "updatedAt" : "2017-09-20T15:20:34Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e65bd581c7506e1a382d906a9c8a961fafabfff",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +158,162 @@      reported.setVariance(-1)\n      val expected1 = reported(expected)\n      val (found2, expected2) =\n        if (found1 frozen_<:< expected1) (found, expected) else (found1, expected1)\n      TypeMismatch(found2, expected2, whyNoMatchStr(found, expected), postScript)"
  },
  {
    "id" : "5a26e942-8d80-4401-b6f0-8bbf245915c7",
    "prId" : 2501,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2501#pullrequestreview-39470268",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad221c71-cf76-498f-8515-795e28a3db26",
        "parentId" : null,
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "universes => hierarchies?",
        "createdAt" : "2017-05-22T13:02:59Z",
        "updatedAt" : "2017-05-22T13:03:15Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      },
      {
        "id" : "f3dab29b-6952-4483-88e8-fed026491d31",
        "parentId" : "ad221c71-cf76-498f-8515-795e28a3db26",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We started using universes for these difference in lattices. \r\n\r\nhttps://github.com/lampepfl/dotty/blob/master/compiler/src/dotty/tools/dotc/typer/TypeAssigner.scala#L538-L548",
        "createdAt" : "2017-05-22T13:07:05Z",
        "updatedAt" : "2017-05-22T13:07:05Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "9ef048fd-a4f7-4a18-a82f-c6ab45539df7",
        "parentId" : "ad221c71-cf76-498f-8515-795e28a3db26",
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "Alright, then LGTM :)",
        "createdAt" : "2017-05-22T13:07:29Z",
        "updatedAt" : "2017-05-22T13:07:30Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      }
    ],
    "commit" : "8238c8e88ae3a44ee3ce290a501214f309e0edb0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +122,126 @@        \"\\n (Note that Scala's and Java's representation of this type differs)\"\n      else if (found.topType != expected.topType)\n        \"\\n (Note that the types are in different universes, see Phantom types)\"\n      else if (ctx.settings.explainTypes.value)\n        \"\\n\" + ctx.typerState.show + \"\\n\" + TypeComparer.explained((found <:< expected)(_))"
  },
  {
    "id" : "f2fdddd2-bee2-4515-894e-bbbfddeb37c2",
    "prId" : 1984,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1984#pullrequestreview-22996943",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c579b3e-999d-4341-a236-149769f0e28b",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "This might not be enough for the user to understand the issue. In the example we would get \r\n```\r\noverriding method toArray in trait Collection of type [T](x$0: Array[T])Array[T];\r\n       method toArray of type [T](a: Array[T])Array[T] has incompatible type\r\n       (Note that Scala's and Java's representation of this type differs)\r\n```\r\n\r\nWould it be possible to hint that to make the representation match one would need to write  \r\n`def toArray[T](a: Array[T with Object]): Array[T with Object]`? ",
        "createdAt" : "2017-02-20T08:50:34Z",
        "updatedAt" : "2017-02-20T08:50:34Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "05d44569-e227-4d38-a3f8-e3b53c34b3bf",
        "parentId" : "9c579b3e-999d-4341-a236-149769f0e28b",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I thought about it, but it is really tricky and would require quite a bit of code. In short interoperating with Java using arrays requires a lot of context knowledge. Hard to condense that in an error message.",
        "createdAt" : "2017-02-21T16:08:38Z",
        "updatedAt" : "2017-02-21T16:08:38Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "779eaf6b9898e4ec8e2e3cdfbf0d36aeede3926e",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +123,127 @@      val expected1 = dropJavaMethod(expected)\n      if ((found1 eq found) != (expected eq expected1) && (found1 <:< expected1))\n        \"\\n (Note that Scala's and Java's representation of this type differs)\"\n      else if (ctx.settings.explaintypes.value)\n        \"\\n\" + ctx.typerState.show + \"\\n\" + TypeComparer.explained((found <:< expected)(_))"
  },
  {
    "id" : "921996d4-800e-403a-9f44-0735e681530f",
    "prId" : 1785,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1785#pullrequestreview-12443617",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90885736-9b07-4d76-9b7e-1ffeba7ba726",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "@felixmulder Line 2 and 3 of this message might be moved to an explanation. But we can also leave it like this, I think.",
        "createdAt" : "2016-12-12T12:13:54Z",
        "updatedAt" : "2016-12-15T14:42:24Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc869e74cb18ffdb4d42b59ad654f55403b9b6bd",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +49,53 @@\n      if (cycleSym.is(Implicit, butNot = Method) && cycleSym.owner.isTerm)\n        em\"\"\"cyclic reference involving implicit $cycleSym\n            |This happens when the right hand-side of $cycleSym's definition involves an implicit search.\n            |To avoid the error, give $cycleSym an explicit type.\"\"\""
  }
]