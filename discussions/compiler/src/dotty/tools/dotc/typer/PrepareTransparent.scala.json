[
  {
    "id" : "89dd6be7-2053-41f0-ac69-b9261a8af2e2",
    "prId" : 4616,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4616#pullrequestreview-139256074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d1cf55a-6124-46ac-ad23-1a6802f1c0b2",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I don't think that's good enough, if I have an identifier `foo` it might get typed with multiple qualifiers `a.b.foo` each of those will have the same zero-extent position `tree.pos.startPos`.",
        "createdAt" : "2018-07-20T23:42:22Z",
        "updatedAt" : "2018-07-26T14:54:44Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "5e65bca5-7d86-4a90-bfec-b2f75126b1f1",
        "parentId" : "8d1cf55a-6124-46ac-ad23-1a6802f1c0b2",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "If it is a non-trivial qualifier the tree gets replaced by a Select node, no?",
        "createdAt" : "2018-07-21T11:36:10Z",
        "updatedAt" : "2018-07-26T14:54:44Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "88e7d180574eda8a71037d1735ac6a3ff76a1c08",
    "line" : 379,
    "diffHunk" : "@@ -1,1 +377,381 @@        def adjustQualifier(tree: untpd.Tree): untpd.Tree = tree match {\n          case tree @ Ident(name1) =>\n            referenced.typeAtPos.get(tree.pos.startPos) match {\n              case Some(tp: ThisType) =>\n                val qual = untpd.TypedSplice(This(tp.cls).withPos(tree.pos.startPos))"
  },
  {
    "id" : "eff1c073-1014-4bc3-a9a4-e287574b2004",
    "prId" : 4616,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4616#pullrequestreview-139253739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bd49bd4-efb4-4fdc-9130-95439068f9ac",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "It'd be nice to define what we mean by \"toplevel\" here.",
        "createdAt" : "2018-07-20T23:47:41Z",
        "updatedAt" : "2018-07-26T14:54:44Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "fe135254-27f4-43cf-a94c-05179f6e7093",
        "parentId" : "8bd49bd4-efb4-4fdc-9130-95439068f9ac",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Toplevel is defined in `typelevel.md`, which will become part of the language spec. I believe we can therefore use it in the code without further explanation. ",
        "createdAt" : "2018-07-21T09:19:05Z",
        "updatedAt" : "2018-07-26T14:54:44Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "88e7d180574eda8a71037d1735ac6a3ff76a1c08",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +40,44 @@  private val ContextualImplicit = new Property.StickyKey[Unit]\n\n  /** An attachment labeling a toplevel match node of a transparent function */\n  val TopLevelMatch = new Property.StickyKey[Unit]\n"
  }
]