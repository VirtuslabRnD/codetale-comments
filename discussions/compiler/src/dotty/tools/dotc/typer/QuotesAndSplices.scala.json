[
  {
    "id" : "e172d822-ab47-45ee-9cc2-7868e9568923",
    "prId" : 10125,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10125#pullrequestreview-525980127",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9828beac-9489-499d-935f-28edd61b1302",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "A documentation comment for this method would be nice.",
        "createdAt" : "2020-11-08T19:19:07Z",
        "updatedAt" : "2020-11-09T13:11:22Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "bf0a5eed-4c04-4153-86f4-1c00f025f14c",
        "parentId" : "9828beac-9489-499d-935f-28edd61b1302",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I will add it",
        "createdAt" : "2020-11-09T07:22:46Z",
        "updatedAt" : "2020-11-09T13:11:22Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "2899e96988d203c0ecf3ca4fe591dd74069a9d73",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +175,179 @@   *  The resulting pattern is the split in `splitQuotePattern`.\n   */\n  def typedQuotedTypeVar(tree: untpd.Ident, pt: Type)(using Context): Tree =\n    def spliceOwner(ctx: Context): Symbol =\n      if (ctx.mode.is(Mode.QuotedPattern)) spliceOwner(ctx.outer) else ctx.owner"
  },
  {
    "id" : "d68a2986-041b-44f3-a7ef-e92dbcaaa6f9",
    "prId" : 8660,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8660#pullrequestreview-388014708",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "322135d6-3401-401d-aa6a-c219c1222fe3",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Why remove `level == 0`?",
        "createdAt" : "2020-04-05T09:03:02Z",
        "updatedAt" : "2020-04-06T05:20:43Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "8b83c38c-9c81-480b-b6ba-d1904dcd6919",
        "parentId" : "322135d6-3401-401d-aa6a-c219c1222fe3",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Because if we are in a pattern and we go in the other branch we might generate some non-pattern trees (after some error has been emitted) which leads to crashes later in typer.",
        "createdAt" : "2020-04-05T11:24:11Z",
        "updatedAt" : "2020-04-06T05:20:43Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "bf32a828-6d6b-4de1-bd92-87ee03fd0bb9",
        "parentId" : "322135d6-3401-401d-aa6a-c219c1222fe3",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "`tests/neg/i8052.scala` had this issue. With this change, the error message is also more informative.",
        "createdAt" : "2020-04-05T11:25:44Z",
        "updatedAt" : "2020-04-06T05:20:43Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "aabfaba4-d676-49e4-8b38-fea12e407117",
        "parentId" : "322135d6-3401-401d-aa6a-c219c1222fe3",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "If `level == 0` is a correct check, it seems better to keep it, and fix crash & error message elsewhere. The reason is that we don't know whether the removal introduces crashes for more ill-formed programs or not. ",
        "createdAt" : "2020-04-06T06:51:50Z",
        "updatedAt" : "2020-04-06T06:51:50Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "8466bea1-9276-4cc7-8c60-efdfd1708da7",
        "parentId" : "322135d6-3401-401d-aa6a-c219c1222fe3",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "The point is that is was not a correct check. The level checks happen later in the Staging phase. ",
        "createdAt" : "2020-04-06T08:01:46Z",
        "updatedAt" : "2020-04-07T15:35:05Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "926905d12431be17e8356fcaedc911903653d223",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +54,58 @@\n    val tree1 =\n      if ctx.mode.is(Mode.Pattern) then\n        typedQuotePattern(tree, pt, qctx)\n      else if (tree.quoted.isType)"
  },
  {
    "id" : "ffb4c562-8806-48bb-83ae-e646d540c88d",
    "prId" : 8660,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8660#pullrequestreview-387808171",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "057d9217-cfcf-428d-b8d2-40024f1ce808",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Same question as above: the check becomes invalid or redundant?",
        "createdAt" : "2020-04-05T09:05:24Z",
        "updatedAt" : "2020-04-06T05:20:43Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "dca15199-87ff-4f91-8515-97ce60e1b1ab",
        "parentId" : "057d9217-cfcf-428d-b8d2-40024f1ce808",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Same reason",
        "createdAt" : "2020-04-05T11:24:22Z",
        "updatedAt" : "2020-04-06T05:20:43Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "926905d12431be17e8356fcaedc911903653d223",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +73,77 @@      case _ =>\n    }\n    if (ctx.mode.is(Mode.QuotedPattern))\n      if (isFullyDefined(pt, ForceDegree.all)) {\n        def spliceOwner(ctx: Context): Symbol ="
  },
  {
    "id" : "7bacc313-4246-4687-a028-116e98c2a14f",
    "prId" : 8660,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8660#pullrequestreview-387796514",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a9a855d-a594-4d1e-bea9-13f1ab69d85d",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Nice simplification 👍 ",
        "createdAt" : "2020-04-05T09:05:34Z",
        "updatedAt" : "2020-04-06T05:20:43Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "926905d12431be17e8356fcaedc911903653d223",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +103,107 @@        outerQctx match\n          case Some(qctxRef) => untpd.Apply(untpd.Apply(untpd.ref(defn.InternalQuoted_exprNestedSplice.termRef), qctxRef), tree.expr)\n          case _ => untpd.Apply(untpd.ref(defn.InternalQuoted_exprSplice.termRef), tree.expr)\n\n      typedApply(internalSplice, pt)(using ctx1).withSpan(tree.span)"
  },
  {
    "id" : "2f0d632e-a550-470c-b045-3c64b97da0fc",
    "prId" : 8495,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8495#pullrequestreview-372595782",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b207818-7b1b-4f5e-8538-5e2d0bc7554c",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "It would be nice to use quoted pattern matching here 😄 ",
        "createdAt" : "2020-03-11T09:33:41Z",
        "updatedAt" : "2020-03-11T09:34:00Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc0b3876b6c3d16dfdf58ed22d1b28f886555ed6",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +216,220 @@              .appliedTo(Typed(pat, exprTpt))\n          transform(newSplice)\n        case Apply(fn, pat :: Nil) if fn.symbol == defn.InternalQuoted_exprSplice =>\n          try ref(defn.InternalQuoted_patternHole.termRef).appliedToType(tree.tpe).withSpan(tree.span)\n          finally {"
  },
  {
    "id" : "1e9f4518-00bf-4807-b48d-c5778ac2f52f",
    "prId" : 6881,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6881#pullrequestreview-267471815",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9763ead4-0e16-4955-ad74-85e0a3d46d9d",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Why `defn.AnyType` instead of `shape.tpe`?",
        "createdAt" : "2019-07-26T08:17:49Z",
        "updatedAt" : "2019-07-30T05:57:03Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "30e3c954-a0de-494d-bad7-f24d68be7e81",
        "parentId" : "9763ead4-0e16-4955-ad74-85e0a3d46d9d",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "`shape.tpe` was not avoiding some types, but as the parameter is of type `Expr[_]` it could be solved in a simpler and more efficient way. Nothing else depends on this type.",
        "createdAt" : "2019-07-27T15:08:01Z",
        "updatedAt" : "2019-07-30T05:57:03Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "80e42bb5eaa98a1081900d030216619c2018efa0",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +350,354 @@      fun = ref(defn.InternalQuotedMatcher_unapply.termRef).appliedToTypeTrees(typeBindingsTuple :: TypeTree(patType) :: Nil),\n      implicits =\n          ref(defn.InternalQuoted_exprQuote.termRef).appliedToType(defn.AnyType).appliedTo(shape).select(nme.apply).appliedTo(qctx) ::\n          Literal(Constant(typeBindings.nonEmpty)) ::\n          qctx :: Nil,"
  }
]