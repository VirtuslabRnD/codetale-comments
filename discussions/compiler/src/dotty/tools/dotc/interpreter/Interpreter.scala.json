[
  {
    "id" : "4a1c508b-d3a5-49c7-bb9c-f38d6b65fd8e",
    "prId" : 4025,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4025#pullrequestreview-98234439",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c903b7c-b731-40ac-9e15-508c9fa6406e",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "If the value class is a nested inner class, I guess this check will fail.",
        "createdAt" : "2018-02-21T14:18:55Z",
        "updatedAt" : "2018-02-21T15:20:20Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "95f2fc33-29db-4fb2-9da8-22213ddff716",
        "parentId" : "6c903b7c-b731-40ac-9e15-508c9fa6406e",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I will add a test case and check it",
        "createdAt" : "2018-02-21T14:56:38Z",
        "updatedAt" : "2018-02-21T15:20:20Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "959d937c-51bf-4b7e-9737-ccf45d37a2cf",
        "parentId" : "6c903b7c-b731-40ac-9e15-508c9fa6406e",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "There is an issue with inner classes but it is not in this code. I will fix it another PR.",
        "createdAt" : "2018-02-21T15:20:47Z",
        "updatedAt" : "2018-02-21T15:20:47Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a8333338145cfb511d6c514c80f0b4ba5e2ac46",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +122,126 @@        val value = env(qualifier.symbol)\n        val clazz = value.getClass\n        if (clazz.getCanonicalName != tree.symbol.owner.showFullName) value // Already unboxed\n        else {\n          val method = getMethod(clazz, name, Nil)"
  },
  {
    "id" : "cfb6196c-7c4b-4402-9870-b84fa78d6217",
    "prId" : 3852,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3852#pullrequestreview-89524833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e303d239-9d03-451a-8784-6019a9a6c2e4",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Do we need a check here? Maybe not.",
        "createdAt" : "2018-01-17T13:06:24Z",
        "updatedAt" : "2018-01-17T13:07:55Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "cf1ef35a-246a-4017-bb87-bbf0dbe9a705",
        "parentId" : "e303d239-9d03-451a-8784-6019a9a6c2e4",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "What kind of check? This is a fully typed tree, we evaluate it's erased version.",
        "createdAt" : "2018-01-17T17:26:02Z",
        "updatedAt" : "2018-01-17T17:26:03Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "2e742d74-0ced-4f64-aa1e-b6016160a766",
        "parentId" : "e303d239-9d03-451a-8784-6019a9a6c2e4",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I was thinking to check the type, but it's not the semantics of the language. So ignore the comment.",
        "createdAt" : "2018-01-17T17:29:19Z",
        "updatedAt" : "2018-01-17T17:29:19Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef22a87ef0da6bdc36c036187162a8875800a507",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +113,117 @@\n      case Typed(expr, _) =>\n        interpretTreeImpl(expr, env)\n\n      case _ =>"
  },
  {
    "id" : "2aa9c32a-e792-4858-b026-e6e3896a7d35",
    "prId" : 3662,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3662#pullrequestreview-85701900",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcb227d5-4b6e-4845-8cef-05cec296dc52",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "This looks like an extremely roundabout and inefficient way to get what you want!",
        "createdAt" : "2017-12-25T17:36:19Z",
        "updatedAt" : "2018-01-08T13:06:20Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "bb25cb8f-fd1a-44e5-bcd6-37dbf58335fe",
        "parentId" : "fcb227d5-4b6e-4845-8cef-05cec296dc52",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "The names of a signature are type names, you can compare them with an `eq`. ",
        "createdAt" : "2017-12-25T17:38:16Z",
        "updatedAt" : "2018-01-08T13:06:20Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "b9568623-99fc-45d3-8463-f6303712536a",
        "parentId" : "fcb227d5-4b6e-4845-8cef-05cec296dc52",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Is there an efficient way to get from Scala primitives to java primitive classes?",
        "createdAt" : "2017-12-27T11:53:13Z",
        "updatedAt" : "2018-01-08T13:06:20Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "b210b08f-e649-48fc-b34f-370b2b4ae7df",
        "parentId" : "fcb227d5-4b6e-4845-8cef-05cec296dc52",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "`valueTypeNameToJavaType` in Definitions.scala. It's currently commented out, but I see no reason why we could not uncomment it.",
        "createdAt" : "2017-12-27T16:42:56Z",
        "updatedAt" : "2018-01-08T13:06:20Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f86bcc55411329662f8930e8c74a145b51050099",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +172,176 @@\n  /** List of classes of the parameters of the signature of `sym` */\n  private def paramsSig(sym: Symbol): List[Class[_]] = {\n    sym.signature.paramsSig.map { param =>\n      defn.valueTypeNameToJavaType(param) match {"
  }
]