[
  {
    "id" : "7ecbc7b3-73ee-4589-b2bc-4cbec4e11e16",
    "prId" : 5738,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5738#pullrequestreview-211757223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "371562a2-ac43-41a9-8b7a-c6bdc0202c66",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "Use a field `TraceSyntax(isForced: Boolean)`? I would expect it is cheaper",
        "createdAt" : "2019-03-06T13:03:50Z",
        "updatedAt" : "2019-03-12T10:20:03Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "66f12caa-3c2c-4346-865f-ece94ef60171",
        "parentId" : "371562a2-ac43-41a9-8b7a-c6bdc0202c66",
        "authorId" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "body" : "Could you be more clear on what it is you call a field? The goal here is to override `isForced` with a `final val`, which should be guaranteed to be inlined whenever referenced, which would then mean that we get rid of useless branches in the inlined logging methods. This is somewhat moot, since `forceInline` does not seem to inline nested methods properly ( see https://github.com/lampepfl/dotty/pull/5738#issuecomment-469240942 ), but I don't see how making `isForced` a constructor argument makes it any cheaper.",
        "createdAt" : "2019-03-06T13:10:43Z",
        "updatedAt" : "2019-03-12T10:20:03Z",
        "lastEditedBy" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "tags" : [
        ]
      },
      {
        "id" : "bcd9318a-526b-4dfa-ad59-1b0e3c1f5f8a",
        "parentId" : "371562a2-ac43-41a9-8b7a-c6bdc0202c66",
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "Here the `final val` implements an abstract one. It will be compiled to a virtual method call, I don't think the compiler can inline in this case. If `isForced` is a constructor argument, it will be compiled to a field. A field access is much cheaper than a virtual method call.",
        "createdAt" : "2019-03-06T19:07:02Z",
        "updatedAt" : "2019-03-12T10:20:03Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "3da8ac0b-2520-4f02-870c-602d1e13c63b",
        "parentId" : "371562a2-ac43-41a9-8b7a-c6bdc0202c66",
        "authorId" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "body" : "I see the reasoning, but all the methods that access `isForced` are `@forceInline`, so after the body is inlined the compiler should see that the member being accessed is a `final val` and therefore is inlineable, no? Anyway, this PR has no impact on performance _and_ after we bootstrap we will probably rewrite all the methods in this class to `inline`, which will guarantee that they are inlined the way we want.\r\n\r\nSide note: I am bookmarking this discussion to show the next person that tries to convince me it's a good idea to rely on the optimizer for inlining.",
        "createdAt" : "2019-03-07T12:36:58Z",
        "updatedAt" : "2019-03-12T10:20:03Z",
        "lastEditedBy" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fb3521efa9e261199e0cec76886bf744e85693a",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +24,28 @@\nabstract class TraceSyntax {\n  val isForced: Boolean\n\n  @forceInline"
  }
]