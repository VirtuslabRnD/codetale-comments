[
  {
    "id" : "8b5ff0ce-1513-45f1-b7af-b83aa6f46df7",
    "prId" : 13066,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/13066#pullrequestreview-707108614",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44bfce86-de57-4b3c-9b42-50b0bf4cd45d",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "The issue is that `allOverriddenSymbols` delegates to `Denotation#matchingDenotation` which is missing the logic present in `Denotation#matchesLoosely` to handle matching denotations across languages (java/scala2/scala3), I think this needs to be fixed but this is a good stop-gap meanwhile.",
        "createdAt" : "2021-07-15T09:04:29Z",
        "updatedAt" : "2021-07-15T09:04:35Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "abf4b45f4735664249fc85e95d38915515e0ac5e",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +84,88 @@   *\n   *  but that does not work, since `allOverriddenSymbols` gets confused because the\n   *  signatures of a Java varargs method and a Scala varargs override are not the same.\n   */\n  private def overridesJava(sym: Symbol)(using Context) ="
  },
  {
    "id" : "d7887cfe-d391-44dd-bbcb-28eb6f91f5a4",
    "prId" : 9927,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9927#pullrequestreview-500377314",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66f7d9cd-7444-4ad7-9e21-e7a360bc19ec",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Can you add a description for this parameter to the documentation comment above? (looks like hasAnnotation is also missing doc)",
        "createdAt" : "2020-10-01T13:50:54Z",
        "updatedAt" : "2020-10-01T13:59:19Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "57221c6a-9c33-4de0-8fe7-19352c5f4b26",
        "parentId" : "66f7d9cd-7444-4ad7-9e21-e7a360bc19ec",
        "authorId" : "1614befc-b7c0-4881-9ad3-a889222eff91",
        "body" : "done!",
        "createdAt" : "2020-10-01T13:59:48Z",
        "updatedAt" : "2020-10-01T13:59:48Z",
        "lastEditedBy" : "1614befc-b7c0-4881-9ad3-a889222eff91",
        "tags" : [
        ]
      }
    ],
    "commit" : "579c01b41841bd361dd8a32db923cc47b9bde4b8",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +270,274 @@   *  forwards it to the original method.\n   */\n  private def addVarArgsForwarder(original: Symbol, isBridge: Boolean, hasAnnotation: Boolean, parentHasAnnotation: Boolean)(using Context): Unit =\n    val owner = original.owner\n    if !owner.isClass then"
  },
  {
    "id" : "7de5f075-c3f7-4199-a397-be817641acf1",
    "prId" : 9474,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9474#pullrequestreview-462688739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "138bcad0-e3c1-45bf-b511-bb96f03e99c3",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Instead of `alternative.find`, using `altsWith` should be more efficient",
        "createdAt" : "2020-08-06T16:43:38Z",
        "updatedAt" : "2020-08-07T14:46:16Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "61f860a7f2d9af76eb4d04313b6acd3860b826bf",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +211,215 @@      // Get the symbol generated in transform\n      val forwarderType = atPhase(thisPhase)(toJavaVarArgs(sym.info))\n      val forwarderSym = currentClass.info.decl(sym.name).alternatives\n        .find(_.info.matches(forwarderType))\n        .get"
  },
  {
    "id" : "d1853f79-9037-4e5e-b5b6-cb3155bca882",
    "prId" : 9271,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9271#pullrequestreview-442392394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2358abdd-8e90-49e7-97a1-a59115ec1a78",
        "parentId" : null,
        "authorId" : "1614befc-b7c0-4881-9ad3-a889222eff91",
        "body" : "Private flag is no longer removed - was there a good reason to remove it unconditionally?",
        "createdAt" : "2020-07-03T09:07:23Z",
        "updatedAt" : "2020-07-11T22:17:21Z",
        "lastEditedBy" : "1614befc-b7c0-4881-9ad3-a889222eff91",
        "tags" : [
        ]
      },
      {
        "id" : "383ada49-03e8-4adb-8772-bb514ef06da1",
        "parentId" : "2358abdd-8e90-49e7-97a1-a59115ec1a78",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I don't think so since a private method can't override anything any way.",
        "createdAt" : "2020-07-03T12:51:57Z",
        "updatedAt" : "2020-07-11T22:17:21Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8100b272e2f6a7d449f2c221915de2ecad4b2d6",
    "line" : 176,
    "diffHunk" : "@@ -1,1 +171,175 @@   *  @return a thicket consisting of `ddef` and an additional method\n   *          that forwards java varargs to `ddef`. It retains all the\n   *          flags of `ddef` except `Private`.\n   *\n   *  A forwarder is necessary because the following hold:"
  },
  {
    "id" : "7f52fe98-5480-4ebd-bca3-92a760835b24",
    "prId" : 9271,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9271#pullrequestreview-446868203",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "552e445f-02de-4b6c-830e-72aafa570d81",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "This val can be moved closer to where it's used (or even inlined since it's only used once and its definition is pretty short)",
        "createdAt" : "2020-07-12T10:50:01Z",
        "updatedAt" : "2020-07-12T10:50:01Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "21a71f3f-77aa-4fce-a21a-2784ba5e8646",
        "parentId" : "552e445f-02de-4b6c-830e-72aafa570d81",
        "authorId" : "1614befc-b7c0-4881-9ad3-a889222eff91",
        "body" : "`hasAnnotation` is also used in the `else` to emit an error",
        "createdAt" : "2020-07-12T10:56:05Z",
        "updatedAt" : "2020-07-12T10:56:05Z",
        "lastEditedBy" : "1614befc-b7c0-4881-9ad3-a889222eff91",
        "tags" : [
        ]
      },
      {
        "id" : "dc929241-078c-488a-98c4-4654205b0701",
        "parentId" : "552e445f-02de-4b6c-830e-72aafa570d81",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Ah right, I missed that!",
        "createdAt" : "2020-07-12T11:06:37Z",
        "updatedAt" : "2020-07-12T11:06:37Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8100b272e2f6a7d449f2c221915de2ecad4b2d6",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +117,121 @@  override def transformDefDef(tree: DefDef)(using Context): Tree =\n    val sym = tree.symbol\n    val hasAnnotation = hasVarargsAnnotation(sym)\n\n    // atPhase(thisPhase) is used where necessary to see the repeated"
  },
  {
    "id" : "303c59d7-0d7f-4f05-af3b-631bc9f8cbf4",
    "prId" : 5632,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5632#pullrequestreview-185665428",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0565bb5-e658-433d-9e61-1a190ba945cc",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "Is this line still needed if we erase the `elemType`?",
        "createdAt" : "2018-12-17T14:32:59Z",
        "updatedAt" : "2018-12-17T14:33:03Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "e1b96a64-43fa-4b1d-8348-54604da7d765",
        "parentId" : "d0565bb5-e658-433d-9e61-1a190ba945cc",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I am not sure about NullClass, NothingClass. I think these survive erasure.",
        "createdAt" : "2018-12-17T16:04:28Z",
        "updatedAt" : "2018-12-17T16:04:28Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1679c3ea740b45a25fe120ef86a4ef0294a12a7",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +95,99 @@      val elemType = tree.tpe.elemType\n      var elemClass = erasure(elemType).classSymbol\n      if (defn.NotRuntimeClasses.contains(elemClass)) elemClass = defn.ObjectClass\n      ref(defn.DottyArraysModule)\n        .select(nme.seqToArray)"
  }
]