[
  {
    "id" : "c06faffd-0444-49dd-b15c-26178d5eedab",
    "prId" : 12235,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/12235#pullrequestreview-646632129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9dece890-6bbb-44e1-af56-e9c414396ee6",
        "parentId" : null,
        "authorId" : "2ae9996c-0115-4b2e-8446-bad506884e67",
        "body" : "We should probably handle `null` here too",
        "createdAt" : "2021-04-28T00:01:30Z",
        "updatedAt" : "2021-04-28T00:01:30Z",
        "lastEditedBy" : "2ae9996c-0115-4b2e-8446-bad506884e67",
        "tags" : [
        ]
      },
      {
        "id" : "8e76dbca-9f92-47d5-947d-814ae2873a23",
        "parentId" : "9dece890-6bbb-44e1-af56-e9c414396ee6",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We do not support `inline val n = null`. That should be added when we add support for it and can write a test case for that logic.",
        "createdAt" : "2021-04-28T06:19:08Z",
        "updatedAt" : "2021-04-28T06:19:09Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "3fd0f2a7-075b-4ff2-b578-a1b6b5c95537",
        "parentId" : "9dece890-6bbb-44e1-af56-e9c414396ee6",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "See #12198",
        "createdAt" : "2021-04-28T06:20:07Z",
        "updatedAt" : "2021-04-28T06:20:07Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "d101327b9937f319f704d607cd9578b133b82454",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +246,250 @@      case tree: Ident if tree.symbol.is(Inline, butNot = Method) =>\n        tree.tpe.widenTermRefExpr match\n          case ConstantType(c) => c.value.asInstanceOf[Object]\n          case _ => throw new StopInterpretation(em\"${tree.symbol} could not be inlined\", tree.srcPos)\n"
  },
  {
    "id" : "65c439c2-891e-4a83-82c6-0978df477d10",
    "prId" : 10281,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10281#pullrequestreview-528261234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24dc98c8-1909-4f87-9847-9e203add917d",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "```suggestion\r\n      new quoted.ExprImpl(Inlined(EmptyTree, Nil, QuoteUtils.changeOwnerOfTree(tree, ctx.owner)).withSpan(tree.span), QuoteContextImpl.scopeId)\r\n```",
        "createdAt" : "2020-11-11T15:13:17Z",
        "updatedAt" : "2020-11-11T15:18:28Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3affa74a7ebdbe4ac5a948287bbc1a15d3f4e5c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +324,328 @@\n    private def interpretQuote(tree: Tree)(implicit env: Env): Object =\n      new dotty.tools.dotc.quoted.ExprImpl(Inlined(EmptyTree, Nil, QuoteUtils.changeOwnerOfTree(tree, ctx.owner)).withSpan(tree.span), QuoteContextImpl.scopeId)\n\n    private def interpretTypeQuote(tree: Tree)(implicit env: Env): Object ="
  },
  {
    "id" : "8870dae5-b9f8-4c58-bd49-71ed27ffdd47",
    "prId" : 10281,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10281#pullrequestreview-528261234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "865513cb-48b4-4edb-8c15-7e71101705a5",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "```suggestion\r\n      new quoted.TypeImpl(QuoteUtils.changeOwnerOfTree(tree, ctx.owner), QuoteContextImpl.scopeId)\r\n```",
        "createdAt" : "2020-11-11T15:13:30Z",
        "updatedAt" : "2020-11-11T15:18:28Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3affa74a7ebdbe4ac5a948287bbc1a15d3f4e5c",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +327,331 @@\n    private def interpretTypeQuote(tree: Tree)(implicit env: Env): Object =\n      new dotty.tools.dotc.quoted.TypeImpl(QuoteUtils.changeOwnerOfTree(tree, ctx.owner), QuoteContextImpl.scopeId)\n\n    private def interpretLiteral(value: Any)(implicit env: Env): Object ="
  },
  {
    "id" : "a2588bf6-6463-45b9-a9d6-920ae6124e51",
    "prId" : 8000,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8000#pullrequestreview-347071902",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc094cd2-49fa-4b85-8675-d3eed1f74d0f",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "What if there are nested blocks?",
        "createdAt" : "2020-01-22T12:49:17Z",
        "updatedAt" : "2020-01-23T06:26:56Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "943df0f8-e73c-4158-9585-481169c6843c",
        "parentId" : "dc094cd2-49fa-4b85-8675-d3eed1f74d0f",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We will traverse the nested block but we do not need it definitions yet as they are not in scope.",
        "createdAt" : "2020-01-23T05:52:16Z",
        "updatedAt" : "2020-01-23T06:26:56Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "1336e25fc587599e634c620e69f3f425acff453a",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +88,92 @@            val last = locals\n            stats.foreach(markDef)\n            traverseOver(last)\n          case CaseDef(pat, guard, body) =>\n            val last = locals"
  },
  {
    "id" : "7ac6259d-487c-41c4-826f-d82c22d203a6",
    "prId" : 6831,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6831#pullrequestreview-260746226",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "331335c9-cbe7-4488-a8df-86ef8aabe029",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Add a doc saying it may return just a `ref`?",
        "createdAt" : "2019-07-11T14:55:57Z",
        "updatedAt" : "2019-07-11T16:04:24Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f48cd4dc2a11e641b09c44a9a764a0175d3a568",
    "line" : 374,
    "diffHunk" : "@@ -1,1 +411,415 @@     *  It retruns a TermRef containing field accessed or a method reference and the arguments passed to it.\n     */\n    def unapply(arg: Tree)(implicit ctx: Context): Option[(RefTree, List[List[Tree]])] =\n      Call0.unapply(arg).map((fn, args) => (fn, args.reverse))\n"
  },
  {
    "id" : "e3fb066e-12fc-4d64-8aa5-eaf1ff6d54a7",
    "prId" : 6831,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6831#pullrequestreview-260746226",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84077123-6dc9-42f1-83c7-4e3eb4eefe37",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Agreed the code here will diverge from `Call(..)` above, so there's no need to dedup now.",
        "createdAt" : "2019-07-11T15:00:03Z",
        "updatedAt" : "2019-07-11T16:04:24Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f48cd4dc2a11e641b09c44a9a764a0175d3a568",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +127,131 @@               fn.symbol.is(Module) || fn.symbol.isStatic ||\n               (fn.qualifier.symbol.is(Module) && fn.qualifier.symbol.isStatic) =>\n          args.flatten.foreach(checkIfValidArgument)\n\n        case _ =>"
  },
  {
    "id" : "894aa19d-4536-43c4-a109-89cd21188e2e",
    "prId" : 6809,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6809#pullrequestreview-258217241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e03ba841-ac48-43b7-b927-2a06d61b3423",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "What if the class is an inner class?",
        "createdAt" : "2019-07-04T19:48:48Z",
        "updatedAt" : "2019-07-05T04:53:19Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "e3939ff0-ffd2-4107-be03-effce0b15427",
        "parentId" : "e03ba841-ac48-43b7-b927-2a06d61b3423",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Inner classes are not supported and this method is never called for them.",
        "createdAt" : "2019-07-05T04:28:58Z",
        "updatedAt" : "2019-07-05T04:53:19Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "312822d83a562591b3a95d71877169aed5f7b272",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +142,146 @@\n    protected def interpretNew(fn: Symbol, args: => List[Result])(implicit env: Env): Object = {\n      val clazz = loadClass(fn.owner.fullName.toString)\n      val constr = clazz.getConstructor(paramsSig(fn): _*)\n      constr.newInstance(args: _*).asInstanceOf[Object]"
  },
  {
    "id" : "450a8331-7b82-45ea-b521-f08b00cf4620",
    "prId" : 5688,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5688#pullrequestreview-191236784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a920f7d7-bc88-4c1a-b924-c377f3be6cf3",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Do we need `instance` in the return? Seems it is not used.",
        "createdAt" : "2019-01-10T14:20:35Z",
        "updatedAt" : "2019-01-10T14:20:44Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "52a8203e-58d1-4194-a7bd-76d9fe2560bd",
        "parentId" : "a920f7d7-bc88-4c1a-b924-c377f3be6cf3",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "It is used in the last line of the method. https://github.com/lampepfl/dotty/pull/5688/files/b54e3c586d190fbb02df0e9f5b3b3c13a0c3c5cc#diff-43be0f2f8a9625bb70763569c65a6fdcR132",
        "createdAt" : "2019-01-10T14:40:44Z",
        "updatedAt" : "2019-01-10T14:40:44Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "b54e3c586d190fbb02df0e9f5b3b3c13a0c3c5cc",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +121,125 @@          (instance, instance.getClass)\n        }\n\n      def getDirectName(tp: Type, name: TermName): TermName = tp.widenDealias match {\n        case tp: AppliedType if defn.isImplicitFunctionType(tp) =>"
  },
  {
    "id" : "4622e78f-2760-41f6-94e2-8bdecccba110",
    "prId" : 5575,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5575#pullrequestreview-182809618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b973cff-4c13-4743-add1-ae970bc35d1f",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "How we can be sure that `module` is static?",
        "createdAt" : "2018-12-07T15:47:23Z",
        "updatedAt" : "2018-12-07T18:08:50Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "d09045a3-0d85-4a90-b6a5-e2e593de3f0e",
        "parentId" : "4b973cff-4c13-4743-add1-ae970bc35d1f",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I should add that condition",
        "createdAt" : "2018-12-07T17:42:25Z",
        "updatedAt" : "2018-12-07T18:08:50Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "8b06efa2-d4f6-4468-85b5-9ad552a904b1",
        "parentId" : "4b973cff-4c13-4743-add1-ae970bc35d1f",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Added",
        "createdAt" : "2018-12-07T18:08:58Z",
        "updatedAt" : "2018-12-07T18:08:58Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d178b9f3e4b308547348773dbe61cae8e2ee581",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +321,325 @@        } else if (fn.qualifier.symbol.is(Module) && fn.qualifier.symbol.isStatic) {\n          val module = fn.qualifier.symbol.moduleClass\n          interpretStaticMethodCall(module, fn.symbol, args.map(arg => interpretTree(arg)))\n        } else if (env.contains(fn.name)) {\n          env(fn.name)"
  },
  {
    "id" : "af2b276a-34bf-431d-8bdd-980d82b9e216",
    "prId" : 5575,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5575#pullrequestreview-182937962",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "679b40f0-b9e0-4f8a-a4bb-c55a47c4d7d0",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Accessing `fn.qulifier` is dangerous (e.g., with import `Ident.qualifier.symbol` will return `NoSymbol`), it's more reliable to check types of `fun`, only handle the `TermRef` case. Then it seems the last two `else if` can be refactored and merged.",
        "createdAt" : "2018-12-07T19:44:08Z",
        "updatedAt" : "2018-12-07T19:44:12Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "c59c720d-7e02-4453-9796-42a2bd65b29e",
        "parentId" : "679b40f0-b9e0-4f8a-a4bb-c55a47c4d7d0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Here we never traverse imports, the only refTree are the ones in expressions.",
        "createdAt" : "2018-12-07T20:36:58Z",
        "updatedAt" : "2018-12-07T20:36:58Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "54c310bd-7033-44de-b2eb-2d51bc0c85b1",
        "parentId" : "679b40f0-b9e0-4f8a-a4bb-c55a47c4d7d0",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Sorry, I was not clear, I mean the case like the following:\r\n\r\n```Scala\r\nimport o._\r\nf(1)\r\n\r\n// in constrast to\r\no.f(1)\r\n```\r\n\r\nThe code seems to only handle the 2nd case, not the 1st one.",
        "createdAt" : "2018-12-07T22:21:31Z",
        "updatedAt" : "2018-12-07T22:21:31Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "1c025ba6-2754-4b22-b1be-9038949b2bcd",
        "parentId" : "679b40f0-b9e0-4f8a-a4bb-c55a47c4d7d0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Oh, the second one will be generalized to the evaluation of any prefix in the future. ",
        "createdAt" : "2018-12-08T09:03:31Z",
        "updatedAt" : "2018-12-08T09:03:31Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d178b9f3e4b308547348773dbe61cae8e2ee581",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +321,325 @@        } else if (fn.qualifier.symbol.is(Module) && fn.qualifier.symbol.isStatic) {\n          val module = fn.qualifier.symbol.moduleClass\n          interpretStaticMethodCall(module, fn.symbol, args.map(arg => interpretTree(arg)))\n        } else if (env.contains(fn.name)) {\n          env(fn.name)"
  },
  {
    "id" : "1147cb21-93c2-450b-8a6d-7fe3132a6ff9",
    "prId" : 5299,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5299#pullrequestreview-166850278",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be202360-6763-4125-b744-6ce3016d1c97",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I was missing this guard.",
        "createdAt" : "2018-10-22T07:59:17Z",
        "updatedAt" : "2018-10-22T07:59:20Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "659e7ee608fe9f0bd2ae8ff201435ca2d950bc4a",
    "line" : 202,
    "diffHunk" : "@@ -1,1 +348,352 @@    object Call {\n      def unapply(arg: Tree): Option[(RefTree, List[Tree])] = arg match {\n        case Select(Call(fn, args), nme.apply) if defn.isImplicitFunctionType(fn.tpe.widenDealias.finalResultType) =>\n          Some((fn, args))\n        case fn: RefTree => Some((fn, Nil))"
  },
  {
    "id" : "906ebebb-88cb-4765-9199-b882ca644937",
    "prId" : 4822,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4822#pullrequestreview-141158759",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31b9baca-fe2e-496c-a662-0e4cb12e476d",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Why use a low-level method to compose the output? Is it to avoid a stackoverflow?",
        "createdAt" : "2018-07-27T15:12:32Z",
        "updatedAt" : "2018-07-27T15:26:25Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "7b599e10-5538-48fe-b5bd-3dc4428fa354",
        "parentId" : "31b9baca-fe2e-496c-a662-0e4cb12e476d",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "it was just to pass it simply to the  `ex. printStackTrace` method of `Exception`.",
        "createdAt" : "2018-07-27T15:22:35Z",
        "updatedAt" : "2018-07-27T15:26:25Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "e8f50eb5-b0ed-4818-9726-fb0fd360b04c",
        "parentId" : "31b9baca-fe2e-496c-a662-0e4cb12e476d",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Later I will need to improve the format of the output, then we will switch to a high level abstraction.",
        "createdAt" : "2018-07-27T15:23:26Z",
        "updatedAt" : "2018-07-27T15:26:25Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "a17b25b5fefa3d542ccb1ff59702ef2ce0427262",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +160,164 @@          throw new StopInterpretation(sw.toString, pos)\n        case ex: InvocationTargetException =>\n          val sw = new StringWriter()\n          sw.write(\"An exception occurred while executing macro expansion\\n\")\n          sw.write(ex.getTargetException.getMessage)"
  }
]