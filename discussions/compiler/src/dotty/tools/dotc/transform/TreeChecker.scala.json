[
  {
    "id" : "b761695f-72d1-443e-950c-f7453a520215",
    "prId" : 12592,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/12592#pullrequestreview-672767302",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0b11520-fc45-47b4-a919-a8a869ff2473",
        "parentId" : null,
        "authorId" : "2048615b-271b-4385-a719-838653608a86",
        "body" : "```suggestion\r\n      assert((symd eq initial) || symd.signature == initial.signature,\r\n```\r\n\r\nNitpick: is reference equality more appropriate here?",
        "createdAt" : "2021-06-01T05:44:54Z",
        "updatedAt" : "2021-06-01T06:03:34Z",
        "lastEditedBy" : "2048615b-271b-4385-a719-838653608a86",
        "tags" : [
        ]
      },
      {
        "id" : "c2362bb5-115e-4df4-9d26-d1991c3c91bc",
        "parentId" : "c0b11520-fc45-47b4-a919-a8a869ff2473",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Yes, using `eq` is a good idea, semantically they are the same for Dotty. BTW, we usually use backquote for non-symbolic infix operators.",
        "createdAt" : "2021-06-01T07:58:52Z",
        "updatedAt" : "2021-06-01T07:58:52Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a0ca5693d1547d8156a85e5d5fb8281cc5bc07a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +92,96 @@    if (ctx.phaseId <= erasurePhase.id) {\n      val initial = symd.initial\n      assert(symd == initial || symd.signature == initial.signature,\n        i\"\"\"Signature of ${sym.showLocated} changed at phase ${ctx.base.fusedContaining(ctx.phase.prev)}\n           |Initial info: ${initial.info}"
  },
  {
    "id" : "14d951ae-dd99-4ff7-adaa-ef0d6ebb6ffc",
    "prId" : 5115,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5115#pullrequestreview-171676451",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "547c72ee-064a-4f25-9d4b-5247235c06fa",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "And here is the addition of an explicit `Ycheck` test that `WhileDo(EmptyTree, _)` is not used too early, as requested by @smarter.",
        "createdAt" : "2018-11-05T17:44:22Z",
        "updatedAt" : "2018-11-05T17:44:22Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "3084b1a9e5cf6e3014ae222d87891c6ea8f91527",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +456,460 @@      assert((tree.cond ne EmptyTree) || ctx.phase.refChecked, i\"invalid empty condition in while at $tree\")\n      super.typedWhileDo(tree)\n    }\n\n    override def ensureNoLocalRefs(tree: Tree, pt: Type, localSyms: => List[Symbol])(implicit ctx: Context): Tree ="
  },
  {
    "id" : "301ae661-7168-4af0-a381-55dc69edc6de",
    "prId" : 5115,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5115#pullrequestreview-172076735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c71d9795-8fea-4325-acf1-c8dee6ab3511",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "Why `ctx.phase.refChecked`? Why not an equivalent method for `TailRec`?",
        "createdAt" : "2018-11-06T14:57:40Z",
        "updatedAt" : "2018-11-06T14:57:41Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "c7c7c56d-6078-441c-868b-b2ca4cfee730",
        "parentId" : "c71d9795-8fea-4325-acf1-c8dee6ab3511",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Because it existed, and the only requirement is that an infinite loop must not be pickled. It doesn't have anything to do with tailrec per se.",
        "createdAt" : "2018-11-06T15:30:15Z",
        "updatedAt" : "2018-11-06T15:30:15Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "3084b1a9e5cf6e3014ae222d87891c6ea8f91527",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +454,458 @@\n    override def typedWhileDo(tree: untpd.WhileDo)(implicit ctx: Context): Tree = {\n      assert((tree.cond ne EmptyTree) || ctx.phase.refChecked, i\"invalid empty condition in while at $tree\")\n      super.typedWhileDo(tree)\n    }"
  }
]