[
  {
    "id" : "e45fc6c6-a5ca-46af-8131-a10e8390678a",
    "prId" : 11808,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11808#pullrequestreview-617404131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8487e58e-bf07-4171-9fd4-5be682c38fbf",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "This wouldn't be a problem at all if our intersection erasure was only a trait when that trait dominates the intersection.",
        "createdAt" : "2021-03-22T10:43:40Z",
        "updatedAt" : "2021-03-22T14:16:08Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "993545e8-98e9-4d66-a835-04d7441349af",
        "parentId" : "8487e58e-bf07-4171-9fd4-5be682c38fbf",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "This is true, but I don't think that's a good enough reason to use that scheme as outlined in my other comment.",
        "createdAt" : "2021-03-22T11:16:35Z",
        "updatedAt" : "2021-03-22T14:16:08Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "9af4bad2a0f3cc6078ab8385c14bbb82fac2947f",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +90,94 @@      // ignored this restriction as intersections of traits seem to be handled\n      // correctly by javac, we do the same here since type soundness seems\n      // more important than adhering to the spec.\n      if repr.classSymbol.is(Trait) then\n        builder.append(':')"
  },
  {
    "id" : "823617c2-3f4b-4dcb-9b2a-784b8b33baba",
    "prId" : 5816,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5816#pullrequestreview-197676625",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4371d9fd-56a0-4e79-82a9-b1b78c917df6",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "recursive methods with default parameters are dangerous and I almost think we should warn when this happens. In any case, I suggest removing the default parameters from this method to avoid this issue in the future.",
        "createdAt" : "2019-01-29T16:46:18Z",
        "updatedAt" : "2019-01-30T11:01:33Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "63ec68e6-a8d1-4e5b-9d96-df7c2faf3c9b",
        "parentId" : "4371d9fd-56a0-4e79-82a9-b1b78c917df6",
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "Most calls seem to intentionally drop the params. Many times that's appropriate, some times I'm not sure.\r\nSadly too many other deadlines to review this in depth right now...",
        "createdAt" : "2019-01-29T17:11:40Z",
        "updatedAt" : "2019-01-30T11:01:33Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      },
      {
        "id" : "52556ab5-ed57-43c7-b89d-0d709cb2c745",
        "parentId" : "4371d9fd-56a0-4e79-82a9-b1b78c917df6",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "OK, let's keep as-is to minimize the diff with the scalac implementation then.",
        "createdAt" : "2019-01-29T17:13:39Z",
        "updatedAt" : "2019-01-30T11:01:33Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "c954ef0a7a1cb7f136a65b4938650d9aaa9b6e0a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +284,288 @@\n        case hktl: HKTypeLambda =>\n          jsig(hktl.finalResultType, toplevel, primitiveOK)\n\n        case _ =>"
  },
  {
    "id" : "5b73e832-3e66-4167-8c06-584c5d0bf07f",
    "prId" : 3342,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3342#pullrequestreview-82766149",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ea744ec-2d7e-401a-831f-3e6d9e93b2bb",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "We seem to be cutting out unused parameter sections from method types in several places. Is there a way to do this only once? Would it help if we had a utility method that maps a method type to one without unused parameter sections?",
        "createdAt" : "2017-12-09T11:21:55Z",
        "updatedAt" : "2018-02-21T10:25:44Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "93f87b59-dcdd-42e7-b891-97b696095f95",
        "parentId" : "8ea744ec-2d7e-401a-831f-3e6d9e93b2bb",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Unfortunately it is not possible to create a utility method that returns the type of the method without the unused parameters in presence of path-dependent types. ",
        "createdAt" : "2017-12-12T09:33:05Z",
        "updatedAt" : "2018-02-21T10:25:44Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "68afbcd915c5f6e17f4d1347c6a784c9b1639b13",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +241,245 @@        case mtpe: MethodType =>\n          // unused method parameters do not make it to the bytecode.\n          def effectiveParamInfoss(t: Type)(implicit ctx: Context): List[List[Type]] = t match {\n            case t: MethodType if t.isUnusedMethod => effectiveParamInfoss(t.resType)\n            case t: MethodType => t.paramInfos.filterNot(_.isPhantom) :: effectiveParamInfoss(t.resType)"
  },
  {
    "id" : "e0f50576-f28a-4ca4-8b8d-892d29c487d7",
    "prId" : 3234,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3234#pullrequestreview-68301693",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f220f097-d887-45af-9b49-f764aa154d5e",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "Should probably be in `backend/jvm`",
        "createdAt" : "2017-10-10T12:37:51Z",
        "updatedAt" : "2017-10-27T13:08:16Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "6a32202d-7a73-48b4-81d2-37123e2cb6a7",
        "parentId" : "f220f097-d887-45af-9b49-f764aa154d5e",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Debatable where it should go. But since most of it is part of erasure I'd leave it in transform.",
        "createdAt" : "2017-10-10T14:18:16Z",
        "updatedAt" : "2017-10-27T13:08:16Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "8c2c5553-ff69-472d-868a-196d5e0ea5a3",
        "parentId" : "f220f097-d887-45af-9b49-f764aa154d5e",
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "It is only called from `backend/jvm/DottyBackendInterface.scala`. So my reasoning was that this code is platform specific.\r\nBut I don't have a strong opinion about where it should be.",
        "createdAt" : "2017-10-10T14:30:42Z",
        "updatedAt" : "2017-10-27T13:08:16Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      }
    ],
    "commit" : "8adc33e2aeeb35b46a171165f385e2a2bbc457b9",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +0,4 @@package dotty.tools\npackage dotc\npackage transform\n"
  },
  {
    "id" : "ccde3abb-08cb-4a7f-ae7b-d471ec4b174f",
    "prId" : 3234,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3234#pullrequestreview-68263823",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97491a49-e072-47bd-ba3d-d563b7c03f8b",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "`GenericJavaSignatures`?",
        "createdAt" : "2017-10-10T12:38:12Z",
        "updatedAt" : "2017-10-27T13:08:16Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      }
    ],
    "commit" : "8adc33e2aeeb35b46a171165f385e2a2bbc457b9",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +19,23 @@ *  the Java Virtual Machine Specification, ยง4.3.4\n */\nobject GenericSignatures {\n\n  /** Generate the signature for `sym0`, with type `info`, as defined in"
  }
]