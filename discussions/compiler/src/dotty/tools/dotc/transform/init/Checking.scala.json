[
  {
    "id" : "b9c59b32-124c-464c-980f-0ab92fa476de",
    "prId" : 11533,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11533#pullrequestreview-607246585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cce4110-1f4b-4ea4-aa5d-6be9a77b8754",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "This will lead to infinite loops. The following might be a test case:\r\n\r\n```Scala\r\nclass A {\r\n  val a = f\r\n  def f: A = f\r\n  class B(x: Int)\r\n\r\n  println(new a.B(5))\r\n  val n = 10\r\n}\r\n```",
        "createdAt" : "2021-02-25T19:34:18Z",
        "updatedAt" : "2021-04-29T11:47:29Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "0d4d91e4-6734-4339-8414-2d29cc4bc976",
        "parentId" : "9cce4110-1f4b-4ea4-aa5d-6be9a77b8754",
        "authorId" : "93042d2a-fea3-48fb-8f26-bcce79e4118b",
        "body" : "Mitigating this with a `visited` set. I think it's easier to just set a maximum recursion depth though, because this is only a speed-up measure most of the time...",
        "createdAt" : "2021-03-09T07:27:45Z",
        "updatedAt" : "2021-04-29T11:47:29Z",
        "lastEditedBy" : "93042d2a-fea3-48fb-8f26-bcce79e4118b",
        "tags" : [
        ]
      },
      {
        "id" : "fe820235-d28b-4f1e-8d67-8d517f82bc7f",
        "parentId" : "9cce4110-1f4b-4ea4-aa5d-6be9a77b8754",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Yes, you can play with it and see which works better for the tests we have.",
        "createdAt" : "2021-03-09T10:29:58Z",
        "updatedAt" : "2021-04-29T11:47:29Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d2688eeef67b0f6a8aeb532ad0ce0dedc1d41a9",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +288,292 @@        canDirectlyPromote(outer)\n      case _ =>\n        val summary = expand(pot)\n        if (!summary.effs.isEmpty)\n          false // max depth of expansion reached"
  },
  {
    "id" : "59b4d868-627d-46f7-95ea-1bdfb328f0ec",
    "prId" : 11533,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11533#pullrequestreview-598926588",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c80a413-6d00-40b9-93b7-027088557d8d",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Minor: the curly braces are not necessary here (and Scala 3 makes them always optional).",
        "createdAt" : "2021-02-25T19:35:37Z",
        "updatedAt" : "2021-04-29T11:47:29Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d2688eeef67b0f6a8aeb532ad0ce0dedc1d41a9",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +344,348 @@      if !errs.isEmpty then\n        return UnsafePromotion(warm, eff.source, state.path, errs.toList).toErrors\n    }\n    Errors.empty\n"
  },
  {
    "id" : "3aa6481b-da97-4152-b292-d2947d132ca2",
    "prId" : 11533,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11533#pullrequestreview-607246585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf97dc91-7f63-45c6-8e7f-54c7fa0073d3",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Instead of doing a case here, I would put it at line 341.",
        "createdAt" : "2021-03-09T10:34:49Z",
        "updatedAt" : "2021-04-29T11:47:29Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d2688eeef67b0f6a8aeb532ad0ce0dedc1d41a9",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +353,357 @@      val errs =\n        if canDirectlyPromote(pot) then\n          Errors.empty\n        else pot match {\n          case pot: ThisRef =>"
  },
  {
    "id" : "253b1cee-77af-40f4-8735-d7e4bcbda19f",
    "prId" : 11385,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11385#pullrequestreview-590996034",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0aa88411-6932-455b-97c5-da51cc9b2cf0",
        "parentId" : null,
        "authorId" : "93042d2a-fea3-48fb-8f26-bcce79e4118b",
        "body" : "In Scala when you `copy` are the  `mutable.Set`s shared?",
        "createdAt" : "2021-02-16T07:23:15Z",
        "updatedAt" : "2021-02-24T17:35:23Z",
        "lastEditedBy" : "93042d2a-fea3-48fb-8f26-bcce79e4118b",
        "tags" : [
        ]
      },
      {
        "id" : "dfbeb31f-cd12-4912-8fb2-a2992425fe4c",
        "parentId" : "0aa88411-6932-455b-97c5-da51cc9b2cf0",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Yes, the other fields take previous values, so they are shared.",
        "createdAt" : "2021-02-16T08:47:47Z",
        "updatedAt" : "2021-02-24T17:35:23Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "db19f60d89060b1d826156e0265d4a8e78845164",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +61,65 @@      else {\n        state.visited = state.visited + eff\n        val state2: State = state.copy(path = state.path :+ eff.source)\n        eff match {\n          case eff: Promote      => Checking.checkPromote(eff)(using state2)"
  },
  {
    "id" : "4aa66468-d757-4835-bc86-6defd3b73dd9",
    "prId" : 7789,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7789#pullrequestreview-340371019",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfd51a3f-843a-4bbf-b170-f01048be2824",
        "parentId" : null,
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "Why need this case and also the `Block` case above? In which situations would the parents of a template be blocks? If you comment these two cases out the init tests – `testOnly dotty.tools.dotc.CompilationTests -- *checkInit*` – pass.",
        "createdAt" : "2020-01-08T14:28:21Z",
        "updatedAt" : "2020-02-13T13:59:49Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "749b7156-4ec9-4812-8592-29acbd635b0e",
        "parentId" : "bfd51a3f-843a-4bbf-b170-f01048be2824",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "It comes from enabling the flag for the whole test set, where we may encounter such cases. Indeed, it would be nice to minimize a test case and add a comment here.",
        "createdAt" : "2020-01-09T09:03:00Z",
        "updatedAt" : "2020-02-13T13:59:49Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a4d06a40b13b72ae3468486d1c2d916400dea8e",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +103,107 @@        checkCtor(ctor.symbol, parent.tpe, tree)\n\n      case tree @ Apply(Block(_, parent), _) =>\n        val (ctor, _, _) = decomposeCall(parent)\n        checkCtor(ctor.symbol, tree.tpe, tree)"
  },
  {
    "id" : "10c0beed-3e12-419f-a334-6ec15ca860f7",
    "prId" : 7789,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7789#pullrequestreview-349399592",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aeff4c33-38ee-494e-9345-a5f905069d19",
        "parentId" : null,
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "This case is very close to `ThisRef` above, can be DRYed",
        "createdAt" : "2020-01-09T14:44:41Z",
        "updatedAt" : "2020-02-13T13:59:49Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "cedaabf8-8e14-491b-b800-a6fb3a18b9ef",
        "parentId" : "aeff4c33-38ee-494e-9345-a5f905069d19",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "There are subtle differences here, dedup needs to create coupling & contracts, it's simpler to separate them, as they are not big. The same for similar cases.",
        "createdAt" : "2020-01-28T14:08:24Z",
        "updatedAt" : "2020-02-13T13:59:50Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a4d06a40b13b72ae3468486d1c2d916400dea8e",
    "line" : 192,
    "diffHunk" : "@@ -1,1 +190,194 @@\n            case SuperRef(ThisRef(cls), supercls) =>\n              assert(cls == state.thisClass, \"unexpected potential \" + pot.show)\n\n              val target = resolveSuper(cls, supercls, field)"
  },
  {
    "id" : "3855771c-0a96-472a-b3de-6d4b842ce1e0",
    "prId" : 7789,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7789#pullrequestreview-340511630",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be6818d9-cf40-45c0-86f1-f58018b125eb",
        "parentId" : null,
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "This case is very close to `ThisRef` above, can be DRYed",
        "createdAt" : "2020-01-09T14:45:02Z",
        "updatedAt" : "2020-02-13T13:59:49Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a4d06a40b13b72ae3468486d1c2d916400dea8e",
    "line" : 233,
    "diffHunk" : "@@ -1,1 +231,235 @@\n            case SuperRef(thisRef @ ThisRef(cls), supercls) =>\n              assert(cls == state.thisClass, \"unexpected potential \" + pot.show)\n\n              val target = resolveSuper(cls, supercls, sym)"
  },
  {
    "id" : "2c8d93b9-9ee3-4cdb-8861-9006f48a7530",
    "prId" : 7789,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7789#pullrequestreview-340511630",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb6db75c-e036-47aa-8bac-c87a37c8c46e",
        "parentId" : null,
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "It seems, in essence, each case here does a simple thing roughly describable in a sentence:\r\n\r\n- `Leak` – they are bad, display a warning whenever it is detected.\r\n- `FieldAccess` – resolve the field and issue a warning if it is not registered in `state.fieldsInited` where all initialized fields are tracked.\r\n- `MethodCall` – check the effects of the method being called. If the method is out of the scope of the project, issue a warning.\r\n\r\nIs my understanding correct here? If so, do you think it will make sense to add a short comment above each case? Would save a lot of time IMO for future readers.",
        "createdAt" : "2020-01-09T15:03:59Z",
        "updatedAt" : "2020-02-13T13:59:50Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a4d06a40b13b72ae3468486d1c2d916400dea8e",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +151,155 @@      implicit val state2: State = state.withVisited(eff)\n\n      eff match {\n        case Promote(pot) =>\n          pot match {"
  },
  {
    "id" : "d92847fb-a196-44de-a99d-537b3e6783fa",
    "prId" : 7789,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7789#pullrequestreview-347870125",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a99e2e98-541d-43bd-820d-bbb3cd5610a6",
        "parentId" : null,
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "Can `ThisRef`, `SuperRef` and `Warm` cases above be DRYed a bit?",
        "createdAt" : "2020-01-24T13:53:38Z",
        "updatedAt" : "2020-02-13T13:59:50Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a4d06a40b13b72ae3468486d1c2d916400dea8e",
    "line" : 301,
    "diffHunk" : "@@ -1,1 +299,303 @@            else Summary.empty\n\n          case warm : Warm =>\n            val target = resolve(warm.classSymbol, sym)\n            if (target.isInternal) (warm.potentialsOf(target), Effects.empty)"
  },
  {
    "id" : "21f05a19-52e4-48b5-95c5-f9592e2c36be",
    "prId" : 7789,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7789#pullrequestreview-349402243",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a95319b9-3ad4-4408-ba50-d4164762af7d",
        "parentId" : null,
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "Also, I see a lot of code is shared between `FieldReturn` and `MethodReturn` – can they be refactored to reduce sharing?",
        "createdAt" : "2020-01-24T13:57:08Z",
        "updatedAt" : "2020-02-13T13:59:50Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "ce310e98-97bb-4f4f-a4ba-86208cdaeb6c",
        "parentId" : "a95319b9-3ad4-4408-ba50-d4164762af7d",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "For the same reason above, sharing in this case will create subtle contracts, thus makes it harder to read & maintain the code.",
        "createdAt" : "2020-01-28T14:11:44Z",
        "updatedAt" : "2020-02-13T13:59:50Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a4d06a40b13b72ae3468486d1c2d916400dea8e",
    "line" : 315,
    "diffHunk" : "@@ -1,1 +313,317 @@        }\n\n      case FieldReturn(pot1, sym) =>\n        pot1 match {\n          case thisRef @ ThisRef(cls) =>"
  }
]