[
  {
    "id" : "0dc861c5-3189-47d2-b2aa-d1637b56a549",
    "prId" : 7789,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7789#pullrequestreview-341007209",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2be362b-3eb6-4d07-8aaf-17e26c64680e",
        "parentId" : null,
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "Why do we need an empty arg group here?",
        "createdAt" : "2020-01-09T13:40:23Z",
        "updatedAt" : "2020-02-13T13:59:49Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "7344c9ee-d89c-4128-b1fc-7bf491d24c5b",
        "parentId" : "e2be362b-3eb6-4d07-8aaf-17e26c64680e",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "It's just for consistency with other Potentials to put `source` in the second parameter block.",
        "createdAt" : "2020-01-10T08:17:47Z",
        "updatedAt" : "2020-02-13T13:59:50Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a4d06a40b13b72ae3468486d1c2d916400dea8e",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +134,138 @@\n  /** The object whose initialization status is unknown */\n  case class Cold()(val source: Tree) extends Potential {\n    def size: Int = 1\n    def show(implicit ctx: Context): String = \"Cold\""
  },
  {
    "id" : "d4783f01-5528-4955-85ab-5c024a1c27b5",
    "prId" : 7789,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7789#pullrequestreview-340511630",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c0ea27c-7631-40ff-90b5-723de80fa25b",
        "parentId" : null,
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "It would be very good to have short examples of each potential in the comments above them, with the scaladoc of what each parameter to the potential case classes means. When reading the `check(eff)` code, one of the main struggles for me is to imagine the scenarios different potentials arise in.",
        "createdAt" : "2020-01-09T14:52:24Z",
        "updatedAt" : "2020-02-13T13:59:50Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a4d06a40b13b72ae3468486d1c2d916400dea8e",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +22,26 @@\n  /** A potential represents an aliasing of a value that is possibly under initialization */\n  sealed trait Potential {\n    def size: Int\n    def show(implicit ctx: Context): String"
  },
  {
    "id" : "f029a56a-cc92-45a6-a013-a89e5c8808ff",
    "prId" : 7789,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7789#pullrequestreview-349396117",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a19def18-1d57-4e54-a5e4-2f1f7d0adde3",
        "parentId" : null,
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "You could define `cls` and `effs` as `protected def`s in `trait Potential`. This would DRY the code here and in `potentialsOf`. Also it would DRY the same two methods in `ThisRef`.",
        "createdAt" : "2020-01-24T14:22:58Z",
        "updatedAt" : "2020-02-13T13:59:50Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "01a8f75f-8c1c-41be-9d53-84fd4494b815",
        "parentId" : "a19def18-1d57-4e54-a5e4-2f1f7d0adde3",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "`cls` and `effs` do not make much sense in `trait Potential `, I feel a little duplication here is better as it avoids unnecessary contracts & coupling.",
        "createdAt" : "2020-01-28T14:03:50Z",
        "updatedAt" : "2020-02-13T13:59:50Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a4d06a40b13b72ae3468486d1c2d916400dea8e",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +74,78 @@     */\n    def effectsOf(sym: Symbol)(implicit env: Env): Effects = trace(\"effects of \" + sym.show, init, r => Effects.show(r.asInstanceOf)) {\n      val cls = sym.owner.asClass\n      val effs = env.summaryOf(cls).effectsOf(sym)\n      val outer = Outer(this, cls)(this.source)"
  },
  {
    "id" : "281d25ca-27b4-4337-a0a0-6b1c2215340e",
    "prId" : 7789,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7789#pullrequestreview-349403891",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "794f2419-80e2-4ed0-bbe4-b43cfe9f7d26",
        "parentId" : null,
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "This is also a potential for DRYing, but only for `Warm`'s `effectsOf` and `potentialsOf`.",
        "createdAt" : "2020-01-24T14:23:51Z",
        "updatedAt" : "2020-02-13T13:59:50Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "b1e8ed18-a54a-411c-8e63-fe4d815200f9",
        "parentId" : "794f2419-80e2-4ed0-bbe4-b43cfe9f7d26",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "The code is not complex, I feel for this case it's straight-forward as it is.",
        "createdAt" : "2020-01-28T14:13:51Z",
        "updatedAt" : "2020-02-13T13:59:50Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a4d06a40b13b72ae3468486d1c2d916400dea8e",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +76,80 @@      val cls = sym.owner.asClass\n      val effs = env.summaryOf(cls).effectsOf(sym)\n      val outer = Outer(this, cls)(this.source)\n      Effects.asSeenFrom(effs, this, cls, outer.toPots)\n    }"
  }
]