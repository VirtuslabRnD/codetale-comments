[
  {
    "id" : "2efe8b0a-73ad-4291-aecc-04f92cd958e3",
    "prId" : 8542,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8542#pullrequestreview-384608242",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd9b9b80-214d-41ec-a371-9716cd11a58c",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Maybe add a comment why it needs to run after groups of. Or could it also simply \"run after\", in same group?",
        "createdAt" : "2020-03-31T10:39:12Z",
        "updatedAt" : "2020-03-31T14:50:43Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "efc258d2859e092286a87814176992a2e289c985",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +34,38 @@  // This phase needs to run after because it need to transform trees that are generated\n  // by the pattern matcher but are still not visible in that group of phases.\n  override def runsAfterGroupsOf: Set[String] = Set(PatternMatcher.name)\n\n  override def transformApply(app: Apply)(using ctx: Context): Tree ="
  },
  {
    "id" : "8783f059-cb3d-4d38-9e3f-578e83826a35",
    "prId" : 8542,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8542#pullrequestreview-384608242",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb0f13d9-1b3c-49ff-a625-0a568819c1fc",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "That's the third beta reduction method we are introducing. Can we share part of this one with the one in BetaReduce? Maybe add a umethod in the BeteReduce object that can be called from both.\r\n",
        "createdAt" : "2020-03-31T10:41:41Z",
        "updatedAt" : "2020-03-31T14:50:43Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "efc258d2859e092286a87814176992a2e289c985",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +53,57 @@        case _ => (app, Nil)\n\n  private def betaReduce(tree: Apply, fn: Tree, name: Name, args: List[Tree])(using ctx: Context): Tree =\n    fn match\n      case Block(TypeDef(_, template: Template) :: Nil, Apply(Select(New(_),_), Nil)) if template.constr.rhs.isEmpty =>"
  }
]