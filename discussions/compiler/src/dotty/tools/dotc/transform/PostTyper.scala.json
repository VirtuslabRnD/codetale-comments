[
  {
    "id" : "a0f848da-8d30-4c06-be68-8d1a419c4a8d",
    "prId" : 10448,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10448#pullrequestreview-536822101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a75e80c0-7dcd-4042-ac85-e550b027a53e",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I'm wondering why it is not caught by the Windows CI. Can we add a test for this in Windows CI?",
        "createdAt" : "2020-11-23T10:39:02Z",
        "updatedAt" : "2020-11-24T18:44:38Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "c95ac536-cf93-46cf-8a21-4b7d7c56298a",
        "parentId" : "a75e80c0-7dcd-4042-ac85-e550b027a53e",
        "authorId" : "7f4dd8e1-6dc3-48f1-ac69-2bad57c15767",
        "body" : "You'll notice it only if the drive letter of your project directory **and** the drive letter of the temporary directory used for the test suite are different.\r\n\r\nAs sketched above, my project directory is `W:\\scala3-windows\\` (`W:` contains my local GitHub repo for [`michelou/dotty-examples`](https://github.com/michelou/dotty-examples/); `W:` was created with command [`subst`](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/subst)) while temporary files created by the test suite are located in `C:\\Users\\michelou\\AppData\\Local\\Temp\\` (aka. [`%LOCALAPPDATA%`](http://originw2.cms.ms.akadns.net/en-us/security/portal/mmpc/shared/variables.aspx)).",
        "createdAt" : "2020-11-23T11:18:22Z",
        "updatedAt" : "2020-11-24T18:44:38Z",
        "lastEditedBy" : "7f4dd8e1-6dc3-48f1-ac69-2bad57c15767",
        "tags" : [
        ]
      },
      {
        "id" : "33310aa2-ed89-47d2-ac21-f4b211171481",
        "parentId" : "a75e80c0-7dcd-4042-ac85-e550b027a53e",
        "authorId" : "7f4dd8e1-6dc3-48f1-ac69-2bad57c15767",
        "body" : "Answering your question \"Can we add a test for this in Windows CI?\"\r\n\r\nAs a reminder the two variables `LOCALAPPDATA` and `TEMP` have the following *default values* on Windows:\r\n```batch\r\nLOCALAPPDATA=C:\\Users\\%USERNAME%\\AppData\\Local\r\nTEMP=%LOCALAPPDATA%\\Temp\r\n```\r\n**NB.** With a Github-hosted runner I have `USERNAME=runneradmin`, locally I have `USERNAME=michelou`.\r\n\r\nLet's assume we *can* execute command [`subst`](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/subst) in a CI workflow; then it should possible to write something like the following (eg. in batch file `cmdTests.bat`):\r\n```batch\r\nsubst X: %LOCALAPPDATA%\r\nset TEMP=X:\\Temp\r\ncall \"%_SBT_CMD%\" \";scalac ...\"\r\nset TEMP=%LOCALAPPDATA%\\Temp\r\nsubst /D X:\r\n```\r\nThe idea is to reassign the `TEMP` variable to some path with a drive letter different from `C:` (in this case `X:`) *before* running `scalac` with a Tasty related test example (derived from one of the above failing tests).\r\n",
        "createdAt" : "2020-11-23T18:58:05Z",
        "updatedAt" : "2020-11-24T18:44:38Z",
        "lastEditedBy" : "7f4dd8e1-6dc3-48f1-ac69-2bad57c15767",
        "tags" : [
        ]
      },
      {
        "id" : "6c971b32-99f0-4d2e-a87e-d0cf0726954e",
        "parentId" : "a75e80c0-7dcd-4042-ac85-e550b027a53e",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Thanks for the detailed explanation 👍 \r\n\r\nI just checked that our Windows CI machine supports the command `subst`. Let me know if you'd like to add a test in this PR or later. ",
        "createdAt" : "2020-11-23T20:30:17Z",
        "updatedAt" : "2020-11-24T18:44:38Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "d97a9d0ced0012c2909ce5b3e12397345e34dc27",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +349,353 @@                  // (see implementation of sun.nio.fs.WindowsPath#relativize)\n                  try sourcerootPath.relativize(cunitPath).toString\n                  catch case _: IllegalArgumentException => cunitPath.toString\n                else jpath.normalize.toString\n              sym.addAnnotation(Annotation.makeSourceFile(relativePath))"
  },
  {
    "id" : "4f376759-20b0-4e49-92f3-d17dc0664bc9",
    "prId" : 10385,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10385#pullrequestreview-534559635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fed765b-867b-41f8-8f93-b2d3ae09becd",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Maybe add a test to prevent regression?",
        "createdAt" : "2020-11-19T12:44:31Z",
        "updatedAt" : "2020-11-19T15:24:36Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "24b4016a-7aa1-4060-b221-b09f51a998f6",
        "parentId" : "0fed765b-867b-41f8-8f93-b2d3ae09becd",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Added",
        "createdAt" : "2020-11-19T15:24:44Z",
        "updatedAt" : "2020-11-19T15:24:45Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "621da0bd94a87c90d30796e0bb41938d98d24ea5",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +346,350 @@                else if jpath.isAbsolute then sourcerootPath.relativize(jpath.normalize).toString\n                else jpath.normalize.toString\n              sym.addAnnotation(Annotation.makeSourceFile(relativePath))\n          else (tree.rhs, sym.info) match\n            case (rhs: LambdaTypeTree, bounds: TypeBounds) =>"
  },
  {
    "id" : "5f9d4ee8-4269-4049-be2d-d78798536b6e",
    "prId" : 10164,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10164#pullrequestreview-523572052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5374cfa9-9091-4ff9-a825-40a86705e3d1",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Thanks for implementing this stuff! This should fix https://github.com/lampepfl/dotty/issues/9881",
        "createdAt" : "2020-11-03T21:04:54Z",
        "updatedAt" : "2020-11-11T15:34:18Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "ebd3786e-e0e1-483a-bcd3-f2d06236762e",
        "parentId" : "5374cfa9-9091-4ff9-a825-40a86705e3d1",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Ah well, I didn't really have a choice. I had tests that needed to pass. 🙃",
        "createdAt" : "2020-11-03T22:22:29Z",
        "updatedAt" : "2020-11-11T15:34:18Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "00bae499-8a4a-4a73-a56e-7dd995fdb9e8",
        "parentId" : "5374cfa9-9091-4ff9-a825-40a86705e3d1",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Can you add the testcase from that issue to make sure it's actually fixed?",
        "createdAt" : "2020-11-04T16:57:46Z",
        "updatedAt" : "2020-11-11T15:34:18Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "7641a84e-d4b0-4faf-a008-d5d469083199",
        "parentId" : "5374cfa9-9091-4ff9-a825-40a86705e3d1",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Done.",
        "createdAt" : "2020-11-04T17:15:52Z",
        "updatedAt" : "2020-11-11T15:34:18Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "69afa9cf05e232814348d9779a999b51db650f87",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +155,159 @@              removeUnwantedAnnotations(sym, defn.ParamMetaAnnot, NoSymbol, keepIfNoRelevantAnnot = true)\n            else\n              removeUnwantedAnnotations(sym, defn.GetterMetaAnnot, defn.FieldMetaAnnot, keepIfNoRelevantAnnot = !sym.is(ParamAccessor))\n          if sym.isScala2Macro && !ctx.settings.XignoreScala2Macros.value then\n            if !sym.owner.unforcedDecls.exists(p => !p.isScala2Macro && p.name == sym.name && p.signature == sym.signature)"
  },
  {
    "id" : "81002921-c1db-443c-a5c3-622dfc85ff9b",
    "prId" : 9984,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9984#pullrequestreview-583189905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e59ed69a-12c8-4138-9a4c-08591065f39f",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Check `ctx.owner` is not `inline`?",
        "createdAt" : "2021-02-03T15:08:24Z",
        "updatedAt" : "2021-02-08T10:26:36Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "742f4fba-95da-4a59-83ca-98b61d65dc24",
        "parentId" : "e59ed69a-12c8-4138-9a4c-08591065f39f",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Yes. Will add the check",
        "createdAt" : "2021-02-04T09:28:03Z",
        "updatedAt" : "2021-02-08T10:26:36Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdf24824be9e0f1360dc26521e3cacf95367ef1d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +260,264 @@        case tree: Ident if !tree.isType =>\n          if tree.symbol.is(Inline) && !Inliner.inInlineMethod then\n            ctx.compilationUnit.needsInlining = true\n          checkNoConstructorProxy(tree)\n          tree.tpe match {"
  },
  {
    "id" : "2e6c831e-65b0-4102-912b-1382cd9e4130",
    "prId" : 8428,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8428#pullrequestreview-369772473",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89aa1580-80c4-483b-ac24-bafd76ff198d",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "This will loop over the whole body looking for param accessors for every super-call. I think it'd be more efficient to collect the param accessors first, then check if any super-argument matches one of them.",
        "createdAt" : "2020-03-05T14:41:51Z",
        "updatedAt" : "2020-03-05T17:33:43Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "1393deef-3415-4c8b-a93b-9b34b64bed1d",
        "parentId" : "89aa1580-80c4-483b-ac24-bafd76ff198d",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "No, it's only the supercall of the first template parent\r\n",
        "createdAt" : "2020-03-05T17:32:47Z",
        "updatedAt" : "2020-03-05T17:33:43Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a92410498f60a248963bf398c255dda3e7445a8a",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +107,111 @@        fn.tpe.widen match\n          case MethodType(superParamNames) =>\n            for case stat: ValDef <- impl.body do\n              val sym = stat.symbol\n              if sym.isAllOf(PrivateParamAccessor, butNot = Mutable)"
  },
  {
    "id" : "439a5391-1d8f-4d73-babf-d65db0cf90b9",
    "prId" : 8428,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8428#pullrequestreview-369772669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0feaeefb-7748-4b75-a0be-10c0389b6324",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "This should exclude super-calls to traits",
        "createdAt" : "2020-03-05T15:10:11Z",
        "updatedAt" : "2020-03-05T17:33:43Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "2122eb2f-7026-448c-959f-10e6dddd7d52",
        "parentId" : "0feaeefb-7748-4b75-a0be-10c0389b6324",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Can't happen. First super call is always to a class.",
        "createdAt" : "2020-03-05T17:33:04Z",
        "updatedAt" : "2020-03-05T17:33:43Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a92410498f60a248963bf398c255dda3e7445a8a",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +104,108 @@     */\n    private def forwardParamAccessors(impl: Template)(using Context): Unit = impl.parents match\n      case superCall @ Apply(fn, superArgs) :: _ if superArgs.nonEmpty =>\n        fn.tpe.widen match\n          case MethodType(superParamNames) =>"
  },
  {
    "id" : "6fe60723-5076-41c2-b1c9-25df8e820108",
    "prId" : 5760,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5760#pullrequestreview-194500574",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f5c884d-9ca2-4176-a0f0-acb6b766fb43",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Do we need to match `DefDef` here instead of `ValOrDefDef`?",
        "createdAt" : "2019-01-21T09:00:43Z",
        "updatedAt" : "2019-01-21T09:01:12Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "06ef296f-eaf0-4929-89fa-c85b7848db97",
        "parentId" : "6f5c884d-9ca2-4176-a0f0-acb6b766fb43",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I used this to also cover signatures of getters.",
        "createdAt" : "2019-01-21T09:16:13Z",
        "updatedAt" : "2019-01-21T09:16:34Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "239bf45c71e26747df8989ac1aa62ab33249059f",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +61,65 @@  override def checkPostCondition(tree: tpd.Tree)(implicit ctx: Context): Unit = tree match {\n    case tree: ValOrDefDef =>\n      assert(!tree.symbol.signature.isUnderDefined)\n    case _ =>\n  }"
  },
  {
    "id" : "3b6ea9df-4a64-4802-bc64-c29c793b5a5f",
    "prId" : 4360,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4360#pullrequestreview-116172001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2492330-6594-4244-b64b-50448086a9db",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Instead of special-casing Child, the compiler could be changed to always use it with fully-applied types with wildcards, e.g. `Child[Cons[_]]`",
        "createdAt" : "2018-04-29T16:38:27Z",
        "updatedAt" : "2018-04-30T19:20:00Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "24704553f661b316cb78c79b599a59716d2b669a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +214,218 @@        case tree: TypeApply =>\n          val tree1 @ TypeApply(fn, args) = normalizeTypeArgs(tree)\n          if (fn.symbol != defn.ChildAnnot.primaryConstructor) {\n            // Make an exception for ChildAnnot, which should really have AnyKind bounds\n            Checking.checkBounds(args, fn.tpe.widen.asInstanceOf[PolyType])"
  },
  {
    "id" : "630c1c5c-5aee-46aa-8187-e3095fea97a7",
    "prId" : 3233,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3233#pullrequestreview-67129549",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "360a40d1-8f24-4180-adc2-b32a2eea602d",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Now I'm confusing about why we would write this instead of `if (!ctx.mode.is(Mode.Pattern)) Checking.checkAppliedType(tree)` :)",
        "createdAt" : "2017-10-04T13:06:41Z",
        "updatedAt" : "2017-10-04T16:38:53Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "5a3e6edf-173e-43f0-8d3a-2418f762c398",
        "parentId" : "360a40d1-8f24-4180-adc2-b32a2eea602d",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Because checkAppliedType also does other things besides bounds checking.",
        "createdAt" : "2017-10-04T16:41:07Z",
        "updatedAt" : "2017-10-04T16:41:07Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf15ca28e6d6a2af24a5930e5a87d1587b57895e",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +257,261 @@          cpy.Annotated(tree)(transform(annotated), transformAnnot(annot))\n        case tree: AppliedTypeTree =>\n          Checking.checkAppliedType(tree, boundsCheck = !ctx.mode.is(Mode.Pattern))\n          super.transform(tree)\n        case SingletonTypeTree(ref) =>"
  },
  {
    "id" : "7c8f29fd-249f-410a-872f-85553afbde6d",
    "prId" : 3061,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3061#pullrequestreview-60909397",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "927a2271-65bf-4cdc-83a2-5a2231ac2840",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Bugfix. I believe we did not check new's for instantiatability if the type was parameterized. The problem is that the type in the new itself is only the type constructor, which can have good bounds even though the parameter instantiation has not. ",
        "createdAt" : "2017-09-06T13:29:09Z",
        "updatedAt" : "2017-09-20T15:20:34Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e65bd581c7506e1a382d906a9c8a961fafabfff",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +195,199 @@          super.transform(tree)\n        case tree: Apply =>\n          methPart(tree) match {\n            case Select(nu: New, nme.CONSTRUCTOR) if isCheckable(nu) =>\n              // need to check instantiability here, because the type of the New itself"
  },
  {
    "id" : "bac7436d-0a89-4ddf-bf3d-836de6078d88",
    "prId" : 3061,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3061#pullrequestreview-62740621",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc1976e7-e681-45ee-9b0b-fd8f244f351e",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "`inline` ?",
        "createdAt" : "2017-09-14T01:46:23Z",
        "updatedAt" : "2017-09-20T15:20:35Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "887e626f-89cf-4258-8dbd-1a3717110e52",
        "parentId" : "fc1976e7-e681-45ee-9b0b-fd8f244f351e",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I don't think that would matter, performance-wise.",
        "createdAt" : "2017-09-14T13:00:44Z",
        "updatedAt" : "2017-09-20T15:20:35Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e65bd581c7506e1a382d906a9c8a961fafabfff",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +97,101 @@    private var noCheckNews: Set[New] = Set()\n\n    def withNoCheckNews[T](ts: List[New])(op: => T): T = {\n      val saved = noCheckNews\n      noCheckNews ++= ts"
  }
]