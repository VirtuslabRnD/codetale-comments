[
  {
    "id" : "7769537a-1917-48c0-b0f6-d021b22b5fe5",
    "prId" : 11231,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11231#pullrequestreview-583142025",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8aad826-1f09-4029-a519-a699917f29f0",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "`uninitialized` is not erased anymore and the transformation has nothing to do with pruning erased definitions. It is also unrelated to `erased` in general as this operation does produce a value at runtime (even though it is elided). This should be done somewhere else. FirstTransform might be a good candidate as we are transforming `var x: T = uninitialized` to the canonical form that erasure understands.",
        "createdAt" : "2021-02-04T08:44:58Z",
        "updatedAt" : "2021-02-05T09:24:01Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "90907ed5dba2c52f67ba656d6fb5c57320b77624",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +23,27 @@ *  of a mutable field definition by `_`. This avoids a \"is declared erased, but is\n *  in fact used\" error in Erasure and communicates to Constructors that the\n *  variable does not have an initializer.\n */\nclass PruneErasedDefs extends MiniPhase with SymTransformer { thisTransform =>"
  },
  {
    "id" : "397fcc0e-38de-400c-8cf9-b649af498875",
    "prId" : 8836,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8836#pullrequestreview-404066925",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a5116d8-14b6-4a8c-ba34-5e46ba410255",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "In PostTyper, we also have logic to erase arguments. Is there a duplication of code?",
        "createdAt" : "2020-05-01T07:47:35Z",
        "updatedAt" : "2020-05-01T07:47:39Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "a5d02db8-742c-490a-ad7c-1bf542e2c198",
        "parentId" : "2a5116d8-14b6-4a8c-ba34-5e46ba410255",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We keep in TASTy the contents of the erased trees. These are erased here. In PostTyper we only remove contents of erased definitions that were generated by inlining code (i.e. needed for typing). I will recheck what happens if we don't remove them in PostTyper, but fur sure the TASTy will increase.",
        "createdAt" : "2020-05-01T08:26:36Z",
        "updatedAt" : "2020-05-01T08:26:37Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "01ca6e63a5bf7eb508cb0106754b956502130da4",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +37,41 @@    if (tree.fun.tpe.widen.isErasedMethod)\n      cpy.Apply(tree)(tree.fun, tree.args.map(trivialErasedTree))\n    else tree\n\n  override def transformValDef(tree: ValDef)(implicit ctx: Context): Tree ="
  }
]