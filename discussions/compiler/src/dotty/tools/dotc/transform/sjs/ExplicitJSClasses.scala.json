[
  {
    "id" : "4f69d509-014b-482c-a951-cc9074653067",
    "prId" : 9774,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9774#pullrequestreview-491492650",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1605dc5-9780-4fff-aad6-bb8863aa5e26",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "@gzm0 This is standard in practice in dotty ;) I copied the pattern from `LambdaLift`.",
        "createdAt" : "2020-09-18T14:11:00Z",
        "updatedAt" : "2020-10-02T07:35:23Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "a91beaebba68297205b5e3716ff72edef1a2c570",
    "line" : 248,
    "diffHunk" : "@@ -1,1 +244,248 @@\n  override def initContext(ctx: FreshContext): Unit =\n    MyState = ctx.addLocation[MyState]()\n\n  override def isEnabled(using Context): Boolean ="
  },
  {
    "id" : "2bbd5cc2-e9a3-4349-8964-bbea8cf12fb1",
    "prId" : 9774,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9774#pullrequestreview-491573506",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5fc4c1e-e2e8-4436-adb1-e85ed543e306",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "@smarter said on gitter:\r\n\r\n> parents are transformed in a special context, that might help: https://github.com/lampepfl/dotty/blob/master/compiler/src/dotty/tools/dotc/transform/MegaPhase.scala#L360",
        "createdAt" : "2020-09-18T14:13:41Z",
        "updatedAt" : "2020-10-02T07:35:23Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "ce5fa105-3992-432b-8e89-bc2ec5a3ebb6",
        "parentId" : "b5fc4c1e-e2e8-4436-adb1-e85ed543e306",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Unfortunately, that special context is not so special. It's just built with a particular set of (owner, outer context, scope), but we cannot otherwise identify it. So that trail is a dead end.",
        "createdAt" : "2020-09-18T15:33:42Z",
        "updatedAt" : "2020-10-02T07:35:23Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "a91beaebba68297205b5e3716ff72edef1a2c570",
    "line" : 466,
    "diffHunk" : "@@ -1,1 +455,459 @@     * they belong in the larger tree.\n     * We now unwrap those, canceling out that effect.\n     * TODO Is there a better way to do this?\n     */\n    val fixedParents ="
  },
  {
    "id" : "92383c39-ad6a-4426-ad59-7365aadf7d85",
    "prId" : 9774,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9774#pullrequestreview-492005487",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44d2f0f5-4637-469d-98e7-2990f2d485ed",
        "parentId" : null,
        "authorId" : "f186a0ec-8fc4-4e94-87e9-c629d1b38b60",
        "body" : "Instead of this, could we have special trees for this (`new C` and `super[C]`)?",
        "createdAt" : "2020-09-23T11:02:39Z",
        "updatedAt" : "2020-10-02T07:35:23Z",
        "lastEditedBy" : "f186a0ec-8fc4-4e94-87e9-c629d1b38b60",
        "tags" : [
        ]
      }
    ],
    "commit" : "a91beaebba68297205b5e3716ff72edef1a2c570",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +47,51 @@ *      JS class.\n *  (E) Wrap every `new C` call and `super[C]` reference of a nested JS class\n *      `C` with `withContextualJSClassValue(js.constructorOf[C], ...)`.\n *  (F) Desugar calls to `js.constructorOf[C]` (including those generated by\n *      the previous transformations) into either `runtime.constructorOf` or"
  },
  {
    "id" : "184abbd0-407b-4647-b9bb-372e14ccad63",
    "prId" : 9774,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9774#pullrequestreview-492005487",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da4dbc30-d3af-4e9f-a731-f03b7f0e3cea",
        "parentId" : null,
        "authorId" : "f186a0ec-8fc4-4e94-87e9-c629d1b38b60",
        "body" : "Instead of a magic method, since we are in the compiler itself, can we have a tree? (Or re-use a tree)",
        "createdAt" : "2020-09-23T11:09:28Z",
        "updatedAt" : "2020-10-02T07:35:23Z",
        "lastEditedBy" : "f186a0ec-8fc4-4e94-87e9-c629d1b38b60",
        "tags" : [
        ]
      }
    ],
    "commit" : "a91beaebba68297205b5e3716ff72edef1a2c570",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +69,73 @@ *  }}}\n *  this phase creates a field `Inner\\$jsclass` in `Outer` to hold the JS class\n *  value for `Inner`. The rhs of that field is a call to a magic method, used\n *  to retain information that the back-end will need.\n *  {{{"
  },
  {
    "id" : "28dd7fbb-b45b-4fa0-be78-8bbc4f3ee2e8",
    "prId" : 9774,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9774#pullrequestreview-492005487",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bfe9921-4f85-424e-9925-7731fa18aa79",
        "parentId" : null,
        "authorId" : "f186a0ec-8fc4-4e94-87e9-c629d1b38b60",
        "body" : "Also a candidate for a tree :)",
        "createdAt" : "2020-09-23T11:11:52Z",
        "updatedAt" : "2020-10-02T07:35:23Z",
        "lastEditedBy" : "f186a0ec-8fc4-4e94-87e9-c629d1b38b60",
        "tags" : [
        ]
      }
    ],
    "commit" : "a91beaebba68297205b5e3716ff72edef1a2c570",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +148,152 @@ *  this phase creates a local `val Local\\$jslass` in the body of `outer()` to\n *  hold the JS class value for `Local`. The rhs of that val is a call to a\n *  magic method, used to retain information that the back-end will need:\n *\n *  - A reified reference to `class Local`, in the form of a `classOf`"
  },
  {
    "id" : "ab6bb646-f6f7-44db-903b-0446b75afcfc",
    "prId" : 9774,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9774#pullrequestreview-495661308",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "192b789a-e504-4302-8099-070d01f84294",
        "parentId" : null,
        "authorId" : "f186a0ec-8fc4-4e94-87e9-c629d1b38b60",
        "body" : "Can we make the rest of dotc more JS aware to not \"think\" that?",
        "createdAt" : "2020-09-23T12:50:30Z",
        "updatedAt" : "2020-10-02T07:35:23Z",
        "lastEditedBy" : "f186a0ec-8fc4-4e94-87e9-c629d1b38b60",
        "tags" : [
        ]
      },
      {
        "id" : "c9f2ef6f-68d9-4352-822b-3b375b709f71",
        "parentId" : "192b789a-e504-4302-8099-070d01f84294",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Perhaps the choice of words is not appropriate, here.\r\nIn a way, adding the `NoInits` flag here precisely makes dotty aware that a JS trait does not have an initializer. It's just that the initial computation of whether or not to put `NoInits` does not add the flag to JS traits, since it is not directly aware of the specificity of JS traits. That initial computation happens in Namer. Maybe I could try to add that directly in Namer, but then I would also have to do something in Scala2Unpickler to fix up things coming from Scala 2 (there is already some logic in there to patch `NoInits` on some well-known Scala 2 traits, because they never have the NoInits flag in the pickles).",
        "createdAt" : "2020-09-24T14:55:02Z",
        "updatedAt" : "2020-10-02T07:35:23Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "a91beaebba68297205b5e3716ff72edef1a2c570",
    "line" : 412,
    "diffHunk" : "@@ -1,1 +405,409 @@            ref1\n        } else {\n          // JS traits never have an initializer, no matter what dotc thinks\n          if (isJSType)\n            ref1.copySymDenotation(initFlags = ref1.flags | NoInits)"
  },
  {
    "id" : "82f83fd6-7537-4563-89a9-c62059cc3266",
    "prId" : 9774,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9774#pullrequestreview-492005487",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19fab09a-cf74-4e2f-aad0-b2ed1996bec7",
        "parentId" : null,
        "authorId" : "f186a0ec-8fc4-4e94-87e9-c629d1b38b60",
        "body" : "Assert instead? (if it is a compiler bug?)",
        "createdAt" : "2020-09-23T12:58:40Z",
        "updatedAt" : "2020-10-02T07:35:23Z",
        "lastEditedBy" : "f186a0ec-8fc4-4e94-87e9-c629d1b38b60",
        "tags" : [
        ]
      }
    ],
    "commit" : "a91beaebba68297205b5e3716ff72edef1a2c570",
    "line" : 666,
    "diffHunk" : "@@ -1,1 +655,659 @@      case _ =>\n        // This should not have passed the checks in PrepJSInterop\n        report.error(i\"class type required but found $tpe0\", tree)\n        jsdefn.JSObjectType\n    }"
  }
]