[
  {
    "id" : "77aae795-4a33-4876-ad33-7c886b1ba25e",
    "prId" : 9852,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9852#pullrequestreview-564930952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b48391ba-6896-4182-9022-5513982f5c36",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Why do we have this branch? Shouldn't it always be 1?",
        "createdAt" : "2021-01-06T11:22:05Z",
        "updatedAt" : "2021-01-11T02:19:51Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "fb4fdbe3-e6d7-451f-bb3e-7fb3e24d6ea5",
        "parentId" : "b48391ba-6896-4182-9022-5513982f5c36",
        "authorId" : "2048615b-271b-4385-a719-838653608a86",
        "body" : "The general idea is to limit the warnings to when `numTypes(original.cases) >= MinSwitchCases`\r\n\r\nhttps://github.com/lampepfl/dotty/blob/609d8d6bdbe9be33080967cdac478a6957237356/compiler/src/dotty/tools/dotc/transform/PatternMatcher.scala#L59-L60\r\n\r\nHowever value classes are special cased as an attempt at \"best-effort\" support. Consider:\r\n\r\n```scala\r\ncase class IntAnyVal(x: Int) extends AnyVal\r\n\r\nfinal val Ten = IntAnyVal(10)\r\n\r\ndef test(x: IntAnyVal) = (x: @switch) match {\r\n  case IntAnyVal(1) => 0\r\n  case Ten           => 1\r\n  case IntAnyVal(100) => 2\r\n  case IntAnyVal(1000) => 3\r\n  case IntAnyVal(10000) => 4\r\n}\r\n```\r\n\r\nwhich results in\r\n\r\n| Item | Value|Notes\r\n|------|-------|---\r\n`numTypes(original.cases)` | `2`|`{ IntAnyVal, Ten.type }`\r\n`numTypes(resultCases)`|`0`\r\nemitted bytecode|if-then\r\n\r\nWe want to warn here since the `switch` was not emitted despite a sufficient number of cases, thus we use a lower `caseThreshold` for value classes.",
        "createdAt" : "2021-01-11T02:18:32Z",
        "updatedAt" : "2021-01-11T02:19:51Z",
        "lastEditedBy" : "2048615b-271b-4385-a719-838653608a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8acad1b977b61e258812e6b73a4da1e7b8fd667",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +986,990 @@        val caseThreshold =\n          if ValueClasses.isDerivedValueClass(tpt.tpe.typeSymbol) then 1\n          else MinSwitchCases\n        def typesInPattern(pat: Tree): List[Type] = pat match\n          case Alternative(pats) => pats.flatMap(typesInPattern)"
  },
  {
    "id" : "0d4d5853-d012-437e-bdf9-d00cffe17c82",
    "prId" : 5078,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5078#pullrequestreview-152551221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8660ec52-20a8-46df-ba69-7b266acfad4f",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "Why not simply: `.select(nme.toSeq)`?",
        "createdAt" : "2018-09-05T14:06:19Z",
        "updatedAt" : "2018-09-09T15:00:11Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "ff8e8945-09d6-4916-b393-54640a3bdf7d",
        "parentId" : "8660ec52-20a8-46df-ba69-7b266acfad4f",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "The code is defensive here to support possible overloading of `toSeq`.",
        "createdAt" : "2018-09-05T14:13:55Z",
        "updatedAt" : "2018-09-09T15:00:11Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "04feff00-7832-4753-8a57-d220da1f753b",
        "parentId" : "8660ec52-20a8-46df-ba69-7b266acfad4f",
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "We should add tests for this then. Would it work to do `.select(nme.toSeq).appliedToNone()`?",
        "createdAt" : "2018-09-05T14:18:11Z",
        "updatedAt" : "2018-09-09T15:00:11Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "4128d964-a191-4a04-be2b-f65db176ca6e",
        "parentId" : "8660ec52-20a8-46df-ba69-7b266acfad4f",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "My hunch is that it will crash the compiler, as `appliedToNone` will not do overloading resolution.",
        "createdAt" : "2018-09-05T14:36:36Z",
        "updatedAt" : "2018-09-09T15:00:11Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "8ac81d9d-591f-4d47-895b-2166530f574c",
        "parentId" : "8660ec52-20a8-46df-ba69-7b266acfad4f",
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "But there is no need right? You cannot have two overloads of a method that takes no parameter",
        "createdAt" : "2018-09-05T14:38:07Z",
        "updatedAt" : "2018-09-09T15:00:11Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "ce50effc-d07c-47ca-bbb7-5bb5ab4b3aa8",
        "parentId" : "8660ec52-20a8-46df-ba69-7b266acfad4f",
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "Never mind, your solution seems better. `matchingMember` is already used in multiple places in this file (I suppose for reasons)",
        "createdAt" : "2018-09-05T15:20:28Z",
        "updatedAt" : "2018-09-09T15:00:11Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a0fc8c60b40e12ac47616f82b7d8b230af16008",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +268,272 @@            if (args.length == 1) {\n              val toSeq = ref(getResult)\n                .select(defn.Seq_toSeq.matchingMember(getResult.info))\n              letAbstract(toSeq) { toSeqResult =>\n                patternPlan(toSeqResult, arg, onSuccess)"
  },
  {
    "id" : "6a5d288f-6c93-4178-9533-dda61e6137e6",
    "prId" : 5056,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5056#pullrequestreview-151705842",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5197899d-332a-464c-abc5-d98d4e7b73ae",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "You should update the doc comment of `def inlineVars` saying that it drops unreachable branch as well",
        "createdAt" : "2018-09-03T08:40:22Z",
        "updatedAt" : "2018-09-03T11:41:52Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e0864993affa8542680d6f81ce4937599ef4bae",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +606,610 @@          }\n        }\n        override def apply(plan: SeqPlan): Plan = {\n          val newHead = apply(plan.head)\n          if (!canFallThrough(newHead)) {"
  },
  {
    "id" : "0802ee81-aa72-424f-bb89-c5a4e2d47a0b",
    "prId" : 5012,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5012#pullrequestreview-152563792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38987e7f-22ba-43d4-ad39-4c2a3cc1fc97",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "There is also `widenTermRefExpr` that seems to work here. Not sure which one is the most appropriate one. I defer to @odersky or @smarter ",
        "createdAt" : "2018-08-28T15:22:29Z",
        "updatedAt" : "2018-08-28T15:22:30Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "4cbd2c71-278d-4f66-b73c-3707c4be707f",
        "parentId" : "38987e7f-22ba-43d4-ad39-4c2a3cc1fc97",
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "Yeah the first commit uses `widenTermRefExpr`. Maybe @liufengyun can think of examples where widening singletons would make a difference?",
        "createdAt" : "2018-08-28T21:57:53Z",
        "updatedAt" : "2018-08-28T21:57:53Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      },
      {
        "id" : "0783a92a-d83d-4ed9-a03c-e7eb312d3c52",
        "parentId" : "38987e7f-22ba-43d4-ad39-4c2a3cc1fc97",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "What about `x match { case _: x.type => ... }` ?",
        "createdAt" : "2018-08-29T06:11:04Z",
        "updatedAt" : "2018-08-29T06:11:05Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "8faaf421-06e7-4152-8e80-1a3dd33d28bd",
        "parentId" : "38987e7f-22ba-43d4-ad39-4c2a3cc1fc97",
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "We concluded with @smarter that there is no need to widen singleton types",
        "createdAt" : "2018-09-05T15:46:03Z",
        "updatedAt" : "2018-09-05T15:46:07Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      }
    ],
    "commit" : "bfb716ff881acb1161d4f7e9f17ece21a85b8bf4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +117,121 @@     *  generated variable.\n     */\n    private def sanitize(tp: Type): Type = tp.widenIfUnstable match {\n      case tp: TermRef if refersToInternal(false, tp) => sanitize(tp.underlying)\n      case tp => tp"
  },
  {
    "id" : "222328d3-ed70-471c-ac40-b2929e398fe2",
    "prId" : 4982,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4982#pullrequestreview-148694832",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae6347d5-918a-4938-b502-5726df5159da",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Could the removed optimizations be brought back later? Or are they subsumed by mergeTests ?",
        "createdAt" : "2018-08-22T15:54:57Z",
        "updatedAt" : "2018-08-27T16:48:42Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "3f5620eb-80e5-4850-9e00-c09301c44842",
        "parentId" : "ae6347d5-918a-4938-b502-5726df5159da",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "They are indeed subsumed by `mergeTests`, combined with the inherent simpler nature of `Labeled` versus label-defs (e.g., `hoistLabels` is totally unnecessary with `Labeled`).",
        "createdAt" : "2018-08-22T22:15:45Z",
        "updatedAt" : "2018-08-27T16:48:42Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c530086bdb785e4ff7e55770ffdc84468d6ff9b",
    "line" : 942,
    "diffHunk" : "@@ -1,1 +894,898 @@\n    val optimizations: List[(String, Plan => Plan)] = List(\n      \"mergeTests\" -> mergeTests,\n      \"inlineVars\" -> inlineVars\n    )"
  },
  {
    "id" : "1b271af2-3d55-4836-8426-81883b0c1baa",
    "prId" : 2829,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2829#pullrequestreview-48870583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89e3b642-1873-4fd7-aabe-4aa11a4ca5a1",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "should there be a TypeTest that ensures that `scrutinee` conforms to `mt.paramInfos.head`?",
        "createdAt" : "2017-07-10T07:52:35Z",
        "updatedAt" : "2017-07-10T11:35:59Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "fd996ced-1456-4730-be05-38310c19cdbd",
        "parentId" : "89e3b642-1873-4fd7-aabe-4aa11a4ca5a1",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "The TypeTest is already generated by Typer.",
        "createdAt" : "2017-07-10T11:09:22Z",
        "updatedAt" : "2017-07-10T11:35:59Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "79493df1783147905c7f6a4507d53183363071ac",
    "line" : 680,
    "diffHunk" : "@@ -1,1 +303,307 @@        case UnApply(extractor, implicits, args) =>\n          val mt @ MethodType(_) = extractor.tpe.widen\n          var unapp = extractor.appliedTo(ref(scrutinee).ensureConforms(mt.paramInfos.head))\n          if (implicits.nonEmpty) unapp = unapp.appliedToArgs(implicits)\n          val unappPlan = unapplyPlan(unapp, args)"
  },
  {
    "id" : "5992f6f0-3766-42c1-845e-ff0f5e9ba506",
    "prId" : 2158,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2158#pullrequestreview-30222048",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c32e2835-2b64-4019-80db-f4c910e082bb",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Why the added definition of `s`. Just use `tref`!",
        "createdAt" : "2017-03-31T10:03:52Z",
        "updatedAt" : "2017-03-31T10:04:38Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "e997ff0a-3fc3-455c-868e-b46d37710eaf",
        "parentId" : "c32e2835-2b64-4019-80db-f4c910e082bb",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "variables defined in pattern matches are rarely debuggable when compiled by scalac.",
        "createdAt" : "2017-03-31T10:06:22Z",
        "updatedAt" : "2017-03-31T10:06:22Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "be760f1f-1ea8-4ddc-b619-305ebbd5a097",
        "parentId" : "c32e2835-2b64-4019-80db-f4c910e082bb",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "OK, if you prefer. ",
        "createdAt" : "2017-03-31T11:17:46Z",
        "updatedAt" : "2017-03-31T11:17:46Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3707992ee2ed56ce754df8c0760fc3928f0317f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +854,858 @@        expectedTp.dealias match {\n          case tref @ TypeRef(pre: SingletonType, name) =>\n            val s = tref\n            s.symbol.isClass &&\n            ExplicitOuter.needsOuterIfReferenced(s.symbol.asClass)"
  }
]