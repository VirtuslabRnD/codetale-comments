[
  {
    "id" : "4f4e0a15-cca0-4983-802d-330c77891a3c",
    "prId" : 7435,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7435#pullrequestreview-307521558",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bef7dc3-9404-4430-9d8c-ce3c672c102c",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I think the code is a little brittle.\r\n\r\nThe optimization was introduced in https://github.com/lampepfl/dotty/commit/8f47f1694a283c0dc280913eb0c6a895ebd7ef1e to fix #676 . Since #4090, we no longer generate companion objects in FirstTransform anymore, it seems we can just disable the optimization.\r\n\r\nIf the optimization is needed, what about using a compiler flag to flag an object as _eager_, and we only check flags here? That flag could also be reused to enable more optimization opportunities without worrying about semantic problems.",
        "createdAt" : "2019-10-20T07:11:17Z",
        "updatedAt" : "2019-10-20T07:15:42Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "881ed0da-75bb-480d-8945-6afebb64f14d",
        "parentId" : "2bef7dc3-9404-4430-9d8c-ce3c672c102c",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Even with automatic generation of companion objects disabled, I believe there are still a lot of them, so it's worthwhile to optimize. But the criterion as it stands is somewhat arbitrary and could be improved. E.g. we could also strictify companion objects that are pure.\r\n",
        "createdAt" : "2019-10-26T10:58:09Z",
        "updatedAt" : "2019-10-26T10:58:10Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "af1bde2270f4a1d23ba55cac200d1763a0cab216",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +85,89 @@          // For private trait members this does not work, since `ensureNotPrivate` in phase Mixins\n          // does change the name but does not update the owner's scope, so `allOverriddenSymbols` does\n          // not work in that case. However, we can check whether the name is an ExpandedName instead.\n          transformSyntheticModule(tree)\n        else if (sym.isThreadUnsafe || ctx.settings.scalajs.value)"
  },
  {
    "id" : "b0771721-4d78-4d4d-8dba-b6368c5b6810",
    "prId" : 6579,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6579#pullrequestreview-243497308",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ccb9817-00b0-4b6b-baab-96d7094d824b",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "You are missing an `else` below or this line should be removed.",
        "createdAt" : "2019-05-29T20:25:13Z",
        "updatedAt" : "2019-06-06T11:39:12Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a73b8306d40618c3f8a4b123d44c066d4374fc4d",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +80,84 @@          if (sym.is(Module)) {\n            ctx.error(em\"@threadUnsafe is only supported on lazy vals\", sym.sourcePos)\n            transformMemberDefThreadSafe(tree)\n          }\n          else"
  },
  {
    "id" : "01b034e4-14cc-477a-ac42-88df05c35bf7",
    "prId" : 5354,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5354#pullrequestreview-172975915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8994667a-a601-49eb-9fc3-6f6ee86a5ffc",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "It's a bit confusing to describe an optimization we don't implement, and have a TODO about that a few lines below. I would put the TODO here with the description of the optimization.",
        "createdAt" : "2018-11-08T14:17:12Z",
        "updatedAt" : "2018-11-08T18:02:00Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d33baef216d0d23a957306fbb59b4bb6fee8da3",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +139,143 @@   *    else x$lzy.initialize(<RHS>)\n   *      // TODO: Implement Unit-typed lazy val optimization described below\n   *      // for a Unit-typed lazy val, this becomes `{ rhs ; x$lzy.initialize() }`\n   *      // to avoid passing around BoxedUnit\n   *  }"
  },
  {
    "id" : "eca7a850-22a7-4933-8c0b-0356671e1e42",
    "prId" : 5354,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5354#pullrequestreview-172975915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e683a46-751e-427a-9219-1d1a57ed9b65",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I would move the definition of `initName` just before this line since that's where it's used",
        "createdAt" : "2018-11-08T14:20:54Z",
        "updatedAt" : "2018-11-08T18:02:00Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d33baef216d0d23a957306fbb59b4bb6fee8da3",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +165,169 @@    // }\n    val initName = LazyLocalInitName.fresh(xname)\n    val initSymbol = ctx.newSymbol(x.symbol.owner, initName, initFlags, MethodType(Nil, tpe), coord = x.pos)\n    val rhs = x.rhs.changeOwnerAfter(x.symbol, initSymbol, this)\n    val initialize = holderRef.select(lazyNme.initialize).appliedTo(rhs)"
  }
]