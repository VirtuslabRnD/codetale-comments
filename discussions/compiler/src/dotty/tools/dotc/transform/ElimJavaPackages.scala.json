[
  {
    "id" : "f6c10238-4e7c-40f0-ab27-c973ec8a0b6a",
    "prId" : 2528,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2528#pullrequestreview-40650440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cdd040d-ba9a-4d30-98df-cce24b00624c",
        "parentId" : null,
        "authorId" : "aa14f673-3d29-4a61-bf43-a86828212cf2",
        "body" : "@DarkDimius a couple of follow-up questions:\r\n1. Adding this feels a bit hacky, because it's potentially masking bugs in subsequent phases if those subsequent phases accidentally pass a Java package to the backend.\r\nOr, to rephrase the above: if a phase passes a java package as a value to the backend,\r\n1.1 Is it their responsibility to not do that?\r\n1.2 Or are we now saying that the compiler guarantees that no such references exist, past ElimJavaPackages?\r\n\r\n2. Should we add some code that checks whether the invariant holds for all phases going forward? If so, does that code go in TreeChecker?",
        "createdAt" : "2017-05-24T20:28:56Z",
        "updatedAt" : "2017-05-31T21:40:23Z",
        "lastEditedBy" : "aa14f673-3d29-4a61-bf43-a86828212cf2",
        "tags" : [
        ]
      },
      {
        "id" : "50f0e268-dca9-4430-b674-74b90624ff9f",
        "parentId" : "4cdd040d-ba9a-4d30-98df-cce24b00624c",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "> Adding this feels a bit hacky, because it's potentially masking bugs in subsequent phases if those subsequent phases accidentally pass a Java package to the backend.\r\n\r\nMost of the phases in Dotty perform some transformation that adds a new invariant that should not be broken by future phases. \r\n\r\n>  1.1 Is it their responsibility to not do that?\r\n1.2 Or are we now saying that the compiler guarantees that no such references exist, past ElimJavaPackages?\r\n\r\nIt is their responsibility not to do that, as long as ElimJavaPackages is able to blame them :-)\r\nThis is why you should add a checkPostcondition method that will check that package references did not re-appear.  TreeChecker will call this method during Ycheck.",
        "createdAt" : "2017-05-26T07:51:17Z",
        "updatedAt" : "2017-05-31T21:40:23Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "d4030fba-f166-4649-a1a4-fb9b6ca89ea9",
        "parentId" : "4cdd040d-ba9a-4d30-98df-cce24b00624c",
        "authorId" : "aa14f673-3d29-4a61-bf43-a86828212cf2",
        "body" : "@DarkDimius friendly ping",
        "createdAt" : "2017-05-26T12:28:18Z",
        "updatedAt" : "2017-05-31T21:40:23Z",
        "lastEditedBy" : "aa14f673-3d29-4a61-bf43-a86828212cf2",
        "tags" : [
        ]
      },
      {
        "id" : "ebc8f94a-fd2a-4f9c-aee6-ea90212c45a9",
        "parentId" : "4cdd040d-ba9a-4d30-98df-cce24b00624c",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "It's funny how now with the new github system we can have comments with wrong review dates. See reply in a comment above.",
        "createdAt" : "2017-05-27T10:10:36Z",
        "updatedAt" : "2017-05-31T21:40:23Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "434a7ee45bc6cd434122cf30ead6b8a978b66367",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@package dotty.tools.dotc.transform\n\nimport dotty.tools.dotc.ast.tpd._"
  },
  {
    "id" : "59cd31d5-eda1-457d-9bcf-db04ad4b2c04",
    "prId" : 2528,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2528#pullrequestreview-41464401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef9c20df-c29d-4a7a-916c-419a1ccca737",
        "parentId" : null,
        "authorId" : "aa14f673-3d29-4a61-bf43-a86828212cf2",
        "body" : "@DarkDimius I added the postcondition, but is there a way to run all the tests with -Ycheck enabled? (Is that done by default in the CI?)",
        "createdAt" : "2017-05-31T19:13:10Z",
        "updatedAt" : "2017-05-31T21:40:23Z",
        "lastEditedBy" : "aa14f673-3d29-4a61-bf43-a86828212cf2",
        "tags" : [
        ]
      },
      {
        "id" : "a5b42ebc-324a-4819-a0f8-98db363f6e5b",
        "parentId" : "ef9c20df-c29d-4a7a-916c-419a1ccca737",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "Both CI and local test suite runs by default with Ychecks enabled. \r\nhttps://github.com/lampepfl/dotty/blob/master/compiler/test/dotc/tests.scala#L71",
        "createdAt" : "2017-06-01T09:55:45Z",
        "updatedAt" : "2017-06-01T09:55:45Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "434a7ee45bc6cd434122cf30ead6b8a978b66367",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +24,28 @@  }\n\n  override def checkPostCondition(tree: Tree)(implicit ctx: Context): Unit = {\n    tree match {\n      case tree: Select =>"
  },
  {
    "id" : "7d6b2d57-d9b4-489d-aa51-a00d82255da0",
    "prId" : 2528,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2528#pullrequestreview-41462992",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ebccca5-f32c-40c2-b8a1-537942acf7c2",
        "parentId" : null,
        "authorId" : "aa14f673-3d29-4a61-bf43-a86828212cf2",
        "body" : "Should I be extending DenotTransformer here? I'd think InfoTransformer doesn't apply, because the type of the tree is unchanged. But maybe IdentityDenotTransformer then?",
        "createdAt" : "2017-05-31T19:19:20Z",
        "updatedAt" : "2017-05-31T21:40:23Z",
        "lastEditedBy" : "aa14f673-3d29-4a61-bf43-a86828212cf2",
        "tags" : [
        ]
      },
      {
        "id" : "2c309d29-6342-4720-a803-a9e191745839",
        "parentId" : "5ebccca5-f32c-40c2-b8a1-537942acf7c2",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "> InfoTransformer doesn't apply, because the type of the tree\r\n\r\nDenotTransformer are required when you change \"type of a name\", i.e. Denotation.\r\nE.g. if a method/field used to return one type, but now returns another. Or if it takes more agruments. Or if a field became a method. Or if new methods\\fields\\types\\classes are introduced.\r\n\r\nYou don't need to extend DenotTransformer here if are rebuilding trees that won't affect typing of \"names\". This phase doesn't.",
        "createdAt" : "2017-06-01T09:49:10Z",
        "updatedAt" : "2017-06-01T09:49:10Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "434a7ee45bc6cd434122cf30ead6b8a978b66367",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +11,15 @@  * they accidentally end up in the backend.\n  */\nclass ElimJavaPackages extends MiniPhaseTransform {\n\n  override def phaseName: String = \"elimJavaPackages\""
  },
  {
    "id" : "9117248a-b8b0-47e8-989e-725ef2084cdb",
    "prId" : 2528,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2528#pullrequestreview-41490622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fcee2e7-426a-431a-ac62-950b65322c9c",
        "parentId" : null,
        "authorId" : "aa14f673-3d29-4a61-bf43-a86828212cf2",
        "body" : "How performance-sensitive is the miniphase code? Should I get rid of the assertion (and the asInstanceOf call below) in favour of *some* code duplication?",
        "createdAt" : "2017-05-31T21:47:09Z",
        "updatedAt" : "2017-05-31T21:47:09Z",
        "lastEditedBy" : "aa14f673-3d29-4a61-bf43-a86828212cf2",
        "tags" : [
        ]
      },
      {
        "id" : "b332e5a8-62fb-481e-9888-d4b940950128",
        "parentId" : "4fcee2e7-426a-431a-ac62-950b65322c9c",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "Selects are one the the most common nodes, so transformSelects should be fast:\r\nhttps://github.com/lampepfl/dotty/issues/510\r\n\r\nisInstanceOf & asInstanceOf checks are very fast on HotSpot, the slower part is allocation of a lambda that is the second argument of assert.",
        "createdAt" : "2017-06-01T09:53:22Z",
        "updatedAt" : "2017-06-01T09:53:22Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "9011189a-19eb-4ed9-ba31-baed1c874b96",
        "parentId" : "4fcee2e7-426a-431a-ac62-950b65322c9c",
        "authorId" : "aa14f673-3d29-4a61-bf43-a86828212cf2",
        "body" : "Ok, so should I get rid of the assert, or are we good to go here?",
        "createdAt" : "2017-06-01T12:14:47Z",
        "updatedAt" : "2017-06-01T12:14:47Z",
        "lastEditedBy" : "aa14f673-3d29-4a61-bf43-a86828212cf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "434a7ee45bc6cd434122cf30ead6b8a978b66367",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +17,21 @@  override def transformSelect(tree: Select)(implicit ctx: Context, info: TransformerInfo): Tree = {\n    if (isJavaPackage(tree)) {\n      assert(tree.tpe.isInstanceOf[TypeRef], s\"Expected tree with type TypeRef, but got ${tree.tpe.show}\")\n      Ident(tree.tpe.asInstanceOf[TypeRef])\n    } else {"
  }
]