[
  {
    "id" : "1defec3f-5e58-4da9-a301-f2bc2ad3d789",
    "prId" : 8652,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8652#pullrequestreview-451119745",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b29f4fa3-804c-4aa1-861b-89f4d34e9e17",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "The documentation comment above Mixin describes the stuff that transformSym does and probably neeeds to be updated since it's doing more things now.",
        "createdAt" : "2020-07-18T19:09:49Z",
        "updatedAt" : "2020-07-22T08:29:14Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "bb9e5c9d-e6df-4a87-9b56-d00df5fa1ae7",
        "parentId" : "b29f4fa3-804c-4aa1-861b-89f4d34e9e17",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Indeed. I've updated the big comment.",
        "createdAt" : "2020-07-19T11:55:03Z",
        "updatedAt" : "2020-07-22T08:29:14Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "77e29253e1443d26a9bb4852e36c9d5f3da15d48",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +122,126 @@  override def changesMembers: Boolean = true  // the phase adds implementions of mixin accessors\n\n  override def transformSym(sym: SymDenotation)(using Context): SymDenotation =\n    def ownerIsTrait: Boolean = was(sym.owner, Trait, butNot = JavaDefined)\n"
  },
  {
    "id" : "24384930-51ab-4a8c-9723-4c6cc5d91e5d",
    "prId" : 8652,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8652#pullrequestreview-451119745",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3661d6d0-b2e1-44e4-8846-fc3a2c47af88",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I'm not sure if it would fit here, but an alternative way to go from one def to two defs is to use `transformDefDef` and return a `Thicket(defA, defB)`, that would be more efficient that using flatMap when most cases have to construct a singleton list",
        "createdAt" : "2020-07-18T19:14:57Z",
        "updatedAt" : "2020-07-22T08:29:14Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "6c5ddb3f-0b4d-4b98-8bf2-eb1bdecae395",
        "parentId" : "3661d6d0-b2e1-44e4-8846-fc3a2c47af88",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Since `traitDefs` is part of the larger logic of `transformTemplate`, it seems that this suggestion is not so easy to apply. I would rather keep the existing structure, especially since it comes from before this PR.",
        "createdAt" : "2020-07-19T12:10:12Z",
        "updatedAt" : "2020-07-22T08:29:14Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "77e29253e1443d26a9bb4852e36c9d5f3da15d48",
    "line" : 214,
    "diffHunk" : "@@ -1,1 +184,188 @@        case stat: DefDef if needsTraitSetter(stat.symbol) =>\n          // add a trait setter for this getter\n          stat :: DefDef(stat.symbol.traitSetter.asTerm, EmptyTree) :: Nil\n        case stat: DefDef if stat.symbol.isSetter =>\n          cpy.DefDef(stat)(rhs = EmptyTree) :: Nil"
  },
  {
    "id" : "694039f4-13d1-44b9-8acf-cca4aac408cb",
    "prId" : 4871,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4871#pullrequestreview-142264156",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4be1c9b-9d85-450e-acab-f4e5e2ccbc72",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Hmm, if this works, doesn't it mean that we could very easily support early initializers (for the Scala 2 mode) ?",
        "createdAt" : "2018-07-31T22:52:04Z",
        "updatedAt" : "2018-08-01T14:03:36Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "676cc64a-90fc-4faa-bb79-2a821f29db65",
        "parentId" : "a4be1c9b-9d85-450e-acab-f4e5e2ccbc72",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "There's still a way to go if we want to bring back early initializers. We'd also have to map definitions in the block back to definitions of the class fields.",
        "createdAt" : "2018-08-01T07:58:23Z",
        "updatedAt" : "2018-08-01T14:03:36Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e708a1d3cf0b235c103aa0412910fd5a702d7be",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +170,174 @@     */\n    def transformConstructor(tree: Tree): (Tree, List[Tree]) = tree match {\n      case Block(stats, expr) =>\n        val (scall, inits) = transformConstructor(expr)\n        (cpy.Block(tree)(stats, scall), inits)"
  }
]