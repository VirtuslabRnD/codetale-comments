[
  {
    "id" : "88db190a-705d-4a90-85fb-36db7dd06cc6",
    "prId" : 11608,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11608#pullrequestreview-606060527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "543d27e8-5404-4bef-8a6b-e13bc403bdb2",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Here the body is not inspected. Is it possible that the body contains trees other than `quoted.Type.of[x.Underlying](quotes)`?",
        "createdAt" : "2021-03-07T08:55:25Z",
        "updatedAt" : "2021-03-07T09:01:05Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "2449a3b0-81ef-4591-b0b6-807b265e1fd0",
        "parentId" : "543d27e8-5404-4bef-8a6b-e13bc403bdb2",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "No. This tree is generated on the QuotesAndSpliced typing class and its shape is kept as is. If We get something else it would be considered a bug and it would probably break more than this.",
        "createdAt" : "2021-03-08T08:34:25Z",
        "updatedAt" : "2021-03-08T08:34:25Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f1f1ef0041187b08982fe284874e6ee258911f4",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +128,132 @@        case tp @ TypeRef(x: TermRef, _) if tp.symbol == defn.QuotedType_splice =>\n          // Optimization: `quoted.Type.of[x.Underlying](quotes)`  -->  `x`\n          ref(x)\n        case _ =>\n          // `quoted.Type.of[<body>](quotes)`  --> `quoted.Type.of[<body2>](quotes)`"
  },
  {
    "id" : "0362312c-d88c-45b8-bd03-19234b6bbe18",
    "prId" : 11590,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11590#pullrequestreview-603836264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d3133b8-b41b-4e48-8b32-c44f107eea4b",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "At line 119, `body2` could be a block, and it's used as a type. I guess this case not reachable if `body2` is a block.",
        "createdAt" : "2021-03-03T22:30:58Z",
        "updatedAt" : "2021-03-04T08:51:30Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "4800c463-5f65-47ed-8a9f-21333b8af1ea",
        "parentId" : "3d3133b8-b41b-4e48-8b32-c44f107eea4b",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Indeed, is not reachable. This is essentially the same logic as in `super.transformQuotation`.",
        "createdAt" : "2021-03-04T08:39:45Z",
        "updatedAt" : "2021-03-04T08:51:30Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "8447d5a0bf0f1048545ca5c9a8d6781c8d3b7185",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +124,128 @@        cpy.Apply(quote)(cpy.TypeApply(fn1)(fn0, targs1), body2 :: Nil)\n      case quote: TypeApply =>\n        cpy.TypeApply(quote)(quote.fun, body2 :: Nil)\n    }\n  }"
  },
  {
    "id" : "5a11fa6c-caa0-453f-a11b-63dd4e282c78",
    "prId" : 11165,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11165#pullrequestreview-572096635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c783f086-bd9e-43cb-a97e-11fd60b5ca76",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Case classes are just desugarings. Maybe generalize it to all `TypeDef`?",
        "createdAt" : "2021-01-20T09:15:57Z",
        "updatedAt" : "2021-01-20T09:16:12Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "1669a7c8-e4c0-4248-abe7-516a3c459e27",
        "parentId" : "c783f086-bd9e-43cb-a97e-11fd60b5ca76",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "What do you mean by generalizing? Do you mean not allowing these ones?\r\n```\r\n'{ class Bar extends Foo { def foo = ... }; ... }\r\n'{ type T = ...;  }\r\n```\r\nThose are necessary.",
        "createdAt" : "2021-01-20T10:33:15Z",
        "updatedAt" : "2021-01-20T10:33:16Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "b586fe58-c167-4d0b-809d-53e657b56bd8",
        "parentId" : "c783f086-bd9e-43cb-a97e-11fd60b5ca76",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "If we don't generalize, the rule seems arbitrary and will not do the job. If a programmer just hand-crafted the desugaring of a case class, doesn't it have the same effect as a case class?",
        "createdAt" : "2021-01-20T10:49:39Z",
        "updatedAt" : "2021-01-20T10:56:22Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "15c4964a3c06ec4c779fa227d79c9c2df110ad93",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +96,100 @@      case tree: TypeDef if tree.symbol.is(Case) && level > 0 =>\n        report.error(reporting.CaseClassInInlinedCode(tree), tree)\n        super.transform(tree)\n      case _ =>\n        super.transform(tree)"
  },
  {
    "id" : "c3db9d82-d4c1-4656-a7e1-c0ff163383d5",
    "prId" : 10851,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10851#pullrequestreview-555932448",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70f31471-14c1-411c-aaee-02a29e00fe1c",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Do we need to transform the `body` for this case?",
        "createdAt" : "2020-12-18T21:12:24Z",
        "updatedAt" : "2020-12-18T21:12:46Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "bbc3ebe8-fa1b-4ac8-ab8e-453bd0181db8",
        "parentId" : "70f31471-14c1-411c-aaee-02a29e00fe1c",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We don't need to. That tree will not be used after the error. We could return `body1.select(...).with span(...)` but it might just complicate the code for no practical reason.",
        "createdAt" : "2020-12-19T10:26:39Z",
        "updatedAt" : "2020-12-19T10:26:40Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd2a5d0e158f83302354cdf56ad587d0c1258258",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +142,146 @@    val body1 = transform(body)(using spliceContext)\n    if ctx.reporter.hasErrors then\n      splice\n    else\n      val tagRef = getQuoteTypeTags.getTagRef(splice.qualifier.tpe.asInstanceOf[TermRef])"
  },
  {
    "id" : "0e93b7c8-3b8d-40c8-85a8-9167cd5f5c79",
    "prId" : 9448,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9448#pullrequestreview-457270259",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d77877c9-4115-4ebb-8c7c-89372e067029",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "What about making `tp.dealias` as the scrutinee of the top-level pattern match?",
        "createdAt" : "2020-07-28T23:13:12Z",
        "updatedAt" : "2020-07-29T08:44:49Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "dad9302a-07f4-4141-830d-acf3990ca41c",
        "parentId" : "d77877c9-4115-4ebb-8c7c-89372e067029",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Done",
        "createdAt" : "2020-07-29T07:41:30Z",
        "updatedAt" : "2020-07-29T08:44:49Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c4fa0c6412677651fd319e892c4c3f633be1517",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +177,181 @@          tp.prefix match\n            case NoPrefix if level > levelOf(tp.symbol) && !tp.typeSymbol.hasAnnotation(defn.InternalQuoted_QuoteTypeTagAnnot) =>\n              val tp1 = tp.dealias\n              if tp1 != tp then apply(tp1)\n              else tryHeal(tp.symbol, tp, pos)"
  },
  {
    "id" : "095bbe3c-3e82-4016-822c-9bdc532d70b9",
    "prId" : 8796,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8796#pullrequestreview-404964856",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4219651-202b-4f94-bb66-bf926c1a5e9c",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "inconsistent\r\n\r\nAlso, maybe rename to `healTypeOfTerm`? i was confused in what way `healType` and `healTermType` are different.\r\n",
        "createdAt" : "2020-05-04T16:00:16Z",
        "updatedAt" : "2020-05-05T05:27:34Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c9656b3e461d854214a23f245422769805c893e",
    "line" : 242,
    "diffHunk" : "@@ -1,1 +193,197 @@  }\n\n  /** Check phase consistency of terms and heal incosistent type references. */\n  private def healTypeOfTerm(pos: SourcePosition)(using Context) = new TypeMap {\n    def apply(tp: Type): Type ="
  },
  {
    "id" : "401fd4d5-8bc2-4cc6-9021-b0b2517fe16e",
    "prId" : 8342,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8342#pullrequestreview-361735823",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77f3be3a-d7b8-4297-ad3e-ea3417183895",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Do we need to check this is a type select? Or, it's implied by the case above?",
        "createdAt" : "2020-02-19T19:10:48Z",
        "updatedAt" : "2020-02-24T17:39:36Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "93c8ede0-2c10-4122-acef-14f2beb976b9",
        "parentId" : "77f3be3a-d7b8-4297-ad3e-ea3417183895",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "It is not implied by the case above but maybe the case above might be redundant now. I will check.",
        "createdAt" : "2020-02-20T08:18:02Z",
        "updatedAt" : "2020-02-24T17:39:36Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "2c2eab6d-4010-4317-873f-a6a75a02da5b",
        "parentId" : "77f3be3a-d7b8-4297-ad3e-ea3417183895",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "No, the first transforms an Expr splice and the second a Type splice",
        "createdAt" : "2020-02-20T09:12:17Z",
        "updatedAt" : "2020-02-24T17:39:36Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1b2378c6d0bba9e34c179668885b8600ef616b6",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +86,90 @@        val tp = checkType(splice.sourcePos).apply(splice.tpe.widenTermRefExpr)\n        cpy.Apply(splice)(cpy.TypeApply(fun)(fun.fun, tpd.TypeTree(tp) :: qctx :: Nil), body1 :: Nil)\n      case splice: Select =>\n        val tagRef = getQuoteTypeTags.getTagRef(splice.qualifier.tpe.asInstanceOf[TermRef])\n        ref(tagRef).withSpan(splice.span)"
  },
  {
    "id" : "f378a4b9-282a-404d-acff-97c27ce5fabb",
    "prId" : 7386,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7386#pullrequestreview-299499787",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "213de3a2-e936-42b4-a7e9-a295839be588",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Some indentation seems to be off here.",
        "createdAt" : "2019-10-09T15:32:48Z",
        "updatedAt" : "2019-10-11T14:33:35Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3d351a2136eeffbf9425201c13773344f2ebe7d",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +167,171 @@        case tp1: SkolemType => isStaticPathOK(tp1.info)\n        case _ => false\n\n    if (!sym.exists || levelOK(sym) || isStaticPathOK(tp))\n      None"
  },
  {
    "id" : "4e566b34-abd0-4cca-9320-ce3d52bd6d3b",
    "prId" : 7366,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7366#pullrequestreview-297450614",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a849f09-5f58-40fb-87b8-765e100c19e7",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "What if we just change change test to `tp.symbol.isStatic`?",
        "createdAt" : "2019-10-04T11:54:27Z",
        "updatedAt" : "2019-10-04T11:54:33Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "c35cc538-1fff-4052-bb26-3c22acf80ced",
        "parentId" : "0a849f09-5f58-40fb-87b8-765e100c19e7",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "The checkSymLevel already check that",
        "createdAt" : "2019-10-04T12:50:19Z",
        "updatedAt" : "2019-10-04T12:50:20Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "609e7d56825a3e7cece876a0cdbf129f7d603e76",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +120,124 @@          tp.prefix.select(tpnme.splice)\n        case tp: NamedType =>\n          checkSymLevel(tp.symbol, tp, pos) match {\n            case Some(tpRef) => tpRef.tpe\n            case _ =>"
  },
  {
    "id" : "62b8bb1a-aab3-40aa-8d73-e6de4f169fa9",
    "prId" : 7015,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7015#pullrequestreview-273432729",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ae26a71-f5d8-4ef5-bcd0-cf24967b633c",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Will a member class be accepted or not? Maybe add a test for that.",
        "createdAt" : "2019-08-08T20:07:16Z",
        "updatedAt" : "2019-08-10T17:04:54Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "ed094110-c890-4ef9-b377-0594148d2227",
        "parentId" : "6ae26a71-f5d8-4ef5-bcd0-cf24967b633c",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "They will not. I added a regression test for it.",
        "createdAt" : "2019-08-10T14:48:09Z",
        "updatedAt" : "2019-08-10T17:04:54Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "7247947c-db38-46f6-be49-81a31e910fca",
        "parentId" : "6ae26a71-f5d8-4ef5-bcd0-cf24967b633c",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Maybe update the comment too --- it's not only about local classes.",
        "createdAt" : "2019-08-10T16:52:47Z",
        "updatedAt" : "2019-08-10T17:04:54Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "d4881d77-4015-4c50-9d24-7c9ef6c687f3",
        "parentId" : "6ae26a71-f5d8-4ef5-bcd0-cf24967b633c",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Done",
        "createdAt" : "2019-08-10T17:05:14Z",
        "updatedAt" : "2019-08-10T17:05:14Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "e58a1604b695ed62f9018fb34b3c3fc8da07abea",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +144,148 @@      tryHeal(sym, tp, pos)\n    else if (!sym.owner.isStaticOwner) // non-top level class reference that is phase inconsistent\n      levelError(sym, tp, pos, \"\")\n    else\n      None"
  },
  {
    "id" : "a05eb7e0-8f04-4c70-8184-b457f6389c2c",
    "prId" : 6787,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6787#pullrequestreview-256978094",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1d06f30-1905-4286-8034-d1666c363e77",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Nitpick: maybe remove the unnecessary curly brace.",
        "createdAt" : "2019-07-02T15:26:26Z",
        "updatedAt" : "2019-07-02T15:26:52Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "8c0a042b-24a6-4388-bc25-e96e101c573f",
        "parentId" : "b1d06f30-1905-4286-8034-d1666c363e77",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "It looked off without them.",
        "createdAt" : "2019-07-02T15:35:10Z",
        "updatedAt" : "2019-07-02T15:35:10Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "555eed406f77f68762a4243ed59fa48d94252c85",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +107,111 @@            case _ => tree\n          }\n        }\n      case _: TypeTree | _: AppliedTypeTree | _: Apply | _: TypeApply | _: UnApply | Select(_, OuterSelectName(_, _)) =>\n        tree.withType(checkTp(tree.tpe))"
  },
  {
    "id" : "fda677dd-5cdb-42c3-93ba-ff5cc44dc2f5",
    "prId" : 5846,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5846#pullrequestreview-211123985",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c77637d-686e-4da3-8b53-ad3e1e8a3a2e",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Does it always have to be a cast? Or can one use `ensureConforms` instead?",
        "createdAt" : "2019-03-05T14:46:37Z",
        "updatedAt" : "2019-03-07T12:35:19Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "4f342449-2044-425d-87ec-641197cc09bf",
        "parentId" : "7c77637d-686e-4da3-8b53-ad3e1e8a3a2e",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "It does not always need to cast, but `ensureConforms` would not work here because we always cast to a type that is equal modulo spliced type aliases. \r\n\r\nA recording of the splice into something that is not the type alias `$splice` in `quoted.Type` could avoid this cast altogether. I intend to do this in a future PR, I will need it to hide internal encoding from the user and in #5297.",
        "createdAt" : "2019-03-06T09:32:10Z",
        "updatedAt" : "2019-03-07T12:35:19Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc3a8dd30cd322add83353b9988618e9e7e6ae3f",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +79,83 @@  protected def addSpliceCast(tree: Tree)(implicit ctx: Context): Tree = {\n    val tp = checkType(tree.sourcePos).apply(tree.tpe.widenTermRefExpr)\n    tree.cast(tp).withSpan(tree.span)\n  }\n"
  },
  {
    "id" : "d3131c9f-856c-469e-a9f4-eb44644bf12f",
    "prId" : 5846,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5846#pullrequestreview-211823957",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc4160cc-6942-463f-91f8-f6d25696f1b6",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "The logic here is very hard to follow, to the point where I cannot be sure it is correct. \r\nA clearer formulation would be:\r\n```\r\nval needsCheck =\r\n  tp.isInstanceOf[ThisType] || sym.is(Param) || sym.owner.isTerm\r\nif (sym.exists && needsCheck && !sym.isStaticOwner && !levelOK(sym)) \r\n  tryHeal(sym, tp, pos)\r\nelse\r\n  None\r\n```\r\nand it would be good to have further explanations in comments.\r\n",
        "createdAt" : "2019-03-05T15:10:13Z",
        "updatedAt" : "2019-03-07T12:35:19Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "c2d45d4c-d7de-409b-b495-9ec230826f07",
        "parentId" : "fc4160cc-6942-463f-91f8-f6d25696f1b6",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I partially refactored it. ",
        "createdAt" : "2019-03-06T09:25:02Z",
        "updatedAt" : "2019-03-07T12:35:19Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "6f095ecc-c043-492d-8038-5c4c7b1ea47d",
        "parentId" : "fc4160cc-6942-463f-91f8-f6d25696f1b6",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "`shouldtryHealable` can be a `def`, since it is only called after 3 other conditions. \r\nIt would be good to add a short comment to each of the 3 lines of shouldTryHealable, indicating why we\r\nshould try to heal in this case.",
        "createdAt" : "2019-03-06T13:39:53Z",
        "updatedAt" : "2019-03-07T12:35:19Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "7aa6eace-c18a-4d90-b5e5-4e6b51401920",
        "parentId" : "fc4160cc-6942-463f-91f8-f6d25696f1b6",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "After playing around with this condition I figured out that is was checking is the symbol is a reference to a class (but not a `this.type`). I updated the code accordingly.",
        "createdAt" : "2019-03-07T12:38:02Z",
        "updatedAt" : "2019-03-07T12:38:02Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "84b4c888-b798-4a19-88e5-448ed6680cdb",
        "parentId" : "fc4160cc-6942-463f-91f8-f6d25696f1b6",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Ah, that clarifies things!",
        "createdAt" : "2019-03-07T14:49:53Z",
        "updatedAt" : "2019-03-07T14:49:53Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc3a8dd30cd322add83353b9988618e9e7e6ae3f",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +152,156 @@\n    if (sym.exists && !sym.isStaticOwner && !isClassRef && !levelOK(sym))\n      tryHeal(sym, tp, pos)\n    else\n      None"
  }
]