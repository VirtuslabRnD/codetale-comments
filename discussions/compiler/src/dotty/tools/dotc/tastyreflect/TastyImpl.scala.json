[
  {
    "id" : "faa4b815-66f1-4bc8-b3f5-690712c3ba07",
    "prId" : 4976,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4976#pullrequestreview-148451188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9618530-1e41-4386-b310-43bf70e08597",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Format the following line into several lines?",
        "createdAt" : "2018-08-22T11:50:16Z",
        "updatedAt" : "2018-08-22T12:08:19Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "2ab04697-406d-41cb-b14d-093e898af583",
        "parentId" : "a9618530-1e41-4386-b310-43bf70e08597",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Done",
        "createdAt" : "2018-08-22T12:08:39Z",
        "updatedAt" : "2018-08-22T12:08:39Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5399da391cad5b1f646663c2c75380113a96795",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +2,6 @@\nimport dotty.tools.dotc.core._\n\nclass TastyImpl(val rootContext: Contexts.Context)\n    extends scala.tasty.Tasty"
  },
  {
    "id" : "c3e0fa85-61e1-4c3b-a226-99f414c40e01",
    "prId" : 4904,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4904#pullrequestreview-144806922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1027267-b27b-460e-957e-ed4c8b690313",
        "parentId" : null,
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "Ditto, why drop that TODO?",
        "createdAt" : "2018-08-09T12:04:22Z",
        "updatedAt" : "2018-08-09T13:48:40Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      }
    ],
    "commit" : "e590993bc49be6ff2827dd3fc1b3581494609e50",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +113,117 @@  object SimpleSelector extends SimpleSelectorExtractor {\n    def unapply(x: ImportSelector)(implicit ctx: Context): Option[Id] = x match {\n      case x: untpd.Ident => Some(x)\n      case _ => None\n    }"
  },
  {
    "id" : "83deb2dc-31a5-42d1-a303-2ac9d63cbeee",
    "prId" : 4877,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4877#pullrequestreview-141911940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1898893-9bc0-4a2b-bdc9-9a5bbf196c50",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Is it possible that `patterns` only contain `SeqLiteral`?",
        "createdAt" : "2018-07-31T09:50:45Z",
        "updatedAt" : "2018-07-31T13:48:39Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "e3848adb-19ec-43bf-83fe-77a17e48a631",
        "parentId" : "b1898893-9bc0-4a2b-bdc9-9a5bbf196c50",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Only the last one can one can have the `SeqLiteral` as only the last argument can be a varargs.",
        "createdAt" : "2018-07-31T10:50:55Z",
        "updatedAt" : "2018-07-31T13:48:39Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "87116108-af92-41f5-9593-1e332ba6c425",
        "parentId" : "b1898893-9bc0-4a2b-bdc9-9a5bbf196c50",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "1. It's nice to have a link to test case here, as it's really difficult to figure out the test case\r\n2. The code fails to handle the following case:\r\n\r\n```Scala\r\ncase class D(b: B[_]*)\r\n\r\nclass Test {\r\n  def f2(d: D) = d match {\r\n    case D(a, b1, b2) => ()\r\n  }\r\n}\r\n```",
        "createdAt" : "2018-07-31T11:34:48Z",
        "updatedAt" : "2018-07-31T13:48:39Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "457b5542ea708cd5c400a6f4919b357bcac86ea5",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +594,598 @@      private def effectivePatterns(patterns: List[Pattern]): List[Pattern] = patterns match {\n        case patterns0 :+ Trees.SeqLiteral(elems, _) => patterns0 ::: elems\n        case _ => patterns\n      }\n    }"
  },
  {
    "id" : "4de463fa-1de2-411e-b8d8-05806a4be756",
    "prId" : 4824,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4824#pullrequestreview-139572062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a1734f2-3340-4ab9-a902-7bb14f5fbb65",
        "parentId" : null,
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "Do we have tests for this code?",
        "createdAt" : "2018-07-23T16:43:26Z",
        "updatedAt" : "2018-07-23T16:43:26Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      },
      {
        "id" : "cdc3b265-5d58-434c-bb49-3caea67fbb73",
        "parentId" : "8a1734f2-3340-4ab9-a902-7bb14f5fbb65",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "In #4645, but it will take some time to be merged. ",
        "createdAt" : "2018-07-23T17:17:11Z",
        "updatedAt" : "2018-07-23T17:17:11Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "d85f1f21e622c9456ccf5bc87a940672ea9b31e1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +572,576 @@        case lit: tpd.Literal @unchecked => Some(lit)\n        case ref: tpd.RefTree @unchecked if ref.isTerm => Some(ref)\n        case ths: tpd.This @unchecked => Some(ths)\n        case _ => None\n      }"
  },
  {
    "id" : "a090037b-b230-4ea8-b18e-cc2bd0772618",
    "prId" : 4714,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4714#pullrequestreview-132167536",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70033e0e-95aa-4491-a0e5-3d4a19e7ea3d",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "`asInstanceOf[tpd.TypeBoundsTree]` is unnecessary. Same for the line before.",
        "createdAt" : "2018-06-25T08:06:43Z",
        "updatedAt" : "2018-06-25T08:24:34Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "660e5b79-7465-42a2-bcae-507e55e12f1d",
        "parentId" : "70033e0e-95aa-4491-a0e5-3d4a19e7ea3d",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "`TypeBoundsTree` here is of type `tpd.Tree` but guaranteed to be `tpd.TypeBoundsTree` by the extractor, the cast is necessary.",
        "createdAt" : "2018-06-25T16:06:43Z",
        "updatedAt" : "2018-06-25T16:06:43Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "6165e711-51a7-45d6-b55f-cecc13699c4a",
        "parentId" : "70033e0e-95aa-4491-a0e5-3d4a19e7ea3d",
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "Ah, and this has all the usual dangers we've identified in our draft :-|... looking forward to a fix!",
        "createdAt" : "2018-06-26T19:17:48Z",
        "updatedAt" : "2018-06-26T19:17:48Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7c6f76dfca1a30916f16f1e87a742c965a35113",
    "line" : 272,
    "diffHunk" : "@@ -1,1 +725,729 @@    def tpe(implicit ctx: Context): TypeBounds = bounds.tpe.asInstanceOf[Types.TypeBounds]\n    def low(implicit ctx: Context): TypeTree = bounds.asInstanceOf[tpd.TypeBoundsTree].lo\n    def hi(implicit ctx: Context): TypeTree = bounds.asInstanceOf[tpd.TypeBoundsTree].hi\n  }\n"
  },
  {
    "id" : "23a6c6f1-46e2-443d-b242-95ddbccf4426",
    "prId" : 4714,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4714#pullrequestreview-131678977",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6710eb4-83d9-41f2-adaa-97fef00b7c9e",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Calling `ClassDefDeco` seems to create unnecessary indirection here.\r\n\r\nAnother thought irrelevant to this PR but about the design: `ClassDef` and `ClassDefDeco` seem to have some duplication (that is why `ClassDefDeco` is called above). It seems possible to simplify the protocol between `tasty` API and concrete implementation such that extractors are implemented in the abstract API? Just a thought, no need to address in this PR.",
        "createdAt" : "2018-06-25T08:23:58Z",
        "updatedAt" : "2018-06-25T08:24:35Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "2c508bae-d09e-487c-950f-a5964ab9e8bc",
        "parentId" : "f6710eb4-83d9-41f2-adaa-97fef00b7c9e",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "This was a simple way to reduce code duplication. I'm considering extending the `ClassDefAPI` to make it the result of the extractor (with name-based pattern matching). This way there will be only one instantiation and maybe the contents can be lazily extracted.",
        "createdAt" : "2018-06-25T16:09:59Z",
        "updatedAt" : "2018-06-25T16:09:59Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7c6f76dfca1a30916f16f1e87a742c965a35113",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +187,191 @@      case x: tpd.TypeDef @unchecked if x.isClassDef =>\n        val deco = ClassDefDeco(x)\n        Some((x.name.toString, deco.constructor, deco.parents, deco.self, deco.body))\n      case _ => None\n    }"
  },
  {
    "id" : "5337138d-4ff0-4f50-ba88-edf4d047d9ab",
    "prId" : 4682,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4682#pullrequestreview-129915152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "376002ab-5713-4b3c-b632-ca86437f49ca",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I find the name a little misleading, what about `TypeProject`? Then we can keep using `TypeSelect` as before.",
        "createdAt" : "2018-06-19T09:53:12Z",
        "updatedAt" : "2018-06-19T09:53:43Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "389ec313-46df-4cc3-b395-3994641b9c8f",
        "parentId" : "376002ab-5713-4b3c-b632-ca86437f49ca",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Users would write the extractors as `Type.TypeSelect(_, _)` and `Type.TermSelect(_, _)`. We should have a pass on all names later to make sure all names are good.",
        "createdAt" : "2018-06-19T10:48:24Z",
        "updatedAt" : "2018-06-19T10:48:24Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3b24869303d26636bde1c87318d5ad430ed6b32",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +566,570 @@        case x: tpd.Select @unchecked if x.isType && x.qualifier.isType => Some(x.qualifier, x.name.toString)\n        case _ => None\n      }\n    }\n"
  },
  {
    "id" : "46ff1137-e92a-4d1f-a62b-c4407bfcd818",
    "prId" : 4675,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4675#pullrequestreview-129513610",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "024f2f3c-bac6-4dd4-9383-5edfb1dba2e1",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "When used in a traverser or accumulator, a method-select may qualify. Also, it may return true for implicit params of extractors. Maybe add a doc for potential misuse.",
        "createdAt" : "2018-06-18T10:58:42Z",
        "updatedAt" : "2018-06-18T11:06:24Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "193386a9f325373a84fd132823cc588c996c8c3e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +475,479 @@      def unapply(x: Pattern)(implicit ctx: Context): Option[Term] = x match {\n        case lit: tpd.Literal @unchecked => Some(lit)\n        case ref: tpd.RefTree @unchecked if ref.isTerm => Some(ref)\n        case _ => None\n      }"
  },
  {
    "id" : "97997c51-111f-4cf1-aced-22bf101ccb16",
    "prId" : 4601,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4601#pullrequestreview-128504325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f2f9430-71fe-47b4-b136-ce887e919e5e",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Given the name `synthetic`, I cannot justify the change. Maybe a doc for `Synthetic`, I naively assume synthetic bounds are also synthetic.",
        "createdAt" : "2018-06-13T08:02:43Z",
        "updatedAt" : "2018-06-13T18:18:11Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "b2e49981-7930-4ae1-bf04-241a515356c2",
        "parentId" : "4f2f9430-71fe-47b4-b136-ce887e919e5e",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I will add some documentation. ",
        "createdAt" : "2018-06-13T08:20:32Z",
        "updatedAt" : "2018-06-13T18:18:11Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "3e768143-3e1d-49a7-b6fe-c5e5e36bba2a",
        "parentId" : "4f2f9430-71fe-47b4-b136-ce887e919e5e",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Added",
        "createdAt" : "2018-06-13T18:19:07Z",
        "updatedAt" : "2018-06-13T18:19:08Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "78e4ed7e9cf7d4726dd397b352b472469ddd7b8f",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +542,546 @@        case _ => false\n      }\n    }\n\n    object TypeIdent extends TypeIdentExtractor {"
  }
]