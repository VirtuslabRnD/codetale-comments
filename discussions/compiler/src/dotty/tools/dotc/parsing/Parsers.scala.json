[
  {
    "id" : "ff4b06d3-022e-4a17-acaa-e4faff729848",
    "prId" : 12341,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/12341#pullrequestreview-652704598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ab81054-8a07-4ad7-9049-1dd63f87b017",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Would be nice to add a comment mentioning that we can strip the variance because it's inferred.",
        "createdAt" : "2021-05-05T20:03:01Z",
        "updatedAt" : "2021-05-05T20:10:25Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "9150d75d-28f1-44cf-8f71-c3357105245a",
        "parentId" : "0ab81054-8a07-4ad7-9049-1dd63f87b017",
        "authorId" : "f7c6b5d4-6d93-4f3d-b583-a110d7a49c7d",
        "body" : "@smarter Added a comment explaining the decision to just strip the variance",
        "createdAt" : "2021-05-05T20:11:05Z",
        "updatedAt" : "2021-05-05T20:11:05Z",
        "lastEditedBy" : "f7c6b5d4-6d93-4f3d-b583-a110d7a49c7d",
        "tags" : [
        ]
      }
    ],
    "commit" : "653c5fd351584f78a602ed7861c8ed4d6b693707",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1454,1458 @@      // This is ok, because `-Ykind-projector` is for cross-compiling existing Scala 2 code, not for writing new code,\n      // we may assume that variance annotations have already been checked by the Scala 2 compiler.\n      val unannotatedName = if (isVarianceAnnotated) name.mapLast(_.drop(1)) else name\n      TypeDef(unannotatedName, WildcardTypeBoundsTree()).withFlags(Param)\n    }"
  },
  {
    "id" : "2e3c0a7f-a99b-44ff-9dec-781f69af31be",
    "prId" : 10861,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10861#pullrequestreview-557821032",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24071c47-d2ac-46fc-988c-b0d964e4c99a",
        "parentId" : null,
        "authorId" : "6998ebc0-40b8-4e52-b4f8-721fd5d8c0a9",
        "body" : "should this comment be updated? Is this comment a pseudo grammar? Just from the comment it is not clear which \"with\" is a keyword and whether \",\" is a token or an informal alternative.",
        "createdAt" : "2020-12-23T11:50:10Z",
        "updatedAt" : "2021-01-01T12:35:24Z",
        "lastEditedBy" : "6998ebc0-40b8-4e52-b4f8-721fd5d8c0a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "625f7540a325e4d13781fdd2785d3308247e07b2",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +3707,3711 @@      r\n\n    /** with Template, with EOL <indent> interpreted */\n    def withTemplate(constr: DefDef, parents: List[Tree]): Template =\n      if in.token != WITH then syntaxError(em\"`with` expected\")"
  },
  {
    "id" : "b3889e44-8c39-4ad6-b53d-f79ab8ff31f2",
    "prId" : 10635,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10635#pullrequestreview-544924713",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27382536-4552-48e8-97fd-67c11668b560",
        "parentId" : null,
        "authorId" : "6998ebc0-40b8-4e52-b4f8-721fd5d8c0a9",
        "body" : "That's not an issue of this PR, but why are `Singletons` required to be non-empty?",
        "createdAt" : "2020-12-04T12:42:03Z",
        "updatedAt" : "2020-12-04T12:42:04Z",
        "lastEditedBy" : "6998ebc0-40b8-4e52-b4f8-721fd5d8c0a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6a1a3d71f923d5f31b74efeeb44bfbd8c8e11d6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1093,1097 @@     *                 |  Singleton ‘.’ id\n     * -- not yet      |  Singleton ‘(’ Singletons ‘)’\n     * -- not yet      |  Singleton ‘[’ Types ‘]’\n     */\n    def singleton(): Tree ="
  },
  {
    "id" : "2d154657-883b-4f1a-a5b1-53f98d6a6b91",
    "prId" : 10538,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10538#pullrequestreview-542058730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4585c15b-f7f3-4323-8536-2e48c9e11b42",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Do we miss `else` here?\r\n```suggestion\r\n      else possibleTemplateStart() // consumes a WITHEOL token\r\n```",
        "createdAt" : "2020-12-01T09:04:34Z",
        "updatedAt" : "2020-12-01T19:11:04Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "8b6ddb7d-9ede-4d5c-ae7c-a5e53fe1e81d",
        "parentId" : "4585c15b-f7f3-4323-8536-2e48c9e11b42",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "No. `possibleTemplateStart` expects a `{` or a `WITHEOL`.\r\n",
        "createdAt" : "2020-12-01T16:09:04Z",
        "updatedAt" : "2020-12-01T19:11:04Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fde702224490007a304f94f15787b307f59a89b",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +3718,3722 @@    def withTemplate(constr: DefDef, parents: List[Tree]): Template =\n      if in.token != WITHEOL then accept(WITH)\n      possibleTemplateStart() // consumes a WITHEOL token\n      val (self, stats) = templateBody()\n      Template(constr, parents, Nil, self, stats)"
  },
  {
    "id" : "51916c88-41ed-4383-be90-ee2fce7729df",
    "prId" : 9949,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9949#pullrequestreview-503172913",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcb0f60a-5eeb-435f-b893-d8479fbb1108",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Is this code path still needed for compatibility? If so, should we issue a deprecation warning here?",
        "createdAt" : "2020-10-06T12:29:53Z",
        "updatedAt" : "2020-10-06T15:34:51Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "926bc2f0-eda0-4d8a-b3f9-d649ab438129",
        "parentId" : "fcb0f60a-5eeb-435f-b893-d8479fbb1108",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "So, far, we were changing syntax without warnings. But maybe we should change that now...",
        "createdAt" : "2020-10-06T14:27:31Z",
        "updatedAt" : "2020-10-06T15:34:51Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "ab493ce8-01a2-475b-9af0-804e65c544aa",
        "parentId" : "fcb0f60a-5eeb-435f-b893-d8479fbb1108",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I tried to deprecate but that does not work for the current cycle since we still use `given _` in bootstrap code. So we could deprecate at the earliest once 3.0 M1 is released. Or we just rip off the bandaid and disallow it altogether for M2.\r\n",
        "createdAt" : "2020-10-06T15:36:11Z",
        "updatedAt" : "2020-10-06T15:36:11Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "34b61e74-14ab-471b-811c-f6b896108971",
        "parentId" : "fcb0f60a-5eeb-435f-b893-d8479fbb1108",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "We can do a bootstrap before M1 is released (and we probably should do one to make sure everything works OK with the new naming scheme)",
        "createdAt" : "2020-10-06T15:37:40Z",
        "updatedAt" : "2020-10-06T15:37:40Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "ed9614ad-9678-4d8b-97ff-a23914223912",
        "parentId" : "fcb0f60a-5eeb-435f-b893-d8479fbb1108",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "OK. We can deprecate again once that's done\r\n",
        "createdAt" : "2020-10-06T16:56:19Z",
        "updatedAt" : "2020-10-06T16:56:20Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f48b8166b0c0539c093005a2c4e92635d1817430",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +3119,3123 @@              if in.token == USCORE then\n                in.nextToken()\n                ImportSelector(givenSelectorId(start)) // Let the selector span all of `given _`; needed for -Ytest-pickler\n              else if canStartTypeTokens.contains(in.token) then\n                ImportSelector(givenSelectorId(start), bound = rejectWildcardType(infixType()))"
  },
  {
    "id" : "28bfb246-606a-4ad3-a9c5-1c706dbfd4c1",
    "prId" : 9837,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9837#pullrequestreview-494599641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bfe6822-86af-44bc-bedf-27e3cb433574",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "We need to update the `syntax.md` file with the syntax change.",
        "createdAt" : "2020-09-23T12:22:25Z",
        "updatedAt" : "2020-09-24T10:52:21Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9caa7e607c2540ae3e632a95c643596e19c50d3",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2635,2639 @@        if in.token == AT && sourceVersion.isAtLeast(`3.1`) then\n          deprecationWarning(s\"`@` bindings have been deprecated; use `as` instead\", in.offset)\n\n        val offset = in.skipToken()\n"
  },
  {
    "id" : "1ab185ef-89a2-4eba-b7c4-5d87b5b219d0",
    "prId" : 9169,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9169#pullrequestreview-429713806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60e6e0ef-0189-448c-b8de-c294a25971d5",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Instead of checking the span, can't we check if the tree is empty/null?",
        "createdAt" : "2020-06-12T11:00:33Z",
        "updatedAt" : "2020-06-12T11:01:00Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "67bf0a6e-7e29-4797-8927-7d29b9a108fa",
        "parentId" : "60e6e0ef-0189-448c-b8de-c294a25971d5",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Both for `finally ;` and `finally null` the `expr` is `Literal(Constant(null))` but only the latter has a span.",
        "createdAt" : "2020-06-12T12:51:31Z",
        "updatedAt" : "2020-06-12T12:51:31Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aa44f5c8a499759e080013b824bece5d1a8d102",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2008,2012 @@              in.nextToken();\n              val expr = subExpr()\n              if expr.span.exists then expr\n              else Literal(Constant(())) // finally without an expression\n            }"
  },
  {
    "id" : "7899bbc1-8ba3-4076-8962-4b6fd5331a06",
    "prId" : 8630,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8630#pullrequestreview-383682980",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8738b03-54b8-4f90-99a7-c71dbd8fe24d",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "This seems to be unnecessary.",
        "createdAt" : "2020-03-30T08:33:01Z",
        "updatedAt" : "2020-03-30T19:38:00Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "6f2467c1-f733-4337-b9f3-0232c9f411c5",
        "parentId" : "e8738b03-54b8-4f90-99a7-c71dbd8fe24d",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "This is so that someone can come back and remove the old syntax",
        "createdAt" : "2020-03-30T09:34:29Z",
        "updatedAt" : "2020-03-30T19:38:00Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb01e6f81f8e7e7738e9671df651de237a2f25ff",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +34,38 @@  import reporting.messages._\n\n  val AllowOldWhiteboxSyntax = true\n\n  case class OpInfo(operand: Tree, operator: Ident, offset: Offset)"
  },
  {
    "id" : "bcf75e9f-7e00-4bfe-b45b-c7f52ec1e0b2",
    "prId" : 7794,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7794#pullrequestreview-334053908",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1b49669-dc54-4ae2-9988-1e1d8fda876a",
        "parentId" : null,
        "authorId" : "128563de-a925-4397-af34-450c7978a8d2",
        "body" : "The rules still accept `given [A]: (given showA: Show[A]) => Show[List[A]]` e.g. :\r\n```scala\r\ntrait Show[-A] with\r\n  def show(a:A): String\r\n\r\ngiven Show[String] = x => x\r\ngiven Show[Int] = _.toString\r\n\r\ngiven [A,B]: (given sA: Show[A], sB: Show[B]) => Show[(A,B)] = (a,b) => s\"(${sA.show(a)}, ${sB.show(b)})\"\r\ngiven [A]: (given Show[A]) => Show[List[A]] = as => as.map(summon[Show[A]].show).mkString(\", \")\r\ngiven showOption[A]: (given Show[A]) => Show[Option[A]] = o => o.map(summon[Show[A]].show).fold(\"Nothing\")(s => s\"Some($s)\")\r\ngiven showEither[A,B]: (given sA: Show[A], sb: Show[B]) => Show[Either[A,B]] = _.fold(a => s\"Left(${summon[Show[A]].show(a)})\", b => s\"Right(${summon[Show[B]].show(b)})\")\r\n\r\n@main def ShowDemo =\r\n  println(summon[Show[(Int, String)]].show(0 -> \"hello\"))\r\n  println(summon[Show[List[Int]]].show(List(1,2,3)))\r\n  println(summon[Show[Option[Int]]].show(Some(25)))\r\n  println(summon[Show[Either[Int, String]]].show(Left(-1)))\r\n  println(summon[Show[Either[Int, String]]].show(Right(\"success message\")))\r\n```",
        "createdAt" : "2019-12-18T13:51:00Z",
        "updatedAt" : "2019-12-18T16:16:41Z",
        "lastEditedBy" : "128563de-a925-4397-af34-450c7978a8d2",
        "tags" : [
        ]
      },
      {
        "id" : "558f63b7-d009-4b55-ab25-7dc4e116ce59",
        "parentId" : "f1b49669-dc54-4ae2-9988-1e1d8fda876a",
        "authorId" : "128563de-a925-4397-af34-450c7978a8d2",
        "body" : "So this syntax is still ok to be alongside the other?",
        "createdAt" : "2019-12-18T15:28:29Z",
        "updatedAt" : "2019-12-18T16:16:41Z",
        "lastEditedBy" : "128563de-a925-4397-af34-450c7978a8d2",
        "tags" : [
        ]
      }
    ],
    "commit" : "93258da0637aeed31f68b0cb11d6b530dc189d43",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +3471,3475 @@            def makeGiven(params: List[ValDef]): List[ValDef] =\n              params.map(param => param.withMods(param.mods | Given))\n            def conditionalParents(): List[Tree] =\n              accept(ARROW)\n              if in.token == LPAREN && followingIsParam() then"
  },
  {
    "id" : "dc08aad4-c6c4-4564-ae2f-2126a2bec47f",
    "prId" : 7794,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7794#pullrequestreview-333981395",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b5234fa-47d1-45e0-b34a-10e8490b2aa8",
        "parentId" : null,
        "authorId" : "128563de-a925-4397-af34-450c7978a8d2",
        "body" : "there should probably be a neg test for curried param lists:\r\n\r\n```scala\r\ntrait Show[-A] with\r\n  def show(a:A): String\r\n\r\ngiven Show[String] = x => x\r\ngiven Show[Int] = _.toString\r\n\r\ngiven [A,B]: (sA: Show[A])(sB: Show[B]) => Show[(A,B)] = (a,b) => s\"(${sA.show(a)}, ${sB.show(b)})\"\r\ngiven [A,B,C]: (Show[A])(Show[B])(Show[C]) => Show[(A,B,C)] = (a,b,c) => s\"(${summon[Show[A]].show(a)}, ${summon[Show[B]].show(b)}, ${summon[Show[C]].show(c)})\"\r\ngiven showEither[A,B]: (sA: Show[A])(sb: Show[B]) => Show[Either[A,B]] = _.fold(a => s\"Left(${summon[Show[A]].show(a)})\", b => s\"Right(${summon[Show[B]].show(b)})\")\r\n\r\n@main def ShowDemo =\r\n  println(summon[Show[(Int, String)]].show(0 -> \"hello\"))\r\n```",
        "createdAt" : "2019-12-18T14:24:07Z",
        "updatedAt" : "2019-12-18T16:16:41Z",
        "lastEditedBy" : "128563de-a925-4397-af34-450c7978a8d2",
        "tags" : [
        ]
      }
    ],
    "commit" : "93258da0637aeed31f68b0cb11d6b530dc189d43",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +3486,3490 @@            val isConditional =\n              in.token == ARROW\n              && vparamss.length == 1\n              && (hasLabel || name.isEmpty && tparams.isEmpty)\n            if !isConditional then checkAllGivens(vparamss, \"parameter of given instance\")"
  },
  {
    "id" : "d284d753-6319-4566-a9ef-fbb2ed200c67",
    "prId" : 7670,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7670#pullrequestreview-326629590",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9de13974-0a9f-4d27-9254-dccbda27a890",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Use `` `<:` `` instead of `` `<:' `` (same with inline) ? Both conventions seem to be used in the parser, but markdown-like syntax is probably more user-friendly.",
        "createdAt" : "2019-12-03T19:23:07Z",
        "updatedAt" : "2019-12-03T19:23:07Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "c078f7c5-effd-4a1b-96c3-8011840a614c",
        "parentId" : "9de13974-0a9f-4d27-9254-dccbda27a890",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Let's discuss which one to use and then standardize. I'll open an issue.",
        "createdAt" : "2019-12-04T06:43:55Z",
        "updatedAt" : "2019-12-04T06:43:56Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f41f4b87c617ac0764c4c6aca46bd28b17a3b464",
    "line" : 179,
    "diffHunk" : "@@ -1,1 +3436,3440 @@              else if in.token == SUBTYPE then\n                if !mods.is(Inline) then\n                  syntaxError(\"`<:' is only allowed for given with `inline' modifier\")\n                in.nextToken()\n                TypeBoundsTree(EmptyTree, toplevelTyp()) :: Nil"
  },
  {
    "id" : "1f38c5ed-6859-43cf-9d70-186793fc0550",
    "prId" : 7276,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7276#pullrequestreview-293097721",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d223862b-525d-4886-8b85-cc26bce56b8a",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "nitpick: the name `newSyntax` is not informative nor accurate.",
        "createdAt" : "2019-09-25T13:57:55Z",
        "updatedAt" : "2019-09-25T15:42:01Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d470ddd90f3e8265ca58ab73c5b2f27e5bf930a",
    "line" : 198,
    "diffHunk" : "@@ -1,1 +1670,1674 @@          t = inSepRegion(LBRACE, RBRACE) {\n            expr1Rest(postfixExprRest(simpleExprRest(t)), Location.ElseWhere)\n          }\n        if in.token == altToken then\n          if rewriteToOldSyntax() then revertToParens(t)"
  },
  {
    "id" : "55c2fd45-5939-4abc-9643-245d251dc0ff",
    "prId" : 7270,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7270#pullrequestreview-291747272",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09c814d1-cb91-49d7-8827-53cf4c80d906",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "The check does not handle code at top-level:\r\n\r\n```Scala\r\ntrait A\r\n    case class B() extends A\r\n    case object C extends A\r\n```",
        "createdAt" : "2019-09-23T10:08:52Z",
        "updatedAt" : "2019-09-23T10:11:28Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "bf0b67a5-b819-4b5f-9f54-278151c60570",
        "parentId" : "09c814d1-cb91-49d7-8827-53cf4c80d906",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "OK, I'll add a fix to the follow-up PR.",
        "createdAt" : "2019-09-23T12:44:08Z",
        "updatedAt" : "2019-09-23T12:44:08Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "25af394ed98d1cba7eedf3648d156f327c11491d",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +628,632 @@        if r.indentWidth < nextIndentWidth then\n          warning(i\"Line is indented too far to the right, or a `{' is missing\", in.next.offset)\n      case _ =>\n\n/* -------- REWRITES ----------------------------------------------------------- */"
  },
  {
    "id" : "c78ecd6c-2b69-4d0e-b385-561151d53da4",
    "prId" : 6994,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6994#pullrequestreview-271616900",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fafa8cba-4f7f-48ac-b2ac-f287963afaae",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "I'm pretty sure we discussed today that this PR shouldn't be mixed up with that possible future syntax. Hence I believe we should suggest `while ({ body; cond }) ()` here instead.",
        "createdAt" : "2019-08-06T21:09:34Z",
        "updatedAt" : "2019-08-06T21:11:44Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "46d232467fd44d117b6f82089f1420e46dda857d",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +1333,1337 @@        in.errorOrMigrationWarning(\n          i\"\"\"`do <body> while <cond>' is no longer supported,\n             |use `while {<body> ; <cond>} do ()' instead.\n             |The statement can be rewritten automatically under -language:Scala2 -migration -rewrite.\n           \"\"\")"
  },
  {
    "id" : "753762c2-0b7e-46f5-bda0-5c8925e800d1",
    "prId" : 6994,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6994#pullrequestreview-271626383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "136d2975-7a2e-4f23-8487-039390c2dd6b",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "This is incorrect, as both `body` and `block` could define symbols with the same name. If they are put together in a single `Block`, the scopes will clash.",
        "createdAt" : "2019-08-06T21:11:26Z",
        "updatedAt" : "2019-08-06T21:11:44Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "6d3a0132-cfbc-43ce-8710-9d6c1f5716c6",
        "parentId" : "136d2975-7a2e-4f23-8487-039390c2dd6b",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We will need a test for this.",
        "createdAt" : "2019-08-06T21:14:47Z",
        "updatedAt" : "2019-08-06T21:14:48Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "350b17a0-f643-4702-8870-8bb3158a64c9",
        "parentId" : "136d2975-7a2e-4f23-8487-039390c2dd6b",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Actually, `body` and `cond` are already blocks if they have definitions. I added some tests in #7002. Did I miss some other definitions that could be represented differently?",
        "createdAt" : "2019-08-06T21:30:49Z",
        "updatedAt" : "2019-08-06T21:30:49Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "46d232467fd44d117b6f82089f1420e46dda857d",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +1354,1358 @@            patch(source, cond.span.endPos, \"}) ()\")\n          }\n          WhileDo(Block(body :: Nil, cond), Literal(Constant(())))\n        }\n      case TRY =>"
  },
  {
    "id" : "3b0f28e8-08b3-4992-88d3-26acfc91b4ce",
    "prId" : 6610,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6610#pullrequestreview-246072286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "472aa9d9-facf-4933-b1e1-2d7540961244",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Should it be tpnme ?",
        "createdAt" : "2019-06-05T14:57:31Z",
        "updatedAt" : "2019-06-05T14:57:31Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "da98f5fd-7c69-498d-a91b-e861308d5b8e",
        "parentId" : "472aa9d9-facf-4933-b1e1-2d7540961244",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "No, the idents coming form the token stream are always TermIdents.",
        "createdAt" : "2019-06-05T15:09:02Z",
        "updatedAt" : "2019-06-05T15:09:03Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3db1f1442f543c51db1573bae4251820219f9c3f",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1077,1081 @@        typeBounds().withSpan(Span(start, in.lastOffset, start))\n      }\n      else if (isIdent(nme.?)) {\n        val start = in.skipToken()\n        typeBounds().withSpan(Span(start, in.lastOffset, start))"
  },
  {
    "id" : "0783e8d5-4e4c-4134-aaf9-3f911bfa2159",
    "prId" : 6002,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6002#pullrequestreview-209776697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab92a853-d25f-492d-98bd-3540a6d127ec",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "What about calling `template` here instead of `templateOpt`?",
        "createdAt" : "2019-03-01T16:40:30Z",
        "updatedAt" : "2019-03-01T16:40:39Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "e3532381-f510-42bf-a2e4-7eee2ff280d7",
        "parentId" : "ab92a853-d25f-492d-98bd-3540a6d127ec",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "`template` requires parents, but the template body can be empty. ",
        "createdAt" : "2019-03-01T20:44:43Z",
        "updatedAt" : "2019-03-01T20:44:43Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "7edf491cc90e8f067c6a85b7b816b39166c202b7",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +2556,2560 @@      val clsName = modName.toTypeName\n      val constr = classConstr()\n      val templ = templateOpt(constr, isEnum = true)\n      templ match {\n        case Template(_, _, _, List(EmptyTree)) =>"
  },
  {
    "id" : "d8769fc4-f704-4052-ab2c-b2f49811822c",
    "prId" : 5918,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5918#pullrequestreview-205599398",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd315eb9-d5e4-4137-a327-f07d5b2d1ca0",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We currently only support `'x`, `'true`, `'false` and `'null` within a `'{ ... }` or `${ ... }`. Is there any reason not to support them outside when `isScala2Mode == false`?",
        "createdAt" : "2019-02-20T06:56:29Z",
        "updatedAt" : "2019-02-22T18:26:02Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "a6f6b230-2697-426d-a748-e301fabe4158",
        "parentId" : "fd315eb9-d5e4-4137-a327-f07d5b2d1ca0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We could also consider reintroducing  the syntax `'()` for quoted unit. It look more natural than `'{}`",
        "createdAt" : "2019-02-20T06:58:16Z",
        "updatedAt" : "2019-02-22T18:26:02Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b0c23466238b2b8b7b767496c87c19dfcb91931",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +745,749 @@          }\n          else {\n            migrationWarningOrError(em\"\"\"symbol literal '${in.name} is no longer supported,\n                                        |use a string literal \"${in.name}\" or an application Symbol(\"${in.name}\") instead,\n                                        |or enclose in braces '{${in.name}} if you want a quoted expression.\"\"\")"
  },
  {
    "id" : "021f30f0-1baf-426e-9821-f62eb2aaa97c",
    "prId" : 5705,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5705#pullrequestreview-192614789",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad20ba5f-cb81-4952-986f-199e8373fc51",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "The `offset` in the above looks dubious too ",
        "createdAt" : "2019-01-15T11:22:40Z",
        "updatedAt" : "2019-01-15T11:22:40Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "08d7e832-783c-420b-b63c-5997d0df70a6",
        "parentId" : "ad20ba5f-cb81-4952-986f-199e8373fc51",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I checked the positions of those trees and they look fine.",
        "createdAt" : "2019-01-15T12:12:38Z",
        "updatedAt" : "2019-01-15T12:12:39Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5326cafc453c1326b33baa0f7f49eb2be444eb1",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1699,1703 @@          case pt @ Ident(tpnme.WILDCARD_STAR) =>\n            migrationWarningOrError(\"The syntax `x @ _*' is no longer supported; use `x : _*' instead\", startOffset(p))\n            atPos(startOffset(p), offset) { Typed(p, pt) }\n          case pt =>\n            atPos(startOffset(p), 0) { Bind(name, pt) }"
  },
  {
    "id" : "2c6edf0c-37d5-44c1-8519-42298cf815ea",
    "prId" : 5693,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5693#pullrequestreview-192213334",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47bcb9ca-01e5-4586-9025-a234eeec0bff",
        "parentId" : null,
        "authorId" : "f0e99fe6-7475-4e53-b2d8-ac162a883496",
        "body" : "I experienced two weird behaviors in vscode related to zero-length diagnostics https://github.com/Microsoft/vscode/issues/66482 and end-of-line diagnostics https://github.com/Microsoft/vscode/issues/66481 making the current diagnostics render like this\r\n\r\n<img width=\"271\" alt=\"screenshot 2019-01-14 at 16 37 01\" src=\"https://user-images.githubusercontent.com/1408093/51122694-b405b500-181a-11e9-85b4-2efe0c7fd2c1.png\">\r\n\r\nI was hoping they would render like this instead\r\n\r\n![screenshot 2019-01-14 at 14 48 01](https://user-images.githubusercontent.com/1408093/51122725-c2ec6780-181a-11e9-9e4b-7acd5611b9e8.png)\r\n\r\nIt might be worth reverting the special handling of end-of-line diagnostics, but I'm not sure.",
        "createdAt" : "2019-01-14T15:38:53Z",
        "updatedAt" : "2019-01-14T15:39:11Z",
        "lastEditedBy" : "f0e99fe6-7475-4e53-b2d8-ac162a883496",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d9b44724fcf6f2d1b6bdc09a1682adcee9e62be",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +110,114 @@      val current = sourcePos(in.offset)\n      val last = sourcePos(in.lastOffset)\n      if (current.line != last.line) in.lastOffset else in.offset\n    }\n"
  },
  {
    "id" : "5e334b16-bd07-4d46-91c6-f18585865942",
    "prId" : 4672,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4672#pullrequestreview-243719606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fe88888-c405-4b24-8e14-bd4ac8180b49",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "We should update the syntax in the doc comment to account for this, and do the same in file `syntax.md`. Generally, we try parser code, parser comments and syntax file in sync.\r\n",
        "createdAt" : "2019-05-29T19:27:18Z",
        "updatedAt" : "2019-05-30T13:05:55Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "906fdcf0-9596-4246-bcde-39dc11a66ffe",
        "parentId" : "9fe88888-c405-4b24-8e14-bd4ac8180b49",
        "authorId" : "2c02aea2-3019-42f4-9678-8a2da637c660",
        "body" : "Done.",
        "createdAt" : "2019-05-30T10:05:50Z",
        "updatedAt" : "2019-05-30T13:05:55Z",
        "lastEditedBy" : "2c02aea2-3019-42f4-9678-8a2da637c660",
        "tags" : [
        ]
      }
    ],
    "commit" : "112aa55d80bfd626b336fbc57fb4f3b5caeec31c",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +929,933 @@          if (in.token == TLARROW)\n            atSpan(start, in.skipToken())(LambdaTypeTree(tparams, toplevelTyp()))\n          else if (in.token == ARROW) {\n            val arrowOffset = in.skipToken()\n            val body = toplevelTyp()"
  },
  {
    "id" : "b25f2808-c9f6-469b-b3da-517af129661a",
    "prId" : 3525,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3525#pullrequestreview-79227345",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27d51d5e-22b1-4f9b-b7a1-9ae9c1bdf019",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Why the change? The previous implementation would place the `^` under the `:` of an ascription, which seems to be what we want, no?",
        "createdAt" : "2017-11-27T16:19:20Z",
        "updatedAt" : "2017-12-06T15:59:54Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "dd264630-338b-40d0-9e5e-a0a324410c66",
        "parentId" : "27d51d5e-22b1-4f9b-b7a1-9ae9c1bdf019",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "In all other cases, the point is under the first letter of the name of the definition (e.g. for `def foo: Int = 1` the point is under `f`). This change means that I can always use the point of the definition tree to set the symbol position.",
        "createdAt" : "2017-11-27T16:30:17Z",
        "updatedAt" : "2017-12-06T15:59:54Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "6b19932c31f2932430cdaf77d127e1fc7db8ded1",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1183,1187 @@\n    def ascription(t: Tree, location: Location.Value) = atPos(startOffset(t)) {\n      in.skipToken()\n      in.token match {\n        case USCORE =>"
  },
  {
    "id" : "8c6329e0-b1a5-462b-bbc8-76af71d2d128",
    "prId" : 2432,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2432#pullrequestreview-38139532",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "840ce84a-74e8-410f-9bc9-94d9515447fe",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "But a `:` can legitimately appear in an argument list, e.g:\r\n```scala\r\nclass ann(x: Any) extends scala.annotation.Annotation\r\n\r\nobject Test {\r\n  val elem: Int = 1\r\n  class Foo @ann(elem: Float) (x: String)\r\n}\r\n```\r\n\r\nBanning multiple param lists in constructor annotations still seems better to me than having complex rules to guess whether something is or isn't an argument list :).",
        "createdAt" : "2017-05-15T13:37:28Z",
        "updatedAt" : "2017-05-23T09:03:59Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "ae8f550a-47f4-4c1d-be1b-faaf71b27f05",
        "parentId" : "840ce84a-74e8-410f-9bc9-94d9515447fe",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I don't see how banning multi param solves that problem?",
        "createdAt" : "2017-05-15T14:24:27Z",
        "updatedAt" : "2017-05-23T09:03:59Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "10e8623b-4966-472c-8ecf-cff7cba70685",
        "parentId" : "840ce84a-74e8-410f-9bc9-94d9515447fe",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Indeed, it seems that scalac always expects a primary constructor annotation to have exactly one parameter list (having zero parameter lists won't be parsed correctly), which is a more annoying restriction. I'm still not super enthusiastic about adding so much special-casing in the parser (this will need to be replicated in scala.meta for example, /cc @xeno-by), but I'm not opposed to it. The main annoyance is that if seemingly valid code is misinterpreted, you'll get a very confusing error message, but that could be left as a future improvement.",
        "createdAt" : "2017-05-15T14:53:58Z",
        "updatedAt" : "2017-05-23T09:03:59Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "0725a61c86ea973b6b05a9e09a3456ea7b980ac4",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +1374,1378 @@    /** Handle first argument of an argument list to an annotation of\n     *  a primary class constructor. If the current token either cannot\n     *  start an expression or is an identifier and is followed by `:`,\n     *  stop parsing the rest of the expression and return `EmptyTree`,\n     *  indicating that we should re-parse the expression as a parameter clause."
  },
  {
    "id" : "3ff20e10-a125-4e6c-aa3d-dbbf08c019e2",
    "prId" : 1958,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1958#pullrequestreview-24277918",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95c4f0d1-fd19-4e88-9e60-c3f64a04065e",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I'm not sure if it's a good idea to do this inside parser.\r\n\r\nWhen we introduce macros, we do have multiple level desugaring (expansion) in Namer. And as we already have all the facility to support multiple level desugaring, I think we probably should use that. I've done some changes in Namer to support multiple-level desugaring can be seen [here](https://github.com/lampepfl/dotty/pull/1899/files#diff-9a0f1e0125c91622a8fd5aea767e8dc2R375). It seems a `flatten` method is all that's needed.",
        "createdAt" : "2017-02-28T13:42:20Z",
        "updatedAt" : "2017-04-06T07:03:29Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "1c6b2644-0a3b-4426-9ee8-9327dfab8580",
        "parentId" : "95c4f0d1-fd19-4e88-9e60-c3f64a04065e",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I tried multi-level expansion first, including flattening, but it did not work. Essentially the compiler got confused with symbol attachments and I did not find a good way around it.",
        "createdAt" : "2017-02-28T16:10:45Z",
        "updatedAt" : "2017-04-06T07:03:29Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "30d8d878118c537ff82c88ef7ade8780b390bfae",
    "line" : 227,
    "diffHunk" : "@@ -1,1 +2146,2150 @@          .withMods(mods)\n      }\n      Thicket(clsDef :: modDef :: Nil)\n    }\n"
  },
  {
    "id" : "92c6605c-12fd-4fd2-854a-15932942f698",
    "prId" : 1847,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1847#pullrequestreview-15604339",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a90c6526-2cfe-43a9-b267-7f812c613876",
        "parentId" : null,
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "Good commit. Possible further idea: mention `id` in the comment for `isIdent`, also given they're not consistent? So authors of other comments can also find the right terminal name to use in comments?\r\n(Well, being consistent might be even better but I'm not sure what to pick).\r\nBut that shouldn't hold this PR.",
        "createdAt" : "2017-01-07T12:13:40Z",
        "updatedAt" : "2017-01-08T18:37:23Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      }
    ],
    "commit" : "feba6a41e0152bb27a8e4dfc275c2b078b9ace94",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +505,509 @@      atPos(startOffset(t), in.offset) { Select(t, ident()) }\n\n    /** Selectors ::= id { `.' id }\n     *\n     *  Accept `.' separated identifiers acting as a selectors on given tree `t`."
  },
  {
    "id" : "84cf9f92-4f6d-4c81-98b1-a45694d6041a",
    "prId" : 1775,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1775#pullrequestreview-11355610",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b72f6be3-e8c8-4b7b-8d03-e127cc18c9c7",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I think we need two levels of migration warnings: those that can be fixed in scala/dotty and those that can only be fixed (currently) in dotty,  for example the fact that we currently warn on every usage of `with` is quite annoying.",
        "createdAt" : "2016-12-05T10:41:56Z",
        "updatedAt" : "2016-12-17T20:50:40Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "effb87da-44cf-49fe-810f-4ddda1048dff",
        "parentId" : "b72f6be3-e8c8-4b7b-8d03-e127cc18c9c7",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Good point. ",
        "createdAt" : "2016-12-05T10:55:12Z",
        "updatedAt" : "2016-12-17T20:50:40Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e99511840915e2805e7a2c07571d3859a3db698",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1135,1139 @@            if (false) // Don't error yet, as the alternative syntax \"implicit (x: T) => ... \"\n                       // is not supported by Scala2.x\n              migrationWarningOrError(s\"This syntax is no longer supported; parameter needs to be enclosed in (...)\")\n\n            in.nextToken()"
  }
]