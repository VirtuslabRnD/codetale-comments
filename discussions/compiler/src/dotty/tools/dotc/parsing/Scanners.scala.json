[
  {
    "id" : "637dce89-bb0d-4a5e-893c-18862315cd75",
    "prId" : 9373,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9373#pullrequestreview-449746867",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f1736ce-ea86-4667-b684-78d380def4e5",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Can we avoid the `given` line in other places, using the same solution here?\r\n\r\n```Scala\r\ngiven ListOfListDecorator as AnyRef:\r\n```",
        "createdAt" : "2020-07-16T10:18:04Z",
        "updatedAt" : "2020-07-16T10:21:03Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "788c58ee-6d83-486c-ade0-539d400175c1",
        "parentId" : "7f1736ce-ea86-4667-b684-78d380def4e5",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "In general, the named ones needed to be in a given or they where not found in other classes. ",
        "createdAt" : "2020-07-16T11:09:22Z",
        "updatedAt" : "2020-07-16T11:09:22Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "88bb9547d1a970a99e11a390dd1e769316c7f9a4",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +49,53 @@    def length: Int = buf.length()\n    def last: Char = buf.charAt(buf.length() - 1)\n  end extension\n}\n"
  },
  {
    "id" : "1bb3b083-c40c-4a71-b338-34f9e7e3c48f",
    "prId" : 8309,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8309#pullrequestreview-358603562",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5501d1b9-686d-4660-be5f-85946edd5419",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Just wondering: Since you used indentation here, why not for the other parts? ",
        "createdAt" : "2020-02-13T12:45:57Z",
        "updatedAt" : "2020-02-13T12:45:57Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "6139a47c-320f-4a61-843a-ffaac177ccfa",
        "parentId" : "5501d1b9-686d-4660-be5f-85946edd5419",
        "authorId" : "317b625a-4db6-4333-bf57-152beea40aa0",
        "body" : "Learning curve. First time using any of this syntax! Most surprising was a strange compulsion to use `end if`; maybe that will pass.",
        "createdAt" : "2020-02-13T16:42:04Z",
        "updatedAt" : "2020-02-13T16:42:04Z",
        "lastEditedBy" : "317b625a-4db6-4333-bf57-152beea40aa0",
        "tags" : [
        ]
      },
      {
        "id" : "dcdad663-ae2b-44ac-ad58-c2dae24aab7a",
        "parentId" : "5501d1b9-686d-4660-be5f-85946edd5419",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "You can if you want to ðŸ˜‰ ",
        "createdAt" : "2020-02-13T22:39:26Z",
        "updatedAt" : "2020-02-13T22:39:26Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4e9632f29755e7d4f4186092c3290d5cb1f4fb4",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +27,31 @@    def apply(): Cbuf = new StringBuilder(TargetCapacity)\n\n  extension StringBuilderOps on (buf: Cbuf):\n    def clear(): Unit = {\n      if buf.capacity() > TargetCapacity then"
  },
  {
    "id" : "1c24f18d-639c-4ac7-9f9c-8cb89fbd1f07",
    "prId" : 7770,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7770#pullrequestreview-332492814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "345b0a6d-109d-4f7c-8c61-3bc223ce148a",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "So how is passing null different from passing IndentWidth.Zero here ? Some documentation might be helpful.",
        "createdAt" : "2019-12-16T11:09:26Z",
        "updatedAt" : "2019-12-16T17:34:38Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0d9db1e1471331f54ddecedc5ee1aeccbdb65e1",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +1358,1362 @@  abstract class IndentSignificantRegion extends Region\n\n  case class InBraces(var width: IndentWidth | Null, outer: Region)\n  extends IndentSignificantRegion {\n    // The indent width starts out as `null` when the opening brace is encountered"
  },
  {
    "id" : "5df413b6-4cd7-4a82-8e70-81bf9cb81ec2",
    "prId" : 7031,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7031#pullrequestreview-279275721",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58a50542-7af4-4406-b4c3-17993209f3ab",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "If we remove the field `allowLeadingInfixOperators`,  all the tests pass. However, the field makes a semantic difference for the following program:\r\n\r\n```Scala\r\n@main def Test = {\r\n  val a = 5\r\n  val x = 1\r\n    + //\r\n    `a` * 6\r\n\r\n  assert(x == 1)\r\n}\r\n```\r\n\r\nMaybe add the code above as a run test.",
        "createdAt" : "2019-08-24T04:54:14Z",
        "updatedAt" : "2019-08-24T04:55:07Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "93fd8db50efcd29b3d795df9e36e6daddfa28605",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +404,408 @@          lookahead.nextToken()\n          canStartExpressionTokens.contains(lookahead.token)\n        }\n\n      /** Insert NEWLINE or NEWLINES if"
  },
  {
    "id" : "32fc5285-726d-4e7f-b2af-cd1902d992c5",
    "prId" : 6392,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6392#pullrequestreview-232973251",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b9f3524-8b63-4491-a550-c17a2e33de38",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "It looks like we are missing a case for small floating points\r\n\r\nhttps://github.com/scala/scala/pull/6989/files#diff-0023b3bfa053fb16603156b785efa7adL1024\r\n",
        "createdAt" : "2019-05-01T15:57:55Z",
        "updatedAt" : "2019-05-02T17:22:02Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "6669ca1c-ab53-43aa-8e83-528da010d2b9",
        "parentId" : "7b9f3524-8b63-4491-a550-c17a2e33de38",
        "authorId" : "b612287d-db78-473f-a379-d89aecad8fc8",
        "body" : "Added the check in 98f53ee",
        "createdAt" : "2019-05-02T12:18:17Z",
        "updatedAt" : "2019-05-02T17:22:02Z",
        "lastEditedBy" : "b612287d-db78-473f-a379-d89aecad8fc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "11d533a64da6c975c8b7113b8a7f0ff4b0667e6b",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +194,198 @@        if (value == 0.0d && !zeroFloat.pattern.matcher(text).matches)\n          errorButContinue(\"double precision floating point number too small\")\n        if (negated) -value else value\n      } catch {\n        case _: NumberFormatException =>"
  },
  {
    "id" : "5365c5c0-2a09-4ad4-9639-d051074b5e2b",
    "prId" : 5490,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5490#pullrequestreview-177992785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da130292-ffcb-4b85-a5d1-02df548b9aea",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "I am not sure you can clear the buffer. This method call itself recursively for nested comment. What about removing the last character or not adding it in the first place if it is not a comment?",
        "createdAt" : "2018-11-23T10:30:17Z",
        "updatedAt" : "2018-11-23T10:30:32Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "c830cdcf-a48f-4400-b3a1-08cc1354b06f",
        "parentId" : "da130292-ffcb-4b85-a5d1-02df548b9aea",
        "authorId" : "e625ae4c-fba4-4c8f-9728-a669f65f1bcb",
        "body" : "> This method call itself recursively for nested comment\r\n\r\nThat's what I thought too, and this is why I initially fixed it outside of `def skipComment()`. But it does not. There's an inner `skipComment`, but it will not be called unless we're actually inside a comment.\r\n\r\nThis function used to just return `false` to say \"that's not a comment\". Now it'll empty its buffer and say \"that's not a comment\". I think that should be safe, because the content of the buffer doesn't matter if we're not inside a comment, and it should actually be empty before we start reading the next comment.",
        "createdAt" : "2018-11-23T15:46:08Z",
        "updatedAt" : "2018-11-23T15:46:09Z",
        "lastEditedBy" : "e625ae4c-fba4-4c8f-9728-a669f65f1bcb",
        "tags" : [
        ]
      },
      {
        "id" : "5fa359be-f2cf-457d-875e-f5e58728ecfc",
        "parentId" : "da130292-ffcb-4b85-a5d1-02df548b9aea",
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "Oh yes right! This is confusing",
        "createdAt" : "2018-11-23T17:01:45Z",
        "updatedAt" : "2018-11-23T17:01:48Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fee13150d264a6962459ac4e9e09b0566f2a852",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +634,638 @@      else {\n        // This was not a comment, remove the `/` from the buffer\n        commentBuf.clear()\n        false\n      }"
  },
  {
    "id" : "7b899c4a-eff1-4b6b-ada6-31d43e55265a",
    "prId" : 2432,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2432#pullrequestreview-38110750",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4f63df6-8655-40ff-9bbf-2cfb1b4a19fe",
        "parentId" : null,
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "Looks like a missing closing brace here.",
        "createdAt" : "2017-05-15T13:13:18Z",
        "updatedAt" : "2017-05-23T09:03:59Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      }
    ],
    "commit" : "0725a61c86ea973b6b05a9e09a3456ea7b980ac4",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +242,246 @@        td.copyFrom(following.head)\n        following = following.tail\n      }\n\n    /** Insert tokens `tds` in front of current token */"
  }
]