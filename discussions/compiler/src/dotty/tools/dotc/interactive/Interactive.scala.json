[
  {
    "id" : "c309c887-a495-4a6f-8b45-c7d3a4042e0c",
    "prId" : 5462,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5462#pullrequestreview-180022245",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "135d3cc2-b9fd-4ad8-ad72-d5fa57716bba",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Need to take Include.local into account now too.",
        "createdAt" : "2018-11-29T21:26:59Z",
        "updatedAt" : "2018-11-30T06:24:37Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "72053cacd1bdb65d95e1ef06a9ba6a5d7d2e6f72",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +357,361 @@                      includeExternal: Boolean): List[SourceTree] = {\n    implicit val ctx = driver.currentCtx\n    val include = Include.definitions | Include.overriding |\n      (if (includeOverridden) Include.overridden else Include.empty)\n    symbols.flatMap { sym =>"
  },
  {
    "id" : "0a126524-e969-4c03-856c-c869ce531faa",
    "prId" : 5209,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5209#pullrequestreview-173458644",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7afd367-acab-40ec-8055-b45e6560b014",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Does this work for symbols in the empty package ? Definition#staticRef has a special case to handle that.",
        "createdAt" : "2018-11-09T14:27:44Z",
        "updatedAt" : "2018-11-12T12:26:58Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "1b1cb042-f7d6-4785-9396-5deb144d506e",
        "parentId" : "c7afd367-acab-40ec-8055-b45e6560b014",
        "authorId" : "e625ae4c-fba4-4c8f-9728-a669f65f1bcb",
        "body" : "I think it works, see this test for instance:\r\n\r\nhttps://github.com/dotty-staging/dotty/blob/0f8853acaee994659e7a26eed9a688f92f03043c/language-server/test/dotty/tools/languageserver/ReferencesTest.scala#L51-L71",
        "createdAt" : "2018-11-09T15:25:33Z",
        "updatedAt" : "2018-11-12T12:26:58Z",
        "lastEditedBy" : "e625ae4c-fba4-4c8f-9728-a669f65f1bcb",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5280a691d763709290192d0bcdc6e81a5325316",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +511,515 @@      }\n      in(targetDriver) { implicit ctx =>\n        val base: Symbol = ctx.definitions.RootClass\n        owners.tail.foldLeft(base) { (prefix, symbolName) =>\n          if (prefix.exists) prefix.info.member(symbolName).symbol"
  },
  {
    "id" : "06b9169a-67fd-467d-b333-73fc4bd57d65",
    "prId" : 4199,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4199#pullrequestreview-166265153",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dfd502d9-4e0c-41eb-a83b-3af7658c4506",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Documentation needs to be updated",
        "createdAt" : "2018-10-18T19:46:53Z",
        "updatedAt" : "2018-11-16T07:02:15Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "f88ad867967c80e8827bef031f6188d620af5edf",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +95,99 @@   *\n   * @see sourceSymbol\n   */\n  def enclosingSourceSymbols(path: List[Tree], pos: SourcePosition)(implicit ctx: Context): List[Symbol] = {\n    val syms = path match {"
  },
  {
    "id" : "93aa19ed-3fd7-4395-8fcd-ab06756eadcb",
    "prId" : 4002,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4002#pullrequestreview-98124075",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "204abc5c-2152-4cc3-9383-947f7470506b",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "If `path` can contain non-tree elements then `hasType` will also throws. Maybe change `NavigateAST.pathTo` to discard non-tree element and return a `List[Tree]` instead (as suggested in the comment).",
        "createdAt" : "2018-02-19T09:32:57Z",
        "updatedAt" : "2018-02-19T09:32:57Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      },
      {
        "id" : "1e9db2cc-aad3-4d4f-9f62-182f800400c8",
        "parentId" : "204abc5c-2152-4cc3-9383-947f7470506b",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Good point.",
        "createdAt" : "2018-02-21T09:29:10Z",
        "updatedAt" : "2018-02-21T09:29:10Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "8cec24a9-d551-4d37-baab-a8b67fd4169e",
        "parentId" : "204abc5c-2152-4cc3-9383-947f7470506b",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I made the change on the other PR #3967",
        "createdAt" : "2018-02-21T09:35:25Z",
        "updatedAt" : "2018-02-21T09:36:35Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "86c762079b86b1c0f18493edb2ce59b96a470eee",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +345,349 @@      // FIXME: We shouldn't need a cast. Change NavigateAST.pathTo to return a List of Tree?\n      val path = NavigateAST.pathTo(pos, tree, skipZeroExtent = true).asInstanceOf[List[untpd.Tree]]\n      path.dropWhile(!_.hasType) collect { case t: tpd.Tree @unchecked => t }\n    }\n    else Nil"
  },
  {
    "id" : "8c6fed45-d9ad-4975-bb7b-6af99e7914fd",
    "prId" : 3960,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3960#pullrequestreview-95514816",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74cd560a-d278-4553-9c8a-f848cc2f0e93",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Add a TODO for removing this",
        "createdAt" : "2018-02-09T18:22:25Z",
        "updatedAt" : "2018-02-12T09:44:11Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d0b9edb0b4187ad9e081a738997ec9e0d5621fe",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +99,103 @@   *  @return offset and list of symbols for possible completions\n   */\n  // deprecated\n  // FIXME: Remove this method\n  def completions(trees: List[SourceTree], pos: SourcePosition)(implicit ctx: Context): (Int, List[Symbol]) = {"
  },
  {
    "id" : "95cae527-9115-4673-871a-670913060d6f",
    "prId" : 3960,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3960#pullrequestreview-95663381",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31f82e3c-cf64-4833-95b1-a1eea7a49f36",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Why is the first statement handled specially?",
        "createdAt" : "2018-02-09T18:23:03Z",
        "updatedAt" : "2018-02-12T09:44:11Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "4e49f4fb-6841-419a-9599-ac9a755598e8",
        "parentId" : "31f82e3c-cf64-4833-95b1-a1eea7a49f36",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "It's not. There's a tail recursion in the third clause.",
        "createdAt" : "2018-02-11T17:39:17Z",
        "updatedAt" : "2018-02-12T09:44:11Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d0b9edb0b4187ad9e081a738997ec9e0d5621fe",
    "line" : 320,
    "diffHunk" : "@@ -1,1 +352,356 @@    case Nil =>\n      ctx\n    case first :: _ if first eq stat =>\n      ctx.exprContext(stat, exprOwner)\n    case (imp: Import) :: rest =>"
  },
  {
    "id" : "6d50bc39-5b9e-4e40-9706-7fa6aeb52d81",
    "prId" : 2885,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2885#pullrequestreview-50658983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5df700fd-a79e-43d6-9e7f-be368d81769c",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Mark it `@inline` ?",
        "createdAt" : "2017-07-18T15:57:35Z",
        "updatedAt" : "2017-07-19T13:52:19Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a8a2a3fd4e823b49e046257785e17e03ba1a74d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +63,67 @@    else sym\n\n  private def safely[T](op: => List[T]): List[T] =\n    try op catch { case ex: TypeError => Nil }\n"
  },
  {
    "id" : "f058665e-1f5e-49b1-a7da-216d00a2d045",
    "prId" : 2885,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2885#pullrequestreview-50910607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f8bd697-6987-4e39-8155-a217222009c2",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "It's a bit of a shame that this means we'll discard all results when the problem might be localized. Alternatively, we could move the try/catch around `traverseChildren` I think.",
        "createdAt" : "2017-07-18T15:59:10Z",
        "updatedAt" : "2017-07-19T13:52:19Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "76fb1255-57a6-4ba0-bb89-36eaa6d28e92",
        "parentId" : "7f8bd697-6987-4e39-8155-a217222009c2",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I think it's pretty rare that we would get a TypeError, so not a big deal either way.",
        "createdAt" : "2017-07-19T13:44:57Z",
        "updatedAt" : "2017-07-19T13:52:19Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a8a2a3fd4e823b49e046257785e17e03ba1a74d",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +132,136 @@   */\n  def namedTrees(trees: List[SourceTree], includeReferences: Boolean, treePredicate: NameTree => Boolean)\n    (implicit ctx: Context): List[SourceTree] = safely {\n    val buf = new mutable.ListBuffer[SourceTree]\n"
  },
  {
    "id" : "edcd6105-9391-449b-90ad-406cb5fb0451",
    "prId" : 2532,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2532#pullrequestreview-40521089",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a962d57d-3052-4bc8-a57d-c541b971b12f",
        "parentId" : null,
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "=> `NoSymbol` ?",
        "createdAt" : "2017-05-26T07:46:33Z",
        "updatedAt" : "2017-05-26T18:00:57Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      },
      {
        "id" : "6f59bb8f-2cf8-4c14-943f-42a1fa5066a1",
        "parentId" : "a962d57d-3052-4bc8-a57d-c541b971b12f",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "That's completely equivalent, do you want me to change this for style reasons?",
        "createdAt" : "2017-05-26T12:33:08Z",
        "updatedAt" : "2017-05-26T18:00:57Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "d6319dda-5ec7-4f3b-a6ec-818d7ead35b6",
        "parentId" : "a962d57d-3052-4bc8-a57d-c541b971b12f",
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "I'll leave that up to you.",
        "createdAt" : "2017-05-26T13:26:14Z",
        "updatedAt" : "2017-05-26T18:00:57Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      },
      {
        "id" : "aadb66e7-feb3-45e0-8320-bb7841e9f397",
        "parentId" : "a962d57d-3052-4bc8-a57d-c541b971b12f",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I think either works fine.\r\n",
        "createdAt" : "2017-05-26T14:11:58Z",
        "updatedAt" : "2017-05-26T18:00:57Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcdbd8e5e312443c53b751dc489255a8a35b657c",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +49,53 @@  @tailrec def sourceSymbol(sym: Symbol)(implicit ctx: Context): Symbol =\n    if (!sym.exists)\n      sym\n    else if (sym.is(ModuleVal))\n      sourceSymbol(sym.moduleClass) // The module val always has a zero-extent position"
  }
]