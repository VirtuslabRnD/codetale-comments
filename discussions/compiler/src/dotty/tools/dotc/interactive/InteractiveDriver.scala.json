[
  {
    "id" : "82729eee-673b-4fc1-84a1-c7037a760d2b",
    "prId" : 5209,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5209#pullrequestreview-174103309",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52e298b5-adb4-4a0b-a8d3-1f79516e1fe7",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "What happens if we don't do compileUnits here ?",
        "createdAt" : "2018-11-12T15:14:08Z",
        "updatedAt" : "2018-11-12T15:14:08Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "49ed532a-8226-473e-ad3e-8821cd8e2769",
        "parentId" : "52e298b5-adb4-4a0b-a8d3-1f79516e1fe7",
        "authorId" : "e625ae4c-fba4-4c8f-9728-a669f65f1bcb",
        "body" : "We crash with a `NullPointerException` in `Run#lateCompile`. `files` will be `null` (`myUnits` will `eq` `myCachedUnits` (both will be `null`))",
        "createdAt" : "2018-11-12T15:17:23Z",
        "updatedAt" : "2018-11-12T15:17:23Z",
        "lastEditedBy" : "e625ae4c-fba4-4c8f-9728-a669f65f1bcb",
        "tags" : [
        ]
      },
      {
        "id" : "02497370-31a9-418b-b678-dace545db04a",
        "parentId" : "52e298b5-adb4-4a0b-a8d3-1f79516e1fe7",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "if we just change the default value of `units` to be `Nil` instead of `null`, would that be enough ?",
        "createdAt" : "2018-11-12T15:21:02Z",
        "updatedAt" : "2018-11-12T15:21:03Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "4c34042b-c71c-4b9e-b846-f8c89d058c84",
        "parentId" : "52e298b5-adb4-4a0b-a8d3-1f79516e1fe7",
        "authorId" : "e625ae4c-fba4-4c8f-9728-a669f65f1bcb",
        "body" : "Maybe. It looks like `compileUnits` does some more initialisation that I haven't been able to reproduce. With this initialisation code:\r\n\r\n```scala\r\n    val run = compiler.newRun(myInitCtx.fresh)\r\n    implicit val ctx = run.runContext\r\n    ctx.initialize()\r\n    myCtx = ctx\r\n```\r\n\r\nI get this crash:\r\n\r\n```\r\n[info] exception caught when loading class Entity: java.lang.AssertionError: assertion failed: TermRef(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeRef(ThisType(\r\nTypeRef(NoPrefix,module class model)),class ParamList))),mkString)\r\n[info] exception caught when loading class AlternateConstructors: java.lang.AssertionError: assertion failed: TermRef(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(Ty\r\npeRef(ThisType(TypeRef(NoPrefix,module class model)),class ParamList))),mkString)\r\n[error] java.lang.AssertionError: assertion failed: TermRef(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeRef(ThisType(TypeRef(NoPrefix,module class model)),class\r\n ParamList))),mkString)\r\n[error]         at dotty.DottyPredef$.assertFail(DottyPredef.scala:38)\r\n[error]         at dotty.tools.dotc.core.Types$NamedType.setDenot(Types.scala:1890)\r\n[error]         at dotty.tools.dotc.core.Types$NamedType.withDenot(Types.scala:2114)\r\n[error]         at dotty.tools.dotc.core.Types$TermRef$.apply(Types.scala:2277)\r\n[error]         at dotty.tools.dotc.core.Types$NamedType$.apply(Types.scala:2263)\r\n[error]         at dotty.tools.dotc.core.Types$Type.select(Types.scala:1246)\r\n[error]         at dotty.tools.dotc.typer.TypeAssigner.selectionType(TypeAssigner.scala:235)\r\n[error]         at dotty.tools.dotc.typer.TypeAssigner.accessibleSelectionType(TypeAssigner.scala:261)\r\n[error]         at dotty.tools.dotc.typer.TypeAssigner.assignType(TypeAssigner.scala:291)\r\n[error]         at dotty.tools.dotc.typer.Typer.typedSelect(Typer.scala:427)\r\n[error]         at dotty.tools.dotc.typer.Typer.typeSelectOnTerm$1(Typer.scala:434)\r\n[error]         at dotty.tools.dotc.typer.Typer.typedSelect(Typer.scala:461)\r\n[error]         at dotty.tools.dotc.typer.Typer.typedNamed$1(Typer.scala:1865)\r\n[error]         at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:1938)\r\n[error]         at dotty.tools.dotc.typer.Typer.typed(Typer.scala:1970)\r\n[error]         at dotty.tools.dotc.typer.Typer.typed(Typer.scala:1982)\r\n[error]         at dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2045)\r\n[error]         at dotty.tools.dotc.typer.Typer.typedBlock(Typer.scala:664)\r\n[error]         at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:1892)\r\n[error]         at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:1939)\r\n[error]         at dotty.tools.dotc.typer.Typer.typed(Typer.scala:1970)\r\n[error]         at dotty.tools.dotc.typer.Typer.typed(Typer.scala:1982)\r\n[error]         at dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2045)\r\n[error]         at dotty.tools.dotc.typer.Typer.caseRest$1(Typer.scala:1053)\r\n[error]         at dotty.tools.dotc.typer.Typer.typedCase(Typer.scala:1060)\r\n```\r\n\r\nThis is the assertion that fails:\r\n```scala\r\n      if (ctx.isAfterTyper)\r\n        assert(!denot.isOverloaded || ctx.mode.is(Mode.Printing), this)\r\n```\r\n\r\nI can't find what makes the difference when I do `compileUnits`.",
        "createdAt" : "2018-11-12T17:05:37Z",
        "updatedAt" : "2018-11-12T17:05:37Z",
        "lastEditedBy" : "e625ae4c-fba4-4c8f-9728-a669f65f1bcb",
        "tags" : [
        ]
      },
      {
        "id" : "45cbec8f-6da3-411e-9f09-028c45e058f0",
        "parentId" : "52e298b5-adb4-4a0b-a8d3-1f79516e1fe7",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "ok, nervermind then",
        "createdAt" : "2018-11-12T21:35:26Z",
        "updatedAt" : "2018-11-12T21:35:26Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5280a691d763709290192d0bcdc6e81a5325316",
    "line" : 339,
    "diffHunk" : "@@ -1,1 +310,314 @@    val run = compiler.newRun(myInitCtx.fresh)\n    myCtx = run.runContext\n    run.compileUnits(Nil, myCtx)\n  }\n"
  },
  {
    "id" : "6778ae43-aba1-4fe2-93b8-e8d928f6c93f",
    "prId" : 4002,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4002#pullrequestreview-96862551",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05e6eb2b-b076-4d1d-9de4-19e7c7cbaeba",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We should emit an error or warning.  If we don't add it in this PR we might have silent failures that are impossible to debug.",
        "createdAt" : "2018-02-15T14:21:55Z",
        "updatedAt" : "2018-02-17T17:37:54Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "86c762079b86b1c0f18493edb2ce59b96a470eee",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +165,169 @@        })\n      catch {\n        case _: NoSuchFileException =>\n      }\n    }"
  },
  {
    "id" : "4ec17fec-1452-4f20-adc9-d1d46347c550",
    "prId" : 4002,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4002#pullrequestreview-96865161",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f362f99-f298-4605-880c-92fe0d7b30d4",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "`if (Files.exists(root)) ...` instead of catching an exception?",
        "createdAt" : "2018-02-15T14:29:05Z",
        "updatedAt" : "2018-02-17T17:37:54Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      }
    ],
    "commit" : "86c762079b86b1c0f18493edb2ce59b96a470eee",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +149,153 @@    dirClassPaths.foreach { dirCp =>\n      val root = dirCp.dir.toPath\n      try\n        Files.walkFileTree(root, new SimpleFileVisitor[Path] {\n          override def visitFile(path: Path, attrs: BasicFileAttributes) = {"
  },
  {
    "id" : "cd33503b-a90f-4e33-b234-81fcb647168c",
    "prId" : 2532,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2532#pullrequestreview-40509606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ea803bc-2ff1-4aa3-a2d3-772e5c0b3b14",
        "parentId" : null,
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "Does this need to be public?",
        "createdAt" : "2017-05-26T07:53:13Z",
        "updatedAt" : "2017-05-26T18:00:57Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      },
      {
        "id" : "569f96cc-8068-46e0-bb8c-de4286b112a0",
        "parentId" : "8ea803bc-2ff1-4aa3-a2d3-772e5c0b3b14",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Yes, very much so, see usage in DottyLanguageServer",
        "createdAt" : "2017-05-26T12:33:46Z",
        "updatedAt" : "2017-05-26T18:00:57Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcdbd8e5e312443c53b751dc489255a8a35b657c",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +43,47 @@  private var myCtx: Context = myInitCtx\n\n  def currentCtx: Context = myCtx\n\n  private val myOpenedFiles = new mutable.LinkedHashMap[URI, SourceFile]"
  },
  {
    "id" : "03322c4c-ed76-4992-9120-86b7d8e1d8f2",
    "prId" : 2532,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2532#pullrequestreview-40509606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab12bed9-a264-485d-92f4-6c2502d97838",
        "parentId" : null,
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "These too?",
        "createdAt" : "2017-05-26T07:58:14Z",
        "updatedAt" : "2017-05-26T18:00:57Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      },
      {
        "id" : "dd3d3aa4-3028-4c24-a0a2-9a4761902530",
        "parentId" : "ab12bed9-a264-485d-92f4-6c2502d97838",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Yes, see usage in DottyLanguageServer",
        "createdAt" : "2017-05-26T12:34:17Z",
        "updatedAt" : "2017-05-26T18:00:57Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcdbd8e5e312443c53b751dc489255a8a35b657c",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +49,53 @@\n  def openedFiles: Map[URI, SourceFile] = myOpenedFiles\n  def openedTrees: Map[URI, List[SourceTree]] = myOpenedTrees\n\n  def allTrees(implicit ctx: Context): List[SourceTree] = {"
  }
]