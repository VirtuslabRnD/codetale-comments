[
  {
    "id" : "af70a36b-4839-4c38-9321-80ac081a1ca7",
    "prId" : 11187,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11187#pullrequestreview-579231053",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29fa07cf-ed37-40e0-8976-fe03746b6cb0",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Here the code only throws the type of the extension methods away, it may cause problems.  If the class of the extension method takes type parameters or is enclosed in another class, it's impossible to recover the type from the symbol of the method alone.\r\n\r\nA better approach might be to use `TermRef` here, which contains both the prefix type and a symbol to the method.",
        "createdAt" : "2021-01-28T14:53:09Z",
        "updatedAt" : "2021-02-22T14:27:51Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "bd2aa810-3365-4a48-9a6d-1bcb6eeffdf6",
        "parentId" : "29fa07cf-ed37-40e0-8976-fe03746b6cb0",
        "authorId" : "5245b2da-2ff9-4276-9b2e-e1be5771149e",
        "body" : "Not sure if I got it right. Could you give an example of code for which the current approach wouldn't work? Then I could add it as a test case",
        "createdAt" : "2021-01-29T08:58:45Z",
        "updatedAt" : "2021-02-22T14:27:51Z",
        "lastEditedBy" : "5245b2da-2ff9-4276-9b2e-e1be5771149e",
        "tags" : [
        ]
      },
      {
        "id" : "4259813d-8d3a-4b00-8604-509344a556e6",
        "parentId" : "29fa07cf-ed37-40e0-8976-fe03746b6cb0",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Here is one example:\r\n\r\n```Scala\r\ntrait Foo[T] {\r\n  extension (x: List[T]) foo: List[T] = ???\r\n}\r\n\r\nobject Bar extends Foo[Int]\r\n\r\nimport Bar._\r\n```\r\n\r\nNow, if we only have the symbol `foo`, we have no way to know that it actually only works for `List[Int]`.",
        "createdAt" : "2021-01-29T10:29:47Z",
        "updatedAt" : "2021-02-22T14:27:51Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "b7079a2c-bd0f-4ee2-97dd-81ba9cfc38f2",
        "parentId" : "29fa07cf-ed37-40e0-8976-fe03746b6cb0",
        "authorId" : "5245b2da-2ff9-4276-9b2e-e1be5771149e",
        "body" : "Thanks, good catch",
        "createdAt" : "2021-01-29T12:57:42Z",
        "updatedAt" : "2021-02-22T14:27:51Z",
        "lastEditedBy" : "5245b2da-2ff9-4276-9b2e-e1be5771149e",
        "tags" : [
        ]
      }
    ],
    "commit" : "d09fcc2726ed5e8b6fa2cf86b596bc8b4cab572e",
    "line" : 387,
    "diffHunk" : "@@ -1,1 +353,357 @@            tryApplyingReceiverToExtension(termRef)\n              .map(denot => termName -> denot)\n          else None\n      }\n      extMethodsWithAppliedReceiver.groupByName"
  },
  {
    "id" : "9dfeebf8-5635-4368-91dd-7167c19492d8",
    "prId" : 11187,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11187#pullrequestreview-595266819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0d917de-f37b-47f0-8efb-9c53160296ec",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Indentation is incorrect hre for the block.",
        "createdAt" : "2021-02-22T11:57:35Z",
        "updatedAt" : "2021-02-22T14:27:51Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "d09fcc2726ed5e8b6fa2cf86b596bc8b4cab572e",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +143,147 @@        val desc = description(typesFirst)\n        Completion(name.show, desc, typesFirst.map(_.symbol))\n    }\n  }\n"
  },
  {
    "id" : "fcb7273c-e331-4da6-a2da-f04a634a0cbd",
    "prId" : 5744,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5744#pullrequestreview-194455535",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aeafef81-e712-4762-b704-1f86967ccec0",
        "parentId" : null,
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "This makes sense, except is seems a bit hacky?",
        "createdAt" : "2019-01-19T10:30:20Z",
        "updatedAt" : "2019-01-21T11:22:42Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      },
      {
        "id" : "d6c4a960-2417-4751-a365-fb8647529836",
        "parentId" : "aeafef81-e712-4762-b704-1f86967ccec0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Why hacky? Do you have another idea of how to handle bottom types correctly?",
        "createdAt" : "2019-01-19T16:38:45Z",
        "updatedAt" : "2019-01-21T11:22:42Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "fc3c8e07-4d63-461f-b504-43d5a04f4b32",
        "parentId" : "aeafef81-e712-4762-b704-1f86967ccec0",
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "Your change suggests `addAccessibleMembers` is buggy on `NullType` and `Nothing`, so why doesn't the fix should go closer to the source of the bug? At least in `accessibleMembers`, one would think.\r\nAnd while `defn.NothingType` probably needs to be a special case, `defn.NullType` inherits from `AnyRefType`, so should inherit its members, no?",
        "createdAt" : "2019-01-20T14:07:05Z",
        "updatedAt" : "2019-01-21T11:22:42Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      },
      {
        "id" : "33febf10-d634-4ed8-886b-87c1940d72d3",
        "parentId" : "aeafef81-e712-4762-b704-1f86967ccec0",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Yes, I still don't understand what most of this patch is doing.",
        "createdAt" : "2019-01-20T20:57:05Z",
        "updatedAt" : "2019-01-21T11:22:42Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "0dea6e8f-cc8d-495f-bba1-e059a1211448",
        "parentId" : "aeafef81-e712-4762-b704-1f86967ccec0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I still need to try to make `addAccessibleMembers` not return a long list of members for Null and Nothing",
        "createdAt" : "2019-01-20T21:27:02Z",
        "updatedAt" : "2019-01-21T11:22:42Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "8ea13334-48c0-4fda-af13-3eb6df494acd",
        "parentId" : "aeafef81-e712-4762-b704-1f86967ccec0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I refactored the code. Now I only special case implicit completions on `Null`. The description of the PR was updated. The source of the issue where the implicit conversion, not the `addAccessibleMembers`",
        "createdAt" : "2019-01-21T06:16:17Z",
        "updatedAt" : "2019-01-21T11:22:42Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4ddb49081132d9c78b2d7f9cbdaf217a188bc1c",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +218,222 @@          implicitConversionTargets(qual)(ctx.fresh.setExploreTyperState())\n            .foreach(addAccessibleMembers)\n        }\n      }\n    }"
  },
  {
    "id" : "3154b4a0-e5d7-4fbd-a736-a2a19310cb57",
    "prId" : 5744,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5744#pullrequestreview-194408191",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0ab2d50-ba70-4dc0-ae61-a90979a669ee",
        "parentId" : null,
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "This *looks* unrelated and untested, and more fragile than the rest? If it's worth the technical debt, okay...",
        "createdAt" : "2019-01-19T10:32:02Z",
        "updatedAt" : "2019-01-21T11:22:42Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      },
      {
        "id" : "eac6d816-55b1-478d-bf5b-455747caea99",
        "parentId" : "c0ab2d50-ba70-4dc0-ae61-a90979a669ee",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I will open a separate issue for this when we merge it",
        "createdAt" : "2019-01-19T10:36:46Z",
        "updatedAt" : "2019-01-21T11:22:42Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "310a6f4f-ec80-44b8-b19d-6144d8a00e3a",
        "parentId" : "c0ab2d50-ba70-4dc0-ae61-a90979a669ee",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Removed this hack",
        "createdAt" : "2019-01-20T20:42:27Z",
        "updatedAt" : "2019-01-21T11:22:42Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4ddb49081132d9c78b2d7f9cbdaf217a188bc1c",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +154,158 @@        val desc = description(typesFirst)\n        val label = NameTransformer.decodeIllegalChars(name.toString)\n        Completion(label, desc, typesFirst)\n      }\n    }"
  },
  {
    "id" : "3e774164-c94d-4c6c-ac95-b00e7316db47",
    "prId" : 5744,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5744#pullrequestreview-194553036",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00c81a4b-78f2-40cd-9403-dc849eef8437",
        "parentId" : null,
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "Ah, this fix makes more sense! \r\n\r\nI wonder why *this* part doesn't work correctly, but looks okay... I'd probably add\r\n```\r\n// and for `NullClass` they produce unapplicable completions (for unclear reasons).\r\n```",
        "createdAt" : "2019-01-21T09:40:06Z",
        "updatedAt" : "2019-01-21T11:22:42Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      },
      {
        "id" : "eb4eb1e8-4272-4ec1-a28b-277edc27752c",
        "parentId" : "00c81a4b-78f2-40cd-9403-dc849eef8437",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Added",
        "createdAt" : "2019-01-21T11:23:05Z",
        "updatedAt" : "2019-01-21T11:23:05Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4ddb49081132d9c78b2d7f9cbdaf217a188bc1c",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +214,218 @@        addAccessibleMembers(qual.tpe)\n        if (!mode.is(Mode.Import) && !qual.tpe.isRef(defn.NullClass)) {\n          // Implicit conversions do not kick in when importing\n          // and for `NullClass` they produce unapplicable completions (for unclear reasons)\n          implicitConversionTargets(qual)(ctx.fresh.setExploreTyperState())"
  },
  {
    "id" : "2fae413f-6edf-4a66-b5b1-31f87444af6a",
    "prId" : 5716,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5716#pullrequestreview-192737505",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8262da2e-5221-45bd-a113-fd734e7b811e",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I would move the two added checks above this line. also update the comment at the top of this method.",
        "createdAt" : "2019-01-15T15:45:20Z",
        "updatedAt" : "2019-01-15T17:03:42Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "a00bd7f4-6180-4361-85c2-ace0563b3df0",
        "parentId" : "8262da2e-5221-45bd-a113-fd734e7b811e",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Moved the conditions and added the doc",
        "createdAt" : "2019-01-15T16:26:24Z",
        "updatedAt" : "2019-01-15T17:03:42Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "438c74df3073e4bc16969a5e29265e38dc5273b6",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +254,258 @@      !sym.isPackageObject &&\n      !sym.is(Artifact) &&\n      (\n           (mode.is(Mode.Term) && sym.isTerm)\n        || (mode.is(Mode.Type) && (sym.isType || sym.isStable))"
  },
  {
    "id" : "9b7895fc-34f1-4e53-a8cf-4e9541093614",
    "prId" : 5476,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5476#pullrequestreview-177773690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3f92956-379d-4a5e-9b14-ba977c674f70",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Do we have an issue open for that ?",
        "createdAt" : "2018-11-22T20:55:13Z",
        "updatedAt" : "2018-11-23T15:30:35Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "da58211a-ec38-4fa9-a308-08bf10c1fb14",
        "parentId" : "c3f92956-379d-4a5e-9b14-ba977c674f70",
        "authorId" : "e625ae4c-fba4-4c8f-9728-a669f65f1bcb",
        "body" : "Yes, see #3979, and an open PR: #4977 ",
        "createdAt" : "2018-11-22T21:04:22Z",
        "updatedAt" : "2018-11-23T15:30:35Z",
        "lastEditedBy" : "e625ae4c-fba4-4c8f-9728-a669f65f1bcb",
        "tags" : [
        ]
      }
    ],
    "commit" : "89f850a750f237086cd69f4bdac07af3a6fd9f37",
    "line" : 255,
    "diffHunk" : "@@ -1,1 +253,257 @@          addMember(imp.site, name.toTypeName)\n        }\n        // FIXME: We need to also take renamed items into account for completions,\n        // That means we have to return list of a pairs (Name, Symbol) instead of a list\n        // of symbols from `completions`.!="
  }
]