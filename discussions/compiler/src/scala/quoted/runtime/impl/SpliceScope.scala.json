[
  {
    "id" : "ef21eab4-eaa6-4874-8903-f9469a9d8226",
    "prId" : 11442,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11442#pullrequestreview-599530669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ee8abcc-967b-4256-9b70-e9db16d44dd0",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Maybe add some documentation to `Scope` about the underlying idea?",
        "createdAt" : "2021-02-25T19:53:00Z",
        "updatedAt" : "2021-03-01T13:27:59Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "96929b18-9663-435b-985a-4658acdeaa53",
        "parentId" : "9ee8abcc-967b-4256-9b70-e9db16d44dd0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Added",
        "createdAt" : "2021-02-26T12:30:52Z",
        "updatedAt" : "2021-03-01T13:27:59Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e2e6d31030bba0b3f2fd526eef4733375283bf7",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +27,31 @@  /** If the two scopes correspond to the same splice in source. */\n  def atSameLocation(scope: Scope): Boolean = false\n}\n\n/** Only used for outer scope of top level splice and staging `run` */"
  },
  {
    "id" : "66b32be0-6927-4fd5-b410-30d4c1eebf05",
    "prId" : 11442,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11442#pullrequestreview-600726959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fde1e49-d5d8-4781-be1f-9b579879c0fc",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "What about `isOuterScopeOf` -> `contains`?",
        "createdAt" : "2021-03-01T08:59:02Z",
        "updatedAt" : "2021-03-01T13:27:59Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "a13caf33-34e3-4b3a-9167-36a3a68782f4",
        "parentId" : "6fde1e49-d5d8-4781-be1f-9b579879c0fc",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I avoided `contains` because it can be misinterpreted. Even I made a couple of mistakes and inverted the arguments when it was called contains.",
        "createdAt" : "2021-03-01T13:26:40Z",
        "updatedAt" : "2021-03-01T13:27:59Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e2e6d31030bba0b3f2fd526eef4733375283bf7",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +17,21 @@  def outer: Scope = NoScope\n  /** Is this is a outer scope of the given scope */\n  def isOuterScopeOf(scope: Scope): Boolean =\n    this.eq(scope) || (scope.ne(NoScope) && isOuterScopeOf(scope.outer))\n  /** Scope of the top level splice or staging `run` */"
  }
]