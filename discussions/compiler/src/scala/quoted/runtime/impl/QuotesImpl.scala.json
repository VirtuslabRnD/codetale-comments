[
  {
    "id" : "f73f11ae-f1a3-4f80-bd12-16931332fb0d",
    "prId" : 11537,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11537#pullrequestreview-599688647",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "baa8c6e0-12b0-4643-8c3f-f3570bc18f75",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "For later: maybe provide a reflection API to perform eta-expansion?",
        "createdAt" : "2021-02-26T09:21:52Z",
        "updatedAt" : "2021-02-26T09:29:00Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "d5de7fae-3a4b-4960-8d66-a18858f63fe8",
        "parentId" : "baa8c6e0-12b0-4643-8c3f-f3570bc18f75",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "It seems such well-formedness checks are very useful in macros development.\r\n\r\nIs it possible to centralize the check for the expanded tree? I guess for debugging, the current approach is more helpful, as it shows the stacktrace. ",
        "createdAt" : "2021-02-26T09:27:47Z",
        "updatedAt" : "2021-02-26T09:29:00Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "b18b0b0f-e9d1-4c62-9c45-6ca8a8230e26",
        "parentId" : "baa8c6e0-12b0-4643-8c3f-f3570bc18f75",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "> For later: maybe provide a reflection API to perform eta-expansion?\r\n\r\nWe already have `term.etaExpand`",
        "createdAt" : "2021-02-26T09:50:41Z",
        "updatedAt" : "2021-02-26T09:50:41Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "67c56777-9adf-4975-b2a7-b71bd62da292",
        "parentId" : "baa8c6e0-12b0-4643-8c3f-f3570bc18f75",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "> Is it possible to centralize the check for the expanded tree?\r\n\r\nCentralize how? Like in normal `yCheck`?\r\n\r\n",
        "createdAt" : "2021-02-26T09:52:17Z",
        "updatedAt" : "2021-02-26T09:52:18Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "23f949e8-1dfa-4329-9986-1ac8f5d026f1",
        "parentId" : "baa8c6e0-12b0-4643-8c3f-f3570bc18f75",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "> Centralize how? Like in normal `yCheck`?\r\n\r\nYes, something like a `TreeMap` or `ReTyper`. But as I mentioned above, this might not be a good idea, as it cannot show the stacktrace how an ill-formed tree is created.",
        "createdAt" : "2021-02-26T10:06:05Z",
        "updatedAt" : "2021-02-26T10:06:05Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "48ebbe32-737e-4707-bceb-06091e3dfc68",
        "parentId" : "baa8c6e0-12b0-4643-8c3f-f3570bc18f75",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "That did not work in this case because the crash happened before we finished the transformation in the `Inlining` phase.",
        "createdAt" : "2021-02-26T15:34:00Z",
        "updatedAt" : "2021-02-26T15:34:00Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ea0084ffaac8529ea43a5c519e674029e028d38",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +2844,2848 @@      if yCheck then\n        assert(!term.tpe.widenDealias.isInstanceOf[dotc.core.Types.MethodicType],\n          \"Reference to a method must be eta-expanded before it is used as an expression: \" + term.show)\n      term\n"
  },
  {
    "id" : "cc1f5e23-a866-48eb-8a67-53ac354cdfd0",
    "prId" : 10755,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10755#pullrequestreview-550112709",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db74063c-7d9c-4296-b4ba-fad751390760",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Is there usage for `ConstantStructure`? If `ConstantCode` is the only printer, maybe change `toString` and/or `show` method is enough for practical usage.",
        "createdAt" : "2020-12-11T13:38:38Z",
        "updatedAt" : "2020-12-11T14:09:48Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "d077806a-ad68-4c39-80cf-93e39284c9f9",
        "parentId" : "db74063c-7d9c-4296-b4ba-fad751390760",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "`ConstantStructure` is mainly used for debugging.\r\n\r\nWe do not have access to the `Context` in the to `toString` which we need to handle the `ClassOf` case. In general, we tell users that the `toString` is unreliable and that they should use `show`, this should not be an exception or it may lead to confusion.",
        "createdAt" : "2020-12-11T13:50:16Z",
        "updatedAt" : "2020-12-11T14:09:48Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f4b95865fa366f65c435f55e1359f4342edc3bb",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +2781,2785 @@      lazy val ConstantStructure: Printer[Constant] = new Printer[Constant]:\n        def show(const: Constant): String =\n          Extractors.showConstant(using QuotesImpl.this)(const)\n\n    end Printer"
  },
  {
    "id" : "2b14b370-f808-4873-a3f2-9d0bb14fc770",
    "prId" : 10670,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10670#pullrequestreview-549257896",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fde23421-170f-4944-a776-1ad518c3a9e3",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "This should also be added in `Quotes.scala`",
        "createdAt" : "2020-12-10T14:54:59Z",
        "updatedAt" : "2020-12-14T19:19:50Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fad5c7bc3060d9628b08347789649a32ab56f7d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2535,2539 @@      def ScalaPackageClass: Symbol = dotc.core.Symbols.defn.ScalaPackageClass\n      def AnyClass: Symbol = dotc.core.Symbols.defn.AnyClass\n      def MatchableClass: Symbol = dotc.core.Symbols.defn.MatchableClass\n      def AnyValClass: Symbol = dotc.core.Symbols.defn.AnyValClass\n      def ObjectClass: Symbol = dotc.core.Symbols.defn.ObjectClass"
  },
  {
    "id" : "7a5f7930-1020-4454-b92d-e3def222d7eb",
    "prId" : 10661,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10661#pullrequestreview-546141806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c86626b8-40f6-425c-b98d-edbedf1c8235",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "It seems the printers can all be `val`s instead of `def`s?",
        "createdAt" : "2020-12-07T12:21:10Z",
        "updatedAt" : "2020-12-08T00:36:02Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "5728c7a6-5d5e-450b-ab09-f05b4629ce01",
        "parentId" : "c86626b8-40f6-425c-b98d-edbedf1c8235",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "`object`/`lazy val` would be better in that case. This is not part of the public API and we will be able to change it later if we need.",
        "createdAt" : "2020-12-07T13:21:00Z",
        "updatedAt" : "2020-12-08T00:36:02Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "97ec04b6-fecd-4803-bca3-6f80fd217689",
        "parentId" : "c86626b8-40f6-425c-b98d-edbedf1c8235",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I will use `lazy val for now`",
        "createdAt" : "2020-12-07T13:22:55Z",
        "updatedAt" : "2020-12-08T00:36:02Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "73226690313380c26c7de356685b99cff2340586",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +2665,2669 @@      lazy val TreeCode: Printer[Tree] = new Printer[Tree]:\n        def show(tree: Tree): String =\n          SourceCode.showTree(using QuotesImpl.this)(tree)(SyntaxHighlight.plain, fullNames = true)\n\n      lazy val TreeShortCode: Printer[Tree] = new Printer[Tree]:"
  },
  {
    "id" : "97864c5f-8812-419f-96ff-f581b83607f7",
    "prId" : 10608,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10608#pullrequestreview-543883082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c0802e4-56e2-4825-985b-2dfb187f9441",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "```suggestion\r\n        def rawDocumentation: Option[String] =\r\n```",
        "createdAt" : "2020-12-03T10:08:59Z",
        "updatedAt" : "2020-12-07T16:35:21Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "9c7ce263-0cb3-4190-991d-dc7f7e5cabce",
        "parentId" : "0c0802e4-56e2-4825-985b-2dfb187f9441",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Should add documentation to this method.",
        "createdAt" : "2020-12-03T10:09:51Z",
        "updatedAt" : "2020-12-07T16:35:21Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "f67ffd5d-7fff-4604-8f47-ac1b1cdb0f91",
        "parentId" : "0c0802e4-56e2-4825-985b-2dfb187f9441",
        "authorId" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "body" : "We do have docs in `trait Quotes`, which is where we actually care about docs, right?",
        "createdAt" : "2020-12-03T10:22:03Z",
        "updatedAt" : "2020-12-07T16:35:21Z",
        "lastEditedBy" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "tags" : [
        ]
      },
      {
        "id" : "10a311b9-9190-4173-8e1b-4715a26bd3f0",
        "parentId" : "0c0802e4-56e2-4825-985b-2dfb187f9441",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Ignore that, I was looking in the wrong file",
        "createdAt" : "2020-12-03T12:00:47Z",
        "updatedAt" : "2020-12-07T16:35:21Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "eae6d189ac8147ef376f8d0f8826bfe2fb31ed35",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2317,2321 @@          if self.exists then Some(self.sourcePos) else None\n\n        def docstring: Option[String] =\n          import dotc.core.Comments.CommentsContext\n          val docCtx = ctx.docCtx.getOrElse {"
  },
  {
    "id" : "ea811cde-81e9-437a-86be-b24caeaca675",
    "prId" : 10608,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10608#pullrequestreview-546197593",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa17fa11-c747-46ea-97e1-77f7f206df92",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "```suggestion\r\n        def docString: Option[String] =\r\n```",
        "createdAt" : "2020-12-07T14:25:26Z",
        "updatedAt" : "2020-12-07T16:35:21Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "eae6d189ac8147ef376f8d0f8826bfe2fb31ed35",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2317,2321 @@          if self.exists then Some(self.sourcePos) else None\n\n        def docstring: Option[String] =\n          import dotc.core.Comments.CommentsContext\n          val docCtx = ctx.docCtx.getOrElse {"
  }
]