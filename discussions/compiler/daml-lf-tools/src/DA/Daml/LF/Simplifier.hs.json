[
  {
    "id" : "74d26c65-1b45-45dc-a1bd-a90ec6ef90ce",
    "prId" : 9253,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9253",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41df6120-f488-4cb7-9a35-801ce474d051",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "comments look good.",
        "createdAt" : "2021-03-29T11:23:28Z",
        "updatedAt" : "2021-03-29T11:25:04Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "17b1115e9c344ccb48eb64d0399a22a2569b5a61",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +134,138 @@      BEShiftBigNumeric     -> Safe 1 -- fails on overflow (shift too large)\n      BEToNumericBigNumeric -> Safe 0 -- fails on overflow (numeric doesn't fit)\n      BEFromNumericBigNumeric -> Safe 1 -- doesn't fail\n      BEAddInt64          -> Safe 1\n      BESubInt64          -> Safe 1"
  },
  {
    "id" : "18e6de98-3b31-45c0-a54c-27f9d98ee990",
    "prId" : 9243,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9243",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a9e282b-a71a-4cf7-8bc3-8d4258d77bd8",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "@sofiafaro-da or @moritzkiefer-da Could you review that when you cleaning up the compiler?",
        "createdAt" : "2021-03-25T17:55:14Z",
        "updatedAt" : "2021-03-25T18:32:19Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "54d2e4c9-a00e-45d7-acf6-e7d4b129faec",
        "parentId" : "8a9e282b-a71a-4cf7-8bc3-8d4258d77bd8",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "can you add a todo please",
        "createdAt" : "2021-03-25T18:02:49Z",
        "updatedAt" : "2021-03-25T18:32:19Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e90b0619-dc7b-48af-b7cc-56b46d55b970",
        "parentId" : "8a9e282b-a71a-4cf7-8bc3-8d4258d77bd8",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "done.",
        "createdAt" : "2021-03-25T18:10:54Z",
        "updatedAt" : "2021-03-25T18:32:19Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "7bc9546318cac2ec9b0fb753fcabe920ba2b51fd",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +136,140 @@      BEShiftBigNumeric     -> Safe 1\n      BEToNumericBigNumeric -> Safe 0\n      BEFromNumericBigNumeric -> Safe 0\n      BEAddInt64          -> Safe 1\n      BESubInt64          -> Safe 1"
  },
  {
    "id" : "6be5dc9a-c453-49ef-a85e-244c262283b1",
    "prId" : 6519,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6519",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "adaffba6-1405-478b-b60e-3a26bc6596b1",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Type level lambdas of kind `Nat` are essentially value level lambdas. Any thoughts on how to handle them?",
        "createdAt" : "2020-06-29T13:43:09Z",
        "updatedAt" : "2020-06-29T13:48:29Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "558c3ef6-c6bd-452a-831b-076ee65278fb",
        "parentId" : "adaffba6-1405-478b-b60e-3a26bc6596b1",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Do you mean `ETyLam`? I can add special case to treat `ETyLam (_, KNat) _` as if it were a term lambdas. I wonder if those extra cases are worth the added complexity? Hmm...",
        "createdAt" : "2020-06-29T13:56:49Z",
        "updatedAt" : "2020-06-29T13:56:49Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "440feb2dd24c7f3dc86bb2c8dd4726f4c78d6f19",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +478,482 @@alwaysLiftUnder :: ExprF (Expr, Info) -> Bool\nalwaysLiftUnder = \\case\n    ETmLamF _ (ETmLam _ _, _) -> False\n    ETmLamF _ _ -> True\n    _ -> False"
  },
  {
    "id" : "1c19cdfe-89dc-49a4-aad2-90a3a8fb6fc3",
    "prId" : 6430,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6430",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9741ac95-cab8-40a4-aa4a-84ee86fc1c2e",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm not convinced we shouldn't lift lambdas at all. In a chain of lambdas, we should still lift the outermost lambda when possible. For instance, in\r\n```haskell\r\nf x y z =\r\n  let g a b = a+b\r\n  in f x (f y z)\r\n```\r\nI would expect the `g` to be lifted to the top-level.\r\n\r\nWe absolutely need tests for the constant lifter. We could either do very specific unit test with hand crafted ASTs or we could use the `jq` based approach.",
        "createdAt" : "2020-06-22T08:45:03Z",
        "updatedAt" : "2020-06-22T08:47:50Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "c23800e29d2cb012b70b448ec9d35426a2ac7bbe",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +490,494 @@    ENil _ -> False\n    ENone _ -> False\n    ETmLam _ _ -> False\n    EUpdate _ -> False\n    EScenario _ -> False"
  },
  {
    "id" : "b635ed4a-8cf8-4da7-b157-4402ad942606",
    "prId" : 6274,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6274",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c104ddd7-3e66-432d-b339-fce443ffca34",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe that is a silly question but what is the difference between `Safe 0` and `Unsafe`?",
        "createdAt" : "2020-06-09T14:49:10Z",
        "updatedAt" : "2020-06-09T17:11:27Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "a2093bf2-6ea4-4413-aa30-77de868df9f7",
        "parentId" : "c104ddd7-3e66-432d-b339-fce443ffca34",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "There are no silly questions on such complicated matters!\r\n\r\nThe expression `1` is 0-safe because it does not raise any exceptions. (We do not consider `k`-safe for any `k > 0` because you cannot apply arguments to it.) The expression `1 + error \"boom\"` is unsafe and not 1-safe because it raises an exception. The difference between these two expressions is that it's ok for the simplifier to delete the former when it's dead code but not the latter (because of strictness).",
        "createdAt" : "2020-06-09T16:17:19Z",
        "updatedAt" : "2020-06-09T17:11:27Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "b090cd64-3361-4ed5-a909-6b1950f365da",
        "parentId" : "c104ddd7-3e66-432d-b339-fce443ffca34",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Oh that makes sense, I think I got confused by looking at the code and seeing `BEError` marked as 0-safe and was thinking of `error \"abc\"` instead of `error`. Thanks for the explanation!",
        "createdAt" : "2020-06-09T16:20:40Z",
        "updatedAt" : "2020-06-09T17:11:27Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e4f09ad2cfa366135e277a471a4bf8608bd948f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +257,261 @@infoUnstepELet x (Info fv sf _) = (s1, s2)\n  where\n    s1 = Info fv (sf `min` Safe 0) TCNeither\n    s2 = Info (freeExprVar x <> fv) sf TCNeither\n"
  },
  {
    "id" : "15112973-8963-44da-a4cc-6a5e5ad6ad92",
    "prId" : 6274,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6274",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10f6e727-c565-4540-a88c-7527fce2fba5",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Where is the check that `x` is not free in `s2`? If we don’t need that for some reason the comment needs updating since it says exactly the opposite.",
        "createdAt" : "2020-06-09T14:59:48Z",
        "updatedAt" : "2020-06-09T17:11:27Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "8f8797a6-e8ab-4b91-894a-d53650fceaed",
        "parentId" : "10f6e727-c565-4540-a88c-7527fce2fba5",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We don't need to check if `x` is free in `e2` since `let` are _non_-recursive. Would it help to comment to that effect?\r\n\r\nI assume the comment you're referring to is the one about repeated application of this rule and the one below. The \"if `x` is not free in `e3`\" is supposed to resemble the condition of the rule below. Given the confusion it has already caused, I would simply remove the if-clause. This shouldn't make a difference since there's only one rule for `(let x = e1 in e2) e3` anyway.",
        "createdAt" : "2020-06-09T16:12:40Z",
        "updatedAt" : "2020-06-09T17:11:27Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "e743ced7-e970-42eb-8d81-e3dc55790135",
        "parentId" : "10f6e727-c565-4540-a88c-7527fce2fba5",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Yeah a comment that lets are not recursive + removing the `if` (it’s already below at the case where there is the condition) sounds good, thanks!",
        "createdAt" : "2020-06-09T16:23:11Z",
        "updatedAt" : "2020-06-09T17:11:27Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e4f09ad2cfa366135e277a471a4bf8608bd948f",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +385,389 @@      -- are _not_ recursive.\n      ETmAppF (ETmLam (x, t) e1, s0) (e2, s2) ->\n        go $ ELetF (BindingF (x, t) (e2, s2)) (e1, s1)\n        where\n          s1 = infoUnstepETmapp x s0"
  },
  {
    "id" : "9f98d941-c0a6-4be0-ae4e-e5582621d914",
    "prId" : 6101,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "359bd848-ca98-4499-a633-8133adf3ca9c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Why do we not do constant lifting if the list of free variables is null?",
        "createdAt" : "2020-05-26T11:03:38Z",
        "updatedAt" : "2020-06-18T13:06:33Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "1254565e-16f2-417e-93f5-917fc93f0112",
        "parentId" : "359bd848-ca98-4499-a633-8133adf3ca9c",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "The idea was to group together the constant liftings, so instead of doing one lift per application (for example), we will lift all the applications at once, as far as we can. This also prevents us from doing a constant lift in cases where the binding is already constant...\r\n\r\n(It might be better to also check isWorthLifting ... I think I'll experiment with that.)",
        "createdAt" : "2020-05-26T11:15:50Z",
        "updatedAt" : "2020-06-18T13:06:33Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "108e45fd-cf89-4ccd-b783-e15d7df4a593",
        "parentId" : "359bd848-ca98-4499-a633-8133adf3ca9c",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Oh I see that makes sense. Would be great to add a comment. Thanks for the explanation!",
        "createdAt" : "2020-05-26T11:17:28Z",
        "updatedAt" : "2020-06-18T13:06:33Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6e65688b4d24eb95403a47fa037c0377875f13e",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +374,378 @@        if freeVarsNull v' && not (alwaysLiftUnder es)\n          then pure (go world es)\n          else do -- constant lifting\n            es' <- forM es $ \\case\n              (e,i)"
  },
  {
    "id" : "196e669b-d6c9-44e6-8404-7df084d85e96",
    "prId" : 6101,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88dceb4b-39bc-428e-8aec-afb0e0e6a317",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "A comment here that explains why we don’t lift everything would be nice. I.e., what are the performance tradeoffs, do we loose performance by lifting things that are “too small”, if so have we benchmarked that this is the right tradeoff, …?",
        "createdAt" : "2020-05-26T11:09:57Z",
        "updatedAt" : "2020-06-18T13:06:33Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2c366d67-f075-456f-9fd5-6131573b638a",
        "parentId" : "88dceb4b-39bc-428e-8aec-afb0e0e6a317",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We should add `EUpdate` and `EScenario` to this list as well since they don't perform any computation.\r\n\r\nSpeedy's internal representation of `Update a` is currently equivalent to `Ledger# -> a`, similar to how Haskell uses `State RealWorld# a` for `IO a`. Thus, if we lift an update to the top-level, we always have to allocate a closure for it. If we leave it in place, we _can_ do something smarter. We're not doing that yet but I have it on my list. (Similarly for `Scenario a`.)\r\n\r\nNevertheless, lifting the children of `EUpdate` and `EScenario` if they are worth still seems like a good idea.\r\n\r\nFor example, in\r\n```haskell\r\nfoo x = do\r\n  _ <- bar x\r\n  _ <- bar 1\r\n  pure (1+1)\r\n```\r\nwe should neither lift `do _ <- bar 1; pure (1+1)` nor `pure (1+1)`. But we should lift `1+1`. Lifting `bar 1` is also fine since we have to allocate a closure for it anyway.",
        "createdAt" : "2020-06-18T19:54:25Z",
        "updatedAt" : "2020-06-18T20:11:15Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6e65688b4d24eb95403a47fa037c0377875f13e",
    "line" : 179,
    "diffHunk" : "@@ -1,1 +486,490 @@-- | Some terms are not worth lifting to the top level, because they don't\n-- require any computation.\nisWorthLifting :: Expr -> Bool\nisWorthLifting = \\case\n    EVar _ -> False"
  },
  {
    "id" : "bfe6d104-8c26-4098-b5dc-dd4a7f08958f",
    "prId" : 6101,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "799d17d7-dc5c-4eaf-b2e2-fa3b49791a9b",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Can this ever happen? If not, should we throw an error here?",
        "createdAt" : "2020-06-17T13:00:10Z",
        "updatedAt" : "2020-06-18T13:06:33Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "46a3051f-48ea-465b-b2ab-55b1ae461902",
        "parentId" : "799d17d7-dc5c-4eaf-b2e2-fa3b49791a9b",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "It can happen when the information in the world is incomplete (e.g. it's part of a strongly connected component of definitions, or we are building with --incremental=yes). I can add a comment.",
        "createdAt" : "2020-06-17T14:12:22Z",
        "updatedAt" : "2020-06-18T13:06:33Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6e65688b4d24eb95403a47fa037c0377875f13e",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +351,355 @@                -- full typechecking. That happens when compiling with --incremental=yes,\n                -- or when simplifying mutually recursive functions.\n                Left _ ->\n                    pure e\n"
  },
  {
    "id" : "4866ef56-c7d3-4ddc-8bb8-6287e14dc53f",
    "prId" : 6101,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3b610ce-d7dc-4081-8652-430cd413f127",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I forgot why but I remember that it was important that we run the simplifier in topological order. Now we are adding new definitions so this becomes a bit more fuzzy. Maybe at least worth adding a comment why this is not an issue?",
        "createdAt" : "2020-06-17T13:04:46Z",
        "updatedAt" : "2020-06-18T13:06:33Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b0e8058a-aa84-4161-b2b9-ef2529c8d687",
        "parentId" : "a3b610ce-d7dc-4081-8652-430cd413f127",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "It's still in topological order (-:",
        "createdAt" : "2020-06-17T14:23:22Z",
        "updatedAt" : "2020-06-18T13:06:33Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6e65688b4d24eb95403a47fa037c0377875f13e",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +339,343 @@                Right ty -> do\n                    name <- freshExprVarNameFor e\n                    addDefValue DefValue\n                        { dvalBinder = (name, ty)\n                        , dvalBody = e"
  },
  {
    "id" : "3f722f17-ce86-4a9a-83d9-670b67c568fe",
    "prId" : 6101,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d15e18b4-1483-4377-b7cf-4ebfeb977ef8",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe a hashmap would be a better idea given that an `Expr` can be quite large?",
        "createdAt" : "2020-06-17T13:08:09Z",
        "updatedAt" : "2020-06-18T13:06:33Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e2377596-0885-4fbe-9989-3c4d7f663431",
        "parentId" : "d15e18b4-1483-4377-b7cf-4ebfeb977ef8",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Maybe. I'll look into it, but I'll leave it as a separate PR.",
        "createdAt" : "2020-06-17T15:02:42Z",
        "updatedAt" : "2020-06-18T13:06:33Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6e65688b4d24eb95403a47fa037c0377875f13e",
    "line" : 195,
    "diffHunk" : "@@ -1,1 +502,506 @@    , sModule :: Module\n    , sReserved :: Set.Set ExprValName\n    , sCache :: Map.Map Expr ExprValName\n    , sFreshNamePrefix :: T.Text -- Prefix for fresh variable names.\n    }"
  },
  {
    "id" : "f7d28e6c-3cad-4c88-a9d5-1d6e3bc1ee30",
    "prId" : 6101,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcddfb6f-e020-4ab7-aa05-68b769300c3b",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "My understanding of this function is that it indicates when we want to lift the children of a _closed_ term. If that's correct, the effect of this `ECaseF` case here is that we take closed `case` expressions apart. I'm not sure we want that. Even without this `ECaseF` here, we should still lift closed branches of open `case` expression because the (RHS of the) branch is a maximal closed expression itself.",
        "createdAt" : "2020-06-18T18:28:04Z",
        "updatedAt" : "2020-06-18T20:11:15Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6e65688b4d24eb95403a47fa037c0377875f13e",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +481,485 @@    ETyLamF _ _ -> True\n    ETmLamF _ _ -> True\n    ECaseF _ _ -> True\n    _ -> False\n"
  },
  {
    "id" : "1fac277d-076e-4d9d-9583-2a66c5f35a3f",
    "prId" : 6101,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "466b979b-8f38-4f85-a1dd-36e414c2bda7",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We should only lift under a lambda if the thing we lift is not a lambda itself. Otherwise, we'll take top-level bindings of the form\r\n```haskell\r\nf _ x = x+x\r\n```\r\napart into\r\n```haskell\r\nf _ = f'\r\nf' x = x+x\r\n```\r\nThis performs worse during interpretation because we would need to go through the process of fully applying a closure twice.\r\nThis should not have significant impact but I suggest we change it nevertheless in order to make sure the simplifier does not end up making the code more complex.",
        "createdAt" : "2020-06-18T18:49:52Z",
        "updatedAt" : "2020-06-18T20:11:15Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6e65688b4d24eb95403a47fa037c0377875f13e",
    "line" : 173,
    "diffHunk" : "@@ -1,1 +480,484 @@alwaysLiftUnder = \\case\n    ETyLamF _ _ -> True\n    ETmLamF _ _ -> True\n    ECaseF _ _ -> True\n    _ -> False"
  },
  {
    "id" : "e0d64a24-9975-4b23-aee7-5e93859a38de",
    "prId" : 6013,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6013",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df698dee-9737-45d8-b8ce-47bffe6f3097",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This looks like you are reordering the values. I guess this doesn’t matter for anything?",
        "createdAt" : "2020-05-18T15:59:54Z",
        "updatedAt" : "2020-05-19T10:19:18Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "58764471-a636-409d-ad66-f001708b01fe",
        "parentId" : "df698dee-9737-45d8-b8ce-47bffe6f3097",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "I _think_ it's ok to reorder.",
        "createdAt" : "2020-05-19T10:05:06Z",
        "updatedAt" : "2020-05-19T10:19:18Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fdc3e79215bbeec79dac936d74352b0a3bc8111",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +389,393 @@                d' = simplifyDefValue w' dval\n            in NM.insert d' accum\n    in m { moduleValues = foldl' step NM.empty (topoSortDefValues m) }"
  },
  {
    "id" : "23f4500f-64a7-4848-9e04-cf3d41a725c0",
    "prId" : 5759,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5759",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cb2e0f1-c6e7-47a9-9c7e-194f465ce7c2",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I wonder if we should tighten this to \"a bunch of type lambdas followed by something looking like `\\x. x.f unit`\"? But on the other hand, there shouldn't be any other structural record projections, are there?",
        "createdAt" : "2020-05-08T19:47:18Z",
        "updatedAt" : "2020-05-11T15:11:14Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "ff358b81-dd9b-46f9-a619-3270def386db",
        "parentId" : "2cb2e0f1-c6e7-47a9-9c7e-194f465ce7c2",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Yeah, I don't think we get anything by making it more precise right now. 🤷 The only structural projections are the ones we insert for typeclass desugaring.",
        "createdAt" : "2020-05-11T10:59:09Z",
        "updatedAt" : "2020-05-11T15:11:15Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e304c5bdbe25b859f5355cd5e3c0b4e8f275415",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +209,213 @@isTypeClassProjection DefValue{..} = go dvalBody\n  where\n    go :: Expr -> Bool\n    go (ETyLam _ e) = go e\n    go (ETmLam _ e) = go e"
  },
  {
    "id" : "a20d8c3b-6657-4b5f-a4be-678f79c5f4ae",
    "prId" : 5759,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5759",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3419f7ee-cbcb-443f-868e-bd96f256cc9b",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Shouldn't we allow `ETmAppF` for dictionaries as well in order to inline dictionaries like `instance Eq a => Eq [a]`?",
        "createdAt" : "2020-05-08T20:03:15Z",
        "updatedAt" : "2020-05-11T15:11:14Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "6078fb99-b7a6-4069-b199-06d5d2763b02",
        "parentId" : "3419f7ee-cbcb-443f-868e-bd96f256cc9b",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Do these count as \"known typeclasses\"? AFAIK if you have a fixed `a`, GHC will specialize the typeclass, so we end up inlining them. But if you have a generic `a` then you aren't going to get inlining.",
        "createdAt" : "2020-05-11T10:55:09Z",
        "updatedAt" : "2020-05-11T15:11:15Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "b45a2ec2-ccfa-4a05-b3bf-fcfc79af3231",
        "parentId" : "3419f7ee-cbcb-443f-868e-bd96f256cc9b",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "I think we can perhaps leave this (& further experiments with inlining) to a separate PR.",
        "createdAt" : "2020-05-11T11:21:19Z",
        "updatedAt" : "2020-05-11T15:11:15Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e304c5bdbe25b859f5355cd5e3c0b4e8f275415",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +233,237 @@                TCDictionary (applySubstInExpr (typeSubst x ty) e)\n            _ ->\n                TCNeither\n\n    _ -> TCNeither"
  },
  {
    "id" : "131c671b-1458-4d98-81a8-3379c93af9b0",
    "prId" : 5759,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5759",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9ed402e-5d35-46b5-8e00-d4f4f33d7674",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Hasn't `typeclassStep` already remove all type applications?",
        "createdAt" : "2020-05-08T20:05:17Z",
        "updatedAt" : "2020-05-11T15:11:14Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "ba109252-56f9-438c-8cd9-3202d0f6e5ea",
        "parentId" : "c9ed402e-5d35-46b5-8e00-d4f4f33d7674",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Nope, because of type class specialization.",
        "createdAt" : "2020-05-11T10:52:11Z",
        "updatedAt" : "2020-05-11T15:11:15Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e304c5bdbe25b859f5355cd5e3c0b4e8f275415",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +275,279 @@            Just (dvalBody dv)\n\n    ETyApp e t -> do\n        ETyLam (x,_) e' <- getTypeClassDictionary world e\n        Just (applySubstInExpr (typeSubst x t) e')"
  },
  {
    "id" : "b8b7c798-a158-4cf0-ba20-19253a954f73",
    "prId" : 2670,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2670",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3dae6e33-aa6a-487b-84c9-797f87c2b750",
        "parentId" : null,
        "authorId" : null,
        "body" : "@hurryabit Just to confirm, type applications aren't counted here, right? Otherwise these numbers would have to be higher. (And so would the numbers for BEFoldl, BEFoldr, etc.) But then `BEMapEmpty` says `Safe 1` but it should be `Safe 0`? ",
        "createdAt" : "2019-08-27T19:59:50Z",
        "updatedAt" : "2019-08-28T11:30:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "af23e6dc-fba7-4f66-8d67-76aa2329f4bd",
        "parentId" : "3dae6e33-aa6a-487b-84c9-797f87c2b750",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Correct, type applications are not counted. (See the cases for `ETyApp` and `ETyLam` below.) The `Safe 1` for `BEMapEmpty` is wrong and must have slipped through my code review. I'll fix it in a separate PR.",
        "createdAt" : "2019-08-28T09:47:06Z",
        "updatedAt" : "2019-08-28T11:30:58Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c2900d7cd2fd33fbf5de9881afed0fec07bff1f",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +137,141 @@      BENumericFromText   -> Safe 1\n      BEToTextNumeric     -> Safe 1\n      BERoundNumeric      -> Safe 1\n      BEAddInt64          -> Safe 1\n      BESubInt64          -> Safe 1"
  },
  {
    "id" : "f007fa96-3f3a-4151-9324-f0f4b8e89fe5",
    "prId" : 1480,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1480",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d65171b2-9772-4db4-8acd-bc4035c85e5f",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Since `CODE_POINTS_TO_TEXT` will throw an exception if there's an invalid code point, this should be\r\n```suggestion\r\n      BECodePointsToText  -> Safe 0\r\n```",
        "createdAt" : "2019-06-03T13:10:09Z",
        "updatedAt" : "2019-06-04T13:28:02Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "f4d59d529f1dc909384d1bcbc58e2f901116e90b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +116,120 @@      BEGreater _         -> Safe 2\n      BEToText _          -> Safe 1\n      BECodePointsToText  -> Safe 1\n      BEAddDecimal        -> Safe 1\n      BESubDecimal        -> Safe 1"
  }
]