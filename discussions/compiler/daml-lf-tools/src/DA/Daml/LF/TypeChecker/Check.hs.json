[
  {
    "id" : "e9611547-a6ac-4e82-b763-3a8ca9dc9272",
    "prId" : 8137,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8137",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "349b589d-d1b6-4bc3-8f86-59f7191195f7",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "It's probably better to move this before checking any expressions such that we've run through this before we call `checkExceptionType`. It's not strictly necessary but I think it makes for better error messages.",
        "createdAt" : "2020-12-02T13:51:22Z",
        "updatedAt" : "2020-12-02T13:59:31Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "1b0056e9-e74f-433a-be68-221f32e033b0",
        "parentId" : "349b589d-d1b6-4bc3-8f86-59f7191195f7",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Oh, good catch!",
        "createdAt" : "2020-12-02T13:58:16Z",
        "updatedAt" : "2020-12-02T13:59:31Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "49708b82d68e3cb611bff88ee5009092170ed465",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +852,856 @@  traverse_ (with (ContextDefDataType m) checkDefDataType) dataTypes\n  traverse_ (with (\\t -> ContextTemplate m t TPWhole) $ checkTemplate m) templates\n  traverse_ (with (ContextDefException m) (checkDefException m)) exceptions\n  traverse_ (with (ContextDefValue m) checkDefValue) values"
  },
  {
    "id" : "6d57d697-18b0-4aa7-aeee-10bf3a9afc2b",
    "prId" : 8112,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8112",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56dcd8e7-e961-4eb7-836f-8c394cd7c42c",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We need a strategy for making sure we don't put anything related to exceptions into old DAML-LF packages. I guess our primary approach will be to guard it with CPP macros and the conversion to DAML-LF. I' wondering if it would make sense to guard it here as well in order to have a sanity check. There's the `_checkFeature` function towards the bottom of this file, which could help. Maybe we should do this for other features as well, but then in a separate PR.",
        "createdAt" : "2020-11-30T15:33:12Z",
        "updatedAt" : "2020-11-30T15:37:49Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "27b3a286-3dcf-4162-a4b0-685ab87d8b7b",
        "parentId" : "56dcd8e7-e961-4eb7-836f-8c394cd7c42c",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "That sounds reasonable.",
        "createdAt" : "2020-11-30T16:00:48Z",
        "updatedAt" : "2020-11-30T16:00:48Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5460be3dfb25af6f956974b06f80a02376c2cf77",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +129,133 @@  BTAny -> KStar\n  BTTypeRep -> KStar\n  BTAnyException -> KStar\n  BTGeneralError -> KStar\n  BTArithmeticError -> KStar"
  },
  {
    "id" : "f199dda0-d193-4e15-9c8e-59fdfa89f1bc",
    "prId" : 8112,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8112",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "244d7ccc-b247-4ba8-9d37-3673ce63f363",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We also need a check that the exception definition is well-formed.",
        "createdAt" : "2020-11-30T15:36:03Z",
        "updatedAt" : "2020-11-30T15:37:49Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "59f575b4-ad56-4177-bfb8-9c69bd8f16db",
        "parentId" : "244d7ccc-b247-4ba8-9d37-3673ce63f363",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Yes, there's a TODO in checkModule to add this. :-) ",
        "createdAt" : "2020-11-30T15:59:13Z",
        "updatedAt" : "2020-11-30T15:59:13Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5460be3dfb25af6f956974b06f80a02376c2cf77",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +742,746 @@checkExceptionType ty = do\n    checkType ty KStar\n    checkExceptionType' ty\n\ncheckExpr' :: MonadGamma m => Expr -> Type -> m Type"
  },
  {
    "id" : "859c7abe-077f-49f9-b8c0-24aa549ad9e3",
    "prId" : 7944,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe138b75-54ec-4ce0-be10-7db513bdf77e",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Shouldn't we run this on `ETyLam`, `DefTypeSyn` and `DefDataType` as well?",
        "createdAt" : "2020-11-11T12:18:58Z",
        "updatedAt" : "2020-11-11T13:54:58Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "b6d9a052-2c9c-4de1-8e7f-be68589e7bf4",
        "parentId" : "fe138b75-54ec-4ce0-be10-7db513bdf77e",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Feeling very silly because of course we should. I added these.",
        "createdAt" : "2020-11-11T13:23:30Z",
        "updatedAt" : "2020-11-11T13:54:58Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "bac93364-447e-4b35-90e3-566484aa17d8",
        "parentId" : "fe138b75-54ec-4ce0-be10-7db513bdf77e",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Please don't feel silly. This sort of stuff happens to everybody and that's one of the reasons why we do code review. I miss so many things all the time and you and others catch it. I think that's great teamwork and nothing to feel silly about.",
        "createdAt" : "2020-11-11T14:45:25Z",
        "updatedAt" : "2020-11-11T14:45:25Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "b9905be0-eda1-4e36-9365-af385d27ded0",
        "parentId" : "fe138b75-54ec-4ce0-be10-7db513bdf77e",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Thanks for the kind words :-) ",
        "createdAt" : "2020-11-11T15:13:25Z",
        "updatedAt" : "2020-11-11T15:13:26Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "003fbf65fbee243f5f2543fcaab83947d4e4ed5a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +130,134 @@  BTTypeRep -> KStar\n\ncheckKind :: MonadGamma m => Kind -> m ()\ncheckKind = \\case\n  KNat -> pure ()"
  },
  {
    "id" : "f63450f7-4eae-47e2-9a78-c12596785532",
    "prId" : 7944,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96c0932c-bcf4-4b8e-b5d0-74087c7bf888",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We clearly need to use recursion schemes here. :trollface:",
        "createdAt" : "2020-11-11T12:19:56Z",
        "updatedAt" : "2020-11-11T13:54:58Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "003fbf65fbee243f5f2543fcaab83947d4e4ed5a",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +138,142 @@  KArrow a b -> do\n    checkKind a\n    checkKind b\n\nkindOf :: MonadGamma m => Type -> m Kind"
  },
  {
    "id" : "29b123e5-3f79-4160-8fca-0ace4b8b9a0b",
    "prId" : 7892,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7892",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "401f9cb7-3fd9-4f3e-bde4-c70c7b3424d5",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "It's quite unfortunate that getting the number of constructors is linear in the same number. However, this number is only used if we don't have a default pattern and hence are either linear in the number of constructors already or we'll throw an error and this sort of performance doesn't matter anymore.\r\nNevertheless, I'll look into using a vector for this field in a separate PR.",
        "createdAt" : "2020-11-05T22:48:23Z",
        "updatedAt" : "2020-11-06T12:41:11Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "10a2c357-b1ed-4284-9f22-a9306cfa51d1",
        "parentId" : "401f9cb7-3fd9-4f3e-bde4-c70c7b3424d5",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "The `!! k` here is only used when there's an error, right? If so, it should be good enough...",
        "createdAt" : "2020-11-06T11:59:38Z",
        "updatedAt" : "2020-11-06T12:41:11Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "41736416-4e0a-4d71-9e79-43db99251d2c",
        "parentId" : "401f9cb7-3fd9-4f3e-bde4-c70c7b3424d5",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Yes, that's only used in the error case.",
        "createdAt" : "2020-11-06T12:03:43Z",
        "updatedAt" : "2020-11-06T12:41:11Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "63bb76f8354837ff388b17b6b107ee6ae8cfb26a",
    "line" : 170,
    "diffHunk" : "@@ -1,1 +499,503 @@            DefDataType{dataParams, dataCons} <- inWorld (lookupDataType scrutTCon)\n            case dataCons of\n                DataVariant cons -> (,,) (length cons) (\\k -> CPVariant scrutTCon (fst (cons !! k)) wildcard)\n                    <$> typeOfAltsVariant scrutTCon scrutTArgs (map fst dataParams) cons alts\n                DataEnum cons ->  (,,) (length cons) (\\k -> CPEnum scrutTCon (cons !! k))"
  },
  {
    "id" : "7e0a0d82-c143-4d3a-ae65-ddaa63504e69",
    "prId" : 7892,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7892",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "550747dc-c5d5-43cc-b9e5-96e74e62f0c3",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Because of `lookupWithIndex`, this whole process is linear in the number of constructors *and* linear in the number of alternatives, meaning it's quadratic in the number of constructors for any match that doesn't use a default branch. That sounds problematic... 😢 \r\n\r\nIt's probably worth it to construct a `Map` for these lookups, something like\r\n\r\n```Haskell\r\nMap.fromList [(name, (rank, type)) | (rank, (name, type)) <- zip (0 ..) cons]\r\n```\r\n\r\neven if it's just in `typeOfAltsVariant` and `typeOfAltsEnum`.",
        "createdAt" : "2020-11-06T11:53:15Z",
        "updatedAt" : "2020-11-06T12:41:11Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "5b2538d0-5463-41e2-b3cb-90e6b871860a",
        "parentId" : "550747dc-c5d5-43cc-b9e5-96e74e62f0c3",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Yeah, I agree that this is bad and needs fixing. Since the issue is not coming from this change but has been there before, I'm inclined to fix it in a separate PR. I would fix this in a more general fishing and replace\r\n```haskell\r\ndata DataCons\r\n  = DataRecord  ![(FieldName, Type)]\r\n  | DataVariant ![(VariantConName, Type)]\r\n  | DataEnum ![VariantConName]\r\n```\r\nby\r\n```haskell\r\ndata DataCons\r\n  = DataRecord  !(Vector (FieldName, Type)) !(Map FieldName Int)\r\n  | DataVariant !(Vector (VariantConName, Type)) !(Map VariantConName Int)\r\n  | DataEnum !(Vector VariantConName) !(Map VariantConName Int)\r\n```\r\nAt least for records and variants we have lots of linear lookups all over the type checker. Since values of type `DataCons` are read way more often than they are written, this sort of caching seems reasonable to me. Or do you think that's a bad idea?",
        "createdAt" : "2020-11-06T12:12:22Z",
        "updatedAt" : "2020-11-06T12:41:11Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "bedebdc4-5480-4ff7-ae15-6c37dabc5f7f",
        "parentId" : "550747dc-c5d5-43cc-b9e5-96e74e62f0c3",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "That seems reasonable, though I'd prefer these \"association vector, index map\" pairs were wrapped up in a generic type (similar to Data.NameMap) that maintains the invariant we want.",
        "createdAt" : "2020-11-06T13:08:05Z",
        "updatedAt" : "2020-11-06T13:13:37Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "49716e57-12d7-46fd-b64f-bd1db287f500",
        "parentId" : "550747dc-c5d5-43cc-b9e5-96e74e62f0c3",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Yeah, that's what I was planning to do. I'll take care of it. 😄",
        "createdAt" : "2020-11-06T16:14:02Z",
        "updatedAt" : "2020-11-06T16:14:03Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "63bb76f8354837ff388b17b6b107ee6ae8cfb26a",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +419,423 @@        CPVariant patnTCon con var\n          | scrutTCon == patnTCon -> do\n            (conRank, conArgType) <- match _Just (EUnknownDataCon con) (con `lookupWithIndex` cons)\n            -- NOTE(MH): The next line should never throw since @scrutType@ has\n            -- already been checked. The call to 'substitute' is hence safe for"
  },
  {
    "id" : "cb26493f-4aca-4b47-a56f-47f441a671ca",
    "prId" : 7892,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7892",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8b248e8-f3c3-4404-8b9f-35c96837a867",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Same thing here for `elemIndex` as with the variants and `lookupWithIndex`.",
        "createdAt" : "2020-11-06T11:56:40Z",
        "updatedAt" : "2020-11-06T12:41:11Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "f90019c3-06c1-4f47-8741-89273bab64f1",
        "parentId" : "b8b248e8-f3c3-4404-8b9f-35c96837a867",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Yeah, sad. That would be fixable the same way though. 😃",
        "createdAt" : "2020-11-06T12:41:56Z",
        "updatedAt" : "2020-11-06T12:41:57Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "63bb76f8354837ff388b17b6b107ee6ae8cfb26a",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +435,439 @@        CPEnum patnTCon con\n          | scrutTCon == patnTCon -> do\n            conRank <- match _Just (EUnknownDataCon con) (con `elemIndex` cons)\n            rhsType <- typeOf rhs\n            pure (singletonMR conRank, rhsType)"
  },
  {
    "id" : "d5a14c7e-2141-49e0-994a-7b482fd4b4e8",
    "prId" : 3959,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "231a9525-6b52-4584-896a-018831d0a0c8",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This is still missing the check for cyclic type synonyms. Let’s leave that for a separate PR but please add a TODO.",
        "createdAt" : "2020-01-09T19:24:45Z",
        "updatedAt" : "2020-01-10T16:41:51Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "a4052fe8-fb80-4293-a28d-a196fd925964",
        "parentId" : "231a9525-6b52-4584-896a-018831d0a0c8",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "we have this TODO already... In `checkModule` :\r\n```-- TODO #3616: check type synonyms for cycles```\r\n",
        "createdAt" : "2020-01-10T09:07:45Z",
        "updatedAt" : "2020-01-10T16:41:51Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "3e22a621-6a0e-47f0-805e-a5cd35019c82",
        "parentId" : "231a9525-6b52-4584-896a-018831d0a0c8",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : ":+1:",
        "createdAt" : "2020-01-10T09:34:41Z",
        "updatedAt" : "2020-01-10T16:41:51Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a9feaae0a6921e3c04c93a65e754eca04cc83df",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +602,606 @@checkExpr expr typ = void (checkExpr' expr typ)\n\n-- | Check that a type synonym definition is well-formed.\ncheckDefTypeSyn :: MonadGamma m => DefTypeSyn -> m ()\ncheckDefTypeSyn DefTypeSyn{synParams,synType} = do"
  },
  {
    "id" : "75bed96f-8e1b-4dbc-a7c3-dc7b2d7133c6",
    "prId" : 3703,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebbb8abb-0f6e-4643-864a-fe1c816ff232",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Where is the case where we are checking the type of an expression against a type synonym?",
        "createdAt" : "2019-12-03T08:09:09Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "6ab40c10-f99f-4e58-b526-37a133f039ba",
        "parentId" : "ebbb8abb-0f6e-4643-864a-fe1c816ff232",
        "authorId" : "81b3e7a7-b582-41d2-9c57-f2af6c646110",
        "body" : "Not there yet. This PR doesn't extend the haskell type checker.\r\nMy idea is that type synonyms will be handled (expanded) by `lookupDataType`.\r\nBut there might be a better place. We shall see in the following PR! ",
        "createdAt" : "2019-12-03T12:28:47Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : "81b3e7a7-b582-41d2-9c57-f2af6c646110",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e10f3d85f2547f8c6f1968d814c0ffeba77445b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +564,568 @@        unless (null params) $ throwWithContext EEnumTypeWithParams\n        checkUnique EDuplicateConstructor names\n      DataSynonym typ -> do -- TODO(NICK): check for cycles\n        typ `checkType` KStar\n"
  },
  {
    "id" : "2be73477-9c5e-4d0e-9d12-17aa4e6d4e73",
    "prId" : 3437,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3437",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d5c1385-6608-4507-b82d-18450b2a8a49",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Perhaps that is nitpicking but I would find this easier to read if we called the type variables `k` and `v` or `key` and `value`.",
        "createdAt" : "2019-11-13T07:42:23Z",
        "updatedAt" : "2019-11-13T10:15:23Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "2687a7b32b981b95bbe4f511bdbce97d15c432ca",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +213,217 @@  BEMapToList -> pure $ TForall (alpha, KStar) $ TMap tAlpha :-> TList (TMapEntry tAlpha)\n  BEMapSize   -> pure $ TForall (alpha, KStar) $ TMap tAlpha :-> TInt64\n  BEGenMapEmpty -> pure $ TForall (alpha, KStar) $ TForall (beta, KStar) $ TGenMap tAlpha tBeta\n  BEGenMapInsert -> pure $ TForall (alpha, KStar) $ TForall (beta, KStar) $ tAlpha :-> tBeta :-> TGenMap tAlpha tBeta :-> TGenMap tAlpha tBeta\n  BEGenMapLookup -> pure $ TForall (alpha, KStar) $ TForall (beta, KStar) $ tAlpha :-> TGenMap tAlpha tBeta :-> TOptional tBeta"
  },
  {
    "id" : "c4e6e2af-a160-454a-ac01-3f6f234924e1",
    "prId" : 3141,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3141",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10478c37-2cee-458a-aa14-21eb49d85c3b",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Won't this produce very confusing compiler errors if a type has free type variables?",
        "createdAt" : "2019-10-09T12:59:27Z",
        "updatedAt" : "2019-10-10T04:59:02Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "a69b931a-7800-4bf0-92a1-c2113e9f9db0",
        "parentId" : "10478c37-2cee-458a-aa14-21eb49d85c3b",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "That’s a fair point but given that DAML users should never see this check I don’t think we need to aim for a good error message here.",
        "createdAt" : "2019-10-09T13:08:32Z",
        "updatedAt" : "2019-10-10T04:59:02Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f33ac4e3d1ffe96883e634244b43469966c6fd2",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +503,507 @@  EToAny ty bodyExpr -> do\n    -- We clear the environment to make sure that there are no free type variables in ty\n    clearTypeVars $ checkType ty KStar\n    checkExpr bodyExpr ty\n    pure $ TBuiltin BTAny"
  },
  {
    "id" : "ed135830-2156-4e37-baea-cdd0071a3744",
    "prId" : 3118,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3118",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23dd9e4c-7970-49f8-b52a-abaed3c47367",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "... and a template type. :)",
        "createdAt" : "2019-10-09T08:45:30Z",
        "updatedAt" : "2019-10-09T08:46:14Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8cea9b36628653cfe6827ff1ff5d531151c27b0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +510,514 @@    pure $ TOptional (TCon tpl)\n  EToTextTemplateId tpl -> do\n    -- Ensure that the type is known.\n    _ :: Template <- inWorld (lookupTemplate tpl)\n    pure $ TBuiltin BTText"
  },
  {
    "id" : "f7601502-c37c-4b86-9580-3bd8792bc3b5",
    "prId" : 663,
    "prUrl" : "https://github.com/digital-asset/daml/pull/663",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0560ee15-cff0-46ab-9418-4b158158995e",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "It looks like the changes here result in a call to `error` rather than a call to `throwWithContext`. It isn’t immediately obvious to me that this will be handled the same way and if not, what exactly this implies.",
        "createdAt" : "2019-04-24T11:50:57Z",
        "updatedAt" : "2019-04-25T10:40:16Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "1bccfea4-ed31-4dc5-bd0b-e5307e367102",
        "parentId" : "0560ee15-cff0-46ab-9418-4b158158995e",
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Nope, this calls a different checkFeature which does call throwWithContext - so all good.",
        "createdAt" : "2019-04-24T12:40:27Z",
        "updatedAt" : "2019-04-25T10:40:16Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6a253f4205edcddd905fb7a7812b140b113c8d",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +387,391 @@checkRetrieveByKey :: MonadGamma m => RetrieveByKey -> m (Type, Type)\ncheckRetrieveByKey RetrieveByKey{..} = do\n  checkFeature featureContractKeys\n  tpl <- inWorld (lookupTemplate retrieveByKeyTemplate)\n  case tplKey tpl of"
  },
  {
    "id" : "0a2cf21c-16dc-42b1-aaa1-711902387c9e",
    "prId" : 639,
    "prUrl" : "https://github.com/digital-asset/daml/pull/639",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90094a53-5be9-4c34-9f97-5639510b3790",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Surprised there isn't a generate `checkSupported` which takes the predicate an error message and hides the magic.",
        "createdAt" : "2019-04-23T16:18:32Z",
        "updatedAt" : "2019-04-24T08:38:01Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e91f8d34bc3cd39588ceb7348f9adb4e0a46b8c6",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +548,552 @@\ncheckSupportsContractKeys :: MonadGamma m => m ()\ncheckSupportsContractKeys = do\n    v <- view lfVersion\n    unless (supportsContractKeys v) $"
  },
  {
    "id" : "d3e05abb-fc1a-422d-9dc5-8db8bb46bbbe",
    "prId" : 639,
    "prUrl" : "https://github.com/digital-asset/daml/pull/639",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0353edf-0382-4e47-b70a-50c1181ee064",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Not such a fan that `supportsContractKeys` is a nicely abstracted predicate, and then the error message repeats the version miles away from it",
        "createdAt" : "2019-04-23T16:19:22Z",
        "updatedAt" : "2019-04-24T08:38:01Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      },
      {
        "id" : "793a4ebd-e23b-4374-8ad5-eeb435069630",
        "parentId" : "b0353edf-0382-4e47-b70a-50c1181ee064",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I totally agree. I'll clean that up in a followup PR for all features that depend on the DAML-LF version. Same for the other remark.",
        "createdAt" : "2019-04-23T16:23:24Z",
        "updatedAt" : "2019-04-24T08:38:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "e91f8d34bc3cd39588ceb7348f9adb4e0a46b8c6",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +551,555 @@    v <- view lfVersion\n    unless (supportsContractKeys v) $\n        throwWithContext $ EUnsupportedFeature \"Contract keys\" version1_3\n\ncheckTemplateKey :: MonadGamma m => ExprVarName -> Qualified TypeConName -> TemplateKey -> m ()"
  }
]