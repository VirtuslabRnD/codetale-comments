[
  {
    "id" : "c60fa863-cfd8-4a11-b732-56d782c8b6b1",
    "prId" : 5219,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5219",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "465af3e6-307d-4285-922f-3ba8e7afbacf",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I had exactly the same chain of functions in my prototype. ðŸ˜ƒ ",
        "createdAt" : "2020-03-26T17:19:30Z",
        "updatedAt" : "2020-03-26T17:37:16Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "665f6e8821c0da979ddb3a800d0b3ccca0652576",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +267,271 @@    | null components = error \"Empty module names are invalid.\"\n    | otherwise = map (\\v -> (ModuleName v, origin))  ((tail . inits . init) components)\n    -- init goes from A.B.C to A.B, inits gives us [[], [A], [A,B]], tail drops []"
  },
  {
    "id" : "8bdf9c20-64d0-4769-8a7f-065c195c393b",
    "prId" : 3827,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3827",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06f3bbc7-8f1a-4b79-8cfb-a2be711e2b6f",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "thanks for the nice comment!",
        "createdAt" : "2019-12-12T12:23:33Z",
        "updatedAt" : "2019-12-12T12:27:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "6475bdd2fc3262167a8b84f938509e3f5be0f358",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +186,190 @@    checkModuleBody m\n\n-- | Is one module an ascendant of another? For instance\n-- module \"A\" is an ascendant of module \"A.B\" and \"A.B.C\".\n--"
  },
  {
    "id" : "6d96ab25-952e-44dd-a7ac-b5feefb953b6",
    "prId" : 3770,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3770",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1670fbd8-425f-46b3-8405-6dbee4e1a53a",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Iâ€™m a bit confused about this. Do we have some concept of hierarchical modules in DAML-LF? I thought this worked just like in Haskell where the hierarchy doesnâ€™t really mean anything.",
        "createdAt" : "2019-12-06T15:41:13Z",
        "updatedAt" : "2019-12-09T15:52:51Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "f856bc76-5362-4cf5-b6de-9ada7ebbc371",
        "parentId" : "1670fbd8-425f-46b3-8405-6dbee4e1a53a",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Ah I think I got it now, we need to check for collisions between module `A.B` and type `B` in module `A`. It would be good to add a comment on this.",
        "createdAt" : "2019-12-06T15:55:15Z",
        "updatedAt" : "2019-12-09T15:52:51Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1382228b2d92a9bd730fb850759d8b2e4479841",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +181,185 @@-- | Is the first module an ascendant of the second? This check\n-- is case-insensitive because name collisions are case-insensitive.\nisAscendant :: ModuleName -> ModuleName -> Bool\nisAscendant (ModuleName xs) (ModuleName ys) =\n    (length xs < length ys) && and (zipWith sameish xs ys)"
  },
  {
    "id" : "07b22636-6e6d-43e1-b61b-245577c0b1a5",
    "prId" : 2981,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea6dfa85-80e5-4d77-b9bd-eadaaac38cd1",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "That seems like a weird rule, I would have expected the opposite if anything, i.e., collisions are only allowed if they are in different modules â€¦",
        "createdAt" : "2019-09-23T15:06:15Z",
        "updatedAt" : "2019-09-23T16:49:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d5034457-ad89-4ec2-accc-39e358399378",
        "parentId" : "ea6dfa85-80e5-4d77-b9bd-eadaaac38cd1",
        "authorId" : null,
        "body" : "I think it's got something to do with the conversion of named fields in variant types.",
        "createdAt" : "2019-09-23T15:15:43Z",
        "updatedAt" : "2019-09-23T16:49:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "a6b77d44-cb75-47cf-8527-8f444d67a041",
        "parentId" : "ea6dfa85-80e5-4d77-b9bd-eadaaac38cd1",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Let consider the following daml:\r\n```\r\nmodule Mod where\r\ndata T @a : A = {x: a, y: a} | B {x: a, y: a}\r\n```\r\n\r\nis compiled in LF\r\n```\r\nmod Mod {\r\n  \r\nrecord T.A @a = {x: a, y: a};\r\nrecord T.B @a = {x: a, y: a};\r\n\r\nvariant T @a := A (Mod:T.A a) | B (Mod:T.B b);\r\n}\r\n```\r\n \r\nIn this case you have a collision between\r\n\r\n- the record constructor `A.C` (noted `Mod:A.C` in LF and translated in java/scala as `Mod.A.C`) and \r\n- the constructor `A` of the variant `T` (noted `Mod:A:C` in LF and translated in java/scala as `Mod.A.C`).\r\n\r\nThis is OK to have such \"collision\" because the record constructor and the variant constructor will be merged back in the same object in java/scala.\r\n\r\n\r\n",
        "createdAt" : "2019-09-23T15:32:34Z",
        "updatedAt" : "2019-09-23T16:49:09Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "bbbb2d51-8413-4ede-a729-c6691dd27703",
        "parentId" : "ea6dfa85-80e5-4d77-b9bd-eadaaac38cd1",
        "authorId" : null,
        "body" : "Thanks for the explanation @remyhaemmerle-da! ",
        "createdAt" : "2019-09-23T15:35:28Z",
        "updatedAt" : "2019-09-23T16:49:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "717e0bb83a08360e6aa87ffdd32e1bee88891def",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +55,59 @@-- | Asks whether a name collision is permitted. According to the\n-- LF Spec, a name collision is only permitted when it occurs\n-- between a record type and a variant constructor defined in\n-- the same module.\nnameCollisionPermitted :: Name -> Name -> Bool"
  },
  {
    "id" : "89db3e3b-f0cf-48ff-a0bd-13cc0bb7b719",
    "prId" : 2981,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae7800cb-3bcd-4c54-aa16-f3f343f71054",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Could we remove the `ModuleName` from each constructor and use `Qualified Name` instead?",
        "createdAt" : "2019-09-23T16:57:15Z",
        "updatedAt" : "2019-09-23T17:04:58Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "3403c610-1a04-4f84-a615-023003c2b838",
        "parentId" : "ae7800cb-3bcd-4c54-aa16-f3f343f71054",
        "authorId" : null,
        "body" : "We don't care about carrying around the package name though. Maybe I will change it later if it turns out to be useful?",
        "createdAt" : "2019-09-23T17:17:23Z",
        "updatedAt" : "2019-09-23T17:17:23Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "717e0bb83a08360e6aa87ffdd32e1bee88891def",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +21,25 @@-- the corresponding case insensitive fully resolved name,\n-- see 'FRName'.\ndata Name\n    = NModule ModuleName\n    | NRecordType ModuleName TypeConName"
  },
  {
    "id" : "b8c1ff1f-9872-420a-9462-399d11d717f7",
    "prId" : 2981,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e899166c-9a24-4e8f-98c0-949648c3819e",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Does this detect collisions when the modules don't depend on each other? Please convince me it does by adding a test. :smiley: ",
        "createdAt" : "2019-09-23T17:02:14Z",
        "updatedAt" : "2019-09-23T17:04:58Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "22dfa263-9f08-47ff-ad71-3e3588908a44",
        "parentId" : "e899166c-9a24-4e8f-98c0-949648c3819e",
        "authorId" : null,
        "body" : "I think for that we need to check the full package, not just a module? This PR only deals with a single module check.",
        "createdAt" : "2019-09-23T17:10:22Z",
        "updatedAt" : "2019-09-23T17:10:33Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "717e0bb83a08360e6aa87ffdd32e1bee88891def",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +154,158 @@\n-- | Check whether a module satisfies the name collision condition.\ncheckModule :: MonadGamma m => Module -> m ()\ncheckModule mod0 =\n    void . flip S.runStateT initialState $ do"
  },
  {
    "id" : "b914ce7c-4358-4a3b-af71-10a8d68869a8",
    "prId" : 2981,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3277ec3-c1db-40dd-8120-cab82d50fab9",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Can field and choice names actually collide with anything?",
        "createdAt" : "2019-09-23T17:04:05Z",
        "updatedAt" : "2019-09-23T17:04:58Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "f6a63da6-c22f-4fe8-8283-10ea60f27021",
        "parentId" : "d3277ec3-c1db-40dd-8120-cab82d50fab9",
        "authorId" : null,
        "body" : "I don't think so, at least not from DAML, but it's in the spec (unlike fully resolved value names, which aren't in the spec for some reason).",
        "createdAt" : "2019-09-23T17:09:19Z",
        "updatedAt" : "2019-09-23T17:09:39Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "717e0bb83a08360e6aa87ffdd32e1bee88891def",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@    | NVariantCon ModuleName TypeConName VariantConName\n    | NEnumCon ModuleName TypeConName VariantConName\n    | NField ModuleName TypeConName FieldName\n    | NChoice ModuleName TypeConName ChoiceName\n"
  }
]