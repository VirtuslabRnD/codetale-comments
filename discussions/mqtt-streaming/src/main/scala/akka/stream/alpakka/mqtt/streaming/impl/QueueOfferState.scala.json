[
  {
    "id" : "dbc3a289-b192-4f94-a6a5-6736a33e582d",
    "prId" : 1818,
    "prUrl" : "https://github.com/akka/alpakka/pull/1818#pullrequestreview-258434262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20e0a7cc-98e5-4f68-b6f4-99dd7fa85de9",
        "parentId" : null,
        "authorId" : "b8cd968d-9321-417f-8dcf-5300bfdd199e",
        "body" : "not related to this change, but I wonder if that unstashing by sending to `self` is correct? it would be ok if the order of `QueueOfferCompleted` messages doesn't matter, otherwise another `QueueOfferCompleted` could already be in the mailbox and be processed by the behavior before the unstashed messages. Solution would be to use `StashBuffer`.",
        "createdAt" : "2019-07-05T14:30:13Z",
        "updatedAt" : "2019-07-05T14:30:24Z",
        "lastEditedBy" : "b8cd968d-9321-417f-8dcf-5300bfdd199e",
        "tags" : [
        ]
      }
    ],
    "commit" : "21e3ca4603ffef245aca977fa6437fee32a6cebb",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +43,47 @@        case (_, other) =>\n          waitForQueueOfferCompleted(behavior, stash = stash :+ other)\n      }\n      .receiveSignal { case (ctx, signal) => Behavior.interpretSignal(behavior, ctx, signal) } // handle signals immediately\n}"
  },
  {
    "id" : "64ff3e04-2460-49de-9d48-b29f8507459f",
    "prId" : 1577,
    "prUrl" : "https://github.com/akka/alpakka/pull/1577#pullrequestreview-213716231",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2b74751-7929-433a-a11d-0a56c6d2fd29",
        "parentId" : null,
        "authorId" : "7393f2ae-68ce-4ca1-8eea-cc4b5e9f0769",
        "body" : "One thing I'm not clear on are the semantics here. Note that on L43, we catch all events that flow. Thus, the intention is that all signals go to `behavior` but nothing else (until we hit L34 in the future)\r\n\r\nIf `behavior`'s signal handler (i.e. the behavior being run via `orElse`) returns `Behavior.same`, I'd like to clarify that it doesn't change the behavior of the actor to itself, i.e. `waitForQueueOfferCompleted`  (L26-L46) remains the behavior. Hopefully my question makes sense..",
        "createdAt" : "2019-03-12T23:14:04Z",
        "updatedAt" : "2019-07-01T06:16:48Z",
        "lastEditedBy" : "7393f2ae-68ce-4ca1-8eea-cc4b5e9f0769",
        "tags" : [
        ]
      },
      {
        "id" : "b8ea3e3b-232c-43f8-8941-bbb1ae1e6b0c",
        "parentId" : "f2b74751-7929-433a-a11d-0a56c6d2fd29",
        "authorId" : "c82885b6-397c-46ac-bd34-8b847b9fcd87",
        "body" : "I *think* the behaviour would indeed remain the same i.e. stay as per the behaviour of `waitForQueueOfferCompleted`. But I've not yet proved this.\r\n\r\nHowever, given L46 with the `orElse`, I'm not seeing the signal handler of `behavior` being applied. When I run the tests I see a `DeathPactException` which means that there is no signal handler for `Terminated`, but there is such a signal handler for `behavior`...",
        "createdAt" : "2019-03-13T00:43:49Z",
        "updatedAt" : "2019-07-01T06:16:48Z",
        "lastEditedBy" : "c82885b6-397c-46ac-bd34-8b847b9fcd87",
        "tags" : [
        ]
      }
    ],
    "commit" : "e096ddb829373b5b523313c9d34a0e4cb9474e79",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +44,48 @@          waitForQueueOfferCompleted(behavior, stash = stash :+ other)\n      }\n      .orElse(behavior) // handle signals immediately\n}"
  }
]