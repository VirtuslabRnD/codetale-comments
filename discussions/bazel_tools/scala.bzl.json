[
  {
    "id" : "dd6d2930-89f7-4507-ac95-a3be611633fa",
    "prId" : 9498,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e78c160-a6b1-47cf-b011-46bc18c8bb20",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "What does this do?",
        "createdAt" : "2021-04-26T14:07:13Z",
        "updatedAt" : "2021-04-26T18:22:51Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d6221363-b6e1-4490-8a15-74c057a39186",
        "parentId" : "7e78c160-a6b1-47cf-b011-46bc18c8bb20",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "See the PR description. I'll add a comment here.",
        "createdAt" : "2021-04-26T14:23:23Z",
        "updatedAt" : "2021-04-26T18:22:51Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "eace08211686212c4656efb9c707eef4e8289bc8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +84,88 @@    \"-Ywarn-unused:imports\",\n    # Allow `@nowarn` annotations that allegedly do nothing (necessary because of false positives)\n    \"-Ywarn-unused:-nowarn\",\n    \"-Ywarn-unused\",\n]"
  },
  {
    "id" : "607ba1a3-fb67-44f8-a480-d94dcd9ec117",
    "prId" : 8282,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90c4511a-d7ac-42cd-8cd4-b535484e614a",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "The alternative is to silence unused imports on 2.13 either selectively or completely. This seemed nicer but open to changing it.",
        "createdAt" : "2020-12-14T15:12:58Z",
        "updatedAt" : "2020-12-14T16:45:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "c78a2e3fe37e7dce86ae3f95c8214d2b2da5a107",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +43,47 @@        \"-Xlint:by-name-right-associative\",  # will never be by-name if used correctly\n        \"-Xfuture\",\n        \"-language:higherKinds\",\n    ],\n}"
  },
  {
    "id" : "0319181a-44de-416d-a5f5-56d6cd077846",
    "prId" : 7668,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7668",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7b42d2e-ed67-4b88-9e55-1a67382bf233",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "My `hiding` you mean we donâ€™t pass it along? Do you know why we even have this field then?",
        "createdAt" : "2020-10-13T13:56:30Z",
        "updatedAt" : "2020-10-13T14:56:10Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "7c981c89-384d-4173-a9b0-3c8cdd47c7e6",
        "parentId" : "f7b42d2e-ed67-4b88-9e55-1a67382bf233",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "It's there to make sure it doesn't end up in `kwargs`.",
        "createdAt" : "2020-10-13T14:32:02Z",
        "updatedAt" : "2020-10-13T14:56:10Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "53c3e95515c391f64a3dcf73065154f763e9a435",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +182,186 @@        scalacopts = [],\n        plugins = [],\n        generated_srcs = [],  # hiding from the underlying rule\n        deps = [],\n        silent_annotations = False,"
  },
  {
    "id" : "1173c8c8-89cf-429f-8a25-601d7f039fa5",
    "prId" : 6907,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6907",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a6a5dc4-2af1-457a-88db-cb1e3dfe730c",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Are we keeping `lf_scalacopts` around for a reason?",
        "createdAt" : "2020-08-07T07:11:34Z",
        "updatedAt" : "2020-08-07T14:57:00Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "72bb0c3e-412e-4574-be6b-23dff67a95e9",
        "parentId" : "9a6a5dc4-2af1-457a-88db-cb1e3dfe730c",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "It turned out to be very useful, since it made it possible to fully migrate part of the codebase to the flag (in fact, I wish there were more partitions of the codebase with cross-project scalacopts sets like this one), it would be a hassle to remove, and it would be a hassle to restore.\r\n\r\nRemoving it would be like saying about a Scala build that supported cross-version builds \"well, we support the latest Scala version, and it's not like they're ever going to release a new Scala version, right?\"",
        "createdAt" : "2020-08-07T14:50:52Z",
        "updatedAt" : "2020-08-07T14:57:00Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "0be6183109e0ca2416eea13d320bcf30594c3988",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +134,138 @@# ^ means nothing to remove\nlf_scalacopts = [\n]\n\ndefault_compile_arguments = {"
  },
  {
    "id" : "0bbc39f0-c6a6-4a94-9cd4-39e0f8dd4e02",
    "prId" : 6798,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6798",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4662b6a1-31cd-43f6-8591-3d0dc3c8bfd8",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "This is fixed by scala/scala#5969 for 2.13, so we can remove it if we're 2.13 only.",
        "createdAt" : "2020-07-20T18:00:37Z",
        "updatedAt" : "2020-07-20T21:32:52Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "1feae964e369a010d8d4c69a9c522908e3c5354f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +52,56 @@    # catch missing string interpolators\n    \"-Xlint:missing-interpolator\",\n    \"-Xlint:by-name-right-associative\",  # will never be by-name if used correctly\n    \"-Xlint:constant\",  # / 0\n    \"-Xlint:inaccessible\",  # method uses invisible types"
  },
  {
    "id" : "8f626aa2-bd72-4ab3-853b-bbcaf5d74ee1",
    "prId" : 6798,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6798",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c19b831b-777d-4825-ad12-583bf9415faa",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "What does \"/ 0\" mean?",
        "createdAt" : "2020-07-21T07:30:38Z",
        "updatedAt" : "2020-07-21T07:38:09Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "823c2fb4-57b7-4740-ad36-94dfde8576dc",
        "parentId" : "c19b831b-777d-4825-ad12-583bf9415faa",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Divide by 0.",
        "createdAt" : "2020-07-21T12:17:32Z",
        "updatedAt" : "2020-07-21T12:17:32Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "32d54d04-2220-40e4-b36a-b71803af1079",
        "parentId" : "c19b831b-777d-4825-ad12-583bf9415faa",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I had guessed that much. It doesn't tell me what the linting rule does though. ðŸ˜›\r\n\r\nAfter reading the definition of `-Xlint:constant`, I guess this catches cases where we divide by `0` that only use constants? Still not sure though.",
        "createdAt" : "2020-07-21T12:23:49Z",
        "updatedAt" : "2020-07-21T12:23:49Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "1feae964e369a010d8d4c69a9c522908e3c5354f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +53,57 @@    \"-Xlint:missing-interpolator\",\n    \"-Xlint:by-name-right-associative\",  # will never be by-name if used correctly\n    \"-Xlint:constant\",  # / 0\n    \"-Xlint:inaccessible\",  # method uses invisible types\n    \"-Xlint:infer-any\",  # less thorough but less buggy version of the Any wart"
  },
  {
    "id" : "ea82e1b9-9a80-47b1-80a7-232ce47e97e1",
    "prId" : 6132,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6132",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66b12c7e-eb6f-4c0a-816d-a1699c499366",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Commenting out is proper here; note the context.",
        "createdAt" : "2020-05-27T23:02:29Z",
        "updatedAt" : "2020-05-28T15:50:28Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "536eb664628c309b96aa8e7f89021dd38e8665a9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +73,77 @@\n    # This lists all wartremover linting passes.\n    # \"-P:wartremover:traverser:org.wartremover.warts.Any\",\n    \"-P:wartremover:traverser:org.wartremover.warts.AnyVal\",\n    \"-P:wartremover:traverser:org.wartremover.warts.ArrayEquals\","
  },
  {
    "id" : "80109091-eda6-4905-b645-8e29b3da0ce4",
    "prId" : 5350,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5350",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9ef39de-55f3-4b67-aea0-c92c3e7b4a5b",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Probably keeping the docstring makes sense: it links the documentation for the underlying rule and explains why that would be important.",
        "createdAt" : "2020-04-01T16:11:45Z",
        "updatedAt" : "2020-04-01T18:31:27Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "87be3895-8d42-49be-87aa-b23b403c256d",
        "parentId" : "f9ef39de-55f3-4b67-aea0-c92c3e7b4a5b",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I also deleted the function that went with this docstring. ðŸ™‚ ",
        "createdAt" : "2020-04-01T16:13:30Z",
        "updatedAt" : "2020-04-01T18:31:27Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "8016ee647a873afe69c33eb471b3298b1d3b812b",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +496,500 @@                break\n\ndef da_scala_binary(name, initial_heap_size = default_initial_heap_size, max_heap_size = default_max_heap_size, **kwargs):\n    \"\"\"\n    Define a Scala executable."
  },
  {
    "id" : "c951bf11-8765-49ff-9cc6-74444ebf9a5b",
    "prId" : 1602,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1602",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55d639b8-6fde-4e89-93d0-6583c1d6c29b",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "I'm not sure this does the right thing.\r\n- Why `inputs = ctx.files.srcs`. As I understand it, this is only ever acting on individual sources, so `inputs = [src]` seems like what you'd want.\r\n- `outputs = [tmpsrcdir]`: Have you tested this with multiple `.srcjar` `srcs`? I'd expect it to fail, because you'd end up with multiple actions producing the same output.\r\n- `if src.is_source`: [Returns true if this is a source file, i.e. it is not generated](https://docs.bazel.build/versions/master/skylark/lib/File.html#is_source). It seems like this would fail for generated `.scala` files, or non-generated `.srcjar` files. Maybe it's better to test `if src.extension == \"srcjar\"`?",
        "createdAt" : "2019-06-12T12:47:16Z",
        "updatedAt" : "2019-06-12T12:49:06Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "4beb57a3-f533-4694-a02b-d9215404505e",
        "parentId" : "55d639b8-6fde-4e89-93d0-6583c1d6c29b",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Thanks @aherrmann-da.\r\n@nicholassmith-da, could you take care of it in another PR please?",
        "createdAt" : "2019-06-12T12:58:07Z",
        "updatedAt" : "2019-06-12T12:58:08Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "b4922c4a-16f0-4895-88bb-420c442ed968",
        "parentId" : "55d639b8-6fde-4e89-93d0-6583c1d6c29b",
        "authorId" : "116f88b3-ee3c-47e6-88dc-24e6322ef11a",
        "body" : "I'll create a scenario to check with multiple ```.srcjar``` sources.\r\n\r\nMy hypothesis is that the ```is_source``` returns false for anything that is read from 'outside' of the Bazel platform and false for all files that are targets. Using the extension is of course fine assuming that all rules that package generated sources do use the ```.srcjar``` extension.\r\n\r\nWDYT?",
        "createdAt" : "2019-06-12T13:31:17Z",
        "updatedAt" : "2019-06-12T13:31:17Z",
        "lastEditedBy" : "116f88b3-ee3c-47e6-88dc-24e6322ef11a",
        "tags" : [
        ]
      },
      {
        "id" : "a933e8de-42bb-4749-8862-4c88931b0370",
        "parentId" : "55d639b8-6fde-4e89-93d0-6583c1d6c29b",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Yes, what I meant was if you'd have a generated `.scala` file. E.g.\r\n```\r\ngenrule(\r\n  name = \"example\",\r\n  outs = [\"Example.scala\"],\r\n  cmd = \"echo XYZ > $(OUTS)\",\r\n)\r\n```\r\nthen `is_source` should be `False` for it, as it's generated, but it's not a `.srcjar`. Similarly, if for whatever reason we'd check in a `.srcjar` into version control and refer to it in `srcs` then `is_source` would return `True` on it even though it's a `.srcjar`. Right now this is probably a purely theoretical issue, as no such case seems to exist in the daml repo.\r\n\r\nIndeed, relying on the file extension makes the assumption that the file extension is set correctly. ",
        "createdAt" : "2019-06-12T14:32:09Z",
        "updatedAt" : "2019-06-12T14:32:09Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1e12b90aca06189a9f1b3274a9185a81362e56d",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +161,165 @@            if not tmpsrcdir:\n                tmpsrcdir = ctx.actions.declare_directory(ctx.label.name + \"_tmpdir\")\n            ctx.actions.run(\n                executable = ctx.executable._zipper,\n                inputs = ctx.files.srcs,"
  },
  {
    "id" : "7a9cb07b-8a49-415a-bbd2-4eefba9cd8fb",
    "prId" : 1341,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b4edb53-425b-4ba1-875b-540d8f88dbce",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "IIRC you mentioned this part is based on a similar piece of code in some other rule set? Could you add a comment pointing there for reference?",
        "createdAt" : "2019-05-27T08:28:29Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "cec5ae51-6160-4ea9-9e4e-56c2fbdd79f4",
        "parentId" : "7b4edb53-425b-4ba1-875b-540d8f88dbce",
        "authorId" : "116f88b3-ee3c-47e6-88dc-24e6322ef11a",
        "body" : "Done",
        "createdAt" : "2019-05-27T08:59:24Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : "116f88b3-ee3c-47e6-88dc-24e6322ef11a",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e26f05f93f18739f81898fd482136da0dae94bc",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +212,216 @@    pluginPaths = []\n    for p in ctx.attr.plugins:\n        if hasattr(p, \"path\"):\n            pluginPaths.append(p)\n        elif hasattr(p, \"scala\"):"
  },
  {
    "id" : "5f5aef0f-e355-46c9-8a83-77cd796abbec",
    "prId" : 1341,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f8ed28e-b76b-446c-9173-fb2900dfff78",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "In `transitive_deps` below you had to switch from `.java` to `[JavaInfo]`, right? Do plugins still have `.java`, or should this part also be switched to use `[JavaInfo]`?",
        "createdAt" : "2019-05-27T08:30:27Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "aa5c4e84-8cff-4791-a6b7-346b906fc990",
        "parentId" : "8f8ed28e-b76b-446c-9173-fb2900dfff78",
        "authorId" : "116f88b3-ee3c-47e6-88dc-24e6322ef11a",
        "body" : "The plugins here will be pure java plugins. This could was lifted from 'rules_scala' so I'm inclined to leave it.",
        "createdAt" : "2019-05-27T09:00:33Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : "116f88b3-ee3c-47e6-88dc-24e6322ef11a",
        "tags" : [
        ]
      },
      {
        "id" : "3a6fa318-e062-4021-9cc0-aa9a3fd214eb",
        "parentId" : "8f8ed28e-b76b-446c-9173-fb2900dfff78",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Makes sense. Thanks for clarifying.",
        "createdAt" : "2019-05-27T09:05:31Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e26f05f93f18739f81898fd482136da0dae94bc",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +216,220 @@        elif hasattr(p, \"scala\"):\n            pluginPaths.extend([j.class_jar for j in p.scala.outputs.jars])\n        elif hasattr(p, \"java\"):\n            pluginPaths.extend([j.class_jar for j in p.java.outputs.jars])\n            # support http_file pointed at a jar. http_jar uses ijar,"
  },
  {
    "id" : "0aab267f-338b-4bcb-8cde-279789c4207d",
    "prId" : 1341,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "554711bd-4851-4940-949b-beeb52bf1c4a",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "I think it would be better to have the loop set a boolean, and then conditionally call `scaladoc_jar` outside the `for src ...` loop. Currently I find it a bit hard to read. It took me a while to realize that you don't call `scaladoc_jar` for each source file. E.g.\r\n\r\n```\r\ncreate_scaladoc = False\r\nfor src in kwargs[\"srcs\"]:\r\n    if src.endswith(\".scala\"):\r\n        create_scaladoc = True\r\n        break\r\nif create_scaladoc:\r\n    ...\r\n```",
        "createdAt" : "2019-05-27T08:48:19Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "cee0491d-a87c-4001-8237-28ca22b0dc18",
        "parentId" : "554711bd-4851-4940-949b-beeb52bf1c4a",
        "authorId" : "116f88b3-ee3c-47e6-88dc-24e6322ef11a",
        "body" : "Also a good idea. Implemented.",
        "createdAt" : "2019-05-27T09:29:08Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : "116f88b3-ee3c-47e6-88dc-24e6322ef11a",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e26f05f93f18739f81898fd482136da0dae94bc",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +310,314 @@            if src.endswith(\".scala\"):\n                create_scaladoc = True\n                break\n\n    if create_scaladoc:"
  }
]