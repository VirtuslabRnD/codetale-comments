[
  {
    "id" : "2e050d8d-42f6-4e78-8b08-927ab0c80361",
    "prId" : 99578,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99578#pullrequestreview-611950467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b255fd93-a5dd-4c3b-bbbb-5e46c4175a6a",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Can you update this comment?",
        "createdAt" : "2021-03-15T06:40:28Z",
        "updatedAt" : "2021-03-19T03:17:31Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "7531b051-4849-43bc-87e1-c614f810a103",
        "parentId" : "b255fd93-a5dd-4c3b-bbbb-5e46c4175a6a",
        "authorId" : "fabe951d-d944-48c5-8581-ad191d4bcea1",
        "body" : "fixed.",
        "createdAt" : "2021-03-15T08:55:03Z",
        "updatedAt" : "2021-03-19T03:17:31Z",
        "lastEditedBy" : "fabe951d-d944-48c5-8581-ad191d4bcea1",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6d6409cf873b0eac47216ff6061387d9c38b002",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +69,73 @@\tServiceClusterIPRanges string\n\t// PrimaryServiceClusterIPRange and SecondaryServiceClusterIPRange are the results\n\t// of parsing ServiceClusterIPRange into actual values\n\tPrimaryServiceClusterIPRange   net.IPNet\n\tSecondaryServiceClusterIPRange net.IPNet"
  },
  {
    "id" : "0f7715a8-041a-43f9-9db6-a0173c887619",
    "prId" : 95856,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95856#pullrequestreview-519731828",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd031fd6-388d-4f3e-a4a7-cdb006a88b68",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I'd probably set v1.24 as a target removal version in the message and in a TODO",
        "createdAt" : "2020-10-29T13:29:22Z",
        "updatedAt" : "2020-10-29T15:21:00Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6408f1ce-03e8-4e7f-be91-d12ea736a5e4",
        "parentId" : "dd031fd6-388d-4f3e-a4a7-cdb006a88b68",
        "authorId" : "9e6ce3ed-e2f7-40ea-b6d7-b1b04fc48f70",
        "body" : "added",
        "createdAt" : "2020-10-29T14:35:09Z",
        "updatedAt" : "2020-10-29T15:21:00Z",
        "lastEditedBy" : "9e6ce3ed-e2f7-40ea-b6d7-b1b04fc48f70",
        "tags" : [
        ]
      }
    ],
    "commit" : "cfc2b330a7027e109ac26fc6a86b68898883099e",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +140,144 @@\n// TODO: remove these insecure flags in v1.24\nfunc addDummyInsecureFlags(fs *pflag.FlagSet) {\n\tvar (\n\t\tbindAddr = net.IPv4(127, 0, 0, 1)"
  },
  {
    "id" : "4c3e1fd8-1614-4071-9760-d65c25a30637",
    "prId" : 67060,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67060#pullrequestreview-145305600",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "472b4e8d-551e-4ba0-a382-be81912159c2",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I don't think we'll actually wait for kops.  When we're past the deprecation cycle time, we can remove it.",
        "createdAt" : "2018-08-09T14:25:17Z",
        "updatedAt" : "2018-08-17T06:57:30Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "d6d0b476-ee68-4fc2-9768-0ffa79095edd",
        "parentId" : "472b4e8d-551e-4ba0-a382-be81912159c2",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "We should formally deprecate insecure ports for all components in 1.12 and remove them all at once in 1.13.",
        "createdAt" : "2018-08-09T14:44:54Z",
        "updatedAt" : "2018-08-17T06:57:30Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "ca868212-b643-4af4-ae16-362551092d0e",
        "parentId" : "472b4e8d-551e-4ba0-a382-be81912159c2",
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "> We should formally deprecate insecure ports for all components in 1.12 and remove them all at once in 1.13.\r\n\r\nYes, I agree. Let's make that super clear in the release notes.",
        "createdAt" : "2018-08-10T16:09:08Z",
        "updatedAt" : "2018-08-17T06:57:30Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2724793e8ff47fc5961762a874ac74b9169bed1",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +129,133 @@\ts.SecureServing.AddFlags(fss.FlagSet(\"secure serving\"))\n\ts.InsecureServing.AddFlags(fss.FlagSet(\"insecure serving\"))\n\ts.InsecureServing.AddUnqualifiedFlags(fss.FlagSet(\"insecure serving\")) // TODO: remove it until kops stops using `--address`\n\ts.Audit.AddFlags(fss.FlagSet(\"auditing\"))\n\ts.Features.AddFlags(fss.FlagSet(\"features\"))"
  },
  {
    "id" : "81f7bcbc-6870-4cad-9bb5-4343ab3b14ad",
    "prId" : 64517,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64517#pullrequestreview-142917592",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a1b47dc-cc94-4a1a-b442-1bc91429b134",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "these two flag makes me sad. they're rather frequently used but now homeless, left in a \"misc\".",
        "createdAt" : "2018-08-02T15:59:59Z",
        "updatedAt" : "2018-08-06T06:55:21Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "3c646997-6196-4bb9-b336-cf56a06f29a8",
        "parentId" : "0a1b47dc-cc94-4a1a-b442-1bc91429b134",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "A good point to clean that up :) They should probably move into a proper options struct.",
        "createdAt" : "2018-08-02T18:21:24Z",
        "updatedAt" : "2018-08-06T06:55:21Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "42d533e40c112f62635a8aa0e3c3def298b26cc9",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +233,237 @@\t\t\"Turns on aggregator routing requests to endoints IP rather than cluster IP.\")\n\n\tfs.StringVar(&s.ServiceAccountSigningKeyFile, \"service-account-signing-key-file\", s.ServiceAccountSigningKeyFile, \"\"+\n\t\t\"Path to the file that contains the current private key of the service account token issuer. The issuer will sign issued ID tokens with this private key. (Requires the 'TokenRequest' feature gate.)\")\n"
  },
  {
    "id" : "1095ebf6-47bc-4c30-958a-6f4f1c4b900b",
    "prId" : 58111,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58111#pullrequestreview-97907421",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9518cbf-ac10-42a7-af68-6d622f82073b",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "do we want to ignore this unless the feature gate is on, or require the feature gate to be on to specify this (I'd prefer the latter... it's confusing to set flags that have no effect)",
        "createdAt" : "2018-02-19T17:28:41Z",
        "updatedAt" : "2018-02-21T21:17:03Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2e1303ab-df7f-4910-b45d-79c0d9ded29a",
        "parentId" : "f9518cbf-ac10-42a7-af68-6d622f82073b",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "How do you want this to work? The feature gates are passed as flags, and at this point we haven't called flag.Parse. We could error if these are passed but the feature is not enabled. Note this is already mentioned in the flag doc.",
        "createdAt" : "2018-02-20T16:51:43Z",
        "updatedAt" : "2018-02-21T21:17:03Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "5c648247-9eef-49ce-b1a4-0659c9e563e2",
        "parentId" : "f9518cbf-ac10-42a7-af68-6d622f82073b",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Yeah, check at point of use against feature enablement. I think I commented there as well",
        "createdAt" : "2018-02-20T17:01:52Z",
        "updatedAt" : "2018-02-21T21:17:03Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ad1c6655bde4ca8d61c3574980cffce5ee937a5",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +235,239 @@\n\tfs.StringVar(&s.ServiceAccountSigningKeyFile, \"service-account-signing-key-file\", s.ServiceAccountSigningKeyFile, \"\"+\n\t\t\"Path to the file that contains the current private key of the service account token issuer. The issuer will sign issued ID tokens with this private key. (Ignored unless alpha TokenRequest is enabled\")\n\n}"
  },
  {
    "id" : "b6276f7a-ff98-4168-95de-70eb5ce592e8",
    "prId" : 54419,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54419#pullrequestreview-71333898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "008a822c-b95b-467a-af9f-e7b62360a909",
        "parentId" : null,
        "authorId" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "body" : "~~This needs to be deprecated first before being removed. for example https://github.com/kubernetes/kubernetes/pull/51198~~",
        "createdAt" : "2017-10-23T21:03:36Z",
        "updatedAt" : "2017-10-23T21:20:37Z",
        "lastEditedBy" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "tags" : [
        ]
      },
      {
        "id" : "9c6b1121-e7b4-4db0-92ec-dd022af6e49b",
        "parentId" : "008a822c-b95b-467a-af9f-e7b62360a909",
        "authorId" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "body" : "Edit, forgot that this flag wasn't introduced in 1.8 so no need to deprecate anything.",
        "createdAt" : "2017-10-23T21:21:01Z",
        "updatedAt" : "2017-10-23T21:21:01Z",
        "lastEditedBy" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "814a30379c5b92813f2c3d4e069503bbda7fc847",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +167,171 @@\t\t\"The number of apiservers running in the cluster, must be a positive number.\")\n\n\tfs.StringVar(&s.EndpointReconcilerType, \"endpoint-reconciler-type\", string(s.EndpointReconcilerType),\n\t\t\"Use an endpoint reconciler (\"+strings.Join(reconcilers.AllTypes.Names(), \", \")+\")\")\n"
  },
  {
    "id" : "b83a5c62-2d22-4ce4-984a-c70d69a59e8f",
    "prId" : 51698,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51698#pullrequestreview-61392923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af0bb92a-cdfc-4588-8b75-2fb6430a1aab",
        "parentId" : null,
        "authorId" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "body" : "shouldn't this be a `reconcilers.Type`?",
        "createdAt" : "2017-09-07T22:07:59Z",
        "updatedAt" : "2017-09-11T16:01:48Z",
        "lastEditedBy" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "tags" : [
        ]
      },
      {
        "id" : "1a036f21-d6a0-4d38-9970-f862087b9226",
        "parentId" : "af0bb92a-cdfc-4588-8b75-2fb6430a1aab",
        "authorId" : "3eccedfc-5c53-4555-94cb-69f2b56e485c",
        "body" : "That is the string from the commandline",
        "createdAt" : "2017-09-08T01:18:11Z",
        "updatedAt" : "2017-09-11T16:01:48Z",
        "lastEditedBy" : "3eccedfc-5c53-4555-94cb-69f2b56e485c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1bb08f44abd50460f813f917596f7a8b426639f",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +74,78 @@\n\tMasterCount            int\n\tEndpointReconcilerType string\n}\n"
  },
  {
    "id" : "4d473bde-c278-4be3-92f9-bec888c5a98d",
    "prId" : 51698,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51698#pullrequestreview-61395692",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1323302d-bb6b-40be-8c9c-4ceb7df779ef",
        "parentId" : null,
        "authorId" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "body" : "I think it would be slightly more elegant to implement `pflag.Value` on `reconcilers.Type` and use `fs.Var`.\r\n\r\n`s.ServiceNodePortRange` already does this as a precedent.",
        "createdAt" : "2017-09-07T22:10:07Z",
        "updatedAt" : "2017-09-11T16:01:48Z",
        "lastEditedBy" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "tags" : [
        ]
      },
      {
        "id" : "e376e5eb-ad0c-4dc9-b39b-65b71308383d",
        "parentId" : "1323302d-bb6b-40be-8c9c-4ceb7df779ef",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "that seems like overkill... there's more of a case to be made for a port range flag type than a single-use typedef",
        "createdAt" : "2017-09-08T01:24:12Z",
        "updatedAt" : "2017-09-11T16:01:48Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "079c7da1-09a0-4e80-b639-03f192275725",
        "parentId" : "1323302d-bb6b-40be-8c9c-4ceb7df779ef",
        "authorId" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "body" : "Yeah, you're probably right.\r\n\r\nI'm fine leaving it as is; I acknowledge this has hit bikeshedding levels.",
        "createdAt" : "2017-09-08T01:45:49Z",
        "updatedAt" : "2017-09-11T16:01:48Z",
        "lastEditedBy" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1bb08f44abd50460f813f917596f7a8b426639f",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +170,174 @@\t\t\"The number of apiservers running in the cluster, must be a positive number.\")\n\n\tfs.StringVar(&s.EndpointReconcilerType, \"alpha-endpoint-reconciler-type\", string(s.EndpointReconcilerType),\n\t\t\"Use an endpoint reconciler (\"+strings.Join(reconcilers.AllTypes.Names(), \", \")+\")\")\n"
  },
  {
    "id" : "ee80eb9b-8ac9-4d56-9ea5-54845789b3d2",
    "prId" : 44742,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/44742#pullrequestreview-39736525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20a12a27-a3a5-4c26-9550-03b3cc18d937",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "consider making this default true? ",
        "createdAt" : "2017-05-22T21:59:32Z",
        "updatedAt" : "2017-05-26T23:10:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "721aa98d-a6a5-45fe-8557-36f7041e312f",
        "parentId" : "20a12a27-a3a5-4c26-9550-03b3cc18d937",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "What about kube-aggregator (i.e. not embedded)?",
        "createdAt" : "2017-05-23T07:30:12Z",
        "updatedAt" : "2017-05-26T23:10:35Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "b28f5503-a4ed-4319-b600-d5aad8459c38",
        "parentId" : "20a12a27-a3a5-4c26-9550-03b3cc18d937",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> consider making this default true?\r\n\r\nI think that this should default false.",
        "createdAt" : "2017-05-23T13:12:56Z",
        "updatedAt" : "2017-05-26T23:10:35Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad8a83a7c1741efb507d924a17eb809748ee2e06",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +221,225 @@\n\tfs.BoolVar(&s.EnableAggregatorRouting, \"enable-aggregator-routing\", s.EnableAggregatorRouting,\n\t\t\"Turns on aggregator routing requests to endoints IP rather than cluster IP.\")\n\n}"
  },
  {
    "id" : "ac385b32-c1f8-4525-bd21-8e7de0f1a0bf",
    "prId" : 40683,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40683#pullrequestreview-19241980",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ba8f78c-ba28-412b-802f-ccc8917902f8",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Should this only default this way if etcd3 is chosen? If etcd2 is selected, does this default back to JSON?",
        "createdAt" : "2017-01-31T04:22:58Z",
        "updatedAt" : "2017-01-31T04:22:58Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "dae29625da5b6bce6547d6e2beba7101478dc3cd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +89,93 @@\t}\n\t// Overwrite the default for storage data format.\n\ts.GenericServerRunOptions.DefaultStorageMediaType = \"application/vnd.kubernetes.protobuf\"\n\treturn &s\n}"
  },
  {
    "id" : "5b8aad59-71e3-479f-a4ce-a85edcc10c21",
    "prId" : 36604,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36604#pullrequestreview-9855533",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bcc7af4-6015-43e6-8c94-2eab7c6e30f0",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "why have two ways to indicate this is disabled (nil or 0 port)?",
        "createdAt" : "2016-11-23T05:20:43Z",
        "updatedAt" : "2016-11-29T16:02:40Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c13606c2-2cbc-4d05-83f8-16976dfa3ee1",
        "parentId" : "0bcc7af4-6015-43e6-8c94-2eab7c6e30f0",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> why have two ways to indicate this is disabled (nil or 0 port)?\r\n\r\npath from here to there.",
        "createdAt" : "2016-11-23T12:55:45Z",
        "updatedAt" : "2016-11-29T16:02:40Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab9a842f3c7f6d7b20a07a87332e555aa73c2389",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +34,38 @@\tGenericServerRunOptions *genericoptions.ServerRunOptions\n\tEtcd                    *genericoptions.EtcdOptions\n\tSecureServing           *genericoptions.SecureServingOptions\n\tInsecureServing         *genericoptions.ServingOptions\n\tAuthentication          *genericoptions.BuiltInAuthenticationOptions"
  },
  {
    "id" : "91f707cb-c437-4dc1-bffb-d426df7600ff",
    "prId" : 36604,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36604#pullrequestreview-9800743",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73ddd2ad-77d9-440e-a2df-1856f11bd237",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "why have two ways to indicate this is disabled (nil or 0 port)?",
        "createdAt" : "2016-11-23T05:21:12Z",
        "updatedAt" : "2016-11-29T16:02:40Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab9a842f3c7f6d7b20a07a87332e555aa73c2389",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +35,39 @@\tEtcd                    *genericoptions.EtcdOptions\n\tSecureServing           *genericoptions.SecureServingOptions\n\tInsecureServing         *genericoptions.ServingOptions\n\tAuthentication          *genericoptions.BuiltInAuthenticationOptions\n\tAuthorization           *genericoptions.BuiltInAuthorizationOptions"
  },
  {
    "id" : "15e8c1e1-c7e1-4324-b0d4-dfc05cde597f",
    "prId" : 34029,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34029#pullrequestreview-2770730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b9cbed1-25f9-458a-a284-bd13a112efa5",
        "parentId" : null,
        "authorId" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "body" : "How does this translate into which keys actually sign the token? I've been trying to hunt down that code path but haven't been able to find it.\n",
        "createdAt" : "2016-10-04T17:55:03Z",
        "updatedAt" : "2016-10-04T18:16:44Z",
        "lastEditedBy" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "tags" : [
        ]
      },
      {
        "id" : "3bb9acb1-7638-4d56-9cca-f144aefcc71d",
        "parentId" : "1b9cbed1-25f9-458a-a284-bd13a112efa5",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "only a single key signs the token, and that private key is given to the controller manager:\n\n```\nkube-controller-manager --help 2>&1 | grep service-account\n\n--service-account-private-key-file string\nFilename containing a PEM-encoded private RSA or ECDSA key used to sign service account tokens.\n```\n",
        "createdAt" : "2016-10-04T18:09:48Z",
        "updatedAt" : "2016-10-04T18:16:44Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c92eb75b3e7c230919e536abfbef6b7d882324a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +71,75 @@\t\t\"Amount of time to retain events. Default is 1h.\")\n\n\tfs.StringArrayVar(&s.ServiceAccountKeyFiles, \"service-account-key-file\", s.ServiceAccountKeyFiles, \"\"+\n\t\t\"File containing PEM-encoded x509 RSA or ECDSA private or public keys, used to verify \"+\n\t\t\"ServiceAccount tokens. If unspecified, --tls-private-key-file is used. \"+"
  },
  {
    "id" : "5fb0176b-6c1c-4e27-8179-9ff96b035763",
    "prId" : 25838,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b80efcf-90c5-4ae6-874c-96e91ac77967",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Should this be Authz if it is for authorization, instead of Authn?\n",
        "createdAt" : "2016-05-19T15:15:28Z",
        "updatedAt" : "2016-05-21T21:50:54Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "7deabb42-a144-4f69-9dcd-7bc1ed3bff02",
        "parentId" : "1b80efcf-90c5-4ae6-874c-96e91ac77967",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Never mind this is based on previous PR.\n",
        "createdAt" : "2016-05-19T15:24:26Z",
        "updatedAt" : "2016-05-21T21:50:54Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "65d88e1c-751c-492a-afe7-288cd9a2dbfe",
        "parentId" : "1b80efcf-90c5-4ae6-874c-96e91ac77967",
        "authorId" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "body" : "Yeah. Hopefully I can get #25694 in and then rebase.\n",
        "createdAt" : "2016-05-19T16:00:28Z",
        "updatedAt" : "2016-05-21T21:50:54Z",
        "lastEditedBy" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "tags" : [
        ]
      }
    ],
    "commit" : "d03dbbcc14a3d38dcfc38a81e8fdff5e262ee97c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +41,45 @@\tServiceAccountLookup        bool\n\tWebhookTokenAuthnConfigFile string\n\tWebhookTokenAuthnCacheTTL   time.Duration\n}\n"
  },
  {
    "id" : "29b53055-12b4-43e9-978a-f817a9c5c7a5",
    "prId" : 24710,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "021e71f3-3b86-401f-822e-25c83ca67e4d",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "This should go in genericapiserver rather than duplicating in kubernetes-apiserver and federation-apiserver?\n",
        "createdAt" : "2016-05-05T17:18:44Z",
        "updatedAt" : "2016-05-05T17:18:44Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "4e3a1a61-4d58-4042-80e2-197ee274cc10",
        "parentId" : "021e71f3-3b86-401f-822e-25c83ca67e4d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Will do this in a follow up given priority.  There are other follow ups and @wojtek-t and I need to be enabling this now.\n",
        "createdAt" : "2016-05-05T17:30:25Z",
        "updatedAt" : "2016-05-05T17:30:25Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0ebcf421654b34519cde63093075e572f4c8f90",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +45,49 @@\tAuthorizationConfig        apiserver.AuthorizationConfig\n\tBasicAuthFile              string\n\tDefaultStorageMediaType    string\n\tDeleteCollectionWorkers    int\n\tDeprecatedStorageVersion   string"
  },
  {
    "id" : "693a1760-a342-4b43-99f6-07147f4c99d3",
    "prId" : 21535,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "469fb2d8-6df2-4931-a1f8-6fedc94c0abd",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I thought we were trying to maintain compatibility with 1.1 here... shouldn't these match the 1.1 flag where a config file is specified?\n",
        "createdAt" : "2016-03-01T15:36:15Z",
        "updatedAt" : "2016-03-11T16:26:25Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7228b9b9878feffb001614d91a974463a6dbb362",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +229,233 @@\tfs.StringVar(&s.EtcdConfig.CertFile, \"etcd-certfile\", s.EtcdConfig.CertFile, \"SSL certification file used to secure etcd communication\")\n\tfs.StringVar(&s.EtcdConfig.CAFile, \"etcd-cafile\", s.EtcdConfig.CAFile, \"SSL Certificate Authority file used to secure etcd communication\")\n\tfs.BoolVar(&s.EtcdConfig.Quorum, \"etcd-quorum-read\", s.EtcdConfig.Quorum, \"If true, enable quorum read\")\n\tfs.StringSliceVar(&s.CorsAllowedOriginList, \"cors-allowed-origins\", s.CorsAllowedOriginList, \"List of allowed origins for CORS, comma separated.  An allowed origin can be a regular expression to support subdomain matching.  If this list is empty CORS will not be enabled.\")\n\tfs.BoolVar(&s.AllowPrivileged, \"allow-privileged\", s.AllowPrivileged, \"If true, allow privileged containers.\")"
  },
  {
    "id" : "0b1e56cf-01ed-4ef0-95a5-0cfca6982a97",
    "prId" : 21535,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed239e1e-f00d-4d9d-bebe-70e33a604a9f",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "how do the overrides interact with secured etcd?\n",
        "createdAt" : "2016-03-01T15:36:37Z",
        "updatedAt" : "2016-03-11T16:26:25Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "169da69b-3975-4240-b570-16c6653cb2bb",
        "parentId" : "ed239e1e-f00d-4d9d-bebe-70e33a604a9f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "You'd have to set up all your etcd clusters to accept the same client cert for the overrides to work.\n",
        "createdAt" : "2016-03-02T23:44:35Z",
        "updatedAt" : "2016-03-11T16:26:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c2319fee-9f0e-444a-919c-0fe860467d20",
        "parentId" : "ed239e1e-f00d-4d9d-bebe-70e33a604a9f",
        "authorId" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "body" : "Now `etcd-servers-overrides` has such format: `extensions/deployments#http://ip1:port1;http://ip2:port2`, if we want to support certificates override, this format can get quite complicated, not that user friendly, I agree with @lavalamp you would have to set up all your etcd clusters to accept the same client cert.\n",
        "createdAt" : "2016-03-04T03:46:26Z",
        "updatedAt" : "2016-03-11T16:26:25Z",
        "lastEditedBy" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7228b9b9878feffb001614d91a974463a6dbb362",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +224,228 @@\tfs.StringVar(&s.AdmissionControlConfigFile, \"admission-control-config-file\", s.AdmissionControlConfigFile, \"File with admission control configuration.\")\n\tfs.StringSliceVar(&s.EtcdConfig.ServerList, \"etcd-servers\", s.EtcdConfig.ServerList, \"List of etcd servers to watch (http://ip:port), comma separated. Mutually exclusive with -etcd-config\")\n\tfs.StringSliceVar(&s.EtcdServersOverrides, \"etcd-servers-overrides\", s.EtcdServersOverrides, \"Per-resource etcd servers overrides, comma separated. The individual override format: group/resource#servers, where servers are http://ip:port, semicolon separated.\")\n\tfs.StringVar(&s.EtcdConfig.Prefix, \"etcd-prefix\", s.EtcdConfig.Prefix, \"The prefix for all resource paths in etcd.\")\n\tfs.StringVar(&s.EtcdConfig.KeyFile, \"etcd-keyfile\", s.EtcdConfig.KeyFile, \"SSL key file used to secure etcd communication\")"
  },
  {
    "id" : "c694c047-f7ea-4ddf-a03c-b7dda3f0766d",
    "prId" : 21469,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "668435ac-70a2-44f5-b1fa-cadabb418614",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "/cc @rrati & @jeremyeder - fyi. \n",
        "createdAt" : "2016-02-24T15:48:54Z",
        "updatedAt" : "2016-02-25T15:33:37Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "506899008f888df9d862abee93fde5488972c0ff",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +234,238 @@\tfs.StringVar(&s.MasterServiceNamespace, \"master-service-namespace\", s.MasterServiceNamespace, \"The namespace from which the kubernetes master services should be injected into pods\")\n\tfs.IntVar(&s.MasterCount, \"apiserver-count\", s.MasterCount, \"The number of apiservers running in the cluster\")\n\tfs.IntVar(&s.DeleteCollectionWorkers, \"delete-collection-workers\", s.DeleteCollectionWorkers, \"Number of workers spawned for DeleteCollection call. These are used to speed up namespace cleanup.\")\n\tfs.Var(&s.RuntimeConfig, \"runtime-config\", \"A set of key=value pairs that describe runtime configuration that may be passed to apiserver. apis/<groupVersion> key can be used to turn on/off specific api versions. apis/<groupVersion>/<resource> can be used to turn on/off specific resources. api/all and api/legacy are special keys to control all and legacy api versions respectively.\")\n\tfs.BoolVar(&s.EnableProfiling, \"profiling\", true, \"Enable profiling via web interface host:port/debug/pprof/\")"
  },
  {
    "id" : "4b63f4b2-a6f9-44fb-81be-d890bae70aaa",
    "prId" : 21001,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1c56b99-fbc5-41dc-8440-b42084dcd241",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "I take it that Dex is going to be the only IdP that implements this at first?\n",
        "createdAt" : "2016-02-12T23:15:38Z",
        "updatedAt" : "2016-02-12T23:15:38Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "b3c0351c-cfd8-431b-82e6-6989438064b8",
        "parentId" : "a1c56b99-fbc5-41dc-8440-b42084dcd241",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Oh, sounds like Azure supports groups, from this article:\nhttp://www-01.ibm.com/support/knowledgecenter/SSEQTP_8.5.5/com.ibm.websphere.wlp.doc/ae/twlp_config_oidc_rp.html\n\nCool.\n",
        "createdAt" : "2016-02-12T23:18:03Z",
        "updatedAt" : "2016-02-12T23:18:03Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "b1dec734-f4c4-4169-8ab9-7cb5f5da6c4b",
        "parentId" : "a1c56b99-fbc5-41dc-8440-b42084dcd241",
        "authorId" : "dcdf225b-ce7a-45ad-906b-f01301f37848",
        "body" : "[Keycloak](https://github.com/keycloak/keycloak) would support this via the \"group membership\" client mapper as well ... Definitely worth a mention :-)\n",
        "createdAt" : "2016-02-22T17:47:19Z",
        "updatedAt" : "2016-02-22T17:47:19Z",
        "lastEditedBy" : "dcdf225b-ce7a-45ad-906b-f01301f37848",
        "tags" : [
        ]
      },
      {
        "id" : "215921e2-4279-4a71-8cb5-3933135419da",
        "parentId" : "a1c56b99-fbc5-41dc-8440-b42084dcd241",
        "authorId" : "11725e10-43c9-4a8c-96d0-5118a3e67a6a",
        "body" : "@erictune any chance you could lobby with Eric Sachs to have GApps support it? Right now you need to call the Directory API to obtain group membership information...\n",
        "createdAt" : "2016-03-15T00:51:42Z",
        "updatedAt" : "2016-03-15T00:51:42Z",
        "lastEditedBy" : "11725e10-43c9-4a8c-96d0-5118a3e67a6a",
        "tags" : [
        ]
      }
    ],
    "commit" : "92d37d5cc529290e5d28fb0ea6bef3ed1fcfd846",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +167,171 @@\t\t\"The OpenID claim to use as the user name. Note that claims other than the default ('sub') is not \"+\n\t\t\"guaranteed to be unique and immutable. This flag is experimental, please see the authentication documentation for further details.\")\n\tfs.StringVar(&s.OIDCGroupsClaim, \"oidc-groups-claim\", \"\", \"If provided, the name of a custom OpenID Connect claim for specifying user groups. The claim value is expected to be an array of strings. This flag is experimental, please see the authentication documentation for further details.\")\n\tfs.StringVar(&s.ServiceAccountKeyFile, \"service-account-key-file\", s.ServiceAccountKeyFile, \"File containing PEM-encoded x509 RSA private or public key, used to verify ServiceAccount tokens. If unspecified, --tls-private-key-file is used.\")\n\tfs.BoolVar(&s.ServiceAccountLookup, \"service-account-lookup\", s.ServiceAccountLookup, \"If true, validate ServiceAccount tokens exist in etcd as part of authentication.\")"
  }
]