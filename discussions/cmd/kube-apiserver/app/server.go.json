[
  {
    "id" : "0ef57b0b-b0d4-4dbd-8449-2f2ea4937822",
    "prId" : 103066,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103066#pullrequestreview-689958670",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de69f848-a240-413d-8821-725cdc8c6220",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Personally I'd check each individually. Otherwise one of them could be zero or less.",
        "createdAt" : "2021-06-21T21:10:46Z",
        "updatedAt" : "2021-06-21T21:10:46Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "f54eb8ff-c9a6-40a7-998d-40bebf6c95d3",
        "parentId" : "de69f848-a240-413d-8821-725cdc8c6220",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I assumed there is validation on each individually",
        "createdAt" : "2021-06-22T00:38:44Z",
        "updatedAt" : "2021-06-22T00:38:45Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "8d2aaa13-e12c-45d3-90a9-5a04f319c802",
        "parentId" : "de69f848-a240-413d-8821-725cdc8c6220",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Yes, that's in `staging/src/k8s.io/apiserver/pkg/server/options/server_run_options.go`",
        "createdAt" : "2021-06-22T00:41:52Z",
        "updatedAt" : "2021-06-22T00:41:52Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "dbcb3dff-58b4-4da5-95d8-41ce3cde1e09",
        "parentId" : "de69f848-a240-413d-8821-725cdc8c6220",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Since we just add them together before constructing the filter anyway, the changes in this file seems fine. But can you also update the flag documentation at the bottom of `staging/src/k8s.io/apiserver/pkg/server/options/server_run_options.go` to explain that 0 no longer has the unlimited meaning when APF is on?",
        "createdAt" : "2021-06-22T16:14:32Z",
        "updatedAt" : "2021-06-22T16:14:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8da6c9a9-8093-4570-99a8-c6a4728b8ca3",
        "parentId" : "de69f848-a240-413d-8821-725cdc8c6220",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The force-push to 438942acf7f adds an update to the max inflight flag help at the end of `staging/src/k8s.io/apiserver/pkg/server/options/server_run_options.go`.",
        "createdAt" : "2021-06-22T20:19:30Z",
        "updatedAt" : "2021-06-22T20:19:30Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0762f492c5b850471723a305cfa7390e44851145",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +494,498 @@// BuildPriorityAndFairness constructs the guts of the API Priority and Fairness filter\nfunc BuildPriorityAndFairness(s *options.ServerRunOptions, extclient clientgoclientset.Interface, versionedInformer clientgoinformers.SharedInformerFactory) (utilflowcontrol.Interface, error) {\n\tif s.GenericServerRunOptions.MaxRequestsInFlight+s.GenericServerRunOptions.MaxMutatingRequestsInFlight <= 0 {\n\t\treturn nil, fmt.Errorf(\"invalid configuration: MaxRequestsInFlight=%d and MaxMutatingRequestsInFlight=%d; they must add up to something positive\", s.GenericServerRunOptions.MaxRequestsInFlight, s.GenericServerRunOptions.MaxMutatingRequestsInFlight)\n\t}"
  },
  {
    "id" : "39b5d286-8a6e-4cf2-ab0c-4c157d85ec2b",
    "prId" : 101155,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101155#pullrequestreview-637141575",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ead87586-c87f-4f06-9b73-8d30a1914e96",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "are we guaranteed len(s.Authentication.ServiceAccounts.Issuers) > 0 here so this doesn't panic?",
        "createdAt" : "2021-04-15T17:51:17Z",
        "updatedAt" : "2021-04-19T16:54:25Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c8769c4f-4dcf-4014-8394-12394475711d",
        "parentId" : "ead87586-c87f-4f06-9b73-8d30a1914e96",
        "authorId" : "f64c354b-61cb-4b89-b58f-f464e7ad4f94",
        "body" : "it is guaranteed as long as the validation is called. in the integration tests, the test server doesn't provide those options and the validation is not called.\r\n\r\ndone. i added the validation logic in the test server initialization and the missing options.",
        "createdAt" : "2021-04-15T21:24:39Z",
        "updatedAt" : "2021-04-19T16:54:25Z",
        "lastEditedBy" : "f64c354b-61cb-4b89-b58f-f464e7ad4f94",
        "tags" : [
        ]
      }
    ],
    "commit" : "925900317e43e58435082f624f5969e3cfe25c67",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +417,421 @@\t}\n\t// Plumb the required metadata through ExtraConfig.\n\tconfig.ExtraConfig.ServiceAccountIssuerURL = s.Authentication.ServiceAccounts.Issuers[0]\n\tconfig.ExtraConfig.ServiceAccountJWKSURI = s.Authentication.ServiceAccounts.JWKSURI\n\tconfig.ExtraConfig.ServiceAccountPublicKeys = pubKeys"
  },
  {
    "id" : "b4ce9fef-7f40-4501-9c7c-7b3d915d5fc4",
    "prId" : 101068,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101068#pullrequestreview-638979222",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69c79ac2-c742-4dbe-aeb8-ac4388e76742",
        "parentId" : null,
        "authorId" : "c2702f95-b5ab-4472-9b9b-a3e60465f10f",
        "body" : "need release notes?",
        "createdAt" : "2021-04-19T14:19:42Z",
        "updatedAt" : "2021-04-19T14:20:38Z",
        "lastEditedBy" : "c2702f95-b5ab-4472-9b9b-a3e60465f10f",
        "tags" : [
        ]
      },
      {
        "id" : "316e82fc-544a-472c-84db-c0c69e7557e9",
        "parentId" : "69c79ac2-c742-4dbe-aeb8-ac4388e76742",
        "authorId" : "7f9dfb06-9e7c-49e7-b86b-57d7af138f89",
        "body" : "Thanks for reviewÔºÅ\n\nGiven the 'if-condition' in [line 727](https://github.com/kubernetes/kubernetes/blob/4925cb66c942b4b4ce3677d343d08f2c5a393fa2/cmd/kube-apiserver/app/server.go#L727 ) , it's clear enough that we don't need notes.",
        "createdAt" : "2021-04-19T15:03:58Z",
        "updatedAt" : "2021-04-19T15:03:58Z",
        "lastEditedBy" : "7f9dfb06-9e7c-49e7-b86b-57d7af138f89",
        "tags" : [
        ]
      }
    ],
    "commit" : "802a50e4e9e726d7d8fb383ca0cce9159e705cf5",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +734,738 @@\t}\n\n\t_, primaryServiceClusterCIDR, err := net.ParseCIDR(serviceClusterIPRangeList[0])\n\tif err != nil {\n\t\treturn net.IP{}, net.IPNet{}, net.IPNet{}, fmt.Errorf(\"service-cluster-ip-range[0] is not a valid cidr\")"
  },
  {
    "id" : "86cae3a5-8cea-4474-aeba-19542548c334",
    "prId" : 91539,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91539#pullrequestreview-445161609",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07e18def-d089-4010-bc74-c3f44733cb9b",
        "parentId" : null,
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "ssh user is only used for a cloud provider needing ssh tunnels (i.e. gke) but that doesn't mean that the cloud provider was only set on the KAS for GKE. I think it would be better to put this warning outside the ssh user check but inside a cloud provider not external check. If we want to warn about not using ssh tunnels, I am fine with that as well but think we should be explicitly warning about ssh tunnels in that case. ",
        "createdAt" : "2020-05-29T15:52:29Z",
        "updatedAt" : "2020-05-29T15:52:29Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "02498085-090b-4799-be98-b857e22fb7cd",
        "parentId" : "07e18def-d089-4010-bc74-c3f44733cb9b",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this PR is just hoisting something that used to be in InitCloudProvider out to a separate call, so it copy/pasted the new call everywhere InitCloudProvider was called",
        "createdAt" : "2020-05-29T15:59:33Z",
        "updatedAt" : "2020-05-29T15:59:34Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2e24c972-822f-463b-8489-e760318cf770",
        "parentId" : "07e18def-d089-4010-bc74-c3f44733cb9b",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "^ yes and calling it from InitCloudProvider was problematic because cloud-controller-manager also calls it, which means external providers using the same provider name (aws, gce, etc) are logging this deprecation warning incorrectly. ",
        "createdAt" : "2020-05-30T03:08:24Z",
        "updatedAt" : "2020-05-30T03:08:36Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "8214fcdf-2bf7-4734-8138-b7b1e5cf39d5",
        "parentId" : "07e18def-d089-4010-bc74-c3f44733cb9b",
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "I'm all for hoisting the warning out of InitCloudProvider, I'm all for having the warning in the Kube APIServer. I just think the warning about having the cloud provider flag should be independent of if you had the SSH User flag on. If we want a separate warning for SSH User, that sounds like a good idea. However you can turn on the cloud provider flag without turning on the ssh user flag. ",
        "createdAt" : "2020-06-01T19:24:50Z",
        "updatedAt" : "2020-06-01T19:25:02Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "7de54f15-9096-481d-954f-5825c92d75b1",
        "parentId" : "07e18def-d089-4010-bc74-c3f44733cb9b",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Gonna fix this in a follow-up PR ",
        "createdAt" : "2020-07-08T22:06:47Z",
        "updatedAt" : "2020-07-08T22:06:47Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed3feac74d39bfaf20c482dcf4f3fa6c527481fb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +230,234 @@\t\tvar installSSHKey tunneler.InstallSSHKey\n\n\t\tcloudprovider.DeprecationWarningForProvider(s.CloudProvider.CloudProvider)\n\t\tcloud, err := cloudprovider.InitCloudProvider(s.CloudProvider.CloudProvider, s.CloudProvider.CloudConfigFile)\n\t\tif err != nil {"
  },
  {
    "id" : "012dc706-a570-4294-91dc-3960913558c6",
    "prId" : 85870,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85870#pullrequestreview-348293338",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b6b73ac-d05c-41b6-89b7-520a82c43d14",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "* Consider moving the EgressSelector into ServerRunOptions\r\n* Consider having a no-op implementation (so no `if nil` checks needed)",
        "createdAt" : "2020-01-21T22:32:27Z",
        "updatedAt" : "2020-02-28T22:22:28Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b3e667a0-1e73-4629-b171-833a38311e46",
        "parentId" : "2b6b73ac-d05c-41b6-89b7-520a82c43d14",
        "authorId" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "body" : "> * Consider moving the EgressSelector into ServerRunOptions\r\n\r\nack\r\n\r\n> * Consider having a no-op implementation (so no `if nil` checks needed)\r\n\r\nSee comment below. I'm not sure if that's possible since we're replacing the Dialer instead of proxying through with the Dialer.\r\n",
        "createdAt" : "2020-01-21T23:37:04Z",
        "updatedAt" : "2020-02-28T22:22:28Z",
        "lastEditedBy" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "tags" : [
        ]
      },
      {
        "id" : "b7c6d240-35d4-4b32-80bd-083d604c6b07",
        "parentId" : "2b6b73ac-d05c-41b6-89b7-520a82c43d14",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Maybe the function signature could take the existing dialer, so that the no-op implementation can just return it unmodified? That'd also permit you to do the thing in my other comment if it ever becomes necessary.",
        "createdAt" : "2020-01-21T23:38:55Z",
        "updatedAt" : "2020-02-28T22:22:28Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "eca5c2fb-8a3c-4c3e-a949-c3f9d61293d6",
        "parentId" : "2b6b73ac-d05c-41b6-89b7-520a82c43d14",
        "authorId" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "body" : "@lavalamp: After digging into this a bit more, I'm not sure if it'd be a good idea to move this into ServerRunOptions. The objects in that struct are heavily coupled to apiserver's startup flags and store startup configs read from the CLI. EgressSelector is a class containing more complex functions that I feel would be more suitable passed around as a stand alone class.",
        "createdAt" : "2020-01-24T22:19:52Z",
        "updatedAt" : "2020-02-28T22:22:28Z",
        "lastEditedBy" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "tags" : [
        ]
      },
      {
        "id" : "1d7a0df0-d3ee-497e-8549-889d0f7bbd63",
        "parentId" : "2b6b73ac-d05c-41b6-89b7-520a82c43d14",
        "authorId" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "body" : "As discussed offline, let's move the no-op egress selector implementation to a separate PR since it will require a refactor of all egress endpoints.",
        "createdAt" : "2020-01-25T00:38:21Z",
        "updatedAt" : "2020-02-28T22:22:28Z",
        "lastEditedBy" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "tags" : [
        ]
      }
    ],
    "commit" : "61fa4e6c098559b65fe28c1bf55cb817697e38e5",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +561,565 @@\n// BuildAuthenticator constructs the authenticator\nfunc BuildAuthenticator(s *options.ServerRunOptions, EgressSelector *egressselector.EgressSelector, extclient clientgoclientset.Interface, versionedInformer clientgoinformers.SharedInformerFactory) (authenticator.Request, *spec.SecurityDefinitions, error) {\n\tauthenticatorConfig, err := s.Authentication.ToAuthenticationConfig()\n\tif err != nil {"
  },
  {
    "id" : "58c220b9-5be6-4691-9922-c64072f944a0",
    "prId" : 85870,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85870#pullrequestreview-346262024",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea6f1c3a-fc35-445d-87fc-497e9d23b429",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Won't this break if there's already a custom dialer? I guess I expected this to make a thingy which dials the proxy, and returns a second thingy with a .Dial() method which can be used to make the actual request, and this latter thingy's Dial() method should be called by the existing CustomDial?",
        "createdAt" : "2020-01-21T22:35:30Z",
        "updatedAt" : "2020-02-28T22:22:28Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "f2877b82-66f2-43c9-a3e3-e4493638056e",
        "parentId" : "ea6f1c3a-fc35-445d-87fc-497e9d23b429",
        "authorId" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "body" : "Generic webhooks are routable from the master so we're just using the default net Dialer (https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apiserver/pkg/server/egressselector/egress_selector.go#L35). This doesn't dial the proxy at all.\r\n\r\nI don't think there are any cases with existing custom dialers since we created the field with this PR and all generic (non admission) webhooks use the default dialer.",
        "createdAt" : "2020-01-21T23:28:08Z",
        "updatedAt" : "2020-02-28T22:22:28Z",
        "lastEditedBy" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "tags" : [
        ]
      }
    ],
    "commit" : "61fa4e6c098559b65fe28c1bf55cb817697e38e5",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +583,587 @@\t\t\treturn nil, nil, err\n\t\t}\n\t\tauthenticatorConfig.CustomDial = egressDialer\n\t}\n"
  },
  {
    "id" : "5ea0bb54-6ce5-4cf8-9412-f84ab254c104",
    "prId" : 82077,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82077#pullrequestreview-280838605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff2b5642-6596-4f12-b303-6c15f0cf1231",
        "parentId" : null,
        "authorId" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "body" : ":tada: for no bare returns.",
        "createdAt" : "2019-08-28T13:43:15Z",
        "updatedAt" : "2019-10-01T13:08:27Z",
        "lastEditedBy" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f14f4c933ee01d219ffbfa846875171e179019b7",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +280,284 @@\tgenericConfig, versionedInformers, insecureServingInfo, serviceResolver, pluginInitializers, admissionPostStartHook, storageFactory, err := buildGenericConfig(s.ServerRunOptions, proxyTransport)\n\tif err != nil {\n\t\treturn nil, nil, nil, nil, err\n\t}\n"
  },
  {
    "id" : "7b7dd28a-4bf2-4fd5-9857-dcb3cae5ddc8",
    "prId" : 81224,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81224#pullrequestreview-275194782",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa2bfc1e-5c92-42fe-87af-4313b4627e96",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "It is a step backwards here to take configuration from `s` rather than `genericConfig`.  This statement comes at the end of a long function that has propagated configuration information from `s` to `genericConfig`, so I think the latter is the more appropriate source to use at this point.",
        "createdAt" : "2019-08-14T23:21:03Z",
        "updatedAt" : "2019-08-16T04:36:31Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a531c6ac594fac1835a231a83b4ec0b552bd2d6",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +501,505 @@\n\tif utilfeature.DefaultFeatureGate.Enabled(genericfeatures.RequestManagement) {\n\t\tgenericConfig.RequestManagement = BuildRequestManagement(s, clientgoExternalClient, versionedInformers)\n\t}\n"
  },
  {
    "id" : "1e398f32-c0a3-4ddf-b689-b17aef2195b7",
    "prId" : 79386,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79386#pullrequestreview-264937338",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c49bd2cc-f1ec-49f7-b550-0cbf94ce3720",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "No feature gate check here?",
        "createdAt" : "2019-07-22T15:26:06Z",
        "updatedAt" : "2019-08-28T18:42:36Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "c158d56f-9503-4222-a0f1-2e1bc7b0e65a",
        "parentId" : "c49bd2cc-f1ec-49f7-b550-0cbf94ce3720",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "At this point, configuration has been validated at earlier stage leading to this code path.",
        "createdAt" : "2019-07-22T17:19:31Z",
        "updatedAt" : "2019-08-28T18:42:36Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "c27e0b029d328552cc3ef0661f16a5ad3c422fb8",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +315,319 @@\tvar secondaryServiceIPRange net.IPNet\n\t// process secondary range only if provided by user\n\tif s.SecondaryServiceClusterIPRange.IP != nil {\n\t\tsecondaryServiceIPRange, _, lastErr = master.DefaultServiceIPRange(s.SecondaryServiceClusterIPRange)\n\t\tif lastErr != nil {"
  },
  {
    "id" : "ae724b94-c2b4-4d9a-a66d-80c65d16c195",
    "prId" : 79386,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79386#pullrequestreview-273952140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a016b1e-766a-4842-84ab-fecddaee0c47",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "this default is terrifying.  I had to go look it up, we REALLY should not be doing that.  Not your problem, I guess but yikes.",
        "createdAt" : "2019-08-12T21:21:04Z",
        "updatedAt" : "2019-08-28T18:42:36Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "c27e0b029d328552cc3ef0661f16a5ad3c422fb8",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +573,577 @@\tif len(serviceClusterIPRangeList) == 0 {\n\t\tvar primaryServiceClusterCIDR net.IPNet\n\t\tserviceIPRange, apiServerServiceIP, err = master.DefaultServiceIPRange(primaryServiceClusterCIDR)\n\t\tif err != nil {\n\t\t\treturn options, fmt.Errorf(\"error determining service IP ranges: %v\", err)"
  },
  {
    "id" : "53bd3ec1-cf99-4530-b758-f55173760a39",
    "prId" : 73408,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73408#pullrequestreview-201452166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7cf898a-0811-4e46-823e-79358cd68148",
        "parentId" : null,
        "authorId" : "05637862-b60e-403e-8519-09d1b3f0c9c2",
        "body" : "keep original",
        "createdAt" : "2019-01-31T02:14:56Z",
        "updatedAt" : "2019-02-15T15:34:02Z",
        "lastEditedBy" : "05637862-b60e-403e-8519-09d1b3f0c9c2",
        "tags" : [
        ]
      },
      {
        "id" : "ef1d520a-e2da-460c-bd13-f559eef3e3d6",
        "parentId" : "a7cf898a-0811-4e46-823e-79358cd68148",
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "this is autogenerated and does no harm",
        "createdAt" : "2019-01-31T10:14:06Z",
        "updatedAt" : "2019-02-15T15:34:02Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "b6de5f27-8e45-464b-a744-2f13b4f79c5f",
        "parentId" : "a7cf898a-0811-4e46-823e-79358cd68148",
        "authorId" : "27315fad-771e-420e-af79-534db73fcb49",
        "body" : "I think this is the last thing. please let me know if I need to go back and update this.",
        "createdAt" : "2019-02-08T07:12:55Z",
        "updatedAt" : "2019-02-15T15:34:02Z",
        "lastEditedBy" : "27315fad-771e-420e-af79-534db73fcb49",
        "tags" : [
        ]
      }
    ],
    "commit" : "160ed26c20e8114579dd15e0a7f8bf51b916aa12",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +37,41 @@\textensionsapiserver \"k8s.io/apiextensions-apiserver/pkg/apiserver\"\n\tv1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\tutilerrors \"k8s.io/apimachinery/pkg/util/errors\"\n\tutilnet \"k8s.io/apimachinery/pkg/util/net\"\n\t\"k8s.io/apimachinery/pkg/util/sets\""
  },
  {
    "id" : "d3d898d9-7ffd-45f0-9462-fdda311c7c0c",
    "prId" : 70967,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70967#pullrequestreview-174663454",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64d99b84-bf63-440a-846e-35548c2a37a4",
        "parentId" : null,
        "authorId" : "e81e699e-eb6c-4380-bfd5-16ab81ac51d6",
        "body" : "Is this useful at all? The value is over 136 years, might as well skip capping the expiration",
        "createdAt" : "2018-11-13T21:30:24Z",
        "updatedAt" : "2018-11-14T01:27:35Z",
        "lastEditedBy" : "e81e699e-eb6c-4380-bfd5-16ab81ac51d6",
        "tags" : [
        ]
      },
      {
        "id" : "6f76c9d9-3ef8-4f95-9015-8c3b41ef4d8d",
        "parentId" : "64d99b84-bf63-440a-846e-35548c2a37a4",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "ehhh, it's the current behavior. I'd prefer to change outside of this PR if we want to.",
        "createdAt" : "2018-11-14T01:23:57Z",
        "updatedAt" : "2018-11-14T01:27:35Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "20bad760fcb8d37ba77b28a177dd6aab66427544",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +566,570 @@\t\tif s.Authentication.ServiceAccounts.MaxExpiration != 0 {\n\t\t\tlowBound := time.Hour\n\t\t\tupBound := time.Duration(1<<32) * time.Second\n\t\t\tif s.Authentication.ServiceAccounts.MaxExpiration < lowBound ||\n\t\t\t\ts.Authentication.ServiceAccounts.MaxExpiration > upBound {"
  },
  {
    "id" : "a243a22b-522f-4d40-a682-7a13d5b2a260",
    "prId" : 70204,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70204#pullrequestreview-175184626",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11f552f1-ae3d-44b9-9742-d4a6b93e8709",
        "parentId" : null,
        "authorId" : "05637862-b60e-403e-8519-09d1b3f0c9c2",
        "body" : "IMO, add the generic like that, no need to add function\r\nhttps://github.com/kubernetes/kubernetes/blob/master/cmd/kubelet/app/server.go#L270",
        "createdAt" : "2018-11-14T06:06:10Z",
        "updatedAt" : "2018-11-21T17:30:34Z",
        "lastEditedBy" : "05637862-b60e-403e-8519-09d1b3f0c9c2",
        "tags" : [
        ]
      },
      {
        "id" : "1066b9f1-a043-44f7-9072-e266f0749a65",
        "parentId" : "11f552f1-ae3d-44b9-9742-d4a6b93e8709",
        "authorId" : "b6bfd1d3-475c-4d1f-8350-346144c5ac04",
        "body" : "We can do that for `help` because we know the type of it. We do not know the types for flags like `cloud-provider-gce-lb-src-cidrs`, `default-not-ready-toleration-seconds`, etc. and one way to obtain the type is to extract it out from `flag.CommandLine` using the `Register` function in `globalflag` (It does a lookup, normalizes the pflag, and add it to the provided flagset). What do you think?",
        "createdAt" : "2018-11-14T06:15:21Z",
        "updatedAt" : "2018-11-21T17:30:34Z",
        "lastEditedBy" : "b6bfd1d3-475c-4d1f-8350-346144c5ac04",
        "tags" : [
        ]
      },
      {
        "id" : "3cfd1ac7-85cd-40f1-9fc3-47849e189b5b",
        "parentId" : "11f552f1-ae3d-44b9-9742-d4a6b93e8709",
        "authorId" : "05637862-b60e-403e-8519-09d1b3f0c9c2",
        "body" : "emmm...   seems no need to  `normalizes()`, write the register function by yourself.   `normalizes()` using to convert `_` to `-` im command",
        "createdAt" : "2018-11-14T08:23:19Z",
        "updatedAt" : "2018-11-21T17:30:34Z",
        "lastEditedBy" : "05637862-b60e-403e-8519-09d1b3f0c9c2",
        "tags" : [
        ]
      },
      {
        "id" : "6b1ac5ce-941e-41c2-9749-b69c2a41e51c",
        "parentId" : "11f552f1-ae3d-44b9-9742-d4a6b93e8709",
        "authorId" : "b6bfd1d3-475c-4d1f-8350-346144c5ac04",
        "body" : "Updated. What do you think of the new approach?",
        "createdAt" : "2018-11-15T03:45:14Z",
        "updatedAt" : "2018-11-21T17:30:34Z",
        "lastEditedBy" : "b6bfd1d3-475c-4d1f-8350-346144c5ac04",
        "tags" : [
        ]
      },
      {
        "id" : "aaf653ce-45c4-440e-a354-25f764b2b176",
        "parentId" : "11f552f1-ae3d-44b9-9742-d4a6b93e8709",
        "authorId" : "05637862-b60e-403e-8519-09d1b3f0c9c2",
        "body" : "look better now",
        "createdAt" : "2018-11-15T04:10:34Z",
        "updatedAt" : "2018-11-21T17:30:34Z",
        "lastEditedBy" : "05637862-b60e-403e-8519-09d1b3f0c9c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fbdcf889a3515ef0ccbecba7af0643cce346021",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +122,126 @@\tglobalflag.AddGlobalFlags(namedFlagSets.FlagSet(\"global\"), cmd.Name())\n\toptions.AddCustomGlobalFlags(namedFlagSets.FlagSet(\"generic\"))\n\tfor _, f := range namedFlagSets.FlagSets {\n\t\tfs.AddFlagSet(f)\n\t}"
  },
  {
    "id" : "7b73916f-76a7-4eab-9938-c6589c370c56",
    "prId" : 68557,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68557#pullrequestreview-188905557",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fdd1745-a7db-4da9-97ba-4cfef15684df",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "NPE here?",
        "createdAt" : "2018-09-12T13:02:14Z",
        "updatedAt" : "2019-01-03T11:01:59Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "6b1def7d-9061-4a00-b7d9-764a648c501a",
        "parentId" : "5fdd1745-a7db-4da9-97ba-4cfef15684df",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Why a NPE? the server list length is validated in the options to be non-zero.",
        "createdAt" : "2019-01-02T10:58:22Z",
        "updatedAt" : "2019-01-03T11:01:59Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "ca328bd7-79e7-4d85-b2ce-c56875943e56",
        "parentId" : "5fdd1745-a7db-4da9-97ba-4cfef15684df",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "mmm.. yeah, no chance of NPE here",
        "createdAt" : "2019-01-03T06:01:42Z",
        "updatedAt" : "2019-01-03T11:01:59Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "00a717b572f3582d0d20633644e827dd60991dce",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +288,292 @@\t}\n\n\tif _, port, err := net.SplitHostPort(s.Etcd.StorageConfig.Transport.ServerList[0]); err == nil && port != \"0\" && len(port) != 0 {\n\t\tif err := utilwait.PollImmediate(etcdRetryInterval, etcdRetryLimit*etcdRetryInterval, preflight.EtcdConnection{ServerList: s.Etcd.StorageConfig.Transport.ServerList}.CheckEtcdServers); err != nil {\n\t\t\tlastErr = fmt.Errorf(\"error waiting for etcd connection: %v\", err)"
  },
  {
    "id" : "9b35db0d-af3c-46d2-8456-d9290f35921a",
    "prId" : 63859,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63859#pullrequestreview-121746860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb1fa286-88f0-47e9-8709-a085c66b8db8",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "it is not obvious to me why we are changing this in this pr.\r\n\r\nit seems unrelated to the kubelet changes needing to pass a channel down to the dockershim.",
        "createdAt" : "2018-05-18T17:13:46Z",
        "updatedAt" : "2018-05-24T19:52:40Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "f05a2616-c3a4-46ed-9fb4-8da7513184db",
        "parentId" : "bb1fa286-88f0-47e9-8709-a085c66b8db8",
        "authorId" : "6f007220-e297-4289-a947-06c164b528d2",
        "body" : "In `cmd/hyperkube/main` we setup the signal handler using `server.SetupSignalHandler()`. This function can only be called once; subsequent calls deliberately fail:\r\n\r\n    func SetupSignalHandler() (stopCh <-chan struct{}) {\r\n            close(onlyOneSignalHandler) // panics when called twice\r\n            ...\r\n\r\n`NewHyperKubeCommand()` directly calls `NewAPIServerCommand()` and prior to this PR `NewAPIServerCommand()` also called `SetupSignalHandler()`. Without removing the secondary registration in `NewAPIServerCommand()` the registration would happen twice, resulting in a `panic on closed channel`.\r\n\r\nTo fix this we now pass the stopCh in from the roots of the call trees rather than letting it happen part-way down in `NewAPIServerCommand()`. \r\n\r\nAnd this is why this PR also changed the following files:\r\n\r\n```console\r\n$ ag NewAPIServerCommand\r\n\r\nFile: cmd/genman/gen_kube_man.go\r\n66:27:\t\tapiserver := apiservapp.NewAPIServerCommand(server.SetupSignalHandler())\r\n\r\nFile: cmd/genkubedocs/gen_kube_docs.go\r\n57:27:\t\tapiserver := apiservapp.NewAPIServerCommand(server.SetupSignalHandler())\r\n\r\nFile: cmd/kube-apiserver/app/server.go\r\n107:4:// NewAPIServerCommand creates a *cobra.Command object with default parameters\r\n108:6:func NewAPIServerCommand(stopCh <-chan struct{}) *cobra.Command {\r\n\r\nFile: cmd/kube-apiserver/apiserver.go\r\n41:17:\tcommand := app.NewAPIServerCommand(server.SetupSignalHandler())\r\n```",
        "createdAt" : "2018-05-21T10:12:29Z",
        "updatedAt" : "2018-05-24T19:52:40Z",
        "lastEditedBy" : "6f007220-e297-4289-a947-06c164b528d2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca58578b240a40da487f366b0200698616aa2017",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +109,113 @@\n// NewAPIServerCommand creates a *cobra.Command object with default parameters\nfunc NewAPIServerCommand(stopCh <-chan struct{}) *cobra.Command {\n\ts := options.NewServerRunOptions()\n\tcmd := &cobra.Command{"
  },
  {
    "id" : "b78820b1-7906-4e1b-b911-d5ea4963b493",
    "prId" : 62545,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62545#pullrequestreview-112055409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d326d9d2-28a9-4ea7-b949-abe9f99355d3",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "fix etcd_storage_path_test expected GVK\r\n\r\n```\r\netcd_storage_path_test.go:663: GVK for PodSecurityPolicy from k8s.io/kubernetes/vendor/k8s.io/api/policy/v1beta1 does not match, expected extensions/v1beta1, Kind=PodSecurityPolicy got policy/v1beta1, Kind=PodSecurityPolicy\r\netcd_storage_path_test.go:663: GVK for PodSecurityPolicy from k8s.io/kubernetes/vendor/k8s.io/api/extensions/v1beta1 does not match, expected extensions/v1beta1, Kind=PodSecurityPolicy got policy/v1beta1, Kind=PodSecurityPolicy\r\n\r\n```",
        "createdAt" : "2018-04-13T15:25:38Z",
        "updatedAt" : "2018-04-16T15:22:25Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff636f25c0ada35defa2413b8e1809061394b2dc",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +644,648 @@\tstorageFactory.AddCohabitatingResources(apps.Resource(\"replicasets\"), extensions.Resource(\"replicasets\"))\n\tstorageFactory.AddCohabitatingResources(api.Resource(\"events\"), events.Resource(\"events\"))\n\tstorageFactory.AddCohabitatingResources(policy.Resource(\"podsecuritypolicies\"), extensions.Resource(\"podsecuritypolicies\"))\n\tfor _, override := range s.Etcd.EtcdServersOverrides {\n\t\ttokens := strings.Split(override, \"#\")"
  },
  {
    "id" : "e5fe90ba-2e9f-4cb0-b05a-e5f5c58c5662",
    "prId" : 60702,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60702#pullrequestreview-102973718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99213b6b-a3f3-4f98-9bdb-a23d7089b94b",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "is this really requivalent?",
        "createdAt" : "2018-03-12T09:12:38Z",
        "updatedAt" : "2018-03-12T09:12:38Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "25ac578e-2589-43e1-88bf-c7534bd8a7bc",
        "parentId" : "99213b6b-a3f3-4f98-9bdb-a23d7089b94b",
        "authorId" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "body" : "Yes, only when KUBE_API_VERSIONS env set,  can omit the err below\r\n```\r\n\tclient, err := internalclientset.NewForConfig(genericConfig.LoopbackClientConfig)\r\n\tif err != nil {\r\n\t\tkubeAPIVersions := os.Getenv(\"KUBE_API_VERSIONS\")\r\n\t\tif len(kubeAPIVersions) == 0 {\r\n\t\t\treturn nil, nil, nil, nil, nil, fmt.Errorf(\"failed to create clientset: %v\", err)\r\n\t\t}\r\n\r\n\t\t// KUBE_API_VERSIONS is used in test-update-storage-objects.sh, disabling a number of API\r\n\t\t// groups. This leads to a nil client above and undefined behaviour further down.\r\n\t\t//\r\n\t\t// TODO: get rid of KUBE_API_VERSIONS or define sane behaviour if set\r\n\t\tglog.Errorf(\"Failed to create clientset with KUBE_API_VERSIONS=%q. KUBE_API_VERSIONS is only for testing. Things will break.\", kubeAPIVersions)\r\n\t}\r\n```",
        "createdAt" : "2018-03-12T09:17:02Z",
        "updatedAt" : "2018-03-12T09:17:02Z",
        "lastEditedBy" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "tags" : [
        ]
      },
      {
        "id" : "94319f71-b527-419f-8349-1034606bd77b",
        "parentId" : "99213b6b-a3f3-4f98-9bdb-a23d7089b94b",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "oh ic. We used to selectively disable clients long ago. But you are right: we skip the whole clientset now in this case.",
        "createdAt" : "2018-03-12T09:46:28Z",
        "updatedAt" : "2018-03-12T09:46:29Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "0feecc376cc04baa2f4979cecaabb658373d6c69",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +566,570 @@\t\tauthenticatorConfig.ServiceAccountTokenGetter = serviceaccountcontroller.NewGetterFromClient(extclient)\n\t}\n\tkubeAPIVersions := os.Getenv(\"KUBE_API_VERSIONS\")\n\tif len(kubeAPIVersions) == 0 {\n\t\tauthenticatorConfig.BootstrapTokenAuthenticator = bootstrap.NewTokenAuthenticator("
  },
  {
    "id" : "898521ac-f6fd-46c5-88b8-67a15a9e0da4",
    "prId" : 60483,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60483#pullrequestreview-106360016",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd956297-7ded-4429-93a2-25471b71d46a",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "hyperkube also uses this code path?",
        "createdAt" : "2018-03-22T10:02:11Z",
        "updatedAt" : "2018-04-04T03:22:07Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "c477d4ca-683b-4121-8410-9d579d26d861",
        "parentId" : "cd956297-7ded-4429-93a2-25471b71d46a",
        "authorId" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "body" : "yep",
        "createdAt" : "2018-03-23T02:09:31Z",
        "updatedAt" : "2018-04-04T03:22:07Z",
        "lastEditedBy" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "b8460bd84951fc047ec75a3365b07a188ac8d103",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +113,117 @@others. The API Server services REST operations and provides the frontend to the\ncluster's shared state through which all other components interact.`,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\tverflag.PrintAndExitIfRequested()\n\t\t\tutilflag.PrintFlags(cmd.Flags())"
  },
  {
    "id" : "84da07d9-fb9c-451c-98e4-273879563fbf",
    "prId" : 59940,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59940#pullrequestreview-99473773",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "844cc985-431d-43bd-b7d5-d42fcce4c84a",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "+1000",
        "createdAt" : "2018-02-26T21:27:17Z",
        "updatedAt" : "2018-02-28T01:20:59Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "024f57affebc137c6166c16e2ea99f67e73699f1",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +568,572 @@\tauthenticatorConfig := s.Authentication.ToAuthenticationConfig()\n\tif s.Authentication.ServiceAccounts.Lookup {\n\t\tauthenticatorConfig.ServiceAccountTokenGetter = serviceaccountcontroller.NewGetterFromClient(extclient)\n\t}\n\tif client == nil || reflect.ValueOf(client).IsNil() {"
  },
  {
    "id" : "21ad2135-09d9-403c-8954-53336f9126c2",
    "prId" : 59940,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59940#pullrequestreview-99882010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdcdf102-b3ac-444e-a2c0-e8f7c2e7aa93",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "require `len(s.Authentication.ServiceAccounts.APIAudiences) > 0`?",
        "createdAt" : "2018-02-27T04:06:43Z",
        "updatedAt" : "2018-02-28T01:20:59Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "220c1215-fd58-4c49-ab41-3d4c59e92269",
        "parentId" : "fdcdf102-b3ac-444e-a2c0-e8f7c2e7aa93",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Done above.",
        "createdAt" : "2018-02-27T22:32:30Z",
        "updatedAt" : "2018-02-28T01:20:59Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "024f57affebc137c6166c16e2ea99f67e73699f1",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +345,349 @@\t\t}\n\t\tissuer = serviceaccount.JWTTokenGenerator(s.Authentication.ServiceAccounts.Issuer, sk)\n\t\tapiAudiences = s.Authentication.ServiceAccounts.APIAudiences\n\t}\n"
  },
  {
    "id" : "5c6bc46d-3e51-480b-9c75-687707ce111c",
    "prId" : 58462,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58462#pullrequestreview-92819579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f1dd753-a9b6-4482-822a-73e0796926f2",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "What happens if we leave this `v1alpha1`? If we add new things to `v1alpha1` but not to the `v1beta1` will this handle it correctly?",
        "createdAt" : "2018-01-24T02:17:57Z",
        "updatedAt" : "2018-01-31T10:46:57Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "697979d6-0cd8-495c-8b69-710b74259e23",
        "parentId" : "5f1dd753-a9b6-4482-822a-73e0796926f2",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "There could only be one storage version. You have to keep the v1alpha1 and v1beta1 roundtrippable. It's an api requirement in the api conventions doc.\r\n\r\nIf you want to test new things in alpha, you can create a new struct and specify here to store it as v1alpha1.",
        "createdAt" : "2018-01-24T03:43:35Z",
        "updatedAt" : "2018-01-31T10:46:57Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "49783deb-7d40-41a7-8239-c7ac2e936632",
        "parentId" : "5f1dd753-a9b6-4482-822a-73e0796926f2",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "If you store in v1alpha1, you have the option to downgrade and have VolumeAttachments keep working in alpha form, but you have alpha data in etcd, which means you cannot drop the alpha types until storage migration is solved. \r\n\r\nIf you store in beta, you are better positioned to drop alpha types sooner (since the only people who would have alpha data were people who upgraded from 1.9 with the alpha flag enabled)",
        "createdAt" : "2018-01-24T04:25:08Z",
        "updatedAt" : "2018-01-31T10:46:57Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "40e4f9ce-e50b-46ca-bb46-9715d166303a",
        "parentId" : "5f1dd753-a9b6-4482-822a-73e0796926f2",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I'd probably expect to store in v1beta1",
        "createdAt" : "2018-01-24T04:26:08Z",
        "updatedAt" : "2018-01-31T10:46:57Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "9bfcae4f-1348-4f4f-9ee9-14bd5640d7d9",
        "parentId" : "5f1dd753-a9b6-4482-822a-73e0796926f2",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Ok. I'm slightly concerned that doing so will require us to add new features to both v1beta1 but v1alpha1, but, we'll leave storage as v1beta1. ",
        "createdAt" : "2018-01-31T06:49:36Z",
        "updatedAt" : "2018-01-31T10:46:57Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7ffadd6b3785bb699285fa71db55d6b570db60c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +587,591 @@\t\t[]schema.GroupVersionResource{\n\t\t\tbatch.Resource(\"cronjobs\").WithVersion(\"v1beta1\"),\n\t\t\tstorage.Resource(\"volumeattachments\").WithVersion(\"v1beta1\"),\n\t\t\tadmissionregistration.Resource(\"initializerconfigurations\").WithVersion(\"v1alpha1\"),\n\t\t},"
  },
  {
    "id" : "1ab41c01-f714-4a60-9b8b-b20ff87dd9c4",
    "prId" : 56004,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/56004#pullrequestreview-78257260",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "446643a0-aae9-4aca-ae6e-5b496c3956d1",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "What exactly are the things in this list?",
        "createdAt" : "2017-11-20T01:01:46Z",
        "updatedAt" : "2017-11-21T21:00:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "fe864cf9-84be-43ea-a29a-0614a26a9b93",
        "parentId" : "446643a0-aae9-4aca-ae6e-5b496c3956d1",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "These are the objects that need to be serialized to a different version before storing to etcd than the other objects in the same group.",
        "createdAt" : "2017-11-20T05:10:40Z",
        "updatedAt" : "2017-11-21T21:00:47Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "4d87b4d9-34bc-4506-a9bd-5ab2956a33a8",
        "parentId" : "446643a0-aae9-4aca-ae6e-5b496c3956d1",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Since it looks like there's still a test to fix, can you add a comment to that effect?",
        "createdAt" : "2017-11-20T16:49:25Z",
        "updatedAt" : "2017-11-21T21:00:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8e6c4eac-f159-4a7d-95f0-e162ad46fce5",
        "parentId" : "446643a0-aae9-4aca-ae6e-5b496c3956d1",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Done.",
        "createdAt" : "2017-11-21T21:01:17Z",
        "updatedAt" : "2017-11-21T21:01:17Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcf4f15c89c8faf3f23171ea50b9c460ea67a76b",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +566,570 @@\t\t\tbatch.Resource(\"cronjobs\").WithVersion(\"v1beta1\"),\n\t\t\tstorage.Resource(\"volumeattachments\").WithVersion(\"v1alpha1\"),\n\t\t\tadmissionregistration.Resource(\"initializerconfigurations\").WithVersion(\"v1alpha1\"),\n\t\t},\n\t\tmaster.DefaultAPIResourceConfigSource(), s.APIEnablement.RuntimeConfig)"
  },
  {
    "id" : "926e0eb9-4ef8-4057-968d-4e78092eda1e",
    "prId" : 54513,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54513#pullrequestreview-72038662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5185e4e2-ba29-493f-b383-b34e928d93af",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "We should make a rule about how many parameters we're allowed to make before a config struct is required--I think this function (and many in this file) is over the threshold. ;)",
        "createdAt" : "2017-10-25T23:01:35Z",
        "updatedAt" : "2017-10-26T11:52:30Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c1fe1f61a1de754a2cfed1966f4a1f8024ca618",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +493,497 @@\n// BuildAdmissionPluginInitializer constructs the admission plugin initializer\nfunc BuildAdmissionPluginInitializer(s *options.ServerRunOptions, client internalclientset.Interface, sharedInformers informers.SharedInformerFactory, serviceResolver aggregatorapiserver.ServiceResolver, webhookAuthWrapper webhook.AuthenticationInfoResolverWrapper) (admission.PluginInitializer, error) {\n\tvar cloudConfig []byte\n"
  },
  {
    "id" : "c1624439-d520-4d23-83cf-006aa16b0abd",
    "prId" : 51955,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51955#pullrequestreview-61098462",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38620de3-e6e1-47da-b726-f71dca213e66",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Do we want a comment to remove this during v1.9 devel?",
        "createdAt" : "2017-09-05T18:33:52Z",
        "updatedAt" : "2017-11-14T20:15:25Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "ac6a399e-b82c-4f61-8707-4606133943f1",
        "parentId" : "38620de3-e6e1-47da-b726-f71dca213e66",
        "authorId" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "body" : "Along with the extensions type completely?",
        "createdAt" : "2017-09-06T20:09:19Z",
        "updatedAt" : "2017-11-14T20:15:25Z",
        "lastEditedBy" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "tags" : [
        ]
      },
      {
        "id" : "4d0dd6a7-ccef-4803-b31a-93cc38d1f3f2",
        "parentId" : "38620de3-e6e1-47da-b726-f71dca213e66",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "we shouldn't remove this until the extensions type is removed and the requirement to migrate is release-noted and available. should networkpolicies be added to `update-storage-objects.sh`?",
        "createdAt" : "2017-09-07T02:11:32Z",
        "updatedAt" : "2017-11-14T20:15:25Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2a3af9b586745833452e8c8290b662a702d4065",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +563,567 @@\t}\n\n\tstorageFactory.AddCohabitatingResources(networking.Resource(\"networkpolicies\"), extensions.Resource(\"networkpolicies\"))\n\n\t// keep Deployments, Daemonsets and ReplicaSets in extensions for backwards compatibility, we'll have to migrate at some point, eventually"
  },
  {
    "id" : "4bdfdfb5-8a5b-4be9-a419-6d04f9967c15",
    "prId" : 51955,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51955#pullrequestreview-73227055",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3883d55c-ba14-46c5-bab0-ca5db6003b91",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I am nearly surprised that this change does not change the etcd prefix as well. But reading through https://github.com/kubernetes/kubernetes/blob/fc3b8bd58b0b20f549148fccbcbb0498f6f16f27/staging/src/k8s.io/apiserver/pkg/server/storage/storage_factory.go#L336 this makes sense.",
        "createdAt" : "2017-09-06T08:37:45Z",
        "updatedAt" : "2017-11-14T20:15:25Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "92e5605e-82ce-4987-8e11-1a968008b64d",
        "parentId" : "3883d55c-ba14-46c5-bab0-ca5db6003b91",
        "authorId" : "87ab1d19-ad39-40d0-a045-817039414280",
        "body" : "@danwinship extensions and network ordering should be swapped here to look as follows\r\n\r\n`storageFactory.AddCohabitatingResources(extensions.Resource(\"networkpolicies\"), networking.Resource(\"networkpolicies\"))`\r\n\r\nWe should also add a comment as mentioned by @thockin . DEPRECATED in 1.9, removed in 1.10 or something similar.\r\n\r\n\r\n",
        "createdAt" : "2017-10-31T13:40:47Z",
        "updatedAt" : "2017-11-14T20:15:25Z",
        "lastEditedBy" : "87ab1d19-ad39-40d0-a045-817039414280",
        "tags" : [
        ]
      },
      {
        "id" : "9606199b-d6b3-404f-89e5-6fbbcc8d8dcc",
        "parentId" : "3883d55c-ba14-46c5-bab0-ca5db6003b91",
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "`extensions`-first-then-`networking` is the way the code already is in 1.8. So this would make the PR a no-op (except for the changes to the tests).",
        "createdAt" : "2017-10-31T14:57:16Z",
        "updatedAt" : "2017-11-14T20:15:25Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "f4fefbf2-5610-4dac-a1b2-d6d462da6ebd",
        "parentId" : "3883d55c-ba14-46c5-bab0-ca5db6003b91",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "@cmluciano this PR is switching to write to etcd in networking.k8s.io version, which is what we want",
        "createdAt" : "2017-10-31T15:18:40Z",
        "updatedAt" : "2017-11-14T20:15:25Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "1c40fd90-989d-45a8-957c-1bed0f38b06f",
        "parentId" : "3883d55c-ba14-46c5-bab0-ca5db6003b91",
        "authorId" : "87ab1d19-ad39-40d0-a045-817039414280",
        "body" : "Ah, misread the comment",
        "createdAt" : "2017-10-31T16:06:37Z",
        "updatedAt" : "2017-11-14T20:15:25Z",
        "lastEditedBy" : "87ab1d19-ad39-40d0-a045-817039414280",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2a3af9b586745833452e8c8290b662a702d4065",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +563,567 @@\t}\n\n\tstorageFactory.AddCohabitatingResources(networking.Resource(\"networkpolicies\"), extensions.Resource(\"networkpolicies\"))\n\n\t// keep Deployments, Daemonsets and ReplicaSets in extensions for backwards compatibility, we'll have to migrate at some point, eventually"
  },
  {
    "id" : "f2c07225-4e2c-4470-937c-7cbaa11d1dee",
    "prId" : 50476,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50476#pullrequestreview-62592556",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4549770e-78d6-4672-978e-230e65db3e87",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I was kinda hoping to combine the service resolver with this proxy transport. But maybe it's not important. hm.",
        "createdAt" : "2017-09-13T21:47:50Z",
        "updatedAt" : "2017-09-14T22:36:51Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b14b1077-ea4c-40e2-8c65-233d5a9abc34",
        "parentId" : "4549770e-78d6-4672-978e-230e65db3e87",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Do you want them to be combined because both of them are needed iff an admission plugin wants to contact a service provided by the user? I can put them into a single struct if you think it's necessary.",
        "createdAt" : "2017-09-13T22:11:13Z",
        "updatedAt" : "2017-09-14T22:36:51Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "856a1db57a05e19ea6261e38211d2ab1bf864dd1",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +511,515 @@\n\tpluginInitializer = pluginInitializer.SetServiceResolver(serviceResolver)\n\tpluginInitializer = pluginInitializer.SetProxyTransport(proxyTransport)\n\n\treturn pluginInitializer, nil"
  },
  {
    "id" : "906b9742-6131-4436-a3b9-649514be0807",
    "prId" : 47443,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47443#pullrequestreview-45437056",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97b22dde-4eb7-4d0a-bbb4-75a4d6d3b380",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "try adding a congruent line to `federation/cmd/federation-apiserver/app/server.go`.  The federation server can reasonably consider itself the source of truth for namespaces (it mirrors what is happening today) and if they wish to do something different in the future, they'll be able to modify it.",
        "createdAt" : "2017-06-21T13:47:18Z",
        "updatedAt" : "2017-06-22T19:49:42Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "074544b3b024156e4ce91de5778281dbe1b47a72",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +554,558 @@\t\treturn fmt.Errorf(\"error determining service IP ranges: %v\", err)\n\t}\n\ts.SecureServing.ForceLoopbackConfigUsage()\n\n\tif err := s.SecureServing.MaybeDefaultWithSelfSignedCerts(s.GenericServerRunOptions.AdvertiseAddress.String(), []string{\"kubernetes.default.svc\", \"kubernetes.default\", \"kubernetes\"}, []net.IP{apiServerServiceIP}); err != nil {"
  },
  {
    "id" : "9be05193-9953-4e3f-80f4-21bd9cac1331",
    "prId" : 46865,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46865#pullrequestreview-48558654",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28b1a591-ff97-44a7-afdd-b31515b3fd0e",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "not for this pull, but any reason we shouldn't just make this a health check?",
        "createdAt" : "2017-07-05T13:10:52Z",
        "updatedAt" : "2017-07-12T06:47:35Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "c96407eb-bb48-4df0-901b-7e762a7d7afe",
        "parentId" : "28b1a591-ff97-44a7-afdd-b31515b3fd0e",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Having a working etcd is prerequisite for the post start hooks. If we turn this into a health check, they might have to be more fault tolerant. Not sure all of them are right now.",
        "createdAt" : "2017-07-07T09:27:00Z",
        "updatedAt" : "2017-07-12T06:47:35Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "5835cfbcce8e6cea76636bc25542b66606ce5527",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +266,270 @@\n\tif _, port, err := net.SplitHostPort(s.Etcd.StorageConfig.ServerList[0]); err == nil && port != \"0\" && len(port) != 0 {\n\t\tif err := utilwait.PollImmediate(etcdRetryInterval, etcdRetryLimit*etcdRetryInterval, preflight.EtcdConnection{ServerList: s.Etcd.StorageConfig.ServerList}.CheckEtcdServers); err != nil {\n\t\t\treturn nil, nil, nil, nil, nil, fmt.Errorf(\"error waiting for etcd connection: %v\", err)\n\t\t}"
  },
  {
    "id" : "45cbc1e1-3f27-4895-b1ec-b117d5a7887d",
    "prId" : 46680,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46680#pullrequestreview-41377498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1c8fbda-2184-4f61-8e87-a593370624f0",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think the next step for this code is to figure out how to package up this transport and the service resolver into a single thing that can be passed around. That can happen later though.",
        "createdAt" : "2017-05-31T22:29:09Z",
        "updatedAt" : "2017-06-01T07:05:59Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "37cee58b-b2b4-45e1-b25a-ae961542e1de",
        "parentId" : "c1c8fbda-2184-4f61-8e87-a593370624f0",
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "Agreed.",
        "createdAt" : "2017-05-31T22:44:03Z",
        "updatedAt" : "2017-06-01T07:05:59Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b3f4684edc9653ee2930855b9486f495fd3c0b6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +102,106 @@// Run runs the specified APIServer.  This should never exit.\nfunc Run(runOptions *options.ServerRunOptions, stopCh <-chan struct{}) error {\n\ttunneler, proxyTransport, err := CreateDialer(runOptions)\n\tif err != nil {\n\t\treturn err"
  },
  {
    "id" : "24122436-8bb7-4a83-9f96-170a4ea8ff3d",
    "prId" : 46680,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46680#pullrequestreview-42151420",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0019228-c72f-428b-9fd7-13f07035bdb2",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Did you just remove SSL verification protection from connections you're proxying from the aggregator to endpoints?  I think the proxy to service is still protected because we overwrite the `tls.Config`, but that's a really unsatisfying side-effect protection.",
        "createdAt" : "2017-06-04T13:27:44Z",
        "updatedAt" : "2017-06-04T13:27:44Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "773725ce-0d33-4d1e-aa48-26bece41a322",
        "parentId" : "b0019228-c72f-428b-9fd7-13f07035bdb2",
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "I assume you are referring to the line \"proxyTLSClientConfig := &tls.Config{InsecureSkipVerify: true}\". While the transport which contains this config is passed to the Aggregator, that flag is never actually picked up by the Aggregator. With this change the Aggregator only actually uses the proxyDialerFn field from the Transport (and not the config).  @lavalamp and I were planning to do a further code clean up to pass something with more specific funcationality, such as adding a SSHTunnel to an existing Transport, and isolating that logic appropriately.  That should both make the code cleaner and make the code more resistant to something like accidentally inheriting the  InsecureSkipVerify field. Currently that field is set in the Aggregator, so if you do hit the bug referenced in the comment (\"Proxying to pods and services is IP-based... don't expect to be able to verify the hostname\") on the Aggregator; It would be worked around by setting that flag on the Aggregator.",
        "createdAt" : "2017-06-05T20:55:42Z",
        "updatedAt" : "2017-06-05T20:56:03Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b3f4684edc9653ee2930855b9486f495fd3c0b6",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +223,227 @@\t\tTLSClientConfig: proxyTLSClientConfig,\n\t})\n\treturn nodeTunneler, proxyTransport, nil\n}\n"
  },
  {
    "id" : "a9f3fc47-2123-419c-a404-f5966c2b40cc",
    "prId" : 46289,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46289#pullrequestreview-39836160",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15acd13b-d6f4-40ff-a182-92360d3110da",
        "parentId" : null,
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "alternatively we could register from within init block.\r\n\r\n`init() { registerAllAdmissionPlugins(&kubeapiserveradmission.Plugins) }`",
        "createdAt" : "2017-05-23T14:21:16Z",
        "updatedAt" : "2017-05-23T20:01:19Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      },
      {
        "id" : "011fd871-5ed4-4499-8be6-df0dc6e1ae28",
        "parentId" : "15acd13b-d6f4-40ff-a182-92360d3110da",
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "@deads2k: my plan is to expose similar method on `genericapiserver ` and pass `s.Admission.Plugins` - just a few line below.",
        "createdAt" : "2017-05-23T14:31:51Z",
        "updatedAt" : "2017-05-23T20:01:19Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      },
      {
        "id" : "180e357c-e42c-46dd-a5b2-c57957ed39d4",
        "parentId" : "15acd13b-d6f4-40ff-a182-92360d3110da",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This implementation is exactly what I was thinking of.  Actively register these in the plug registry that we're going to use.",
        "createdAt" : "2017-05-23T18:54:31Z",
        "updatedAt" : "2017-05-23T20:01:19Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5019bf6962475ffff94ef4993bdc651b79f650c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +156,160 @@func CreateKubeAPIServerConfig(s *options.ServerRunOptions) (*master.Config, informers.SharedInformerFactory, *kubeserver.InsecureServingInfo, error) {\n\t// register all admission plugins\n\tregisterAllAdmissionPlugins(s.Admission.Plugins)\n\n\t// set defaults in the options before trying to create the generic config"
  },
  {
    "id" : "242ae1de-3919-4763-8078-49ea39c88378",
    "prId" : 46055,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46055#pullrequestreview-39292741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7eece73-2973-4a26-acb7-ce05f0b99e93",
        "parentId" : null,
        "authorId" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "body" : "What is your rationale for preferring CRD? I'm thinking of a scenario like this:\r\n\r\n* TPR already exists and is being used.\r\n* Upgrade to 1.7.\r\n* Accidentally create CRD that conflicts.\r\n* Effectively all your TPR data just got deleted. Outage ensues.\r\n\r\nI would think then it actually makes more sense to let TPR have precedence over CRD. What do you think?",
        "createdAt" : "2017-05-19T19:38:08Z",
        "updatedAt" : "2017-05-22T12:54:17Z",
        "lastEditedBy" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "tags" : [
        ]
      },
      {
        "id" : "6e8599a5-1e97-4e97-9fa1-cda8541260fe",
        "parentId" : "e7eece73-2973-4a26-acb7-ce05f0b99e93",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> What is your rationale for preferring CRD? I'm thinking of a scenario like this:\r\n> \r\n> TPR already exists and is being used.\r\n> Upgrade to 1.7.\r\n> Accidentally create CRD that conflicts.\r\n> Effectively all your TPR data just got deleted. Outage ensues.\r\n> I would think then it actually makes more sense to let TPR have precedence over CRD. What do you think?\r\n\r\nI wanted to prefer the more current API and it makes finalization logic simpler.  Otherwise we'll be considering non-REST API approaches to finalization to avoid deleting all your TPR instances.\r\n\r\nWe do have a spot that sits above both APIs and could have knowledge of them to avoid collisions.  An admission plugin could be written to prevent conflicts between these.",
        "createdAt" : "2017-05-19T20:29:53Z",
        "updatedAt" : "2017-05-22T12:54:17Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "446e959bf760b5eb723a5ede1a62329ac7271c6f",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +131,135 @@\t// TPRs are enabled and not yet beta, since this these are the successor, they fall under the same enablement rule\n\t// Subsequent API servers in between here and kube-apiserver will need to be gated.\n\t// These come first so that if someone registers both a TPR and a CRD, the CRD is preferred.\n\tapiExtensionsConfig, err := createAPIExtensionsConfig(*kubeAPIServerConfig.GenericConfig, runOptions)\n\tif err != nil {"
  },
  {
    "id" : "2535f112-f524-4b6f-b5ca-8db886eedadd",
    "prId" : 46047,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46047#pullrequestreview-43275658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f022c08-d8fe-455e-b262-2a78cd544d25",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This seems fine, though I'd expect it across all binaries.  Why just these two?",
        "createdAt" : "2017-06-06T18:25:40Z",
        "updatedAt" : "2017-06-15T18:38:29Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "ed6cdf2e-a166-4edb-9bda-8ec2cbd135b6",
        "parentId" : "4f022c08-d8fe-455e-b262-2a78cd544d25",
        "authorId" : "d324e241-a7f0-4ace-bda2-4174b07bdb18",
        "body" : "They're the two involved in the bug I'm working on.",
        "createdAt" : "2017-06-09T22:37:37Z",
        "updatedAt" : "2017-06-15T18:38:29Z",
        "lastEditedBy" : "d324e241-a7f0-4ace-bda2-4174b07bdb18",
        "tags" : [
        ]
      }
    ],
    "commit" : "7bf06583ec81dc226c599d031deaafad9549d56e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +106,110 @@func Run(runOptions *options.ServerRunOptions, stopCh <-chan struct{}) error {\n\t// To help debugging, immediately log version\n\tglog.Infof(\"Version: %+v\", version.Get())\n\n\tnodeTunneler, proxyTransport, err := CreateNodeDialer(runOptions)"
  },
  {
    "id" : "c0109b06-50c5-4f6c-9b33-162f8eb0393c",
    "prId" : 43383,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43383#pullrequestreview-29246185",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6f44ca1-e163-4108-b04d-d5658cdd7be7",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : ":+1:",
        "createdAt" : "2017-03-27T17:20:27Z",
        "updatedAt" : "2017-03-27T17:20:27Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "3414231672e59b750fe135bdccc076eb3a72498d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +120,124 @@\taggregatorServer, err := createAggregatorServer(aggregatorConfig, kubeAPIServer.GenericAPIServer, sharedInformers, stopCh)\n\tif err != nil {\n\t\t// we don't need special handling for innerStopCh because the aggregator server doesn't create any go routines\n\t\treturn err\n\t}"
  },
  {
    "id" : "b9795d60-d2ae-40ea-b9c3-99d345205f2b",
    "prId" : 43149,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43149#pullrequestreview-28478248",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "101a0705-a25c-496e-a6d2-fecc33e43fda",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "this deserves a constant",
        "createdAt" : "2017-03-22T07:19:28Z",
        "updatedAt" : "2017-03-22T19:54:18Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "c89152a6-0f75-4c9f-8ed2-31e00f8c7b48",
        "parentId" : "101a0705-a25c-496e-a6d2-fecc33e43fda",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> this deserves a constant\r\n\r\nJust a shuffle, not sure where else uses this to make a constant",
        "createdAt" : "2017-03-22T18:52:13Z",
        "updatedAt" : "2017-03-22T19:54:18Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "4acd75110137b998e702e02499227a48114f1921",
    "line" : 388,
    "diffHunk" : "@@ -1,1 +386,390 @@\t\tserverstorage.NewDefaultResourceEncodingConfig(api.Registry), storageGroupsToEncodingVersion,\n\t\t// FIXME: this GroupVersionResource override should be configurable\n\t\t[]schema.GroupVersionResource{batch.Resource(\"cronjobs\").WithVersion(\"v2alpha1\")},\n\t\tmaster.DefaultAPIResourceConfigSource(), s.APIEnablement.RuntimeConfig)\n\tif err != nil {"
  },
  {
    "id" : "4f1ba4a5-7223-4783-86b5-d9b9be804858",
    "prId" : 42059,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42059#pullrequestreview-23932586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a125699f-b19e-4cea-af87-ac1864e76126",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "where is this needed?\r\n\r\n",
        "createdAt" : "2017-02-27T08:34:06Z",
        "updatedAt" : "2017-02-28T13:42:10Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "f62f3f0b-07e7-40a5-b198-09dfddf18604",
        "parentId" : "a125699f-b19e-4cea-af87-ac1864e76126",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Arg, how much do I hate that Github is folding some files at will. Of course, it is used, but GH doesn't want me to see it.",
        "createdAt" : "2017-02-27T08:37:20Z",
        "updatedAt" : "2017-02-28T13:42:10Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cfe26dece13c77bd17fd10e47d2c00bf5da9b6d",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +95,99 @@\n// RunServer uses the provided config and shared informers to run the apiserver.  It does not return.\nfunc RunServer(config *master.Config, sharedInformers informers.SharedInformerFactory, stopCh <-chan struct{}) error {\n\tm, err := config.Complete().New()\n\tif err != nil {"
  },
  {
    "id" : "1e16a1d8-a006-434f-a195-9c905cdbcce1",
    "prId" : 41093,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41093#pullrequestreview-21021683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e6ee92e-b17d-48fa-a6d3-9c9dce7efc1a",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "A comment wouldn't harm, that this is overwriting the simple rest options factory due to special kube requirement. People should not copy this pattern, a comment mgiht help.",
        "createdAt" : "2017-02-09T14:36:29Z",
        "updatedAt" : "2017-02-09T14:36:29Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "a463540d47f16f14899b2ec60779f420df9368f4",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +316,320 @@\t\tsets.NewString(\"attach\", \"exec\", \"proxy\", \"log\", \"portforward\"),\n\t)\n\tgenericConfig.RESTOptionsGetter = &kubeapiserver.RESTOptionsFactory{\n\t\tStorageFactory:          storageFactory,\n\t\tEnableWatchCache:        s.Etcd.EnableWatchCache,"
  },
  {
    "id" : "4094f843-8ffd-4ebd-bf99-4de30537d8e5",
    "prId" : 40537,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40537#pullrequestreview-24331215",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a07008b-86a8-462a-938a-7a1b1a90f45e",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "You might be able to use `cloudprovider.InitCloudProvider(...)` (which reads the config file) instead of reading the config file on your own here.",
        "createdAt" : "2017-02-28T00:53:54Z",
        "updatedAt" : "2017-02-28T17:24:24Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "64d08699-dad1-43e6-9e2a-214ebda22645",
        "parentId" : "9a07008b-86a8-462a-938a-7a1b1a90f45e",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "How would that work for federation api server? which takes same set of arguments and initialzies admission controller in similar way.\r\n\r\nCurrently federation api server seems to be simply throwing away cloud config. options etc but it does accept them same as kube-apiserver. ",
        "createdAt" : "2017-02-28T01:10:47Z",
        "updatedAt" : "2017-02-28T17:24:24Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "84dd1022-09e2-4004-8d91-3332848e171d",
        "parentId" : "9a07008b-86a8-462a-938a-7a1b1a90f45e",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Instead of opening the file and passing the contents around, pass the config file path around. Then inside your `SetCloudConfig(...)` method use the config file path and reuse `InitCloudProvider(...)`, that way you have only one place responsible for opening the config file.",
        "createdAt" : "2017-02-28T01:21:21Z",
        "updatedAt" : "2017-02-28T17:24:24Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "611c0380-df9f-4daa-894a-d2166b5875e1",
        "parentId" : "9a07008b-86a8-462a-938a-7a1b1a90f45e",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I also like this option of passing the file path.",
        "createdAt" : "2017-02-28T01:33:19Z",
        "updatedAt" : "2017-02-28T17:24:24Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "fe7c0bf1-eda8-4fab-902b-727efdddbe2e",
        "parentId" : "9a07008b-86a8-462a-938a-7a1b1a90f45e",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Okay passing the file path is not enough to centralize the initialization of cloudprovider in one place (namely `SetCloudConfig`), we would need name of provider too, so we would have to pass 2 params? :( The problem with passing 2 additional params to admission plugin initialize is - now it will have 5 parameters. Nothing too bad but not clean either.\r\n\r\nThe initialization of cloudprovider in admission plugin is bit adhoc - https://github.com/kubernetes/kubernetes/blob/master/plugin/pkg/admission/persistentvolume/label/admission.go#L134 and I don't like it but I am thinking a proper fix is to simply pass initialized `cloudprovider.Interface` object directly into the plugin rather than pass ConfigPath etc. \r\n\r\nSo I tried doing that and it has some spill over effect - like we don't always have cloudprovider initialized even in api server and I need to refactor apiserver some more to make that happen. \r\n\r\nAt this late in 1.6 cycle, I am bit hesitant to make bigger changes and I can confirm with some certainity that fix indeed works and I was able to create PVs in multizones after this change.\r\n\r\n@saad-ali @msau42 I think the code here was already bit non-ideal. I would like to talk to @jsafrane and understand why we didn't pass cloudprovider object directly and used ad-hoc cloudprovider initialization.\r\n\r\nIn the meanwhile, I think we should merge this - so as underlying problem is fixed. I can work on cleaning it up. ",
        "createdAt" : "2017-02-28T02:38:29Z",
        "updatedAt" : "2017-02-28T17:24:24Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "71305d27-5614-4422-a004-e37b682e54a3",
        "parentId" : "9a07008b-86a8-462a-938a-7a1b1a90f45e",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Ack, just open up an issue as a reminder to do this clean up.\r\n\r\nSInce this is a bug fix, post-code freeze merge is fine (marking it for 1.6).\r\n\r\nWill leave review and signoff to @msau42 ",
        "createdAt" : "2017-02-28T04:23:00Z",
        "updatedAt" : "2017-02-28T17:24:24Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "ae98a628-7466-4b8e-a517-de66e8641dce",
        "parentId" : "9a07008b-86a8-462a-938a-7a1b1a90f45e",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "The admission plugin is ugly hack, I tried to make it use volume plugins in https://github.com/kubernetes/kubernetes/pull/21386 and I failed at that time. With  https://github.com/kubernetes/kubernetes/pull/39425 it could be easier to use volume plugins in API server, however it's 1.7 item (and it's not on my priority list...)\r\n\r\nOut of curiosity, why is federation API server cloud-aware? Individual federated API severs can be in different clouds, can't they?",
        "createdAt" : "2017-02-28T10:59:41Z",
        "updatedAt" : "2017-02-28T17:24:24Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "68770ab8-7ffd-4c0c-8107-523a76a87ed4",
        "parentId" : "9a07008b-86a8-462a-938a-7a1b1a90f45e",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "yeah federation just takes same arguments as api-server. I think we should selectively edit out options we don't need in federation server. cc @madhusudancs \r\n\r\nAlso, I will open a bug to clean the implementation. thanks",
        "createdAt" : "2017-02-28T17:25:46Z",
        "updatedAt" : "2017-02-28T17:25:47Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "00ded476-2ff5-4def-ae76-feffced3101d",
        "parentId" : "9a07008b-86a8-462a-938a-7a1b1a90f45e",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "@gnufied cloud provider config doesn't make any sense in the federation API server because a federation API server can be in one of the many clusters, potentially on different providers, it can be moved around or have multiple instances in HA configuration where different instances are on different providers. It's Ok to just completely remove that flag from the federation API server for now.",
        "createdAt" : "2017-02-28T20:10:03Z",
        "updatedAt" : "2017-02-28T20:10:03Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0581d688dc7da52eea2be8ba62b3ca26f4f270d",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +303,307 @@\n\tif s.CloudProvider.CloudConfigFile != \"\" {\n\t\tcloudConfig, err = ioutil.ReadFile(s.CloudProvider.CloudConfigFile)\n\t\tif err != nil {\n\t\t\tglog.Fatalf(\"Error reading from cloud configuration file %s: %#v\", s.CloudProvider.CloudConfigFile, err)"
  },
  {
    "id" : "6bbe08e3-85f6-4c7c-baea-345f74e29669",
    "prId" : 40041,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40041#pullrequestreview-17211504",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "499058dc-fe49-488f-ac5f-31ac4ce77088",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Can and should we move AdmissionControlConfigFile out of genericapiserver?",
        "createdAt" : "2017-01-18T08:34:37Z",
        "updatedAt" : "2017-01-18T13:15:27Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "87ca0704-c41f-457b-a35b-67d0e14669f8",
        "parentId" : "499058dc-fe49-488f-ac5f-31ac4ce77088",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Can and should we move AdmissionControlConfigFile out of genericapiserver?\r\n\r\nWe must for now.  Instead creating a targeted group he re-used an existing one.",
        "createdAt" : "2017-01-18T12:38:33Z",
        "updatedAt" : "2017-01-18T13:15:27Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "01b3b2b461ed9d8c213ee365521025235b65e2c9",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +276,280 @@\tadmissionControlPluginNames := strings.Split(s.GenericServerRunOptions.AdmissionControl, \",\")\n\tpluginInitializer := kubeadmission.NewPluginInitializer(client, sharedInformers, apiAuthorizer)\n\tadmissionConfigProvider, err := kubeadmission.ReadAdmissionConfiguration(admissionControlPluginNames, s.GenericServerRunOptions.AdmissionControlConfigFile)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to read plugin config: %v\", err)"
  },
  {
    "id" : "d5943d14-bf21-4f6d-bfce-378347dd5fec",
    "prId" : 38119,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38119#pullrequestreview-11470082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a9c5a00-5287-4afd-ab0d-886a8b24cc96",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Do we care about thsi being configurable at all any more? Could we just bake it into genericapiserver and anyone who wants something different can take control of the handler chain?  ",
        "createdAt" : "2016-12-05T21:11:43Z",
        "updatedAt" : "2016-12-05T21:46:36Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "e36bdfd4-567c-4818-b7fe-ee021798a4c6",
        "parentId" : "6a9c5a00-5287-4afd-ab0d-886a8b24cc96",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "proxy/attach/exec/portforward as subresources are only likely to make sense to the apiserver... baking those into genericapiserver didn't seem useful",
        "createdAt" : "2016-12-05T21:14:05Z",
        "updatedAt" : "2016-12-05T21:46:36Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "43590546167f4f1e9f124e635192a3b7966b4645",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +280,284 @@\tgenericConfig.EnableMetrics = true\n\tgenericConfig.OpenAPIConfig.SecurityDefinitions = securityDefinitions\n\tgenericConfig.LongRunningFunc = filters.BasicLongRunningRequestCheck(\n\t\tsets.NewString(\"watch\", \"proxy\"),\n\t\tsets.NewString(\"attach\", \"exec\", \"proxy\", \"log\", \"portforward\"),"
  },
  {
    "id" : "0a0aa10e-8b54-4436-a004-27a8ff4533b2",
    "prId" : 36604,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36604#pullrequestreview-9867332",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b94b26d4-9814-4c72-a1c0-c2836919946a",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "possible nil SecureServing? (comment applies in a few places)",
        "createdAt" : "2016-11-23T05:19:50Z",
        "updatedAt" : "2016-11-29T16:02:40Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "23b438c8-1a7a-4108-b9ef-869fe51bc8a3",
        "parentId" : "b94b26d4-9814-4c72-a1c0-c2836919946a",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> possible nil SecureServing? (comment applies in a few places)\r\n\r\nNot in a reasonable way down this path.",
        "createdAt" : "2016-11-23T14:07:19Z",
        "updatedAt" : "2016-11-29T16:02:40Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab9a842f3c7f6d7b20a07a87332e555aa73c2389",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +208,212 @@\n\t// Default to the private server key for service account token signing\n\tif len(s.Authentication.ServiceAccounts.KeyFiles) == 0 && s.SecureServing.ServerCert.CertKey.KeyFile != \"\" {\n\t\tif authenticator.IsValidServiceAccountKeyFile(s.SecureServing.ServerCert.CertKey.KeyFile) {\n\t\t\ts.Authentication.ServiceAccounts.KeyFiles = []string{s.SecureServing.ServerCert.CertKey.KeyFile}"
  },
  {
    "id" : "8007b4bc-5873-4735-8b3f-b603352dec67",
    "prId" : 34047,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34047#pullrequestreview-4095500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2a2583f-2acc-40e9-87d6-f5e72b4672d3",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "I know this is just a code move, but shouldn't this be fatal instead of error?\n",
        "createdAt" : "2016-10-13T14:49:52Z",
        "updatedAt" : "2016-10-13T14:54:36Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "6fee1b37-6922-49e1-bf65-193f1c7548f3",
        "parentId" : "e2a2583f-2acc-40e9-87d6-f5e72b4672d3",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I know this is just a code move, but shouldn't this be fatal instead of error?\n\nI'm not ready to do it yet because the wiring in `test-integration` doesn't allow this code to succeed (didn't before, doesn't now).  Once we fix `test-integration` to use a \"normal\" startup flow, yes.\n",
        "createdAt" : "2016-10-13T15:08:44Z",
        "updatedAt" : "2016-10-13T15:08:44Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "16cc6ced-9e14-42a4-af14-32908f50e871",
        "parentId" : "e2a2583f-2acc-40e9-87d6-f5e72b4672d3",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Ok, thanks. Do we have an issue about this so we don't forget to fix it?\n",
        "createdAt" : "2016-10-13T15:11:24Z",
        "updatedAt" : "2016-10-13T15:11:24Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1638f11a3994db7e04a5e670e8bd929820c9d45",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +243,247 @@\tclient, err := s.NewSelfClient(privilegedLoopbackToken)\n\tif err != nil {\n\t\tglog.Errorf(\"Failed to create clientset: %v\", err)\n\t}\n\tsharedInformers := informers.NewSharedInformerFactory(client, 10*time.Minute)"
  },
  {
    "id" : "f0a8b14a-087c-4970-af45-01422c35cd60",
    "prId" : 34000,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34000#pullrequestreview-2659012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c7a99fc-7db6-4707-bb18-728e9fa89770",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "FYI - This is pretty-much copy from:\nhttps://github.com/kubernetes/kubernetes/blob/master/pkg/registry/cachesize/cachesize.go#L75\n",
        "createdAt" : "2016-10-04T07:25:43Z",
        "updatedAt" : "2016-10-05T08:00:14Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2bfcb1a8500248be3993e080453c480bee99cc25",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +151,155 @@\t\tglog.V(2).Infof(\"Initalizing deserialization cache size based on %dMB limit\", s.TargetRAMMB)\n\n\t\t// This is the heuristics that from memory capacity is trying to infer\n\t\t// the maximum number of nodes in the cluster and set cache sizes based\n\t\t// on that value."
  },
  {
    "id" : "9ee7879f-2452-44df-9f18-4cd2d9fbc47c",
    "prId" : 34000,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34000#pullrequestreview-2988685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "212234d3-5805-4510-a481-95ec2084c6a2",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "our max object size is 900kb, IIRC. I would suggest an alternate heuristic, which is to decide e.g. 1/3 of this memory will be used for the deserialization cache, and then divide by the max object size to see how big the cache should be.\n\n(It would of course be better to just actually measure the collective sizes of the objects in the cache but that's much much harder. A TODO mentioning this might be good.)\n",
        "createdAt" : "2016-10-04T18:15:08Z",
        "updatedAt" : "2016-10-05T08:00:14Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "ff492c43-c88d-457c-a46d-5214a9d13552",
        "parentId" : "212234d3-5805-4510-a481-95ec2084c6a2",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I also considered it (when thinking about it for the sizes of caches in \"Cacher\"), but decided that it's not the best option for now. First of all, because the target memory is not super accurate now (it actually is more-or-less target memory for all components on master machine). Second, because it will result in waaaaay bigger memory usage for larger clusters, which is also not very good in my opinion.\n\nSo I would prefer to leave it as is (especially since we want to cherrypick) and probably solve it better later (for 1.5 maybe?). [Though I extended the TODO so that it contains what you basically wrote].\n",
        "createdAt" : "2016-10-05T08:04:12Z",
        "updatedAt" : "2016-10-05T08:04:16Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "3c4426f3-71a5-492b-869e-b6fd3b814ddd",
        "parentId" : "212234d3-5805-4510-a481-95ec2084c6a2",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "OK, I think we should probably reconsider in the future (it would be good to explicitly set how much memory is allowed for this, so admins get predictable usage) but I guess this is still a big improvement, so I won't block it over this.\n",
        "createdAt" : "2016-10-05T19:44:53Z",
        "updatedAt" : "2016-10-05T19:44:53Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "2bfcb1a8500248be3993e080453c480bee99cc25",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +156,160 @@\t\t// From our documentation, we officially recomment 120GB machines for\n\t\t// 2000 nodes, and we scale from that point. Thus we assume ~60MB of\n\t\t// capacity per node.\n\t\t// TODO: We may consider deciding that some percentage of memory will\n\t\t// be used for the deserialization cache and divide it by the max object"
  },
  {
    "id" : "1a91e241-9c75-480b-854d-6bbfcf826104",
    "prId" : 30233,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "927025e6-8a13-4a84-9531-22b0517c2dda",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Do you also have to set version here?\n",
        "createdAt" : "2016-08-18T17:19:21Z",
        "updatedAt" : "2016-08-18T22:33:54Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "0329bd67-3b30-4a34-9e0e-4367544a35a0",
        "parentId" : "927025e6-8a13-4a84-9531-22b0517c2dda",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "newConfig set both Title and Version to \"Generic API Server\" and \"unversioned\". here we just overwrite the title.\n",
        "createdAt" : "2016-08-18T18:46:07Z",
        "updatedAt" : "2016-08-18T22:33:54Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5f1d63d6feffb3343c30a304d61af66ed30dc73",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +273,277 @@\tgenericConfig.ProxyTLSClientConfig = proxyTLSClientConfig\n\tgenericConfig.Serializer = api.Codecs\n\tgenericConfig.OpenAPIInfo.Title = \"Kubernetes\"\n\n\tconfig := &master.Config{"
  },
  {
    "id" : "b0aaaa02-29a5-48f3-9dd6-5dddd8a738eb",
    "prId" : 24787,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93d50883-1d63-40f5-bc9e-2b6a8ade0da1",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Just a note here.  While running openshift with multiple API versions, we found that we wanted to support skewed storage encodings.  This let us store data in the new format, while exposing the REST API through the old version for old clients.  By setting these to same value, you won't be able to have disparate rules for allowed storage encodings versus REST API exposure.\n",
        "createdAt" : "2016-05-05T12:23:58Z",
        "updatedAt" : "2016-05-10T07:57:31Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "0c3444a7-af86-4f01-a2fe-fac0487df2cf",
        "parentId" : "93d50883-1d63-40f5-bc9e-2b6a8ade0da1",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Fair point. When genericConfig.APIResourceConfigSource and storageFactory.APIResourceConfigSource diverge for us, we will have to set it to different value.\n",
        "createdAt" : "2016-05-05T19:30:06Z",
        "updatedAt" : "2016-05-10T07:57:31Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ffa3b4586923fbeccfac18777cdb09398b20490",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +216,220 @@\tgenericConfig.Authorizer = authorizer\n\tgenericConfig.AdmissionControl = admissionController\n\tgenericConfig.APIResourceConfigSource = storageFactory.APIResourceConfigSource\n\tgenericConfig.MasterServiceNamespace = s.MasterServiceNamespace\n\tgenericConfig.ProxyDialer = proxyDialerFn"
  },
  {
    "id" : "3b217bed-8ecd-4de6-b052-43b8601d567a",
    "prId" : 24454,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b97ea222-9a4d-45c4-951e-9c1178d5a3b0",
        "parentId" : null,
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "We can intialize Serializer = api.Codecs in genericapiserver.NewConfig()\n",
        "createdAt" : "2016-04-19T07:03:28Z",
        "updatedAt" : "2016-04-19T07:14:03Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      },
      {
        "id" : "12c67085-4a07-4aa5-9cf3-8928e1c95fb2",
        "parentId" : "b97ea222-9a4d-45c4-951e-9c1178d5a3b0",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "That's not appropriate - not all generic api servers will have api.Codecs.  Generic API server should not require a particular runtime.Scheme\n",
        "createdAt" : "2016-04-19T19:40:21Z",
        "updatedAt" : "2016-04-19T19:40:21Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "50a9aceabb24a1c70b2fb535fd8c35cd072820de",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +429,433 @@\tgenericConfig.ProxyDialer = proxyDialerFn\n\tgenericConfig.ProxyTLSClientConfig = proxyTLSClientConfig\n\tgenericConfig.Serializer = api.Codecs\n\n\tconfig := &master.Config{"
  },
  {
    "id" : "05c69d67-aa48-4e0c-b9a6-864896842089",
    "prId" : 23208,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be3124d3-4885-441e-a929-9786e70e5df5",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "todo to honor enablement flags in all groups and make this a loop over `versionToEnablementString`?\n",
        "createdAt" : "2016-03-18T20:35:01Z",
        "updatedAt" : "2016-04-21T12:18:58Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6670b73b18e631b57760d1a1800485d05faf39bb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +381,385 @@\t\tdefault:\n\t\t\t// TODO enable individual resource capability for all GroupVersionResources\n\t\t\treturn nil, fmt.Errorf(\"%v resources cannot be enabled/disabled individually\", key)\n\t\t}\n\t}"
  },
  {
    "id" : "2f045eda-4e82-45e7-a0a2-42218d2aa272",
    "prId" : 23208,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f8645fc-63ef-46f9-ae8d-03e94caeb1b4",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Pointing out a change from before: before we were ensuring that s.StorageGroupsToGroupVersion() contained all groups. Now resourceEncoding.StorageEncodingFor() silently returns the default version for that group, even if it was not specified in s.StorageGroupsToGroupVersion().\n\nIf we intend to use StorageGroupsToGroupVersion() only in cases of overrides, then we should probably rename it and update the comment?\nElse resourceEncoding.StorageEncodingFor() should return an error if group was not found.\n",
        "createdAt" : "2016-04-11T22:09:53Z",
        "updatedAt" : "2016-04-21T12:18:58Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "c454053e-f42f-482c-a469-75ad9dd1a0f7",
        "parentId" : "3f8645fc-63ef-46f9-ae8d-03e94caeb1b4",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> If we intend to use StorageGroupsToGroupVersion() only in cases of overrides, then we should probably rename it and update the comment?\n\nI'll rename it.\n",
        "createdAt" : "2016-04-12T11:58:18Z",
        "updatedAt" : "2016-04-21T12:18:58Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "6670b73b18e631b57760d1a1800485d05faf39bb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +165,169 @@\t}\n\n\tresourceEncoding := genericapiserver.NewDefaultResourceEncodingConfig()\n\tgroupToEncoding, err := s.StorageGroupsToEncodingVersion()\n\tif err != nil {"
  },
  {
    "id" : "ff2142d2-5a33-4159-b424-313fdfc5d070",
    "prId" : 20452,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c95fb006-7e7f-485f-b9e5-bb3e7bb1e18a",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "We should fail when we actually use the clientset, not here.\n",
        "createdAt" : "2016-02-02T20:58:31Z",
        "updatedAt" : "2016-02-03T04:29:03Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "cddd7b56a4ae301c6cbd8b5089b7400392b7b17a",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +248,252 @@\tclient, err := clientset.NewForConfig(clientConfig)\n\tif err != nil {\n\t\tglog.Errorf(\"Failed to create clientset: %v\", err)\n\t}\n"
  },
  {
    "id" : "f9325c41-c4f3-4dd8-aca8-f5268397af12",
    "prId" : 19314,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "654172a5-ac89-4b6c-b0f1-f674612eebea",
        "parentId" : null,
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "Do we need to mark this connection about being insecure of does the health checker do that elsewhere?\n",
        "createdAt" : "2016-02-01T19:19:58Z",
        "updatedAt" : "2016-02-02T20:00:39Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "73fd5d02-c259-4d32-a963-a3fa120fc02c",
        "parentId" : "654172a5-ac89-4b6c-b0f1-f674612eebea",
        "authorId" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "body" : "Insecure (to not care about the signer of kubelet's cert) is set on the Transport. Is that what you were asking about?\n",
        "createdAt" : "2016-02-01T23:42:46Z",
        "updatedAt" : "2016-02-02T20:00:39Z",
        "lastEditedBy" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "tags" : [
        ]
      }
    ],
    "commit" : "04eb90a5d488de787ebe99fea4d394f1a53c6450",
    "line" : null,
    "diffHunk" : "@@ -1,1 +220,224 @@\t\t// kubelet listen-addresses, we need to plumb through options.\n\t\thealthCheckPath := &url.URL{\n\t\t\tScheme: \"https\",\n\t\t\tHost:   net.JoinHostPort(\"127.0.0.1\", strconv.FormatUint(uint64(s.KubeletConfig.Port), 10)),\n\t\t\tPath:   \"healthz\","
  },
  {
    "id" : "ce014d9c-0646-4549-9d7b-a6c2e1bd3340",
    "prId" : 19314,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c12ca24-7761-4ebe-9892-0626bd484d46",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "127.0.0.1 still seems like a fragile assumption to me, but I'll defer to @roberthbailey if he knows that will work for all tunneling setups\n",
        "createdAt" : "2016-02-02T14:56:30Z",
        "updatedAt" : "2016-02-02T20:00:39Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "3b36fca6-71da-42ec-853d-564d7d8c13cd",
        "parentId" : "0c12ca24-7761-4ebe-9892-0626bd484d46",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this doesn't take into account per-kubelet ports\n",
        "createdAt" : "2016-02-02T14:57:14Z",
        "updatedAt" : "2016-02-02T20:00:39Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e8d06955-8af7-4de0-8086-a9e84b13ea57",
        "parentId" : "0c12ca24-7761-4ebe-9892-0626bd484d46",
        "authorId" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "body" : "Yeah. I don't really have a good answer to per-kubelet ports. I'm gonna say \"unsupported for tunneling\" for now, and we can decide if there's a reason to plumb it through later.\n",
        "createdAt" : "2016-02-02T18:27:08Z",
        "updatedAt" : "2016-02-02T20:00:39Z",
        "lastEditedBy" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "tags" : [
        ]
      },
      {
        "id" : "04f35f61-6100-4f8e-9fa6-e7cd778448c2",
        "parentId" : "0c12ca24-7761-4ebe-9892-0626bd484d46",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "ok, add a TODO so we don't forget\n",
        "createdAt" : "2016-02-02T19:54:09Z",
        "updatedAt" : "2016-02-02T20:00:39Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "04eb90a5d488de787ebe99fea4d394f1a53c6450",
    "line" : null,
    "diffHunk" : "@@ -1,1 +221,225 @@\t\thealthCheckPath := &url.URL{\n\t\t\tScheme: \"https\",\n\t\t\tHost:   net.JoinHostPort(\"127.0.0.1\", strconv.FormatUint(uint64(s.KubeletConfig.Port), 10)),\n\t\t\tPath:   \"healthz\",\n\t\t}"
  },
  {
    "id" : "f9cdffb3-d2ea-4dde-bc66-4d6c731b053b",
    "prId" : 18113,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2921aa1-e09a-47a4-b6d1-7ec7407acc20",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Is this generic?\n",
        "createdAt" : "2015-12-04T01:05:37Z",
        "updatedAt" : "2015-12-16T21:54:34Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d952aaa87e5748a8d3e412065894ad8a0cf4663",
    "line" : null,
    "diffHunk" : "@@ -1,1 +544,548 @@\t\t\tStorageDestinations:       storageDestinations,\n\t\t\tStorageVersions:           storageVersions,\n\t\t\tServiceClusterIPRange:     &n,\n\t\t\tEnableLogsSupport:         s.EnableLogsSupport,\n\t\t\tEnableUISupport:           true,"
  },
  {
    "id" : "9e380366-8ef8-41b2-92f9-70975f161ab8",
    "prId" : 18113,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a2be0a4-d6c7-43ea-b6c3-ad8f7ce1f7c6",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Do we really want to let people customize these two fields? APIPrefix is definitely not generic.\n",
        "createdAt" : "2015-12-04T01:07:40Z",
        "updatedAt" : "2015-12-16T21:54:34Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a9afe021-19d4-41f1-b301-afd372ee5a01",
        "parentId" : "0a2be0a4-d6c7-43ea-b6c3-ad8f7ce1f7c6",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "If its customizable in core master, then it needs to be customizable for all api servers.\nIf its not required, I can remove it everywhere.\n",
        "createdAt" : "2015-12-08T20:58:07Z",
        "updatedAt" : "2015-12-16T21:54:34Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d952aaa87e5748a8d3e412065894ad8a0cf4663",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +552,556 @@\t\t\tEnableIndex:               true,\n\t\t\tAPIPrefix:                 s.APIPrefix,\n\t\t\tAPIGroupPrefix:            s.APIGroupPrefix,\n\t\t\tCorsAllowedOriginList:     s.CorsAllowedOriginList,\n\t\t\tReadWritePort:             s.SecurePort,"
  },
  {
    "id" : "74f1ff02-07c6-4dfb-9ee3-31d062484925",
    "prId" : 18113,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b83e86b-1be2-4e45-8860-6f9d50a8f3c3",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Maybe it's better to list the things I think _are_ generic:\n- StorageDestinations\n- StorageVersions\n- Swagger\n- Profiling (maybe?)\n- WatchCache\n- Cors\n- Read/write port\n- public address\n- auth things\n- admission - maybe?\n- group version overrides\n- Master service namespace -- each set of apiservers will need to make their own service\n- cluster name -- do all apiservers need to know this?\n- MinRequestTimeout -- maybe\n- proxy stuff -- probably\n\nThings not mentioned are not generic IMO\n",
        "createdAt" : "2015-12-04T01:10:11Z",
        "updatedAt" : "2015-12-16T21:54:34Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d4c5c461-dadf-4619-880e-6979f18ebb0d",
        "parentId" : "1b83e86b-1be2-4e45-8860-6f9d50a8f3c3",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "As discussed irl, refactoring cmd/kube-apiserver/app/server.go is another big change.\nThis PR just moves common api machinery code out from master to genericapiserver. Will handle server.go in another PR.\n",
        "createdAt" : "2015-12-08T21:03:39Z",
        "updatedAt" : "2015-12-16T21:54:34Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d952aaa87e5748a8d3e412065894ad8a0cf4663",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +567,571 @@\t\t\tProxyTLSClientConfig:      proxyTLSClientConfig,\n\t\t\tServiceNodePortRange:      s.ServiceNodePortRange,\n\t\t\tKubernetesServiceNodePort: s.KubernetesServiceNodePort,\n\t\t},\n\t\tEnableCoreControllers: true,"
  },
  {
    "id" : "67b6cd90-0168-42b9-9de9-5da8ea1def7b",
    "prId" : 15516,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "832e7c7e-a501-4683-867c-9e3ab80d6b41",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "// TODO: make this a loop over all possible group/versions when there are more of them.\n",
        "createdAt" : "2015-10-14T23:28:35Z",
        "updatedAt" : "2015-10-15T23:54:29Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5f6344c7-34b9-429b-994c-67ced72567ef",
        "parentId" : "832e7c7e-a501-4683-867c-9e3ab80d6b41",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Done\n",
        "createdAt" : "2015-10-14T23:42:06Z",
        "updatedAt" : "2015-10-15T23:54:29Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a558fca24b63b635641486b04c645a7d1a58b6c7",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +694,698 @@\t// This takes preference over api/all, if specified.\n\tdisableExtensions := disableAllAPIs\n\textensionsGroupVersion := \"extensions/v1beta1\"\n\t// TODO: Make this a loop over all group/versions when there are more of them.\n\tdisableExtensions = !s.getRuntimeConfigValue(extensionsGroupVersion, !disableExtensions)"
  },
  {
    "id" : "0e6246c6-40b8-4a67-befd-335cadae2fac",
    "prId" : 15191,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9887701a-1697-4fec-a1f3-597c56385e4c",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Please file an issue about removing this flag from head so we don't forget.\n",
        "createdAt" : "2015-10-13T18:37:44Z",
        "updatedAt" : "2015-10-13T23:29:58Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "be0754750f7dac811bc8375714a043deae6709c0",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +247,251 @@\t//See #14282 for details on how to test/try this option out.  TODO remove this comment once this option is tested in CI.\n\tfs.IntVar(&s.KubernetesServiceNodePort, \"kubernetes-service-node-port\", 0, \"If non-zero, the Kubernetes master service (which apiserver creates/maintains) will be of type NodePort, using this as the value of the port. If zero, the Kubernetes master service will be of type ClusterIP.\")\n\t// TODO: delete this flag as soon as we identify and fix all clients that send malformed updates, like #14126.\n\tfs.BoolVar(&validation.RepairMalformedUpdates, \"repair-malformed-updates\", true, \"If true, server will do its best to fix the update request to pass the validation, e.g., setting empty UID in update request to its existing value. This flag can be turned off after we fix all the clients that send malformed updates.\")\n}"
  },
  {
    "id" : "203b42c6-41c4-41d5-97c6-f473094f2226",
    "prId" : 14823,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32926307-340f-4adb-bac1-f1219b56508d",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "is this always going to be valid if a server definition contains `http://` ?\n",
        "createdAt" : "2015-10-02T17:34:19Z",
        "updatedAt" : "2015-10-05T08:54:49Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "bbe92897-7cdc-4cd5-9b01-cb94438dc280",
        "parentId" : "32926307-340f-4adb-bac1-f1219b56508d",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Nevermind, misread.\n",
        "createdAt" : "2015-10-02T17:36:48Z",
        "updatedAt" : "2015-10-05T08:54:49Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f1cbe37a446e9264d40203f40d4cb7b8d3d477a",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +312,316 @@\n\t\tapiresource := strings.Split(tokens[0], \"/\")\n\t\tif len(apiresource) != 2 {\n\t\t\tglog.Errorf(\"invalid resource definition: %s\", tokens[0])\n\t\t}"
  },
  {
    "id" : "1d479bd7-5803-4f6b-989d-4c8512c7c418",
    "prId" : 13955,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60176e16-30fc-4401-805d-3e29a2232cc7",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This is good-- we should have a map of group to storage version. (can we call it groupToStorageVersion?)\n\nIn the near future, maybe not this PR:\n\nWe should deprecate StorageVersion and ExpStorageVersion, and replace them with StorageVersions, which should be a map from group to version (it can be specified in the form: \"experimental/v1alpha1,core/v1,/v1\")\n\nnewEtcd should then be called in a loop, etc. Do we really need to call newEtcd for every group?\n",
        "createdAt" : "2015-09-16T20:59:49Z",
        "updatedAt" : "2015-09-21T19:20:36Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "2702fa8d-19b0-484c-967e-cc5ae0657254",
        "parentId" : "60176e16-30fc-4401-805d-3e29a2232cc7",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "> Do we really need to call newEtcd for every group?\n\nI think so. newEtcd take InterfacesFor as an argument, which is different for every group.\n",
        "createdAt" : "2015-09-17T16:35:16Z",
        "updatedAt" : "2015-09-21T19:20:36Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "1278771b340acad9906bb6b3de18365cfc368db5",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +346,350 @@\t\treturn err\n\t}\n\tstorageVersions := make(map[string]string)\n\tif s.StorageVersion == \"\" {\n\t\ts.StorageVersion = g.Version"
  },
  {
    "id" : "343ad9d0-e7b7-418b-9953-e740e61d43eb",
    "prId" : 13705,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a773d61-51ee-4a75-ac8a-50be7a8662c4",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "can you add a test for /log and /attach in https://github.com/kubernetes/kubernetes/blob/master/cmd/kube-apiserver/app/server_test.go#L40\n",
        "createdAt" : "2015-09-09T04:57:44Z",
        "updatedAt" : "2015-09-09T04:57:44Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "e25b42aa-bbb5-4685-a672-3d987317bdeb",
        "parentId" : "1a773d61-51ee-4a75-ac8a-50be7a8662c4",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "um, I did?\n",
        "createdAt" : "2015-09-09T05:02:31Z",
        "updatedAt" : "2015-09-09T05:02:31Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2fdcaeb1-79ca-44e9-85cf-72583a3f1a3d",
        "parentId" : "1a773d61-51ee-4a75-ac8a-50be7a8662c4",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "oops I'm losing my mind. regex is LGTM\n",
        "createdAt" : "2015-09-09T05:06:42Z",
        "updatedAt" : "2015-09-09T05:06:42Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2268574c5ebd94e4fc9ad402f81f00464bf571a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +58,62 @@\tReadWriteTimeout = time.Minute * 60\n\t//TODO: This can be tightened up. It still matches objects named watch or proxy.\n\tdefaultLongRunningRequestRE = \"(/|^)((watch|proxy)(/|$)|(logs?|portforward|exec|attach)/?$)\"\n)\n"
  },
  {
    "id" : "74ddcd05-dc55-4f6b-9945-539bc897f79f",
    "prId" : 13308,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b38e6250-40b1-403a-a21a-dda4775e4e4c",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Can you please add a TODO to enable cache in integration tests (in those tests apiservers are created their own configs, and default of the default config will be false.\n",
        "createdAt" : "2015-08-28T16:00:36Z",
        "updatedAt" : "2015-08-28T17:36:59Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2145371c45369f178eca1f9a5a8a6c59806947fe",
    "line" : null,
    "diffHunk" : "@@ -1,1 +225,229 @@\tfs.BoolVar(&s.EnableProfiling, \"profiling\", true, \"Enable profiling via web interface host:port/debug/pprof/\")\n\t// TODO: enable cache in integration tests.\n\tfs.BoolVar(&s.EnableWatchCache, \"watch-cache\", true, \"Enable watch caching in the apiserver\")\n\tfs.StringVar(&s.ExternalHost, \"external-hostname\", \"\", \"The hostname to use when generating externalized URLs for this master (e.g. Swagger API Docs.)\")\n\tfs.IntVar(&s.MaxRequestsInFlight, \"max-requests-inflight\", 400, \"The maximum number of requests in flight at a given time.  When the server exceeds this, it rejects requests.  Zero for no limit.\")"
  },
  {
    "id" : "ed0cf9b2-5316-4717-9cf3-b00b15143a8c",
    "prId" : 12919,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02e93c3c-1513-4859-89a7-b91e29dbea52",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Add a target removal date? So future-us will know when it's safe to delete.\n",
        "createdAt" : "2015-10-13T20:54:26Z",
        "updatedAt" : "2015-10-21T15:19:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "272f98e1-bf8e-4e57-b296-31a2d8466b99",
        "parentId" : "02e93c3c-1513-4859-89a7-b91e29dbea52",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Do you have any opinion on this? @bgrant0607 \n",
        "createdAt" : "2015-10-14T07:57:49Z",
        "updatedAt" : "2015-10-21T15:19:43Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "5a96e42f-52bd-4c8a-8d94-a7cc89a52602",
        "parentId" : "02e93c3c-1513-4859-89a7-b91e29dbea52",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Omit the date. We haven't decided on a policy yet. Additionally, we're going to deprecate all the flags hopefully in the 1.2 timeframe, so it doesn't seem worth it to make an extra effort for this one.\n",
        "createdAt" : "2015-10-14T15:01:47Z",
        "updatedAt" : "2015-10-21T15:19:43Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "60404a55fc2448476c58cb27385a2f38e517ccb6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +241,245 @@\tfs.BoolVar(&s.KubeletConfig.EnableHttps, \"kubelet-https\", s.KubeletConfig.EnableHttps, \"Use https for kubelet connections\")\n\tfs.UintVar(&s.KubeletConfig.Port, \"kubelet-port\", s.KubeletConfig.Port, \"Kubelet port\")\n\tfs.MarkDeprecated(\"kubelet-port\", \"kubelet-port is deprecated and will be removed\")\n\tfs.DurationVar(&s.KubeletConfig.HTTPTimeout, \"kubelet-timeout\", s.KubeletConfig.HTTPTimeout, \"Timeout for kubelet operations\")\n\tfs.StringVar(&s.KubeletConfig.CertFile, \"kubelet-client-certificate\", s.KubeletConfig.CertFile, \"Path to a client cert file for TLS.\")"
  },
  {
    "id" : "642686a1-b878-43c5-adaa-03354bf82c0c",
    "prId" : 12841,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e8cfc4a-b80e-427e-9e21-d4311c84a016",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "should be greater than or equal to since we allow /12.\n\nnit: move the assignment into the if.\n\n``` golang\nif ones, bits := s.ServiceClusterIPRange.Mask.Size(); bits-ones >= 20 {\n```\n",
        "createdAt" : "2015-08-18T03:33:25Z",
        "updatedAt" : "2015-08-18T03:33:36Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "89ccd21d-6e06-4112-a472-5e8776a33cbc",
        "parentId" : "5e8cfc4a-b80e-427e-9e21-d4311c84a016",
        "authorId" : "66c96081-cef7-4e07-b3aa-ab9d64f698e5",
        "body" : "This allows /12: 32 - 12 = 20 not > 20, so the error is not reported.\n",
        "createdAt" : "2015-08-18T03:41:19Z",
        "updatedAt" : "2015-08-18T03:41:19Z",
        "lastEditedBy" : "66c96081-cef7-4e07-b3aa-ab9d64f698e5",
        "tags" : [
        ]
      },
      {
        "id" : "fb9e67ed-91c1-41f9-8e42-dfa084f1a409",
        "parentId" : "5e8cfc4a-b80e-427e-9e21-d4311c84a016",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "oops misread. Thanks for explanation.\n",
        "createdAt" : "2015-08-18T03:43:12Z",
        "updatedAt" : "2015-08-18T03:43:12Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "031b9e4b-a373-4f87-ab8e-3e6d7b71edd0",
        "parentId" : "5e8cfc4a-b80e-427e-9e21-d4311c84a016",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Why is this not simply `ones < 12`?  No confusion there :)\n\nAlso 12 should be a `const minServiceCIDRMask` or something \n",
        "createdAt" : "2015-08-18T04:17:41Z",
        "updatedAt" : "2015-08-18T04:17:41Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "0ba0c8c6-c8a5-4ac7-b47d-03b759754cbc",
        "parentId" : "5e8cfc4a-b80e-427e-9e21-d4311c84a016",
        "authorId" : "66c96081-cef7-4e07-b3aa-ab9d64f698e5",
        "body" : "I'm not so familiar with Golang and don't know if the mask only appears in IPv4. If the IPNet is an IPv6 format, then just verify `ones` would be wrong since the storage is related to zeros.\n",
        "createdAt" : "2015-08-18T04:20:24Z",
        "updatedAt" : "2015-08-18T04:20:24Z",
        "lastEditedBy" : "66c96081-cef7-4e07-b3aa-ab9d64f698e5",
        "tags" : [
        ]
      },
      {
        "id" : "83d89782-e06e-415d-831b-6e1c19f3ef78",
        "parentId" : "5e8cfc4a-b80e-427e-9e21-d4311c84a016",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Fair answer.\n",
        "createdAt" : "2015-08-18T04:23:27Z",
        "updatedAt" : "2015-08-18T04:23:27Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "0547c52c2c11fdcf41d285e76cecd2ccf428ea55",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +229,233 @@\t}\n\tvar ones, bits = s.ServiceClusterIPRange.Mask.Size()\n\tif bits-ones > 20 {\n\t\tglog.Fatal(\"Specified --service-cluster-ip-range is too large\")\n\t}"
  },
  {
    "id" : "a138d1d3-b372-414c-bf60-fafc4fef203f",
    "prId" : 11968,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80bbd2a9-c465-48a5-a59d-138498bc8261",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "General question: Shouldn't we be bounds-checking lags like this so they can't be negative?\n",
        "createdAt" : "2015-07-29T06:18:54Z",
        "updatedAt" : "2015-07-29T20:51:35Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "45fbe0ea-b678-408d-a7a3-6a2d40d5c19f",
        "parentId" : "80bbd2a9-c465-48a5-a59d-138498bc8261",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "The checks in proxy.go are `maxBytes > 0` so we catch it there.  I suppose we could pass an explicit flag validation warning somewhere, but seems like overkill...\n",
        "createdAt" : "2015-07-29T16:30:18Z",
        "updatedAt" : "2015-07-29T20:51:35Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "99b02bfe737dec5c826f6de4aa8e924f21145119",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +207,211 @@\tfs.StringVar(&s.SSHUser, \"ssh-user\", \"\", \"If non-empty, use secure SSH proxy to the nodes, using this user name\")\n\tfs.StringVar(&s.SSHKeyfile, \"ssh-keyfile\", \"\", \"If non-empty, use secure SSH proxy to the nodes, using this user keyfile\")\n\tfs.Int64Var(&s.MaxConnectionBytesPerSec, \"max-connection-bytes-per-sec\", 0, \"If non-zero, throttle each user connection to this number of bytes/sec.  Currently only applies to long-running requests\")\n}\n"
  },
  {
    "id" : "be982f1e-ef58-4863-9563-eed8308b58c7",
    "prId" : 10656,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e4fd70a-a868-4414-88b4-e2206117b0e4",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "does this make long-running requests of unlimited duration?\n",
        "createdAt" : "2015-08-10T21:15:19Z",
        "updatedAt" : "2015-08-10T21:15:19Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c2a200a8-8397-4c5d-bec7-f921c7c9436f",
        "parentId" : "2e4fd70a-a868-4414-88b4-e2206117b0e4",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "As long as the client is still connected.\n",
        "createdAt" : "2015-08-10T21:45:13Z",
        "updatedAt" : "2015-08-10T21:45:13Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "f00f68b1-355c-4f62-918c-f21f127dd3ae",
        "parentId" : "2e4fd70a-a868-4414-88b4-e2206117b0e4",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "I would also note that Read and Write timeouts on the server object don't actually close connections. They only cause errors on read and write. It's up to the error handling code to close it in that case. The bugs mentioned in this PR were two that actually held connections open for a long time, but didn't close until there was IO interaction to trigger it.\n",
        "createdAt" : "2015-08-10T21:50:25Z",
        "updatedAt" : "2015-08-10T21:50:25Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d033b99123311e47057c0be83b0b77899008488",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +419,423 @@\t\t// TODO unify this with apiserver.MaxInFlightLimit\n\t\tif longRunningRE.MatchString(req.URL.Path) || req.URL.Query().Get(\"watch\") == \"true\" {\n\t\t\treturn nil, \"\"\n\t\t}\n\t\treturn time.After(time.Minute), \"\""
  },
  {
    "id" : "49dc5015-f9a4-4744-a36c-a835122ffa20",
    "prId" : 8964,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9786f57e-b571-408a-8e2a-f7a35c912360",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This name is not very clear... maybe something about ConnectionDuration?\n",
        "createdAt" : "2015-05-29T20:10:46Z",
        "updatedAt" : "2015-06-03T15:48:08Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "7b5c04f0-aa68-4e58-a3a8-8c105926c1d1",
        "parentId" : "9786f57e-b571-408a-8e2a-f7a35c912360",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "To me Connection\\* indicates something that is general across all connections while Request*, something that is handled per request. Since this is the latter can I leave the name as-is (or were you confused by timeout vs duration)?\n",
        "createdAt" : "2015-06-01T19:10:23Z",
        "updatedAt" : "2015-06-03T15:48:08Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0162529ea53e4ed2195a34ede29f7ef623af87dd",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +97,101 @@\tEnableProfiling            bool\n\tMaxRequestsInFlight        int\n\tMinRequestTimeout          int\n\tLongRunningRequestRE       string\n}"
  },
  {
    "id" : "a47afd0c-4918-4e97-a9d9-2043b70bfed8",
    "prId" : 7819,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3cffe04f-eed9-4947-9de6-b68732026703",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I had to go look this thing up. Is it documented anywhere? I would greatly prefer not having magic keys like \"api/all\" or \"api/legacy\"; I'd prefer an opt-out or opt-in list, and clarification (in the command line flag help message!) that it determines which api versions are _served_ (as opposed to the other env var which determines which are _understood_).\n\nI guess you didn't add api/legacy, so let's not touch that one. But can we avoid adding api/all?\n",
        "createdAt" : "2015-05-15T22:30:07Z",
        "updatedAt" : "2015-05-15T23:20:54Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "02eb6371-6afc-4676-9ce7-0bc36cdafd63",
        "parentId" : "3cffe04f-eed9-4947-9de6-b68732026703",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Updated https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/cluster_management.md#turn-on-or-off-an-api-version-for-your-cluster and also updated the help message for runtime_config flag.\n",
        "createdAt" : "2015-05-15T23:18:58Z",
        "updatedAt" : "2015-05-15T23:20:54Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa9f86478240022fdc275324c15b9a0767fd4517",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +241,245 @@\t// \"api/all=false\" allows users to selectively enable specific api versions.\n\tdisableAllAPIs := false\n\tallAPIFlagValue, ok := s.RuntimeConfig[\"api/all\"]\n\tif ok && allAPIFlagValue == \"false\" {\n\t\tdisableAllAPIs = true"
  },
  {
    "id" : "c2348328-da96-4723-ab77-3de1bf5f8915",
    "prId" : 6526,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c43760a-d2d9-433f-8172-0c7b2fb3d441",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "@thockin: Is there a rationale behind the usage of '-' vs '_' as word separators? \n",
        "createdAt" : "2015-04-07T19:36:51Z",
        "updatedAt" : "2015-04-07T22:55:59Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "ffabdbd2-8358-4a1a-8e94-25bcdaecfe0b",
        "parentId" : "4c43760a-d2d9-433f-8172-0c7b2fb3d441",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "sorry, trnding towards - as the standard.  I can make this consistent for this PR if we agree on content\n",
        "createdAt" : "2015-04-07T19:45:07Z",
        "updatedAt" : "2015-04-07T22:55:59Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "97a73594-e7c0-4589-8178-41613b8f7386",
        "parentId" : "4c43760a-d2d9-433f-8172-0c7b2fb3d441",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Should we mark the flags that use '_' as deprecated and create a duplicate flag that uses '-' instead? \nAlso that change should happen in a separate PR.\n",
        "createdAt" : "2015-04-07T19:56:51Z",
        "updatedAt" : "2015-04-07T22:55:59Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "0b5a5971-c7e4-47ce-a218-5ac1d70b6d8b",
        "parentId" : "4c43760a-d2d9-433f-8172-0c7b2fb3d441",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "That should be a whole different set of PRs\n",
        "createdAt" : "2015-04-07T21:56:05Z",
        "updatedAt" : "2015-04-07T22:55:59Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2c8decffee9d6f6ff26efd9a0febbe04d0d5c57",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +134,138 @@\t\t\"at all. It is assumed that firewall rules are set up such that this port is \"+\n\t\t\"not reachable from outside of the cluster.\")\n\tfs.IntVar(&s.SecurePort, \"secure_port\", s.SecurePort, \"\"+\n\t\t\"The port on which to serve HTTPS with authentication and authorization. If 0, \"+\n\t\t\"don't serve HTTPS at all.\")"
  },
  {
    "id" : "0b3e480d-1cb7-4fc3-b47b-a697c1b565b6",
    "prId" : 6190,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a35ff74-e000-4bc1-b7a9-2a25833d6e7e",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "What if I am accessing the apiserver via my browser and I have installed a client cert from a CA which is not in the clientCAs pool?  Then I automatically get rejected.  That seems wrong.\n\nIf we tried to expand the clientCAs pool to include our cluster's CA plus all known trustworthy CAs, then it would mean that anyone with a client cert from any of those CAs could authenticate to our cluster, which is also not good.\n\nSo, I think the set of allowed client CAs needs to be broader than the set of automatically-authenticating client CAs.  \n",
        "createdAt" : "2015-04-01T17:47:01Z",
        "updatedAt" : "2015-04-01T17:47:02Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "1991aa7d-fec9-44ef-ad32-fd67f439c3b7",
        "parentId" : "8a35ff74-e000-4bc1-b7a9-2a25833d6e7e",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "If there is a way to set the TLSConfig to allow connections with any cert, and do all the checking in the Authenticator, then I think that is the way to go for now?\n",
        "createdAt" : "2015-04-01T17:53:03Z",
        "updatedAt" : "2015-04-01T17:53:03Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "71904469-a0d2-481a-a9f3-45f82ff06349",
        "parentId" : "8a35ff74-e000-4bc1-b7a9-2a25833d6e7e",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "You won't get rejected.\n\nSetting `ClientAuth=RequestClientCert` means a client cert is requested, but not required or validated at the connection level.\n\nSetting `ClientCAs` tells clients what CAs are valid to present client certificates for. If your browser doesn't have any client certificates for that CA, it won't send any. Leaving `ClientCAs` blank means some browsers will try to send any client cert they have.\n",
        "createdAt" : "2015-04-01T18:21:48Z",
        "updatedAt" : "2015-04-01T18:21:48Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "1fe63320-4334-4b4b-a550-690cc9cc7e18",
        "parentId" : "8a35ff74-e000-4bc1-b7a9-2a25833d6e7e",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> If there is a way to set the TLSConfig to allow connections with any cert, and do all the checking in the Authenticator, then I think that is the way to go for now?\n\nThat's exactly what this does. See \"This allows certificates to be validated by authenticators, while still allowing other auth types\" comment :)\n\nRequests without client certs, with invalid client certs, or with valid client certs are all allowed at the transport layer.\n\nRequests without a client cert will skip the client cert Authenticator.\nRequests with an \"invalid\" client cert will fail the client cert Authenticator, but could still get an identity from the token Authenticator.\nRequests with a valid client cert will get an identity from the client cert Authenticator.\n",
        "createdAt" : "2015-04-01T18:22:07Z",
        "updatedAt" : "2015-04-01T18:26:23Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c797a91e3605ff4dfa5401cfa5c2f61276765fd0",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +345,349 @@\t\t\tsecureServer.TLSConfig.ClientAuth = tls.RequestClientCert\n\t\t\t// Specify allowed CAs for client certificates\n\t\t\tsecureServer.TLSConfig.ClientCAs = clientCAs\n\t\t}\n"
  },
  {
    "id" : "a23abe6e-d69e-4e3d-b123-e5b9874d5598",
    "prId" : 6098,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7b521ee-9733-4c5b-9a43-4c07b4793ea7",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "@smarterclayton How much of a problem are these types of breaking changes?\n\nhttps://github.com/openshift/origin/blob/master/pkg/cmd/server/kubernetes/master.go#L65\n",
        "createdAt" : "2015-03-31T22:05:49Z",
        "updatedAt" : "2015-03-31T22:05:49Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "ad9be37e-9e1b-433f-b5fc-57278aff89c3",
        "parentId" : "d7b521ee-9733-4c5b-9a43-4c07b4793ea7",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Not bad - it's an easy compile error during rebase.  The harder is when it isn't a compile error (no one notices).\n\n----- Original Message -----\n\n> > @@ -274,7 +278,7 @@ func (s *APIServer) Run(_ []string) error {\n> >         Authenticator:          authenticator,\n> >         Authorizer:             authorizer,\n> >         AdmissionControl:       admissionController,\n> > -       EnableV1Beta3:          v1beta3,\n> > -       DisableV1Beta3:         disableV1beta3,\n> \n> @smarterclayton How much of a problem are these types of breaking changes?\n> \n> https://github.com/openshift/origin/blob/master/pkg/cmd/server/kubernetes/master.go#L65\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/6098/files#r27528113\n",
        "createdAt" : "2015-03-31T22:24:49Z",
        "updatedAt" : "2015-03-31T22:24:49Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "478b7d5edf9ef424fe92f59d11c333953b2334c0",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +279,283 @@\t\tAuthorizer:             authorizer,\n\t\tAdmissionControl:       admissionController,\n\t\tDisableV1Beta3:         disableV1beta3,\n\t\tMasterServiceNamespace: s.MasterServiceNamespace,\n\t\tClusterName:            s.ClusterName,"
  }
]