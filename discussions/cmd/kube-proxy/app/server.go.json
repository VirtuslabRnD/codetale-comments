[
  {
    "id" : "e20cd721-25db-4e6d-af11-ef0dc406be9a",
    "prId" : 94915,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94915#pullrequestreview-492259883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac7e5e45-92fa-4589-ab57-4f11f1d42f13",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "So this will end up logging an error if `ip6tables` is uninstalled (even though there presumably weren't IPv6 iptables rules to clean up in that case). But that will need to be fixed to reconcile this with #94474 anyway.\r\n\r\nIf this is only going into 1.20 I'd rather hold this until #94474 and then rebase on top of that, but if this was going to be backported to 1.19 then it might be better to just merge this as-is and ignore the somewhat spurious error message in that case...",
        "createdAt" : "2020-09-19T15:42:23Z",
        "updatedAt" : "2020-09-19T15:42:24Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "73ccaac5-35b8-4704-999b-6fc780b0ad08",
        "parentId" : "ac7e5e45-92fa-4589-ab57-4f11f1d42f13",
        "authorId" : "7173451b-f4a3-4cf8-93b2-48874c3fbf28",
        "body" : "I think cherry-pick to 1.19 is necessary, obviously 1.19 have this problem. \r\nBut currently I have no idea about how to avoid spurious error message in this case, so maybe hold this until #94474 and then rebase on top of that still an option.",
        "createdAt" : "2020-09-21T03:10:12Z",
        "updatedAt" : "2020-09-21T03:10:12Z",
        "lastEditedBy" : "7173451b-f4a3-4cf8-93b2-48874c3fbf28",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbb5438b330fd31de7d8321af5e022959819484e",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +817,821 @@\t}\n\tif encounteredError {\n\t\treturn errors.New(\"encountered an error while tearing down rules\")\n\t}\n"
  },
  {
    "id" : "7588465a-aa38-49c4-9643-d05d2d9f455a",
    "prId" : 89654,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89654#pullrequestreview-384074541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2493334b-8151-42c0-ac38-6014c2cf783d",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "is this an Error or should be `klog.V(3).Infof(`?",
        "createdAt" : "2020-03-30T16:42:36Z",
        "updatedAt" : "2020-03-30T17:29:32Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "8cb60540-58e2-4214-bce7-b49fbe2f8228",
        "parentId" : "2493334b-8151-42c0-ac38-6014c2cf783d",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I think it's an error - it's not supposed to return.",
        "createdAt" : "2020-03-30T17:27:14Z",
        "updatedAt" : "2020-03-30T17:29:32Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "15632b10cbd01777198b97a60fb49f8a25f615df",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +589,593 @@\t\t\tklog.Errorf(\"healthz server failed: %v\", err)\n\t\t} else {\n\t\t\tklog.Errorf(\"healthz server returned without error\")\n\t\t}\n\t}"
  },
  {
    "id" : "ab281789-b1a7-431c-ac06-92b0af882653",
    "prId" : 89350,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89350#pullrequestreview-386018517",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ae982f3-fc75-487c-a2c3-9f4d25274daf",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "same comments as above",
        "createdAt" : "2020-04-01T23:33:12Z",
        "updatedAt" : "2020-04-02T05:13:32Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "871b90ba23920573e27f75a2c62b8a5362fdb064",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +626,630 @@\t\terr := http.ListenAndServe(bindAddress, proxyMux)\n\t\tif err != nil {\n\t\t\terr = fmt.Errorf(\"starting metrics server failed: %v\", err)\n\t\t\tutilruntime.HandleError(err)\n\t\t\tif errCh != nil {"
  },
  {
    "id" : "bd41bad2-8b46-4a2b-bdd3-4ec6a505215f",
    "prId" : 88512,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88512#pullrequestreview-367488505",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1627241e-9bad-4b8f-ac41-db4225f5fb84",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "Interestingly, IPPortVar is compatible with IP only so it's backward compatible, nice\r\n> // Both IP and IP:port are valid.\r\n",
        "createdAt" : "2020-02-25T09:49:25Z",
        "updatedAt" : "2020-02-25T09:49:25Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "6855151a-5ce1-4e8c-94da-36743a9a3c81",
        "parentId" : "1627241e-9bad-4b8f-ac41-db4225f5fb84",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "does `:port` work for \"all interfaces\" ?",
        "createdAt" : "2020-03-02T20:03:08Z",
        "updatedAt" : "2020-03-02T20:03:08Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "c261d12bbf717c1b8eecbabbebe52f33172a38e0",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +167,171 @@\n\tfs.Var(utilflag.IPVar{Val: &o.config.BindAddress}, \"bind-address\", \"The IP address for the proxy server to serve on (set to '0.0.0.0' for all IPv4 interfaces and '::' for all IPv6 interfaces)\")\n\tfs.Var(utilflag.IPPortVar{Val: &o.config.HealthzBindAddress}, \"healthz-bind-address\", \"The IP address with port for the health check server to serve on (set to '0.0.0.0:10256' for all IPv4 interfaces and '[::]:10256' for all IPv6 interfaces). Set empty to disable.\")\n\tfs.Var(utilflag.IPPortVar{Val: &o.config.MetricsBindAddress}, \"metrics-bind-address\", \"The IP address with port for the metrics server to serve on (set to '0.0.0.0:10249' for all IPv4 interfaces and '[::]:10249' for all IPv6 interfaces). Set empty to disable.\")\n\tfs.Var(utilflag.PortRangeVar{Val: &o.config.PortRange}, \"proxy-port-range\", \"Range of host ports (beginPort-endPort, single port or beginPort+offset, inclusive) that may be consumed in order to proxy service traffic. If (unspecified, 0, or 0-0) then ports will be randomly chosen.\")"
  },
  {
    "id" : "f2ce3dfc-e203-446c-b56c-57768932ba26",
    "prId" : 88512,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88512#pullrequestreview-365573425",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dee022b0-dd56-44b5-bec0-2377d718e071",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "The \r\n\r\n> set to '0.0.0.0' for all IPv4 interfaces and '::' for all IPv6 interfaces\r\n\r\nis wrong https://github.com/kubernetes/kubernetes/issues/88458\r\n\r\nbut can be done in a followup",
        "createdAt" : "2020-02-25T09:58:10Z",
        "updatedAt" : "2020-02-25T09:58:10Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "0d2c856a-66d0-455a-93a5-daf48e8dae1a",
        "parentId" : "dee022b0-dd56-44b5-bec0-2377d718e071",
        "authorId" : "e7b8fd7e-f93b-44b6-b6d0-4331207d901c",
        "body" : "Yeah, I think we need to work it out separately. That is a different problem!",
        "createdAt" : "2020-02-27T10:35:07Z",
        "updatedAt" : "2020-02-27T10:35:07Z",
        "lastEditedBy" : "e7b8fd7e-f93b-44b6-b6d0-4331207d901c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c261d12bbf717c1b8eecbabbebe52f33172a38e0",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +166,170 @@\tfs.MarkDeprecated(\"cleanup-ipvs\", \"In a future release, running --cleanup will always flush IPVS rules\")\n\n\tfs.Var(utilflag.IPVar{Val: &o.config.BindAddress}, \"bind-address\", \"The IP address for the proxy server to serve on (set to '0.0.0.0' for all IPv4 interfaces and '::' for all IPv6 interfaces)\")\n\tfs.Var(utilflag.IPPortVar{Val: &o.config.HealthzBindAddress}, \"healthz-bind-address\", \"The IP address with port for the health check server to serve on (set to '0.0.0.0:10256' for all IPv4 interfaces and '[::]:10256' for all IPv6 interfaces). Set empty to disable.\")\n\tfs.Var(utilflag.IPPortVar{Val: &o.config.MetricsBindAddress}, \"metrics-bind-address\", \"The IP address with port for the metrics server to serve on (set to '0.0.0.0:10249' for all IPv4 interfaces and '[::]:10249' for all IPv6 interfaces). Set empty to disable.\")"
  },
  {
    "id" : "b943c53d-5c6a-4579-b2fc-d398ac4e7104",
    "prId" : 87748,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87748#pullrequestreview-357608861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe8c7764-086b-4345-9c18-e4ac4dfc659b",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "kind of a nit, but \"mode\" doesn't add anything for me.  `--detect-local` seems sufficient to me",
        "createdAt" : "2020-02-11T16:57:34Z",
        "updatedAt" : "2020-02-22T02:38:02Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "1f6fe6ed-93ae-41d5-940e-d0886e0c9e36",
        "parentId" : "fe8c7764-086b-4345-9c18-e4ac4dfc659b",
        "authorId" : "2cc59e20-7474-4601-ae08-1e230c1461d2",
        "body" : "It was originally detect-local, but -mode got added as it one of the earlier reviews said it was more expressive. I'm happy to change it back to detect-local if we feel that is better.",
        "createdAt" : "2020-02-12T02:36:36Z",
        "updatedAt" : "2020-02-22T02:38:02Z",
        "lastEditedBy" : "2cc59e20-7474-4601-ae08-1e230c1461d2",
        "tags" : [
        ]
      },
      {
        "id" : "abf0470a-5469-4ed9-ab01-2314ab45816d",
        "parentId" : "fe8c7764-086b-4345-9c18-e4ac4dfc659b",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "My earlier comment suggested `--detect-local-mode` since I instinctively assume `--detect-local` is a bool flag. It's more clearer to me that `--detect-local-mode` requires a string value.  ",
        "createdAt" : "2020-02-12T10:42:13Z",
        "updatedAt" : "2020-02-22T02:38:02Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "01beb7ed-ae4e-474f-8467-2af4462dc86a",
        "parentId" : "fe8c7764-086b-4345-9c18-e4ac4dfc659b",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "OK, I see that reasoning, and I don't care to spend any further energy on it. :)",
        "createdAt" : "2020-02-12T16:40:03Z",
        "updatedAt" : "2020-02-22T02:38:02Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c6956e5bb4f9557e6ba459f1f6bbcb80e3b5b80",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +204,208 @@\n\tfs.Float32Var(&o.config.ClientConnection.QPS, \"kube-api-qps\", o.config.ClientConnection.QPS, \"QPS to use while talking with kubernetes apiserver\")\n\tfs.Var(&o.config.DetectLocalMode, \"detect-local-mode\", \"Mode to use to detect local traffic\")\n}\n"
  },
  {
    "id" : "0c5e968e-f52c-497d-83aa-83bf8c4c98de",
    "prId" : 85279,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85279#pullrequestreview-325851008",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56c0b696-dd4b-4fae-886c-d6528c774762",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I know this is part of a larger effort, but this comment is confusing to me.\r\n\r\nIf it only allows the previous version, why do I have to specify a version?",
        "createdAt" : "2019-12-02T22:27:13Z",
        "updatedAt" : "2019-12-18T03:12:53Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "7a7b5750-1cce-4552-a555-0b22021ef2e7",
        "parentId" : "56c0b696-dd4b-4fae-886c-d6528c774762",
        "authorId" : "ae15cfb8-5436-4398-94e0-d443e413b257",
        "body" : "First of all, this flag is an escape hatch, it intends to be used by admins if they were not able to react to the earlier deprecation warnings.\r\n\r\nSecond of all, we don't want admins to be excessive depend on this flag, otherwise, they may fail to notice deprecate message from the next release.\r\n\r\nHere is an example: [why-not-bool-flag](https://github.com/kubernetes/enhancements/blob/master/keps/sig-instrumentation/20190404-kubernetes-control-plane-metrics-stability.md#why-not-bool-flag)\r\n\r\n@thockin ",
        "createdAt" : "2019-12-03T01:38:15Z",
        "updatedAt" : "2019-12-18T03:12:53Z",
        "lastEditedBy" : "ae15cfb8-5436-4398-94e0-d443e413b257",
        "tags" : [
        ]
      }
    ],
    "commit" : "6b33a7706854cdbaba13d9c4f69e5d4aece9bdf4",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +153,157 @@\tfs.StringVar(&o.config.ShowHiddenMetricsForVersion, \"show-hidden-metrics-for-version\", o.config.ShowHiddenMetricsForVersion,\n\t\t\"The previous version for which you want to show hidden metrics. \"+\n\t\t\t\"Only the previous minor version is meaningful, other values will not be allowed. \"+\n\t\t\t\"The format is <major>.<minor>, e.g.: '1.16'. \"+\n\t\t\t\"The purpose of this format is make sure you have the opportunity to notice if the next release hides additional metrics, \"+"
  },
  {
    "id" : "c501dc09-b26e-4518-96d5-94fa55108cd5",
    "prId" : 83832,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83832#pullrequestreview-310751570",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec8ea26b-8653-452c-a516-feeeecb744e5",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "@gongguan can you open an issue to track this work please? ",
        "createdAt" : "2019-11-01T19:48:02Z",
        "updatedAt" : "2019-11-02T02:10:20Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "7daf6f76-9b9f-40bc-8aa6-8a39460d23cd",
        "parentId" : "ec8ea26b-8653-452c-a516-feeeecb744e5",
        "authorId" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "body" : "Can [#78797](https://github.com/kubernetes/kubernetes/issues/78797) be used as the tracking issue or a new one raised by me?",
        "createdAt" : "2019-11-02T00:54:03Z",
        "updatedAt" : "2019-11-02T02:10:20Z",
        "lastEditedBy" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "tags" : [
        ]
      },
      {
        "id" : "a1666bb2-c147-4395-9d49-fb2cba5e8b0a",
        "parentId" : "ec8ea26b-8653-452c-a516-feeeecb744e5",
        "authorId" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "body" : "Should I add a comment with the tracking issue above the sentence?",
        "createdAt" : "2019-11-02T00:56:49Z",
        "updatedAt" : "2019-11-02T02:10:20Z",
        "lastEditedBy" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "tags" : [
        ]
      },
      {
        "id" : "9fb9a644-2acb-44a6-b5f4-c3585d00a1a7",
        "parentId" : "ec8ea26b-8653-452c-a516-feeeecb744e5",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Ah, yes it can, just make sure the issue name is updated and it's not closed when this PR is merged",
        "createdAt" : "2019-11-02T01:00:42Z",
        "updatedAt" : "2019-11-02T02:10:20Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "9e921ed2-e0ea-49ca-9670-6e7ad21b8cdf",
        "parentId" : "ec8ea26b-8653-452c-a516-feeeecb744e5",
        "authorId" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "body" : "rebased current code to pass the failed check. Could you please label an ok-to-test?",
        "createdAt" : "2019-11-02T02:23:28Z",
        "updatedAt" : "2019-11-02T02:23:28Z",
        "lastEditedBy" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "f147b6e5558a68a201c0e36d8d7cdde4f923f4c7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +154,158 @@\tfs.BoolVar(&o.CleanupAndExit, \"cleanup\", o.CleanupAndExit, \"If true cleanup iptables and ipvs rules and exit.\")\n\tfs.BoolVar(&o.CleanupIPVS, \"cleanup-ipvs\", o.CleanupIPVS, \"If true and --cleanup is specified, kube-proxy will also flush IPVS rules, in addition to normal cleanup.\")\n\tfs.MarkDeprecated(\"cleanup-ipvs\", \"In a future release, running --cleanup will always flush IPVS rules\")\n\n\tfs.Var(utilflag.IPVar{Val: &o.config.BindAddress}, \"bind-address\", \"The IP address for the proxy server to serve on (set to `0.0.0.0` for all IPv4 interfaces and `::` for all IPv6 interfaces)\")"
  },
  {
    "id" : "be8732bf-7493-43fb-a581-ed2083f4bae3",
    "prId" : 78789,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78789#pullrequestreview-247185460",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88951e77-2284-4b8b-b1d9-7eb3e413c3ce",
        "parentId" : null,
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "/ok-to-test\r\n/priority backlog\r\n/lgtm",
        "createdAt" : "2019-06-07T16:14:29Z",
        "updatedAt" : "2019-06-07T16:14:30Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd6718e3d26d129bf5d01c89932980a1786c4d49",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +161,165 @@\tfs.Var(utilflag.IPVar{Val: &o.config.MetricsBindAddress}, \"metrics-bind-address\", \"The IP address for the metrics server to serve on (set to `0.0.0.0` for all IPv4 interfaces and `::` for all IPv6 interfaces)\")\n\tfs.Var(utilflag.PortRangeVar{Val: &o.config.PortRange}, \"proxy-port-range\", \"Range of host ports (beginPort-endPort, single port or beginPort+offset, inclusive) that may be consumed in order to proxy service traffic. If (unspecified, 0, or 0-0) then ports will be randomly chosen.\")\n\tfs.Var(&o.config.Mode, \"proxy-mode\", \"Which proxy mode to use: 'userspace' (older) or 'iptables' (faster) or 'ipvs'. If blank, use the best-available proxy (currently iptables).  If the iptables proxy is selected, regardless of how, but the system's kernel or iptables versions are insufficient, this always falls back to the userspace proxy.\")\n\tfs.Var(cliflag.NewMapStringBool(&o.config.FeatureGates), \"feature-gates\", \"A set of key=value pairs that describe feature gates for alpha/experimental features. \"+\n\t\t\"Options are:\\n\"+strings.Join(utilfeature.DefaultFeatureGate.KnownFeatures(), \"\\n\"))"
  },
  {
    "id" : "b9d973c6-a5d7-4a29-b8fc-37383506804b",
    "prId" : 78297,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78297#pullrequestreview-242854732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2db4ebe-4730-4c6f-a6d7-07e1a921e515",
        "parentId" : null,
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "Thanks for the works! One question: I was under the impression that most of the flags are in fact deprecated in favor of on-boarding to component configuration (https://github.com/kubernetes/kubernetes/pull/34727). @ncdc is that still true?",
        "createdAt" : "2019-05-24T17:19:40Z",
        "updatedAt" : "2019-05-24T17:19:41Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      },
      {
        "id" : "01f2aedd-8509-4795-bb51-7777857ebd71",
        "parentId" : "a2db4ebe-4730-4c6f-a6d7-07e1a921e515",
        "authorId" : "4138710b-380a-4011-917f-70ce4f4b9717",
        "body" : "That's the plan longer term - @luxas was giving me an intro last week on how that would work.",
        "createdAt" : "2019-05-25T16:48:22Z",
        "updatedAt" : "2019-05-25T16:48:22Z",
        "lastEditedBy" : "4138710b-380a-4011-917f-70ce4f4b9717",
        "tags" : [
        ]
      },
      {
        "id" : "7a25aa2b-a701-4dff-81b9-00378110a6e3",
        "parentId" : "a2db4ebe-4730-4c6f-a6d7-07e1a921e515",
        "authorId" : "22b40fa9-7e5c-43ce-a42b-bb5aef8251b4",
        "body" : "@MrHohn if I understand correctly, both cases are supported? If the `--config` flag is specified and no proxy flags are used then values will be read from the config path otherwise the flags are used. \r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/74c0c21f8036c1ef30d83021a2cebab34de52a7a/cmd/kube-proxy/app/server.go#L228  \r\n\r\nnot sure whether this PR is the right candidate for completely deprecating the flags, but maybe I got it wrong. ",
        "createdAt" : "2019-05-26T02:18:07Z",
        "updatedAt" : "2019-05-26T02:22:19Z",
        "lastEditedBy" : "22b40fa9-7e5c-43ce-a42b-bb5aef8251b4",
        "tags" : [
        ]
      },
      {
        "id" : "ea42bd95-7f68-4cf5-b0fc-e4af5800d761",
        "parentId" : "a2db4ebe-4730-4c6f-a6d7-07e1a921e515",
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "Acked, thanks for the comments. Don't think we should block this on the longer term plan :)",
        "createdAt" : "2019-05-28T18:43:46Z",
        "updatedAt" : "2019-05-28T18:43:46Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      }
    ],
    "commit" : "27f8d363a9728fdddad6caa62b31ae16b07e2a0e",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +196,200 @@\tfs.Float32Var(&o.config.ClientConnection.QPS, \"kube-api-qps\", o.config.ClientConnection.QPS, \"QPS to use while talking with kubernetes apiserver\")\n\n\t// All flags below here are deprecated and will eventually be removed.\n\tfs.Int32Var(o.config.Conntrack.Max, \"conntrack-max\", *o.config.Conntrack.Max,\n\t\t\"Maximum number of NAT connections to track (0 to leave as-is). This overrides conntrack-max-per-core and conntrack-min.\")"
  },
  {
    "id" : "4ac4ae15-93d0-46a8-92a7-4d75edf4bc04",
    "prId" : 76732,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76732#pullrequestreview-228912484",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ef2d818-d2de-46f8-a344-cf259ac86d45",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "I still find it a little awkward that Run() cannot return a nil error. Should we document this somewhere or can we at least add a TODO comment here to clean this up in a follow-up PR? ",
        "createdAt" : "2019-04-21T13:11:07Z",
        "updatedAt" : "2019-04-27T05:48:32Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "94731c5dcd5ce928aff0f967957f815a4eaad0d0",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +531,535 @@// Run runs the specified ProxyServer.  This should never exit (unless CleanupAndExit is set).\n// TODO: At the moment, Run() cannot return a nil error, otherwise it's caller will never exit. Update callers of Run to handle nil errors.\nfunc (s *ProxyServer) Run() error {\n\t// To help debugging, immediately log version\n\tklog.Infof(\"Version: %+v\", version.Get())"
  },
  {
    "id" : "04af7b2e-e3e0-478b-afed-bc7f45ac1dae",
    "prId" : 76732,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76732#pullrequestreview-231515915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3cd55f8-c169-4718-9278-1ba7598bf8b2",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "I wonder if CleanupLeftovers should return the (aggregate) error instead of returning just a boolean.\r\nThis would be useful for caller for analysis.",
        "createdAt" : "2019-04-27T20:54:54Z",
        "updatedAt" : "2019-04-27T20:54:55Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "d8062e5a-99dc-445b-b3dd-4677ec2e6380",
        "parentId" : "d3cd55f8-c169-4718-9278-1ba7598bf8b2",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "I agree that this is a bit ugly but I don't think it'll be easy to fix. A lot of errors from `CleanupLeftovers` don't warrant an early return. For what it's worth, most of the errors are still logged via `klog.Error` though. ",
        "createdAt" : "2019-04-29T05:03:57Z",
        "updatedAt" : "2019-04-29T05:03:57Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "94731c5dcd5ce928aff0f967957f815a4eaad0d0",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +682,686 @@// CleanupAndExit remove iptables rules and exit if success return nil\nfunc (s *ProxyServer) CleanupAndExit() error {\n\tencounteredError := userspace.CleanupLeftovers(s.IptInterface)\n\tencounteredError = iptables.CleanupLeftovers(s.IptInterface) || encounteredError\n\tencounteredError = ipvs.CleanupLeftovers(s.IpvsInterface, s.IptInterface, s.IpsetInterface, s.CleanupIPVS) || encounteredError"
  },
  {
    "id" : "4c18a2be-cdea-4776-8afa-c48bea4aea21",
    "prId" : 76320,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76320#pullrequestreview-227022801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07015064-ce5d-446c-afcb-da62b362da5f",
        "parentId" : null,
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "Would be great to preserve some of the original comments:\r\n```golang\r\n// addressFromDeprecatedFlags returns server address from flags\r\n// passed on the command line based on the following rules:\r\n// ...\r\n```",
        "createdAt" : "2019-04-15T18:30:26Z",
        "updatedAt" : "2019-04-17T07:34:33Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      },
      {
        "id" : "b1015488-44bc-4e35-af00-02741dc056bd",
        "parentId" : "07015064-ce5d-446c-afcb-da62b362da5f",
        "authorId" : "e9ccec4a-f0c0-4820-a947-6050b5de65a5",
        "body" : "Updated.\r\nThanks",
        "createdAt" : "2019-04-16T07:26:08Z",
        "updatedAt" : "2019-04-17T07:34:33Z",
        "lastEditedBy" : "e9ccec4a-f0c0-4820-a947-6050b5de65a5",
        "tags" : [
        ]
      }
    ],
    "commit" : "08e320fa4ef96880f0c8ac7ee69f118306c95702",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +361,365 @@// addressFromDeprecatedFlags returns server address from flags\n// passed on the command line based on the following rules:\n// 1. If port is 0, disable the server (e.g. set address to empty).\n// 2. Otherwise, set the port portion of the config accordingly.\nfunc addressFromDeprecatedFlags(addr string, port int32) string {"
  },
  {
    "id" : "a442ecbb-28d7-49ad-8a9d-c4050a55c119",
    "prId" : 72682,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72682#pullrequestreview-191839549",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14886668-8bf1-4592-8ee7-8fd9955091c8",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I don't understand this.  It's a new flag, so the default will be 0.  In that case we nuke the user's requested MetricsBindAddress ?  Or is the default not 0?",
        "createdAt" : "2019-01-11T19:19:10Z",
        "updatedAt" : "2019-01-11T19:19:10Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "cc673c3a-4d29-40b6-b82a-16ee2143afb2",
        "parentId" : "14886668-8bf1-4592-8ee7-8fd9955091c8",
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "The default is set to `ports.ProxyStatusPort`, which should be the same as before (10249).",
        "createdAt" : "2019-01-11T19:23:41Z",
        "updatedAt" : "2019-01-11T19:23:41Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      },
      {
        "id" : "afddf4ca-249b-4a03-a25a-03592bde6e9d",
        "parentId" : "14886668-8bf1-4592-8ee7-8fd9955091c8",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "where is that defaulted?",
        "createdAt" : "2019-01-11T20:04:34Z",
        "updatedAt" : "2019-01-11T20:04:35Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "4b33c5f0-8d19-4cc3-afe2-72ef5d606d0c",
        "parentId" : "14886668-8bf1-4592-8ee7-8fd9955091c8",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I see it now.  Thanks!",
        "createdAt" : "2019-01-11T20:05:43Z",
        "updatedAt" : "2019-01-11T20:05:44Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "d52ba6413dac9b5441ee6babb01df56c0d0a2c39",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +313,317 @@\nfunc (o *Options) applyDeprecatedMetricsPortToConfig() {\n\tif o.metricsPort == 0 {\n\t\to.config.MetricsBindAddress = \"\"\n\t\treturn"
  },
  {
    "id" : "001289ed-c38e-4119-a4a9-6a7a82378792",
    "prId" : 72569,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72569#pullrequestreview-190175996",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6dca6ca9-11d7-4194-b7e9-fb0c495002ba",
        "parentId" : null,
        "authorId" : "05637862-b60e-403e-8519-09d1b3f0c9c2",
        "body" : "no need rename?",
        "createdAt" : "2019-01-07T01:01:59Z",
        "updatedAt" : "2019-01-07T01:16:10Z",
        "lastEditedBy" : "05637862-b60e-403e-8519-09d1b3f0c9c2",
        "tags" : [
        ]
      },
      {
        "id" : "0c4df6de-cc9c-4ab7-95d5-a7c97629fbaa",
        "parentId" : "6dca6ca9-11d7-4194-b7e9-fb0c495002ba",
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "tbh I don't know from where this came, but it doesn't harm much :smile:",
        "createdAt" : "2019-01-08T10:25:43Z",
        "updatedAt" : "2019-01-08T10:25:44Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "1edd2723f89cc42591c8aa11903ba812f947fd73",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +29,33 @@\t\"time\"\n\n\tv1 \"k8s.io/api/core/v1\"\n\tv1meta \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/apimachinery/pkg/runtime\""
  },
  {
    "id" : "2244d958-f564-40fb-9625-45f159ea28b8",
    "prId" : 72046,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72046#pullrequestreview-312379772",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62996e23-4d50-4f79-9c48-6b01f7f93d8a",
        "parentId" : null,
        "authorId" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "body" : "Watch current node only `ServiceTopology` is enabled, no any other feature need to get current node metadata.",
        "createdAt" : "2019-11-06T12:01:50Z",
        "updatedAt" : "2019-11-15T06:38:02Z",
        "lastEditedBy" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "tags" : [
        ]
      }
    ],
    "commit" : "31d623b4d74ceadfad101d36a4710d4406fcf144",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +695,699 @@\tif utilfeature.DefaultFeatureGate.Enabled(features.ServiceTopology) {\n\t\t// Make an informer that selects for our nodename.\n\t\tcurrentNodeInformerFactory := informers.NewSharedInformerFactoryWithOptions(s.Client, s.ConfigSyncPeriod,\n\t\t\tinformers.WithTweakListOptions(func(options *metav1.ListOptions) {\n\t\t\t\toptions.FieldSelector = fields.OneTermEqualSelector(\"metadata.name\", s.NodeRef.Name).String()"
  },
  {
    "id" : "8262e273-7e1b-47e8-bdc3-2872326a43fe",
    "prId" : 71355,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71355#pullrequestreview-186748095",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45e7bc77-3ec5-4ca6-a20b-edbe15afe9fb",
        "parentId" : null,
        "authorId" : "b12b98dd-afb7-414f-b601-04a45e82a4c3",
        "body" : "I would like to factor out this string to group it with other constants but I didn't find a clear place that I could add this. Any suggestions?",
        "createdAt" : "2018-11-22T14:50:37Z",
        "updatedAt" : "2018-12-05T21:43:26Z",
        "lastEditedBy" : "b12b98dd-afb7-414f-b601-04a45e82a4c3",
        "tags" : [
        ]
      },
      {
        "id" : "23d02161-ad88-4dc7-b8c2-8a7395ff1825",
        "parentId" : "45e7bc77-3ec5-4ca6-a20b-edbe15afe9fb",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "The easiest would be in an e2e - we already have some tests that test kube-proxy implementation details.  We really need an e2e-suite for kube-proxy that doesn't need all of the kube suite to run.  ",
        "createdAt" : "2018-11-26T23:51:53Z",
        "updatedAt" : "2018-12-05T21:43:26Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "bc80f1cb-9620-493c-a952-dc480c723fff",
        "parentId" : "45e7bc77-3ec5-4ca6-a20b-edbe15afe9fb",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "There's a precedent for something like `pkg/proxy/apis/well_known_labels.go` (CF pkg/kubelet/apis/well_known_labels.go and pkg/scheduler/api/well_known_labels.go).\r\n\r\nI will accept that as a followup.",
        "createdAt" : "2018-12-19T21:05:00Z",
        "updatedAt" : "2018-12-19T21:07:25Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "284cc82e71cf5b1089f77ccc6434a43116ca699d",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +564,568 @@\tinformerFactory := informers.NewSharedInformerFactoryWithOptions(s.Client, s.ConfigSyncPeriod,\n\t\tinformers.WithTweakListOptions(func(options *v1meta.ListOptions) {\n\t\t\toptions.LabelSelector = \"!service.kubernetes.io/service-proxy-name\"\n\t\t}))\n"
  },
  {
    "id" : "68fc5b51-197e-4e83-9624-a9cbe1c54d7f",
    "prId" : 69340,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69340#pullrequestreview-165256901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b9aae18-f1f1-45a7-b69f-88c906f8cc13",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I thought the flag would always override - the flag reads into the config struct..\r\n\r\n@mtaufen ",
        "createdAt" : "2018-10-11T23:49:33Z",
        "updatedAt" : "2018-10-11T23:49:33Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "4e7a874e-6f1c-4d30-b457-eecad54bc308",
        "parentId" : "3b9aae18-f1f1-45a7-b69f-88c906f8cc13",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "@thockin I did kube-proxy first, as a POC, and it got merged well before all the docs/discussions on the proper way to do things going forward. I didn't realize that there would be a need for per-instance configuration settings as well as those that are shared across all instances. The way kube-proxy specifically works, today, is that it's completely either-or. Either you use a config file, or you use flags. Flags do not override the config file.",
        "createdAt" : "2018-10-11T23:54:23Z",
        "updatedAt" : "2018-10-11T23:54:23Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "f772ec44-c06a-4785-9b1f-8e747360a29d",
        "parentId" : "3b9aae18-f1f1-45a7-b69f-88c906f8cc13",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "blech",
        "createdAt" : "2018-10-16T16:36:02Z",
        "updatedAt" : "2018-10-16T16:36:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "5834f94598b95eac31dfc8d906d570c414091e47",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +221,225 @@// processHostnameOverrideFlag processes hostname-override flag\nfunc (o *Options) processHostnameOverrideFlag() error {\n\t// Check if hostname-override flag is set and use value since configFile always overrides\n\tif len(o.hostnameOverride) > 0 {\n\t\thostName := strings.TrimSpace(o.hostnameOverride)"
  },
  {
    "id" : "5fd5da1d-7055-4183-b9fd-3ff76336a189",
    "prId" : 60379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60379#pullrequestreview-99121648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b4e2183-262b-4a4b-a115-d0a3faf36a63",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Agree with this change. We shouldn't be registering into global flagsets",
        "createdAt" : "2018-02-24T19:52:08Z",
        "updatedAt" : "2018-02-24T19:52:39Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc4426f0403c72e1cbd6eaa28fc87ddeab9ccf4b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +355,359 @@\t}\n\n\topts.AddFlags(cmd.Flags())\n\n\tcmd.MarkFlagFilename(\"config\", \"yaml\", \"yml\", \"json\")"
  },
  {
    "id" : "f836e938-aa20-4a43-ba69-d9afb497f813",
    "prId" : 59176,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59176#pullrequestreview-199333786",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c140cb9e-5475-4604-b878-0eb872e42d82",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "If line 262 is executed, is this still needed ?",
        "createdAt" : "2019-02-02T04:10:49Z",
        "updatedAt" : "2019-02-02T04:11:32Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc16d64368be028b1605ba09f20dbdc862fe24d9",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +262,266 @@\t\to.errCh <- fmt.Errorf(\"content of the proxy server's configuration file was updated\")\n\t}\n\to.errCh <- nil\n}\n"
  },
  {
    "id" : "dc092808-0b66-47ae-9909-9652f32999ef",
    "prId" : 59176,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59176#pullrequestreview-228603441",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ebc76e6-dc28-42ed-8d80-b3b5d755d12b",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "I _think_ this is the cause for https://github.com/kubernetes/kubernetes/issues/76727 since `kube-proxy --cleanup` returns nil error and is expected to exit. cc @vllry @thockin ",
        "createdAt" : "2019-04-19T05:39:23Z",
        "updatedAt" : "2019-04-19T05:39:23Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "d2186b27-269d-40bd-8fb8-43229c17f0e8",
        "parentId" : "6ebc76e6-dc28-42ed-8d80-b3b5d755d12b",
        "authorId" : "4138710b-380a-4011-917f-70ce4f4b9717",
        "body" : "Yep. #76732 is an open change for that, will comment there.",
        "createdAt" : "2019-04-19T06:47:29Z",
        "updatedAt" : "2019-04-19T06:47:29Z",
        "lastEditedBy" : "4138710b-380a-4011-917f-70ce4f4b9717",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc16d64368be028b1605ba09f20dbdc862fe24d9",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +325,329 @@\t\tselect {\n\t\tcase err := <-o.errCh:\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}"
  },
  {
    "id" : "c54c57b9-7910-472e-ae83-cbc282a82510",
    "prId" : 58052,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58052#pullrequestreview-99530991",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e464f9f-c42b-434e-9574-eae15874707a",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This is a FLAG, not code. Someone using the command-line doesn't know what a slice is.  You have to tell them how to use it.  \"A comma-delimited list of IP blocks (e.g. 10.0.0.0/8, 1.2.3.4/32) used to filter addresses local to this node.  Defaults to use all local addresses\".",
        "createdAt" : "2018-02-26T19:32:29Z",
        "updatedAt" : "2018-02-26T19:35:54Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "e8c2e19f-089f-497b-828a-d68b4fc079c8",
        "parentId" : "6e464f9f-c42b-434e-9574-eae15874707a",
        "authorId" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "body" : "ACK, THANKS!",
        "createdAt" : "2018-02-27T01:26:54Z",
        "updatedAt" : "2018-02-27T01:26:54Z",
        "lastEditedBy" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "tags" : [
        ]
      }
    ],
    "commit" : "2edc97bf17cc7e8c6fba1f5b91e270296ea56fab",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +170,174 @@\tfs.BoolVar(&o.config.EnableProfiling, \"profiling\", o.config.EnableProfiling, \"If true enables profiling via web interface on /debug/pprof handler.\")\n\tfs.StringVar(&o.config.IPVS.Scheduler, \"ipvs-scheduler\", o.config.IPVS.Scheduler, \"The ipvs scheduler type when proxy mode is ipvs\")\n\tfs.StringSliceVar(&o.config.NodePortAddresses, \"nodeport-addresses\", o.config.NodePortAddresses,\n\t\t\"A string slice of values which specify the addresses to use for NodePorts. Values may be valid IP blocks (e.g. 1.2.3.0/24, 1.2.3.4/32). The default empty string slice ([]) means to use all local addresses.\")\n\tfs.Var(flag.NewMapStringBool(&o.config.FeatureGates), \"feature-gates\", \"A set of key=value pairs that describe feature gates for alpha/experimental features. \"+"
  },
  {
    "id" : "70625d64-ef19-4445-9384-3d419ae38448",
    "prId" : 55261,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55261#pullrequestreview-75336713",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "994e96ca-7011-45b8-b881-583b22259c18",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Is there a doc or slides or something somewhere that explains the lifecycle of config these days?  It looks crazy complicated, and I am trying to wrap my head around it.\r\n\r\nNewOptions()\r\nApplyDefaults()\r\nAddFlags()\r\n\r\nAt some point we read a config file, too.  Where can I learn more about current state and eventual final state?  Sorry for losing track of this.\r\n",
        "createdAt" : "2017-11-09T06:05:49Z",
        "updatedAt" : "2017-11-09T06:11:28Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a53ee95e9d70ae8d81a4c3ee86a666408eabfd4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +147,151 @@\tfs.IntVar(&options.config.ClientConnection.Burst, \"kube-api-burst\", options.config.ClientConnection.Burst, \"Burst to use while talking with kubernetes apiserver\")\n\tfs.DurationVar(&options.config.UDPIdleTimeout.Duration, \"udp-timeout\", options.config.UDPIdleTimeout.Duration, \"How long an idle UDP connection will be kept open (e.g. '250ms', '2s').  Must be greater than 0. Only applicable for proxy-mode=userspace\")\n\tif options.config.Conntrack.Max == nil {\n\t\toptions.config.Conntrack.Max = utilpointer.Int32Ptr(0)\n\t}"
  },
  {
    "id" : "e9b5666c-d2df-4a25-9c0e-8cbcf87f753c",
    "prId" : 51064,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51064#pullrequestreview-61905663",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f40c4f79-592c-4d52-8b24-76fd1228eada",
        "parentId" : null,
        "authorId" : "87ab1d19-ad39-40d0-a045-817039414280",
        "body" : "Not sure if this has been mentioned but kernelspace does not translate to windowsmode to me. ",
        "createdAt" : "2017-09-07T20:36:03Z",
        "updatedAt" : "2017-09-18T18:12:25Z",
        "lastEditedBy" : "87ab1d19-ad39-40d0-a045-817039414280",
        "tags" : [
        ]
      },
      {
        "id" : "6f8250f8-5609-4a8f-8a76-aa9b5ed52c23",
        "parentId" : "f40c4f79-592c-4d52-8b24-76fd1228eada",
        "authorId" : "86293b18-930b-445d-b6b4-023b31ef478d",
        "body" : "This is used in analogous to userspace. Doesn't necessarily map to windows mode. Can be reused in Linux as well. ",
        "createdAt" : "2017-09-11T17:40:51Z",
        "updatedAt" : "2017-09-18T18:12:25Z",
        "lastEditedBy" : "86293b18-930b-445d-b6b4-023b31ef478d",
        "tags" : [
        ]
      },
      {
        "id" : "c033a951-2402-433e-9c6b-c1b2a458578a",
        "parentId" : "f40c4f79-592c-4d52-8b24-76fd1228eada",
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "\"kernelspace\" doesn't align with the other modes, as they all name specific technologies used (e.g. IPVS, IPTables, ...)",
        "createdAt" : "2017-09-11T18:07:22Z",
        "updatedAt" : "2017-09-18T18:12:25Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8d797afdd933547275b00a69842f357c374e7de",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +79,83 @@\tproxyModeIPTables    = \"iptables\"\n\tproxyModeIPVS        = \"ipvs\"\n\tproxyModeKernelspace = \"kernelspace\"\n)\n"
  },
  {
    "id" : "17935544-9cd7-4b49-8c70-ea27e22bce0a",
    "prId" : 51064,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51064#pullrequestreview-62945955",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ba076a8-d16d-4f61-bf58-65d68ba921bb",
        "parentId" : null,
        "authorId" : "87ab1d19-ad39-40d0-a045-817039414280",
        "body" : "Is this a golint recommendation?",
        "createdAt" : "2017-09-07T20:37:12Z",
        "updatedAt" : "2017-09-18T18:12:25Z",
        "lastEditedBy" : "87ab1d19-ad39-40d0-a045-817039414280",
        "tags" : [
        ]
      },
      {
        "id" : "05d9e956-8bfc-421e-b300-2c893d981ef8",
        "parentId" : "4ba076a8-d16d-4f61-bf58-65d68ba921bb",
        "authorId" : "86293b18-930b-445d-b6b4-023b31ef478d",
        "body" : "This is existing code. Am not sure I understand your question",
        "createdAt" : "2017-09-15T04:54:13Z",
        "updatedAt" : "2017-09-18T18:12:25Z",
        "lastEditedBy" : "86293b18-930b-445d-b6b4-023b31ef478d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8d797afdd933547275b00a69842f357c374e7de",
    "line" : 308,
    "diffHunk" : "@@ -1,1 +552,556 @@\ts.Recorder.Eventf(s.NodeRef, api.EventTypeNormal, \"Starting\", \"Starting kube-proxy.\")\n}\n\nfunc getConntrackMax(config componentconfig.KubeProxyConntrackConfiguration) (int, error) {\n\tif config.Max > 0 {"
  },
  {
    "id" : "9f308a17-a774-4914-92d9-34b428f52b54",
    "prId" : 49137,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49137#pullrequestreview-50886631",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea7737a7-bfc9-4813-ab24-9a9d26eed282",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This gets used as a healthzserver later.",
        "createdAt" : "2017-07-19T12:14:45Z",
        "updatedAt" : "2017-07-19T12:14:45Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d21f37aeeb32cdd4f3c7d5ed0d9764db1e4ebd9",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +463,467 @@\trecorder := eventBroadcaster.NewRecorder(scheme, clientv1.EventSource{Component: \"kube-proxy\", Host: hostname})\n\n\tvar healthzServer *healthcheck.HealthzServer\n\tvar healthzUpdater healthcheck.HealthzUpdater\n\tif len(config.HealthzBindAddress) > 0 {"
  },
  {
    "id" : "65964369-808e-474c-94c9-5e0a7bbd4976",
    "prId" : 48183,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48183#pullrequestreview-46776936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "334db33d-da19-412e-9768-b747c6f4216c",
        "parentId" : null,
        "authorId" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "body" : "To reviewer: this will guarantee the server to exit when `--cleanup-iptables=true`, see code block L603-L610. ",
        "createdAt" : "2017-06-28T08:53:33Z",
        "updatedAt" : "2017-06-28T08:53:36Z",
        "lastEditedBy" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "tags" : [
        ]
      }
    ],
    "commit" : "f12dc94fa969f071fd66bb250731dc60edc7b740",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +448,452 @@\t// We omit creation of pretty much everything if we run in cleanup mode\n\tif cleanupAndExit {\n\t\treturn &ProxyServer{IptInterface: iptInterface, CleanupAndExit: cleanupAndExit}, nil\n\t}\n"
  },
  {
    "id" : "142b272c-8e2d-4cd1-b769-70330317b797",
    "prId" : 47640,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47640#pullrequestreview-66045078",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a3b6c2a-d48f-4c31-a6f8-0c5752ed4403",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "this comment is not helpful.",
        "createdAt" : "2017-09-28T22:03:21Z",
        "updatedAt" : "2017-09-28T22:03:22Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "f167750b-caff-414f-8800-8bbe682c9e45",
        "parentId" : "6a3b6c2a-d48f-4c31-a6f8-0c5752ed4403",
        "authorId" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "body" : "yeah, but I'd like to leave it as-is to keep consistent with what #46047 did :)",
        "createdAt" : "2017-09-29T02:01:24Z",
        "updatedAt" : "2017-09-29T02:01:24Z",
        "lastEditedBy" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "tags" : [
        ]
      }
    ],
    "commit" : "af09159419d5d9fbdc2543e31d38817a659daa27",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +423,427 @@// Run runs the specified ProxyServer.  This should never exit (unless CleanupAndExit is set).\nfunc (s *ProxyServer) Run() error {\n\t// To help debugging, immediately log version\n\tglog.Infof(\"Version: %+v\", version.Get())\n\t// remove iptables rules and exit"
  },
  {
    "id" : "f70d37ef-42d7-4abc-b04b-e12e780d54b4",
    "prId" : 46580,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46580#pullrequestreview-42579918",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60d52617-7608-48e9-85b3-2119c108a36c",
        "parentId" : null,
        "authorId" : "d3504a7e-3f3c-408e-97b5-1a488b36b9c9",
        "body" : "Add this to `--proxy-mode` 's comment?",
        "createdAt" : "2017-06-02T12:27:26Z",
        "updatedAt" : "2017-08-30T02:04:12Z",
        "lastEditedBy" : "d3504a7e-3f3c-408e-97b5-1a488b36b9c9",
        "tags" : [
        ]
      },
      {
        "id" : "239afd20-e7a8-4a42-8bd9-ad0a00482baa",
        "parentId" : "60d52617-7608-48e9-85b3-2119c108a36c",
        "authorId" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "body" : "Okay, will do that.",
        "createdAt" : "2017-06-02T12:59:18Z",
        "updatedAt" : "2017-08-30T02:04:12Z",
        "lastEditedBy" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "tags" : [
        ]
      },
      {
        "id" : "3854331d-60c8-436d-a3f7-ba010f81df10",
        "parentId" : "60d52617-7608-48e9-85b3-2119c108a36c",
        "authorId" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "body" : "Fixed.",
        "createdAt" : "2017-06-07T11:57:53Z",
        "updatedAt" : "2017-08-30T02:04:12Z",
        "lastEditedBy" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ed2b44ca7d4f446533d89e2fb70bf2e4ff3ee79",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +85,89 @@\tproxyModeUserspace = \"userspace\"\n\tproxyModeIPTables  = \"iptables\"\n\tproxyModeIPVS      = \"ipvs\"\n)\n"
  },
  {
    "id" : "3cab35c2-def1-4126-8abd-dd5f8619d207",
    "prId" : 46580,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46580#pullrequestreview-42068914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbe6c9b6-bbb6-4f24-a1f8-d13b280c08c9",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This struct probably needs to be decomposed into smaller pieces rather than the union of all proxy modes.",
        "createdAt" : "2017-06-05T03:32:47Z",
        "updatedAt" : "2017-08-30T02:04:12Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "5fbe04f6-9c25-4c91-9ad7-d8cea207eb14",
        "parentId" : "bbe6c9b6-bbb6-4f24-a1f8-d13b280c08c9",
        "authorId" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "body" : "Yes, actually I have considered the same thing before. But, it will introduce more changes on iptables & userspace proxy.",
        "createdAt" : "2017-06-05T15:11:40Z",
        "updatedAt" : "2017-08-30T02:04:12Z",
        "lastEditedBy" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "tags" : [
        ]
      },
      {
        "id" : "8d3f6fa5-ff4d-40c9-9308-7e550bd6480b",
        "parentId" : "bbe6c9b6-bbb6-4f24-a1f8-d13b280c08c9",
        "authorId" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "body" : "Should we fix it in this PR or another PR later?",
        "createdAt" : "2017-06-05T15:12:26Z",
        "updatedAt" : "2017-08-30T02:04:12Z",
        "lastEditedBy" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ed2b44ca7d4f446533d89e2fb70bf2e4ff3ee79",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +368,372 @@// fields are required.\ntype ProxyServer struct {\n\tClient                 clientset.Interface\n\tEventClient            v1core.EventsGetter\n\tIptInterface           utiliptables.Interface"
  },
  {
    "id" : "84bb66ee-f157-4e17-9530-3608fb94d08f",
    "prId" : 45908,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45908#pullrequestreview-38861819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9e26ee7-83f6-434e-b5a1-be99e1eee618",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Having this in the Options is strange. If it is just for writing, can't be create them locally in the write func?",
        "createdAt" : "2017-05-17T06:56:30Z",
        "updatedAt" : "2017-05-18T14:35:00Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "a29fa5cf-a4f3-4633-96f5-6bb6c52e1c05",
        "parentId" : "e9e26ee7-83f6-434e-b5a1-be99e1eee618",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "I wanted to share the scheme with the `applyDefaults` function, and hopefully also where we set up the event recorder (since it needs a scheme). Is there a better way?",
        "createdAt" : "2017-05-17T13:20:05Z",
        "updatedAt" : "2017-05-18T14:35:00Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "43169605-6833-4011-8dd7-7ad4c6954ee3",
        "parentId" : "e9e26ee7-83f6-434e-b5a1-be99e1eee618",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "It's the only state we have, right? (next to globals) It looks strange in my eyes to have that in options. But I can live with it I guess.",
        "createdAt" : "2017-05-17T13:35:24Z",
        "updatedAt" : "2017-05-18T14:35:00Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "4e771113-4e90-41dd-b8b0-af4c3fde1a35",
        "parentId" : "e9e26ee7-83f6-434e-b5a1-be99e1eee618",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "I could make it a package-level global but was trying to avoid that. The other thing I'll say is that `Options` is really just a struct that holds state/context for running this command, so something like `CommandContext` might be a more appropriate name.",
        "createdAt" : "2017-05-17T13:49:56Z",
        "updatedAt" : "2017-05-18T14:35:00Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "3cdf4a98-6f36-4fbb-b39b-e5fc4142536d",
        "parentId" : "e9e26ee7-83f6-434e-b5a1-be99e1eee618",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Yeah, context sounds much better.",
        "createdAt" : "2017-05-18T07:41:31Z",
        "updatedAt" : "2017-05-18T14:35:00Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "032e2f66521a514d7163a2b9ceb6b089421c4aeb",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +112,116 @@\thealthzPort int32\n\n\tscheme *runtime.Scheme\n\tcodecs serializer.CodecFactory\n}"
  },
  {
    "id" : "2f070c2b-2ed3-4d0d-844c-423f4d99661c",
    "prId" : 45908,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45908#pullrequestreview-39726051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2731c5d7-00b3-4d89-ad0b-391f670e4711",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Does this always write DEFAULT values or effective values after parsing config (e.g. configmap)",
        "createdAt" : "2017-05-23T04:41:48Z",
        "updatedAt" : "2017-05-23T04:44:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "92dca0c4-4e8e-414d-bb09-55c113f6e801",
        "parentId" : "2731c5d7-00b3-4d89-ad0b-391f670e4711",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "@thockin what configmap?",
        "createdAt" : "2017-05-23T12:31:16Z",
        "updatedAt" : "2017-05-23T12:31:16Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "032e2f66521a514d7163a2b9ceb6b089421c4aeb",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +119,123 @@func AddFlags(options *Options, fs *pflag.FlagSet) {\n\tfs.StringVar(&options.ConfigFile, \"config\", options.ConfigFile, \"The path to the configuration file.\")\n\tfs.StringVar(&options.WriteConfigTo, \"write-config-to\", options.WriteConfigTo, \"If set, write the default configuration values to this file and exit.\")\n\tfs.BoolVar(&options.CleanupAndExit, \"cleanup-iptables\", options.CleanupAndExit, \"If true cleanup iptables rules and exit.\")\n"
  },
  {
    "id" : "6e1be96a-10bb-494b-9e52-fb1b86e0dbaa",
    "prId" : 45889,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45889#pullrequestreview-38729330",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59f556c5-e2e5-4984-bd50-ec96b5cfd26a",
        "parentId" : null,
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "As the comment in codes: `All flags below here are deprecated and will eventually be removed`, do we really need to add a new flag? Maybe letting user configure this through componentconfig :)",
        "createdAt" : "2017-05-16T19:45:32Z",
        "updatedAt" : "2017-05-17T17:27:08Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      },
      {
        "id" : "216af484-9b56-4a35-9bdb-bd0467e638b4",
        "parentId" : "59f556c5-e2e5-4984-bd50-ec96b5cfd26a",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "The problem is that all our setups are still using flags (test clusters, kubemark). I wouldn't like to block using this flag on migration to component config.",
        "createdAt" : "2017-05-17T06:18:31Z",
        "updatedAt" : "2017-05-17T17:27:08Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "9b5d50b3-319c-43d0-91df-ed2936e12609",
        "parentId" : "59f556c5-e2e5-4984-bd50-ec96b5cfd26a",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I thnk it's appropriate to have a flag like this - I am assuming it is not generally going to be on, and it's not a \"knob\" but a very fundamental operating mode, not something users would change except to debug?",
        "createdAt" : "2017-05-17T16:50:33Z",
        "updatedAt" : "2017-05-17T17:27:08Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "121fabd6-ac24-49bf-8dcb-e3f09131ba95",
        "parentId" : "59f556c5-e2e5-4984-bd50-ec96b5cfd26a",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yeah - that was also my way of thinking.",
        "createdAt" : "2017-05-17T17:02:32Z",
        "updatedAt" : "2017-05-17T17:27:08Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "45ed99c3a68fd26056b7839d232ccd80bf42c35d",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +147,151 @@\t\toptions.config.Conntrack.TCPCloseWaitTimeout.Duration,\n\t\t\"NAT timeout for TCP connections in the CLOSE_WAIT state\")\n\tfs.BoolVar(&options.config.EnableProfiling, \"profiling\", options.config.EnableProfiling, \"If true enables profiling via web interface on /debug/pprof handler.\")\n\n\tutilfeature.DefaultFeatureGate.AddFlag(fs)"
  },
  {
    "id" : "cca57f74-d601-41be-a0f5-c587b99ae4f1",
    "prId" : 36079,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36079#pullrequestreview-7291192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51bab2fd-c800-4229-80ed-549749c88272",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I dislike all these checks.  Can we find a way to do this more abstractly.  Maybe something like `platformParams := createPlatformParams()` and make that exist in distinct _windows and _linux files?\n",
        "createdAt" : "2016-11-04T19:45:01Z",
        "updatedAt" : "2016-11-07T09:18:41Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "083dd1e2-6b6e-4a5e-b571-2f68651d55f3",
        "parentId" : "51bab2fd-c800-4229-80ed-549749c88272",
        "authorId" : "0ac5d6cd-da87-46a2-9b30-0d21db1063a2",
        "body" : "@thockin right now, there's _only_ three of such checks and we can't see a quick and clear way for us to add this in time to have it in 1.5. Again, and as above, we'll have this in consideration for the next release.\nAlso, this may even go away as Windows Containers evolve.\n",
        "createdAt" : "2016-11-04T21:53:57Z",
        "updatedAt" : "2016-11-07T09:18:41Z",
        "lastEditedBy" : "0ac5d6cd-da87-46a2-9b30-0d21db1063a2",
        "tags" : [
        ]
      }
    ],
    "commit" : "562d0756ef696639d6dc5209b8b708ab65290a46",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +146,150 @@\texecer := exec.New()\n\n\tif runtime.GOOS == \"windows\" {\n\t\tnetshInterface = utilnetsh.New(execer)\n\t} else {"
  },
  {
    "id" : "d6e88c42-386f-45b1-b9c5-b5250b077a4b",
    "prId" : 34727,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34727#pullrequestreview-6250304",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65ba5b66-0b9d-4418-a9c4-d72a3701b6b9",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Is it intentional to duplicate all the config values here? Feels like a lot of bloat instead of just leaving the config reference in here (we have that at many places in other component as well, unfortunately).\n",
        "createdAt" : "2016-10-19T08:11:27Z",
        "updatedAt" : "2017-05-01T22:05:34Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "327d5479-4b17-4f42-950f-94f2c985e905",
        "parentId" : "65ba5b66-0b9d-4418-a9c4-d72a3701b6b9",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I tend to agree - the more places this is replicated the harder it becomes to keep correct.\n",
        "createdAt" : "2016-10-19T16:53:35Z",
        "updatedAt" : "2017-05-01T22:05:34Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "6a4792c4-d061-4677-bbe3-42bb13b9a0f1",
        "parentId" : "65ba5b66-0b9d-4418-a9c4-d72a3701b6b9",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Though I feel lik the definition of the struct should be in the callee - it is the Server package's job to define what args it needs, and the main package's job to provide those args..\n",
        "createdAt" : "2016-10-19T16:55:26Z",
        "updatedAt" : "2017-05-01T22:05:34Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "fdd8d986-c82f-495f-91a2-925fcf063cc8",
        "parentId" : "65ba5b66-0b9d-4418-a9c4-d72a3701b6b9",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "This is intentional. There is 1 struct for configuration (`componentconfig.KubeProxyConfiguration`) and 1 struct for runtime (`ProxyServer`). The runtime struct is used to run the component, and the config struct is the source of the configuration that is used to generate the runtime struct. We do **not** want to include the config struct inside the runtime struct.\n",
        "createdAt" : "2016-10-28T14:13:30Z",
        "updatedAt" : "2017-05-01T22:05:34Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "5a98520c-b7fc-4c1d-80a3-df6e781150e8",
        "parentId" : "65ba5b66-0b9d-4418-a9c4-d72a3701b6b9",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Also, it's not required that you go from config struct to runtime struct. You could create only a runtime struct and use that to run the component. That is the contract for running. The config struct is a helper to go from a human-editable config file to runtime.\n",
        "createdAt" : "2016-10-28T14:16:45Z",
        "updatedAt" : "2017-05-01T22:05:34Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "43cb024402e6992418b2197228889633b82ddb75",
    "line" : 298,
    "diffHunk" : "@@ -1,1 +294,298 @@\tConntrackConfiguration componentconfig.KubeProxyConntrackConfiguration\n\tConntracker            Conntracker // if nil, ignored\n\tProxyMode              string\n\tNodeRef                *clientv1.ObjectReference\n\tCleanupAndExit         bool"
  },
  {
    "id" : "a29a16c9-770f-4cbc-832e-cca10d8122c4",
    "prId" : 34727,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34727#pullrequestreview-11304983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df7f0be0-9972-4efb-b1d6-a82743dbfd19",
        "parentId" : null,
        "authorId" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "body" : "+1",
        "createdAt" : "2016-12-04T23:15:41Z",
        "updatedAt" : "2017-05-01T22:05:34Z",
        "lastEditedBy" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "tags" : [
        ]
      }
    ],
    "commit" : "43cb024402e6992418b2197228889633b82ddb75",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +160,164 @@\n// Validate validates all the required options.\nfunc (o Options) Validate(args []string) error {\n\tif len(args) != 0 {\n\t\treturn errors.New(\"no arguments are supported\")"
  },
  {
    "id" : "0078bbb4-fcb5-492c-8789-88bccde368ee",
    "prId" : 34727,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34727#pullrequestreview-35244198",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecc5e136-99ef-4a40-93ed-a890a8a98c90",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "@MrHohn @nicksardo since you're close to this particular point",
        "createdAt" : "2017-04-27T18:28:54Z",
        "updatedAt" : "2017-05-01T22:05:34Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "1d8f8c1c-11a1-42f0-a45d-934498c3b4c1",
        "parentId" : "ecc5e136-99ef-4a40-93ed-a890a8a98c90",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "It would be nice if we didn't change features at the same time as refactoring.",
        "createdAt" : "2017-04-27T18:29:15Z",
        "updatedAt" : "2017-05-01T22:05:34Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "fec963ff-0e6f-4841-9642-45e5aa052527",
        "parentId" : "ecc5e136-99ef-4a40-93ed-a890a8a98c90",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "There should be no change in functionality. If there is, it was unintentional and I will fix it. What are you seeing as changed?",
        "createdAt" : "2017-04-27T18:50:10Z",
        "updatedAt" : "2017-05-01T22:05:34Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "d22511e3-1bee-4f65-9517-81c9617082ec",
        "parentId" : "ecc5e136-99ef-4a40-93ed-a890a8a98c90",
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "It seems that the deprecated healthzPort flag is being handled by applyDeprecatedHealthzPortToConfig(). So it would behave the same as before. This LGTM.",
        "createdAt" : "2017-04-27T23:01:54Z",
        "updatedAt" : "2017-05-01T22:05:34Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      }
    ],
    "commit" : "43cb024402e6992418b2197228889633b82ddb75",
    "line" : 608,
    "diffHunk" : "@@ -1,1 +548,552 @@\n\t// Start up a webserver if requested\n\tif len(s.HealthzBindAddress) > 0 {\n\t\thttp.HandleFunc(\"/proxyMode\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\tfmt.Fprintf(w, \"%s\", s.ProxyMode)"
  },
  {
    "id" : "a61aa7a1-d6ec-45df-8acf-b7cd519ee533",
    "prId" : 34727,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34727#pullrequestreview-35193507",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acb7e860-f1c1-4bff-9bb4-473b56d4d537",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Dropping \"Conntrack\" loses information",
        "createdAt" : "2017-04-27T18:29:57Z",
        "updatedAt" : "2017-05-01T22:05:34Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "e8c9a2a0-0492-4584-a1c4-34410fc4de0c",
        "parentId" : "acb7e860-f1c1-4bff-9bb4-473b56d4d537",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "The function signature has changed to `getConntrackMax(config componentconfig.KubeProxyConntrackConfiguration)`, where `config` is as `KubeProxyConntrackConfiguration`.",
        "createdAt" : "2017-04-27T18:49:49Z",
        "updatedAt" : "2017-05-01T22:05:34Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "4b812c76-5887-4eab-b2d8-60e381efe3be",
        "parentId" : "acb7e860-f1c1-4bff-9bb4-473b56d4d537",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Would calling it `conntrackConfig` be better?",
        "createdAt" : "2017-04-27T18:54:39Z",
        "updatedAt" : "2017-05-01T22:05:34Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "43cb024402e6992418b2197228889633b82ddb75",
    "line" : 705,
    "diffHunk" : "@@ -1,1 +640,644 @@\t\treturn int(config.Max), nil\n\t}\n\tif config.MaxPerCore > 0 {\n\t\tfloor := int(config.Min)\n\t\tscaled := int(config.MaxPerCore) * runtime.NumCPU()"
  },
  {
    "id" : "eeaf2c41-2b22-4c31-b65c-584bf3b95f11",
    "prId" : 29732,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96916455-3d61-4200-8101-412af962c89c",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Why is this simpler?\n",
        "createdAt" : "2016-08-17T19:26:50Z",
        "updatedAt" : "2016-08-17T19:26:50Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "c67a1fbb-dd14-4245-806a-6d1d6d659fb4",
        "parentId" : "96916455-3d61-4200-8101-412af962c89c",
        "authorId" : "61a9a744-a5c3-4fab-b291-e721679fb5fd",
        "body" : "It' s according to the go style guide advises,  when  the last \"if\" return,   it needn't \"else\".\n",
        "createdAt" : "2016-08-17T19:46:47Z",
        "updatedAt" : "2016-08-17T19:46:47Z",
        "lastEditedBy" : "61a9a744-a5c3-4fab-b291-e721679fb5fd",
        "tags" : [
        ]
      },
      {
        "id" : "ffdc235f-b56c-4578-b70f-f58c8ffdac95",
        "parentId" : "96916455-3d61-4200-8101-412af962c89c",
        "authorId" : "61a9a744-a5c3-4fab-b291-e721679fb5fd",
        "body" : "oh, sorry, it's about indent-error-flow (https://github.com/golang/go/wiki/CodeReviewComments#indent-error-flow), but here the else can be omitted, I think, it's unnecessary.\n",
        "createdAt" : "2016-08-18T00:21:13Z",
        "updatedAt" : "2016-08-18T00:21:13Z",
        "lastEditedBy" : "61a9a744-a5c3-4fab-b291-e721679fb5fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee567e1ea087faa91c0b5f5485fcc9c17e2d4081",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +342,346 @@\t\treturn int(config.ConntrackMax), nil\n\t}\n\tif config.ConntrackMaxPerCore > 0 {\n\t\treturn (int(config.ConntrackMaxPerCore) * runtime.NumCPU()), nil\n\t}"
  },
  {
    "id" : "1654c9a5-f341-413b-8ac7-fa9a111b10af",
    "prId" : 20496,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a68b98fd-3e96-4e90-b6e0-10275460e570",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This should stay V(2)\n",
        "createdAt" : "2016-02-07T21:37:31Z",
        "updatedAt" : "2016-02-08T11:12:24Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "9925cddc110158666e57e4de0cfac5dd94a0b158",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +204,208 @@\t\tendpointsHandler = proxierIptables\n\t\t// No turning back. Remove artifacts that might still exist from the userspace Proxier.\n\t\tglog.V(0).Info(\"Tearing down userspace rules.\")\n\t\tuserspace.CleanupLeftovers(iptInterface)\n\t} else {"
  },
  {
    "id" : "8a12c6ed-aba6-4af0-99bc-693ffbc90573",
    "prId" : 20496,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1ec5f67-8b29-4454-9f11-724845c475d4",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "should stay V(2) I think\n",
        "createdAt" : "2016-02-07T21:37:51Z",
        "updatedAt" : "2016-02-08T11:12:24Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "9925cddc110158666e57e4de0cfac5dd94a0b158",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +227,231 @@\t\tproxier = proxierUserspace\n\t\t// Remove artifacts from the pure-iptables Proxier.\n\t\tglog.V(0).Info(\"Tearing down pure-iptables proxy rules.\")\n\t\tiptables.CleanupLeftovers(iptInterface)\n\t}"
  },
  {
    "id" : "e46d66f5-1120-4214-b6c6-e9ccccbaf9f4",
    "prId" : 20464,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be0b3a96-2afc-4ff9-ad37-7a06a66f1e74",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "do we actually store what getProxyMode returns back into this? (I haven't checked)\n",
        "createdAt" : "2016-02-02T19:46:55Z",
        "updatedAt" : "2016-02-02T20:45:35Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "27afaeca-040d-4ba4-b4f1-a08ae1317520",
        "parentId" : "be0b3a96-2afc-4ff9-ad37-7a06a66f1e74",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "More directly, this will say userspace if we don't have the right iptables version right?\n",
        "createdAt" : "2016-02-02T19:47:26Z",
        "updatedAt" : "2016-02-02T20:45:35Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "7be8623b-cff8-488b-ba86-ea3e3ccc440c",
        "parentId" : "be0b3a96-2afc-4ff9-ad37-7a06a66f1e74",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "The NewProxyServer() call sets it.\n",
        "createdAt" : "2016-02-02T20:44:11Z",
        "updatedAt" : "2016-02-02T20:45:35Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ed83ad4f94b94a80d89eded18eaffd5cdd5d63b",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +273,277 @@\tif s.Config.HealthzPort > 0 {\n\t\thttp.HandleFunc(\"/proxyMode\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\tfmt.Fprintf(w, \"%s\", s.ProxyMode)\n\t\t})\n\t\tgo util.Until(func() {"
  },
  {
    "id" : "14c992f1-9077-49e3-8093-a4da7952bbe4",
    "prId" : 19182,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97768fd9-cb0f-4d72-98de-defcea39ee07",
        "parentId" : null,
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "not part of this change, but should s.birthCry(), line 326, be just before SyncLoop(), line 353 ?\n",
        "createdAt" : "2015-12-30T04:05:25Z",
        "updatedAt" : "2015-12-30T23:46:50Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      },
      {
        "id" : "6b70440a-9680-4baa-aa56-81c95f7dd610",
        "parentId" : "97768fd9-cb0f-4d72-98de-defcea39ee07",
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "looks good overall.. minor nit..\n",
        "createdAt" : "2015-12-30T04:08:32Z",
        "updatedAt" : "2015-12-30T23:46:50Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      },
      {
        "id" : "a8f806ef-9a3b-4214-af37-01c18813d17a",
        "parentId" : "97768fd9-cb0f-4d72-98de-defcea39ee07",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "done\n",
        "createdAt" : "2015-12-30T19:13:23Z",
        "updatedAt" : "2015-12-30T23:46:50Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "da0ac31182ffeebde65f72e09bc12e1af20dd73a",
    "line" : 142,
    "diffHunk" : "@@ -1,1 +333,337 @@\t}\n\n\t// Tune conntrack, if requested\n\tif s.Conntracker != nil {\n\t\tif s.Config.ConntrackMax > 0 {"
  },
  {
    "id" : "b1f621fa-13ca-451f-95c8-1b5a0afa6bf5",
    "prId" : 19182,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63031f0a-8876-46bc-b0ac-1ffede5ce0ba",
        "parentId" : null,
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "should this be time.Duration\n",
        "createdAt" : "2015-12-30T04:08:24Z",
        "updatedAt" : "2015-12-30T23:46:50Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      },
      {
        "id" : "ff851218-3a0d-46f2-aebd-3be664804fbe",
        "parentId" : "63031f0a-8876-46bc-b0ac-1ffede5ce0ba",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "As previous - it can't be any finer than seconds, so I thought simpler was better.  If you think it's clearer I can change it, but it will involve getting the value back out by .Seconds() (float64) and then casting to int.\n",
        "createdAt" : "2015-12-30T19:17:20Z",
        "updatedAt" : "2015-12-30T23:46:50Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "da0ac31182ffeebde65f72e09bc12e1af20dd73a",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +70,74 @@\tKubeAPIBurst                   int\n\tUDPIdleTimeout                 time.Duration\n\tConntrackMax                   int\n\tConntrackTCPTimeoutEstablished int // seconds\n}"
  },
  {
    "id" : "63df7d53-25e5-4ba9-a490-196c8295d516",
    "prId" : 18600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf1871d9-fe48-4608-8cf2-78a2cb07a112",
        "parentId" : null,
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "can we validate during flag parsing ?\n",
        "createdAt" : "2016-01-27T00:01:46Z",
        "updatedAt" : "2016-01-28T23:48:40Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      },
      {
        "id" : "50fc2276-db8c-45af-bac2-9d24acc84941",
        "parentId" : "cf1871d9-fe48-4608-8cf2-78a2cb07a112",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "DOne\n",
        "createdAt" : "2016-01-28T21:19:01Z",
        "updatedAt" : "2016-01-28T23:48:40Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ebbeb3c8c5fd54f1f06004f1e0b3c8923b07e03",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +209,213 @@\t\t\tnet.ParseIP(config.BindAddress),\n\t\t\tiptInterface,\n\t\t\t*utilnet.ParsePortRangeOrDie(config.PortRange),\n\t\t\tconfig.IPTablesSyncPeriod.Duration,\n\t\t\tconfig.UDPIdleTimeout.Duration,"
  },
  {
    "id" : "b4f0ed22-936d-4a3c-8a73-686f9fc8a29b",
    "prId" : 14310,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95fadf45-36f2-4ca6-bdbf-615a97b1501c",
        "parentId" : null,
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "if-check can be done sooner in the function\n",
        "createdAt" : "2015-09-21T23:54:34Z",
        "updatedAt" : "2015-09-22T01:06:45Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      },
      {
        "id" : "17a4f3a2-4819-42e4-86e8-4bf377f9b3ed",
        "parentId" : "95fadf45-36f2-4ca6-bdbf-615a97b1501c",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Does it matter?  We don't have a clear \"check preconditions\" block so I put it near where it is used.\n",
        "createdAt" : "2015-09-21T23:59:00Z",
        "updatedAt" : "2015-09-22T01:06:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd3cd82a1208d35e6cb2e6552d933128bde281f5",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +186,190 @@\tipt := utiliptables.New(execer, dbus, protocol)\n\n\tif !checkKnownProxyMode(s.ProxyMode) {\n\t\tglog.Fatalf(\"Unknown proxy-mode flag: %s\", s.ProxyMode)\n\t}"
  },
  {
    "id" : "7e9f9b03-dc97-4ff8-a833-dc671ad6a95d",
    "prId" : 12981,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a40cd7c-e610-4260-a7e7-e6b5d03db7e2",
        "parentId" : null,
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "It would be awesome if this could return an error if there were problems during either of the teardowns (so that the exit code of the proc was non-zero).\n",
        "createdAt" : "2015-08-20T17:24:21Z",
        "updatedAt" : "2015-08-21T18:44:20Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      },
      {
        "id" : "a775ec41-3a88-4bbc-93cd-54e0ec0d8349",
        "parentId" : "9a40cd7c-e610-4260-a7e7-e6b5d03db7e2",
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "I'll do that, just need to find what the k8s idiom is for returning 0-n errors. We want to continue trying to tear down rules in `TearDownIptablesProxierRules` and `TearDownUserspaceProxierRules` even if one fails so right now they just `glog.Errorf(...)` errors instead of returning them.\n",
        "createdAt" : "2015-08-20T18:21:49Z",
        "updatedAt" : "2015-08-21T18:44:20Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "06baaec4-011a-4655-83ad-8a2173303c95",
        "parentId" : "9a40cd7c-e610-4260-a7e7-e6b5d03db7e2",
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "I like that they continue to tear down rules - I don't want that part to\nchange. I just want the caller of the proc to know whether the teardown was\nclean or not.\n\nOn Thu, Aug 20, 2015 at 2:22 PM, Benjamin Elder notifications@github.com\nwrote:\n\n> In cmd/kube-proxy/app/server.go\n> https://github.com/kubernetes/kubernetes/pull/12981#discussion_r37563400\n> :\n> \n> >  func (s *ProxyServer) Run(_ []string) error {\n> > -   protocol := utiliptables.ProtocolIpv4\n> > -   if s.BindAddress.To4() == nil {\n> > -       protocol = utiliptables.ProtocolIpv6\n> > -   }\n> >   +\n> > -   // remove iptables rules and exit\n> > -   if s.CleanupAndExit {\n> > -       execer := exec.New()\n> > -       ipt := utiliptables.New(execer, protocol)\n> > -       userspace.TearDownIptablesProxierRules(ipt)\n> > -       iptables.TearDownUserspaceProxierRules(ipt)\n> > -       return nil\n> \n> I'll do that, just need to find what the k8s idiom is for returning 0-n\n> errors. We want to continue trying to tear down rules in\n> TearDownIptablesProxierRules and TearDownUserspaceProxierRules even if\n> one fails so right now they just glog.Errorf(...) errors instead of\n> returning them.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/12981/files#r37563400.\n",
        "createdAt" : "2015-08-20T18:28:29Z",
        "updatedAt" : "2015-08-21T18:44:20Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      },
      {
        "id" : "8412d568-efc2-4a7d-93b4-e7de8192730b",
        "parentId" : "9a40cd7c-e610-4260-a7e7-e6b5d03db7e2",
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "Right. So I need to find the k8s way to combine and return errors at the\nend (perhaps `[]error` ?).\nThat or we could just return a `bool encounteredError` since we already log\nthe errors in the method.\n\nOn Thu, Aug 20, 2015 at 2:30 PM, James DeFelice notifications@github.com\nwrote:\n\n> In cmd/kube-proxy/app/server.go\n> https://github.com/kubernetes/kubernetes/pull/12981#discussion_r37564272\n> :\n> \n> >  func (s *ProxyServer) Run(_ []string) error {\n> > -   protocol := utiliptables.ProtocolIpv4\n> > -   if s.BindAddress.To4() == nil {\n> > -       protocol = utiliptables.ProtocolIpv6\n> > -   }\n> >   +\n> > -   // remove iptables rules and exit\n> > -   if s.CleanupAndExit {\n> > -       execer := exec.New()\n> > -       ipt := utiliptables.New(execer, protocol)\n> > -       userspace.TearDownIptablesProxierRules(ipt)\n> > -       iptables.TearDownUserspaceProxierRules(ipt)\n> > -       return nil\n> \n> I like that they continue to tear down rules - I don't want that part to\n> change. I just want the caller of the proc to know whether the teardown was\n> clean or not.\n> … <#14f4c60207fcdf36_>\n> On Thu, Aug 20, 2015 at 2:22 PM, Benjamin Elder notifications@github.com\n> wrote: In cmd/kube-proxy/app/server.go <\n> https://github.com/kubernetes/kubernetes/pull/12981#discussion_r37563400>\n> : > func (s *ProxyServer) Run(_ []string) error { > + protocol :=\n> utiliptables.ProtocolIpv4 > + if s.BindAddress.To4() == nil { > + protocol\n> = utiliptables.ProtocolIpv6 > + } > + > + // remove iptables rules and exit\n> \n> > - if s.CleanupAndExit { > + execer := exec.New() > + ipt :=\n> >   utiliptables.New(execer, protocol) > +\n> >   userspace.TearDownIptablesProxierRules(ipt) > +\n> >   iptables.TearDownUserspaceProxierRules(ipt) > + return nil I'll do that,\n> >   just need to find what the k8s idiom is for returning 0-n errors. We want\n> >   to continue trying to tear down rules in TearDownIptablesProxierRules and\n> >   TearDownUserspaceProxierRules even if one fails so right now they just\n> >   glog.Errorf(...) errors instead of returning them. — Reply to this email\n> >   directly or view it on GitHub <\n> >   https://github.com/kubernetes/kubernetes/pull/12981/files#r37563400>.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/12981/files#r37564272.\n",
        "createdAt" : "2015-08-20T18:32:33Z",
        "updatedAt" : "2015-08-21T18:44:20Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "008d769c-91e0-43cc-b1aa-ff39e8b1002c",
        "parentId" : "9a40cd7c-e610-4260-a7e7-e6b5d03db7e2",
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "I'm fine with a bool as long as the error messages remain logged.\n\nOn Thu, Aug 20, 2015 at 2:33 PM, Benjamin Elder notifications@github.com\nwrote:\n\n> In cmd/kube-proxy/app/server.go\n> https://github.com/kubernetes/kubernetes/pull/12981#discussion_r37564738\n> :\n> \n> >  func (s *ProxyServer) Run(_ []string) error {\n> > -   protocol := utiliptables.ProtocolIpv4\n> > -   if s.BindAddress.To4() == nil {\n> > -       protocol = utiliptables.ProtocolIpv6\n> > -   }\n> >   +\n> > -   // remove iptables rules and exit\n> > -   if s.CleanupAndExit {\n> > -       execer := exec.New()\n> > -       ipt := utiliptables.New(execer, protocol)\n> > -       userspace.TearDownIptablesProxierRules(ipt)\n> > -       iptables.TearDownUserspaceProxierRules(ipt)\n> > -       return nil\n> \n> Right. So I need to find the k8s way to combine and return errors at the\n> end (perhaps `[]error` ?). That or we could just return a `bool\n> encounteredError` since we already log the errors in the method.\n> … <#14f4c62f3799185b_>\n> On Thu, Aug 20, 2015 at 2:30 PM, James DeFelice notifications@github.com\n> wrote: In cmd/kube-proxy/app/server.go <\n> https://github.com/kubernetes/kubernetes/pull/12981#discussion_r37564272>\n> : > func (s *ProxyServer) Run(_ []string) error { > + protocol :=\n> utiliptables.ProtocolIpv4 > + if s.BindAddress.To4() == nil { > + protocol\n> = utiliptables.ProtocolIpv6 > + } > + > + // remove iptables rules and exit\n> \n> > - if s.CleanupAndExit { > + execer := exec.New() > + ipt :=\n> >   utiliptables.New(execer, protocol) > +\n> >   userspace.TearDownIptablesProxierRules(ipt) > +\n> >   iptables.TearDownUserspaceProxierRules(ipt) > + return nil I like that they\n> >   continue to tear down rules - I don't want that part to change. I just want\n> >   the caller of the proc to know whether the teardown was clean or not. …\n> >   <#14f4c60207fcdf36_> On Thu, Aug 20, 2015 at 2:22 PM, Benjamin Elder <\n> >   notifications@github.com> wrote: In cmd/kube-proxy/app/server.go <\n> >   https://github.com/kubernetes/kubernetes/pull/12981#discussion_r37563400>\n> >   : > func (s *ProxyServer) Run(_ []string) error { > + protocol :=\n> >   utiliptables.ProtocolIpv4 > + if s.BindAddress.To4() == nil { > + protocol\n> >   = utiliptables.ProtocolIpv6 > + } > + > + // remove iptables rules and exit\n> > - if s.CleanupAndExit { > + execer := exec.New() > + ipt :=\n> >   utiliptables.New(execer, protocol) > +\n> >   userspace.TearDownIptablesProxierRules(ipt) > +\n> >   iptables.TearDownUserspaceProxierRules(ipt) > + return nil I'll do that,\n> >   just need to find what the k8s idiom is for returning 0-n errors. We want\n> >   to continue trying to tear down rules in TearDownIptablesProxierRules and\n> >   TearDownUserspaceProxierRules even if one fails so right now they just\n> >   glog.Errorf(...) errors instead of returning them. — Reply to this email\n> >   directly or view it on GitHub <\n> >   https://github.com/kubernetes/kubernetes/pull/12981/files#r37563400>. —\n> >   Reply to this email directly or view it on GitHub <\n> >   https://github.com/kubernetes/kubernetes/pull/12981/files#r37564272>.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/12981/files#r37564738.\n",
        "createdAt" : "2015-08-20T18:34:43Z",
        "updatedAt" : "2015-08-21T18:44:20Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      },
      {
        "id" : "7f9f5d1a-a9eb-461e-903e-9cd95e8bb885",
        "parentId" : "9a40cd7c-e610-4260-a7e7-e6b5d03db7e2",
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "Looks like `pkg/util/errors` is the way to go.\n",
        "createdAt" : "2015-08-20T18:35:32Z",
        "updatedAt" : "2015-08-21T18:44:20Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      }
    ],
    "commit" : "81ab51709a4f6312f79bee7ffe0fa7d338abd750",
    "line" : null,
    "diffHunk" : "@@ -1,1 +112,116 @@\t\t\treturn errors.New(\"Encountered an error while tearing down rules.\")\n\t\t}\n\t\treturn nil\n\t}\n"
  }
]