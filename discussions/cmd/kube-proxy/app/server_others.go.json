[
  {
    "id" : "3f13b2b0-1ccc-450c-a4f4-e6c28d132258",
    "prId" : 100913,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100913#pullrequestreview-644584254",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23f14573-03ea-4d4a-863f-c181c607fd55",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "\"doesn't support\"\r\nalso, no need to link to the PR; the comment is explanation enough",
        "createdAt" : "2021-04-26T11:58:16Z",
        "updatedAt" : "2021-04-26T12:33:48Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      }
    ],
    "commit" : "c842cc5247c66630c88c7dc8235862a1146c595e",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +368,372 @@\tif proxyMode == proxyModeUserspace {\n\t\t// userspace mode doesn't support endpointslice.\n\t\tuseEndpointSlices = false\n\t}\n"
  },
  {
    "id" : "9e09862d-d3b9-45b9-899c-6825f76415b7",
    "prId" : 99127,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99127#pullrequestreview-592204368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03f21f10-d3da-4d24-81db-57762fdd6ef7",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "do you think we'll see the day that this fail because IPv4 is disabled in the host? :upside_down_face: ",
        "createdAt" : "2021-02-16T19:37:53Z",
        "updatedAt" : "2021-02-17T16:48:28Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "3f2e7902-af69-4f7d-a479-ec4fe1aedbc8",
        "parentId" : "03f21f10-d3da-4d24-81db-57762fdd6ef7",
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "I doubt any of this code will still be around then. The kernel does not currently support disabling IPv4.",
        "createdAt" : "2021-02-17T13:42:38Z",
        "updatedAt" : "2021-02-17T16:48:28Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      }
    ],
    "commit" : "95c6a488d82465ff00ef3ee0cfadbc91a91de4b5",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +197,201 @@\t\t} else {\n\t\t\tipt[0] = utiliptables.New(execer, utiliptables.ProtocolIPv4)\n\t\t\tipt[1] = iptInterface\n\t\t}\n\t}"
  },
  {
    "id" : "91ac96b9-a6bf-40aa-91ee-147193ef8faa",
    "prId" : 99127,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99127#pullrequestreview-592422583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6bdd5b97-1bca-4ae3-952a-46c07277f62e",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "has `primaryProtocol` the same problem logging the error?",
        "createdAt" : "2021-02-17T17:01:11Z",
        "updatedAt" : "2021-02-17T17:01:11Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "185c0dc3-1c4f-48f6-92de-18b76fcc0d7d",
        "parentId" : "6bdd5b97-1bca-4ae3-952a-46c07277f62e",
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "you mean logging `%!s(func() iptables.Protocol=0x1786e80)` ? No, the problem is that `iptables.Protocol` is a function that returns a string but I was previously treating it as a string. `primaryProtocol` actually is a string.",
        "createdAt" : "2021-02-17T17:03:45Z",
        "updatedAt" : "2021-02-17T17:03:45Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      }
    ],
    "commit" : "95c6a488d82465ff00ef3ee0cfadbc91a91de4b5",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +201,205 @@\t}\n\tif dualStack {\n\t\tklog.V(0).Infof(\"kube-proxy running in dual-stack mode, %s-primary\", iptInterface.Protocol())\n\t} else {\n\t\tklog.V(0).Infof(\"kube-proxy running in single-stack %s mode\", iptInterface.Protocol())"
  },
  {
    "id" : "a16784ae-8bc2-4b89-b84a-6c6527d32283",
    "prId" : 91725,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91725#pullrequestreview-428776903",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e56b547-238e-4489-ad0f-79668cf576c6",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "This makes it seem like you're saying the `utilnode.GetHostname` call specifically detects the IP family...\r\n\r\nEach of the things below here is used for multiple purposes. I don't think labeling the whole section \"detect IP family\" is really accurate. You could just drop the comment.",
        "createdAt" : "2020-06-05T13:32:13Z",
        "updatedAt" : "2020-06-17T12:52:00Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "989014c9-ef97-4413-9d66-82b958e2ccb1",
        "parentId" : "2e56b547-238e-4489-ad0f-79668cf576c6",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "done",
        "createdAt" : "2020-06-11T10:15:29Z",
        "updatedAt" : "2020-06-17T12:52:00Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "56df70b639c5b5bf53076a3483a2e40b8f60c49a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +92,96 @@\t}\n\n\thostname, err := utilnode.GetHostname(config.HostnameOverride)\n\tif err != nil {\n\t\treturn nil, err"
  },
  {
    "id" : "5b9504a0-dd22-41ba-95ce-36b57a673bb1",
    "prId" : 88935,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88935#pullrequestreview-370708383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a072a0eb-bc78-443b-aa6c-4e0223000c17",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "comment?",
        "createdAt" : "2020-03-07T00:30:56Z",
        "updatedAt" : "2020-03-09T20:44:51Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "286d2bda-7dac-40ff-8736-45ea0ff9d285",
        "parentId" : "a072a0eb-bc78-443b-aa6c-4e0223000c17",
        "authorId" : "2cc59e20-7474-4601-ae08-1e230c1461d2",
        "body" : "core idea here was to be resilient to failures in allocators assigning podCIDR. Since this is done asynchronously, we don't want to wait for ever for the podCIDR to be assigned and want to timeout and fail in case it does not happen. 5 minute was a safe timeout. Will add comment capturing above.",
        "createdAt" : "2020-03-07T00:55:45Z",
        "updatedAt" : "2020-03-09T20:44:51Z",
        "lastEditedBy" : "2cc59e20-7474-4601-ae08-1e230c1461d2",
        "tags" : [
        ]
      },
      {
        "id" : "16bd6fb4-8484-4030-90f5-8238b77400a9",
        "parentId" : "a072a0eb-bc78-443b-aa6c-4e0223000c17",
        "authorId" : "2cc59e20-7474-4601-ae08-1e230c1461d2",
        "body" : "Done.",
        "createdAt" : "2020-03-07T01:19:22Z",
        "updatedAt" : "2020-03-09T20:44:51Z",
        "lastEditedBy" : "2cc59e20-7474-4601-ae08-1e230c1461d2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e053fdd08ae00d1bff3dd42a2c034f4810f8a55d",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +70,74 @@// timeoutForNodePodCIDR is the time to wait for allocators to assign a PodCIDR to the\n// node after it is registered.\nvar timeoutForNodePodCIDR = 5 * time.Minute\n\n// NewProxyServer returns a new ProxyServer."
  },
  {
    "id" : "4245dd80-9d5d-4c1f-9133-90e68c2e5e15",
    "prId" : 88935,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88935#pullrequestreview-370708358",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "994cbb39-b665-4721-bf97-e2c269dc42dd",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "```\r\ncase proxyconfigapi.LocalModeClusterCIDR, proxyconfigapi.LocalModeNodeCIDR:\r\n    return mode, nil\r\n```\r\n\r\nor\r\n\r\n```\r\nsupported := sets.String(\r\n    proxyconfigapi.LocalModeClusterCIDR,\r\n    proxyconfigapi.LocalModeNodeCIDR,\r\n)\r\nif !supported.Has(mode) {\r\n    // error\r\n```\r\n",
        "createdAt" : "2020-03-07T00:46:59Z",
        "updatedAt" : "2020-03-09T20:44:51Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "9ca8818c-45f8-4563-ac33-691df4cb0946",
        "parentId" : "994cbb39-b665-4721-bf97-e2c269dc42dd",
        "authorId" : "2cc59e20-7474-4601-ae08-1e230c1461d2",
        "body" : "Ack.",
        "createdAt" : "2020-03-07T00:56:54Z",
        "updatedAt" : "2020-03-09T20:44:51Z",
        "lastEditedBy" : "2cc59e20-7474-4601-ae08-1e230c1461d2",
        "tags" : [
        ]
      },
      {
        "id" : "1951dd2d-132b-4671-8fe6-65e7c6277fd1",
        "parentId" : "994cbb39-b665-4721-bf97-e2c269dc42dd",
        "authorId" : "2cc59e20-7474-4601-ae08-1e230c1461d2",
        "body" : "Done.",
        "createdAt" : "2020-03-07T01:19:10Z",
        "updatedAt" : "2020-03-09T20:44:51Z",
        "lastEditedBy" : "2cc59e20-7474-4601-ae08-1e230c1461d2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e053fdd08ae00d1bff3dd42a2c034f4810f8a55d",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +418,422 @@func getDetectLocalMode(config *proxyconfigapi.KubeProxyConfiguration) (proxyconfigapi.LocalMode, error) {\n\tmode := config.DetectLocalMode\n\tswitch mode {\n\tcase proxyconfigapi.LocalModeClusterCIDR, proxyconfigapi.LocalModeNodeCIDR:\n\t\treturn mode, nil"
  },
  {
    "id" : "576b919f-0d18-49ef-9541-6ce9c3a51b45",
    "prId" : 87748,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87748#pullrequestreview-358681421",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2635164b-80fe-4def-9064-f31a4d937b1e",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "maybe worth a log here (and above) that mode was set to cluster-cidr, but no cluster CIDR was provided",
        "createdAt" : "2020-02-11T17:23:07Z",
        "updatedAt" : "2020-02-22T02:38:02Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "f401939c-be42-4ad4-913a-b16d31349b7f",
        "parentId" : "2635164b-80fe-4def-9064-f31a4d937b1e",
        "authorId" : "2cc59e20-7474-4601-ae08-1e230c1461d2",
        "body" : "Done.",
        "createdAt" : "2020-02-14T02:35:45Z",
        "updatedAt" : "2020-02-22T02:38:02Z",
        "lastEditedBy" : "2cc59e20-7474-4601-ae08-1e230c1461d2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c6956e5bb4f9557e6ba459f1f6bbcb80e3b5b80",
    "line" : 166,
    "diffHunk" : "@@ -1,1 +391,395 @@\t\t\tklog.Warning(\"detect-local-mode set to ClusterCIDR, but no cluster CIDR defined\")\n\t\t\tbreak\n\t\t}\n\n\t\tclusterCIDRs := cidrTuple(config.ClusterCIDR)"
  },
  {
    "id" : "737eaa6b-84c8-4d53-be97-8e8053339ca5",
    "prId" : 83822,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83822#pullrequestreview-307215675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68b18e82-ef16-4dc9-b6d9-98f67413cd73",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "The proxier implementations already sets node IP to 127.0.0.1 if it's nil, wondering if it makes more sense to remove this nil check altogether (see https://github.com/kubernetes/kubernetes/pull/84071 -- closed in favor of this PR).  ",
        "createdAt" : "2019-10-19T14:18:44Z",
        "updatedAt" : "2019-10-25T13:47:16Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "fd0e53ef-e78d-4124-932e-43b57ae08e4e",
        "parentId" : "68b18e82-ef16-4dc9-b6d9-98f67413cd73",
        "authorId" : "a108ef4e-ffb4-4060-8034-2cf30df3892e",
        "body" : "This change _may_ now impact `ipvs.NewProxier()` (I can't tell for sure currently as I'm on mobile only) which used to not necessarily come with a set node IP.\r\n\r\nIs there a reason we cannot just drop line 140 without adding anything else? That's what the code originally used to do, so it seems like the cleaner approach to me with regards to addressing the bug.",
        "createdAt" : "2019-10-19T14:50:50Z",
        "updatedAt" : "2019-10-25T13:47:16Z",
        "lastEditedBy" : "a108ef4e-ffb4-4060-8034-2cf30df3892e",
        "tags" : [
        ]
      },
      {
        "id" : "ec4c1a53-a021-4d88-8d8f-457893119250",
        "parentId" : "68b18e82-ef16-4dc9-b6d9-98f67413cd73",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "IPVS proxier has the same behavior as iptables for nil `nodeIP` (see https://github.com/kubernetes/kubernetes/blob/master/pkg/proxy/ipvs/proxier.go#L406-L409) so agreed with @timoreimann this can just be\r\n```go\r\nif nodeIP.IsUnspecified() {\r\n       nodeIP = utilnode.GetNodeIP(client, hostname)\r\n}\r\n```",
        "createdAt" : "2019-10-19T17:31:57Z",
        "updatedAt" : "2019-10-25T13:47:16Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "0dc208b3-075f-4700-a4fd-b44a23fe197e",
        "parentId" : "68b18e82-ef16-4dc9-b6d9-98f67413cd73",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Should we remove the code in NewProxier implementations that checks for and handles nil?  This is kind of a contract change - they can assume it is non-nil.\r\n\r\nSo I guess from a compat POV this is correct.  From a correctness POV, this is wrong.  At least the iptables module will make a wrong decision based on this information.  IPVS seems only to log it.",
        "createdAt" : "2019-10-23T21:23:37Z",
        "updatedAt" : "2019-10-25T13:47:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "f1d6bf49-f32e-408d-9d7d-8df076e50be8",
        "parentId" : "68b18e82-ef16-4dc9-b6d9-98f67413cd73",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Having the user set the --bind-address seems like the RIGHT answer, but I acknowledge that this is a breaking change and we should fix it.\r\n\r\nCan we enhance the log message to say something like:\r\n````\r\n    klog.V(0).Infof(\"can't determine this node's IP, assuming 127.0.0.1; if this is incorrect, set the --bind-address flag\")\r\n```\r\n\r\nOf course, flags are passe and config files are vogue, and it's harder to reference config file fields.  This is also wrongish in the case of IPv6.",
        "createdAt" : "2019-10-23T21:33:24Z",
        "updatedAt" : "2019-10-25T13:47:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "17e87683-95e3-496c-ae26-da4b66f112c6",
        "parentId" : "68b18e82-ef16-4dc9-b6d9-98f67413cd73",
        "authorId" : "dfd76e41-2089-43f2-b91d-5ac73825e4fb",
        "body" : "> Should we remove the code in NewProxier implementations that checks for and handles nil? This is kind of a contract change - they can assume it is non-nil.\r\n\r\nIf  iptables.NewProxier was only used here, it might be redundant to validate nodeIP `nil` again. But, I found that it was used by https://github.com/kubernetes/kubernetes/blob/master/pkg/kubemark/hollow_proxy.go#L82, so I withdrew the modification here\r\n\r\n\r\n\r\n",
        "createdAt" : "2019-10-24T04:13:36Z",
        "updatedAt" : "2019-10-25T13:47:16Z",
        "lastEditedBy" : "dfd76e41-2089-43f2-b91d-5ac73825e4fb",
        "tags" : [
        ]
      },
      {
        "id" : "2d41846c-64f0-4309-8b4c-d3613c140c37",
        "parentId" : "68b18e82-ef16-4dc9-b6d9-98f67413cd73",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Can we fix that do explicitly pass 127.0.0.1 and remove it from NewProxier?",
        "createdAt" : "2019-10-25T00:18:00Z",
        "updatedAt" : "2019-10-25T13:47:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "9fc201e0-9b31-42c7-8b09-25059201983e",
        "parentId" : "68b18e82-ef16-4dc9-b6d9-98f67413cd73",
        "authorId" : "dfd76e41-2089-43f2-b91d-5ac73825e4fb",
        "body" : "\r\n> Can we fix that do explicitly pass 127.0.0.1 and remove it from NewProxier?\r\n\r\nDone.PTAL\r\n",
        "createdAt" : "2019-10-25T13:47:50Z",
        "updatedAt" : "2019-10-25T13:47:50Z",
        "lastEditedBy" : "dfd76e41-2089-43f2-b91d-5ac73825e4fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3e0ac2951a027f21b185ae6299f0287b9cca638",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +139,143 @@\t\tif nodeIP == nil {\n\t\t\tklog.V(0).Infof(\"can't determine this node's IP, assuming 127.0.0.1; if this is incorrect, please set the --bind-address flag\")\n\t\t\tnodeIP = net.ParseIP(\"127.0.0.1\")\n\t\t}\n\t}"
  },
  {
    "id" : "dfdc687a-d9da-4083-a553-bd92ea8eef90",
    "prId" : 82462,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82462#pullrequestreview-288336579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb6f9d15-88e7-4585-b798-6e68542d71f0",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "nit . should we add a comment explaining that ipt[0] will always be for IPv4 and ipt[1] for IPv6?",
        "createdAt" : "2019-09-12T09:01:52Z",
        "updatedAt" : "2019-12-17T06:50:36Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "fd41ca80-f5f4-444b-a317-0a9ed5b0a926",
        "parentId" : "eb6f9d15-88e7-4585-b798-6e68542d71f0",
        "authorId" : "4138710b-380a-4011-917f-70ce4f4b9717",
        "body" : "Probably. I'm more of a fan of structs, over arrays with conventions, but I just copied the ipvs implementation style.",
        "createdAt" : "2019-09-14T21:20:21Z",
        "updatedAt" : "2019-12-17T06:50:36Z",
        "lastEditedBy" : "4138710b-380a-4011-917f-70ce4f4b9717",
        "tags" : [
        ]
      }
    ],
    "commit" : "23957a6b28927716bbd84216245106866c131f7b",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +152,156 @@\t\t\tklog.V(0).Info(\"creating dualStackProxier for iptables.\")\n\n\t\t\t// Create iptables handlers for both families, one is already created\n\t\t\t// Always ordered as IPv4, IPv6\n\t\t\tvar ipt [2]utiliptables.Interface"
  },
  {
    "id" : "40bb35ce-df82-4812-a3b1-b441072c213b",
    "prId" : 82462,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82462#pullrequestreview-323621143",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f82320e2-b7da-40a4-bbdc-9f131ca467a8",
        "parentId" : null,
        "authorId" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "body" : "Should we remove line 151-166 because they have been moved to `else` condition?",
        "createdAt" : "2019-11-27T11:59:22Z",
        "updatedAt" : "2019-12-17T06:50:36Z",
        "lastEditedBy" : "4b705187-d40c-4e59-968b-5be3a91465c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "23957a6b28927716bbd84216245106866c131f7b",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +180,184 @@\t\t\t)\n\t\t} else { // Create a single-stack proxier.\n\t\t\t// TODO this has side effects that should only happen when Run() is invoked.\n\t\t\tproxier, err = iptables.NewProxier(\n\t\t\t\tiptInterface,"
  },
  {
    "id" : "5d7ce919-d0f0-47e4-bfef-d95a126d8744",
    "prId" : 82462,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82462#pullrequestreview-333519271",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3bff5a5-9fab-4528-94ae-2e0c8e26d075",
        "parentId" : null,
        "authorId" : "58cf89ce-9cc3-4dce-b99b-49ae3682cc9a",
        "body" : "I think this ordering constraint will be surprising for future code changes, and any mistakes won't be noticed until runtime :(\r\n\r\nCan we keep this in arbitrary order here, and move the `if IsIpv6()` check into `NewDualstackProxier` where the interfaces are actually used instead?  (It looks like we'll need to \"duplicate\" not just \"move\", but the key point is that the ordering is no longer important between this code and code elsewhere)\r\n\r\nAn alternative might be inlining NewDualStackProxier here (ie: construct the v4/v6 -specific proxiers and wrap in MetaProxier here and remove the need to ever have a generic `ipt[2]` intermediate)",
        "createdAt" : "2019-11-28T23:18:27Z",
        "updatedAt" : "2019-12-17T06:50:36Z",
        "lastEditedBy" : "58cf89ce-9cc3-4dce-b99b-49ae3682cc9a",
        "tags" : [
        ]
      },
      {
        "id" : "1a52e308-5ec4-433d-b13f-36602fdf7f34",
        "parentId" : "a3bff5a5-9fab-4528-94ae-2e0c8e26d075",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "To be fair, this is copying the ipvs logic.  If we want to raise the bar, we should do so for both proxiers.\r\n\r\nPerhaps, instead of `[2]utiliptables.Interface` it should be a `map[core.IPFamily]utiliptables.Interface`.  Remove order from the equasion, since that seems to be meaningless anyway (and assumed ordering is bound to explode on us some day).",
        "createdAt" : "2019-12-17T19:20:53Z",
        "updatedAt" : "2019-12-17T19:28:26Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "23957a6b28927716bbd84216245106866c131f7b",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +153,157 @@\n\t\t\t// Create iptables handlers for both families, one is already created\n\t\t\t// Always ordered as IPv4, IPv6\n\t\t\tvar ipt [2]utiliptables.Interface\n\t\t\tif iptInterface.IsIpv6() {"
  },
  {
    "id" : "ee361905-f11a-4b14-b102-880e7df338c7",
    "prId" : 82462,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82462#pullrequestreview-324474790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fdf6ff3-c406-42ee-9ee1-d7abd6454bad",
        "parentId" : null,
        "authorId" : "58cf89ce-9cc3-4dce-b99b-49ae3682cc9a",
        "body" : "Ditto, but I acknowledge the pattern existed before this PR :/",
        "createdAt" : "2019-11-28T23:23:32Z",
        "updatedAt" : "2019-12-17T06:50:36Z",
        "lastEditedBy" : "58cf89ce-9cc3-4dce-b99b-49ae3682cc9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "23957a6b28927716bbd84216245106866c131f7b",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +208,212 @@\n\t\t\t// Create iptables handlers for both families, one is already created\n\t\t\t// Always ordered as IPv4, IPv6\n\t\t\tvar ipt [2]utiliptables.Interface\n\t\t\tif iptInterface.IsIpv6() {"
  },
  {
    "id" : "9e8342af-bfec-46e2-846c-176c1e6c1405",
    "prId" : 82462,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82462#pullrequestreview-339028566",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "225658e4-7e48-4423-bce6-3da5d0771847",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "The check should be \r\n\r\n\r\n0. if 1 cidr and `dualstack off` => ok, base case \r\n1. if 1 cidr and `dualstack on` => ok, create single stack proxy\r\n2. if 2 cidrs and `dualstack on` => ok, create dualstack metaproxy\r\n3. if 2 cidrs set and `dualstack off` => error\r\n\r\nThe above might fail if the user turned on the feature and set two cidrs. which we allow.\r\n",
        "createdAt" : "2019-11-30T01:08:12Z",
        "updatedAt" : "2019-12-17T06:50:36Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "af560125-cee4-4f92-85ff-dabfa5ea0717",
        "parentId" : "225658e4-7e48-4423-bce6-3da5d0771847",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "ipvs follows this same logic.  If dual-stack is enabled, make a dual-stack proxier.  We want to diminish the meaning of cluster-cidr here, so I do not think testing that should be used.  TL;DR is that we have no real way to know whether dual-stack is enabled or not except to try it, and even that could change at run time.  Very little cost (I think) to setting up both modes, but we do need to handle failure gracefully if dual-stack is enabled on a single-stack node.",
        "createdAt" : "2019-12-17T19:23:21Z",
        "updatedAt" : "2019-12-17T19:28:26Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "ca6eb4b8-ab14-489c-a45d-6ba5f303afc6",
        "parentId" : "225658e4-7e48-4423-bce6-3da5d0771847",
        "authorId" : "4138710b-380a-4011-917f-70ce4f4b9717",
        "body" : "Thought more about this, I agree with Tim.",
        "createdAt" : "2020-01-07T04:45:24Z",
        "updatedAt" : "2020-01-07T04:45:24Z",
        "lastEditedBy" : "4138710b-380a-4011-917f-70ce4f4b9717",
        "tags" : [
        ]
      }
    ],
    "commit" : "23957a6b28927716bbd84216245106866c131f7b",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +149,153 @@\t\t}\n\n\t\tif utilfeature.DefaultFeatureGate.Enabled(features.IPv6DualStack) {\n\t\t\tklog.V(0).Info(\"creating dualStackProxier for iptables.\")\n"
  },
  {
    "id" : "7a7e9ee0-e11e-457a-8958-f28a5e2c0021",
    "prId" : 82091,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82091#pullrequestreview-281109802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9973d84b-b1eb-4f70-aa6b-8b212f8daa6f",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "What happens if you get here and have not found both?  Maybe comment on why we're confident that can not happen?",
        "createdAt" : "2019-08-28T21:09:27Z",
        "updatedAt" : "2019-08-29T23:38:55Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "931e96c4-62c3-4a6d-8fc8-daf32e4bc048",
        "parentId" : "9973d84b-b1eb-4f70-aa6b-8b212f8daa6f",
        "authorId" : "277fa141-7693-4721-a67d-27e1a0f085a0",
        "body" : "The clusterCIDR is optional. It is ok to specify one, both or none address of ipv4 and ipv6.",
        "createdAt" : "2019-08-28T21:19:50Z",
        "updatedAt" : "2019-08-29T23:38:55Z",
        "lastEditedBy" : "277fa141-7693-4721-a67d-27e1a0f085a0",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef75723564397f7c3bf423553f1c98eff72f58df",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +297,301 @@\t\t\tbreak\n\t\t}\n\t}\n\n\treturn cidrs"
  },
  {
    "id" : "4e309433-f77b-41cb-ba91-ea5eb48d4dc0",
    "prId" : 77167,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77167#pullrequestreview-303613714",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "604a08f7-ace6-4118-9173-be3d4fd6dd18",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "I'm wondering if this is technically a breaking change. Previously if `nodeIP` is nil, kube-proxy defaults to [127.0.0.1 as the node IP](https://github.com/kubernetes/kubernetes/blob/master/pkg/proxy/iptables/proxier.go#L282-L286) but now kube-proxy always exits with error instead of defaulting to local host. ",
        "createdAt" : "2019-10-18T00:05:27Z",
        "updatedAt" : "2019-10-18T00:05:27Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "0b1d4617-8c50-46e1-b9a4-bda6893ed839",
        "parentId" : "604a08f7-ace6-4118-9173-be3d4fd6dd18",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Opened https://github.com/kubernetes/kubernetes/pull/84071 to preserve the original behavior but keep the retries for getting node object. PTAL :) ",
        "createdAt" : "2019-10-18T00:26:18Z",
        "updatedAt" : "2019-10-18T00:26:19Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "2862f3ec94e145b50ab27b2c4ff67e0e50dbfcb5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +145,149 @@\t\tnodeIP = utilnode.GetNodeIP(client, hostname)\n\t\tif nodeIP == nil {\n\t\t\treturn nil, fmt.Errorf(\"unable to get node IP for hostname %s\", hostname)\n\t\t}\n\t}"
  }
]