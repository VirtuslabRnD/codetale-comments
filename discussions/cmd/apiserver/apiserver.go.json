[
  {
    "id" : "48282d7e-ebc2-4812-b761-a988470d7de9",
    "prId" : 2261,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5c4a5bd-de60-4812-8e67-b855d7ef1acb",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Maybe a TODO saying that we'll condense this down to a single port as we collect the necessary functionality to make this work?\n",
        "createdAt" : "2014-11-10T23:07:34Z",
        "updatedAt" : "2014-11-10T23:17:06Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "1acb56e9-ab2a-4639-8b35-6974d9db81c5",
        "parentId" : "c5c4a5bd-de60-4812-8e67-b855d7ef1acb",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "nvm, the doc has a great explanation.\n",
        "createdAt" : "2014-11-10T23:10:14Z",
        "updatedAt" : "2014-11-10T23:17:06Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "53f9d42ed3c83cff5a33feae0fd8249ff20c2f86",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +176,180 @@\tm := master.New(config)\n\n\t// We serve on 3 ports.  See docs/reaching_the_api.md\n\troLocation := \"\"\n\tif *readOnlyPort != 0 {"
  },
  {
    "id" : "60f0cf35-5176-4685-8c38-7899fdcef71e",
    "prId" : 2180,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6480f1e1-2049-476b-9a88-45149bf24967",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This feels like a lot of machinery for what goal?  Why not just bind read-only to all interfaces and tell users not to expose port 80 of the master?  Or put it on a different port and don't expose that...\n",
        "createdAt" : "2014-11-06T04:37:28Z",
        "updatedAt" : "2014-11-06T04:37:28Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "075f4803-9132-42e3-94dc-72575472b5c8",
        "parentId" : "6480f1e1-2049-476b-9a88-45149bf24967",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The scenario is the important interface doesn't exist yet, because it's slow starting. (IRC report of this actually happening prompted this change.)\n\nDoes binding to all addresses magically cause you to also bind to new addresses when they show up? I didn't expect so, hence this retry loop.\n",
        "createdAt" : "2014-11-06T17:43:49Z",
        "updatedAt" : "2014-11-06T17:43:49Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "fe0d0735-c103-4b05-bc1b-f7e90115310e",
        "parentId" : "6480f1e1-2049-476b-9a88-45149bf24967",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Binding to all address is a late-binding \"all\".  Observe:\n\n#\n\n# Bring up a new interface, prove that port 93 is dead\n\n#\n\n# ifconfig eth0:0 10.8.6.7 up\n\n# netcat 10.8.6.7 93 -w1\n\n(UNKNOWN) [10.8.6.7] 93 (?) : Connection refused\n\n# ifconfig eth0:0 10.8.6.7 down\n\n#\n\n# Put something on port 93 and prove it is alive\n\n#\n\n# while true; do date | netcat -l -p 93 -q0; done &\n\n[1] 27041\n\n# netcat localhost 93\n\nFri Nov  7 21:23:34 UTC 2014\n\n# netcat 10.8.6.7 93 -w1\n\n(UNKNOWN) [10.8.6.7] 93 (?) : Connection timed out\n\n#\n\n# Bring up a new interface and see what happens to port 93\n\n#\n\n# ifconfig eth0:0 10.8.6.7 up\n\n# netcat 10.8.6.7 93 -w1\n\nFri Nov  7 21:23:40 UTC 2014\n\nOn Thu, Nov 6, 2014 at 9:44 AM, Daniel Smith notifications@github.com\nwrote:\n\n> In cmd/apiserver/apiserver.go:\n> \n> > @@ -191,7 +191,12 @@ func main() {\n> >         }\n> >         go func() {\n> >             defer util.HandleCrash()\n> > -           glog.Fatal(readOnlyServer.ListenAndServe())\n> > -           for {\n> > -               if err := readOnlyServer.ListenAndServe(); err != nil {\n> > -                   glog.Errorf(\"Unable to listen for read only traffic (%v); will try again.\", err)\n> \n> The scenario is the important interface doesn't exist yet, because it's\n> slow starting. (IRC report of this actually happening prompted this change.)\n> \n> Does binding to all addresses magically cause you to also bind to new\n> addresses when they show up? I didn't expect so, hence this retry loop.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2180/files#r19960624\n> .\n",
        "createdAt" : "2014-11-07T21:26:39Z",
        "updatedAt" : "2014-11-07T21:26:39Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "05449805-da8d-4a65-b09a-1e634d763e15",
        "parentId" : "6480f1e1-2049-476b-9a88-45149bf24967",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "TIL; sure, I can't think of other objections to making this bind to everything.\n",
        "createdAt" : "2014-11-07T21:38:05Z",
        "updatedAt" : "2014-11-07T21:38:05Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1635355637ba65bb409ac85c5392e0979b8fd8c",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +194,198 @@\t\t\tfor {\n\t\t\t\tif err := readOnlyServer.ListenAndServe(); err != nil {\n\t\t\t\t\tglog.Errorf(\"Unable to listen for read only traffic (%v); will try again.\", err)\n\t\t\t\t}\n\t\t\t\ttime.Sleep(15 * time.Second)"
  },
  {
    "id" : "e9a60688-480c-4736-a5b8-ab127ec34f50",
    "prId" : 2122,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65c16a9e-ac41-4dd7-ac3c-e64c30aaa4f2",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Love it, thanks for changing.\n",
        "createdAt" : "2014-11-04T18:05:25Z",
        "updatedAt" : "2014-11-04T18:05:25Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "1668c6f10701c9ee1bec9a952cfbf58e07679a6d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +147,151 @@\tn := net.IPNet(portalNet)\n\n\tauthorizer, err := apiserver.NewAuthorizerFromAuthorizationConfig(*authorizationMode)\n\tif err != nil {\n\t\tglog.Fatalf(\"Invalid Authorization Config: %v\", err)"
  },
  {
    "id" : "ad23f89d-33e3-48d6-a993-fd672a7cc2f3",
    "prId" : 1920,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "993713e3-3dd7-4ca2-b88f-a1794dca62b0",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Explain that rw is on localhost since nginx proxies to it and port 8080 is commonly open on firewalls,\nwhereas we serve ro on PublicAddress:7080 so that kubelets can read.\n",
        "createdAt" : "2014-10-28T20:42:06Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "f4418a36-6291-4676-9734-b8e100c07b29",
        "parentId" : "993713e3-3dd7-4ca2-b88f-a1794dca62b0",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "You did this in the flag descriptions.  Ok.\n",
        "createdAt" : "2014-10-29T15:21:31Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "070c6c044090229068db43b61257f7ada5d15043",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +232,236 @@\tif *readOnlyPort != 0 {\n\t\troLocation = net.JoinHostPort(config.PublicAddress, strconv.Itoa(config.ReadOnlyPort))\n\t}\n\trwLocation := net.JoinHostPort(address.String(), strconv.Itoa(int(*port)))\n"
  },
  {
    "id" : "ba8288e7-01c9-4baf-8f09-8a33c6dc2b94",
    "prId" : 1916,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ac70424-5df8-41cb-a7bc-03c8a236fff2",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Comment on the args?\n",
        "createdAt" : "2014-10-20T23:17:12Z",
        "updatedAt" : "2014-10-20T23:33:06Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "9356ed7fe777158074b26215978517b2445c733f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +234,238 @@\tif *readOnlyPort != 0 {\n\t\t// Allow 1 read-only request per second, allow up to 20 in a burst before enforcing.\n\t\trl := util.NewTokenBucketRateLimiter(1.0, 20)\n\t\treadOnlyServer := &http.Server{\n\t\t\tAddr:           net.JoinHostPort(address.String(), strconv.Itoa(int(*readOnlyPort))),"
  },
  {
    "id" : "3f35a7ee-9e9b-4946-ad42-44f0eaef4eef",
    "prId" : 1500,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3fa738d-dcc0-4bd5-8ffb-34a4a48e7c4f",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "client.New does not appear to call api.NewContext.  I see it being set in kubecfg main, but not in any of the tests.  Is that change intentional?\n",
        "createdAt" : "2014-10-01T16:57:54Z",
        "updatedAt" : "2014-10-01T19:23:41Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "41eb4c9e-bd86-4a1f-aba1-73a31eb4cb82",
        "parentId" : "a3fa738d-dcc0-4bd5-8ffb-34a4a48e7c4f",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Added a TODO for @derekwaynecarr to add his defaults and transports in his follow on\n",
        "createdAt" : "2014-10-01T19:24:24Z",
        "updatedAt" : "2014-10-01T19:24:24Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff2eca97d9f202fb05f35582f2dad57fd53a1450",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +132,136 @@\t\tVersion: *storageVersion,\n\t}\n\tclient, err := client.New(clientConfig)\n\tif err != nil {\n\t\tglog.Fatalf(\"Invalid server address: %v\", err)"
  },
  {
    "id" : "0f013717-5994-44e8-8e0c-84a171032f35",
    "prId" : 1402,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b746edb-5d69-41b6-a957-913e9706e662",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Do we need to document (in the flags) this can't overlap with the pod IP ranges or weird failures will happen?\n",
        "createdAt" : "2014-10-07T15:28:24Z",
        "updatedAt" : "2014-10-16T15:37:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9110983c-2001-4177-b747-d9ca7db9e956",
        "parentId" : "9b746edb-5d69-41b6-a957-913e9706e662",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Added text to the help string\n",
        "createdAt" : "2014-10-07T16:02:21Z",
        "updatedAt" : "2014-10-16T15:37:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c4bd552730fb2a4ca6d5c85230aed4f37734e7e",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +92,96 @@}\n\n// TODO: Longer term we should read this from some config store, rather than a flag.\nfunc verifyPortalFlags() {\n\tif portalNet.IP == nil {"
  },
  {
    "id" : "7ed1d2fd-7079-4aaa-9efc-b74652bb7eb8",
    "prId" : 1292,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58a9f4a4-f387-47e5-9d47-d3297cacc6b3",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This is the version we'll write to etcd? This seems like a very important flag. @thockin here is another example of master config we might eventually want to store in etcd.\n",
        "createdAt" : "2014-09-17T18:48:32Z",
        "updatedAt" : "2014-09-19T03:27:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "5483333e29e0b881beea76b94bcee11c4bf169bf",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +42,46 @@\taddress               = flag.String(\"address\", \"127.0.0.1\", \"The address on the local server to listen to. Default 127.0.0.1\")\n\tapiPrefix             = flag.String(\"api_prefix\", \"/api\", \"The prefix for API requests on the server. Default '/api'\")\n\tstorageVersion        = flag.String(\"storage_version\", \"\", \"The version to store resources with. Defaults to server preferred\")\n\tcloudProvider         = flag.String(\"cloud_provider\", \"\", \"The provider for cloud services.  Empty string for no provider.\")\n\tcloudConfigFile       = flag.String(\"cloud_config\", \"\", \"The path to the cloud provider configuration file.  Empty string for no configuration file.\")"
  },
  {
    "id" : "d2efbd53-1e88-49de-9c31-b89deef34123",
    "prId" : 1133,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a377fda-ad32-47df-acb9-090e661d416e",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Last thought: should this really be a flag? What if you start a new frontend up? You have to reboot apiserver? Maybe TODO dynamic changing of this?\n",
        "createdAt" : "2014-09-03T20:40:10Z",
        "updatedAt" : "2014-09-11T20:48:09Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a1ea9794-24f0-4f24-b2e1-836fa43cc56d",
        "parentId" : "7a377fda-ad32-47df-acb9-090e661d416e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I would expect this to change very rarely over deployment - and I _think_ you could just roll the apiserver deployment to add the new one.\n",
        "createdAt" : "2014-09-03T21:20:36Z",
        "updatedAt" : "2014-09-11T20:48:09Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f2b8f4f9f68fe621bc8dd7b5df361f934aa9b79",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +50,54 @@\tetcdServerList        util.StringList\n\tmachineList           util.StringList\n\tcorsAllowedOriginList util.StringList\n)\n"
  },
  {
    "id" : "5a8799f9-ccd0-4481-843b-e124bd6fd354",
    "prId" : 1074,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "237b873f-548f-403b-a61f-a0c977e2515b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "That may not be the only possible cause of an error?\n",
        "createdAt" : "2014-08-28T03:40:25Z",
        "updatedAt" : "2014-08-28T17:47:41Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "818f357128cd43da04120f7907c38f42d3107578",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +95,99 @@\tclient, err := client.New(net.JoinHostPort(*address, strconv.Itoa(int(*port))), nil)\n\tif err != nil {\n\t\tglog.Fatalf(\"Invalid server address: %v\", err)\n\t}\n"
  }
]