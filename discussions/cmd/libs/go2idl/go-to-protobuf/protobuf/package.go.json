[
  {
    "id" : "add23d0c-6857-4329-93ab-7e7f04799d76",
    "prId" : 19426,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04378950-a0c7-4638-beb6-b54220c06fd1",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Is this supposed to cover the case where someone has a field tagged with `json:\"foo\" yaml:\"bar\"` ?\n",
        "createdAt" : "2016-01-25T16:13:05Z",
        "updatedAt" : "2016-01-26T16:41:31Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "8f1ef825-5123-4aab-950f-d82c11317b64",
        "parentId" : "04378950-a0c7-4638-beb6-b54220c06fd1",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Someone did \"Foo, Bar string `protobuf:\"baz\"`\" which means we have the same\nfield defined twice.\n\nOn Mon, Jan 25, 2016 at 11:13 AM, Paul Morie notifications@github.com\nwrote:\n\n> In cmd/libs/go2idl/go-to-protobuf/protobuf/package.go\n> https://github.com/kubernetes/kubernetes/pull/19426#discussion_r50714702\n> :\n> \n> > -       return false\n> > -   }\n> >   +\n> > -   switch s := t.Type.(type) {\n> > -   case *ast.StructType:\n> > -       for i, f := range s.Fields.List {\n> > -           if len(f.Tag.Value) == 0 {\n> > -               continue\n> > -           }\n> > -           tag := strings.Trim(f.Tag.Value, \"`\")\n> > -           protobufTag := reflect.StructTag(tag).Get(\"protobuf\")\n> > -           if len(protobufTag) == 0 {\n> > -               continue\n> > -           }\n> > -           if len(f.Names) > 1 {\n> > -               log.Printf(\"WARNING: struct %s field %d %s: defined multiple names but single protobuf tag\", t.Name.Name, i, f.Names[0].Name)\n> \n> Is this supposed to cover the case where someone has a field tagged with json:\"foo\"\n> yaml:\"bar\" ?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/19426/files#r50714702.\n",
        "createdAt" : "2016-01-26T02:46:02Z",
        "updatedAt" : "2016-01-26T16:41:31Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "5eeabb83-d19d-4755-abd6-4d9fb999c7b0",
        "parentId" : "04378950-a0c7-4638-beb6-b54220c06fd1",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "bleh\n",
        "createdAt" : "2016-01-26T16:39:29Z",
        "updatedAt" : "2016-01-26T16:41:31Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "f6ceeb73-3ab4-4f74-baba-732d873da791",
        "parentId" : "04378950-a0c7-4638-beb6-b54220c06fd1",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It would also probably not get pas code review, and it would\ndefinitely fail round tripping.  Before we make this part of the\nmainline we should figure out what errors are acceptable, we're just a\nways away from that.\n",
        "createdAt" : "2016-01-26T16:59:40Z",
        "updatedAt" : "2016-01-26T16:59:40Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "cd303b28-85c5-4d83-9112-59a5f90584e3",
        "parentId" : "04378950-a0c7-4638-beb6-b54220c06fd1",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'm OK if we outlaw that...\n\nOn Mon, Jan 25, 2016 at 6:46 PM, Clayton Coleman notifications@github.com\nwrote:\n\n> In cmd/libs/go2idl/go-to-protobuf/protobuf/package.go\n> https://github.com/kubernetes/kubernetes/pull/19426#discussion_r50790202\n> :\n> \n> > -       return false\n> > -   }\n> >   +\n> > -   switch s := t.Type.(type) {\n> > -   case *ast.StructType:\n> > -       for i, f := range s.Fields.List {\n> > -           if len(f.Tag.Value) == 0 {\n> > -               continue\n> > -           }\n> > -           tag := strings.Trim(f.Tag.Value, \"`\")\n> > -           protobufTag := reflect.StructTag(tag).Get(\"protobuf\")\n> > -           if len(protobufTag) == 0 {\n> > -               continue\n> > -           }\n> > -           if len(f.Names) > 1 {\n> > -               log.Printf(\"WARNING: struct %s field %d %s: defined multiple names but single protobuf tag\", t.Name.Name, i, f.Names[0].Name)\n> \n> Someone did \"Foo, Bar string `protobuf:\"baz\"`\" which means we have the\n> same field defined twice.\n> … <#-1348009057_>\n> On Mon, Jan 25, 2016 at 11:13 AM, Paul Morie notifications@github.com\n> wrote: In cmd/libs/go2idl/go-to-protobuf/protobuf/package.go <#19426\n> (comment)\n> https://github.com/kubernetes/kubernetes/pull/19426#discussion_r50714702>\n> : > + return false > + } > + > + switch s := t.Type.(type) { > + case\n> *ast.StructType: > + for i, f := range s.Fields.List { > + if\n> len(f.Tag.Value) == 0 { > + continue > + } > + tag :=\n> strings.Trim(f.Tag.Value, \"`\") > + protobufTag :=\n> reflect.StructTag(tag).Get(\"protobuf\") > + if len(protobufTag) == 0 { > +\n> continue > + } > + if len(f.Names) > 1 { > + log.Printf(\"WARNING: struct %s\n> field %d %s: defined multiple names but single protobuf tag\", t.Name.Name,\n> i, f.Names[0].Name) Is this supposed to cover the case where someone has a\n> field tagged with json:\"foo\" yaml:\"bar\" ? — Reply to this email directly or\n> view it on GitHub <\n> https://github.com/kubernetes/kubernetes/pull/19426/files#r50714702>.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/19426/files#r50790202.\n",
        "createdAt" : "2016-02-01T20:18:14Z",
        "updatedAt" : "2016-02-01T20:18:14Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "4e5943c5-732f-4008-91e0-2d6ab342fdea",
        "parentId" : "04378950-a0c7-4638-beb6-b54220c06fd1",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We'd probably need to figure out ​where to place that control - possibly on\nregistration with the scheme?  Or a post-registration action that does\nchecks?\n",
        "createdAt" : "2016-02-01T20:48:25Z",
        "updatedAt" : "2016-02-01T20:48:25Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "14a3aaf479bc0a0b54ef60523df3b6d064f15c86",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +156,160 @@\t\t\t}\n\t\t\tif len(f.Names) > 1 {\n\t\t\t\tlog.Printf(\"WARNING: struct %s field %d %s: defined multiple names but single protobuf tag\", t.Name.Name, i, f.Names[0].Name)\n\t\t\t\t// TODO hard error?\n\t\t\t}"
  }
]