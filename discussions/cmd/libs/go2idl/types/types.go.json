[
  {
    "id" : "639b89f4-5fd8-4fff-97a5-9f63b72daf2e",
    "prId" : 25978,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3cc107db-7184-484c-b728-d81ad50e4997",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Just to ensure - if there are multiple levels of structs, e..g:\ntype X struct {\n  Yfield Y\n}\ntype Y struct\n  Zfield Z\n}\ntype Z struct {\n  A string\n  B string\n}\n\nWill a shallow copy work as a deep-copy?\n\nIn other words, shouldn't we check of IsPrimitive for the members of struct in deep-copy?\n",
        "createdAt" : "2016-07-06T06:07:25Z",
        "updatedAt" : "2016-07-13T04:53:03Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "1f57e8e2-c3f8-4b53-a1ab-728c7c5d0c1c",
        "parentId" : "3cc107db-7184-484c-b728-d81ad50e4997",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "No.  Go will always copy structs.  In your example:\n\n```\nx1 := randomX()\nx2 := x1 // full deep copy\n```\n\nThis is pretty obvious once you think about it, and easily verified.\nOr did I miss the point you were making? \n",
        "createdAt" : "2016-07-06T07:39:48Z",
        "updatedAt" : "2016-07-13T04:53:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "dfe4657e-46aa-4510-90a8-7d693009eae4",
        "parentId" : "3cc107db-7184-484c-b728-d81ad50e4997",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "It was the point I made. I agree it's easy to verify. I trust you with that :)\n",
        "createdAt" : "2016-07-06T08:21:56Z",
        "updatedAt" : "2016-07-13T04:53:03Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fef16dd541356b9de3df1d180d0d96daebb874d2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +316,320 @@\tif t.Kind == Struct {\n\t\tfor _, m := range t.Members {\n\t\t\tif !m.Type.IsAssignable() {\n\t\t\t\treturn false\n\t\t\t}"
  },
  {
    "id" : "a0ec69b0-5038-4cf8-99a6-155919ae60a9",
    "prId" : 22794,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0284f7d1-7e56-48a2-8bc5-0b9c186dc5fa",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'd be hesitant to add this here. \n",
        "createdAt" : "2016-03-14T23:57:19Z",
        "updatedAt" : "2016-03-15T15:02:26Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "919afadbe7d59fc54abca5b7ce156a03607293a9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +75,79 @@\n\t// Protobuf is protobuf type.\n\tProtobuf Kind = \"Protobuf\"\n)\n"
  },
  {
    "id" : "28ecdd90-d432-462a-8cdf-9e80cae4df5d",
    "prId" : 22794,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "922bebd5-61f3-441c-8e77-bf7de2d22723",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I still don't know if I agree with making this a kind.\n",
        "createdAt" : "2016-03-15T22:56:48Z",
        "updatedAt" : "2016-03-15T22:56:48Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5bd2aa22-fc48-45d3-8eb0-f15d246c967a",
        "parentId" : "922bebd5-61f3-441c-8e77-bf7de2d22723",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I guess I'll wait and see what you do with it... :)\n",
        "createdAt" : "2016-03-15T22:57:47Z",
        "updatedAt" : "2016-03-15T22:57:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5ef7e4b9-08d5-4b57-b2e0-39f11dc0ee01",
        "parentId" : "922bebd5-61f3-441c-8e77-bf7de2d22723",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Oh, I forgot about that.  Yeah, this is questionable, but that's the existing code (not introduced here).  \n\nThe goal was to allow two type systems to coexist - if a name identified either what type system (by constant) or type universe (by pointer) it came from that would also accomplish what this was doing.  The protobuf code needed to define imports of type protobuf, as well as identify when conversion between type systems happened in different phases (i.e. when we look at the protobuf struct tag we might make an early type determination about the protobuf type, but otherwise the field was still a Go lang type).  I guess we can restructure the generator to accomplish that - I'll dig into it later this week.\n",
        "createdAt" : "2016-03-15T23:23:12Z",
        "updatedAt" : "2016-03-15T23:23:12Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "2e7fb837-df48-44f8-ba91-2268cba3a38b",
        "parentId" : "922bebd5-61f3-441c-8e77-bf7de2d22723",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, I can see making Kind into a `struct { universe, kind string }` or\nsomething like that.\n\nOn Tue, Mar 15, 2016 at 4:23 PM, Clayton Coleman notifications@github.com\nwrote:\n\n> In cmd/libs/go2idl/types/types.go\n> https://github.com/kubernetes/kubernetes/pull/22794#discussion_r56258525\n> :\n> \n> > @@ -72,6 +72,9 @@ const (\n> >     DeclarationOf Kind = \"DeclarationOf\"\n> >     Unknown       Kind = \"\"\n> >     Unsupported   Kind = \"Unsupported\"\n> > +\n> > -   // Protobuf is protobuf type.\n> > -   Protobuf Kind = \"Protobuf\"\n> \n> Oh, I forgot about that. Yeah, this is questionable, but that's the\n> existing code (not introduced here).\n> \n> The goal was to allow two type systems to coexist - if a name identified\n> either what type system (by constant) or type universe (by pointer) it came\n> from that would also accomplish what this was doing. The protobuf code\n> needed to define imports of type protobuf, as well as identify when\n> conversion between type systems happened in different phases (i.e. when we\n> look at the protobuf struct tag we might make an early type determination\n> about the protobuf type, but otherwise the field was still a Go lang type).\n> I guess we can restructure the generator to accomplish that - I'll dig into\n> it later this week.\n> \n> â€”\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/22794/files/919afadbe7d59fc54abca5b7ce156a03607293a9#r56258525\n",
        "createdAt" : "2016-03-15T23:39:28Z",
        "updatedAt" : "2016-03-15T23:39:28Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "919afadbe7d59fc54abca5b7ce156a03607293a9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +75,79 @@\n\t// Protobuf is protobuf type.\n\tProtobuf Kind = \"Protobuf\"\n)\n"
  },
  {
    "id" : "acd36293-7527-4b15-8cbd-7a312206fbc9",
    "prId" : 18039,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3ecc8f6-af17-475a-90e7-5ea17335ffdd",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "We need to track functions separately because a method can have the same name as a type.\n",
        "createdAt" : "2015-12-01T23:20:47Z",
        "updatedAt" : "2015-12-03T20:04:25Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "0e3b2c42-e042-4fb3-9ae2-e4099278fdf4",
        "parentId" : "a3ecc8f6-af17-475a-90e7-5ea17335ffdd",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "But methods don't need to be stored globally, right? So maybe not?\n",
        "createdAt" : "2015-12-02T00:51:36Z",
        "updatedAt" : "2015-12-03T20:04:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9eb529f1-0f05-45d8-b139-86a402f04345",
        "parentId" : "a3ecc8f6-af17-475a-90e7-5ea17335ffdd",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I guess it doesn't hurt to store them separately.\n",
        "createdAt" : "2015-12-02T00:55:59Z",
        "updatedAt" : "2015-12-03T20:04:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "3cffad57-3867-4397-847b-a501dbde060e",
        "parentId" : "a3ecc8f6-af17-475a-90e7-5ea17335ffdd",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, I think storing types and things-with-names (vars, non-anonymous funcs, consts) separately is the way to go.\n",
        "createdAt" : "2015-12-02T01:03:22Z",
        "updatedAt" : "2015-12-03T20:04:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d7d4c04a2b216a9bae0521ce6985028002e8ac5",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +93,97 @@\t// Functions within this package, indexed by their name (*not* including\n\t// package name).\n\tFunctions map[string]*Type\n\n\t// Global variables within this package, indexed by their name (*not* including"
  },
  {
    "id" : "0ac721e1-1646-480a-8eb2-73d28be0c9a6",
    "prId" : 18039,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7a74b12-998b-48fe-8b8c-acbf7e00eab7",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "No need for the () around \"a marker for\", I think.\n",
        "createdAt" : "2015-12-03T01:44:14Z",
        "updatedAt" : "2015-12-03T20:04:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "67528120-2801-4837-afb0-148cc711a35f",
        "parentId" : "b7a74b12-998b-48fe-8b8c-acbf7e00eab7",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Actually, I guess there is a reason. Nevermind. :)\n",
        "createdAt" : "2015-12-03T01:44:43Z",
        "updatedAt" : "2015-12-03T20:04:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d7d4c04a2b216a9bae0521ce6985028002e8ac5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +181,185 @@\n// Variable returns the canonical variable for the given fully-qualified name.\n// If a non-existing variable is requested, u will create (a marker for) it.\n// If a marker is created, it's the caller's responsibility to finish\n// construction of the variable by setting Underlying to the correct type."
  },
  {
    "id" : "0347905a-3b89-4a3c-b709-a3789b1e094d",
    "prId" : 18039,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7c0bbf5-bcb0-47cd-a7b7-677b9aa584ed",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Add (to function & variable & const, and corresponding methods in Package):\n\n// If a marker is created, it's the caller's responsibility to finish construction of the function by setting Underlying to the correct type.\n",
        "createdAt" : "2015-12-03T01:46:51Z",
        "updatedAt" : "2015-12-03T20:04:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d7d4c04a2b216a9bae0521ce6985028002e8ac5",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +173,177 @@\n// Function returns the canonical function for the given fully-qualified name.\n// If a non-existing function is requested, u will create (a marker for) it.\n// If a marker is created, it's the caller's responsibility to finish\n// construction of the function by setting Underlying to the correct type."
  },
  {
    "id" : "5a4160f2-53b5-4a29-8c99-aa6e1162a39b",
    "prId" : 18039,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27a10d41-6f10-485a-8b73-28917042d588",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Might as well add const while you're at it, I'm sure we'll need it.\n",
        "createdAt" : "2015-12-03T01:47:19Z",
        "updatedAt" : "2015-12-03T20:04:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a8d6d9c6-f539-47be-9be1-ea47cedc4d5b",
        "parentId" : "27a10d41-6f10-485a-8b73-28917042d588",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "...actually, maybe save it for another PR so we don't get bogged down adding an \"untyped\" builtin :)\n",
        "createdAt" : "2015-12-03T01:47:47Z",
        "updatedAt" : "2015-12-03T20:04:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d7d4c04a2b216a9bae0521ce6985028002e8ac5",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +152,156 @@\treturn t\n}\n\n// HasImport returns true if p imports packageName. Package names include the\n// package directory."
  },
  {
    "id" : "160d204f-d53e-498b-a37c-2ac7e2e6898f",
    "prId" : 18039,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f98cd2e-f991-4393-8e51-8dbe939e50b1",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Fixed.\n",
        "createdAt" : "2015-12-03T20:05:05Z",
        "updatedAt" : "2015-12-03T20:05:05Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d7d4c04a2b216a9bae0521ce6985028002e8ac5",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +69,73 @@\t// representing an actual Type, the type is a declaration of an instance of\n\t// a type. E.g., a top-level function, variable, or constant. See the\n\t// comment for Type.Name for more detail.\n\tDeclarationOf Kind = \"DeclarationOf\"\n\tUnknown       Kind = \"\""
  }
]