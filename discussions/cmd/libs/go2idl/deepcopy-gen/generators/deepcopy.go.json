[
  {
    "id" : "d838441a-6f4b-4141-9d08-a6e19f772f5d",
    "prId" : 28679,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00d1b706-fa81-4400-a9aa-5fd0b5f7c7f5",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Probably this is a gap in the snippet writer that we need to figure out a way to do better.\n",
        "createdAt" : "2016-07-12T22:04:34Z",
        "updatedAt" : "2016-07-12T22:04:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "629b25daf93e55464f5721f0b06e3ed3c6a48552",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +536,540 @@\nfunc (g *genDeepCopy) doStruct(t *types.Type, sw *generator.SnippetWriter) {\n\tif len(t.Members) == 0 {\n\t\t// at least do something with in/out to avoid \"declared and not used\" errors\n\t\tsw.Do(\"_ = in\\n_ = out\\n\", nil)"
  },
  {
    "id" : "31241e0e-c5f2-4cae-bc46-164f01a428d0",
    "prId" : 25978,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97152de0-2226-45de-a8cf-e4186fd9c20a",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "What if the pkg already has a trailing \"/\"? Are we guaranteed it doesn't have?\n",
        "createdAt" : "2016-07-06T05:54:09Z",
        "updatedAt" : "2016-07-13T04:53:03Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "baf9cf9f-ad8b-414a-bb23-8b88e23f6065",
        "parentId" : "97152de0-2226-45de-a8cf-e4186fd9c20a",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "roots will not have the trailing slash, and this does a prefix check so it becomes `strings.HasPrefix(\"/foo/bar//\", \"foo/\")` which still matches.  Am I messing something up?\n",
        "createdAt" : "2016-07-06T07:29:39Z",
        "updatedAt" : "2016-07-13T04:53:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "dc9635b4-c5b7-48c4-af5b-6865b9109259",
        "parentId" : "97152de0-2226-45de-a8cf-e4186fd9c20a",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "If root won't have trailing / than it will work.\nCan you please add a comment that you are relying on that?\n",
        "createdAt" : "2016-07-06T08:20:31Z",
        "updatedAt" : "2016-07-13T04:53:03Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "22a38260-f2cb-4bae-b974-5640c8ab0dbb",
        "parentId" : "97152de0-2226-45de-a8cf-e4186fd9c20a",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "commented and added a TrimRight() to strip trailing slashes at init time. \n",
        "createdAt" : "2016-07-07T04:23:16Z",
        "updatedAt" : "2016-07-13T04:53:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "fef16dd541356b9de3df1d180d0d96daebb874d2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +293,297 @@\t// Add trailing / to avoid false matches, e.g. foo/bar vs foo/barn.  This\n\t// assumes that bounding dirs do not have trailing slashes.\n\tpkg = pkg + \"/\"\n\tfor _, root := range roots {\n\t\tif strings.HasPrefix(pkg, root+\"/\") {"
  },
  {
    "id" : "5ae1d669-a6b3-4ef0-984a-8be7efe65473",
    "prId" : 25978,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56059ee0-663f-4a41-b0d3-7aef8f258a34",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I may be missing something, but IIRC, in the previous commit you changed the logic of inputs to only pass directories, for which doc.go file contains the expected tag. That said, if we have a file with only one type opting in for generation (and the whole package not having the tag in doc.go), this will not be processed.\nAm I missing something?\n",
        "createdAt" : "2016-07-06T06:56:12Z",
        "updatedAt" : "2016-07-13T04:53:03Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "ce24ba62-6fec-4e54-93ef-2d1500154665",
        "parentId" : "56059ee0-663f-4a41-b0d3-7aef8f258a34",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "If you didn't list the pkg as an input, we will not process it at all.  Full stop.  So if even ONE type wants generation, you have to list the pkg as an input, which will trigger here.  Later I add support for dir/... so you can do recursive better.  I started ./foo support too, but I need to EOL OutputBase first.  I didn't want to get too far off target.\n",
        "createdAt" : "2016-07-06T07:52:43Z",
        "updatedAt" : "2016-07-13T04:53:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "7d485c19-dc2b-4096-b39b-6b4c85b10b18",
        "parentId" : "56059ee0-663f-4a41-b0d3-7aef8f258a34",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "> If you didn't list the pkg as an input, we will not process it at all. Full stop. So if even ONE type wants generation, you have to list the pkg as an input, which will trigger here\n\nYes - that one I agree with.\n\nWhat I'm worried about is that we won't generate conversions at all that:\n- doesn't have doc.go comment \n- have opt-in for generation by setting the type comment\n  Or am I missing something?\n",
        "createdAt" : "2016-07-06T08:27:51Z",
        "updatedAt" : "2016-07-13T04:53:03Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "14f0aae8-0555-4d2b-a1ff-71686a304ce8",
        "parentId" : "56059ee0-663f-4a41-b0d3-7aef8f258a34",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "In effect, there is no per-type \"opt-in\" for conversion.  There is only whole-package with per-type opt-out.\n",
        "createdAt" : "2016-07-07T04:01:09Z",
        "updatedAt" : "2016-07-13T04:53:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "fef16dd541356b9de3df1d180d0d96daebb874d2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +140,144 @@\t}\n\n\tfor i := range inputs {\n\t\tglog.V(5).Infof(\"considering pkg %q\", i)\n\t\tpkg := context.Universe[i]"
  },
  {
    "id" : "0602eb6a-ba6d-4127-a09d-3af4a0a71b85",
    "prId" : 24143,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d61c61f9-bc86-4ee8-b12b-6f1ef7f664b6",
        "parentId" : null,
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "I would re-run the deep copy generator if you do this.\n",
        "createdAt" : "2016-04-12T17:25:04Z",
        "updatedAt" : "2016-04-13T20:52:09Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "5cb291aa-de18-4765-b97c-da029b606eab",
        "parentId" : "d61c61f9-bc86-4ee8-b12b-6f1ef7f664b6",
        "authorId" : "cd23f098-445e-4806-8d45-82533abcd350",
        "body" : "The newline at the beginning doesn't actually make a difference in output.  Same with the conversion one.\n",
        "createdAt" : "2016-04-12T17:45:24Z",
        "updatedAt" : "2016-04-13T20:52:09Z",
        "lastEditedBy" : "cd23f098-445e-4806-8d45-82533abcd350",
        "tags" : [
        ]
      },
      {
        "id" : "d36dbbad-c9b3-4adc-828a-4e67250874c3",
        "parentId" : "d61c61f9-bc86-4ee8-b12b-6f1ef7f664b6",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "Hmm.. I would have imagined at least a textual difference. But if there is none, OK.\n",
        "createdAt" : "2016-04-12T17:46:46Z",
        "updatedAt" : "2016-04-13T20:52:09Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "e1674c78-83ed-4b2f-a2af-ee83f94f1df7",
        "parentId" : "d61c61f9-bc86-4ee8-b12b-6f1ef7f664b6",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The autogenerated stuff is run through gofmt.\n",
        "createdAt" : "2016-04-12T21:36:39Z",
        "updatedAt" : "2016-04-13T20:52:09Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3104ba96cb77b8ec94fcee531905e72891526d0",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +66,70 @@\tpackages := generator.Packages{}\n\theader := append([]byte(\n\t\t`// +build !ignore_autogenerated\n\n`), boilerplate...)"
  },
  {
    "id" : "ea26d71e-292e-4d1a-9c6c-3723c139e60a",
    "prId" : 20649,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8be8d29-f320-44aa-9cc5-2e5b8f73f5e8",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Awesome!\n",
        "createdAt" : "2016-03-16T17:36:42Z",
        "updatedAt" : "2016-03-17T08:30:13Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "e610c137c08763e2b2bfa37d864f03eb09b99557",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +67,71 @@\theader := append([]byte(\n\t\t`\n// +build !ignore_autogenerated\n\n`), boilerplate...)"
  },
  {
    "id" : "303fe231-39ca-4515-a4f1-680e03d405cc",
    "prId" : 18156,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "428cd695-ae45-4fa5-bf75-f91d9a6dd825",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I think lavalamp has reviewed this part, but out of curiosity, why are the functions for conversion.Equalities related to if a member is embedded or not?\n\n[edit] I think by conversion.Equalities you mean these functions (https://github.com/kubernetes/kubernetes/blob/master/pkg/api/helpers.go#L53).\n",
        "createdAt" : "2015-12-29T19:07:09Z",
        "updatedAt" : "2015-12-29T19:11:31Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "e4e34fa0-ab80-483b-82c3-511ad5b11de5",
        "parentId" : "428cd695-ae45-4fa5-bf75-f91d9a6dd825",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "No - actually I meant this one:\nhttps://github.com/kubernetes/kubernetes/blob/master/pkg/conversion/deep_equal.go#L25\n\nBasically, generator is currently not able to generate the deep-copy function for such structs. Since this is actually not needed for now and currently it's not causing us any other problems (all functions that are supposed to be generated are generated), I think it's temporary fine.\n",
        "createdAt" : "2015-12-30T07:16:31Z",
        "updatedAt" : "2015-12-30T07:16:31Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "baf97c9c5e51b1208e9f8fdaa05f780a636204b0",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +168,172 @@\t\t\t}\n\t\t\t// TODO: This is a temporary hack, to make avoid generating function\n\t\t\t// for conversion.Equalities. We should get rid of it.\n\t\t\tif member.Embedded {\n\t\t\t\treturn false"
  },
  {
    "id" : "1816b82d-585f-4c0b-8643-6502ad25a454",
    "prId" : 16854,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e120ca7e-2951-4af7-a349-049b17f3e9a0",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "There is still one issue that we need to support at the framework level. Basically if you look into generated file below (generated.go), it doesn't compile.\nIt's because \"rawType\" doesn't take into consideration in which package it is producing code. So even if we are referencing ab object from package \"pkg\" inside \"pkg\" package, it will still use \"pkg.type\" instead of just \"type\".\n\n@lavalamp FYI\n",
        "createdAt" : "2015-11-05T14:44:28Z",
        "updatedAt" : "2015-11-12T09:38:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "bab7e4dc-9a3b-4664-8395-be07b3829ad5",
        "parentId" : "e120ca7e-2951-4af7-a349-049b17f3e9a0",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "ok, we can fix that by making raw namer take an additional arg, of the package it's in. Then each generator that needs this can construct the raw namer with this arg. I can make this change, but probably won't have time for a few days.\n",
        "createdAt" : "2015-11-05T22:46:50Z",
        "updatedAt" : "2015-11-12T09:38:34Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "40b49dba-75af-48ad-b8ae-a04b0ce13262",
        "parentId" : "e120ca7e-2951-4af7-a349-049b17f3e9a0",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yes - that's what I thought about.\nI will try to send out a separate PR for it (if I manage to do it today).\n",
        "createdAt" : "2015-11-06T07:22:49Z",
        "updatedAt" : "2015-11-12T09:38:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "f9a4456d-2112-4a16-9a06-3f12c935f53e",
        "parentId" : "e120ca7e-2951-4af7-a349-049b17f3e9a0",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "OK - I've sent out #17009 out for review.\n",
        "createdAt" : "2015-11-09T12:32:10Z",
        "updatedAt" : "2015-11-12T09:38:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "68d2824a4584e273fe546cc06ebc570b7dd3a8d7",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@/*\nCopyright 2015 The Kubernetes Authors All rights reserved.\n"
  }
]