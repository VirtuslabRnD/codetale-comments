[
  {
    "id" : "4bfde6d2-7439-4eec-95e5-aaae650e66eb",
    "prId" : 25978,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93185db1-e675-4876-8a6f-e1a6f84530d6",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I don't understand the logic behind setting userRequested in else here.\nCan you please clarify (by adding a comment?)\n",
        "createdAt" : "2016-07-06T07:47:55Z",
        "updatedAt" : "2016-07-13T04:53:03Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "1c7c6068-9d60-4bb0-a646-1deb71acf04f",
        "parentId" : "93185db1-e675-4876-8a6f-e1a6f84530d6",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "The user did request it, in effect.  We want all the types from this pkg, not just the pkg metadata.\n",
        "createdAt" : "2016-07-06T08:03:21Z",
        "updatedAt" : "2016-07-13T04:53:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "fef16dd541356b9de3df1d180d0d96daebb874d2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +249,253 @@\t\t// We already had this package, but we want it to be considered as if\n\t\t// the user addid it directly.\n\t\tb.userRequested[dir] = true\n\t}\n\treturn b.findTypesIn(dir, u)"
  },
  {
    "id" : "e82176d2-3939-4449-b14c-f0336744ad14",
    "prId" : 24242,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1352249-a245-49e6-8e68-5b576b2d6e6d",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Pretty sure this will break OpenShift and any third party resource groups people create outside of the main kube tree (since they'll have to vendor).  I'll take a look to see what happens.\n",
        "createdAt" : "2016-05-08T02:54:17Z",
        "updatedAt" : "2016-05-09T03:32:17Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "127030ca-ba91-428f-8dd3-7a0c041bad8f",
        "parentId" : "d1352249-a245-49e6-8e68-5b576b2d6e6d",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'm assuming this is \"FYI\" to me.  This is required to make the thing work.\n",
        "createdAt" : "2016-05-09T03:18:44Z",
        "updatedAt" : "2016-05-09T03:32:17Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "da0f7330-b7e0-43d5-a544-6398c6be10f4",
        "parentId" : "d1352249-a245-49e6-8e68-5b576b2d6e6d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Reminder to myself - we collapse the vendor hierarchy today, but since more and more items are outside the main repo it'll be a problem for contrib style projects.\n",
        "createdAt" : "2016-05-09T04:48:28Z",
        "updatedAt" : "2016-05-09T04:48:28Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "2100016e0fe3219fc93274d6d66f5d4d8c863979",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +111,115 @@\t// properly be the dir of the file which depends on the package to be\n\t// imported, so that vendoring can work properly.  We assume that there is\n\t// only one level of vendoring, and that the CWD is inside the GOPATH, so\n\t// this should be safe.\n\tcwd, err := os.Getwd()"
  },
  {
    "id" : "da34e453-b637-4f27-ab29-fae765a99391",
    "prId" : 17757,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62317d90-21fd-4ed1-ab8c-ab377c7c811c",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Is it possible that we will get unnamed function here? Then nameParts[0] can be something strange...\n",
        "createdAt" : "2015-11-25T07:29:39Z",
        "updatedAt" : "2015-11-25T07:29:39Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "72a6fe5b-a0fe-40d5-a01d-6ef422e4d1d8",
        "parentId" : "62317d90-21fd-4ed1-ab8c-ab377c7c811c",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I think this won't happen. Go doesn't allow defining an anonymous function at package level.\n",
        "createdAt" : "2015-11-25T19:12:40Z",
        "updatedAt" : "2015-11-25T19:12:40Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "75cf28b7df08298b179bed80d4230341a97e479a",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +323,327 @@\tname := strings.TrimLeft(in, \"func \")\n\tnameParts := strings.Split(name, \"(\")\n\treturn tcNameToName(nameParts[0])\n}\n"
  },
  {
    "id" : "ad047d08-f24a-40cd-ba78-6822c3da0bb1",
    "prId" : 17757,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "875d55f0-ceef-4fc3-be85-6175fb3e3684",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I just realized this is problematic if a function's name is the same as a type's name. I'll submit a patch tomorrow.\n",
        "createdAt" : "2015-11-29T23:09:01Z",
        "updatedAt" : "2015-11-29T23:09:01Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "b7795a1a-c5bf-48b1-8e9e-dbe1064a381d",
        "parentId" : "875d55f0-ceef-4fc3-be85-6175fb3e3684",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@lavalamp we verified that Golang does not allow global variable share the same name with a function yesterday, but Go allows a method to share the same name with a global variable, so we still need a patch here.\n",
        "createdAt" : "2015-12-01T19:54:00Z",
        "updatedAt" : "2015-12-01T19:54:00Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "75cf28b7df08298b179bed80d4230341a97e479a",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +511,515 @@\t\tname = *useName\n\t}\n\tout := u.Get(name)\n\tout.Kind = types.Func\n\tout.Signature = b.convertSignature(u, in.Type().(*tc.Signature))"
  },
  {
    "id" : "cc2f360a-c9ec-4a1d-9622-4ecb56e308e2",
    "prId" : 15714,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5fa077f-8b11-4078-a557-2e1765f3d45f",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Can't we just change makePackages to return it and remove it from here?\n",
        "createdAt" : "2015-10-16T09:06:15Z",
        "updatedAt" : "2015-10-21T16:56:43Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "d49e7f32-7f3f-48bb-94d0-1a8aecce4985",
        "parentId" : "d5fa077f-8b11-4078-a557-2e1765f3d45f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "No, because of the way the type check package has to follow the import graph.\n",
        "createdAt" : "2015-10-16T18:06:12Z",
        "updatedAt" : "2015-10-21T16:56:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "4deda6ea98030b9866191c9b3370788a36506b22",
    "line" : null,
    "diffHunk" : "@@ -1,1 +43,47 @@\n\t// Set by makePackages, used by importer() and friends.\n\tpkgs map[string]*tc.Package\n\n\t// Map of package path to whether the user requested it or it was from"
  }
]