[
  {
    "id" : "1ce77a76-0976-41a0-a1ce-2f07a4081d67",
    "prId" : 39709,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39709#pullrequestreview-16135837",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c828bb3b-9230-4762-8df6-ee048e3081d1",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "obsolete comment?",
        "createdAt" : "2017-01-11T13:25:51Z",
        "updatedAt" : "2017-01-17T21:18:21Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcde05753b04e94ee5d9c1d2583e5a90dbe3ced3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +658,662 @@\t\t\t\tsw.Do(\"if err := \"+nameTmpl+\"(&(*in)[i], &(*out)[i], s); err != nil {\\n\", argsFromType(inType.Elem, outType.Elem))\n\t\t\t} else {\n\t\t\t\t// TODO: This triggers on metav1.ObjectMeta <-> metav1.ObjectMeta and\n\t\t\t\t// similar because neither package is the target package, and\n\t\t\t\t// we really don't know which package will have the conversion"
  },
  {
    "id" : "51c517b9-2490-4458-a54a-789124de0857",
    "prId" : 39709,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39709#pullrequestreview-16136435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4da1e5d0-cbd0-47d8-aad9-2e4adb3ea4b4",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "outdated comment",
        "createdAt" : "2017-01-11T13:29:27Z",
        "updatedAt" : "2017-01-17T21:18:21Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcde05753b04e94ee5d9c1d2583e5a90dbe3ced3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +658,662 @@\t\t\t\tsw.Do(\"if err := \"+nameTmpl+\"(&(*in)[i], &(*out)[i], s); err != nil {\\n\", argsFromType(inType.Elem, outType.Elem))\n\t\t\t} else {\n\t\t\t\t// TODO: This triggers on metav1.ObjectMeta <-> metav1.ObjectMeta and\n\t\t\t\t// similar because neither package is the target package, and\n\t\t\t\t// we really don't know which package will have the conversion"
  },
  {
    "id" : "55bacee4-4949-4625-a5ad-5e10598032b2",
    "prId" : 34784,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34784#pullrequestreview-5305769",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b8fabd2-8789-47bd-9597-5889e2f765b3",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Shouldn't we also exclut all types that contain these types?\n",
        "createdAt" : "2016-10-21T11:22:36Z",
        "updatedAt" : "2016-10-25T23:30:42Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "d8d172f2-678f-415e-a557-f6db09d564f0",
        "parentId" : "8b8fabd2-8789-47bd-9597-5889e2f765b3",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "No.  The map records decisions - these are negative decisions (and override previous values).  During each type calculation, we do a DFS and stop at the first type that returns false, calculating any types from the bottom up.\n\nSo the presence of these markers will prevent any type from being used as a direct memory equivalent.\n",
        "createdAt" : "2016-10-21T19:24:04Z",
        "updatedAt" : "2016-10-25T23:30:42Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1c39c0a767e2bfbac17acf246a8d9eaeb6a3497",
    "line" : null,
    "diffHunk" : "@@ -1,1 +258,262 @@\t\t}\n\t\t// this type should be excluded from all equivalence, because the converter must be called.\n\t\tmemoryEquivalentTypes.Skip(k.inType, k.outType)\n\t}\n"
  },
  {
    "id" : "826b3751-54f9-4160-be96-448e855a3d00",
    "prId" : 34784,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34784#pullrequestreview-5305819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e2ec60a-9a30-4c02-b43e-f98997d9b399",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Do we need the second if? It seems that e is always symetric.\n",
        "createdAt" : "2016-10-21T11:23:44Z",
        "updatedAt" : "2016-10-25T23:30:42Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "16b5e635-2dba-4fd8-bea8-26751bde2f8b",
        "parentId" : "3e2ec60a-9a30-4c02-b43e-f98997d9b399",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Probably not, but makes it a lot simpler to reason about.\n",
        "createdAt" : "2016-10-21T19:24:28Z",
        "updatedAt" : "2016-10-25T23:30:42Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1c39c0a767e2bfbac17acf246a8d9eaeb6a3497",
    "line" : 197,
    "diffHunk" : "@@ -1,1 +280,284 @@\tif equal, ok := e[conversionPair{b, a}]; ok {\n\t\treturn equal\n\t}\n\tresult := e.equal(a, b)\n\te[conversionPair{a, b}] = result"
  },
  {
    "id" : "389784ab-2300-4c2f-ab33-89dae943b819",
    "prId" : 34784,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34784#pullrequestreview-5306571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52eb6078-6c91-40ad-8cea-5641a429fba5",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I'm not sure I understand this - can you please clarify the idea here? And maybe given an example for this one?\n",
        "createdAt" : "2016-10-21T11:29:37Z",
        "updatedAt" : "2016-10-25T23:30:42Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "2183425b-57cb-4012-a7c0-3ecf7c1aa7dc",
        "parentId" : "52eb6078-6c91-40ad-8cea-5641a429fba5",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Sure.  So we have a few conversion functions that are defined and registered that do nothing except copy certain types safely for the reflection path.  The canonical example is unversioned.Time - reflection can't copy it because it has private fields, so we have `Convert_unversioned_Time_to_unversioned_Time`.  However, the conversion doesn't do anything that a memory copy can't handle, so the comment marker on the function says \"I promise this conversion does nothing except copy these types\".  This allows us to fast copy ObjectMeta, for instance.\n",
        "createdAt" : "2016-10-21T19:30:29Z",
        "updatedAt" : "2016-10-25T23:30:42Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1c39c0a767e2bfbac17acf246a8d9eaeb6a3497",
    "line" : null,
    "diffHunk" : "@@ -1,1 +739,743 @@\t\t\t// and are necessary for the reflection path, but should not block memory conversion.\n\t\t\t// Convert_unversioned_Time_to_unversioned_Time is an example of this logic.\n\t\t\tif !isCopyOnly(function.CommentLines) || !g.isFastConversion(inMemberType, outMemberType) {\n\t\t\t\targs[\"function\"] = function\n\t\t\t\tsw.Do(\"if err := $.function|raw$(&in.$.name$, &out.$.name$, s); err != nil {\\n\", args)"
  },
  {
    "id" : "2c438288-1741-47c2-9ac7-f7cd00b7b46c",
    "prId" : 33352,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33352#pullrequestreview-3769134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5fc0f31-0e28-4c81-95a5-b10e01ded4a7",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "What is the EOL plan for this?\n",
        "createdAt" : "2016-10-10T05:21:53Z",
        "updatedAt" : "2016-10-19T01:07:44Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "628f38e5-2eeb-4a0c-b05c-0165a8c5a2f2",
        "parentId" : "e5fc0f31-0e28-4c81-95a5-b10e01ded4a7",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Probably 1.6, will comment.\n",
        "createdAt" : "2016-10-11T21:31:07Z",
        "updatedAt" : "2016-10-19T01:07:44Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "957c0955aa0ca0dc4eb6b220def556525b9d880c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +40,44 @@\t// This field was introduced to ease the transition to removing defaulters from conversion.\n\t// It will be removed in 1.6.\n\tSkipDefaulters bool\n}\n"
  },
  {
    "id" : "59d7e545-4563-4f6f-866b-78aff3486e33",
    "prId" : 25983,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac0a8402-dbf9-499c-9cac-529e65e51ff3",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "If types are different (i.e. one is an alias for the other), don't we need to cast one on the other?\n",
        "createdAt" : "2016-05-21T10:20:49Z",
        "updatedAt" : "2016-05-28T12:53:01Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "57034f39-1818-430a-bc28-85543445fed6",
        "parentId" : "ac0a8402-dbf9-499c-9cac-529e65e51ff3",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Will need to look into go2idl - it's possible we don't expose this code path today.\n",
        "createdAt" : "2016-05-21T14:24:16Z",
        "updatedAt" : "2016-05-28T12:53:01Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "dfb8b9a7-94a7-4082-b12a-85c3517a8c64",
        "parentId" : "ac0a8402-dbf9-499c-9cac-529e65e51ff3",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We don't need to cast on assignments where two objects share the same underlying type, i.e. aliases (which is what isDirectlyAssignable checks).  \n",
        "createdAt" : "2016-05-22T18:13:30Z",
        "updatedAt" : "2016-05-28T12:53:01Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "cfd35ac1-5e23-4869-8fcc-8384aaeed761",
        "parentId" : "ac0a8402-dbf9-499c-9cac-529e65e51ff3",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "interesting. I didn't know that.\n",
        "createdAt" : "2016-05-23T07:40:18Z",
        "updatedAt" : "2016-05-28T12:53:01Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b01cfe1eb466eeb4221a5b79ee52f6cd2c32c4a",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +707,711 @@\t\tcase types.Map, types.Slice, types.Pointer:\n\t\t\tif g.isDirectlyAssignable(m.Type, outMember.Type) {\n\t\t\t\tsw.Do(\"out.$.name$ = in.$.name$\\n\", args)\n\t\t\t\tcontinue\n\t\t\t}"
  },
  {
    "id" : "5def8548-c38b-45d0-9588-d9ac4582afdf",
    "prId" : 25983,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd168054-1315-4947-891d-065c70194112",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Same here?\n",
        "createdAt" : "2016-05-21T10:21:01Z",
        "updatedAt" : "2016-05-28T12:53:01Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b01cfe1eb466eeb4221a5b79ee52f6cd2c32c4a",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +719,723 @@\t\tcase types.Struct:\n\t\t\tif g.isDirectlyAssignable(m.Type, outMember.Type) {\n\t\t\t\tsw.Do(\"out.$.name$ = in.$.name$\\n\", args)\n\t\t\t\tcontinue\n\t\t\t}"
  },
  {
    "id" : "86d2732c-94f0-43a3-b0a5-0c07b58d6f37",
    "prId" : 25978,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a2671f2-2d1e-414e-89ea-4224ca22dbbd",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "@thockin - I have a feeling that a lot of changes in this PR, is actually unrelated to not-checking-in the code.\nAs an example, changes in this file.\n\nWould it be possible to split such things to separate PRs - it will take me ages to review this huge PR (I have a feeling that in my case review time is something like O(|PR|^3) :)\n",
        "createdAt" : "2016-07-05T11:15:59Z",
        "updatedAt" : "2016-07-13T04:53:02Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "db431fc0-1f4b-4059-9cb8-17780aeb7932",
        "parentId" : "3a2671f2-2d1e-414e-89ea-4224ca22dbbd",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "A lot of individual commits are not the whole picture.  I tried to keep\neach commit as a logical step towards the goal, but sometimes you need to\nread ahead to know WHY something was done.  I can beef up some of the\nper-commit comments.\n\nSome of these COULD be broken up into distinct PRs, but I am loathe to do\nso because many of them expose somewhat partially-complete internal\nstates.  Others build on each other such that extracting them would be more\nrebase pain than I think it is worth - all 40 commits touch the same set of\nabout 8 files.\n\nI think that you should be able to review commit-by-commit for all of the\ngo2idl and generator changes.  Only the Makefile itself is really best as a\nwhole final snapshot.\n\nOn Tue, Jul 5, 2016 at 4:16 AM, Wojciech Tyczynski <notifications@github.com\n\n> wrote:\n> \n> In cmd/libs/go2idl/conversion-gen/generators/conversion.go\n> https://github.com/kubernetes/kubernetes/pull/25978#discussion_r69545920\n> :\n> \n> > -           outType := signature.Parameters[1]\n> > -           if inType.Kind != types.Pointer || outType.Kind != types.Pointer {\n> > -               continue\n> > -           }\n> > -           // Now check if the name satisfies the convention.\n> > -           args := argsFromType(inType.Elem, outType.Elem)\n> > -           sw.Do(\"Convert_$.inType|public$_To_$.outType|public$\", args)\n> > -           if f.Name.Name == buffer.String() {\n> > -               key := conversionType{inType.Elem, outType.Elem}\n> > -               if v, ok := preexisting[key]; ok && v != nil {\n> > -                   panic(fmt.Sprintf(\"duplicate static conversion defined: %#v\", key))\n> > -               }\n> > -               preexisting[key] = f\n> > -           }\n> > -           buffer.Reset()\n> > -   for _, f := range pkg.Functions {\n> \n> @thockin https://github.com/thockin - I have a feeling that a lot of\n> changes in this PR, is actually unrelated to not-checking-in the code.\n> As an example, changes in this file.\n> \n> Would it be possible to split such things to separate PRs - it will take\n> me ages to review this huge PR (I have a feeling that in my case review\n> time is something like O(|PR|^3) :)\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/25978/files/d4a5536797bea70a9ab71dd629fbcda0aa8d3254#r69545920,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AFVgVF_G3LKg6pHkZJcELND_VExPCKffks5qSj0egaJpZM4Ijc3K\n> .\n",
        "createdAt" : "2016-07-05T16:45:20Z",
        "updatedAt" : "2016-07-13T04:53:02Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "12a07ee3-637b-4350-a63e-cf5aff585303",
        "parentId" : "3a2671f2-2d1e-414e-89ea-4224ca22dbbd",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yeah - I completely understand that individual commits may not make sense without the context.\nI would still prefer having the individual, but I also understand your reluctance to do it.\n\nLet me try to step into review one more time tomorrow.\n",
        "createdAt" : "2016-07-05T20:06:35Z",
        "updatedAt" : "2016-07-13T04:53:02Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fef16dd541356b9de3df1d180d0d96daebb874d2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +110,114 @@\tsw := generator.NewSnippetWriter(buffer, context, \"$\", \"$\")\n\n\tfor _, f := range pkg.Functions {\n\t\tif f.Underlying == nil || f.Underlying.Kind != types.Func {\n\t\t\tglog.Errorf(\"Malformed function: %#v\", f)"
  },
  {
    "id" : "592a93a9-283c-4347-8470-0e223c8ea024",
    "prId" : 25978,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9864a1b-8428-4003-b5cf-c177d7942750",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "It seems that in all places you are using the arguments the other way (output, input) and the signature is different.\n\nI would prefer leaving the signature as is and changing calls...\n",
        "createdAt" : "2016-07-06T06:02:13Z",
        "updatedAt" : "2016-07-13T04:53:03Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "5a2bf57c-6e20-4f0b-9b86-6d03db6119af",
        "parentId" : "e9864a1b-8428-4003-b5cf-c177d7942750",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Good catch.  Will flip callsites.\n",
        "createdAt" : "2016-07-06T07:36:35Z",
        "updatedAt" : "2016-07-13T04:53:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "fef16dd541356b9de3df1d180d0d96daebb874d2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +861,865 @@}\n\nfunc isDirectlyAssignable(inType, outType *types.Type) bool {\n\t// TODO: This should maybe check for actual assignability between the two\n\t// types, rather than superficial traits that happen to indicate it is"
  },
  {
    "id" : "20c1235a-7a7f-49b5-9662-97c96c5af1bf",
    "prId" : 24143,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bb1cad0-ac6c-4822-9cd0-443e8df46fa3",
        "parentId" : null,
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "Also re-run the conversion generator.\n",
        "createdAt" : "2016-04-12T17:26:06Z",
        "updatedAt" : "2016-04-13T20:52:09Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3104ba96cb77b8ec94fcee531905e72891526d0",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +132,136 @@\tpackages := generator.Packages{}\n\theader := append([]byte(\n\t\t`// +build !ignore_autogenerated\n\n`), boilerplate...)"
  },
  {
    "id" : "b85264b4-be1d-4b3c-a030-1ad542708480",
    "prId" : 23768,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e30033d-ebdb-4a24-b715-4f50c0813907",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "@lavalamp - this is also pretty ugly - do you have any idea how to make it cleaner?\n",
        "createdAt" : "2016-04-05T00:46:12Z",
        "updatedAt" : "2016-04-11T06:08:15Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "a4fa1bd2-80f8-4f2d-adf2-cb56ad2d517c",
        "parentId" : "4e30033d-ebdb-4a24-b715-4f50c0813907",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "unversioned makes sense as a fallback package (I'd call it a \"search order\" though).\n\nextensions-- hm, I guess I was thinking you'd look at what the various packages register but that might be hard. I'll think about this.\n",
        "createdAt" : "2016-04-05T00:53:17Z",
        "updatedAt" : "2016-04-11T06:08:15Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "30214920-521e-41a9-ba54-42fe8797c915",
        "parentId" : "4e30033d-ebdb-4a24-b715-4f50c0813907",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think we'll need a better solution for this when we start doing more moves between groups but I can live with this for now.\n",
        "createdAt" : "2016-04-06T22:52:26Z",
        "updatedAt" : "2016-04-11T06:08:15Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "bf6c568d-a77b-4c86-957c-7b9c2fb8f651",
        "parentId" : "4e30033d-ebdb-4a24-b715-4f50c0813907",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I agree that we need something better. I will try to think about it in the background. Thanks!\n",
        "createdAt" : "2016-04-06T23:01:43Z",
        "updatedAt" : "2016-04-11T06:08:15Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "81265b8f850cdaa0d6b8ffb23267d30c4481248a",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +66,70 @@\tinternalPackage := filepath.Dir(t.Name.Package)\n\tif !context.Universe.Package(internalPackage).Has(t.Name.Name) {\n\t\tfor _, fallbackPackage := range fallbackPackages {\n\t\t\tif fallbackPackage == t.Name.Package || !context.Universe.Package(fallbackPackage).Has(t.Name.Name) {\n\t\t\t\tcontinue"
  },
  {
    "id" : "01225438-6801-465a-acbb-0ef86f0b643a",
    "prId" : 23373,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2eedfaf-1416-4356-83c2-f978cca6dd15",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Nifty!\n",
        "createdAt" : "2016-03-23T22:35:18Z",
        "updatedAt" : "2016-03-24T07:27:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "42e7ecda5a883966f2b49fde79fa8cfa59acf169",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +474,478 @@\t\tsw.Do(\"*out = *in\\n\", nil)\n\t} else {\n\t\tsw.Do(\"*out = $.|raw$(*in)\\n\", outType)\n\t}\n}"
  },
  {
    "id" : "52fa6de6-c877-4fdc-9af7-a72a95950bae",
    "prId" : 23373,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8db5da1b-6721-4193-a22b-d67ab9007acb",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I take back what I said in the other PR now that I see this-- adding function name to args is better than nesting two templating systems :)\n",
        "createdAt" : "2016-03-23T22:39:34Z",
        "updatedAt" : "2016-03-24T07:27:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "4a30ae22-9ea4-4225-af9a-3d6f90345dff",
        "parentId" : "8db5da1b-6721-4193-a22b-d67ab9007acb",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Maybe we could make Do optionally take a list of pair of parameters, key + value, and have it construct a combined map?\n",
        "createdAt" : "2016-03-23T22:40:34Z",
        "updatedAt" : "2016-03-24T07:27:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5a9c8e2d-aeda-4498-9600-ed4a7f7fa01f",
        "parentId" : "8db5da1b-6721-4193-a22b-d67ab9007acb",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yeah - that sounds good. Although, since I already did that, I will just add a TODO to fix that in the future :)\n",
        "createdAt" : "2016-03-24T07:24:24Z",
        "updatedAt" : "2016-03-24T07:27:00Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "42e7ecda5a883966f2b49fde79fa8cfa59acf169",
    "line" : 193,
    "diffHunk" : "@@ -1,1 +581,585 @@\t\t\tif g.convertibleOnlyWithinPackage(m.Type, outMember.Type) {\n\t\t\t\tfuncName := g.funcNameTmpl(m.Type, outMember.Type)\n\t\t\t\tsw.Do(fmt.Sprintf(\"if err := %s(&in.$.name$, &out.$.name$, s); err != nil {\\n\", funcName), args)\n\t\t\t} else {\n\t\t\t\tsw.Do(\"// TODO: Inefficient conversion - can we improve it?\\n\", nil)"
  },
  {
    "id" : "d10e90fa-d96c-41c4-bf79-472db18fd1e1",
    "prId" : 23328,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40623abe-de37-4f9f-8af3-199a22ad3fca",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This map will store only Func types, right? might be worth a comment.\n",
        "createdAt" : "2016-03-22T21:14:25Z",
        "updatedAt" : "2016-03-23T07:41:02Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "bf47ab7c-e633-459f-8658-933bac192cf8",
        "parentId" : "40623abe-de37-4f9f-8af3-199a22ad3fca",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Actually all of them are DeclarationOf and the underlying type is Func. Adding a comment.\n",
        "createdAt" : "2016-03-23T07:11:44Z",
        "updatedAt" : "2016-03-23T07:41:02Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7394721d5fedf9d8e8a80a6451ff8e278ec7fadf",
    "line" : null,
    "diffHunk" : "@@ -1,1 +73,77 @@// All of the types in conversions map are of type \"DeclarationOf\" with\n// the underlying type being \"Func\".\ntype conversions map[conversionType]*types.Type\n\n// Returns all already existing conversion functions that we are able to find."
  }
]