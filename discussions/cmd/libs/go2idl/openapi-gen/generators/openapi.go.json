[
  {
    "id" : "b1765922-8051-433f-80fc-3949c0f37425",
    "prId" : 44121,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/44121#pullrequestreview-31205974",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6598cf38-64d2-450c-bfb1-3c72a2251e4a",
        "parentId" : null,
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "This is not identical to before. If no extensions exist, this line should not present it the open api spec, right?",
        "createdAt" : "2017-04-06T01:03:42Z",
        "updatedAt" : "2017-04-07T22:44:49Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "5ffab761-6f7d-4f95-ab53-2c6c2b474fde",
        "parentId" : "6598cf38-64d2-450c-bfb1-3c72a2251e4a",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "right, I am checking that the line before. if len(extensions) is zero, then we just return without generating anything.",
        "createdAt" : "2017-04-06T01:06:10Z",
        "updatedAt" : "2017-04-07T22:44:49Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      },
      {
        "id" : "be829b57-4d68-4291-9c0e-3adf09099495",
        "parentId" : "6598cf38-64d2-450c-bfb1-3c72a2251e4a",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "Oh yeah. You are right.",
        "createdAt" : "2017-04-06T01:14:36Z",
        "updatedAt" : "2017-04-07T22:44:49Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f60dcd90bac8e08323e4a0bc50c23d3fcc81f58",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +414,418 @@\t\treturn nil\n\t}\n\tg.Do(\"VendorExtensible: spec.VendorExtensible{\\nExtensions: spec.Extensions{\\n\", nil)\n\tfor _, extension := range extensions {\n\t\tg.Do(\"\\\"$.$\\\": \", extension.Name)"
  },
  {
    "id" : "c2875908-6c51-442f-b41c-7ae209c8593e",
    "prId" : 44121,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/44121#pullrequestreview-31680079",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe07c123-8da2-4aed-8a6d-91ce3c63de05",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It should be ok for it to not be set in the struct tag, correct? It's just that if both are present they must match?",
        "createdAt" : "2017-04-07T22:23:27Z",
        "updatedAt" : "2017-04-07T22:44:49Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "da3579fa-0ff6-4b32-95ec-f83c4626f4fa",
        "parentId" : "fe07c123-8da2-4aed-8a6d-91ce3c63de05",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "it is a good question @pwittrock  and @ymqytw should know the answer too :)",
        "createdAt" : "2017-04-07T22:41:07Z",
        "updatedAt" : "2017-04-07T22:44:49Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      },
      {
        "id" : "abd7e27e-7366-4c1f-ab82-b74109707968",
        "parentId" : "fe07c123-8da2-4aed-8a6d-91ce3c63de05",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "IMO we want always enforce they match, at least for now.\r\nOtherwise, if the client move to use openapi someday and the server is still using the struct tags and they are inconsistent. Patch will do the wrong things.",
        "createdAt" : "2017-04-07T22:52:23Z",
        "updatedAt" : "2017-04-07T22:52:23Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f60dcd90bac8e08323e4a0bc50c23d3fcc81f58",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +434,438 @@\t\treturn err\n\t}\n\tif patchMergeKeyStructTag != patchMergeKeyCommentTag {\n\t\treturn fmt.Errorf(\"patchMergeKey in comment and struct tags should match for member (%s) of (%s)\",\n\t\t\tm.Name, parent.Name.String())"
  },
  {
    "id" : "4cd57339-364f-4773-8eb1-48dd3b040d83",
    "prId" : 31468,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1ed0989-ce89-4273-ae14-76abef42500d",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "tiny nit: might be better to do\n\n```\npkg, ok := ...\nif !ok { continue }\n```\n",
        "createdAt" : "2016-09-07T21:31:44Z",
        "updatedAt" : "2016-09-13T07:02:53Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "ddf51aa7-26cf-4690-86c4-d0dd4fa9d853",
        "parentId" : "a1ed0989-ce89-4273-ae14-76abef42500d",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "that was a copy-paste left-over from deepcopy code. sorry for that :)\n",
        "createdAt" : "2016-09-08T20:22:30Z",
        "updatedAt" : "2016-09-13T07:02:53Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "469c7d37f306f3e5b46dc9c91a8b4b15762d5991",
    "line" : null,
    "diffHunk" : "@@ -1,1 +91,95 @@\t\tpkg, ok := context.Universe[i]\n\t\tif !ok {\n\t\t\t// If the input had no Go files, for example.\n\t\t\tcontinue\n\t\t}"
  },
  {
    "id" : "ab510b4a-44ee-4469-a45f-8f99f7f21b8e",
    "prId" : 31468,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "007fb898-778e-42eb-951c-2697bfbf0394",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "target means it's the destination package?\n",
        "createdAt" : "2016-09-07T21:32:19Z",
        "updatedAt" : "2016-09-13T07:02:53Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6b86ec5c-d12e-4318-97ff-2e69baa7cdc8",
        "parentId" : "007fb898-778e-42eb-951c-2697bfbf0394",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "yes, do you suggest we change the name to destination?\n",
        "createdAt" : "2016-09-08T20:23:26Z",
        "updatedAt" : "2016-09-13T07:02:53Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "469c7d37f306f3e5b46dc9c91a8b4b15762d5991",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +96,100 @@\t\tfor _, t := range pkg.Types {\n\t\t\tif hasOpenAPITagValue(t.CommentLines, tagTargetType) {\n\t\t\t\tglog.V(5).Infof(\"target type : %q\", t)\n\t\t\t\ttargets = append(targets, t)\n\t\t\t}"
  },
  {
    "id" : "f2337d34-70b0-4ded-aa24-02ce65292170",
    "prId" : 31468,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f635caba-5864-4523-9447-62ac99b6f1cb",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "This implements Generator right?\nAt other places, we ensure and document that by adding the following line:\n\n```\nvar _ Generator := openAPIGen{}\n```\n",
        "createdAt" : "2016-09-09T21:51:46Z",
        "updatedAt" : "2016-09-13T07:02:53Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "54c31326-68e3-46ee-9a61-a6b0e2ed02b0",
        "parentId" : "f635caba-5864-4523-9447-62ac99b6f1cb",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "I think you only need to do that if you are not converting the type to an interface (to make sure we will get compiler error). Here NewOpenAPIGen (the method immediately after it) is doing that, so I don't think this is necessary. If we miss one of the methods, we will get a compilation error.\n",
        "createdAt" : "2016-09-09T23:38:03Z",
        "updatedAt" : "2016-09-13T07:02:53Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "469c7d37f306f3e5b46dc9c91a8b4b15762d5991",
    "line" : 145,
    "diffHunk" : "@@ -1,1 +143,147 @@\n// openApiGen produces a file with auto-generated OpenAPI functions.\ntype openAPIGen struct {\n\tgenerator.DefaultGen\n\t// TargetType is the type that will get OpenAPIDefinitions method returning all definitions."
  }
]