[
  {
    "id" : "1564d510-13dc-48c3-9cf5-df09e21b7f5d",
    "prId" : 103468,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103468#pullrequestreview-700157664",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "271f7511-5be4-48a2-947a-c20c236b2281",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "why not klog.Fatal?",
        "createdAt" : "2021-07-06T12:57:55Z",
        "updatedAt" : "2021-07-06T13:01:27Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "6ee72696-f466-499e-94cb-da58946f1c87",
        "parentId" : "271f7511-5be4-48a2-947a-c20c236b2281",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "I've no idea around this - just follow the old style to keep it safe.\r\n\r\nI noticed other components also use this style. We can follow up if needed.",
        "createdAt" : "2021-07-06T16:40:06Z",
        "updatedAt" : "2021-07-06T16:46:37Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c9c761bbb2b41eeb907520a640917b735c022dc",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +82,86 @@\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\tif err := opts.Complete(&namedFlagSets); err != nil {\n\t\t\t\tfmt.Fprintf(os.Stderr, \"%v\\n\", err)\n\t\t\t\tos.Exit(1)\n\t\t\t}"
  },
  {
    "id" : "b6e4cb0f-0291-42cf-8bef-2c3465d4fcb1",
    "prId" : 100305,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100305#pullrequestreview-647877855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e561dd80-f36a-4c5d-a5e7-d9b2ce66127f",
        "parentId" : null,
        "authorId" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "body" : "why not klog.Exitf() here too?",
        "createdAt" : "2021-04-27T13:17:57Z",
        "updatedAt" : "2021-04-27T13:17:57Z",
        "lastEditedBy" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "tags" : [
        ]
      },
      {
        "id" : "519715ac-1f04-4686-86ba-b654dd2bdcf8",
        "parentId" : "e561dd80-f36a-4c5d-a5e7-d9b2ce66127f",
        "authorId" : "c63e1ceb-64bd-4726-b8ef-e647d73dae0c",
        "body" : "`klog.Exitf()` calls os.Exit(1) within",
        "createdAt" : "2021-04-29T07:15:06Z",
        "updatedAt" : "2021-04-29T07:15:06Z",
        "lastEditedBy" : "c63e1ceb-64bd-4726-b8ef-e647d73dae0c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5a5230d9305468490f7a24ed3e9f3929b8f59a8",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +213,217 @@\t\t\t\t\t// We were asked to terminate. Exit 0.\n\t\t\t\t\tklog.Info(\"Requested to terminate. Exiting.\")\n\t\t\t\t\tos.Exit(0)\n\t\t\t\tdefault:\n\t\t\t\t\t// We lost the lock."
  },
  {
    "id" : "26558104-9558-402f-a804-83b85ae68102",
    "prId" : 96426,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96426#pullrequestreview-529355166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66a0436c-41e3-4c41-8d18-645f775b2002",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Add a comment to clarify why is this done.",
        "createdAt" : "2020-11-12T16:38:57Z",
        "updatedAt" : "2020-11-12T21:03:20Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "660df54c-e73a-4517-ac4c-ed21f5e92e03",
        "parentId" : "66a0436c-41e3-4c41-8d18-645f775b2002",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "That's a \"what\", not a \"why\" ðŸ˜‰ \r\n\r\nI would say something like: \"Profiles are processed during Framework instantiation to set default plugins and configurations. Capturing them for logging\".\r\n",
        "createdAt" : "2020-11-12T18:08:27Z",
        "updatedAt" : "2020-11-12T21:03:20Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "14fa76d92f9a3802ca95115ff4424654428e453b",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +317,321 @@\t\tscheduler.WithExtenders(cc.ComponentConfig.Extenders...),\n\t\tscheduler.WithParallelism(cc.ComponentConfig.Parallelism),\n\t\tscheduler.WithBuildFrameworkCapturer(func(profile kubeschedulerconfig.KubeSchedulerProfile) {\n\t\t\t// Profiles are processed during Framework instantiation to set default plugins and configurations. Capturing them for logging\n\t\t\tcompletedProfiles = append(completedProfiles, profile)"
  },
  {
    "id" : "bcfc72b6-8a62-46e4-8745-3f82fc476ef4",
    "prId" : 96426,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96426#pullrequestreview-529371162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1aa36144-e353-4f0f-adfe-8b661c8fef24",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "why not just override the completed profiles at this point?",
        "createdAt" : "2020-11-12T18:08:31Z",
        "updatedAt" : "2020-11-12T21:03:20Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "fc591136-3e9a-4d96-bab5-3b7191636aa1",
        "parentId" : "1aa36144-e353-4f0f-adfe-8b661c8fef24",
        "authorId" : "0e2b7889-1224-444e-a36d-475f9edd0703",
        "body" : "We could, but since it's only necessary if we're logging/writing the config I figured I'd keep that logic in the function",
        "createdAt" : "2020-11-12T18:26:54Z",
        "updatedAt" : "2020-11-12T21:03:20Z",
        "lastEditedBy" : "0e2b7889-1224-444e-a36d-475f9edd0703",
        "tags" : [
        ]
      }
    ],
    "commit" : "14fa76d92f9a3802ca95115ff4424654428e453b",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +325,329 @@\t\treturn nil, nil, err\n\t}\n\tif err := options.LogOrWriteConfig(opts.WriteConfigTo, &cc.ComponentConfig, completedProfiles); err != nil {\n\t\treturn nil, nil, err\n\t}"
  },
  {
    "id" : "674e7f42-ad31-4ea5-897f-994daebb6931",
    "prId" : 94866,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94866#pullrequestreview-527252982",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24e54e44-fff9-4831-b215-341d6bf3925c",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "perhaps it's worth using the same pod informer that the scheduler uses: https://github.com/kubernetes/kubernetes/blob/master/pkg/scheduler/scheduler.go#L654 ?",
        "createdAt" : "2020-11-09T22:37:49Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "d5547a68-ffa9-4639-8b7b-40bac7d12427",
        "parentId" : "24e54e44-fff9-4831-b215-341d6bf3925c",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "The informerFactory used here is derived from the pre-instantiated in `Setup()`, so should be good.",
        "createdAt" : "2020-11-10T01:37:17Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "9af2c898-089a-4187-b6cf-7e96c20e661a",
        "parentId" : "24e54e44-fff9-4831-b215-341d6bf3925c",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Right, but the scheduler informer adds some filters.",
        "createdAt" : "2020-11-10T14:22:09Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "01f9d296-eb31-4f06-9e48-fc533ed86a9f",
        "parentId" : "24e54e44-fff9-4831-b215-341d6bf3925c",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Oh, got it. The informer factory itself is overwritten.",
        "createdAt" : "2020-11-10T14:24:27Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "264496cc4166d841a4c278fe096d6dd29e8f836a",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +248,252 @@\tpathRecorderMux.Handle(\"/metrics\", legacyregistry.HandlerWithReset())\n\n\tresourceMetricsHandler := resources.Handler(informers.Core().V1().Pods().Lister())\n\tpathRecorderMux.HandleFunc(\"/metrics/resources\", func(w http.ResponseWriter, req *http.Request) {\n\t\tif !isLeader() {"
  },
  {
    "id" : "b6fe2b01-c4ae-4185-9ea4-07528673736f",
    "prId" : 94866,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94866#pullrequestreview-527306560",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6efe1411-da96-4551-bd74-491cf552c75c",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Could you clarify if this is preserving behavior for this endpoint?",
        "createdAt" : "2020-11-09T22:49:51Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "111b21b5-1e48-4041-9e97-47c48f88bb59",
        "parentId" : "6efe1411-da96-4551-bd74-491cf552c75c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yes, HandlerWithReset implements the DELETE logic previously exposed here.",
        "createdAt" : "2020-11-10T15:15:18Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "264496cc4166d841a4c278fe096d6dd29e8f836a",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +246,250 @@func installMetricHandler(pathRecorderMux *mux.PathRecorderMux, informers informers.SharedInformerFactory, isLeader func() bool) {\n\tconfigz.InstallHandler(pathRecorderMux)\n\tpathRecorderMux.Handle(\"/metrics\", legacyregistry.HandlerWithReset())\n\n\tresourceMetricsHandler := resources.Handler(informers.Core().V1().Pods().Lister())"
  },
  {
    "id" : "86c0972e-bfa7-4cee-93c6-be5101ae28ff",
    "prId" : 94866,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94866#pullrequestreview-527304436",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9a4f14e-6425-4554-bc85-563e2f198f8e",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "For a HA scheduler setup, does this mean \"/metrics/resources\" of the scheduler Service will always be always auto-routed to the leader replica? or, it still goes a round-robin way, and only 1/N of the requests can go to the leader?",
        "createdAt" : "2020-11-10T01:52:13Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "4741d0ac-f240-4c32-8552-f1e6b83c4ebd",
        "parentId" : "e9a4f14e-6425-4554-bc85-563e2f198f8e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It means the leader will return no metrics, but the default behavior of something like kube-prometheus is just to scrape all three and it will only see metrics from the current leader.  In practice this is actually pretty common since some metrics aren't registered until controllers start, and controllers don't start until they become leader (in kube-controller-maanger).",
        "createdAt" : "2020-11-10T15:13:13Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "264496cc4166d841a4c278fe096d6dd29e8f836a",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +250,254 @@\tresourceMetricsHandler := resources.Handler(informers.Core().V1().Pods().Lister())\n\tpathRecorderMux.HandleFunc(\"/metrics/resources\", func(w http.ResponseWriter, req *http.Request) {\n\t\tif !isLeader() {\n\t\t\treturn\n\t\t}"
  },
  {
    "id" : "9cda0b55-08c5-443a-85e9-0bffa3d59dca",
    "prId" : 88728,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88728#pullrequestreview-371618449",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "552ac2c4-fb98-481e-b235-96dd58c517cc",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Sorry for the back-and-forth. I think we can have this directly in `runCommand` instead, right before calling Run. Otherwise, there is no other reason to pass both `cc` and `opts` to run. And we don't need to WriteConfigTo in unit tests or serving tests.",
        "createdAt" : "2020-03-09T20:51:56Z",
        "updatedAt" : "2020-03-19T23:37:17Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "3df74ba1-457e-4593-93ce-5b2fa8528684",
        "parentId" : "552ac2c4-fb98-481e-b235-96dd58c517cc",
        "authorId" : "f28b709f-13c6-489d-a940-4b17c129a45b",
        "body" : "done",
        "createdAt" : "2020-03-10T00:52:31Z",
        "updatedAt" : "2020-03-19T23:37:17Z",
        "lastEditedBy" : "f28b709f-13c6-489d-a940-4b17c129a45b",
        "tags" : [
        ]
      }
    ],
    "commit" : "16015a691c4feadcfa5d59432c92712e82979509",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +128,132 @@\t}\n\n\tif len(opts.WriteConfigTo) > 0 {\n\t\tif err := options.WriteConfigFile(opts.WriteConfigTo, &cc.ComponentConfig); err != nil {\n\t\t\treturn err"
  },
  {
    "id" : "2585b7c4-3f27-4ee3-9908-41c963671757",
    "prId" : 88285,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88285#pullrequestreview-362223277",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c712acec-0f6b-4907-9335-091a6bda3200",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "It seems in non-test scenarios, we directly read/write profiles via `[]profiles`, so maybe it makes more sense to change the signature of `WithProfiles` to:\r\n\r\n```go\r\nfunc WithProfiles(p []schedulerapi.KubeSchedulerProfile) Option {\r\n\treturn func(o *schedulerOptions) {\r\n\t\to.profiles = p\r\n\t}\r\n}\r\n```",
        "createdAt" : "2020-02-20T07:56:08Z",
        "updatedAt" : "2020-02-25T17:40:49Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "2f42145b-9450-492d-8aba-f5077c77eeb5",
        "parentId" : "c712acec-0f6b-4907-9335-091a6bda3200",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "This is the only usage of New other than tests. That's why I preferred this signature. Let me know if you feel strongly about the slice.",
        "createdAt" : "2020-02-20T18:33:14Z",
        "updatedAt" : "2020-02-25T17:40:49Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "45334347-55a3-44c1-b31a-7e2008117cca",
        "parentId" : "c712acec-0f6b-4907-9335-091a6bda3200",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "My original concern was if the \"slice -> unpack via `profiles...` -> pack via `...profiles` -> slice\" conversion would cause additional overhead. I wrote a test and have verified it doesn't, so I'm good with the current option - which favors the tests. ",
        "createdAt" : "2020-02-20T20:11:01Z",
        "updatedAt" : "2020-02-25T17:40:49Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "8ec957c2-d680-408a-88e2-3a7e1936573b",
        "parentId" : "c712acec-0f6b-4907-9335-091a6bda3200",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "That's good to know. But even if it did, I don't think customers should have a significant number of profiles. Probably just a handful, and that's already a lot :)",
        "createdAt" : "2020-02-20T20:50:28Z",
        "updatedAt" : "2020-02-25T17:40:49Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0488584712fe37372f35236d2d6dd0e9f630e26",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +180,184 @@\t\trecorderFactory,\n\t\tctx.Done(),\n\t\tscheduler.WithProfiles(cc.ComponentConfig.Profiles...),\n\t\tscheduler.WithAlgorithmSource(cc.ComponentConfig.AlgorithmSource),\n\t\tscheduler.WithPreemptionDisabled(cc.ComponentConfig.DisablePreemption),"
  },
  {
    "id" : "9898585d-123a-4142-a367-81d27b78677f",
    "prId" : 83692,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83692#pullrequestreview-307752226",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06d2b016-345d-4868-a87d-0eb8361ec3ec",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I expected:\r\n```go\r\n// Prepare event clients.\r\nif _, err := cc.Client.Discovery().ServerResourcesForGroupVersion(eventsv1beta1.SchemeGroupVersion.String()); err == nil {\r\n\tcc.Broadcaster = events.NewBroadcaster(&events.EventSinkImpl{Interface: cc.EventClient.Events(\"\")})\r\n\tcc.Recorder = cc.Broadcaster.NewRecorder(scheme.Scheme, cc.ComponentConfig.SchedulerName)\r\n} else {\r\n\tcc.Recorder = v1RecorderWrapper{cc.CoreRecorder}\r\n}\r\n```",
        "createdAt" : "2019-10-25T19:25:02Z",
        "updatedAt" : "2019-10-28T18:09:56Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c59b3355-1838-40c5-9fde-99e894bdcb15",
        "parentId" : "06d2b016-345d-4868-a87d-0eb8361ec3ec",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "with something like this:\r\n```\r\n// v1RecorderWrapper adapts a v1 event recorder to the v1beta1 recorder interface\r\ntype v1RecorderWrapper struct {\r\n\trecorder record.EventRecorder\r\n}\r\n\r\nfunc (w v1RecorderWrapper) Eventf(regarding runtime.Object, related runtime.Object, eventtype, reason, action, note string, args ...interface{}) {\r\n\tw.recorder.Eventf(regarding, eventtype, reason, note, args...)\r\n}\r\n```",
        "createdAt" : "2019-10-25T19:47:35Z",
        "updatedAt" : "2019-10-28T18:09:56Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "f07efd4a-e7e4-4667-b954-e3e14aa9c1f8",
        "parentId" : "06d2b016-345d-4868-a87d-0eb8361ec3ec",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "+1 to what Jordan wrote\r\nEspecially given that Recorder interface is so simple that it has only 1 method:\r\nhttps://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/client-go/tools/events/interfaces.go#L25",
        "createdAt" : "2019-10-26T14:52:18Z",
        "updatedAt" : "2019-10-28T18:09:56Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "ff561cf4-4c16-42c7-810a-641da7e3f0bc",
        "parentId" : "06d2b016-345d-4868-a87d-0eb8361ec3ec",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I opened https://github.com/kubernetes/kubernetes/pull/84442 - @yastij feel free to patch it into your PR",
        "createdAt" : "2019-10-28T10:23:25Z",
        "updatedAt" : "2019-10-28T18:09:56Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f970b3413779ef817d2a374847bc0a4cb733a9a0",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +181,185 @@\t\trecorder := cc.CoreBroadcaster.NewRecorder(scheme.Scheme, v1.EventSource{Component: cc.ComponentConfig.SchedulerName})\n\t\tcc.Recorder = record.NewEventRecorderAdapter(recorder)\n\t}\n\n\t// Create the scheduler."
  },
  {
    "id" : "d7031e86-885d-424f-aec3-a7154279a710",
    "prId" : 83663,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83663#pullrequestreview-299785343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe1898cd-a23f-4574-922c-9ba6619db040",
        "parentId" : null,
        "authorId" : "e1ba72c9-3be8-432b-b345-ac2d180a8eab",
        "body" : "I think it is better to pass a different informerFactory. InformerFactory has a cache of informers internally, so this implementation exposes informers that scheduler uses.\r\nhttps://github.com/kubernetes/client-go/blob/8248d0a0e61a6cc77b53557918964cd1038d511f/informers/factory.go#L162-L183",
        "createdAt" : "2019-10-09T12:52:01Z",
        "updatedAt" : "2019-10-11T02:23:36Z",
        "lastEditedBy" : "e1ba72c9-3be8-432b-b345-ac2d180a8eab",
        "tags" : [
        ]
      },
      {
        "id" : "fdd6b922-6841-4940-b636-d228643be7d0",
        "parentId" : "fe1898cd-a23f-4574-922c-9ba6619db040",
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "Sorry, what are you suggesting? Can you elaborate on that?",
        "createdAt" : "2019-10-09T13:05:18Z",
        "updatedAt" : "2019-10-11T02:23:36Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      },
      {
        "id" : "51196023-cd94-43ca-b069-4bea8563d46a",
        "parentId" : "fe1898cd-a23f-4574-922c-9ba6619db040",
        "authorId" : "e1ba72c9-3be8-432b-b345-ac2d180a8eab",
        "body" : "I was worried that plugin implementers changes lister's cache by mistake and it causes unexpected behavior of scheduler core. But maybe I'm worried too much.",
        "createdAt" : "2019-10-09T14:14:17Z",
        "updatedAt" : "2019-10-11T02:23:36Z",
        "lastEditedBy" : "e1ba72c9-3be8-432b-b345-ac2d180a8eab",
        "tags" : [
        ]
      },
      {
        "id" : "480df110-2a12-49fa-b592-1a1f00fcc153",
        "parentId" : "fe1898cd-a23f-4574-922c-9ba6619db040",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "FYI @ahmad-diaa \r\nIf this gets merged, we probably can just move the listers creation to `New`.",
        "createdAt" : "2019-10-09T14:28:16Z",
        "updatedAt" : "2019-10-11T02:23:36Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "e5994421-a728-4362-ba51-b1738baeb679",
        "parentId" : "fe1898cd-a23f-4574-922c-9ba6619db040",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "since we are passing the sharedInformerFactory, lets remove all listers that are derived from it.",
        "createdAt" : "2019-10-10T01:48:42Z",
        "updatedAt" : "2019-10-11T02:23:36Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "06eb5cef-8fe0-4561-af4a-c39952ea199a",
        "parentId" : "fe1898cd-a23f-4574-922c-9ba6619db040",
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "Sure Iâ€™ll update the PR",
        "createdAt" : "2019-10-10T02:02:52Z",
        "updatedAt" : "2019-10-11T02:23:36Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee4dec65b53083b8b5f070706d319994cd619523",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +168,172 @@\t// Create the scheduler.\n\tsched, err := scheduler.New(cc.Client,\n\t\tcc.InformerFactory,\n\t\tcc.PodInformer,\n\t\tcc.Recorder,"
  },
  {
    "id" : "ef2dbd42-9820-4df6-8b21-740604522457",
    "prId" : 81306,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81306#pullrequestreview-273909169",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61fc7fda-45d1-472b-83cf-858fd7292d2d",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Looks good. Now we're consistent with our neighbours:\r\n\r\n```\r\ncmd/kube-controller-manager/app/controllermanager.go\r\n281:\t\t\tOnStoppedLeading: func() {\r\n282-\t\t\t\tklog.Fatalf(\"leaderelection lost\")\r\n\r\ncmd/kube-scheduler/app/server.go\r\n264:\t\t\tOnStoppedLeading: func() {\r\n265-\t\t\t\tutilruntime.HandleError(fmt.Errorf(\"lost master\"))\r\n\r\ncmd/cloud-controller-manager/app/controllermanager.go\r\n209:\t\t\tOnStoppedLeading: func() {\r\n210-\t\t\t\tklog.Fatalf(\"leaderelection lost\")\r\n```",
        "createdAt" : "2019-08-12T19:44:03Z",
        "updatedAt" : "2019-08-12T19:44:03Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a1354d590b74c077738dbb8fb3756e505136be9",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +262,266 @@\t\t\tOnStartedLeading: run,\n\t\t\tOnStoppedLeading: func() {\n\t\t\t\tklog.Fatalf(\"leaderelection lost\")\n\t\t\t},\n\t\t}"
  },
  {
    "id" : "48b0144c-ea55-4f4d-b72a-cbc9a230a45a",
    "prId" : 78447,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78447#pullrequestreview-243091213",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3dc1f82-6e66-4271-bfba-35ec34189f52",
        "parentId" : null,
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "this is needed to not migrate the whole leaderElection code (which in turn would result in migrating controller-manager) ",
        "createdAt" : "2019-05-29T03:47:06Z",
        "updatedAt" : "2019-07-12T09:39:11Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      },
      {
        "id" : "8c6a593d-1b47-4c8c-95b6-f940ebfed1b5",
        "parentId" : "b3dc1f82-6e66-4271-bfba-35ec34189f52",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "+1",
        "createdAt" : "2019-05-29T07:54:10Z",
        "updatedAt" : "2019-07-12T09:39:11Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "08522f8e5a1e74ccd318e6f8e2c5acf3da19e264",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +193,197 @@\t\tcc.Broadcaster.StartRecordingToSink(stopCh)\n\t}\n\tif cc.LeaderElectionBroadcaster != nil && cc.CoreEventClient != nil {\n\t\tcc.LeaderElectionBroadcaster.StartRecordingToSink(&corev1.EventSinkImpl{Interface: cc.CoreEventClient.Events(\"\")})\n\t}"
  },
  {
    "id" : "ab0fde59-374b-4dcd-9064-9c6d00e349b6",
    "prId" : 78447,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78447#pullrequestreview-261126083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16c34317-6573-496a-95ce-9a26a3f8ce0f",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I don't see cc.LeaderElectionBroadcaster to be set anywhere in the code - seems like a bug to me.",
        "createdAt" : "2019-07-12T06:09:35Z",
        "updatedAt" : "2019-07-12T09:39:11Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "dba467eb-bd2d-4153-8610-04df73e7e5e6",
        "parentId" : "16c34317-6573-496a-95ce-9a26a3f8ce0f",
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "oh good catch !",
        "createdAt" : "2019-07-12T08:34:12Z",
        "updatedAt" : "2019-07-12T09:39:11Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "08522f8e5a1e74ccd318e6f8e2c5acf3da19e264",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +193,197 @@\t\tcc.Broadcaster.StartRecordingToSink(stopCh)\n\t}\n\tif cc.LeaderElectionBroadcaster != nil && cc.CoreEventClient != nil {\n\t\tcc.LeaderElectionBroadcaster.StartRecordingToSink(&corev1.EventSinkImpl{Interface: cc.CoreEventClient.Events(\"\")})\n\t}"
  },
  {
    "id" : "481099ce-f6c6-4257-a70e-7c24414ee714",
    "prId" : 78162,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78162#pullrequestreview-260586300",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77ebbb37-e993-4411-8ed4-257758bdb614",
        "parentId" : null,
        "authorId" : "df8dc16d-08c7-457c-8593-619395912000",
        "body" : "There is an imported package named `options`, so I use `registryOptions` instead of `options` for the argument name, and it seems more clear for its purpose.",
        "createdAt" : "2019-07-11T09:47:36Z",
        "updatedAt" : "2019-07-11T09:48:04Z",
        "lastEditedBy" : "df8dc16d-08c7-457c-8593-619395912000",
        "tags" : [
        ]
      }
    ],
    "commit" : "5828223e756d60d9a5ba3798b44c3dd2ffd64edf",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +63,67 @@\n// NewSchedulerCommand creates a *cobra.Command object with default parameters and registryOptions\nfunc NewSchedulerCommand(registryOptions ...Option) *cobra.Command {\n\topts, err := options.NewOptions()\n\tif err != nil {"
  },
  {
    "id" : "71825e63-381d-4f90-ba25-4426562dada8",
    "prId" : 78162,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78162#pullrequestreview-262138528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76d17098-df9b-4e6e-b42e-bdd08e880aee",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "`Option` is not a great name for a function. It should start with a verb or has an action in the name. Something like `pluginAdder`.",
        "createdAt" : "2019-07-12T23:07:23Z",
        "updatedAt" : "2019-07-12T23:07:35Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "861abe0c-2478-433a-965c-05cc93152098",
        "parentId" : "76d17098-df9b-4e6e-b42e-bdd08e880aee",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "we are not naming a function, we are naming a type. It's a fairly well accepted pattern in golang at this point. https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis",
        "createdAt" : "2019-07-12T23:38:33Z",
        "updatedAt" : "2019-07-12T23:38:33Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      },
      {
        "id" : "2b02aecc-8f4f-48be-a313-c31f8d15cc93",
        "parentId" : "76d17098-df9b-4e6e-b42e-bdd08e880aee",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "alright. I guess I should accept it since it is an accepted pattern. :slightly_smiling_face: ",
        "createdAt" : "2019-07-16T00:21:43Z",
        "updatedAt" : "2019-07-16T00:21:43Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "fdcce670-7d2d-45dd-9d88-de9a01c5d2c1",
        "parentId" : "76d17098-df9b-4e6e-b42e-bdd08e880aee",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "I wish \"an accepted pattern\" wasn't the reason you approved. It's always good to question whether established patterns are serving us. In this specific case, I think it makes more sense from outside the package. If you would read the godoc, you would see,\r\n\r\n```go\r\nfunc New(a, b int, x, y string, opts... Option) {/*...*/}\r\n\r\nfunc WithFooCount(i int) Option {/*...*/}\r\nfunc WithBarName(name string) Option {/*...*/}\r\n```\r\n\r\nIf you have that API, it actually doesn't matter to me what the `Option` type looks like. It just so happens that in golang, the func-based implementation is pretty terse.",
        "createdAt" : "2019-07-16T00:32:04Z",
        "updatedAt" : "2019-07-16T00:32:04Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "5828223e756d60d9a5ba3798b44c3dd2ffd64edf",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +60,64 @@\n// Option configures a framework.Registry.\ntype Option func(framework.Registry) error\n\n// NewSchedulerCommand creates a *cobra.Command object with default parameters and registryOptions"
  },
  {
    "id" : "4573352e-7f0e-42e2-87cd-a7c73a716b56",
    "prId" : 78162,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78162#pullrequestreview-262294603",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce5d397d-bea8-4bb4-bcf4-d42dcf6effb1",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "I wonder if there is any validation that can be done for the registration.",
        "createdAt" : "2019-07-16T08:54:35Z",
        "updatedAt" : "2019-07-16T08:54:36Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "34bb86b2-0e29-40c9-ac77-08a6224afa06",
        "parentId" : "ce5d397d-bea8-4bb4-bcf4-d42dcf6effb1",
        "authorId" : "df8dc16d-08c7-457c-8593-619395912000",
        "body" : "What kind of validation?",
        "createdAt" : "2019-07-16T09:33:04Z",
        "updatedAt" : "2019-07-16T09:33:05Z",
        "lastEditedBy" : "df8dc16d-08c7-457c-8593-619395912000",
        "tags" : [
        ]
      }
    ],
    "commit" : "5828223e756d60d9a5ba3798b44c3dd2ffd64edf",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +340,344 @@func WithPlugin(name string, factory framework.PluginFactory) Option {\n\treturn func(registry framework.Registry) error {\n\t\treturn registry.Register(name, factory)\n\t}\n}"
  },
  {
    "id" : "d04f47d4-2067-4af4-8ff4-2e1f9b0df6f7",
    "prId" : 69057,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69057#pullrequestreview-161863780",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1490dd4a-9c7c-4770-84c7-50c3caf9efc6",
        "parentId" : null,
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "I checked and this is still in use by `test/integration`. We'll have to clean it up (delete it) later.",
        "createdAt" : "2018-10-05T00:56:17Z",
        "updatedAt" : "2018-10-10T09:15:58Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      },
      {
        "id" : "c6fdb46d-5c88-4ac1-a94c-c98d08fa383f",
        "parentId" : "1490dd4a-9c7c-4770-84c7-50c3caf9efc6",
        "authorId" : "89bff7d0-c420-41e1-9e5e-db63c4cccd93",
        "body" : "need I clean it up in this pr? or next?",
        "createdAt" : "2018-10-05T01:14:44Z",
        "updatedAt" : "2018-10-10T09:15:58Z",
        "lastEditedBy" : "89bff7d0-c420-41e1-9e5e-db63c4cccd93",
        "tags" : [
        ]
      },
      {
        "id" : "2f5cb827-28c8-49b3-8da3-26b6787ee705",
        "parentId" : "1490dd4a-9c7c-4770-84c7-50c3caf9efc6",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "Not in this PR",
        "createdAt" : "2018-10-05T01:19:52Z",
        "updatedAt" : "2018-10-10T09:15:58Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "608911d5ac056247831f3bffcada4d714c9234d8",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +305,309 @@\n// NewSchedulerConfig creates the scheduler configuration. This is exposed for use by tests.\nfunc NewSchedulerConfig(s schedulerserverconfig.CompletedConfig) (*factory.Config, error) {\n\tvar storageClassInformer storageinformers.StorageClassInformer\n\tif utilfeature.DefaultFeatureGate.Enabled(features.VolumeScheduling) {"
  },
  {
    "id" : "cf460c32-007c-4406-aa4c-c0c23d7c79b4",
    "prId" : 62515,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62515#pullrequestreview-111909127",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6c576df-15f1-40d6-b080-e152df1872af",
        "parentId" : null,
        "authorId" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "body" : "When `len(o.ConfigFile) == 0` but `len(o.WriteConfigTo) != 0`, we still need to apply these deprecated stuff, but this condition skips this case. So I think we don't need to add `len(o.WriteConfigTo) == 0` here.",
        "createdAt" : "2018-04-13T06:05:47Z",
        "updatedAt" : "2018-04-17T18:03:36Z",
        "lastEditedBy" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "tags" : [
        ]
      },
      {
        "id" : "ee687552-0f74-44f6-afe2-03f5c761c2a0",
        "parentId" : "f6c576df-15f1-40d6-b080-e152df1872af",
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "Nope. It's just a warning.",
        "createdAt" : "2018-04-13T06:30:21Z",
        "updatedAt" : "2018-04-17T18:03:36Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      },
      {
        "id" : "31f75de1-b7f3-439c-b5ed-3dab3cbbadb0",
        "parentId" : "f6c576df-15f1-40d6-b080-e152df1872af",
        "authorId" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "body" : "But `o.applyDeprecatedHealthzAddressToConfig()` and friends aren't just warning. They apply `healthzAddress` (which is the flag `--address`), etc. So if users specify flags like this `--write-config-to ./scheduler.yaml --address 1.2.3.4`, the flag `--address 1.2.3.4` won't take effect. Maybe I miss something here? :)",
        "createdAt" : "2018-04-13T07:17:29Z",
        "updatedAt" : "2018-04-17T18:03:36Z",
        "lastEditedBy" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "tags" : [
        ]
      },
      {
        "id" : "fe5ce195-1cf0-455e-89c4-df716e9965a3",
        "parentId" : "f6c576df-15f1-40d6-b080-e152df1872af",
        "authorId" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "body" : "Mis-read again... When `--write-config-to` is specified, kube-scheduler will write the config and exit. So it's ok as-is.",
        "createdAt" : "2018-04-13T07:32:15Z",
        "updatedAt" : "2018-04-17T18:03:36Z",
        "lastEditedBy" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e918c5885813010d61451824b93ae0b8488426c",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +173,177 @@\nfunc (o *Options) Complete() error {\n\tif len(o.ConfigFile) == 0 && len(o.WriteConfigTo) == 0 {\n\t\tglog.Warning(\"WARNING: all flags other than --config, --write-config-to, and --cleanup are deprecated. Please begin using a config file ASAP.\")\n\t\to.applyDeprecatedHealthzAddressToConfig()"
  },
  {
    "id" : "c74446b8-0998-4f55-8147-27b49f63707c",
    "prId" : 59386,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59386#pullrequestreview-94570172",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cfcf91e-d286-4740-9360-b66cf8fcf84c",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "s/o.policyConfigMapName == \"\"/len(o.policyConfigMapName) == 0/",
        "createdAt" : "2018-02-06T06:58:48Z",
        "updatedAt" : "2018-02-06T06:58:48Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "d6e4800a-2a51-451e-8b18-6193fd295a36",
        "parentId" : "8cfcf91e-d286-4740-9360-b66cf8fcf84c",
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "@bsalamat - Shall I create another PR for this?",
        "createdAt" : "2018-02-06T14:18:25Z",
        "updatedAt" : "2018-02-06T14:18:25Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      },
      {
        "id" : "f0f84cdd-2352-4728-9f98-be8863f4b125",
        "parentId" : "8cfcf91e-d286-4740-9360-b66cf8fcf84c",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "@ravisantoshgudimetla No, thers is no need to send another PR.\r\nThanks for checking.",
        "createdAt" : "2018-02-06T22:33:33Z",
        "updatedAt" : "2018-02-06T22:33:33Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "537400c8-b2af-4ee2-8f56-e12ac045d948",
        "parentId" : "8cfcf91e-d286-4740-9360-b66cf8fcf84c",
        "authorId" : "72156db3-c40b-4455-9838-c12c0c606019",
        "body" : "Ops :)",
        "createdAt" : "2018-02-07T01:51:07Z",
        "updatedAt" : "2018-02-07T01:51:08Z",
        "lastEditedBy" : "72156db3-c40b-4455-9838-c12c0c606019",
        "tags" : [
        ]
      }
    ],
    "commit" : "34d35f1304c0c1927f765270d745b7883a084897",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +215,219 @@func (o *Options) applyDeprecatedAlgorithmSourceOptionsToConfig() {\n\tswitch {\n\tcase o.useLegacyPolicyConfig || (len(o.policyConfigFile) > 0 && o.policyConfigMapName == \"\"):\n\t\to.config.AlgorithmSource = componentconfig.SchedulerAlgorithmSource{\n\t\t\tPolicy: &componentconfig.SchedulerPolicySource{"
  }
]