[
  {
    "id" : "6a2c6794-3001-4d5b-a5a8-bfc37914014a",
    "prId" : 96541,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96541#pullrequestreview-606906029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a54ad82e-adf9-48e9-a084-af461883913c",
        "parentId" : null,
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Moving this out of Run seems to have helped. At this point, can all this code be put in it's own top level function? the Run function is way to long. (edit: by all this code, I was mostly thinking about the clientBuilder creation code)",
        "createdAt" : "2021-03-09T02:32:37Z",
        "updatedAt" : "2021-03-09T22:58:42Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "3712f564-7e5f-452e-8150-0dd38f465ce8",
        "parentId" : "a54ad82e-adf9-48e9-a084-af461883913c",
        "authorId" : "0d33f77d-3ab4-4399-8f80-b3875b915446",
        "body" : "This is the part of the original code. I just moved it out. I am okay to do a refractory.",
        "createdAt" : "2021-03-09T03:39:36Z",
        "updatedAt" : "2021-03-09T22:58:42Z",
        "lastEditedBy" : "0d33f77d-3ab4-4399-8f80-b3875b915446",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a73fdf9ea144bb8b4981516755f5e2510994376",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +211,215 @@\tclientBuilder, rootClientBuilder := createClientBuilders(c)\n\n\tsaTokenControllerInitFunc := serviceAccountTokenControllerStarter{rootClientBuilder: rootClientBuilder}.startServiceAccountTokenController\n\n\trun := func(ctx context.Context, startSATokenController InitFunc, initializersFunc ControllerInitializersFunc) {"
  },
  {
    "id" : "702f6c5e-30dd-4053-9689-ad8f24d5a51f",
    "prId" : 96541,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96541#pullrequestreview-608191060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcab79cf-bb84-4a55-93c0-50628e796dfe",
        "parentId" : null,
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "I like abstracting this out. Was there a reason we removed the ```panic(\"unreachable\")```?\r\n\r\nI assume there is a particular edge case this was supposed to handle and worried we are reintroducing a bug/safety feature by removing it.",
        "createdAt" : "2021-03-09T22:17:44Z",
        "updatedAt" : "2021-03-09T22:58:42Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "6f98d370-e078-4e76-b01a-30f01ec97669",
        "parentId" : "bcab79cf-bb84-4a55-93c0-50628e796dfe",
        "authorId" : "0d33f77d-3ab4-4399-8f80-b3875b915446",
        "body" : "The reason for not having the `panic` is that `electAndRun` runs in another gorountine instead of the same as `Run`. There are two `electAndRun` invocations, so I followed the go-and-`select {}` pattern.\r\n\r\nI did a quick `git blame` and discovered the `panic` was there when leader election was implemented as #19621 ,and was never touched . No reviewers nor the author had anything to say about this. There was no reason for having it in another goroutine either, so I am assuming the author just left it like this.",
        "createdAt" : "2021-03-09T22:40:56Z",
        "updatedAt" : "2021-03-09T22:58:42Z",
        "lastEditedBy" : "0d33f77d-3ab4-4399-8f80-b3875b915446",
        "tags" : [
        ]
      },
      {
        "id" : "30b8f586-e8e2-4b3d-bf31-e58d16cd363a",
        "parentId" : "bcab79cf-bb84-4a55-93c0-50628e796dfe",
        "authorId" : "0d33f77d-3ab4-4399-8f80-b3875b915446",
        "body" : "Added it back to `electAndRun`",
        "createdAt" : "2021-03-09T23:06:12Z",
        "updatedAt" : "2021-03-09T23:06:12Z",
        "lastEditedBy" : "0d33f77d-3ab4-4399-8f80-b3875b915446",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a73fdf9ea144bb8b4981516755f5e2510994376",
    "line" : 232,
    "diffHunk" : "@@ -1,1 +691,695 @@\t\tWatchDog:      electionChecker,\n\t\tName:          leaseName,\n\t})\n\n\tpanic(\"unreachable\")"
  },
  {
    "id" : "3e9feebd-f39f-4c93-9703-29506e4cc274",
    "prId" : 73509,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73509#pullrequestreview-266787223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3051a0af-53c3-4c57-80d1-acaef9ac99f3",
        "parentId" : null,
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "Should we register this as deprecated (For the KCM)?",
        "createdAt" : "2019-02-22T19:21:31Z",
        "updatedAt" : "2019-02-22T19:57:10Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "088cf712-c49a-4873-a48c-c61fea3bd643",
        "parentId" : "3051a0af-53c3-4c57-80d1-acaef9ac99f3",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Done.",
        "createdAt" : "2019-02-22T19:56:54Z",
        "updatedAt" : "2019-02-22T19:57:10Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "12df0324-ac79-4ed7-b4bd-e852dfc81344",
        "parentId" : "3051a0af-53c3-4c57-80d1-acaef9ac99f3",
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "this wasn't deprecated  in kube-api-server, I assume it should also be deprecated there?",
        "createdAt" : "2019-07-19T22:49:10Z",
        "updatedAt" : "2019-07-19T22:49:10Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "8f79c9a7-0c1d-4982-9d16-c9cefaf20cc7",
        "parentId" : "3051a0af-53c3-4c57-80d1-acaef9ac99f3",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "It's not deprecated in apiserver yet AFAIK. The cloud controller manager isn't going to fix that.",
        "createdAt" : "2019-07-20T01:16:04Z",
        "updatedAt" : "2019-07-20T01:16:05Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "be3a6199-d348-47b8-973f-18ecc121e1b9",
        "parentId" : "3051a0af-53c3-4c57-80d1-acaef9ac99f3",
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "that's unfortunate as it pulls in the cloud provider package to do so (registering without it will panic) :/\r\n\r\ndo you happen to have any pointers on where to follow-up on that? eventually all the in-tree stuff needs to go.",
        "createdAt" : "2019-07-20T01:19:41Z",
        "updatedAt" : "2019-07-20T01:19:42Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "7673f383-9226-4aaa-b8a2-6671f42aabf2",
        "parentId" : "3051a0af-53c3-4c57-80d1-acaef9ac99f3",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "what inside the apiserver depends on the value set by this flag?",
        "createdAt" : "2019-07-25T16:36:00Z",
        "updatedAt" : "2019-07-25T16:36:01Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "22b9772d-be9c-4524-97ff-4a58fccdee3f",
        "parentId" : "3051a0af-53c3-4c57-80d1-acaef9ac99f3",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "looks like only the service controller (inside cloud-controller-manager and kube-controller-manager) reference the things that use the variable populated by this flag:\r\n\r\n```\r\nlbSrcRngsFlag\r\n    ensureHTTPHealthCheckFirewall\r\n        createTargetPoolAndHealthCheck\r\n            ensureTargetPoolAndHealthCheck\r\n                ensureExternalLoadBalancer\r\n                    EnsureLoadBalancer\r\n                    EnsureLoadBalancerDeleted\r\n                        ServiceController\r\n\r\n    LoadBalancerSrcRanges()\r\n        ensureInternalFirewalls\r\n            ensureInternalLoadBalancer\r\n                EnsureLoadBalancer\r\n                EnsureLoadBalancerDeleted\r\n                    ServiceController\r\n```",
        "createdAt" : "2019-07-25T16:43:27Z",
        "updatedAt" : "2019-07-25T16:43:27Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "f04fe72d-9289-4df1-96ac-57652629b167",
        "parentId" : "3051a0af-53c3-4c57-80d1-acaef9ac99f3",
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "xref: https://github.com/kubernetes/kubernetes/pull/80353\r\nSo we should be fine to deprecate and eventually remove the flag (following process of course)?",
        "createdAt" : "2019-07-25T16:46:34Z",
        "updatedAt" : "2019-07-25T16:46:35Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "74b15af5-7604-4990-a315-1798799f242a",
        "parentId" : "3051a0af-53c3-4c57-80d1-acaef9ac99f3",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "as far as I can see nothing in the apiserver uses the output of this flag. in other cases like this we've just registered a dummy flag connected to a no-op var to live out the deprecation period.",
        "createdAt" : "2019-07-25T16:52:11Z",
        "updatedAt" : "2019-07-25T16:52:12Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "bb3089b6-360c-4a7c-bab2-b9de827ed39b",
        "parentId" : "3051a0af-53c3-4c57-80d1-acaef9ac99f3",
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "thanks, I will raise this in SIG cloud provider",
        "createdAt" : "2019-07-25T17:52:17Z",
        "updatedAt" : "2019-07-25T17:52:18Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      }
    ],
    "commit" : "47043bcac1216b2e090da6aeeb44294685b803c3",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +119,123 @@\t// hoist this flag from the global flagset to preserve the commandline until\n\t// the gce cloudprovider is removed.\n\tglobalflag.Register(namedFlagSets.FlagSet(\"generic\"), \"cloud-provider-gce-lb-src-cidrs\")\n\tnamedFlagSets.FlagSet(\"generic\").MarkDeprecated(\"cloud-provider-gce-lb-src-cidrs\", \"This flag will be removed once the GCE Cloud Provider is removed from kube-controller-manager\")\n\tfor _, f := range namedFlagSets.FlagSets {"
  },
  {
    "id" : "a01294ad-1ab8-4463-a156-8486991000f6",
    "prId" : 73408,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73408#pullrequestreview-203000310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0639c583-df20-4d6e-9fdd-a4940cd61e79",
        "parentId" : null,
        "authorId" : "05637862-b60e-403e-8519-09d1b3f0c9c2",
        "body" : "i wonder why this change?",
        "createdAt" : "2019-02-13T02:04:35Z",
        "updatedAt" : "2019-02-15T15:34:02Z",
        "lastEditedBy" : "05637862-b60e-403e-8519-09d1b3f0c9c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "160ed26c20e8114579dd15e0a7f8bf51b916aa12",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +37,41 @@\t\"k8s.io/apimachinery/pkg/util/uuid\"\n\t\"k8s.io/apimachinery/pkg/util/wait\"\n\t\"k8s.io/apiserver/pkg/server\"\n\t\"k8s.io/apiserver/pkg/server/healthz\"\n\t\"k8s.io/apiserver/pkg/server/mux\""
  },
  {
    "id" : "8ea3c2c0-f734-4e13-8686-ceb1bdfa8206",
    "prId" : 73032,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73032#pullrequestreview-429028387",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc1ab2cd-c483-48dd-ba8a-3056cb4ddee7",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I bet we'll want these warnings for things other than namespace lifecycle and GC.  Other than those two, I think the only reason to use deprecated APIs is to keep APIs with no future running until they're gone.  In which case we would special case them, right?",
        "createdAt" : "2020-06-11T15:23:59Z",
        "updatedAt" : "2020-06-11T20:05:33Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "760f8c04-a4c0-49cb-affe-a8b81841a5e6",
        "parentId" : "fc1ab2cd-c483-48dd-ba8a-3056cb4ddee7",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Future use of warnings will include custom resource version deprecations, custom warnings from admission webhooks, and \"you probably didn't mean to do this\" warnings on known bad values in pod specs, etc.\r\n\r\nIn all of those cases, I don't think kube-controller-manager is the right audience for those warnings, but it would be sent them anyway as it dutifully copies user-specified pod specs from deployment -> replicaset -> pod, etc.",
        "createdAt" : "2020-06-11T15:27:16Z",
        "updatedAt" : "2020-06-11T20:05:33Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "df6608dc998f4b403f10433809dfbc78e20c890d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +107,111 @@\t\tPersistentPreRunE: func(*cobra.Command, []string) error {\n\t\t\t// silence client-go warnings.\n\t\t\t// kube-controller-manager generically watches APIs (including deprecated ones),\n\t\t\t// and CI ensures it works properly against matching kube-apiserver versions.\n\t\t\trestclient.SetDefaultWarningHandler(restclient.NoWarnings{})"
  },
  {
    "id" : "27a88875-d6db-4e36-b7df-e66316db4e1f",
    "prId" : 72179,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72179#pullrequestreview-204631694",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8e9b466-8704-44a7-8c44-63d5cb1caea6",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this must detect if the token request API is available and fall back. The feature must be enabled, *and* the apiserver must have been started with the signing key so it can generate the tokens",
        "createdAt" : "2018-12-19T14:31:50Z",
        "updatedAt" : "2019-03-25T06:54:55Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6d113532-66ef-41de-bbb0-09d21ae534be",
        "parentId" : "d8e9b466-8704-44a7-8c44-63d5cb1caea6",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "You can do this with the discovery client.",
        "createdAt" : "2019-02-15T21:46:02Z",
        "updatedAt" : "2019-03-25T06:54:55Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "60f607ad-5708-4209-8817-706f2298b80c",
        "parentId" : "d8e9b466-8704-44a7-8c44-63d5cb1caea6",
        "authorId" : "451e6d32-0495-410e-a53b-943e3dd34a71",
        "body" : "@mikedanese  I think I already did this as you said in `shouldTurnOnDynamicClient`",
        "createdAt" : "2019-02-18T06:12:29Z",
        "updatedAt" : "2019-03-25T06:54:55Z",
        "lastEditedBy" : "451e6d32-0495-410e-a53b-943e3dd34a71",
        "tags" : [
        ]
      }
    ],
    "commit" : "244b244f9d84c56ad3a5af255b70c793f6bfd39c",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +207,211 @@\t\t\tif shouldTurnOnDynamicClient(c.Client) {\n\t\t\t\tklog.V(1).Infof(\"using dynamic client builder\")\n\t\t\t\t//Dynamic builder will use TokenRequest feature and refresh service account token periodically\n\t\t\t\tclientBuilder = controller.NewDynamicClientBuilder(\n\t\t\t\t\trestclient.AnonymousClientConfig(c.Kubeconfig),"
  },
  {
    "id" : "da779aa1-746e-4e49-a3c5-73bb48919211",
    "prId" : 68283,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68283#pullrequestreview-186119890",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ef1d952-078f-4c4e-aebb-445d5cefb6b6",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "For KCM reviewer: this changed was merged in https://github.com/kubernetes/kubernetes/pull/70344 (i.e. in v1.14) so it is not breaking compatibility for anyone",
        "createdAt" : "2018-12-18T15:16:51Z",
        "updatedAt" : "2019-01-15T01:19:35Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "3820f7400ff2113fa1e8b17551db37018859de97",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +363,367 @@\t\tcontrollers[\"service\"] = startServiceController\n\t\tcontrollers[\"route\"] = startRouteController\n\t\tcontrollers[\"cloud-node-lifecycle\"] = startCloudNodeLifecycleController\n\t\t// TODO: volume controller into the IncludeCloudLoops only set.\n\t}"
  },
  {
    "id" : "f36330e1-dbe5-4d4d-9608-c615584ce742",
    "prId" : 62990,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62990#pullrequestreview-115405873",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d28c27ca-594e-4f53-a7f3-b1c0cc1c3499",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "You have the stop channel here.  Move the `.Reset()` call from the `GarbageCollection.Sync` method to a gofunc you start here with that channel to stop it.",
        "createdAt" : "2018-04-25T13:05:27Z",
        "updatedAt" : "2018-04-28T01:59:04Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "b1621841-e0f7-47c8-893c-82ffbab2bb26",
        "parentId" : "d28c27ca-594e-4f53-a7f3-b1c0cc1c3499",
        "authorId" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "body" : "ok. also **reset** with the same period as  `GarbageCollection.Sync`",
        "createdAt" : "2018-04-26T01:27:17Z",
        "updatedAt" : "2018-04-28T01:59:04Z",
        "lastEditedBy" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f93d11f9e202bd91bfcc471f538ee806588e325",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +398,402 @@\n\t// Use a discovery client capable of being refreshed.\n\tdiscoveryClient := rootClientBuilder.ClientOrDie(\"controller-discovery\")\n\tcachedClient := cacheddiscovery.NewMemCacheClient(discoveryClient.Discovery())\n\trestMapper := discovery.NewDeferredDiscoveryRESTMapper(cachedClient)"
  },
  {
    "id" : "a0c680d5-7cc7-4bdf-b5d4-a15096f87346",
    "prId" : 58302,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58302#pullrequestreview-89621396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5213d339-7a72-4714-b3db-dad868401f12",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "This should probably be a utility f(n) hidden in locking interface, just so it's uniform across components. ",
        "createdAt" : "2018-01-17T22:23:35Z",
        "updatedAt" : "2018-01-18T16:31:46Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "a40fba5a-730f-475c-87a2-2eb277c56023",
        "parentId" : "5213d339-7a72-4714-b3db-dad868401f12",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> This should probably be a utility f(n) hidden in locking interface, just so it's uniform across components.\r\n\r\nI don't think the locking interface should be opinionated about the shape of the holderidentities sent to it.",
        "createdAt" : "2018-01-17T22:43:22Z",
        "updatedAt" : "2018-01-18T16:31:46Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "0a54587d-9efd-42db-bd2b-bb62ce47d1d0",
        "parentId" : "5213d339-7a72-4714-b3db-dad868401f12",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "I don't feel strongly, but folks will essentially copy-paste this code in multiple locations. ",
        "createdAt" : "2018-01-17T22:54:43Z",
        "updatedAt" : "2018-01-18T16:31:46Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "25238441fdbf7383e45c05613ec15aab13a5bcb5",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +184,188 @@\t}\n\t// add a uniquifier so that two processes on the same host don't accidentally both become active\n\tid = id + \"_\" + string(uuid.NewUUID())\n\n\trl, err := resourcelock.New(s.LeaderElection.ResourceLock,"
  },
  {
    "id" : "5b40f2e6-0ace-4c33-b361-05fc1390c41b",
    "prId" : 57340,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57340#pullrequestreview-88942580",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f399e47-736d-4835-9b9c-7ac99bb988c7",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I'm confused how this changes any behavior. The `defer close(stopCh)` should never run, since run shouldn't return until stopCh is closed. Receiving from a nil channel blocks forever, which would behave the same as receiving from an unclosed stopCh. Was something in run() explicitly checking if the passed channel was nil?",
        "createdAt" : "2018-01-13T18:46:42Z",
        "updatedAt" : "2018-01-13T18:46:46Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "cad1dede-3f97-4e02-8c7e-c4417c03866f",
        "parentId" : "3f399e47-736d-4835-9b9c-7ac99bb988c7",
        "authorId" : "854513fc-78a3-4aa6-887f-1a00e25f060d",
        "body" : "With stopCh = nil, the graph_builder StartMonitors function exits without starting the monitors and no garbage collection happens.  See https://github.com/kubernetes/kubernetes/blob/release-1.8/pkg/controller/garbagecollector/graph_builder.go#L273\r\n\r\nI don't know if creating a dummy stopCh is the best solution, but it let things follow the same path that is taken with leader-elect=true, which seems to be better tested.\r\n\r\nThis is my only foray into go, but it does seem unlikely that the deferred close serves any purpose.",
        "createdAt" : "2018-01-15T16:49:50Z",
        "updatedAt" : "2018-01-15T16:49:50Z",
        "lastEditedBy" : "854513fc-78a3-4aa6-887f-1a00e25f060d",
        "tags" : [
        ]
      },
      {
        "id" : "224f4e9e-013b-4e79-8a16-054cab94de2c",
        "parentId" : "3f399e47-736d-4835-9b9c-7ac99bb988c7",
        "authorId" : "854513fc-78a3-4aa6-887f-1a00e25f060d",
        "body" : "@liggitt See my response above.",
        "createdAt" : "2018-01-15T16:50:48Z",
        "updatedAt" : "2018-01-15T16:50:48Z",
        "lastEditedBy" : "854513fc-78a3-4aa6-887f-1a00e25f060d",
        "tags" : [
        ]
      },
      {
        "id" : "f5a99f91-0ecf-404b-8bf8-a2a1ebf7f913",
        "parentId" : "3f399e47-736d-4835-9b9c-7ac99bb988c7",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "ah, then it seems better to fix the garbage collector specific assumptions in https://github.com/kubernetes/kubernetes/blob/release-1.8/pkg/controller/garbagecollector/graph_builder.go#L85 by setting up a non-nil dummy stopCh in GraphBuilder#Run if a nil stopCh is passed in. otherwise we still have the possibility of other callers making the same mistake",
        "createdAt" : "2018-01-15T17:03:21Z",
        "updatedAt" : "2018-01-15T17:03:21Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "b3f2e4f7-058e-4117-80ce-2099e2d67f45",
        "parentId" : "3f399e47-736d-4835-9b9c-7ac99bb988c7",
        "authorId" : "854513fc-78a3-4aa6-887f-1a00e25f060d",
        "body" : "@liggitt  If there was some other caller of GraphBuilder#Run, is it safe to assume that we should create a dummy stop channel if one is not provided?  I think it would be safer to require / expect that a stop channel be provided and maybe GraphBuilder#Run should fail in some fashion if one is not provided.  Other comments in graph_builder suggest that a stop channel is expected.\r\n\r\nMaybe GarbageCollector#Run (https://github.com/kubernetes/kubernetes/blob/master/pkg/controller/garbagecollector/garbagecollector.go#L129) or startGarbageCollectorController (https://github.com/kubernetes/kubernetes/blob/master/cmd/kube-controller-manager/app/core.go#L344) would be better places.\r\n\r\nHopefully other controllers that use the stop channel do not need it to be set.\r\n\r\nAnd not seeing a better communication channel... I am getting in well past my comfort level with go and internals of Kubernetes.  If this is not the right way or place to fix this, I would prefer to leave this to others.",
        "createdAt" : "2018-01-15T18:36:06Z",
        "updatedAt" : "2018-01-15T18:36:07Z",
        "lastEditedBy" : "854513fc-78a3-4aa6-887f-1a00e25f060d",
        "tags" : [
        ]
      },
      {
        "id" : "e930602c-0eb7-4813-b1ea-556b68ea9e8c",
        "parentId" : "3f399e47-736d-4835-9b9c-7ac99bb988c7",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "a stop channel should really only be used for one thing... stopping the controller when a receive from that channel completes. receiving from a nil channel blocks forever, so from the top-level, passing nil should be valid.\r\n\r\nit looks like the garbage collector and resource quota controllers are using the given channel for two purposes... as a stop channel, and as a signal that Run() has been called. since they're the ones using it in non-standard ways, I'd prefer a fix localized in those controllers, like https://github.com/kubernetes/kubernetes/pull/58306",
        "createdAt" : "2018-01-15T20:45:55Z",
        "updatedAt" : "2018-01-15T20:45:55Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e117307e-0c6b-47f5-9673-6ef68bdf6188",
        "parentId" : "3f399e47-736d-4835-9b9c-7ac99bb988c7",
        "authorId" : "854513fc-78a3-4aa6-887f-1a00e25f060d",
        "body" : "Thank you!",
        "createdAt" : "2018-01-15T22:04:22Z",
        "updatedAt" : "2018-01-15T22:04:22Z",
        "lastEditedBy" : "854513fc-78a3-4aa6-887f-1a00e25f060d",
        "tags" : [
        ]
      }
    ],
    "commit" : "880a68ade6ad2b47b554a6572901f867bde21da2",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +165,169 @@\t\tstopCh := make(chan struct{})\n\t\tdefer close(stopCh)\n\t\trun(stopCh)\n\t\tpanic(\"unreachable\")\n\t}"
  },
  {
    "id" : "7b01d734-4dc7-4db7-b21e-dec2208e1dfd",
    "prId" : 52376,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52376#pullrequestreview-62524479",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60a456bb-8b1e-447e-a437-6223ff8c0855",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "[D]etect",
        "createdAt" : "2017-09-13T17:59:03Z",
        "updatedAt" : "2017-09-13T17:59:45Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      }
    ],
    "commit" : "e73dfce32f601bfeceafd65251d9f829e39339ba",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +436,440 @@\tif cloud != nil && cloud.HasClusterID() == false {\n\t\tif s.AllowUntaggedCloud == true {\n\t\t\tglog.Warning(\"detected a cluster without a ClusterID.  A ClusterID will be required in the future.  Please tag your cluster to avoid any future issues\")\n\t\t} else {\n\t\t\treturn ControllerContext{}, fmt.Errorf(\"no ClusterID Found.  A ClusterID is required for the cloud provider to function properly.  This check can be bypassed by setting the allow-untagged-cloud option\")"
  },
  {
    "id" : "ca60174c-beb6-4b12-ac27-3b4c05518192",
    "prId" : 49495,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49495#pullrequestreview-52522302",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ca580ce-e066-4d2e-8a6a-bf44f7d8c4cf",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "HandleError only logs here? Does this fix the issue where if I have two versions of a TPR, the cm crash loops?\r\n\r\ncc @caesarxuchao ",
        "createdAt" : "2017-07-25T18:15:37Z",
        "updatedAt" : "2017-07-26T20:09:35Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "9fb1e210-c360-4760-aebc-92642eb4f152",
        "parentId" : "8ca580ce-e066-4d2e-8a6a-bf44f7d8c4cf",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> HandleError only logs here?\r\n\r\nThe choice is up to the admin I suppose, there's an env var to force it either way.  Returning an error unconditionally fails, so this at least gives them the choice.\r\n\r\n\r\n\r\n> Does this fix the issue where if I have two versions of a TPR, the cm crash loops?\r\n\r\nI'm not familiar with this.  Got an issue handy?",
        "createdAt" : "2017-07-25T21:21:38Z",
        "updatedAt" : "2017-07-26T20:09:35Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "98c9df4a-77fd-4156-a00f-0d3dce17f9b8",
        "parentId" : "8ca580ce-e066-4d2e-8a6a-bf44f7d8c4cf",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "This means that we continue, go into the if clause below and return an error. What have we won with this change?",
        "createdAt" : "2017-07-26T19:17:25Z",
        "updatedAt" : "2017-07-26T20:09:35Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "0f4cdbc1-1dac-4563-84d5-1328bfc15d62",
        "parentId" : "8ca580ce-e066-4d2e-8a6a-bf44f7d8c4cf",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> This means that we continue, go into the if clause below and return an error. What have we won with this change?\r\n\r\nit can return an error and a the results it was able to get.  Consider the aggregated case with one server of ten being down.",
        "createdAt" : "2017-07-26T19:51:34Z",
        "updatedAt" : "2017-07-26T20:09:35Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "d20655d3-414c-49b9-bec9-a32a397aa313",
        "parentId" : "8ca580ce-e066-4d2e-8a6a-bf44f7d8c4cf",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "The TPR issue @mikedanese mentioned is https://github.com/kubernetes/kubernetes/issues/22768#issuecomment-220522337. If user created multiple versions of a TPR, only the first version is operational, so the discovery here fails and causes controller manager to crashloop.",
        "createdAt" : "2017-07-26T23:11:03Z",
        "updatedAt" : "2017-07-26T23:11:04Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7286f3188e997c98c89e1a8755b58ae69fbd4b0",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +368,372 @@\tresourceMap, err := discoveryClient.ServerResources()\n\tif err != nil {\n\t\tutilruntime.HandleError(fmt.Errorf(\"unable to get all supported resources from server: %v\", err))\n\t}\n\tif len(resourceMap) == 0 {"
  },
  {
    "id" : "85ecacb4-6658-49f6-84b0-8459467d8b0d",
    "prId" : 46783,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46783#pullrequestreview-41595421",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a26cc8f8-a7ad-42e9-9786-a15f25d40d2b",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "is it odd to tie sharedInformers to this controller? if you don't provide a private key and this never starts, doesn't it block other controllers? if you're not running with `--use-service-account-credentials`, what else in the controller manager depends on this controller?",
        "createdAt" : "2017-06-01T18:14:48Z",
        "updatedAt" : "2017-06-02T00:34:34Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "addcb4dd-61b6-4d25-91de-6b24cb145d46",
        "parentId" : "a26cc8f8-a7ad-42e9-9786-a15f25d40d2b",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> is it odd to tie sharedInformers to this controller?\r\n\r\nNot really, this is the logical order from before, it's just slightly more obvious",
        "createdAt" : "2017-06-01T18:19:27Z",
        "updatedAt" : "2017-06-02T00:34:34Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "343a74ae-dcbb-4b07-bd84-1a68c2d6b15d",
        "parentId" : "a26cc8f8-a7ad-42e9-9786-a15f25d40d2b",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> what else in the controller manager depends on this controller?\r\n\r\nNot completely certain.  I think the future is subdivision.",
        "createdAt" : "2017-06-01T18:19:52Z",
        "updatedAt" : "2017-06-02T00:34:34Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "475916cc59f8d9fbbb925da15fc4f81ce2e2f4c8",
    "line" : 379,
    "diffHunk" : "@@ -1,1 +487,491 @@\n\t// start the first set of informers now so that other controllers can start\n\tctx.InformerFactory.Start(ctx.Stop)\n\n\treturn true, nil"
  },
  {
    "id" : "89dfb027-5320-4a11-b94d-b01c4b8e60d0",
    "prId" : 43226,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43226#pullrequestreview-27567526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a893d2c7-d3f1-4cd7-9e81-5ec6eda5e2d1",
        "parentId" : null,
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "should we be checking for other 2xx codes or this is enough ?",
        "createdAt" : "2017-03-17T07:32:03Z",
        "updatedAt" : "2017-03-17T07:32:03Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "3d9d68ca-9c9c-461e-95f4-07c0d4acfc41",
        "parentId" : "a893d2c7-d3f1-4cd7-9e81-5ec6eda5e2d1",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> should we be checking for other 2xx codes or this is enough ?\r\n\r\nFor our healthz, this is enough.",
        "createdAt" : "2017-03-17T11:58:15Z",
        "updatedAt" : "2017-03-17T11:58:15Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a2cd24f9de31e3b9851cc9c0d12b0bc93b7470e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +334,338 @@\t\thealthStatus := 0\n\t\tclient.Discovery().RESTClient().Get().AbsPath(\"/healthz\").Do().StatusCode(&healthStatus)\n\t\tif healthStatus != http.StatusOK {\n\t\t\tglog.Errorf(\"Server isn't healthy yet.  Waiting a little while.\")\n\t\t\treturn false, nil"
  },
  {
    "id" : "7face25f-e247-4966-83f7-ac003cb41fba",
    "prId" : 40796,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40796#pullrequestreview-20667011",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "293412ba-681c-4691-b54e-5250f70c90ba",
        "parentId" : null,
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "How about using a more detailed name? Maybe `secretTTL`?",
        "createdAt" : "2017-02-02T20:50:35Z",
        "updatedAt" : "2017-02-09T13:50:36Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "2290f1c1-93a3-4e85-8053-943ed192b016",
        "parentId" : "293412ba-681c-4691-b54e-5250f70c90ba",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "I forgot that this is supposed to cover also `ConfigMap`. I'm not sure what's the good name is, but I think that just `ttl` is too generic.",
        "createdAt" : "2017-02-02T20:53:03Z",
        "updatedAt" : "2017-02-09T13:50:36Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "a72b5096-6914-47e8-8bec-44ac6ea98a23",
        "parentId" : "293412ba-681c-4691-b54e-5250f70c90ba",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "I had the same thought, but I am pretty bad at naming.",
        "createdAt" : "2017-02-03T00:11:29Z",
        "updatedAt" : "2017-02-09T13:50:36Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "01ddc23b-8d07-4b9e-a93e-4ed1078e37fe",
        "parentId" : "293412ba-681c-4691-b54e-5250f70c90ba",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I'm fine with changing but i couldn't come up with any better name - so if you could suggest something better, I'm happy to change that.",
        "createdAt" : "2017-02-03T07:24:30Z",
        "updatedAt" : "2017-02-09T13:50:36Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "485d7afd-9033-4a8f-bb8a-352cda3f642d",
        "parentId" : "293412ba-681c-4691-b54e-5250f70c90ba",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "I can't find anything better. Let's leave it as it is :/",
        "createdAt" : "2017-02-08T01:47:19Z",
        "updatedAt" : "2017-02-09T13:50:36Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcf8a85fdf8cfb9445074d6bd2ead5663cbc6056",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +288,292 @@\tcontrollers[\"cronjob\"] = startCronJobController\n\tcontrollers[\"certificatesigningrequests\"] = startCSRController\n\tcontrollers[\"ttl\"] = startTTLController\n\n\treturn controllers"
  },
  {
    "id" : "4acb2ef9-fefd-4b73-b18c-0f3dbd4db3ee",
    "prId" : 40710,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40710#pullrequestreview-19319338",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31d23fc6-b3a5-43a5-9a86-e2d02089860e",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "kubev1 or v1core? This is mixed in the PR.",
        "createdAt" : "2017-01-31T14:01:58Z",
        "updatedAt" : "2017-02-01T00:55:03Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "a12d45a24031d20dfffd5186eef675f77260b2bd",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +38,42 @@\t\"k8s.io/apiserver/pkg/server/healthz\"\n\t\"k8s.io/client-go/discovery\"\n\tv1core \"k8s.io/client-go/kubernetes/typed/core/v1\"\n\tclientv1 \"k8s.io/client-go/pkg/api/v1\"\n\trestclient \"k8s.io/client-go/rest\""
  },
  {
    "id" : "fd4ce0e2-2cba-446f-99f4-7394083ec2b2",
    "prId" : 39740,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39740#pullrequestreview-16235606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e54bc30f-0e9e-49fe-a0c9-a78a17dbca1a",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "Do we have any of these yet?",
        "createdAt" : "2017-01-11T20:38:43Z",
        "updatedAt" : "2017-01-12T13:46:36Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "45cf5b2c-32e6-4dec-b46e-8f62f914468c",
        "parentId" : "e54bc30f-0e9e-49fe-a0c9-a78a17dbca1a",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Do we have any of these yet?\r\n\r\nI think you're about to want them in #36101 since your flags were `--enable`, not `--disable`.",
        "createdAt" : "2017-01-11T21:06:31Z",
        "updatedAt" : "2017-01-12T13:46:36Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9b75ed82bf5b80716d9d1c4682a725b165314b3",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +260,264 @@}\n\nvar ControllersDisabledByDefault = sets.NewString()\n\nfunc newControllerInitializers() map[string]InitFunc {"
  },
  {
    "id" : "8239eb06-b2be-4621-afc7-1254fe15d802",
    "prId" : 37976,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37976#pullrequestreview-11376161",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d728ebf9-8c09-4e43-a7b7-b322682d5242",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "No need for the prefix in this package",
        "createdAt" : "2016-12-05T09:55:13Z",
        "updatedAt" : "2016-12-05T15:24:50Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "1d0b7ba6-af23-4f47-88fc-8d5008d1c855",
        "parentId" : "d728ebf9-8c09-4e43-a7b7-b322682d5242",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> No need for the prefix in this package\r\n\r\nI'd like to  keep it on this one to avoid confusion with other contexts?",
        "createdAt" : "2016-12-05T13:21:29Z",
        "updatedAt" : "2016-12-05T15:24:50Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "f0246eb0-3e29-4a53-a9c7-6e15d4e0895d",
        "parentId" : "d728ebf9-8c09-4e43-a7b7-b322682d5242",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "ok, makes sense",
        "createdAt" : "2016-12-05T13:24:21Z",
        "updatedAt" : "2016-12-05T15:24:50Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "57883179538ae991ba9f73b8a08bcbb3cbc2c957",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +225,229 @@}\n\ntype ControllerContext struct {\n\t// ClientBuilder will provide a client for this controller to use\n\tClientBuilder controller.ControllerClientBuilder"
  },
  {
    "id" : "7795fcf3-2c81-48ba-b863-f1fb5c4ea734",
    "prId" : 37238,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37238#pullrequestreview-9812653",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "324c3009-9f03-4fb7-aef3-57248379e697",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Regarding the user-agent comment: only the `Builder.Client` func sets it, not `Builder.Config`. I guess we have to use the rootClientBuilder here therefore, not `clientset.NewForConfigOrDie`.",
        "createdAt" : "2016-11-23T07:40:34Z",
        "updatedAt" : "2016-11-28T20:02:32Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "585daa2069d34d912367fcf64c1738a697fec2a6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +485,489 @@\t\tcronjobConfig := rootClientBuilder.ConfigOrDie(\"cronjob-controller\")\n\t\tcronjobConfig.ContentConfig.GroupVersion = &schema.GroupVersion{Group: batch.GroupName, Version: \"v2alpha1\"}\n\t\tgo cronjob.NewCronJobController(clientset.NewForConfigOrDie(cronjobConfig)).Run(stop)\n\t\ttime.Sleep(wait.Jitter(s.ControllerStartInterval.Duration, ControllerStartJitter))\n\t}"
  },
  {
    "id" : "05c6a3b6-cfcc-4717-bdcd-3868ee54d926",
    "prId" : 37238,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37238#pullrequestreview-9812720",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b9ef83d-d6d9-46be-8618-83c8429a0591",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "What about here regarding the user-agent?",
        "createdAt" : "2016-11-23T07:41:19Z",
        "updatedAt" : "2016-11-28T20:02:32Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "585daa2069d34d912367fcf64c1738a697fec2a6",
    "line" : 493,
    "diffHunk" : "@@ -1,1 +553,557 @@\t\t}\n\n\t\tconfig := rootClientBuilder.ConfigOrDie(\"generic-garbage-collector\")\n\t\tconfig.ContentConfig.NegotiatedSerializer = serializer.DirectCodecFactory{CodecFactory: metaonly.NewMetadataCodecFactory()}\n\t\tmetaOnlyClientPool := dynamic.NewClientPool(config, restMapper, dynamic.LegacyAPIPathResolverFunc)"
  },
  {
    "id" : "1cb9be88-87ba-40cb-8b3a-e28ce5e9188c",
    "prId" : 37238,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37238#pullrequestreview-9812897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2466d998-7825-40d9-a136-64cefe32bac9",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "nit: space too much",
        "createdAt" : "2016-11-23T07:43:28Z",
        "updatedAt" : "2016-11-28T20:02:32Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "585daa2069d34d912367fcf64c1738a697fec2a6",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +224,228 @@\n// TODO: In general, any controller checking this needs to be dynamic so\n//  users don't have to restart their controller manager if they change the apiserver.\nfunc getAvailableResources(clientBuilder controller.ControllerClientBuilder) (map[schema.GroupVersionResource]bool, error) {\n\tvar discoveryClient discovery.DiscoveryInterface"
  },
  {
    "id" : "e640c669-b237-4566-bff2-9bbfc09aa35f",
    "prId" : 36909,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36909#pullrequestreview-10747157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a845900f-6481-4376-86c6-a4e46edc4c9c",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "blech.  If the namespace controller relies on discovery, it should have a discovery client.  Debt for later I suppose.",
        "createdAt" : "2016-11-30T12:51:40Z",
        "updatedAt" : "2016-12-05T11:42:45Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "420fe586-ffe5-4a43-aefd-0945eecb7813",
        "parentId" : "a845900f-6481-4376-86c6-a4e46edc4c9c",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "same for gc",
        "createdAt" : "2016-11-30T12:52:28Z",
        "updatedAt" : "2016-12-05T11:42:45Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dff13f332bef6cddff2613023eced01518c5c02",
    "line" : null,
    "diffHunk" : "@@ -1,1 +415,419 @@\t\t}\n\t}\n\tnamespaceController := namespacecontroller.NewNamespaceController(namespaceKubeClient, namespaceClientPool, discoverResourcesFn, s.NamespaceSyncPeriod.Duration, v1.FinalizerKubernetes)\n\tgo namespaceController.Run(int(s.ConcurrentNamespaceSyncs), stop)\n\ttime.Sleep(wait.Jitter(s.ControllerStartInterval.Duration, ControllerStartJitter))"
  },
  {
    "id" : "11a1b27d-3b68-42ce-acdf-4d4e006d2e0d",
    "prId" : 35947,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35947#pullrequestreview-7146229",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c024d21c-6610-49b4-8022-d30bed4fd5dd",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Dont you need to change the RESTMapper as well?\ndynamic client has a NewDiscoveryRESTMapper method: https://github.com/kubernetes/kubernetes/blob/master/pkg/client/typed/dynamic/dynamic_util.go#L37\n",
        "createdAt" : "2016-11-01T19:38:38Z",
        "updatedAt" : "2016-11-21T04:49:56Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "f3e88499-c731-4acc-a3eb-db3f12931128",
        "parentId" : "c024d21c-6610-49b4-8022-d30bed4fd5dd",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "I don't think so?  We recreate a new dynamic client for each `GroupVersionResource`\n\nhttps://github.com/kubernetes/kubernetes/blob/master/pkg/controller/namespace/namespace_controller_utils.go#L282\n\nWhich I think should be capable of handling it w/o a new mapper?  But I have to admit this part of the codebase is pretty opaque...\n",
        "createdAt" : "2016-11-04T04:57:09Z",
        "updatedAt" : "2016-11-21T04:49:56Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef6529bf2f910290bb3fc1108f0f3f588f27b52d",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +369,373 @@\t// Find the list of namespaced resources via discovery that the namespace controller must manage\n\tnamespaceKubeClient := client(\"namespace-controller\")\n\tnamespaceClientPool := dynamic.NewClientPool(restclient.AddUserAgent(kubeconfig, \"namespace-controller\"), restMapper, dynamic.LegacyAPIPathResolverFunc)\n\t// TODO: consider using a list-watch + cache here rather than polling\n\tvar gvrFn func() ([]unversioned.GroupVersionResource, error)"
  },
  {
    "id" : "3a5bccb3-7bf8-497d-abe9-28a80f3b68d8",
    "prId" : 33103,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33103#pullrequestreview-827563",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb7bcc78-c941-4b48-a643-6b117d32b7bd",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Why the change to EventSinkImpl?\n",
        "createdAt" : "2016-09-20T19:17:43Z",
        "updatedAt" : "2016-09-20T19:19:45Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "c3dc3577-b9f5-42ee-b143-9e8be07c73f4",
        "parentId" : "eb7bcc78-c941-4b48-a643-6b117d32b7bd",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Why the change to EventSinkImpl?\n\nThis uses the generated clientset, the old impl used the manual client.\n",
        "createdAt" : "2016-09-20T19:25:03Z",
        "updatedAt" : "2016-09-20T19:25:03Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "92ed6b55-a6dc-4397-9535-c5c8090e1d3b",
        "parentId" : "eb7bcc78-c941-4b48-a643-6b117d32b7bd",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Argh, `kubeClient.Core().Events(\"\")` almost conforms to `pkg/client/record.EventSink` except for `Patch` :-(\n",
        "createdAt" : "2016-09-20T19:54:02Z",
        "updatedAt" : "2016-09-20T19:54:03Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "5e1c8a6d-fded-4a8c-b133-d6e56cd5389e",
        "parentId" : "eb7bcc78-c941-4b48-a643-6b117d32b7bd",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Argh, kubeClient.Core().Events(\"\") almost conforms to pkg/client/record.EventSink except for Patch :-(\n\nYeah, I tried to fix that once before, but it was nasty.  I think I'll have better luck going down this route and perhaps ripping out the event recorder entirely.\n",
        "createdAt" : "2016-09-20T19:58:48Z",
        "updatedAt" : "2016-09-20T19:58:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "b83a31700340232c48bac7c82b4afc4adb8ff6f9",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +159,163 @@\teventBroadcaster := record.NewBroadcaster()\n\teventBroadcaster.StartLogging(glog.Infof)\n\teventBroadcaster.StartRecordingToSink(&unversionedcore.EventSinkImpl{Interface: kubeClient.Core().Events(\"\")})\n\trecorder := eventBroadcaster.NewRecorder(api.EventSource{Component: \"controller-manager\"})\n"
  },
  {
    "id" : "21ac9ac8-cef0-420a-b776-484d3409c60e",
    "prId" : 32495,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32495#pullrequestreview-1715764",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62b0c309-b4de-4de5-aecc-2471ebf03ee8",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "s/restclient.../client(\"garbage-collector\")/\n",
        "createdAt" : "2016-09-27T11:30:31Z",
        "updatedAt" : "2016-09-28T11:58:47Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "2cbb619c-aa80-434a-89fa-b24e38000160",
        "parentId" : "62b0c309-b4de-4de5-aecc-2471ebf03ee8",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Done.\n",
        "createdAt" : "2016-09-27T11:56:59Z",
        "updatedAt" : "2016-09-28T11:58:47Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb0a13c1e5b0d6058f4ec777be343b32ed60b780",
    "line" : null,
    "diffHunk" : "@@ -1,1 +224,228 @@\tif s.TerminatedPodGCThreshold > 0 {\n\t\tgo podgc.NewPodGC(client(\"pod-garbage-collector\"), sharedInformers.Pods().Informer(),\n\t\t\tint(s.TerminatedPodGCThreshold)).Run(wait.NeverStop)\n\t\ttime.Sleep(wait.Jitter(s.ControllerStartInterval.Duration, ControllerStartJitter))\n\t}"
  },
  {
    "id" : "2d22dd4b-a623-4d49-b5ce-7378a252c4f3",
    "prId" : 29137,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "296d6462-9df6-43c7-9599-7f56f992997b",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "I didn't notice that earlier, but I see this is a pattern, we should think about changing. Using strings for groupVersion is not the recommended approach. But that's an overall problem with this file, can be addressed later on.\n",
        "createdAt" : "2016-08-05T18:55:53Z",
        "updatedAt" : "2016-08-05T20:37:01Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "190a8add-105e-4a09-8233-b9071891f7c7",
        "parentId" : "296d6462-9df6-43c7-9599-7f56f992997b",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Did you mean we should use something like `batchapiv2alpha1.SchemeGroupVersion` instead?\n",
        "createdAt" : "2016-08-05T20:42:44Z",
        "updatedAt" : "2016-08-05T20:42:44Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "da57c93a8a68f993237466c2004ad810de47f47d",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +383,387 @@\t}\n\n\tgroupVersion = \"batch/v2alpha1\"\n\tresources, found = resourceMap[groupVersion]\n\tif containsVersion(versions, groupVersion) && found {"
  },
  {
    "id" : "4cfad6b9-e3a1-495a-8c42-cbe833fa57e0",
    "prId" : 29006,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a19ff083-7943-4f51-a169-9f557644ead2",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "It might make sense to change this into a struct or a list of required params and a struct of optional params...  This is hard to follow\n",
        "createdAt" : "2016-08-05T17:14:00Z",
        "updatedAt" : "2016-08-18T10:50:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "eef336f0-450d-4891-9354-dff8d6a9c233",
        "parentId" : "a19ff083-7943-4f51-a169-9f557644ead2",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Filled #30219 to fix it as separate item.\n",
        "createdAt" : "2016-08-08T10:54:20Z",
        "updatedAt" : "2016-08-18T10:50:16Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5d562f37ab029d2b562e23bd23e906ee099a45",
    "line" : null,
    "diffHunk" : "@@ -1,1 +425,429 @@\t}\n\tvolumeController := persistentvolumecontroller.NewPersistentVolumeController(\n\t\tclientset.NewForConfigOrDie(restclient.AddUserAgent(kubeconfig, \"persistent-volume-binder\")),\n\t\ts.PVClaimBinderSyncPeriod.Duration,\n\t\talphaProvisioner,"
  },
  {
    "id" : "8ebec6a7-aa4d-4302-8261-c922df873d4e",
    "prId" : 27778,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81ac6288-c051-4221-84ef-45cb437a98e4",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Don't modify `StartControllers`. Just pass the recorder directly to the controller that needs it, e.g. `NewAttachDetachController()`\n",
        "createdAt" : "2016-06-23T02:36:22Z",
        "updatedAt" : "2016-08-17T13:54:17Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "782d7d9815c18bcbf1272803c25027ebdad7995e",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +164,168 @@\n\trun := func(stop <-chan struct{}) {\n\t\terr := StartControllers(s, kubeClient, kubeconfig, stop, recorder)\n\t\tglog.Fatalf(\"error running controllers: %v\", err)\n\t\tpanic(\"unreachable\")"
  },
  {
    "id" : "39a972b4-5640-4188-838d-bf65715eb098",
    "prId" : 26054,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03cf43b6-f152-4d01-9a1f-9fa8666db4b3",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Errorf\n\nOr maybe even Fatalf\n",
        "createdAt" : "2016-05-23T08:54:43Z",
        "updatedAt" : "2016-05-23T08:54:43Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "08385b2c5fabb033b202a9fc79b72950856c3ae6",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +228,232 @@\t_, clusterCIDR, err := net.ParseCIDR(s.ClusterCIDR)\n\tif err != nil {\n\t\tglog.Warningf(\"Unsuccessful parsing of cluster CIDR %v: %v\", s.ClusterCIDR, err)\n\t}\n\t_, serviceCIDR, err := net.ParseCIDR(s.ServiceCIDR)"
  },
  {
    "id" : "bbf361db-3175-48bb-a4be-ae48447f1d67",
    "prId" : 26054,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f6ad043-cdec-4782-9653-6f7113a1bb79",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Errorf\n\nOr maybe even Fatalf\n",
        "createdAt" : "2016-05-23T08:54:50Z",
        "updatedAt" : "2016-05-23T08:54:50Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "d8e29194-ea41-4268-ae1d-520fca6abf19",
        "parentId" : "5f6ad043-cdec-4782-9653-6f7113a1bb79",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "It's not fatal - we do allow not passing those variables if NC is not assigning CIDRs.\n",
        "createdAt" : "2016-05-23T09:15:42Z",
        "updatedAt" : "2016-05-23T09:15:42Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "6811e2b9-6d4a-43a3-a341-8f0e1a89bc8f",
        "parentId" : "5f6ad043-cdec-4782-9653-6f7113a1bb79",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "OK - I see.\n",
        "createdAt" : "2016-05-23T09:17:12Z",
        "updatedAt" : "2016-05-23T09:17:12Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "08385b2c5fabb033b202a9fc79b72950856c3ae6",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +232,236 @@\t_, serviceCIDR, err := net.ParseCIDR(s.ServiceCIDR)\n\tif err != nil {\n\t\tglog.Warningf(\"Unsuccessful parsing of service CIDR %v: %v\", s.ServiceCIDR, err)\n\t}\n\tnodeController := nodecontroller.NewNodeController(cloud, clientset.NewForConfigOrDie(restclient.AddUserAgent(kubeconfig, \"node-controller\")),"
  },
  {
    "id" : "5444db8e-0fe6-44b0-a066-a9afce747086",
    "prId" : 25764,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8a4f72a-268f-4db3-bc66-510b5de99990",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Remove the else. https://github.com/golang/go/wiki/CodeReviewComments#indent-error-flow\n",
        "createdAt" : "2016-07-02T02:26:19Z",
        "updatedAt" : "2016-07-19T18:26:10Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "72ec1371-b1a1-40a4-9268-de3657b56d2b",
        "parentId" : "c8a4f72a-268f-4db3-bc66-510b5de99990",
        "authorId" : "dabe34ec-22c8-4948-a579-d661cdc42761",
        "body" : "How else should this be done? It can't return or exit here, and shouldn't start the control loop if the signer failed to initialize. I can change the conditionals around to reduce indentation, but the control flow will be the same.\n",
        "createdAt" : "2016-07-05T21:42:38Z",
        "updatedAt" : "2016-07-19T18:26:10Z",
        "lastEditedBy" : "dabe34ec-22c8-4948-a579-d661cdc42761",
        "tags" : [
        ]
      },
      {
        "id" : "2af9d29d-f4a3-49fd-98bc-ac2e5e5c45f5",
        "parentId" : "c8a4f72a-268f-4db3-bc66-510b5de99990",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Oops, misread, I withdraw comment\n",
        "createdAt" : "2016-07-07T18:18:33Z",
        "updatedAt" : "2016-07-19T18:26:10Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "d5194ee5-46f2-4449-af18-4f71f96674fa",
        "parentId" : "c8a4f72a-268f-4db3-bc66-510b5de99990",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "Why is it not glog.Fatalf though?\n",
        "createdAt" : "2016-07-20T06:40:03Z",
        "updatedAt" : "2016-07-20T06:40:03Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      },
      {
        "id" : "663532bc-d440-43a4-9af0-a18cf3f05349",
        "parentId" : "c8a4f72a-268f-4db3-bc66-510b5de99990",
        "authorId" : "dabe34ec-22c8-4948-a579-d661cdc42761",
        "body" : "It isn't fatal to Kubernetes; there are a lot ways you could accomplish this task aside from running the signing controller.\n",
        "createdAt" : "2016-07-22T19:58:35Z",
        "updatedAt" : "2016-07-22T19:58:35Z",
        "lastEditedBy" : "dabe34ec-22c8-4948-a579-d661cdc42761",
        "tags" : [
        ]
      }
    ],
    "commit" : "902b9faa6fe0196b92345b5df5448910b509da70",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +441,445 @@\t\t\tif err != nil {\n\t\t\t\tglog.Errorf(\"Failed to start certificate controller: %v\", err)\n\t\t\t} else {\n\t\t\t\tgo certController.Run(1, wait.NeverStop)\n\t\t\t}"
  },
  {
    "id" : "19b3e2e6-d1e3-4312-bdc1-631d6364763a",
    "prId" : 25457,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b97a0ea-7c39-4843-81c0-87c2df9265ef",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "pkg/controller/persistentvolume/controller_base.go creates an informer for PVC and PV - should this be de-dup'ed?\n",
        "createdAt" : "2016-05-24T20:58:46Z",
        "updatedAt" : "2016-05-25T06:02:46Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "f3d0a8b4-cef0-41fc-adeb-473f0d70a19a",
        "parentId" : "0b97a0ea-7c39-4843-81c0-87c2df9265ef",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "This PR introduces shared PV/PVC informers that all controllers can share. After it goes in, we can refactor `persistentvolume/controller_base.go` to use them\n",
        "createdAt" : "2016-05-24T21:22:35Z",
        "updatedAt" : "2016-05-25T06:02:46Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "fd3a64a7-7ba9-40e7-8e8b-1fe55981f7f4",
        "parentId" : "0b97a0ea-7c39-4843-81c0-87c2df9265ef",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Please open an issue so we don't forget this\n",
        "createdAt" : "2016-05-25T05:23:38Z",
        "updatedAt" : "2016-05-25T06:02:46Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "587ce5a2-a534-49a8-99f6-84433325eaf9",
        "parentId" : "0b97a0ea-7c39-4843-81c0-87c2df9265ef",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Done: https://github.com/kubernetes/kubernetes/issues/26247\n",
        "createdAt" : "2016-05-25T05:36:08Z",
        "updatedAt" : "2016-05-25T06:02:46Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "92500a20d72712f3ef8e825ee41c38a84288c4a3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +199,203 @@\tnodeInformer := informers.CreateSharedNodeIndexInformer(clientset.NewForConfigOrDie(restclient.AddUserAgent(kubeconfig, \"node-informer\")), ResyncPeriod(s)())\n\tpvcInformer := informers.CreateSharedPVCIndexInformer(clientset.NewForConfigOrDie(restclient.AddUserAgent(kubeconfig, \"pvc-informer\")), ResyncPeriod(s)())\n\tpvInformer := informers.CreateSharedPVIndexInformer(clientset.NewForConfigOrDie(restclient.AddUserAgent(kubeconfig, \"pv-informer\")), ResyncPeriod(s)())\n\tinformers := map[reflect.Type]framework.SharedIndexInformer{}\n\tinformers[reflect.TypeOf(&api.Pod{})] = podInformer"
  },
  {
    "id" : "75332192-1888-49ec-ac37-2b0c681eac26",
    "prId" : 23575,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6607178-0955-4476-a272-a95a895e369f",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "@deads2k I'm creating a new controller so I was looking into using a shared informer. Some questions:\n1. Are shared informers ready for wider use, or are they still a work in progress? \n2. All shared informers (including the `podInformer`) are started here (`Run(...)` is called) in the `controllermanager`, but I see that the individual controllers also start the pod informer passed into them manually (`internalPodInformer.Run(...)`), won't this result in the `podInformer`'s `Run(...)` getting called twice?\n",
        "createdAt" : "2016-04-28T01:04:49Z",
        "updatedAt" : "2016-04-28T01:04:49Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "36a48cdb-3212-4970-8446-d46eb5602a11",
        "parentId" : "b6607178-0955-4476-a272-a95a895e369f",
        "authorId" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "body" : "@saad-ali the internalPodInformer field of the controllers is only set when calling the New_Resource_ControllerFromClient() functions.  All of the Run() functions have a check to see if the internalPodInformer != nil before trying to start it.\n\nSaid another way, tests use New_Resource_ControllerFromClient() so that the Run() will start the informer.  The regular New_Resource_Controller() function, don't set internalPodInformer, and the shared informer is started here.\n\nAlso, FYI I have PR #24841 open for converting some of the remaining controllers to using the shared pod informer.\n",
        "createdAt" : "2016-04-28T01:34:38Z",
        "updatedAt" : "2016-04-28T01:35:38Z",
        "lastEditedBy" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "tags" : [
        ]
      },
      {
        "id" : "c15ec528-66d7-487e-8c16-e13ae16d72e5",
        "parentId" : "b6607178-0955-4476-a272-a95a895e369f",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "@sjenning that makes perfect sense. Thanks for the clarification.\n",
        "createdAt" : "2016-04-28T03:55:20Z",
        "updatedAt" : "2016-04-28T03:55:20Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "9614a050-4645-45e0-be77-aca564e42c8f",
        "parentId" : "b6607178-0955-4476-a272-a95a895e369f",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Are shared informers ready for wider use, or are they still a work in progress?\n\nThey are ready for wider use.  The initial transitions of controllers to a shared pod informer went very smoothly, so I don't expect any structural problems.  Remember not to mess with the object in the cache, its shared.\n",
        "createdAt" : "2016-04-28T12:54:03Z",
        "updatedAt" : "2016-04-28T12:54:03Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "897dbb48-f218-4f28-8fd7-cc06526642c5",
        "parentId" : "b6607178-0955-4476-a272-a95a895e369f",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We should have called the informer method that your register on\n\"AddMeAsLongAsIPromiseNotToMutateTheSharedCache\"\n\nOn Thu, Apr 28, 2016 at 8:54 AM, David Eads notifications@github.com\nwrote:\n\n> In cmd/kube-controller-manager/app/controllermanager.go\n> https://github.com/kubernetes/kubernetes/pull/23575#discussion_r61421456\n> :\n> \n> > @@ -410,6 +418,11 @@ func StartControllers(s *options.CMServer, kubeClient *client.Client, kubeconfig\n> >     ).Run()\n> >     time.Sleep(wait.Jitter(s.ControllerStartInterval.Duration, ControllerStartJitter))\n> > -   // run the shared informers\n> > -   for _, informer := range informers {\n> > -       go informer.Run(wait.NeverStop)\n> \n> Are shared informers ready for wider use, or are they still a work in\n> progress?\n> \n> They are ready for wider use. The initial transitions of controllers to a\n> shared pod informer went very smoothly, so I don't expect any structural\n> problems. Remember not to mess with the object in the cache, its shared.\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/23575/files/f0c33d65b6fea84d791059d96c93a15e4b3de4ec#r61421456\n",
        "createdAt" : "2016-04-28T14:14:23Z",
        "updatedAt" : "2016-04-28T14:14:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "0b5d5c17-abfa-415e-bba8-83202a7d88f2",
        "parentId" : "b6607178-0955-4476-a272-a95a895e369f",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : ":-)\nbut I completely agree\n",
        "createdAt" : "2016-04-28T14:18:58Z",
        "updatedAt" : "2016-04-28T14:18:58Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "f736b7d0-e03a-403c-ab04-4cc3297777ac",
        "parentId" : "b6607178-0955-4476-a272-a95a895e369f",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "> They are ready for wider use. The initial transitions of controllers to a shared pod informer went very smoothly, so I don't expect any structural problems. Remember not to mess with the object in the cache, its shared.\n\nSounds good, thanks!\n",
        "createdAt" : "2016-04-28T20:16:42Z",
        "updatedAt" : "2016-04-28T20:16:42Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0c33d65b6fea84d791059d96c93a15e4b3de4ec",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +421,425 @@\t// run the shared informers\n\tfor _, informer := range informers {\n\t\tgo informer.Run(wait.NeverStop)\n\t}\n"
  },
  {
    "id" : "5d96214b-7040-4bb8-b7b8-f732f610250a",
    "prId" : 20702,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07ac52e7-b942-4015-916a-aceee730cd5c",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Do we want to pass NodeControllerOptions to route-controller?\n",
        "createdAt" : "2016-02-05T10:07:36Z",
        "updatedAt" : "2016-02-05T11:18:02Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "e2993cdb-c878-4be4-9333-931a785e3064",
        "parentId" : "07ac52e7-b942-4015-916a-aceee730cd5c",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "I'm not sure what the relation between those controllers should be exactly. Currently, IIUC, RouteController depends on NC and probably may be merged into it. I'm not sure if in the future we won't split NC into \"NodeHealthcheckController\" and \"NodeProvisioningController\" (or sth like that), as those are two orthogonal responsibilities.\n\nSo: if you feel strongly about it I can do it, otherwise I'd keep it the way it's now, as I think this thing deserves bigger refactor in near future.\n",
        "createdAt" : "2016-02-05T10:12:48Z",
        "updatedAt" : "2016-02-05T11:18:02Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "a80daf7f-68c9-4718-a390-d236aac6b680",
        "parentId" : "07ac52e7-b942-4015-916a-aceee730cd5c",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "So maybe add a TODO about it?\n",
        "createdAt" : "2016-02-05T10:21:04Z",
        "updatedAt" : "2016-02-05T11:18:02Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c191e787b9aefe47df256e35a41877d81bdf321",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +217,221 @@\t\t\t\tclientset.NewForConfigOrDie(client.AddUserAgent(kubeconfig, \"route-controller\")),\n\t\t\t\ts.ClusterName,\n\t\t\t\t&s.NodeControllerOptions.ClusterCIDR,\n\t\t\t)\n\t\t\trouteController.Run(s.NodeSyncPeriod)"
  },
  {
    "id" : "7edeceb8-279a-4a87-9324-e1722da1d58f",
    "prId" : 20702,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f9e3544-eb1b-42a5-aab9-1f0a3b6df40d",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Maybe HorizontalController (for consistency with the name of controller)?\n",
        "createdAt" : "2016-02-05T10:09:23Z",
        "updatedAt" : "2016-02-05T11:18:02Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "a54061ac-4415-4bef-ad43-c51950c99217",
        "parentId" : "4f9e3544-eb1b-42a5-aab9-1f0a3b6df40d",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "I'm using folder names for naming.\n",
        "createdAt" : "2016-02-05T10:13:26Z",
        "updatedAt" : "2016-02-05T11:18:02Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "fa3cb6c1-da36-4397-ad0f-fab53ea98398",
        "parentId" : "4f9e3544-eb1b-42a5-aab9-1f0a3b6df40d",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "We should rename one or another then...\n",
        "createdAt" : "2016-02-05T10:21:34Z",
        "updatedAt" : "2016-02-05T11:18:02Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c191e787b9aefe47df256e35a41877d81bdf321",
    "line" : null,
    "diffHunk" : "@@ -1,1 +271,275 @@\t\t\t// TODO: rename controller/podautoscaler into controller/horizontal\n\t\t\tpodautoscaler.NewHorizontalController(hpaClient.Core(), hpaClient.Extensions(), hpaClient, metricsClient).\n\t\t\t\tRun(s.PodAutoscalerOptions.HorizontalPodAutoscalerSyncPeriod)\n\t\t}\n"
  },
  {
    "id" : "77afe937-2a54-4f55-82bc-93c627735cdb",
    "prId" : 20446,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df692cb3-ba04-4438-a41b-8e3eb27c9ba8",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "We have lots of other controllers now: ReplicaSet, Deployment, Job, DaemonSet\n",
        "createdAt" : "2016-02-19T04:25:09Z",
        "updatedAt" : "2016-02-27T01:48:30Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "287b2429-4aef-41a5-8057-96cd647aad52",
        "parentId" : "df692cb3-ba04-4438-a41b-8e3eb27c9ba8",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Yep, plan to tackle in a follow-up.  Amadeus folks also plan to add support to quota services by node ports and load balancers.  /cc @sdminonne \n",
        "createdAt" : "2016-02-19T19:01:01Z",
        "updatedAt" : "2016-02-27T01:48:30Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "95df07aa9d4b36dc67458be7416f46cb2f3f72d8",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +227,231 @@\t\tapi.Kind(\"Pod\"),\n\t\tapi.Kind(\"Service\"),\n\t\tapi.Kind(\"ReplicationController\"),\n\t\tapi.Kind(\"PersistentVolumeClaim\"),\n\t\tapi.Kind(\"Secret\"),"
  },
  {
    "id" : "5a76fd2b-5724-4b77-9032-7a10c4eb33c3",
    "prId" : 18357,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "380e5355-79a1-4f5d-a671-b0a54f8c781d",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "...maybe we should conduct a survey of what this binary serves before potentially serving it to the world. If it's all read-only things, I think this should be OK?\n",
        "createdAt" : "2015-12-08T18:32:20Z",
        "updatedAt" : "2015-12-23T07:37:06Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "832122f8-7e2f-429f-a1fd-926afed4caf0",
        "parentId" : "380e5355-79a1-4f5d-a671-b0a54f8c781d",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "+1\n\n/cc @stephenR \n",
        "createdAt" : "2015-12-14T21:50:28Z",
        "updatedAt" : "2015-12-23T07:37:06Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4202cbee9eb362da61cd2c4c74e217ca4fd0bdc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +112,116 @@\ts := CMServer{\n\t\tPort:                              ports.ControllerManagerPort,\n\t\tAddress:                           net.ParseIP(\"0.0.0.0\"),\n\t\tConcurrentEndpointSyncs:           5,\n\t\tConcurrentRCSyncs:                 5,"
  },
  {
    "id" : "18c31ec2-4154-407f-974d-e2b7b0a2c261",
    "prId" : 18315,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "811c7345-972f-477a-963b-ba678c347f48",
        "parentId" : null,
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "@wojtek-t @jszczepkowski  this is the culprit.  I made the default tolerance was way too high (off by a decimal)!  \nI will fix and re-validate this manually.  which were the specific autoscale tests that it broke?  just for good measure ill paste results in the PR ...\n",
        "createdAt" : "2015-12-13T14:11:25Z",
        "updatedAt" : "2015-12-13T14:28:45Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      }
    ],
    "commit" : "5161d169baa5716c39be7fc7c9b070b3ec43933a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +364,368 @@\t\t\t)\n\t\t\t// TODO parameterize tolerance/downscale/upscale options.\n\t\t\ttolerance := 1.0\n\t\t\tdownScale := time.Duration(5) * time.Second\n\t\t\tupScale := time.Duration(3) * time.Second"
  },
  {
    "id" : "419296ad-a3be-420c-a6ee-62d7a8ca9d51",
    "prId" : 17133,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e5fcdf8-b43a-4007-879a-691b3dcf6fb0",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Shouldn't this be run forever?\n",
        "createdAt" : "2015-11-30T16:18:58Z",
        "updatedAt" : "2015-12-03T22:35:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "55d4f70f8e33ec67a56caaec0ec6bc21ebfdd94f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +309,313 @@\t}\n\n\tgo resourcequotacontroller.NewResourceQuotaController(\n\t\tkubeClient, controller.StaticResyncPeriodFunc(s.ResourceQuotaSyncPeriod)).Run(s.ConcurrentResourceQuotaSyncs, util.NeverStop)\n"
  },
  {
    "id" : "a03c7f78-f040-48de-a438-832a2d8a6d61",
    "prId" : 15024,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1e4edad-289b-424a-ad6f-4ea73fd52aac",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "It seems like the flag should align with: \nhttps://github.com/kubernetes/kubernetes/pull/15046\n\nThere was a request to make the flag be \"Disable\" instead of \"Enable\", and things would be on by default...\n",
        "createdAt" : "2015-10-05T18:13:18Z",
        "updatedAt" : "2015-10-05T21:54:46Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "5f9c572b-0e95-4a02-904d-5b0b5f8e64f4",
        "parentId" : "b1e4edad-289b-424a-ad6f-4ea73fd52aac",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "I prefer using affermative language to picking language so that go defaults to the correct value. For example, I don't mind an --enable flag that is true by default. It's mostly stylistic and I don't feel strongly but I prefer reading:\n\n```\nif enabled { ... }\nif !enabled { ... }\n```\n\nto:\n\n```\nif disabled { ... }\nif !disabled { ... }\n```\n\nPositive booleans improve readability.\n",
        "createdAt" : "2015-10-05T23:56:06Z",
        "updatedAt" : "2015-10-06T00:01:37Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "2268cf3e-af0a-489d-a47f-582a4e85d395",
        "parentId" : "b1e4edad-289b-424a-ad6f-4ea73fd52aac",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "If this flag is intended to go away, and be based on discovery, I guess I am not too concerned.\n",
        "createdAt" : "2015-10-07T15:59:10Z",
        "updatedAt" : "2015-10-07T15:59:10Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "833be48d614ce9f7743dd6c4905fe3e2abe7d582",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +189,193 @@\tfs.StringVar(&s.Kubeconfig, \"kubeconfig\", s.Kubeconfig, \"Path to kubeconfig file with authorization and master location information.\")\n\tfs.StringVar(&s.RootCAFile, \"root-ca-file\", s.RootCAFile, \"If set, this root certificate authority will be included in service account's token secret. This must be a valid PEM-encoded CA bundle.\")\n\tfs.BoolVar(&s.EnableExperimental, \"enable-experimental\", s.EnableExperimental, \"Enables experimental controllers (requires enabling experimental API on apiserver).\")\n}\n"
  },
  {
    "id" : "2cc3734a-1f44-4bf2-b485-c92d27eafb9b",
    "prId" : 14325,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9290f399-43bd-4012-a420-cb4ec8fa3b00",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "This is a bit imprecise because it doesn't clearly say how many terminated pods will actually be deleted. I would phrase as \"The terminated pod garbage collector will remove all but this many terminated pods, starting with the oldest. If <= 0, the terminated pod garbage collector is disabled.\"\n",
        "createdAt" : "2015-09-25T05:57:33Z",
        "updatedAt" : "2015-09-25T05:57:33Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "376faea1cf5b5e0e79cb552520d10de9543f6612",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +167,171 @@\tfs.IntVar(&s.VolumeConfigFlags.PersistentVolumeRecyclerMinimumTimeoutHostPath, \"pv-recycler-minimum-timeout-hostpath\", s.VolumeConfigFlags.PersistentVolumeRecyclerMinimumTimeoutHostPath, \"The minimum ActiveDeadlineSeconds to use for a HostPath Recycler pod.  This is for development and testing only and will not work in a multi-node cluster.\")\n\tfs.IntVar(&s.VolumeConfigFlags.PersistentVolumeRecyclerIncrementTimeoutHostPath, \"pv-recycler-timeout-increment-hostpath\", s.VolumeConfigFlags.PersistentVolumeRecyclerIncrementTimeoutHostPath, \"the increment of time added per Gi to ActiveDeadlineSeconds for a HostPath scrubber pod.  This is for development and testing only and will not work in a multi-node cluster.\")\n\tfs.IntVar(&s.TerminatedPodGCThreshold, \"terminated-pod-gc-threshold\", s.TerminatedPodGCThreshold, \"Number of terminated pods that can exist before the terminated pod garbage collector starts deleting terminated pods. If <= 0, the terminated pod garbage collector is disabled.\")\n\tfs.DurationVar(&s.HorizontalPodAutoscalerSyncPeriod, \"horizontal-pod-autoscaler-sync-period\", s.HorizontalPodAutoscalerSyncPeriod, \"The period for syncing the number of pods in horizontal pod autoscaler.\")\n\tfs.DurationVar(&s.DeploymentControllerSyncPeriod, \"deployment-controller-sync-period\", s.DeploymentControllerSyncPeriod, \"Period for syncing the deployments.\")"
  },
  {
    "id" : "1fe0b8f1-328d-4da9-954e-3c46ad657662",
    "prId" : 13553,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d60733a9-cc3f-4c24-a4ba-5d04bb3dd87e",
        "parentId" : null,
        "authorId" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "body" : "Can we make EnableHorizontalPodAutoscaler more generic?  There may be other experimental resources that will need to be cleaned up when a namespace is deleted.  Maybe a new flag that is based upon whether experimental is enabled?\n",
        "createdAt" : "2015-09-04T20:41:10Z",
        "updatedAt" : "2015-09-09T09:00:06Z",
        "lastEditedBy" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "tags" : [
        ]
      },
      {
        "id" : "55a03e26-ec28-488b-9c66-0bde274bb676",
        "parentId" : "d60733a9-cc3f-4c24-a4ba-5d04bb3dd87e",
        "authorId" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "body" : "I'm not sure if we want it. There may be many other experimental controllers (deployments, deamons, ...). I think we should have a separate flag for enabling each of them, and take alternative of them here.\n",
        "createdAt" : "2015-09-04T22:03:36Z",
        "updatedAt" : "2015-09-09T09:00:06Z",
        "lastEditedBy" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "tags" : [
        ]
      },
      {
        "id" : "0122a33d-7201-4738-8854-508c34994eab",
        "parentId" : "d60733a9-cc3f-4c24-a4ba-5d04bb3dd87e",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Maybe just a separate line so folks that want to put flags behind their feature its easier to see where they should add the code in the future.\n\n```\n// An OR of all flags to enable/disable experimental features\nexperimentalMode := s.EnableHorizontalPodAutoscaler\nnamespaceController := ....\n```\n",
        "createdAt" : "2015-09-08T14:27:25Z",
        "updatedAt" : "2015-09-09T09:00:06Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "5f5467d1-be75-4a66-8e33-d6fc8824ba32",
        "parentId" : "d60733a9-cc3f-4c24-a4ba-5d04bb3dd87e",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "+1. \n",
        "createdAt" : "2015-09-08T19:49:40Z",
        "updatedAt" : "2015-09-09T09:00:06Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "1a2029ac-9fb5-49dc-bcdc-044ca2297b3c",
        "parentId" : "d60733a9-cc3f-4c24-a4ba-5d04bb3dd87e",
        "authorId" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "body" : "Done.\n",
        "createdAt" : "2015-09-09T08:47:00Z",
        "updatedAt" : "2015-09-09T09:00:06Z",
        "lastEditedBy" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6998247e1b3dc07d3162030b4c914207cd2086ae",
    "line" : null,
    "diffHunk" : "@@ -1,1 +246,250 @@\texperimentalMode := s.EnableHorizontalPodAutoscaler\n\tnamespaceController := namespacecontroller.NewNamespaceController(kubeClient, experimentalMode, s.NamespaceSyncPeriod)\n\tnamespaceController.Run()\n\n\tif s.EnableHorizontalPodAutoscaler {"
  },
  {
    "id" : "24545264-369c-4f0b-b2e3-5527f625f828",
    "prId" : 13310,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c777503a-fb2a-49a8-8f8e-681bb8c06a2e",
        "parentId" : null,
        "authorId" : null,
        "body" : "Should this be PersistentVolumeRecyclerTimeout instead of PersistentVolumeRecyclerTimeoutNFS ?\n",
        "createdAt" : "2015-08-28T17:58:39Z",
        "updatedAt" : "2015-09-01T16:05:03Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "a849d03b-f00f-484c-86c0-945ec736376d",
        "parentId" : "c777503a-fb2a-49a8-8f8e-681bb8c06a2e",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "No, this should be specific to _a_ config value.   A CLI flag has to map 1:1 to something in the binary which then gets set on an instance of VolumeConfig (with a more generic name) and passed to the plugin.\n\nI am going to rename this top-level on to VolumeConfigFlags so as it avoid confusion with volume.VolumeConfig.\n",
        "createdAt" : "2015-08-28T19:24:53Z",
        "updatedAt" : "2015-09-01T16:05:03Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "68358fd30879a04eb53d8db6e940fcc785710682",
    "line" : null,
    "diffHunk" : "@@ -1,1 +110,114 @@\t\tVolumeConfigFlags: VolumeConfigFlags{\n\t\t\t// default values here\n\t\t\tPersistentVolumeRecyclerTimeoutNFS: 300,\n\t\t},\n\t}"
  },
  {
    "id" : "4bfbabaa-b777-4269-8dd5-56a8aa44e63f",
    "prId" : 13310,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "320c0348-f923-4e46-b30f-aec87655d512",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Is this inherently NFS only?  I realize we probably want to differentiate this for different plugin types, but it seems like this could be applied to many of the other plugins.\n",
        "createdAt" : "2015-08-31T17:47:48Z",
        "updatedAt" : "2015-09-01T16:05:03Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "630ba5a0-9bf8-4b03-a5c3-d1ab85695f13",
        "parentId" : "320c0348-f923-4e46-b30f-aec87655d512",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Each thing we want to override would need to be explicitly defined in the binary (i.e, this struct).\n\nBecause timeout's can differ by plugin, each gets its own attribute in `VolumeConfigFlags`.\n\nThe generic re-use comes from mapping VolumeConfigFlags to VolumeConfig.\n",
        "createdAt" : "2015-08-31T17:53:54Z",
        "updatedAt" : "2015-09-01T16:05:03Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "68358fd30879a04eb53d8db6e940fcc785710682",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +121,125 @@// part of the code which knows what plugins are supported and which CLI flags correspond to each plugin.\ntype VolumeConfigFlags struct {\n\tPersistentVolumeRecyclerTimeoutNFS int\n}\n"
  },
  {
    "id" : "4e880b47-b877-4e7c-909a-aaf780dad501",
    "prId" : 10264,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04b59598-8548-43ae-bc2b-0d4eb421c3f1",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "if they didn't provide a RootCAFile, should we use the CAData/CAFile in the `kubeconfig` if present?\n",
        "createdAt" : "2015-06-24T04:53:34Z",
        "updatedAt" : "2015-06-24T22:10:33Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5760fe1957e9ee62fbe114e8eb71f5125d0ab450",
    "line" : null,
    "diffHunk" : "@@ -1,1 +260,264 @@\t} else {\n\t\trootCA = kubeconfig.CAData\n\t}\n\n\tif len(s.ServiceAccountKeyFile) > 0 {"
  },
  {
    "id" : "15e00b17-87bb-49c9-910e-128b59b584a5",
    "prId" : 6969,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f6058b4-be7f-41a7-8fc9-86034d7d3bc9",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "we call this `--server` in `kubectl` commands\n",
        "createdAt" : "2015-04-17T17:11:23Z",
        "updatedAt" : "2015-04-17T20:07:38Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "ad80d960-b701-4aee-9a49-446c5726d433",
        "parentId" : "3f6058b4-be7f-41a7-8fc9-86034d7d3bc9",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Roger.  All the existing system components take a --master flag, and I don't want to break existing cluster setups.\n",
        "createdAt" : "2015-04-17T17:20:17Z",
        "updatedAt" : "2015-04-17T20:07:38Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "56bae87f-c72d-4de9-b5d8-126e70f514fb",
        "parentId" : "3f6058b4-be7f-41a7-8fc9-86034d7d3bc9",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Eventually, I expect this won't be needed since all the info is in the kubeconfig.\n",
        "createdAt" : "2015-04-17T17:20:38Z",
        "updatedAt" : "2015-04-17T20:07:38Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6081fa52a7b5612d5791e6ab73ddb58bf5679b10",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +132,136 @@\tfs.StringVar(&s.ClusterName, \"cluster_name\", s.ClusterName, \"The instance prefix for the cluster\")\n\tfs.BoolVar(&s.EnableProfiling, \"profiling\", false, \"Enable profiling via web interface host:port/debug/pprof/\")\n\tfs.StringVar(&s.Master, \"master\", s.Master, \"The address of the Kubernetes API server (overrides any value in kubeconfig)\")\n\tfs.StringVar(&s.Kubeconfig, \"kubeconfig\", s.Kubeconfig, \"Path to kubeconfig file with authorization and master location information.\")\n}"
  },
  {
    "id" : "7587f7c6-4feb-48af-b8b1-185075a29e7d",
    "prId" : 6058,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0491261-26b7-433b-8d47-b96710f411a8",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Is KubeletConfig now unused?\n",
        "createdAt" : "2015-04-01T16:25:21Z",
        "updatedAt" : "2015-04-08T07:44:58Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "95afd206-2678-4d4c-b408-ce466fc27cf4",
        "parentId" : "d0491261-26b7-433b-8d47-b96710f411a8",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "I think the answer is no.\n",
        "createdAt" : "2015-04-02T19:50:12Z",
        "updatedAt" : "2015-04-08T07:44:58Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      }
    ],
    "commit" : "72182735b92b7c4761fa40e85c49fbd8a54a48ca",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +87,91 @@\t\tNodeMemory:              resource.MustParse(\"3Gi\"),\n\t\tSyncNodeList:            true,\n\t\tKubeletConfig: client.KubeletConfig{\n\t\t\tPort:        ports.KubeletPort,\n\t\t\tEnableHttps: true,"
  },
  {
    "id" : "24a1baaf-1e51-41e7-98db-e8334020b792",
    "prId" : 5635,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d29bd3e3-e192-4d7d-96a6-85aff8fd0880",
        "parentId" : null,
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "This is nice to have, thanks!\n",
        "createdAt" : "2015-03-20T18:29:10Z",
        "updatedAt" : "2015-03-21T01:47:07Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      },
      {
        "id" : "a50c16aa-32df-4476-878f-ffccc15b4af4",
        "parentId" : "d29bd3e3-e192-4d7d-96a6-85aff8fd0880",
        "authorId" : "367dd7b1-86fa-48f7-aa20-489e5d4b6a8d",
        "body" : "@ddysher @bgrant0607 \n\nThanks, I will refactor the PR to have this change alone. I still have a few unanswered questions though before I do that.\n",
        "createdAt" : "2015-03-20T19:43:00Z",
        "updatedAt" : "2015-03-21T01:47:07Z",
        "lastEditedBy" : "367dd7b1-86fa-48f7-aa20-489e5d4b6a8d",
        "tags" : [
        ]
      }
    ],
    "commit" : "5871e53060de2cf27569c9b5240da87b7696965a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +83,87 @@\t\t\tPort:        ports.KubeletPort,\n\t\t\tEnableHttps: false,\n\t\t\tHTTPTimeout: time.Duration(5) * time.Second,\n\t\t},\n\t}"
  },
  {
    "id" : "b8a4ba0f-7ef5-4f67-8be1-5d1a2839b1d7",
    "prId" : 5554,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c33b5b2d-c3ac-431a-954e-931da6a4e479",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "So fast!\n",
        "createdAt" : "2015-03-18T03:19:50Z",
        "updatedAt" : "2015-03-24T14:44:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "84c9709299c2928d758a028cbab0d513ba739c9d",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +53,57 @@\tNodeSyncPeriod          time.Duration\n\tResourceQuotaSyncPeriod time.Duration\n\tNamespaceSyncPeriod     time.Duration\n\tRegisterRetryCount      int\n\tMachineList             util.StringList"
  }
]