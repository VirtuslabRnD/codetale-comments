[
  {
    "id" : "62e0c6e3-6cbf-4146-918f-d073c9df03d5",
    "prId" : 20037,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c729a7cc-1ed7-44d4-b025-396b26fd9670",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Don't glog lines include the time? Not that computing the elapsed time hurts anything.\n",
        "createdAt" : "2016-01-23T00:09:31Z",
        "updatedAt" : "2016-01-23T00:12:46Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8e742f462f993290b574ef6f2c08200bf18cbfb",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +442,446 @@\t\tglog.Fatalf(\"Unexpected error: %v\", err)\n\t}\n\tglog.Infof(\"Done reading config file, took %v\", time.Since(t))\n\tt = time.Now()\n\tvar controller api.ReplicationController"
  },
  {
    "id" : "0223f51b-388c-40a0-aeb3-8325db2f988b",
    "prId" : 19137,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4a09cb4-99ac-4d8c-a6c7-db0d5000db6c",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "hmm - 300s doesn't seem to be to small timeout. I'm not convinced it can change anything...\n",
        "createdAt" : "2015-12-28T11:55:41Z",
        "updatedAt" : "2015-12-28T11:55:41Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "fef53fdf-133e-4c79-bb54-18f40b7729af",
        "parentId" : "f4a09cb4-99ac-4d8c-a6c7-db0d5000db6c",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Me neither, but we also create some services and I have no idea what kind of thing ingress is doing behind the scenes.\n",
        "createdAt" : "2015-12-28T13:15:38Z",
        "updatedAt" : "2015-12-28T13:15:38Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9993f1d881a7c7479faa157a0e8e133331fadf5d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +76,80 @@\tmaxConcurrency int\n\n\tlongTestTimeout = time.Second * 500\n\n\tmaxTestTimeout = time.Minute * 15"
  },
  {
    "id" : "cb7d3d0a-2a88-4119-8788-d668973b587f",
    "prId" : 18635,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5c44a28-def2-4005-a6f9-a78c95f8954d",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Can you please add a comment to Watch() and WatchList() functions in:\npkg/storage/interface.go\nabout what resourceVersion semantics is (that we start right after the passed version).\n",
        "createdAt" : "2015-12-16T17:38:20Z",
        "updatedAt" : "2015-12-16T21:57:04Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "7c99c8a2-4632-43e7-a544-36aa11349a73",
        "parentId" : "b5c44a28-def2-4005-a6f9-a78c95f8954d",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Done. \n",
        "createdAt" : "2015-12-16T20:51:55Z",
        "updatedAt" : "2015-12-16T21:57:04Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "c505a5d49d35011abcb9c4fa853eb33b7b1efb6e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +64,68 @@\t\"k8s.io/kubernetes/test/integration/framework\"\n\n\tetcd \"github.com/coreos/etcd/client\"\n\t\"github.com/golang/glog\"\n\t\"github.com/spf13/pflag\""
  },
  {
    "id" : "5ed5e550-19f5-4dee-85aa-71328d1e0cfe",
    "prId" : 15200,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0140d38b-7697-4186-bf8e-eafcdc8af12b",
        "parentId" : null,
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "I know this is consistent with what we already have, but what do you think about `kubetypes` instead? It's shorter and consistent with `kubecontainer`. Probably makes sense to change separately.\n",
        "createdAt" : "2015-10-07T17:56:15Z",
        "updatedAt" : "2015-10-08T21:38:14Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "642f0786-4555-4a2f-b3d4-fda34876374f",
        "parentId" : "0140d38b-7697-4186-bf8e-eafcdc8af12b",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "ok with kubetypes. Might as well do it in this PR. I'll wait to see if there is any other suggestions and address them together.\n",
        "createdAt" : "2015-10-07T18:00:09Z",
        "updatedAt" : "2015-10-08T21:38:14Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "098ab059973a0ee21fe7cd0dc04593a9dd98c417",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +52,56 @@\tkubecontainer \"k8s.io/kubernetes/pkg/kubelet/container\"\n\t\"k8s.io/kubernetes/pkg/kubelet/dockertools\"\n\tkubeletTypes \"k8s.io/kubernetes/pkg/kubelet/types\"\n\t\"k8s.io/kubernetes/pkg/labels\"\n\t\"k8s.io/kubernetes/pkg/master\""
  },
  {
    "id" : "04d04bb1-d3a3-4cba-ba0a-99dc91d31f38",
    "prId" : 6655,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63310e2d-e434-43aa-a8cf-7f287d9b333e",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The canonical way to do this in go is to start N worker threads all reading from a channel, and then dump everything you want done into the channel.\n",
        "createdAt" : "2015-04-10T18:49:47Z",
        "updatedAt" : "2015-04-10T18:49:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "faf47b6f0ba0f6d124da2453933316f580822bbf",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +1007,1011 @@\t\t}\n\t\tglog.Infof(\"Running %d tests in parallel.\", numTestsToRun)\n\t\tvar wg sync.WaitGroup\n\t\twg.Add(numTestsToRun)\n\t\tfor i := 0; i < numTestsToRun; i++ {"
  },
  {
    "id" : "f11539f0-563f-499c-a033-f3c20620efc6",
    "prId" : 6582,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "990b6223-d858-4bf9-923e-91a80f6940a9",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Suggestion: is it enough to just look at status.phase == running and not use the kubelet client?\n",
        "createdAt" : "2015-04-08T20:54:20Z",
        "updatedAt" : "2015-04-08T20:54:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "62984f9beeb82b53b0b40c7856e1a25666f36f42",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +270,274 @@\t\tfor i := range pods.Items {\n\t\t\thost, id, namespace := pods.Items[i].Spec.Host, pods.Items[i].Name, pods.Items[i].Namespace\n\t\t\tglog.Infof(\"Check whether pod %s.%s exists on node %q\", id, namespace, host)\n\t\t\tif len(host) == 0 {\n\t\t\t\tglog.Infof(\"Pod %s.%s is not bound to a host yet\", id, namespace)"
  },
  {
    "id" : "85df4ade-c6d0-4100-ae96-624be1eb2471",
    "prId" : 5775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa6263f9-3ae3-454e-991e-eaeb201697e6",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "nit: Can you add some comment why do you set to 4 seconds (and why 10 seconds is too long?)\n",
        "createdAt" : "2015-03-23T14:45:37Z",
        "updatedAt" : "2015-03-23T19:58:48Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d020ca00b8f7b8f775fc236b8fd41853832a061f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +207,211 @@\tendpoints := service.NewEndpointController(cl)\n\t// ensure the service endpoints are sync'd several times within the window that the integration tests wait\n\tgo util.Forever(func() { endpoints.SyncServiceEndpoints() }, time.Second*4)\n\n\tcontrollerManager := replicationControllerPkg.NewReplicationManager(cl)"
  },
  {
    "id" : "6ff10c7a-7bf8-4887-99e5-6863bf82f5bc",
    "prId" : 5775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00dd223f-cae8-4891-83ff-b6c4bdc629a1",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "cc @fgrzadkowski \nFilip is removing this in #5714, so I think this change will no longer be needed.\n",
        "createdAt" : "2015-03-23T14:47:31Z",
        "updatedAt" : "2015-03-23T19:58:48Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "e4277194-ee94-434f-b374-334626efefd0",
        "parentId" : "00dd223f-cae8-4891-83ff-b6c4bdc629a1",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We still want the ability to tune the simple kubelet for test cases instead of adding methods to it.  If #5714 goes in first I will remove this usage of PodStatusUpdateFrequency.\n",
        "createdAt" : "2015-03-23T16:47:02Z",
        "updatedAt" : "2015-03-23T19:58:48Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "d020ca00b8f7b8f775fc236b8fd41853832a061f",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +225,229 @@\tglog.Infof(\"Using %s as root dir for kubelet #1\", testRootDir)\n\tkcfg := kubeletapp.SimpleKubelet(cl, &fakeDocker1, machineList[0], testRootDir, manifestURL, \"127.0.0.1\", 10250, api.NamespaceDefault, empty_dir.ProbeVolumePlugins(), nil, cadvisorInterface, configFilePath)\n\tkcfg.PodStatusUpdateFrequency = 1 * time.Second\n\tkubeletapp.RunKubelet(kcfg)\n\t// Kubelet (machine)"
  },
  {
    "id" : "6db3b1d5-882c-4e56-885e-716d9726ba5e",
    "prId" : 5775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4750a966-a66f-489a-9459-8cefed43dee1",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "cc @fgrzadkowski \nFilip is removing this in #5714, so I think this change will no longer be needed.\n",
        "createdAt" : "2015-03-23T14:47:51Z",
        "updatedAt" : "2015-03-23T19:58:48Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d020ca00b8f7b8f775fc236b8fd41853832a061f",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +233,237 @@\tglog.Infof(\"Using %s as root dir for kubelet #2\", testRootDir)\n\tkcfg = kubeletapp.SimpleKubelet(cl, &fakeDocker2, machineList[1], testRootDir, \"\", \"127.0.0.1\", 10251, api.NamespaceDefault, empty_dir.ProbeVolumePlugins(), nil, cadvisorInterface, \"\")\n\tkcfg.PodStatusUpdateFrequency = 1 * time.Second\n\tkubeletapp.RunKubelet(kcfg)\n\treturn apiServer.URL, configFilePath"
  },
  {
    "id" : "8cde8afc-5b38-480d-b35c-5487b009c166",
    "prId" : 5775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d02a5716-0e0f-4c08-9001-09e0d52161ac",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "FYI: I'm also touching this in #5785, but your PR will probably be merged sooner :)\n",
        "createdAt" : "2015-03-23T14:49:45Z",
        "updatedAt" : "2015-03-23T19:58:48Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d020ca00b8f7b8f775fc236b8fd41853832a061f",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +328,332 @@\n\t// Wait for the mirror pod to be created.\n\tpodName := \"static-pod-localhost\"\n\tnamespace := kubelet.NamespaceDefault\n\tif err := wait.Poll(time.Second, time.Minute*2,"
  },
  {
    "id" : "40829396-982f-45d7-9a54-5049387c542d",
    "prId" : 5775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb8060ee-2162-4874-a442-522e4ba2166c",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This being missing was causing integration to race and be flaky.\n",
        "createdAt" : "2015-03-23T19:57:41Z",
        "updatedAt" : "2015-03-23T19:58:48Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "6a357e7d-7e12-4b32-9c41-0c4ff682bd05",
        "parentId" : "fb8060ee-2162-4874-a442-522e4ba2166c",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "@smarterclayton, why does this help? Line 308 checks whether err is nil anyway...\n",
        "createdAt" : "2015-03-23T20:27:38Z",
        "updatedAt" : "2015-03-23T20:27:38Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "9c81268f-8d0c-4047-a207-57f605c03d47",
        "parentId" : "fb8060ee-2162-4874-a442-522e4ba2166c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "If the pod is not found that means it's not there \"yet\".  Returning an error immediately terminates the Poll.  So before, this method ran once and returned failure, so it wasn't waiting.  IsNotFound means \"keep looking\" not \"finish\".\n\n> On Mar 23, 2015, at 4:27 PM, Yu-Ju Hong notifications@github.com wrote:\n> \n> In cmd/integration/integration.go:\n> \n> > @@ -295,6 +302,9 @@ func podNotFound(c *client.Client, podNamespace string, podID string) wait.Condi\n> >  func podRunning(c *client.Client, podNamespace string, podID string) wait.ConditionFunc {\n> >     return func() (bool, error) {\n> >         pod, err := c.Pods(podNamespace).Get(podID)\n> > -       if apierrors.IsNotFound(err) {\n> >   @smarterclayton, why does this help? Line 308 checks whether err is nil anyway...\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-03-23T20:33:20Z",
        "updatedAt" : "2015-03-23T20:33:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "052ccc90-259e-4957-956a-d5c2554e9a99",
        "parentId" : "fb8060ee-2162-4874-a442-522e4ba2166c",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "If error terminates the poll, shouldn't we always return no err? What if the apiserver refuses the connection or some other unrelated errors happen?\n",
        "createdAt" : "2015-03-23T20:37:46Z",
        "updatedAt" : "2015-03-23T20:37:46Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "4288ad72-9d98-40ee-8095-d2201c50d94e",
        "parentId" : "fb8060ee-2162-4874-a442-522e4ba2166c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Unrelated errors should be logged since this is an integration test (it might be a bad configuration).  The odds of an individual call failing due to apiserver is so low that in a test case it's better to report it.\n\n----- Original Message -----\n\n> > @@ -295,6 +302,9 @@ func podNotFound(c *client.Client, podNamespace string,\n> > podID string) wait.Condi\n> >  func podRunning(c *client.Client, podNamespace string, podID string)\n> >  wait.ConditionFunc {\n> >     return func() (bool, error) {\n> >         pod, err := c.Pods(podNamespace).Get(podID)\n> > -       if apierrors.IsNotFound(err) {\n> \n> If error terminates the poll, shouldn't we always return no err? What if the\n> apiserver refuses the connection or some other unrelated errors happen?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/5775/files#r26977092\n",
        "createdAt" : "2015-03-23T20:40:45Z",
        "updatedAt" : "2015-03-23T20:40:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "d020ca00b8f7b8f775fc236b8fd41853832a061f",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +303,307 @@\treturn func() (bool, error) {\n\t\tpod, err := c.Pods(podNamespace).Get(podID)\n\t\tif apierrors.IsNotFound(err) {\n\t\t\treturn false, nil\n\t\t}"
  },
  {
    "id" : "0e15719f-8ce6-47ef-8c64-0bb4095a30dd",
    "prId" : 5587,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec78882d-63d0-4c9f-8571-c5d449d63e22",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Why did you remove the namespacing?\n",
        "createdAt" : "2015-03-18T20:40:50Z",
        "updatedAt" : "2015-03-18T22:24:25Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "69037b14-edef-4d2f-8874-bebead60b4c9",
        "parentId" : "ec78882d-63d0-4c9f-8571-c5d449d63e22",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Nevermind.\n",
        "createdAt" : "2015-03-18T20:44:36Z",
        "updatedAt" : "2015-03-18T22:24:25Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "58e6b1aa-7ea1-4538-9b26-13c70dacc571",
        "parentId" : "ec78882d-63d0-4c9f-8571-c5d449d63e22",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "It looks like its still there, but services is now ServiceNamespacer that has already been scoped to the namespace in question.\n",
        "createdAt" : "2015-03-18T20:44:36Z",
        "updatedAt" : "2015-03-18T22:24:25Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e36bbab3c0ff98046a37725233548e6ca304598",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +420,424 @@\t}\n\n\tsvcList, err := services.List(labels.Everything())\n\tif err != nil {\n\t\tglog.Fatalf(\"Failed listing services: %v\", err)"
  },
  {
    "id" : "ab5f62cf-5677-49e8-bd96-0496993abf73",
    "prId" : 5587,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c9e006f-4ba0-4ba2-9c18-6a91667cd91d",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Why do you set the API version in TypeMeta for some objects, but not for others?\n",
        "createdAt" : "2015-03-18T20:43:29Z",
        "updatedAt" : "2015-03-18T22:24:25Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "226aefb3-fefc-4798-9754-f340e149a198",
        "parentId" : "3c9e006f-4ba0-4ba2-9c18-6a91667cd91d",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "I havent changed the objects at all in this PR. I am just changing the way they are used.\nI can add API Version to all objects, if you want.\n",
        "createdAt" : "2015-03-18T21:01:18Z",
        "updatedAt" : "2015-03-18T22:24:25Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "e429d1e5-4a29-4ff8-829a-4058b4bef550",
        "parentId" : "3c9e006f-4ba0-4ba2-9c18-6a91667cd91d",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Ok.\n",
        "createdAt" : "2015-03-18T21:15:45Z",
        "updatedAt" : "2015-03-18T22:24:25Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e36bbab3c0ff98046a37725233548e6ca304598",
    "line" : 175,
    "diffHunk" : "@@ -1,1 +453,457 @@func runAtomicPutTest(c *client.Client) {\n\tsvcBody := api.Service{\n\t\tTypeMeta: api.TypeMeta{\n\t\t\tAPIVersion: c.APIVersion(),\n\t\t},"
  },
  {
    "id" : "bfce4d85-fd0a-4241-92f2-4304eda35290",
    "prId" : 4254,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bea0a161-508c-4021-a273-1632dcafe669",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This is more correct - we're saying \"use the host at 127.0.0.1\" instead of \"resolve localhost\".  \n",
        "createdAt" : "2015-02-09T22:25:41Z",
        "updatedAt" : "2015-02-09T22:25:41Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "4369e31b9d740ec05b1a8bffc929c1070dff334f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +83,87 @@\t\tglog.Fatalf(\"Can't get info for: '%v', '%v - %v'\", host, podNamespace, podID)\n\t}\n\tr, err := c.GetPodStatus(\"127.0.0.1\", podNamespace, podID)\n\tif err != nil {\n\t\treturn r, err"
  },
  {
    "id" : "3ff5d617-fe16-42bc-a452-03a54747cad4",
    "prId" : 4254,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5ebfdd4-aa41-4097-9a48-570ca40834af",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This was an artifact of the bad behavior of `-addr` (binding on the first address, which localhost can resolve to).  It no longer works now that we are using -bind-addr.\n",
        "createdAt" : "2015-02-09T22:26:08Z",
        "updatedAt" : "2015-02-09T22:26:08Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "4369e31b9d740ec05b1a8bffc929c1070dff334f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +115,119 @@func startComponents(manifestURL string) (apiServerURL string) {\n\t// Setup\n\tservers := []string{}\n\tglog.Infof(\"Creating etcd client pointing to %v\", servers)\n\tmachineList := []string{\"localhost\", \"127.0.0.1\"}"
  },
  {
    "id" : "7b9caaa7-69bf-410b-a663-98d5c1746a57",
    "prId" : 3396,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75c46c60-abcf-4d24-aa0c-03a1b163a78f",
        "parentId" : null,
        "authorId" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "body" : "I'd leave the first argument here blank so that you use the OS tempdir.\n",
        "createdAt" : "2015-01-12T19:55:15Z",
        "updatedAt" : "2015-01-12T19:55:15Z",
        "lastEditedBy" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b0a65e9a335f4441c8046c342c1f7a61b39f3a7",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +205,209 @@\nfunc makeTempDirOrDie(prefix string) string {\n\ttempDir, err := ioutil.TempDir(\"/tmp\", prefix)\n\tif err != nil {\n\t\tglog.Fatalf(\"Can't make a temp rootdir: %v\", err)"
  },
  {
    "id" : "4dbcc4ac-aa1c-49cf-8cba-4e33c35d9aab",
    "prId" : 3396,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a498ea8-789d-4862-9980-45b457027f08",
        "parentId" : null,
        "authorId" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "body" : "Who is going to delete this?  Perhaps do a defer to delete it?\n",
        "createdAt" : "2015-01-12T19:55:37Z",
        "updatedAt" : "2015-01-12T19:55:37Z",
        "lastEditedBy" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "tags" : [
        ]
      },
      {
        "id" : "e6e2274c-9064-411a-80f7-ea1d5dc22576",
        "parentId" : "7a498ea8-789d-4862-9980-45b457027f08",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "leave them for debugging? I did have the similar question on the original RootDirs. \n",
        "createdAt" : "2015-01-12T22:26:36Z",
        "updatedAt" : "2015-01-12T22:26:36Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b0a65e9a335f4441c8046c342c1f7a61b39f3a7",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +191,195 @@\n\t// Kubelet (localhost)\n\ttestRootDir := makeTempDirOrDie(\"kubelet_integ_1.\")\n\tglog.Infof(\"Using %s as root dir for kubelet #1\", testRootDir)\n\tstandalone.SimpleRunKubelet(cl, etcdClient, &fakeDocker1, machineList[0], testRootDir, manifestURL, \"127.0.0.1\", 10250)"
  },
  {
    "id" : "f1656128-1cde-416b-adec-8c8e80a3ea66",
    "prId" : 3328,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ba295ec-445f-4789-b5de-da9f0756276b",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "would be better as `nodecontroller` (golang convention generally avoids case in pkg names)\n",
        "createdAt" : "2015-01-08T20:19:33Z",
        "updatedAt" : "2015-01-08T20:19:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "c5f35c47-e5fc-4410-b3e3-6ab4dac1516e",
        "parentId" : "7ba295ec-445f-4789-b5de-da9f0756276b",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Given that other places do this, I would not sweat him for this PR.\n",
        "createdAt" : "2015-01-08T21:25:28Z",
        "updatedAt" : "2015-01-08T21:25:28Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2651bfcc7c6455a33b962547a669d4a2e4084e4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +38,42 @@\t\"github.com/GoogleCloudPlatform/kubernetes/pkg/apiserver\"\n\t\"github.com/GoogleCloudPlatform/kubernetes/pkg/client\"\n\tnodeControllerPkg \"github.com/GoogleCloudPlatform/kubernetes/pkg/cloudprovider/controller\"\n\treplicationControllerPkg \"github.com/GoogleCloudPlatform/kubernetes/pkg/controller\"\n\t\"github.com/GoogleCloudPlatform/kubernetes/pkg/health\""
  },
  {
    "id" : "ac8f4d57-078a-401d-b4b2-ccf222d8a25f",
    "prId" : 943,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e851101-62a9-4753-8bdc-74987b44649c",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Seems like this may not be useful without an expected number of minions?\n",
        "createdAt" : "2014-08-19T18:36:45Z",
        "updatedAt" : "2014-08-20T22:46:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "4f4acd5f-9868-41ed-b422-d2268e624e73",
        "parentId" : "8e851101-62a9-4753-8bdc-74987b44649c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Good question - if the query changes to return zero it would exit.  Could just pass the list of expected pods.\n",
        "createdAt" : "2014-08-20T04:24:18Z",
        "updatedAt" : "2014-08-20T22:46:42Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "baaabcaf112f5e5771334b97a8c551554f6ec22b",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +137,141 @@}\n\n// podsOnMinions returns true when all of the selected pods exist on a minion.\nfunc podsOnMinions(c *client.Client, pods api.PodList) wait.ConditionFunc {\n\tpodInfo := fakePodInfoGetter{}"
  },
  {
    "id" : "d36389a9-3c1a-413d-989a-f9b38b0c211a",
    "prId" : 785,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68bf4336-81c9-4f97-8e21-49256dd377c2",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Hrm... shouldn't this fail because v1beta2 is not a defined type?\n",
        "createdAt" : "2014-08-05T05:28:29Z",
        "updatedAt" : "2014-08-05T05:28:29Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "bbb799ce-5d6c-4516-98f6-47f922d2cf82",
        "parentId" : "68bf4336-81c9-4f97-8e21-49256dd377c2",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "It certainly works locally (Travis failed earlier due to a timeout - it looks like it's passing now).\n\nI tried changing other references from v1beta1 to v1beta2 in this file and that caused the test to fail. So it's possible that this manifest isn't being tested in the way we expect. \n",
        "createdAt" : "2014-08-05T06:01:49Z",
        "updatedAt" : "2014-08-05T06:01:49Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "b4d2c75f-6ac2-428e-b6ac-dc31a66c6873",
        "parentId" : "68bf4336-81c9-4f97-8e21-49256dd377c2",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I think this means that it isn't being tested.  Can you spawn a separate issue to track that down?\n",
        "createdAt" : "2014-08-05T18:06:37Z",
        "updatedAt" : "2014-08-05T18:06:37Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "5f0ec441-48aa-4006-a44e-cd691a42654e",
        "parentId" : "68bf4336-81c9-4f97-8e21-49256dd377c2",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "#791 \n",
        "createdAt" : "2014-08-05T18:08:04Z",
        "updatedAt" : "2014-08-05T18:08:04Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8671d69f347f8ab0f53c7a2327cc43b075f0e677",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +321,325 @@\t// This is copied from, and should be kept in sync with:\n\t// https://raw.githubusercontent.com/GoogleCloudPlatform/container-vm-guestbook-redis-python/master/manifest.yaml\n\ttestManifestFile = `version: v1beta2\nid: container-vm-guestbook\ncontainers:"
  },
  {
    "id" : "1a0b4211-a678-49ab-8935-c8ca872e7883",
    "prId" : 356,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "159532dc-b59a-4fe2-acbb-0a79d2d3d0b3",
        "parentId" : null,
        "authorId" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "body" : "do we really need this machinesList? \nfor line 90 and line 106, we just use `localhost` and `machine`\n",
        "createdAt" : "2014-07-18T18:01:12Z",
        "updatedAt" : "2014-07-22T01:29:51Z",
        "lastEditedBy" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "tags" : [
        ]
      }
    ],
    "commit" : "7767c2a2ace79f55d1f8e4cb75eb1e3bd48d2db9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +106,110 @@\tconfig.NewSourceURL(manifestURL, 5*time.Second, cfg1.Channel(\"url\"))\n\tmyKubelet := &kubelet.Kubelet{\n\t\tHostname:     machineList[0],\n\t\tDockerClient: &fakeDocker1,\n\t\tDockerPuller: &kubelet.FakeDockerPuller{},"
  },
  {
    "id" : "f4ded10e-6c94-470d-b7e9-845cecd215f0",
    "prId" : 70,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5af287d-49e5-483c-8837-31ab679d6eb6",
        "parentId" : null,
        "authorId" : "51e4fce3-f3d5-4851-894c-fcbf2df6e58b",
        "body" : "29      \n-   kube_client \"github.com/GoogleCloudPlatform/kubernetes/pkg/client\"\n",
        "createdAt" : "2014-06-12T12:35:14Z",
        "updatedAt" : "2014-06-12T12:35:14Z",
        "lastEditedBy" : "51e4fce3-f3d5-4851-894c-fcbf2df6e58b",
        "tags" : [
        ]
      }
    ],
    "commit" : "12c1d660a354c096f36e9d14ddfbba0f76b7bd46",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +25,29 @@\t\"net/http/httptest\"\n\t\"time\"\n\n\t\"github.com/GoogleCloudPlatform/kubernetes/pkg/api\"\n\t\"github.com/GoogleCloudPlatform/kubernetes/pkg/apiserver\""
  },
  {
    "id" : "bc3b5388-dad7-4ab7-b2fa-52dbc3b8bef5",
    "prId" : 70,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b8e1dd1-e5cf-48df-b7cf-0ffeac5b82d9",
        "parentId" : null,
        "authorId" : "51e4fce3-f3d5-4851-894c-fcbf2df6e58b",
        "body" : "29      \n-   kube_client \"github.com/GoogleCloudPlatform/kubernetes/pkg/client\"\n",
        "createdAt" : "2014-06-12T12:35:30Z",
        "updatedAt" : "2014-06-12T12:35:30Z",
        "lastEditedBy" : "51e4fce3-f3d5-4851-894c-fcbf2df6e58b",
        "tags" : [
        ]
      },
      {
        "id" : "66e52444-5f1b-4699-9509-6329ef154257",
        "parentId" : "3b8e1dd1-e5cf-48df-b7cf-0ffeac5b82d9",
        "authorId" : "51e4fce3-f3d5-4851-894c-fcbf2df6e58b",
        "body" : "... ... \n@@ -26,7 +27,7 @@ import (\n",
        "createdAt" : "2014-06-12T12:38:16Z",
        "updatedAt" : "2014-06-12T12:38:16Z",
        "lastEditedBy" : "51e4fce3-f3d5-4851-894c-fcbf2df6e58b",
        "tags" : [
        ]
      }
    ],
    "commit" : "12c1d660a354c096f36e9d14ddfbba0f76b7bd46",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +28,32 @@\t\"github.com/GoogleCloudPlatform/kubernetes/pkg/api\"\n\t\"github.com/GoogleCloudPlatform/kubernetes/pkg/apiserver\"\n\t\"github.com/GoogleCloudPlatform/kubernetes/pkg/client\"\n\t\"github.com/GoogleCloudPlatform/kubernetes/pkg/registry\"\n\t\"github.com/coreos/go-etcd/etcd\""
  },
  {
    "id" : "459f4747-5624-4e88-bc56-318bf40b4fd7",
    "prId" : 70,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69c71739-a66e-4ff9-962b-83fc77d00eb6",
        "parentId" : null,
        "authorId" : "51e4fce3-f3d5-4851-894c-fcbf2df6e58b",
        "body" : "51  \n-cat << EOF > ~/.kubernetes_auth\n52  \n-{\n53      \n-  \"User\": \"$user\",\n  54  \n-  \"Password\": \"$passwd\"\n  55  \n  -}\n  56  \n  -EOF\n  57  \n  -chmod 0600 ~/.kubernetes_auth\n",
        "createdAt" : "2014-06-12T12:36:47Z",
        "updatedAt" : "2014-06-12T12:36:47Z",
        "lastEditedBy" : "51e4fce3-f3d5-4851-894c-fcbf2df6e58b",
        "tags" : [
        ]
      }
    ],
    "commit" : "12c1d660a354c096f36e9d14ddfbba0f76b7bd46",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +13,17 @@See the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n// A basic integration test for the service."
  },
  {
    "id" : "a13b3d61-1911-46eb-9283-e10fda5c5933",
    "prId" : 70,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e806522-0719-41cd-8b48-cdb1fb2632ac",
        "parentId" : null,
        "authorId" : "51e4fce3-f3d5-4851-894c-fcbf2df6e58b",
        "body" : "```\n 46 \n```\n-       \"pods\": registry.MakePodRegistryStorage(reg, &client.FakeContainerInfo{}, registry.MakeRoundRobinScheduler(machineList)),\n",
        "createdAt" : "2014-06-12T12:38:43Z",
        "updatedAt" : "2014-06-12T12:38:43Z",
        "lastEditedBy" : "51e4fce3-f3d5-4851-894c-fcbf2df6e58b",
        "tags" : [
        ]
      }
    ],
    "commit" : "12c1d660a354c096f36e9d14ddfbba0f76b7bd46",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +44,48 @@\n\tapiserver := apiserver.New(map[string]apiserver.RESTStorage{\n\t\t\"pods\": registry.MakePodRegistryStorage(reg, &client.FakeContainerInfo{}, registry.MakeRoundRobinScheduler(machineList)),\n\t\t\"replicationControllers\": registry.MakeControllerRegistryStorage(reg),\n\t}, \"/api/v1beta1\")"
  },
  {
    "id" : "207c3dc5-0e2a-4b85-a35f-d1b228a27380",
    "prId" : 70,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29009de7-78b1-40d6-aee1-8fca4d618bc8",
        "parentId" : null,
        "authorId" : "51e4fce3-f3d5-4851-894c-fcbf2df6e58b",
        "body" : "```\n 46 \n```\n-       \"pods\": registry.MakePodRegistryStorage(reg, &client.FakeContainerInfo{}, registry.MakeRoundRobinScheduler(machineList)),\n",
        "createdAt" : "2014-06-12T12:40:00Z",
        "updatedAt" : "2014-06-12T12:40:00Z",
        "lastEditedBy" : "51e4fce3-f3d5-4851-894c-fcbf2df6e58b",
        "tags" : [
        ]
      }
    ],
    "commit" : "12c1d660a354c096f36e9d14ddfbba0f76b7bd46",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +42,46 @@\n\treg := registry.MakeEtcdRegistry(etcdClient, machineList)\n\n\tapiserver := apiserver.New(map[string]apiserver.RESTStorage{\n\t\t\"pods\": registry.MakePodRegistryStorage(reg, &client.FakeContainerInfo{}, registry.MakeRoundRobinScheduler(machineList)),"
  }
]