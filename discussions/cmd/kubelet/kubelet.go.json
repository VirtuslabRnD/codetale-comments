[
  {
    "id" : "955b2a1c-29bc-48ea-94bb-9d87824dbf43",
    "prId" : 56097,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/56097#pullrequestreview-82673417",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5779fa87-e0ae-4ddd-a022-ca6403a7b8eb",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I didn't expect to call the global Parse... do we not have access to the flag set and args to re-call?",
        "createdAt" : "2017-11-22T03:33:46Z",
        "updatedAt" : "2017-11-22T03:33:46Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e71cf20b-11ad-4146-a44c-a5325f143ecb",
        "parentId" : "5779fa87-e0ae-4ddd-a022-ca6403a7b8eb",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Might require plumbing a flagset to the Bind functions, rather than binding into the global flagset",
        "createdAt" : "2017-11-22T03:41:25Z",
        "updatedAt" : "2017-11-22T03:41:25Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "b5fde6cd-39c2-450e-99b7-a5ac27eb8109",
        "parentId" : "5779fa87-e0ae-4ddd-a022-ca6403a7b8eb",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Don't some of the flags bound to config vars behave differently on the first Set call? Reparsing into the same flagset doesn't seem like it would work right. ",
        "createdAt" : "2017-11-22T04:12:13Z",
        "updatedAt" : "2017-11-22T04:12:13Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "4a6c3489-2ef0-4319-b667-938ddfc69eea",
        "parentId" : "5779fa87-e0ae-4ddd-a022-ca6403a7b8eb",
        "authorId" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "body" : "Unfortunately there are third party libs that globally register flags instead of allowing flagset injection. \r\nI realized you can temporarily substitute values with a noop Set operation to avoid unintentionally calling Set twice for the global flags, details in the re-do PR: #56995",
        "createdAt" : "2017-12-11T23:08:56Z",
        "updatedAt" : "2017-12-11T23:08:56Z",
        "lastEditedBy" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "tags" : [
        ]
      },
      {
        "id" : "e0322d08-0bdb-4e17-a3c4-931fa7d1648c",
        "parentId" : "5779fa87-e0ae-4ddd-a022-ca6403a7b8eb",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "We shouldn't be using or depending on those for our kubelet flag parsing ",
        "createdAt" : "2017-12-11T23:14:32Z",
        "updatedAt" : "2017-12-11T23:14:32Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbebb6145000676fdf9a58c19ca1f180f0b80f8b",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +85,89 @@\t// preserve backwards compatibility across binary upgrades\n\t// see issue #56171 for more details\n\tpflag.Parse()\n\n\t// construct a KubeletServer from kubeletFlags and kubeletConfig"
  },
  {
    "id" : "cb8fa2bd-73a0-474d-bf27-dd7b3334ace4",
    "prId" : 3270,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4399b91-51f0-4353-bd47-b7a0665152bc",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "This is not a warning, since people use kubelets without an apiserver on purpose.\nIf you want to warn, then warn when apiServerList is non-empty, and it can't setup a client.\n",
        "createdAt" : "2015-01-07T19:28:29Z",
        "updatedAt" : "2015-01-07T19:40:42Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba53d723d31024dd2924f2d8d6a1e7d9fd78ca63",
    "line" : null,
    "diffHunk" : "@@ -1,1 +103,107 @@\tclient, err := standalone.GetAPIServerClient(*authPath, apiServerList)\n\tif err != nil && len(apiServerList) > 0 {\n\t\tglog.Warningf(\"No API client: %v\", err)\n\t}\n"
  },
  {
    "id" : "565f538f-9259-4597-ac66-881e40a8ea2f",
    "prId" : 2022,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aff4e8a0-e562-42eb-b243-3566b6b3ba1d",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Why the anonymous fund around util.Forever?\n",
        "createdAt" : "2014-10-28T03:51:45Z",
        "updatedAt" : "2014-10-28T19:58:21Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b8c91597-b3c0-48df-915e-ba19a6ac1751",
        "parentId" : "aff4e8a0-e562-42eb-b243-3566b6b3ba1d",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "util.Forever is blocking so that puts it in a go-routine.\n",
        "createdAt" : "2014-10-28T04:33:17Z",
        "updatedAt" : "2014-10-28T19:58:21Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "652e3a43-d55a-41a5-a018-637fb385eda4",
        "parentId" : "aff4e8a0-e562-42eb-b243-3566b6b3ba1d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I meant `go util.Forever(...)`\n\n----- Original Message -----\n\n> > @@ -186,6 +186,15 @@ func main() {\n> >         *registryBurst)\n> > \n> > ```\n> > go func() {\n> > ```\n> > -       util.Forever(func() {\n> \n> util.Forever is blocking.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2022/files#r19452991\n",
        "createdAt" : "2014-10-28T17:19:01Z",
        "updatedAt" : "2014-10-28T19:58:21Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "51bf451932cab4ab1bf2315ca602d8b51333f2f8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +190,194 @@\t\t*maxContainerCount)\n\tgo func() {\n\t\tutil.Forever(func() {\n\t\t\terr := k.GarbageCollectContainers()\n\t\t\tif err != nil {"
  },
  {
    "id" : "e29c11de-4820-4e8a-a3b1-3e1df51719e4",
    "prId" : 1464,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c07f1f58-22a4-4082-adc4-eb1cda668063",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Why change this?  Should still be our internal interface.\n",
        "createdAt" : "2014-09-29T18:24:55Z",
        "updatedAt" : "2014-10-07T21:27:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "2d8414b5-f917-41ea-beac-298045c3cd89",
        "parentId" : "c07f1f58-22a4-4082-adc4-eb1cda668063",
        "authorId" : "d73b71d6-2981-428d-a005-4772c1c2c5f5",
        "body" : "Hey, the internal interface doesn't expose .GetCluster (used below), which is why I changed it. What's your preference:\n- `var etcdClient *etcd.Client`\n- Change the internal interface to include .GetCluster\n- Change the logging below\n",
        "createdAt" : "2014-09-29T20:12:52Z",
        "updatedAt" : "2014-10-07T21:27:19Z",
        "lastEditedBy" : "d73b71d6-2981-428d-a005-4772c1c2c5f5",
        "tags" : [
        ]
      },
      {
        "id" : "eea7b90f-e4b0-41f1-8bd2-426bbcce1261",
        "parentId" : "c07f1f58-22a4-4082-adc4-eb1cda668063",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It's fine as is - just wanted to double check.\n",
        "createdAt" : "2014-10-01T15:47:21Z",
        "updatedAt" : "2014-10-07T21:27:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d87159edabf8e0942982458cf52fc09e2b8d6da",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +161,165 @@\n\t// define etcd config source and initialize etcd client\n\tvar etcdClient *etcd.Client\n\tif len(etcdServerList) > 0 {\n\t\tetcdClient = etcd.NewClient(etcdServerList)"
  },
  {
    "id" : "8c8024e7-7647-4097-ab01-9f38836cb9f9",
    "prId" : 1457,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1c11c4f-f76a-46eb-84b3-e65dc5152495",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "why bother to convert to 32 bit?  Is float even really needed, or could we just spec QPS as int?\n",
        "createdAt" : "2014-09-26T16:28:46Z",
        "updatedAt" : "2014-09-26T18:55:30Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "339d5726-b28f-45e0-9471-47ab5a04ae7f",
        "parentId" : "b1c11c4f-f76a-46eb-84b3-e65dc5152495",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "I think we are most of the time going to want to pass in < 1 QPS\n",
        "createdAt" : "2014-09-26T17:17:14Z",
        "updatedAt" : "2014-09-26T18:55:30Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "8641817e-edee-49ec-920d-9a2f7ede39ac",
        "parentId" : "b1c11c4f-f76a-46eb-84b3-e65dc5152495",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "ok.  milliQPS? :)  j/k\n",
        "createdAt" : "2014-09-26T17:35:26Z",
        "updatedAt" : "2014-09-26T18:55:30Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ac706a32e64c37da72691cd2daab312ef800045",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +161,165 @@\t\t*rootDirectory,\n\t\t*syncFrequency,\n\t\tfloat32(*registryPullQPS),\n\t\t*registryBurst)\n"
  },
  {
    "id" : "377dc66a-df24-4ef2-9ba0-8a8c48ffb31d",
    "prId" : 875,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d956b30b-d2e4-4be9-8188-5672b9451a5b",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Why is this different than TCP/HTTP health checker registration?  I don't like this piece randomly hanging out in space, apart from its siblings.  I guess it's because it needs the kubelet pointer?\n\nWhat if we add a level of indirection and make health-check registrations more dynamic?  Call health.InitHealthCheckers(k) from here, and have that encapsulate the registration, which can later become proper plugins or something.\n",
        "createdAt" : "2014-08-18T17:35:30Z",
        "updatedAt" : "2014-08-18T19:00:14Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "37bed401-9693-4d87-897e-c4a669d0bbdf",
        "parentId" : "d956b30b-d2e4-4be9-8188-5672b9451a5b",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Yeah, this is since you need to have a CommandRunner in order to instantiate the exec probe.\n\nI'd rather not have health depend on the kublet package.  So this means that I need to do the registration here.  If you'd prefer for consistency that I register all health checkers here, and get rid of the auto-registration for TCP/HTTP in the health library.  e.g.\n\n``` go\n  health.InitHealthChecking(map[string]HealthChecker{\n     ....\n  })\n```\n",
        "createdAt" : "2014-08-18T18:02:13Z",
        "updatedAt" : "2014-08-18T19:00:14Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "5d3f0f6c-ae68-4b33-98a5-57dbeb25dd59",
        "parentId" : "d956b30b-d2e4-4be9-8188-5672b9451a5b",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "That would be better, I guess.  I want to (eventually, not important now) really make these things plugins, which means we'll have to make some go-between that knows how to take a generic (a good thing) health-checker lib and initialize it from kubelet-specific state.  Later.\n\nMoving all the registration here would make me happier for now.\n",
        "createdAt" : "2014-08-18T18:14:18Z",
        "updatedAt" : "2014-08-18T19:00:14Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "0dc0beee-ee11-4c03-99fb-f4db15b6664d",
        "parentId" : "d956b30b-d2e4-4be9-8188-5672b9451a5b",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2014-08-18T19:00:22Z",
        "updatedAt" : "2014-08-18T19:00:22Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "0caae9c1d4ab191e4da498da9938c9b775245b5d",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +153,157 @@\t\t*syncFrequency)\n\n\thealth.AddHealthChecker(\"exec\", health.NewExecHealthChecker(k))\n\thealth.AddHealthChecker(\"http\", health.NewHTTPHealthChecker(&http.Client{}))\n\thealth.AddHealthChecker(\"tcp\", &health.TCPHealthChecker{})"
  },
  {
    "id" : "fb1076ed-a96f-426c-afd9-c9a317154492",
    "prId" : 464,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95fb2180-eeae-4d72-9df3-7c0fca2853ac",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "why this?\n",
        "createdAt" : "2014-07-15T15:38:19Z",
        "updatedAt" : "2014-07-16T12:34:07Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "a4e57e6c-e719-4c7c-b0a2-5bc2564b6a0e",
        "parentId" : "95fb2180-eeae-4d72-9df3-7c0fca2853ac",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It adds a /healthz handler to the default ServeMux.\n",
        "createdAt" : "2014-07-15T16:33:00Z",
        "updatedAt" : "2014-07-16T12:34:07Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "27438a69-8f64-4e51-aec7-06785d06dbd4",
        "parentId" : "95fb2180-eeae-4d72-9df3-7c0fca2853ac",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Moving it to the command (instead of package) is an interesting choice, though. I think I could go either way.\n",
        "createdAt" : "2014-07-15T16:34:37Z",
        "updatedAt" : "2014-07-16T12:34:07Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "56cddb23-8796-4677-a812-28e5b53629fe",
        "parentId" : "95fb2180-eeae-4d72-9df3-7c0fca2853ac",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Ahh, so it's a plugin, basically?  Maybe a comment about it..\n",
        "createdAt" : "2014-07-15T19:45:54Z",
        "updatedAt" : "2014-07-16T12:34:07Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2db5cdffc4dfc6b5f9f4c2c01bedb8d47d3e866",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +28,32 @@\t\"time\"\n\n\t_ \"github.com/GoogleCloudPlatform/kubernetes/pkg/healthz\"\n\t\"github.com/GoogleCloudPlatform/kubernetes/pkg/kubelet\"\n\t\"github.com/GoogleCloudPlatform/kubernetes/pkg/util\""
  },
  {
    "id" : "c05a26d0-ea0e-45c5-b97f-e43243d71942",
    "prId" : 356,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7a14144-461a-4030-af3f-a9df8d286f54",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Why is this part of this PR?\n",
        "createdAt" : "2014-07-19T20:22:58Z",
        "updatedAt" : "2014-07-22T01:29:51Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "63d065cc-46df-4523-8a5e-2dae9b461960",
        "parentId" : "f7a14144-461a-4030-af3f-a9df8d286f54",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Run is drastically simplified - the kubelet being coupled to initialization of the cadvisor client seems wrong to me.  It's just an interface.\n",
        "createdAt" : "2014-07-20T03:44:31Z",
        "updatedAt" : "2014-07-22T01:29:51Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "1624ec4a-c655-4f32-bb11-f3fcb17709b0",
        "parentId" : "f7a14144-461a-4030-af3f-a9df8d286f54",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I agree, I just want to make sure PRs are as focused as possible.  OK with me.\n",
        "createdAt" : "2014-07-20T04:50:54Z",
        "updatedAt" : "2014-07-22T01:29:51Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "77fada66-40d0-4710-aa58-2fbece846bf2",
        "parentId" : "f7a14144-461a-4030-af3f-a9df8d286f54",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Understand - since the sync (push full config every x seconds) was moving outside run it no longer felt appropriate to have Run be an \"init\" style method.  So as a consequence tried to bring everything up a level.\n",
        "createdAt" : "2014-07-20T13:11:07Z",
        "updatedAt" : "2014-07-22T01:29:51Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "7767c2a2ace79f55d1f8e4cb75eb1e3bd48d2db9",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +98,102 @@\t}\n\n\tcadvisorClient, err := cadvisor.NewClient(\"http://127.0.0.1:5000\")\n\tif err != nil {\n\t\tglog.Errorf(\"Error on creating cadvisor client: %v\", err)"
  },
  {
    "id" : "097a1e54-8b4e-429e-acea-d2744efa47d4",
    "prId" : 356,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56b766dd-005f-4dae-b348-0774161fa700",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "What about HTTP?  Did that get dropped or moved somewhere less obvious?\n",
        "createdAt" : "2014-07-19T20:29:12Z",
        "updatedAt" : "2014-07-22T01:29:51Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "e934351b-2276-4b1a-adaf-e407be58d1e5",
        "parentId" : "56b766dd-005f-4dae-b348-0774161fa700",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Dropped accidentally, will add back.\n",
        "createdAt" : "2014-07-20T16:48:38Z",
        "updatedAt" : "2014-07-22T01:29:51Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "7767c2a2ace79f55d1f8e4cb75eb1e3bd48d2db9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +130,134 @@\t\tkconfig.NewSourceEtcd(kconfig.EtcdKeyForHost(hostname), k.EtcdClient, 30*time.Second, cfg.Channel(\"etcd\"))\n\t}\n\n\t// TODO: block until all sources have delivered at least one update to the channel, or break the sync loop\n\t// up into \"per source\" synchronizations"
  }
]