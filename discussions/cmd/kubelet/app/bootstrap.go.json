[
  {
    "id" : "4333a3e0-eac9-43d0-aab9-273f15d47126",
    "prId" : 40612,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40612#pullrequestreview-19158828",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec7d1863-429d-411a-81ea-868d14498af8",
        "parentId" : null,
        "authorId" : "948c8bee-49af-46ed-93a8-309275b51d61",
        "body" : "You probably need to update the `BUILD` file. :)",
        "createdAt" : "2017-01-30T15:20:29Z",
        "updatedAt" : "2017-01-30T17:28:59Z",
        "lastEditedBy" : "948c8bee-49af-46ed-93a8-309275b51d61",
        "tags" : [
        ]
      },
      {
        "id" : "31666803-3d93-41fd-bfc7-960ab712cbfb",
        "parentId" : "ec7d1863-429d-411a-81ea-868d14498af8",
        "authorId" : "b8d9ba23-8a1c-44a6-afe2-8ac9498838bb",
        "body" : "I'm not clear what you mean. `cmd/kubelet/app/BUILD` already has this line: \r\n\r\n```\r\n        \"//vendor:k8s.io/client-go/util/cert\",\r\n```\r\n\r\nand `staging/src/k8s.io/client-go/util/cert/io.go` appears to have all the imports needed by the new function.\r\n",
        "createdAt" : "2017-01-30T16:56:22Z",
        "updatedAt" : "2017-01-30T17:28:59Z",
        "lastEditedBy" : "b8d9ba23-8a1c-44a6-afe2-8ac9498838bb",
        "tags" : [
        ]
      },
      {
        "id" : "3608bd5e-4426-4fe5-b109-3196b50ce860",
        "parentId" : "ec7d1863-429d-411a-81ea-868d14498af8",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "If the tests pass, then you should be fine.",
        "createdAt" : "2017-01-30T19:03:44Z",
        "updatedAt" : "2017-01-30T19:03:44Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f15e6aac3201354bf400177c7bd5f007cdb71b02",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +74,78 @@\t\treturn fmt.Errorf(\"unable to build bootstrap key path: %v\", err)\n\t}\n\tkeyData, generatedKeyFile, err := certutil.LoadOrGenerateKeyFile(keyPath)\n\tif err != nil {\n\t\treturn err"
  },
  {
    "id" : "e79f33c4-6d76-41a6-ace2-5946b7504a73",
    "prId" : 30922,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4c328b6-7d40-48f8-b5ed-ada79e633906",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "With this being set, I got errors \n\n```\nField selector: certificates/v1alpha1 - certificatesigningrequests - metadata.name - csr-dxmh8: need to check if this is versioned correctly.\nError: failed to run Kubelet: cannot watch on the certificate signing request: No field label conversion function found for version: certificates/v1alpha1\nfailed to run Kubelet: cannot watch on the certificate signing request: No field label conversion function found for version: certificates/v1alpha1\n```\n\nNot sure what's going on here? @liggitt \n",
        "createdAt" : "2016-08-19T00:42:56Z",
        "updatedAt" : "2016-08-19T22:27:43Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "0869d4d6-b375-41c7-88ea-beb64f17b265",
        "parentId" : "a4c328b6-7d40-48f8-b5ed-ada79e633906",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Predicates for field selectors need to be written and registerd manually in the apiserver e.g. https://github.com/kubernetes/kubernetes/blob/master/pkg/registry/pod/strategy.go#L193\n\nref https://github.com/kubernetes/kubernetes/issues/1362 https://github.com/kubernetes/kubernetes/pull/28112 \n",
        "createdAt" : "2016-08-19T01:09:33Z",
        "updatedAt" : "2016-08-19T22:27:43Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "e9e8b7a4-bf75-4bb7-920f-faaae9b9e8f8",
        "parentId" : "a4c328b6-7d40-48f8-b5ed-ada79e633906",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "fixed in https://github.com/kubernetes/kubernetes/pull/30950\n",
        "createdAt" : "2016-08-19T01:10:30Z",
        "updatedAt" : "2016-08-19T22:27:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "bdf4d048-c23c-41ca-ab3b-9d21bb0d797b",
        "parentId" : "a4c328b6-7d40-48f8-b5ed-ada79e633906",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "you can wait for https://github.com/kubernetes/kubernetes/pull/30950 or comment out `FieldSelector:  fields.OneTermEqualSelector(\"metadata.name\", req.Name),` with a TODO to re-enable (it'll be an inefficient watch, but the uid check will limit us to processing our own CSR)\n",
        "createdAt" : "2016-08-19T03:00:54Z",
        "updatedAt" : "2016-08-19T22:27:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e9bbd8b3-d986-4fee-bd98-f5620548f859",
        "parentId" : "a4c328b6-7d40-48f8-b5ed-ada79e633906",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@liggitt ACK\n",
        "createdAt" : "2016-08-19T17:57:26Z",
        "updatedAt" : "2016-08-19T22:27:43Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "26a66232610e627d4912fbd3dfb37afa8036dcf8",
    "line" : 227,
    "diffHunk" : "@@ -1,1 +225,229 @@\t\tWatch:          true,\n\t\tTimeoutSeconds: &defaultTimeoutSeconds,\n\t\tFieldSelector:  fields.OneTermEqualSelector(\"metadata.name\", req.Name),\n\t})\n\tif err != nil {"
  },
  {
    "id" : "b2a56a0e-659c-4a35-b93c-c05ff4baf31e",
    "prId" : 30922,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f12bee0d-b330-4a3c-9723-ad9291284b66",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "TODO here for indicating in the `Spec` that this is a request for a cert with allowed usage of \"TLS Web Client Authentication\" (\"client auth\" in cfssl parlance)\n\n@mikedanese @gtank, any update on how you'd like to express that in the CertificateSigningRequestSpec?\n",
        "createdAt" : "2016-08-19T01:16:20Z",
        "updatedAt" : "2016-08-19T22:27:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "0b6b6ff0-78ae-44d8-b31e-a3535d24f8e5",
        "parentId" : "f12bee0d-b330-4a3c-9723-ad9291284b66",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Until we have a concept of signing profiles, can we only allow client cert allowed use? It seems too late to design this.\n",
        "createdAt" : "2016-08-19T02:04:15Z",
        "updatedAt" : "2016-08-19T22:27:43Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "6e4c1e5a-2616-4cc1-8c5a-b6dedf9289e9",
        "parentId" : "f12bee0d-b330-4a3c-9723-ad9291284b66",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "> can we only allow client cert allowed use?\n\nClient auth and signing which is useful during the approval challenge.\n",
        "createdAt" : "2016-08-19T02:15:56Z",
        "updatedAt" : "2016-08-19T22:27:43Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "c08a06cd-b419-4a66-b9bc-45e6584790b3",
        "parentId" : "f12bee0d-b330-4a3c-9723-ad9291284b66",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I suppose that's fine... I'm sort of counting on the alpha-ness of the current API if we end up deciding some sort of `spec.usage` field should be required and there isn't a clear default value\n",
        "createdAt" : "2016-08-19T02:22:40Z",
        "updatedAt" : "2016-08-19T22:27:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "3ff83345-240c-4b5b-b030-c282c90491fa",
        "parentId" : "f12bee0d-b330-4a3c-9723-ad9291284b66",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "If we are going to surface raw allowed usage in the API, I don't see why we shouldn't just use the x509 extension. Would we ever sign a CSR without the allowed usages that it requested? Would we ever sign a CSR with allowed usages that it didn't request?\n\nI was imaging that the \"signing profile\" would be closer to what we do with \"storage-class\" for PDs. For storage, you have silver, platinum, gold... For certs, you would have signature, client, server... The benefit is that configuration matrix (which is sparse w.r.t. valid configurations) is hidden from the user.  If we imagine that the only thing we'll ever tweak in a signing profile is allowed usage, then signing profiles are not useful and we should expose allowed usage directly.\n\nI think this conversation is very important but I don't think there is harm in deferring it. The development of the \"experimental\" api was motivated by allowing this type of experimentation so let's take advantage of the alpha-ness.\n",
        "createdAt" : "2016-08-19T02:47:22Z",
        "updatedAt" : "2016-08-19T22:27:43Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "eb5ba1a0-8ac8-4611-acf3-74b2ac7f9311",
        "parentId" : "f12bee0d-b330-4a3c-9723-ad9291284b66",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> Would we ever sign a CSR without the allowed usages that it requested?\n\nProbably not\n\n> Would we ever sign a CSR with allowed usages that it didn't request?\n\nMaybe (e.g. add in \"signing\" even if just client cert was requested)? not sure\n\n> I think this conversation is very important but I don't think there is harm in deferring it.\n\nsure. given we can scope auto-approval to node requests for a cert of a certain shape, and that the kubelet isn't using the obtained cert for double-duty, I think I'd be ok leaving the default profile as-is. when we figure out how to express requested usage and map to appropriate signing profiles, we can tighten the auto-approval and the kubelet request and nothing else has to change.\n",
        "createdAt" : "2016-08-19T02:58:14Z",
        "updatedAt" : "2016-08-19T22:27:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "82d1ba55-bd8e-4152-bfbe-4f07dc777422",
        "parentId" : "f12bee0d-b330-4a3c-9723-ad9291284b66",
        "authorId" : "dabe34ec-22c8-4948-a579-d661cdc42761",
        "body" : "I'm still experimenting with this. Go's CertificateRequest support only knows about [pkix.Extension](https://godoc.org/crypto/x509/pkix#Extension) types, which are pretty raw and- as far as I can tell- under-specified for expressing desired key usages in PKCS#10. \n\nI agree that requested usage is a good thing to expose, but we shouldn't block this feature on something that might need upstream Go changes. I'll take a closer look at what openssl does when I get a chance.\n",
        "createdAt" : "2016-08-19T18:29:03Z",
        "updatedAt" : "2016-08-19T22:27:43Z",
        "lastEditedBy" : "dabe34ec-22c8-4948-a579-d661cdc42761",
        "tags" : [
        ]
      }
    ],
    "commit" : "26a66232610e627d4912fbd3dfb37afa8036dcf8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +213,217 @@\t\t// TODO: For now, this is a request for a certificate with allowed usage of \"TLS Web Client Authentication\".\n\t\t// Need to figure out whether/how to surface the allowed usage in the spec.\n\t\tSpec: certificates.CertificateSigningRequestSpec{Request: csr},\n\t})\n\tif err != nil {"
  },
  {
    "id" : "9a78354c-8307-497e-8bc5-9116db7b9374",
    "prId" : 30922,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39099d97-be0a-4734-8796-ec4fdb624405",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "@liggitt remind me again, we use OrganizationalUnit for groups, CommonName for user. What is Organization used for? Or was it Organization for Group?\n",
        "createdAt" : "2016-08-19T17:21:46Z",
        "updatedAt" : "2016-08-19T22:27:43Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "94edf9ad-9867-4a1a-944b-dbf73bece61e",
        "parentId" : "39099d97-be0a-4734-8796-ec4fdb624405",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "https://github.com/kubernetes/kubernetes/pull/30392 pulls from Organization\n",
        "createdAt" : "2016-08-19T17:29:26Z",
        "updatedAt" : "2016-08-19T22:27:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "26a66232610e627d4912fbd3dfb37afa8036dcf8",
    "line" : 195,
    "diffHunk" : "@@ -1,1 +193,197 @@func RequestClientCertificate(client unversionedcertificates.CertificateSigningRequestInterface, privateKeyData []byte, nodeName string) (certData []byte, err error) {\n\tsubject := &pkix.Name{\n\t\tOrganization: []string{\"system:nodes\"},\n\t\tCommonName:   fmt.Sprintf(\"system:node:%s\", nodeName),\n\t}"
  }
]