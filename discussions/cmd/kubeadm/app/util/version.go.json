[
  {
    "id" : "c597587a-693b-4c82-aef7-67a4b60c2f29",
    "prId" : 78026,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78026#pullrequestreview-243227235",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78302a3f-040c-4554-857f-528faee9a187",
        "parentId" : null,
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "Thinking over this, it may be good to add a comment here, that this func is separate for test purposes.",
        "createdAt" : "2019-05-29T12:36:13Z",
        "updatedAt" : "2019-06-21T13:43:38Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb6eb11748265e47c56b8eb75c121f3fa5f80e30",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +69,73 @@// available version information. Used for testing to eliminate\n// the need for internet calls.\nfunc kubernetesReleaseVersion(version string, fetcher func(string, time.Duration) (string, error)) (string, error) {\n\tver := normalizedBuildVersion(version)\n\tif len(ver) != 0 {"
  },
  {
    "id" : "46dbb100-7bb8-4306-9557-4997459c3b40",
    "prId" : 72059,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72059#pullrequestreview-185641561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fa24400-7418-4cc2-93ce-a0b4f2efceb9",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "at this point kubeadmVersion() can fail because of not being able to parse a remoteVersion too.\r\nthis case makes this error message invalid.\r\n",
        "createdAt" : "2018-12-17T13:52:02Z",
        "updatedAt" : "2018-12-17T15:06:43Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "5370d922-4da4-4a5a-a6ee-870fb123344a",
        "parentId" : "7fa24400-7418-4cc2-93ce-a0b4f2efceb9",
        "authorId" : "1f3d109e-1a23-4a7a-b130-47d557e30286",
        "body" : "Very true! I guess if both versions are unavailable we can do nothing, but `os.Exit(1)` with some explanation. I'll squash these 3 commits and submit one more PR.",
        "createdAt" : "2018-12-17T15:00:58Z",
        "updatedAt" : "2018-12-17T15:06:43Z",
        "lastEditedBy" : "1f3d109e-1a23-4a7a-b130-47d557e30286",
        "tags" : [
        ]
      },
      {
        "id" : "d97d3995-93a2-4cf8-8cfc-3bb36c6aee5b",
        "parentId" : "7fa24400-7418-4cc2-93ce-a0b4f2efceb9",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "@rojkov FYI, @bart0sh is currently working on a PR (?) that may add a constant that refers to the actual current version of the client (even if not obtained from a build system).\r\n\r\nthis could be our final fallback.\r\nlet's decide if we want to do that.\r\n",
        "createdAt" : "2018-12-17T15:06:39Z",
        "updatedAt" : "2018-12-17T15:06:43Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "da582da8-1ff6-46c2-9bfe-cfddea4efc4c",
        "parentId" : "7fa24400-7418-4cc2-93ce-a0b4f2efceb9",
        "authorId" : "1f3d109e-1a23-4a7a-b130-47d557e30286",
        "body" : "Yeap, I'll discuss with Ed what would be the best option.",
        "createdAt" : "2018-12-17T15:21:19Z",
        "updatedAt" : "2018-12-17T15:21:19Z",
        "lastEditedBy" : "1f3d109e-1a23-4a7a-b130-47d557e30286",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9c2139ccc57a7ca2632dc39fd0f27b5f5a46776",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +100,104 @@\n\t\tif clientVersionErr != nil {\n\t\t\tklog.Warningf(\"could not obtain client version; using remote version: %s\", body)\n\t\t\treturn KubernetesReleaseVersion(body)\n\t\t}"
  },
  {
    "id" : "41e75d25-f106-4454-abeb-c70e915f36ba",
    "prId" : 72059,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72059#pullrequestreview-186002054",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc7240eb-1f76-40d2-b149-898bbb556328",
        "parentId" : null,
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "This error checking should be moved to L87.",
        "createdAt" : "2018-12-18T09:30:06Z",
        "updatedAt" : "2018-12-18T09:30:11Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      },
      {
        "id" : "cdce61a3-8994-4398-96f7-b016dcf7121f",
        "parentId" : "bc7240eb-1f76-40d2-b149-898bbb556328",
        "authorId" : "1f3d109e-1a23-4a7a-b130-47d557e30286",
        "body" : "@dixudx At line 87 `body` is undefined.",
        "createdAt" : "2018-12-18T09:55:45Z",
        "updatedAt" : "2018-12-18T09:55:46Z",
        "lastEditedBy" : "1f3d109e-1a23-4a7a-b130-47d557e30286",
        "tags" : [
        ]
      },
      {
        "id" : "54581fbc-a026-4798-93cd-27fbe3f9f6a3",
        "parentId" : "bc7240eb-1f76-40d2-b149-898bbb556328",
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "@rojkov I mean `clientVersionErr`.\r\n\r\nYou're using `clientVersion` in L98, but `clientVersionErr` is not checked.\r\n",
        "createdAt" : "2018-12-18T10:15:01Z",
        "updatedAt" : "2018-12-18T10:15:06Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      },
      {
        "id" : "502ccdc5-0578-47a6-afad-823a22371bf9",
        "parentId" : "bc7240eb-1f76-40d2-b149-898bbb556328",
        "authorId" : "1f3d109e-1a23-4a7a-b130-47d557e30286",
        "body" : "@dixudx That's true, but as I mentioned in https://github.com/kubernetes/kubernetes/pull/72059#discussion_r242180396\r\nwe could check both errors (`clientVersionErr` and `err` for `body`) first and in case they are both not `nil` then do `os.Exit(1)`. But the current consensus is not to do that, but to create another PR (or to reuse  https://github.com/kubernetes/kubernetes/pull/72028 which is the first attempt to check this error) with a fallback to a constant which Ed is going to introduce.",
        "createdAt" : "2018-12-18T10:35:08Z",
        "updatedAt" : "2018-12-18T10:35:09Z",
        "lastEditedBy" : "1f3d109e-1a23-4a7a-b130-47d557e30286",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9c2139ccc57a7ca2632dc39fd0f27b5f5a46776",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +99,103 @@\t\t}\n\n\t\tif clientVersionErr != nil {\n\t\t\tklog.Warningf(\"could not obtain client version; using remote version: %s\", body)\n\t\t\treturn KubernetesReleaseVersion(body)"
  },
  {
    "id" : "bd80bb4a-a938-4cb9-a040-c0bfa929db53",
    "prId" : 69301,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69301#pullrequestreview-161686102",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5efeb61-9903-45aa-8c49-d2fa36199a1f",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "This almost seems like a bug.  \r\nIf a person has 1.11.1 download, they should be able to get the latest 1.11.y and it should just work, if we fallback that's almost unexpected behavior.  \r\n\r\nimo we need to switch back to stable-1.X in the 1.12 series bits. ",
        "createdAt" : "2018-10-04T15:00:16Z",
        "updatedAt" : "2018-10-04T21:03:39Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "87a88e01-85ec-4416-88ba-ebad3a83a75e",
        "parentId" : "d5efeb61-9903-45aa-8c49-d2fa36199a1f",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "> If a person has 1.11.1 download, they should be able to get the latest 1.11.y\r\n\r\nthe above code should do just that.\r\n\r\nfor 1.11.1 it falls back to `stable-1.11`, which can be e.g. 1.11.5.\r\n",
        "createdAt" : "2018-10-04T15:16:55Z",
        "updatedAt" : "2018-10-04T21:03:39Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "c9051522-ad11-40d3-9162-5e4a9ba51e52",
        "parentId" : "d5efeb61-9903-45aa-8c49-d2fa36199a1f",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Ahh I see that now.  K, I'm good. ",
        "createdAt" : "2018-10-04T15:56:20Z",
        "updatedAt" : "2018-10-04T21:03:39Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "505413581e2fb0c8a11136664bd932ce420cfd00",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +234,238 @@\t\t(verClient.Major() == verRemote.Major()) && verClient.Minor() < verRemote.Minor() {\n\t\testimatedRelease := fmt.Sprintf(\"stable-%d.%d\", verClient.Major(), verClient.Minor())\n\t\tglog.Infof(\"remote version is much newer: %s; falling back to: %s\", remoteVersion, estimatedRelease)\n\t\treturn estimatedRelease, nil\n\t}"
  },
  {
    "id" : "09f9dedc-cf3b-4abe-94b9-cb6c8dd9ed26",
    "prId" : 69301,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69301#pullrequestreview-163421129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "543dea78-bc9a-4573-92ed-b3c4b39340ef",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "grumble ... errors.Wrap ",
        "createdAt" : "2018-10-10T15:04:30Z",
        "updatedAt" : "2018-10-10T15:05:04Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "c77be0ba-e48a-43d3-a7ce-e03550a80645",
        "parentId" : "543dea78-bc9a-4573-92ed-b3c4b39340ef",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "sure.\r\ni don't like that it's not part of golang yet, but we can possibly SED them all at once.\r\n\r\n\r\n",
        "createdAt" : "2018-10-10T15:29:57Z",
        "updatedAt" : "2018-10-10T15:29:57Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "505413581e2fb0c8a11136664bd932ce420cfd00",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +223,227 @@\tverRemote, err := versionutil.ParseGeneric(remoteVersion)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"remote version error: %v\", err)\n\t}\n\tverClient, err := versionutil.ParseGeneric(clientVersion)"
  },
  {
    "id" : "bbdd73c6-819e-4230-a4d4-36ed6efb99cb",
    "prId" : 69301,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69301#pullrequestreview-163454437",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d2b5524-0ef7-4ce1-8e6e-4d44bb6736ee",
        "parentId" : null,
        "authorId" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "body" : "glog should be used with verbosity level, isn't it ?",
        "createdAt" : "2018-10-10T15:58:56Z",
        "updatedAt" : "2018-10-10T16:08:22Z",
        "lastEditedBy" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "tags" : [
        ]
      },
      {
        "id" : "d8e9af39-284f-4efd-a157-c7ed3191b655",
        "parentId" : "1d2b5524-0ef7-4ce1-8e6e-4d44bb6736ee",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "unless we want to always show the warning with file and line, etc, no?\r\n",
        "createdAt" : "2018-10-10T16:22:00Z",
        "updatedAt" : "2018-10-10T16:22:00Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "40c59399-fddc-4bc2-9fd8-99059e63b874",
        "parentId" : "1d2b5524-0ef7-4ce1-8e6e-4d44bb6736ee",
        "authorId" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "body" : "I don't see that as a critical warning, but ok.",
        "createdAt" : "2018-10-10T16:41:20Z",
        "updatedAt" : "2018-10-10T16:44:19Z",
        "lastEditedBy" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "505413581e2fb0c8a11136664bd932ce420cfd00",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +217,221 @@func validateStableVersion(remoteVersion, clientVersion string) (string, error) {\n\tif clientVersion == \"\" {\n\t\tglog.Infof(\"could not obtain client version; using remote version: %s\", remoteVersion)\n\t\treturn remoteVersion, nil\n\t}"
  },
  {
    "id" : "2a1bc428-9bb3-4653-96f2-8203fd130a84",
    "prId" : 69301,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69301#pullrequestreview-163460765",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f48c4127-6602-465b-9959-8d4913c7547e",
        "parentId" : null,
        "authorId" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "body" : "In theory, here we have content of remote file. right now, it is supposed to be exact version. but the idea of recursive validation was that if label 'stable-1' will be resolved to another label, e.g. 'stable-1.12', this function will try to resolve one more remote label. If this function will expect that remote content is always parsable version, it will break previous functionality.",
        "createdAt" : "2018-10-10T16:05:38Z",
        "updatedAt" : "2018-10-10T16:08:23Z",
        "lastEditedBy" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "tags" : [
        ]
      },
      {
        "id" : "6460c9c4-54b7-4189-93c0-695662c19789",
        "parentId" : "f48c4127-6602-465b-9959-8d4913c7547e",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "thanks for the review but this was in flight for 10 days.\r\nalso just created the cherry pick for 1.12.\r\n\r\ni see what you are saying but in my tests i wasn't able to reach such a breakage.\r\nwe do fall-back to `stable-1.12`, if `stable-1` is much newer, recurse and it works fine.\r\n\r\nnow, if `stable-1` returns a non-semantic version as contents, that's really a breakage with the endpoint from my perspective.\r\n",
        "createdAt" : "2018-10-10T16:30:12Z",
        "updatedAt" : "2018-10-10T16:30:35Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "a4c1415e-1759-4218-bd7e-35896ce7bc40",
        "parentId" : "f48c4127-6602-465b-9959-8d4913c7547e",
        "authorId" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "body" : "Sorry for delay with commenting on that, somehow screwed up notifications on this PR :(\r\n\r\nYes, that scenario is not covered by tests. It was previously implicitly working with nesting of the labels. Support for nested label resolution is not critical, but nice to have. I can do separate PR for that later on.\r\n",
        "createdAt" : "2018-10-10T16:42:48Z",
        "updatedAt" : "2018-10-10T16:44:19Z",
        "lastEditedBy" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "tags" : [
        ]
      },
      {
        "id" : "46bb1df1-c423-423e-ae3d-025e3d60c523",
        "parentId" : "f48c4127-6602-465b-9959-8d4913c7547e",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "sounds good! thanks.\r\n",
        "createdAt" : "2018-10-10T16:56:41Z",
        "updatedAt" : "2018-10-10T16:56:42Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "505413581e2fb0c8a11136664bd932ce420cfd00",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +221,225 @@\t}\n\n\tverRemote, err := versionutil.ParseGeneric(remoteVersion)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"remote version error: %v\", err)"
  },
  {
    "id" : "afea4a7c-41d4-427f-ae0b-bde946343853",
    "prId" : 67397,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67397#pullrequestreview-149809231",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "255a4206-6661-4a3c-8776-917e3679828f",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "@sttts don't we have utils for this stuff somewhere?  ",
        "createdAt" : "2018-08-27T17:42:39Z",
        "updatedAt" : "2018-08-27T20:06:00Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "90df4b4adddeab08b814d469d875672fcccab695",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +186,190 @@\tpre := v.PreRelease()\n\tpatch := v.Patch()\n\tif len(pre) > 0 {\n\t\tif patch > 0 {\n\t\t\t// If the patch version is more than zero, decrement it and remove the label."
  },
  {
    "id" : "62da920e-90e9-4e9e-81a0-96d93bc24163",
    "prId" : 65676,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65676#pullrequestreview-133830237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf01c1f0-eb0f-4209-abcb-1b44627b2483",
        "parentId" : null,
        "authorId" : "fca7b84b-1803-4fd3-ba20-341c32db5623",
        "body" : "How about we use `getReleaseVersionTimeout` here directly?",
        "createdAt" : "2018-07-02T02:52:40Z",
        "updatedAt" : "2018-07-09T11:25:22Z",
        "lastEditedBy" : "fca7b84b-1803-4fd3-ba20-341c32db5623",
        "tags" : [
        ]
      },
      {
        "id" : "c82f5479-ab76-4dc6-8916-470559387acc",
        "parentId" : "bf01c1f0-eb0f-4209-abcb-1b44627b2483",
        "authorId" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "body" : "+1",
        "createdAt" : "2018-07-03T02:19:23Z",
        "updatedAt" : "2018-07-09T11:25:22Z",
        "lastEditedBy" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c5b596b7738bceb0ad36de9aad018681b4f077a",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +139,143 @@// Internal helper: return content of URL\nfunc fetchFromURL(url string, timeout time.Duration) (string, error) {\n\tclient := &http.Client{Timeout: timeout, Transport: netutil.SetOldTransportDefaults(&http.Transport{})}\n\tresp, err := client.Get(url)\n\tif err != nil {"
  },
  {
    "id" : "b48fbba1-b53b-4bc6-bb84-514420e545c4",
    "prId" : 65676,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65676#pullrequestreview-137184401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcc64bec-9506-416b-b2c6-2e45044bd3be",
        "parentId" : null,
        "authorId" : "a2762dd2-4f61-45ce-b5d5-d94727263ab7",
        "body" : "I'd love to see a test here (passing in the duration makes that a bit easier too)",
        "createdAt" : "2018-07-13T20:45:50Z",
        "updatedAt" : "2018-07-13T20:45:51Z",
        "lastEditedBy" : "a2762dd2-4f61-45ce-b5d5-d94727263ab7",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c5b596b7738bceb0ad36de9aad018681b4f077a",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +138,142 @@\n// Internal helper: return content of URL\nfunc fetchFromURL(url string, timeout time.Duration) (string, error) {\n\tclient := &http.Client{Timeout: timeout, Transport: netutil.SetOldTransportDefaults(&http.Transport{})}\n\tresp, err := client.Get(url)"
  },
  {
    "id" : "b2fbd6f0-85ff-4136-91cc-91c9836acbc7",
    "prId" : 53043,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53043#pullrequestreview-65312359",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83a1a2f4-39ad-435e-999d-a0b61c7aad7c",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "should have unit test",
        "createdAt" : "2017-09-26T18:23:24Z",
        "updatedAt" : "2017-09-26T19:28:09Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "09e59cfcaf3aaa8e5daa6876852b322e58537e72",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +100,104 @@// Internal helper: returns normalized build version (with \"v\" prefix if needed)\n// If input doesn't match known version pattern, returns empty string.\nfunc normalizedBuildVersion(version string) string {\n\tif kubeReleaseRegex.MatchString(version) {\n\t\tif strings.HasPrefix(version, \"v\") {"
  },
  {
    "id" : "a8cd8832-470e-4680-9c02-50dac4320711",
    "prId" : 49119,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49119#pullrequestreview-55638764",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e87c2b0-771a-483d-97e6-ef211bed6b31",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "We will only allow `release` and `ci`. What is indeed a little bit confusing is that we're gonna use artifacts from `ci-cross` under the hood (kubeadm user uses `ci/latest` => will actually fetch `ci-cross/latest.txt` for the version to use)\r\n\r\nThis is due to that the normal ci job does not push images ",
        "createdAt" : "2017-07-20T13:08:19Z",
        "updatedAt" : "2017-08-18T14:03:27Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "dd933060-ecf6-444f-866a-b5a40723ed69",
        "parentId" : "0e87c2b0-771a-483d-97e6-ef211bed6b31",
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "ping",
        "createdAt" : "2017-08-10T19:23:56Z",
        "updatedAt" : "2017-08-18T14:03:27Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f3ac327c753f53853136b96a2a060c97f688411",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +29,33 @@\tkubeReleaseRegex      = regexp.MustCompile(`^v?(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)([-0-9a-zA-Z_\\.+]*)?$`)\n\tkubeReleaseLabelRegex = regexp.MustCompile(`^[[:lower:]]+(-[-\\w_\\.]+)?$`)\n\tkubeBucketPrefixes    = regexp.MustCompile(`^((release|ci|ci-cross)/)?([-\\w_\\.+]+)$`)\n)\n"
  },
  {
    "id" : "e10faff6-49c4-41f8-b7d3-a49a8b79434e",
    "prId" : 49119,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49119#pullrequestreview-57168299",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70f1773c-05da-4151-84ed-44dec5655882",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "this can and should be more specific, should only allow `(stable|latest)` instead of any char",
        "createdAt" : "2017-08-18T11:11:20Z",
        "updatedAt" : "2017-08-18T14:03:27Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f3ac327c753f53853136b96a2a060c97f688411",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +28,32 @@\tkubeReleaseBucketURL  = \"https://dl.k8s.io\"\n\tkubeReleaseRegex      = regexp.MustCompile(`^v?(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)([-0-9a-zA-Z_\\.+]*)?$`)\n\tkubeReleaseLabelRegex = regexp.MustCompile(`^[[:lower:]]+(-[-\\w_\\.]+)?$`)\n\tkubeBucketPrefixes    = regexp.MustCompile(`^((release|ci|ci-cross)/)?([-\\w_\\.+]+)$`)\n)"
  },
  {
    "id" : "340e6ca6-4bfd-4a33-aea8-a526c27fc4d9",
    "prId" : 49119,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49119#pullrequestreview-57176462",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d43149ec-fd98-4098-9616-3047527e4862",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "please add an unit test for this func as well",
        "createdAt" : "2017-08-18T11:16:26Z",
        "updatedAt" : "2017-08-18T14:03:27Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "a635ed03-44de-48e0-8a73-ff17ef6c5c43",
        "parentId" : "d43149ec-fd98-4098-9616-3047527e4862",
        "authorId" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "body" : "Sure.",
        "createdAt" : "2017-08-18T11:32:17Z",
        "updatedAt" : "2017-08-18T14:03:27Z",
        "lastEditedBy" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f3ac327c753f53853136b96a2a060c97f688411",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +85,89 @@\n// KubernetesIsCIVersion checks if user requested CI version\nfunc KubernetesIsCIVersion(version string) bool {\n\tsubs := kubeBucketPrefixes.FindAllStringSubmatch(version, 1)\n\tif len(subs) == 1 && len(subs[0]) == 4 && strings.HasPrefix(subs[0][2], \"ci\") {"
  },
  {
    "id" : "3eb5d94d-6be3-4c5a-8c97-ff28fa5de2b7",
    "prId" : 37222,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37222#pullrequestreview-10587784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "279024a2-91a2-4abb-99cc-fae0aa6c170a",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Can we get a test for this?",
        "createdAt" : "2016-11-29T15:18:44Z",
        "updatedAt" : "2016-11-30T16:01:15Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "a06b31fb-6126-4386-9a97-9d5dbe0f9e7e",
        "parentId" : "279024a2-91a2-4abb-99cc-fae0aa6c170a",
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "+1",
        "createdAt" : "2016-11-29T15:28:14Z",
        "updatedAt" : "2016-11-30T16:01:15Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "8426a742-2c52-4506-9a69-57c95d340ed4",
        "parentId" : "279024a2-91a2-4abb-99cc-fae0aa6c170a",
        "authorId" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "body" : "I've taken a look at existing testing around ``http.Get`` and it often seems to involve spinning up local http servers (even for unit tests).  Another approach would be refactoring the function so that http.Get could be replaced in testing by a fake that could return whatever was necessary to exercise the code paths of the function.  Would one of those approaches be appropriate here?",
        "createdAt" : "2016-11-29T17:00:05Z",
        "updatedAt" : "2016-11-30T16:01:15Z",
        "lastEditedBy" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "tags" : [
        ]
      },
      {
        "id" : "6fa5e511-f70e-4962-8e69-e04e1222b510",
        "parentId" : "279024a2-91a2-4abb-99cc-fae0aa6c170a",
        "authorId" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "body" : "@marun I think I found couple of ways to do mocking of those http calls. One option would be to make URL as var instead of constant and update it, second way to replace default transport during test execution. Probably go with second way for now.",
        "createdAt" : "2016-11-29T17:38:12Z",
        "updatedAt" : "2016-11-30T16:01:15Z",
        "lastEditedBy" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "6338b7fda0ef0bdf8ea35efc5fec71d2caffd264",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +48,52 @@//  latest-1    (latest release in 1.x, including alpha/beta)\n//  latest-1.0  (and similarly 1.1, 1.2, 1.3, ...)\nfunc KubernetesReleaseVersion(version string) (string, error) {\n\tif kubeReleaseRegex.MatchString(version) {\n\t\treturn version, nil"
  },
  {
    "id" : "68f8e452-ec1a-4a11-b894-03d590d8c79b",
    "prId" : 37222,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37222#pullrequestreview-10557355",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "163fc6d7-bfc2-4bbe-9e65-06e23353a239",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "We should fallback to a well-known version if internet isn't available, so if the user didn't set the flag, it should default to `v1.4.4` or something.\r\n\r\nIf the user had the flag set, it should fail if it was invalid indeed.\r\n\r\nSorry, I thought I had commented that already, but somehow it seems I hadn't",
        "createdAt" : "2016-11-29T15:28:06Z",
        "updatedAt" : "2016-11-30T16:01:15Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "6338b7fda0ef0bdf8ea35efc5fec71d2caffd264",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +68,72 @@\t\treturn KubernetesReleaseVersion(strings.Trim(string(body), \" \\t\\n\"))\n\t}\n\treturn \"\", fmt.Errorf(\"Error: version %q doesn't match patterns for neither semantic version nor labels (stable, latest, ...)\", version)\n}"
  }
]