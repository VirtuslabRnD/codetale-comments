[
  {
    "id" : "7a5d2536-7cbb-45c5-b640-b2b603e1bb46",
    "prId" : 80937,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80937#pullrequestreview-276493003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "842304e5-4f58-4f7c-8b67-a93eb677984e",
        "parentId" : null,
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "I'm still convinced that this would be a problem for behaviours that aren't easily reproducible.\r\n\r\ncc @ereslibre @timothysc  ",
        "createdAt" : "2019-08-09T15:04:24Z",
        "updatedAt" : "2019-08-22T17:10:17Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      },
      {
        "id" : "91693a7e-0f98-4966-98b2-0e4452c89291",
        "parentId" : "842304e5-4f58-4f7c-8b67-a93eb677984e",
        "authorId" : "67bc6085-2cd9-4674-9dbc-d2a266f478be",
        "body" : "I'm also not sure about this altogether. I think in light of a core dump we want the user to report it as soon as happened instead of asking for a reproducer, that's why I think we should provide the core dump right when happened, regardless of what was the verbosity the command was run with.",
        "createdAt" : "2019-08-09T15:58:48Z",
        "updatedAt" : "2019-08-22T17:10:17Z",
        "lastEditedBy" : "67bc6085-2cd9-4674-9dbc-d2a266f478be",
        "tags" : [
        ]
      },
      {
        "id" : "ac0a809e-01c2-407b-a616-57f3676e4a69",
        "parentId" : "842304e5-4f58-4f7c-8b67-a93eb677984e",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "are you suggesting dumping a stack trace regardless of the `v` level?\r\ni'm fine with that.\r\n\r\nbut please read the original issue:\r\nhttps://github.com/kubernetes/kubeadm/issues/1266#issuecomment-442911995\r\n\r\n> we should not forget about the users! A stack trace is too extreme to show the users and is really only necessary during an unexpected error. If the error is expected then we have the ability to handle it and print a user friendly error message. If it's not expected we can print a stack trace along with a link to kubeadm/issues and instructions to fill out an issue.\r\n\r\ni personally think this is difficult and that all errors are unexpected if we bubble them all the way up the stack and the program exists with `exit(1)`.\r\n\r\n",
        "createdAt" : "2019-08-09T18:10:01Z",
        "updatedAt" : "2019-08-22T17:10:17Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "459e8ea7-dc62-4d31-91f0-bb65cf4e55ef",
        "parentId" : "842304e5-4f58-4f7c-8b67-a93eb677984e",
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "> I'm also not sure about this altogether. I think in light of a core dump we want the user to report it as soon as happened instead of asking for a reproducer, that's why I think we should provide the core dump right when happened, regardless of what was the verbosity the command was run with.\r\n\r\nThen we would have a lot of users claiming, that kubeadm is always crashing even on simplest of errors. This is terrible image for a tool, that is targeting user friendliness and easiness of use.\r\n\r\n> i personally think this is difficult and that all errors are unexpected if we bubble them all the way up the stack and the program exists with exit(1).\r\n\r\nIn general it's not a good practice in software engineering to just bail out with an error deep inside code. Cleanup operations are hampered, people can no longer use kubeadm as a library, etc.\r\nIn fact, using `CheckErr` inside Cobra `Run` commands should be avoided (possibly even banned). Ideally `CheckErr` should be called from `main` and `Run` should be substituted for `RunE`.",
        "createdAt" : "2019-08-12T14:48:29Z",
        "updatedAt" : "2019-08-22T17:10:17Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      },
      {
        "id" : "07bc9cc6-7ccf-472a-9398-295740e3dd5f",
        "parentId" : "842304e5-4f58-4f7c-8b67-a93eb677984e",
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "We can always enable this, regardless of verbosity level, for all non-stable builds (CI, dirty git tree, alpha, possibly beta).",
        "createdAt" : "2019-08-12T14:54:51Z",
        "updatedAt" : "2019-08-22T17:10:17Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      },
      {
        "id" : "e52ca818-1c83-4f90-ad5a-3fb9bc802848",
        "parentId" : "842304e5-4f58-4f7c-8b67-a93eb677984e",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "> Ideally CheckErr should be called from main and Run should be substituted for RunE.\r\n\r\n+1, can be tracked in a separate ticket.\r\n\r\n",
        "createdAt" : "2019-08-12T15:11:40Z",
        "updatedAt" : "2019-08-22T17:10:17Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "d84257fb-488e-4e28-8d62-0e6a26b4e4b8",
        "parentId" : "842304e5-4f58-4f7c-8b67-a93eb677984e",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "> We can always enable this, regardless of verbosity level, for all non-stable builds (CI, dirty git tree, alpha, possibly beta).\r\n\r\ni don't think it's that easy with the current way artifacts are built.\r\nperhaps if we start managing the kubeadm artifact our self once kubeadm moves out of tree.\r\nbut this part is unclear to me at this point.\r\n",
        "createdAt" : "2019-08-12T15:14:49Z",
        "updatedAt" : "2019-08-22T17:10:17Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "877b3238-b5a6-4ac3-94d8-fd7252762688",
        "parentId" : "842304e5-4f58-4f7c-8b67-a93eb677984e",
        "authorId" : "67bc6085-2cd9-4674-9dbc-d2a266f478be",
        "body" : "> Then we would have a lot of users claiming, that kubeadm is always crashing even on simplest of errors. This is terrible image for a tool, that is targeting user friendliness and easiness of use.\r\n\r\nWhat I mean is that we could produce a stacktrace in disk on every unexpected error. Kubeadm's output could look like: `Something unexpected happen, please report this error. Please attach the file /tmp/------.trace to the bug report to provide further information`.\r\n\r\nI have the impression that we are not talking about the same kind of errors:\r\n\r\n1) Regular error, bubbled up, error reported to the user, no stacktrace. The error was handled without any issues.\r\n2) Unexpected error, bubbled up, error reported to the user, stacktrace in tempfile. The error was not expected (e.g. assertion failed)\r\n3) SIGSEGV (e.g. we dereferenced nil), unchecked bad cast... error reported to the user, stacktrace in tempfile.\r\n\r\n`1)` will never write a stacktrace since it's a controlled error that was handled as expected. `2)` and `3)` is what would write the stacktrace somewhere the user could fetch and attach it to us in a bug report. @timstclair raised concerns about the safety of the contents, as long as it's not a real core dump but a plain stack trace that helps us understand what happened I think it should be fine, but that's just my 2 cents :)",
        "createdAt" : "2019-08-12T16:47:54Z",
        "updatedAt" : "2019-08-22T17:10:17Z",
        "lastEditedBy" : "67bc6085-2cd9-4674-9dbc-d2a266f478be",
        "tags" : [
        ]
      },
      {
        "id" : "c2f71c89-75cc-4fc3-bc9b-3eb4c3374c16",
        "parentId" : "842304e5-4f58-4f7c-8b67-a93eb677984e",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "how do we distinguish between 1 and 2?\r\n\r\n> SIGSEGV (e.g. we dereferenced nil), unchecked bad cast... error reported to the user, stacktrace in tempfile.\r\n\r\ndoes that mean recovering from a go panic?\r\n",
        "createdAt" : "2019-08-12T17:04:30Z",
        "updatedAt" : "2019-08-22T17:10:17Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "76b75474-e278-41c5-8d3f-bc8db8b9333e",
        "parentId" : "842304e5-4f58-4f7c-8b67-a93eb677984e",
        "authorId" : "67bc6085-2cd9-4674-9dbc-d2a266f478be",
        "body" : "> how do we distinguish between 1 and 2?\r\n\r\nPerhaps we can think about making most of our errors of type 1) and catch 2) and 3) with `recover` at top-level, dumping the stack trace, maybe using https://golang.org/ref/spec#Handling_panics, didn't test what kind of errors this method catches though.\r\n\r\n> does that mean recovering from a go panic?\r\n\r\nYes, if possible (unchecked).",
        "createdAt" : "2019-08-12T18:00:10Z",
        "updatedAt" : "2019-08-22T17:10:18Z",
        "lastEditedBy" : "67bc6085-2cd9-4674-9dbc-d2a266f478be",
        "tags" : [
        ]
      },
      {
        "id" : "c346dd0c-6d12-4502-801d-b87bb0ff4dd8",
        "parentId" : "842304e5-4f58-4f7c-8b67-a93eb677984e",
        "authorId" : "67bc6085-2cd9-4674-9dbc-d2a266f478be",
        "body" : "I was thinking in something along the lines of https://play.golang.org/p/-qZyJCTsPiT",
        "createdAt" : "2019-08-12T18:12:10Z",
        "updatedAt" : "2019-08-22T17:10:18Z",
        "lastEditedBy" : "67bc6085-2cd9-4674-9dbc-d2a266f478be",
        "tags" : [
        ]
      },
      {
        "id" : "3af7911f-465f-4da5-aabc-d1555e665e29",
        "parentId" : "842304e5-4f58-4f7c-8b67-a93eb677984e",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "since there is no way to distinguish between 1 and 2, unless we start marking them as such (which we probably should not do) this means that a stack trace will only be generated for 3, which already happens today, but on the user screen. users today always provide panic stack traces for us and if we move to write to a file they might as well forget to do that (i'm pretty positive this can happen).\r\n\r\nalso, errors of types 3 i would qualify as unhandled and arguably kubeadm should never exit with unhandled errors.\r\n\r\nthe original ticket however attempts to propose dumping a stack trace for handled errors for two groups - developer vs regular user. V levels do exactly that.\r\n\r\nso IMO, the two possible ways to move forward with this PR are:\r\n- always dump handled error stack traces independent on V level\r\n- dump handled error stack traces for high V level. <--- my vote\r\n\r\nand write a separate ticket to fix the usage of `CheckErr()` across the board.\r\n",
        "createdAt" : "2019-08-12T18:18:27Z",
        "updatedAt" : "2019-08-22T17:10:18Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "2b40dcff-3f3b-44c5-b68f-365fe712a5b9",
        "parentId" : "842304e5-4f58-4f7c-8b67-a93eb677984e",
        "authorId" : "67bc6085-2cd9-4674-9dbc-d2a266f478be",
        "body" : "I think I'm missing something here because I don't see a reason why would we want to dump a stack trace of a handled error even with a high verbosity level.\r\n\r\nPlease, don't consider my comments blocking in any way, I fear I'm not understanding the problem here.",
        "createdAt" : "2019-08-12T18:27:07Z",
        "updatedAt" : "2019-08-22T17:10:18Z",
        "lastEditedBy" : "67bc6085-2cd9-4674-9dbc-d2a266f478be",
        "tags" : [
        ]
      },
      {
        "id" : "efeadc69-270a-4957-8bfe-91acb0d7da6c",
        "parentId" : "842304e5-4f58-4f7c-8b67-a93eb677984e",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "> the original ticket however attempts to propose dumping a stack trace for handled errors for two groups - developer vs regular user. V levels do exactly that.\r\n\r\nto clarify, the original issue talks about expected vs unexpected errors, which i think are not that easy to distinguish.\r\n\r\nhttps://github.com/kubernetes/kubeadm/issues/1266#issuecomment-442869697\r\nhttps://github.com/kubernetes/kubeadm/issues/1266#issuecomment-442911995\r\n\r\nbut i think, all errors are unexpected, and the only expected outcome is a kubeadm command success.\r\n\r\nso from my POV, it's a question whether we should always dump a stack trace for all errors or only dump it for high V levels which are meant for developers.\r\n",
        "createdAt" : "2019-08-12T18:49:12Z",
        "updatedAt" : "2019-08-22T17:10:18Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "856fbe53-c2d8-428f-8741-d99c9962a836",
        "parentId" : "842304e5-4f58-4f7c-8b67-a93eb677984e",
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "TL;DR, but from the size of the thread here, it's probably best to discuss this in the office hours this week so we can reach some conclusion.",
        "createdAt" : "2019-08-19T11:07:14Z",
        "updatedAt" : "2019-08-22T17:10:18Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      },
      {
        "id" : "3c2e76a1-de09-4fb3-b34a-a9e7a439d37b",
        "parentId" : "842304e5-4f58-4f7c-8b67-a93eb677984e",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "added to agenda for this week",
        "createdAt" : "2019-08-19T11:21:33Z",
        "updatedAt" : "2019-08-22T17:10:18Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "2fc19136c1e846c90128d72b8ebbd2512a83bd6d",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +79,83 @@\t\t\t\t// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-instrumentation/logging.md\n\t\t\t\t// klog.V(5) - Trace level verbosity\n\t\t\t\tif v > 4 {\n\t\t\t\t\tmsg = fmt.Sprintf(\"%+v\", err)\n\t\t\t\t}"
  },
  {
    "id" : "c6c1b217-4df6-4568-82cd-6447fd9d120f",
    "prId" : 34341,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34341#pullrequestreview-4112930",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbfe2eed-9474-47b1-8c85-2827f63a892b",
        "parentId" : null,
        "authorId" : "4815d47d-9abd-4b5d-8074-030539047224",
        "body" : "I'm genuinely not sure if this is going to be needed, I can't really imagine automation tooling looking for error codes from pre-flight checks, then taking action on them based on it. Rather I would expect the admin to see a failure and adjust the automation environment to fix the problem and re-run. \n\nEven so the error handling looks more robust like this and I learned from it, it looks easy to maintain and can't really hurt anything I can think of provided we don't require maintenance of error codes per pre-flight check, so looks good to me.\n",
        "createdAt" : "2016-10-12T13:12:38Z",
        "updatedAt" : "2016-10-13T15:53:24Z",
        "lastEditedBy" : "4815d47d-9abd-4b5d-8074-030539047224",
        "tags" : [
        ]
      },
      {
        "id" : "4e0cb2f2-5e59-486e-a409-6f8cbb99e6ac",
        "parentId" : "dbfe2eed-9474-47b1-8c85-2827f63a892b",
        "authorId" : "0ac5d6cd-da87-46a2-9b30-0d21db1063a2",
        "body" : "@dgoodwin I'm genuinely sure this is going to be needed as even `kubeadm` is a simple tool to use, admins will automate its usage. If we don't return error codes, how will they see it? ;)\n",
        "createdAt" : "2016-10-12T16:14:18Z",
        "updatedAt" : "2016-10-13T15:53:24Z",
        "lastEditedBy" : "0ac5d6cd-da87-46a2-9b30-0d21db1063a2",
        "tags" : [
        ]
      },
      {
        "id" : "d7a1c496-4702-4723-a20c-c6292cb78881",
        "parentId" : "dbfe2eed-9474-47b1-8c85-2827f63a892b",
        "authorId" : "4815d47d-9abd-4b5d-8074-030539047224",
        "body" : "To be clear I mean specific error codes, per pre-flight check. Obviously we fail an exit with an error code on a preflight check that is classified as an error, and the admin sees the output indicating what the problem was. I'm just not sure they're going to write automation around the exact precise error code to take action, i.e. we got a 77, lets re-run as root. Instead I would expect they'd just fix the environment and try again rather than coding that logic into whatever automation they're doing.\n",
        "createdAt" : "2016-10-12T16:23:23Z",
        "updatedAt" : "2016-10-13T15:53:24Z",
        "lastEditedBy" : "4815d47d-9abd-4b5d-8074-030539047224",
        "tags" : [
        ]
      },
      {
        "id" : "deb4b3fc-966c-4b8c-9f83-1f517c8be495",
        "parentId" : "dbfe2eed-9474-47b1-8c85-2827f63a892b",
        "authorId" : "0ac5d6cd-da87-46a2-9b30-0d21db1063a2",
        "body" : "Ah, thanks for clarifying. I can support that.\n",
        "createdAt" : "2016-10-12T18:49:30Z",
        "updatedAt" : "2016-10-13T15:53:24Z",
        "lastEditedBy" : "0ac5d6cd-da87-46a2-9b30-0d21db1063a2",
        "tags" : [
        ]
      },
      {
        "id" : "89ba6f26-af0a-4b6f-ae29-9fdb06edbbbf",
        "parentId" : "dbfe2eed-9474-47b1-8c85-2827f63a892b",
        "authorId" : "d37d9758-bdf5-4c23-a40e-a85099689a0c",
        "body" : "Totally, we will run out of numbers quite quickly too! :)\n",
        "createdAt" : "2016-10-13T16:35:47Z",
        "updatedAt" : "2016-10-13T16:50:42Z",
        "lastEditedBy" : "d37d9758-bdf5-4c23-a40e-a85099689a0c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4231c046dd6830ab5cc52b7d0c8e80e811daf2e4",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +88,92 @@\tdefault:\n\t\tfmt.Printf(AlphaWarningOnExit)\n\t\thandleErr(err.Error(), DefaultErrorExitCode)\n\t}\n}"
  }
]