[
  {
    "id" : "5928c3c1-4598-475c-a994-116ab69e3ea8",
    "prId" : 94586,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94586#pullrequestreview-484663327",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee944f79-8ebe-4c9f-a006-18fdcf56693e",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "the question here is, should we remove a container even if stop failed?",
        "createdAt" : "2020-09-08T12:00:43Z",
        "updatedAt" : "2020-09-08T12:00:43Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "e5595bdd-5a49-40d0-89d4-f5cf478f3557",
        "parentId" : "ee944f79-8ebe-4c9f-a006-18fdcf56693e",
        "authorId" : "1c2a235a-d4d7-453d-b3bc-fd78abb987dd",
        "body" : "My point is that ContainerRuntime behaves in the same way. DockerRuntime should return error on container stopping failures just like CRIRuntime.",
        "createdAt" : "2020-09-09T05:05:38Z",
        "updatedAt" : "2020-09-09T05:05:38Z",
        "lastEditedBy" : "1c2a235a-d4d7-453d-b3bc-fd78abb987dd",
        "tags" : [
        ]
      }
    ],
    "commit" : "437c166199cf4bc00e079097925327a4556998ce",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +146,150 @@\t\t\terrs = append(errs, errors.Wrapf(err, \"failed to stop running container %s: output: %s, error\", container, string(out)))\n\t\t} else {\n\t\t\tout, err = runtime.exec.Command(\"docker\", \"rm\", \"--volumes\", container).CombinedOutput()\n\t\t\tif err != nil {\n\t\t\t\terrs = append(errs, errors.Wrapf(err, \"failed to remove running container %s: output: %s, error\", container, string(out)))"
  },
  {
    "id" : "dea5a1b7-7209-4533-8647-09d470a6922d",
    "prId" : 94586,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94586#pullrequestreview-484062624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a680cb6-8574-4033-a8f9-41490601b61a",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "AFAIK this can block for 10 seconds for a container (default -t)\r\ndoes that mean that that the overall process will take a lot of time?\r\ndo we need additional output messages indicating what is going on here?",
        "createdAt" : "2020-09-08T12:01:33Z",
        "updatedAt" : "2020-09-08T12:03:46Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "437c166199cf4bc00e079097925327a4556998ce",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +141,145 @@\terrs := []error{}\n\tfor _, container := range containers {\n\t\tout, err := runtime.exec.Command(\"docker\", \"stop\", container).CombinedOutput()\n\t\tif err != nil {\n\t\t\t// don't stop on errors, try to remove as many containers as possible"
  },
  {
    "id" : "78d8935a-37ff-4bd3-9f3a-80ffccf9831e",
    "prId" : 86899,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86899#pullrequestreview-341226833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51619165-f4b6-4552-9e48-a16ac95443bb",
        "parentId" : null,
        "authorId" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "body" : "Ignoring errors here doesn't look good to me.",
        "createdAt" : "2020-01-10T13:20:40Z",
        "updatedAt" : "2020-01-11T07:11:19Z",
        "lastEditedBy" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "tags" : [
        ]
      },
      {
        "id" : "b15ca825-2c5e-4689-9339-be9ad7bbb9a8",
        "parentId" : "51619165-f4b6-4552-9e48-a16ac95443bb",
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "it's not ignoring, it retries until it succeeds if it doesn't it logs the error. We can still log the error on each retry but I'm not sure if it's needed",
        "createdAt" : "2020-01-10T15:14:54Z",
        "updatedAt" : "2020-01-11T07:11:19Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7234aa17791ef0a06e4a29d32238689e1b1ede6",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +155,159 @@\tvar out []byte\n\tfor i := 0; i < constants.PullImageRetry; i++ {\n\t\tout, err = runtime.exec.Command(\"crictl\", \"-r\", runtime.criSocket, \"pull\", image).CombinedOutput()\n\t\tif err == nil {\n\t\t\treturn nil"
  },
  {
    "id" : "d6d0e672-5a4f-4936-aad4-7c1ddca1c983",
    "prId" : 78053,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78053#pullrequestreview-242005292",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "260427ec-8815-4af7-a274-185c25c8c83b",
        "parentId" : null,
        "authorId" : "30b7a7bd-8fad-4167-988b-46b8aed2da81",
        "body" : "We may want to change the language from \"socket\" to \"endpoint\" throughout this PR",
        "createdAt" : "2019-05-17T21:24:18Z",
        "updatedAt" : "2019-05-23T16:55:12Z",
        "lastEditedBy" : "30b7a7bd-8fad-4167-988b-46b8aed2da81",
        "tags" : [
        ]
      },
      {
        "id" : "63fe05cb-4b25-487d-8095-cf382e1443c1",
        "parentId" : "260427ec-8815-4af7-a274-185c25c8c83b",
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "I agree with that. The term \"socket\" is not true in the Windows named pipe case, however let's not do that now.\r\nThe config format uses the term \"CRISocket\" too, so changing that is not convenient at this point.",
        "createdAt" : "2019-05-22T08:45:13Z",
        "updatedAt" : "2019-05-23T16:55:12Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      },
      {
        "id" : "ee41fd53-0cd0-442d-a2bf-c46c5a268606",
        "parentId" : "260427ec-8815-4af7-a274-185c25c8c83b",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "this was pretty much my conclusion about the existing \"socket\" naming. we cannot change it at this point.",
        "createdAt" : "2019-05-25T14:46:56Z",
        "updatedAt" : "2019-05-25T14:46:56Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "310bafe658bce686e7286f9b5a0d7e4336581ecd",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +217,221 @@\n// DetectCRISocket uses a list of known CRI sockets to detect one. If more than one or none is discovered, an error is returned.\nfunc DetectCRISocket() (string, error) {\n\treturn detectCRISocketImpl(isExistingSocket)\n}"
  },
  {
    "id" : "5914092a-b546-4432-b0fc-acbbd7b986db",
    "prId" : 69366,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69366#pullrequestreview-170720980",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "848853aa-7480-4f33-9540-8fa2e9aaf0c4",
        "parentId" : null,
        "authorId" : "bfaab188-fe7f-45cd-8e91-eeb4626a5f04",
        "body" : "i wonder it would be a better or worse experience to print a warning that multiple sockets were detected and kubeadm is continuing with the first one it found? My thought is that this would allow more users to get started without having to specify a specific socket to use, but still be aware there may be a problem.",
        "createdAt" : "2018-10-08T16:33:05Z",
        "updatedAt" : "2019-01-21T14:22:20Z",
        "lastEditedBy" : "bfaab188-fe7f-45cd-8e91-eeb4626a5f04",
        "tags" : [
        ]
      },
      {
        "id" : "2f639901-7cac-4167-a372-68d3438fc082",
        "parentId" : "848853aa-7480-4f33-9540-8fa2e9aaf0c4",
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "Every possible solution, from UX perspective, is a double edged sword.\r\n\r\nOn one hand, if we bail with error (the current version) the user will have to re-run the command with correct `--cri-socket` passed in. This may be annoying to some users and it's still not guaranteed, that they will provide the correct CRI.\r\n\r\nOn other hand, if we warn the user and just pick up the first one, then the user may ignore or not see the warning and end up in a mess (requiring reset).\r\n\r\nFor me the first option is more viable in the case of multiple CRIs and therefore I picked that solution.",
        "createdAt" : "2018-11-01T14:54:13Z",
        "updatedAt" : "2019-01-21T14:22:20Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      }
    ],
    "commit" : "f97770b175ffb534cccc6ce023c0b984917b0816",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +228,232 @@\t\t// Precisely one CRI found, use that\n\t\treturn foundCRISockets[0], nil\n\tdefault:\n\t\t// Multiple CRIs installed?\n\t\treturn \"\", errors.Errorf(\"Found multiple CRI sockets, please use --cri-socket to select one: %s\", strings.Join(foundCRISockets, \", \"))"
  },
  {
    "id" : "a0afd337-66a3-40a5-9fe9-40d9c89befdd",
    "prId" : 69366,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69366#pullrequestreview-171037347",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a38bbbea-d5bc-4948-97e3-a009a8df2bf4",
        "parentId" : null,
        "authorId" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "body" : "Checking existence of the socket is not enough from my point of view. I'd suggest to also check if CRI API is accessible through socket.",
        "createdAt" : "2018-10-16T15:07:03Z",
        "updatedAt" : "2019-01-21T14:22:20Z",
        "lastEditedBy" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "tags" : [
        ]
      },
      {
        "id" : "56835169-56c1-4e88-b149-b7f4c7e47a11",
        "parentId" : "a38bbbea-d5bc-4948-97e3-a009a8df2bf4",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "maybe we should do https://godoc.org/k8s.io/kubernetes/pkg/kubelet/apis/cri#RuntimeVersioner\r\nor something that is known to be supported by all implementers.\r\n",
        "createdAt" : "2018-10-16T15:32:20Z",
        "updatedAt" : "2019-01-21T14:22:20Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "b9cbda69-6a96-4bc0-a8df-88cdae05872b",
        "parentId" : "a38bbbea-d5bc-4948-97e3-a009a8df2bf4",
        "authorId" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "body" : "crictl info should be enough, I believe.",
        "createdAt" : "2018-10-29T21:59:50Z",
        "updatedAt" : "2019-01-21T14:22:20Z",
        "lastEditedBy" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "tags" : [
        ]
      },
      {
        "id" : "fd3c648c-874f-44dd-8058-149163e263e6",
        "parentId" : "a38bbbea-d5bc-4948-97e3-a009a8df2bf4",
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "I don't think, that we need to make the check too complex. Even checking, that the path leads to a domain socket is a bit of an overkill on my part. The sockets we are checking for at the moment, cannot be created without root privileges and I doubt that any process running as root could create an exact socket path by accident.\r\n\r\nMy opinion is to keep things as simple as possible. If there aren't any use cases, where someone could deliberately setup an invalid CRI socket, then I don't think we should add any additional checks for it.",
        "createdAt" : "2018-11-02T10:09:24Z",
        "updatedAt" : "2019-01-21T14:22:20Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      }
    ],
    "commit" : "f97770b175ffb534cccc6ce023c0b984917b0816",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +216,220 @@\n\tfor _, socket := range knownCRISockets {\n\t\tif isSocket(socket) {\n\t\t\tfoundCRISockets = append(foundCRISockets, socket)\n\t\t}"
  },
  {
    "id" : "8f02b7f9-aa3e-40cf-b483-b10819336911",
    "prId" : 69366,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69366#pullrequestreview-171069362",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ba97f25-f5e3-432a-8ad7-351167ebb9ba",
        "parentId" : null,
        "authorId" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "body" : "Does this mean that if docker is running this function will always return /var/run/docker.sock ? Would it be better to change the order of known sockets? If CRI-O or containerd is configured and running should we prefer those even if docker is running?",
        "createdAt" : "2018-11-02T11:29:32Z",
        "updatedAt" : "2019-01-21T14:22:20Z",
        "lastEditedBy" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "tags" : [
        ]
      },
      {
        "id" : "e4b75027-31fb-444b-92d5-1cc4565206ba",
        "parentId" : "2ba97f25-f5e3-432a-8ad7-351167ebb9ba",
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "No, this means, that if you have only one runtime environment (no matter if Docker or CRI socket backed one) it will use that. If there is no runtime environment detected or multiple ones are detected (for example Docker & CRI-O) it will display error message and force the user to use --cri-socket to supply the socket.",
        "createdAt" : "2018-11-02T11:53:03Z",
        "updatedAt" : "2019-01-21T14:22:20Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      }
    ],
    "commit" : "f97770b175ffb534cccc6ce023c0b984917b0816",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +227,231 @@\tcase 1:\n\t\t// Precisely one CRI found, use that\n\t\treturn foundCRISockets[0], nil\n\tdefault:\n\t\t// Multiple CRIs installed?"
  },
  {
    "id" : "b6bb17b2-f728-4f87-a305-14d146a793c6",
    "prId" : 67017,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67017#pullrequestreview-143852118",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31f8d2ce-7c24-46f2-b317-9a5fd9162557",
        "parentId" : null,
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "Why removing the check?",
        "createdAt" : "2018-08-06T15:54:16Z",
        "updatedAt" : "2018-08-07T08:00:08Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      },
      {
        "id" : "d365f78b-ec3f-413c-ba8b-ed0544a8e7ac",
        "parentId" : "31f8d2ce-7c24-46f2-b317-9a5fd9162557",
        "authorId" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "body" : "@dixudx `crictl pods -q` will return just pod IDs. those are `[0-9a-f]+`. There are no `k8s_` prefixes there. This prefix is only relevant for listing containers in case of docker as a runtime.",
        "createdAt" : "2018-08-06T16:38:30Z",
        "updatedAt" : "2018-08-07T08:00:08Z",
        "lastEditedBy" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "tags" : [
        ]
      },
      {
        "id" : "872ebb22-230b-4f30-99c7-7f592272e1e3",
        "parentId" : "31f8d2ce-7c24-46f2-b317-9a5fd9162557",
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "@kad Thanks. Got it. We are now using containerd. It's safe to remove this.",
        "createdAt" : "2018-08-07T06:17:10Z",
        "updatedAt" : "2018-08-07T08:00:08Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      }
    ],
    "commit" : "d64f489fa1fbe8bbbb0bef7a711aff7e67e8a085",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +109,113 @@\tpods := []string{}\n\tfor _, pod := range strings.Fields(string(out)) {\n\t\tpods = append(pods, pod)\n\t}\n\treturn pods, nil"
  }
]