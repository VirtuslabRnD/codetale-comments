[
  {
    "id" : "9d5a9d25-2eba-42fd-8a59-aaceffa1c8e3",
    "prId" : 97266,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97266#pullrequestreview-553924434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00d8e2e7-f628-432d-bf4f-a448e6519191",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "AFAIK, orders in chains are not guaranteed, thus this feels applicable to your use case only.\r\n",
        "createdAt" : "2020-12-14T18:43:17Z",
        "updatedAt" : "2020-12-24T15:51:58Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "42d6562e-97de-43f0-bb98-f99e5c11419d",
        "parentId" : "00d8e2e7-f628-432d-bf4f-a448e6519191",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "if a chain contains no intermediates, this line will panic.",
        "createdAt" : "2020-12-14T18:44:48Z",
        "updatedAt" : "2020-12-24T15:51:58Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "113cacaf-0bcb-4261-b51c-6138bfb420c7",
        "parentId" : "00d8e2e7-f628-432d-bf4f-a448e6519191",
        "authorId" : "92146f70-cf95-4121-8a59-7920b5bf7bb2",
        "body" : "> AFAIK, orders in chains are not guaranteed, thus this feels applicable to your use case only.\r\n\r\nI can't find anything explicit in [RFC 5280](https://tools.ietf.org/html/rfc5280) or [RFC 7468](https://tools.ietf.org/html/rfc7468) to say that the leaf certificate must be first. However, I can see that the `crypto/tls` library makes this assumption in its [certificate verification logic](https://github.com/golang/go/blob/663cd862edf8dfa9c78d9df0f372c9bea03139e4/src/crypto/tls/handshake_client.go#L851) as well an explicit comment elsewhere that the [leaf certificate should be first](https://github.com/golang/go/blob/663cd862edf8dfa9c78d9df0f372c9bea03139e4/src/crypto/tls/common.go#L1323).\r\n\r\nSince I can't find an explicit statement in the standards I'm going to have to fall back on the argument that if it's good enough for Golang's standard TLS implementation then it's good enough for the certificate verification helpers in kubeadm. The Kubernetes components will be using the TLS implementation anyway, so it makes sense that the kubeadm phases which perform certificate verification behave the same way.",
        "createdAt" : "2020-12-15T02:05:47Z",
        "updatedAt" : "2020-12-24T15:51:58Z",
        "lastEditedBy" : "92146f70-cf95-4121-8a59-7920b5bf7bb2",
        "tags" : [
        ]
      },
      {
        "id" : "e73ff486-5dde-4522-ae1b-a148b57ee8ff",
        "parentId" : "00d8e2e7-f628-432d-bf4f-a448e6519191",
        "authorId" : "92146f70-cf95-4121-8a59-7920b5bf7bb2",
        "body" : "> if a chain contains no intermediates, this line will panic.\r\n\r\nIt shouldn't panic, if there's only a single certificate then `intermediates` will be an empty slice. Here's a quick example:\r\n\r\n```go\r\npackage main\r\n\r\nimport \"fmt\"\r\n\r\nfunc main() {\r\n    x := []int{1}\r\n    fmt.Printf(\"Head: %d\\n\", x[0])\r\n    fmt.Printf(\"Tail: %v\\n\", x[1:])\r\n}\r\n```\r\n\r\nThis produces:\r\n\r\n```\r\nHead: 1\r\nTail: []\r\n```",
        "createdAt" : "2020-12-15T02:12:39Z",
        "updatedAt" : "2020-12-24T15:51:58Z",
        "lastEditedBy" : "92146f70-cf95-4121-8a59-7920b5bf7bb2",
        "tags" : [
        ]
      },
      {
        "id" : "f6331cc2-cf7a-4a44-824c-63e33b6c0a24",
        "parentId" : "00d8e2e7-f628-432d-bf4f-a448e6519191",
        "authorId" : "02652a33-d295-4eb4-a1dc-1b86aff1fcca",
        "body" : "[RFC5286 7.4.2](https://tools.ietf.org/html/rfc5246) describes the chain order:\r\n\r\n> The sender's certificate MUST come first in the list.  Each following certificate MUST directly certify the one preceding it.  Because certificate validation requires that root keys be distributed independently, the self-signed certificate that specifies the root certificate authority MAY be omitted from the chain, under the assumption that the remote end must already possess it in order to validate it in any case.",
        "createdAt" : "2020-12-15T16:33:42Z",
        "updatedAt" : "2020-12-24T15:51:58Z",
        "lastEditedBy" : "02652a33-d295-4eb4-a1dc-1b86aff1fcca",
        "tags" : [
        ]
      },
      {
        "id" : "ff6faa55-9f41-4f15-8980-d7716341baf0",
        "parentId" : "00d8e2e7-f628-432d-bf4f-a448e6519191",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "> It shouldn't panic,\r\n\r\nmy mistake.\r\n\r\n> RFC5286 7.4.2 describes the chain order:\r\n\r\nthanks for the info!",
        "createdAt" : "2020-12-16T17:33:37Z",
        "updatedAt" : "2020-12-24T15:51:58Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "9022f24aed954cc459f8b14957d79e1ebb2d0a75",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +307,311 @@\n\tcert := certs[0]\n\tintermediates := certs[1:]\n\n\treturn cert, intermediates, nil"
  },
  {
    "id" : "66f511c0-148a-43ac-a312-e6f3674712da",
    "prId" : 97266,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97266#pullrequestreview-552638247",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f3ae2df-c926-4c33-8396-5afe370edfa1",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "this change doesn't seem backwards compatible to clusters created with older versions of kubeadm.\r\ncalling VerifyCertChain would now result in an error if the intermediate pool is empty, correct?\r\n",
        "createdAt" : "2020-12-14T18:54:14Z",
        "updatedAt" : "2020-12-24T15:51:58Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "8088fed9-84b9-4e65-a798-d99caba8a34f",
        "parentId" : "4f3ae2df-c926-4c33-8396-5afe370edfa1",
        "authorId" : "92146f70-cf95-4121-8a59-7920b5bf7bb2",
        "body" : "It is backwards compatible since the `Verify` function doesn't require the intermediate pool to contain any certificates, it only needs to contain the certificates required to construct a valid chain. No additional certificates are required when the leaf certificate is signed directly by the root CA, so this function will succeed.\r\n\r\nI've also only changed the verification logic and haven't changed anything to do with the way that kubeadm generates certificates, so the standard setup will still be where the root CA directly signs the leaf certificate.",
        "createdAt" : "2020-12-15T01:28:50Z",
        "updatedAt" : "2020-12-24T15:51:58Z",
        "lastEditedBy" : "92146f70-cf95-4121-8a59-7920b5bf7bb2",
        "tags" : [
        ]
      },
      {
        "id" : "ea48e4da-996f-415b-b9e9-3be8baf0e7ff",
        "parentId" : "4f3ae2df-c926-4c33-8396-5afe370edfa1",
        "authorId" : "92146f70-cf95-4121-8a59-7920b5bf7bb2",
        "body" : "I've added an extra test case to prove that this is backwards compatible: https://github.com/kubernetes/kubernetes/pull/97266/commits/511f498491abd3786644044138364e04e38dd536",
        "createdAt" : "2020-12-15T01:44:38Z",
        "updatedAt" : "2020-12-24T15:51:58Z",
        "lastEditedBy" : "92146f70-cf95-4121-8a59-7920b5bf7bb2",
        "tags" : [
        ]
      },
      {
        "id" : "2c6e107c-293a-4c54-8909-b9d267ba641d",
        "parentId" : "4f3ae2df-c926-4c33-8396-5afe370edfa1",
        "authorId" : "02652a33-d295-4eb4-a1dc-1b86aff1fcca",
        "body" : "Yup, this should work fine AFAIK.",
        "createdAt" : "2020-12-15T16:26:16Z",
        "updatedAt" : "2020-12-24T15:51:58Z",
        "lastEditedBy" : "02652a33-d295-4eb4-a1dc-1b86aff1fcca",
        "tags" : [
        ]
      }
    ],
    "commit" : "9022f24aed954cc459f8b14957d79e1ebb2d0a75",
    "line" : 186,
    "diffHunk" : "@@ -1,1 +722,726 @@\tif _, err := cert.Verify(verifyOptions); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil"
  },
  {
    "id" : "270aeb60-1c7c-4699-8e72-2048502a951b",
    "prId" : 97266,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97266#pullrequestreview-552044168",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a855b92-816a-42a6-b1bc-0def1b0eef1f",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "config should be the first argument.\r\n\r\nmaybe the better API here is to have a single NewCertificateAuthority function that decides on self-signed vs signed-by-parent depending on a `nil` `parentCert`, but having a separate function is fine too.\r\n",
        "createdAt" : "2020-12-14T18:58:08Z",
        "updatedAt" : "2020-12-24T15:51:58Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "775918ab-caa9-4920-8427-bf35db448339",
        "parentId" : "3a855b92-816a-42a6-b1bc-0def1b0eef1f",
        "authorId" : "92146f70-cf95-4121-8a59-7920b5bf7bb2",
        "body" : "Since creating an intermediate CA is an uncommon use case (it's only used in the tests for the certificate chain verification) I think it's preferable not to force callers of `NewCertificateAuthority` (of which there are quite a few) to have to specify a `nil` certificate and key.",
        "createdAt" : "2020-12-15T01:49:48Z",
        "updatedAt" : "2020-12-24T15:51:58Z",
        "lastEditedBy" : "92146f70-cf95-4121-8a59-7920b5bf7bb2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9022f24aed954cc459f8b14957d79e1ebb2d0a75",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +82,86 @@\n// NewIntermediateCertificateAuthority creates new certificate and private key for an intermediate certificate authority\nfunc NewIntermediateCertificateAuthority(parentCert *x509.Certificate, parentKey crypto.Signer, config *CertConfig) (*x509.Certificate, crypto.Signer, error) {\n\tkey, err := NewPrivateKey(config.PublicKeyAlgorithm)\n\tif err != nil {"
  },
  {
    "id" : "091d8fbf-b54f-4df3-b044-87cea273980b",
    "prId" : 97266,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97266#pullrequestreview-554713493",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2119475-1edb-4167-9670-e9ac5d029cda",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "> Change made in this commit:\r\n\r\nlatest commit still has `config` as the last function argument.\r\n\r\nshould be:\r\n```\r\nNewIntermediateCertificateAuthority(config *CertConfig, parentCert *x509.Certificate, parentKey crypto.Signer)...\r\n```\r\n",
        "createdAt" : "2020-12-16T17:51:24Z",
        "updatedAt" : "2020-12-24T15:51:58Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "f906f1e1-83a0-4753-b3e7-282a96c07f3d",
        "parentId" : "e2119475-1edb-4167-9670-e9ac5d029cda",
        "authorId" : "92146f70-cf95-4121-8a59-7920b5bf7bb2",
        "body" : "Sorry, the comment about the change being made was intended for the `isCA` bool being moved to be the last argument. I've edited the comments so that it makes sense now.\r\n\r\nAs for moving `config` to the last argument, I've gone with this ordering for consistency with th existing function [`NewCertAndKey`](https://github.com/kubernetes/kubernetes/blob/b9ce4ac212d150212485fa29d62a2fbd783a57b0/cmd/kubeadm/app/util/pkiutil/pki_helpers.go#L83). Let me know if you would prefer it to be left as is for consistency, be different or whether I should update both to move `config` to the last argument.",
        "createdAt" : "2020-12-17T03:56:23Z",
        "updatedAt" : "2020-12-24T15:51:58Z",
        "lastEditedBy" : "92146f70-cf95-4121-8a59-7920b5bf7bb2",
        "tags" : [
        ]
      },
      {
        "id" : "53693182-2968-46c6-8126-1a4b23f2b12f",
        "parentId" : "e2119475-1edb-4167-9670-e9ac5d029cda",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "ok, let's leave the ordering as is, for consistency with NewCertAndKey.\r\nthe pkiutils package has no API guaranties yet (public usage), but we may have to review some of these semantics at some point.\r\n",
        "createdAt" : "2020-12-17T15:28:10Z",
        "updatedAt" : "2020-12-24T15:51:58Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "9022f24aed954cc459f8b14957d79e1ebb2d0a75",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +82,86 @@\n// NewIntermediateCertificateAuthority creates new certificate and private key for an intermediate certificate authority\nfunc NewIntermediateCertificateAuthority(parentCert *x509.Certificate, parentKey crypto.Signer, config *CertConfig) (*x509.Certificate, crypto.Signer, error) {\n\tkey, err := NewPrivateKey(config.PublicKeyAlgorithm)\n\tif err != nil {"
  },
  {
    "id" : "0651b68b-782d-487d-b8fc-49e7d02b474b",
    "prId" : 97266,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97266#pullrequestreview-554739776",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b5b019b-96a3-4d4e-b28f-ca3abd9f9e70",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "https://golang.org/pkg/crypto/x509/\r\n\r\n>    // BasicConstraintsValid indicates whether IsCA, MaxPathLen,\r\n>    // and MaxPathLenZero are valid.\r\n\r\nthe documentation is a bit vague on what \"valid\" means, but should we assume `BasicConstraintsValid` should be always bound to `isCA`?\r\n\r\ne.g. here it's not:\r\nhttps://github.com/kubernetes/kubernetes/blob/dbfc3aa877b5beda2ecdfb38911c311b250a4973/pkg/controller/certificates/authority/policies.go#L65-L66\r\n\r\ncan we pass `true` always to it and an explicit value to `MaxPathLen` and `MaxPathLenZero=false`?\r\n\r\ni'm assuming this is where it's checked:\r\nhttps://github.com/golang/go/blob/master/src/crypto/x509/verify.go#L721-L726\r\n",
        "createdAt" : "2020-12-16T18:26:54Z",
        "updatedAt" : "2020-12-24T15:51:58Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "a794705f-9d37-4a1c-80fd-b6a49bf4a564",
        "parentId" : "4b5b019b-96a3-4d4e-b28f-ca3abd9f9e70",
        "authorId" : "92146f70-cf95-4121-8a59-7920b5bf7bb2",
        "body" : "I just did it this way to make sure I didn't make any changes to the existing code which signs leaf certificates. My interpretation of the docs is that it would probably work to set `BasicConstraintsValid` to `true`. We shouldn't need to explicitly set `MaxPathLen` and `MaxPathLenZero` since the default values of 0 and false respectively are \"interpreted as `MaxPathLen` not being set\" according the docs.\r\n\r\nIf you're happy for this change to be made to the leaf certificate signing then it's in this commit: https://github.com/kubernetes/kubernetes/pull/97266/commits/081104cec2b7d4be59bbd1a17dc1cf2b62093920\r\n\r\nIf you want to play it safe then I can revert the commit.",
        "createdAt" : "2020-12-17T07:58:55Z",
        "updatedAt" : "2020-12-24T15:51:58Z",
        "lastEditedBy" : "92146f70-cf95-4121-8a59-7920b5bf7bb2",
        "tags" : [
        ]
      },
      {
        "id" : "42967c7d-377d-4c9d-b8a8-d218b8db84d0",
        "parentId" : "4b5b019b-96a3-4d4e-b28f-ca3abd9f9e70",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "my vote goes to set it always to `true` even for non-CA certificates.\r\n`BasicConstraintsValid` seems like a Golang wrapper over the Basic Constraints extension, to conform checks in crypto/x509/verify.go and it doesn't seem like a breaking change.\r\n",
        "createdAt" : "2020-12-17T15:54:10Z",
        "updatedAt" : "2020-12-24T15:51:58Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "9022f24aed954cc459f8b14957d79e1ebb2d0a75",
    "line" : 158,
    "diffHunk" : "@@ -1,1 +659,663 @@\t\tExtKeyUsage:           cfg.Usages,\n\t\tBasicConstraintsValid: true,\n\t\tIsCA:                  isCA,\n\t}\n\tcertDERBytes, err := x509.CreateCertificate(cryptorand.Reader, &certTmpl, caCert, key.Public(), caKey)"
  },
  {
    "id" : "71526700-5370-475b-b5e6-2c341cba5bec",
    "prId" : 92183,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92183#pullrequestreview-443937998",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b97d7158-bc1a-4128-b585-906f284c27d2",
        "parentId" : null,
        "authorId" : "8066ee2f-0c16-437d-9b9a-d0d19725550e",
        "body" : "This function is just a wrapper around ` CertificateRequestFromFile` with added filename generation so I didn't add a unit test.\r\nAnd it's only used in tests anyway.",
        "createdAt" : "2020-07-07T14:40:44Z",
        "updatedAt" : "2020-07-09T05:27:27Z",
        "lastEditedBy" : "8066ee2f-0c16-437d-9b9a-d0d19725550e",
        "tags" : [
        ]
      }
    ],
    "commit" : "81554ffdc0b66c98905a2800e078205eb87f4a72",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +343,347 @@\n\treturn csr, nil\n}\n\n// PathsForCertAndKey returns the paths for the certificate and key given the path and basename."
  },
  {
    "id" : "6ce2c6d5-550f-436f-83f9-888dd22c25db",
    "prId" : 81447,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81447#pullrequestreview-275260486",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27b7465e-c8e7-4a9e-bc13-fe3c0568b61b",
        "parentId" : null,
        "authorId" : "350ae9b6-b3b1-4ba1-a475-a78423f119d0",
        "body" : "This is nil-access waiting to happen.",
        "createdAt" : "2019-08-15T04:55:54Z",
        "updatedAt" : "2019-08-15T04:55:54Z",
        "lastEditedBy" : "350ae9b6-b3b1-4ba1-a475-a78423f119d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "6df4f62d1c984003c7e578b4d73fa4c2001b4237",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +481,485 @@\n\tif block.Type != certutil.CertificateRequestBlockType {\n\t\treturn nil, errors.Errorf(\"expected block type %q, but PEM had type %q\", certutil.CertificateRequestBlockType, block.Type)\n\t}\n"
  },
  {
    "id" : "f7646663-2a7c-47f3-81ef-9796c5f03524",
    "prId" : 70809,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70809#pullrequestreview-174796250",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14aa9a83-d9c7-4550-b04b-42aa299d5000",
        "parentId" : null,
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "Strange NL choice here. Probably move the empty line before the `NewCSR` call?",
        "createdAt" : "2018-11-14T10:43:51Z",
        "updatedAt" : "2018-11-15T18:48:06Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fc1a9a87ca18d4181a0cf2fa207c9a8369d2756",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +77,81 @@\t\treturn nil, nil, errors.Wrap(err, \"unable to create private key\")\n\t}\n\n\tcsr, err := NewCSR(*config, key)\n\tif err != nil {"
  },
  {
    "id" : "57fdd38d-4ad4-469e-8021-9a50c3b10487",
    "prId" : 70611,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70611#pullrequestreview-171327311",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d387b19c-d634-488f-ace8-223d15cc8be5",
        "parentId" : null,
        "authorId" : "0de88c3b-1f1a-401f-9fd1-cd63adc590fd",
        "body" : "If you try to wrap a `nil` error, this will result in `nil` instead of a new error.",
        "createdAt" : "2018-11-03T06:37:47Z",
        "updatedAt" : "2018-11-03T13:17:56Z",
        "lastEditedBy" : "0de88c3b-1f1a-401f-9fd1-cd63adc590fd",
        "tags" : [
        ]
      },
      {
        "id" : "394b592e-e354-473f-963f-b883e31e200e",
        "parentId" : "d387b19c-d634-488f-ace8-223d15cc8be5",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "this is correct thanks for finding it @yagonobre \r\ni think https://github.com/kubernetes/kubernetes/blob/d9829f50463178a99f29b79b97d8e0d12c37349c/cmd/kubeadm/app/util/pkiutil/pki_helpers.go#L231\r\n\r\nneeds the same fix.\r\n",
        "createdAt" : "2018-11-03T12:28:07Z",
        "updatedAt" : "2018-11-03T13:17:56Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "3722f1d2-821d-4ad0-aa95-2965341b9a0d",
        "parentId" : "d387b19c-d634-488f-ace8-223d15cc8be5",
        "authorId" : "0de88c3b-1f1a-401f-9fd1-cd63adc590fd",
        "body" : "Good catch, fixed!",
        "createdAt" : "2018-11-03T13:18:41Z",
        "updatedAt" : "2018-11-03T13:18:41Z",
        "lastEditedBy" : "0de88c3b-1f1a-401f-9fd1-cd63adc590fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a80a57307407e4ce8c14db00514ebc711abce6f4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +202,206 @@\t\tkey = k\n\tdefault:\n\t\treturn nil, errors.Errorf(\"the private key file %s isn't in RSA format\", privateKeyPath)\n\t}\n"
  }
]