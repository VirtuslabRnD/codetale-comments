[
  {
    "id" : "57ea8bba-fde8-4c23-a868-23f40ab0835c",
    "prId" : 102463,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102463#pullrequestreview-674770550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe451e7c-c946-4178-88de-e846b2fd2001",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "these are the default ranges for ~debian~ubuntu and alpine, i did not test other distros.\r\nif they lack /etc/login.defs they are already non-standard - e.g. current Alpine, older openSUSE (AFAIK?)",
        "createdAt" : "2021-05-31T22:44:26Z",
        "updatedAt" : "2021-06-02T23:58:11Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "caa20204-6e92-4a27-bc57-fc7360c517c2",
        "parentId" : "fe451e7c-c946-4178-88de-e846b2fd2001",
        "authorId" : "5e225159-999d-430a-8b58-d5220dc1429d",
        "body" : "Some reference in k/k https://github.com/kubernetes/kubernetes/blob/master/pkg/volume/glusterfs/glusterfs.go#L82-L97",
        "createdAt" : "2021-06-02T09:35:33Z",
        "updatedAt" : "2021-06-02T09:35:33Z",
        "lastEditedBy" : "5e225159-999d-430a-8b58-d5220dc1429d",
        "tags" : [
        ]
      },
      {
        "id" : "3df19097-9285-409c-b302-684fb4c782cf",
        "parentId" : "fe451e7c-c946-4178-88de-e846b2fd2001",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "these values seem specific to the glusterfs volume plugin.\r\ni have not seen system GID limits starting in the 2000 ranges before, but distros are free to pick a range that they like. https://man7.org/linux/man-pages/man5/login.defs.5.html (the official spec suggests 101-999)\r\nas long as the same distro is including these values in /etc/login.defs we should be fine.\r\n\r\nUbuntu for example has the file, but have commented some of the definitions, which partially defeats the purpose of the file.\r\n\r\n```\r\ncontrolplane $ cat /etc/login.defs |grep GID\r\nGID_MIN                  1000\r\nGID_MAX                 60000\r\n#SYS_GID_MIN              100\r\n#SYS_GID_MAX              999\r\n```\r\n\r\nmy only hope is that these are defined in pairs and some distro does not have e.g. `SYS_GID_MIN   2000`, but then the `#SYS_GID_MAX ....` line is commented. that would be absurd.\r\n",
        "createdAt" : "2021-06-03T00:01:50Z",
        "updatedAt" : "2021-06-03T00:15:01Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6d015be7a0e0d34a0b7680d3d5ea6276c20d867",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +101,105 @@\n\t// defaultLimits holds the default limits in case values are missing in /etc/login.defs\n\tdefaultLimits = &limits{minUID: 100, maxUID: 999, minGID: 100, maxGID: 999}\n)\n"
  },
  {
    "id" : "2a1af516-dcaf-4b6c-918d-d51e8876a1ad",
    "prId" : 102463,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102463#pullrequestreview-673659742",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bf54028-0c0e-4e65-b193-3864a33866cf",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "we should return defaults (pass \"\" here) in case reading the file fails.",
        "createdAt" : "2021-06-01T23:05:59Z",
        "updatedAt" : "2021-06-01T23:05:59Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6d015be7a0e0d34a0b7680d3d5ea6276c20d867",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +155,159 @@\t\tclose()\n\t}\n\tlimits, err := parseLoginDefs(loginDef)\n\tif err != nil {\n\t\treturn nil, err"
  },
  {
    "id" : "7e4f5298-6fa3-46c0-a5e2-61bcba83e4cc",
    "prId" : 102463,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102463#pullrequestreview-674683604",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e3f7b88-9d02-422d-9c02-1a3a7ad292e7",
        "parentId" : null,
        "authorId" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "body" : "since we are using supplementalGroups: we don't need to add the users to the group. Not adding the list of users to the group makes the validation and creation a bit simpler. ",
        "createdAt" : "2021-06-02T00:05:17Z",
        "updatedAt" : "2021-06-02T00:06:19Z",
        "lastEditedBy" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "tags" : [
        ]
      },
      {
        "id" : "83c6d4e6-f3aa-41c3-82f9-100ef84b54f8",
        "parentId" : "8e3f7b88-9d02-422d-9c02-1a3a7ad292e7",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "true, the complexity and number of LoC will be reduced by this.\r\n\r\ni can see this not being needed for primary groups (`adduser` does not do that for primary groups, without an explicit `usermod`). but can we also avoid it for `kubeadm-sa-key-readers`, which is supplemental group by definition?\r\n\r\ni guess, yes...but perhaps we can just leave this for more clarity for readers of these files?\r\n",
        "createdAt" : "2021-06-02T20:27:29Z",
        "updatedAt" : "2021-06-02T23:56:00Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "9bb76d9a-c0df-49d8-b27c-562c0bd6e344",
        "parentId" : "8e3f7b88-9d02-422d-9c02-1a3a7ad292e7",
        "authorId" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "body" : "I guess leaving it is fine, but since the users are already added to the group we wouldn't need to add the supplementalGroup.",
        "createdAt" : "2021-06-02T21:09:51Z",
        "updatedAt" : "2021-06-02T21:09:51Z",
        "lastEditedBy" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6d015be7a0e0d34a0b7680d3d5ea6276c20d867",
    "line" : 533,
    "diffHunk" : "@@ -1,1 +531,535 @@// createGroup is a helper function to produce a group from entry.\nfunc createGroup(e *entry) string {\n\treturn fmt.Sprintf(\"%s:x:%d:%s\", e.name, e.id, strings.Join(e.userNames, \",\"))\n}\n"
  },
  {
    "id" : "503a25cf-dcea-4881-bae0-b9535d9bff62",
    "prId" : 102463,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102463#pullrequestreview-675745312",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "660ac4b9-3cc7-4c83-834a-2203a460cb0b",
        "parentId" : null,
        "authorId" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "body" : "How will consumers outside this package access the entry type? wouldn't we have to make entry exported out side this package?\r\n\r\nFor example I'd like to do something like\r\n\r\n```go\r\nugs, err := users.AddUsersAndGroups\r\n\r\nkubeApiServerUser := ugs.Users[kubeadmconstants.KubeAPIServerUserName]\r\n```\r\nThis will cause an error because entry is not exported.\r\n\r\nI think It might be better to make EntryMap something like\r\n\r\n```go\r\ntype EntryMap map[string]*Entry\r\n```\r\n\r\nor better yet\r\n\r\n```go\r\ntype UsersAndGroups struct {\r\n  Users map[string]*Entry\r\n  Groups map[string]*Entry\r\n}\r\n```\r\n",
        "createdAt" : "2021-06-03T18:21:32Z",
        "updatedAt" : "2021-06-03T21:01:50Z",
        "lastEditedBy" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "tags" : [
        ]
      },
      {
        "id" : "cdf3eed5-8a60-43a1-9d07-dd5121866031",
        "parentId" : "660ac4b9-3cc7-4c83-834a-2203a460cb0b",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "do we need anything more than the UID / GID?\r\n\r\nif not this can be used:\r\n```\r\nugs, err := users.AddUsersAndGroups()\r\n\r\nuid := ugs.Users[kubeadmconstants.KubeAPIServerUserName].ID()\r\ngid := ugs.Groups[kubeadmconstants.KubeAPIServerUserName].ID()\r\n```\r\n",
        "createdAt" : "2021-06-03T21:12:30Z",
        "updatedAt" : "2021-06-03T21:12:30Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "77301e45-823f-44ff-a76e-d124c6f3627f",
        "parentId" : "660ac4b9-3cc7-4c83-834a-2203a460cb0b",
        "authorId" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "body" : "https://github.com/kubernetes/kubernetes/pull/102463#discussion_r645119455",
        "createdAt" : "2021-06-03T21:15:49Z",
        "updatedAt" : "2021-06-03T21:15:49Z",
        "lastEditedBy" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "tags" : [
        ]
      },
      {
        "id" : "a0cc725b-3cf0-4870-aa1b-c9a049c4f11f",
        "parentId" : "660ac4b9-3cc7-4c83-834a-2203a460cb0b",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "`uid` and `gid` can end up as e.g. `101` and `102`.",
        "createdAt" : "2021-06-03T21:21:02Z",
        "updatedAt" : "2021-06-03T21:21:02Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "d1dcbf53-2385-41b0-bda4-63edba7801a0",
        "parentId" : "660ac4b9-3cc7-4c83-834a-2203a460cb0b",
        "authorId" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "body" : "I see my understanding of what is stored in Users and Groups in the UsersAndGroups struct was flawed, you comment has clarified that for me. Thanks!",
        "createdAt" : "2021-06-03T21:22:53Z",
        "updatedAt" : "2021-06-03T21:22:53Z",
        "lastEditedBy" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "tags" : [
        ]
      },
      {
        "id" : "18e6f372-4072-4893-a193-1566bcf4b213",
        "parentId" : "660ac4b9-3cc7-4c83-834a-2203a460cb0b",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "actually the syntax is:\r\n```\r\nugs, err := users.AddUsersAndGroups()\r\n\r\nconst name = kubeadmconstants.KubeAPIServerUserName\r\nuid := ugs.Users.ID(name)\r\ngid := ugs.Groups.ID(name)\r\n```\r\n",
        "createdAt" : "2021-06-03T21:36:53Z",
        "updatedAt" : "2021-06-04T14:37:41Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6d015be7a0e0d34a0b7680d3d5ea6276c20d867",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +38,42 @@// EntryMap holds a map of user or group entries.\ntype EntryMap struct {\n\tentries map[string]*entry\n}\n"
  },
  {
    "id" : "9488f3e2-8154-471e-8760-990e402f021b",
    "prId" : 102463,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102463#pullrequestreview-675730498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb85fcaf-5725-441f-86a3-9bde314a1ade",
        "parentId" : null,
        "authorId" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "body" : "should we add these to kubeadmconstants?",
        "createdAt" : "2021-06-03T20:47:09Z",
        "updatedAt" : "2021-06-03T21:01:50Z",
        "lastEditedBy" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "tags" : [
        ]
      },
      {
        "id" : "ee801b75-b0ef-4b76-a0a9-c506e8a9e12a",
        "parentId" : "cb85fcaf-5725-441f-86a3-9bde314a1ade",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "i added these only here, since we don't need to open the files outside of the users/ package.\r\n",
        "createdAt" : "2021-06-03T21:13:31Z",
        "updatedAt" : "2021-06-03T21:13:32Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "09303d84-b7aa-4b86-a72d-519af471b8e2",
        "parentId" : "cb85fcaf-5725-441f-86a3-9bde314a1ade",
        "authorId" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "body" : "Thanks makes sense!",
        "createdAt" : "2021-06-03T21:16:13Z",
        "updatedAt" : "2021-06-03T21:16:14Z",
        "lastEditedBy" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6d015be7a0e0d34a0b7680d3d5ea6276c20d867",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +78,82 @@\n\t// These are constants for the default system paths on Linux.\n\tfileEtcLoginDefs = \"/etc/login.defs\"\n\tfileEtcPasswd    = \"/etc/passwd\"\n\tfileEtcGroup     = \"/etc/group\""
  },
  {
    "id" : "ef4c4d0a-af21-413d-84e7-134fe29a2940",
    "prId" : 102463,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102463#pullrequestreview-675735591",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8699cb81-f95e-4e1f-a9e5-771028f7fd1f",
        "parentId" : null,
        "authorId" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "body" : "what if the primary group id and the user id are different? wouldn't the caller need both? I think we should just export Entry struct with some of the fields within it en-exported.",
        "createdAt" : "2021-06-03T20:55:15Z",
        "updatedAt" : "2021-06-03T21:01:50Z",
        "lastEditedBy" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "tags" : [
        ]
      },
      {
        "id" : "faa22b7e-b760-4ddc-bd0e-7e15b258ff9f",
        "parentId" : "8699cb81-f95e-4e1f-a9e5-771028f7fd1f",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "it's fine if we export Entry, but it's a strange structure due to the fact it allows both user and group parsing.\r\nit has `id` and `gid` fields where, `gid` only matters for users.",
        "createdAt" : "2021-06-03T21:23:23Z",
        "updatedAt" : "2021-06-03T21:23:23Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "760cf4f9-b0a0-47a0-84c7-ca4aef8837ad",
        "parentId" : "8699cb81-f95e-4e1f-a9e5-771028f7fd1f",
        "authorId" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "body" : "this was clarified in comments https://github.com/kubernetes/kubernetes/pull/102463#discussion_r645128696 and https://github.com/kubernetes/kubernetes/pull/102463#discussion_r645133059. We don't need to export it.",
        "createdAt" : "2021-06-03T21:24:11Z",
        "updatedAt" : "2021-06-03T21:25:00Z",
        "lastEditedBy" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6d015be7a0e0d34a0b7680d3d5ea6276c20d867",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +108,112 @@// In case of a group entry it returns the group GID.\n// It returns nil if no such entry exists.\nfunc (u *EntryMap) ID(name string) *int64 {\n\tentry, ok := u.entries[name]\n\tif !ok {"
  },
  {
    "id" : "e46d9e06-8d5e-40f0-9651-48330e7612a3",
    "prId" : 102463,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102463#pullrequestreview-675746431",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a116769b-b54c-4a1e-ae5d-3a9a667490ad",
        "parentId" : null,
        "authorId" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "body" : "if we keep some internal loop state we could perhaps avoid the goto? It makes reading the code a bit difficult.\r\nSame for other locations.",
        "createdAt" : "2021-06-03T20:57:28Z",
        "updatedAt" : "2021-06-03T21:01:50Z",
        "lastEditedBy" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "tags" : [
        ]
      },
      {
        "id" : "7d379c84-ae45-43df-aba6-54be03e33f00",
        "parentId" : "a116769b-b54c-4a1e-ae5d-3a9a667490ad",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "skipping a loop cycle in the parent loop using a goto is not so uncommon:\r\nhttps://kodify.net/go/continue-loop/#example-continue-with-a-labelled-for-loop\r\n\r\nit's less LoC too.\r\n",
        "createdAt" : "2021-06-03T21:18:52Z",
        "updatedAt" : "2021-06-03T21:18:52Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "a1dc3023-fb51-4fce-8e4d-6999c5f9756f",
        "parentId" : "a116769b-b54c-4a1e-ae5d-3a9a667490ad",
        "authorId" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "body" : "I only see one instance where it is used in non test code in k/k https://github.com/kubernetes/kubernetes/search?q=goto\r\n\r\nIt seems like kubeadm already uses this pattern so its ok to do so here.",
        "createdAt" : "2021-06-03T21:30:56Z",
        "updatedAt" : "2021-06-03T21:30:56Z",
        "lastEditedBy" : "30343065-ff78-4ac2-8aa1-fe001a3627c6",
        "tags" : [
        ]
      },
      {
        "id" : "7d9f1726-207f-4519-b028-d55916720447",
        "parentId" : "a116769b-b54c-4a1e-ae5d-3a9a667490ad",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "i know...\r\ni actually advocate for gotos, since that's something that Linux kernel code review recommend too.\r\n\r\n\r\nthey discourage too many nested indentations:\r\n```\r\nfor ... {\r\n\tif ... {\r\n\t\tif ... {\r\n...\r\n```\r\n\r\nand instead tell contributors to use a goto.",
        "createdAt" : "2021-06-03T21:38:45Z",
        "updatedAt" : "2021-06-03T21:38:45Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6d015be7a0e0d34a0b7680d3d5ea6276c20d867",
    "line" : 408,
    "diffHunk" : "@@ -1,1 +406,410 @@\t\t\t\t\t\tuc.name, g.id, uc.name)\n\t\t\t\t}\n\t\t\t\tgoto skipUser // Valid group GID and name; skip\n\t\t\t}\n\t\t\treturn nil, nil, errors.Errorf(\"could not find group with GID %d for user %q\", user.gid, user.name)"
  }
]