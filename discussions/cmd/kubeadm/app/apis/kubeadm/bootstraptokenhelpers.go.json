[
  {
    "id" : "7b6bc412-8fc4-43a1-aa26-08f815aab178",
    "prId" : 102366,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102366#pullrequestreview-675595003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "842d0de4-f861-4309-815e-40480c6c3bcb",
        "parentId" : null,
        "authorId" : "2d068038-5593-4ffc-a2d6-46dbdee326c0",
        "body" : "https://github.com/kubernetes/kubernetes/blob/ea0764452222146c47ec826977f49d7001b0ea8c/staging/src/k8s.io/cluster-bootstrap/util/secrets/secrets.go#L64\r\n\r\nIt will be used here and it looks like the changes should be safe. The scope of the impact is just the Annotation record time for UTC",
        "createdAt" : "2021-06-03T06:27:53Z",
        "updatedAt" : "2021-06-03T06:27:53Z",
        "lastEditedBy" : "2d068038-5593-4ffc-a2d6-46dbdee326c0",
        "tags" : [
        ]
      },
      {
        "id" : "98769851-c187-43cf-9fa7-de03f093e520",
        "parentId" : "842d0de4-f861-4309-815e-40480c6c3bcb",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "would like ack from cluster-lifecycle reviewer ...\r\n\r\n/assign @neolit123 ",
        "createdAt" : "2021-06-03T15:30:03Z",
        "updatedAt" : "2021-06-03T15:30:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ce992aa5-820a-47c2-b85c-62b9907479f0",
        "parentId" : "842d0de4-f861-4309-815e-40480c6c3bcb",
        "authorId" : "2d068038-5593-4ffc-a2d6-46dbdee326c0",
        "body" : "thank you very much",
        "createdAt" : "2021-06-03T15:36:35Z",
        "updatedAt" : "2021-06-03T15:36:35Z",
        "lastEditedBy" : "2d068038-5593-4ffc-a2d6-46dbdee326c0",
        "tags" : [
        ]
      },
      {
        "id" : "507ec968-c533-49a4-9c34-80334590c842",
        "parentId" : "842d0de4-f861-4309-815e-40480c6c3bcb",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "the parsing from cluster-bootstrap seems fine:\r\nhttps://github.com/kubernetes/kubernetes/blob/ea0764452222146c47ec826977f49d7001b0ea8c/staging/src/k8s.io/cluster-bootstrap/util/secrets/secrets.go#L64\r\n\r\nbut if generated tokens client side start using UTC, my assumption is that server side the token cleaner and bootstrap signer controllers should be adapted as well.\r\nhttps://github.com/kubernetes/kubernetes/blob/ea0764452222146c47ec826977f49d7001b0ea8c/pkg/controller/bootstrap/tokencleaner.go#L192\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/ea0764452222146c47ec826977f49d7001b0ea8c/plugin/pkg/auth/authenticator/token/bootstrap/bootstrap.go#L131\r\n\r\nif we make the change server side, to me this seems like we are introducing a weird scenario for tokens that already exist in etcd.\r\n\r\nthis was mentioned here in the other closed PR:\r\nhttps://github.com/kubernetes/kubernetes/pull/102451#discussion_r642546852\r\n\r\ni could be wrong.\r\n",
        "createdAt" : "2021-06-03T17:16:17Z",
        "updatedAt" : "2021-06-03T17:16:18Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "933ed19c-a23c-4403-8b56-40e93f1272c0",
        "parentId" : "842d0de4-f861-4309-815e-40480c6c3bcb",
        "authorId" : "2d068038-5593-4ffc-a2d6-46dbdee326c0",
        "body" : "Thank you very much\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/ea0764452222146c47ec826977f49d7001b0ea8c/staging/src/k8s.io/cluster-bootstrap/util/secrets/secrets.go#L64\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/ea0764452222146c47ec826977f49d7001b0ea8c/staging/src/k8s.io/cluster-bootstrap/util/secrets/secrets.go#L49\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/ea0764452222146c47ec826977f49d7001b0ea8c/pkg/controller/bootstrap/tokencleaner.go#L192\r\n\r\nThe tokencleaner should not need to be modified, it uses \"time.Parse\" parsing and will parse to UTC time zone\r\n\r\nThe bootstrap signer controllers also use the same code\r\n\r\nhttps://github.com/golang/go/blob/e0d029f75846f84f79e63f6100c57047f4a3fa98/src/time/format.go#L905-L907",
        "createdAt" : "2021-06-03T17:31:49Z",
        "updatedAt" : "2021-06-03T17:39:28Z",
        "lastEditedBy" : "2d068038-5593-4ffc-a2d6-46dbdee326c0",
        "tags" : [
        ]
      },
      {
        "id" : "5afb9d53-86b3-45c9-8892-e9b6f1756c72",
        "parentId" : "842d0de4-f861-4309-815e-40480c6c3bcb",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "the controllers currently accept local server time and `time.Now() != time.Now().UTC()`",
        "createdAt" : "2021-06-03T17:37:53Z",
        "updatedAt" : "2021-06-03T17:38:05Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "397c0dc1-ae88-474c-9606-4c4d91666aca",
        "parentId" : "842d0de4-f861-4309-815e-40480c6c3bcb",
        "authorId" : "2d068038-5593-4ffc-a2d6-46dbdee326c0",
        "body" : "> the controllers currently accept local server time and `time.Now() != time.Now().UTC()`\r\n\r\nSorry, I didn't understand\r\n\r\n`time.Now().Equal(time.Now().UTC())` is true\r\n\r\n``` golang\r\ntimeRemaining = expTime.Sub(currentTime)\r\n// or \r\ntimeRemaining = expTime.UTC().Sub(currentTime)\r\n// or\r\ntimeRemaining = expTime.Sub(currentTime.UTC())\r\n```\r\ntimeRemaining is always the same\r\n\r\n\r\n```golang\r\ntime.Now().Format() != time.Now().UTC().Format()\r\n```\r\nin format, they will be different(If the local time zone is not UTC)\r\n\r\nI don't know if your concerns have been addressed @neolit123 ",
        "createdAt" : "2021-06-03T17:43:43Z",
        "updatedAt" : "2021-06-03T17:55:26Z",
        "lastEditedBy" : "2d068038-5593-4ffc-a2d6-46dbdee326c0",
        "tags" : [
        ]
      },
      {
        "id" : "390cb30b-8aaf-4d8b-a450-f6cc6c626d70",
        "parentId" : "842d0de4-f861-4309-815e-40480c6c3bcb",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "i think i'm ignoring the fact that when a time object is marshaled to RFC3339 for local time it stores the time zone offset.\r\nwhich means that parsing the string back to a time object would result in the same time.\r\n\r\nso starting to store time as UTC strings in boostrap token objects doesn't seem like a breaking change.\r\nit is just cosmetic.\r\n\r\n/approve",
        "createdAt" : "2021-06-03T18:10:24Z",
        "updatedAt" : "2021-06-03T18:10:42Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "4135a733-a7ea-4094-8a62-410f997fb36c",
        "parentId" : "842d0de4-f861-4309-815e-40480c6c3bcb",
        "authorId" : "2d068038-5593-4ffc-a2d6-46dbdee326c0",
        "body" : "> i think i'm ignoring the fact that when a time object is marshaled to RFC3339 for local time it stores the time zone offset.\r\n> which means that parsing the string back to a time object would result in the same time.\r\n> \r\n> so starting to store time as UTC strings in boostrap token objects doesn't seem like a breaking change.\r\n> it is just cosmetic.\r\n> \r\n> /approve\r\n\r\nAs you said, thanks very much!",
        "createdAt" : "2021-06-03T18:14:47Z",
        "updatedAt" : "2021-06-03T18:14:47Z",
        "lastEditedBy" : "2d068038-5593-4ffc-a2d6-46dbdee326c0",
        "tags" : [
        ]
      }
    ],
    "commit" : "51717256f978ad301a0eb236edcb5b41f185517c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +62,66 @@\t\t// Format the expiration date accordingly\n\t\t// TODO: This maybe should be a helper function in bootstraputil?\n\t\texpirationString := token.Expires.Time.UTC().Format(time.RFC3339)\n\t\tdata[bootstrapapi.BootstrapTokenExpirationKey] = []byte(expirationString)\n"
  },
  {
    "id" : "d7831664-3df6-49bb-8cd4-e5a5807c7c3c",
    "prId" : 77211,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77211#pullrequestreview-253103307",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99670be0-17a4-4a6e-8747-b65efabe4250",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "all the GetData calls can be replaced with `secret.Data[...keyname...]`. If Data is nil or does not contain the specified key, that evaluates to the empty string",
        "createdAt" : "2019-06-22T18:05:05Z",
        "updatedAt" : "2019-06-22T18:05:06Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "de8c6deaf38e63d1d28ec4e8e1683b416b8918ec",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +85,89 @@func BootstrapTokenFromSecret(secret *v1.Secret) (*BootstrapToken, error) {\n\t// Get the Token ID field from the Secret data\n\ttokenID := bootstrapsecretutil.GetData(secret, bootstrapapi.BootstrapTokenIDKey)\n\tif len(tokenID) == 0 {\n\t\treturn nil, errors.Errorf(\"bootstrap Token Secret has no token-id data: %s\", secret.Name)"
  },
  {
    "id" : "79164012-78ec-4591-a045-acca61fe8db0",
    "prId" : 64408,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64408#pullrequestreview-124210754",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdebd540-c18a-4909-aa01-d280f18e18ad",
        "parentId" : null,
        "authorId" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "body" : "I'm wondering if those helpers should be here - as part of the kubeadm specific API -  or into `k8s.io/client-go/tools/bootstrap/token/` - as part of the common infrastructure for boostrap tokens -. WDYT?",
        "createdAt" : "2018-05-29T10:34:17Z",
        "updatedAt" : "2018-06-01T14:14:41Z",
        "lastEditedBy" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "tags" : [
        ]
      },
      {
        "id" : "f8539c78-69b4-4667-8e33-b1cff8bfed8b",
        "parentId" : "bdebd540-c18a-4909-aa01-d280f18e18ad",
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "They will move when the types do.",
        "createdAt" : "2018-05-29T14:58:33Z",
        "updatedAt" : "2018-06-01T14:14:41Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "d45c74a5-db39-4d0f-be4f-8d954c95a7cf",
        "parentId" : "bdebd540-c18a-4909-aa01-d280f18e18ad",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Could you please add a //TODO with a link to an issue that outlines the migration plan.",
        "createdAt" : "2018-05-29T23:47:55Z",
        "updatedAt" : "2018-06-01T14:14:41Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "d01a7be2acfdf43a3b12d1d4231145e1107c633a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +15,19 @@*/\n\npackage kubeadm\n\nimport ("
  }
]