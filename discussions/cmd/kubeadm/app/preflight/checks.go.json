[
  {
    "id" : "66857f38-98f1-416d-a31f-a21fc98053ba",
    "prId" : 99194,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99194#pullrequestreview-594690083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a151c37-649c-4a95-a753-17ee01673dfd",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "i would like to understand more about the kubelet requirements before applying such a change.\r\nhttps://github.com/kubernetes/kubernetes/issues/99156\r\n\r\naren't we supposed to use IsQualifiedName() instead of pining to 63?\r\n",
        "createdAt" : "2021-02-18T16:52:21Z",
        "updatedAt" : "2021-02-20T01:51:09Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "f20e96e9-ae64-4468-9cec-ce04a9a16f6c",
        "parentId" : "4a151c37-649c-4a95-a753-17ee01673dfd",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "> #99156\r\n\r\nthis is closed, until further notice.\r\ndoes the kubelet actually impose validation and limitation to the hostnames the user can pass to it?\r\n",
        "createdAt" : "2021-02-18T21:23:38Z",
        "updatedAt" : "2021-02-20T01:51:09Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "12fd3236-bb98-472f-9602-bff82ef9053d",
        "parentId" : "4a151c37-649c-4a95-a753-17ee01673dfd",
        "authorId" : "5e225159-999d-430a-8b58-d5220dc1429d",
        "body" : "kubelet doesn't validate it, but hostname is used in some other features like node-label selector and static-pod suffix.\r\n\r\nIf it is too long, something may not work. So I think we should add a warning here. \r\nAs this is not strictly limited, it is not an error.",
        "createdAt" : "2021-02-19T02:04:12Z",
        "updatedAt" : "2021-02-20T01:51:09Z",
        "lastEditedBy" : "5e225159-999d-430a-8b58-d5220dc1429d",
        "tags" : [
        ]
      },
      {
        "id" : "90ba141b-be40-4652-9f15-c207f22c94b2",
        "parentId" : "4a151c37-649c-4a95-a753-17ee01673dfd",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "true, we are adding a warning here in kubeadm and that's fine, but i'm wondering about a few things when a Node name is too long:\r\n- does the bootstrap finish OK (i.e. node joins the cluster)?\r\n- can pods still schedule on this node?\r\ni guess i can try some of these things myself..\r\n\r\ni'm asking because maybe the kubelet should also error out on long names (separate PR).\r\nbut if some of that partially works such a change in the kubelet would need an \"action required\" because otherwise it will break some users.\r\n",
        "createdAt" : "2021-02-19T13:52:41Z",
        "updatedAt" : "2021-02-20T01:51:09Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "b10e4078-fb75-4332-a373-caae03aba1b4",
        "parentId" : "4a151c37-649c-4a95-a753-17ee01673dfd",
        "authorId" : "5e225159-999d-430a-8b58-d5220dc1429d",
        "body" : "Add to my todo list on kubelet/sig-node",
        "createdAt" : "2021-02-20T02:09:08Z",
        "updatedAt" : "2021-02-20T02:09:08Z",
        "lastEditedBy" : "5e225159-999d-430a-8b58-d5220dc1429d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c89fa4a5949c2a8a9e76daada71a18b5afea20e",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +409,413 @@\tfor _, msg := range validation.IsQualifiedName(hc.nodeName) {\n\t\twarnings = append(warnings, errors.Errorf(\"invalid node name format %q: %s\", hc.nodeName, msg))\n\t}\n\n\taddr, err := net.LookupHost(hc.nodeName)"
  },
  {
    "id" : "4af90574-7163-43c7-aa8b-df8490ae10f2",
    "prId" : 83090,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83090#pullrequestreview-292800675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fbbaf19-b091-47ef-af10-ba8de9ed19bf",
        "parentId" : null,
        "authorId" : "27315fad-771e-420e-af79-534db73fcb49",
        "body" : "this is the only change outside of the package that I made to support the `[]error`",
        "createdAt" : "2019-09-25T02:34:12Z",
        "updatedAt" : "2019-09-28T15:09:59Z",
        "lastEditedBy" : "27315fad-771e-420e-af79-534db73fcb49",
        "tags" : [
        ]
      }
    ],
    "commit" : "114d7855f3ecc8c21d743ccef5d8e8a7ad15c55c",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +550,554 @@\t\t}\n\t\tif warn != nil {\n\t\t\twarns = append(warns, warn...)\n\t\t}\n\t}"
  },
  {
    "id" : "3a607d7d-feda-474b-afb0-6785e379d0f4",
    "prId" : 82267,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82267#pullrequestreview-283969365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bb92cb0-7060-4496-92b0-a32ebba65739",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "May I know where \"1234\" came from ?",
        "createdAt" : "2019-09-04T02:13:41Z",
        "updatedAt" : "2019-09-04T02:13:41Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "3832d89d-4b26-42e7-8a86-d0bda3eb1ccb",
        "parentId" : "7bb92cb0-7060-4496-92b0-a32ebba65739",
        "authorId" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "body" : "It is random port to assign in the formed URL. For detecting proxy configuration it is ignored, so it wouldn't be any difference with \"80\", \"443\" or any other port valid URL port number.",
        "createdAt" : "2019-09-04T08:37:59Z",
        "updatedAt" : "2019-09-04T08:37:59Z",
        "lastEditedBy" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "tags" : [
        ]
      },
      {
        "id" : "12a76765-8ca3-4936-abc0-a1acec46d51a",
        "parentId" : "7bb92cb0-7060-4496-92b0-a32ebba65739",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "After reading the code, I got same conclusion.",
        "createdAt" : "2019-09-05T00:45:59Z",
        "updatedAt" : "2019-09-05T00:45:59Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fb4a2be41c9b45778c6562e36adc57b78d77c55",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +434,438 @@\tu := &url.URL{Scheme: hst.Proto, Host: hst.Host}\n\tif utilsnet.IsIPv6String(hst.Host) {\n\t\tu.Host = net.JoinHostPort(hst.Host, \"1234\")\n\t}\n"
  },
  {
    "id" : "0f559043-7dbe-46d0-bb74-724ce4ecf02e",
    "prId" : 81656,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81656#pullrequestreview-277488833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30f3d071-d888-431f-8e2e-73f00e277325",
        "parentId" : null,
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "good find :-)",
        "createdAt" : "2019-08-20T23:16:22Z",
        "updatedAt" : "2019-08-23T02:51:27Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a4cf591eae7bfbba0ad441ffaaca9b5c5309340",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +214,218 @@\t}\n\n\treturn warnings, errorList\n}\n"
  },
  {
    "id" : "5b2c5350-a32e-4f6c-9089-be0c7e8238a3",
    "prId" : 79033,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79033#pullrequestreview-252317225",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54b3ecbf-19ad-434e-b1e1-61b16c41bd00",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "only if dualstack is enabled",
        "createdAt" : "2019-06-14T14:49:13Z",
        "updatedAt" : "2019-08-09T14:22:41Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "f3487b33-860e-4713-a752-90905b1ebfdf",
        "parentId" : "54b3ecbf-19ad-434e-b1e1-61b16c41bd00",
        "authorId" : "c892e350-ac78-4a0c-a13f-d0b4b7842b18",
        "body" : "See above comment on use of strings.Split and lack of feature-gate in kubeadm",
        "createdAt" : "2019-06-20T17:20:33Z",
        "updatedAt" : "2019-08-09T14:22:41Z",
        "lastEditedBy" : "c892e350-ac78-4a0c-a13f-d0b4b7842b18",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ac7ae60ccea5045142fecbc95bb369002ac2af2",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +911,915 @@\t}\n\n\tcidrs := strings.Split(cfg.Networking.PodSubnet, \",\")\n\tfor _, cidr := range cidrs {\n\t\tchecks = append(checks, HTTPProxyCIDRCheck{Proto: \"https\", CIDR: cidr})"
  },
  {
    "id" : "7969f470-8db7-4d11-a3eb-62f315fac924",
    "prId" : 74873,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74873#pullrequestreview-210581975",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d59de1dc-828a-4ed3-8749-c9dd58fd1694",
        "parentId" : null,
        "authorId" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "body" : "I think that it is better to have a separated func `RunJoinControlPlaneChecks` instead of the boolean parameter. However I can leave with it; eventually we can open an issue/good for new contributor for tracking this refactor",
        "createdAt" : "2019-03-04T15:46:02Z",
        "updatedAt" : "2019-03-05T00:45:37Z",
        "lastEditedBy" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "tags" : [
        ]
      },
      {
        "id" : "fe04f727-4c9d-4c4b-a154-13405e6c9e3f",
        "parentId" : "d59de1dc-828a-4ed3-8749-c9dd58fd1694",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "the problem is the separate functions are prone to copy-paste mistakes.\r\ni tried doing that but stopped.\r\nbut in all cases we now need to double check the functions when shifting flags around.\r\n\r\n> However I can leave with it; eventually we can open an issue/good for new contributor for tracking this refactor\r\n\r\nok\r\n",
        "createdAt" : "2019-03-04T20:02:06Z",
        "updatedAt" : "2019-03-05T00:45:37Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "3d86bfca-3e61-4e06-842a-30b5887d7f95",
        "parentId" : "d59de1dc-828a-4ed3-8749-c9dd58fd1694",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "rebased the PR to not depend on other PRs.\r\n",
        "createdAt" : "2019-03-05T00:48:24Z",
        "updatedAt" : "2019-03-05T00:48:24Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "943914ca-e2c9-4267-ae31-d87f474700ec",
        "parentId" : "d59de1dc-828a-4ed3-8749-c9dd58fd1694",
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "I like @fabriziopandini 's idea. A broader refactoring with the goals of making the checks interface more straightforward, not so copy-pasty and, certainly, to stop executing checks twice is a good `help now` issue for the `next` milestone.\r\nBut let's stick with the bool parameter for now.",
        "createdAt" : "2019-03-05T09:48:10Z",
        "updatedAt" : "2019-03-05T09:53:49Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      }
    ],
    "commit" : "af9e3fcfaa10f6183a1ce6b575ba757d93d9cb6d",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +876,880 @@// The boolean flag 'isSecondaryControlPlane' controls whether we are running checks in a --join-control-plane scenario.\n// If the flag is set to true we should skip checks already executed by RunJoinNodeChecks and RunOptionalJoinNodeChecks.\nfunc RunInitNodeChecks(execer utilsexec.Interface, cfg *kubeadmapi.InitConfiguration, ignorePreflightErrors sets.String, isSecondaryControlPlane bool) error {\n\tif !isSecondaryControlPlane {\n\t\t// First, check if we're root separately from the other preflight checks and fail fast"
  },
  {
    "id" : "33a0632c-dba2-40be-bfc5-558156905e3c",
    "prId" : 72111,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72111#pullrequestreview-196119401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57abf16a-9b31-46ad-9665-1b56da4255e5",
        "parentId" : null,
        "authorId" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "body" : "what about changing `ClusterConfiguration` to `KubeProxy` configuration only?",
        "createdAt" : "2018-12-28T10:16:49Z",
        "updatedAt" : "2019-01-28T12:29:29Z",
        "lastEditedBy" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "tags" : [
        ]
      },
      {
        "id" : "e3e2295a-9806-477f-b7e3-f62147737740",
        "parentId" : "57abf16a-9b31-46ad-9665-1b56da4255e5",
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "We have a couple of options for this one:\r\n1. Keep the func named `RunOptionalJoinNodeChecks` and use `ClusterConfiguration`.\r\n2. Rename the func to `RunOptionalKubeProxyChecks` and pass `KubeProxy` configuration.\r\n\r\nI don't think it's expected and acceptable for the func to be named `RunOptionalJoinNodeChecks` and to accept `KubeProxy` configuration directly. This is unexpected for the reader of the code and is bound to raise questions.",
        "createdAt" : "2019-01-24T14:45:52Z",
        "updatedAt" : "2019-01-28T12:29:29Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      },
      {
        "id" : "73ab1fde-2a29-4a3b-8a94-7e5e92d6355e",
        "parentId" : "57abf16a-9b31-46ad-9665-1b56da4255e5",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "we can keep this as is, as we might decide to add more checks in the function.\r\nhopefully not, though.\r\n",
        "createdAt" : "2019-01-24T16:18:22Z",
        "updatedAt" : "2019-01-28T12:29:29Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "80e2a3cf07e92c3f9d91b620cc69f73cfe5c2534",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +974,978 @@\n// RunOptionalJoinNodeChecks executes all individual, applicable to node configuration dependant checks\nfunc RunOptionalJoinNodeChecks(execer utilsexec.Interface, cfg *kubeadmapi.ClusterConfiguration, ignorePreflightErrors sets.String) error {\n\tchecks := []Checker{}\n"
  },
  {
    "id" : "94ce947d-b960-4b56-93b9-f13e7825097e",
    "prId" : 66823,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66823#pullrequestreview-142769619",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a2d15e1-98a8-4c60-8489-70af3fbea4d5",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "this still would be an indication that  `inspect` fails for some odd reason.\r\nso nice to have IMHO, even if `pull` inspects existing images, already.\r\n",
        "createdAt" : "2018-08-02T12:30:12Z",
        "updatedAt" : "2018-08-02T12:30:12Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "84300e781c61515660383582887b73b8ab7bb26e",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +836,840 @@\t\t}\n\t\tif err != nil {\n\t\t\terrors = append(errors, fmt.Errorf(\"failed to check if image %s exists: %v\", image, err))\n\t\t}\n\t\tglog.V(1).Infof(\"pulling %s\", image)"
  },
  {
    "id" : "b4b155ea-112f-401e-85b8-aa869f1a30ae",
    "prId" : 66282,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66282#pullrequestreview-138293171",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94641a3d-aedd-4d34-a7b2-89b83a6175e5",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "Eventually I'd like to use crictl for talking to docker as well, hmm, I think requiring this always could be ok",
        "createdAt" : "2018-07-17T18:01:17Z",
        "updatedAt" : "2018-07-17T18:01:35Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "d5eb2296-69aa-48d8-bcaa-1319e891d4d3",
        "parentId" : "94641a3d-aedd-4d34-a7b2-89b83a6175e5",
        "authorId" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "body" : "different versions of docker might not be able to respond properly to crictl. IMHO, it is safer to use crictl with explicitly cri-compatible runtime ",
        "createdAt" : "2018-07-17T21:10:55Z",
        "updatedAt" : "2018-07-17T21:10:55Z",
        "lastEditedBy" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "tags" : [
        ]
      },
      {
        "id" : "c297183d-3968-46a8-9f4c-058f4acdc2d4",
        "parentId" : "94641a3d-aedd-4d34-a7b2-89b83a6175e5",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "@kad could we put a //TODO comment there to re-evaluate based on docker version and compatibility, \r\nthen lgtm imo \r\n\r\n/approve ",
        "createdAt" : "2018-07-18T02:20:07Z",
        "updatedAt" : "2018-07-18T02:20:07Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "1e69fda9-a266-4464-bdba-03689c8272b0",
        "parentId" : "94641a3d-aedd-4d34-a7b2-89b83a6175e5",
        "authorId" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "body" : "> Eventually I'd like to use crictl for talking to docker as well\r\n\r\nYou can do it if you specify full socket url pointing to the docker socket, i.e. --cri-socket unix:///var/run/dockershim.sock",
        "createdAt" : "2018-07-18T08:05:56Z",
        "updatedAt" : "2018-07-18T08:05:57Z",
        "lastEditedBy" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "tags" : [
        ]
      },
      {
        "id" : "29a6380d-6256-4b12-a679-1bbca7ab4302",
        "parentId" : "94641a3d-aedd-4d34-a7b2-89b83a6175e5",
        "authorId" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "body" : "@luxas \r\n> hmm, I think requiring this always could be ok\r\n\r\nRequesting crictl for the docker doesn't make sense as it's simply not used. And it's not harmless as it creates great confusion especially among docker users that even don't know what CRI is, but obliged to install crictl. Here are some examples:\r\n * https://github.com/kubernetes/kubeadm/issues/992\r\n * https://github.com/kubernetes/kubeadm/issues/657\r\n * https://github.com/kubernetes/kubeadm/issues/814\r\n * https://github.com/kubernetes/kubeadm/issues/700\r\n * https://github.com/kubernetes/kubeadm/issues/657",
        "createdAt" : "2018-07-18T09:57:18Z",
        "updatedAt" : "2018-07-18T09:57:19Z",
        "lastEditedBy" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "tags" : [
        ]
      },
      {
        "id" : "733d5c12-1047-4241-b983-ade6b0d3085b",
        "parentId" : "94641a3d-aedd-4d34-a7b2-89b83a6175e5",
        "authorId" : "bfaab188-fe7f-45cd-8e91-eeb4626a5f04",
        "body" : "Eventually, yes, it would be great to replace all container runtime calls with crictl.\r\n",
        "createdAt" : "2018-07-18T14:52:20Z",
        "updatedAt" : "2018-07-18T14:52:20Z",
        "lastEditedBy" : "bfaab188-fe7f-45cd-8e91-eeb4626a5f04",
        "tags" : [
        ]
      }
    ],
    "commit" : "95eb8216745990cf7f555bfd603c490f5133ad53",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +968,972 @@\t// non-windows checks\n\tif runtime.GOOS == \"linux\" {\n\t\tif !isDocker {\n\t\t\tchecks = append(checks, InPathCheck{executable: \"crictl\", mandatory: true, exec: execer})\n\t\t}"
  },
  {
    "id" : "f232b316-f75c-4ef7-8c26-0941eb93a6d2",
    "prId" : 64611,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64611#pullrequestreview-135124785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58dea5e2-8116-42e0-9845-4111c1c549b3",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : ":+1:",
        "createdAt" : "2018-07-06T19:07:48Z",
        "updatedAt" : "2018-07-16T09:20:53Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0dd6cc3db1c0bc427693d08676fd1f6baeaf2b4",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +984,988 @@\t}\n\tchecks = append(checks,\n\t\tSystemVerificationCheck{IsDocker: isDocker},\n\t\tIsPrivilegedUserCheck{},\n\t\tHostnameCheck{nodeName: cfg.GetNodeName()},"
  },
  {
    "id" : "e910c993-d669-40cc-b6e3-2cbce00c61b1",
    "prId" : 64269,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64269#pullrequestreview-124368997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0183db88-c7b7-4b9f-ac29-aa40f6e736ca",
        "parentId" : null,
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "Better have difference labels to avoid confusions. WDYT?",
        "createdAt" : "2018-05-30T05:17:55Z",
        "updatedAt" : "2018-05-30T05:18:07Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      },
      {
        "id" : "822db800-e35f-4803-bb07-5bdaef8074f8",
        "parentId" : "0183db88-c7b7-4b9f-ac29-aa40f6e736ca",
        "authorId" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "body" : "It was original reason discussed in kubernetes/website#8317: for user in case some issue with client certificates to specify one type in `--ignore-preflight-errors` rather than 3 or 4 different. Otherwise user would do `--ignore-preflight-errors=all`. Exact error message(s) will show which out of 3 files are missing, but for ignoring that issue, one single label can be utilized.",
        "createdAt" : "2018-05-30T10:53:41Z",
        "updatedAt" : "2018-05-30T10:55:46Z",
        "lastEditedBy" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "tags" : [
        ]
      },
      {
        "id" : "98e4103b-7c2e-4335-85ec-bf2893a080cb",
        "parentId" : "0183db88-c7b7-4b9f-ac29-aa40f6e736ca",
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "Okay, fair enough. Thanks!",
        "createdAt" : "2018-05-30T12:03:56Z",
        "updatedAt" : "2018-05-30T12:03:57Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "c798dfc88df9c015f6c274399413c5cab1315e94",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +893,897 @@\t\t// Only check etcd version when external endpoints are specified\n\t\tif cfg.Etcd.External.CAFile != \"\" {\n\t\t\tchecks = append(checks, FileExistingCheck{Path: cfg.Etcd.External.CAFile, Label: \"ExternalEtcdClientCertificates\"})\n\t\t}\n\t\tif cfg.Etcd.External.CertFile != \"\" {"
  },
  {
    "id" : "ffc5ce50-1364-4533-be9a-c9b1d9904d8e",
    "prId" : 64105,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64105#pullrequestreview-123891804",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88f5d4bc-ba23-4591-b227-213d9a0243cc",
        "parentId" : null,
        "authorId" : "bfaab188-fe7f-45cd-8e91-eeb4626a5f04",
        "body" : "Think we should log each pull so the user has some idea of why it's just sitting there?",
        "createdAt" : "2018-05-23T22:40:13Z",
        "updatedAt" : "2018-05-25T18:26:36Z",
        "lastEditedBy" : "bfaab188-fe7f-45cd-8e91-eeb4626a5f04",
        "tags" : [
        ]
      },
      {
        "id" : "4e1bbbf4-041a-4c41-9f80-edd7196c833f",
        "parentId" : "88f5d4bc-ba23-4591-b227-213d9a0243cc",
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "Can be done as a follow-up",
        "createdAt" : "2018-05-29T08:28:32Z",
        "updatedAt" : "2018-05-29T08:29:37Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f2de31d3d76ea8659a96771eaababdd091c83c2",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +875,879 @@\t\t\tcontinue\n\t\t}\n\t\tif err := i.Images.Pull(image); err != nil {\n\t\t\terrors = append(errors, fmt.Errorf(\"failed to pull image [%s]: %v\", image, err))\n\t\t}"
  },
  {
    "id" : "5b5faec3-9d3b-4750-85c3-9541ecc6621b",
    "prId" : 60585,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60585#pullrequestreview-110428987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "958d4de1-e1dd-4368-96cd-b36ed579e9da",
        "parentId" : null,
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "Right. L835 and L841 are the only two places we should change.",
        "createdAt" : "2018-03-27T02:47:35Z",
        "updatedAt" : "2018-04-11T13:56:10Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      },
      {
        "id" : "0d5025e8-5df9-4614-a281-a4144cd2dd7d",
        "parentId" : "958d4de1-e1dd-4368-96cd-b36ed579e9da",
        "authorId" : "25260d20-3dc9-4fc4-bf69-6aa8aae371ea",
        "body" : "Meaning the PR should only touch these two lines? It is currently a bit more involved due to the added unit tests, and trying to avoid the tests running for longer than they need by being able to specify the retry parameters. \r\n\r\nIs there a better approach to this? Thanks!\r\n\r\ncc @timothysc ",
        "createdAt" : "2018-04-09T12:12:41Z",
        "updatedAt" : "2018-04-11T13:56:10Z",
        "lastEditedBy" : "25260d20-3dc9-4fc4-bf69-6aa8aae371ea",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7ef952d8d620a145fd5cf3b75e2efd5678eb0c3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +849,853 @@\t\t\tif err != nil {\n\t\t\t\tloopCount--\n\t\t\t\treturn false, err\n\t\t\t}\n\t\t\tdefer r.Body.Close()"
  },
  {
    "id" : "0885c2db-43ff-4646-a3cf-c12eccd88e1a",
    "prId" : 58802,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58802#pullrequestreview-91752022",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e5d7b3e-11f6-418e-97eb-d1e2b3e36f95",
        "parentId" : null,
        "authorId" : "bdc500eb-fd23-4d89-81ce-2986aa831dfa",
        "body" : "how do you feel about putting this in a single function?",
        "createdAt" : "2018-01-25T15:49:19Z",
        "updatedAt" : "2018-02-02T09:16:03Z",
        "lastEditedBy" : "bdc500eb-fd23-4d89-81ce-2986aa831dfa",
        "tags" : [
        ]
      },
      {
        "id" : "0f94ca98-c666-4515-981a-63682ba44ed0",
        "parentId" : "2e5d7b3e-11f6-418e-97eb-d1e2b3e36f95",
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "That would be tedious IMO. LOCs will not get changed. WDYT? @jamiehannaford ",
        "createdAt" : "2018-01-26T06:10:21Z",
        "updatedAt" : "2018-02-02T09:16:03Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      }
    ],
    "commit" : "00bf985785ea027a1fff4c22ad0d1afdd185787c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +100,104 @@// Check validates the container runtime through the CRI.\nfunc (criCheck CRICheck) Check() (warnings, errors []error) {\n\tcrictlPath, err := criCheck.exec.LookPath(\"crictl\")\n\tif err != nil {\n\t\terrors = append(errors, fmt.Errorf(\"unable to find command crictl: %s\", err))"
  },
  {
    "id" : "3eff45a5-488b-4335-a8f9-f270da61f585",
    "prId" : 56072,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/56072#pullrequestreview-78561104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0215dc20-5ffe-4fb2-a846-c4e8d5f84021",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "unit test for this?",
        "createdAt" : "2017-11-22T19:52:06Z",
        "updatedAt" : "2017-11-22T19:52:46Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "e42eb28500e2014e7abb7a7bb275f1917db87be7",
    "line" : 390,
    "diffHunk" : "@@ -1,1 +1058,1062 @@\n// setHasItemOrAll is helper function that return true if item is present in the set (case insensitive) or special key 'all' is present\nfunc setHasItemOrAll(s sets.String, item string) bool {\n\tif s.Has(\"all\") || s.Has(strings.ToLower(item)) {\n\t\treturn true"
  },
  {
    "id" : "1b29ceca-9daf-4fab-8586-f0beaca00649",
    "prId" : 55055,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55055#pullrequestreview-75155463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d47e9b0-3325-431e-8ff7-e2f2cad572df",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "is it expected to always look for `crictl` here?",
        "createdAt" : "2017-11-08T15:53:20Z",
        "updatedAt" : "2017-11-09T10:42:50Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "3d424884-dc25-43b4-b564-400a5042e066",
        "parentId" : "0d47e9b0-3325-431e-8ff7-e2f2cad572df",
        "authorId" : "79676760-e10b-4a9f-aaf8-ec1c2b8e0ec3",
        "body" : "well, if we want to encourage people to install it and do the check via the CRI, yes. And btw, it's not mandatory :)",
        "createdAt" : "2017-11-08T16:16:24Z",
        "updatedAt" : "2017-11-09T10:42:50Z",
        "lastEditedBy" : "79676760-e10b-4a9f-aaf8-ec1c2b8e0ec3",
        "tags" : [
        ]
      }
    ],
    "commit" : "46683b76fd3ed6926d67ba7a7e255650a4c282c3",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +736,740 @@\t\tInPathCheck{executable: \"tc\", mandatory: false, exec: execer},\n\t\tInPathCheck{executable: \"touch\", mandatory: false, exec: execer},\n\t\tcriCtlChecker,\n\t\tExtraArgsCheck{\n\t\t\tAPIServerExtraArgs:         cfg.APIServerExtraArgs,"
  },
  {
    "id" : "b39c8391-dd97-46d9-8b4c-1b5edab19911",
    "prId" : 52913,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52913#pullrequestreview-65193036",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "416b6366-914d-4e56-96f3-f8a1d84e784b",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "nit: kubeadm",
        "createdAt" : "2017-09-26T12:17:05Z",
        "updatedAt" : "2017-09-26T18:37:51Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "521c84aa89d8ce05a037f8ab2dba07cd6ec27077",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +460,464 @@\t}\n\tif kubeletVersion.LessThan(kubeadmconstants.MinimumKubeletVersion) {\n\t\treturn nil, []error{fmt.Errorf(\"Kubelet version %q is lower than kubadm can support. Please upgrade kubelet\", kubeletVersion)}\n\t}\n\treturn nil, []error{}"
  },
  {
    "id" : "01b015fa-25c7-47d6-bdc4-372a5f1fa6c8",
    "prId" : 52792,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52792#pullrequestreview-65340197",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55b25852-e924-4ac0-8fe5-d15dd3bb119a",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "is this still necessary?",
        "createdAt" : "2017-09-26T19:46:29Z",
        "updatedAt" : "2017-10-15T08:09:12Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "792c6b80-4df5-48bd-900d-b19971edcfd2",
        "parentId" : "55b25852-e924-4ac0-8fe5-d15dd3bb119a",
        "authorId" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "body" : "Yes, that is another check. (master IP address is not part of pod/service CIDR checks). Just changed order, so all proxy related warnings will be in one place and not mixed with warnings/errors of something else.",
        "createdAt" : "2017-09-26T19:53:19Z",
        "updatedAt" : "2017-10-15T08:09:12Z",
        "lastEditedBy" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ed769249971a69daf07abc7566c7fcb8201c888",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +718,722 @@\t\t\tSchedulerExtraArgs:         cfg.SchedulerExtraArgs,\n\t\t},\n\t\tHTTPProxyCheck{Proto: \"https\", Host: cfg.API.AdvertiseAddress, Port: int(cfg.API.BindPort)},\n\t\tHTTPProxyCIDRCheck{Proto: \"https\", CIDR: cfg.Networking.ServiceSubnet},\n\t\tHTTPProxyCIDRCheck{Proto: \"https\", CIDR: cfg.Networking.PodSubnet},"
  },
  {
    "id" : "5d55d280-8d26-4b6d-92a2-477cc685a1ee",
    "prId" : 52792,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52792#pullrequestreview-68760584",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b414c7d4-bb7c-4a75-ae12-19acfad1080f",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "I'm struggling to see why this is always an error and how we ensure we don't get false positives.  \r\n\r\nWould it be possible to add test cases here? ",
        "createdAt" : "2017-10-11T21:20:39Z",
        "updatedAt" : "2017-10-15T08:09:12Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "7bfd8cb6-3724-497a-b423-2059710ffe54",
        "parentId" : "b414c7d4-bb7c-4a75-ae12-19acfad1080f",
        "authorId" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "body" : "It will produce warning, not error. Test case potentially possible, just need to be careful with set/unset environment variables during test.",
        "createdAt" : "2017-10-11T21:38:47Z",
        "updatedAt" : "2017-10-15T08:09:12Z",
        "lastEditedBy" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ed769249971a69daf07abc7566c7fcb8201c888",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +380,384 @@\t}\n\tif proxy != nil {\n\t\treturn []error{fmt.Errorf(\"connection to %q uses proxy %q. This may lead to malfunctional cluster setup. Make sure that Pod and Services IP ranges specified correctly as exceptions in proxy configuration\", subnet.CIDR, proxy)}, nil\n\t}\n\treturn nil, nil"
  },
  {
    "id" : "4f518cb3-8aec-42b1-83fc-f74e4ecf3bb5",
    "prId" : 52251,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52251#pullrequestreview-61870636",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "faeb09b7-b681-45d4-a215-fecca8833c55",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "firewalld is enabled and active. If it is, warn the user that there may be problems if not actions are taken",
        "createdAt" : "2017-09-11T09:54:57Z",
        "updatedAt" : "2017-09-23T12:08:30Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "d280f3a2-f241-4e47-9878-a3807c6ae083",
        "parentId" : "faeb09b7-b681-45d4-a215-fecca8833c55",
        "authorId" : "6c37c694-3f72-4ff3-ac3a-5fbddf4d5796",
        "body" : "done",
        "createdAt" : "2017-09-11T16:05:57Z",
        "updatedAt" : "2017-09-23T12:08:30Z",
        "lastEditedBy" : "6c37c694-3f72-4ff3-ac3a-5fbddf4d5796",
        "tags" : [
        ]
      }
    ],
    "commit" : "42bd5001340085fc56dd74b9900c1fe99732506d",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +123,127 @@}\n\n// Check validates if the firewall is enabled and active.\nfunc (fc FirewalldCheck) Check() (warnings, errors []error) {\n\tinitSystem, err := initsystem.GetInitSystem()"
  },
  {
    "id" : "54cc91a1-4786-459e-862f-6b38d2a62e84",
    "prId" : 52251,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52251#pullrequestreview-61869967",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d42ad83f-6f4c-4e9e-9ad3-b65d21134563",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "A general pattern we should be following is passing the struct object as a pointer instead of value.\r\nCan you make it be `(f *Foo)` everywhere here?\r\nJust because IF someone ever makes a preflight check that writes to `f`; it wouldn't change the struct and have non-obvious side-effects.",
        "createdAt" : "2017-09-11T09:56:57Z",
        "updatedAt" : "2017-09-23T12:08:30Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "116afa54-0f8b-4cd9-802c-ad6e35e3dce2",
        "parentId" : "d42ad83f-6f4c-4e9e-9ad3-b65d21134563",
        "authorId" : "6c37c694-3f72-4ff3-ac3a-5fbddf4d5796",
        "body" : "While trying to do it, hit compilation error:\r\ncmd/kubeadm/app/preflight/checks.go:623: cannot use KubernetesVersionCheck literal (type KubernetesVersionCheck) as type Checker in array or slice literal:\r\n        KubernetesVersionCheck does not implement Checker (Check method has pointer receiver)\r\n\r\nAs per slack chat, park this change for later.",
        "createdAt" : "2017-09-11T16:03:36Z",
        "updatedAt" : "2017-09-23T12:08:30Z",
        "lastEditedBy" : "6c37c694-3f72-4ff3-ac3a-5fbddf4d5796",
        "tags" : [
        ]
      }
    ],
    "commit" : "42bd5001340085fc56dd74b9900c1fe99732506d",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +151,155 @@\n// Check validates if the particular port is available.\nfunc (poc PortOpenCheck) Check() (warnings, errors []error) {\n\terrors = []error{}\n\tln, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", poc.port))"
  },
  {
    "id" : "53c58db5-e07b-42d4-94b4-ff1d070e0d35",
    "prId" : 52251,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52251#pullrequestreview-61870675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54f4c415-851e-41e6-a6ac-664dba5be421",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "...in $PATH",
        "createdAt" : "2017-09-11T09:57:31Z",
        "updatedAt" : "2017-09-23T12:08:30Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "f841e994-0e0a-44ed-bb57-75a0e2d27ac5",
        "parentId" : "54f4c415-851e-41e6-a6ac-664dba5be421",
        "authorId" : "6c37c694-3f72-4ff3-ac3a-5fbddf4d5796",
        "body" : "done",
        "createdAt" : "2017-09-11T16:06:06Z",
        "updatedAt" : "2017-09-23T12:08:30Z",
        "lastEditedBy" : "6c37c694-3f72-4ff3-ac3a-5fbddf4d5796",
        "tags" : [
        ]
      }
    ],
    "commit" : "42bd5001340085fc56dd74b9900c1fe99732506d",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +268,272 @@}\n\n// Check validates if the given executable is present in the path.\nfunc (ipc InPathCheck) Check() (warnings, errors []error) {\n\t_, err := exec.LookPath(ipc.executable)"
  },
  {
    "id" : "f5037e76-77d7-4af4-bb40-a1744b2dabe3",
    "prId" : 50840,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50840#pullrequestreview-59314410",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "824d70d6-7ecd-4885-b69e-bdec66e5aee6",
        "parentId" : null,
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "Shouldn't you also be checking the `scanner.Err()`?",
        "createdAt" : "2017-08-29T17:11:33Z",
        "updatedAt" : "2017-08-29T18:44:33Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e12787ae56b871c7247aeaf14b8e4c468a48bcf",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +446,450 @@\tfor scanner.Scan() {\n\t\tbuf = append(buf, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, []error{fmt.Errorf(\"error parsing /proc/swaps: %v\", err)}"
  },
  {
    "id" : "ea542a0e-3164-4b78-b79a-ac893cc6d10a",
    "prId" : 48875,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48875#pullrequestreview-50226809",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b33712f-962a-4921-b284-56add933568b",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "Why CIDR here? Why not ParseIP?",
        "createdAt" : "2017-07-13T20:20:50Z",
        "updatedAt" : "2017-07-18T16:38:31Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "3c80f1a9-2247-424f-aa47-69ee2bc45e35",
        "parentId" : "9b33712f-962a-4921-b284-56add933568b",
        "authorId" : "cc3618eb-e452-47bc-914a-abcad9b01552",
        "body" : "`net.InterfaceAddrs()` returns addresses in CIDR notation (ie. 172.18.0.1/16), therefore we need to use `net.ParseCIDR()` here.",
        "createdAt" : "2017-07-17T01:30:37Z",
        "updatedAt" : "2017-07-18T16:38:31Z",
        "lastEditedBy" : "cc3618eb-e452-47bc-914a-abcad9b01552",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7faf25a1d51a7917b8cf4df2380c69b46113ac5",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +640,644 @@\n\tfor _, li := range localIPAddrs {\n\t\tip, _, err := net.ParseCIDR(li.String())\n\t\tif err != nil {\n\t\t\terrors = append(errors, fmt.Errorf(\"Could not parse interface address '%s': %s\", li.String(), err))"
  },
  {
    "id" : "d288ef14-6a44-47b4-9ca5-84e474f4f31a",
    "prId" : 41877,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41877#pullrequestreview-23426133",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5560538-9490-480b-ac95-7ad863415148",
        "parentId" : null,
        "authorId" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "body" : "I'd put the json serialization tags here to make it clear that this is a just a chunk of data that we get from etcd.",
        "createdAt" : "2017-02-22T17:52:15Z",
        "updatedAt" : "2017-02-24T09:23:16Z",
        "lastEditedBy" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "tags" : [
        ]
      },
      {
        "id" : "1c8122bd-707d-434d-b100-b35e6c31801d",
        "parentId" : "d5560538-9490-480b-ac95-7ad863415148",
        "authorId" : "4e993b53-a2c8-452b-ac7c-716c3dc2995d",
        "body" : "already added",
        "createdAt" : "2017-02-23T09:02:31Z",
        "updatedAt" : "2017-02-24T09:23:16Z",
        "lastEditedBy" : "4e993b53-a2c8-452b-ac7c-716c3dc2995d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0314dc27159462beacba2c835b0a6cdd499000ad",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +346,350 @@}\n\ntype etcdVersionResponse struct {\n\tEtcdserver  string `json:\"etcdserver\"`\n\tEtcdcluster string `json:\"etcdcluster\"`"
  },
  {
    "id" : "f2e8ea14-726b-4fb4-b8d2-968f8dc3aca2",
    "prId" : 39542,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39542#pullrequestreview-15758361",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be8b69a7-a77d-4315-ad20-2af9a3d7d229",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "minor nit: I think it's common practice to pass the struct as a reference, especially when accessing fields from it => `fcc *FileContentCheck`",
        "createdAt" : "2017-01-06T22:59:20Z",
        "updatedAt" : "2017-01-09T17:56:28Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "f1313027-322b-4e98-b171-f5397cd24fc7",
        "parentId" : "be8b69a7-a77d-4315-ad20-2af9a3d7d229",
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "ping",
        "createdAt" : "2017-01-08T21:02:15Z",
        "updatedAt" : "2017-01-09T17:56:28Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "aff82b0b-0d0e-4195-ba7a-b7b0baa90cfa",
        "parentId" : "be8b69a7-a77d-4315-ad20-2af9a3d7d229",
        "authorId" : "b8f6188a-f26e-4203-bed3-a5d075997fdf",
        "body" : "the other functions don't do that, and since I am not changing any value in the struct, I didn't opt to do that. ",
        "createdAt" : "2017-01-09T17:52:04Z",
        "updatedAt" : "2017-01-09T17:56:28Z",
        "lastEditedBy" : "b8f6188a-f26e-4203-bed3-a5d075997fdf",
        "tags" : [
        ]
      },
      {
        "id" : "440051ce-5532-4a23-8eba-059775141d9d",
        "parentId" : "be8b69a7-a77d-4315-ad20-2af9a3d7d229",
        "authorId" : "0ac5d6cd-da87-46a2-9b30-0d21db1063a2",
        "body" : "@luxas I had misread your comment. What @dmmcquay states is correct as, in principle, you should use pointer receiver only when you want to modify the receiver or the struct is large and deep copy is expensive. Also, if we're looking for consistency, other checks don't use pointers.",
        "createdAt" : "2017-01-09T18:06:16Z",
        "updatedAt" : "2017-01-09T18:06:16Z",
        "lastEditedBy" : "0ac5d6cd-da87-46a2-9b30-0d21db1063a2",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb4ee4debafce916e3b17ac20707e1fa1bb94630",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +191,195 @@}\n\nfunc (fcc FileContentCheck) Check() (warnings, errors []error) {\n\tf, err := os.Open(fcc.Path)\n\tif err != nil {"
  },
  {
    "id" : "7e5f4361-eec3-47a4-98bb-cade80da5314",
    "prId" : 37568,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37568#pullrequestreview-11638526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28be91d1-c813-4330-9d4c-5fcf1c80b5a9",
        "parentId" : null,
        "authorId" : "4815d47d-9abd-4b5d-8074-030539047224",
        "body" : "Will this error our if it's an systemd system, but kubelet is not managed by systemd? We should keep the door open for that possibility and let it work, so this should be a warning not an error. (I'm not sure if it will exit yet)",
        "createdAt" : "2016-12-07T16:04:33Z",
        "updatedAt" : "2016-12-09T20:17:15Z",
        "lastEditedBy" : "4815d47d-9abd-4b5d-8074-030539047224",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0603046b4e9aa57d312494606756f049da195f0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +385,389 @@\t\t\tfmt.Printf(\"[preflight] WARNING: Unable to start the kubelet service: [%v]\\n\", err)\n\t\t\tfmt.Println(\"[preflight] WARNING: Please ensure kubelet is running manually.\")\n\t\t}\n\t}\n}"
  },
  {
    "id" : "41ff4427-db7f-4657-80d4-6121ef0e72be",
    "prId" : 37498,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37498#pullrequestreview-10197766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "211d9f74-bf1c-49f2-96d9-50aded1a6b52",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "How about the other ports listed here below as `PortOpenCheck`s?",
        "createdAt" : "2016-11-25T19:27:06Z",
        "updatedAt" : "2016-11-25T19:37:36Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "8333b346-b88c-4068-9945-88c4e600610a",
        "parentId" : "211d9f74-bf1c-49f2-96d9-50aded1a6b52",
        "authorId" : "4815d47d-9abd-4b5d-8074-030539047224",
        "body" : "I am quite unsure, I suspect we don't need etcd externally accessible, any idea if all the others are valid?",
        "createdAt" : "2016-11-25T19:30:56Z",
        "updatedAt" : "2016-11-25T19:37:36Z",
        "lastEditedBy" : "4815d47d-9abd-4b5d-8074-030539047224",
        "tags" : [
        ]
      },
      {
        "id" : "afe78bc8-9672-44fc-8f7c-8bf3418eac02",
        "parentId" : "211d9f74-bf1c-49f2-96d9-50aded1a6b52",
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "Ah, it's only for externally accessible ports? Right, then these are just fine",
        "createdAt" : "2016-11-25T19:33:52Z",
        "updatedAt" : "2016-11-25T19:37:36Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "16e01c65c4552879a4635c037dd2eed5ebd163de",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +247,251 @@\t\tServiceCheck{Service: \"kubelet\"},\n\t\tServiceCheck{Service: \"docker\"},\n\t\tFirewalldCheck{ports: []int{int(cfg.API.BindPort), int(cfg.Discovery.BindPort), 10250}},\n\t\tPortOpenCheck{port: int(cfg.API.BindPort)},\n\t\tPortOpenCheck{port: 2379},"
  },
  {
    "id" : "a6d5f83c-25bb-4668-845f-2e886b8af28a",
    "prId" : 36462,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36462#pullrequestreview-10538698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9272a563-a7bd-44e9-859f-bc088a90a3f7",
        "parentId" : null,
        "authorId" : "4815d47d-9abd-4b5d-8074-030539047224",
        "body" : "Compile error here:\r\n\r\n```\r\n# k8s.io/kubernetes/cmd/kubeadm/app/preflight\r\ncmd/kubeadm/app/preflight/checks.go:248: cfg.Discovery.Token.Port undefined (type *kubeadm.TokenDiscovery has no field or method Port)\r\ncmd/kubeadm/app/preflight/checks.go:278: cfg.APIPort undefined (type *kubeadm.NodeConfiguration has no field or method APIPort)\r\ncmd/kubeadm/app/preflight/checks.go:279: cfg.Discovery.Token.Port undefined (type *kubeadm.TokenDiscovery has no field or method Port)\r\n```",
        "createdAt" : "2016-11-29T14:04:49Z",
        "updatedAt" : "2016-12-15T21:57:21Z",
        "lastEditedBy" : "4815d47d-9abd-4b5d-8074-030539047224",
        "tags" : [
        ]
      }
    ],
    "commit" : "7945c437e59e3211c94a432e803d173282a677cd",
    "line" : null,
    "diffHunk" : "@@ -1,1 +310,314 @@\t\t\tDirAvailableCheck{Path: \"/var/lib/etcd\"},\n\t\t)\n\t}\n\n\treturn RunChecks(checks, os.Stderr)"
  },
  {
    "id" : "6f3a8c41-2f56-47c7-ac14-e19478dbdcff",
    "prId" : 36334,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36334#pullrequestreview-10968141",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebe552a5-0e25-44bc-878c-ebb5339b2836",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Are you ever actually using the data you're collecting?  If not, it seems like `io.Discard` is what you're looking for.  If you are, why not create a writer which keeps the first and the last and elides the middle if too much is written instead of hoping you have enough space?",
        "createdAt" : "2016-12-01T13:55:48Z",
        "updatedAt" : "2016-12-01T13:55:49Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "a26cbbf3d043c8f6bbc89bb1f515e73a2eedad8f",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +220,224 @@func (sysver SystemVerificationCheck) Check() (warnings, errors []error) {\n\t// Create a buffered writer and choose a quite large value (1M) and suppose the output from the system verification test won't exceed the limit\n\tbufw := bufio.NewWriterSize(os.Stdout, 1*1024*1024)\n\n\t// Run the system verification check, but write to out buffered writer instead of stdout"
  },
  {
    "id" : "d6012d25-a8f1-42f4-b897-87b1c80c2c02",
    "prId" : 34341,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34341#pullrequestreview-3908705",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90844edf-5831-4030-8ecb-8d19e137d1ac",
        "parentId" : null,
        "authorId" : "4815d47d-9abd-4b5d-8074-030539047224",
        "body" : "Future enhancement idea here, we're checking ports are available but not necessarily that they're not firewalled. Not sure if it'll be possible but it would be nice to know, though we might get into trouble with assumptions about interfaces.\n",
        "createdAt" : "2016-10-12T13:45:35Z",
        "updatedAt" : "2016-10-13T15:53:24Z",
        "lastEditedBy" : "4815d47d-9abd-4b5d-8074-030539047224",
        "tags" : [
        ]
      },
      {
        "id" : "1495d37b-2b8b-437f-8494-1fb81a824be5",
        "parentId" : "90844edf-5831-4030-8ecb-8d19e137d1ac",
        "authorId" : "0ac5d6cd-da87-46a2-9b30-0d21db1063a2",
        "body" : "Firewalling can be done at the host level or with networking equipment we can't control. However, we need to make sure that whatever connects to this ports has proper error-handling in the case these ports are not _open_ for service.\n",
        "createdAt" : "2016-10-12T16:16:53Z",
        "updatedAt" : "2016-10-13T15:53:24Z",
        "lastEditedBy" : "0ac5d6cd-da87-46a2-9b30-0d21db1063a2",
        "tags" : [
        ]
      }
    ],
    "commit" : "4231c046dd6830ab5cc52b7d0c8e80e811daf2e4",
    "line" : 170,
    "diffHunk" : "@@ -1,1 +168,172 @@\t\tPortOpenCheck{port: 10250},\n\t\tPortOpenCheck{port: 10251},\n\t\tPortOpenCheck{port: 10252},\n\t\tDirAvailableCheck{path: \"/etc/kubernetes\"},\n\t\tDirAvailableCheck{path: \"/var/lib/etcd\"},"
  },
  {
    "id" : "36d71f54-c7b4-4a66-88fb-444d529c7afa",
    "prId" : 34341,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34341#pullrequestreview-4152363",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af44a0af-1e09-4b90-ad29-72cad44f041f",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "add more inpathchecks:\nip: true, tc: false, nsenter: true, touch: false, iptables: true, mount: true, ebtables: true\n\nfor both master and node\n",
        "createdAt" : "2016-10-12T14:20:28Z",
        "updatedAt" : "2016-10-13T15:53:24Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "29458d52-56ed-4c9d-87a6-1db8caf1a669",
        "parentId" : "af44a0af-1e09-4b90-ad29-72cad44f041f",
        "authorId" : "25260d20-3dc9-4fc4-bf69-6aa8aae371ea",
        "body" : "@luxas Is there a list of all these dependencies somewhere?\n",
        "createdAt" : "2016-10-13T13:11:06Z",
        "updatedAt" : "2016-10-13T15:53:24Z",
        "lastEditedBy" : "25260d20-3dc9-4fc4-bf69-6aa8aae371ea",
        "tags" : [
        ]
      },
      {
        "id" : "d5420a5b-1a93-4afb-b777-bfe9e3954b88",
        "parentId" : "af44a0af-1e09-4b90-ad29-72cad44f041f",
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "Yup, I've documented them in https://github.com/kubernetes/kubernetes/issues/26093\n",
        "createdAt" : "2016-10-13T19:57:31Z",
        "updatedAt" : "2016-10-13T19:57:31Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "4231c046dd6830ab5cc52b7d0c8e80e811daf2e4",
    "line" : null,
    "diffHunk" : "@@ -1,1 +181,185 @@\t\tInPathCheck{executable: \"tc\", mandatory: false},\n\t\tInPathCheck{executable: \"touch\", mandatory: false},\n\t}\n\n\treturn runChecks(checks)"
  },
  {
    "id" : "7fd328a8-13fc-4fe8-9cfc-192b2207d531",
    "prId" : 34341,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34341#pullrequestreview-4112930",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a587353d-e4f2-4f32-9fd7-ccbdf7a341e0",
        "parentId" : null,
        "authorId" : "d37d9758-bdf5-4c23-a40e-a85099689a0c",
        "body" : "Also, out out curiosity: This looks good, but we could also consider if conntrack would work for us (don't we have a conntrack wrapper already or depend on it somehow?). Also, netstat could do as well, WDYT?\n",
        "createdAt" : "2016-10-13T16:43:42Z",
        "updatedAt" : "2016-10-13T16:50:42Z",
        "lastEditedBy" : "d37d9758-bdf5-4c23-a40e-a85099689a0c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4231c046dd6830ab5cc52b7d0c8e80e811daf2e4",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +85,89 @@\terrors = []error{}\n\t// TODO: Get IP from KubeadmConfig\n\tln, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", poc.port))\n\tif err != nil {\n\t\terrors = append(errors, fmt.Errorf(\"Port %d is in use\", poc.port))"
  },
  {
    "id" : "00786bf8-051d-410a-8a1a-a0537beec2ad",
    "prId" : 34341,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34341#pullrequestreview-4112930",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c7b7b07-34fc-452c-b740-aff004d2f596",
        "parentId" : null,
        "authorId" : "d37d9758-bdf5-4c23-a40e-a85099689a0c",
        "body" : "Just a heads-up: once #34719 gets merged, there will be constants for default port and config field for .\nAlso, you don't have etcd and 9898 for disco ports in this list, should we check them? Etcd may be tricky when it comes to external one, it could as well run on the same host, but port check would be critical for default path... To be clear, you don't have to fix this now :)\n",
        "createdAt" : "2016-10-13T16:49:14Z",
        "updatedAt" : "2016-10-13T16:50:42Z",
        "lastEditedBy" : "d37d9758-bdf5-4c23-a40e-a85099689a0c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4231c046dd6830ab5cc52b7d0c8e80e811daf2e4",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +163,167 @@\t\tServiceCheck{service: \"kubelet\"},\n\t\tServiceCheck{service: \"docker\"},\n\t\tPortOpenCheck{port: 443},\n\t\tPortOpenCheck{port: 2379},\n\t\tPortOpenCheck{port: 8080},"
  },
  {
    "id" : "72317d00-e283-4ad8-b84d-5f6d31c17fbb",
    "prId" : 34341,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34341#pullrequestreview-4112930",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b3ebe6e-abe3-40ba-be70-80e6e3ae2cd0",
        "parentId" : null,
        "authorId" : "d37d9758-bdf5-4c23-a40e-a85099689a0c",
        "body" : "We don't care about 8080 on nodes.\n",
        "createdAt" : "2016-10-13T16:49:49Z",
        "updatedAt" : "2016-10-13T16:50:42Z",
        "lastEditedBy" : "d37d9758-bdf5-4c23-a40e-a85099689a0c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4231c046dd6830ab5cc52b7d0c8e80e811daf2e4",
    "line" : 194,
    "diffHunk" : "@@ -1,1 +192,196 @@\t\tServiceCheck{service: \"docker\"},\n\t\tServiceCheck{service: \"kubelet\"},\n\t\tPortOpenCheck{port: 8080},\n\t\tPortOpenCheck{port: 10250},\n\t\tPortOpenCheck{port: 10251},"
  }
]