[
  {
    "id" : "1e1ae999-747e-4392-894e-44fd28d600d7",
    "prId" : 94421,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94421#pullrequestreview-480690515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87fd0f71-f385-43c0-ae38-7e71e4f1e546",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "Just to double check. After this change, if the user passes to plan 1.19.2, while the cluster version is at 1.19.1, would the table for control plane component upgrade still print .2 as the planned upgrade target in a case where the latest stable is not 1.19.2 (eg newer than that)?",
        "createdAt" : "2020-09-02T10:27:30Z",
        "updatedAt" : "2020-09-02T10:29:19Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "385334c6-88c3-4dac-bf40-00aff83d34ad",
        "parentId" : "87fd0f71-f385-43c0-ae38-7e71e4f1e546",
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "Yes. The tables are generated using the version getter (initialized at the return of this func with the value of `newK8sVersion`).",
        "createdAt" : "2020-09-02T10:29:49Z",
        "updatedAt" : "2020-09-02T10:29:50Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      },
      {
        "id" : "79817b91-b511-46a5-8edc-e44391f9b9e8",
        "parentId" : "87fd0f71-f385-43c0-ae38-7e71e4f1e546",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "Ok thanks!",
        "createdAt" : "2020-09-02T10:33:42Z",
        "updatedAt" : "2020-09-02T10:33:43Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e2a70eac7ce3458e2fcb61a86384914efa17e3b",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +193,197 @@\t\t\t// allows to not specify a target version in which case KubernetesVersion will always hold the currently\n\t\t\t// installed one.\n\t\t\tcfg.KubernetesVersion = newK8sVersion\n\t\t}\n\t}"
  },
  {
    "id" : "e57d9901-a869-4bba-bb29-75d2bfcb14a8",
    "prId" : 91980,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91980#pullrequestreview-428192603",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8503a6e1-7ebe-4728-8624-9fa23b635bac",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "our upgrade code is very messy. the line between frontend and backend in upgrade is gone MIA.\r\n\r\ninstead of passing args[] to the \"backend\" maybe it's possible to pass something like \"k8sVersionFromArgs\" that is prepared earlier?\r\n",
        "createdAt" : "2020-06-10T13:54:32Z",
        "updatedAt" : "2020-06-22T13:30:12Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "91edda8c-67de-4771-be7b-3083fc690437",
        "parentId" : "8503a6e1-7ebe-4728-8624-9fa23b635bac",
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "Actually, the line was gone even before this change. Only about a third of `enforceRequirements` is actually doing what the name says. The majority of it creates a clienset, loads the proper config, and transfers the command line overwrites to the config.\r\n\r\nInitially I began splitting this func in two new ones (`fetchUpgradeState` to get the clientset, load config, and apply the option overwrites; and `enforceRequirements` to perform the few checks we do afterward).\r\nHowever, this proved to be a bigger refactoring than the current one. Hence, I stopped it and left it for some other time (possibly as part of the `upgrade apply` phases effort).",
        "createdAt" : "2020-06-10T14:37:39Z",
        "updatedAt" : "2020-06-22T13:30:12Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      },
      {
        "id" : "d8c23fbb-e06c-4b70-80b7-87b6178528d1",
        "parentId" : "8503a6e1-7ebe-4728-8624-9fa23b635bac",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "> Actually, the line was gone even before this change\r\n\r\nagreed.\r\n\r\n> Only about a third of enforceRequirements is actually doing what the name says. The majority of it creates a clienset, loads the proper config, and transfers the command line overwrites to the config.\r\n\r\nmaybe we shouldn't further merge frontend/backend with the addition of \"args\" here, but if you think later refactors can clean this up, this is fine by me.",
        "createdAt" : "2020-06-10T15:47:22Z",
        "updatedAt" : "2020-06-22T13:30:12Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d2d15ee033a55767dfb84261940f719a963b446",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +122,126 @@\n// enforceRequirements verifies that it's okay to upgrade and then returns the variables needed for the rest of the procedure\nfunc enforceRequirements(flags *applyPlanFlags, args []string, dryRun bool, upgradeApply bool) (clientset.Interface, upgrade.VersionGetter, *kubeadmapi.InitConfiguration, error) {\n\tclient, err := getClient(flags.kubeConfigPath, dryRun)\n\tif err != nil {"
  },
  {
    "id" : "006fd046-1811-4577-9eb2-347daf6ee1e6",
    "prId" : 64624,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64624#pullrequestreview-126157465",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b43c6ce-f647-42a0-90d7-5de98a405208",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "should be part of consts. ",
        "createdAt" : "2018-06-05T21:12:38Z",
        "updatedAt" : "2018-06-06T20:41:29Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "bc900bd5-28f3-45a2-a572-abfc976bb10e",
        "parentId" : "5b43c6ce-f647-42a0-90d7-5de98a405208",
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "Yup, I want to refactor the flag registration in the upgrade command. _might_ do that as a bugfix in v1.11 still, but not sure yet",
        "createdAt" : "2018-06-05T21:19:24Z",
        "updatedAt" : "2018-06-06T20:41:29Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a87cf1c2849623d412d876484001255b8e7b68d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +58,62 @@\t// Set the default for the kubeconfig path if the user didn't override with the flags\n\tif flags.kubeConfigPath == \"\" {\n\t\tflags.kubeConfigPath = \"/etc/kubernetes/admin.conf\"\n\t}\n"
  },
  {
    "id" : "30b9cc30-5469-4056-b39e-34d2615ac396",
    "prId" : 62455,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62455#pullrequestreview-111622244",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed9d2006-14db-4ed9-ae4c-9c630017744f",
        "parentId" : null,
        "authorId" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "body" : "It'd be good to tell users this in the flag's description. They should know the behavior, IMO.",
        "createdAt" : "2018-04-12T11:54:52Z",
        "updatedAt" : "2018-04-12T11:54:56Z",
        "lastEditedBy" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "tags" : [
        ]
      },
      {
        "id" : "1469752e-a830-4822-b313-bbb39d345927",
        "parentId" : "ed9d2006-14db-4ed9-ae4c-9c630017744f",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Agreed, but I'm not going to block on this and with the overhaul coming to CLI+phases+Config we will add that documentation. \r\n\r\n/cc @liztio @fabriziopandini ",
        "createdAt" : "2018-04-12T13:34:17Z",
        "updatedAt" : "2018-04-12T13:34:28Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "22409e8fa9e77326f12d5aa4ab1217dd9ff9e4cd",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +71,75 @@\t}\n\n\t// If features gates are passed to the command line, use it (otherwise use featureGates from configuration)\n\tif flags.featureGatesString != \"\" {\n\t\tcfg.FeatureGates, err = features.NewFeatureGate(&features.InitFeatureGates, flags.featureGatesString)"
  }
]