[
  {
    "id" : "9da6c495-7a36-4ae7-89f3-9412b7e5406f",
    "prId" : 90788,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90788#pullrequestreview-407953750",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b0e5293-be51-4663-8c26-751fec3e6373",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "please add a comment on top of this deprecation line:\r\n```\r\n// TODO: The flag was deprecated in 1.19; remove the flag following a GA deprecation policy of 12 months or 2 releases (whichever is longer)\r\n```\r\nxref https://kubernetes.io/docs/reference/using-api/deprecation-policy/#deprecating-a-flag-or-cli",
        "createdAt" : "2020-05-07T14:31:59Z",
        "updatedAt" : "2020-05-08T04:49:30Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "8d25f847-d2d0-4a99-a3ca-fb636d10e943",
        "parentId" : "9b0e5293-be51-4663-8c26-751fec3e6373",
        "authorId" : "9a0adb95-53bd-4ddc-b5fe-11ad6bdfe165",
        "body" : "added",
        "createdAt" : "2020-05-08T02:16:32Z",
        "updatedAt" : "2020-05-08T04:49:30Z",
        "lastEditedBy" : "9a0adb95-53bd-4ddc-b5fe-11ad6bdfe165",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1693052070e588401ca620b17bb206112543cfe",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +93,97 @@\tcmd.Flags().DurationVar(&flags.imagePullTimeout, \"image-pull-timeout\", flags.imagePullTimeout, \"The maximum amount of time to wait for the control plane pods to be downloaded.\")\n\t// TODO: The flag was deprecated in 1.19; remove the flag following a GA deprecation policy of 12 months or 2 releases (whichever is longer)\n\tcmd.Flags().MarkDeprecated(\"image-pull-timeout\", \"This flag is deprecated and will be removed in a future version.\")\n\toptions.AddKustomizePodsFlag(cmd.Flags(), &flags.kustomizeDir)\n"
  },
  {
    "id" : "c6c1d077-41b8-45a7-adce-7fbf46f5f07b",
    "prId" : 75956,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75956#pullrequestreview-223007018",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1c3ef38-7f96-4217-81b3-d34cc87ec66f",
        "parentId" : null,
        "authorId" : "0de88c3b-1f1a-401f-9fd1-cd63adc590fd",
        "body" : "localhost",
        "createdAt" : "2019-04-03T03:45:21Z",
        "updatedAt" : "2019-04-03T04:00:37Z",
        "lastEditedBy" : "0de88c3b-1f1a-401f-9fd1-cd63adc590fd",
        "tags" : [
        ]
      },
      {
        "id" : "fd213cb0-5d98-45f1-ab23-e3a5beb8a1ca",
        "parentId" : "d1c3ef38-7f96-4217-81b3-d34cc87ec66f",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "non blocking for merge.",
        "createdAt" : "2019-04-04T21:17:11Z",
        "updatedAt" : "2019-04-04T21:17:11Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "211bc613a04e4bc790af31cf7a7b0e3a86c2652b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +149,153 @@\t}\n\n\t// block if the local etcd manifest is listening on local host only and the user explicitly opted out from etcd upgrade.\n\t// this is necessary because we want all the user to move to the new etcd manifest with v1.14.\n\t// N.B. this code is necessary only in v1.14; starting from v1.15 all the etcd manifests should have 2 endpoints"
  },
  {
    "id" : "cca58070-3043-45cd-a8ae-90fa3eba66e7",
    "prId" : 74256,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74256#pullrequestreview-206342227",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85d2b4fd-a99b-44e4-895e-aa8fd1298334",
        "parentId" : null,
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "1. This is missing a `Not` from its name (e. g. `assertVersionStringIsNotEmpty`)\r\n2. I'd rather have the single if statement moved to the only place the func gets called. But that's only if you are not going to add more checks to it in a follow up PR(s).\r\n\r\nWDYT?",
        "createdAt" : "2019-02-21T14:44:57Z",
        "updatedAt" : "2019-02-21T14:45:04Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      }
    ],
    "commit" : "45ed7ae05179ee4c5f5646bea9a748d07892fe3c",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +228,232 @@}\n\nfunc assertVersionStringIsEmpty(version string) error {\n\tif len(version) == 0 {\n\t\treturn errors.New(\"version string can't be empty\")"
  },
  {
    "id" : "fedbc895-c588-4f77-9419-a79f84c8d698",
    "prId" : 69366,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69366#pullrequestreview-192716611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec0f0264-3544-4215-b469-73fb46307220",
        "parentId" : null,
        "authorId" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "body" : "I think that we should deprecate/remove this flag now that kubeadm config / node annotation contains the cri to be used for this node.\r\nThis will lock down a possible failing case for updates (users passing wrong cri)",
        "createdAt" : "2018-10-05T16:36:56Z",
        "updatedAt" : "2019-01-21T14:22:20Z",
        "lastEditedBy" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "tags" : [
        ]
      },
      {
        "id" : "766b9cb6-166a-4c5a-83ad-820da1698319",
        "parentId" : "ec0f0264-3544-4215-b469-73fb46307220",
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "It actually works even now in that way, we simply need to deprecate it for apply.",
        "createdAt" : "2018-11-01T16:04:44Z",
        "updatedAt" : "2019-01-21T14:22:20Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      },
      {
        "id" : "67a888ea-a895-48ab-bb10-130b72e596a4",
        "parentId" : "ec0f0264-3544-4215-b469-73fb46307220",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "we might want to resolve previous discussion in this PR?",
        "createdAt" : "2019-01-15T15:51:25Z",
        "updatedAt" : "2019-01-21T14:22:20Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "f97770b175ffb534cccc6ce023c0b984917b0816",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +72,76 @@\t\timagePullTimeout: defaultImagePullTimeout,\n\t\tetcdUpgrade:      true,\n\t\t// Don't set criSocket to a default value here, as this will override the setting in the stored config in RunApply below.\n\t}\n"
  },
  {
    "id" : "31be9091-b5b8-4553-bebf-b4c19b0d0061",
    "prId" : 69366,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69366#pullrequestreview-196015476",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3045e8ad-2f5f-4547-8257-828259d06d5d",
        "parentId" : null,
        "authorId" : "2b9e98c2-e9ff-4145-94aa-f96ebaac4a0c",
        "body" : "Does this mean there will be no way to force a specific CRI? In that case, what would happen if users have `docker` and `crio` running at the same time?",
        "createdAt" : "2019-01-23T21:52:31Z",
        "updatedAt" : "2019-01-23T21:52:31Z",
        "lastEditedBy" : "2b9e98c2-e9ff-4145-94aa-f96ebaac4a0c",
        "tags" : [
        ]
      },
      {
        "id" : "0bbc29f0-b7b6-4597-bfd7-e2ecc2375009",
        "parentId" : "3045e8ad-2f5f-4547-8257-828259d06d5d",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "i had concerns about this myself but forgot to mention at today's office hours. :\\\r\nmaybe we still want a flag that is set to a value of \"auto\" by default.",
        "createdAt" : "2019-01-23T22:01:28Z",
        "updatedAt" : "2019-01-23T22:01:29Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "2a29a0a7-da51-4f1c-8929-1da17af9cd9f",
        "parentId" : "3045e8ad-2f5f-4547-8257-828259d06d5d",
        "authorId" : "b09c5b8f-91f1-49f0-82ac-fbdd21c638c1",
        "body" : "agree ",
        "createdAt" : "2019-01-24T07:49:38Z",
        "updatedAt" : "2019-01-24T07:49:38Z",
        "lastEditedBy" : "b09c5b8f-91f1-49f0-82ac-fbdd21c638c1",
        "tags" : [
        ]
      },
      {
        "id" : "9bd520b1-e6ff-4d65-a58d-de97623b9d63",
        "parentId" : "3045e8ad-2f5f-4547-8257-828259d06d5d",
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "This is error prone and is there only for historical reasons. It's there, because in the past we did not keep the CRI socket in the cluster on per node basis.\r\nAs long as the option is still there, you can use it, but it's now deprecated.\r\nAnyway, forcing the CRI should be done upon init/join and then leave kubeadm to use that socket for all other operations. In fact, strictly speaking, the only operations that should allow passing of CRI sockets should be init, join and reset.",
        "createdAt" : "2019-01-24T09:25:10Z",
        "updatedAt" : "2019-01-24T09:25:10Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      },
      {
        "id" : "affeef8a-f10d-4165-92bd-48a598afc1a0",
        "parentId" : "3045e8ad-2f5f-4547-8257-828259d06d5d",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "> In fact, strictly speaking, the only operations that should allow passing of CRI sockets should be init, join and reset.\r\n\r\ndo you think we should undeprecated the flag and have it with a value of \"auto\" by default?\r\n",
        "createdAt" : "2019-01-24T11:09:51Z",
        "updatedAt" : "2019-01-24T11:09:51Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "4656ebf6-bfbb-4632-b5e3-8cce94031585",
        "parentId" : "3045e8ad-2f5f-4547-8257-828259d06d5d",
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "I don't think so, it's best that this flag is removed altogether. The only thing, that users can attempt to do with this flag is to change the CRI upon upgrade. However, I don't think, that this is going to work properly and I don't think, that we should support such user story.",
        "createdAt" : "2019-01-24T12:20:08Z",
        "updatedAt" : "2019-01-24T12:20:08Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      },
      {
        "id" : "f99f1f45-5a24-45fd-9b9b-d9a5bd6948b9",
        "parentId" : "3045e8ad-2f5f-4547-8257-828259d06d5d",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "but how would we handle the scenario @inercia mentioned:\r\n> Does this mean there will be no way to force a specific CRI? In that case, what would happen if users have docker and crio running at the same time?\r\n\r\ni.e. multiple CRIs installed. how would the user pick one of the sockets?\r\n",
        "createdAt" : "2019-01-24T12:31:23Z",
        "updatedAt" : "2019-01-24T12:31:23Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "bc079f77-df4e-424d-9f86-80354fb1ad46",
        "parentId" : "3045e8ad-2f5f-4547-8257-828259d06d5d",
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "The persisted `NodeRegistrationOptions` in the cluster for this node is going to contain a CRI socket, that was setup upon init/join. Hence, no detection will be required.",
        "createdAt" : "2019-01-24T13:00:15Z",
        "updatedAt" : "2019-01-24T13:00:46Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      }
    ],
    "commit" : "f97770b175ffb534cccc6ce023c0b984917b0816",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +132,136 @@\t// The CRI socket flag is deprecated here, since it should be taken from the NodeRegistrationOptions for the current\n\t// node instead of the command line. This prevents errors by the users (such as attempts to use wrong CRI during upgrade).\n\tcmdutil.AddCRISocketFlag(cmd.Flags(), &flags.criSocket)\n\tcmd.Flags().MarkDeprecated(options.NodeCRISocket, \"This flag is deprecated. Please, avoid using it.\")\n\treturn cmd"
  },
  {
    "id" : "0873d9be-1882-4935-9f5c-0befe3a83ae6",
    "prId" : 64988,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64988#pullrequestreview-128133590",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cbd85bb-02ab-44df-8fdc-b7c2845cf360",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "i think it's best that we notify the user about the upgrade timeout in `apply` - in the lines of:\r\n`this operation will timeout in X minutes`\r\nor someone might decide to `ctrl+c` earlier thinking this has hanged.\r\n",
        "createdAt" : "2018-06-12T13:55:29Z",
        "updatedAt" : "2018-06-12T13:55:30Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "9fd46429-b578-4f72-98f8-0e13528aa186",
        "parentId" : "2cbd85bb-02ab-44df-8fdc-b7c2845cf360",
        "authorId" : "6746e0cc-0c52-4344-889b-945a672c83e3",
        "body" : "I created https://github.com/kubernetes/kubeadm/issues/914 to track this.",
        "createdAt" : "2018-06-12T20:23:57Z",
        "updatedAt" : "2018-06-12T20:23:57Z",
        "lastEditedBy" : "6746e0cc-0c52-4344-889b-945a672c83e3",
        "tags" : [
        ]
      }
    ],
    "commit" : "793a51cef0dfd9976b32936badb8f138d4d4cffa",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +43,47 @@\nconst (\n\tupgradeManifestTimeout = 5 * time.Minute\n)\n"
  },
  {
    "id" : "0a6ac25c-182b-43a3-b545-b4efb473ba2e",
    "prId" : 64822,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64822#pullrequestreview-131041709",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a9a7d26-61bb-478d-a694-b3a93e60ac6f",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "is this applying a newline (\\n) automatically?",
        "createdAt" : "2018-06-21T14:55:13Z",
        "updatedAt" : "2018-06-21T14:55:30Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "df75de81-d190-47bb-bf38-96b28e5b1b68",
        "parentId" : "3a9a7d26-61bb-478d-a694-b3a93e60ac6f",
        "authorId" : "11eef42b-8a79-461d-b901-6022644869b3",
        "body" : "Yes, it will apply a newline (\\n) automatically.",
        "createdAt" : "2018-06-22T01:20:21Z",
        "updatedAt" : "2018-06-22T01:20:21Z",
        "lastEditedBy" : "11eef42b-8a79-461d-b901-6022644869b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ba9ae30ca1e681d6b99d48cddb4cec3750411fb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +92,96 @@\t\t\t// If the version is specified in config file, pick up that value.\n\t\t\tif flags.cfgPath != \"\" {\n\t\t\t\tglog.V(1).Infof(\"fetching configuration from file %s\", flags.cfgPath)\n\t\t\t\tcfg, err := configutil.ConfigFileAndDefaultsToInternalConfig(flags.cfgPath, &kubeadmapiv1alpha2.MasterConfiguration{})\n\t\t\t\tkubeadmutil.CheckErr(err)"
  },
  {
    "id" : "37a4622c-8523-45b2-982f-df673a0a728e",
    "prId" : 62655,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62655#pullrequestreview-114928351",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e3ad654-8839-4030-a607-9705fd917d09",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "This is weird and would cause static analysis issues.  ",
        "createdAt" : "2018-04-23T16:34:22Z",
        "updatedAt" : "2018-04-24T16:00:05Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "dd01c0a7-9b1a-4f8c-a704-64dff078e4dc",
        "parentId" : "3e3ad654-8839-4030-a607-9705fd917d09",
        "authorId" : "bf66f693-b705-46d8-a378-3750b55f033c",
        "body" : "I agree that this is weird.\r\n\r\nThe trouble we ran into is that we cannot initialize the etcd client before the TLS certs are created.\r\n\r\nWe could lazy initialize the client, but that sounds buggy as well.\r\nWe could also store test interfaces in a global var and conditionally initialize them instead of passing them in as params.\r\n\r\nI'm not sure what the best way to address this is.",
        "createdAt" : "2018-04-23T18:45:35Z",
        "updatedAt" : "2018-04-24T16:00:05Z",
        "lastEditedBy" : "bf66f693-b705-46d8-a378-3750b55f033c",
        "tags" : [
        ]
      },
      {
        "id" : "9b71211b-434f-4540-9d5e-1e97c09d1ef8",
        "parentId" : "3e3ad654-8839-4030-a607-9705fd917d09",
        "authorId" : "bf66f693-b705-46d8-a378-3750b55f033c",
        "body" : "We could pass the client creation code as functions?\r\nWDYT?",
        "createdAt" : "2018-04-24T15:43:41Z",
        "updatedAt" : "2018-04-24T16:00:05Z",
        "lastEditedBy" : "bf66f693-b705-46d8-a378-3750b55f033c",
        "tags" : [
        ]
      },
      {
        "id" : "15725e29-770f-48bd-9a73-e36b85375f3f",
        "parentId" : "3e3ad654-8839-4030-a607-9705fd917d09",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "At this point let's just open an issue to follow up on some of these items.",
        "createdAt" : "2018-04-24T19:18:34Z",
        "updatedAt" : "2018-04-24T19:22:55Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "dac4fe84bbd26332452699320f8ed504c279b8a9",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +284,288 @@\n\t// These are uninitialized because passing in the clients allow for mocking the client during testing\n\tvar oldEtcdClient, newEtdClient etcdutil.Client\n\treturn upgrade.StaticPodControlPlane(waiter, pathManager, internalcfg, etcdUpgrade, oldEtcdClient, newEtdClient)\n}"
  },
  {
    "id" : "df4b94a6-2d87-4b6c-8a3f-eb09aa9feff5",
    "prId" : 56029,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/56029#pullrequestreview-77772013",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7230bad8-a16b-42a7-946c-e09ef0027860",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "You changed `The` to `the` in the similar sentence below. Please choose whether you think we should start with a capital letter or not, but be consistent in usage.",
        "createdAt" : "2017-11-20T09:50:35Z",
        "updatedAt" : "2017-11-20T12:41:20Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "524b1023-f70b-4854-8f55-ab26d7a9977c",
        "parentId" : "7230bad8-a16b-42a7-946c-e09ef0027860",
        "authorId" : "f71497cc-dd85-47eb-bbed-996bde0d13a4",
        "body" : " according to https://github.com/golang/go/wiki/CodeReviewComments#error-strings and follow up #54280.  We should not start with a capital letter. But it is just a weak error and there are so many cases, I can commit another pr to fix it.",
        "createdAt" : "2017-11-20T12:47:59Z",
        "updatedAt" : "2017-11-20T12:47:59Z",
        "lastEditedBy" : "f71497cc-dd85-47eb-bbed-996bde0d13a4",
        "tags" : [
        ]
      }
    ],
    "commit" : "3592c1be18e56c960cbc384778046d28f539f64c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +203,207 @@\n\t\tif len(versionSkewErrs.Mandatory) > 0 {\n\t\t\treturn fmt.Errorf(\"The --version argument is invalid due to these fatal errors:\\n\\n%v\\nPlease fix the misalignments highlighted above and try upgrading again\", kubeadmutil.FormatErrMsg(versionSkewErrs.Mandatory))\n\t\t}\n"
  },
  {
    "id" : "e260f111-3a9f-41c8-8874-ca12b3bbd7c6",
    "prId" : 50872,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50872#pullrequestreview-58226043",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6097ca7c-8f55-4556-9de1-8ab479b40bd6",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "The naming is weird (Interactive), b/c it's only pending on a y/n answer on apply... right?  \r\n\r\nOther options might be:\r\nrequireUserApproval",
        "createdAt" : "2017-08-23T15:30:22Z",
        "updatedAt" : "2017-08-25T14:23:44Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "1eebc3b5-3b35-4637-8501-eff2b06ed70e",
        "parentId" : "6097ca7c-8f55-4556-9de1-8ab479b40bd6",
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "unfortunately `requireUserApproval` != `nonInteractiveMode`",
        "createdAt" : "2017-08-23T21:48:11Z",
        "updatedAt" : "2017-08-25T14:23:44Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "396a33dd8fe112454652cdbf8618c8671c18c42f",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +35,39 @@// applyFlags holds the information about the flags that can be passed to apply\ntype applyFlags struct {\n\tnonInteractiveMode bool\n\tforce              bool\n\tdryRun             bool"
  },
  {
    "id" : "58452da6-4f54-4ec0-94b8-eddf2b0ddeb9",
    "prId" : 50872,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50872#pullrequestreview-58120376",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7f29b55-4554-433e-9e36-f00fe9d153e7",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Could you add the preamble here that states all the things this function does. ",
        "createdAt" : "2017-08-23T20:51:25Z",
        "updatedAt" : "2017-08-25T14:23:44Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "396a33dd8fe112454652cdbf8618c8671c18c42f",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +88,92 @@}\n\n// RunApply takes care of the actual upgrade functionality\n// It does the following things:\n// - Checks if the cluster is healthy"
  },
  {
    "id" : "defeb740-1870-4e76-ae66-02a259470056",
    "prId" : 48899,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48899#pullrequestreview-58774744",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18568e25-3ace-4ac5-8279-54c449360d01",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Is this just to speed up the process?  It doesn't seem strictly necessary. ",
        "createdAt" : "2017-08-25T19:17:35Z",
        "updatedAt" : "2017-09-03T09:29:18Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "01b11715-8f16-4e81-aa96-0b14cff7f649",
        "parentId" : "18568e25-3ace-4ac5-8279-54c449360d01",
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "It is pretty crucial for the predictability of this command; there are lots of network failures that might happen, and I want to minimize time that something can go wrong in the actual upgrade process.\r\nFor me, this is strictly necessary.\r\n\r\nRationale etc. was in the original proposal as well.",
        "createdAt" : "2017-08-25T22:12:27Z",
        "updatedAt" : "2017-09-03T09:29:18Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5756269887280f21c3d190a1b91ea232a6fcfc5",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +138,142 @@\t// Use a prepuller implementation based on creating DaemonSets\n\t// and block until all DaemonSets are ready; then we know for sure that all control plane images are cached locally\n\tprepuller := upgrade.NewDaemonSetPrepuller(upgradeVars.client, upgradeVars.waiter, internalcfg)\n\tupgrade.PrepullImagesInParallel(prepuller, flags.imagePullTimeout)\n"
  },
  {
    "id" : "eaecacf0-b1a4-4101-8e33-e42331f55cb3",
    "prId" : 48899,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48899#pullrequestreview-58810056",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f85f476c-599d-4462-8f5c-4db6de4c94b9",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "NewKubeStaticPodPathManagerUsingTempDirs <- Does it really need to be this long?  ",
        "createdAt" : "2017-08-25T20:19:50Z",
        "updatedAt" : "2017-09-03T09:29:18Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "12200b2f-e909-465f-9ab1-06187bac61bd",
        "parentId" : "f85f476c-599d-4462-8f5c-4db6de4c94b9",
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "blocking right now?\r\nDo you have a better suggestion?",
        "createdAt" : "2017-08-25T22:10:11Z",
        "updatedAt" : "2017-09-03T09:29:18Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "cd914ccc-baf7-481e-9ec3-ce9fffd476e4",
        "parentId" : "f85f476c-599d-4462-8f5c-4db6de4c94b9",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "NewKubeStaticPods  ... PathManagerUsingTempDirs seems unnecessary.",
        "createdAt" : "2017-08-26T21:38:29Z",
        "updatedAt" : "2017-09-03T09:29:18Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "6a26cadb-15ae-49c6-8904-96581c66a54a",
        "parentId" : "f85f476c-599d-4462-8f5c-4db6de4c94b9",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "For now just leave it. ",
        "createdAt" : "2017-08-26T21:39:16Z",
        "updatedAt" : "2017-09-03T09:29:18Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5756269887280f21c3d190a1b91ea232a6fcfc5",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +231,235 @@// PerformStaticPodUpgrade performs the upgrade of the control plane components for a static pod hosted cluster\nfunc PerformStaticPodUpgrade(client clientset.Interface, waiter apiclient.Waiter, internalcfg *kubeadmapi.MasterConfiguration) error {\n\tpathManager, err := upgrade.NewKubeStaticPodPathManagerUsingTempDirs(constants.GetStaticPodDirectory())\n\tif err != nil {\n\t\treturn err"
  }
]