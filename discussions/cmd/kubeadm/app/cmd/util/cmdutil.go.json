[
  {
    "id" : "5f69a547-9757-43ec-867f-d9f57cef2686",
    "prId" : 97625,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97625#pullrequestreview-561725188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "deb362c3-409c-4a92-ac12-e9a14db0ae92",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "the function should have an export comment.\r\nthe name is way to generic, but we can leave it like that for now.\r\n",
        "createdAt" : "2021-01-05T11:46:52Z",
        "updatedAt" : "2021-01-05T14:31:58Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd3a74fece115877056f2908173a780046f3c1a9",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +92,96 @@// DefaultInitConfiguration return default InitConfiguration. Avoid running the CRI auto-detection\n// code as we don't need it.\nfunc DefaultInitConfiguration() *kubeadmapiv1beta2.InitConfiguration {\n\tinitCfg := &kubeadmapiv1beta2.InitConfiguration{\n\t\tNodeRegistration: kubeadmapiv1beta2.NodeRegistrationOptions{"
  },
  {
    "id" : "63f4cadb-eb0b-498a-9e91-f4a0930add31",
    "prId" : 71874,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71874#pullrequestreview-205287626",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b10bb543-d7a3-4aba-9f81-38eb17959ed8",
        "parentId" : null,
        "authorId" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "body" : "I still find It confusing that this machinery can return path to the file that doesn't exist. Should we check it here and return an error or at least warn user somehow?",
        "createdAt" : "2019-02-16T10:26:18Z",
        "updatedAt" : "2019-02-19T15:41:25Z",
        "lastEditedBy" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "tags" : [
        ]
      },
      {
        "id" : "ff3c5d1e-b391-4355-9b99-c123317ce943",
        "parentId" : "b10bb543-d7a3-4aba-9f81-38eb17959ed8",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "this value will eventually reach a function that tries to open this file and an error will be thrown if the file is missing.\r\n",
        "createdAt" : "2019-02-16T15:37:13Z",
        "updatedAt" : "2019-02-19T15:41:25Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "f6f47b4a-31fe-42de-b4c8-233ad888cb5d",
        "parentId" : "b10bb543-d7a3-4aba-9f81-38eb17959ed8",
        "authorId" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "body" : "The point is that possible error is not handled immediately. We (intentionally?) leave error handling for future processing which may or not may happen. This is generally fragile and error prone approach in my opinion.",
        "createdAt" : "2019-02-16T16:22:44Z",
        "updatedAt" : "2019-02-19T15:41:25Z",
        "lastEditedBy" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "tags" : [
        ]
      },
      {
        "id" : "49c6ba7a-d4ea-4d87-be8c-4801df6c71c1",
        "parentId" : "b10bb543-d7a3-4aba-9f81-38eb17959ed8",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "please show examples in the source code where error handling is delayed for kubeconfig.\r\n",
        "createdAt" : "2019-02-16T16:36:03Z",
        "updatedAt" : "2019-02-19T15:41:25Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "a3a596c6-14e9-46ea-bd07-21ba4fe4dc5a",
        "parentId" : "b10bb543-d7a3-4aba-9f81-38eb17959ed8",
        "authorId" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "body" : "Sure. Almost any place where FindExistingConfig function is called, e.g. https://github.com/kubernetes/kubernetes/blob/master/cmd/kubeadm/app/cmd/alpha/certs.go#L171\r\nThe potential error (returned path to not existing config) is not processed in the FindExistingConfig function. It's left unprocessed in a hope that it will be processed in kubeconfigutil.ClientSetFromFile function.",
        "createdAt" : "2019-02-16T17:35:14Z",
        "updatedAt" : "2019-02-19T15:41:25Z",
        "lastEditedBy" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "tags" : [
        ]
      },
      {
        "id" : "ffba9b92-3099-47e9-bad1-10543db381b6",
        "parentId" : "b10bb543-d7a3-4aba-9f81-38eb17959ed8",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "and ClientSetFromFile will fail if the file is missing.\r\n\r\nthe function calls:\r\nhttps://github.com/kubernetes/kubernetes/blob/7f23a743e8c23ac6489340bbb34fa6f1d392db9d/staging/src/k8s.io/client-go/tools/auth/clientauth.go#L88\r\nwhich already has a check if a file exists.\r\n\r\nwe could add another check in FindKubeConfigFile but it would be essentially a double check for all our code.\r\n\r\nnow, if this function is user facing in a way where the user should always receive an existing file path as a \"string\" that is printed in the terminal, then it would make sense to modify this function. except that's not what we are doing in our codebase today.\r\n",
        "createdAt" : "2019-02-16T18:05:23Z",
        "updatedAt" : "2019-02-19T15:41:25Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "ee38b3ee-78a8-493d-8908-6ab92f60d5ed",
        "parentId" : "b10bb543-d7a3-4aba-9f81-38eb17959ed8",
        "authorId" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "body" : "up to you. In my opinion it would make sense to catch potential errors as soon as possible. Current code doesn't do it, leaving error processing to LoadFromFile, ClientSetFromFile, getClientset and other functions. That processing may or may not happen. I hope it happens in current Kubeadm code. However, looking at the calls of FindExistingKubeConfig in  app/cmd/upgrade/upgrade.go and a couple of similar places I would't be surprised if it doesn't happen at all.",
        "createdAt" : "2019-02-16T18:41:21Z",
        "updatedAt" : "2019-02-19T15:41:25Z",
        "lastEditedBy" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "tags" : [
        ]
      },
      {
        "id" : "7eafed61-9839-43d8-8f09-a98554ee47d4",
        "parentId" : "b10bb543-d7a3-4aba-9f81-38eb17959ed8",
        "authorId" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "body" : "@fabriziopandini, @rosti What do you guys think about this? I can explain it in more details if needed.",
        "createdAt" : "2019-02-18T12:31:27Z",
        "updatedAt" : "2019-02-19T15:41:25Z",
        "lastEditedBy" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "tags" : [
        ]
      },
      {
        "id" : "8f257363-c509-416a-8cae-8a93ece9f0f0",
        "parentId" : "b10bb543-d7a3-4aba-9f81-38eb17959ed8",
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "Depends on the use cases, which TBH, I did not check in their entirety. If we always load that file after we call this function and not do anything else with it prior to that, then we are OK. Otherwise, it will not be very safe.\r\nIf we don't need an extra check, let's not have it, but instead, we can rename the func to something, that implies getting a config file path, rather than verifying it exists. In that case words like \"find\" and \"existing\" should not be included in the function name.\r\n\r\nConsidering this, how about `s/FindKibeConfigFile/GetKubeConfigPath`?",
        "createdAt" : "2019-02-19T13:50:14Z",
        "updatedAt" : "2019-02-19T15:41:25Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      },
      {
        "id" : "ec249eb3-2ee8-4123-b30f-fed22de8ab9e",
        "parentId" : "b10bb543-d7a3-4aba-9f81-38eb17959ed8",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "the rename SGTM will update.\r\n",
        "createdAt" : "2019-02-19T14:01:28Z",
        "updatedAt" : "2019-02-19T15:41:25Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "369e39c4-c2a3-4dc6-94d3-39f962021d4c",
        "parentId" : "b10bb543-d7a3-4aba-9f81-38eb17959ed8",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "i just had a look and all calls to (the newly renamed) `GetKubeConfigPath` results in a kubeconfig string that is always passed to `ClientSetFromFile`.\r\n\r\nwhich to me confirms this:\r\n> If we always load that file after we call this function and not do anything else with it prior to that, then we are OK. Otherwise, it will not be very safe.\r\n",
        "createdAt" : "2019-02-19T15:43:49Z",
        "updatedAt" : "2019-02-19T15:43:49Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "363c778d45b72c7a37b8d22dfaf6d7f8ee237261",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +79,83 @@\tklog.V(1).Infof(\"Using kubeconfig file: %s\", file)\n\treturn file\n}\n\n// AddCRISocketFlag adds the cri-socket flag to the supplied flagSet"
  }
]