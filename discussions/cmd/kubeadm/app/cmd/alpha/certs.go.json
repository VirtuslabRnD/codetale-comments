[
  {
    "id" : "4daa2441-ba2d-4f1c-a5ee-d2004b5605c2",
    "prId" : 92183,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92183#pullrequestreview-438360995",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4915ddbb-564a-42bd-90b8-7b9d04db67ab",
        "parentId" : null,
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "I find this type to be an overkill ATM. It only substitutes a couple of separate types and I think things would be a bit more readable if it's not there.",
        "createdAt" : "2020-06-25T13:44:25Z",
        "updatedAt" : "2020-07-09T05:27:27Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      },
      {
        "id" : "495f1dc8-f569-4c04-aec1-5759f38bcd6b",
        "parentId" : "4915ddbb-564a-42bd-90b8-7b9d04db67ab",
        "authorId" : "0de88c3b-1f1a-401f-9fd1-cd63adc590fd",
        "body" : "+1",
        "createdAt" : "2020-06-26T14:41:43Z",
        "updatedAt" : "2020-07-09T05:27:27Z",
        "lastEditedBy" : "0de88c3b-1f1a-401f-9fd1-cd63adc590fd",
        "tags" : [
        ]
      },
      {
        "id" : "f5fb98fe-8428-48ec-874c-af47e693ba36",
        "parentId" : "4915ddbb-564a-42bd-90b8-7b9d04db67ab",
        "authorId" : "8066ee2f-0c16-437d-9b9a-d0d19725550e",
        "body" : "Done.",
        "createdAt" : "2020-06-26T14:51:13Z",
        "updatedAt" : "2020-07-09T05:27:27Z",
        "lastEditedBy" : "8066ee2f-0c16-437d-9b9a-d0d19725550e",
        "tags" : [
        ]
      }
    ],
    "commit" : "81554ffdc0b66c98905a2800e078205eb87f4a72",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +107,111 @@\n// genCSRConfig is the configuration required by the gencsr command\ntype genCSRConfig struct {\n\tkubeadmConfigPath string\n\tcertDir           string"
  },
  {
    "id" : "3267b293-c0b2-4e03-a2cf-a8fcafd256c9",
    "prId" : 92183,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92183#pullrequestreview-443937998",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9748dd8-7c73-4883-a972-88498186e2c1",
        "parentId" : null,
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "Is this command supposed to be invoked without a config file? If that's the case, then we may have to introduce the rest of the config command line flags here.",
        "createdAt" : "2020-06-29T14:11:44Z",
        "updatedAt" : "2020-07-09T05:27:27Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      },
      {
        "id" : "9a573750-4d68-46f4-96ae-556b5896a648",
        "parentId" : "b9748dd8-7c73-4883-a972-88498186e2c1",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "@wallrj should correct me here, but i think if the user is setting custom SANs under ClusterConfiguration, then the new command should be aware of the --config.",
        "createdAt" : "2020-06-29T14:51:58Z",
        "updatedAt" : "2020-07-09T05:27:27Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "276ce2e2-b904-4405-abce-7ccd7316dde4",
        "parentId" : "b9748dd8-7c73-4883-a972-88498186e2c1",
        "authorId" : "8066ee2f-0c16-437d-9b9a-d0d19725550e",
        "body" : "I'd need to add some of the other flags that are currently supported by `kubectl init phase certs all`\r\n\r\n```\r\n_output/bin/kubeadm init phase certs all --help\r\nGenerate all certificates\r\n\r\nUsage:\r\n  kubeadm init phase certs all [flags]\r\n\r\nFlags:\r\n      --apiserver-advertise-address string   The IP address the API Server will advertise it's listening on. If not set the default network interface will be used.\r\n      --apiserver-cert-extra-sans strings    Optional extra Subject Alternative Names (SANs) to use for the API Server serving certificate. Can be both IP addresses and DNS names.\r\n      --cert-dir string                      The path where to save and store the certificates. (default \"/etc/kubernetes/pki\")\r\n      --config string                        Path to a kubeadm configuration file.\r\n      --control-plane-endpoint string        Specify a stable IP address or DNS name for the control plane.\r\n  -h, --help                                 help for all\r\n      --kubernetes-version string            Choose a specific Kubernetes version for the control plane. (default \"stable-1\")\r\n      --service-cidr string                  Use alternative range of IP address for service VIPs. (default \"10.96.0.0/12\")\r\n      --service-dns-domain string            Use alternative domain for services, e.g. \"myorg.internal\". (default \"cluster.local\")\r\n\r\n\r\n```\r\n\r\n* `--api-server-cert-extra-sans`  https://github.com/kubernetes/kubernetes/blob/c5941e283fd7e37e953832d6743e7ea3b556ab7a/cmd/kubeadm/app/cmd/init.go#L248-L251 \r\n\r\nOr I could require that the user supplies a kubeadm config file and puts all those settings in there.\r\n\r\n",
        "createdAt" : "2020-06-30T15:29:52Z",
        "updatedAt" : "2020-07-09T05:27:27Z",
        "lastEditedBy" : "8066ee2f-0c16-437d-9b9a-d0d19725550e",
        "tags" : [
        ]
      },
      {
        "id" : "da50f49a-f225-459a-ad14-39d9e361160e",
        "parentId" : "b9748dd8-7c73-4883-a972-88498186e2c1",
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "I think, that we can start simple and require a config file for now. If many users start complaining we can add these extra options.",
        "createdAt" : "2020-07-01T14:12:07Z",
        "updatedAt" : "2020-07-09T05:27:27Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      },
      {
        "id" : "f5ec68bd-d60b-483a-ac61-ea2d5adad6df",
        "parentId" : "b9748dd8-7c73-4883-a972-88498186e2c1",
        "authorId" : "8066ee2f-0c16-437d-9b9a-d0d19725550e",
        "body" : "As discussed  in office hours meeting last week, I have not added the extra command line options.\r\nThe `--config` flag is optional. If  not supplied, the Kubeadm config will be dynamically generated based on local machine settings.\r\n",
        "createdAt" : "2020-07-07T14:24:03Z",
        "updatedAt" : "2020-07-09T05:27:27Z",
        "lastEditedBy" : "8066ee2f-0c16-437d-9b9a-d0d19725550e",
        "tags" : [
        ]
      }
    ],
    "commit" : "81554ffdc0b66c98905a2800e078205eb87f4a72",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +132,136 @@// are encoded in the control-plane CSRs.\nfunc (o *genCSRConfig) load() (err error) {\n\to.kubeadmConfig, err = configutil.LoadOrDefaultInitConfiguration(\n\t\to.kubeadmConfigPath,\n\t\t&kubeadmapiv1beta2.InitConfiguration{},"
  },
  {
    "id" : "1ddcc57d-9ed7-4523-a362-115849626b3f",
    "prId" : 92183,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92183#pullrequestreview-444016861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcf6ebc4-89ce-43c7-b651-495d8706a06f",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "```\r\nif err := config.load(); err != nil {\r\n\treturn err\r\n}\r\n```",
        "createdAt" : "2020-07-07T15:41:09Z",
        "updatedAt" : "2020-07-09T05:27:27Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "81554ffdc0b66c98905a2800e078205eb87f4a72",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +160,164 @@\t\t\tif err := config.load(); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn runGenCSR(config)\n\t\t},"
  },
  {
    "id" : "3e2e7cf6-4671-4925-aa45-d74df5d29393",
    "prId" : 91980,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91980#pullrequestreview-428193100",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8521638-caa7-4774-bec9-f396ed9dcfa9",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "> Component configs are used by kubeadm upgrade plan at the moment. However, they\r\ncan prevent kubeadm upgrade plan from functioning if loading of an unsupported\r\nversion of a component config is attempted. For that matter it's best to just\r\nstop loading component configs as part of the kubeadm config load process.\r\n\r\ndoes this also mean users will stop seeing the klog warning about kubeadm not being able to perform validation on component config during the execution on a number of commands?\r\n",
        "createdAt" : "2020-06-10T13:56:41Z",
        "updatedAt" : "2020-06-22T13:30:12Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "3d3ba9a8-447f-4b7e-a9b1-8f0def5fce37",
        "parentId" : "d8521638-caa7-4774-bec9-f396ed9dcfa9",
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "No, this is covering only the current state of `upgrade plan`. So the warning won't be visible now.\r\nHowever, a different form of loading the configs (to generate the component config state table in `upgrade plan`) will reintroduce the warning.\r\n\r\nThis is a noisy one and given the fact, that the KEP for component config validation is stale ATM, I am in favor of removing it for now. Possibly to be reintroduced for non validated configs after at least one of the used component configs becomes validated some time in the future.",
        "createdAt" : "2020-06-10T14:44:38Z",
        "updatedAt" : "2020-06-22T13:30:12Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      },
      {
        "id" : "e461aca1-2ff2-4266-99e6-09723b802294",
        "parentId" : "d8521638-caa7-4774-bec9-f396ed9dcfa9",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "let's leave it for now unless we see more complains.",
        "createdAt" : "2020-06-10T15:47:56Z",
        "updatedAt" : "2020-06-22T13:30:12Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d2d15ee033a55767dfb84261940f719a963b446",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +255,259 @@\t\tclient, err := kubeconfigutil.ClientSetFromFile(kubeconfigPath)\n\t\tif err == nil {\n\t\t\tinternalcfg, err := configutil.FetchInitConfigurationFromCluster(client, out, logPrefix, false, false)\n\t\t\tif err == nil {\n\t\t\t\tfmt.Println() // add empty line to separate the FetchInitConfigurationFromCluster output from the command output"
  },
  {
    "id" : "ce684c09-ddb5-4316-b186-91e9c783f393",
    "prId" : 85091,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85091#pullrequestreview-315399723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a717039b-802d-4b16-bf8c-b5fadb18e7a3",
        "parentId" : null,
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "We may end up using defaulted config in case we cannot connect to an API server or something else happens here.",
        "createdAt" : "2019-11-11T15:25:28Z",
        "updatedAt" : "2019-11-12T09:35:56Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      },
      {
        "id" : "772293c7-e400-493a-8016-332b99d68cf9",
        "parentId" : "a717039b-802d-4b16-bf8c-b5fadb18e7a3",
        "authorId" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "body" : "yes, this is intentional.\r\nThe command works at \"best-effort\"; in case something goes wrong the user gets a warning but the command goes on",
        "createdAt" : "2019-11-12T09:38:20Z",
        "updatedAt" : "2019-11-12T09:38:21Z",
        "lastEditedBy" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "tags" : [
        ]
      }
    ],
    "commit" : "a372dff6488a946a4f5b239878221ba7cb8d3278",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +264,268 @@\t\tclient, err := kubeconfigutil.ClientSetFromFile(kubeconfigPath)\n\t\tif err == nil {\n\t\t\tinternalcfg, err := configutil.FetchInitConfigurationFromCluster(client, out, logPrefix, false)\n\t\t\tif err == nil {\n\t\t\t\tfmt.Println() // add empty line to separate the FetchInitConfigurationFromCluster output from the command output"
  },
  {
    "id" : "7bf6bc5c-1d14-4a09-9ba0-5772deb02ff4",
    "prId" : 79267,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79267#pullrequestreview-253100238",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "209acb27-0d05-4918-9543-fa94fc13dac2",
        "parentId" : null,
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "Wait... This is not the only place for changes.\r\n\r\nSince 1.15 is out, `ExperimentalUploadCerts` can be safely removed in next release and using `UploadCerts` instead.",
        "createdAt" : "2019-06-21T10:21:17Z",
        "updatedAt" : "2019-06-21T10:23:06Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      },
      {
        "id" : "0aee701a-6acb-4071-b00d-92688b0ce8f5",
        "parentId" : "209acb27-0d05-4918-9543-fa94fc13dac2",
        "authorId" : "e7b8fd7e-f93b-44b6-b6d0-4331207d901c",
        "body" : "Thanks @dixudx  \r\nI'll clean it up later.",
        "createdAt" : "2019-06-22T13:10:50Z",
        "updatedAt" : "2019-06-22T13:10:50Z",
        "lastEditedBy" : "e7b8fd7e-f93b-44b6-b6d0-4331207d901c",
        "tags" : [
        ]
      },
      {
        "id" : "b45726c9-338c-4ea5-87a4-9c892b09c4cd",
        "parentId" : "209acb27-0d05-4918-9543-fa94fc13dac2",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "this line should have been fixed for 1.15, but we shouldn't backport non critical fixes, and `--experimental-upload-certs` still works there.\r\nfor 1.16 (master) this is OK.\r\n",
        "createdAt" : "2019-06-22T16:16:12Z",
        "updatedAt" : "2019-06-22T16:16:38Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b4dbe6e301cc12a9250663f026361143ffa5d1d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +69,73 @@\tthe \"init\" command.\n\n\tYou can also use \"kubeadm init --upload-certs\" without specifying a certificate key and it will\n\tgenerate and print one for you.\n`)"
  },
  {
    "id" : "4a0d3549-a4f6-48e7-b5e8-faeb657effa2",
    "prId" : 77780,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77780#pullrequestreview-236390075",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65389fad-527b-47e0-9490-77382c906563",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "this made me remember reviewing the implementation in the original PR.\r\nbut the refactor is clearly out of scope here.\r\n",
        "createdAt" : "2019-05-11T19:43:38Z",
        "updatedAt" : "2019-05-15T09:15:27Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c897874bfbf92bc009a7b734e90cc1b05e90811",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +122,126 @@\t\t// get the implementation of renewing this certificate\n\t\trenewalFunc := func(handler *renewal.CertificateRenewHandler) func() {\n\t\t\treturn func() { renewCert(flags, kdir, handler) }\n\t\t}(handler)\n\t\t// install the implementation into the command"
  },
  {
    "id" : "a45818c7-a97e-4f85-a527-de6fc4da9fd6",
    "prId" : 70551,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70551#pullrequestreview-171246557",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f946552-3106-4ff4-93d0-9421c74d39f5",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "could generateRenewalFunction() return a function with the `func(*cobra.Command, []string)` signature?\r\n",
        "createdAt" : "2018-11-02T19:47:44Z",
        "updatedAt" : "2018-11-02T19:48:56Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "adf9d7a031acc48bb1f83f5965f1386b4452ae45",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +100,104 @@\t\t\trenewalFunc := generateRenewalFunction(cert, caCert, cfg)\n\t\t\t// install the implementation into the command\n\t\t\tcmd.Run = func(*cobra.Command, []string) { renewalFunc() }\n\t\t\tcmdList = append(cmdList, cmd)\n\t\t\t// Collect renewal functions for `renew all`"
  }
]