[
  {
    "id" : "a7870c81-77e9-418e-b074-14146df63adc",
    "prId" : 56084,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/56084#pullrequestreview-85762351",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63fc5f40-70b0-47b7-9248-a6129f2e3611",
        "parentId" : null,
        "authorId" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "body" : "@andrewsykim in the static pod manifest for `kube-apiserver`, the advertise address is used for a liveness probe. e.g.\r\n```yaml\r\nlivenessProbe:\r\n      failureThreshold: 8\r\n      httpGet:\r\n        host: {AdvertiseAddress}\r\n        path: /healthz\r\n        port: 6443\r\n        scheme: HTTPS\r\n      initialDelaySeconds: 15\r\n      timeoutSeconds: 15\r\n```\r\nIf this is preserved in the selfhosted daemonset (I'm not 100% sure), we should mutate this as well.\r\n",
        "createdAt" : "2017-12-27T14:01:14Z",
        "updatedAt" : "2017-12-27T14:01:15Z",
        "lastEditedBy" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "tags" : [
        ]
      },
      {
        "id" : "8cade689-d0f3-4e82-8162-d0eda77b09d7",
        "parentId" : "63fc5f40-70b0-47b7-9248-a6129f2e3611",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Good catch! Let me look into this!",
        "createdAt" : "2017-12-27T18:15:30Z",
        "updatedAt" : "2017-12-27T18:15:30Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "f62e7e3f-21bf-4c0f-8b7c-8d9bc149f915",
        "parentId" : "63fc5f40-70b0-47b7-9248-a6129f2e3611",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "The advertise address passed in is preserved when using self hosted which is now the wrong behaviour since it should match whatever is set via downward API. Anyone know if it's possible to use downward API in a liveness probe? Alternatively we can let it default to localhost (which is the current behaviour if you do not set advertise address). ",
        "createdAt" : "2017-12-27T18:28:52Z",
        "updatedAt" : "2017-12-27T18:28:53Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "586d6670-9e71-4be0-8af2-e635be227a47",
        "parentId" : "63fc5f40-70b0-47b7-9248-a6129f2e3611",
        "authorId" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "body" : "IMO we can use 127.0.0.1 (I guess it is not possible to use downward API in a liveness probe)\r\n@luxas @xiangpengzhao WDYT?",
        "createdAt" : "2017-12-27T21:23:12Z",
        "updatedAt" : "2017-12-27T21:23:12Z",
        "lastEditedBy" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "tags" : [
        ]
      },
      {
        "id" : "15edfc15-d0c4-4b4d-8014-7a50f89cc626",
        "parentId" : "63fc5f40-70b0-47b7-9248-a6129f2e3611",
        "authorId" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "body" : "127.0.0.1 SGTM. In kubemark, it also uses 127.0.0.1 for api-server probe. So I think it's ok to use it here as well.\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/de2aec31d9272d18cfef9d38ad1ae42160e2faa5/test/kubemark/resources/manifests/kube-apiserver.yaml#L21-L28\r\n\r\nOTOH, we can leave this field empty. If so, it will default to `PodIP`. And yeah, as was discussed in https://github.com/kubernetes/kubernetes/pull/56084#discussion_r152388796,  `PodIP == HostIP` in our case.\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/de2aec31d9272d18cfef9d38ad1ae42160e2faa5/pkg/kubelet/prober/prober.go#L156-L159",
        "createdAt" : "2017-12-28T03:38:17Z",
        "updatedAt" : "2017-12-28T03:38:17Z",
        "lastEditedBy" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "tags" : [
        ]
      }
    ],
    "commit" : "49e01b05e7791d8bbb4863f83c0b2f420cec73ab",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +122,126 @@\t\t}\n\t}\n}\n\n// setRightDNSPolicyOnPodSpec makes sure the self-hosted components can look up things via kube-dns if necessary"
  },
  {
    "id" : "a953d3a3-bf65-49b2-8a5f-3ba4534c930d",
    "prId" : 50766,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50766#pullrequestreview-57375480",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "943a7062-36db-4ca9-a3b1-87cd975f12dc",
        "parentId" : null,
        "authorId" : "19c6d4c2-ebee-46fd-8427-5a6ae5c98a9d",
        "body" : "I would like to see this `argMap` function eventually defined as a type since it it used in multiple places.",
        "createdAt" : "2017-08-20T15:43:26Z",
        "updatedAt" : "2017-08-20T15:56:06Z",
        "lastEditedBy" : "19c6d4c2-ebee-46fd-8427-5a6ae5c98a9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2e08fd739fae0c4deea0d1a7bd7fb61d51689c4",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +121,125 @@\t// This is not a problem with hostPath mounts as hostPath supports mounting one file only, instead of always a full directory. Secrets and Projected Volumes\n\t// don't support that.\n\tpodSpec.Containers[0].Command = kubeadmutil.ReplaceArgument(podSpec.Containers[0].Command, func(argMap map[string]string) map[string]string {\n\t\targMap[\"kubeconfig\"] = filepath.Join(selfHostedKubeConfigDir, kubeadmconstants.ControllerManagerKubeConfigFileName)\n\t\treturn argMap"
  },
  {
    "id" : "c2b669fc-cba1-4cd8-9762-0c5c1fba5887",
    "prId" : 47435,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47435#pullrequestreview-48074350",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77a218a4-d50b-49df-88ad-1dc808f79689",
        "parentId" : null,
        "authorId" : "bdc500eb-fd23-4d89-81ce-2986aa831dfa",
        "body" : "For self-hosted etcd we'll also need to modify the podSpec `command` (mainly the apiserver). I assume we can pass in the additional flags which either overwrite or append to the existing one.",
        "createdAt" : "2017-07-05T10:26:19Z",
        "updatedAt" : "2017-07-06T17:55:06Z",
        "lastEditedBy" : "bdc500eb-fd23-4d89-81ce-2986aa831dfa",
        "tags" : [
        ]
      },
      {
        "id" : "fad08ff5-4d01-4679-a76b-50af38e2860e",
        "parentId" : "77a218a4-d50b-49df-88ad-1dc808f79689",
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "Yes. I have coded some methods for modifying `.command` but didn't include that in this PR for easier reviewing\r\n",
        "createdAt" : "2017-07-05T14:43:21Z",
        "updatedAt" : "2017-07-06T17:55:06Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f1c5a6f0f86651b651a07d57dfba6a6779d4eb7",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +40,44 @@\t\t\tsetRightDNSPolicyOnPodSpec,\n\t\t},\n\t}\n\n\t// Get the mutator functions for the component in question, then loop through and execute them"
  },
  {
    "id" : "5e7536fe-09bc-4f66-a05b-4b1266506e48",
    "prId" : 47435,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47435#pullrequestreview-47998362",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1083d01b-6de6-4a4e-a12d-3bfca3127f78",
        "parentId" : null,
        "authorId" : "bdc500eb-fd23-4d89-81ce-2986aa831dfa",
        "body" : "👍  Really like this composable way of mutating the original podSpec",
        "createdAt" : "2017-07-05T10:26:35Z",
        "updatedAt" : "2017-07-06T17:55:06Z",
        "lastEditedBy" : "bdc500eb-fd23-4d89-81ce-2986aa831dfa",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f1c5a6f0f86651b651a07d57dfba6a6779d4eb7",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +50,54 @@\n// addNodeSelectorToPodSpec makes Pod require to be scheduled on a node marked with the master label\nfunc addNodeSelectorToPodSpec(podSpec *v1.PodSpec) {\n\tif podSpec.NodeSelector == nil {\n\t\tpodSpec.NodeSelector = map[string]string{kubeadmconstants.LabelNodeRoleMaster: \"\"}"
  },
  {
    "id" : "c99c4d96-8ca7-4112-a2c2-d07012d59a80",
    "prId" : 47435,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47435#pullrequestreview-48082751",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38702ff1-4811-4612-9c6f-61da0df8395f",
        "parentId" : null,
        "authorId" : "bdc500eb-fd23-4d89-81ce-2986aa831dfa",
        "body" : "Do the self-hosted scheduler and controller manager really need to be on the host network? I think we should only use it when absolutely necessary because it uses up port space unnecessarily. If not, can we add a new mutator?",
        "createdAt" : "2017-07-05T10:29:12Z",
        "updatedAt" : "2017-07-06T17:55:06Z",
        "lastEditedBy" : "bdc500eb-fd23-4d89-81ce-2986aa831dfa",
        "tags" : [
        ]
      },
      {
        "id" : "39cf5b02-beb2-40d7-b8a4-81c2580b871a",
        "parentId" : "38702ff1-4811-4612-9c6f-61da0df8395f",
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "> Do the self-hosted scheduler and controller manager really need to be on the host network\r\n\r\nYes they do, since there is no Pod Network available\r\n\r\n> If not, can we add a new mutator?\r\n\r\nI can add one to ensure `hostNetwork=true`",
        "createdAt" : "2017-07-05T14:44:25Z",
        "updatedAt" : "2017-07-06T17:55:06Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "62407dc1-cf23-4bb8-9ff6-254fa90abc24",
        "parentId" : "38702ff1-4811-4612-9c6f-61da0df8395f",
        "authorId" : "bdc500eb-fd23-4d89-81ce-2986aa831dfa",
        "body" : "Really? I thought pod IPs were addressable without a SDN. I got it working without flannel or anything. Maybe we can shelve this for now then",
        "createdAt" : "2017-07-05T15:08:19Z",
        "updatedAt" : "2017-07-06T17:55:06Z",
        "lastEditedBy" : "bdc500eb-fd23-4d89-81ce-2986aa831dfa",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f1c5a6f0f86651b651a07d57dfba6a6779d4eb7",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +58,62 @@\tpodSpec.NodeSelector[kubeadmconstants.LabelNodeRoleMaster] = \"\"\n}\n\n// setMasterTolerationOnPodSpec makes the Pod tolerate the master taint\nfunc setMasterTolerationOnPodSpec(podSpec *v1.PodSpec) {"
  },
  {
    "id" : "03b41344-6de6-4562-821d-ac9499e939c9",
    "prId" : 47435,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47435#pullrequestreview-48204264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2681b04-1d9e-4b88-94c1-77b345edca49",
        "parentId" : null,
        "authorId" : "bdc500eb-fd23-4d89-81ce-2986aa831dfa",
        "body" : "I noticed bootkube's [self-hosted controller manager](https://github.com/kubernetes-incubator/bootkube/blob/master/pkg/asset/internal/templates.go#L495) uses `Default` as the DNS policy. @aaronlevy is there any reason for that? Just want to make sure there's no corner cases we're forgetting about.",
        "createdAt" : "2017-07-05T10:46:02Z",
        "updatedAt" : "2017-07-06T17:55:06Z",
        "lastEditedBy" : "bdc500eb-fd23-4d89-81ce-2986aa831dfa",
        "tags" : [
        ]
      },
      {
        "id" : "ce8d616c-27cb-41ed-9f0c-67b032558b1a",
        "parentId" : "e2681b04-1d9e-4b88-94c1-77b345edca49",
        "authorId" : "b04ab4f5-5d69-4d32-9c1b-fecc0eb76d11",
        "body" : "Looking back at the git blame I believe it had to do with the controller-manager needing to use the dns of the host when cloud-providers were enabled (for example, aws hostnames won't resolve unless you're using the host defined dns server). And at that time `DNSClusterFirstWithHostNet` didn't exist -- but seems like a more reasonable choice now (opened a PR to change in bootkube: https://github.com/kubernetes-incubator/bootkube/pull/629) ",
        "createdAt" : "2017-07-05T23:31:41Z",
        "updatedAt" : "2017-07-06T17:55:06Z",
        "lastEditedBy" : "b04ab4f5-5d69-4d32-9c1b-fecc0eb76d11",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f1c5a6f0f86651b651a07d57dfba6a6779d4eb7",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@\t\t\taddNodeSelectorToPodSpec,\n\t\t\tsetMasterTolerationOnPodSpec,\n\t\t\tsetRightDNSPolicyOnPodSpec,\n\t\t},\n\t\tkubeScheduler: {"
  },
  {
    "id" : "a248b539-2d04-4b65-9735-5d494936f8aa",
    "prId" : 42548,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42548#pullrequestreview-48610964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3a1ac8e-8ca6-4e87-a278-3fd094e2624f",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "I'm sorry but I really dislike this. I know it's the only solution right now though so I'm letting this follow as a TODO\r\n\r\nWe should scope down things and pass a struct only with the minimal required information instead of passing everything. Now it's not clear to the reviewer/reader/coder what of these fields actually are being used...\r\n\r\nBut TODO; needs lots of other changes in the code as well, so out-of-scope for this PR.",
        "createdAt" : "2017-07-07T07:44:49Z",
        "updatedAt" : "2017-07-07T07:49:12Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "a0c835c4-9bc5-4de6-ad89-89887513d403",
        "parentId" : "b3a1ac8e-8ca6-4e87-a278-3fd094e2624f",
        "authorId" : "19c6d4c2-ebee-46fd-8427-5a6ae5c98a9d",
        "body" : "Totally agree here. This felt very ugly as I was writing it, but was the only way to get that information to where it needed to go.",
        "createdAt" : "2017-07-07T13:50:54Z",
        "updatedAt" : "2017-07-07T13:50:54Z",
        "lastEditedBy" : "19c6d4c2-ebee-46fd-8427-5a6ae5c98a9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "38c6e83033c7ad2c2cda61acb320c3398064be1f",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +24,28 @@\n// mutatePodSpec makes a Static Pod-hosted PodSpec suitable for self-hosting\nfunc mutatePodSpec(cfg *kubeadmapi.MasterConfiguration, name string, podSpec *v1.PodSpec) {\n\tmutators := map[string][]func(*kubeadmapi.MasterConfiguration, *v1.PodSpec){\n\t\tkubeAPIServer: {"
  }
]