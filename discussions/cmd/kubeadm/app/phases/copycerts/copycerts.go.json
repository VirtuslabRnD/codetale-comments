[
  {
    "id" : "b99dad21-1c9e-407d-b020-7d7c21a40d4d",
    "prId" : 81447,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81447#pullrequestreview-275260449",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "104f2110-7a48-4534-936f-30442317b2b3",
        "parentId" : null,
        "authorId" : "350ae9b6-b3b1-4ba1-a475-a78423f119d0",
        "body" : "If err is nil, it'll short circuit. So there is no need to check for `err != nil`",
        "createdAt" : "2019-08-15T04:55:36Z",
        "updatedAt" : "2019-08-15T04:55:37Z",
        "lastEditedBy" : "350ae9b6-b3b1-4ba1-a475-a78423f119d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "6df4f62d1c984003c7e578b4d73fa4c2001b4237",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +205,209 @@\tfor certName, certPath := range certsToTransfer(cfg) {\n\t\tcert, err := loadAndEncryptCert(certPath, key)\n\t\tif err == nil || os.IsNotExist(err) {\n\t\t\tsecretData[certOrKeyNameToSecretName(certName)] = cert\n\t\t} else {"
  },
  {
    "id" : "dc73bfe1-2502-43d7-b2d4-e69419dfefd8",
    "prId" : 79267,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79267#pullrequestreview-253100308",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd20f298-fd7b-4ff7-ba9d-044c25af0abb",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : ":+1: ",
        "createdAt" : "2019-06-22T16:18:38Z",
        "updatedAt" : "2019-06-22T16:18:38Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b4dbe6e301cc12a9250663f026361143ffa5d1d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +263,267 @@\tif err != nil {\n\t\tif apierrors.IsNotFound(err) {\n\t\t\treturn nil, errors.Errorf(\"Secret %q was not found in the %q Namespace. This Secret might have expired. Please, run `kubeadm init phase upload-certs --upload-certs` on a control plane to generate a new one\", kubeadmconstants.KubeadmCertsSecret, metav1.NamespaceSystem)\n\t\t}\n\t\treturn nil, err"
  },
  {
    "id" : "32d08515-8126-48d6-a4ec-76c87cf8e91d",
    "prId" : 77768,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77768#pullrequestreview-236375259",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0969e3c6-3428-4b20-be26-329e9bd2eba6",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "isn't this sufficient?\r\n`return errors.Wrap(err, \"error decoding certificate key\")`\r\nthe error should bubble up and be printed.\r\n\r\ni think with this change it will be printed 2times - once with klog once from cobra.\r\n",
        "createdAt" : "2019-05-11T12:22:39Z",
        "updatedAt" : "2019-05-12T21:26:25Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "54a308bdd7cc10ff5ea98bf081280940c3dfb1a6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +90,94 @@\tdecodedKey, err := hex.DecodeString(key)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"error decoding certificate key\")\n\t}\n\ttokenID, err := createShortLivedBootstrapToken(client)"
  },
  {
    "id" : "9ada35fa-a03e-474a-bfa4-c814cda3be09",
    "prId" : 74168,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74168#pullrequestreview-207973168",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2bdbc55-7312-4fb1-95ae-5a2b0ae1a4a4",
        "parentId" : null,
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "We need more unit tests here. Especially on this one.",
        "createdAt" : "2019-02-26T12:20:35Z",
        "updatedAt" : "2019-02-26T21:00:22Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      },
      {
        "id" : "4a267ef1-43ec-46d7-be1b-0f5c9efc7ca1",
        "parentId" : "b2bdbc55-7312-4fb1-95ae-5a2b0ae1a4a4",
        "authorId" : "67bc6085-2cd9-4674-9dbc-d2a266f478be",
        "body" : "Yeah, is on the description of the PR. I was wondering if we can go with this one as it is (after rebase and fixing your other comments), and I will create a follow up PR with unit tests for this, I just don't want to risk the deadline, and unit tests for an existing feature can span the 7th March deadline. WDYT?",
        "createdAt" : "2019-02-26T12:26:45Z",
        "updatedAt" : "2019-02-26T21:00:22Z",
        "lastEditedBy" : "67bc6085-2cd9-4674-9dbc-d2a266f478be",
        "tags" : [
        ]
      },
      {
        "id" : "9d663df3-ad48-49ff-a0ed-8d2cec0c06bc",
        "parentId" : "b2bdbc55-7312-4fb1-95ae-5a2b0ae1a4a4",
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "Yeah, I am fine with this. Ping me, when you rebase it, for lgtm.",
        "createdAt" : "2019-02-26T14:08:48Z",
        "updatedAt" : "2019-02-26T21:00:22Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      }
    ],
    "commit" : "d30b14d5866eb6a16753530c63deab6820a32edf",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +209,213 @@\n// DownloadCerts downloads the certificates needed to join a new control plane.\nfunc DownloadCerts(client clientset.Interface, cfg *kubeadmapi.InitConfiguration, key string) error {\n\tfmt.Printf(\"[download-certs] downloading the certificates in Secret %q in the %q Namespace\\n\", kubeadmconstants.KubeadmCertsSecret, metav1.NamespaceSystem)\n"
  }
]