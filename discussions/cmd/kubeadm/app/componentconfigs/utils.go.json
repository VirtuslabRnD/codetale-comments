[
  {
    "id" : "4e8cd6a9-87b0-43b1-a494-6cd08014b420",
    "prId" : 86070,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86070#pullrequestreview-357431811",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab6d39a0-b9bb-4e33-bdda-86aa97a558f8",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "i guess if a component ends up with multiple Kinds for a GroupVersion (future kube-proxy?) one way to indicate what Kind caused the error would be to look at the Document bytes.\r\n",
        "createdAt" : "2020-02-11T15:38:22Z",
        "updatedAt" : "2020-06-01T14:58:16Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "a54cceb6-e3c7-4aba-a729-dae9f5d9f65a",
        "parentId" : "ab6d39a0-b9bb-4e33-bdda-86aa97a558f8",
        "authorId" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "body" : "Yep. That's why the yaml slice is there. However, the error message would become too complicated if that was to be dumped here. Instead, those document bytes can be dumped on a higher level upon recognizing this error and with a better UX in mind.",
        "createdAt" : "2020-02-12T13:01:42Z",
        "updatedAt" : "2020-06-01T14:58:16Z",
        "lastEditedBy" : "cccc7bed-95f4-42a9-83ef-6ba1a4dca7ec",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d6cf8ecd486464ba5c18d7ff389ebd8597c36c2",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +38,42 @@// Error implements the standard Golang error interface for UnsupportedConfigVersionError\nfunc (err *UnsupportedConfigVersionError) Error() string {\n\treturn fmt.Sprintf(\"unsupported apiVersion %q, you may have to do manual conversion to %q and run kubeadm again\", err.OldVersion, err.CurrentVersion)\n}\n"
  }
]