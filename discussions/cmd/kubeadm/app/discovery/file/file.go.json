[
  {
    "id" : "6bb21ec7-7c65-4a2b-b104-5cf19cb37a55",
    "prId" : 80675,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80675#pullrequestreview-267832831",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "588b9d9e-4155-43e4-9ee4-44774f40f0a8",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "can the logic here reach a case where `HasAuthenticationCredentials()` returns `true` for a token in the kubeconfig, but then we want to load the certs on disk into the file?\r\n",
        "createdAt" : "2019-07-28T20:20:03Z",
        "updatedAt" : "2019-07-29T08:48:50Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "a7e58c5c-4c0b-4ebe-9009-59f5c9b587f3",
        "parentId" : "588b9d9e-4155-43e4-9ee4-44774f40f0a8",
        "authorId" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "body" : "kubeconfig is validated before this call, and this ensures only one authentication method is configured. Nevertheless, if in the future this `HasAuthenticationCredentials` it will be called somewhere else, I don't see problems because this function and `EnsureAuthenticationInfoAreEmbedded` have clearly separated scope",
        "createdAt" : "2019-07-29T08:54:01Z",
        "updatedAt" : "2019-07-29T08:54:01Z",
        "lastEditedBy" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "tags" : [
        ]
      },
      {
        "id" : "a75f310b-8c25-48b0-8462-4596e483e616",
        "parentId" : "588b9d9e-4155-43e4-9ee4-44774f40f0a8",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "i guess in the case that i'm talking about the function `EnsureAuthenticationInfoAreEmbedded()` will fail with an `ioutil.ReadFile(authInfo.ClientCertificate)` error.\r\n\r\nif the user has provided a kubeconfig with a CA and token it will pass the `HasAuthenticationCredentials` check, but then fail the `EnsureAuthenticationInfoAreEmbedded` check because the kubeconfig does not have client cert/key. so it seems to me this case is unsupported.\r\n\r\ni think if `EnsureAuthenticationInfoAreEmbedded` fails here we should validate the token in the kubeconfig and only then exit the branch with an error.\r\n",
        "createdAt" : "2019-07-29T12:47:53Z",
        "updatedAt" : "2019-07-29T12:47:53Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "3496a3ae-b575-4915-a136-c76b4946a330",
        "parentId" : "588b9d9e-4155-43e4-9ee4-44774f40f0a8",
        "authorId" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "body" : "Clarified. EnsureAuthenticationInfoAreEmbedded does not fail in case of Kubeconfig file with token",
        "createdAt" : "2019-07-29T14:44:04Z",
        "updatedAt" : "2019-07-29T14:44:05Z",
        "lastEditedBy" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "tags" : [
        ]
      }
    ],
    "commit" : "df08af0349f1032783910c71febd440e5fd74bd1",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +63,67 @@\t\t// We should ensure that all the authentication info is embedded in config file, so everything will work also when\n\t\t// the kubeconfig file will be stored in /etc/kubernetes/boostrap-kubelet.conf\n\t\tif err := kubeconfigutil.EnsureAuthenticationInfoAreEmbedded(kubeconfig); err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"error while reading client cert file or client key file\")\n\t\t}"
  },
  {
    "id" : "78ac703e-0eae-443a-9dec-5641408e0c79",
    "prId" : 80675,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80675#pullrequestreview-267651481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c46aeef-23bc-429b-8fb7-d5cebd2a111d",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "currently this logic runs indefinitely and we should change this to fail after a while.\r\ni'd say 10 retries * 5 seconds (DiscoveryRetryInterval) should be enough.\r\n\r\na TODO can lead to someone picking this up.\r\n\r\n",
        "createdAt" : "2019-07-28T20:28:46Z",
        "updatedAt" : "2019-07-29T08:48:50Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "a4470c16-620d-4dad-b0dc-30ac78918e85",
        "parentId" : "6c46aeef-23bc-429b-8fb7-d5cebd2a111d",
        "authorId" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "body" : "filed https://github.com/kubernetes/kubeadm/issues/1693 to track this TODO",
        "createdAt" : "2019-07-29T09:01:44Z",
        "updatedAt" : "2019-07-29T09:01:45Z",
        "lastEditedBy" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "tags" : [
        ]
      }
    ],
    "commit" : "df08af0349f1032783910c71febd440e5fd74bd1",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +92,96 @@\n\tvar clusterinfoCM *v1.ConfigMap\n\twait.PollInfinite(constants.DiscoveryRetryInterval, func() (bool, error) {\n\t\tvar err error\n\t\tclusterinfoCM, err = client.CoreV1().ConfigMaps(metav1.NamespacePublic).Get(bootstrapapi.ConfigMapClusterInfo, metav1.GetOptions{})"
  },
  {
    "id" : "e64da95b-0d75-4a04-b432-ce07f3077395",
    "prId" : 80675,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80675#pullrequestreview-268075850",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53812b5c-7581-40bf-8a4d-7ba726efb7ef",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "`fileCluster :=`",
        "createdAt" : "2019-07-29T12:48:37Z",
        "updatedAt" : "2019-07-29T12:48:38Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "de19470b-9272-46b8-9da9-d7981f184e33",
        "parentId" : "53812b5c-7581-40bf-8a4d-7ba726efb7ef",
        "authorId" : "aa415fe4-825d-4e38-9b80-d7e40859fb24",
        "body" : "`:=` construct looks more inline with existing inline declarations - is there a k8 style guide that makes a definitive statement?",
        "createdAt" : "2019-07-29T22:21:46Z",
        "updatedAt" : "2019-07-29T22:21:46Z",
        "lastEditedBy" : "aa415fe4-825d-4e38-9b80-d7e40859fb24",
        "tags" : [
        ]
      },
      {
        "id" : "395d0e7d-e4ed-4405-8a58-5dbb2f302e1d",
        "parentId" : "53812b5c-7581-40bf-8a4d-7ba726efb7ef",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "we have this https://github.com/kubernetes/community/blob/master/contributors/guide/coding-conventions.md#code-conventions\r\nwhich isn't very detailed, so as long as go{vet|lint|fmt} passes changes are tolerated.\r\n\r\n`fileCluster :=` is preferred, so we left this one slide.\r\n",
        "createdAt" : "2019-07-29T22:35:52Z",
        "updatedAt" : "2019-07-29T22:35:52Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "df08af0349f1032783910c71febd440e5fd74bd1",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +72,76 @@\t\t// Create a new kubeconfig object from the discovery file config, with only the server and the CA cert.\n\t\t// NB. We do this in order to not pick up other possible misconfigurations in the clusterinfo file\n\t\tvar fileCluster = kubeconfigutil.GetClusterFromKubeConfig(config)\n\t\tkubeconfig = kubeconfigutil.CreateBasic(\n\t\t\tfileCluster.Server,"
  },
  {
    "id" : "3d8d3400-d473-415e-9f89-b6c98107abc8",
    "prId" : 66482,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66482#pullrequestreview-139529556",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a52d45f-dc58-4e5c-919a-77e4b5181328",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "You can just move this code over here and return what was found:\r\n```\r\nif len(authInfo.ClientCertificateData) == 0 || len(authInfo.ClientKeyData) == 0 {\r\n    return nil, fmt.Errorf(\"couldn't read authentication info from the given kubeconfig file\")\r\n}\r\nreturn configFromClusterInfo = kubeconfigutil.CreateWithCerts(...)\r\n```",
        "createdAt" : "2018-07-23T16:14:25Z",
        "updatedAt" : "2018-07-26T11:34:25Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "997a612206b8f625f03bcb7ebe9c4a0be8e2d9db",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +82,86 @@\t\t\t}\n\t\t\tauthInfo.ClientKeyData = clientKey\n\t\t}\n\n\t\tif len(authInfo.ClientCertificateData) == 0 || len(authInfo.ClientKeyData) == 0 {"
  }
]