[
  {
    "id" : "d76ce153-d1a3-4bcf-a02d-7675fd07b318",
    "prId" : 568,
    "prUrl" : "https://github.com/zio/zio/pull/568#pullrequestreview-202239151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ecec4c1-704b-4d89-91dd-ff48b5d82d5d",
        "parentId" : null,
        "authorId" : "0afcfd14-61ab-4e62-aaca-9dde70c98b2f",
        "body" : "> While this structure is not performant\r\n\r\nI think that it would be very helpful to add this Future shim to the benchmarks (whenever Future is also used).\r\n\r\nThat way, end-users can make an informed decision on wether to use the shim or just go for the full rewrite.",
        "createdAt" : "2019-02-11T14:41:30Z",
        "updatedAt" : "2019-02-11T14:41:58Z",
        "lastEditedBy" : "0afcfd14-61ab-4e62-aaca-9dde70c98b2f",
        "tags" : [
        ]
      },
      {
        "id" : "227b3c5c-b73d-4754-8f51-af5ae991e672",
        "parentId" : "7ecec4c1-704b-4d89-91dd-ff48b5d82d5d",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "If performance of Future matters, do the full rewrite! The shim is only intended for minimal use of Future where the dominating factor is IO or CPU, not thread pool overhead.",
        "createdAt" : "2019-02-11T17:32:30Z",
        "updatedAt" : "2019-02-11T17:32:30Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "39e8a78d492cda9712aef560cd9adc36a6e2de54",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +24,28 @@  /**\n   * An API-compatible implementation of [[scala.concurrent.Future]], which\n   * is backed by ZIO. While this structure is not performant, due to emulation\n   * of the `Future` API, it can be useful to help migrate legacy code away\n   * from `Future` and to ZIO."
  },
  {
    "id" : "ac20c8e0-ad25-4dd3-8164-5da3104d3455",
    "prId" : 568,
    "prUrl" : "https://github.com/zio/zio/pull/568#pullrequestreview-202671550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "520faa48-7bea-4943-9114-3e30dfb6ed52",
        "parentId" : null,
        "authorId" : "4ace600a-1453-4cce-81f8-efdc7c98ad7a",
        "body" : "You can use `fold` too",
        "createdAt" : "2019-02-11T21:30:52Z",
        "updatedAt" : "2019-02-11T21:44:03Z",
        "lastEditedBy" : "4ace600a-1453-4cce-81f8-efdc7c98ad7a",
        "tags" : [
        ]
      },
      {
        "id" : "29a0c1a6-c5d6-44fb-8a37-ca352ac28188",
        "parentId" : "520faa48-7bea-4943-9114-3e30dfb6ed52",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Unfortunately it doesn't exist on Scala 2.11.",
        "createdAt" : "2019-02-12T13:43:13Z",
        "updatedAt" : "2019-02-12T13:43:13Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "39e8a78d492cda9712aef560cd9adc36a6e2de54",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +40,44 @@\n    final def fromTry[T](result: Try[T]): Future[T] =\n      result match {\n        case Failure(t) => failed(t)\n        case Success(v) => successful(v)"
  },
  {
    "id" : "9d752519-3d67-4d3f-8325-f3fa3891fa82",
    "prId" : 568,
    "prUrl" : "https://github.com/zio/zio/pull/568#pullrequestreview-202672002",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e716c2d-bb49-43c3-b105-0f03ec4ca596",
        "parentId" : null,
        "authorId" : "4ace600a-1453-4cce-81f8-efdc7c98ad7a",
        "body" : "could we define `Future`as:\r\n```scala\r\nExecutionContext => Fiber[Throwable, A]\r\n```\r\n?",
        "createdAt" : "2019-02-11T21:39:07Z",
        "updatedAt" : "2019-02-11T21:44:04Z",
        "lastEditedBy" : "4ace600a-1453-4cce-81f8-efdc7c98ad7a",
        "tags" : [
        ]
      },
      {
        "id" : "6e896d94-57bd-46e3-af24-49dd1f38e830",
        "parentId" : "2e716c2d-bb49-43c3-b105-0f03ec4ca596",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Yes, but then we have 2 execution context in almost every methodâ€”which do we use? Although sometimes this would work better, and sometimes `IO` would work better, I think mapping `Future` to `Fiber` directly results in the \"closest\" alignment of concepts. It's not perfect though.",
        "createdAt" : "2019-02-12T13:44:11Z",
        "updatedAt" : "2019-02-12T13:44:11Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "39e8a78d492cda9712aef560cd9adc36a6e2de54",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@   * most closely to ZIO `Fiber`.\n   */\n  type Future[+A] = Fiber[Throwable, A]\n\n  private val Global = ExecutionContext.Implicits.global"
  }
]