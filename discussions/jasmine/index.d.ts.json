[
  {
    "id" : "cd4ebd7c-7ba3-4ba2-b98e-17bd306df816",
    "prId" : 14875,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/14875#pullrequestreview-26890967",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "feec6a12-3d3d-468a-bad4-3b5f2035448e",
        "parentId" : null,
        "authorId" : "2965f676-a025-4474-a34d-ed04f1e39b92",
        "body" : "While we're at it, would we want `(first: T, second: T)` here instead?",
        "createdAt" : "2017-03-13T13:52:41Z",
        "updatedAt" : "2017-03-15T09:29:32Z",
        "lastEditedBy" : "2965f676-a025-4474-a34d-ed04f1e39b92",
        "tags" : [
        ]
      },
      {
        "id" : "e515b010-b154-40f2-af86-32507771b263",
        "parentId" : "feec6a12-3d3d-468a-bad4-3b5f2035448e",
        "authorId" : "4fad2b80-6130-4b11-bf94-15be7a7a230f",
        "body" : "I have not used `CustomEqualityTester` myself so far, so I'm unsure about its usage.\r\n\r\nIn the example it doesn't make much sense as the function tests for the type of the parameter during runtime to do different  equality tests, so `any` would be the best type here *any*way (no pun intended 😄 )\r\n\r\nIf both parameters to compare are of a different type, we would need two generic parameters which would complicated matter quickly\r\n\r\nIf this makes sense in real world usage, I would  add it in a different PullRequest",
        "createdAt" : "2017-03-14T07:16:57Z",
        "updatedAt" : "2017-03-15T09:29:32Z",
        "lastEditedBy" : "4fad2b80-6130-4b11-bf94-15be7a7a230f",
        "tags" : [
        ]
      },
      {
        "id" : "35d2daed-de14-493f-b62b-c38c7220cab2",
        "parentId" : "feec6a12-3d3d-468a-bad4-3b5f2035448e",
        "authorId" : "2965f676-a025-4474-a34d-ed04f1e39b92",
        "body" : "Sure, SGTM 👍 ",
        "createdAt" : "2017-03-14T18:16:42Z",
        "updatedAt" : "2017-03-15T09:29:32Z",
        "lastEditedBy" : "2965f676-a025-4474-a34d-ed04f1e39b92",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b6db1a1561a26ba5644587e1dad420645d112f1",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +127,131 @@    }\n\n    type CustomEqualityTester = (first: any, second: any) => boolean;\n\n    interface CustomMatcher {"
  },
  {
    "id" : "eaeb49a5-cf31-44c7-95fc-a5774d614376",
    "prId" : 14875,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/14875#pullrequestreview-26891283",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45b3e7a6-d7c4-4066-b953-f59f5ded6ce7",
        "parentId" : null,
        "authorId" : "2965f676-a025-4474-a34d-ed04f1e39b92",
        "body" : "Would it make more sense to split this up into two definitions? I.e. one for `ArrayLike<T>` and one for `string`?",
        "createdAt" : "2017-03-13T13:54:08Z",
        "updatedAt" : "2017-03-15T09:29:32Z",
        "lastEditedBy" : "2965f676-a025-4474-a34d-ed04f1e39b92",
        "tags" : [
        ]
      },
      {
        "id" : "063550cf-486e-42b7-addd-6ac4e0a9e85d",
        "parentId" : "45b3e7a6-d7c4-4066-b953-f59f5ded6ce7",
        "authorId" : "4fad2b80-6130-4b11-bf94-15be7a7a230f",
        "body" : "I can't say much about this either, as I have no idea how `CustomEqualityTester` are really used.\r\nI just adapted the style to match the linting rules",
        "createdAt" : "2017-03-14T07:19:26Z",
        "updatedAt" : "2017-03-15T09:29:32Z",
        "lastEditedBy" : "4fad2b80-6130-4b11-bf94-15be7a7a230f",
        "tags" : [
        ]
      },
      {
        "id" : "cd55b78e-2da4-49ea-a3fc-daf277e9868c",
        "parentId" : "45b3e7a6-d7c4-4066-b953-f59f5ded6ce7",
        "authorId" : "2965f676-a025-4474-a34d-ed04f1e39b92",
        "body" : "Sure; if needed, this can be a follow-up PR.",
        "createdAt" : "2017-03-14T18:17:48Z",
        "updatedAt" : "2017-03-15T09:29:32Z",
        "lastEditedBy" : "2965f676-a025-4474-a34d-ed04f1e39b92",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b6db1a1561a26ba5644587e1dad420645d112f1",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +147,151 @@    interface MatchersUtil {\n        equals(a: any, b: any, customTesters?: CustomEqualityTester[]): boolean;\n        contains<T>(haystack: ArrayLike<T> | string, needle: any, customTesters?: CustomEqualityTester[]): boolean;\n        buildFailureMessage(matcherName: string, isNot: boolean, actual: any, ...expected: any[]): string;\n    }"
  }
]