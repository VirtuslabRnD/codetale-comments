[
  {
    "id" : "8478240b-aa5e-4fee-8bcd-500d0fffeeb3",
    "prId" : 8114,
    "prUrl" : "https://github.com/root-project/root/pull/8114#pullrequestreview-656392405",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f94f08bb-042e-4f73-8e3a-81284f00b938",
        "parentId" : null,
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Why to change to `const char*`? `std::string` is more safe. If you really care about performance, one case use `std::sting_view`.",
        "createdAt" : "2021-05-07T06:56:30Z",
        "updatedAt" : "2021-05-07T07:16:21Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "e1cf62a8-9e63-41a8-bd87-b9e67945e749",
        "parentId" : "f94f08bb-042e-4f73-8e3a-81284f00b938",
        "authorId" : "da770443-4067-4f46-b80b-a848331ba268",
        "body" : "Function AddNewColumnToCurrentCollection() is method that can be called from client.\r\n\r\nThe change is a consequence of using TMethodCall instead of TROOT::ProcessLine. If I understand correctly TMethodCall does not support std::string.\r\n\r\n@osschar knows more about this problem.\r\n",
        "createdAt" : "2021-05-07T18:08:12Z",
        "updatedAt" : "2021-05-07T18:08:12Z",
        "lastEditedBy" : "da770443-4067-4f46-b80b-a848331ba268",
        "tags" : [
        ]
      },
      {
        "id" : "af96d473-1db5-4317-b8d5-1fc2a585e5e9",
        "parentId" : "f94f08bb-042e-4f73-8e3a-81284f00b938",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "If I see it right, you are using following signature in TMethodCall:\r\nhttps://root.cern/doc/master/classTMethodCall.html#a65b429fc905c129b927d5cf34cf0042a\r\nIt is `void TMethodCall::Execute( void * object, const char *params)`\r\nIt should be does not matter if parameter is `const char *` or `std::string` - in both cases one can specify `\"string value\"` as value for `params`. \r\n\r\n",
        "createdAt" : "2021-05-10T07:51:43Z",
        "updatedAt" : "2021-05-10T07:51:44Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "67b87d08-7713-42cb-9c32-3103fe19a45e",
        "parentId" : "f94f08bb-042e-4f73-8e3a-81284f00b938",
        "authorId" : "7cfb58c8-7313-4476-85cb-a66db5939a9a",
        "body" : "Well, we had std::string arguments in the called functions and it did not work. Apparently TMethodCall only supports builtin types and const char* ... it does not / can not construct any objects.\r\n",
        "createdAt" : "2021-05-10T18:28:14Z",
        "updatedAt" : "2021-05-10T18:28:14Z",
        "lastEditedBy" : "7cfb58c8-7313-4476-85cb-a66db5939a9a",
        "tags" : [
        ]
      },
      {
        "id" : "0ace0c20-2df5-466b-b3b5-c35ad1a14abf",
        "parentId" : "f94f08bb-042e-4f73-8e3a-81284f00b938",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "I see now.\r\nBut this is very strong limitation, which does not mentioned in documentation.\r\nI will create separate issue - while `TMethodCall` is also used in `THttpServer` for very generic way to execute object methods.",
        "createdAt" : "2021-05-11T07:53:26Z",
        "updatedAt" : "2021-05-11T07:53:26Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c566f4b4175c153be9e992f222595fa3e7d1b69",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +95,99 @@   ElementId_t GetDisplayedCollection() const  { return fDisplayedCollection; }\n\n   void AddNewColumnToCurrentCollection(const char* expr, const char* title, int prec = 2);\n\n   void AddDelegate(Delegate_t d) { fDelegates.push_back(d); }"
  }
]