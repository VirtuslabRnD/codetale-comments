[
  {
    "id" : "1df08957-9dbe-4aa3-be20-87abe85b8e2c",
    "prId" : 10049,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75845be7-d9c8-496c-81b5-67732da72e88",
        "parentId" : null,
        "authorId" : "dbc0e58d-9f4d-41a9-9fd8-c0b24e9aab13",
        "body" : "Tests pass and this is the same pattern used by Redux and others, so AFAICT this should be a safe change.\n",
        "createdAt" : "2016-07-11T19:12:16Z",
        "updatedAt" : "2016-07-11T19:12:16Z",
        "lastEditedBy" : "dbc0e58d-9f4d-41a9-9fd8-c0b24e9aab13",
        "tags" : [
        ]
      }
    ],
    "commit" : "65f29334bca19b47e548718f2ad1aa3114ea15b6",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +108,112 @@\ndeclare module \"react-redux\" {\n  export = ReactRedux;\n}"
  },
  {
    "id" : "8eb15a2d-73f3-4fcb-a707-417387226011",
    "prId" : 11101,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b74faf58-b3cc-4b2b-80d9-33bd64b006b7",
        "parentId" : null,
        "authorId" : "dbc0e58d-9f4d-41a9-9fd8-c0b24e9aab13",
        "body" : "What purpose does this class serve? It looks a lot like `Component`, but slightly stricter in the constructor. Also, `S` in `ComponentLifecycle` is taken to be \"state\"; usage of it as `context` is not correct.\n",
        "createdAt" : "2016-09-08T18:26:49Z",
        "updatedAt" : "2016-09-08T18:26:49Z",
        "lastEditedBy" : "dbc0e58d-9f4d-41a9-9fd8-c0b24e9aab13",
        "tags" : [
        ]
      }
    ],
    "commit" : "be690851722ef3161ca9ed104934a17cef695dd1",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +16,20 @@\n\n  interface ComponentConstructor<P, S> extends __React.ComponentLifecycle<P, S> {\n  new(props?: P, context?: S) : void;\n  }"
  },
  {
    "id" : "7f4c56a7-b535-4595-bbea-e1cc53d1c065",
    "prId" : 11101,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8be6300d-45bc-48b4-8dbb-29e598a75e5b",
        "parentId" : null,
        "authorId" : "dbc0e58d-9f4d-41a9-9fd8-c0b24e9aab13",
        "body" : "So I see that the magic here seems to be that there is a third type parameter. Does this imply that every usage of `connect` has to be parameterized to ensure that it selects the right overload and typechecks correctly?\n\nEdit: upon further reading, I'm honestly not sure how this works at all. Can you explain the mechanism behind this change? The tests, while improved, are still too liberal with `any` for me to believe that they're actually making sure it all checks out.\n\nEdit edit: does Typescript just look at all the overloads and decide that one of them checks out, so the whole decorator expression is okay?\n",
        "createdAt" : "2016-09-08T18:28:10Z",
        "updatedAt" : "2016-09-08T18:35:00Z",
        "lastEditedBy" : "dbc0e58d-9f4d-41a9-9fd8-c0b24e9aab13",
        "tags" : [
        ]
      }
    ],
    "commit" : "be690851722ef3161ca9ed104934a17cef695dd1",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +24,28 @@  }\n\n  interface ComponentDecorator<TOriginalProps, TOwnProps, TState> {\n  (constructor: ComponentConstructor<TOriginalProps, TState>): void;\n  }"
  },
  {
    "id" : "4c75b9cc-8ff9-4695-a5f1-42e6be99016b",
    "prId" : 11101,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5009096-24ac-4b44-a844-3b37ab455d00",
        "parentId" : null,
        "authorId" : "dbc0e58d-9f4d-41a9-9fd8-c0b24e9aab13",
        "body" : "Can you undo these changes to indentation (and elsewhere in the file) to stay consistent?\n",
        "createdAt" : "2016-09-08T18:28:33Z",
        "updatedAt" : "2016-09-08T18:28:33Z",
        "lastEditedBy" : "dbc0e58d-9f4d-41a9-9fd8-c0b24e9aab13",
        "tags" : [
        ]
      }
    ],
    "commit" : "be690851722ef3161ca9ed104934a17cef695dd1",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +34,38 @@  */\n  export interface InferableComponentDecorator {\n  <P, TComponentConstruct extends (ComponentClass<P> | StatelessComponent<P>)>(component: TComponentConstruct): TComponentConstruct;\n  }\n"
  }
]