[
  {
    "id" : "c721703a-1ffb-47a7-9376-b883098f995f",
    "prId" : 2643,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4b7d33b-6289-434a-a197-513799e0c797",
        "parentId" : null,
        "authorId" : "1ca557cb-9bb4-423a-b1d5-159e2bc35c32",
        "body" : "is this definition right?\nhttps://github.com/kriskowal/q/blob/93c00699f22354973e0bccf800d7f03c9413d0d8/q.js#L1883\nhttps://github.com/kriskowal/q/blob/93c00699f22354973e0bccf800d7f03c9413d0d8/spec/q-spec.js#L2138\n",
        "createdAt" : "2014-08-09T14:16:02Z",
        "updatedAt" : "2014-08-09T14:16:02Z",
        "lastEditedBy" : "1ca557cb-9bb4-423a-b1d5-159e2bc35c32",
        "tags" : [
        ]
      },
      {
        "id" : "61b43bb3-9b84-4470-9e55-d587a6b09091",
        "parentId" : "f4b7d33b-6289-434a-a197-513799e0c797",
        "authorId" : "e46c2af7-d2b1-442a-862f-52eb68b6bcca",
        "body" : "I don't understand much of the second link, but the first one points to the correct function.\n\nWhen I submitted my patch I hadn't noticed that the documentation reads: `If callback is not a function, simply returns promise`. When merging, please fix the return type. It's not `void`, but `Promise`.\n\nSource: https://github.com/kriskowal/q/wiki/API-Reference#promisenodeifycallback\n",
        "createdAt" : "2014-08-09T16:27:11Z",
        "updatedAt" : "2014-08-09T16:29:17Z",
        "lastEditedBy" : "e46c2af7-d2b1-442a-862f-52eb68b6bcca",
        "tags" : [
        ]
      },
      {
        "id" : "f64ebb72-3870-469d-ab8f-e30dcec8dfc0",
        "parentId" : "f4b7d33b-6289-434a-a197-513799e0c797",
        "authorId" : "1ca557cb-9bb4-423a-b1d5-159e2bc35c32",
        "body" : "umm... okey.\n",
        "createdAt" : "2014-08-29T08:22:49Z",
        "updatedAt" : "2014-08-29T08:22:49Z",
        "lastEditedBy" : "1ca557cb-9bb4-423a-b1d5-159e2bc35c32",
        "tags" : [
        ]
      }
    ],
    "commit" : "86c0c56e6e3b28debedf3baf5cb5bf377b8e217a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +105,109 @@         * If callback is a function, assumes it's a Node.js-style callback, and calls it as either callback(rejectionReason) when/if promise becomes rejected, or as callback(null, fulfillmentValue) when/if promise becomes fulfilled. If callback is not a function, simply returns promise.\n         */\n        nodeify(callback: (reason: any, value: any) => void): void;\n\n        /**"
  },
  {
    "id" : "0e92c96f-50a8-4f4b-9722-29fa7a7b19cc",
    "prId" : 11685,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/11685#pullrequestreview-6332599",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "321001e7-64a6-4829-99f7-06da2d467348",
        "parentId" : null,
        "authorId" : "684aaf20-f23a-4b2a-8070-073a826b9c21",
        "body" : "`IWhenable<IWhenable<T>[]>`? Is this intended? What is the point? Why not just `IWhenable<T>[]`?\n",
        "createdAt" : "2016-10-28T22:31:30Z",
        "updatedAt" : "2016-10-28T22:31:30Z",
        "lastEditedBy" : "684aaf20-f23a-4b2a-8070-073a826b9c21",
        "tags" : [
        ]
      },
      {
        "id" : "ce5b19d2-0ad4-4a0a-b002-3449cdbc8ba4",
        "parentId" : "321001e7-64a6-4829-99f7-06da2d467348",
        "authorId" : "684aaf20-f23a-4b2a-8070-073a826b9c21",
        "body" : "Sorry, I was wrong. I deleted my other comments, in which I confused `all` and `when`. `IWhenable<IWhenable<T>[]>` is indeed the correct type.\n",
        "createdAt" : "2016-10-28T23:10:42Z",
        "updatedAt" : "2016-10-28T23:10:42Z",
        "lastEditedBy" : "684aaf20-f23a-4b2a-8070-073a826b9c21",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c5b36b938015111e3ce7a3eb532bb12f1ea84e7",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +231,235 @@     * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise, or is rejected with the same rejection reason as the first promise to be rejected.\n     */\n    export function all<T>(promises: IWhenable<IWhenable<T>[]>): Promise<T[]>;\n\n    /**"
  }
]