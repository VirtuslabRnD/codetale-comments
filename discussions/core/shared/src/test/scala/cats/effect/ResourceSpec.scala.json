[
  {
    "id" : "0fb8a7d0-a407-4042-9814-008417bf4db1",
    "prId" : 1368,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1368#pullrequestreview-520132130",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "700a263f-fc20-46a1-96d5-e573d8d9da7b",
        "parentId" : null,
        "authorId" : "f4a85d82-54ab-4612-917f-befb27b03252",
        "body" : "I'll welcome any suggestions for these tests. Should I go with property-based tests?",
        "createdAt" : "2020-10-29T22:25:15Z",
        "updatedAt" : "2020-11-06T15:56:57Z",
        "lastEditedBy" : "f4a85d82-54ab-4612-917f-befb27b03252",
        "tags" : [
        ]
      }
    ],
    "commit" : "dda1b393a792fb3fcb9ccd101aa67e94bba28bbd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +472,476 @@\n    \"surround - should wrap an effect in a usage and ignore the value produced by resource\" in ticked {\n      implicit ticker =>\n        val r = Resource.liftF(IO.pure(0))\n        val surroundee = IO(\"hello\")"
  },
  {
    "id" : "3181724f-b615-42be-8fbb-98b31b86235b",
    "prId" : 1081,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1081#pullrequestreview-467744727",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb7ec381-d2f1-42ec-a2fa-021bf9662bed",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "`Par` is pretty much untestable, since `racePair` is not equal to itself.",
        "createdAt" : "2020-08-14T02:25:54Z",
        "updatedAt" : "2020-08-14T03:29:37Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "fa89e86b-ef53-4ede-85d7-5e89ebc01075",
        "parentId" : "fb7ec381-d2f1-42ec-a2fa-021bf9662bed",
        "authorId" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "body" : "Should we remove the tests or the instance?",
        "createdAt" : "2020-08-14T17:00:59Z",
        "updatedAt" : "2020-08-14T17:00:59Z",
        "lastEditedBy" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "tags" : [
        ]
      },
      {
        "id" : "e5bbcf21-c6c0-46b1-921c-936ddbd4bf21",
        "parentId" : "fb7ec381-d2f1-42ec-a2fa-021bf9662bed",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Can't believe I'm saying this, but the tests.\r\n\r\nThe problem is operational, not fundamental. Our definition of equality simply doesn't correctly capture `race`'s semantics, and any definition which *does* is undecidable. So… I'm at a bit of a loss as to how to do law testing on this stuff. You'll notice that we also cheat in `PureConc` and `IO` by removing `racePair` from the generators, for exactly the same reason.",
        "createdAt" : "2020-08-14T17:23:21Z",
        "updatedAt" : "2020-08-14T17:23:21Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "876aaec4bc58da38411ed4a4df626acc21407956",
    "line" : 436,
    "diffHunk" : "@@ -1,1 +434,438 @@  // }\n\n  // TODO fails some laws\n  // {\n  //   implicit val ticker = Ticker(TestContext())"
  }
]