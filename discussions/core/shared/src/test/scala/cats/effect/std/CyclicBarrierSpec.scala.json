[
  {
    "id" : "4b768fd7-9364-4000-81e5-ddab849fe500",
    "prId" : 1417,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1417#pullrequestreview-530573128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "811b3c97-48b0-4951-bee8-a06aef28fec6",
        "parentId" : null,
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "some tests use `real` and others use `ticked`, but i can't really tell why :) ",
        "createdAt" : "2020-11-14T02:49:45Z",
        "updatedAt" : "2020-11-14T19:43:45Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      },
      {
        "id" : "311c34c3-8610-4ca7-8195-301112090b08",
        "parentId" : "811b3c97-48b0-4951-bee8-a06aef28fec6",
        "authorId" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "body" : "The ones that use ticked need to assert nontermination or cancelation, and ticked let's you do that much more easily. I used real whenever I could though",
        "createdAt" : "2020-11-14T03:28:42Z",
        "updatedAt" : "2020-11-14T19:43:45Z",
        "lastEditedBy" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "tags" : [
        ]
      },
      {
        "id" : "80d43a19-b82c-4a2f-8938-b814161e0a96",
        "parentId" : "811b3c97-48b0-4951-bee8-a06aef28fec6",
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "nontermination makes sense, but how come cancellation is an issue? \r\n\r\n```\r\ns\"$name - await is cancelable\" in ticked { implicit ticker =>\r\n      for {\t      newBarrier(2).flatMap(_.await).timeoutTo(1.second, IO.unit) must completeAs(())\r\n```\r\n\r\ni thought this was a good candidate for `real` but i'm probably missing something about how `TC` works",
        "createdAt" : "2020-11-14T03:44:20Z",
        "updatedAt" : "2020-11-14T19:43:45Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      },
      {
        "id" : "a7922d13-8ffe-4044-a5d3-5b95c0203d40",
        "parentId" : "811b3c97-48b0-4951-bee8-a06aef28fec6",
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "oh, is it because cancellation is more or less nondeterministic on the `sleep` when using `real`?",
        "createdAt" : "2020-11-14T03:51:13Z",
        "updatedAt" : "2020-11-14T19:43:45Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      },
      {
        "id" : "5c1cc837-6a37-45cb-b771-f210f96ca7aa",
        "parentId" : "811b3c97-48b0-4951-bee8-a06aef28fec6",
        "authorId" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "body" : "yeah, and `ticked` is deterministic and fast. With `real` you tradeoff slow test vs predictable test. Also these tests don't have any of the things that make `ticked` deadlock-prone (lots of fibers depending on each other) and untrustworthy (real memory barrier things, it's just `Ref + Deferred + uncancelable`)",
        "createdAt" : "2020-11-14T11:48:38Z",
        "updatedAt" : "2020-11-14T19:43:45Z",
        "lastEditedBy" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "tags" : [
        ]
      }
    ],
    "commit" : "20577221a4a327c85a2529d62e148a03c2413ef0",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +52,56 @@    }\n\n    s\"$name - await releases all fibers\" in real {\n      newBarrier(2).flatMap { barrier =>\n        (barrier.await, barrier.await).parTupled.void.mustEqual(())"
  }
]