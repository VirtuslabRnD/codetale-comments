[
  {
    "id" : "dd08a255-d5af-46e3-b173-6fa5e6a0f6ef",
    "prId" : 49,
    "prUrl" : "https://github.com/monix/monix-bio/pull/49#pullrequestreview-332225399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c961605-9f10-41c6-89c5-768d7019bb7c",
        "parentId" : null,
        "authorId" : "ee74c363-32ce-4d86-9430-73c975e00983",
        "body" : "It would be nice to use a `BIO` here, with a non-Throwable error type. You could use something like `BIO.fromEither(\"Error\".asLeft[Int])`, which will result in a value of type `BIO[String, Int]`.\r\n\r\nPS `.asLeft` method comes from `import cats.syntax.either._`",
        "createdAt" : "2019-12-14T18:09:58Z",
        "updatedAt" : "2020-03-01T14:19:05Z",
        "lastEditedBy" : "ee74c363-32ce-4d86-9430-73c975e00983",
        "tags" : [
        ]
      }
    ],
    "commit" : "125ede60bde1ea5d32ed07113e6245346c259822",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +41,45 @@  test(\"BIO.mapError.attempt should expose error\") { implicit s =>\n    val ex = DummyException(\"dummy\")\n    val result = Task\n      .raiseError[Int](new IllegalStateException(\"dummy\"))\n      .mapError(e => DummyException(e.getMessage))"
  }
]