[
  {
    "id" : "9fc7310c-e0de-42be-ac8d-374cecbbfd69",
    "prId" : 64,
    "prUrl" : "https://github.com/monix/monix-bio/pull/64#pullrequestreview-339977833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26c625bb-811c-4ed6-b736-5d717444e2d7",
        "parentId" : null,
        "authorId" : "560e1de5-7481-4bf3-b08d-f23a983f5966",
        "body" : "What if `dummy` is not a `Throwable`? \r\nIt will break I suppose?",
        "createdAt" : "2020-01-08T16:17:53Z",
        "updatedAt" : "2020-01-08T16:27:08Z",
        "lastEditedBy" : "560e1de5-7481-4bf3-b08d-f23a983f5966",
        "tags" : [
        ]
      }
    ],
    "commit" : "2bec3a4fd306bcef185b63f10cdbc9153fdba28e",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +135,139 @@  test(\"BIO.raiseError(error).memoizeOnSuccess.materialize\") { implicit s =>\n    val dummy = DummyException(\"dummy\")\n    val f = BIO.raiseError(dummy).memoizeOnSuccess.materialize.runToFuture\n    s.tick()\n    assertEquals(f.value, Some(Success(Right(Failure(dummy)))))"
  },
  {
    "id" : "7dc461c3-cd0a-4cb9-b118-4a4710f0f0f9",
    "prId" : 64,
    "prUrl" : "https://github.com/monix/monix-bio/pull/64#pullrequestreview-339977833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4548412e-ec3b-4ca7-b444-debb63de2629",
        "parentId" : null,
        "authorId" : "560e1de5-7481-4bf3-b08d-f23a983f5966",
        "body" : "```suggestion\r\n  test(\"BIO.raiseFatalError.memoizeOnSuccess eq BIO.raiseFatalError\") { implicit s =>\r\n```",
        "createdAt" : "2020-01-08T16:24:42Z",
        "updatedAt" : "2020-01-08T16:27:08Z",
        "lastEditedBy" : "560e1de5-7481-4bf3-b08d-f23a983f5966",
        "tags" : [
        ]
      }
    ],
    "commit" : "2bec3a4fd306bcef185b63f10cdbc9153fdba28e",
    "line" : 626,
    "diffHunk" : "@@ -1,1 +624,628 @@  }\n\n  test(\"BIO.raiseFatalError.memoizeOnSuccess eq Task.raiseError\") { implicit s =>\n    val task = BIO.raiseFatalError(DummyException(\"dummy\"))\n    assertEquals(task, task.memoizeOnSuccess)"
  }
]