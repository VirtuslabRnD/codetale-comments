[
  {
    "id" : "c236049a-859d-4ead-b2a7-fe2d70d4f440",
    "prId" : 906,
    "prUrl" : "https://github.com/zio/zio/pull/906#pullrequestreview-242411995",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4eec3397-6184-4a07-b480-f9e52b901646",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Nice! üëç ",
        "createdAt" : "2019-05-28T00:55:22Z",
        "updatedAt" : "2019-05-30T05:49:02Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "44ae7f2dfc7bc4b8032b26d5fe4a7d4031e05819",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +317,321 @@          release = fiber.interrupt *> finalizer.get.flatMap(identity(_))\n        )\n      } yield reservation\n    }\n"
  },
  {
    "id" : "26d7bf5d-c533-4c0f-9217-92e570df1ba3",
    "prId" : 906,
    "prUrl" : "https://github.com/zio/zio/pull/906#pullrequestreview-243393535",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c076fbb8-a38f-401d-86d5-9cb5faf7d08d",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "@jdegoes would love another look at this operator for validation. I used `interruptibleMask` to allow the caller to run the reserve step interruptibly rather than `.interruptible`",
        "createdAt" : "2019-05-29T15:53:51Z",
        "updatedAt" : "2019-05-30T05:49:02Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "59e07251-666c-42ab-8ad4-702c6ef02dd8",
        "parentId" : "c076fbb8-a38f-401d-86d5-9cb5faf7d08d",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This is clever and looks correct to me. \r\n\r\nOne thing to keep in mind is that this fiber will inherit the interruptibility settings of its parent, at the moment when it is forked.\r\n\r\nSince this is done in `reserve`, I believe we can therefore simplify the code to just use `interruptible` rather than `interruptibleMask`, because we know what the parent interruptibility status will be (right?).",
        "createdAt" : "2019-05-29T16:17:14Z",
        "updatedAt" : "2019-05-30T05:49:02Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "ce2e39aa-b587-41a1-9f05-25bc83233057",
        "parentId" : "c076fbb8-a38f-401d-86d5-9cb5faf7d08d",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "So we can assume that 99% of the cases would use an uninterruptible `reserve`, but, that's not always true, as `reserve` can also be run manually for advanced manipulations. Which is why I thought `interruptibleMask` is more compositional.",
        "createdAt" : "2019-05-29T16:54:29Z",
        "updatedAt" : "2019-05-30T05:49:02Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "09d1eeb8-a913-47d3-a2f6-089783ddab84",
        "parentId" : "c076fbb8-a38f-401d-86d5-9cb5faf7d08d",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Ah, ok. Works for me. üëç ",
        "createdAt" : "2019-05-29T16:59:20Z",
        "updatedAt" : "2019-05-30T05:49:02Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "44ae7f2dfc7bc4b8032b26d5fe4a7d4031e05819",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +305,309 @@        // so to make sure the acquire phase of the original `ZManaged` runs\n        // interruptibly, we need to create an interruptible hole in the region.\n        fiber <- ZIO.interruptibleMask { restore =>\n                  restore {\n                    for {"
  },
  {
    "id" : "35a6cb83-500d-431f-b684-590b8376e90f",
    "prId" : 905,
    "prUrl" : "https://github.com/zio/zio/pull/905#pullrequestreview-242984823",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b67c896-5f9b-4a42-86a7-ed712fd0214c",
        "parentId" : null,
        "authorId" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "body" : "Fixed a possible leak here",
        "createdAt" : "2019-05-28T23:32:23Z",
        "updatedAt" : "2019-05-28T23:32:23Z",
        "lastEditedBy" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "tags" : [
        ]
      },
      {
        "id" : "97cddc9e-30c7-4e28-be76-958bdbcb36af",
        "parentId" : "1b67c896-5f9b-4a42-86a7-ed712fd0214c",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Nice. üëç ",
        "createdAt" : "2019-05-29T00:37:04Z",
        "updatedAt" : "2019-05-29T00:37:05Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "23801bc863857220a0db670683dda542e57fc448",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +483,487 @@        case Some((spentTime, Reservation(acquire, release))) if spentTime < d =>\n          Reservation(acquire.timeout(Duration.fromNanos(d.toNanos - spentTime.toNanos)), release)\n        case Some((_, Reservation(_, release))) =>\n          Reservation(ZIO.succeed(None), release)\n        case _ => Reservation(ZIO.succeed(None), ZIO.unit)"
  },
  {
    "id" : "405775c1-0630-49fc-a09b-fc9318a53ed1",
    "prId" : 839,
    "prUrl" : "https://github.com/zio/zio/pull/839#pullrequestreview-235534867",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7234d7f6-52f0-487c-9b45-caa2ca65040c",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Let's forward to `<*>` here",
        "createdAt" : "2019-05-09T11:24:27Z",
        "updatedAt" : "2019-05-19T17:31:36Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "571adc1d1fbbae12a10a66a81a6219e90667d75e",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +45,49 @@   * Symbolic alias for zip.\n   */\n  final def &&&[R1 <: R, E1 >: E, B](that: ZManaged[R1, E1, B]): ZManaged[R1, E1, (A, B)] =\n    zipWith(that)((a, b) => (a, b))\n"
  },
  {
    "id" : "baf833f7-1e83-425a-ad7c-82704cf1dce1",
    "prId" : 839,
    "prUrl" : "https://github.com/zio/zio/pull/839#pullrequestreview-236007729",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e7ee854-c6ab-46e8-8873-658b048584c6",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Both here and in `timeout`, keep in mind that most managed resources that are constructed with `ZManaged.make` would be acquired in the `reserve` step. So for accurate measurement of time, you'd need to start measuring at the `reserve` step and stop measuring at the end of the `acquire` step.",
        "createdAt" : "2019-05-09T11:58:29Z",
        "updatedAt" : "2019-05-19T17:31:36Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "d9845825-79b6-47ac-b367-2b393e358ec6",
        "parentId" : "9e7ee854-c6ab-46e8-8873-658b048584c6",
        "authorId" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "body" : "Makes sense. I'll update them",
        "createdAt" : "2019-05-09T14:55:00Z",
        "updatedAt" : "2019-05-19T17:31:36Z",
        "lastEditedBy" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "tags" : [
        ]
      },
      {
        "id" : "2382414a-4d84-446d-9d39-0cb0ae35f0c8",
        "parentId" : "9e7ee854-c6ab-46e8-8873-658b048584c6",
        "authorId" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "body" : "I thought about this some more. Depending on how we end up implementing the *parN methods this can lead to unintuitive results if we also time the reservation.\r\nMaybe also go with different methods here that allow to tune the behavior?",
        "createdAt" : "2019-05-10T09:23:48Z",
        "updatedAt" : "2019-05-19T17:31:36Z",
        "lastEditedBy" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "tags" : [
        ]
      }
    ],
    "commit" : "571adc1d1fbbae12a10a66a81a6219e90667d75e",
    "line" : 414,
    "diffHunk" : "@@ -1,1 +431,435 @@   * Returns a new effect that executes this one and times the acquisition of the resource.\n   */\n  final def timed: ZManaged[R with Clock, E, (Duration, A)] =\n    ZManaged {\n      clock.nanoTime.flatMap { start =>"
  },
  {
    "id" : "630ce55c-f1e9-49f5-aaf2-aa50ec5a94a7",
    "prId" : 839,
    "prUrl" : "https://github.com/zio/zio/pull/839#pullrequestreview-235534867",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3920d211-eecd-43b9-9e8a-04553a2d4fd6",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Note the comment about `foldM` here as well.",
        "createdAt" : "2019-05-09T11:59:54Z",
        "updatedAt" : "2019-05-19T17:31:36Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "571adc1d1fbbae12a10a66a81a6219e90667d75e",
    "line" : 575,
    "diffHunk" : "@@ -1,1 +586,590 @@        Reservation(\n          acquire = {\n            val left = ZIO.uninterruptibleMask { restore =>\n              reserve\n                .flatMap(res => finalizers.update(fs => res.release *> fs).const(res))"
  },
  {
    "id" : "f85ed2ad-85f1-4eef-8092-893f4e7d04ff",
    "prId" : 839,
    "prUrl" : "https://github.com/zio/zio/pull/839#pullrequestreview-237754826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3415d599-a87a-44cc-bcd3-aeaa22cf4296",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "There's a `<>` alias for that combinator, I think.",
        "createdAt" : "2019-05-15T08:31:16Z",
        "updatedAt" : "2019-05-19T17:31:36Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "451a1abd-6b8c-4049-bd22-915527753b5e",
        "parentId" : "3415d599-a87a-44cc-bcd3-aeaa22cf4296",
        "authorId" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "body" : "Yep. It's already in at lines 95-96. They are currently not next to each other as i've sorted everything alpabetically, which might not be the best idea in such cases?",
        "createdAt" : "2019-05-15T11:08:09Z",
        "updatedAt" : "2019-05-19T17:31:36Z",
        "lastEditedBy" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "tags" : [
        ]
      },
      {
        "id" : "21f88595-3117-4696-a4dd-2c3ce857dfbf",
        "parentId" : "3415d599-a87a-44cc-bcd3-aeaa22cf4296",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Oh, my bad, didn't see it üôà ",
        "createdAt" : "2019-05-15T11:15:03Z",
        "updatedAt" : "2019-05-19T17:31:36Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "571adc1d1fbbae12a10a66a81a6219e90667d75e",
    "line" : 309,
    "diffHunk" : "@@ -1,1 +344,348 @@   * otherwise executes the specified effect.\n   */\n  final def orElse[R1 <: R, E2, A1 >: A](that: => ZManaged[R1, E2, A1]): ZManaged[R1, E2, A1] =\n    foldM(_ => that, ZManaged.succeed)\n"
  },
  {
    "id" : "2e81ddcb-6207-42ea-9f5a-ad1722efd5d0",
    "prId" : 839,
    "prUrl" : "https://github.com/zio/zio/pull/839#pullrequestreview-239196893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c732e491-b558-49e5-b6c7-3d95f28c7d40",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Big üëç for these semantics",
        "createdAt" : "2019-05-18T12:28:21Z",
        "updatedAt" : "2019-05-19T17:31:36Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "571adc1d1fbbae12a10a66a81a6219e90667d75e",
    "line" : 427,
    "diffHunk" : "@@ -1,1 +444,448 @@   * Returns an effect that will timeout this resource, returning `None` if the\n   * timeout elapses before the resource was reserved and acquired.\n   * If the reservation completes successfully (even after the timeout) the release action will be run on a new fiber.\n   * `Some` will be returned if acquisition and reservation complete in time\n   */"
  },
  {
    "id" : "b466b804-a820-47c7-a042-fe6938afc1a9",
    "prId" : 827,
    "prUrl" : "https://github.com/zio/zio/pull/827#pullrequestreview-233919164",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f39f32d1-0fae-4881-96e5-735277241f6c",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Love to see these methods on `ZManaged`! Over time, `ZManaged` should become about as powerful as `ZIO`...",
        "createdAt" : "2019-05-06T07:50:13Z",
        "updatedAt" : "2019-05-10T23:36:54Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "001606fc-88d9-4e52-942a-726e5dba1cfc",
        "parentId" : "f39f32d1-0fae-4881-96e5-735277241f6c",
        "authorId" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "body" : "Agreed. I plan to do another pr shortly after where I just port all the stuff from ZIO to ZManaged",
        "createdAt" : "2019-05-06T10:49:13Z",
        "updatedAt" : "2019-05-10T23:36:54Z",
        "lastEditedBy" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d225af61375e0efdfbbf195613198405b304da65",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +107,111 @@    }\n\n  final def catchAll[R1 <: R, E2, A1 >: A](h: E => ZManaged[R1, E2, A1]) =\n    self.foldM(h, ZManaged.succeed)\n"
  },
  {
    "id" : "a03a29bc-f1ee-4dc2-8fff-37b42a61cf20",
    "prId" : 827,
    "prUrl" : "https://github.com/zio/zio/pull/827#pullrequestreview-235767407",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38fe34f0-07d5-4a0e-9447-bedbb828caa9",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Let's make sure to apply the adjustments re `restore` from the other PR here as well",
        "createdAt" : "2019-05-09T19:05:29Z",
        "updatedAt" : "2019-05-10T23:36:54Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "d225af61375e0efdfbbf195613198405b304da65",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +82,86 @@        Reservation(\n          acquire = {\n            val direct =\n              ZIO.uninterruptibleMask { restore =>\n                self.reserve"
  },
  {
    "id" : "3c26f1d4-d393-46ab-8298-bc2309fe959e",
    "prId" : 710,
    "prUrl" : "https://github.com/zio/zio/pull/710#pullrequestreview-220750376",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fbd541e8-4acd-4793-884b-ac786f9bec25",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Looks great, maybe worth duplicating some Scaladoc here to save people the trouble.",
        "createdAt" : "2019-03-29T20:46:55Z",
        "updatedAt" : "2019-04-12T08:21:21Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "f455c0a796add456d1c37b16e48552513900373b",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +130,134 @@   * Lifts a pure `Reservation[R, E, A]` into `ZManaged[R, E, A]`\n   */\n  final def reserve[R, E, A](reservation: Reservation[R, E, A]): ZManaged[R, E, A] =\n    ZManaged(ZIO.succeed(reservation))\n"
  }
]