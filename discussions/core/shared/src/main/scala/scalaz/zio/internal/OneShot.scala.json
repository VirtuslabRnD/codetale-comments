[
  {
    "id" : "3de07f46-f51a-4f9a-9b3e-14960e972e33",
    "prId" : 452,
    "prUrl" : "https://github.com/zio/zio/pull/452#pullrequestreview-187579536",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82d98498-c650-4d92-8a24-a9f013ce757d",
        "parentId" : null,
        "authorId" : "1a6431ea-d176-4aa9-b17c-bd9fdcc9423a",
        "body" : "The Javadoc for `wait` indicates that spurious wake ups are possible (https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#wait(long)).\r\n\r\nI see the reason for adding this is so `unsafeRunSync` can be called with a timeout (nowhere else if I'm not mistaken?). You previously mentioned that you would like for the RTS to be like a \"microkernel\" for executing `IO`s. Since timeout can be expressed in terms of `IO`, is this following in that vein?",
        "createdAt" : "2018-12-14T20:55:21Z",
        "updatedAt" : "2018-12-16T00:00:49Z",
        "lastEditedBy" : "1a6431ea-d176-4aa9-b17c-bd9fdcc9423a",
        "tags" : [
        ]
      },
      {
        "id" : "8687ed6c-5cf8-4dc3-933b-aedc2cbd9f9b",
        "parentId" : "82d98498-c650-4d92-8a24-a9f013ce757d",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Debug code. Fixed, thanks!",
        "createdAt" : "2018-12-15T02:53:00Z",
        "updatedAt" : "2018-12-16T00:00:49Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "3b03135b-ee94-46a9-97d9-d3d3b9a5ba63",
        "parentId" : "82d98498-c650-4d92-8a24-a9f013ce757d",
        "authorId" : "1a6431ea-d176-4aa9-b17c-bd9fdcc9423a",
        "body" : "`wait` can be woken up without a corresponding `notify`/`notifyAll` according to the javadocs, in which case this method would throw before the actual timeout expired. is that ok ?",
        "createdAt" : "2018-12-15T22:13:20Z",
        "updatedAt" : "2018-12-16T00:00:49Z",
        "lastEditedBy" : "1a6431ea-d176-4aa9-b17c-bd9fdcc9423a",
        "tags" : [
        ]
      },
      {
        "id" : "42bada13-1c81-454a-b74e-f3fc5e755104",
        "parentId" : "82d98498-c650-4d92-8a24-a9f013ce757d",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I need to fix that too. I changed it from the old while loop. Followup PR.",
        "createdAt" : "2018-12-22T04:17:48Z",
        "updatedAt" : "2018-12-22T04:17:48Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "3eb71c8c2a3962595c473e2f4e5c4bae6f60c82e",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +35,39 @@    if (value == null) {\n      this.synchronized {\n        if (value == null) this.wait(timeout)\n      }\n"
  },
  {
    "id" : "4096edbd-c225-41f1-91d2-97b61a452064",
    "prId" : 391,
    "prUrl" : "https://github.com/zio/zio/pull/391#pullrequestreview-179445131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8b2fa10-6b21-4ccd-bf98-26d023243701",
        "parentId" : null,
        "authorId" : "1a6431ea-d176-4aa9-b17c-bd9fdcc9423a",
        "body" : "I've seen this expressed like so:\r\n```scala\r\nthis.synchronized {\r\n  while (value == null) {\r\n    this.wait()\r\n  }\r\n}\r\n```",
        "createdAt" : "2018-11-28T18:13:33Z",
        "updatedAt" : "2018-11-28T18:30:33Z",
        "lastEditedBy" : "1a6431ea-d176-4aa9-b17c-bd9fdcc9423a",
        "tags" : [
        ]
      },
      {
        "id" : "65dbff93-4444-47fd-b7f8-02ceb831863c",
        "parentId" : "b8b2fa10-6b21-4ccd-bf98-26d023243701",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "That pattern will _always_ lock. It makes sense to short-circuit and lock only if necessary (if `value != null` then there's no point in acquiring the lock).",
        "createdAt" : "2018-11-28T18:18:23Z",
        "updatedAt" : "2018-11-28T18:30:33Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "521fa47912f57f85c37699ba0d3e8cb53452d2d2",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +30,34 @@    while (value == null) {\n      this.synchronized {\n        if (value == null) this.wait()\n      }\n    }"
  },
  {
    "id" : "04b6dcc4-68dc-46b3-9cb7-436b2d552b89",
    "prId" : 391,
    "prUrl" : "https://github.com/zio/zio/pull/391#pullrequestreview-179447443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbf22642-7be5-46d2-860f-76605a95f9b9",
        "parentId" : null,
        "authorId" : "1a6431ea-d176-4aa9-b17c-bd9fdcc9423a",
        "body" : "since `synchronized` is used in the implementation, is this declared non-private and volatile so the value can be fetched without blocking?",
        "createdAt" : "2018-11-28T18:15:20Z",
        "updatedAt" : "2018-11-28T18:30:33Z",
        "lastEditedBy" : "1a6431ea-d176-4aa9-b17c-bd9fdcc9423a",
        "tags" : [
        ]
      },
      {
        "id" : "53095382-ef55-452c-af8c-be3dbc558943",
        "parentId" : "cbf22642-7be5-46d2-860f-76605a95f9b9",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "`synchronized` ensures exclusive access to state modification (it's used like a lock here) and that listeners can receive notification when the state is changed, while `@volatile` ensures all threads access a consistent version of the state, rather than a stale copy.",
        "createdAt" : "2018-11-28T18:20:04Z",
        "updatedAt" : "2018-11-28T18:30:33Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "55b8594d-574f-40e0-9d82-a8a92c047883",
        "parentId" : "cbf22642-7be5-46d2-860f-76605a95f9b9",
        "authorId" : "1a6431ea-d176-4aa9-b17c-bd9fdcc9423a",
        "body" : "Got it, this makes more sense to me with the optimization in `get` you made",
        "createdAt" : "2018-11-28T18:23:36Z",
        "updatedAt" : "2018-11-28T18:30:33Z",
        "lastEditedBy" : "1a6431ea-d176-4aa9-b17c-bd9fdcc9423a",
        "tags" : [
        ]
      }
    ],
    "commit" : "521fa47912f57f85c37699ba0d3e8cb53452d2d2",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +6,10 @@ * effectful equivalent of `Promise`.\n */\nprivate[zio] class OneShot[A] private (@volatile var value: A) {\n\n  /**"
  }
]