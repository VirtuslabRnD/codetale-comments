[
  {
    "id" : "c248fb69-c02a-4edb-ad76-af14274378ca",
    "prId" : 613,
    "prUrl" : "https://github.com/zio/zio/pull/613#pullrequestreview-212165695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0908bb71-0677-470f-9356-43cf33ccee75",
        "parentId" : null,
        "authorId" : "bad22193-a0ec-4736-a528-dcb8b6223b09",
        "body" : "Use `Void` instead of `Nothing`.",
        "createdAt" : "2019-03-08T05:29:23Z",
        "updatedAt" : "2019-03-08T08:39:33Z",
        "lastEditedBy" : "bad22193-a0ec-4736-a528-dcb8b6223b09",
        "tags" : [
        ]
      },
      {
        "id" : "8a9bff5f-fab9-4153-9812-5993aced4654",
        "parentId" : "0908bb71-0677-470f-9356-43cf33ccee75",
        "authorId" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "body" : "Why?",
        "createdAt" : "2019-03-08T07:22:02Z",
        "updatedAt" : "2019-03-08T08:39:33Z",
        "lastEditedBy" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "2529d58996f440a0300df969d210cd7dd2642f01",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +28,32 @@  queue: MutableConcurrentQueue[A],\n  takers: MutableConcurrentQueue[Promise[Nothing, A]],\n  shutdownHook: Promise[Nothing, Unit],\n  strategy: Strategy[A]\n) extends Serializable {"
  },
  {
    "id" : "1a2b74f8-da68-4919-a7a9-d0332d2c13f6",
    "prId" : 613,
    "prUrl" : "https://github.com/zio/zio/pull/613#pullrequestreview-212144910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77c02d90-9f73-4bad-b136-1fec3f6e0ecf",
        "parentId" : null,
        "authorId" : "bad22193-a0ec-4736-a528-dcb8b6223b09",
        "body" : "`Void` not `Nothing`.",
        "createdAt" : "2019-03-08T05:29:43Z",
        "updatedAt" : "2019-03-08T08:39:33Z",
        "lastEditedBy" : "bad22193-a0ec-4736-a528-dcb8b6223b09",
        "tags" : [
        ]
      }
    ],
    "commit" : "2529d58996f440a0300df969d210cd7dd2642f01",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +415,419 @@  private final def createQueue[A](queue: MutableConcurrentQueue[A], strategy: Strategy[A]): UIO[Queue[A]] =\n    Promise\n      .make[Nothing, Unit]\n      .map(p => new Queue[A](queue, MutableConcurrentQueue.unbounded[Promise[Nothing, A]], p, strategy))\n"
  },
  {
    "id" : "143c0653-15f1-4a52-ae1f-21793af753fc",
    "prId" : 462,
    "prUrl" : "https://github.com/zio/zio/pull/462#pullrequestreview-187646304",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8083ec4-0229-4e5b-bc9f-e728854220c3",
        "parentId" : null,
        "authorId" : "73db9f28-01ba-4a29-946b-7a2ae5ac5350",
        "body" : "Nice simplification!",
        "createdAt" : "2018-12-24T05:05:15Z",
        "updatedAt" : "2018-12-27T21:40:46Z",
        "lastEditedBy" : "73db9f28-01ba-4a29-946b-7a2ae5ac5350",
        "tags" : [
        ]
      }
    ],
    "commit" : "78638151825a530949dd853a00c618bb3810159f",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +167,171 @@                    takers.offer(p)\n                    unsafeCompleteTakers(context)\n                  } *> p.get).onInterrupt(removeTaker(p))\n\n            } yield a"
  },
  {
    "id" : "038c4108-7786-46dd-8a21-2cdeaaa6bc71",
    "prId" : 462,
    "prUrl" : "https://github.com/zio/zio/pull/462#pullrequestreview-187917489",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67ba7f3a-1b99-40ef-9c27-d85bfd56cce0",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "üëç ",
        "createdAt" : "2018-12-26T15:50:30Z",
        "updatedAt" : "2018-12-27T21:40:46Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "78638151825a530949dd853a00c618bb3810159f",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +332,336 @@                unsafeOffer(as, p)\n                unsafeOnQueueEmptySpace(queue, context)\n              } *> p.get).onInterrupt(IO.sync(unsafeRemove(p)))\n        } yield true\n      }"
  },
  {
    "id" : "c6edf2a4-25b2-4d41-ba0b-3474bf70876e",
    "prId" : 389,
    "prUrl" : "https://github.com/zio/zio/pull/389#pullrequestreview-179578975",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "165e7611-19d6-45ae-a3a1-d88557a0410f",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Seeing as how this is backed by the ring buffer now, I'm tempted to make `offer(a: A)` the primitive operation, so it will be fastest, and implement `offerAll` in the simplest way: `IO.traverse(as)(offer(_))`. A ring buffer is not ideally suited to \"batch upload\" but is fast enough it's probably not necessary to specialize that.",
        "createdAt" : "2018-11-28T18:39:33Z",
        "updatedAt" : "2018-12-03T07:55:01Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "a0885b13-00a7-458c-b0e8-c62f0a8f3763",
        "parentId" : "165e7611-19d6-45ae-a3a1-d88557a0410f",
        "authorId" : "73db9f28-01ba-4a29-946b-7a2ae5ac5350",
        "body" : "I initially did that but I changed to the current code for 2 reasons:\r\n- it's faster to do the batch offer in a single `unsafe` method rather than going through an IO loop for each item\r\n- in BackPressure strategy, we're enqueuing all the items in `putters` at once. If we implement `offerAll` using `offer`, we will only enqueue the first item then wait until it's processed, then we will enqueue the second item, etc. It means multiple calls to `offerAll` will not be processed in order.",
        "createdAt" : "2018-11-28T23:59:04Z",
        "updatedAt" : "2018-12-03T07:55:01Z",
        "lastEditedBy" : "73db9f28-01ba-4a29-946b-7a2ae5ac5350",
        "tags" : [
        ]
      },
      {
        "id" : "138314e9-3dd2-4ea2-9cc1-1385da15d138",
        "parentId" : "165e7611-19d6-45ae-a3a1-d88557a0410f",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Sounds good. üëç ",
        "createdAt" : "2018-11-29T00:14:05Z",
        "updatedAt" : "2018-12-03T07:55:01Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "7cb229ed92dbf0330f2545e7b12a727dc92fc493",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +77,81 @@   *\n   */\n  final def offerAll(as: Iterable[A]): IO[Nothing, Boolean] =\n    for {\n      _ <- checkShutdownState"
  },
  {
    "id" : "92f11aac-370a-4207-b173-9d955a044a8b",
    "prId" : 353,
    "prUrl" : "https://github.com/zio/zio/pull/353#pullrequestreview-172216686",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acb680c5-c29a-4bb0-b27c-ba15a6599e89",
        "parentId" : null,
        "authorId" : "4ace600a-1453-4cce-81f8-efdc7c98ad7a",
        "body" : "Queue should ` extends Serializable`  then check the `SerializableSpec`",
        "createdAt" : "2018-11-06T13:29:39Z",
        "updatedAt" : "2018-11-11T18:55:29Z",
        "lastEditedBy" : "4ace600a-1453-4cce-81f8-efdc7c98ad7a",
        "tags" : [
        ]
      },
      {
        "id" : "1718a5b9-080b-40de-8067-8fffc10a51a9",
        "parentId" : "acb680c5-c29a-4bb0-b27c-ba15a6599e89",
        "authorId" : "0dd4c9ab-8166-419e-90a0-a120dc5b4845",
        "body" : "Thanks, @wi101 !",
        "createdAt" : "2018-11-06T20:05:23Z",
        "updatedAt" : "2018-11-11T18:55:29Z",
        "lastEditedBy" : "0dd4c9ab-8166-419e-90a0-a120dc5b4845",
        "tags" : [
        ]
      },
      {
        "id" : "4a2f5883-64a0-4f60-bc29-27c29e5b22f3",
        "parentId" : "acb680c5-c29a-4bb0-b27c-ba15a6599e89",
        "authorId" : "0dd4c9ab-8166-419e-90a0-a120dc5b4845",
        "body" : "Once this is merged I'll do the same for scalaz-ioqueue",
        "createdAt" : "2018-11-06T20:26:17Z",
        "updatedAt" : "2018-11-11T18:55:29Z",
        "lastEditedBy" : "0dd4c9ab-8166-419e-90a0-a120dc5b4845",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c547f553dd6b9f0efca647df6b9fcd3df589243",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +9,13 @@ *  A `Queue[A]` is a lightweight, asynchronous queue for values of type `A`.\n */\nclass Queue[A] private (\n  capacity: Option[Int],\n  ref: Ref[State[A]],"
  },
  {
    "id" : "31f4fced-1519-4a06-915b-032a13ddaebc",
    "prId" : 353,
    "prUrl" : "https://github.com/zio/zio/pull/353#pullrequestreview-173708850",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55408017-6c98-4221-bb41-0b96ec2e868f",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "There is no need for the `io` parameter. Please see the implementation of `awaitShutdown` that I provided previously.\r\n\r\nIn this model, the returned `IO` will not resume until shutdown is complete. So there is no need for `io`. If I didn't make any mistakes (probably I made some üòÑ), you should be able to copy/paste the definition of `awaitShutdown` that I provided.",
        "createdAt" : "2018-11-11T17:43:18Z",
        "updatedAt" : "2018-11-11T18:55:29Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "4002fb6a-b206-4f5b-90e4-5b7718956791",
        "parentId" : "55408017-6c98-4221-bb41-0b96ec2e868f",
        "authorId" : "4ace600a-1453-4cce-81f8-efdc7c98ad7a",
        "body" : "@jdegoes I copy/paste the definition of `awaitShutdown` (it's the same) but the `io` made me confused :/ so I added it in parameter.\r\nhow can we add a hook if we don't need an `io` in parameter ?",
        "createdAt" : "2018-11-11T17:49:14Z",
        "updatedAt" : "2018-11-11T18:55:29Z",
        "lastEditedBy" : "4ace600a-1453-4cce-81f8-efdc7c98ad7a",
        "tags" : [
        ]
      },
      {
        "id" : "5ffc3368-d341-45d4-9932-440cdbe401c8",
        "parentId" : "55408017-6c98-4221-bb41-0b96ec2e868f",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "You can see in my definition, I did:\r\n\r\n```scala\r\nval hook = promise.complete(())\r\n```\r\n\r\nThe hook completes the promise whose `get` is returned from by `awaitShutdown`.",
        "createdAt" : "2018-11-11T17:50:10Z",
        "updatedAt" : "2018-11-11T18:55:29Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "2d7f199f-21d2-4623-92f6-8281ae38d08c",
        "parentId" : "55408017-6c98-4221-bb41-0b96ec2e868f",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "@wi101 Oops I made an error, it should be:\r\n\r\n```scala\r\nfinal def awaitShutdown: IO[Nothing, Unit] = \r\n  Promise.make[Nothing, Unit].flatMap(promise => {\r\n    val io = promise.complete(())\r\n    IO.flatten(ref.modify {\r\n      case Deficit(takers, hook)         => IO.unit -> Deficit(takers, hook *> io)\r\n      case Surplus(queue, putters, hook) => IO.unit -> Surplus(queue, putters, hook *> io)\r\n      case state @ Shutdown              => io      -> state\r\n    }) *> promise.get\r\n  })\r\n```",
        "createdAt" : "2018-11-11T17:55:44Z",
        "updatedAt" : "2018-11-11T18:55:29Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "b2aeaf8e-3347-45a4-a67f-b5c70695bf08",
        "parentId" : "55408017-6c98-4221-bb41-0b96ec2e868f",
        "authorId" : "4ace600a-1453-4cce-81f8-efdc7c98ad7a",
        "body" : "I saw that and in your definition there is `io`.\r\nOK, so the implementation would be like this:\r\n```scala\r\nfinal def awaitShutdown: IO[Nothing, Unit] = \r\n  Promise.make[Nothing, Unit].flatMap(promise => {\r\n    val hook = promise.complete(())\r\n    IO.flatten(ref.modifySome(IO.unit) {\r\n     case state @ Shutdown              => hook -> state\r\n    }) *> promise.get\r\n  })\r\n```\r\nIs that correct?",
        "createdAt" : "2018-11-11T17:57:16Z",
        "updatedAt" : "2018-11-11T18:55:29Z",
        "lastEditedBy" : "4ace600a-1453-4cce-81f8-efdc7c98ad7a",
        "tags" : [
        ]
      },
      {
        "id" : "01d40e48-3969-4fe2-8177-8e37fbccc9fc",
        "parentId" : "55408017-6c98-4221-bb41-0b96ec2e868f",
        "authorId" : "4ace600a-1453-4cce-81f8-efdc7c98ad7a",
        "body" : "Ah ok now sounds clear, @jdegoes thanks",
        "createdAt" : "2018-11-11T18:00:07Z",
        "updatedAt" : "2018-11-11T18:55:29Z",
        "lastEditedBy" : "4ace600a-1453-4cce-81f8-efdc7c98ad7a",
        "tags" : [
        ]
      },
      {
        "id" : "689a01d5-9623-4b51-a026-d2e228f4e590",
        "parentId" : "55408017-6c98-4221-bb41-0b96ec2e868f",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Sorry for the confusion. üòä ",
        "createdAt" : "2018-11-11T18:04:21Z",
        "updatedAt" : "2018-11-11T18:55:29Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "67c27479-2491-4bfe-960d-776c43aaae74",
        "parentId" : "55408017-6c98-4221-bb41-0b96ec2e868f",
        "authorId" : "4ace600a-1453-4cce-81f8-efdc7c98ad7a",
        "body" : "No problem, thank you for the explanation, I pushed the change",
        "createdAt" : "2018-11-11T18:28:36Z",
        "updatedAt" : "2018-11-11T18:55:29Z",
        "lastEditedBy" : "4ace600a-1453-4cce-81f8-efdc7c98ad7a",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c547f553dd6b9f0efca647df6b9fcd3df589243",
    "line" : 205,
    "diffHunk" : "@@ -1,1 +171,175 @@   */\n  final def awaitShutdown: IO[Nothing, Unit] =\n    Promise\n      .make[Nothing, Unit]\n      .flatMap(promise => {"
  },
  {
    "id" : "1340b1aa-0564-4a0e-97dc-6d7591a274be",
    "prId" : 289,
    "prUrl" : "https://github.com/zio/zio/pull/289#pullrequestreview-164778258",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2db26e78-f02f-4e08-93b3-e7548c60d379",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "In order for this to have any meaning, the `State` and of course `Ref` must be serializable.",
        "createdAt" : "2018-10-09T13:56:04Z",
        "updatedAt" : "2018-10-20T03:42:43Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "921413f5-b078-4000-b183-585179c13a1a",
        "parentId" : "2db26e78-f02f-4e08-93b3-e7548c60d379",
        "authorId" : "72da57fb-a549-4ffe-806f-c498c78f3a6e",
        "body" : "```State``` I marked as ```Serializable``` , but Ref is AnyVal, so perhaps we cannot make ```Queue```  serializable ?",
        "createdAt" : "2018-10-10T03:25:51Z",
        "updatedAt" : "2018-10-20T03:42:43Z",
        "lastEditedBy" : "72da57fb-a549-4ffe-806f-c498c78f3a6e",
        "tags" : [
        ]
      },
      {
        "id" : "97b1775d-25cf-4053-a934-10add679b71d",
        "parentId" : "2db26e78-f02f-4e08-93b3-e7548c60d379",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "We can change `Ref` so it is no longer `AnyVal`.",
        "createdAt" : "2018-10-15T16:01:16Z",
        "updatedAt" : "2018-10-20T03:42:43Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "7487846a5948218c37ad4b31a489cc25acc821f7",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +18,22 @@¬†*¬† ¬† easy ways to improve performance.\n¬†*/\nclass Queue[A] private (capacity: Int, ref: Ref[State[A]]) extends Serializable {\n\n  /**"
  }
]