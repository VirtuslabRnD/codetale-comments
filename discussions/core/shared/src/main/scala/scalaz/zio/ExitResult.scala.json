[
  {
    "id" : "5d857cc7-4557-4139-95f1-1c21f4ec12b5",
    "prId" : 397,
    "prUrl" : "https://github.com/zio/zio/pull/397#pullrequestreview-179884561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ddf9c06-3c65-4e86-b052-60230f8d33ea",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "👍 Makes more sense! Also I think the `toEither` in `unsafeRun` could be replaced with:\r\n```scala\r\ndef unsafeRun[E, A](io: IO[E, A]): A = \r\n  unsafeRunSync(io).leftMap(FiberFailure).fold(throw _, identity)\r\n```",
        "createdAt" : "2018-11-29T10:17:14Z",
        "updatedAt" : "2018-11-29T16:47:40Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "85c192ae-ef87-414d-9af8-3ec3e27cbad5",
        "parentId" : "2ddf9c06-3c65-4e86-b052-60230f8d33ea",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Done! 👍 (Well, almost, types didn't quite work out since leftMap only maps over the `E`, but I got close.)",
        "createdAt" : "2018-11-29T16:20:22Z",
        "updatedAt" : "2018-11-29T16:47:40Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecd7e7f21f9080b3facbc2a9acaea1ed1b64c715",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +93,97 @@   * Folds over the value or cause.\n   */\n  final def fold[Z](failed: Cause[E] => Z, completed: A => Z): Z =\n    self match {\n      case Succeeded(v)  => completed(v)"
  },
  {
    "id" : "33f0e71f-1aa8-4174-af98-5d51bfd35db2",
    "prId" : 342,
    "prUrl" : "https://github.com/zio/zio/pull/342#pullrequestreview-171692553",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d4a0bae-5689-477f-b0bc-b59495dd13b8",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "As long as we are making these mega-changes, I suggest the following:\r\n\r\n`Failure` => `Checked`\r\n`Exception` => `Unchecked`",
        "createdAt" : "2018-11-05T15:22:13Z",
        "updatedAt" : "2018-11-09T01:44:35Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "29505abc-4e0f-4ec3-a91e-98be9126bbc9",
        "parentId" : "1d4a0bae-5689-477f-b0bc-b59495dd13b8",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "This is kind of veering off the terminology you described [in that ticket](https://github.com/scalaz/scalaz-zio/issues/330), isn't that going to muddy the waters?",
        "createdAt" : "2018-11-05T16:38:40Z",
        "updatedAt" : "2018-11-09T01:44:35Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "68e94dc5-3fdb-4f59-b7ac-0d9ed10ea77f",
        "parentId" : "1d4a0bae-5689-477f-b0bc-b59495dd13b8",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "It's true. I just wrote up a [v2](\r\nhttps://github.com/scalaz/scalaz-zio/issues/330) that simplifies terminology.",
        "createdAt" : "2018-11-05T18:22:23Z",
        "updatedAt" : "2018-11-09T01:44:35Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a03e319bc75fd45669400738c0a1117e86bb1a5",
    "line" : 168,
    "diffHunk" : "@@ -1,1 +150,154 @@    final case class Unchecked(value: Throwable) extends Cause[Nothing]\n    final case object Interruption               extends Cause[Nothing]\n\n    final case class Then[E](left: Cause[E], right: Cause[E]) extends Cause[E] { self =>\n      final def flatten: Set[Cause[E]] = {"
  },
  {
    "id" : "4c3ebb89-a285-4ac9-87d0-860d2cadc486",
    "prId" : 342,
    "prUrl" : "https://github.com/zio/zio/pull/342#pullrequestreview-172577027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9710ab2-2ba8-4ad5-a384-a2e01448a3d6",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "@regiskuckaertz We should try to make this type safe later.",
        "createdAt" : "2018-11-07T15:59:57Z",
        "updatedAt" : "2018-11-09T01:44:35Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "d4432e16-6565-49b6-aa82-83864cb464da",
        "parentId" : "e9710ab2-2ba8-4ad5-a384-a2e01448a3d6",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Yes, definitely 👍 ",
        "createdAt" : "2018-11-07T16:26:20Z",
        "updatedAt" : "2018-11-09T01:44:35Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a03e319bc75fd45669400738c0a1117e86bb1a5",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +80,84 @@  sealed abstract class Cause[+E] extends Product with Serializable { self =>\n    import Cause._\n    final def ++[E1 >: E](that: Cause[E1]): Cause[E1] =\n      Then(self, that)\n"
  },
  {
    "id" : "b9ad6c3e-e961-4288-8822-2a8d35c6d3a5",
    "prId" : 342,
    "prUrl" : "https://github.com/zio/zio/pull/342#pullrequestreview-172870468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f76cab46-ed4d-4ff8-8f2a-8849895f65a0",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "`toEither` would work too, but this is just my personal taste.",
        "createdAt" : "2018-11-08T09:37:47Z",
        "updatedAt" : "2018-11-09T01:44:35Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a03e319bc75fd45669400738c0a1117e86bb1a5",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +133,137 @@      }\n\n    final def checkedOrRefail: Either[E, Cause[Nothing]] = self.checked.headOption match {\n      case Some(error) => Left(error)\n      case None        => Right(self.asInstanceOf[Cause[Nothing]]) // no E inside this cause, can safely cast"
  }
]