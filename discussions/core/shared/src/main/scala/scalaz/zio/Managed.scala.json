[
  {
    "id" : "0c173957-e7a7-44e0-8479-b70df88e96b7",
    "prId" : 582,
    "prUrl" : "https://github.com/zio/zio/pull/582#pullrequestreview-208927017",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a94714f-c648-4c9c-8113-b4c9c8a2f246",
        "parentId" : null,
        "authorId" : "73db9f28-01ba-4a29-946b-7a2ae5ac5350",
        "body" : "Shouldn't `release` be a `ZIO[R1, Nothing, _]`? Similar to `IO.bracket`?",
        "createdAt" : "2019-02-28T07:48:39Z",
        "updatedAt" : "2019-02-28T07:48:39Z",
        "lastEditedBy" : "73db9f28-01ba-4a29-946b-7a2ae5ac5350",
        "tags" : [
        ]
      }
    ],
    "commit" : "5078c29102f8cc506ac0375ad39f8de426baf478",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +100,104 @@   * Lifts an `IO[E, R]`` into `Managed[E, R]`` with a release action.\n   */\n  final def make[R, E, A](acquire: ZIO[R, E, A])(release: A => UIO[_]): Managed[R, E, A] =\n    Managed(acquire.map(r => Reservation(IO.succeed(r), release(r))))\n"
  },
  {
    "id" : "1f27ceff-3cfe-4502-b4d1-4acff78a43ea",
    "prId" : 557,
    "prUrl" : "https://github.com/zio/zio/pull/557#pullrequestreview-201325449",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f75bc2ac-ba2a-405b-9050-5f488d486101",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Looks good, and you're right, with this, we don't need `Managed.interruptible`.",
        "createdAt" : "2019-02-07T21:09:50Z",
        "updatedAt" : "2019-02-07T21:43:27Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "87e2129b447c8c83836476fbf5865cc818b0c70e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +12,16 @@ * some checked error, as per the type of the functions provided by the resource.\n */\nfinal case class Managed[+E, +R](reserve: IO[E, Managed.Reservation[E, R]]) { self =>\n  import Managed.Reservation\n"
  },
  {
    "id" : "d1d58d93-2650-4749-85b0-0e75ea8fa38a",
    "prId" : 557,
    "prUrl" : "https://github.com/zio/zio/pull/557#pullrequestreview-201330765",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86e8a711-c0a8-4d18-894b-e86b0d79196e",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "We should probably add a test to make sure the ordering of finalizers is preserved (e.g. the inner one is released before the outer one). The logic looks fine but it would be easy to get this wrong in maintaining this code...",
        "createdAt" : "2019-02-07T21:15:36Z",
        "updatedAt" : "2019-02-07T21:43:27Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "3cea75ec-17f8-46a6-b985-855bf2e2684d",
        "parentId" : "86e8a711-c0a8-4d18-894b-e86b0d79196e",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Yes definitely. The tests we have in place for Managed verify that the order is maintained (and caught an error I made when developing this).",
        "createdAt" : "2019-02-07T21:22:38Z",
        "updatedAt" : "2019-02-07T21:43:27Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "87e2129b447c8c83836476fbf5865cc818b0c70e",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +36,40 @@            r <- resR.acquire\n            resR1 <- f0(r).reserve\n                      .flatMap(res => finalizers.update(fs => res.release *> fs).const(res))\n                      .uninterruptible\n            r1 <- resR1.acquire"
  },
  {
    "id" : "6dbd693d-e895-4e9b-9a8c-837770de6209",
    "prId" : 557,
    "prUrl" : "https://github.com/zio/zio/pull/557#pullrequestreview-201328674",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e24f0d5-3ba3-4eec-bfd9-61ea3cf0d337",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Gotta love Ref, it makes this kind of code so simple!",
        "createdAt" : "2019-02-07T21:17:44Z",
        "updatedAt" : "2019-02-07T21:43:27Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "87e2129b447c8c83836476fbf5865cc818b0c70e",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +65,69 @@              self.reserve.flatMap(res => finalizers.update(fs => res.release *> fs).const(res)).uninterruptible\n            val right =\n              that.reserve.flatMap(res => finalizers.update(fs => res.release *> fs).const(res)).uninterruptible\n\n            left.flatMap(_.acquire).zipWithPar(right.flatMap(_.acquire))(f0)"
  },
  {
    "id" : "afa92303-2cde-4704-ae54-e6bbdb84e375",
    "prId" : 557,
    "prUrl" : "https://github.com/zio/zio/pull/557#pullrequestreview-201329331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f0e55e1-d288-4cfc-b7ba-566028d9161b",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Looks correct to me.",
        "createdAt" : "2019-02-07T21:19:19Z",
        "updatedAt" : "2019-02-07T21:43:27Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "87e2129b447c8c83836476fbf5865cc818b0c70e",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +67,71 @@              that.reserve.flatMap(res => finalizers.update(fs => res.release *> fs).const(res)).uninterruptible\n\n            left.flatMap(_.acquire).zipWithPar(right.flatMap(_.acquire))(f0)\n          },\n          release = IO.flatten(finalizers.get)"
  },
  {
    "id" : "0d3715b6-a430-461b-86da-bde9de482b65",
    "prId" : 252,
    "prUrl" : "https://github.com/zio/zio/pull/252#pullrequestreview-156559001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "421e792d-dd28-411e-8816-5460e07a0909",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Can we use `final` on all these methods?",
        "createdAt" : "2018-09-18T19:24:00Z",
        "updatedAt" : "2018-09-18T20:39:10Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "791da640-62d0-4d7b-b018-b1c19b4446b3",
        "parentId" : "421e792d-dd28-411e-8816-5460e07a0909",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Yes, except for `use` :-)",
        "createdAt" : "2018-09-18T20:40:19Z",
        "updatedAt" : "2018-09-18T20:40:19Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "1dae80aa1d1552808cc4f32e694a77e41d9317b1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2,6 @@\nsealed abstract class Managed[+E, +R] { self =>\n  def use[E1 >: E, A](f: R => IO[E1, A]): IO[E1, A]\n\n  final def use_[E1 >: E, A](f: IO[E1, A]): IO[E1, A] ="
  },
  {
    "id" : "99441d74-bc09-4976-ae54-d3b966aadffa",
    "prId" : 252,
    "prUrl" : "https://github.com/zio/zio/pull/252#pullrequestreview-156559314",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d1b8e22-93c8-4025-8856-c624db2357a7",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Make sure this has same name as `IO`'s version.",
        "createdAt" : "2018-09-18T19:25:31Z",
        "updatedAt" : "2018-09-18T20:39:10Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "668868bd-2d1c-42ce-839e-ac4e205f5629",
        "parentId" : "3d1b8e22-93c8-4025-8856-c624db2357a7",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Verified that it does",
        "createdAt" : "2018-09-18T20:41:09Z",
        "updatedAt" : "2018-09-18T20:41:09Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "1dae80aa1d1552808cc4f32e694a77e41d9317b1",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +78,82 @@    }\n\n  def sequence[E, R, A](ms: Iterable[Managed[E, R]]): Managed[E, List[R]] =\n    traverse(ms)(identity)\n}"
  }
]