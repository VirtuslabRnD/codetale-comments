[
  {
    "id" : "26eea3eb-fed0-4dd0-9e18-cc96341802bc",
    "prId" : 698,
    "prUrl" : "https://github.com/zio/zio/pull/698#pullrequestreview-219035195",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea264168-953e-45dc-91a3-e6268cbdfbc0",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Scaladoc, please. 😄 ",
        "createdAt" : "2019-03-26T17:03:48Z",
        "updatedAt" : "2019-03-26T17:08:11Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba34bb75902074879e565c80086d4465c076d176",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +43,47 @@   * already been completed with a value or an error and false otherwise.\n   */\n  final def isDone: UIO[Boolean] =\n    IO.effectTotal(state.get() match {\n      case Done(_)    => true"
  },
  {
    "id" : "67733e57-bfac-4440-9ccc-bbed48f3e26f",
    "prId" : 469,
    "prUrl" : "https://github.com/zio/zio/pull/469#pullrequestreview-186288497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "234a3716-404e-4628-a195-f7b7fa6fbb6a",
        "parentId" : null,
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "Big 👍 ",
        "createdAt" : "2018-12-18T21:33:32Z",
        "updatedAt" : "2019-01-09T13:58:26Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      }
    ],
    "commit" : "b13d950861eb4a09791e16a8ff6d56b0516540b5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +29,33 @@   * until the result is available.\n   */\n  final def await: IO[E, A] =\n    IO.asyncInterrupt[E, A](k => {\n      var result = null.asInstanceOf[Either[Canceler, IO[E, A]]]"
  },
  {
    "id" : "a1356ac7-1e2b-4fc8-8d86-6faae46ff1fa",
    "prId" : 452,
    "prUrl" : "https://github.com/zio/zio/pull/452#pullrequestreview-185356427",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c1f61b0-da7a-4153-9c47-1a7c7e697c95",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Is there a scenario where `value` would be something else than `IO.Fail` or `IO.Strict`? I wonder if we should enforce that with a `PureIO` type or something.",
        "createdAt" : "2018-12-15T08:12:02Z",
        "updatedAt" : "2018-12-16T00:00:49Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "f8399a4c-275a-42c5-84ff-b423d039b797",
        "parentId" : "1c1f61b0-da7a-4153-9c47-1a7c7e697c95",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "That would be `ExitResult`. 😆 \r\n\r\nI changed `Promise` mainly for performance reasons, to avoid less conversion between `ExitResult` and `IO`. However, this `Promise` is more powerful because you complete it with a \"continuation\" (the `IO`), so different fibers who `get` the promise may see different things. \r\n\r\nThis would let you build, for example, a promise that keeps track of how many fibers call `get` (via a `Ref` updated in the completed `IO`) or other types of things. It's not clearly harmful (if there's a way to misuse it, I can't see it) but it may lead to some interesting applications.",
        "createdAt" : "2018-12-15T14:28:02Z",
        "updatedAt" : "2018-12-16T00:00:49Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "3eb71c8c2a3962595c473e2f4e5c4bae6f60c82e",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +190,194 @@    sealed abstract class State[E, A]                               extends Serializable with Product\n    final case class Pending[E, A](joiners: List[IO[E, A] => Unit]) extends State[E, A]\n    final case class Done[E, A](value: IO[E, A])                    extends State[E, A]\n  }\n}"
  },
  {
    "id" : "b1d21827-f7f3-478b-a136-6489b88c265f",
    "prId" : 65,
    "prUrl" : "https://github.com/zio/zio/pull/65#pullrequestreview-135196676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b465c1e0-2670-442e-bf50-f77332e4739c",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "💯 ",
        "createdAt" : "2018-07-07T07:27:09Z",
        "updatedAt" : "2018-07-07T07:27:09Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "11668769df6e1c6d9346de49b760bce4e3e71812",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +128,132 @@  final def make[E, A]: IO[E, Promise[E, A]] = make0[E, E, A]\n\n  private final def unsafeMake[E, A]: Promise[E, A] =\n    new Promise[E, A](new AtomicReference[State[E, A]](new internal.Pending[E, A](Nil)))\n"
  }
]