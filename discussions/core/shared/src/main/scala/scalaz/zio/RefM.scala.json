[
  {
    "id" : "f6a1365b-2c74-4af5-937d-8a73dc7d7861",
    "prId" : 342,
    "prUrl" : "https://github.com/zio/zio/pull/342#pullrequestreview-171353867",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d5bba23-1468-4d39-9428-2a07638bbe48",
        "parentId" : null,
        "authorId" : "73db9f28-01ba-4a29-946b-7a2ae5ac5350",
        "body" : "I moved `ref.set` because there was a race condition making the tests fail occasionally.\r\n`ref.set` must be done before completing the promise, otherwise `refM.modify` returns before the value is actually set.",
        "createdAt" : "2018-11-04T05:36:24Z",
        "updatedAt" : "2018-11-09T01:44:35Z",
        "lastEditedBy" : "73db9f28-01ba-4a29-946b-7a2ae5ac5350",
        "tags" : [
        ]
      },
      {
        "id" : "6d138aa1-3a2d-4448-b22f-e12b70722bd8",
        "parentId" : "4d5bba23-1468-4d39-9428-2a07638bbe48",
        "authorId" : "73db9f28-01ba-4a29-946b-7a2ae5ac5350",
        "body" : "Submitted a dedicated PR #343 ",
        "createdAt" : "2018-11-04T09:42:29Z",
        "updatedAt" : "2018-11-09T01:44:35Z",
        "lastEditedBy" : "73db9f28-01ba-4a29-946b-7a2ae5ac5350",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a03e319bc75fd45669400738c0a1117e86bb1a5",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +73,77 @@        case None =>\n          update(a).sandboxed.redeem(onDefect, {\n            case (b, a) => ref.set(a) <* promise.complete(b)\n          })\n      }"
  },
  {
    "id" : "718669d7-c3ae-4e78-9d88-7d96e59c425e",
    "prId" : 301,
    "prUrl" : "https://github.com/zio/zio/pull/301#pullrequestreview-165284953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "189ba859-c356-4740-874c-a8a559d5461a",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Beautiful! So `Bundle` allows you to run all the updates in a separate fiber?\r\n\r\nI thought of another option you might want to add: updates could be composed in a `KleisliIO` and run only when someone calls `get`.",
        "createdAt" : "2018-10-16T19:54:13Z",
        "updatedAt" : "2018-10-16T22:04:18Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cbb2fcc252c99420b9b2e00ba365c15597777f5",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +91,95 @@      ref   <- Ref(a)\n      queue <- Queue.bounded[Bundle[A, _]](n)\n      _     <- queue.take.flatMap(b => ref.get.flatMap(a => b.run(a).redeem(onDefect, ref.set))).forever.fork\n    } yield new RefM[A](ref, queue)\n}"
  }
]