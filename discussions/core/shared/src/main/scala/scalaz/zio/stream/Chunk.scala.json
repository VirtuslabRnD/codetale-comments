[
  {
    "id" : "97674621-817c-492c-9499-4aeae03d2730",
    "prId" : 448,
    "prUrl" : "https://github.com/zio/zio/pull/448#pullrequestreview-183814314",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d239fb3-5f81-4a4b-bc65-87c1f511cf62",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Could you clarify why this is needed? Looks identical after inlining",
        "createdAt" : "2018-12-11T14:21:40Z",
        "updatedAt" : "2018-12-11T14:28:21Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "5ff231f7-cbc9-4b42-b811-ddf6ea5f4b5b",
        "parentId" : "8d239fb3-5f81-4a4b-bc65-87c1f511cf62",
        "authorId" : "c83bbe86-1484-4d60-a513-1b56afb6c46d",
        "body" : "In fact, `i` being a `var`, its value may have changed when accessed subsequently. And this is the case here. Therefore, it is necessary to copy the value (or in this case, the indexed value) beforehand.",
        "createdAt" : "2018-12-11T15:34:00Z",
        "updatedAt" : "2018-12-11T15:42:44Z",
        "lastEditedBy" : "c83bbe86-1484-4d60-a513-1b56afb6c46d",
        "tags" : [
        ]
      },
      {
        "id" : "a7183a8f-034d-4c32-a4c9-734cbc44f5b7",
        "parentId" : "8d239fb3-5f81-4a4b-bc65-87c1f511cf62",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Lol, of course. Thanks for pointing that out.",
        "createdAt" : "2018-12-11T17:42:47Z",
        "updatedAt" : "2018-12-11T17:42:47Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "55d17bd5d6aec154a9cf2007fcde65ce4ac31c14",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +424,428 @@\n    while (i < len) {\n      val a = self(i)\n      io = io *> f(a)\n      i += 1"
  },
  {
    "id" : "707d833e-59e7-4f23-9c20-6c6121c36ae1",
    "prId" : 448,
    "prUrl" : "https://github.com/zio/zio/pull/448#pullrequestreview-183740482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f770cb54-dead-46a7-ab78-f17718a4832f",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Same - could you clarify why this is needed? If I'm reading this right, `j` is equal to `i` in every iteration.",
        "createdAt" : "2018-12-11T14:25:29Z",
        "updatedAt" : "2018-12-11T14:28:21Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "2e4149eb-227a-4fbe-980d-f8cf4bb34eb9",
        "parentId" : "f770cb54-dead-46a7-ab78-f17718a4832f",
        "authorId" : "c83bbe86-1484-4d60-a513-1b56afb6c46d",
        "body" : "Same explanation: `j` is read asynchronously, and at that time, `i` no longer has the same value.",
        "createdAt" : "2018-12-11T15:42:22Z",
        "updatedAt" : "2018-12-11T15:42:44Z",
        "lastEditedBy" : "c83bbe86-1484-4d60-a513-1b56afb6c46d",
        "tags" : [
        ]
      }
    ],
    "commit" : "55d17bd5d6aec154a9cf2007fcde65ce4ac31c14",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +394,398 @@\n    while (i < len) {\n      val j = i\n      array = array.seqWith(f(self(j))) { (array, b) =>\n        val array2 = if (array == null) {"
  },
  {
    "id" : "a80b55e6-e91f-4a4b-a725-6f15a57d0c3f",
    "prId" : 374,
    "prUrl" : "https://github.com/zio/zio/pull/374#pullrequestreview-177162759",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0abc44c6-c552-427e-9b33-6610111254e0",
        "parentId" : null,
        "authorId" : "f28a8f34-0d9f-4cce-85ab-8a098f99584a",
        "body" : "just wondering if it would be faster to just make an initial guess, and copy the elements to an exponentially growing array (using array copies, since they can be linearised very well by the CPU).",
        "createdAt" : "2018-11-20T15:39:54Z",
        "updatedAt" : "2018-12-05T19:31:11Z",
        "lastEditedBy" : "f28a8f34-0d9f-4cce-85ab-8a098f99584a",
        "tags" : [
        ]
      },
      {
        "id" : "6287c0c8-bf4d-4dcb-980b-d623d222c4cc",
        "parentId" : "0abc44c6-c552-427e-9b33-6610111254e0",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Well, we do have the length of all the intermediate chunks at hand - it is computed anyway when constructing a chunk (`Chunk.length` is always a constant time operation). So `total` is not a guess and should be the accurate size.",
        "createdAt" : "2018-11-20T19:36:03Z",
        "updatedAt" : "2018-12-05T19:31:12Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "39b89c27-590f-42be-9d85-73c3eff8d0f5",
        "parentId" : "0abc44c6-c552-427e-9b33-6610111254e0",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Oh, sorry, length is actually not a constant time operation. Specialization issues made that impossible.\r\n\r\nIn that case it could be faster but should probably be benchmarked. We can do this in a subsequent PR - care to open an issue?",
        "createdAt" : "2018-11-20T19:41:10Z",
        "updatedAt" : "2018-12-05T19:31:12Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "420fd1ef-2cf9-49ba-8323-2d4244520a56",
        "parentId" : "0abc44c6-c552-427e-9b33-6610111254e0",
        "authorId" : "f28a8f34-0d9f-4cce-85ab-8a098f99584a",
        "body" : "no, never mind, I misread the code",
        "createdAt" : "2018-11-21T10:12:37Z",
        "updatedAt" : "2018-12-05T19:31:12Z",
        "lastEditedBy" : "f28a8f34-0d9f-4cce-85ab-8a098f99584a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b14e4b5ddb73c03a775d9592f4d94bf482679041",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +148,152 @@      implicit val B: ClassTag[B] = B0\n\n      val dest: Array[B] = Array.ofDim(total)\n\n      val it = chunks.iterator"
  },
  {
    "id" : "c910221f-7fe9-4af5-8c55-d2871b0c5b70",
    "prId" : 374,
    "prUrl" : "https://github.com/zio/zio/pull/374#pullrequestreview-178324899",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "166edce8-3160-49b3-ba9a-4eaf3ffc339a",
        "parentId" : null,
        "authorId" : "f28a8f34-0d9f-4cce-85ab-8a098f99584a",
        "body" : "wouldn't `Array.hashCode(toArray.toSeq)` be faster?",
        "createdAt" : "2018-11-20T15:42:54Z",
        "updatedAt" : "2018-12-05T19:31:11Z",
        "lastEditedBy" : "f28a8f34-0d9f-4cce-85ab-8a098f99584a",
        "tags" : [
        ]
      },
      {
        "id" : "c8c09440-62b5-4b04-aab2-c9c63edf2ab9",
        "parentId" : "166edce8-3160-49b3-ba9a-4eaf3ffc339a",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "```scala\r\n@ Array.hashCode(Array(1,2,3).toSeq)\r\ncmd0.sc:1: no arguments allowed for nullary method hashCode: ()Int\r\nval res0 = Array.hashCode(Array(1,2,3).toSeq)\r\n                                       ^\r\nCompilation Failed\r\n```\r\n\r\nIf you're referring to `toArray.hashCode`, that wouldn't work for implementing equality:\r\n```scala\r\n@ Array(1,2,3).hashCode\r\nres0: Int = 1331171857\r\n\r\n@ Array(1,2,3).hashCode\r\nres1: Int = 257614494\r\n```",
        "createdAt" : "2018-11-20T19:39:13Z",
        "updatedAt" : "2018-12-05T19:31:12Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "30b976ba-0c51-452c-b13b-555045ea00bc",
        "parentId" : "166edce8-3160-49b3-ba9a-4eaf3ffc339a",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Java has a method to compute hash codes of arrays:\r\n\r\n```scala\r\njava.util.Arrays.hashCode(array)\r\n```\r\n\r\nI'm not sure if `toSeq` is doing that or doing something crazy like converting the array into a vector and doing hash code on that.",
        "createdAt" : "2018-11-24T17:33:42Z",
        "updatedAt" : "2018-12-05T19:31:12Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "f5a9c401-6060-4ebf-9daa-07a428b759f2",
        "parentId" : "166edce8-3160-49b3-ba9a-4eaf3ffc339a",
        "authorId" : "f28a8f34-0d9f-4cce-85ab-8a098f99584a",
        "body" : "problem with `Arrays.hashCode` is that it has special implementations for primitives, causing this method to first having to do a check on the type parameter. Nevertheless, the resulting implementation would be much faster. Isn't there a Scala wrapper maybe?",
        "createdAt" : "2018-11-26T14:50:14Z",
        "updatedAt" : "2018-12-05T19:31:12Z",
        "lastEditedBy" : "f28a8f34-0d9f-4cce-85ab-8a098f99584a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b14e4b5ddb73c03a775d9592f4d94bf482679041",
    "line" : 229,
    "diffHunk" : "@@ -1,1 +227,231 @@  }\n\n  override final def hashCode: Int = toArray.toSeq.hashCode\n\n  /**"
  },
  {
    "id" : "9695a00c-1fa6-471b-851a-8fc0fe6dbcc6",
    "prId" : 374,
    "prUrl" : "https://github.com/zio/zio/pull/374#pullrequestreview-177410454",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f06fc59e-d70a-4c80-b3a6-b8148365e645",
        "parentId" : null,
        "authorId" : "f28a8f34-0d9f-4cce-85ab-8a098f99584a",
        "body" : "could do an early return here",
        "createdAt" : "2018-11-21T10:11:24Z",
        "updatedAt" : "2018-12-05T19:31:12Z",
        "lastEditedBy" : "f28a8f34-0d9f-4cce-85ab-8a098f99584a",
        "tags" : [
        ]
      },
      {
        "id" : "5be7528a-cf05-4968-b84e-0eb7a5755c0e",
        "parentId" : "f06fc59e-d70a-4c80-b3a6-b8148365e645",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Would that be very different than letting the while loop end due to `equal` being false?",
        "createdAt" : "2018-11-21T20:02:01Z",
        "updatedAt" : "2018-12-05T19:31:12Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "b14e4b5ddb73c03a775d9592f4d94bf482679041",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +83,87 @@\n        while (equal && i < len) {\n          equal = self(i) == that(i)\n          i += 1\n        }"
  },
  {
    "id" : "277bb899-7949-4566-9b2a-388c54331ae6",
    "prId" : 374,
    "prUrl" : "https://github.com/zio/zio/pull/374#pullrequestreview-181422280",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a460983-23f9-4022-b71a-fd2a2f3b82fa",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "What is lazy in this function? 🤔 ",
        "createdAt" : "2018-12-04T09:36:08Z",
        "updatedAt" : "2018-12-05T19:31:12Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "31cae6eb-f9eb-4bd0-a2da-4271db15b3d1",
        "parentId" : "4a460983-23f9-4022-b71a-fd2a2f3b82fa",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Lol. I think we'd be open to a better name (cc @jdegoes). It's lazy in that it is short-circuiting and will stop traversing the chunk when `pred` returns `false`.",
        "createdAt" : "2018-12-04T18:53:33Z",
        "updatedAt" : "2018-12-05T19:31:12Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "b14e4b5ddb73c03a775d9592f4d94bf482679041",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +176,180 @@  }\n\n  final def foldLeftLazy[S](z: S)(pred: S => Boolean)(f: (S, A) => S): S = {\n    val len = length\n    var s   = z"
  },
  {
    "id" : "f987aadf-e9d3-4b9b-b4a2-87db62aeadcf",
    "prId" : 374,
    "prUrl" : "https://github.com/zio/zio/pull/374#pullrequestreview-181422961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebe3ee82-ea35-4fb1-9c07-d8bfecc2152b",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "At this point you now that `size > 0` so you can as well allocate the array here",
        "createdAt" : "2018-12-04T09:43:02Z",
        "updatedAt" : "2018-12-05T19:31:12Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "72b94c52-7f15-43ea-a7bc-89660cde7c91",
        "parentId" : "ebe3ee82-ea35-4fb1-9c07-d8bfecc2152b",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Well, the problem is that you need the first element to allocate the array, as you need the classtag. This means we need to replicate the loop logic for the first element, which I'm not sure is a big win in terms of performance and maintainability.\r\n\r\nLet's leave this to benchmarking and later PRs?",
        "createdAt" : "2018-12-04T18:54:59Z",
        "updatedAt" : "2018-12-05T19:31:12Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "b14e4b5ddb73c03a775d9592f4d94bf482679041",
    "line" : 446,
    "diffHunk" : "@@ -1,1 +444,448 @@    if (size == 0) Chunk.empty\n    else {\n      var dest = null.asInstanceOf[Array[C]]\n\n      var i = 0"
  },
  {
    "id" : "96d016db-e9f4-4bc4-8794-ec98a9b1212a",
    "prId" : 374,
    "prUrl" : "https://github.com/zio/zio/pull/374#pullrequestreview-181423244",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a467ef9-b6e7-4549-89f3-f617b7d8480f",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Might be useful to do the `null` trick here too",
        "createdAt" : "2018-12-04T09:47:16Z",
        "updatedAt" : "2018-12-05T19:31:12Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "6aace032-46ca-4dae-829b-e36a7a471846",
        "parentId" : "1a467ef9-b6e7-4549-89f3-f617b7d8480f",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "`filter` actually needs to be reworked to use a strategy in which the array size doubles as needed, so leaving this to a later PR",
        "createdAt" : "2018-12-04T18:55:39Z",
        "updatedAt" : "2018-12-05T19:31:12Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "b14e4b5ddb73c03a775d9592f4d94bf482679041",
    "line" : 598,
    "diffHunk" : "@@ -1,1 +596,600 @@      val self = array\n      val len  = self.length\n      val dest = Array.ofDim[A](len)\n\n      var i = 0"
  }
]