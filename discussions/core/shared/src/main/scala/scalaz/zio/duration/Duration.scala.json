[
  {
    "id" : "17a545c7-9190-435d-b7cb-72fdff6b8a8b",
    "prId" : 516,
    "prUrl" : "https://github.com/zio/zio/pull/516#pullrequestreview-194315468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "561f65f5-ec13-42dd-bd7c-8c41139483ee",
        "parentId" : null,
        "authorId" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "body" : "Having infinite duration, this doesn't seem sound to me. `Option[Long]`? If `Long` why `-1` instead of `Long.MaxValue` - both are wrong for me (and both in different way wrong).\r\nI'm sorry for rising concerns without showing and proving that some other way is better (in every or just some cases).\r\nI have some wild idea to consider: to remove `Infinite` duration and add `Max` and `Min` (I think is around 292 years with Long and nanos).\r\nSuch `Max` is totally fine for all practical Scheduling. \r\n\r\nPros:\r\n* no chance for irritating error when someone uses `toMillis` with 3rd party API and it turns out he send -1.\r\n* sound algebra in more cases: `Max * Zero == Zero`, when `Infinity * Zero` is not well defined\r\n\r\n\r\nOf course there are still decisions to make: I still don't know if Max + Max should return Max or should `+` return Option.",
        "createdAt" : "2019-01-17T10:12:51Z",
        "updatedAt" : "2019-01-17T11:59:46Z",
        "lastEditedBy" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "tags" : [
        ]
      },
      {
        "id" : "1056af0b-cc42-4aab-8da2-7d215a2d9d12",
        "parentId" : "561f65f5-ec13-42dd-bd7c-8c41139483ee",
        "authorId" : "de89a48e-13a7-4516-a51d-dd4027b753b0",
        "body" : "I did this for two reasons:\r\n\r\na) `toNanos` and `toMillis` now represent the inverse of `apply`, which returns `Infinity` for negative integers\r\nb) `DurationSyntax` now actually works much better because `10.millis.toNanos` is now a thing\r\n\r\nIt is true that, strictly speaking, `-1` is irritating. I fully agree with that.\r\n\r\nTo be fair, I am mostly interested in the syntax module here :)\r\nAnd from my POV, it would be sufficient to allow negative durations. I am unsure why it was decided not to have those and I am not sure what the implications in the scheduling bits would be.",
        "createdAt" : "2019-01-17T11:54:51Z",
        "updatedAt" : "2019-01-17T11:59:46Z",
        "lastEditedBy" : "de89a48e-13a7-4516-a51d-dd4027b753b0",
        "tags" : [
        ]
      },
      {
        "id" : "3b923790-4fc7-40c6-b712-61622e23bbe5",
        "parentId" : "561f65f5-ec13-42dd-bd7c-8c41139483ee",
        "authorId" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "body" : "Ad a) `Finite(-1)` returns `Infinity` - that is bad IMO. I'll take care of it if I can. But I would go with John advice and return `Long.MaxValue` for `Inifinity.toMillis` and `.toNanos.\r\n\r\nMapping negatives to `Infinity` covers some of overflow problems but not all of them - but that is other discussion.",
        "createdAt" : "2019-01-18T07:33:43Z",
        "updatedAt" : "2019-01-18T07:33:43Z",
        "lastEditedBy" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "tags" : [
        ]
      },
      {
        "id" : "4b2b8756-3a51-4f9b-9b8c-f09282591f6e",
        "parentId" : "561f65f5-ec13-42dd-bd7c-8c41139483ee",
        "authorId" : "de89a48e-13a7-4516-a51d-dd4027b753b0",
        "body" : "How about this: Let's do the remapping of Infinity in an additional PR. In that, we can then also allow negative instances of `Finite`, which I find useful sometimes.",
        "createdAt" : "2019-01-18T15:53:18Z",
        "updatedAt" : "2019-01-18T15:53:18Z",
        "lastEditedBy" : "de89a48e-13a7-4516-a51d-dd4027b753b0",
        "tags" : [
        ]
      },
      {
        "id" : "5dd3f13d-6c03-4bef-871d-64634666b972",
        "parentId" : "561f65f5-ec13-42dd-bd7c-8c41139483ee",
        "authorId" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "body" : "I'm OK with this. ~However I don't have rights to approve.~",
        "createdAt" : "2019-01-18T23:02:14Z",
        "updatedAt" : "2019-01-18T23:02:53Z",
        "lastEditedBy" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "411060a4c6258c8fd1280bc207a336197efa1024",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +22,26 @@\n  /* Number of milliseconds. Negative values indicate infinity */\n  def toMillis: Long\n\n  /* Number of nanoseconds. Negative values indicate infinity */"
  },
  {
    "id" : "58679836-c7c8-44a5-96b8-7117c7d27eca",
    "prId" : 152,
    "prUrl" : "https://github.com/zio/zio/pull/152#pullrequestreview-178053369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16500dc8-bbcd-47a4-a425-4c279e28c108",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Let's make all methods in this file `final`, unless they're abstract.",
        "createdAt" : "2018-11-24T15:04:42Z",
        "updatedAt" : "2018-12-09T16:53:56Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ed678be553828069ee4b2f607c586c32e62eab6",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +7,11 @@sealed trait Duration extends Ordered[Duration] with Serializable with Product {\n\n  def +(other: Duration): Duration\n\n  def *(factor: Double): Duration"
  },
  {
    "id" : "995c3151-823b-4ef7-9616-75f9bd9587d6",
    "prId" : 152,
    "prUrl" : "https://github.com/zio/zio/pull/152#pullrequestreview-178053369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a8ec261-d97a-4347-9bb1-8d92a1645083",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Would be helpful to add `isZero` on this class.",
        "createdAt" : "2018-11-24T15:04:58Z",
        "updatedAt" : "2018-12-09T16:53:56Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ed678be553828069ee4b2f607c586c32e62eab6",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +32,36 @@  }\n\n  final case class Finite private (nanos: Long) extends Duration {\n\n    final def +(other: Duration): Duration = other match {"
  },
  {
    "id" : "dbb395c2-18e6-4843-83a4-777573e4aedf",
    "prId" : 152,
    "prUrl" : "https://github.com/zio/zio/pull/152#pullrequestreview-178053369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9e609dc-bb88-4967-a98d-3b21e72f2c57",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "To avoid the need for pattern matching on type, let's add a fold method here:\r\n\r\n```scala\r\nfinal def fold[Z](infinity: => Z, finite: Finite => Z): Z = ...\r\n```\r\n\r\nThen we can use this `fold` method instead of pattern matching.",
        "createdAt" : "2018-11-24T15:07:27Z",
        "updatedAt" : "2018-12-09T16:53:56Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ed678be553828069ee4b2f607c586c32e62eab6",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +19,23 @@    case f: Duration.Finite => finite(f)\n  }\n\n}\n"
  }
]