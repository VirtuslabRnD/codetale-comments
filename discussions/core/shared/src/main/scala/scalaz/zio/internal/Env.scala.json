[
  {
    "id" : "f9a428e5-3bd4-4d22-a9bc-567838ae8d20",
    "prId" : 439,
    "prUrl" : "https://github.com/zio/zio/pull/439#pullrequestreview-182949193",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "847820ed-2039-4284-b6a3-c5097c54d298",
        "parentId" : null,
        "authorId" : "05793de5-8cbe-49ba-90b1-8ef51f2dd854",
        "body" : "with an `unapply`.",
        "createdAt" : "2018-12-07T17:53:19Z",
        "updatedAt" : "2018-12-09T10:37:16Z",
        "lastEditedBy" : "05793de5-8cbe-49ba-90b1-8ef51f2dd854",
        "tags" : [
        ]
      },
      {
        "id" : "4000724b-7fda-48f6-8c8d-7a34602f36f8",
        "parentId" : "847820ed-2039-4284-b6a3-c5097c54d298",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Nope. `unapply` allocates memory which is undefined in the presence of, e.g. `OutOfMemoryException`.",
        "createdAt" : "2018-12-08T16:32:54Z",
        "updatedAt" : "2018-12-09T10:37:16Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c9390aff79a672c240e7ca4a69b64c0f8711871",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +30,34 @@   * Determines if a throwable is non-fatal or not.\n   */\n  def nonFatal(t: Throwable): Boolean\n\n  /**"
  },
  {
    "id" : "82f74e16-22a2-482f-a20d-e2e7c2944dc7",
    "prId" : 439,
    "prUrl" : "https://github.com/zio/zio/pull/439#pullrequestreview-182949221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36909002-5cc6-43d8-84bf-ba509c54a5c9",
        "parentId" : null,
        "authorId" : "05793de5-8cbe-49ba-90b1-8ef51f2dd854",
        "body" : "no some kind of timeout?",
        "createdAt" : "2018-12-07T18:00:37Z",
        "updatedAt" : "2018-12-09T10:37:16Z",
        "lastEditedBy" : "05793de5-8cbe-49ba-90b1-8ef51f2dd854",
        "tags" : [
        ]
      },
      {
        "id" : "b66eb914-e666-4ce0-9df6-e435cef18188",
        "parentId" : "36909002-5cc6-43d8-84bf-ba509c54a5c9",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "The `IO` can be timed out before being run. No need to duplicate that here.",
        "createdAt" : "2018-12-08T16:33:34Z",
        "updatedAt" : "2018-12-09T10:37:16Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c9390aff79a672c240e7ca4a69b64c0f8711871",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +54,58 @@    unsafeRunAsync(io, (x: ExitResult[E, A]) => result.set(x))\n\n    result.get\n  }\n"
  },
  {
    "id" : "4db6bdee-fffb-4677-904a-e632c38b6ccd",
    "prId" : 439,
    "prUrl" : "https://github.com/zio/zio/pull/439#pullrequestreview-182949256",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55f5ae00-4a03-48cc-b542-60e7e051f36e",
        "parentId" : null,
        "authorId" : "05793de5-8cbe-49ba-90b1-8ef51f2dd854",
        "body" : "```\r\nfinal def unsafeRunAsync[E, A](io: IO[E, A])(\r\n   unhandled: Cause[Any] => IO[Nothing, _],\r\n    k: ExitResult[E, A] => Unit ):\r\n```\r\nnot curried for performance?",
        "createdAt" : "2018-12-07T18:10:56Z",
        "updatedAt" : "2018-12-09T10:37:16Z",
        "lastEditedBy" : "05793de5-8cbe-49ba-90b1-8ef51f2dd854",
        "tags" : [
        ]
      },
      {
        "id" : "8fc6eb66-1737-4f26-8f8e-7004b2635d14",
        "parentId" : "55f5ae00-4a03-48cc-b542-60e7e051f36e",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Scala's \"currying\" has no impact on performance (it's not real currying, just multi-parameter list). Also hopefully `unsafeRunAsync` is not in a hot path or there are bigger problems...",
        "createdAt" : "2018-12-08T16:34:20Z",
        "updatedAt" : "2018-12-09T10:37:16Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c9390aff79a672c240e7ca4a69b64c0f8711871",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +62,66 @@    io: IO[E, A],\n    k: ExitResult[E, A] => Unit\n  ): Unit = {\n    val context = newFiberContext[E, A](reportFailure(_))\n"
  }
]